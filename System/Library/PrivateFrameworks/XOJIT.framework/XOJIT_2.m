uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  void **v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x263EF8340];
  v2 = a1 + 56;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v6);
  if (v7)
  {
    v5 = (void **)v6;
    v6 = 0;
    llvm::report_fatal_error(&v5);
  }
  result = bswap32(*(_DWORD *)(v6 + 4));
  if (*(__int16 *)(v6 + 14) != -3585)
  {
    v4 = *(unsigned __int16 *)(*(void *)v2 + 18);
    if ((v4 == 10240 || v4 == 2048) && (*(unsigned char *)(v6 + 12) & 0xF) == 2) {
      return result & 0xFFFFFFFE;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  if (*(__int16 *)(v4 + 14) == -3329) {
    return bswap32(*(_DWORD *)(v4 + 4));
  }
  else {
    return 0;
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getCommonSymbolSizeImpl(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 448))();
}

unsigned int *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v7);
  uint64_t v5 = v7;
  if (v8)
  {
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v5;
  }
  else
  {
    switch(*(unsigned char *)(v7 + 12) & 0xF)
    {
      case 0:
        *(unsigned char *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = 0;
        return result;
      case 1:
      case 5:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 2;
        goto LABEL_10;
      case 2:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 5;
        goto LABEL_10;
      case 3:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 3;
        goto LABEL_10;
      case 4:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 4;
        goto LABEL_10;
      default:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 1;
LABEL_10:
        *(_DWORD *)a3 = v6;
        break;
    }
  }
  return result;
}

unsigned int *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = a2;
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v6 = a1 + 7;
  result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v12);
  if (v13)
  {
    uint64_t v8 = (uint64_t)v12;
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v8;
  }
  else
  {
    result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(v6, v3, (uint64_t)&v10);
    if (v11)
    {
      uint64_t v9 = v10;
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v9;
    }
    else
    {
      result = (unsigned int *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolSection(a1, (uint64_t)v12, v10, a3);
      if (v11)
      {
        result = v10;
        v10 = 0;
        if (result) {
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
        }
      }
    }
    if (v13)
    {
      result = v12;
      v12 = 0;
      if (result) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::moveSectionNext(uint64_t a1, void *a2)
{
  *a2 += 40;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = llvm::object::defaultWarningHandler;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName((void *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v3, a3);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionAddress(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 12));
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((void *)(a1 + 56), (uint64_t)&v7);
  if (v8)
  {
    unsigned int v3 = v7;
    uint64_t v7 = 0;
  }
  else
  {
    unsigned int v3 = 0;
  }
  int v6 = v3;
  llvm::handleAllErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6);
  if (v6) {
    (*(void (**)(void *))(*v6 + 8))(v6);
  }
  uint64_t v4 = v7;
  if (v8)
  {
    uint64_t v7 = 0;
    if (v4) {
      (*(void (**)(void *))(*v4 + 8))(v4);
    }
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((a2 - (uint64_t)v4) >> 3);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionSize(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 20));
}

llvm::object *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContents@<X0>(llvm::object *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[1] == 0x8000000)
  {
    uint64_t v4 = *((void *)result + 2);
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = v4;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    int v6 = (void *)((char *)result + 16);
    long long v7 = *((_OWORD *)result + 2);
    v11[0] = *((_OWORD *)result + 1);
    v11[1] = v7;
    result = llvm::object::Binary::checkOffset((llvm::object *)v11, bswap32(a2[4]) + *(void *)&v11[0], bswap32(a2[5]), &v12);
    uint64_t v8 = v12;
    if (v12)
    {
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v8;
    }
    else
    {
      uint64_t v9 = *v6 + bswap32(a2[4]);
      uint64_t v10 = bswap32(a2[5]);
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)a3 = v9;
      *(void *)(a3 + 8) = v10;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 32));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isSectionCompressed(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 10) >> 3) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isSectionText(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 11) >> 2) & 1;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isSectionData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) != 0x1000000) {
    return 0;
  }
  char v2 = bswap32(*(_DWORD *)(a2 + 8));
  return (v2 & 2) != 0 && (v2 & 4) == 0;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isSectionBSS(uint64_t a1, uint64_t a2)
{
  return (*(unsigned char *)(a2 + 11) & 3) != 0 && *(_DWORD *)(a2 + 4) == 0x8000000;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 0x8000000;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isBerkeleyText(uint64_t a1, uint64_t a2)
{
  char v2 = bswap32(*(_DWORD *)(a2 + 8));
  if ((v2 & 2) == 0) {
    return 0;
  }
  if ((v2 & 4) != 0) {
    return 1;
  }
  return (v2 & 1) == 0;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isBerkeleyData(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1) & 1) != 0 || *(_DWORD *)(a2 + 4) == 0x8000000) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a2 + 11) >> 1) & 1;
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isDebugSection(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 144))(&v6);
  if (v8)
  {
    uint64_t v5 = v6;
    uint64_t v6 = 0;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v5);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    if (v8)
    {
      uint64_t result = v6;
      uint64_t v6 = 0;
      if (!result) {
        return result;
      }
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    }
    return 0;
  }
  if (v7 < 6) {
    return 0;
  }
  if (*(_DWORD *)v6 == 1650811950 && *(_WORD *)(v6 + 4) == 26485) {
    return 1;
  }
  if (v7 < 7) {
    return 0;
  }
  if (*(_DWORD *)v6 == 1701083694 && *(_DWORD *)(v6 + 3) == 1735746149) {
    return 1;
  }
  if (v7 != 10) {
    return 0;
  }
  return *(void *)v6 == 0x646E695F6264672ELL && *(_WORD *)(v6 + 8) == 30821;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::section_rel_begin(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((void *)(a1 + 56), (uint64_t)&v5);
  uint64_t result = v5;
  if ((v6 & 1) == 0) {
    return ((a2 - v5)
  }
                        / (unint64_t)(bswap32(*(unsigned __int16 *)(*(void *)(a1 + 56) + 46)) >> 16));
  uint64_t v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::section_rel_end(void *a1, _DWORD *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 272))(a1);
  int v5 = a2[1];
  if (v5 == 0x4000000 || v5 == 150994944)
  {
    RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelSection((uint64_t)a1, v4);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1 + 7, bswap32(*((_DWORD *)RelSection + 6)), (uint64_t)&v16);
    if (v17)
    {
      uint64_t v9 = v16;
      v16 = 0;
      char v11 = v9;
      *(void *)&v12.__val_ = llvm::errorToErrorCode(&v11);
      v12.__cat_ = v10;
      std::error_code::message(&v13, &v12);
      __int16 v15 = 260;
      uint64_t v14 = &v13;
      llvm::report_fatal_error((llvm *)&v14, (const llvm::Twine *)1);
    }
    return v4 | ((unint64_t)(bswap32(a2[5]) / bswap32(a2[9]) + HIDWORD(v4)) << 32);
  }
  return v4;
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocatedSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unsigned int v5 = bswap32(*(_DWORD *)(a2 + 4));
  if (v5 == 4 || v5 == 9)
  {
    uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1 + 7, bswap32(*(_DWORD *)(a2 + 28)), (uint64_t)&v10);
    uint64_t v7 = v10;
    if (v11)
    {
      *(unsigned char *)(a3 + 16) |= 1u;
    }
    else
    {
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)(a3 + 8) = a1;
    }
    *(void *)a3 = v7;
  }
  else
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*a1 + 360))(a1);
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v9;
  }
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::moveRelocationNext(uint64_t a1, uint64_t a2)
{
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelSection(a1, a2)+ 1) == 150994944)Rel = (unsigned int *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRel(a1, a2); {
  else
  }
    Rel = (unsigned int *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRela(a1, a2);
  return bswap32(*Rel);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationSymbol(uint64_t a1, uint64_t a2)
{
  RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelSection(a1, a2);
  if (*((_DWORD *)RelSection + 1) == 150994944) {
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRel(a1, a2);
  }
  else {
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRela(a1, a2);
  }
  unsigned int v6 = bswap32(*((_DWORD *)Rel + 1));
  if (v6 > 0xFF) {
    return bswap32(*((_DWORD *)RelSection + 6)) | ((unint64_t)(v6 >> 8) << 32);
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationType(uint64_t a1, uint64_t a2)
{
  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelSection(a1, a2)+ 1) == 150994944)Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRel(a1, a2); {
  else
  }
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRela(a1, a2);
  return *((unsigned __int8 *)Rel + 7);
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationTypeName(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1 + 56;
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1);
  return llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationTypeName(v4, v5, a3);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::dynamic_relocation_sections(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((void *)(a1 + 56), (uint64_t)&v43);
  if ((v45 & 1) == 0 && v44)
  {
    v37 = a2;
    unsigned int v3 = 0;
    uint64_t v4 = v43;
    uint64_t v39 = v43 + 40 * v44;
    do
    {
      if (*(_DWORD *)(v4 + 4) == 100663296)
      {
        unsigned int v5 = (int *)(bswap32(*(_DWORD *)(v4 + 16)) + *(void *)(a1 + 16));
        int v6 = *v5;
        if (*v5)
        {
          do
          {
            if (v6 == 285212672 || v6 == 117440512 || v6 == 385875968)
            {
              uint64_t v9 = bswap32(v5[1]);
              if (v3 >= v42)
              {
                char v11 = __p;
                uint64_t v12 = (v3 - __p) >> 3;
                unint64_t v13 = v12 + 1;
                if ((unint64_t)(v12 + 1) >> 61) {
LABEL_62:
                }
                  abort();
                uint64_t v14 = v42 - __p;
                if ((v42 - __p) >> 2 > v13) {
                  unint64_t v13 = v14 >> 2;
                }
                if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v15 = v13;
                }
                if (v15)
                {
                  v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v42, v15);
                  char v11 = __p;
                  unsigned int v3 = v41;
                }
                else
                {
                  v16 = 0;
                }
                char v17 = &v16[8 * v12];
                *(void *)char v17 = v9;
                uint64_t v10 = v17 + 8;
                while (v3 != v11)
                {
                  uint64_t v18 = *((void *)v3 - 1);
                  v3 -= 8;
                  *((void *)v17 - 1) = v18;
                  v17 -= 8;
                }
                __p = v17;
                v42 = &v16[8 * v15];
                if (v11) {
                  operator delete(v11);
                }
              }
              else
              {
                *(void *)unsigned int v3 = v9;
                uint64_t v10 = v3 + 8;
              }
              v41 = v10;
              unsigned int v3 = v10;
            }
            int v19 = v5[2];
            v5 += 2;
            int v6 = v19;
          }
          while (v19);
        }
      }
      v4 += 40;
    }
    while (v4 != v39);
    if (v44)
    {
      v20 = 0;
      uint64_t v21 = v43;
      uint64_t v22 = v43 + 40 * v44;
      v23 = v37 + 2;
      do
      {
        v24 = __p;
        if (__p != v41)
        {
          uint64_t v25 = bswap32(*(_DWORD *)(v21 + 12));
          while (*(void *)v24 != v25)
          {
            v24 += 8;
            if (v24 == v41)
            {
              v24 = v41;
              break;
            }
          }
        }
        if (v24 != v41)
        {
          if ((unint64_t)v20 >= *v23)
          {
            uint64_t v26 = (v20 - *v37) >> 4;
            if ((unint64_t)(v26 + 1) >> 60) {
              goto LABEL_62;
            }
            uint64_t v27 = *v23 - (void)*v37;
            uint64_t v28 = v27 >> 3;
            if (v27 >> 3 <= (unint64_t)(v26 + 1)) {
              uint64_t v28 = v26 + 1;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v28;
            }
            v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(v37 + 2), v29);
            v32 = &v30[16 * v26];
            *(void *)v32 = v21;
            *((void *)v32 + 1) = a1;
            v34 = *v37;
            v33 = v37[1];
            v35 = v32;
            if (v33 != *v37)
            {
              do
              {
                *((_OWORD *)v35 - 1) = *((_OWORD *)v33 - 1);
                v35 -= 16;
                v33 -= 16;
              }
              while (v33 != v34);
              v33 = *v37;
            }
            v20 = v32 + 16;
            *v37 = v35;
            v37[1] = v32 + 16;
            v37[2] = &v30[16 * v31];
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            *(void *)v20 = v21;
            *((void *)v20 + 1) = a1;
            v20 += 16;
          }
          v37[1] = v20;
        }
        v21 += 40;
      }
      while (v21 != v22);
    }
  }
  if (v45)
  {
    uint64_t v36 = v43;
    uint64_t v43 = 0;
    if (v36) {
      (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    }
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::section_begin(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((void *)(a1 + 56), (uint64_t)&v2);
  uint64_t result = v2;
  if (v3)
  {
    uint64_t v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::section_end(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((void *)(a1 + 56), (uint64_t)v2);
  uint64_t result = v2[0];
  if ((v3 & 1) == 0) {
    return v2[0] + 40 * v2[1];
  }
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getBytesInAddress()
{
  return 4;
}

const char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getFileFormatName(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  int v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 == 2)
  {
    signed int v5 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
    if (v5 > 182)
    {
      if (v5 > 246)
      {
        switch(v5)
        {
          case 247:
            return "elf64-bpf";
          case 251:
            return "elf64-ve";
          case 258:
            return "elf64-loongarch";
        }
      }
      else
      {
        switch(v5)
        {
          case 183:
            return "elf64-bigaarch64";
          case 224:
            return "elf64-amdgpu";
          case 243:
            return "elf64-littleriscv";
        }
      }
    }
    else if (v5 > 21)
    {
      switch(v5)
      {
        case 22:
          return "elf64-s390";
        case 43:
          return "elf64-sparc";
        case 62:
          return "elf64-x86-64";
      }
    }
    else
    {
      switch(v5)
      {
        case 3:
          return "elf64-i386";
        case 8:
          return "elf64-mips";
        case 21:
          return "elf64-powerpc";
      }
    }
    return "elf64-unknown";
  }
  if (v2 != 1) {
    llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
  }
  signed int v3 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
  if (v3 > 82)
  {
    if (v3 <= 223)
    {
      if (v3 > 104)
      {
        if (v3 == 105) {
          return "elf32-msp430";
        }
        if (v3 == 164) {
          return "elf32-hexagon";
        }
      }
      else
      {
        if (v3 == 83) {
          return "elf32-avr";
        }
        if (v3 == 94) {
          return "elf32-xtensa";
        }
      }
    }
    else if (v3 <= 243)
    {
      if (v3 == 224) {
        return "elf32-amdgpu";
      }
      if (v3 == 243) {
        return "elf32-littleriscv";
      }
    }
    else
    {
      switch(v3)
      {
        case 244:
          return "elf32-lanai";
        case 252:
          return "elf32-csky";
        case 258:
          return "elf32-loongarch";
      }
    }
    return "elf32-unknown";
  }
  if (v3 > 17)
  {
    if (v3 > 39)
    {
      if (v3 == 40) {
        return "elf32-bigarm";
      }
      if (v3 == 62) {
        return "elf32-x86-64";
      }
    }
    else
    {
      if (v3 == 18) {
        return "elf32-sparc";
      }
      if (v3 == 20) {
        return "elf32-powerpc";
      }
    }
    return "elf32-unknown";
  }
  uint64_t result = "elf32-m68k";
  switch(v3)
  {
    case 2:
      return "elf32-sparc";
    case 3:
      uint64_t result = "elf32-i386";
      break;
    case 4:
      return result;
    case 6:
      uint64_t result = "elf32-iamcu";
      break;
    case 8:
      uint64_t result = "elf32-mips";
      break;
    default:
      return "elf32-unknown";
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getArch(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  signed int v2 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
  if (v2 <= 82)
  {
    if (v2 <= 39)
    {
      uint64_t result = 15;
      switch(v2)
      {
        case 2:
        case 18:
          return 29;
        case 3:
        case 6:
          return 37;
        case 4:
          return result;
        case 8:
          int v6 = *(unsigned __int8 *)(v1 + 4);
          if (v6 != 1)
          {
            if (v6 == 2) {
              return 18;
            }
LABEL_47:
            llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
          }
          uint64_t result = 16;
          break;
        case 20:
          return 21;
        case 21:
          return 23;
        case 22:
          return 32;
        default:
          return 0;
      }
      return result;
    }
    switch(v2)
    {
      case '(':
        return 1;
      case '+':
        return 30;
      case '>':
        return 38;
    }
    return 0;
  }
  if (v2 <= 223)
  {
    if (v2 <= 104)
    {
      if (v2 == 83) {
        return 7;
      }
      if (v2 == 94) {
        return 40;
      }
    }
    else
    {
      switch(v2)
      {
        case 105:
          return 20;
        case 164:
          return 12;
        case 183:
          return 4;
      }
    }
    return 0;
  }
  switch(v2)
  {
    case 243:
      int v4 = *(unsigned __int8 *)(v1 + 4);
      if (v4 != 1)
      {
        if (v4 == 2) {
          return 28;
        }
        goto LABEL_47;
      }
      return 27;
    case 244:
      return 55;
    case 245:
    case 246:
    case 248:
    case 249:
    case 250:
      return 0;
    case 247:
      return 9;
    case 251:
      return 60;
    case 252:
      return 10;
    default:
      if (v2 != 258) {
        return 0;
      }
      int v5 = *(unsigned __int8 *)(v1 + 4);
      if (v5 != 1)
      {
        if (v5 == 2) {
          return 14;
        }
        goto LABEL_47;
      }
      uint64_t result = 13;
      break;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStartAddress@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 56);
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(void *)a2 = bswap32(*(_DWORD *)(v2 + 24));
  return result;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isRelocatableObject(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 56) + 16) == 256;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolSize(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    signed int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return bswap32(*(_DWORD *)(v4 + 8));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    signed int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 12) >> 4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolOther(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    signed int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 13);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolELFType(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    signed int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned char *)(v4 + 12) & 0xF;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionType(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 4));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionFlags(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 8));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionOffset(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 16));
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationAddend@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelSection(a1, a2)+ 1) != 0x4000000)llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(); {
  uint64_t result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRela(a1, a2);
  }
  uint64_t v7 = (int)bswap32(*((_DWORD *)result + 2));
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v7;
  return result;
}

unsigned char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getBuildAttributes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, llvm::ELFAttributeParser *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  char v5 = (void *)(a1 + 56);
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((void *)(a1 + 56), (uint64_t)&v16);
  if (v18)
  {
    uint64_t v9 = v16;
    uint64_t v16 = 0;
    *(void *)a3 = v9;
    goto LABEL_8;
  }
  if (!v17)
  {
LABEL_6:
    *(void *)a3 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = (_DWORD *)(v16 + 4);
  uint64_t v8 = 40 * v17;
  while (*v7 != 50331760)
  {
    v7 += 10;
    v8 -= 40;
    if (!v8) {
      goto LABEL_6;
    }
  }
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<char>(v5, (uint64_t)(v7 - 1), (uint64_t)&v13);
  uint64_t v10 = v13;
  if (v15) {
    goto LABEL_19;
  }
  if (*v13 != 65 || v14 == 1)
  {
    uint64_t v10 = 0;
LABEL_19:
    *(void *)a3 = v10;
    goto LABEL_8;
  }
  uint64_t result = (unsigned char *)llvm::ELFAttributeParser::parse(a2, (uint64_t)v13, v14, 0, a3);
  uint64_t v12 = *(void *)a3;
  if (v15)
  {
    uint64_t result = v13;
    unint64_t v13 = 0;
    if (result) {
      uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
    }
  }
  if (!v12) {
    goto LABEL_6;
  }
LABEL_8:
  if (v18)
  {
    uint64_t result = (unsigned char *)v16;
    uint64_t v16 = 0;
    if (result) {
      return (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getDynamicSymbolIterators@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::dynamic_symbol_begin(a1);
  unint64_t v6 = v5;
  unint64_t result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::dynamic_symbol_end(a1);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v8;
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getPlatformFlags(uint64_t a1)
{
  return bswap32(*(_DWORD *)(*(void *)(a1 + 56) + 36));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEType(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(void *)(a1 + 56) + 16)) >> 16;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEMachine(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(void *)(a1 + 56) + 18)) >> 16;
}

unsigned int *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>@<X0>(void *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1, a2, (uint64_t)&v9);
  unint64_t v8 = v9;
  if (v10)
  {
    *(unsigned char *)(a4 + 8) |= 1u;
    *(void *)a4 = v8;
  }
  else
  {
    unint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(a1, v9, a3, a4);
    if (v10)
    {
      unint64_t result = v9;
      uint64_t v9 = 0;
      if (result) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::toDRI(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((void *)(a1 + 56), (uint64_t)&v7);
    unint64_t v5 = v7;
    if (v8)
    {
      unint64_t v7 = 0;
      if (v5)
      {
        (*(void (**)(unint64_t))(*(void *)v5 + 8))(v5);
        LODWORD(v5) = 0;
      }
      a3 = 0;
    }
    else
    {
      unint64_t v5 = (a2 - v7) / 0x28;
    }
  }
  else
  {
    a3 = 0;
    LODWORD(v5) = 0;
  }
  return v5 | ((unint64_t)a3 << 32);
}

uint64_t *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    v13[0] = 0;
    v13[1] = 0;
    char v14 = 0;
LABEL_5:
    long long v9 = a4[1];
    v12[0] = *a4;
    v12[1] = v9;
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1, a2, (uint64_t)a3, v12, a5);
    if ((v14 & 1) == 0) {
      return result;
    }
    goto LABEL_8;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(a1, a3, (uint64_t)v13);
  if ((v14 & 1) == 0)
  {
    a3 = (unsigned int *)v13[0];
    goto LABEL_5;
  }
  uint64_t v11 = v13[0];
  v13[0] = 0;
  *(unsigned char *)(a5 + 8) |= 1u;
  *(void *)a5 = v11;
LABEL_8:
  unint64_t result = (uint64_t *)v13[0];
  v13[0] = 0;
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  return result;
}

uint64_t *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  long long v7 = a4[1];
  v10[0] = *a4;
  v10[1] = v7;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionIndex(a2, a3, v10, (uint64_t)&v11);
  if (v12)
  {
    long long v9 = v11;
    *(unsigned char *)(a5 + 8) |= 1u;
    *(void *)a5 = v9;
  }
  else if (v11)
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1, v11, a5);
    if (v12)
    {
      unint64_t result = v11;
      uint64_t v11 = 0;
      if (result) {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
    }
  }
  else
  {
    *(unsigned char *)(a5 + 8) &= ~1u;
    *(void *)a5 = 0;
  }
  return result;
}

uint64_t *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionIndex@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v5 = *(unsigned __int16 *)(a1 + 14);
  if (v5 != 0xFFFF)
  {
    unsigned int v6 = __rev16(v5);
    *(unsigned char *)(a4 + 8) &= ~1u;
    if ((unsigned __int16)(v6 + 256) <= 0x100u)
    {
      *(_DWORD *)a4 = 0;
      return result;
    }
    goto LABEL_6;
  }
  long long v7 = a3[1];
  v10[0] = *a3;
  v10[1] = v7;
  unint64_t result = llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)0,false>>((unint64_t)(a1 - a2) >> 4, (uint64_t *)v10, (uint64_t)&v11);
  if ((v12 & 1) == 0)
  {
    *(unsigned char *)(a4 + 8) &= ~1u;
    unsigned int v6 = v11;
LABEL_6:
    *(_DWORD *)a4 = v6;
    return result;
  }
  uint64_t v9 = v11;
  *(unsigned char *)(a4 + 8) |= 1u;
  *(void *)a4 = v9;
  return result;
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  char v8 = (unsigned int *)a1[17];
  if (v8)
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable(a1 + 7, v8, (uint64_t)&v17);
    if (v19)
    {
      char v12 = v17;
      goto LABEL_9;
    }
    uint64_t v11 = v17;
    uint64_t v10 = v18;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  *(void *)&long long v14 = v11;
  *((void *)&v14 + 1) = v10;
  char v15 = 1;
  uint64_t v16 = 0;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1 + 7, a2, a3, &v14, (uint64_t)&v17);
  char v12 = v17;
  if (v18)
  {
LABEL_9:
    *(unsigned char *)(a4 + 16) |= 1u;
    *(void *)a4 = v12;
    return result;
  }
  if (v17)
  {
    *(unsigned char *)(a4 + 16) &= ~1u;
    *(void *)a4 = v12;
    *(void *)(a4 + 8) = a1;
  }
  else
  {
    unint64_t result = (void *)(*(uint64_t (**)(void *))(*a1 + 360))(a1);
    *(unsigned char *)(a4 + 16) &= ~1u;
    *(void *)a4 = result;
    *(void *)(a4 + 8) = v13;
    if (v18)
    {
      unint64_t result = v17;
      uint64_t v17 = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelSection(uint64_t a1, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection((void *)(a1 + 56), a2, (uint64_t)&v10);
  if (v11)
  {
    signed int v3 = v10;
    uint64_t v10 = 0;
    unsigned int v5 = v3;
    *(void *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    __int16 v9 = 260;
    char v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRel(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,false>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if (v11)
  {
    signed int v3 = v10;
    uint64_t v10 = 0;
    unsigned int v5 = v3;
    *(void *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    __int16 v9 = 260;
    char v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRela(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,true>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if (v11)
  {
    signed int v3 = v10;
    uint64_t v10 = 0;
    unsigned int v5 = v3;
    *(void *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    __int16 v9 = 260;
    char v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

unsigned int *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,false>>@<X0>(void *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1, a2, (uint64_t)&v9);
  char v8 = v9;
  if (v10)
  {
    *(unsigned char *)(a4 + 8) |= 1u;
    *(void *)a4 = v8;
  }
  else
  {
    unint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,false>>(a1, v9, a3, a4);
    if (v10)
    {
      unint64_t result = v9;
      __int16 v9 = 0;
      if (result) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,false>>@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,false>>(a1, a2, (uint64_t)v22);
  if (v23)
  {
    uint64_t v8 = v22[0];
    char v9 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    if (v22[1] <= (unint64_t)a3)
    {
      uint64_t v11 = 8 * a3;
      v12[0] = "can't read an entry at 0x";
      _OWORD v12[2] = &v11;
      __int16 v13 = 3587;
      v14[0] = v12;
      v14[2] = ": it goes past the end of the section (0x";
      __int16 v15 = 770;
      uint64_t v10 = bswap32(a2[5]);
      v16[0] = v14;
      v16[2] = &v10;
      __int16 v17 = 3586;
      uint64_t v18 = v16;
      char v19 = ")";
      __int16 v20 = 770;
      int v21 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v8 = v22[0] + 8 * a3;
    char v9 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v9;
  *(void *)a4 = v8;
  return result;
}

unsigned int *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,true>>@<X0>(void *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1, a2, (uint64_t)&v9);
  uint64_t v8 = v9;
  if (v10)
  {
    *(unsigned char *)(a4 + 8) |= 1u;
    *(void *)a4 = v8;
  }
  else
  {
    unint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,true>>(a1, v9, a3, a4);
    if (v10)
    {
      unint64_t result = v9;
      char v9 = 0;
      if (result) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,true>>@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,true>>(a1, a2, (uint64_t)v22);
  if (v23)
  {
    uint64_t v8 = v22[0];
    char v9 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    if (v22[1] <= (unint64_t)a3)
    {
      uint64_t v11 = 12 * a3;
      v12[0] = "can't read an entry at 0x";
      _OWORD v12[2] = &v11;
      __int16 v13 = 3587;
      v14[0] = v12;
      v14[2] = ": it goes past the end of the section (0x";
      __int16 v15 = 770;
      uint64_t v10 = bswap32(a2[5]);
      v16[0] = v14;
      v16[2] = &v10;
      __int16 v17 = 3586;
      uint64_t v18 = v16;
      char v19 = ")";
      __int16 v20 = 770;
      int v21 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v8 = v22[0] + 12 * a3;
    char v9 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v9;
  *(void *)a4 = v8;
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,true>>@<X0>(void *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = result;
  if (a2[9] != 201326592)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v31);
    uint64_t v11 = std::string::insert(&v31, 0, "section ");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    __int16 v13 = std::string::append(&v33, " has invalid sh_entsize: expected ");
    long long v14 = (std::string *)v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v37 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v35.__r_.__value_.__r.__words[0] = 12;
    v39[0] = __p;
    v40 = &v35;
    __int16 v41 = 2564;
    v42[0] = v39;
    uint64_t v43 = (std::string *)", but got ";
    __int16 v44 = 770;
    __int16 v15 = (const char *)bswap32(a2[9]);
    char v45 = v42;
    uint64_t v46 = v15;
    __int16 v47 = 2050;
    LODWORD(v30.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v5 = bswap32(a2[5]);
  if (v5 % 0xC)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v35);
    std::error_code v6 = std::string::insert(&v35, 0, "section ");
    std::string::size_type v7 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v31, " has an invalid sh_size (");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v33;
    v37 = (std::string *)v5;
    __int16 v38 = 2052;
    v39[0] = __p;
    v40 = (std::string *)") which is not a multiple of its sh_entsize (";
    __int16 v41 = 770;
    uint64_t v10 = (std::string *)bswap32(a2[9]);
    v42[0] = v39;
    uint64_t v43 = v10;
    __int16 v44 = 2050;
    char v45 = v42;
    uint64_t v46 = ")";
    __int16 v47 = 770;
    LODWORD(v30.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v16 = bswap32(a2[4]);
  if (__CFADD__(v16, v5))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v35);
    __int16 v17 = std::string::insert(&v35, 0, "section ");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    char v19 = std::string::append(&v31, " has a sh_offset (0x");
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v30.__r_.__value_.__r.__words[0] = v16;
    __p[0] = &v33;
    v37 = &v30;
    __int16 v38 = 3588;
    v39[0] = __p;
    v40 = (std::string *)") + sh_size (0x";
    __int16 v41 = 770;
    v29.__r_.__value_.__r.__words[0] = v5;
    v42[0] = v39;
    uint64_t v43 = &v29;
    __int16 v44 = 3586;
    char v45 = v42;
    uint64_t v46 = ") that cannot be represented";
    __int16 v47 = 770;
    LODWORD(v28) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (result[1] < (unint64_t)(v5 + v16))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v29);
    int v21 = std::string::insert(&v29, 0, "section ");
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    char v23 = std::string::append(&v30, " has a sh_offset (0x");
    std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v27 = v5;
    std::string::size_type v28 = v16;
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    v31.__r_.__value_.__r.__words[2] = (std::string::size_type)&v28;
    __int16 v32 = 3588;
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    v33.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    __int16 v34 = 770;
    __p[0] = &v33;
    v37 = (std::string *)&v27;
    __int16 v38 = 3586;
    v39[0] = __p;
    v40 = (std::string *)") that is greater than the file size (0x";
    __int16 v41 = 770;
    uint64_t v26 = v4[1];
    v42[0] = v39;
    uint64_t v43 = (std::string *)&v26;
    __int16 v44 = 3586;
    char v45 = v42;
    uint64_t v46 = ")";
    __int16 v47 = 770;
    int v48 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v25 = *result + v16;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v25;
  *(void *)(a3 + 8) = v5 / 0xC;
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationTypeName(uint64_t a1, unsigned int a2, void *a3)
{
  unsigned int v5 = *(unsigned __int16 *)(*(void *)a1 + 18);
  if (v5 == 2048 && *(unsigned char *)(*(void *)a1 + 4) == 2)
  {
    ELFRelocationTypeName = (char *)llvm::object::getELFRelocationTypeName((llvm::object *)8, a2);
    llvm::SmallVectorImpl<char>::append<char const*,void>(a3, ELFRelocationTypeName, &ELFRelocationTypeName[v8]);
    std::string::size_type v9 = (char *)llvm::object::getELFRelocationTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*(void *)a1 + 18)) >> 16), BYTE1(a2));
    uint64_t v11 = v10;
    llvm::SmallVectorImpl<char>::append(a3, 1uLL, 47);
    llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v9, &v9[v11]);
    std::string::size_type v12 = llvm::object::getELFRelocationTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*(void *)a1 + 18)) >> 16), BYTE2(a2));
    uint64_t v14 = v13;
    llvm::SmallVectorImpl<char>::append(a3, 1uLL, 47);
    __int16 v15 = (char *)&v12[v14];
    std::string::size_type v16 = a3;
    __int16 v17 = (char *)v12;
  }
  else
  {
    std::string::size_type v18 = llvm::object::getELFRelocationTypeName((llvm::object *)__rev16(v5), a2);
    __int16 v15 = (char *)&v18[v19];
    std::string::size_type v16 = a3;
    __int16 v17 = (char *)v18;
  }
  return llvm::SmallVectorImpl<char>::append<char const*,void>(v16, v17, v15);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::dynamic_symbol_begin(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  unsigned int v2 = v1 && bswap32(*(_DWORD *)(v1 + 20)) > 0xF;
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::dynamic_symbol_end(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (v1) {
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::toDRI(a1, v1, bswap32(*(_DWORD *)(v1 + 20)) >> 4);
  }
  else {
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::dynamic_symbol_begin(a1);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::ELFObjectFile(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 32);
  v9[0] = *(_OWORD *)(a2 + 16);
  v9[1] = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::vector(__p, a2 + 72);
  v8[1] = 0;
  v8[2] = 0;
  v8[0] = v9;
  if (*(void *)(a2 + 104)) {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)v8, a2 + 96);
  }
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::ELFObjectFile(a1, v9, (uint64_t)&v6, *(void *)(a2 + 120), *(void *)(a2 + 128), *(void *)(a2 + 136));
  if (v8[0] != v9) {
    free(v8[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

uint64_t *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::create(*(void *)a1, *(void *)(a1 + 8), (uint64_t)&v22);
  if ((v26 & 1) != 0 && (uint64_t v6 = v22, *(void *)&v22 = 0, v6))
  {
    *(unsigned char *)(a3 + 152) |= 1u;
    *(void *)a3 = v6;
  }
  else
  {
    long long v7 = *(_OWORD *)(a1 + 16);
    v16[0] = *(_OWORD *)a1;
    v16[1] = v7;
    long long v12 = v22;
    *(_OWORD *)__p = v23;
    long long v23 = 0uLL;
    uint64_t v8 = v24;
    uint64_t v24 = 0;
    uint64_t v14 = v8;
    v15[0] = v16;
    v15[1] = 0;
    v15[2] = 0;
    if (v25[1]) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)v15, v25);
    }
    llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::ELFObjectFile((uint64_t)v17, v16, (uint64_t)&v12, 0, 0, 0);
    if (v15[0] != v16) {
      free(v15[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (a2
      && (llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::initContent((uint64_t)v17, &v11), (uint64_t v9 = v11) != 0))
    {
      *(unsigned char *)(a3 + 152) |= 1u;
      *(void *)a3 = v9;
    }
    else
    {
      *(unsigned char *)(a3 + 152) &= ~1u;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::ELFObjectFile(a3, (uint64_t)v17);
    }
    v17[0] = &unk_270DBFBA8;
    if (v20 != &v21) {
      free(v20);
    }
    if (v18)
    {
      uint64_t v19 = v18;
      operator delete(v18);
    }
  }
  return llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::~Expected((uint64_t *)&v22);
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::initContent@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((void *)(a1 + 56), (uint64_t)&v10);
  uint64_t v5 = v10;
  if ((v12 & 1) == 0)
  {
    if (v11)
    {
      uint64_t v6 = v11 << 6;
      long long v7 = (unsigned int *)(v10 + 4);
      while (1)
      {
        unsigned int v8 = bswap32(*v7);
        if (v8 == 2) {
          break;
        }
        if (v8 != 18)
        {
          if (v8 != 11) {
            goto LABEL_11;
          }
          uint64_t v9 = (void *)(a1 + 120);
          if (*(void *)(a1 + 120)) {
            goto LABEL_11;
          }
LABEL_10:
          *uint64_t v9 = v7 - 1;
          goto LABEL_11;
        }
        uint64_t v9 = (void *)(a1 + 136);
        if (!*(void *)(a1 + 136)) {
          goto LABEL_10;
        }
LABEL_11:
        v7 += 16;
        v6 -= 64;
        if (!v6) {
          goto LABEL_15;
        }
      }
      uint64_t v9 = (void *)(a1 + 128);
      if (*(void *)(a1 + 128)) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v5 = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::~ELFObjectFile(void *a1)
{
  *a1 = &unk_270DBFBA8;
  unsigned int v2 = (void *)a1[12];
  if (v2 != a1 + 15) {
    free(v2);
  }
  signed int v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::ELFObjectFile(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v12 = *a2;
  long long v11 = a2[1];
  *(_DWORD *)(a1 + 8) = 16;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  *(void *)a1 = &unk_270DBFBA8;
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a3;
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>::vector((void *)(a1 + 72), a3 + 16);
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  if (*(void *)(a3 + 48)) {
    llvm::SmallVectorImpl<char>::operator=(a1 + 96, a3 + 40);
  }
  *(void *)(a1 + 120) = a4;
  *(void *)(a1 + 128) = a5;
  *(void *)(a1 + 136) = a6;
  return a1;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::~ELFObjectFile(void *a1)
{
  *a1 = &unk_270DBFBA8;
  unsigned int v2 = (void *)a1[12];
  if (v2 != a1 + 15) {
    free(v2);
  }
  signed int v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x263E500B0);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::moveSymbolNext(uint64_t a1, uint64_t a2)
{
}

unint64_t *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolFlags@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 7;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v31);
  unsigned int v8 = (unint64_t *)v31;
  if (v32)
  {
    uint64_t v31 = 0;
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v8;
    goto LABEL_87;
  }
  unsigned int v9 = *(unsigned __int8 *)(v31 + 4);
  if ((v9 & 0xF0) == 0x20) {
    int v10 = 6;
  }
  else {
    int v10 = 2;
  }
  if (v9 < 0x10) {
    int v10 = 0;
  }
  if (*(__int16 *)(v31 + 6) == -3585) {
    int v11 = v10 | 8;
  }
  else {
    int v11 = v10;
  }
  long long v12 = (unint64_t *)a1[16];
  if (v12)
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(v6, v12, (uint64_t)&v28);
    uint64_t v13 = v28;
    if (v30) {
      goto LABEL_33;
    }
    BOOL v14 = v8 == v28;
  }
  else
  {
    BOOL v14 = 0;
  }
  __int16 v15 = (unint64_t *)a1[15];
  if (v15)
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(v6, v15, (uint64_t)&v28);
    uint64_t v13 = v28;
    if ((v30 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_33:
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v13;
    goto LABEL_87;
  }
  uint64_t v13 = 0;
LABEL_17:
  int v16 = v8 == v13 || v14;
  if ((v9 & 0xF) - 3 < 2) {
    int v16 = 1;
  }
  if (v16) {
    int v17 = v11 | 0x80;
  }
  else {
    int v17 = v11;
  }
  int v18 = *(unsigned __int16 *)(*v6 + 18);
  switch(v18)
  {
    case 46848:
      unint64_t result = (*(void *(**)(unint64_t **__return_ptr, void *, uint64_t))(*a1 + 80))(&v28, a1, a2);
      if (v30)
      {
        uint64_t v27 = v28;
        std::string::size_type v28 = 0;
        llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v27);
        unint64_t result = v27;
        if (v27) {
          unint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*v27 + 8))(v27);
        }
        if (v30)
        {
          unint64_t result = v28;
          std::string::size_type v28 = 0;
          if (result) {
            unint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
          }
        }
        int v19 = v17;
      }
      else
      {
        int v19 = v17;
        if (v29 >= 2)
        {
          int v19 = v11 | 0x80;
          if (*(_WORD *)v28 != 25636)
          {
            if (*(_WORD *)v28 == 30756) {
              int v19 = v11 | 0x80;
            }
            else {
              int v19 = v17;
            }
          }
        }
      }
LABEL_68:
      int v17 = v19;
      break;
    case 10240:
      unint64_t result = (*(void *(**)(unint64_t **__return_ptr, void *, uint64_t))(*a1 + 80))(&v28, a1, a2);
      if (v30)
      {
        uint64_t v27 = v28;
        std::string::size_type v28 = 0;
        llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v27);
        unint64_t result = v27;
        if (v27) {
          unint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*v27 + 8))(v27);
        }
        if (v30)
        {
          unint64_t result = v28;
          std::string::size_type v28 = 0;
          if (result) {
            unint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
          }
        }
        int v19 = v17;
      }
      else
      {
        if (!v29) {
          goto LABEL_65;
        }
        int v19 = v17;
        if (v29 == 1) {
          goto LABEL_66;
        }
        if (*(_WORD *)v28 == 25636)
        {
LABEL_65:
          int v19 = v11 | 0x80;
        }
        else
        {
          int v19 = v11 | 0x80;
          if (*(_WORD *)v28 != 29732)
          {
            if (*(_WORD *)v28 == 24868) {
              int v19 = v11 | 0x80;
            }
            else {
              int v19 = v17;
            }
          }
        }
      }
LABEL_66:
      if ((*((unsigned char *)v8 + 4) & 0xF) == 2)
      {
        int v17 = *((_WORD *)v8 + 7) & 0x100 | v19;
        break;
      }
      goto LABEL_68;
    case 62208:
      unint64_t result = (*(void *(**)(unint64_t **__return_ptr, void *, uint64_t))(*a1 + 80))(&v28, a1, a2);
      if (v30)
      {
        uint64_t v20 = (uint64_t)v28;
        std::string::size_type v28 = 0;
        char v26 = (unint64_t *)v20;
        llvm::consumeError((uint64_t *)&v26);
        unint64_t result = v26;
        if (v26) {
          unint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*v26 + 8))(v26);
        }
      }
      else if (!v29)
      {
        int v17 = v11 | 0x80;
      }
      if (v30)
      {
        unint64_t result = v28;
        std::string::size_type v28 = 0;
        if (result) {
          unint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
        }
      }
      break;
  }
  if (*((_WORD *)v8 + 3))
  {
    unsigned int v21 = *((unsigned __int8 *)v8 + 4);
    int v22 = v21 & 0xF;
    if (v22 != 5 && *((unsigned __int16 *)v8 + 3) != 62207) {
      goto LABEL_75;
    }
  }
  else
  {
    v17 |= 1u;
    unsigned int v21 = *((unsigned __int8 *)v8 + 4);
    int v22 = v21 & 0xF;
    if (v22 != 5) {
      goto LABEL_75;
    }
  }
  v17 |= 0x10u;
LABEL_75:
  unsigned int v23 = v21 >> 4;
  if (v23 <= 0xA && ((1 << v23) & 0x406) != 0)
  {
    int v24 = *((unsigned char *)v8 + 5) & 3;
    if (v24 == 3 || (*((unsigned char *)v8 + 5) & 3) == 0) {
      v17 |= 0x40u;
    }
  }
  else
  {
    int v24 = *((unsigned char *)v8 + 5) & 3;
  }
  if (v22 == 10) {
    int v25 = v17 | 0x20;
  }
  else {
    int v25 = v17;
  }
  if (v24 == 2) {
    v25 |= 0x200u;
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v25;
LABEL_87:
  if (v32)
  {
    unint64_t result = (unint64_t *)v31;
    uint64_t v31 = 0;
    if (result) {
      return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::symbol_begin(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1) {
    unsigned int v2 = bswap64(*(void *)(v1 + 32)) > 0x17;
  }
  else {
    unsigned int v2 = 0;
  }
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::symbol_end(void *a1)
{
  uint64_t v1 = a1[16];
  if (v1) {
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::toDRI((uint64_t)a1, v1, bswap64(*(void *)(v1 + 32)) / 0x18);
  }
  else {
    return (*(uint64_t (**)(void *))(*a1 + 48))(a1);
  }
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::is64Bit(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 376))(a1) == 8;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolName(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v32);
  if (v33)
  {
    int v10 = v32;
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v10;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(v6, a2, (uint64_t)&v30);
  uint64_t v7 = v30;
  if ((v31 & 1) == 0)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(v6, bswap32(*(_DWORD *)(v30 + 40)), (uint64_t)&v28);
    uint64_t v8 = v28;
    if (v29)
    {
      uint64_t v28 = 0;
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v8;
LABEL_37:
      if (v31)
      {
        uint64_t v18 = v30;
        uint64_t v30 = 0;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
      }
      goto LABEL_40;
    }
    *(void *)&long long v24 = llvm::object::defaultWarningHandler;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v24, (uint64_t)v26);
    if (v27)
    {
      uint64_t v11 = v26[0];
      v26[0] = 0;
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v11;
LABEL_34:
      if (v29)
      {
        uint64_t v17 = v28;
        uint64_t v28 = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
      }
      goto LABEL_37;
    }
    llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getName(v32, v26[0], v26[1], (uint64_t)&v24);
    char v9 = v25;
    if ((v25 & 1) != 0 || !*((void *)&v24 + 1))
    {
      if ((v32[1] & 0xF) == 3)
      {
        (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*a1 + 128))(&v21, a1, a2);
        if ((v23 & 1) == 0)
        {
          if (v25)
          {
            uint64_t v12 = v24;
            *(void *)&long long v24 = 0;
          }
          else
          {
            uint64_t v12 = 0;
          }
          uint64_t v20 = v12;
          llvm::consumeError(&v20);
          if (v20) {
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 144))(v22, v21);
          if (v23)
          {
            uint64_t v14 = v21;
            uint64_t v21 = 0;
            if (v14) {
              (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
            }
          }
          if (v25)
          {
            uint64_t v15 = v24;
            *(void *)&long long v24 = 0;
            if (v15) {
              (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
            }
          }
          goto LABEL_31;
        }
        uint64_t v13 = v21;
        uint64_t v21 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
        char v9 = v25;
      }
      *(unsigned char *)(a3 + 16) = *(unsigned char *)(a3 + 16) & 0xFE | v9 & 1;
      if (v9)
      {
        *(void *)a3 = v24;
        goto LABEL_31;
      }
    }
    else
    {
      *(unsigned char *)(a3 + 16) &= ~1u;
    }
    *(_OWORD *)a3 = v24;
LABEL_31:
    if (v27)
    {
      uint64_t v16 = v26[0];
      v26[0] = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    goto LABEL_34;
  }
  uint64_t v30 = 0;
  *(unsigned char *)(a3 + 16) |= 1u;
  *(void *)a3 = v7;
LABEL_40:
  if (v33)
  {
    int v19 = v32;
    char v32 = 0;
    if (v19) {
      (*(void (**)(unsigned int *))(*(void *)v19 + 8))(v19);
    }
  }
}

unint64_t *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v25);
  if (v26)
  {
    uint64_t v8 = v25;
    goto LABEL_10;
  }
  uint64_t v7 = v25;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v23);
  uint64_t v8 = v23;
  if (v24)
  {
LABEL_10:
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v8;
    return result;
  }
  unsigned int v9 = bswap32(*(unsigned __int16 *)(v23 + 6)) >> 16;
  if (v9 - 65521 < 2 || v9 == 0)
  {
    *(unsigned char *)(a3 + 8) &= ~1u;
    *(void *)a3 = v7;
    return result;
  }
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection((void *)(a1 + 56), a2, (uint64_t)&v21);
  if (v22)
  {
    uint64_t v14 = v21;
    uint64_t v21 = 0;
    goto LABEL_18;
  }
  if (*(_WORD *)(*(void *)(a1 + 56) + 16) == 256)
  {
    uint64_t v11 = *(void *)(a1 + 136);
    if (v11)
    {
      unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable((void *)(a1 + 56), v11, (uint64_t)&v18);
      if (v20)
      {
        uint64_t v14 = v18;
        goto LABEL_18;
      }
      uint64_t v13 = v18;
      uint64_t v12 = v19;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    *(void *)&long long v15 = v13;
    *((void *)&v15 + 1) = v12;
    char v16 = 1;
    uint64_t v17 = 0;
    unint64_t result = (unint64_t *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection((void *)(a1 + 56), v23, v21, &v15, (uint64_t)&v18);
    uint64_t v14 = v18;
    if ((v19 & 1) == 0)
    {
      if (v18) {
        v7 += bswap64(v18[2]);
      }
      goto LABEL_23;
    }
LABEL_18:
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v14;
    goto LABEL_24;
  }
LABEL_23:
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v7;
LABEL_24:
  if (v22)
  {
    unint64_t result = v21;
    uint64_t v21 = 0;
    if (result) {
      unint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
    }
  }
  if (v24)
  {
    unint64_t result = (unint64_t *)v23;
    uint64_t v23 = 0;
    if (result) {
      return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 56;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v6);
  if (v7)
  {
    uint64_t v5 = (void **)v6;
    uint64_t v6 = 0;
    llvm::report_fatal_error(&v5);
  }
  unint64_t result = bswap64(*(void *)(v6 + 8));
  if (*(__int16 *)(v6 + 6) != -3585)
  {
    int v4 = *(unsigned __int16 *)(*(void *)v2 + 18);
    if ((v4 == 10240 || v4 == 2048) && (*(unsigned char *)(v6 + 4) & 0xF) == 2) {
      result &= ~1uLL;
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    signed int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  if (*(__int16 *)(v4 + 6) == -3329) {
    return bswap64(*(void *)(v4 + 8));
  }
  else {
    return 0;
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getCommonSymbolSizeImpl(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 448))();
}

unint64_t *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v7);
  uint64_t v5 = v7;
  if (v8)
  {
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v5;
  }
  else
  {
    switch(*(unsigned char *)(v7 + 4) & 0xF)
    {
      case 0:
        *(unsigned char *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = 0;
        return result;
      case 1:
      case 5:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 2;
        goto LABEL_10;
      case 2:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 5;
        goto LABEL_10;
      case 3:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 3;
        goto LABEL_10;
      case 4:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 4;
        goto LABEL_10;
      default:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 1;
LABEL_10:
        *(_DWORD *)a3 = v6;
        break;
    }
  }
  return result;
}

unint64_t *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = a2;
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v6 = a1 + 7;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v12);
  if (v13)
  {
    uint64_t v8 = (uint64_t)v12;
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v8;
  }
  else
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(v6, v3, (uint64_t)&v10);
    if (v11)
    {
      uint64_t v9 = v10;
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v9;
    }
    else
    {
      unint64_t result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolSection(a1, (uint64_t)v12, v10, a3);
      if (v11)
      {
        unint64_t result = v10;
        int v10 = 0;
        if (result) {
          unint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
        }
      }
    }
    if (v13)
    {
      unint64_t result = v12;
      uint64_t v12 = 0;
      if (result) {
        return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::moveSectionNext(uint64_t a1, void *a2)
{
  *a2 += 64;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionName(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = llvm::object::defaultWarningHandler;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionName((void *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v3, a3);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionAddress(uint64_t a1, uint64_t a2)
{
  return bswap64(*(void *)(a2 + 16));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((void *)(a1 + 56), (uint64_t)&v7);
  if (v8)
  {
    unsigned int v3 = v7;
    uint64_t v7 = 0;
  }
  else
  {
    unsigned int v3 = 0;
  }
  int v6 = v3;
  llvm::handleAllErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6);
  if (v6) {
    (*(void (**)(void *))(*v6 + 8))(v6);
  }
  uint64_t v4 = v7;
  if (v8)
  {
    uint64_t v7 = 0;
    if (v4) {
      (*(void (**)(void *))(*v4 + 8))(v4);
    }
  }
  return (a2 - (uint64_t)v4) >> 6;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionSize(uint64_t a1, uint64_t a2)
{
  return bswap64(*(void *)(a2 + 32));
}

llvm::object *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContents@<X0>(llvm::object *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2 + 4) == 0x8000000)
  {
    uint64_t v4 = *((void *)result + 2);
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = v4;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    int v6 = (void *)((char *)result + 16);
    long long v7 = *((_OWORD *)result + 2);
    v11[0] = *((_OWORD *)result + 1);
    v11[1] = v7;
    unint64_t result = llvm::object::Binary::checkOffset((llvm::object *)v11, bswap64(*(void *)(a2 + 24)) + *(void *)&v11[0], bswap64(*(void *)(a2 + 32)), &v12);
    uint64_t v8 = v12;
    if (v12)
    {
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v8;
    }
    else
    {
      unint64_t v9 = *v6 + bswap64(*(void *)(a2 + 24));
      unint64_t v10 = bswap64(*(void *)(a2 + 32));
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)a3 = v9;
      *(void *)(a3 + 8) = v10;
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  return bswap64(*(void *)(a2 + 48));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isSectionCompressed(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 14) >> 3) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isSectionText(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 15) >> 2) & 1;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isSectionData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) != 0x1000000) {
    return 0;
  }
  char v2 = bswap64(*(void *)(a2 + 8));
  return (v2 & 2) != 0 && (v2 & 4) == 0;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isSectionBSS(uint64_t a1, uint64_t a2)
{
  return (*(unsigned char *)(a2 + 15) & 3) != 0 && *(_DWORD *)(a2 + 4) == 0x8000000;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 0x8000000;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isBerkeleyText(uint64_t a1, uint64_t a2)
{
  char v2 = bswap64(*(void *)(a2 + 8));
  if ((v2 & 2) == 0) {
    return 0;
  }
  if ((v2 & 4) != 0) {
    return 1;
  }
  return (v2 & 1) == 0;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isBerkeleyData(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1) & 1) != 0 || *(_DWORD *)(a2 + 4) == 0x8000000) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a2 + 15) >> 1) & 1;
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isDebugSection(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 144))(&v6);
  if (v8)
  {
    uint64_t v5 = v6;
    uint64_t v6 = 0;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v5);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    if (v8)
    {
      uint64_t result = v6;
      uint64_t v6 = 0;
      if (!result) {
        return result;
      }
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    }
    return 0;
  }
  if (v7 < 6) {
    return 0;
  }
  if (*(_DWORD *)v6 == 1650811950 && *(_WORD *)(v6 + 4) == 26485) {
    return 1;
  }
  if (v7 < 7) {
    return 0;
  }
  if (*(_DWORD *)v6 == 1701083694 && *(_DWORD *)(v6 + 3) == 1735746149) {
    return 1;
  }
  if (v7 != 10) {
    return 0;
  }
  return *(void *)v6 == 0x646E695F6264672ELL && *(_WORD *)(v6 + 8) == 30821;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::section_rel_begin(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((void *)(a1 + 56), (uint64_t)&v5);
  uint64_t result = v5;
  if ((v6 & 1) == 0) {
    return ((a2 - v5)
  }
                        / (unint64_t)(bswap32(*(unsigned __int16 *)(*(void *)(a1 + 56) + 58)) >> 16));
  uint64_t v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::section_rel_end(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 272))(a1);
  int v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 0x4000000 || v5 == 150994944)
  {
    RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelSection((uint64_t)a1, v4);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1 + 7, bswap32(*((_DWORD *)RelSection + 10)), (uint64_t)&v16);
    if (v17)
    {
      uint64_t v9 = v16;
      char v16 = 0;
      char v11 = v9;
      *(void *)&v12.__val_ = llvm::errorToErrorCode(&v11);
      v12.__cat_ = v10;
      std::error_code::message(&v13, &v12);
      __int16 v15 = 260;
      uint64_t v14 = &v13;
      llvm::report_fatal_error((llvm *)&v14, (const llvm::Twine *)1);
    }
    v4 += (bswap64(*(void *)(a2 + 32)) / bswap64(*(void *)(a2 + 56))) << 32;
  }
  return v4;
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocatedSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unsigned int v5 = bswap32(*(_DWORD *)(a2 + 4));
  if (v5 == 4 || v5 == 9)
  {
    uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1 + 7, bswap32(*(_DWORD *)(a2 + 44)), (uint64_t)&v10);
    uint64_t v7 = v10;
    if (v11)
    {
      *(unsigned char *)(a3 + 16) |= 1u;
    }
    else
    {
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)(a3 + 8) = a1;
    }
    *(void *)a3 = v7;
  }
  else
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*a1 + 360))(a1);
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v9;
  }
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::moveRelocationNext(uint64_t a1, uint64_t a2)
{
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelSection(a1, a2)+ 1) == 150994944)Rel = (unint64_t *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRel(a1, a2); {
  else
  }
    Rel = (unint64_t *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRela(a1, a2);
  return bswap64(*Rel);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationSymbol(void *a1, uint64_t a2)
{
  RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelSection((uint64_t)a1, a2);
  if (*((_DWORD *)RelSection + 1) == 150994944) {
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRel((uint64_t)a1, a2);
  }
  else {
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRela((uint64_t)a1, a2);
  }
  uint64_t v6 = a1[7];
  if (*(_WORD *)(v6 + 18) == 2048 && *(unsigned char *)(v6 + 4) == 2)
  {
    unint64_t v7 = bswap64((unint64_t)Rel[1]);
    if (*(unsigned char *)(v6 + 5) == 1) {
      unint64_t v8 = v7 << 32;
    }
    else {
      unint64_t v8 = v7;
    }
  }
  else
  {
    unint64_t v8 = bswap64((unint64_t)Rel[1]);
  }
  if (HIDWORD(v8)) {
    return v8 & 0xFFFFFFFF00000000 | bswap32(*((_DWORD *)RelSection + 10));
  }
  else {
    return (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationType(uint64_t a1, uint64_t a2)
{
  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelSection(a1, a2)+ 1) == 150994944)Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRel(a1, a2); {
  else
  }
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRela(a1, a2);
  uint64_t v5 = *(void *)(a1 + 56);
  if (*(_WORD *)(v5 + 18) == 2048 && *(unsigned char *)(v5 + 4) == 2)
  {
    unint64_t v6 = bswap64((unint64_t)Rel[1]);
    BOOL v7 = *(unsigned char *)(v5 + 5) == 1;
    uint64_t v8 = (v6 >> 24) & 0xFF0000 | HIBYTE(v6) | (v6 >> 8) & 0xFF000000 | (v6 >> 40) & 0xFF00;
    if (!v7) {
      LODWORD(v8) = v6;
    }
  }
  else
  {
    LODWORD(v8) = bswap64((unint64_t)Rel[1]);
  }
  return v8;
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationTypeName(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1 + 56;
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1);
  return llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationTypeName(v4, v5, a3);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::dynamic_relocation_sections(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __p = 0;
  __int16 v41 = 0;
  v42 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((void *)(a1 + 56), (uint64_t)&v43);
  if ((v45 & 1) == 0 && v44)
  {
    v37 = a2;
    unsigned int v3 = 0;
    uint64_t v4 = v43;
    uint64_t v39 = v43 + (v44 << 6);
    do
    {
      if (*(_DWORD *)(v4 + 4) == 100663296)
      {
        unsigned int v5 = (uint64_t *)(bswap64(*(void *)(v4 + 24)) + *(void *)(a1 + 16));
        uint64_t v6 = *v5;
        if (*v5)
        {
          do
          {
            if (v6 == 0x1100000000000000 || v6 == 0x700000000000000 || v6 == 0x1700000000000000)
            {
              unint64_t v9 = bswap64(v5[1]);
              if (v3 >= v42)
              {
                char v11 = __p;
                uint64_t v12 = v3 - __p;
                unint64_t v13 = v12 + 1;
                if ((unint64_t)(v12 + 1) >> 61) {
LABEL_62:
                }
                  abort();
                uint64_t v14 = (char *)v42 - (char *)__p;
                if (((char *)v42 - (char *)__p) >> 2 > v13) {
                  unint64_t v13 = v14 >> 2;
                }
                if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v15 = v13;
                }
                if (v15)
                {
                  char v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v42, v15);
                  char v11 = __p;
                  unsigned int v3 = v41;
                }
                else
                {
                  char v16 = 0;
                }
                char v17 = (unint64_t *)&v16[8 * v12];
                *char v17 = v9;
                uint64_t v10 = v17 + 1;
                while (v3 != v11)
                {
                  unint64_t v18 = *--v3;
                  *--char v17 = v18;
                }
                __p = v17;
                v42 = (unint64_t *)&v16[8 * v15];
                if (v11) {
                  operator delete(v11);
                }
              }
              else
              {
                *unsigned int v3 = v9;
                uint64_t v10 = v3 + 1;
              }
              __int16 v41 = v10;
              unsigned int v3 = v10;
            }
            uint64_t v19 = v5[2];
            v5 += 2;
            uint64_t v6 = v19;
          }
          while (v19);
        }
      }
      v4 += 64;
    }
    while (v4 != v39);
    if (v44)
    {
      char v20 = 0;
      uint64_t v21 = v43;
      uint64_t v22 = v43 + (v44 << 6);
      uint64_t v23 = v37 + 2;
      do
      {
        char v24 = __p;
        if (__p != v41)
        {
          unint64_t v25 = bswap64(*(void *)(v21 + 16));
          while (*v24 != v25)
          {
            if (++v24 == v41)
            {
              char v24 = v41;
              break;
            }
          }
        }
        if (v24 != v41)
        {
          if ((unint64_t)v20 >= *v23)
          {
            uint64_t v26 = (v20 - *v37) >> 4;
            if ((unint64_t)(v26 + 1) >> 60) {
              goto LABEL_62;
            }
            uint64_t v27 = *v23 - (void)*v37;
            uint64_t v28 = v27 >> 3;
            if (v27 >> 3 <= (unint64_t)(v26 + 1)) {
              uint64_t v28 = v26 + 1;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v28;
            }
            uint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(v37 + 2), v29);
            char v32 = &v30[16 * v26];
            *(void *)char v32 = v21;
            *((void *)v32 + 1) = a1;
            uint64_t v34 = *v37;
            char v33 = v37[1];
            std::string v35 = v32;
            if (v33 != *v37)
            {
              do
              {
                *((_OWORD *)v35 - 1) = *((_OWORD *)v33 - 1);
                v35 -= 16;
                v33 -= 16;
              }
              while (v33 != v34);
              char v33 = *v37;
            }
            char v20 = v32 + 16;
            std::string *v37 = v35;
            v37[1] = v32 + 16;
            v37[2] = &v30[16 * v31];
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            *(void *)char v20 = v21;
            *((void *)v20 + 1) = a1;
            v20 += 16;
          }
          v37[1] = v20;
        }
        v21 += 64;
      }
      while (v21 != v22);
    }
  }
  if (v45)
  {
    uint64_t v36 = v43;
    uint64_t v43 = 0;
    if (v36) {
      (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    }
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::section_begin(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((void *)(a1 + 56), (uint64_t)&v2);
  uint64_t result = v2;
  if (v3)
  {
    uint64_t v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::section_end(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((void *)(a1 + 56), (uint64_t)v2);
  uint64_t result = v2[0];
  if ((v3 & 1) == 0) {
    return v2[0] + (v2[1] << 6);
  }
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getBytesInAddress()
{
  return 8;
}

const char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getFileFormatName(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  int v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 == 2)
  {
    signed int v5 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
    if (v5 > 182)
    {
      if (v5 > 246)
      {
        switch(v5)
        {
          case 247:
            return "elf64-bpf";
          case 251:
            return "elf64-ve";
          case 258:
            return "elf64-loongarch";
        }
      }
      else
      {
        switch(v5)
        {
          case 183:
            return "elf64-bigaarch64";
          case 224:
            return "elf64-amdgpu";
          case 243:
            return "elf64-littleriscv";
        }
      }
    }
    else if (v5 > 21)
    {
      switch(v5)
      {
        case 22:
          return "elf64-s390";
        case 43:
          return "elf64-sparc";
        case 62:
          return "elf64-x86-64";
      }
    }
    else
    {
      switch(v5)
      {
        case 3:
          return "elf64-i386";
        case 8:
          return "elf64-mips";
        case 21:
          return "elf64-powerpc";
      }
    }
    return "elf64-unknown";
  }
  if (v2 != 1) {
    llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
  }
  signed int v3 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
  if (v3 > 82)
  {
    if (v3 <= 223)
    {
      if (v3 > 104)
      {
        if (v3 == 105) {
          return "elf32-msp430";
        }
        if (v3 == 164) {
          return "elf32-hexagon";
        }
      }
      else
      {
        if (v3 == 83) {
          return "elf32-avr";
        }
        if (v3 == 94) {
          return "elf32-xtensa";
        }
      }
    }
    else if (v3 <= 243)
    {
      if (v3 == 224) {
        return "elf32-amdgpu";
      }
      if (v3 == 243) {
        return "elf32-littleriscv";
      }
    }
    else
    {
      switch(v3)
      {
        case 244:
          return "elf32-lanai";
        case 252:
          return "elf32-csky";
        case 258:
          return "elf32-loongarch";
      }
    }
    return "elf32-unknown";
  }
  if (v3 > 17)
  {
    if (v3 > 39)
    {
      if (v3 == 40) {
        return "elf32-bigarm";
      }
      if (v3 == 62) {
        return "elf32-x86-64";
      }
    }
    else
    {
      if (v3 == 18) {
        return "elf32-sparc";
      }
      if (v3 == 20) {
        return "elf32-powerpc";
      }
    }
    return "elf32-unknown";
  }
  uint64_t result = "elf32-m68k";
  switch(v3)
  {
    case 2:
      return "elf32-sparc";
    case 3:
      uint64_t result = "elf32-i386";
      break;
    case 4:
      return result;
    case 6:
      uint64_t result = "elf32-iamcu";
      break;
    case 8:
      uint64_t result = "elf32-mips";
      break;
    default:
      return "elf32-unknown";
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getArch(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  signed int v2 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
  if (v2 <= 82)
  {
    if (v2 <= 39)
    {
      uint64_t result = 15;
      switch(v2)
      {
        case 2:
        case 18:
          return 29;
        case 3:
        case 6:
          return 37;
        case 4:
          return result;
        case 8:
          int v6 = *(unsigned __int8 *)(v1 + 4);
          if (v6 != 1)
          {
            if (v6 == 2) {
              return 18;
            }
LABEL_47:
            llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
          }
          uint64_t result = 16;
          break;
        case 20:
          return 21;
        case 21:
          return 23;
        case 22:
          return 32;
        default:
          return 0;
      }
      return result;
    }
    switch(v2)
    {
      case '(':
        return 1;
      case '+':
        return 30;
      case '>':
        return 38;
    }
    return 0;
  }
  if (v2 <= 223)
  {
    if (v2 <= 104)
    {
      if (v2 == 83) {
        return 7;
      }
      if (v2 == 94) {
        return 40;
      }
    }
    else
    {
      switch(v2)
      {
        case 105:
          return 20;
        case 164:
          return 12;
        case 183:
          return 4;
      }
    }
    return 0;
  }
  switch(v2)
  {
    case 243:
      int v4 = *(unsigned __int8 *)(v1 + 4);
      if (v4 != 1)
      {
        if (v4 == 2) {
          return 28;
        }
        goto LABEL_47;
      }
      return 27;
    case 244:
      return 55;
    case 245:
    case 246:
    case 248:
    case 249:
    case 250:
      return 0;
    case 247:
      return 9;
    case 251:
      return 60;
    case 252:
      return 10;
    default:
      if (v2 != 258) {
        return 0;
      }
      int v5 = *(unsigned __int8 *)(v1 + 4);
      if (v5 != 1)
      {
        if (v5 == 2) {
          return 14;
        }
        goto LABEL_47;
      }
      uint64_t result = 13;
      break;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStartAddress@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 56);
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(void *)a2 = bswap64(*(void *)(v2 + 24));
  return result;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isRelocatableObject(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 56) + 16) == 256;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolSize(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    signed int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return bswap64(*(void *)(v4 + 16));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    signed int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 4) >> 4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolOther(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    signed int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 5);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolELFType(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    signed int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned char *)(v4 + 4) & 0xF;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionType(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 4));
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionFlags(uint64_t a1, uint64_t a2)
{
  return bswap64(*(void *)(a2 + 8));
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionOffset(uint64_t a1, uint64_t a2)
{
  return bswap64(*(void *)(a2 + 24));
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationAddend@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelSection(a1, a2)+ 1) != 0x4000000)llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(); {
  uint64_t result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRela(a1, a2);
  }
  unint64_t v7 = bswap64((unint64_t)result[2]);
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v7;
  return result;
}

unsigned char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getBuildAttributes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, llvm::ELFAttributeParser *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  char v5 = (void *)(a1 + 56);
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((void *)(a1 + 56), (uint64_t)&v16);
  if (v18)
  {
    uint64_t v9 = v16;
    uint64_t v16 = 0;
    *(void *)a3 = v9;
    goto LABEL_8;
  }
  if (!v17)
  {
LABEL_6:
    *(void *)a3 = 0;
    goto LABEL_8;
  }
  unint64_t v7 = (_DWORD *)(v16 + 4);
  uint64_t v8 = v17 << 6;
  while (*v7 != 50331760)
  {
    v7 += 16;
    v8 -= 64;
    if (!v8) {
      goto LABEL_6;
    }
  }
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<char>(v5, (uint64_t)(v7 - 1), (uint64_t)&v13);
  uint64_t v10 = v13;
  if (v15) {
    goto LABEL_19;
  }
  if (*v13 != 65 || v14 == 1)
  {
    uint64_t v10 = 0;
LABEL_19:
    *(void *)a3 = v10;
    goto LABEL_8;
  }
  uint64_t result = (unsigned char *)llvm::ELFAttributeParser::parse(a2, (uint64_t)v13, v14, 0, a3);
  uint64_t v12 = *(void *)a3;
  if (v15)
  {
    uint64_t result = v13;
    unint64_t v13 = 0;
    if (result) {
      uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
    }
  }
  if (!v12) {
    goto LABEL_6;
  }
LABEL_8:
  if (v18)
  {
    uint64_t result = (unsigned char *)v16;
    uint64_t v16 = 0;
    if (result) {
      return (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getDynamicSymbolIterators@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::dynamic_symbol_begin(a1);
  unint64_t v6 = v5;
  unint64_t result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::dynamic_symbol_end(a1);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v8;
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getPlatformFlags(uint64_t a1)
{
  return bswap32(*(_DWORD *)(*(void *)(a1 + 56) + 48));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEType(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(void *)(a1 + 56) + 16)) >> 16;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEMachine(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(void *)(a1 + 56) + 18)) >> 16;
}

void *std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>::__vallocate[abi:nn180100](a1, v5 >> 6);
    unint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    abort();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(a2 << 6);
}

unint64_t *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>@<X0>(void *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1, a2, (uint64_t)&v9);
  unint64_t v8 = v9;
  if (v10)
  {
    *(unsigned char *)(a4 + 8) |= 1u;
    *(void *)a4 = v8;
  }
  else
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(a1, v9, a3, a4);
    if (v10)
    {
      unint64_t result = v9;
      uint64_t v9 = 0;
      if (result) {
        return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection@<X0>(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a1, (uint64_t)v8);
  if (v9)
  {
    unint64_t v6 = v8[0];
    char v7 = *(unsigned char *)(a3 + 8) | 1;
  }
  else
  {
    if (v8[1] <= (unint64_t)a2) {
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    unint64_t v6 = v8[0] + ((unint64_t)a2 << 6);
    char v7 = *(unsigned char *)(a3 + 8) & 0xFE;
  }
  *(unsigned char *)(a3 + 8) = v7;
  *(void *)a3 = v6;
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>@<X0>(void *a1@<X0>, unint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(a1, a2, (uint64_t)v22);
  if (v23)
  {
    uint64_t v8 = v22[0];
    char v9 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    if (v22[1] <= (unint64_t)a3)
    {
      uint64_t v11 = 24 * a3;
      v12[0] = "can't read an entry at 0x";
      _OWORD v12[2] = &v11;
      __int16 v13 = 3587;
      v14[0] = v12;
      v14[2] = ": it goes past the end of the section (0x";
      __int16 v15 = 770;
      unint64_t v10 = bswap64(a2[4]);
      v16[0] = v14;
      long long v16[2] = &v10;
      __int16 v17 = 3586;
      char v18 = v16;
      uint64_t v19 = ")";
      __int16 v20 = 770;
      int v21 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v8 = v22[0] + 24 * a3;
    char v9 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v9;
  *(void *)a4 = v8;
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  unint64_t v4 = *(void *)(*result + 40);
  unint64_t v5 = bswap64(v4);
  unint64_t v28 = v5;
  if (v4)
  {
    unsigned int v6 = *(unsigned __int16 *)(v3 + 58);
    if (v6 != 0x4000)
    {
      unint64_t v25 = "invalid e_shentsize in ELF header: ";
      uint64_t v26 = (const char *)__rev16(v6);
      __int16 v27 = 2307;
      LODWORD(v21[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    unint64_t v7 = result[1];
    unint64_t v8 = v5 + 64;
    if (v5 <= 0xFFFFFFFFFFFFFFBFLL)
    {
      BOOL v9 = v8 >= v7;
      BOOL v10 = v8 == v7;
    }
    else
    {
      BOOL v9 = 1;
      BOOL v10 = 0;
    }
    if (!v10 && v9)
    {
      unint64_t v25 = "section header table goes past the end of the file: e_shoff = 0x";
      uint64_t v26 = (const char *)&v28;
      __int16 v27 = 3587;
      LODWORD(v21[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v13 = v3 + v5;
    unsigned int v14 = *(unsigned __int16 *)(v3 + 60);
    unint64_t v15 = __rev16(v14);
    unint64_t v24 = v15;
    if (!v14)
    {
      unint64_t v15 = bswap64(*(void *)(v13 + 32));
      unint64_t v24 = v15;
      if (v15 >> 58)
      {
        v21[0] = "invalid number of sections specified in the NULL section's sh_size field (";
        uint64_t v22 = &v24;
        __int16 v23 = 3075;
        unint64_t v25 = (const char *)v21;
        uint64_t v26 = ")";
        __int16 v27 = 770;
        LODWORD(v19[0]) = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
      }
    }
    BOOL v9 = __CFADD__(v5, v15 << 6);
    unint64_t v16 = v5 + (v15 << 6);
    if (v9)
    {
      v17[0] = "invalid section header table offset (e_shoff = 0x";
      v17[2] = &v28;
      __int16 v18 = 3587;
      v19[0] = v17;
      v19[2] = ") or invalid number of sections specified in the first section header's sh_size field (0x";
      __int16 v20 = 770;
      v21[0] = v19;
      uint64_t v22 = &v24;
      __int16 v23 = 3586;
      unint64_t v25 = (const char *)v21;
      uint64_t v26 = ")";
      __int16 v27 = 770;
      int v29 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    if (v16 > v7)
    {
      unint64_t v25 = "section table goes past the end of file";
      __int16 v27 = 259;
      LODWORD(v21[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    *(unsigned char *)(a2 + 16) &= ~1u;
    *(void *)a2 = v13;
    *(void *)(a2 + 8) = v15;
  }
  else
  {
    uint64_t v11 = result[2];
    uint64_t v12 = result[3];
    if (v11 == v12)
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) &= ~1u;
    }
    else
    {
      *(unsigned char *)(a2 + 16) &= ~1u;
      *(void *)a2 = v11;
      *(void *)(a2 + 8) = (v12 - v11) >> 6;
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>@<X0>(void *result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = result;
  if (a2[7] != 0x1800000000000000)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(result, (uint64_t)a2, &v27);
    uint64_t v11 = std::string::insert(&v27, 0, "section ");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    uint64_t v13 = std::string::append(&v29, " has invalid sh_entsize: expected ");
    unsigned int v14 = (unint64_t *)v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    char v33 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v31.__r_.__value_.__r.__words[0] = 24;
    v37[0] = __p;
    __int16 v38 = &v31;
    __int16 v39 = 2564;
    v40[0] = v37;
    __int16 v41 = (std::string *)", but got ";
    __int16 v42 = 770;
    v26.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    uint64_t v43 = v40;
    uint64_t v44 = &v26;
    __int16 v45 = 3074;
    LODWORD(v25.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  unint64_t v5 = bswap64(a2[3]);
  unint64_t v6 = bswap64(a2[4]);
  unint64_t v35 = v6;
  unint64_t v36 = v5;
  if (v6 % 0x18)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(result, (uint64_t)a2, &v31);
    unint64_t v7 = std::string::insert(&v31, 0, "section ");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    BOOL v9 = std::string::append(&v27, " has an invalid sh_size (");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v29;
    char v33 = &v35;
    __int16 v34 = 3076;
    v37[0] = __p;
    __int16 v38 = (std::string *)") which is not a multiple of its sh_entsize (";
    __int16 v39 = 770;
    v26.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v40[0] = v37;
    __int16 v41 = &v26;
    __int16 v42 = 3074;
    uint64_t v43 = v40;
    uint64_t v44 = (std::string *)")";
    __int16 v45 = 770;
    LODWORD(v25.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (__CFADD__(v5, v6))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(result, (uint64_t)a2, &v31);
    unint64_t v15 = std::string::insert(&v31, 0, "section ");
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    __int16 v17 = std::string::append(&v27, " has a sh_offset (0x");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v29;
    char v33 = &v36;
    __int16 v34 = 3588;
    v37[0] = __p;
    __int16 v38 = (std::string *)") + sh_size (0x";
    __int16 v39 = 770;
    v40[0] = v37;
    __int16 v41 = (std::string *)&v35;
    __int16 v42 = 3586;
    uint64_t v43 = v40;
    uint64_t v44 = (std::string *)") that cannot be represented";
    __int16 v45 = 770;
    LODWORD(v26.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (v6 + v5 > result[1])
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(result, (uint64_t)a2, &v25);
    uint64_t v19 = std::string::insert(&v25, 0, "section ");
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    int v21 = std::string::append(&v26, " has a sh_offset (0x");
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    v27.__r_.__value_.__r.__words[2] = (std::string::size_type)&v36;
    __int16 v28 = 3588;
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
    v29.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    __int16 v30 = 770;
    __p[0] = &v29;
    char v33 = &v35;
    __int16 v34 = 3586;
    v37[0] = __p;
    __int16 v38 = (std::string *)") that is greater than the file size (0x";
    __int16 v39 = 770;
    uint64_t v24 = v4[1];
    v40[0] = v37;
    __int16 v41 = (std::string *)&v24;
    __int16 v42 = 3586;
    uint64_t v43 = v40;
    uint64_t v44 = (std::string *)")";
    __int16 v45 = 770;
    int v46 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  unint64_t v23 = *result + v5;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v23;
  *(void *)(a3 + 8) = v6 / 0x18;
  return result;
}

void llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a1, (uint64_t)v13);
  if (v14)
  {
    std::string::size_type v9 = v13[0];
    v13[0] = 0;
    v12.__r_.__value_.__r.__words[0] = v9;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v12);
    if (v12.__r_.__value_.__r.__words[0]) {
      (*(void (**)(std::string::size_type))(*(void *)v12.__r_.__value_.__l.__data_ + 8))(v12.__r_.__value_.__r.__words[0]);
    }
    std::string::basic_string[abi:nn180100]<0>(a3, "[unknown index]");
  }
  else
  {
    std::to_string(&v11, (int64_t)(a2 - v13[0]) >> 6);
    unint64_t v5 = std::string::insert(&v11, 0, "[index ");
    std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unint64_t v7 = std::string::append(&v12, "]");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)a3 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    a3[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  if (v14)
  {
    std::string::size_type v10 = v13[0];
    v13[0] = 0;
    if (v10) {
      (*(void (**)(std::string::size_type))(*(void *)v10 + 8))(v10);
    }
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::toDRI(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((void *)(a1 + 56), (uint64_t)&v7);
    unint64_t v5 = v7;
    if (v8)
    {
      unint64_t v7 = 0;
      if (v5)
      {
        (*(void (**)(unint64_t))(*(void *)v5 + 8))(v5);
        LODWORD(v5) = 0;
      }
      a3 = 0;
    }
    else
    {
      unint64_t v5 = (a2 - v7) >> 6;
    }
  }
  else
  {
    a3 = 0;
    LODWORD(v5) = 0;
  }
  return v5 | ((unint64_t)a3 << 32);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStringTable(void *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, void *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4) == 50331648) {
    goto LABEL_10;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, a2, &v29);
  std::string::size_type v10 = std::string::insert(&v29, 0, "invalid sh_type for string table section ");
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string v12 = std::string::append(&v30, ": expected SHT_STRTAB, but got ");
  std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
  long long v34 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string::size_type v35 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(*(_DWORD *)(a2 + 4)));
  v31[0] = &v34;
  v31[2] = ELFSectionTypeName;
  v31[3] = v15;
  __int16 v32 = 1284;
  a3(&v28, a4, v31);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::string::size_type v16 = v28.__r_.__value_.__r.__words[0];
  if (!v28.__r_.__value_.__r.__words[0])
  {
LABEL_10:
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<char>(a1, a2, (uint64_t)&v34);
    uint64_t v17 = v34;
    if (v35)
    {
      *(void *)&long long v34 = 0;
      *(unsigned char *)(a5 + 16) |= 1u;
      *(void *)a5 = v17;
    }
    else
    {
      uint64_t v18 = *((void *)&v34 + 1);
      if (!*((void *)&v34 + 1))
      {
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, a2, &v28);
        unint64_t v23 = std::string::insert(&v28, 0, "SHT_STRTAB string table section ");
        std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        std::string v25 = std::string::append(&v29, " is empty");
        std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        __int16 v32 = 260;
        v31[0] = &v30;
        int v33 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
      }
      if (*(unsigned char *)(*((void *)&v34 + 1) + v34 - 1))
      {
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, a2, &v28);
        uint64_t v19 = std::string::insert(&v28, 0, "SHT_STRTAB string table section ");
        std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        int v21 = std::string::append(&v29, " is non-null terminated");
        std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        __int16 v32 = 260;
        v31[0] = &v30;
        int v33 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
      }
      *(unsigned char *)(a5 + 16) &= ~1u;
      *(void *)a5 = v17;
      *(void *)(a5 + 8) = v18;
    }
    if (v35)
    {
      uint64_t v27 = v34;
      *(void *)&long long v34 = 0;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
  }
  else
  {
    *(unsigned char *)(a5 + 16) |= 1u;
    *(void *)a5 = v16;
  }
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<char>@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  unint64_t v5 = bswap64(*(void *)(a2 + 24));
  unint64_t v6 = bswap64(*(void *)(a2 + 32));
  unint64_t v37 = v6;
  unint64_t v38 = v5;
  if (__CFADD__(v5, v6))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(result, a2, &v24);
    unint64_t v7 = std::string::insert(&v24, 0, "section ");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = std::string::append(&v19, " has a sh_offset (0x");
    std::string::size_type v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v22 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v25[0] = __p;
    std::string::size_type v26 = &v38;
    __int16 v27 = 3588;
    v28[0] = v25;
    std::string v29 = ") + sh_size (0x";
    __int16 v30 = 770;
    v31[0] = v28;
    __int16 v32 = &v37;
    __int16 v33 = 3586;
    long long v34 = v31;
    std::string::size_type v35 = ") that cannot be represented";
    __int16 v36 = 770;
    LODWORD(v18.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (v6 + v5 > result[1])
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(result, a2, &v17);
    std::string::size_type v11 = std::string::insert(&v17, 0, "section ");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v13 = std::string::append(&v18, " has a sh_offset (0x");
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
    v19.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38;
    __int16 v20 = 3588;
    __p[0] = &v19;
    std::string::size_type v22 = ") + sh_size (0x";
    __int16 v23 = 770;
    v25[0] = __p;
    std::string::size_type v26 = &v37;
    __int16 v27 = 3586;
    v28[0] = v25;
    std::string v29 = ") that is greater than the file size (0x";
    __int16 v30 = 770;
    uint64_t v16 = v3[1];
    v31[0] = v28;
    __int16 v32 = (unint64_t *)&v16;
    __int16 v33 = 3586;
    long long v34 = v31;
    std::string::size_type v35 = ")";
    __int16 v36 = 770;
    int v39 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  unint64_t v15 = *result + v5;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v15;
  *(void *)(a3 + 8) = v6;
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a1, (uint64_t)v8);
  if (v9)
  {
    uint64_t v7 = v8[0];
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v7;
  }
  else
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if (v9)
    {
      unint64_t result = (void *)v8[0];
      v8[0] = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    v13[0] = 0;
    v13[1] = 0;
    char v14 = 0;
LABEL_5:
    long long v9 = a4[1];
    v12[0] = *a4;
    v12[1] = v9;
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1, a2, (uint64_t)a3, v12, a5);
    if ((v14 & 1) == 0) {
      return result;
    }
    goto LABEL_8;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(a1, a3, (uint64_t)v13);
  if ((v14 & 1) == 0)
  {
    a3 = (unint64_t *)v13[0];
    goto LABEL_5;
  }
  uint64_t v11 = v13[0];
  v13[0] = 0;
  *(unsigned char *)(a5 + 8) |= 1u;
  *(void *)a5 = v11;
LABEL_8:
  unint64_t result = (uint64_t *)v13[0];
  v13[0] = 0;
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>(a1, (unint64_t *)a2, (uint64_t)&v31);
  uint64_t v11 = v31;
  if (v33)
  {
    std::string v31 = 0;
    *(unsigned char *)(a5 + 16) |= 1u;
  }
  else
  {
    unint64_t v12 = bswap32(*(_DWORD *)(a2 + 40));
    if (a4 <= v12)
    {
      __int16 v27 = "invalid section index: ";
      std::string v28 = (unint64_t *)v12;
      __int16 v29 = 2051;
      LODWORD(v23[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v13 = a3 + (v12 << 6);
    unsigned int v14 = *(_DWORD *)(v13 + 4);
    if (v14 != 0x2000000 && v14 != 184549376)
    {
      ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(v14));
      __int16 v26 = 1283;
      v23[0] = "SHT_SYMTAB_SHNDX section is linked with ";
      std::string v24 = ELFSectionTypeName;
      uint64_t v25 = v18;
      __int16 v27 = (const char *)v23;
      std::string v28 = (unint64_t *)" section (expected SHT_SYMTAB/SHT_DYNSYM)";
      __int16 v29 = 770;
      LODWORD(v20[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v16 = v32;
    unint64_t v22 = bswap64(*(void *)(v13 + 32)) / 0x18;
    if (v32 != v22)
    {
      uint64_t v19 = v32;
      v20[0] = "SHT_SYMTAB_SHNDX has ";
      v20[2] = &v19;
      __int16 v21 = 2563;
      v23[0] = v20;
      std::string v24 = " entries, but the symbol table associated has ";
      __int16 v26 = 770;
      __int16 v27 = (const char *)v23;
      std::string v28 = &v22;
      __int16 v29 = 3074;
      int v30 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    *(unsigned char *)(a5 + 16) &= ~1u;
    *(void *)(a5 + 8) = v16;
  }
  *(void *)a5 = v11;
  if (v33)
  {
    unint64_t result = v31;
    std::string v31 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>@<X0>(void *result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = result;
  if (a2[7] != 0x400000000000000)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(result, (uint64_t)a2, &v28);
    unint64_t v12 = std::string::insert(&v28, 0, "section ");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unsigned int v14 = std::string::append(&v30, " has invalid sh_entsize: expected ");
    uint64_t v15 = (unint64_t *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    uint64_t v34 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v32.__r_.__value_.__r.__words[0] = 4;
    v38[0] = __p;
    int v39 = &v32;
    __int16 v40 = 2564;
    v41[0] = v38;
    __int16 v42 = (std::string *)", but got ";
    __int16 v43 = 770;
    v27.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    uint64_t v44 = v41;
    __int16 v45 = &v27;
    __int16 v46 = 3074;
    LODWORD(v26.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  unint64_t v6 = bswap64(a2[3]);
  unint64_t v7 = bswap64(a2[4]);
  unint64_t v36 = v7;
  unint64_t v37 = v6;
  if ((v7 & 3) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(result, (uint64_t)a2, &v32);
    std::string::size_type v8 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v28, " has an invalid sh_size (");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v30;
    uint64_t v34 = &v36;
    __int16 v35 = 3076;
    v38[0] = __p;
    int v39 = (std::string *)") which is not a multiple of its sh_entsize (";
    __int16 v40 = 770;
    v27.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v41[0] = v38;
    __int16 v42 = &v27;
    __int16 v43 = 3074;
    uint64_t v44 = v41;
    __int16 v45 = (std::string *)")";
    __int16 v46 = 770;
    LODWORD(v26.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (__CFADD__(v6, v7))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(result, (uint64_t)a2, &v32);
    uint64_t v16 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    uint64_t v18 = std::string::append(&v28, " has a sh_offset (0x");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v30;
    uint64_t v34 = &v37;
    __int16 v35 = 3588;
    v38[0] = __p;
    int v39 = (std::string *)") + sh_size (0x";
    __int16 v40 = 770;
    v41[0] = v38;
    __int16 v42 = (std::string *)&v36;
    __int16 v43 = 3586;
    uint64_t v44 = v41;
    __int16 v45 = (std::string *)") that cannot be represented";
    __int16 v46 = 770;
    LODWORD(v27.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (v7 + v6 > result[1])
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(result, (uint64_t)a2, &v26);
    __int16 v20 = std::string::insert(&v26, 0, "section ");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    unint64_t v22 = std::string::append(&v27, " has a sh_offset (0x");
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    v28.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37;
    __int16 v29 = 3588;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    v30.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    __int16 v31 = 770;
    __p[0] = &v30;
    uint64_t v34 = &v36;
    __int16 v35 = 3586;
    v38[0] = __p;
    int v39 = (std::string *)") that is greater than the file size (0x";
    __int16 v40 = 770;
    uint64_t v25 = v4[1];
    v41[0] = v38;
    __int16 v42 = (std::string *)&v25;
    __int16 v43 = 3586;
    uint64_t v44 = v41;
    __int16 v45 = (std::string *)")";
    __int16 v46 = 770;
    int v47 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  unint64_t v24 = *result + v6;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v24;
  *(void *)(a3 + 8) = v7 >> 2;
  return result;
}

uint64_t *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  long long v7 = a4[1];
  v10[0] = *a4;
  v10[1] = v7;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionIndex(a2, a3, v10, (uint64_t)&v11);
  if (v12)
  {
    std::string::size_type v9 = v11;
    *(unsigned char *)(a5 + 8) |= 1u;
    *(void *)a5 = v9;
  }
  else if (v11)
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1, v11, a5);
    if (v12)
    {
      unint64_t result = v11;
      std::string::size_type v11 = 0;
      if (result) {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
    }
  }
  else
  {
    *(unsigned char *)(a5 + 8) &= ~1u;
    *(void *)a5 = 0;
  }
  return result;
}

uint64_t *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionIndex@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v5 = *(unsigned __int16 *)(a1 + 6);
  if (v5 != 0xFFFF)
  {
    unsigned int v6 = __rev16(v5);
    *(unsigned char *)(a4 + 8) &= ~1u;
    if ((unsigned __int16)(v6 + 256) <= 0x100u)
    {
      *(_DWORD *)a4 = 0;
      return result;
    }
    goto LABEL_6;
  }
  long long v7 = a3[1];
  v10[0] = *a3;
  v10[1] = v7;
  unint64_t result = llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)0,false>>(-1431655765 * ((unint64_t)(a1 - a2) >> 3), (uint64_t *)v10, (uint64_t)&v11);
  if ((v12 & 1) == 0)
  {
    *(unsigned char *)(a4 + 8) &= ~1u;
    unsigned int v6 = v11;
LABEL_6:
    *(_DWORD *)a4 = v6;
    return result;
  }
  uint64_t v9 = v11;
  *(unsigned char *)(a4 + 8) |= 1u;
  *(void *)a4 = v9;
  return result;
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v8 = a1[17];
  if (v8)
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable(a1 + 7, v8, (uint64_t)&v17);
    if (v19)
    {
      char v12 = v17;
      goto LABEL_9;
    }
    uint64_t v11 = v17;
    uint64_t v10 = v18;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  *(void *)&long long v14 = v11;
  *((void *)&v14 + 1) = v10;
  char v15 = 1;
  uint64_t v16 = 0;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1 + 7, a2, a3, &v14, (uint64_t)&v17);
  char v12 = v17;
  if (v18)
  {
LABEL_9:
    *(unsigned char *)(a4 + 16) |= 1u;
    *(void *)a4 = v12;
    return result;
  }
  if (v17)
  {
    *(unsigned char *)(a4 + 16) &= ~1u;
    *(void *)a4 = v12;
    *(void *)(a4 + 8) = a1;
  }
  else
  {
    unint64_t result = (void *)(*(uint64_t (**)(void *))(*a1 + 360))(a1);
    *(unsigned char *)(a4 + 16) &= ~1u;
    *(void *)a4 = result;
    *(void *)(a4 + 8) = v13;
    if (v18)
    {
      unint64_t result = v17;
      std::string::size_type v17 = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionName(void *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, void *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a1, (uint64_t)v16);
  if (v17)
  {
    uint64_t v11 = v16[0];
    *(unsigned char *)(a5 + 16) |= 1u;
    *(void *)a5 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if (v15)
    {
      uint64_t v12 = v14[0];
      *(unsigned char *)(a5 + 16) |= 1u;
      *(void *)a5 = v12;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if (v15)
      {
        uint64_t v10 = v14[0];
        v14[0] = 0;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
      }
    }
    if (v17)
    {
      uint64_t v13 = v16[0];
      v16[0] = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionStringTable(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, void *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7 = *(unsigned __int16 *)(*a1 + 62);
  if (v7 == 0xFFFF)
  {
    if (!a3)
    {
      uint64_t v13 = "e_shstrndx == SHN_XINDEX, but the section header table is empty";
      __int16 v15 = 259;
      LODWORD(v11[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    unsigned int v8 = bswap32(*(_DWORD *)(a2 + 40));
    if (v8) {
      goto LABEL_3;
    }
LABEL_9:
    *(unsigned char *)(a6 + 16) &= ~1u;
    uint64_t v10 = a1[6];
    *(void *)a6 = a1[5];
    *(void *)(a6 + 8) = v10;
    return;
  }
  unsigned int v8 = __rev16(v7);
  if (!v8) {
    goto LABEL_9;
  }
LABEL_3:
  if (a3 <= v8)
  {
    v11[0] = "section header string table index ";
    _OWORD v11[2] = v8;
    __int16 v12 = 2051;
    uint64_t v13 = (const char *)v11;
    long long v14 = " does not exist";
    __int16 v15 = 770;
    int v16 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v9 = a2 + ((unint64_t)v8 << 6);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStringTable(a1, v9, a4, a5, a6);
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionName@<X0>(void *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (*a2)
  {
    unint64_t v6 = bswap32(*a2);
    if (a4 <= v6)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(result, (uint64_t)a2, &v13);
      unsigned int v8 = std::string::insert(&v13, 0, "a section ");
      std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      uint64_t v10 = std::string::append(&v14, " has an invalid sh_name (0x");
      std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v16 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = v6;
      v17[0] = __p;
      v17[2] = &v12;
      __int16 v18 = 3588;
      char v19 = v17;
      uint64_t v20 = ") offset which goes past the end of the section name string table";
      __int16 v21 = 770;
      int v22 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    unsigned int v7 = (const char *)(a3 + v6);
    unint64_t result = (void *)strlen(v7);
    *(unsigned char *)(a5 + 16) &= ~1u;
    *(void *)a5 = v7;
    *(void *)(a5 + 8) = result;
  }
  else
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(unsigned char *)(a5 + 16) &= ~1u;
  }
  return result;
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelSection(uint64_t a1, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection((void *)(a1 + 56), a2, (uint64_t)&v10);
  if (v11)
  {
    uint64_t v3 = v10;
    uint64_t v10 = 0;
    unsigned int v5 = v3;
    *(void *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    __int16 v9 = 260;
    unsigned int v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRel(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>,false>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if (v11)
  {
    uint64_t v3 = v10;
    uint64_t v10 = 0;
    unsigned int v5 = v3;
    *(void *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    __int16 v9 = 260;
    unsigned int v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRela(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if (v11)
  {
    uint64_t v3 = v10;
    uint64_t v10 = 0;
    unsigned int v5 = v3;
    *(void *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    __int16 v9 = 260;
    unsigned int v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

unint64_t *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>,false>>@<X0>(void *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1, a2, (uint64_t)&v9);
  unsigned int v8 = v9;
  if (v10)
  {
    *(unsigned char *)(a4 + 8) |= 1u;
    *(void *)a4 = v8;
  }
  else
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>,false>>(a1, v9, a3, a4);
    if (v10)
    {
      unint64_t result = v9;
      __int16 v9 = 0;
      if (result) {
        return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>,false>>@<X0>(void *a1@<X0>, unint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>,false>>(a1, a2, (uint64_t)v22);
  if (v23)
  {
    uint64_t v8 = v22[0];
    char v9 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    if (v22[1] <= (unint64_t)a3)
    {
      uint64_t v11 = 16 * a3;
      v12[0] = "can't read an entry at 0x";
      _OWORD v12[2] = &v11;
      __int16 v13 = 3587;
      v14[0] = v12;
      uint64_t v14[2] = ": it goes past the end of the section (0x";
      __int16 v15 = 770;
      unint64_t v10 = bswap64(a2[4]);
      v16[0] = v14;
      uint64_t v16[2] = &v10;
      __int16 v17 = 3586;
      __int16 v18 = v16;
      char v19 = ")";
      __int16 v20 = 770;
      int v21 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v8 = v22[0] + 16 * a3;
    char v9 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v9;
  *(void *)a4 = v8;
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>,false>>@<X0>(void *result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = result;
  if (a2[7] != 0x1000000000000000)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(result, (uint64_t)a2, &v28);
    uint64_t v12 = std::string::insert(&v28, 0, "section ");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::string v14 = std::string::append(&v30, " has invalid sh_entsize: expected ");
    __int16 v15 = (unint64_t *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    uint64_t v34 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v32.__r_.__value_.__r.__words[0] = 16;
    v38[0] = __p;
    int v39 = &v32;
    __int16 v40 = 2564;
    v41[0] = v38;
    __int16 v42 = (std::string *)", but got ";
    __int16 v43 = 770;
    v27.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    uint64_t v44 = v41;
    __int16 v45 = &v27;
    __int16 v46 = 3074;
    LODWORD(v26.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  unint64_t v6 = bswap64(a2[3]);
  unint64_t v7 = bswap64(a2[4]);
  unint64_t v36 = v7;
  unint64_t v37 = v6;
  if ((v7 & 0xF) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(result, (uint64_t)a2, &v32);
    uint64_t v8 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    unint64_t v10 = std::string::append(&v28, " has an invalid sh_size (");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v30;
    uint64_t v34 = &v36;
    __int16 v35 = 3076;
    v38[0] = __p;
    int v39 = (std::string *)") which is not a multiple of its sh_entsize (";
    __int16 v40 = 770;
    v27.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v41[0] = v38;
    __int16 v42 = &v27;
    __int16 v43 = 3074;
    uint64_t v44 = v41;
    __int16 v45 = (std::string *)")";
    __int16 v46 = 770;
    LODWORD(v26.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (__CFADD__(v6, v7))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(result, (uint64_t)a2, &v32);
    std::string::size_type v16 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    __int16 v18 = std::string::append(&v28, " has a sh_offset (0x");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v30;
    uint64_t v34 = &v37;
    __int16 v35 = 3588;
    v38[0] = __p;
    int v39 = (std::string *)") + sh_size (0x";
    __int16 v40 = 770;
    v41[0] = v38;
    __int16 v42 = (std::string *)&v36;
    __int16 v43 = 3586;
    uint64_t v44 = v41;
    __int16 v45 = (std::string *)") that cannot be represented";
    __int16 v46 = 770;
    LODWORD(v27.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (v7 + v6 > result[1])
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(result, (uint64_t)a2, &v26);
    __int16 v20 = std::string::insert(&v26, 0, "section ");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    int v22 = std::string::append(&v27, " has a sh_offset (0x");
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    v28.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37;
    __int16 v29 = 3588;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    v30.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    __int16 v31 = 770;
    __p[0] = &v30;
    uint64_t v34 = &v36;
    __int16 v35 = 3586;
    v38[0] = __p;
    int v39 = (std::string *)") that is greater than the file size (0x";
    __int16 v40 = 770;
    uint64_t v25 = v4[1];
    v41[0] = v38;
    __int16 v42 = (std::string *)&v25;
    __int16 v43 = 3586;
    uint64_t v44 = v41;
    __int16 v45 = (std::string *)")";
    __int16 v46 = 770;
    int v47 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  unint64_t v24 = *result + v6;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v24;
  *(void *)(a3 + 8) = v7 >> 4;
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::dynamic_symbol_begin(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  unsigned int v2 = v1 && bswap64(*(void *)(v1 + 32)) > 0x17;
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::dynamic_symbol_end(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (v1) {
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::toDRI(a1, v1, bswap64(*(void *)(v1 + 32)) / 0x18);
  }
  else {
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::dynamic_symbol_begin(a1);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::ELFObjectFile(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 32);
  v9[0] = *(_OWORD *)(a2 + 16);
  v9[1] = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>::vector(__p, a2 + 72);
  v8[1] = 0;
  uint64_t v8[2] = 0;
  v8[0] = v9;
  if (*(void *)(a2 + 104)) {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)v8, a2 + 96);
  }
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::ELFObjectFile(a1, v9, (uint64_t)&v6, *(void *)(a2 + 120), *(void *)(a2 + 128), *(void *)(a2 + 136));
  if (v8[0] != v9) {
    free(v8[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

uint64_t *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::create(*(void *)a1, *(void *)(a1 + 8), (uint64_t)&v22);
  if ((v26 & 1) != 0 && (uint64_t v6 = v22, *(void *)&v22 = 0, v6))
  {
    *(unsigned char *)(a3 + 152) |= 1u;
    *(void *)a3 = v6;
  }
  else
  {
    long long v7 = *(_OWORD *)(a1 + 16);
    v16[0] = *(_OWORD *)a1;
    v16[1] = v7;
    long long v12 = v22;
    *(_OWORD *)__p = v23;
    long long v23 = 0uLL;
    uint64_t v8 = v24;
    uint64_t v24 = 0;
    uint64_t v14 = v8;
    v15[0] = v16;
    v15[1] = 0;
    v15[2] = 0;
    if (v25[1]) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)v15, v25);
    }
    llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFObjectFile((uint64_t)v17, v16, (uint64_t)&v12, 0, 0, 0);
    if (v15[0] != v16) {
      free(v15[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (a2
      && (llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::initContent((uint64_t)v17, &v11), (uint64_t v9 = v11) != 0))
    {
      *(unsigned char *)(a3 + 152) |= 1u;
      *(void *)a3 = v9;
    }
    else
    {
      *(unsigned char *)(a3 + 152) &= ~1u;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFObjectFile(a3, (uint64_t)v17);
    }
    v17[0] = &unk_270DBF970;
    if (v20 != &v21) {
      free(v20);
    }
    if (v18)
    {
      std::string::size_type v19 = v18;
      operator delete(v18);
    }
  }
  return llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::~Expected((uint64_t *)&v22);
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::initContent@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((void *)(a1 + 56), (uint64_t)&v10);
  uint64_t v5 = v10;
  if ((v12 & 1) == 0)
  {
    if (v11)
    {
      uint64_t v6 = v11 << 6;
      long long v7 = (int *)(v10 + 4);
      while (1)
      {
        int v8 = *v7;
        if (*v7 == 2) {
          break;
        }
        if (v8 != 18)
        {
          if (v8 != 11) {
            goto LABEL_11;
          }
          uint64_t v9 = (void *)(a1 + 120);
          if (*(void *)(a1 + 120)) {
            goto LABEL_11;
          }
LABEL_10:
          *uint64_t v9 = v7 - 1;
          goto LABEL_11;
        }
        uint64_t v9 = (void *)(a1 + 136);
        if (!*(void *)(a1 + 136)) {
          goto LABEL_10;
        }
LABEL_11:
        v7 += 16;
        v6 -= 64;
        if (!v6) {
          goto LABEL_15;
        }
      }
      uint64_t v9 = (void *)(a1 + 128);
      if (*(void *)(a1 + 128)) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v5 = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFObjectFile(void *a1)
{
  *a1 = &unk_270DBF970;
  unsigned int v2 = (void *)a1[12];
  if (v2 != a1 + 15) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFObjectFile(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v12 = *a2;
  long long v11 = a2[1];
  *(_DWORD *)(a1 + 8) = 15;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  *(void *)a1 = &unk_270DBF970;
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a3;
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>::vector((void *)(a1 + 72), a3 + 16);
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  if (*(void *)(a3 + 48)) {
    llvm::SmallVectorImpl<char>::operator=(a1 + 96, a3 + 40);
  }
  *(void *)(a1 + 120) = a4;
  *(void *)(a1 + 128) = a5;
  *(void *)(a1 + 136) = a6;
  return a1;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFObjectFile(void *a1)
{
  *a1 = &unk_270DBF970;
  unsigned int v2 = (void *)a1[12];
  if (v2 != a1 + 15) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x263E500B0);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::moveSymbolNext(uint64_t a1, uint64_t a2)
{
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolFlags@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 7;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v32);
  int v8 = (_WORD *)v32;
  if (v33)
  {
    uint64_t v32 = 0;
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v8;
    goto LABEL_88;
  }
  unsigned int v9 = *(unsigned __int8 *)(v32 + 4);
  if ((v9 & 0xF0) == 0x20) {
    int v10 = 6;
  }
  else {
    int v10 = 2;
  }
  if (v9 < 0x10) {
    int v10 = 0;
  }
  if (*(__int16 *)(v32 + 6) == -15) {
    int v11 = v10 | 8;
  }
  else {
    int v11 = v10;
  }
  long long v12 = (void *)a1[16];
  if (v12)
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(v6, v12, (uint64_t)&v29);
    uint64_t v13 = v29;
    if (v31) {
      goto LABEL_33;
    }
    BOOL v14 = v8 == v29;
  }
  else
  {
    BOOL v14 = 0;
  }
  __int16 v15 = (void *)a1[15];
  if (v15)
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(v6, v15, (uint64_t)&v29);
    uint64_t v13 = v29;
    if ((v31 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_33:
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v13;
    goto LABEL_88;
  }
  uint64_t v13 = 0;
LABEL_17:
  int v16 = v8 == v13 || v14;
  if ((v9 & 0xF) - 3 < 2) {
    int v16 = 1;
  }
  if (v16) {
    int v17 = v11 | 0x80;
  }
  else {
    int v17 = v11;
  }
  int v18 = *(unsigned __int16 *)(*v6 + 18);
  switch(v18)
  {
    case 183:
      unint64_t result = (*(void *(**)(_WORD **__return_ptr, void *, uint64_t))(*a1 + 80))(&v29, a1, a2);
      if (v31)
      {
        std::string v28 = v29;
        __int16 v29 = 0;
        llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v28);
        unint64_t result = v28;
        if (v28) {
          unint64_t result = (void *)(*(uint64_t (**)(void *))(*v28 + 8))(v28);
        }
        if (v31)
        {
          unint64_t result = v29;
          __int16 v29 = 0;
          if (result) {
            unint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
          }
        }
        int v19 = v17;
      }
      else
      {
        int v19 = v17;
        if (v30 >= 2)
        {
          int v19 = v11 | 0x80;
          if (*v29 != 25636)
          {
            if (*v29 == 30756) {
              int v19 = v11 | 0x80;
            }
            else {
              int v19 = v17;
            }
          }
        }
      }
      int v17 = v19;
      break;
    case 40:
      unint64_t result = (*(void *(**)(_WORD **__return_ptr, void *, uint64_t))(*a1 + 80))(&v29, a1, a2);
      if (v31)
      {
        std::string v28 = v29;
        __int16 v29 = 0;
        llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v28);
        unint64_t result = v28;
        if (v28) {
          unint64_t result = (void *)(*(uint64_t (**)(void *))(*v28 + 8))(v28);
        }
        if (v31)
        {
          unint64_t result = v29;
          __int16 v29 = 0;
          if (result) {
            unint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
          }
        }
        unsigned int v20 = v17;
        goto LABEL_67;
      }
      if (v30)
      {
        unsigned int v20 = v17;
        if (v30 == 1)
        {
LABEL_67:
          if ((v8[2] & 0xF) == 2) {
            unsigned int v20 = v20 & 0xFFFFFEFF | ((*((_DWORD *)v8 + 2) & 1) << 8);
          }
          int v17 = v20;
          break;
        }
        if (*v29 != 25636)
        {
          unsigned int v20 = v11 | 0x80;
          if (*v29 != 29732)
          {
            if (*v29 == 24868) {
              unsigned int v20 = v11 | 0x80;
            }
            else {
              unsigned int v20 = v17;
            }
          }
          goto LABEL_67;
        }
      }
      unsigned int v20 = v11 | 0x80;
      goto LABEL_67;
    case 243:
      unint64_t result = (*(void *(**)(_WORD **__return_ptr, void *, uint64_t))(*a1 + 80))(&v29, a1, a2);
      if (v31)
      {
        uint64_t v21 = (uint64_t)v29;
        __int16 v29 = 0;
        uint64_t v27 = (void *)v21;
        llvm::consumeError((uint64_t *)&v27);
        unint64_t result = v27;
        if (v27) {
          unint64_t result = (void *)(*(uint64_t (**)(void *))(*v27 + 8))(v27);
        }
      }
      else if (!v30)
      {
        int v17 = v11 | 0x80;
      }
      if (v31)
      {
        unint64_t result = v29;
        __int16 v29 = 0;
        if (result) {
          unint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        }
      }
      break;
  }
  if (v8[3])
  {
    unsigned int v22 = *((unsigned __int8 *)v8 + 4);
    int v23 = v22 & 0xF;
    if (v23 != 5 && (unsigned __int16)v8[3] != 65522) {
      goto LABEL_76;
    }
  }
  else
  {
    v17 |= 1u;
    unsigned int v22 = *((unsigned __int8 *)v8 + 4);
    int v23 = v22 & 0xF;
    if (v23 != 5) {
      goto LABEL_76;
    }
  }
  v17 |= 0x10u;
LABEL_76:
  unsigned int v24 = v22 >> 4;
  if (v24 <= 0xA && ((1 << v24) & 0x406) != 0)
  {
    int v25 = *((unsigned char *)v8 + 5) & 3;
    if (v25 == 3 || (*((unsigned char *)v8 + 5) & 3) == 0) {
      v17 |= 0x40u;
    }
  }
  else
  {
    int v25 = *((unsigned char *)v8 + 5) & 3;
  }
  if (v23 == 10) {
    int v26 = v17 | 0x20;
  }
  else {
    int v26 = v17;
  }
  if (v25 == 2) {
    v26 |= 0x200u;
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v26;
LABEL_88:
  if (v33)
  {
    unint64_t result = (void *)v32;
    uint64_t v32 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::symbol_begin(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1) {
    unsigned int v2 = *(void *)(v1 + 32) > 0x17uLL;
  }
  else {
    unsigned int v2 = 0;
  }
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::symbol_end(void *a1)
{
  uint64_t v1 = a1[16];
  if (v1) {
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::toDRI((uint64_t)a1, v1, *(void *)(v1 + 32) / 0x18uLL);
  }
  else {
    return (*(uint64_t (**)(void *))(*a1 + 48))(a1);
  }
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::is64Bit(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 376))(a1) == 8;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolName(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v32);
  if (v33)
  {
    int v10 = v32;
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v10;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(v6, a2, (uint64_t)&v30);
  uint64_t v7 = v30;
  if ((v31 & 1) == 0)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(v6, *(_DWORD *)(v30 + 40), (uint64_t)&v28);
    uint64_t v8 = v28;
    if (v29)
    {
      uint64_t v28 = 0;
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v8;
LABEL_37:
      if (v31)
      {
        uint64_t v18 = v30;
        uint64_t v30 = 0;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
      }
      goto LABEL_40;
    }
    *(void *)&long long v24 = llvm::object::defaultWarningHandler;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v24, (uint64_t)v26);
    if (v27)
    {
      uint64_t v11 = v26[0];
      v26[0] = 0;
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v11;
LABEL_34:
      if (v29)
      {
        uint64_t v17 = v28;
        uint64_t v28 = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
      }
      goto LABEL_37;
    }
    llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getName(v32, v26[0], v26[1], (uint64_t)&v24);
    char v9 = v25;
    if ((v25 & 1) != 0 || !*((void *)&v24 + 1))
    {
      if ((*((unsigned char *)v32 + 4) & 0xF) == 3)
      {
        (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*a1 + 128))(&v21, a1, a2);
        if ((v23 & 1) == 0)
        {
          if (v25)
          {
            uint64_t v12 = v24;
            *(void *)&long long v24 = 0;
          }
          else
          {
            uint64_t v12 = 0;
          }
          uint64_t v20 = v12;
          llvm::consumeError(&v20);
          if (v20) {
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 144))(v22, v21);
          if (v23)
          {
            uint64_t v14 = v21;
            uint64_t v21 = 0;
            if (v14) {
              (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
            }
          }
          if (v25)
          {
            uint64_t v15 = v24;
            *(void *)&long long v24 = 0;
            if (v15) {
              (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
            }
          }
          goto LABEL_31;
        }
        uint64_t v13 = v21;
        uint64_t v21 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
        char v9 = v25;
      }
      *(unsigned char *)(a3 + 16) = *(unsigned char *)(a3 + 16) & 0xFE | v9 & 1;
      if (v9)
      {
        *(void *)a3 = v24;
        goto LABEL_31;
      }
    }
    else
    {
      *(unsigned char *)(a3 + 16) &= ~1u;
    }
    *(_OWORD *)a3 = v24;
LABEL_31:
    if (v27)
    {
      uint64_t v16 = v26[0];
      v26[0] = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    goto LABEL_34;
  }
  uint64_t v30 = 0;
  *(unsigned char *)(a3 + 16) |= 1u;
  *(void *)a3 = v7;
LABEL_40:
  if (v33)
  {
    int v19 = v32;
    uint64_t v32 = 0;
    if (v19) {
      (*(void (**)(llvm::object *))(*(void *)v19 + 8))(v19);
    }
  }
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v25);
  if (v26)
  {
    uint64_t v8 = v25;
    goto LABEL_10;
  }
  uint64_t v7 = v25;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v23);
  uint64_t v8 = v23;
  if (v24)
  {
LABEL_10:
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v8;
    return result;
  }
  int v9 = *(unsigned __int16 *)(v23 + 6);
  if ((v9 - 65521) < 2 || v9 == 0)
  {
    *(unsigned char *)(a3 + 8) &= ~1u;
    *(void *)a3 = v7;
    return result;
  }
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection((void *)(a1 + 56), a2, (uint64_t)&v21);
  if (v22)
  {
    uint64_t v14 = v21;
    uint64_t v21 = 0;
    goto LABEL_18;
  }
  if (*(_WORD *)(*(void *)(a1 + 56) + 16) == 1)
  {
    uint64_t v11 = *(void *)(a1 + 136);
    if (v11)
    {
      unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable((void *)(a1 + 56), v11, (uint64_t)&v18);
      if (v20)
      {
        uint64_t v14 = v18;
        goto LABEL_18;
      }
      uint64_t v13 = v18;
      uint64_t v12 = v19;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    *(void *)&long long v15 = v13;
    *((void *)&v15 + 1) = v12;
    char v16 = 1;
    uint64_t v17 = 0;
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection((void *)(a1 + 56), v23, v21, &v15, (uint64_t)&v18);
    uint64_t v14 = v18;
    if ((v19 & 1) == 0)
    {
      if (v18) {
        v7 += v18[2];
      }
      goto LABEL_23;
    }
LABEL_18:
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v14;
    goto LABEL_24;
  }
LABEL_23:
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v7;
LABEL_24:
  if (v22)
  {
    unint64_t result = v21;
    uint64_t v21 = 0;
    if (result) {
      unint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  if (v24)
  {
    unint64_t result = (void *)v23;
    uint64_t v23 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 56;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v7);
  if (v8)
  {
    uint64_t v6 = (void **)v7;
    uint64_t v7 = 0;
    llvm::report_fatal_error(&v6);
  }
  unint64_t result = *(void *)(v7 + 8);
  if (*(__int16 *)(v7 + 6) != -15)
  {
    int v4 = *(unsigned __int16 *)(*(void *)v2 + 18);
    if ((v4 == 40 || v4 == 8) && (*(unsigned char *)(v7 + 4) & 0xF) == 2) {
      result &= ~1uLL;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    uint64_t v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  if (*(__int16 *)(v4 + 6) == -14) {
    return *(unsigned int *)(v4 + 8);
  }
  else {
    return 0;
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getCommonSymbolSizeImpl(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 448))();
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v7);
  uint64_t v5 = v7;
  if (v8)
  {
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v5;
  }
  else
  {
    switch(*(unsigned char *)(v7 + 4) & 0xF)
    {
      case 0:
        *(unsigned char *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = 0;
        return result;
      case 1:
      case 5:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 2;
        goto LABEL_10;
      case 2:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 5;
        goto LABEL_10;
      case 3:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 3;
        goto LABEL_10;
      case 4:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 4;
        goto LABEL_10;
      default:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 1;
LABEL_10:
        *(_DWORD *)a3 = v6;
        break;
    }
  }
  return result;
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = a2;
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v6 = a1 + 7;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v12);
  if (v13)
  {
    uint64_t v8 = (uint64_t)v12;
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v8;
  }
  else
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(v6, v3, (uint64_t)&v10);
    if (v11)
    {
      uint64_t v9 = v10;
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v9;
    }
    else
    {
      unint64_t result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolSection(a1, (uint64_t)v12, v10, a3);
      if (v11)
      {
        unint64_t result = v10;
        int v10 = 0;
        if (result) {
          unint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        }
      }
    }
    if (v13)
    {
      unint64_t result = v12;
      uint64_t v12 = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::moveSectionNext(uint64_t a1, void *a2)
{
  *a2 += 64;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = llvm::object::defaultWarningHandler;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName((void *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v3, a3);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionAddress(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((void *)(a1 + 56), (uint64_t)&v7);
  if (v8)
  {
    unsigned int v3 = v7;
    uint64_t v7 = 0;
  }
  else
  {
    unsigned int v3 = 0;
  }
  int v6 = v3;
  llvm::handleAllErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6);
  if (v6) {
    (*(void (**)(void *))(*v6 + 8))(v6);
  }
  uint64_t v4 = v7;
  if (v8)
  {
    uint64_t v7 = 0;
    if (v4) {
      (*(void (**)(void *))(*v4 + 8))(v4);
    }
  }
  return (a2 - (uint64_t)v4) >> 6;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionSize(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

llvm::object *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContents@<X0>(llvm::object *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2 + 4) == 8)
  {
    uint64_t v4 = *((void *)result + 2);
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = v4;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    int v6 = (void *)((char *)result + 16);
    long long v7 = *((_OWORD *)result + 2);
    v11[0] = *((_OWORD *)result + 1);
    v11[1] = v7;
    unint64_t result = llvm::object::Binary::checkOffset((llvm::object *)v11, *(void *)(a2 + 24) + *(void *)&v11[0], *(void *)(a2 + 32), &v12);
    uint64_t v8 = v12;
    if (v12)
    {
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v8;
    }
    else
    {
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = *v6 + *(void *)(a2 + 24);
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)a3 = v10;
      *(void *)(a3 + 8) = v9;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 48);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isSectionCompressed(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 9) >> 3) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isSectionText(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 8) >> 2) & 1;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isSectionData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) != 1) {
    return 0;
  }
  if ((*(void *)(a2 + 8) & 2) != 0) {
    return (*(void *)(a2 + 8) & 4) == 0;
  }
  return 0;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isSectionBSS(uint64_t a1, uint64_t a2)
{
  return (*(unsigned char *)(a2 + 8) & 3) != 0 && *(_DWORD *)(a2 + 4) == 8;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 8;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isBerkeleyText(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  BOOL v3 = (v2 & 4) != 0 || (*(void *)(a2 + 8) & 1) == 0;
  return (v2 & 2) != 0 && v3;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isBerkeleyData(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1) & 1) != 0 || *(_DWORD *)(a2 + 4) == 8) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a2 + 8) >> 1) & 1;
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isDebugSection(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 144))(&v6);
  if (v8)
  {
    uint64_t v5 = v6;
    uint64_t v6 = 0;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v5);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    if (v8)
    {
      uint64_t result = v6;
      uint64_t v6 = 0;
      if (!result) {
        return result;
      }
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    }
    return 0;
  }
  if (v7 < 6) {
    return 0;
  }
  if (*(_DWORD *)v6 == 1650811950 && *(_WORD *)(v6 + 4) == 26485) {
    return 1;
  }
  if (v7 < 7) {
    return 0;
  }
  if (*(_DWORD *)v6 == 1701083694 && *(_DWORD *)(v6 + 3) == 1735746149) {
    return 1;
  }
  if (v7 != 10) {
    return 0;
  }
  return *(void *)v6 == 0x646E695F6264672ELL && *(_WORD *)(v6 + 8) == 30821;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::section_rel_begin(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((void *)(a1 + 56), (uint64_t)&v5);
  uint64_t result = v5;
  if ((v6 & 1) == 0) {
    return ((a2 - v5) / (unint64_t)*(unsigned __int16 *)(*(void *)(a1 + 56) + 58));
  }
  uint64_t v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::section_rel_end(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 272))(a1);
  int v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 4 || v5 == 9)
  {
    RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelSection((uint64_t)a1, v4);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1 + 7, *((_DWORD *)RelSection + 10), (uint64_t)&v16);
    if (v17)
    {
      uint64_t v9 = v16;
      char v16 = 0;
      char v11 = v9;
      *(void *)&v12.__val_ = llvm::errorToErrorCode(&v11);
      v12.__cat_ = v10;
      std::error_code::message(&v13, &v12);
      __int16 v15 = 260;
      uint64_t v14 = &v13;
      llvm::report_fatal_error((llvm *)&v14, (const llvm::Twine *)1);
    }
    v4 += (*(void *)(a2 + 32) / *(void *)(a2 + 56)) << 32;
  }
  return v4;
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocatedSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 4 || v5 == 9)
  {
    uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1 + 7, *(_DWORD *)(a2 + 44), (uint64_t)&v10);
    uint64_t v7 = v10;
    if (v11)
    {
      *(unsigned char *)(a3 + 16) |= 1u;
    }
    else
    {
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)(a3 + 8) = a1;
    }
    *(void *)a3 = v7;
  }
  else
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*a1 + 360))(a1);
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v9;
  }
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::moveRelocationNext(uint64_t a1, uint64_t a2)
{
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelSection(a1, a2)+ 1) == 9)Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRel(a1, a2); {
  else
  }
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRela(a1, a2);
  return *Rel;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationSymbol(void *a1, uint64_t a2)
{
  RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelSection((uint64_t)a1, a2);
  if (*((_DWORD *)RelSection + 1) == 9) {
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRel((uint64_t)a1, a2);
  }
  else {
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRela((uint64_t)a1, a2);
  }
  uint64_t v6 = a1[7];
  if (*(_WORD *)(v6 + 18) == 8 && *(unsigned char *)(v6 + 4) == 2)
  {
    if (*(unsigned char *)(v6 + 5) == 1) {
      unint64_t v7 = (void)Rel[1] << 32;
    }
    else {
      unint64_t v7 = (unint64_t)Rel[1];
    }
  }
  else
  {
    unint64_t v7 = (unint64_t)Rel[1];
  }
  if (HIDWORD(v7)) {
    return v7 & 0xFFFFFFFF00000000 | *((unsigned int *)RelSection + 10);
  }
  else {
    return (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationType(uint64_t a1, uint64_t a2)
{
  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelSection(a1, a2)+ 1) == 9)Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRel(a1, a2); {
  else
  }
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRela(a1, a2);
  uint64_t v5 = *(void *)(a1 + 56);
  if (*(_WORD *)(v5 + 18) == 8 && *(unsigned char *)(v5 + 4) == 2)
  {
    BOOL v6 = *(unsigned char *)(v5 + 5) == 1;
    uint64_t v7 = ((unint64_t)Rel[1] >> 24) & 0xFF0000 | ((unint64_t)Rel[1] >> 56) | ((unint64_t)Rel[1] >> 8) & 0xFF000000 | ((unint64_t)Rel[1] >> 40) & 0xFF00;
    if (!v6) {
      return Rel[1];
    }
  }
  else
  {
    LODWORD(v7) = *((_DWORD *)Rel + 2);
  }
  return v7;
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationTypeName(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1 + 7;
  unsigned int v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 320))(a1);
  return llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationTypeName(v4, v5, a3);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::dynamic_relocation_sections(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __p = 0;
  unint64_t v37 = 0;
  unint64_t v38 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((void *)(a1 + 56), (uint64_t)&v39);
  if ((v41 & 1) == 0 && v40)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v39;
    uint64_t v6 = v39 + (v40 << 6);
    do
    {
      if (*(_DWORD *)(v5 + 4) == 6)
      {
        uint64_t v7 = (uint64_t *)(*(void *)(v5 + 24) + *(void *)(a1 + 16));
        uint64_t v8 = *v7;
        if (*v7)
        {
          do
          {
            if (v8 == 17 || v8 == 7 || v8 == 23)
            {
              uint64_t v9 = v7[1];
              if (v4 >= v38)
              {
                char v11 = __p;
                uint64_t v12 = (v4 - __p) >> 3;
                unint64_t v13 = v12 + 1;
                if ((unint64_t)(v12 + 1) >> 61) {
LABEL_56:
                }
                  abort();
                uint64_t v14 = v38 - __p;
                if ((v38 - __p) >> 2 > v13) {
                  unint64_t v13 = v14 >> 2;
                }
                if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v15 = v13;
                }
                if (v15)
                {
                  char v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v38, v15);
                  char v11 = __p;
                  uint64_t v4 = v37;
                }
                else
                {
                  char v16 = 0;
                }
                char v17 = &v16[8 * v12];
                *(void *)char v17 = v9;
                uint64_t v10 = v17 + 8;
                while (v4 != v11)
                {
                  uint64_t v18 = *((void *)v4 - 1);
                  v4 -= 8;
                  *((void *)v17 - 1) = v18;
                  v17 -= 8;
                }
                __p = v17;
                unint64_t v38 = &v16[8 * v15];
                if (v11) {
                  operator delete(v11);
                }
              }
              else
              {
                *(void *)uint64_t v4 = v9;
                uint64_t v10 = v4 + 8;
              }
              unint64_t v37 = v10;
              uint64_t v4 = v10;
            }
            uint64_t v19 = v7[2];
            v7 += 2;
            uint64_t v8 = v19;
          }
          while (v19);
        }
      }
      v5 += 64;
    }
    while (v5 != v6);
    if (v40)
    {
      char v20 = 0;
      uint64_t v21 = v39;
      uint64_t v22 = v39 + (v40 << 6);
      uint64_t v23 = a2 + 2;
      do
      {
        char v24 = __p;
        if (__p != v37)
        {
          while (*(void *)v24 != *(void *)(v21 + 16))
          {
            v24 += 8;
            if (v24 == v37)
            {
              char v24 = v37;
              break;
            }
          }
        }
        if (v24 != v37)
        {
          if ((unint64_t)v20 >= *v23)
          {
            uint64_t v25 = (v20 - *a2) >> 4;
            if ((unint64_t)(v25 + 1) >> 60) {
              goto LABEL_56;
            }
            uint64_t v26 = *v23 - (void)*a2;
            uint64_t v27 = v26 >> 3;
            if (v26 >> 3 <= (unint64_t)(v25 + 1)) {
              uint64_t v27 = v25 + 1;
            }
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v27;
            }
            char v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(a2 + 2), v28);
            char v31 = &v29[16 * v25];
            *(void *)char v31 = v21;
            *((void *)v31 + 1) = a1;
            char v33 = *a2;
            uint64_t v32 = a2[1];
            uint64_t v34 = v31;
            if (v32 != *a2)
            {
              do
              {
                *((_OWORD *)v34 - 1) = *((_OWORD *)v32 - 1);
                v34 -= 16;
                v32 -= 16;
              }
              while (v32 != v33);
              uint64_t v32 = *a2;
            }
            char v20 = v31 + 16;
            *a2 = v34;
            a2[1] = v31 + 16;
            a2[2] = &v29[16 * v30];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *(void *)char v20 = v21;
            *((void *)v20 + 1) = a1;
            v20 += 16;
          }
          a2[1] = v20;
        }
        v21 += 64;
      }
      while (v21 != v22);
    }
  }
  if (v41)
  {
    uint64_t v35 = v39;
    uint64_t v39 = 0;
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
    }
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::section_begin(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((void *)(a1 + 56), (uint64_t)&v2);
  uint64_t result = v2;
  if (v3)
  {
    uint64_t v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::section_end(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((void *)(a1 + 56), (uint64_t)v2);
  uint64_t result = v2[0];
  if ((v3 & 1) == 0) {
    return v2[0] + (v2[1] << 6);
  }
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getBytesInAddress()
{
  return 8;
}

const char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getFileFormatName(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  int v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 != 2)
  {
    if (v2 != 1) {
      llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
    }
    int v3 = *(unsigned __int16 *)(v1 + 18);
    if (v3 > 82)
    {
      if (v3 <= 223)
      {
        if (v3 > 104)
        {
          if (v3 == 105) {
            return "elf32-msp430";
          }
          if (v3 == 164) {
            return "elf32-hexagon";
          }
        }
        else
        {
          if (v3 == 83) {
            return "elf32-avr";
          }
          if (v3 == 94) {
            return "elf32-xtensa";
          }
        }
      }
      else if (v3 <= 243)
      {
        if (v3 == 224) {
          return "elf32-amdgpu";
        }
        if (v3 == 243) {
          return "elf32-littleriscv";
        }
      }
      else
      {
        switch(v3)
        {
          case 244:
            return "elf32-lanai";
          case 252:
            return "elf32-csky";
          case 258:
            return "elf32-loongarch";
        }
      }
    }
    else
    {
      if (v3 <= 17)
      {
        uint64_t result = "elf32-m68k";
        switch(v3)
        {
          case 2:
            return "elf32-sparc";
          case 3:
            uint64_t result = "elf32-i386";
            break;
          case 4:
            return result;
          case 6:
            uint64_t result = "elf32-iamcu";
            break;
          case 8:
            uint64_t result = "elf32-mips";
            break;
          default:
            return "elf32-unknown";
        }
        return result;
      }
      if (v3 > 39)
      {
        if (v3 == 40) {
          return "elf32-littlearm";
        }
        if (v3 == 62) {
          return "elf32-x86-64";
        }
      }
      else
      {
        if (v3 == 18) {
          return "elf32-sparc";
        }
        if (v3 == 20) {
          return "elf32-powerpcle";
        }
      }
    }
    return "elf32-unknown";
  }
  int v5 = *(unsigned __int16 *)(v1 + 18);
  if (v5 > 182)
  {
    if (v5 > 246)
    {
      switch(v5)
      {
        case 247:
          return "elf64-bpf";
        case 251:
          return "elf64-ve";
        case 258:
          return "elf64-loongarch";
      }
    }
    else
    {
      switch(v5)
      {
        case 183:
          return "elf64-littleaarch64";
        case 224:
          return "elf64-amdgpu";
        case 243:
          return "elf64-littleriscv";
      }
    }
  }
  else if (v5 > 21)
  {
    switch(v5)
    {
      case 22:
        return "elf64-s390";
      case 43:
        return "elf64-sparc";
      case 62:
        return "elf64-x86-64";
    }
  }
  else
  {
    switch(v5)
    {
      case 3:
        return "elf64-i386";
      case 8:
        return "elf64-mips";
      case 21:
        return "elf64-powerpcle";
    }
  }
  return "elf64-unknown";
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getArch(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  unsigned int v2 = *(unsigned __int16 *)(v1 + 18);
  if (v2 <= 0x52)
  {
    if (*(unsigned __int16 *)(v1 + 18) <= 0x27u)
    {
      uint64_t result = 15;
      switch(*(_WORD *)(v1 + 18))
      {
        case 2:
        case 0x12:
          return 31;
        case 3:
        case 6:
          return 37;
        case 4:
          return result;
        case 8:
          int v6 = *(unsigned __int8 *)(v1 + 4);
          if (v6 != 1)
          {
            if (v6 == 2) {
              return 19;
            }
LABEL_54:
            llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
          }
          uint64_t result = 17;
          break;
        case 0x14:
          return 22;
        case 0x15:
          return 24;
        case 0x16:
          return 32;
        default:
          return 0;
      }
      return result;
    }
    switch(v2)
    {
      case '(':
        return 1;
      case '+':
        return 30;
      case '>':
        return 38;
    }
    return 0;
  }
  if (*(unsigned __int16 *)(v1 + 18) <= 0xDFu)
  {
    if (*(unsigned __int16 *)(v1 + 18) <= 0x68u)
    {
      if (v2 == 83) {
        return 7;
      }
      if (v2 == 94) {
        return 40;
      }
    }
    else
    {
      switch(v2)
      {
        case 0x69u:
          return 20;
        case 0xA4u:
          return 12;
        case 0xB7u:
          return 3;
      }
    }
    return 0;
  }
  switch(*(_WORD *)(v1 + 18))
  {
    case 0xF3:
      int v4 = *(unsigned __int8 *)(v1 + 4);
      if (v4 != 1)
      {
        if (v4 == 2) {
          return 28;
        }
        goto LABEL_54;
      }
      return 27;
    case 0xF4:
      return 55;
    case 0xF5:
    case 0xF6:
    case 0xF8:
    case 0xF9:
    case 0xFA:
      return 0;
    case 0xF7:
      return 8;
    case 0xFB:
      return 60;
    case 0xFC:
      return 10;
    default:
      if (v2 == 224)
      {
        int v7 = *(unsigned __int8 *)(v1 + 48);
        unsigned int v8 = v7 - 1;
        if ((v7 - 32) >= 0x28) {
          unsigned int v9 = 0;
        }
        else {
          unsigned int v9 = 26;
        }
        if (v8 >= 0x10) {
          uint64_t result = v9;
        }
        else {
          uint64_t result = 25;
        }
      }
      else
      {
        if (v2 != 258) {
          return 0;
        }
        int v5 = *(unsigned __int8 *)(v1 + 4);
        if (v5 != 1)
        {
          if (v5 == 2) {
            return 14;
          }
          goto LABEL_54;
        }
        uint64_t result = 13;
      }
      break;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStartAddress@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 56);
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(void *)a2 = *(void *)(v2 + 24);
  return result;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isRelocatableObject(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 56) + 16) == 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolSize(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(void *)(v4 + 16);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 4) >> 4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolOther(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 5);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolELFType(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned char *)(v4 + 4) & 0xF;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionType(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 4);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionFlags(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionOffset(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationAddend@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelSection(a1, a2)+ 1) != 4)llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(); {
  uint64_t result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRela(a1, a2);
  }
  int v7 = result[2];
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v7;
  return result;
}

unsigned char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getBuildAttributes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, llvm::ELFAttributeParser *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  char v5 = (void *)(a1 + 56);
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((void *)(a1 + 56), (uint64_t)&v16);
  if (v18)
  {
    uint64_t v9 = v16;
    uint64_t v16 = 0;
    *(void *)a3 = v9;
    goto LABEL_8;
  }
  if (!v17)
  {
LABEL_6:
    *(void *)a3 = 0;
    goto LABEL_8;
  }
  int v7 = (_DWORD *)(v16 + 4);
  uint64_t v8 = v17 << 6;
  while (*v7 != 1879048195)
  {
    v7 += 16;
    v8 -= 64;
    if (!v8) {
      goto LABEL_6;
    }
  }
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<char>(v5, (uint64_t)(v7 - 1), (uint64_t)&v13);
  uint64_t v10 = v13;
  if (v15) {
    goto LABEL_19;
  }
  if (*v13 != 65 || v14 == 1)
  {
    uint64_t v10 = 0;
LABEL_19:
    *(void *)a3 = v10;
    goto LABEL_8;
  }
  uint64_t result = (unsigned char *)llvm::ELFAttributeParser::parse(a2, (uint64_t)v13, v14, 1, a3);
  uint64_t v12 = *(void *)a3;
  if (v15)
  {
    uint64_t result = v13;
    unint64_t v13 = 0;
    if (result) {
      uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
    }
  }
  if (!v12) {
    goto LABEL_6;
  }
LABEL_8:
  if (v18)
  {
    uint64_t result = (unsigned char *)v16;
    uint64_t v16 = 0;
    if (result) {
      return (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getDynamicSymbolIterators@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::dynamic_symbol_begin(a1);
  unint64_t v6 = v5;
  unint64_t result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::dynamic_symbol_end(a1);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v8;
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getPlatformFlags(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 56) + 48);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEType(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 56) + 16);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEMachine(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 56) + 18);
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>@<X0>(void *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1, a2, (uint64_t)&v9);
  unint64_t v8 = v9;
  if (v10)
  {
    *(unsigned char *)(a4 + 8) |= 1u;
    *(void *)a4 = v8;
  }
  else
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(a1, v9, a3, a4);
    if (v10)
    {
      unint64_t result = v9;
      uint64_t v9 = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::toDRI(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((void *)(a1 + 56), (uint64_t)&v7);
    unint64_t v5 = v7;
    if (v8)
    {
      unint64_t v7 = 0;
      if (v5)
      {
        (*(void (**)(unint64_t))(*(void *)v5 + 8))(v5);
        LODWORD(v5) = 0;
      }
      a3 = 0;
    }
    else
    {
      unint64_t v5 = (a2 - v7) >> 6;
    }
  }
  else
  {
    a3 = 0;
    LODWORD(v5) = 0;
  }
  return v5 | ((unint64_t)a3 << 32);
}

uint64_t *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    v13[0] = 0;
    v13[1] = 0;
    char v14 = 0;
LABEL_5:
    long long v9 = a4[1];
    v12[0] = *a4;
    v12[1] = v9;
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1, a2, (uint64_t)a3, v12, a5);
    if ((v14 & 1) == 0) {
      return result;
    }
    goto LABEL_8;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(a1, a3, (uint64_t)v13);
  if ((v14 & 1) == 0)
  {
    a3 = (void *)v13[0];
    goto LABEL_5;
  }
  uint64_t v11 = v13[0];
  v13[0] = 0;
  *(unsigned char *)(a5 + 8) |= 1u;
  *(void *)a5 = v11;
LABEL_8:
  unint64_t result = (uint64_t *)v13[0];
  v13[0] = 0;
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  return result;
}

uint64_t *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  long long v7 = a4[1];
  v10[0] = *a4;
  v10[1] = v7;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionIndex(a2, a3, v10, (uint64_t)&v11);
  if (v12)
  {
    long long v9 = v11;
    *(unsigned char *)(a5 + 8) |= 1u;
    *(void *)a5 = v9;
  }
  else if (v11)
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1, v11, a5);
    if (v12)
    {
      unint64_t result = v11;
      uint64_t v11 = 0;
      if (result) {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
    }
  }
  else
  {
    *(unsigned char *)(a5 + 8) &= ~1u;
    *(void *)a5 = 0;
  }
  return result;
}

uint64_t *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionIndex@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int16 *)(a1 + 6);
  if (v5 != 0xFFFF)
  {
    *(unsigned char *)(a4 + 8) &= ~1u;
    if ((unsigned __int16)(v5 + 256) <= 0x100u)
    {
      *(_DWORD *)a4 = 0;
      return result;
    }
    goto LABEL_6;
  }
  long long v6 = a3[1];
  v9[0] = *a3;
  v9[1] = v6;
  unint64_t result = llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)1,false>>(-1431655765 * ((unint64_t)(a1 - a2) >> 3), (uint64_t *)v9, (uint64_t)&v10);
  if ((v11 & 1) == 0)
  {
    *(unsigned char *)(a4 + 8) &= ~1u;
    int v5 = v10;
LABEL_6:
    *(_DWORD *)a4 = v5;
    return result;
  }
  uint64_t v8 = v10;
  *(unsigned char *)(a4 + 8) |= 1u;
  *(void *)a4 = v8;
  return result;
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v8 = a1[17];
  if (v8)
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable(a1 + 7, v8, (uint64_t)&v17);
    if (v19)
    {
      uint64_t v12 = v17;
      goto LABEL_9;
    }
    char v11 = v17;
    uint64_t v10 = v18;
  }
  else
  {
    uint64_t v10 = 0;
    char v11 = 0;
  }
  *(void *)&long long v14 = v11;
  *((void *)&v14 + 1) = v10;
  char v15 = 1;
  uint64_t v16 = 0;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1 + 7, a2, a3, &v14, (uint64_t)&v17);
  uint64_t v12 = v17;
  if (v18)
  {
LABEL_9:
    *(unsigned char *)(a4 + 16) |= 1u;
    *(void *)a4 = v12;
    return result;
  }
  if (v17)
  {
    *(unsigned char *)(a4 + 16) &= ~1u;
    *(void *)a4 = v12;
    *(void *)(a4 + 8) = a1;
  }
  else
  {
    unint64_t result = (void *)(*(uint64_t (**)(void *))(*a1 + 360))(a1);
    *(unsigned char *)(a4 + 16) &= ~1u;
    *(void *)a4 = result;
    *(void *)(a4 + 8) = v13;
    if (v18)
    {
      unint64_t result = v17;
      uint64_t v17 = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelSection(uint64_t a1, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection((void *)(a1 + 56), a2, (uint64_t)&v10);
  if (v11)
  {
    int v3 = v10;
    uint64_t v10 = 0;
    int v5 = v3;
    *(void *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    __int16 v9 = 260;
    uint64_t v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRel(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,false>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if (v11)
  {
    int v3 = v10;
    uint64_t v10 = 0;
    int v5 = v3;
    *(void *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    __int16 v9 = 260;
    uint64_t v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRela(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if (v11)
  {
    int v3 = v10;
    uint64_t v10 = 0;
    int v5 = v3;
    *(void *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    __int16 v9 = 260;
    uint64_t v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,false>>@<X0>(void *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1, a2, (uint64_t)&v9);
  uint64_t v8 = v9;
  if (v10)
  {
    *(unsigned char *)(a4 + 8) |= 1u;
    *(void *)a4 = v8;
  }
  else
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,false>>(a1, v9, a3, a4);
    if (v10)
    {
      unint64_t result = v9;
      __int16 v9 = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,false>>@<X0>(void *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,false>>(a1, a2, (uint64_t)v22);
  if (v23)
  {
    uint64_t v8 = v22[0];
    char v9 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    if (v22[1] <= (unint64_t)a3)
    {
      uint64_t v11 = 16 * a3;
      v12[0] = "can't read an entry at 0x";
      _OWORD v12[2] = &v11;
      __int16 v13 = 3587;
      v14[0] = v12;
      uint64_t v14[2] = ": it goes past the end of the section (0x";
      __int16 v15 = 770;
      uint64_t v10 = a2[4];
      v16[0] = v14;
      long long v16[2] = &v10;
      __int16 v17 = 3586;
      uint64_t v18 = v16;
      char v19 = ")";
      __int16 v20 = 770;
      int v21 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v8 = v22[0] + 16 * a3;
    char v9 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v9;
  *(void *)a4 = v8;
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,false>>@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = result;
  if (a2[7] != 16)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(result, (uint64_t)a2, &v28);
    uint64_t v12 = std::string::insert(&v28, 0, "section ");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    long long v14 = std::string::append(&v30, " has invalid sh_entsize: expected ");
    __int16 v15 = (uint64_t *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    uint64_t v34 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v32.__r_.__value_.__r.__words[0] = 16;
    v38[0] = __p;
    uint64_t v39 = &v32;
    __int16 v40 = 2564;
    v41[0] = v38;
    uint64_t v42 = (std::string *)", but got ";
    __int16 v43 = 770;
    v27.__r_.__value_.__r.__words[0] = a2[7];
    uint64_t v44 = v41;
    __int16 v45 = &v27;
    __int16 v46 = 3074;
    LODWORD(v26.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  unint64_t v36 = v7;
  uint64_t v37 = v6;
  if ((v7 & 0xF) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(result, (uint64_t)a2, &v32);
    uint64_t v8 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v28, " has an invalid sh_size (");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v30;
    uint64_t v34 = (uint64_t *)&v36;
    __int16 v35 = 3076;
    v38[0] = __p;
    uint64_t v39 = (std::string *)") which is not a multiple of its sh_entsize (";
    __int16 v40 = 770;
    v27.__r_.__value_.__r.__words[0] = a2[7];
    v41[0] = v38;
    uint64_t v42 = &v27;
    __int16 v43 = 3074;
    uint64_t v44 = v41;
    __int16 v45 = (std::string *)")";
    __int16 v46 = 770;
    LODWORD(v26.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (__CFADD__(v6, v7))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(result, (uint64_t)a2, &v32);
    uint64_t v16 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    uint64_t v18 = std::string::append(&v28, " has a sh_offset (0x");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v30;
    uint64_t v34 = &v37;
    __int16 v35 = 3588;
    v38[0] = __p;
    uint64_t v39 = (std::string *)") + sh_size (0x";
    __int16 v40 = 770;
    v41[0] = v38;
    uint64_t v42 = (std::string *)&v36;
    __int16 v43 = 3586;
    uint64_t v44 = v41;
    __int16 v45 = (std::string *)") that cannot be represented";
    __int16 v46 = 770;
    LODWORD(v27.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (v7 + v6 > result[1])
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(result, (uint64_t)a2, &v26);
    __int16 v20 = std::string::insert(&v26, 0, "section ");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    uint64_t v22 = std::string::append(&v27, " has a sh_offset (0x");
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    v28.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37;
    __int16 v29 = 3588;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    v30.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    __int16 v31 = 770;
    __p[0] = &v30;
    uint64_t v34 = (uint64_t *)&v36;
    __int16 v35 = 3586;
    v38[0] = __p;
    uint64_t v39 = (std::string *)") that is greater than the file size (0x";
    __int16 v40 = 770;
    uint64_t v25 = v4[1];
    v41[0] = v38;
    uint64_t v42 = (std::string *)&v25;
    __int16 v43 = 3586;
    uint64_t v44 = v41;
    __int16 v45 = (std::string *)")";
    __int16 v46 = 770;
    int v47 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v24 = *result + v6;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v24;
  *(void *)(a3 + 8) = v7 >> 4;
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::dynamic_symbol_begin(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  unsigned int v2 = v1 && *(void *)(v1 + 32) > 0x17uLL;
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::dynamic_symbol_end(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (v1) {
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::toDRI(a1, v1, *(void *)(v1 + 32) / 0x18uLL);
  }
  else {
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::dynamic_symbol_begin(a1);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFObjectFile(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 32);
  v9[0] = *(_OWORD *)(a2 + 16);
  v9[1] = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>::vector(__p, a2 + 72);
  v8[1] = 0;
  uint64_t v8[2] = 0;
  v8[0] = v9;
  if (*(void *)(a2 + 104)) {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)v8, a2 + 96);
  }
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFObjectFile(a1, v9, (uint64_t)&v6, *(void *)(a2 + 120), *(void *)(a2 + 128), *(void *)(a2 + 136));
  if (v8[0] != v9) {
    free(v8[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>(uint64_t *a1, _DWORD *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = (37 * *a2) & (v3 - 1);
    unint64_t v7 = (_DWORD *)(*a1 + 8 * v6);
    int v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -2;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        unint64_t v7 = (_DWORD *)(v4 + 8 * (v13 & v5));
        int v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        unint64_t v7 = v10;
      }
    }
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::grow(a1, v7);
  std::string::size_type v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_DWORD *llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(_DWORD **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::moveFromOldBuckets(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      _DWORD *result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::moveFromOldBuckets(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_DWORD **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *int v7 = -1;
      v7 += 2;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFD)
    {
      uint64_t v10 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)v5, a2, &v10);
      std::string::size_type v9 = v10;
      _DWORD *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t llvm::ConstantDataArray::get<unsigned char>(uint64_t a1, uint64_t *a2, llvm::Type *a3)
{
  llvm::ArrayType::get((uint64_t **)(*(void *)a1 + 1944), a3);
  return llvm::ConstantDataSequential::getImpl(a2, (uint64_t *)a3, v5);
}

void *std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = (void *)((char *)a2 + v6 - a4);
  uint64_t v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    std::string::size_type v9 = v7;
    uint64_t v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8++ = *(_OWORD *)v9;
      *std::string::size_type v9 = 0;
      v9[1] = 0;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev> *,std::shared_ptr<llvm::BitCodeAbbrev> *,std::shared_ptr<llvm::BitCodeAbbrev> *>((uint64_t)&v11, a2, v7, v6);
}

uint64_t std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__swap_out_circular_buffer(void *a1, void *a2, void *a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = (void *)*a1;
  uint64_t v6 = result;
  if ((void *)*a1 != a3)
  {
    int v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      long long v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *int v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  std::string::size_type v9 = (void *)a1[1];
  uint64_t v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    uint64_t v6 = a2[1];
  }
  a2[2] = v10;
  char v11 = (void *)*a1;
  *a1 = v6;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev> *,std::shared_ptr<llvm::BitCodeAbbrev> *,std::shared_ptr<llvm::BitCodeAbbrev> *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    int v7 = a3;
    do
    {
      long long v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *int v7 = 0;
      v7[1] = 0;
      std::string::size_type v9 = *(std::__shared_weak_count **)(a4 - 8);
      *(_OWORD *)(a4 - 16) = v8;
      a4 -= 16;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v9);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev> *,std::shared_ptr<llvm::BitCodeAbbrev> *,std::shared_ptr<llvm::BitCodeAbbrev> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::size_type v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__assign_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = (void *)*a1;
  if (a4 > (a1[2] - *a1) >> 4)
  {
    std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__vdeallocate(a1);
    if (a4 >> 60) {
      abort();
    }
    uint64_t v9 = a1[2] - *a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vallocate[abi:nn180100](a1, v11);
    for (i = (uint64_t *)a1[1]; v6 != a3; v6 += 2)
    {
      uint64_t v13 = v6[1];
      uint64_t *i = *v6;
      i[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      i += 2;
    }
LABEL_19:
    a1[1] = (uint64_t)i;
    return;
  }
  unint64_t v14 = (a1[1] - (uint64_t)v8) >> 4;
  if (v14 < a4)
  {
    __int16 v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev> *,std::shared_ptr<llvm::BitCodeAbbrev> *,std::shared_ptr<llvm::BitCodeAbbrev> *>((uint64_t)&v22, a2, v15, v8);
    i = (uint64_t *)a1[1];
    if (v15 != a3)
    {
      uint64_t v16 = (uint64_t *)a1[1];
      do
      {
        uint64_t v17 = v15[1];
        uint64_t *v16 = *v15;
        v16[1] = v17;
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
        i += 2;
        v15 += 2;
        v16 += 2;
      }
      while (v15 != a3);
    }
    goto LABEL_19;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev> *,std::shared_ptr<llvm::BitCodeAbbrev> *,std::shared_ptr<llvm::BitCodeAbbrev> *>((uint64_t)&v23, a2, a3, v8);
  uint64_t v19 = v18;
  uint64_t v20 = a1[1];
  if (v20 != v18)
  {
    do
    {
      std::string::size_type v21 = *(std::__shared_weak_count **)(v20 - 8);
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v21);
      }
      v20 -= 16;
    }
    while (v20 != v19);
  }
  a1[1] = v19;
}

void std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__clear[abi:nn180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void llvm::AppleInternalGetFullBitcodeVersionString(void *a1@<X8>)
{
  std::string::basic_string[abi:nn180100]<0>(v12, "");
  if (v13 < 0)
  {
    unint64_t v11 = v12[1];
    operator delete(v12[0]);
    if (v11) {
      goto LABEL_3;
    }
LABEL_18:
    std::string::basic_string[abi:nn180100]<0>(a1, "");
    return;
  }
  if (!v13) {
    goto LABEL_18;
  }
LABEL_3:
  std::string::basic_string[abi:nn180100]<0>(&v16, "");
  uint64_t v3 = std::string::insert(&v16, 0, "APPLE_1_");
  std::string::size_type v4 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = std::string::append(&v17, "_");
  std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  __int16 v14 = 265;
  LODWORD(v12[0]) = 0;
  llvm::Twine::str((llvm::Twine *)v12, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v9 = std::string::append(&v18, (const std::string::value_type *)p_p, size);
  std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)a1 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  a1[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void *llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(void *result, char *a2, char *a3)
{
  std::string::size_type v4 = a2;
  uint64_t v5 = result;
  uint64_t v6 = a3 - a2;
  uint64_t v7 = result[1];
  unint64_t v8 = v7 + ((a3 - a2) >> 3);
  if (result[2] < v8)
  {
    uint64_t result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v8, 1);
    uint64_t v7 = v5[1];
  }
  if (v4 != a3)
  {
    uint64_t v9 = (unsigned char *)(*v5 + v7);
    do
    {
      uint64_t v10 = *(void *)v4;
      v4 += 8;
      *v9++ = v10;
    }
    while (v4 != a3);
    uint64_t v7 = v5[1];
  }
  v5[1] = v7 + (v6 >> 3);
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = (std::string *)(v6 + 32);
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

uint64_t llvm::MDNode::classof(unsigned char *a1)
{
  return (*a1 < 0x24uLL) & (0xFFFFFFFF0uLL >> *a1);
}

unsigned int *llvm::SmallVectorImpl<unsigned long long>::append<unsigned char const*,void>(unsigned int *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  std::string::size_type v4 = a2;
  uint64_t v5 = result;
  int v6 = a3 - a2;
  uint64_t v7 = result[2];
  unint64_t v8 = a3 - a2 + v7;
  if (v8 > result[3])
  {
    uint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v8, 8);
    uint64_t v7 = v5[2];
  }
  if (v4 != a3)
  {
    long long v9 = (void *)(*(void *)v5 + 8 * v7);
    do
    {
      unsigned int v10 = *v4++;
      *v9++ = v10;
    }
    while (v4 != a3);
  }
  v5[2] = v7 + v6;
  return result;
}

const void **llvm::SmallPtrSetImpl<llvm::Value *>::insert@<X0>(llvm::SmallPtrSetImplBase *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = llvm::SmallPtrSetImplBase::insert_imp(a1, a2);
  uint64_t v7 = *((void *)a1 + 1);
  uint64_t v8 = 16;
  if (v7 == *(void *)a1) {
    uint64_t v8 = 20;
  }
  long long v9 = (const void **)(v7 + 8 * *(unsigned int *)((char *)a1 + v8));
  if (v9 != result)
  {
    while ((unint64_t)*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (++result == v9)
      {
        uint64_t result = v9;
        break;
      }
    }
  }
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v6;
  return result;
}

uint64_t llvm::CallBase::arg_end(llvm::CallBase *this)
{
  int v1 = *((unsigned __int8 *)this + 16);
  if (v1 == 84)
  {
    uint64_t v2 = 0;
  }
  else if (v1 == 39)
  {
    uint64_t v2 = (*((_DWORD *)this + 20) + 1);
  }
  else
  {
    uint64_t v2 = 2;
  }
  int v3 = *((_DWORD *)this + 5);
  if (v3 < 0 && (uint64_t v5 = (char *)this - 32 * (v3 & 0x7FFFFFF), v6 = *((void *)v5 - 1), (v6 & 0xFFFFFFFF0) != 0)) {
    uint64_t v4 = (*((_DWORD *)v5 - 3) - *(_DWORD *)&v5[-v6]);
  }
  else {
    uint64_t v4 = 0;
  }
  return (uint64_t)this + -32 * v4 + -32 * v2 - 32;
}

llvm::cl::Option *llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>(llvm::cl::Option *a1, char *a2, _WORD *a3, int **a4, __n128 *a5)
{
  uint64_t v10 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_270DBCA00;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_270DBC7D8;
  *(void *)(v10 + 152) = &unk_270DBC6E8;
  *(void *)(v10 + 160) = &unk_270DBFE18;
  *(void *)(v10 + 184) = v10 + 160;
  llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>(uint64_t a1, char *__s, _WORD *a3, int **a4, __n128 *a5)
{
  size_t v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v10);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  int v11 = **a4;
  *(_DWORD *)(a1 + 128) = v11;
  *(unsigned char *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v11;
  __n128 result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

void std::__function::__func<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_270DBFE18;
  return result;
}

void std::__function::__func<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DBFE18;
}

void std::__shared_ptr_emplace<llvm::BitCodeAbbrev>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBFDE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::BitCodeAbbrev>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBFDE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

void std::__shared_ptr_emplace<llvm::BitCodeAbbrev>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40)) {
    free(v2);
  }
}

uint64_t _GLOBAL__sub_I_BitcodeWriter_cpp()
{
  int v4 = 1;
  int v2 = 25;
  int v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Number of metadatas above which we emit an index to enable lazy-loading";
  v1.n128_u64[1] = 71;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&_MergedGlobals_8, "bitcode-mdindex-threshold", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &_MergedGlobals_8, &dword_261C2B000);
  int v4 = 1;
  int v2 = 512;
  int v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"The threshold (unit M) for flushing LLVM bitcode.";
  v1.n128_u64[1] = 49;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&FlushThreshold, "bitcode-flush-threshold", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &FlushThreshold, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B417C88, 0, 0);
  byte_26B417D08 = 0;
  qword_26B417D10 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B417D18 = 0;
  qword_26B417C88 = (uint64_t)&unk_270DBC910;
  qword_26B417D20 = (uint64_t)&unk_270DBC658;
  qword_26B417D28 = (uint64_t)&unk_270DBC998;
  qword_26B417D40 = (uint64_t)&qword_26B417D28;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B417C88, (uint64_t *)"write-relbf-to-summary", 0x16uLL);
  word_26B417C92 = word_26B417C92 & 0xFF9F | 0x20;
  byte_26B417D08 = 0;
  word_26B417D18 = 256;
  qword_26B417CA8 = (uint64_t)"Write relative block frequency to function summary ";
  unk_26B417CB0 = 51;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B417C88);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B417C88, &dword_261C2B000);
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::InsertIntoBucketImpl<llvm::Value const*>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::InsertIntoBucketImpl<llvm::Value const*>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::grow(a1, v7);
  long long v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::moveFromOldBuckets(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      __n128 result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)v5, (void *)a2, &v10);
      long long v9 = v10;
      void *v10 = *(void *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t llvm::GlobalValue::isStrongDefinitionForLinker(llvm::GlobalValue *this)
{
  unsigned int v1 = *((_DWORD *)this + 8) & 0xF;
  if (v1 == 1) {
    return 0;
  }
  if (*((unsigned char *)this + 16))
  {
    if (*((unsigned char *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      return 0;
    }
  }
  else if ((*((_DWORD *)this + 8) & 0x1000000) == 0 {
         && *((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72))
  }
  {
    return 0;
  }
  BOOL v3 = v1 > 0xA;
  unsigned int v4 = (0x1C3u >> v1) & 1;
  if (v3) {
    return 1;
  }
  else {
    return v4;
  }
}

uint64_t llvm::BranchInst::setSuccessor(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = result - 32;
  unsigned int v4 = (void *)(result - 32 - 32 * a2);
  if (*v4)
  {
    uint64_t v5 = v3 - 32 * a2;
    int v7 = *(void **)(v5 + 16);
    uint64_t v6 = (void *)(v5 + 16);
    *int v7 = *(v6 - 1);
    uint64_t v8 = *(v6 - 1);
    if (v8) {
      *(void *)(v8 + 16) = *v6;
    }
  }
  *unsigned int v4 = a3;
  if (a3)
  {
    uint64_t v11 = *(void *)(a3 + 8);
    long long v9 = (void *)(a3 + 8);
    uint64_t v10 = v11;
    uint64_t v12 = v3 - 32 * a2;
    *(void *)(v12 + 8) = v11;
    if (v11) {
      *(void *)(v10 + 16) = v12 + 8;
    }
    *(void *)(v12 + 16) = v9;
    *long long v9 = v4;
  }
  return result;
}

uint64_t llvm::InvokeInst::setUnwindDest(uint64_t result, uint64_t a2)
{
  int v2 = (void *)(result - 64);
  if (*(void *)(result - 64))
  {
    **(void **)(result - 48) = *(void *)(result - 56);
    uint64_t v3 = *(void *)(result - 56);
    if (v3) {
      *(void *)(v3 + 16) = *(void *)(result - 48);
    }
  }
  *int v2 = a2;
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    unsigned int v4 = (void *)(a2 + 8);
    uint64_t v5 = v6;
    *(void *)(result - 56) = v6;
    if (v6) {
      *(void *)(v5 + 16) = result - 56;
    }
    *(void *)(result - 48) = v4;
    *unsigned int v4 = v2;
  }
  return result;
}

uint64_t llvm::CatchSwitchInst::setUnwindDest(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 20);
  if ((v2 & 0x40000000) != 0) {
    uint64_t v3 = *(void *)(result - 8);
  }
  else {
    uint64_t v3 = result - 32 * (v2 & 0x7FFFFFF);
  }
  unsigned int v4 = (void *)(v3 + 32);
  if (*(void *)(v3 + 32))
  {
    **(void **)(v3 + 48) = *(void *)(v3 + 40);
    uint64_t v5 = *(void *)(v3 + 40);
    if (v5) {
      *(void *)(v5 + 16) = *(void *)(v3 + 48);
    }
  }
  *unsigned int v4 = a2;
  if (a2)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v6 = (void *)(a2 + 8);
    uint64_t v7 = v8;
    *(void *)(v3 + 40) = v8;
    if (v8) {
      *(void *)(v7 + 16) = v3 + 40;
    }
    *(void *)(v3 + 48) = v6;
    *uint64_t v6 = v4;
  }
  return result;
}

uint64_t llvm::CleanupReturnInst::setUnwindDest(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result - 32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
  uint64_t v3 = (void *)(v2 + 32);
  if (*(void *)(v2 + 32))
  {
    **(void **)(v2 + 48) = *(void *)(v2 + 40);
    uint64_t v4 = *(void *)(v2 + 40);
    if (v4) {
      *(void *)(v4 + 16) = *(void *)(v2 + 48);
    }
  }
  *uint64_t v3 = a2;
  if (a2)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v5 = (void *)(a2 + 8);
    uint64_t v6 = v7;
    *(void *)(v2 + 40) = v7;
    if (v7) {
      *(void *)(v6 + 16) = v2 + 40;
    }
    *(void *)(v2 + 48) = v5;
    *uint64_t v5 = v3;
  }
  return result;
}

uint64_t llvm::PHINode::addIncoming(llvm::PHINode *this, llvm::Value *a2, llvm::BasicBlock *a3)
{
  int v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x7FFFFFF) == *((_DWORD *)this + 15))
  {
    unsigned int v7 = v6 & 0x7FFFFFF;
    if (v7 + (v7 >> 1) <= 2) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = v7 + (v7 >> 1);
    }
    *((_DWORD *)this + 15) = v8;
    llvm::User::growHungoffUses(this, v8, 1);
    int v6 = *((_DWORD *)this + 5);
  }
  int v9 = (v6 + 1) & 0x7FFFFFF;
  *((_DWORD *)this + 5) = v6 & 0xF8000000 | v9;
  uint64_t result = llvm::PHINode::setIncomingValue((uint64_t)this, v9 - 1, (uint64_t)a2);
  int v11 = *((_DWORD *)this + 5);
  uint64_t v12 = v11 & 0x7FFFFFF;
  if ((v11 & 0x40000000) != 0) {
    char v13 = (char *)*((void *)this - 1);
  }
  else {
    char v13 = (char *)this - 32 * v12;
  }
  *(void *)&v13[32 * *((unsigned int *)this + 15) + 8 * (v12 - 1)] = a3;
  return result;
}

uint64_t llvm::PHINode::setIncomingValue(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(result + 20);
  if ((v3 & 0x40000000) != 0) {
    uint64_t v4 = *(void *)(result - 8);
  }
  else {
    uint64_t v4 = result - 32 * (v3 & 0x7FFFFFF);
  }
  uint64_t v5 = v4 + 32 * a2;
  if (*(void *)v5)
  {
    **(void **)(v5 + 16) = *(void *)(v5 + 8);
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6) {
      *(void *)(v6 + 16) = *(void *)(v5 + 16);
    }
  }
  *(void *)uint64_t v5 = a3;
  if (a3)
  {
    uint64_t v9 = *(void *)(a3 + 8);
    unsigned int v7 = (void *)(a3 + 8);
    uint64_t v8 = v9;
    uint64_t v10 = v4 + 32 * a2;
    *(void *)(v10 + 8) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v10 + 8;
    }
    *(void *)(v10 + 16) = v7;
    *unsigned int v7 = v5;
  }
  return result;
}

unint64_t llvm::DataLayout::getTypeSizeInBits(llvm::DataLayout *this, llvm::Type *a2)
{
  unint64_t v3 = *((unsigned int *)a2 + 2);
  unint64_t result = 16;
  switch(*((_DWORD *)a2 + 2))
  {
    case 2u:
      unint64_t result = 32;
      break;
    case 3u:
    case 0xAu:
      unint64_t result = 64;
      break;
    case 4u:
      unint64_t result = 80;
      break;
    case 5u:
    case 6u:
      unint64_t result = 128;
      break;
    case 7u:
    case 9u:
    case 0xCu:
    case 0xEu:
    case 0x14u:
      __break(1u);
      JUMPOUT(0x261D23828);
    case 8u:
      unint64_t result = *(unsigned int *)(*((void *)this + 30) + 4);
      break;
    case 0xBu:
      unint64_t result = 0x2000;
      break;
    case 0xDu:
      unint64_t result = v3 >> 8;
      break;
    case 0xFu:
      if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12) {
        LODWORD(v3) = *(_DWORD *)(**((void **)a2 + 2) + 8);
      }
      unint64_t result = *(unsigned int *)(llvm::DataLayout::getPointerAlignElem(this, v3 >> 8) + 4);
      break;
    case 0x10u:
      unint64_t result = 8 * *(void *)llvm::DataLayout::getStructLayout(this, a2);
      break;
    case 0x11u:
      uint64_t v7 = *((void *)a2 + 4);
      unint64_t result = 8 * v7 * llvm::DataLayout::getTypeAllocSize(this, *((llvm::Type **)a2 + 3));
      break;
    case 0x12u:
    case 0x13u:
      uint64_t v5 = *((unsigned int *)a2 + 8);
      unint64_t result = llvm::DataLayout::getTypeSizeInBits(this, *((llvm::Type **)a2 + 3)) * v5;
      break;
    case 0x15u:
      getTargetTypeInfo((uint64_t *)a2);
      unint64_t result = llvm::DataLayout::getTypeSizeInBits(this, v6);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateAdd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, int a5, int a6)
{
  unint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, llvm::Value *))(**((void **)this + 9)
                                                                                               + 32))(*((void *)this + 9), 13, a2, a3);
  if (!result)
  {
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 13, (uint64_t *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  }
  return result;
}

uint64_t *llvm::TrackingMDRef::operator=(uint64_t *a1, unsigned __int8 **a2)
{
  if (a2 != (unsigned __int8 **)a1)
  {
    if (*a1) {
      llvm::MetadataTracking::untrack((uint64_t)a1, *a1);
    }
    *a1 = (uint64_t)*a2;
    if (*a2)
    {
      llvm::MetadataTracking::retrack((uint64_t)a2, *a2, (uint64_t)a1);
      *a2 = 0;
    }
  }
  return a1;
}

llvm::PHINode *llvm::PHINode::PHINode(llvm::PHINode *this, llvm::Type *a2, int a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  uint64_t v8 = (llvm::Value *)llvm::Instruction::Instruction((uint64_t)this, (uint64_t)a2, 55, 0, 0, (uint64_t *)a5);
  *((_DWORD *)v8 + 15) = a3;
  llvm::Value::setName(v8, a4);
  uint64_t v9 = *((unsigned int *)this + 15);
  uint64_t v10 = operator new(40 * v9);
  *((void *)this - 1) = v10;
  if (v9)
  {
    int v11 = &v10[4 * v9];
    do
    {
      void *v10 = 0;
      v10[1] = 0;
      _OWORD v10[2] = 0;
      v10[3] = this;
      v10 += 4;
    }
    while (v10 != v11);
  }
  return this;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::InsertIntoBucketImpl<llvm::BasicBlock *>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::InsertIntoBucketImpl<llvm::BasicBlock *>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  unint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::moveFromOldBuckets(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      void *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::moveFromOldBuckets(uint64_t a1, void *a2, void *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  if (v5)
  {
    unint64_t v6 = *(void **)a1;
    uint64_t v7 = 16 * v5;
    do
    {
      *unint64_t v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    unsigned int v8 = a2 + 1;
    do
    {
      if ((*(v8 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        char v13 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, v8 - 1, &v13);
        uint64_t v9 = v13;
        *char v13 = *(v8 - 1);
        uint64_t v10 = *v8;
        *unsigned int v8 = 0;
        v9[1] = v10;
        ++*(_DWORD *)(a1 + 8);
        uint64_t v11 = *v8;
        *unsigned int v8 = 0;
        if (v11) {
          std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>::operator()[abi:nn180100]((uint64_t)v8, v11);
        }
      }
      uint64_t v12 = v8 + 1;
      v8 += 2;
    }
    while (v12 != a3);
  }
}

void std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a2 + 24);
    if (v2 != (void *)(a2 + 40)) {
      free(v2);
    }
    JUMPOUT(0x263E500B0);
  }
}

void *llvm::SmallVectorImpl<llvm::BasicBlock *>::append<llvm::PredIterator<llvm::BasicBlock,llvm::Value::user_iterator_impl<llvm::User>>,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = a2;
    do
    {
      do
      {
        uint64_t v7 = *(void *)(v7 + 8);
        if (!v7) {
          break;
        }
        uint64_t v8 = *(void *)(v7 + 24);
        unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
        BOOL v10 = v8 && v9 >= 0x1C;
      }
      while (!v10 || v9 - 29 >= 0xB);
      ++v6;
    }
    while (v7 != a3);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 8);
  if (v6 + v12 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + v12, 8);
    uint64_t v12 = *(unsigned int *)(a1 + 8);
  }
  unint64_t result = std::uninitialized_copy[abi:nn180100]<llvm::PredIterator<llvm::BasicBlock,llvm::Value::user_iterator_impl<llvm::User>>,llvm::BasicBlock**>(a2, a3, (void *)(*(void *)a1 + 8 * v12));
  *(_DWORD *)(a1 + 8) += v6;
  return result;
}

void *std::uninitialized_copy[abi:nn180100]<llvm::PredIterator<llvm::BasicBlock,llvm::Value::user_iterator_impl<llvm::User>>,llvm::BasicBlock**>(uint64_t a1, uint64_t a2, void *a3)
{
  while (a1 != a2)
  {
    *a3 = *(void *)(*(void *)(a1 + 24) + 40);
    do
    {
      a1 = *(void *)(a1 + 8);
      if (!a1) {
        break;
      }
      uint64_t v3 = *(void *)(a1 + 24);
      unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
      BOOL v5 = v3 && v4 >= 0x1C;
    }
    while (!v5 || v4 - 29 >= 0xB);
    ++a3;
  }
  return a3;
}

unint64_t llvm::DataLayout::getTypeAllocSize(llvm::DataLayout *this, llvm::Type *a2)
{
  unint64_t v4 = (llvm::DataLayout::getTypeSizeInBits(this, a2) + 7) >> 3;
  char Alignment = llvm::DataLayout::getAlignment(this, a2, 1);
  return ((1 << Alignment) + v4 - 1) & -(1 << Alignment);
}

uint64_t *llvm::IRBuilderBase::CreateInsertNUWNSWBinOp(uint64_t *a1, char a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  __int16 v14 = 257;
  uint64_t v11 = (uint64_t *)llvm::BinaryOperator::Create(a2, a3, a4, (const llvm::Twine *)v13, 0);
  unint64_t result = llvm::IRBuilderBase::Insert<llvm::LoadInst>(a1, v11, a5);
  if (a6) {
    *((unsigned char *)result + 17) |= 2u;
  }
  if (a7) {
    *((unsigned char *)result + 17) |= 4u;
  }
  return result;
}

unsigned int *llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(unsigned int *this, int a2, llvm::MDNode *a3)
{
  uint64_t v3 = this;
  int v8 = a2;
  uint64_t v7 = a3;
  if (a3)
  {
    uint64_t v4 = this[2];
    if (v4)
    {
      BOOL v5 = (void *)(*(void *)this + 8);
      uint64_t v6 = 16 * v4;
      while (*((_DWORD *)v5 - 2) != a2)
      {
        v5 += 2;
        v6 -= 16;
        if (!v6) {
          return (unsigned int *)llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>>::emplace_back<unsigned int &,llvm::MDNode *&>(this, &v8, (uint64_t *)&v7);
        }
      }
      *BOOL v5 = a3;
    }
    else
    {
      return (unsigned int *)llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>>::emplace_back<unsigned int &,llvm::MDNode *&>(this, &v8, (uint64_t *)&v7);
    }
  }
  else
  {
    this = (unsigned int *)std::remove_if[abi:nn180100]<std::pair<unsigned int,llvm::MDNode *> *,llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(unsigned int,llvm::MDNode *)::{lambda(std::pair<unsigned int,llvm::MDNode *> const&)#1}>(*(void *)this, *(void *)this + 16 * this[2], a2);
    v3[2] = ((unint64_t)this - *(void *)v3) >> 4;
  }
  return this;
}

uint64_t llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>>::emplace_back<unsigned int &,llvm::MDNode *&>(unsigned int *a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4 = a1[2];
  if (v4 >= a1[3])
  {
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a1, *a2, *a3);
    uint64_t v5 = *(void *)a1;
    unsigned int v7 = a1[2];
  }
  else
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *(void *)a1 + 16 * v4;
    *(_DWORD *)uint64_t v6 = *a2;
    *(void *)(v6 + 8) = *a3;
    unsigned int v7 = v4 + 1;
    a1[2] = v7;
  }
  return v5 + 16 * v7 - 16;
}

uint64_t std::remove_if[abi:nn180100]<std::pair<unsigned int,llvm::MDNode *> *,llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(unsigned int,llvm::MDNode *)::{lambda(std::pair<unsigned int,llvm::MDNode *> const&)#1}>(uint64_t result, uint64_t a2, int a3)
{
  if (result != a2)
  {
    while (*(_DWORD *)result != a3)
    {
      result += 16;
      if (result == a2) {
        return a2;
      }
    }
  }
  if (result != a2)
  {
    for (uint64_t i = result + 16; i != a2; i += 16)
    {
      if (*(_DWORD *)i != a3)
      {
        *(_DWORD *)unint64_t result = *(_DWORD *)i;
        *(void *)(result + 8) = *(void *)(i + 8);
        result += 16;
      }
    }
  }
  return result;
}

llvm::SelectInst *llvm::SelectInst::SelectInst(llvm::SelectInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  uint64_t v11 = llvm::Instruction::Instruction((uint64_t)this, *(void *)a3, 57, (uint64_t)this - 96, 3, (uint64_t *)a6);
  llvm::SelectInst::init(v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  llvm::Value::setName(this, a5);
  return this;
}

uint64_t llvm::SelectInst::init(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (void *)(result - 96);
  if (*(void *)(result - 96))
  {
    **(void **)(result - 80) = *(void *)(result - 88);
    uint64_t v5 = *(void *)(result - 88);
    if (v5) {
      *(void *)(v5 + 16) = *(void *)(result - 80);
    }
  }
  *uint64_t v4 = a2;
  if (a2)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v6 = (void *)(a2 + 8);
    uint64_t v7 = v8;
    *(void *)(result - 88) = v8;
    if (v8) {
      *(void *)(v7 + 16) = result - 88;
    }
    *(void *)(result - 80) = v6;
    *uint64_t v6 = v4;
  }
  unsigned int v9 = (void *)(result - 64);
  if (*(void *)(result - 64))
  {
    **(void **)(result - 48) = *(void *)(result - 56);
    uint64_t v10 = *(void *)(result - 56);
    if (v10) {
      *(void *)(v10 + 16) = *(void *)(result - 48);
    }
  }
  *unsigned int v9 = a3;
  if (a3)
  {
    uint64_t v13 = *(void *)(a3 + 8);
    uint64_t v11 = (void *)(a3 + 8);
    uint64_t v12 = v13;
    *(void *)(result - 56) = v13;
    if (v13) {
      *(void *)(v12 + 16) = result - 56;
    }
    *(void *)(result - 48) = v11;
    *uint64_t v11 = v9;
  }
  __int16 v14 = (void *)(result - 32);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v15 = *(void *)(result - 24);
    if (v15) {
      *(void *)(v15 + 16) = *(void *)(result - 16);
    }
  }
  *__int16 v14 = a4;
  if (a4)
  {
    uint64_t v18 = *(void *)(a4 + 8);
    std::string v16 = (void *)(a4 + 8);
    uint64_t v17 = v18;
    *(void *)(result - 24) = v18;
    if (v18) {
      *(void *)(v17 + 16) = result - 24;
    }
    *(void *)(result - 16) = v16;
    void *v16 = v14;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = a2;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, &v5, &v4))return v4; {
  else
  }
    return *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
}

llvm::Instruction *llvm::GraphTraits<llvm::BasicBlock *>::child_end(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1 == a1 + 40) {
    return 0;
  }
  unint64_t result = 0;
  uint64_t v3 = (llvm::Instruction *)(v1 - 24);
  if (v1) {
    uint64_t v4 = v1 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  if (*(unsigned __int8 *)(v4 + 16) - 29 <= 0xA)
  {
    llvm::Instruction::getNumSuccessors(v3);
    return v3;
  }
  return result;
}

uint64_t _GLOBAL__sub_I_BasicBlockUtils_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&MaxDeoptOrUnreachableSuccessorCheckDepth, 0, 0);
  dword_26B41E8D0 = 0;
  qword_26B41E8D8 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B41E8E0 = 0;
  MaxDeoptOrUnreachableSuccessorCheckDepth = (uint64_t)&unk_270DBC7D8;
  qword_26B41E8E8 = (uint64_t)&unk_270DBC6E8;
  qword_26B41E8F0 = (uint64_t)&unk_270DBFE18;
  qword_26B41E908 = (uint64_t)&qword_26B41E8F0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"max-deopt-or-unreachable-succ-check-depth", 0x29uLL);
  dword_26B41E8D0 = 8;
  byte_26B41E8E4 = 1;
  dword_26B41E8E0 = 8;
  word_26B41E85A = word_26B41E85A & 0xFF9F | 0x20;
  qword_26B41E870 = (uint64_t)"Set the maximum path length when checking whether a basic block is followed by a block that"
                             " either has a terminating deoptimizing call or is terminated with an unreachable";
  unk_26B41E878 = 171;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&MaxDeoptOrUnreachableSuccessorCheckDepth);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &MaxDeoptOrUnreachableSuccessorCheckDepth, &dword_261C2B000);
}

uint64_t llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>::getHashValue(_DWORD *a1)
{
  uint64_t v1 = (a1[2] >> 4) ^ (a1[2] >> 9);
  unint64_t v2 = (v1 | ((unint64_t)((*a1 >> 4) ^ (*a1 >> 9)) << 32)) + ~(v1 << 32);
  unint64_t v3 = (v2 ^ (v2 >> 22)) + ~((v2 ^ (v2 >> 22)) << 13);
  unint64_t v4 = (9 * (v3 ^ (v3 >> 8))) ^ ((9 * (v3 ^ (v3 >> 8))) >> 15);
  return ((v4 + ~(v4 << 27)) >> 31) ^ (v4 + ~(v4 << 27));
}

void llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>,llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::destroyAll(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    unint64_t v2 = (void *)(a1 + 8);
    unsigned int v1 = 4;
  }
  else
  {
    unsigned int v1 = *(_DWORD *)(a1 + 16);
    if (!v1) {
      return;
    }
    unint64_t v2 = *(void **)(a1 + 8);
  }
  unint64_t v3 = &v2[9 * v1];
  do
  {
    if ((*v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      for (uint64_t i = 0; i != -8; i -= 4)
      {
        uint64_t v5 = (void *)v2[i + 5];
        if (&v2[i + 7] != v5) {
          free(v5);
        }
      }
    }
    v2 += 9;
  }
  while (v2 != v3);
}

unint64_t llvm::DbgVariableIntrinsic::classof(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) == 84
    && (uint64_t v1 = *(void *)(a1 - 32)) != 0
    && !*(unsigned char *)(v1 + 16)
    && *(void *)(v1 + 24) == *(void *)(a1 + 72)
    && (*(unsigned char *)(v1 + 33) & 0x20) != 0
    && (unsigned int v2 = *(_DWORD *)(v1 + 36), v2 <= 0x3B))
  {
    return (0xB00000000000000uLL >> v2) & 1;
  }
  else
  {
    return 0;
  }
}

void llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 8);
        unint64_t v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2) {
        bzero((void *)(*(void *)a1 + 8 * v2), 8 * a2 - 8 * v2);
      }
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

unsigned int *llvm::SmallVectorImpl<llvm::BasicBlock *>::append<std::move_iterator<llvm::BasicBlock **>,void>(unsigned int *result, char *a2, char *a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = result;
  unint64_t v6 = a3 - a2;
  uint64_t v7 = result[2];
  unint64_t v8 = v7 + ((a3 - a2) >> 3);
  if (v8 > result[3])
  {
    unint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v8, 8);
    uint64_t v7 = v5[2];
  }
  if (v4 != a3)
  {
    unsigned int v9 = (void *)(*(void *)v5 + 8 * v7);
    do
    {
      uint64_t v10 = *(void *)v4;
      v4 += 8;
      *v9++ = v10;
    }
    while (v4 != a3);
  }
  v5[2] = v7 + (v6 >> 3);
  return result;
}

double llvm::Module::setSourceFileName(uint64_t a1, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_dst = (long long *)operator new(v7 + 1);
    *((void *)&__dst + 1) = __len;
    unint64_t v12 = v8 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_8:
  }
    memmove(p_dst, __src, __len);
  *((unsigned char *)p_dst + __len) = 0;
  unsigned int v9 = (void **)(a1 + 184);
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*v9);
  }
  double result = *(double *)&__dst;
  *(_OWORD *)unsigned int v9 = __dst;
  *(void *)(a1 + 200) = v12;
  return result;
}

double llvm::Module::setTargetTriple(uint64_t a1, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_dst = (long long *)operator new(v7 + 1);
    *((void *)&__dst + 1) = __len;
    unint64_t v12 = v8 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_8:
  }
    memmove(p_dst, __src, __len);
  *((unsigned char *)p_dst + __len) = 0;
  unsigned int v9 = (void **)(a1 + 208);
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*v9);
  }
  double result = *(double *)&__dst;
  *(_OWORD *)unsigned int v9 = __dst;
  *(void *)(a1 + 224) = v12;
  return result;
}

void llvm::Module::setModuleInlineAsm(uint64_t a1, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_dst = (long long *)operator new(v7 + 1);
    *((void *)&__dst + 1) = __len;
    unint64_t v13 = v8 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v13) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_8:
  }
    memmove(p_dst, __src, __len);
  *((unsigned char *)p_dst + __len) = 0;
  unsigned int v9 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)unsigned int v9 = __dst;
  *(void *)(a1 + 104) = v13;
  if (*(char *)(a1 + 111) < 0)
  {
    uint64_t v10 = *(void *)(a1 + 96);
    if (!v10) {
      return;
    }
    uint64_t v11 = (char *)*v9;
  }
  else
  {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 111);
    if (!*(unsigned char *)(a1 + 111)) {
      return;
    }
    uint64_t v11 = (char *)(a1 + 88);
  }
  if (v11[v10 - 1] != 10)
  {
    std::string::push_back((std::string *)(a1 + 88), 10);
  }
}

uint64_t llvm::GlobalIFunc::setResolver(uint64_t result, uint64_t a2)
{
  unint64_t v2 = (void *)(result - 32);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v3 = *(void *)(result - 24);
    if (v3) {
      *(void *)(v3 + 16) = *(void *)(result - 16);
    }
  }
  *unint64_t v2 = a2;
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    unint64_t v4 = (void *)(a2 + 8);
    uint64_t v5 = v6;
    *(void *)(result - 24) = v6;
    if (v6) {
      *(void *)(v5 + 16) = result - 24;
    }
    *(void *)(result - 16) = v4;
    *unint64_t v4 = v2;
  }
  return result;
}

unsigned int *llvm::IRBuilderBase::SetInsertPoint(unsigned int *result, uint64_t a2, uint64_t a3)
{
  *((void *)result + 6) = a2;
  *((void *)result + 7) = a3;
  if (a2 + 40 != a3)
  {
    uint64_t v3 = result;
    uint64_t v4 = a3 - 24;
    if (!a3) {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void *)(v4 + 48);
    size_t v7 = (llvm::MDNode *)v5;
    if (v5)
    {
      llvm::MetadataTracking::track((uint64_t)&v7, v5, 2);
      uint64_t v6 = v7;
    }
    else
    {
      uint64_t v6 = 0;
    }
    double result = llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(v3, 0, v6);
    if (v7) {
      return (unsigned int *)llvm::MetadataTracking::untrack((uint64_t)&v7, (uint64_t)v7);
    }
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::BasicBlock *>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if (v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4, 8);
    }
    uint64_t v5 = 0;
LABEL_10:
    uint64_t v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6) {
      memcpy((void *)(*(void *)a1 + 8 * v5), (const void *)(*(void *)a2 + 8 * v5), *(void *)a2 + 8 * v6 - (*(void *)a2 + 8 * v5));
    }
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t _GLOBAL__sub_I_LCSSA_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&qword_26B417D50, 0, 0);
  qword_26B417DD0 = 0;
  byte_26B417DE1 = 0;
  qword_26B417DD8 = (uint64_t)&unk_270DBC978;
  qword_26B417D50 = (uint64_t)&unk_270DBD0D8;
  qword_26B417DE8 = (uint64_t)&unk_270DBC658;
  qword_26B417DF0 = (uint64_t)&unk_270DBD140;
  qword_26B417E08 = (uint64_t)&qword_26B417DF0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"verify-loop-lcssa", 0x11uLL);
  llvm::cl::opt_storage<BOOL,true,false>::setLocation((llvm *)&qword_26B417DD0, (uint64_t)&qword_26B417D50, _MergedGlobals_9);
  word_26B417D5A = word_26B417D5A & 0xFF9F | 0x20;
  qword_26B417D70 = (uint64_t)"Verify loop lcssa form (time consuming)";
  unk_26B417D78 = 39;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B417D50);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &qword_26B417D50, &dword_261C2B000);
}

uint64_t llvm::DbgVariableIntrinsic::setExpression(llvm::DbgVariableIntrinsic *this, llvm::DIExpression *a2)
{
  uint64_t v3 = *((void *)a2 + 1);
  unint64_t v4 = (void *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0) {
    unint64_t v4 = (void *)*v4;
  }
  uint64_t v5 = llvm::MetadataAsValue::get(v4, a2);
  return llvm::CallBase::setArgOperand((uint64_t)this, 2u, v5);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::next[abi:nn180100]<llvm::generic_gep_type_iterator<llvm::Use const*>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[2] = *MEMORY[0x263EF8340];
  v4[1] = a2;
  if (a3 >= 1)
  {
    unint64_t v3 = a3 + 1;
    do
    {
      llvm::generic_gep_type_iterator<llvm::Use const*>::operator++(v4);
      --v3;
    }
    while (v3 > 1);
  }
}

void *llvm::generic_gep_type_iterator<llvm::Use const*>::operator++(void *a1)
{
  unint64_t IndexedType = llvm::generic_gep_type_iterator<llvm::Use const*>::getIndexedType((uint64_t)a1);
  int v3 = *(unsigned __int8 *)(IndexedType + 8);
  if (IndexedType && v3 == 17 || IndexedType && (v3 & 0xFE) == 0x12)
  {
    unint64_t v4 = *(void *)(IndexedType + 24) | 4;
  }
  else if (v3 == 16)
  {
    unint64_t v4 = IndexedType & 0xFFFFFFFFFFFFFFFBLL;
  }
  else
  {
    unint64_t v4 = 0;
  }
  a1[1] = v4;
  *a1 += 32;
  return a1;
}

BOOL llvm::DbgDeclareInst::classof(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 57;
}

BOOL llvm::ConstrainedFPIntrinsic::classof(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) - 80) < 0x28;
}

uint64_t llvm::CallBase::setArgOperand(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = result - 32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
  unint64_t v4 = (void *)(v3 + 32 * a2);
  uint64_t v5 = v4;
  if (*v4)
  {
    size_t v7 = (void *)v4[2];
    uint64_t v6 = v4 + 2;
    *size_t v7 = *(v6 - 1);
    uint64_t v8 = *(v6 - 1);
    if (v8) {
      *(void *)(v8 + 16) = *v6;
    }
  }
  *uint64_t v5 = a3;
  if (a3)
  {
    uint64_t v11 = *(void *)(a3 + 8);
    unsigned int v9 = (void *)(a3 + 8);
    uint64_t v10 = v11;
    uint64_t v12 = v3 + 32 * a2;
    *(void *)(v12 + 8) = v11;
    if (v11) {
      *(void *)(v10 + 16) = v12 + 8;
    }
    *(void *)(v12 + 16) = v9;
    *unsigned int v9 = v5;
  }
  return result;
}

uint64_t llvm::InvokeInst::setNormalDest(uint64_t result, uint64_t a2)
{
  unint64_t v2 = (void *)(result - 96);
  if (*(void *)(result - 96))
  {
    **(void **)(result - 80) = *(void *)(result - 88);
    uint64_t v3 = *(void *)(result - 88);
    if (v3) {
      *(void *)(v3 + 16) = *(void *)(result - 80);
    }
  }
  *unint64_t v2 = a2;
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    unint64_t v4 = (void *)(a2 + 8);
    uint64_t v5 = v6;
    *(void *)(result - 88) = v6;
    if (v6) {
      *(void *)(v5 + 16) = result - 88;
    }
    *(void *)(result - 80) = v4;
    *unint64_t v4 = v2;
  }
  return result;
}

uint64_t llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_zero_int,llvm::ConstantInt>::match<llvm::Constant>(uint64_t a1, llvm::Constant *a2)
{
  if (a2 && *((unsigned char *)a2 + 16) == 16)
  {
    uint64_t v3 = (llvm::Constant *)((char *)a2 + 24);
    unsigned int v4 = *((_DWORD *)a2 + 8);
    if (v4 <= 0x40)
    {
      uint64_t v5 = *(void *)v3;
LABEL_5:
      BOOL v6 = v5 == 0;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v7 = *(void *)a2;
  if (*(void *)a2) {
    BOOL v8 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
LABEL_28:
    char v12 = 0;
    return v12 & 1;
  }
  uint64_t SplatValue = llvm::Constant::getSplatValue(a2, 0);
  if (!SplatValue || *(unsigned char *)(SplatValue + 16) != 16)
  {
    if (*(unsigned char *)(v7 + 8) == 18)
    {
      int v10 = *(_DWORD *)(v7 + 32);
      if (v10)
      {
        uint64_t v11 = 0;
        char v12 = 0;
        while (1)
        {
          uint64_t AggregateElement = llvm::Constant::getAggregateElement(a2, v11);
          if (!AggregateElement) {
            break;
          }
          int v14 = *(unsigned __int8 *)(AggregateElement + 16);
          if ((v14 - 11) >= 2)
          {
            if (v14 != 16) {
              goto LABEL_28;
            }
            unsigned int v15 = *(_DWORD *)(AggregateElement + 32);
            if (v15 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(AggregateElement + 24)) != v15) {
                goto LABEL_28;
              }
            }
            else if (*(void *)(AggregateElement + 24))
            {
              goto LABEL_28;
            }
            char v12 = 1;
          }
          uint64_t v11 = (llvm::Type *)(v11 + 1);
          if (v10 == v11) {
            return v12 & 1;
          }
        }
      }
    }
    goto LABEL_28;
  }
  unsigned int v4 = *(_DWORD *)(SplatValue + 32);
  if (v4 <= 0x40)
  {
    uint64_t v5 = *(void *)(SplatValue + 24);
    goto LABEL_5;
  }
  uint64_t v3 = (llvm::APInt *)(SplatValue + 24);
LABEL_30:
  BOOL v6 = llvm::APInt::countLeadingZerosSlowCase(v3) == v4;
LABEL_31:
  char v12 = v6;
  return v12 & 1;
}

uint64_t llvm::PatternMatch::undef_match::check(llvm::PatternMatch::undef_match *this, const llvm::Value *a2)
{
  v29[8] = *MEMORY[0x263EF8340];
  unsigned int v2 = (*((unsigned char *)this + 16) - 11);
  if (v2 < 2) {
    return 1;
  }
  if (v2 < 0xFD) {
    return 0;
  }
  uint64_t v19 = v23;
  uint64_t v20 = v23;
  uint64_t v21 = 8;
  int v22 = 0;
  std::string v27 = v29;
  uint64_t v28 = 0x800000000;
  int v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x40000000) != 0)
  {
    BOOL v6 = (char *)*((void *)this - 1);
    uint64_t v5 = v4 & 0x7FFFFFF;
    if (!v5) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v5 = v4 & 0x7FFFFFF;
    BOOL v6 = (char *)this - 32 * v5;
    if (!v5) {
      goto LABEL_34;
    }
  }
  uint64_t v7 = 32 * v5;
  while (1)
  {
    int v8 = *(unsigned __int8 *)(*(void *)v6 + 16);
    if ((v8 - 11) >= 2) {
      break;
    }
LABEL_17:
    v6 += 32;
    v7 -= 32;
    if (!v7)
    {
      unsigned int v10 = v28;
      while (v10)
      {
        while (1)
        {
          uint64_t v11 = v27[--v10];
          LODWORD(v28) = v10;
          int v12 = *(_DWORD *)(v11 + 20);
          if ((v12 & 0x40000000) == 0) {
            break;
          }
          uint64_t v14 = *(void *)(v11 - 8);
          uint64_t v13 = v12 & 0x7FFFFFF;
          if (!v13) {
            goto LABEL_21;
          }
LABEL_24:
          uint64_t v15 = 32 * v13;
          do
          {
            int v16 = *(unsigned __int8 *)(*(void *)v14 + 16);
            if ((v16 - 11) >= 2)
            {
              if ((v16 - 8) >= 3) {
                uint64_t v17 = 0;
              }
              else {
                uint64_t v17 = *(const void **)v14;
              }
              std::string v26 = v17;
              if (!v17) {
                goto LABEL_35;
              }
              llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v19, v17, (uint64_t)v24);
              if (v25) {
                llvm::SmallVectorImpl<llvm::ConstantAggregate const*>::emplace_back<llvm::ConstantAggregate const*&>((unsigned int *)&v27, (uint64_t *)&v26);
              }
            }
            v14 += 32;
            v15 -= 32;
          }
          while (v15);
          unsigned int v10 = v28;
          if (!v28) {
            goto LABEL_34;
          }
        }
        uint64_t v13 = v12 & 0x7FFFFFF;
        uint64_t v14 = v11 - 32 * v13;
        if (v13) {
          goto LABEL_24;
        }
LABEL_21:
        ;
      }
LABEL_34:
      uint64_t v3 = 1;
      goto LABEL_36;
    }
  }
  if ((v8 - 8) >= 3) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = *(const void **)v6;
  }
  std::string v26 = v9;
  if (v9)
  {
    llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)&v19, v9, (uint64_t)v24);
    if (v25) {
      llvm::SmallVectorImpl<llvm::ConstantAggregate const*>::emplace_back<llvm::ConstantAggregate const*&>((unsigned int *)&v27, (uint64_t *)&v26);
    }
    goto LABEL_17;
  }
LABEL_35:
  uint64_t v3 = 0;
LABEL_36:
  if (v27 != v29) {
    free(v27);
  }
  if (v20 != v19) {
    free(v20);
  }
  return v3;
}

uint64_t llvm::SmallVectorImpl<llvm::ConstantAggregate const*>::emplace_back<llvm::ConstantAggregate const*&>(unsigned int *a1, uint64_t *a2)
{
  uint64_t v3 = a1[2];
  if (v3 >= a1[3])
  {
    llvm::SmallVectorTemplateBase<void *,true>::push_back(a1, *a2);
    unsigned int v4 = a1[2];
  }
  else
  {
    *(void *)(*(void *)a1 + 8 * v3) = *a2;
    unsigned int v4 = v3 + 1;
    a1[2] = v4;
  }
  return *(void *)a1 + 8 * v4 - 8;
}

uint64_t llvm::PatternMatch::apint_match::match<llvm::Constant>(uint64_t a1, llvm::Constant *a2)
{
  if (a2 && *((unsigned char *)a2 + 16) == 16) {
    goto LABEL_3;
  }
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12)
  {
    uint64_t result = llvm::Constant::getSplatValue(a2, (llvm::Type *)*(unsigned __int8 *)(a1 + 8));
    if (!result) {
      return result;
    }
    a2 = (llvm::Constant *)result;
    if (*(unsigned char *)(result + 16) == 16)
    {
LABEL_3:
      **(void **)a1 = (char *)a2 + 24;
      return 1;
    }
  }
  return 0;
}

BOOL llvm::DbgInfoIntrinsic::classof(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) & 0xFFFFFFFC) == 56;
}

unsigned int *llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>(unsigned int *result, char *a2, char *a3)
{
  unsigned int v4 = a2;
  uint64_t v5 = result;
  unint64_t v6 = a3 - a2;
  uint64_t v7 = result[2];
  unint64_t v8 = v7 + ((a3 - a2) >> 5);
  if (v8 > result[3])
  {
    uint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v8, 8);
    uint64_t v7 = v5[2];
  }
  if (v4 != a3)
  {
    unsigned int v9 = (void *)(*(void *)v5 + 8 * v7);
    do
    {
      uint64_t v10 = *(void *)v4;
      v4 += 32;
      *v9++ = v10;
    }
    while (v4 != a3);
  }
  v5[2] = v7 + (v6 >> 5);
  return result;
}

unint64_t llvm::generic_gep_type_iterator<llvm::Use const*>::getIndexedType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) == 0 || !v2)
  {
    uint64_t UniqueInteger = llvm::Constant::getUniqueInteger(**(llvm::Constant ***)a1);
    if (*(_DWORD *)(UniqueInteger + 8) >= 0x41u) {
      unsigned int v4 = *(unsigned int **)UniqueInteger;
    }
    else {
      unsigned int v4 = (unsigned int *)UniqueInteger;
    }
    return *(void *)(*(void *)(v2 + 16) + 8 * *v4);
  }
  return v2;
}

uint64_t _GLOBAL__sub_I_Local_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_10, 0, 0);
  byte_26B417E90 = 0;
  qword_26B417E98 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B417EA0 = 0;
  _MergedGlobals_10 = (uint64_t)&unk_270DBC910;
  qword_26B417EA8 = (uint64_t)&unk_270DBC658;
  qword_26B417EB0 = (uint64_t)&unk_270DBC998;
  qword_26B417EC8 = (uint64_t)&qword_26B417EB0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"phicse-debug-hash", 0x11uLL);
  byte_26B417E90 = 0;
  word_26B417EA0 = 256;
  word_26B417E1A = word_26B417E1A & 0xFF9F | 0x20;
  qword_26B417E30 = (uint64_t)"Perform extra assertion checking to verify that PHINodes's hash function is well-behaved w."
                             "r.t. its isEqual predicate";
  unk_26B417E38 = 117;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_10);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_10, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B417ED0, 0, 0);
  dword_26B417F50 = 0;
  qword_26B417F58 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B417F60 = 0;
  qword_26B417ED0 = (uint64_t)&unk_270DBC7D8;
  qword_26B417F68 = (uint64_t)&unk_270DBC6E8;
  qword_26B417F70 = (uint64_t)&unk_270DBFE18;
  qword_26B417F88 = (uint64_t)&qword_26B417F70;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B417ED0, (uint64_t *)"phicse-num-phi-smallsize", 0x18uLL);
  dword_26B417F50 = 32;
  byte_26B417F64 = 1;
  dword_26B417F60 = 32;
  word_26B417EDA = word_26B417EDA & 0xFF9F | 0x20;
  qword_26B417EF0 = (uint64_t)"When the basic block contains not more than this number of PHI nodes, perform a (faster!) e"
                             "xhaustive search instead of set-driven one.";
  unk_26B417EF8 = 134;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B417ED0);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B417ED0, &dword_261C2B000);
}

uint64_t *llvm::IRBuilderBase::CreateExtractElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(**((void **)this + 9) + 96))(*((void *)this + 9));
  if (!result)
  {
    __int16 v12 = 257;
    unsigned int v9 = (char *)operator new(0x80uLL);
    *((_DWORD *)v9 + 21) = *((_DWORD *)v9 + 21) & 0x38000000 | 2;
    uint64_t v10 = (uint64_t *)(v9 + 64);
    *(void *)unsigned int v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *((void *)v9 + 3) = v9 + 64;
    *((void *)v9 + 4) = 0;
    *((void *)v9 + 5) = 0;
    *((void *)v9 + 6) = 0;
    *((void *)v9 + 7) = v9 + 64;
    llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v9 + 64), a2, a3, (const llvm::Twine *)v11, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, v10, (uint64_t)a4);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateAnd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, llvm::Value *))(**((void **)this + 9)
                                                                                               + 16))(*((void *)this + 9), 28, a2, a3);
  if (!result)
  {
    __int16 v11 = 257;
    unsigned int v9 = (uint64_t *)llvm::BinaryOperator::Create(28, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v10, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, v9, (uint64_t)a4);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateOr(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, llvm::Value *))(**((void **)this + 9)
                                                                                               + 16))(*((void *)this + 9), 29, a2, a3);
  if (!result)
  {
    __int16 v11 = 257;
    unsigned int v9 = (uint64_t *)llvm::BinaryOperator::Create(29, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v10, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, v9, (uint64_t)a4);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateMul(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, int a5, int a6)
{
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, llvm::Value *))(**((void **)this + 9)
                                                                                               + 32))(*((void *)this + 9), 17, a2, a3);
  if (!result)
  {
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 17, (uint64_t *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateSub(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, int a5, int a6)
{
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, llvm::Value *))(**((void **)this + 9)
                                                                                               + 32))(*((void *)this + 9), 15, a2, a3);
  if (!result)
  {
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 15, (uint64_t *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateShuffleVector(uint64_t a1, void *a2, uint64_t a3, int *a4, llvm::Type *a5, uint64_t a6)
{
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 112))(*(void *)(a1 + 72));
  if (!result)
  {
    uint64_t v13 = (char *)operator new(0xA8uLL);
    *((_DWORD *)v13 + 21) = *((_DWORD *)v13 + 21) & 0x38000000 | 2;
    uint64_t v14 = (uint64_t *)(v13 + 64);
    *(void *)uint64_t v13 = 0;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
    *((void *)v13 + 3) = v13 + 64;
    *((void *)v13 + 4) = 0;
    *((void *)v13 + 5) = 0;
    *((void *)v13 + 6) = 0;
    *((void *)v13 + 7) = v13 + 64;
    __int16 v16 = 257;
    llvm::ShuffleVectorInst::ShuffleVectorInst((llvm::Value *)(v13 + 64), a2, a3, a4, a5, (const llvm::Twine *)v15, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, v14, a6);
  }
  return result;
}

void llvm::SmallVectorImpl<int>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 4);
        unint64_t v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2) {
        bzero((void *)(*(void *)a1 + 4 * v2), 4 * (a2 - v2));
      }
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t llvm::Type::isSized(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 == 13 || v2 < 6 && ((0x2Fu >> v2) & 1) != 0) {
    return 1;
  }
  int v3 = v2 & 0xFE;
  BOOL v4 = v3 == 10 || (v2 & 0xFFFFFFFD) == 4;
  if (v4 || v2 == 15) {
    return 1;
  }
  if (v3 == 16 || v3 == 18 || v2 == 21) {
    return llvm::Type::isSizedDerivedType(a1, a2);
  }
  else {
    return 0;
  }
}

llvm::Value *llvm::GetElementPtrInst::Create(llvm::GetElementPtrInst *TypeAtIndex, uint64_t *a2, llvm::Value *a3, uint64_t a4, const llvm::Twine *a5, uint64_t *a6)
{
  uint64_t v12 = (a4 + 1);
  uint64_t v13 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x50, (int)a4 + 1);
  llvm::GetElementPtrInst::getGEPReturnType(TypeAtIndex, a2, a3, a4);
  llvm::Instruction::Instruction((uint64_t)v13, v14, 34, (uint64_t)v13 - 32 * v12, v12, a6);
  *((void *)v13 + 8) = TypeAtIndex;
  if (a4)
  {
    __int16 v16 = (llvm::Type **)((char *)a3 + 8);
    uint64_t v17 = 8 * a4 - 8;
    do
    {
      if (!v17) {
        break;
      }
      uint64_t v18 = *v16++;
      TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v18, v15);
      v17 -= 8;
    }
    while (TypeAtIndex);
  }
  *((void *)v13 + 9) = TypeAtIndex;
  llvm::GetElementPtrInst::init(v13, (uint64_t)a2, (uint64_t *)a3, a4, a5);
  return v13;
}

double llvm::GetElementPtrInst::getGEPReturnType(llvm::GetElementPtrInst *TypeAtIndex, uint64_t *a2, llvm::Value *a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *a2;
  unsigned int v8 = *(_DWORD *)(*a2 + 8);
  if ((v8 & 0xFE) == 0x12)
  {
    uint64_t v7 = **(void **)(v7 + 16);
    unsigned int v8 = *(_DWORD *)(v7 + 8);
  }
  unsigned int v9 = (llvm::Type *)(v8 >> 8);
  if (a4)
  {
    uint64_t v10 = (llvm::Type **)((char *)a3 + 8);
    uint64_t v11 = 8 * a4 - 8;
    do
    {
      if (!v11) {
        break;
      }
      uint64_t v12 = *v10++;
      TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v12, a3);
      v11 -= 8;
    }
    while (TypeAtIndex);
  }
  if (*(void *)(v7 + 24)) {
    uint64_t v13 = (uint64_t **)llvm::PointerType::get((llvm::PointerType **)TypeAtIndex, v9);
  }
  else {
    uint64_t v13 = (uint64_t **)llvm::PointerType::get(*(llvm::PointerType **)v7, v9);
  }
  uint64_t v15 = *a2;
  if (*a2 && (*(_DWORD *)(v15 + 8) & 0xFE) == 0x12)
  {
    int v16 = *(_DWORD *)(v15 + 8);
  }
  else
  {
    if (!a4) {
      return result;
    }
    uint64_t v17 = 8 * a4;
    while (1)
    {
      uint64_t v15 = **(void **)v5;
      if (v15 && (*(_DWORD *)(v15 + 8) & 0xFE) == 18) {
        break;
      }
      uint64_t v5 = (llvm::Value *)((char *)v5 + 8);
      v17 -= 8;
      if (!v17) {
        return result;
      }
    }
    int v16 = *(_DWORD *)(v15 + 8);
  }
  uint64_t v19 = (llvm::Type *)(*(unsigned int *)(v15 + 32) | ((unint64_t)(v16 == 19) << 32));
  return llvm::VectorType::get(v13, v19);
}

uint64_t *llvm::IRBuilderBase::CreateExtractValue(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  double result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 80))(*(void *)(a1 + 72));
  if (!result)
  {
    __int16 v13 = 257;
    uint64_t v11 = (uint64_t *)llvm::ExtractValueInst::Create(a2, a3, a4, (const llvm::Twine *)v12, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, v11, a5);
  }
  return result;
}

llvm::Value *llvm::ExtractValueInst::Create(uint64_t *a1, unsigned int *a2, uint64_t a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  uint64_t v10 = operator new(0x80uLL);
  uint64_t v11 = (llvm::Value *)(v10 + 8);
  v10[13] = v10[13] & 0x38000000 | 1;
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = v10 + 8;
  unint64_t IndexedType = (llvm::Type *)llvm::ExtractValueInst::getIndexedType(*a1, a2, a3);
  llvm::UnaryInstruction::UnaryInstruction((llvm::UnaryInstruction *)(v10 + 8), IndexedType, 64, (llvm::Value *)a1, a5);
  *((void *)v10 + 12) = v10 + 28;
  v10 += 24;
  *((void *)v10 + 1) = 0x400000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>(v10, a2, &a2[a3]);
  llvm::Value::setName(v11, a4);
  return v11;
}

uint64_t llvm::UnaryInstruction::UnaryInstruction(llvm::UnaryInstruction *this, llvm::Type *a2, char a3, llvm::Value *a4, llvm::Instruction *a5)
{
  unint64_t v6 = (void *)((char *)this - 32);
  uint64_t result = llvm::Instruction::Instruction((uint64_t)this, (uint64_t)a2, a3, (uint64_t)this - 32, 1, (uint64_t *)a5);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v8 = *(void *)(result - 24);
    if (v8) {
      *(void *)(v8 + 16) = *(void *)(result - 16);
    }
  }
  *unint64_t v6 = a4;
  if (a4)
  {
    uint64_t v11 = *((void *)a4 + 1);
    uint64_t v10 = (void *)((char *)a4 + 8);
    uint64_t v9 = v11;
    *(void *)(result - 24) = v11;
    if (v11) {
      *(void *)(v9 + 16) = result - 24;
    }
    *(void *)(result - 16) = v10;
    void *v10 = v6;
  }
  return result;
}

uint64_t _GLOBAL__sub_I_ScalarEvolutionExpander_cpp()
{
  int v4 = 1;
  int v2 = 4;
  int v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"When performing SCEV expansion only if it is cheap to do, this controls the budget "
                                     "that is considered cheap (default = 4)";
  v1.n128_u64[1] = 121;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&llvm::SCEVCheapExpansionBudget, "scev-cheap-expansion-budget", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &llvm::SCEVCheapExpansionBudget, &dword_261C2B000);
}

unsigned char *llvm::SmallVectorImpl<llvm::BasicBlock *>::insert<llvm::BasicBlock * const*,void>(unsigned int *a1, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t v5 = __src;
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = (a2 - *(void *)a1) >> 3;
  uint64_t v9 = a1[2];
  if (*(void *)a1 + 8 * v9 == a2)
  {
    llvm::SmallVectorImpl<char const*>::append<char const* const*,void>(a1, __src, a4);
    return (unsigned char *)(*(void *)a1 + 8 * v8);
  }
  else
  {
    unint64_t v10 = (char *)a4 - (char *)__src;
    unint64_t v11 = a4 - __src;
    if (v9 + v11 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 4, v9 + v11, 8);
      uint64_t v7 = *(void *)a1;
      uint64_t v9 = a1[2];
    }
    uint64_t v12 = (unsigned char *)(v7 + 8 * v8);
    __int16 v13 = (unsigned char *)(v7 + 8 * v9);
    unint64_t v14 = (v13 - v12) >> 3;
    if (v14 >= v11)
    {
      llvm::SmallVectorImpl<llvm::BasicBlock *>::append<std::move_iterator<llvm::BasicBlock **>,void>(a1, &v13[-8 * v11], (char *)(v7 + 8 * v9));
      if (&v13[-8 * v11] != v12) {
        memmove(&v12[8 * v11], v12, &v13[-8 * v11] - v12);
      }
      if (a4 != v5) {
        memmove(v12, v5, (char *)a4 - (char *)v5);
      }
    }
    else
    {
      unsigned int v15 = v9 + (v10 >> 3);
      a1[2] = v15;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - v12);
        int v16 = v12;
        do
        {
          uint64_t v17 = *v5++;
          *v16++ = v17;
          --v14;
        }
        while (v14);
      }
      if (v5 != a4) {
        memcpy(v13, v5, (char *)a4 - (char *)v5);
      }
    }
  }
  return v12;
}

uint64_t *llvm::IRBuilderBase::CreateNot(llvm::IRBuilderBase *this, llvm::Constant **a2, const llvm::Twine *a3)
{
  AllOnesValue = (llvm::Value *)llvm::Constant::getAllOnesValue(*a2, (llvm::Type *)a2);
  return llvm::IRBuilderBase::CreateXor(this, (llvm::Value *)a2, AllOnesValue, a3);
}

uint64_t *llvm::IRBuilderBase::CreateXor(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, llvm::Value *))(**((void **)this + 9)
                                                                                               + 16))(*((void *)this + 9), 30, a2, a3);
  if (!result)
  {
    __int16 v11 = 257;
    uint64_t v9 = (uint64_t *)llvm::BinaryOperator::Create(30, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v10, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, v9, (uint64_t)a4);
  }
  return result;
}

unsigned int *llvm::SmallVectorImpl<unsigned int>::append<unsigned long long *,void>(unsigned int *result, char *a2, char *a3)
{
  int v4 = a2;
  uint64_t v5 = result;
  unint64_t v6 = a3 - a2;
  uint64_t v7 = result[2];
  unint64_t v8 = v7 + ((a3 - a2) >> 3);
  if (v8 > result[3])
  {
    uint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v8, 4);
    uint64_t v7 = v5[2];
  }
  if (v4 != a3)
  {
    uint64_t v9 = (_DWORD *)(*(void *)v5 + 4 * v7);
    do
    {
      uint64_t v10 = *(void *)v4;
      v4 += 8;
      *v9++ = v10;
    }
    while (v4 != a3);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 3);
  return result;
}

void llvm::BasicBlock::Create()
{
}

uint64_t llvm::SwitchInst::setSuccessor(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3 = (2 * a2) | 1u;
  int v4 = *(_DWORD *)(result + 20);
  if ((v4 & 0x40000000) != 0) {
    uint64_t v5 = *(void *)(result - 8);
  }
  else {
    uint64_t v5 = result - 32 * (v4 & 0x7FFFFFF);
  }
  uint64_t v6 = v5 + 32 * v3;
  if (*(void *)v6)
  {
    **(void **)(v6 + 16) = *(void *)(v6 + 8);
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7) {
      *(void *)(v7 + 16) = *(void *)(v6 + 16);
    }
  }
  *(void *)uint64_t v6 = a3;
  if (a3)
  {
    uint64_t v10 = *(void *)(a3 + 8);
    unint64_t v8 = (void *)(a3 + 8);
    uint64_t v9 = v10;
    uint64_t v11 = v5 + 32 * v3;
    *(void *)(v11 + 8) = v10;
    if (v10) {
      *(void *)(v9 + 16) = v11 + 8;
    }
    *(void *)(v11 + 16) = v8;
    *unint64_t v8 = v6;
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<unsigned long long>::assign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(a1 + 12) < a2) {
    return (uint64_t)llvm::SmallVectorTemplateBase<unsigned long long,true>::growAndAssign(a1, a2, a3);
  }
  uint64_t v3 = *(uint64_t **)a1;
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *(unsigned int *)(a1 + 8);
  }
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a1;
    do
    {
      *v6++ = a3;
      --v5;
    }
    while (v5);
  }
  unint64_t v7 = v4 - a2;
  if (v4 < a2)
  {
    unint64_t v8 = &v3[v4];
    do
      *v8++ = a3;
    while (!__CFADD__(v7++, 1));
  }
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

void *llvm::SmallVectorTemplateBase<unsigned long long,true>::growAndAssign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 8);
  if (a2)
  {
    unint64_t v7 = *(void **)a1;
    unint64_t v8 = a2;
    do
    {
      *v7++ = a3;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)(a1 + 8) = a2;
  return result;
}

BOOL llvm::DbgAssignIntrinsic::classof(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 56;
}

uint64_t *llvm::IRBuilderBase::CreateIntCast(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type ***a3, llvm::Type *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  if (*(llvm::Type ****)a2 == a3) {
    return (uint64_t *)a2;
  }
  if (*((unsigned __int8 *)a2 + 16) > 0x14u)
  {
    __int16 v12 = 257;
    IntegerCast = (uint64_t *)llvm::CastInst::CreateIntegerCast(a2, a3, a4, (const llvm::Twine *)v11, 0, a6);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, IntegerCast, (uint64_t)a5);
  }
  a2 = (llvm::Value *)(*(uint64_t (**)(void))(**((void **)this + 9) + 144))(*((void *)this + 9));
  if (a2) {
    BOOL v8 = *((unsigned __int8 *)a2 + 16) >= 0x1Cu;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    return (uint64_t *)a2;
  }
  return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)a2, (uint64_t)a5);
}

_DWORD *llvm::SwitchInst::CaseHandle::setValue(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = *(void *)result;
  int v3 = *(_DWORD *)(*(void *)result + 20);
  if ((v3 & 0x40000000) != 0) {
    uint64_t v4 = *(void *)(v2 - 8);
  }
  else {
    uint64_t v4 = v2 - 32 * (v3 & 0x7FFFFFF);
  }
  uint64_t v5 = (2 * result[2] + 2) & 0xFFFFFFFE;
  uint64_t v6 = v4 + 32 * v5;
  if (*(void *)v6)
  {
    **(void **)(v6 + 16) = *(void *)(v6 + 8);
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7) {
      *(void *)(v7 + 16) = *(void *)(v6 + 16);
    }
  }
  *(void *)uint64_t v6 = a2;
  if (a2)
  {
    uint64_t v10 = *(void *)(a2 + 8);
    BOOL v8 = (void *)(a2 + 8);
    uint64_t v9 = v10;
    uint64_t v11 = v4 + 32 * v5;
    *(void *)(v11 + 8) = v10;
    if (v10) {
      *(void *)(v9 + 16) = v11 + 8;
    }
    *(void *)(v11 + 16) = v8;
    *BOOL v8 = v6;
  }
  return result;
}

void llvm::APInt::lshr(llvm::APInt *this@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = *((unsigned int *)this + 2);
  *(_DWORD *)(a3 + 8) = v4;
  if (v4 > 0x40) {
    operator new[]();
  }
  *(void *)a3 = *(void *)this;
  unsigned int LimitedValue = llvm::APInt::getLimitedValue(a2, v4);
  llvm::APInt::lshrInPlace((llvm::APInt **)a3, LimitedValue);
}

uint64_t *llvm::IRBuilderBase::CreateShl(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, int a5, int a6)
{
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, llvm::Value *))(**((void **)this + 9)
                                                                                               + 32))(*((void *)this + 9), 25, a2, a3);
  if (!result)
  {
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 25, (uint64_t *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  }
  return result;
}

llvm::cl::Option *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [30],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>(llvm::cl::Option *a1, char *a2, _WORD *a3, unsigned char **a4, __n128 *a5)
{
  uint64_t v10 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(unsigned char *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_270DBC978;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_270DBC910;
  *(void *)(v10 + 152) = &unk_270DBC658;
  *(void *)(v10 + 160) = &unk_270DBC998;
  *(void *)(v10 + 184) = v10 + 160;
  llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [30],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [30],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>(uint64_t a1, char *__s, _WORD *a3, unsigned char **a4, __n128 *a5)
{
  size_t v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v10);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  uint64_t v11 = *a4;
  *(unsigned char *)(a1 + 128) = **a4;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v11;
  __n128 result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

void std::__function::__func<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1},std::allocator<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1}>,void ()(int const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1},std::allocator<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1}>,void ()(int const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_270DBFE60;
  return result;
}

void std::__function::__func<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1},std::allocator<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1}>,void ()(int const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DBFE60;
}

uint64_t _GLOBAL__sub_I_SimplifyCFG_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_11, 0, 0);
  byte_26B418010 = 0;
  qword_26B418018 = (uint64_t)&unk_270DBC978;
  unk_26B418020 = 0;
  _MergedGlobals_11 = (uint64_t)&unk_270DBC910;
  qword_26B418028 = (uint64_t)&unk_270DBC658;
  qword_26B418030 = (uint64_t)&unk_270DBC998;
  qword_26B418048 = (uint64_t)&qword_26B418030;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"simplifycfg-require-and-preserve-domtree", 0x28uLL);
  word_26B417F9A = word_26B417F9A & 0xFF9F | 0x20;
  qword_26B417FB0 = (uint64_t)"Temorary development switch used to gradually uplift SimplifyCFG into preserving DomTree,";
  unk_26B417FB8 = 89;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_11);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_11, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B418050, 0, 0);
  dword_26B4180D0 = 0;
  qword_26B4180D8 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B4180E0 = 0;
  qword_26B418050 = (uint64_t)&unk_270DBC7D8;
  qword_26B4180E8 = (uint64_t)&unk_270DBC6E8;
  qword_26B4180F0 = (uint64_t)&unk_270DBFE18;
  qword_26B418108 = (uint64_t)&qword_26B4180F0;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B418050, (uint64_t *)"phi-node-folding-threshold", 0x1AuLL);
  word_26B41805A = word_26B41805A & 0xFF9F | 0x20;
  dword_26B4180D0 = 2;
  byte_26B4180E4 = 1;
  dword_26B4180E0 = 2;
  qword_26B418070 = (uint64_t)"Control the amount of phi node folding to perform (default = 2)";
  unk_26B418078 = 63;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B418050);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B418050, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B418110, 0, 0);
  dword_26B418190 = 0;
  qword_26B4181A0 = 0;
  qword_26B418198 = (uint64_t)&unk_270DBCA00;
  qword_26B418110 = (uint64_t)&unk_270DBC7D8;
  qword_26B4181A8 = (uint64_t)&unk_270DBC6E8;
  qword_26B4181B0 = (uint64_t)&unk_270DBFE18;
  qword_26B4181C8 = (uint64_t)&qword_26B4181B0;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B418110, (uint64_t *)"two-entry-phi-node-folding-threshold", 0x24uLL);
  word_26B41811A = word_26B41811A & 0xFF9F | 0x20;
  dword_26B418190 = 4;
  BYTE4(qword_26B4181A0) = 1;
  LODWORD(qword_26B4181A0) = 4;
  qword_26B418130 = (uint64_t)"Control the maximal total instruction cost that we are willing to speculatively execute to "
                             "fold a 2-entry PHI node into a select (default = 4)";
  unk_26B418138 = 142;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B418110);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B418110, &dword_261C2B000);
  uint64_t v1 = llvm::cl::Option::Option((uint64_t)&qword_26B4181D0, 0, 0);
  byte_26B418250 = 0;
  qword_26B418260 = 0;
  qword_26B418258 = (uint64_t)&unk_270DBC978;
  qword_26B4181D0 = (uint64_t)&unk_270DBC910;
  qword_26B418268 = (uint64_t)&unk_270DBC658;
  qword_26B418270 = (uint64_t)&unk_270DBC998;
  qword_26B418288 = (uint64_t)&qword_26B418270;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"simplifycfg-hoist-common", 0x18uLL);
  word_26B4181DA = word_26B4181DA & 0xFF9F | 0x20;
  byte_26B418250 = 1;
  LOWORD(qword_26B418260) = 257;
  qword_26B4181F0 = (uint64_t)"Hoist common instructions up to the parent block";
  qword_26B4181F8 = 48;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B4181D0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B4181D0, &dword_261C2B000);
  uint64_t v2 = llvm::cl::Option::Option((uint64_t)&qword_26B418290, 0, 0);
  dword_26B418310 = 0;
  qword_26B418320 = 0;
  qword_26B418318 = (uint64_t)&unk_270DBCA00;
  qword_26B418290 = (uint64_t)&unk_270DBC7D8;
  qword_26B418328 = (uint64_t)&unk_270DBC6E8;
  qword_26B418330 = (uint64_t)&unk_270DBFE18;
  qword_26B418348 = (uint64_t)&qword_26B418330;
  llvm::cl::Option::setArgStr(v2, (uint64_t *)"simplifycfg-hoist-common-skip-limit", 0x23uLL);
  word_26B41829A = word_26B41829A & 0xFF9F | 0x20;
  dword_26B418310 = 20;
  BYTE4(qword_26B418320) = 1;
  LODWORD(qword_26B418320) = 20;
  qword_26B4182B0 = (uint64_t)"Allow reordering across at most this many instructions when hoisting";
  qword_26B4182B8 = 68;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B418290);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B418290, &dword_261C2B000);
  uint64_t v3 = llvm::cl::Option::Option((uint64_t)&qword_26B418350, 0, 0);
  byte_26B4183D0 = 0;
  qword_26B4183E0 = 0;
  qword_26B4183D8 = (uint64_t)&unk_270DBC978;
  qword_26B418350 = (uint64_t)&unk_270DBC910;
  qword_26B4183E8 = (uint64_t)&unk_270DBC658;
  qword_26B4183F0 = (uint64_t)&unk_270DBC998;
  qword_26B418408 = (uint64_t)&qword_26B4183F0;
  llvm::cl::Option::setArgStr(v3, (uint64_t *)"simplifycfg-sink-common", 0x17uLL);
  word_26B41835A = word_26B41835A & 0xFF9F | 0x20;
  byte_26B4183D0 = 1;
  LOWORD(qword_26B4183E0) = 257;
  qword_26B418370 = (uint64_t)"Sink common instructions down to the end block";
  qword_26B418378 = 46;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B418350);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B418350, &dword_261C2B000);
  int v14 = 1;
  LOBYTE(v12) = 1;
  __int16 v13 = &v12;
  v11.n128_u64[0] = (unint64_t)"Hoist conditional stores if an unconditional store precedes";
  v11.n128_u64[1] = 59;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [30],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>((llvm::cl::Option *)&unk_26B418410, "simplifycfg-hoist-cond-stores", &v14, (unsigned char **)&v13, &v11);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_26B418410, &dword_261C2B000);
  int v14 = 1;
  LOBYTE(v12) = 1;
  __int16 v13 = &v12;
  v11.n128_u64[0] = (unint64_t)"Hoist conditional stores even if an unconditional store does not precede - hoist m"
                                      "ultiple conditional stores into a single predicated store";
  v11.n128_u64[1] = 139;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [30],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>((llvm::cl::Option *)&unk_26B4184D0, "simplifycfg-merge-cond-stores", &v14, (unsigned char **)&v13, &v11);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_26B4184D0, &dword_261C2B000);
  uint64_t v4 = llvm::cl::Option::Option((uint64_t)&qword_26B418590, 0, 0);
  byte_26B418610 = 0;
  qword_26B418620 = 0;
  qword_26B418618 = (uint64_t)&unk_270DBC978;
  qword_26B418590 = (uint64_t)&unk_270DBC910;
  qword_26B418628 = (uint64_t)&unk_270DBC658;
  qword_26B418630 = (uint64_t)&unk_270DBC998;
  qword_26B418648 = (uint64_t)&qword_26B418630;
  llvm::cl::Option::setArgStr(v4, (uint64_t *)"simplifycfg-merge-cond-stores-aggressively", 0x2AuLL);
  word_26B41859A = word_26B41859A & 0xFF9F | 0x20;
  byte_26B418610 = 0;
  LOWORD(qword_26B418620) = 256;
  qword_26B4185B0 = (uint64_t)"When merging conditional stores, do so even if the resultant basic blocks are unlikely to b"
                             "e if-converted as a result";
  qword_26B4185B8 = 117;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B418590);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B418590, &dword_261C2B000);
  uint64_t v5 = llvm::cl::Option::Option((uint64_t)&qword_26B418650, 0, 0);
  byte_26B4186D0 = 0;
  qword_26B4186E0 = 0;
  qword_26B4186D8 = (uint64_t)&unk_270DBC978;
  qword_26B418650 = (uint64_t)&unk_270DBC910;
  qword_26B4186E8 = (uint64_t)&unk_270DBC658;
  qword_26B4186F0 = (uint64_t)&unk_270DBC998;
  qword_26B418708 = (uint64_t)&qword_26B4186F0;
  llvm::cl::Option::setArgStr(v5, (uint64_t *)"speculate-one-expensive-inst", 0x1CuLL);
  word_26B41865A = word_26B41865A & 0xFF9F | 0x20;
  byte_26B4186D0 = 1;
  LOWORD(qword_26B4186E0) = 257;
  qword_26B418670 = (uint64_t)"Allow exactly one expensive instruction to be speculatively executed";
  qword_26B418678 = 68;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B418650);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B418650, &dword_261C2B000);
  uint64_t v6 = llvm::cl::Option::Option((uint64_t)&qword_26B418710, 0, 0);
  dword_26B418790 = 0;
  qword_26B4187A0 = 0;
  qword_26B418798 = (uint64_t)&unk_270DBCA00;
  qword_26B418710 = (uint64_t)&unk_270DBC7D8;
  qword_26B4187A8 = (uint64_t)&unk_270DBC6E8;
  qword_26B4187B0 = (uint64_t)&unk_270DBFE18;
  qword_26B4187C8 = (uint64_t)&qword_26B4187B0;
  llvm::cl::Option::setArgStr(v6, (uint64_t *)"max-speculation-depth", 0x15uLL);
  word_26B41871A = word_26B41871A & 0xFF9F | 0x20;
  dword_26B418790 = 10;
  BYTE4(qword_26B4187A0) = 1;
  LODWORD(qword_26B4187A0) = 10;
  qword_26B418730 = (uint64_t)"Limit maximum recursion depth when calculating costs of speculatively executed instructions";
  qword_26B418738 = 91;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B418710);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B418710, &dword_261C2B000);
  uint64_t v7 = llvm::cl::Option::Option((uint64_t)&qword_26B4187D0, 0, 0);
  dword_26B418850 = 0;
  qword_26B418860 = 0;
  qword_26B418858 = (uint64_t)&unk_270DBCA20;
  qword_26B4187D0 = (uint64_t)&unk_270DBC840;
  qword_26B418868 = (uint64_t)&unk_270DBC6B8;
  qword_26B418870 = (uint64_t)&unk_270DBFE60;
  qword_26B418888 = (uint64_t)&qword_26B418870;
  llvm::cl::Option::setArgStr(v7, (uint64_t *)"simplifycfg-max-small-block-size", 0x20uLL);
  word_26B4187DA = word_26B4187DA & 0xFF9F | 0x20;
  dword_26B418850 = 10;
  BYTE4(qword_26B418860) = 1;
  LODWORD(qword_26B418860) = 10;
  qword_26B4187F0 = (uint64_t)"Max size of a block which is still considered small enough to thread through";
  qword_26B4187F8 = 76;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B4187D0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<int,false,llvm::cl::parser<int>>::~opt, &qword_26B4187D0, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B418890, 0, 0);
  dword_26B418910 = 0;
  qword_26B418920 = 0;
  qword_26B418918 = (uint64_t)&unk_270DBCA00;
  qword_26B418890 = (uint64_t)&unk_270DBC7D8;
  qword_26B418928 = (uint64_t)&unk_270DBC6E8;
  qword_26B418930 = (uint64_t)&unk_270DBFE18;
  qword_26B418948 = (uint64_t)&qword_26B418930;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B418890, (uint64_t *)"simplifycfg-branch-fold-threshold", 0x21uLL);
  word_26B41889A = word_26B41889A & 0xFF9F | 0x20;
  dword_26B418910 = 2;
  BYTE4(qword_26B418920) = 1;
  LODWORD(qword_26B418920) = 2;
  qword_26B4188B0 = (uint64_t)"Maximum cost of combining conditions when folding branches";
  qword_26B4188B8 = 58;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B418890);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B418890, &dword_261C2B000);
  uint64_t v8 = llvm::cl::Option::Option((uint64_t)&qword_26B418950, 0, 0);
  dword_26B4189D0 = 0;
  qword_26B4189E0 = 0;
  qword_26B4189D8 = (uint64_t)&unk_270DBCA00;
  qword_26B418950 = (uint64_t)&unk_270DBC7D8;
  qword_26B4189E8 = (uint64_t)&unk_270DBC6E8;
  qword_26B4189F0 = (uint64_t)&unk_270DBFE18;
  qword_26B418A08 = (uint64_t)&qword_26B4189F0;
  llvm::cl::Option::setArgStr(v8, (uint64_t *)"simplifycfg-branch-fold-common-dest-vector-multiplier", 0x35uLL);
  word_26B41895A = word_26B41895A & 0xFF9F | 0x20;
  dword_26B4189D0 = 2;
  BYTE4(qword_26B4189E0) = 1;
  LODWORD(qword_26B4189E0) = 2;
  qword_26B418970 = (uint64_t)"Multiplier to apply to threshold when determining whether or not to fold branch to common d"
                             "estination when vector operations are present";
  qword_26B418978 = 136;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B418950);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B418950, &dword_261C2B000);
  uint64_t v9 = llvm::cl::Option::Option((uint64_t)&qword_26B418A10, 0, 0);
  byte_26B418A90 = 0;
  qword_26B418AA0 = 0;
  qword_26B418A98 = (uint64_t)&unk_270DBC978;
  qword_26B418A10 = (uint64_t)&unk_270DBC910;
  qword_26B418AA8 = (uint64_t)&unk_270DBC658;
  qword_26B418AB0 = (uint64_t)&unk_270DBC998;
  qword_26B418AC8 = (uint64_t)&qword_26B418AB0;
  llvm::cl::Option::setArgStr(v9, (uint64_t *)"simplifycfg-merge-compatible-invokes", 0x24uLL);
  word_26B418A1A = word_26B418A1A & 0xFF9F | 0x20;
  byte_26B418A90 = 1;
  LOWORD(qword_26B418AA0) = 257;
  qword_26B418A30 = (uint64_t)"Allow SimplifyCFG to merge invokes together when appropriate";
  qword_26B418A38 = 60;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B418A10);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B418A10, &dword_261C2B000);
  int v14 = 1;
  int v12 = 16;
  __int16 v13 = &v12;
  v11.n128_u64[0] = (unint64_t)"Limit cases to analyze when converting a switch to select";
  v11.n128_u64[1] = 57;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&unk_26B418AD0, "max-switch-cases-per-result", &v14, &v13, &v11);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_26B418AD0, &dword_261C2B000);
}

uint64_t *llvm::TrackingMDRef::reset(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*result) {
    __n128 result = (uint64_t *)llvm::MetadataTracking::untrack((uint64_t)result, *result);
  }
  *uint64_t v3 = a2;
  if (a2)
  {
    return (uint64_t *)llvm::MetadataTracking::track((uint64_t)v3, a2, 2);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_AliasAnalysis_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&qword_26B418B98, 0, 0);
  byte_26B418C18 = 0;
  qword_26B418C20 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B418C28 = 0;
  qword_26B418B98 = (uint64_t)&unk_270DBC910;
  qword_26B418C30 = (uint64_t)&unk_270DBC658;
  qword_26B418C38 = (uint64_t)&unk_270DBC998;
  qword_26B418C50 = (uint64_t)&qword_26B418C38;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"disable-basic-aa", 0x10uLL);
  word_26B418BA2 = word_26B418BA2 & 0xFF9F | 0x20;
  byte_26B418C18 = 0;
  word_26B418C28 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B418B98);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B418B98, &dword_261C2B000);
}

uint64_t _GLOBAL__sub_I_AliasSetTracker_cpp()
{
  int v4 = 1;
  int v2 = 250;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"The maximum number of pointers may-alias sets may contain before degradation";
  v1.n128_u64[1] = 76;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&SaturationThreshold, "alias-set-saturation-threshold", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &SaturationThreshold, &dword_261C2B000);
}

void _GLOBAL__sub_I_AssumeBundleQueries_cpp(llvm::DebugCounter *a1)
{
  __n128 v1 = llvm::DebugCounter::instance(a1);
  strcpy((char *)__p, "assume-queries-counter");
  HIBYTE(__p[2]) = 22;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_261E8D6F0;
  strcpy(__str.__r_.__value_.__l.__data_, "Controls which assumes gets created");
  v31.__first_ = (std::__split_buffer<std::string>::pointer)__p;
  int v2 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v1 + 3, (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v31);
  int v3 = *((_DWORD *)v2 + 14);
  if (!v3)
  {
    int v4 = v2;
    unint64_t v5 = v1[8];
    uint64_t v6 = v1[6];
    unint64_t v7 = v1[7];
    uint64_t v8 = (uint64_t)(v7 - v6) / 24;
    *((_DWORD *)v2 + 14) = v8 + 1;
    if (v7 >= v5)
    {
      if ((unint64_t)(v8 + 1) > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v6) >> 3);
      uint64_t v11 = 2 * v10;
      if (2 * v10 <= v8 + 1) {
        uint64_t v11 = v8 + 1;
      }
      if (v10 >= 0x555555555555555) {
        unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v12 = v11;
      }
      v31.__end_cap_.__value_ = (std::allocator<std::string> *)(v1 + 8);
      if (v12)
      {
        __int16 v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(v1 + 8), v12);
        uint64_t v15 = v14;
      }
      else
      {
        __int16 v13 = 0;
        uint64_t v15 = 0;
      }
      uint64_t v17 = (std::string *)&v13[24 * v8];
      if (SHIBYTE(__p[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v17, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v18 = *(_OWORD *)__p;
        v17->__r_.__value_.__r.__words[2] = (std::string::size_type)__p[2];
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      }
      uint64_t v20 = v1[6];
      unint64_t v19 = v1[7];
      if (v19 == v20)
      {
        int64x2_t v23 = vdupq_n_s64(v19);
        uint64_t v21 = (uint64_t)v17;
      }
      else
      {
        uint64_t v21 = (uint64_t)v17;
        do
        {
          long long v22 = *(_OWORD *)(v19 - 24);
          *(void *)(v21 - 8) = *(void *)(v19 - 8);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          *(void *)(v19 - 16) = 0;
          *(void *)(v19 - 8) = 0;
          *(void *)(v19 - 24) = 0;
          v19 -= 24;
        }
        while (v19 != v20);
        int64x2_t v23 = *((int64x2_t *)v1 + 3);
      }
      uint64_t v16 = (uint64_t)&v17[1];
      v1[6] = v21;
      v1[7] = v16;
      *(int64x2_t *)&v31.__begin_ = v23;
      uint64_t v24 = (std::string *)v1[8];
      v1[8] = (uint64_t)&v13[24 * v15];
      v31.__end_cap_.__value_ = v24;
      v31.__first_ = (std::__split_buffer<std::string>::pointer)v23.i64[0];
      std::__split_buffer<std::string>::~__split_buffer(&v31);
    }
    else
    {
      if (SHIBYTE(__p[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v7, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v9 = *(_OWORD *)__p;
        *(void **)(v7 + 16) = __p[2];
        *(_OWORD *)unint64_t v7 = v9;
      }
      uint64_t v16 = v7 + 24;
    }
    v1[7] = v16;
    int v3 = *((_DWORD *)v4 + 14);
  }
  LODWORD(v31.__first_) = v3;
  char v25 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::FindAndConstruct(v1, &v31);
  *((void *)v25 + 1) = 0;
  *((void *)v25 + 2) = 0;
  *((void *)v25 + 3) = -1;
  *((unsigned char *)v25 + 32) = 0;
  std::string v26 = v25 + 10;
  if (*((char *)v25 + 63) < 0) {
    operator delete(*(void **)v26);
  }
  *(void *)std::string v26 = 0;
  *((void *)v26 + 1) = 0;
  *((void *)v26 + 2) = 0;
  std::string v27 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::FindAndConstruct(v1, &v31);
  std::string::operator=((std::string *)(v27 + 10), &__str);
  int first = (int)v31.__first_;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  AssumeQueryCounter = first;
}

uint64_t _GLOBAL__sub_I_AssumptionCache_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&VerifyAssumptionCache, 0, 0);
  byte_26B41E210 = 0;
  qword_26B41E218 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41E220 = 0;
  VerifyAssumptionCache = (uint64_t)&unk_270DBC910;
  qword_26B41E228 = (uint64_t)&unk_270DBC658;
  qword_26B41E230 = (uint64_t)&unk_270DBC998;
  qword_26B41E248 = (uint64_t)&qword_26B41E230;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"verify-assumption-cache", 0x17uLL);
  word_26B41E19A = word_26B41E19A & 0xFF9F | 0x20;
  qword_26B41E1B0 = (uint64_t)"Enable verification of assumption cache";
  unk_26B41E1B8 = 39;
  byte_26B41E210 = 0;
  word_26B41E220 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&VerifyAssumptionCache);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &VerifyAssumptionCache, &dword_261C2B000);
}

BOOL llvm::APInt::slt(llvm::APInt *this, uint64_t a2)
{
  int v3 = this;
  unsigned int v4 = *((_DWORD *)this + 2);
  if (v4 < 0x41) {
    goto LABEL_7;
  }
  unsigned int v5 = v4 - llvm::APInt::getNumSignBits(this) + 1;
  unsigned int v4 = *((_DWORD *)v3 + 2);
  if (v5 < 0x41)
  {
    if (v4 > 0x40)
    {
      uint64_t v8 = **(void **)v3;
      return v8 < a2;
    }
LABEL_7:
    uint64_t v8 = (uint64_t)(*(void *)v3 << -(char)v4) >> -(char)v4;
    return v8 < a2;
  }
  unsigned int v6 = v4 - 1;
  if (v4 >= 0x41) {
    int v3 = (llvm::APInt *)(*(void *)v3 + 8 * (v6 >> 6));
  }
  return (*(void *)v3 >> v6) & 1;
}

uint64_t _GLOBAL__sub_I_BasicAliasAnalysis_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_13, 0, 0);
  byte_26B418CD8 = 0;
  qword_26B418CE0 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B418CE8 = 0;
  _MergedGlobals_13 = (uint64_t)&unk_270DBC910;
  qword_26B418CF0 = (uint64_t)&unk_270DBC658;
  qword_26B418CF8 = (uint64_t)&unk_270DBC998;
  qword_26B418D10 = (uint64_t)&qword_26B418CF8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"basic-aa-recphi", 0xFuLL);
  word_26B418C62 = word_26B418C62 & 0xFF9F | 0x20;
  byte_26B418CD8 = 1;
  word_26B418CE8 = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_13);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_13, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B418D18, 0, 0);
  byte_26B418D98 = 0;
  qword_26B418DA0 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B418DA8 = 0;
  qword_26B418D18 = (uint64_t)&unk_270DBC910;
  qword_26B418DB0 = (uint64_t)&unk_270DBC658;
  qword_26B418DB8 = (uint64_t)&unk_270DBC998;
  qword_26B418DD0 = (uint64_t)&qword_26B418DB8;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B418D18, (uint64_t *)"basic-aa-separate-storage", 0x19uLL);
  word_26B418D22 = word_26B418D22 & 0xFF9F | 0x20;
  byte_26B418D98 = 0;
  word_26B418DA8 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B418D18);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B418D18, &dword_261C2B000);
}

void llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::~opt(llvm::cl::Option *a1)
{
  *(void *)a1 = &unk_270DBFEA8;
  std::__function::__value_func<void ()(llvm::GVDAGType const&)>::~__value_func[abi:nn180100]((void *)a1 + 71);
  *((void *)a1 + 19) = &unk_270DBFF10;
  int v2 = (void *)*((void *)a1 + 21);
  if (v2 != (void *)((char *)a1 + 184)) {
    free(v2);
  }
  llvm::cl::Option::~Option(a1);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)a1 = &unk_270DBFEA8;
  std::__function::__value_func<void ()(llvm::GVDAGType const&)>::~__value_func[abi:nn180100]((void *)a1 + 71);
  *((void *)a1 + 19) = &unk_270DBFF10;
  int v2 = (void *)*((void *)a1 + 21);
  if (v2 != (void *)((char *)a1 + 184)) {
    free(v2);
  }
  llvm::cl::Option::~Option(a1);
  JUMPOUT(0x263E500B0);
}

void llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::~opt(llvm::cl::Option *a1)
{
  *(void *)a1 = &unk_270DBFFA0;
  std::__function::__value_func<void ()(llvm::PGOViewCountsType const&)>::~__value_func[abi:nn180100]((void *)a1 + 71);
  *((void *)a1 + 19) = &unk_270DC0008;
  int v2 = (void *)*((void *)a1 + 21);
  if (v2 != (void *)((char *)a1 + 184)) {
    free(v2);
  }
  llvm::cl::Option::~Option(a1);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)a1 = &unk_270DBFFA0;
  std::__function::__value_func<void ()(llvm::PGOViewCountsType const&)>::~__value_func[abi:nn180100]((void *)a1 + 71);
  *((void *)a1 + 19) = &unk_270DC0008;
  int v2 = (void *)*((void *)a1 + 21);
  if (v2 != (void *)((char *)a1 + 184)) {
    free(v2);
  }
  llvm::cl::Option::~Option(a1);
  JUMPOUT(0x263E500B0);
}

void *llvm::cl::parser<llvm::GVDAGType>::~parser(void *a1)
{
  *a1 = &unk_270DBFF10;
  int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a3 = a5;
  }
  if (v8) {
    a4 = a6;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    void v21[2] = "'!";
    __int16 v22 = 770;
    __int16 v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error(v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    uint64_t v17 = std::__throw_bad_function_call[abi:nn180100]();
    return llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::getValueExpectedFlagDefault(v17);
  }
}

uint64_t llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

unint64_t llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::printOptionValue(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    unsigned int v4 = &unk_270DBFF60;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::setDefault(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

unsigned int *llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::getExtraOptionNames(uint64_t a1, unsigned int *a2)
{
  return llvm::cl::generic_parser_base::getExtraOptionNames((unsigned int *)(a1 + 152), a2);
}

void *std::__function::__value_func<void ()(llvm::GVDAGType const&)>::~__value_func[abi:nn180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void llvm::cl::parser<llvm::GVDAGType>::~parser(void *a1)
{
  *a1 = &unk_270DBFF10;
  int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::cl::parser<llvm::GVDAGType>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<llvm::GVDAGType>::getOption(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<llvm::GVDAGType>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<llvm::GVDAGType>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL llvm::cl::OptionValueCopy<llvm::GVDAGType>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

unsigned int *llvm::cl::generic_parser_base::getExtraOptionNames(unsigned int *result, unsigned int *a2)
{
  if (!*(void *)(*((void *)result + 1) + 24))
  {
    int v3 = result;
    __n128 result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    if (result)
    {
      int v4 = (int)result;
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v3 + 24))(v3, v5);
        __n128 result = llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a2, v6, v7);
        uint64_t v5 = (v5 + 1);
      }
      while (v4 != v5);
    }
  }
  return result;
}

void *llvm::cl::parser<llvm::PGOViewCountsType>::~parser(void *a1)
{
  *a1 = &unk_270DC0008;
  int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a3 = a5;
  }
  if (v8) {
    a4 = a6;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    void v21[2] = "'!";
    __int16 v22 = 770;
    __int16 v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error(v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    uint64_t v17 = std::__throw_bad_function_call[abi:nn180100]();
    return llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::getValueExpectedFlagDefault(v17);
  }
}

uint64_t llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

unint64_t llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::printOptionValue(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    int v4 = &unk_270DC0058;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::setDefault(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

unsigned int *llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::getExtraOptionNames(uint64_t a1, unsigned int *a2)
{
  return llvm::cl::generic_parser_base::getExtraOptionNames((unsigned int *)(a1 + 152), a2);
}

void *std::__function::__value_func<void ()(llvm::PGOViewCountsType const&)>::~__value_func[abi:nn180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void llvm::cl::parser<llvm::PGOViewCountsType>::~parser(void *a1)
{
  *a1 = &unk_270DC0008;
  int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::cl::parser<llvm::PGOViewCountsType>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<llvm::PGOViewCountsType>::getOption(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<llvm::PGOViewCountsType>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<llvm::PGOViewCountsType>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL llvm::cl::OptionValueCopy<llvm::PGOViewCountsType>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

unsigned int *llvm::SmallVectorImpl<llvm::cl::OptionEnumValue>::append<llvm::cl::OptionEnumValue const*,void>(unsigned int *result, unsigned char *__src, unsigned char *a3)
{
  int v5 = result;
  size_t v6 = a3 - __src;
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - __src) >> 3);
  uint64_t v8 = result[2];
  if (v7 + v8 > result[3])
  {
    __n128 result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v7 + v8, 40);
    LODWORD(v8) = v5[2];
  }
  if (__src != a3)
  {
    __n128 result = (unsigned int *)memcpy((void *)(*(void *)v5 + 40 * v8), __src, v6);
    LODWORD(v8) = v5[2];
  }
  v5[2] = v8 + v7;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::{lambda(llvm::GVDAGType const&)#1},std::allocator<llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::{lambda(llvm::GVDAGType const&)#1}>,void ()(llvm::GVDAGType const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::{lambda(llvm::GVDAGType const&)#1},std::allocator<llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::{lambda(llvm::GVDAGType const&)#1}>,void ()(llvm::GVDAGType const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_270DC0098;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::{lambda(llvm::GVDAGType const&)#1},std::allocator<llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::{lambda(llvm::GVDAGType const&)#1}>,void ()(llvm::GVDAGType const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC0098;
}

void llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::GVDAGType>::OptionInfo,false>::grow(unint64_t a1)
{
  uint64_t v9 = 0;
  int v1 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_26B4191D0, &unk_26B4191E0, a1, 48, &v9);
  int v2 = (_OWORD *)qword_26B4191D0;
  if (qword_26B4191D8)
  {
    uint64_t v3 = qword_26B4191D0 + 48 * qword_26B4191D8;
    int v4 = v1 + 32;
    int v5 = v1;
    do
    {
      long long v6 = v2[1];
      *(_OWORD *)int v5 = *v2;
      *((_OWORD *)v5 + 1) = v6;
      *((void *)v5 + 4) = &unk_270DBFF80;
      int v7 = *((_DWORD *)v2 + 10);
      v5[44] = *((unsigned char *)v2 + 44);
      *((_DWORD *)v5 + 10) = v7;
      *((void *)v5 + 4) = &unk_270DBFF60;
      v4 += 48;
      v2 += 3;
      v5 += 48;
    }
    while (v2 != (_OWORD *)v3);
    int v2 = (_OWORD *)qword_26B4191D0;
  }
  int v8 = v9;
  if (v2 != (_OWORD *)&unk_26B4191E0) {
    free(v2);
  }
  qword_26B4191D0 = (uint64_t)v1;
  HIDWORD(qword_26B4191D8) = v8;
}

void std::__function::__func<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_270DC0128;
  return result;
}

void std::__function::__func<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC0128;
}

void std::__function::__func<llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::{lambda(llvm::PGOViewCountsType const&)#1},std::allocator<llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::{lambda(llvm::PGOViewCountsType const&)#1}>,void ()(llvm::PGOViewCountsType const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::{lambda(llvm::PGOViewCountsType const&)#1},std::allocator<llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::{lambda(llvm::PGOViewCountsType const&)#1}>,void ()(llvm::PGOViewCountsType const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_270DC00E0;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::{lambda(llvm::PGOViewCountsType const&)#1},std::allocator<llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::{lambda(llvm::PGOViewCountsType const&)#1}>,void ()(llvm::PGOViewCountsType const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC00E0;
}

void llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::PGOViewCountsType>::OptionInfo,false>::grow(unint64_t a1)
{
  uint64_t v9 = 0;
  int v1 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_26B419428, &unk_26B419438, a1, 48, &v9);
  int v2 = (_OWORD *)qword_26B419428;
  if (qword_26B419430)
  {
    uint64_t v3 = qword_26B419428 + 48 * qword_26B419430;
    int v4 = v1 + 32;
    int v5 = v1;
    do
    {
      long long v6 = v2[1];
      *(_OWORD *)int v5 = *v2;
      *((_OWORD *)v5 + 1) = v6;
      *((void *)v5 + 4) = &unk_270DC0078;
      int v7 = *((_DWORD *)v2 + 10);
      v5[44] = *((unsigned char *)v2 + 44);
      *((_DWORD *)v5 + 10) = v7;
      *((void *)v5 + 4) = &unk_270DC0058;
      v4 += 48;
      v2 += 3;
      v5 += 48;
    }
    while (v2 != (_OWORD *)v3);
    int v2 = (_OWORD *)qword_26B419428;
  }
  int v8 = v9;
  if (v2 != (_OWORD *)&unk_26B419438) {
    free(v2);
  }
  qword_26B419428 = (uint64_t)v1;
  HIDWORD(qword_26B419430) = v8;
}

llvm::cl::Option *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>(llvm::cl::Option *a1, char *a2, unsigned char **a3, _WORD *a4, __n128 *a5)
{
  uint64_t v10 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(unsigned char *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_270DBC978;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_270DBC910;
  *(void *)(v10 + 152) = &unk_270DBC658;
  *(void *)(v10 + 160) = &unk_270DBC998;
  *(void *)(v10 + 184) = v10 + 160;
  llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>(uint64_t a1, char *__s, unsigned char **a3, _WORD *a4, __n128 *a5)
{
  size_t v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v10);
  uint64_t v11 = *a3;
  *(unsigned char *)(a1 + 128) = **a3;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v11;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  __n128 result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

llvm::cl::Option *llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::desc>(llvm::cl::Option *a1, char *a2, _WORD *a3, __n128 *a4)
{
  uint64_t v8 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(void *)(v8 + 128) = 0;
  *(void *)(v8 + 136) = 0;
  *(void *)(v8 + 168) = 0;
  *(void *)(v8 + 176) = 0;
  *(void *)(v8 + 160) = 0;
  *(unsigned char *)(v8 + 184) = 0;
  *(void *)(v8 + 144) = 0;
  *(void *)(v8 + 152) = &unk_270DBC638;
  *(void *)uint64_t v8 = &unk_270DBC8A8;
  *(void *)(v8 + 192) = &unk_270DBC7A8;
  *(void *)(v8 + 200) = &unk_270DC0128;
  *(void *)(v8 + 224) = v8 + 200;
  llvm::cl::apply<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>,char [20],llvm::cl::OptionHidden,llvm::cl::desc>(v8, a2, a3, a4);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>,char [20],llvm::cl::OptionHidden,llvm::cl::desc>(uint64_t a1, char *__s, _WORD *a3, __n128 *a4)
{
  size_t v8 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v8);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  __n128 result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  return result;
}

void *llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(_DWORD **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(4 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    return memset(result, 255, 4 * v10);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::moveFromOldBuckets(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6) {
    __n128 result = (uint64_t)memset(*(void **)result, 255, 4 * v6);
  }
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFD)
    {
      int v7 = 0;
      __n128 result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)v5, a2, &v7);
      *int v7 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>(uint64_t *a1, _DWORD *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = (37 * *a2) & (v3 - 1);
    int v7 = (_DWORD *)(*a1 + 4 * v6);
    int v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -2;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        int v7 = (_DWORD *)(v4 + 4 * (v13 & v5));
        int v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v7 = v10;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::InsertIntoBucketImpl<unsigned int>(a1, (uint64_t)a2, a2, v10);
    int v7 = (_DWORD *)result;
    *(_DWORD *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 4 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t _GLOBAL__sub_I_BlockFrequencyInfo_cpp()
{
  v50[20] = *MEMORY[0x263EF8340];
  __src = "none";
  uint64_t v32 = 4;
  LODWORD(v33) = 0;
  *((void *)&v33 + 1) = "do not display graphs.";
  uint64_t v34 = 22;
  __int16 v35 = "fraction";
  uint64_t v36 = 8;
  int v37 = 1;
  unint64_t v38 = "display a graph using the fractional block frequency representation.";
  uint64_t v39 = 68;
  __int16 v40 = "integer";
  uint64_t v41 = 7;
  int v42 = 2;
  __int16 v43 = "display a graph using the raw integer fractional block frequency representation.";
  uint64_t v44 = 80;
  v45[0] = "count";
  v45[1] = 5;
  int v46 = 3;
  int v47 = "display a graph using the real profile count if available.";
  uint64_t v48 = 58;
  v49.n128_u64[0] = (unint64_t)v50;
  v49.n128_u64[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::cl::OptionEnumValue>::append<llvm::cl::OptionEnumValue const*,void>((unsigned int *)&v49, &__src, &v49);
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&qword_26B419128, 0, 0);
  dword_26B4191A8 = 0;
  qword_26B4191B0 = (uint64_t)&unk_270DBFF60;
  unk_26B4191B8 = 0;
  qword_26B419128 = (uint64_t)&unk_270DBFEA8;
  qword_26B4191C0 = (uint64_t)&unk_270DBFF10;
  qword_26B4191C8 = (uint64_t)&qword_26B419128;
  qword_26B4191D0 = (uint64_t)&unk_26B4191E0;
  qword_26B4191D8 = 0x800000000;
  qword_26B419360 = (uint64_t)&unk_270DC0098;
  qword_26B419378 = (uint64_t)&qword_26B419360;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"view-block-freq-propagation-dags", 0x20uLL);
  word_26B419132 = word_26B419132 & 0xFF9F | 0x20;
  qword_26B419148 = (uint64_t)"Pop up a window to show a dag displaying how block frequencies propagation through the CFG.";
  unk_26B419150 = 91;
  if (v49.n128_u32[2])
  {
    unint64_t v1 = v49.n128_u64[0];
    unint64_t v2 = v49.n128_u64[0] + 40 * v49.n128_u32[2];
    do
    {
      int v3 = *(uint64_t **)v1;
      unint64_t v4 = *(void *)(v1 + 8);
      int v5 = *(_DWORD *)(v1 + 16);
      long long v6 = *(_OWORD *)(v1 + 24);
      __src = *(const char **)v1;
      uint64_t v32 = v4;
      long long v33 = v6;
      uint64_t v34 = (uint64_t)&unk_270DBFF60;
      BYTE4(v35) = 1;
      LODWORD(v35) = v5;
      uint64_t v7 = qword_26B4191D0;
      if (qword_26B4191D8 >= HIDWORD(qword_26B4191D8))
      {
        unint64_t v12 = qword_26B4191D8 + 1;
        if (qword_26B4191D0 <= (unint64_t)&__src
          && qword_26B4191D0 + 48 * (unint64_t)qword_26B4191D8 > (unint64_t)&__src)
        {
          std::string v27 = (char *)&__src - qword_26B4191D0;
          llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::GVDAGType>::OptionInfo,false>::grow(v12);
          uint64_t v7 = qword_26B4191D0;
          p_src = (const char **)&v27[qword_26B4191D0];
          goto LABEL_5;
        }
        llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::GVDAGType>::OptionInfo,false>::grow(v12);
        uint64_t v7 = qword_26B4191D0;
      }
      p_src = &__src;
LABEL_5:
      uint64_t v9 = v7 + 48 * qword_26B4191D8;
      long long v10 = *((_OWORD *)p_src + 1);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)p_src;
      *(_OWORD *)(v9 + 16) = v10;
      *(void *)(v9 + 32) = &unk_270DBFF80;
      int v11 = *((_DWORD *)p_src + 10);
      *(unsigned char *)(v9 + 44) = *((unsigned char *)p_src + 44);
      *(_DWORD *)(v9 + 40) = v11;
      *(void *)(v9 + 32) = &unk_270DBFF60;
      LODWORD(qword_26B4191D8) = qword_26B4191D8 + 1;
      llvm::cl::AddLiteralOption(qword_26B4191C8, v3, v4);
      v1 += 40;
    }
    while (v1 != v2);
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B419128);
  if ((void *)v49.n128_u64[0] != v50) {
    free((void *)v49.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::~opt, &qword_26B419128, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B418F58, 0, 0);
  qword_26B418FE0 = 0;
  qword_26B418FD8 = 0;
  qword_26B418FE8 = 0;
  qword_26B418FF8 = 0;
  qword_26B419008 = 0;
  qword_26B419000 = 0;
  byte_26B419010 = 0;
  qword_26B418FF0 = (uint64_t)&unk_270DBC638;
  qword_26B418F58 = (uint64_t)&unk_270DBC8A8;
  qword_26B419018 = (uint64_t)&unk_270DBC7A8;
  qword_26B419020 = (uint64_t)&unk_270DC0128;
  qword_26B419038 = (uint64_t)&qword_26B419020;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B418F58, (uint64_t *)"view-bfi-func-name", 0x12uLL);
  word_26B418F62 = word_26B418F62 & 0xFF9F | 0x20;
  qword_26B418F78 = (uint64_t)"The option to specify the name of the function whose CFG will be displayed.";
  unk_26B418F80 = 75;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B418F58);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt, &qword_26B418F58, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&_MergedGlobals_14, 0, 0);
  dword_26B418E58 = 0;
  qword_26B418E60 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B418E68 = 0;
  _MergedGlobals_14 = (uint64_t)&unk_270DBC7D8;
  qword_26B418E70 = (uint64_t)&unk_270DBC6E8;
  qword_26B418E78 = (uint64_t)&unk_270DBFE18;
  qword_26B418E90 = (uint64_t)&qword_26B418E78;
  llvm::cl::Option::setArgStr((uint64_t)&_MergedGlobals_14, (uint64_t *)"view-hot-freq-percent", 0x15uLL);
  dword_26B418E58 = 10;
  byte_26B418E6C = 1;
  dword_26B418E68 = 10;
  word_26B418DE2 = word_26B418DE2 & 0xFF9F | 0x20;
  qword_26B418DF8 = (uint64_t)"An integer in percent used to specify the hot blocks/edges to be displayed in red: a block "
                             "or edge whose frequency is no less than the max frequency of the function multiplied by this percent.";
  unk_26B418E00 = 192;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_14);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &_MergedGlobals_14, &dword_261C2B000);
  __src = "none";
  uint64_t v32 = 4;
  LODWORD(v33) = 0;
  *((void *)&v33 + 1) = "do not show.";
  uint64_t v34 = 12;
  __int16 v35 = "graph";
  uint64_t v36 = 5;
  int v37 = 1;
  unint64_t v38 = "show a graph.";
  uint64_t v39 = 13;
  __int16 v40 = "text";
  uint64_t v41 = 4;
  int v42 = 2;
  __int16 v43 = "show in text.";
  uint64_t v44 = 13;
  v49.n128_u64[0] = (unint64_t)v50;
  v49.n128_u64[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::cl::OptionEnumValue>::append<llvm::cl::OptionEnumValue const*,void>((unsigned int *)&v49, &__src, v45);
  uint64_t v13 = llvm::cl::Option::Option((uint64_t)&qword_26B419380, 0, 0);
  dword_26B419400 = 0;
  qword_26B419410 = 0;
  qword_26B419408 = (uint64_t)&unk_270DC0058;
  qword_26B419380 = (uint64_t)&unk_270DBFFA0;
  qword_26B419420 = v13;
  qword_26B419418 = (uint64_t)&unk_270DC0008;
  qword_26B419428 = (uint64_t)&unk_26B419438;
  qword_26B419430 = 0x800000000;
  qword_26B4195B8 = (uint64_t)&unk_270DC00E0;
  qword_26B4195D0 = (uint64_t)&qword_26B4195B8;
  llvm::cl::Option::setArgStr(v13, (uint64_t *)"pgo-view-counts", 0xFuLL);
  word_26B41938A = word_26B41938A & 0xFF9F | 0x20;
  qword_26B4193A0 = (uint64_t)"A BOOLean option to show CFG dag or text with block profile counts and branch probabilities"
                             " right after PGO profile annotation step. The profile counts are computed using branch prob"
                             "abilities from the runtime profile data and block frequency propagation algorithm. To view "
                             "the raw counts from the profile, use option -pgo-view-raw-counts instead. To limit graph di"
                             "splay to only one function, use filtering option -view-bfi-func-name.";
  qword_26B4193A8 = 433;
  if (v49.n128_u32[2])
  {
    unint64_t v14 = v49.n128_u64[0];
    unint64_t v15 = v49.n128_u64[0] + 40 * v49.n128_u32[2];
    do
    {
      uint64_t v16 = *(uint64_t **)v14;
      unint64_t v17 = *(void *)(v14 + 8);
      int v18 = *(_DWORD *)(v14 + 16);
      long long v19 = *(_OWORD *)(v14 + 24);
      __src = *(const char **)v14;
      uint64_t v32 = v17;
      long long v33 = v19;
      uint64_t v34 = (uint64_t)&unk_270DC0058;
      BYTE4(v35) = 1;
      LODWORD(v35) = v18;
      uint64_t v20 = qword_26B419428;
      if (qword_26B419430 >= HIDWORD(qword_26B419430))
      {
        unint64_t v25 = qword_26B419430 + 1;
        if (qword_26B419428 <= (unint64_t)&__src
          && qword_26B419428 + 48 * (unint64_t)qword_26B419430 > (unint64_t)&__src)
        {
          uint64_t v28 = (char *)&__src - qword_26B419428;
          llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::PGOViewCountsType>::OptionInfo,false>::grow(v25);
          uint64_t v20 = qword_26B419428;
          uint64_t v21 = (const char **)&v28[qword_26B419428];
          goto LABEL_17;
        }
        llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::PGOViewCountsType>::OptionInfo,false>::grow(v25);
        uint64_t v20 = qword_26B419428;
      }
      uint64_t v21 = &__src;
LABEL_17:
      uint64_t v22 = v20 + 48 * qword_26B419430;
      long long v23 = *((_OWORD *)v21 + 1);
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v21;
      *(_OWORD *)(v22 + 16) = v23;
      *(void *)(v22 + 32) = &unk_270DC0078;
      int v24 = *((_DWORD *)v21 + 10);
      *(unsigned char *)(v22 + 44) = *((unsigned char *)v21 + 44);
      *(_DWORD *)(v22 + 40) = v24;
      *(void *)(v22 + 32) = &unk_270DC0058;
      LODWORD(qword_26B419430) = qword_26B419430 + 1;
      llvm::cl::AddLiteralOption(qword_26B419420, v16, v17);
      v14 += 40;
    }
    while (v14 != v15);
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B419380);
  if ((void *)v49.n128_u64[0] != v50) {
    free((void *)v49.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::~opt, &qword_26B419380, &dword_261C2B000);
  char v30 = 0;
  __src = &v30;
  int v29 = 1;
  v49.n128_u64[0] = (unint64_t)"Print the block frequency info.";
  v49.n128_u64[1] = 31;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_26B418E98, "print-bfi", (unsigned char **)&__src, &v29, &v49);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_26B418E98, &dword_261C2B000);
  LODWORD(__src) = 1;
  v49.n128_u64[0] = (unint64_t)"The option to specify the name of the function whose block frequency info is printed.";
  v49.n128_u64[1] = 85;
  llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_26B419040, "print-bfi-func-name", &__src, &v49);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt, &unk_26B419040, &dword_261C2B000);
}

void llvm::cl::opt<double,false,llvm::cl::parser<double>>::~opt(llvm::cl::Option *a1)
{
  *(void *)a1 = &unk_270DC0170;
  std::__function::__value_func<void ()(double const&)>::~__value_func[abi:nn180100]((void *)a1 + 21);
  llvm::cl::Option::~Option(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270DC0170;
  std::__function::__value_func<void ()(double const&)>::~__value_func[abi:nn180100]((void *)a1 + 21);
  llvm::cl::Option::~Option(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::cl::opt<double,false,llvm::cl::parser<double>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = 0;
  BOOL v8 = parseDouble(a1, a5, a6, (double *)&v11);
  if (v8) {
    return v8;
  }
  *(void *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 192);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<double,false,llvm::cl::parser<double>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<double,false,llvm::cl::parser<double>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<double,false,llvm::cl::parser<double>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 160, a1);
}

llvm::raw_ostream *llvm::cl::opt<double,false,llvm::cl::parser<double>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 160), a1, a2);
}

void llvm::cl::opt<double,false,llvm::cl::parser<double>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  if (a3)
  {
    double v3 = *(double *)(a1 + 128);
LABEL_5:
    uint64_t v4 = *(void *)(a1 + 144);
    char v6 = *(unsigned char *)(a1 + 152);
    v5[0] = &unk_270DC01D8;
    v5[1] = v4;
    llvm::cl::parser<double>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, (uint64_t)v5, a2, v3);
    return;
  }
  if (*(unsigned char *)(a1 + 152))
  {
    double v3 = *(double *)(a1 + 128);
    if (*(double *)(a1 + 144) != v3) {
      goto LABEL_5;
    }
  }
}

uint64_t llvm::cl::opt<double,false,llvm::cl::parser<double>>::setDefault(uint64_t result)
{
  if (*(unsigned char *)(result + 152)) {
    uint64_t v1 = *(void *)(result + 144);
  }
  else {
    uint64_t v1 = 0;
  }
  *(void *)(result + 128) = v1;
  return result;
}

void *std::__function::__value_func<void ()(double const&)>::~__value_func[abi:nn180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL llvm::cl::OptionValueCopy<double>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 16) && *(unsigned char *)(a1 + 16) && *(double *)(a1 + 8) != *(double *)(a2 + 8);
}

llvm::cl::Option *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [28],llvm::cl::OptionHidden,llvm::cl::desc>(llvm::cl::Option *a1, char *a2, _WORD *a3, __n128 *a4)
{
  uint64_t v8 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(unsigned char *)(v8 + 128) = 0;
  *(void *)(v8 + 136) = &unk_270DBC978;
  *(void *)(v8 + 144) = 0;
  *(void *)uint64_t v8 = &unk_270DBC910;
  *(void *)(v8 + 152) = &unk_270DBC658;
  *(void *)(v8 + 160) = &unk_270DBC998;
  *(void *)(v8 + 184) = v8 + 160;
  llvm::cl::apply<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>,char [20],llvm::cl::OptionHidden,llvm::cl::desc>(v8, a2, a3, a4);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

void std::__function::__func<llvm::cl::opt<double,false,llvm::cl::parser<double>>::{lambda(double const&)#1},std::allocator<llvm::cl::opt<double,false,llvm::cl::parser<double>>::{lambda(double const&)#1}>,void ()(double const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<double,false,llvm::cl::parser<double>>::{lambda(double const&)#1},std::allocator<llvm::cl::opt<double,false,llvm::cl::parser<double>>::{lambda(double const&)#1}>,void ()(double const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_270DC01F8;
  return result;
}

void std::__function::__func<llvm::cl::opt<double,false,llvm::cl::parser<double>>::{lambda(double const&)#1},std::allocator<llvm::cl::opt<double,false,llvm::cl::parser<double>>::{lambda(double const&)#1}>,void ()(double const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC01F8;
}

uint64_t _GLOBAL__sub_I_BlockFrequencyInfoImpl_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&llvm::CheckBFIUnknownBlockQueries, 0, 0);
  byte_26B41FC68 = 0;
  qword_26B41FC70 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41FC78 = 0;
  llvm::CheckBFIUnknownBlockQueries = (uint64_t)&unk_270DBC910;
  qword_26B41FC80 = (uint64_t)&unk_270DBC658;
  qword_26B41FC88 = (uint64_t)&unk_270DBC998;
  qword_26B41FCA0 = (uint64_t)&qword_26B41FC88;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"check-bfi-unknown-block-queries", 0x1FuLL);
  byte_26B41FC68 = 0;
  word_26B41FC78 = 256;
  word_26B41FBF2 = word_26B41FBF2 & 0xFF9F | 0x20;
  qword_26B41FC08 = (uint64_t)"Check if block frequency is queried for an unknown block for debugging missed BFI updates";
  unk_26B41FC10 = 89;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::CheckBFIUnknownBlockQueries);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &llvm::CheckBFIUnknownBlockQueries, &dword_261C2B000);
  int v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Apply an iterative post-processing to infer correct BFI counts";
  v2.n128_u64[1] = 62;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [28],llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&llvm::UseIterativeBFIInference, "use-iterative-bfi-inference", &v3, &v2);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &llvm::UseIterativeBFIInference, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&llvm::IterativeBFIMaxIterationsPerBlock, 0, 0);
  dword_26B41FD28 = 0;
  qword_26B41FD30 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B41FD38 = 0;
  llvm::IterativeBFIMaxIterationsPerBlock = (uint64_t)&unk_270DBC7D8;
  qword_26B41FD40 = (uint64_t)&unk_270DBC6E8;
  qword_26B41FD48 = (uint64_t)&unk_270DBFE18;
  qword_26B41FD60 = (uint64_t)&qword_26B41FD48;
  llvm::cl::Option::setArgStr((uint64_t)&llvm::IterativeBFIMaxIterationsPerBlock, (uint64_t *)"iterative-bfi-max-iterations-per-block", 0x26uLL);
  dword_26B41FD28 = 1000;
  byte_26B41FD3C = 1;
  dword_26B41FD38 = 1000;
  word_26B41FCB2 = word_26B41FCB2 & 0xFF9F | 0x20;
  qword_26B41FCC8 = (uint64_t)"Iterative inference: maximum number of update iterations per block";
  unk_26B41FCD0 = 66;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::IterativeBFIMaxIterationsPerBlock);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &llvm::IterativeBFIMaxIterationsPerBlock, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&llvm::IterativeBFIPrecision, 0, 0);
  xmmword_26B41F650 = 0u;
  *(_OWORD *)&qword_26B41F660 = 0u;
  *((void *)&xmmword_26B41F650 + 1) = &unk_270DC01D8;
  llvm::IterativeBFIPrecision = (uint64_t)&unk_270DC0170;
  qword_26B41F670 = (uint64_t)&unk_270DBC748;
  qword_26B41F678 = (uint64_t)&unk_270DC01F8;
  qword_26B41F690 = (uint64_t)&qword_26B41F678;
  llvm::cl::Option::setArgStr((uint64_t)&llvm::IterativeBFIPrecision, (uint64_t *)"iterative-bfi-precision", 0x17uLL);
  *(void *)&xmmword_26B41F650 = 0x3D719799812DEA11;
  byte_26B41F668 = 1;
  qword_26B41F660 = 0x3D719799812DEA11;
  word_26B41F5DA = word_26B41F5DA & 0xFF9F | 0x20;
  qword_26B41F5F0 = (uint64_t)"Iterative inference: delta convergence precision; smaller values typically lead to better r"
                             "esults at the cost of worsen runtime";
  unk_26B41F5F8 = 127;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::IterativeBFIPrecision);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<double,false,llvm::cl::parser<double>>::~opt, &llvm::IterativeBFIPrecision, &dword_261C2B000);
}

uint64_t std::map<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>::~map[abi:nn180100](uint64_t a1)
{
  return a1;
}

uint64_t *std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::__emplace_hint_unique_key_args<llvm::CmpInst::Predicate,std::pair<llvm::CmpInst::Predicate const,llvm::SmallVector<llvm::BranchProbability,12u>> const&>(uint64_t *result, uint64_t *a2, unsigned int a3, _DWORD *a4)
{
  int v5 = a2;
  char v6 = result;
  uint64_t v7 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (unsigned int v8 = *((_DWORD *)a2 + 8), v8 > a3))
  {
    uint64_t v9 = *a2;
    if ((uint64_t *)*result == a2)
    {
      uint64_t v11 = a2;
LABEL_16:
      if (v9) {
        unint64_t v17 = v11;
      }
      else {
        unint64_t v17 = a2;
      }
      if (v9) {
        uint64_t v13 = v11 + 1;
      }
      else {
        uint64_t v13 = a2;
      }
      if (*v13) {
        return result;
      }
      int v5 = v17;
      goto LABEL_42;
    }
    if (v9)
    {
      long long v10 = (uint64_t *)*a2;
      do
      {
        uint64_t v11 = v10;
        long long v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      unint64_t v15 = a2;
      do
      {
        uint64_t v11 = (uint64_t *)v15[2];
        BOOL v16 = *v11 == (void)v15;
        unint64_t v15 = v11;
      }
      while (v16);
    }
    if (*((_DWORD *)v11 + 8) < a3) {
      goto LABEL_16;
    }
    int v18 = *v7;
    uint64_t v13 = result + 1;
    int v5 = result + 1;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          int v5 = v18;
          unsigned int v19 = *((_DWORD *)v18 + 8);
          if (v19 <= a3) {
            break;
          }
          int v18 = (uint64_t *)*v18;
          uint64_t v13 = v5;
          if (!*v5) {
            goto LABEL_42;
          }
        }
        if (v19 >= a3) {
          return result;
        }
        int v18 = (uint64_t *)v18[1];
        if (!v18) {
          goto LABEL_30;
        }
      }
    }
LABEL_42:
    long long v23 = operator new(0x68uLL);
    v23[8] = *a4;
    *((void *)v23 + 5) = v23 + 14;
    *((void *)v23 + 6) = 0xC00000000;
    if (a4[4]) {
      llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)(v23 + 10), (uint64_t)(a4 + 2));
    }
    *(void *)long long v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v5;
    *uint64_t v13 = (uint64_t)v23;
    uint64_t v24 = *(void *)*v6;
    if (v24)
    {
      *char v6 = v24;
      long long v23 = (_DWORD *)*v13;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], (uint64_t *)v23);
    ++v6[2];
    return result;
  }
  if (v8 >= a3) {
    return result;
  }
  uint64_t v13 = a2 + 1;
  unint64_t v12 = (uint64_t *)a2[1];
  if (v12)
  {
    do
    {
      uint64_t v13 = v12;
      unint64_t v12 = (uint64_t *)*v12;
      int v5 = v13;
      unint64_t v14 = v13;
    }
    while (v12);
  }
  else
  {
    unint64_t v14 = a2;
    do
    {
      uint64_t v20 = v14;
      unint64_t v14 = (uint64_t *)v14[2];
    }
    while ((uint64_t *)*v14 != v20);
  }
  if (v14 == (uint64_t *)v7) {
    goto LABEL_42;
  }
  if (*((_DWORD *)v14 + 8) > a3) {
    goto LABEL_42;
  }
  uint64_t v21 = *v7;
  uint64_t v13 = result + 1;
  int v5 = result + 1;
  if (!*v7) {
    goto LABEL_42;
  }
  while (1)
  {
    while (1)
    {
      int v5 = v21;
      unsigned int v22 = *((_DWORD *)v21 + 8);
      if (v22 <= a3) {
        break;
      }
      uint64_t v21 = (uint64_t *)*v21;
      uint64_t v13 = v5;
      if (!*v5) {
        goto LABEL_42;
      }
    }
    if (v22 >= a3) {
      return result;
    }
    uint64_t v21 = (uint64_t *)v21[1];
    if (!v21)
    {
LABEL_30:
      uint64_t v13 = v5 + 1;
      goto LABEL_42;
    }
  }
}

void std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::destroy(*a1);
    std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::destroy(a1[1]);
    __n128 v2 = (void *)a1[5];
    if (v2 != a1 + 7) {
      free(v2);
    }
    operator delete(a1);
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::destroyAll(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 16 * v1;
    int v3 = (uint64_t *)(*(void *)a1 + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v4 = *v3;
        *int v3 = 0;
        if (v4) {
          std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>::operator()[abi:nn180100]((uint64_t)v3, v4);
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
}

uint64_t _GLOBAL__sub_I_BranchProbabilityInfo_cpp()
{
  v46[6] = *MEMORY[0x263EF8340];
  LOBYTE(__src) = 0;
  p_src = &__src;
  LODWORD(v41) = 1;
  v22.n128_u64[0] = (unint64_t)"Print the branch probability info.";
  v22.n128_u64[1] = 34;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_26B419690, "print-bpi", (unsigned char **)&p_src, &v41, &v22);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_26B419690, &dword_261C2B000);
  LODWORD(p_src) = 1;
  v22.n128_u64[0] = (unint64_t)"The option to specify the name of the function whose branch probability info is printed.";
  v22.n128_u64[1] = 88;
  llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_26B419750, "print-bpi-func-name", &p_src, &v22);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt, &unk_26B419750, &dword_261C2B000);
  _MergedGlobals_15 = 0x5000000000000001;
  dword_26B4195E0 = 805306368;
  __src = (void *)0x3000000050000000;
  p_src = (void **)v46;
  uint64_t v45 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&p_src, &__src, &v38);
  v22.n128_u32[0] = 33;
  v22.n128_u64[1] = (unint64_t)v24;
  uint64_t v23 = 0xC00000000;
  if (v45) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v22.n128_i64[1], (uint64_t)&p_src);
  }
  int v18 = (void *)__PAIR64__(HIDWORD(_MergedGlobals_15), dword_26B4195E0);
  uint64_t v41 = v43;
  uint64_t v42 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&v41, &v18, &v19);
  int v25 = 32;
  std::string v26 = v28;
  uint64_t v27 = 0xC00000000;
  if (v42) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v26, (uint64_t)&v41);
  }
  uint64_t v0 = 0;
  qword_26B419610 = 0;
  qword_26B419608 = 0;
  qword_26B419600 = (uint64_t)&qword_26B419608;
  do
  {
    std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::__emplace_hint_unique_key_args<llvm::CmpInst::Predicate,std::pair<llvm::CmpInst::Predicate const,llvm::SmallVector<llvm::BranchProbability,12u>> const&>(&qword_26B419600, &qword_26B419608, v22.n128_u32[v0], (__n128 *)((char *)&v22 + v0 * 4));
    v0 += 18;
  }
  while (v0 != 36);
  for (uint64_t i = 0; i != -18; i -= 9)
  {
    uint64_t v2 = (&v26)[i];
    if (&v28[i * 8] != v2) {
      free(v2);
    }
  }
  if (v41 != v43) {
    free(v41);
  }
  if (p_src != v46) {
    free(p_src);
  }
  __cxa_atexit((void (*)(void *))std::map<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>::~map[abi:nn180100], &qword_26B419600, &dword_261C2B000);
  qword_26B4195E4 = 0x3000000050000000;
  uint64_t v40 = 0x5000000030000000;
  p_src = (void **)v46;
  uint64_t v45 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&p_src, &v40, &v41);
  v22.n128_u32[0] = 32;
  v22.n128_u64[1] = (unint64_t)v24;
  uint64_t v23 = 0xC00000000;
  if (v45) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v22.n128_i64[1], (uint64_t)&p_src);
  }
  uint64_t v36 = qword_26B4195E4;
  uint64_t v41 = v43;
  uint64_t v42 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&v41, &v36, &__src);
  int v25 = 33;
  std::string v26 = v28;
  uint64_t v27 = 0xC00000000;
  if (v42) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v26, (uint64_t)&v41);
  }
  v21[0] = HIDWORD(qword_26B4195E4);
  v21[1] = qword_26B4195E4;
  __src = v39;
  uint64_t v38 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&__src, v21, &v22);
  int v29 = 40;
  char v30 = v32;
  uint64_t v31 = 0xC00000000;
  if (v38) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v30, (uint64_t)&__src);
  }
  uint64_t v17 = qword_26B4195E4;
  int v18 = v20;
  uint64_t v19 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&v18, &v17, &v18);
  int v33 = 38;
  v34[0] = &v35;
  v34[1] = 0xC00000000;
  if (v19) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)v34, (uint64_t)&v18);
  }
  uint64_t v3 = 0;
  qword_26B419628 = 0;
  qword_26B419620 = 0;
  qword_26B419618 = (uint64_t)&qword_26B419620;
  do
  {
    std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::__emplace_hint_unique_key_args<llvm::CmpInst::Predicate,std::pair<llvm::CmpInst::Predicate const,llvm::SmallVector<llvm::BranchProbability,12u>> const&>(&qword_26B419618, &qword_26B419620, v22.n128_u32[v3], (__n128 *)((char *)&v22 + v3 * 4));
    v3 += 18;
  }
  while (v3 != 72);
  uint64_t v4 = 288;
  do
  {
    int v5 = *(unsigned char **)&v20[v4 - 8];
    if (&v20[v4 + 8] != v5) {
      free(v5);
    }
    v4 -= 72;
  }
  while (v4);
  if (v18 != v20) {
    free(v18);
  }
  if (__src != v39) {
    free(__src);
  }
  if (v41 != v43) {
    free(v41);
  }
  if (p_src != v46) {
    free(p_src);
  }
  __cxa_atexit((void (*)(void *))std::map<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>::~map[abi:nn180100], &qword_26B419618, &dword_261C2B000);
  int v18 = (void *)__PAIR64__(qword_26B4195E4, HIDWORD(qword_26B4195E4));
  p_src = (void **)v46;
  uint64_t v45 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&p_src, &v18, &v19);
  v22.n128_u32[0] = 32;
  v22.n128_u64[1] = (unint64_t)v24;
  uint64_t v23 = 0xC00000000;
  if (v45) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v22.n128_i64[1], (uint64_t)&p_src);
  }
  uint64_t v40 = qword_26B4195E4;
  uint64_t v41 = v43;
  uint64_t v42 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&v41, &v40, &v41);
  int v25 = 33;
  std::string v26 = v28;
  uint64_t v27 = 0xC00000000;
  if (v42) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v26, (uint64_t)&v41);
  }
  uint64_t v36 = qword_26B4195E4;
  __src = v39;
  uint64_t v38 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&__src, &v36, &__src);
  int v29 = 38;
  char v30 = v32;
  uint64_t v31 = 0xC00000000;
  if (v38) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v30, (uint64_t)&__src);
  }
  uint64_t v6 = 0;
  qword_26B419640 = 0;
  qword_26B419638 = 0;
  qword_26B419630 = (uint64_t)&qword_26B419638;
  do
  {
    std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::__emplace_hint_unique_key_args<llvm::CmpInst::Predicate,std::pair<llvm::CmpInst::Predicate const,llvm::SmallVector<llvm::BranchProbability,12u>> const&>(&qword_26B419630, &qword_26B419638, v22.n128_u32[v6], (__n128 *)((char *)&v22 + v6 * 4));
    v6 += 18;
  }
  while (v6 != 54);
  for (uint64_t j = 0; j != -27; j -= 9)
  {
    unsigned int v8 = (&v30)[j];
    if (&v32[j * 8] != v8) {
      free(v8);
    }
  }
  if (__src != v39) {
    free(__src);
  }
  if (v41 != v43) {
    free(v41);
  }
  if (p_src != v46) {
    free(p_src);
  }
  __cxa_atexit((void (*)(void *))std::map<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>::~map[abi:nn180100], &qword_26B419630, &dword_261C2B000);
  uint64_t v41 = (unsigned char *)__PAIR64__(qword_26B4195E4, HIDWORD(qword_26B4195E4));
  p_src = (void **)v46;
  uint64_t v45 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&p_src, &v41, &v42);
  unsigned int v9 = 40;
  v22.n128_u32[0] = 40;
  v22.n128_u64[1] = (unint64_t)v24;
  uint64_t v23 = 0xC00000000;
  if (v45)
  {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v22.n128_i64[1], (uint64_t)&p_src);
    unsigned int v9 = v22.n128_u32[0];
  }
  qword_26B419658 = 0;
  qword_26B419650 = 0;
  qword_26B419648 = (uint64_t)&qword_26B419650;
  std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::__emplace_hint_unique_key_args<llvm::CmpInst::Predicate,std::pair<llvm::CmpInst::Predicate const,llvm::SmallVector<llvm::BranchProbability,12u>> const&>(&qword_26B419648, &qword_26B419650, v9, &v22);
  if ((unsigned char *)v22.n128_u64[1] != v24) {
    free((void *)v22.n128_u64[1]);
  }
  if (p_src != v46) {
    free(p_src);
  }
  __cxa_atexit((void (*)(void *))std::map<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>::~map[abi:nn180100], &qword_26B419648, &dword_261C2B000);
  __src = (void *)__PAIR64__(qword_26B4195E4, HIDWORD(qword_26B4195E4));
  p_src = (void **)v46;
  uint64_t v45 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&p_src, &__src, &v38);
  v22.n128_u32[0] = 32;
  v22.n128_u64[1] = (unint64_t)v24;
  uint64_t v23 = 0xC00000000;
  if (v45) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v22.n128_i64[1], (uint64_t)&p_src);
  }
  int v18 = (void *)qword_26B4195E4;
  uint64_t v41 = v43;
  uint64_t v42 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&v41, &v18, &v19);
  int v25 = 33;
  std::string v26 = v28;
  uint64_t v27 = 0xC00000000;
  if (v42) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v26, (uint64_t)&v41);
  }
  uint64_t v10 = 0;
  qword_26B419670 = 0;
  qword_26B419668 = 0;
  qword_26B419660 = (uint64_t)&qword_26B419668;
  do
  {
    std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::__emplace_hint_unique_key_args<llvm::CmpInst::Predicate,std::pair<llvm::CmpInst::Predicate const,llvm::SmallVector<llvm::BranchProbability,12u>> const&>(&qword_26B419660, &qword_26B419668, v22.n128_u32[v10], (__n128 *)((char *)&v22 + v10 * 4));
    v10 += 18;
  }
  while (v10 != 36);
  for (uint64_t k = 0; k != -18; k -= 9)
  {
    unint64_t v12 = (&v26)[k];
    if (&v28[k * 8] != v12) {
      free(v12);
    }
  }
  if (v41 != v43) {
    free(v41);
  }
  if (p_src != v46) {
    free(p_src);
  }
  __cxa_atexit((void (*)(void *))std::map<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>::~map[abi:nn180100], &qword_26B419660, &dword_261C2B000);
  qword_26B4195EC = 0x8007FFFF800;
  *(void *)algn_26B4195F4 = 0x3000000050000000;
  __src = (void *)0x8007FFFF800;
  p_src = (void **)v46;
  uint64_t v45 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&p_src, &__src, &v38);
  v22.n128_u32[0] = 7;
  v22.n128_u64[1] = (unint64_t)v24;
  uint64_t v23 = 0xC00000000;
  if (v45) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v22.n128_i64[1], (uint64_t)&p_src);
  }
  int v18 = (void *)__PAIR64__(qword_26B4195EC, HIDWORD(qword_26B4195EC));
  uint64_t v41 = v43;
  uint64_t v42 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&v41, &v18, &v19);
  int v25 = 8;
  std::string v26 = v28;
  uint64_t v27 = 0xC00000000;
  if (v42) {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v26, (uint64_t)&v41);
  }
  uint64_t v13 = 0;
  qword_26B419688 = 0;
  qword_26B419680 = 0;
  qword_26B419678 = (uint64_t)&qword_26B419680;
  do
  {
    std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::__emplace_hint_unique_key_args<llvm::CmpInst::Predicate,std::pair<llvm::CmpInst::Predicate const,llvm::SmallVector<llvm::BranchProbability,12u>> const&>(&qword_26B419678, &qword_26B419680, v22.n128_u32[v13], (__n128 *)((char *)&v22 + v13 * 4));
    v13 += 18;
  }
  while (v13 != 36);
  for (uint64_t m = 0; m != -18; m -= 9)
  {
    unint64_t v15 = (&v26)[m];
    if (&v28[m * 8] != v15) {
      free(v15);
    }
  }
  if (v41 != v43) {
    free(v41);
  }
  if (p_src != v46) {
    free(p_src);
  }
  return __cxa_atexit((void (*)(void *))std::map<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>::~map[abi:nn180100], &qword_26B419678, &dword_261C2B000);
}

llvm::cl::Option *llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>(llvm::cl::Option *a1, char *a2, _WORD *a3, __n128 *a4, int **a5)
{
  uint64_t v10 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_270DBCA00;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_270DBC7D8;
  *(void *)(v10 + 152) = &unk_270DBC6E8;
  *(void *)(v10 + 160) = &unk_270DBFE18;
  *(void *)(v10 + 184) = v10 + 160;
  llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>(uint64_t a1, char *__s, _WORD *a3, __n128 *a4, int **a5)
{
  size_t v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v10);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  __n128 result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  int v12 = **a5;
  *(_DWORD *)(a1 + 128) = v12;
  *(unsigned char *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v12;
  return result;
}

uint64_t _GLOBAL__sub_I_CFG_cpp()
{
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Max number of BBs to explore for reachability analysis";
  v3.n128_u64[1] = 54;
  int v1 = 32;
  uint64_t v2 = &v1;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((llvm::cl::Option *)&DefaultMaxBBsToExplore, "dom-tree-reachability-max-bbs-to-explore", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &DefaultMaxBBsToExplore, &dword_261C2B000);
}

uint64_t llvm::MemIntrinsic::classof(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) == 84
    && (uint64_t v1 = *(void *)(a1 - 32)) != 0
    && !*(unsigned char *)(v1 + 16)
    && *(void *)(v1 + 24) == *(void *)(a1 + 72)
    && (*(unsigned char *)(v1 + 33) & 0x20) != 0
    && (unsigned int v2 = *(_DWORD *)(v1 + 36) - 197, v2 <= 7))
  {
    return (0xADu >> v2) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t _GLOBAL__sub_I_CaptureTracking_cpp()
{
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Maximal number of uses to explore.";
  v3.n128_u64[1] = 34;
  int v1 = 100;
  unsigned int v2 = &v1;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((llvm::cl::Option *)&DefaultMaxUsesToExplore, "capture-tracking-max-uses-to-explore", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &DefaultMaxUsesToExplore, &dword_261C2B000);
}

unint64_t llvm::PointerType::getWithSamePointeeType(uint64_t a1, llvm::Type *a2)
{
  if (*(void *)(a1 + 24)) {
    return llvm::PointerType::get(*(llvm::PointerType ***)(a1 + 24), a2);
  }
  else {
    return llvm::PointerType::get(*(llvm::PointerType **)a1, a2);
  }
}

void *llvm::APInt::getLowBitsSet@<X0>(llvm::APInt *this@<X0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  int v4 = llvm::APInt::APInt(a3, this, 0);
  return llvm::APInt::setBits(v4, 0, a2);
}

uint64_t _GLOBAL__sub_I_DependenceAnalysis_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_16, 0, 0);
  byte_26B4198B8 = 0;
  qword_26B4198C0 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B4198C8 = 0;
  _MergedGlobals_16 = (uint64_t)&unk_270DBC910;
  qword_26B4198D0 = (uint64_t)&unk_270DBC658;
  qword_26B4198D8 = (uint64_t)&unk_270DBC998;
  qword_26B4198F0 = (uint64_t)&qword_26B4198D8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"da-delinearize", 0xEuLL);
  byte_26B4198B8 = 1;
  word_26B4198C8 = 257;
  word_26B419842 = word_26B419842 & 0xFF9F | 0x20;
  qword_26B419858 = (uint64_t)"Try to delinearize array references.";
  unk_26B419860 = 36;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_16);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_16, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B4198F8, 0, 0);
  byte_26B419978 = 0;
  qword_26B419980 = (uint64_t)&unk_270DBC978;
  unk_26B419988 = 0;
  qword_26B4198F8 = (uint64_t)&unk_270DBC910;
  qword_26B419990 = (uint64_t)&unk_270DBC658;
  qword_26B419998 = (uint64_t)&unk_270DBC998;
  qword_26B4199B0 = (uint64_t)&qword_26B419998;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B4198F8, (uint64_t *)"da-disable-delinearization-checks", 0x21uLL);
  word_26B419902 = word_26B419902 & 0xFF9F | 0x20;
  qword_26B419918 = (uint64_t)"Disable checks that try to statically verify validity of delinearized subscripts. Enabling "
                             "this option may result in incorrect dependence vectors for languages that allow the subscri"
                             "pt of one dimension to underflow or overflow into another dimension.";
  unk_26B419920 = 250;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B4198F8);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B4198F8, &dword_261C2B000);
  uint64_t v1 = llvm::cl::Option::Option((uint64_t)&qword_26B4199B8, 0, 0);
  dword_26B419A38 = 0;
  qword_26B419A48 = 0;
  qword_26B419A40 = (uint64_t)&unk_270DBCA00;
  qword_26B4199B8 = (uint64_t)&unk_270DBC7D8;
  qword_26B419A50 = (uint64_t)&unk_270DBC6E8;
  qword_26B419A58 = (uint64_t)&unk_270DBFE18;
  qword_26B419A70 = (uint64_t)&qword_26B419A58;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"da-miv-max-level-threshold", 0x1AuLL);
  dword_26B419A38 = 7;
  BYTE4(qword_26B419A48) = 1;
  LODWORD(qword_26B419A48) = 7;
  word_26B4199C2 = word_26B4199C2 & 0xFF9F | 0x20;
  qword_26B4199D8 = (uint64_t)"Maximum depth allowed for the recursive algorithm used to explore MIV direction vectors.";
  unk_26B4199E0 = 88;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B4199B8);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B4199B8, &dword_261C2B000);
}

uint64_t _GLOBAL__sub_I_GlobalsModRef_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&EnableUnsafeGlobalsModRefAliasResults, 0, 0);
  byte_26B41E810 = 0;
  qword_26B41E818 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41E820 = 0;
  EnableUnsafeGlobalsModRefAliasResults = (uint64_t)&unk_270DBC910;
  qword_26B41E828 = (uint64_t)&unk_270DBC658;
  qword_26B41E830 = (uint64_t)&unk_270DBC998;
  qword_26B41E848 = (uint64_t)&qword_26B41E830;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"enable-unsafe-globalsmodref-alias-results", 0x29uLL);
  byte_26B41E810 = 0;
  word_26B41E820 = 256;
  word_26B41E79A = word_26B41E79A & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&EnableUnsafeGlobalsModRefAliasResults);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &EnableUnsafeGlobalsModRefAliasResults, &dword_261C2B000);
}

uint64_t llvm::MapVector<llvm::Instruction *,llvm::Instruction *,llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,std::vector<std::pair<llvm::Instruction *,llvm::Instruction *>>>::operator[](void *a1, uint64_t *a2)
{
  uint64_t v24 = *a2;
  int v25 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>::try_emplace<unsigned int const&>((uint64_t)a1, &v24, &v25, (uint64_t)&v22);
  uint64_t v4 = v22;
  if (v23)
  {
    uint64_t v5 = *a2;
    unint64_t v6 = a1[5];
    uint64_t v7 = (void *)a1[4];
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v11 = a1[3];
      uint64_t v12 = ((uint64_t)v7 - v11) >> 4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
        abort();
      }
      uint64_t v14 = v6 - v11;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15) {
        BOOL v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(a1 + 5), v15);
      }
      else {
        BOOL v16 = 0;
      }
      uint64_t v17 = &v16[16 * v12];
      int v18 = &v16[16 * v15];
      *(void *)uint64_t v17 = v5;
      *((void *)v17 + 1) = 0;
      unsigned int v8 = v17 + 16;
      uint64_t v20 = (char *)a1[3];
      uint64_t v19 = (char *)a1[4];
      if (v19 != v20)
      {
        do
        {
          *((_OWORD *)v17 - 1) = *((_OWORD *)v19 - 1);
          v17 -= 16;
          v19 -= 16;
        }
        while (v19 != v20);
        uint64_t v19 = (char *)a1[3];
      }
      a1[3] = v17;
      a1[4] = v8;
      a1[5] = v18;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *uint64_t v7 = v5;
      v7[1] = 0;
      unsigned int v8 = v7 + 2;
    }
    a1[4] = v8;
    uint64_t v10 = a1[3];
    unsigned int v9 = (((unint64_t)v8 - v10) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v9;
  }
  else
  {
    unsigned int v9 = *(_DWORD *)(v22 + 8);
    uint64_t v10 = a1[3];
  }
  return v10 + 16 * v9 + 8;
}

uint64_t llvm::MapVector<llvm::Instruction *,llvm::Instruction *,llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,std::vector<std::pair<llvm::Instruction *,llvm::Instruction *>>>::find(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, &v4, &v5)|| v5 == *(void *)a1 + 16 * *(unsigned int *)(a1 + 16))
  {
    return *(void *)(a1 + 32);
  }
  else
  {
    return *(void *)(a1 + 24) + 16 * *(unsigned int *)(v5 + 8);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>::try_emplace<unsigned int const&>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a2, &v12);
  unsigned int v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::InsertIntoBucketImpl<llvm::Value const*>(a1, (uint64_t)a2, a2, v12);
    unsigned int v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

llvm::cl::Option *llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [28],llvm::cl::initializer<int>,llvm::cl::OptionHidden,llvm::cl::desc>(llvm::cl::Option *a1, char *a2, int **a3, _WORD *a4, __n128 *a5)
{
  uint64_t v10 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_270DBCA00;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_270DBC7D8;
  *(void *)(v10 + 152) = &unk_270DBC6E8;
  *(void *)(v10 + 160) = &unk_270DBFE18;
  *(void *)(v10 + 184) = v10 + 160;
  llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,char [28],llvm::cl::initializer<int>,llvm::cl::OptionHidden,llvm::cl::desc>(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,char [28],llvm::cl::initializer<int>,llvm::cl::OptionHidden,llvm::cl::desc>(uint64_t a1, char *__s, int **a3, _WORD *a4, __n128 *a5)
{
  size_t v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v10);
  int v11 = **a3;
  *(_DWORD *)(a1 + 128) = v11;
  *(unsigned char *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v11;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  __n128 result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

uint64_t _GLOBAL__sub_I_IndirectCallPromotionAnalysis_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_17, 0, 0);
  dword_26B419AF8 = 0;
  qword_26B419B00 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B419B08 = 0;
  _MergedGlobals_17 = (uint64_t)&unk_270DBC7D8;
  qword_26B419B10 = (uint64_t)&unk_270DBC6E8;
  qword_26B419B18 = (uint64_t)&unk_270DBFE18;
  qword_26B419B30 = (uint64_t)&qword_26B419B18;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"icp-remaining-percent-threshold", 0x1FuLL);
  dword_26B419AF8 = 30;
  byte_26B419B0C = 1;
  dword_26B419B08 = 30;
  word_26B419A82 = word_26B419A82 & 0xFF9F | 0x20;
  qword_26B419A98 = (uint64_t)"The percentage threshold against remaining unpromoted indirect call count for the promotion";
  unk_26B419AA0 = 91;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_17);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &_MergedGlobals_17, &dword_261C2B000);
  int v3 = 1;
  int v4 = 5;
  uint64_t v5 = &v4;
  v2.n128_u64[0] = (unint64_t)"The percentage threshold against total count for the promotion";
  v2.n128_u64[1] = 62;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [28],llvm::cl::initializer<int>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_26B419B38, "icp-total-percent-threshold", &v5, &v3, &v2);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_26B419B38, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B419BF8, 0, 0);
  dword_26B419C78 = 0;
  qword_26B419C88 = 0;
  qword_26B419C80 = (uint64_t)&unk_270DBCA00;
  qword_26B419BF8 = (uint64_t)&unk_270DBC7D8;
  qword_26B419C90 = (uint64_t)&unk_270DBC6E8;
  qword_26B419C98 = (uint64_t)&unk_270DBFE18;
  qword_26B419CB0 = (uint64_t)&qword_26B419C98;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B419BF8, (uint64_t *)"icp-max-prom", 0xCuLL);
  dword_26B419C78 = 3;
  BYTE4(qword_26B419C88) = 1;
  LODWORD(qword_26B419C88) = 3;
  word_26B419C02 = word_26B419C02 & 0xFF9F | 0x20;
  qword_26B419C18 = (uint64_t)"Max number of promotions for a single indirect call callsite";
  unk_26B419C20 = 60;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B419BF8);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B419BF8, &dword_261C2B000);
}

uint64_t llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_one,llvm::ConstantInt>::match<llvm::Constant>(uint64_t a1, llvm::Constant *a2)
{
  if (a2 && *((unsigned char *)a2 + 16) == 16)
  {
    int v3 = (llvm::Constant *)((char *)a2 + 24);
    unsigned int v4 = *((_DWORD *)a2 + 8);
    if (v4 <= 0x40)
    {
      uint64_t v5 = *(void *)v3;
LABEL_5:
      BOOL v6 = v5 == 1;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v7 = *(void *)a2;
  if (*(void *)a2) {
    BOOL v8 = (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
LABEL_28:
    char v12 = 0;
    return v12 & 1;
  }
  uint64_t SplatValue = llvm::Constant::getSplatValue(a2, 0);
  if (!SplatValue || *(unsigned char *)(SplatValue + 16) != 16)
  {
    if (*(unsigned char *)(v7 + 8) == 18)
    {
      int v10 = *(_DWORD *)(v7 + 32);
      if (v10)
      {
        int v11 = 0;
        char v12 = 0;
        while (1)
        {
          uint64_t AggregateElement = llvm::Constant::getAggregateElement(a2, v11);
          if (!AggregateElement) {
            break;
          }
          int v14 = *(unsigned __int8 *)(AggregateElement + 16);
          if ((v14 - 11) >= 2)
          {
            if (v14 != 16) {
              goto LABEL_28;
            }
            unsigned int v15 = *(_DWORD *)(AggregateElement + 32);
            if (v15 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(AggregateElement + 24)) != v15 - 1) {
                goto LABEL_28;
              }
            }
            else if (*(void *)(AggregateElement + 24) != 1)
            {
              goto LABEL_28;
            }
            char v12 = 1;
          }
          int v11 = (llvm::Type *)(v11 + 1);
          if (v10 == v11) {
            return v12 & 1;
          }
        }
      }
    }
    goto LABEL_28;
  }
  unsigned int v4 = *(_DWORD *)(SplatValue + 32);
  if (v4 <= 0x40)
  {
    uint64_t v5 = *(void *)(SplatValue + 24);
    goto LABEL_5;
  }
  int v3 = (llvm::APInt *)(SplatValue + 24);
LABEL_30:
  BOOL v6 = llvm::APInt::countLeadingZerosSlowCase(v3) == v4 - 1;
LABEL_31:
  char v12 = v6;
  return v12 & 1;
}

uint64_t llvm::PatternMatch::is_zero::match<llvm::Constant>(uint64_t a1, llvm::Constant *a2)
{
  if (!a2) {
    return 0;
  }
  if (llvm::Constant::isNullValue(a2)) {
    return 1;
  }
  return llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_zero_int,llvm::ConstantInt>::match<llvm::Constant>((uint64_t)&v4, a2);
}

uint64_t llvm::SmallVectorImpl<llvm::Constant *>::assign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(a1 + 12) < a2) {
    return (uint64_t)llvm::SmallVectorTemplateBase<unsigned long long,true>::growAndAssign(a1, a2, a3);
  }
  unint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= a2) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = *(unsigned int *)(a1 + 8);
  }
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)a1;
    do
    {
      *v5++ = a3;
      --v4;
    }
    while (v4);
  }
  unint64_t v6 = v3 - a2;
  if (v3 < a2)
  {
    uint64_t v7 = (uint64_t *)(*(void *)a1 + 8 * v3);
    do
      *v7++ = a3;
    while (!__CFADD__(v6++, 1));
  }
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

uint64_t llvm::ConstantFP::isExactlyValue(void **this, double a2)
{
  v7[3] = *MEMORY[0x263EF8340];
  llvm::APFloat::APFloat((llvm::APFloat *)v6, a2);
  llvm::APFloat::convert((uint64_t)v6, this[4], 1, &v5);
  uint64_t IsEqual = llvm::APFloat::bitwiseIsEqual((llvm::APFloat *)(this + 3), (const llvm::APFloat *)v6);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v7);
  return IsEqual;
}

BOOL llvm::GCRelocateInst::classof(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 123;
}

uint64_t _GLOBAL__sub_I_Loads_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&llvm::DefMaxInstsToScan, 0, 0);
  dword_26B41EAD0 = 0;
  qword_26B41EAD8 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B41EAE0 = 0;
  llvm::DefMaxInstsToScan = (uint64_t)&unk_270DBC7D8;
  qword_26B41EAE8 = (uint64_t)&unk_270DBC6E8;
  qword_26B41EAF0 = (uint64_t)&unk_270DBFE18;
  qword_26B41EB08 = (uint64_t)&qword_26B41EAF0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"available-load-scan-limit", 0x19uLL);
  dword_26B41EAD0 = 6;
  byte_26B41EAE4 = 1;
  dword_26B41EAE0 = 6;
  word_26B41EA5A = word_26B41EA5A & 0xFF9F | 0x20;
  qword_26B41EA70 = (uint64_t)"Use this to specify the default maximum number of instructions to scan backward from a give"
                             "n instruction, when searching for available loaded value";
  unk_26B41EA78 = 147;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::DefMaxInstsToScan);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &llvm::DefMaxInstsToScan, &dword_261C2B000);
}

void llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::~opt(llvm::cl::Option *a1)
{
  *(void *)a1 = &unk_270DC0240;
  std::__function::__value_func<void ()(unsigned int const&)>::~__value_func[abi:nn180100]((void *)a1 + 20);
  llvm::cl::Option::~Option(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270DC0240;
  std::__function::__value_func<void ()(unsigned int const&)>::~__value_func[abi:nn180100]((void *)a1 + 20);
  llvm::cl::Option::~Option(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, unint64_t *a4, unint64_t a5, unint64_t a6)
{
  int v11 = 0;
  uint64_t v8 = llvm::cl::parser<unsigned int>::parse(a1 + 152, a1, a3, a4, a5, a6, &v11);
  if (v8) {
    return v8;
  }
  **(_DWORD **)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 184);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

llvm::raw_ostream *llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  if (a3)
  {
    unsigned int v3 = **(_DWORD **)(a1 + 128);
LABEL_5:
    int v5 = *(_DWORD *)(a1 + 144);
    char v6 = *(unsigned char *)(a1 + 148);
    unint64_t v4 = &unk_270DBCA00;
    llvm::cl::parser<unsigned int>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 152), (const llvm::cl::Option *)a1, v3, (uint64_t)&v4, a2);
    return;
  }
  if (*(unsigned char *)(a1 + 148))
  {
    unsigned int v3 = **(_DWORD **)(a1 + 128);
    if (*(_DWORD *)(a1 + 144) != v3) {
      goto LABEL_5;
    }
  }
}

uint64_t llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::setDefault(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  **(_DWORD **)(result + 128) = v1;
  return result;
}

void std::__function::__func<llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_270DC02A8;
  return result;
}

void std::__function::__func<llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC02A8;
}

uint64_t llvm::cl::opt_storage<unsigned int,true,false>::setLocation(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (*(void *)result)
  {
    int v5 = "cl::location(x) specified more than once!";
    __int16 v6 = 259;
    unint64_t v4 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
    return llvm::cl::Option::error(a2, (llvm::Twine *)&v5, 0, 0, v4);
  }
  else
  {
    *(void *)__n128 result = a3;
    *(unsigned char *)(result + 20) = 1;
    *(_DWORD *)(result + 16) = *a3;
  }
  return result;
}

uint64_t _GLOBAL__sub_I_LoopAccessAnalysis_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&qword_26B419CC8, 0, 0);
  qword_26B419D48 = 0;
  byte_26B419D5C = 0;
  qword_26B419D50 = (uint64_t)&unk_270DBCA00;
  qword_26B419CC8 = (uint64_t)&unk_270DC0240;
  qword_26B419D60 = (uint64_t)&unk_270DBC6E8;
  qword_26B419D68 = (uint64_t)&unk_270DC02A8;
  qword_26B419D80 = (uint64_t)&qword_26B419D68;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"force-vector-width", 0x12uLL);
  word_26B419CD2 = word_26B419CD2 & 0xFF9F | 0x20;
  qword_26B419CE8 = (uint64_t)"Sets the SIMD width. Zero is autoselect.";
  unk_26B419CF0 = 40;
  llvm::cl::opt_storage<unsigned int,true,false>::setLocation((uint64_t)&qword_26B419D48, (uint64_t)&qword_26B419CC8, _MergedGlobals_18);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B419CC8);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::~opt, &qword_26B419CC8, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B419D88, 0, 0);
  byte_26B419E1C = 0;
  qword_26B419E08 = 0;
  unk_26B419E10 = &unk_270DBCA00;
  qword_26B419D88 = (uint64_t)&unk_270DC0240;
  qword_26B419E20 = (uint64_t)&unk_270DBC6E8;
  qword_26B419E28 = (uint64_t)&unk_270DC02A8;
  qword_26B419E40 = (uint64_t)&qword_26B419E28;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B419D88, (uint64_t *)"force-vector-interleave", 0x17uLL);
  word_26B419D92 = word_26B419D92 & 0xFF9F | 0x20;
  qword_26B419DA8 = (uint64_t)"Sets the vectorization interleave count. Zero is autoselect.";
  unk_26B419DB0 = 60;
  llvm::cl::opt_storage<unsigned int,true,false>::setLocation((uint64_t)&qword_26B419E08, (uint64_t)&qword_26B419D88, &_MergedGlobals_18[1]);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B419D88);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::~opt, &qword_26B419D88, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B419E48, 0, 0);
  qword_26B419EC8 = 0;
  byte_26B419EDC = 0;
  qword_26B419ED0 = (uint64_t)&unk_270DBCA00;
  qword_26B419E48 = (uint64_t)&unk_270DC0240;
  qword_26B419EE0 = (uint64_t)&unk_270DBC6E8;
  qword_26B419EE8 = (uint64_t)&unk_270DC02A8;
  qword_26B419F00 = (uint64_t)&qword_26B419EE8;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B419E48, (uint64_t *)"runtime-memory-check-threshold", 0x1EuLL);
  word_26B419E52 = word_26B419E52 & 0xFF9F | 0x20;
  qword_26B419E68 = (uint64_t)"When performing memory disambiguation checks at runtime do not generate more than this numb"
                             "er of comparisons (default = 8).";
  unk_26B419E70 = 123;
  llvm::cl::opt_storage<unsigned int,true,false>::setLocation((uint64_t)&qword_26B419EC8, (uint64_t)&qword_26B419E48, &_MergedGlobals_18[2]);
  *(_DWORD *)qword_26B419EC8 = 8;
  byte_26B419EDC = 1;
  dword_26B419ED8 = 8;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B419E48);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::~opt, &qword_26B419E48, &dword_261C2B000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum number of comparisons done when trying to merge runtime memory checks. (default = 100)";
  v4.n128_u64[1] = 94;
  int v3 = 100;
  __int16 v6 = &v3;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((llvm::cl::Option *)&unk_26B419F08, "memory-check-merge-threshold", &v5, &v4, &v6);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_26B419F08, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B419FC8, 0, 0);
  dword_26B41A048 = 0;
  qword_26B41A058 = 0;
  qword_26B41A050 = (uint64_t)&unk_270DBCA00;
  qword_26B419FC8 = (uint64_t)&unk_270DBC7D8;
  qword_26B41A060 = (uint64_t)&unk_270DBC6E8;
  qword_26B41A068 = (uint64_t)&unk_270DBFE18;
  qword_26B41A080 = (uint64_t)&qword_26B41A068;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B419FC8, (uint64_t *)"max-dependences", 0xFuLL);
  word_26B419FD2 = word_26B419FD2 & 0xFF9F | 0x20;
  qword_26B419FE8 = (uint64_t)"Maximum number of dependences collected by loop-access analysis (default = 100)";
  qword_26B419FF0 = 79;
  dword_26B41A048 = 100;
  BYTE4(qword_26B41A058) = 1;
  LODWORD(qword_26B41A058) = 100;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B419FC8);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B419FC8, &dword_261C2B000);
  LOBYTE(v3) = 1;
  __int16 v6 = &v3;
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Enable symbolic stride memory access versioning";
  v4.n128_u64[1] = 47;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_26B41A088, "enable-mem-access-versioning", (unsigned char **)&v6, &v5, &v4);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_26B41A088, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B41A148, 0, 0);
  byte_26B41A1C8 = 0;
  qword_26B41A1D8 = 0;
  qword_26B41A1D0 = (uint64_t)&unk_270DBC978;
  qword_26B41A148 = (uint64_t)&unk_270DBC910;
  qword_26B41A1E0 = (uint64_t)&unk_270DBC658;
  qword_26B41A1E8 = (uint64_t)&unk_270DBC998;
  qword_26B41A200 = (uint64_t)&qword_26B41A1E8;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41A148, (uint64_t *)"store-to-load-forwarding-conflict-detection", 0x2BuLL);
  word_26B41A152 = word_26B41A152 & 0xFF9F | 0x20;
  qword_26B41A168 = (uint64_t)"Enable conflict detection in loop-access analysis";
  qword_26B41A170 = 49;
  byte_26B41A1C8 = 1;
  LOWORD(qword_26B41A1D8) = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41A148);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B41A148, &dword_261C2B000);
  uint64_t v1 = llvm::cl::Option::Option((uint64_t)&qword_26B41A208, 0, 0);
  dword_26B41A288 = 0;
  qword_26B41A298 = 0;
  qword_26B41A290 = (uint64_t)&unk_270DBCA00;
  qword_26B41A208 = (uint64_t)&unk_270DBC7D8;
  qword_26B41A2A0 = (uint64_t)&unk_270DBC6E8;
  qword_26B41A2A8 = (uint64_t)&unk_270DBFE18;
  qword_26B41A2C0 = (uint64_t)&qword_26B41A2A8;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"max-forked-scev-depth", 0x15uLL);
  word_26B41A212 = word_26B41A212 & 0xFF9F | 0x20;
  qword_26B41A228 = (uint64_t)"Maximum recursion depth when finding forked SCEVs (default = 5)";
  qword_26B41A230 = 63;
  dword_26B41A288 = 5;
  BYTE4(qword_26B41A298) = 1;
  LODWORD(qword_26B41A298) = 5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41A208);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B41A208, &dword_261C2B000);
}

llvm::cl::Option *llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [17],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>(llvm::cl::Option *a1, char *a2, unsigned char **a3, _WORD *a4, __n128 *a5)
{
  uint64_t v10 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(unsigned char *)(v10 + 145) = 0;
  *(void *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_270DBC978;
  *(void *)uint64_t v10 = &unk_270DBD0D8;
  *(void *)(v10 + 152) = &unk_270DBC658;
  *(void *)(v10 + 160) = &unk_270DBD140;
  *(void *)(v10 + 184) = v10 + 160;
  llvm::cl::apply<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>,char [17],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>,char [17],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>(uint64_t a1, char *__s, unsigned char **a3, _WORD *a4, __n128 *a5)
{
  size_t v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v10);
  llvm::cl::opt_storage<BOOL,true,false>::setLocation((llvm *)(a1 + 128), a1, *a3);
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  __n128 result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

uint64_t _GLOBAL__sub_I_LoopInfo_cpp()
{
  int v3 = &_MergedGlobals_19;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Verify loop info (time consuming)";
  v1.n128_u64[1] = 33;
  llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [17],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_26B41A2D0, "verify-loop-info", &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &unk_26B41A2D0, &dword_261C2B000);
}

uint64_t _GLOBAL__sub_I_MemoryDependenceAnalysis_cpp()
{
  int v4 = 1;
  int v2 = 100;
  int v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"The number of instructions to scan in a block in memory dependency analysis (default = 100)";
  v1.n128_u64[1] = 91;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&_MergedGlobals_20, "memdep-block-scan-limit", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &_MergedGlobals_20, &dword_261C2B000);
  int v4 = 1;
  int v2 = 200;
  int v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"The number of blocks to scan during memory dependency analysis (default = 200)";
  v1.n128_u64[1] = 78;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&unk_26B41A450, "memdep-block-number-limit", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_26B41A450, &dword_261C2B000);
}

void llvm::cl::opt<float,false,llvm::cl::parser<float>>::~opt(llvm::cl::Option *a1)
{
  *(void *)a1 = &unk_270DC02F0;
  std::__function::__value_func<void ()(float const&)>::~__value_func[abi:nn180100]((void *)a1 + 20);
  llvm::cl::Option::~Option(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270DC02F0;
  std::__function::__value_func<void ()(float const&)>::~__value_func[abi:nn180100]((void *)a1 + 20);
  llvm::cl::Option::~Option(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::cl::opt<float,false,llvm::cl::parser<float>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v13 = 0.0;
  BOOL v8 = parseDouble(a1, a5, a6, &v13);
  if (v8) {
    return v8;
  }
  float v9 = v13;
  float v12 = v9;
  *(float *)(a1 + 128) = v9;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v10 = *(void *)(a1 + 184);
  if (v10)
  {
    (*(void (**)(uint64_t, float *))(*(void *)v10 + 48))(v10, &v12);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<float,false,llvm::cl::parser<float>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<float,false,llvm::cl::parser<float>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<float,false,llvm::cl::parser<float>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

llvm::raw_ostream *llvm::cl::opt<float,false,llvm::cl::parser<float>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<float,false,llvm::cl::parser<float>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  if (a3)
  {
    float v3 = *(float *)(a1 + 128);
LABEL_5:
    int v5 = *(_DWORD *)(a1 + 144);
    char v6 = *(unsigned char *)(a1 + 148);
    int v4 = &unk_270DC0358;
    llvm::cl::parser<float>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 152), (const llvm::cl::Option *)a1, (uint64_t)&v4, a2, v3);
    return;
  }
  if (*(unsigned char *)(a1 + 148))
  {
    float v3 = *(float *)(a1 + 128);
    if (*(float *)(a1 + 144) != v3) {
      goto LABEL_5;
    }
  }
}

uint64_t llvm::cl::opt<float,false,llvm::cl::parser<float>>::setDefault(uint64_t result)
{
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *std::__function::__value_func<void ()(float const&)>::~__value_func[abi:nn180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL llvm::cl::OptionValueCopy<float>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(float *)(a1 + 8) != *(float *)(a2 + 8);
}

void std::__function::__func<llvm::cl::opt<float,false,llvm::cl::parser<float>>::{lambda(float const&)#1},std::allocator<llvm::cl::opt<float,false,llvm::cl::parser<float>>::{lambda(float const&)#1}>,void ()(float const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<float,false,llvm::cl::parser<float>>::{lambda(float const&)#1},std::allocator<llvm::cl::opt<float,false,llvm::cl::parser<float>>::{lambda(float const&)#1}>,void ()(float const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_270DC0378;
  return result;
}

void std::__function::__func<llvm::cl::opt<float,false,llvm::cl::parser<float>>::{lambda(float const&)#1},std::allocator<llvm::cl::opt<float,false,llvm::cl::parser<float>>::{lambda(float const&)#1}>,void ()(float const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC0378;
}

uint64_t _GLOBAL__sub_I_MemoryProfileInfo_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_21, 0, 0);
  dword_26B41A590 = 0;
  qword_26B41A598 = (uint64_t)&unk_270DC0358;
  *(void *)&dword_26B41A5A0 = 0;
  _MergedGlobals_21 = (uint64_t)&unk_270DC02F0;
  qword_26B41A5A8 = (uint64_t)&unk_270DBC778;
  qword_26B41A5B0 = (uint64_t)&unk_270DC0378;
  qword_26B41A5C8 = (uint64_t)&qword_26B41A5B0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"memprof-accesses-per-byte-cold-threshold", 0x28uLL);
  dword_26B41A590 = 1092616192;
  byte_26B41A5A4 = 1;
  dword_26B41A5A0 = 1092616192;
  word_26B41A51A = word_26B41A51A & 0xFF9F | 0x20;
  qword_26B41A530 = (uint64_t)"The threshold the accesses per byte must be under to consider an allocation cold";
  unk_26B41A538 = 80;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_21);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<float,false,llvm::cl::parser<float>>::~opt, &_MergedGlobals_21, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B41A5D0, 0, 0);
  dword_26B41A650 = 0;
  qword_26B41A658 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B41A660 = 0;
  qword_26B41A5D0 = (uint64_t)&unk_270DBC7D8;
  qword_26B41A668 = (uint64_t)&unk_270DBC6E8;
  qword_26B41A670 = (uint64_t)&unk_270DBFE18;
  qword_26B41A688 = (uint64_t)&qword_26B41A670;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41A5D0, (uint64_t *)"memprof-min-lifetime-cold-threshold", 0x23uLL);
  dword_26B41A650 = 200;
  byte_26B41A664 = 1;
  dword_26B41A660 = 200;
  word_26B41A5DA = word_26B41A5DA & 0xFF9F | 0x20;
  qword_26B41A5F0 = (uint64_t)"The minimum lifetime (s) for an allocation to be considered cold";
  unk_26B41A5F8 = 64;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41A5D0);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B41A5D0, &dword_261C2B000);
}

uint64_t llvm::User::dropAllReferences(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 20);
  if ((v1 & 0x40000000) != 0)
  {
    uint64_t v3 = *(void *)(this - 8);
    uint64_t v2 = v1 & 0x7FFFFFF;
    if (!v2) {
      return this;
    }
  }
  else
  {
    uint64_t v2 = v1 & 0x7FFFFFF;
    uint64_t v3 = this - 32 * v2;
    if (!v2) {
      return this;
    }
  }
  uint64_t v4 = 32 * v2;
  int v5 = (void **)(v3 + 16);
  do
  {
    if (*(v5 - 2))
    {
      **int v5 = *(v5 - 1);
      uint64_t v6 = (uint64_t)*(v5 - 1);
      if (v6) {
        *(void *)(v6 + 16) = *v5;
      }
    }
    *(v5 - 2) = 0;
    v5 += 4;
    v4 -= 32;
  }
  while (v4);
  return this;
}

unsigned char *llvm::GraphDiff<llvm::BasicBlock *,false>::getChildren<false>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 40);
  if (v6 == a2 + 40)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v7 = v6 - 24;
    if (v6) {
      uint64_t v8 = v6 - 24;
    }
    else {
      uint64_t v8 = 0;
    }
    if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v7;
    }
  }
  uint64_t v10 = llvm::GraphTraits<llvm::BasicBlock *>::child_end(a2);
  *a3 = a3 + 2;
  a3[1] = (void *)0x800000000;
  v24[0] = v10;
  v24[1] = v11;
  v24[2] = v10;
  v24[3] = v11;
  v23[0] = v9;
  v23[1] = 0;
  void v23[2] = v9;
  v23[3] = 0;
  llvm::SmallVectorImpl<llvm::BasicBlock *>::append<std::reverse_iterator<llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,void>((unsigned int *)a3, (uint64_t)v24, (uint64_t)v23);
  v24[0] = 0;
  *((_DWORD *)a3 + 2) = (unint64_t)((char *)std::remove[abi:nn180100]<llvm::BasicBlock **,decltype(nullptr)>(*a3, &(*a3)[*((unsigned int *)a3 + 2)])- (char *)*a3) >> 3;
  __n128 result = (unsigned char *)llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>,llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::find(a1, a2);
  double v13 = result;
  if (*(unsigned char *)a1) {
    uint64_t v14 = a1 + 296;
  }
  else {
    uint64_t v14 = *(void *)(a1 + 8) + 72 * *(unsigned int *)(a1 + 16);
  }
  if ((unsigned char *)v14 != result)
  {
    uint64_t v15 = *((unsigned int *)result + 4);
    BOOL v16 = *a3;
    uint64_t v17 = *((unsigned int *)a3 + 2);
    if (v15)
    {
      int v18 = (uint64_t *)*((void *)v13 + 1);
      uint64_t v19 = 8 * v15;
      do
      {
        uint64_t v20 = *v18++;
        v24[0] = v20;
        uint64_t v21 = (char *)std::remove[abi:nn180100]<llvm::BasicBlock **,llvm::BasicBlock *>(v16, &v16[v17], v24);
        BOOL v16 = *a3;
        unint64_t v22 = (unint64_t)(v21 - (char *)*a3) >> 3;
        uint64_t v17 = v22;
        *((_DWORD *)a3 + 2) = v22;
        v19 -= 8;
      }
      while (v19);
    }
    return llvm::SmallVectorImpl<llvm::BasicBlock *>::insert<llvm::BasicBlock * const*,void>((unsigned int *)a3, (uint64_t)&v16[v17], *((uint64_t **)v13 + 5), (uint64_t *)(*((void *)v13 + 5) + 8 * *((unsigned int *)v13 + 12)));
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>,llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::find(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = a2;
  if (llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>,llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::LookupBucketFor<llvm::BasicBlock const*>(a1, &v5, &v4))return v4; {
  if (*(unsigned char *)a1)
  }
    return a1 + 296;
  return *(void *)(a1 + 8) + 72 * *(unsigned int *)(a1 + 16);
}

unsigned int *llvm::SmallVectorImpl<llvm::BasicBlock *>::append<std::reverse_iterator<llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,void>(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a3 + 24);
  int v8 = v6 - v7;
  uint64_t v9 = result[2];
  unint64_t v10 = v9 + (int)v6 - (int)v7;
  if (v10 > result[3])
  {
    __n128 result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v10, 8);
    uint64_t v6 = *(void *)(a2 + 24);
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t v9 = v5[2];
  }
  if (v6 != v7)
  {
    uint64_t v11 = *(llvm::Instruction **)(a2 + 16);
    float v12 = (unsigned int **)(*(void *)v5 + 8 * v9);
    do
    {
      LODWORD(v6) = v6 - 1;
      __n128 result = (unsigned int *)llvm::Instruction::getSuccessor(v11, v6);
      *v12++ = result;
    }
    while (v7 != v6);
  }
  void v5[2] = v9 + v8;
  return result;
}

void *std::remove[abi:nn180100]<llvm::BasicBlock **,decltype(nullptr)>(void *result, void *a2)
{
  if (result != a2)
  {
    while (*result)
    {
      if (++result == a2)
      {
        __n128 result = a2;
        break;
      }
    }
  }
  if (result != a2)
  {
    for (uint64_t i = result + 1; i != a2; ++i)
    {
      if (*i) {
        *result++ = *i;
      }
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>,llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::LookupBucketFor<llvm::BasicBlock const*>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 72 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    unint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        unint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 72 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *std::remove[abi:nn180100]<llvm::BasicBlock **,llvm::BasicBlock *>(void *result, void *a2, void *a3)
{
  if (result != a2)
  {
    while (*result != *a3)
    {
      if (++result == a2)
      {
        uint64_t result = a2;
        break;
      }
    }
  }
  if (result != a2)
  {
    for (uint64_t i = result + 1; i != a2; ++i)
    {
      if (*i != *a3) {
        *result++ = *i;
      }
    }
  }
  return result;
}

uint64_t _GLOBAL__sub_I_MemorySSA_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)qword_26B41A810, 0, 0);
  qword_26B41A898 = 0;
  unk_26B41A8A0 = 0;
  qword_26B41A890 = 0;
  qword_26B41A8B8 = 0;
  unk_26B41A8C0 = 0;
  byte_26B41A8C8 = 0;
  qword_26B41A8B0 = 0;
  qword_26B41A8A8 = (uint64_t)&unk_270DBC638;
  qword_26B41A810[0] = (uint64_t)&unk_270DBC8A8;
  qword_26B41A8D0 = (uint64_t)&unk_270DBC7A8;
  qword_26B41A8D8 = (uint64_t)&unk_270DC0128;
  qword_26B41A8F0 = (uint64_t)&qword_26B41A8D8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"dot-cfg-mssa", 0xCuLL);
  qword_26B41A840 = (uint64_t)"file name for generated dot file";
  unk_26B41A848 = 32;
  qword_26B41A830 = (uint64_t)"file name for generated dot file";
  unk_26B41A838 = 32;
  std::string::basic_string[abi:nn180100]<0>(&__str, "");
  std::string::operator=((std::string *)&qword_26B41A890, &__str);
  byte_26B41A8C8 = 1;
  std::string::operator=((std::string *)&qword_26B41A8B0, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_26B41A810);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt, qword_26B41A810, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&_MergedGlobals_22, 0, 0);
  dword_26B41A710 = 0;
  qword_26B41A718 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B41A720 = 0;
  _MergedGlobals_22 = (uint64_t)&unk_270DBC7D8;
  qword_26B41A728 = (uint64_t)&unk_270DBC6E8;
  qword_26B41A730 = (uint64_t)&unk_270DBFE18;
  qword_26B41A748 = (uint64_t)&qword_26B41A730;
  llvm::cl::Option::setArgStr((uint64_t)&_MergedGlobals_22, (uint64_t *)"memssa-check-limit", 0x12uLL);
  word_26B41A69A = word_26B41A69A & 0xFF9F | 0x20;
  dword_26B41A710 = 100;
  byte_26B41A724 = 1;
  dword_26B41A720 = 100;
  qword_26B41A6B0 = (uint64_t)"The maximum number of stores/phis MemorySSAwill consider trying to walk past (default = 100)";
  unk_26B41A6B8 = 92;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_22);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &_MergedGlobals_22, &dword_261C2B000);
  int v2 = 1;
  uint64_t v3 = &llvm::VerifyMemorySSA;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"Enable verification of MemorySSA.";
  __str.__r_.__value_.__l.__size_ = 33;
  llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [17],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_26B41A750, "verify-memoryssa", &v3, &v2, (__n128 *)&__str);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &unk_26B41A750, &dword_261C2B000);
}

void llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::~opt(llvm::cl::Option *a1)
{
  *(void *)a1 = &unk_270DC03C0;
  std::__function::__value_func<void ()(llvm::FunctionSummary::ForceSummaryHotnessType const&)>::~__value_func[abi:nn180100]((void *)a1 + 71);
  *((void *)a1 + 19) = &unk_270DC0428;
  int v2 = (void *)*((void *)a1 + 21);
  if (v2 != (void *)((char *)a1 + 184)) {
    free(v2);
  }
  llvm::cl::Option::~Option(a1);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)a1 = &unk_270DC03C0;
  std::__function::__value_func<void ()(llvm::FunctionSummary::ForceSummaryHotnessType const&)>::~__value_func[abi:nn180100]((void *)a1 + 71);
  *((void *)a1 + 19) = &unk_270DC0428;
  int v2 = (void *)*((void *)a1 + 21);
  if (v2 != (void *)((char *)a1 + 184)) {
    free(v2);
  }
  llvm::cl::Option::~Option(a1);
  JUMPOUT(0x263E500B0);
}

void *llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::~parser(void *a1)
{
  *a1 = &unk_270DC0428;
  int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a3 = a5;
  }
  if (v8) {
    a4 = a6;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    _DWORD v21[2] = "'!";
    __int16 v22 = 770;
    unsigned int v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error(v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  **(_DWORD **)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    uint64_t v17 = std::__throw_bad_function_call[abi:nn180100]();
    return llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::getValueExpectedFlagDefault(v17);
  }
}

uint64_t llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

unint64_t llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::printOptionValue(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = **((_DWORD **)result + 16);
LABEL_5:
    int v4 = &unk_270DC0478;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = **((_DWORD **)result + 16);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::setDefault(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  **(_DWORD **)(result + 128) = v1;
  return result;
}

unsigned int *llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::getExtraOptionNames(uint64_t a1, unsigned int *a2)
{
  return llvm::cl::generic_parser_base::getExtraOptionNames((unsigned int *)(a1 + 152), a2);
}

void *std::__function::__value_func<void ()(llvm::FunctionSummary::ForceSummaryHotnessType const&)>::~__value_func[abi:nn180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::~parser(void *a1)
{
  *a1 = &unk_270DC0428;
  int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::getOption(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL llvm::cl::OptionValueCopy<llvm::FunctionSummary::ForceSummaryHotnessType>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void std::allocator<llvm::AllocInfo>::destroy[abi:nn180100](uint64_t a1, void **a2)
{
  int v3 = a2 + 8;
  std::vector<llvm::MIBInfo>::__destroy_vector::operator()[abi:nn180100](&v3);
  if (*a2 != a2 + 3) {
    free(*a2);
  }
}

void std::vector<llvm::MIBInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    std::vector<llvm::MIBInfo>::__clear[abi:nn180100]((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<llvm::MIBInfo>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 72)
  {
    int v4 = *(void **)(i - 64);
    if ((void *)(i - 48) != v4) {
      free(v4);
    }
  }
  a1[1] = v2;
}

void std::allocator<llvm::CallsiteInfo>::destroy[abi:nn180100](uint64_t a1, void *a2)
{
  int v3 = (void *)a2[9];
  if (v3 != a2 + 11) {
    free(v3);
  }
  int v4 = (void *)a2[1];
  if (v4 != a2 + 3)
  {
    free(v4);
  }
}

void std::allocator<llvm::FunctionSummary::ParamAccess>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  int v5 = (void **)(a2 + 40);
  std::vector<llvm::FunctionSummary::ParamAccess::Call>::__destroy_vector::operator()[abi:nn180100](&v5);
  if (*(_DWORD *)(a2 + 32) >= 0x41u)
  {
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3) {
      MEMORY[0x263E50080](v3, 0x1000C8000313F17);
    }
  }
  if (*(_DWORD *)(a2 + 16) >= 0x41u)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4) {
      MEMORY[0x263E50080](v4, 0x1000C8000313F17);
    }
  }
}

void std::vector<llvm::FunctionSummary::ParamAccess::Call>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<llvm::FunctionSummary::ParamAccess::Call>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<llvm::FunctionSummary::ParamAccess::Call>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 0x41u)
  {
    uint64_t v3 = *(void *)(a2 + 32);
    if (v3) {
      MEMORY[0x263E50080](v3, 0x1000C8000313F17);
    }
  }
  if (*(_DWORD *)(a2 + 24) >= 0x41u && *(void *)(a2 + 16))
  {
    JUMPOUT(0x263E50080);
  }
}

void std::vector<llvm::FunctionSummary::ParamAccess>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<llvm::FunctionSummary::ParamAccess>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t llvm::FunctionSummary::FunctionSummary(uint64_t result, int a2, int a3, int a4, uint64_t a5, long long *a6, uint64_t a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  uint64_t v15 = *((void *)a6 + 2);
  long long v16 = *a6;
  *((void *)a6 + 1) = 0;
  *((void *)a6 + 2) = 0;
  *(void *)a6 = 0;
  *(_DWORD *)(result + 8) = 1;
  *(_DWORD *)(result + 12) = a2;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(_OWORD *)(result + 40) = v16;
  *(void *)(result + 56) = v15;
  *(void *)uint64_t result = &unk_270DC04B8;
  *(_DWORD *)(result + 64) = a3;
  *(_DWORD *)(result + 68) = a4;
  *(void *)(result + 72) = a5;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(_OWORD *)(result + 80) = *(_OWORD *)a7;
  *(void *)(result + 96) = *(void *)(a7 + 16);
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  *(_OWORD *)(result + 104) = 0u;
  *(_OWORD *)(result + 120) = 0u;
  if (*a8 != a8[1] || *a9 != a9[1] || *a10 != a10[1] || *a11 != a11[1] || *a12 != a12[1])
  {
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
    a9[1] = 0;
    a9[2] = 0;
    *a9 = 0;
    a10[1] = 0;
    a10[2] = 0;
    *a10 = 0;
    a11[1] = 0;
    a11[2] = 0;
    *a11 = 0;
    a12[1] = 0;
    a12[2] = 0;
    *a12 = 0;
    operator new();
  }
  if (*a13 != a13[1]) {
    operator new();
  }
  if (*a14 != a14[1]) {
    operator new();
  }
  if (*a15 != a15[1]) {
    operator new();
  }
  return result;
}

void llvm::FunctionSummary::~FunctionSummary(void ***this)
{
  *this = (void **)&unk_270DC04B8;
  uint64_t v2 = this + 14;
  std::unique_ptr<std::vector<llvm::AllocInfo>>::reset[abi:nn180100](this + 16, 0);
  std::unique_ptr<std::vector<llvm::CallsiteInfo>>::reset[abi:nn180100](this + 15, 0);
  std::unique_ptr<std::vector<llvm::FunctionSummary::ParamAccess>>::reset[abi:nn180100](v2, 0);
  uint64_t v3 = (uint64_t)this[13];
  this[13] = 0;
  if (v3) {
    std::default_delete<llvm::FunctionSummary::TypeIdInfo>::operator()[abi:nn180100]((uint64_t)(this + 13), v3);
  }
  uint64_t v4 = this[10];
  if (v4)
  {
    this[11] = v4;
    operator delete(v4);
  }
  *this = (void **)&unk_270DC04D8;
  int v5 = this[5];
  if (v5)
  {
    this[6] = v5;
    operator delete(v5);
  }
}

{
  void ***v2;
  uint64_t v3;
  void **v4;
  void **v5;
  uint64_t vars8;

  *this = (void **)&unk_270DC04B8;
  uint64_t v2 = this + 14;
  std::unique_ptr<std::vector<llvm::AllocInfo>>::reset[abi:nn180100](this + 16, 0);
  std::unique_ptr<std::vector<llvm::CallsiteInfo>>::reset[abi:nn180100](this + 15, 0);
  std::unique_ptr<std::vector<llvm::FunctionSummary::ParamAccess>>::reset[abi:nn180100](v2, 0);
  uint64_t v3 = (uint64_t)this[13];
  this[13] = 0;
  if (v3) {
    std::default_delete<llvm::FunctionSummary::TypeIdInfo>::operator()[abi:nn180100]((uint64_t)(this + 13), v3);
  }
  uint64_t v4 = this[10];
  if (v4)
  {
    this[11] = v4;
    operator delete(v4);
  }
  *this = (void **)&unk_270DC04D8;
  int v5 = this[5];
  if (v5)
  {
    this[6] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x263E500B0);
}

void llvm::GlobalValueSummary::~GlobalValueSummary(llvm::GlobalValueSummary *this)
{
  *(void *)this = &unk_270DC04D8;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_270DC04D8;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x263E500B0);
}

void std::default_delete<llvm::FunctionSummary::TypeIdInfo>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    char v6 = (void **)(a2 + 96);
    std::vector<llvm::FunctionSummary::ConstVCall>::__destroy_vector::operator()[abi:nn180100](&v6);
    char v6 = (void **)(a2 + 72);
    std::vector<llvm::FunctionSummary::ConstVCall>::__destroy_vector::operator()[abi:nn180100](&v6);
    uint64_t v3 = *(void **)(a2 + 48);
    if (v3)
    {
      *(void *)(a2 + 56) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(a2 + 24);
    if (v4)
    {
      *(void *)(a2 + 32) = v4;
      operator delete(v4);
    }
    int v5 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x263E500B0](a2, 0x30C4045335465);
  }
}

void ***std::unique_ptr<std::vector<llvm::FunctionSummary::ParamAccess>>::reset[abi:nn180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  unsigned char *result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<llvm::FunctionSummary::ParamAccess>::__destroy_vector::operator()[abi:nn180100](&v3);
    return (void ***)MEMORY[0x263E500B0](v2, 0x20C40960023A9);
  }
  return result;
}

void ***std::unique_ptr<std::vector<llvm::CallsiteInfo>>::reset[abi:nn180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  unsigned char *result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<llvm::CallsiteInfo>::__destroy_vector::operator()[abi:nn180100](&v3);
    return (void ***)MEMORY[0x263E500B0](v2, 0x20C40960023A9);
  }
  return result;
}

void ***std::unique_ptr<std::vector<llvm::AllocInfo>>::reset[abi:nn180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  unsigned char *result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<llvm::AllocInfo>::__destroy_vector::operator()[abi:nn180100](&v3);
    return (void ***)MEMORY[0x263E500B0](v2, 0x20C40960023A9);
  }
  return result;
}

void std::vector<llvm::FunctionSummary::ConstVCall>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<llvm::FunctionSummary::ConstVCall>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<llvm::FunctionSummary::ConstVCall>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::vector<llvm::AllocInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 11;
        std::allocator<llvm::AllocInfo>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<llvm::CallsiteInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 17;
        std::allocator<llvm::CallsiteInfo>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::{lambda(llvm::FunctionSummary::ForceSummaryHotnessType const&)#1},std::allocator<llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::{lambda(llvm::FunctionSummary::ForceSummaryHotnessType const&)#1}>,void ()(llvm::FunctionSummary::ForceSummaryHotnessType const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::{lambda(llvm::FunctionSummary::ForceSummaryHotnessType const&)#1},std::allocator<llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::{lambda(llvm::FunctionSummary::ForceSummaryHotnessType const&)#1}>,void ()(llvm::FunctionSummary::ForceSummaryHotnessType const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_270DC04F8;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::{lambda(llvm::FunctionSummary::ForceSummaryHotnessType const&)#1},std::allocator<llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::{lambda(llvm::FunctionSummary::ForceSummaryHotnessType const&)#1}>,void ()(llvm::FunctionSummary::ForceSummaryHotnessType const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC04F8;
}

void llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::OptionInfo,false>::grow(unint64_t a1)
{
  uint64_t v9 = 0;
  int v1 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_26B41AA88, &unk_26B41AA98, a1, 48, &v9);
  uint64_t v2 = (_OWORD *)qword_26B41AA88;
  if (qword_26B41AA90)
  {
    uint64_t v3 = qword_26B41AA88 + 48 * qword_26B41AA90;
    uint64_t v4 = v1 + 32;
    int v5 = v1;
    do
    {
      long long v6 = v2[1];
      *(_OWORD *)int v5 = *v2;
      *((_OWORD *)v5 + 1) = v6;
      *((void *)v5 + 4) = &unk_270DC0498;
      int v7 = *((_DWORD *)v2 + 10);
      v5[44] = *((unsigned char *)v2 + 44);
      *((_DWORD *)v5 + 10) = v7;
      *((void *)v5 + 4) = &unk_270DC0478;
      v4 += 48;
      v2 += 3;
      v5 += 48;
    }
    while (v2 != (_OWORD *)v3);
    uint64_t v2 = (_OWORD *)qword_26B41AA88;
  }
  int v8 = v9;
  if (v2 != (_OWORD *)&unk_26B41AA98) {
    free(v2);
  }
  qword_26B41AA88 = (uint64_t)v1;
  HIDWORD(qword_26B41AA90) = v8;
}

uint64_t _GLOBAL__sub_I_ModuleSummaryAnalysis_cpp()
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  __src = "none";
  uint64_t v21 = 4;
  LODWORD(v22) = 0;
  *((void *)&v22 + 1) = "None.";
  uint64_t v23 = 5;
  uint64_t v24 = "all-non-critical";
  uint64_t v25 = 16;
  int v26 = 1;
  uint64_t v27 = "All non-critical edges.";
  uint64_t v28 = 23;
  int v29 = "all";
  uint64_t v30 = 3;
  int v31 = 2;
  uint64_t v32 = "All edges.";
  uint64_t v33 = 10;
  uint64_t v17 = v19;
  uint64_t v18 = 0x400000000;
  llvm::SmallVectorImpl<llvm::cl::OptionEnumValue>::append<llvm::cl::OptionEnumValue const*,void>((unsigned int *)&v17, &__src, &v34);
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&qword_26B41A9E0, 0, 0);
  byte_26B41AA74 = 0;
  qword_26B41AA60 = 0;
  unk_26B41AA68 = &unk_270DC0478;
  qword_26B41A9E0 = (uint64_t)&unk_270DC03C0;
  qword_26B41AA78 = (uint64_t)&unk_270DC0428;
  qword_26B41AA80 = (uint64_t)&qword_26B41A9E0;
  qword_26B41AA88 = (uint64_t)&unk_26B41AA98;
  qword_26B41AA90 = 0x800000000;
  qword_26B41AC18 = (uint64_t)&unk_270DC04F8;
  qword_26B41AC30 = (uint64_t)&qword_26B41AC18;
  int v1 = (llvm *)llvm::cl::Option::setArgStr(v0, (uint64_t *)"force-summary-edges-cold", 0x18uLL);
  word_26B41A9EA = word_26B41A9EA & 0xFF9F | 0x20;
  if (qword_26B41AA60)
  {
    __src = "cl::location(x) specified more than once!";
    LOWORD(v23) = 259;
    uint64_t v2 = (llvm::raw_ostream *)llvm::errs(v1);
    llvm::cl::Option::error((uint64_t)&qword_26B41A9E0, (llvm::Twine *)&__src, 0, 0, v2);
  }
  else
  {
    qword_26B41AA60 = (uint64_t)&llvm::ForceSummaryEdgesCold;
    byte_26B41AA74 = 1;
    dword_26B41AA70 = llvm::ForceSummaryEdgesCold;
  }
  qword_26B41AA00 = (uint64_t)"Force all edges in the function summary to cold";
  unk_26B41AA08 = 47;
  if (v18)
  {
    uint64_t v3 = (char *)v17;
    uint64_t v4 = (char *)v17 + 40 * v18;
    do
    {
      int v5 = *(uint64_t **)v3;
      unint64_t v6 = *((void *)v3 + 1);
      int v7 = *((_DWORD *)v3 + 4);
      long long v8 = *(_OWORD *)(v3 + 24);
      __src = *(const char **)v3;
      uint64_t v21 = v6;
      long long v22 = v8;
      uint64_t v23 = (uint64_t)&unk_270DC0478;
      BYTE4(v24) = 1;
      LODWORD(v24) = v7;
      uint64_t v9 = qword_26B41AA88;
      if (qword_26B41AA90 >= HIDWORD(qword_26B41AA90))
      {
        unint64_t v14 = qword_26B41AA90 + 1;
        if (qword_26B41AA88 <= (unint64_t)&__src
          && qword_26B41AA88 + 48 * (unint64_t)qword_26B41AA90 > (unint64_t)&__src)
        {
          long long v16 = (char *)&__src - qword_26B41AA88;
          llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::OptionInfo,false>::grow(v14);
          uint64_t v9 = qword_26B41AA88;
          p_src = (const char **)&v16[qword_26B41AA88];
          goto LABEL_8;
        }
        llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::OptionInfo,false>::grow(v14);
        uint64_t v9 = qword_26B41AA88;
      }
      p_src = &__src;
LABEL_8:
      uint64_t v11 = v9 + 48 * qword_26B41AA90;
      long long v12 = *((_OWORD *)p_src + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)p_src;
      *(_OWORD *)(v11 + 16) = v12;
      *(void *)(v11 + 32) = &unk_270DC0498;
      int v13 = *((_DWORD *)p_src + 10);
      *(unsigned char *)(v11 + 44) = *((unsigned char *)p_src + 44);
      *(_DWORD *)(v11 + 40) = v13;
      *(void *)(v11 + 32) = &unk_270DC0478;
      LODWORD(qword_26B41AA90) = qword_26B41AA90 + 1;
      llvm::cl::AddLiteralOption(qword_26B41AA80, v5, v6);
      v3 += 40;
    }
    while (v3 != v4);
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41A9E0);
  if (v17 != v19) {
    free(v17);
  }
  __cxa_atexit((void (*)(void *))llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::~opt, &qword_26B41A9E0, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&_MergedGlobals_23, 0, 0);
  qword_26B41A978 = 0;
  unk_26B41A980 = 0;
  qword_26B41A9A0 = 0;
  unk_26B41A9A8 = 0;
  qword_26B41A998 = 0;
  byte_26B41A9B0 = 0;
  qword_26B41A988 = 0;
  unk_26B41A990 = &unk_270DBC638;
  _MergedGlobals_23 = (uint64_t)&unk_270DBC8A8;
  qword_26B41A9B8 = (uint64_t)&unk_270DBC7A8;
  qword_26B41A9C0 = (uint64_t)&unk_270DC0128;
  qword_26B41A9D8 = (uint64_t)&qword_26B41A9C0;
  llvm::cl::Option::setArgStr((uint64_t)&_MergedGlobals_23, (uint64_t *)"module-summary-dot-file", 0x17uLL);
  word_26B41A902 = word_26B41A902 & 0xFF9F | 0x20;
  qword_26B41A928 = (uint64_t)"filename";
  unk_26B41A930 = 8;
  qword_26B41A918 = (uint64_t)"File to emit dot graph of new summary into";
  unk_26B41A920 = 42;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_23);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt, &_MergedGlobals_23, &dword_261C2B000);
}

uint64_t _GLOBAL__sub_I_PHITransAddr_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&EnableAddPhiTranslation, 0, 0);
  byte_26B41E450 = 0;
  qword_26B41E458 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41E460 = 0;
  EnableAddPhiTranslation = (uint64_t)&unk_270DBC910;
  qword_26B41E468 = (uint64_t)&unk_270DBC658;
  qword_26B41E470 = (uint64_t)&unk_270DBC998;
  qword_26B41E488 = (uint64_t)&qword_26B41E470;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"gvn-add-phi-translation", 0x17uLL);
  byte_26B41E450 = 0;
  word_26B41E460 = 256;
  word_26B41E3DA = word_26B41E3DA & 0xFF9F | 0x20;
  qword_26B41E3F0 = (uint64_t)"Enable phi-translation of add instructions";
  unk_26B41E3F8 = 42;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&EnableAddPhiTranslation);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &EnableAddPhiTranslation, &dword_261C2B000);
}

_DWORD *llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::init(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      do
      {
        *(void *)uint64_t result = -4096;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::clear(unsigned int *a1)
{
  unsigned int v2 = a1[2];
  if (!v2 && !a1[3]) {
    return;
  }
  uint64_t v3 = a1[4];
  if (v3 <= 4 * v2 || v3 < 0x41)
  {
    if (!v3)
    {
LABEL_16:
      *((void *)a1 + 1) = 0;
      return;
    }
    uint64_t v4 = 16 * v3;
    uint64_t v5 = (uint64_t *)(*(void *)a1 + 8);
    while (1)
    {
      uint64_t v6 = *(v5 - 1);
      if (v6 == -8192) {
        goto LABEL_14;
      }
      if (v6 != -4096) {
        break;
      }
LABEL_15:
      v5 += 2;
      v4 -= 16;
      if (!v4) {
        goto LABEL_16;
      }
    }
    uint64_t v7 = *v5;
    *uint64_t v5 = 0;
    if (v7) {
      std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>::operator()[abi:nn180100]((uint64_t)v5, v7);
    }
LABEL_14:
    *(v5 - 1) = -4096;
    goto LABEL_15;
  }
  llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::shrink_and_clear(a1);
}

void llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::shrink_and_clear(unsigned int *a1)
{
  unsigned int v2 = a1[2];
  llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::destroyAll(a1);
  if (v2)
  {
    int v3 = 1 << (33 - __clz(v2 - 1));
    if (v3 <= 64) {
      unsigned int v4 = 64;
    }
    else {
      unsigned int v4 = v3;
    }
    if (v4 == a1[4])
    {
      *((void *)a1 + 1) = 0;
      uint64_t v5 = 16 * v4;
      uint64_t v6 = *(void **)a1;
      do
      {
        *uint64_t v6 = -4096;
        v6 += 2;
        v5 -= 16;
      }
      while (v5);
      return;
    }
  }
  else
  {
    if (!a1[4])
    {
      *((void *)a1 + 1) = 0;
      return;
    }
    unsigned int v4 = 0;
  }
  MEMORY[0x263E500A0](*(void *)a1, 8);
  llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::init(a1, v4);
}

uint64_t _GLOBAL__sub_I_ProfileSummaryInfo_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_24, 0, 0);
  byte_26B41ACB8 = 0;
  qword_26B41ACC0 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41ACC8 = 0;
  _MergedGlobals_24 = (uint64_t)&unk_270DBC910;
  qword_26B41ACD0 = (uint64_t)&unk_270DBC658;
  qword_26B41ACD8 = (uint64_t)&unk_270DBC998;
  qword_26B41ACF0 = (uint64_t)&qword_26B41ACD8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"partial-profile", 0xFuLL);
  word_26B41AC42 = word_26B41AC42 & 0xFF9F | 0x20;
  byte_26B41ACB8 = 0;
  word_26B41ACC8 = 256;
  qword_26B41AC58 = (uint64_t)"Specify the current profile is used as a partial profile.";
  unk_26B41AC60 = 57;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_24);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_24, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B41ACF8, 0, 0);
  byte_26B41AD78 = 0;
  qword_26B41AD80 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41AD88 = 0;
  qword_26B41ACF8 = (uint64_t)&unk_270DBC910;
  qword_26B41AD90 = (uint64_t)&unk_270DBC658;
  qword_26B41AD98 = (uint64_t)&unk_270DBC998;
  qword_26B41ADB0 = (uint64_t)&qword_26B41AD98;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41ACF8, (uint64_t *)"scale-partial-sample-profile-working-set-size", 0x2DuLL);
  word_26B41AD02 = word_26B41AD02 & 0xFF9F | 0x20;
  byte_26B41AD78 = 1;
  word_26B41AD88 = 257;
  qword_26B41AD18 = (uint64_t)"If true, scale the working set size of the partial sample profile by the partial profile ra"
                             "tio to reflect the size of the program being compiled.";
  unk_26B41AD20 = 145;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41ACF8);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B41ACF8, &dword_261C2B000);
  uint64_t v1 = llvm::cl::Option::Option((uint64_t)&qword_26B41ADB8, 0, 0);
  xmmword_26B41AE38 = 0u;
  *(_OWORD *)&qword_26B41AE48 = 0u;
  *((void *)&xmmword_26B41AE38 + 1) = &unk_270DC01D8;
  qword_26B41ADB8 = (uint64_t)&unk_270DC0170;
  qword_26B41AE58 = (uint64_t)&unk_270DBC748;
  qword_26B41AE60 = (uint64_t)&unk_270DC01F8;
  qword_26B41AE78 = (uint64_t)&qword_26B41AE60;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"partial-sample-profile-working-set-size-scale-factor", 0x34uLL);
  word_26B41ADC2 = word_26B41ADC2 & 0xFF9F | 0x20;
  *(void *)&xmmword_26B41AE38 = 0x3F80624DD2F1A9FCLL;
  byte_26B41AE50 = 1;
  qword_26B41AE48 = 0x3F80624DD2F1A9FCLL;
  qword_26B41ADD8 = (uint64_t)"The scale factor used to scale the working set size of the partial sample profile along wit"
                             "h the partial profile ratio. This includes the factor of the profile counter per block and "
                             "the factor to scale the working set size to use the same shared thresholds as PGO.";
  unk_26B41ADE0 = 264;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41ADB8);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<double,false,llvm::cl::parser<double>>::~opt, &qword_26B41ADB8, &dword_261C2B000);
}

BOOL llvm::APInt::isPowerOf2(int8x8_t **this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  if (v1 > 0x40)
  {
    int v3 = 0;
    unint64_t v4 = (unint64_t)(v1 + 63) >> 6;
    uint64_t v5 = *this;
    do
    {
      int8x8_t v6 = *v5++;
      uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
      v7.i16[0] = vaddlv_u8(v7);
      v3 += v7.i32[0];
      --v4;
    }
    while (v4);
    return v3 == 1;
  }
  else
  {
    return *this && ((unint64_t)*this & ((unint64_t)&(*this)[-1] + 7)) == 0;
  }
}

uint64_t llvm::ConstantRange::ConstantRange(uint64_t this, const llvm::ConstantRange *a2)
{
  unsigned int v2 = *((_DWORD *)a2 + 2);
  *(_DWORD *)(this + 8) = v2;
  if (v2 > 0x40) {
    operator new[]();
  }
  *(void *)this = *(void *)a2;
  unsigned int v3 = *((_DWORD *)a2 + 6);
  *(_DWORD *)(this + 24) = v3;
  if (v3 > 0x40) {
    operator new[]();
  }
  *(void *)(this + 16) = *((void *)a2 + 2);
  return this;
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [32],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>(uint64_t a1, char *a2, _WORD *a3, _OWORD *a4, int **a5)
{
  uint64_t v10 = llvm::cl::Option::Option(a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(void *)(v10 + 136) = &unk_270DBCA00;
  *(void *)(v10 + 144) = 0;
  *(void *)uint64_t v10 = &unk_270DBC7D8;
  *(void *)(v10 + 152) = &unk_270DBC6E8;
  *(void *)(v10 + 160) = &unk_270DBFE18;
  *(void *)(v10 + 184) = v10 + 160;
  size_t v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)a2, v11);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a4;
  int v12 = **a5;
  *(_DWORD *)(a1 + 128) = v12;
  *(unsigned char *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v12;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t _GLOBAL__sub_I_ScalarEvolution_cpp()
{
  int v14 = 2;
  v13.n128_u64[0] = (unint64_t)"Maximum number of iterations SCEV will symbolically execute a constant derived loop";
  v13.n128_u64[1] = 83;
  int v11 = 100;
  int v12 = &v11;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [32],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((uint64_t)&_MergedGlobals_25[8], "scalar-evolution-max-iterations", &v14, &v13, &v12);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &_MergedGlobals_25[8], &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B41AF48, 0, 0);
  byte_26B41AFD9 = 0;
  qword_26B41AFC8 = 0;
  unk_26B41AFD0 = &unk_270DBC978;
  qword_26B41AF48 = (uint64_t)&unk_270DBD0D8;
  qword_26B41AFE0 = (uint64_t)&unk_270DBC658;
  qword_26B41AFE8 = (uint64_t)&unk_270DBD140;
  qword_26B41B000 = (uint64_t)&qword_26B41AFE8;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41AF48, (uint64_t *)"verify-scev", 0xBuLL);
  word_26B41AF52 = word_26B41AF52 & 0xFF9F | 0x20;
  llvm::cl::opt_storage<BOOL,true,false>::setLocation((llvm *)&qword_26B41AFC8, (uint64_t)&qword_26B41AF48, _MergedGlobals_25);
  qword_26B41AF68 = (uint64_t)"Verify ScalarEvolution's backedge taken counts (slow)";
  unk_26B41AF70 = 53;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41AF48);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &qword_26B41AF48, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B41B008, 0, 0);
  byte_26B41B088 = 0;
  qword_26B41B098 = 0;
  qword_26B41B090 = (uint64_t)&unk_270DBC978;
  qword_26B41B008 = (uint64_t)&unk_270DBC910;
  qword_26B41B0A0 = (uint64_t)&unk_270DBC658;
  qword_26B41B0A8 = (uint64_t)&unk_270DBC998;
  qword_26B41B0C0 = (uint64_t)&qword_26B41B0A8;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41B008, (uint64_t *)"verify-scev-strict", 0x12uLL);
  word_26B41B012 = word_26B41B012 & 0xFF9F | 0x20;
  qword_26B41B028 = (uint64_t)"Enable stricter verification with -verify-scev is passed";
  unk_26B41B030 = 56;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41B008);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B41B008, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B41B0C8, 0, 0);
  byte_26B41B148 = 0;
  qword_26B41B158 = 0;
  qword_26B41B150 = (uint64_t)&unk_270DBC978;
  qword_26B41B0C8 = (uint64_t)&unk_270DBC910;
  qword_26B41B160 = (uint64_t)&unk_270DBC658;
  qword_26B41B168 = (uint64_t)&unk_270DBC998;
  qword_26B41B180 = (uint64_t)&qword_26B41B168;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41B0C8, (uint64_t *)"verify-scev-maps", 0x10uLL);
  word_26B41B0D2 = word_26B41B0D2 & 0xFF9F | 0x20;
  qword_26B41B0E8 = (uint64_t)"Verify no dangling value in ScalarEvolution's ExprValueMap (slow)";
  qword_26B41B0F0 = 65;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41B0C8);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B41B0C8, &dword_261C2B000);
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&qword_26B41B188, 0, 0);
  byte_26B41B208 = 0;
  qword_26B41B218 = 0;
  qword_26B41B210 = (uint64_t)&unk_270DBC978;
  qword_26B41B188 = (uint64_t)&unk_270DBC910;
  qword_26B41B220 = (uint64_t)&unk_270DBC658;
  qword_26B41B228 = (uint64_t)&unk_270DBC998;
  qword_26B41B240 = (uint64_t)&qword_26B41B228;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"scev-verify-ir", 0xEuLL);
  word_26B41B192 = word_26B41B192 & 0xFF9F | 0x20;
  qword_26B41B1A8 = (uint64_t)"Verify IR correctness when making sensitive SCEV queries (slow)";
  qword_26B41B1B0 = 63;
  byte_26B41B208 = 0;
  LOWORD(qword_26B41B218) = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41B188);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B41B188, &dword_261C2B000);
  int v14 = 1;
  v13.n128_u64[0] = (unint64_t)"Threshold for inlining multiplication operands into a SCEV";
  v13.n128_u64[1] = 58;
  int v11 = 32;
  int v12 = &v11;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((llvm::cl::Option *)&unk_26B41B248, "scev-mulops-inline-threshold", &v14, &v13, &v12);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_26B41B248, &dword_261C2B000);
  int v14 = 1;
  v13.n128_u64[0] = (unint64_t)"Threshold for inlining addition operands into a SCEV";
  v13.n128_u64[1] = 52;
  int v11 = 500;
  int v12 = &v11;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((llvm::cl::Option *)&unk_26B41B308, "scev-addops-inline-threshold", &v14, &v13, &v12);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_26B41B308, &dword_261C2B000);
  int v14 = 1;
  v13.n128_u64[0] = (unint64_t)"Maximum depth of recursive SCEV complexity comparisons";
  v13.n128_u64[1] = 54;
  int v11 = 32;
  int v12 = &v11;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [32],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((uint64_t)&unk_26B41B3C8, "scalar-evolution-max-scev-compare-depth", &v14, &v13, &v12);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_26B41B3C8, &dword_261C2B000);
  uint64_t v1 = llvm::cl::Option::Option((uint64_t)&qword_26B41B488, 0, 0);
  dword_26B41B508 = 0;
  qword_26B41B518 = 0;
  qword_26B41B510 = (uint64_t)&unk_270DBCA00;
  qword_26B41B488 = (uint64_t)&unk_270DBC7D8;
  qword_26B41B520 = (uint64_t)&unk_270DBC6E8;
  qword_26B41B528 = (uint64_t)&unk_270DBFE18;
  qword_26B41B540 = (uint64_t)&qword_26B41B528;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"scalar-evolution-max-scev-operations-implication-depth", 0x36uLL);
  word_26B41B492 = word_26B41B492 & 0xFF9F | 0x20;
  qword_26B41B4A8 = (uint64_t)"Maximum depth of recursive SCEV operations implication analysis";
  qword_26B41B4B0 = 63;
  dword_26B41B508 = 2;
  BYTE4(qword_26B41B518) = 1;
  LODWORD(qword_26B41B518) = 2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41B488);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B41B488, &dword_261C2B000);
  int v14 = 1;
  v13.n128_u64[0] = (unint64_t)"Maximum depth of recursive value complexity comparisons";
  v13.n128_u64[1] = 55;
  int v11 = 2;
  int v12 = &v11;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((llvm::cl::Option *)&unk_26B41B548, "scalar-evolution-max-value-compare-depth", &v14, &v13, &v12);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_26B41B548, &dword_261C2B000);
  uint64_t v2 = llvm::cl::Option::Option((uint64_t)&qword_26B41B608, 0, 0);
  dword_26B41B688 = 0;
  qword_26B41B698 = 0;
  qword_26B41B690 = (uint64_t)&unk_270DBCA00;
  qword_26B41B608 = (uint64_t)&unk_270DBC7D8;
  qword_26B41B6A0 = (uint64_t)&unk_270DBC6E8;
  qword_26B41B6A8 = (uint64_t)&unk_270DBFE18;
  qword_26B41B6C0 = (uint64_t)&qword_26B41B6A8;
  llvm::cl::Option::setArgStr(v2, (uint64_t *)"scalar-evolution-max-arith-depth", 0x20uLL);
  word_26B41B612 = word_26B41B612 & 0xFF9F | 0x20;
  qword_26B41B628 = (uint64_t)"Maximum depth of recursive arithmetics";
  qword_26B41B630 = 38;
  dword_26B41B688 = 32;
  BYTE4(qword_26B41B698) = 1;
  LODWORD(qword_26B41B698) = 32;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41B608);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B41B608, &dword_261C2B000);
  uint64_t v3 = llvm::cl::Option::Option((uint64_t)&qword_26B41B6C8, 0, 0);
  dword_26B41B748 = 0;
  qword_26B41B758 = 0;
  qword_26B41B750 = (uint64_t)&unk_270DBCA00;
  qword_26B41B6C8 = (uint64_t)&unk_270DBC7D8;
  qword_26B41B760 = (uint64_t)&unk_270DBC6E8;
  qword_26B41B768 = (uint64_t)&unk_270DBFE18;
  qword_26B41B780 = (uint64_t)&qword_26B41B768;
  llvm::cl::Option::setArgStr(v3, (uint64_t *)"scalar-evolution-max-constant-evolving-depth", 0x2CuLL);
  word_26B41B6D2 = word_26B41B6D2 & 0xFF9F | 0x20;
  qword_26B41B6E8 = (uint64_t)"Maximum depth of recursive constant evolving";
  qword_26B41B6F0 = 44;
  dword_26B41B748 = 32;
  BYTE4(qword_26B41B758) = 1;
  LODWORD(qword_26B41B758) = 32;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41B6C8);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B41B6C8, &dword_261C2B000);
  int v14 = 1;
  v13.n128_u64[0] = (unint64_t)"Maximum depth of recursive SExt/ZExt/Trunc";
  v13.n128_u64[1] = 42;
  int v11 = 8;
  int v12 = &v11;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [32],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((uint64_t)&unk_26B41B788, "scalar-evolution-max-cast-depth", &v14, &v13, &v12);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_26B41B788, &dword_261C2B000);
  uint64_t v4 = llvm::cl::Option::Option((uint64_t)&qword_26B41B848, 0, 0);
  dword_26B41B8C8 = 0;
  qword_26B41B8D8 = 0;
  qword_26B41B8D0 = (uint64_t)&unk_270DBCA00;
  qword_26B41B848 = (uint64_t)&unk_270DBC7D8;
  qword_26B41B8E0 = (uint64_t)&unk_270DBC6E8;
  qword_26B41B8E8 = (uint64_t)&unk_270DBFE18;
  qword_26B41B900 = (uint64_t)&qword_26B41B8E8;
  llvm::cl::Option::setArgStr(v4, (uint64_t *)"scalar-evolution-max-add-rec-size", 0x21uLL);
  word_26B41B852 = word_26B41B852 & 0xFF9F | 0x20;
  qword_26B41B868 = (uint64_t)"Max coefficients in AddRec during evolving";
  qword_26B41B870 = 42;
  dword_26B41B8C8 = 8;
  BYTE4(qword_26B41B8D8) = 1;
  LODWORD(qword_26B41B8D8) = 8;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41B848);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B41B848, &dword_261C2B000);
  int v14 = 1;
  v13.n128_u64[0] = (unint64_t)"Size of the expression which is considered huge";
  v13.n128_u64[1] = 47;
  int v11 = 4096;
  int v12 = &v11;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((llvm::cl::Option *)&unk_26B41B908, "scalar-evolution-huge-expr-threshold", &v14, &v13, &v12);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_26B41B908, &dword_261C2B000);
  uint64_t v5 = llvm::cl::Option::Option((uint64_t)&qword_26B41B9C8, 0, 0);
  dword_26B41BA48 = 0;
  qword_26B41BA58 = 0;
  qword_26B41BA50 = (uint64_t)&unk_270DBCA00;
  qword_26B41B9C8 = (uint64_t)&unk_270DBC7D8;
  qword_26B41BA60 = (uint64_t)&unk_270DBC6E8;
  qword_26B41BA68 = (uint64_t)&unk_270DBFE18;
  qword_26B41BA80 = (uint64_t)&qword_26B41BA68;
  llvm::cl::Option::setArgStr(v5, (uint64_t *)"scev-range-iter-threshold", 0x19uLL);
  word_26B41B9D2 = word_26B41B9D2 & 0xFF9F | 0x20;
  qword_26B41B9E8 = (uint64_t)"Threshold for switching to iteratively computing SCEV ranges";
  qword_26B41B9F0 = 60;
  dword_26B41BA48 = 32;
  BYTE4(qword_26B41BA58) = 1;
  LODWORD(qword_26B41BA58) = 32;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41B9C8);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B41B9C8, &dword_261C2B000);
  uint64_t v6 = llvm::cl::Option::Option((uint64_t)&qword_26B41BA88, 0, 0);
  byte_26B41BB08 = 0;
  qword_26B41BB18 = 0;
  qword_26B41BB10 = (uint64_t)&unk_270DBC978;
  qword_26B41BA88 = (uint64_t)&unk_270DBC910;
  qword_26B41BB20 = (uint64_t)&unk_270DBC658;
  qword_26B41BB28 = (uint64_t)&unk_270DBC998;
  qword_26B41BB40 = (uint64_t)&qword_26B41BB28;
  llvm::cl::Option::setArgStr(v6, (uint64_t *)"scalar-evolution-classify-expressions", 0x25uLL);
  word_26B41BA92 = word_26B41BA92 & 0xFF9F | 0x20;
  byte_26B41BB08 = 1;
  LOWORD(qword_26B41BB18) = 257;
  qword_26B41BAA8 = (uint64_t)"When printing analysis, include information on every instruction";
  qword_26B41BAB0 = 64;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41BA88);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B41BA88, &dword_261C2B000);
  uint64_t v7 = llvm::cl::Option::Option((uint64_t)&qword_26B41BB48, 0, 0);
  byte_26B41BBC8 = 0;
  qword_26B41BBD8 = 0;
  qword_26B41BBD0 = (uint64_t)&unk_270DBC978;
  qword_26B41BB48 = (uint64_t)&unk_270DBC910;
  qword_26B41BBE0 = (uint64_t)&unk_270DBC658;
  qword_26B41BBE8 = (uint64_t)&unk_270DBC998;
  qword_26B41BC00 = (uint64_t)&qword_26B41BBE8;
  llvm::cl::Option::setArgStr(v7, (uint64_t *)"scalar-evolution-use-expensive-range-sharpening", 0x2FuLL);
  word_26B41BB52 = word_26B41BB52 & 0xFF9F | 0x20;
  byte_26B41BBC8 = 0;
  LOWORD(qword_26B41BBD8) = 256;
  qword_26B41BB68 = (uint64_t)"Use more powerful methods of sharpening expression ranges. May be costly in terms of compile time";
  qword_26B41BB70 = 97;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41BB48);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B41BB48, &dword_261C2B000);
  int v14 = 1;
  v13.n128_u64[0] = (unint64_t)"Maximum amount of nodes to process while searching SCEVUnknown Phi strongly connected components";
  v13.n128_u64[1] = 96;
  int v11 = 8;
  int v12 = &v11;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [32],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((uint64_t)&unk_26B41BC08, "scalar-evolution-max-scc-analysis-depth", &v14, &v13, &v12);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_26B41BC08, &dword_261C2B000);
  uint64_t v8 = llvm::cl::Option::Option((uint64_t)&qword_26B41BCC8, 0, 0);
  byte_26B41BD48 = 0;
  qword_26B41BD58 = 0;
  qword_26B41BD50 = (uint64_t)&unk_270DBC978;
  qword_26B41BCC8 = (uint64_t)&unk_270DBC910;
  qword_26B41BD60 = (uint64_t)&unk_270DBC658;
  qword_26B41BD68 = (uint64_t)&unk_270DBC998;
  qword_26B41BD80 = (uint64_t)&qword_26B41BD68;
  llvm::cl::Option::setArgStr(v8, (uint64_t *)"scalar-evolution-finite-loop", 0x1CuLL);
  word_26B41BCD2 = word_26B41BCD2 & 0xFF9F | 0x20;
  qword_26B41BCE8 = (uint64_t)"Handle <= and >= in finite loops";
  qword_26B41BCF0 = 32;
  byte_26B41BD48 = 1;
  LOWORD(qword_26B41BD58) = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41BCC8);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B41BCC8, &dword_261C2B000);
  uint64_t v9 = llvm::cl::Option::Option((uint64_t)&qword_26B41BD88, 0, 0);
  byte_26B41BE08 = 0;
  qword_26B41BE18 = 0;
  qword_26B41BE10 = (uint64_t)&unk_270DBC978;
  qword_26B41BD88 = (uint64_t)&unk_270DBC910;
  qword_26B41BE20 = (uint64_t)&unk_270DBC658;
  qword_26B41BE28 = (uint64_t)&unk_270DBC998;
  qword_26B41BE40 = (uint64_t)&qword_26B41BE28;
  llvm::cl::Option::setArgStr(v9, (uint64_t *)"scalar-evolution-use-context-for-no-wrap-flag-strenghening", 0x3AuLL);
  word_26B41BD92 = word_26B41BD92 & 0xFF9F | 0x20;
  qword_26B41BDA8 = (uint64_t)"Infer nuw/nsw flags using context where suitable";
  qword_26B41BDB0 = 48;
  byte_26B41BE08 = 1;
  LOWORD(qword_26B41BE18) = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41BD88);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B41BD88, &dword_261C2B000);
}

uint64_t _GLOBAL__sub_I_StackSafetyAnalysis_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_26, 0, 0);
  dword_26B41BEC8 = 0;
  qword_26B41BED0 = (uint64_t)&unk_270DBCA20;
  *(void *)&dword_26B41BED8 = 0;
  _MergedGlobals_26 = (uint64_t)&unk_270DBC840;
  qword_26B41BEE0 = (uint64_t)&unk_270DBC6B8;
  qword_26B41BEE8 = (uint64_t)&unk_270DBFE60;
  qword_26B41BF00 = (uint64_t)&qword_26B41BEE8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"stack-safety-max-iterations", 0x1BuLL);
  dword_26B41BEC8 = 20;
  byte_26B41BEDC = 1;
  dword_26B41BED8 = 20;
  word_26B41BE52 = word_26B41BE52 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_26);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<int,false,llvm::cl::parser<int>>::~opt, &_MergedGlobals_26, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B41BF08, 0, 0);
  byte_26B41BF88 = 0;
  qword_26B41BF90 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41BF98 = 0;
  qword_26B41BF08 = (uint64_t)&unk_270DBC910;
  qword_26B41BFA0 = (uint64_t)&unk_270DBC658;
  qword_26B41BFA8 = (uint64_t)&unk_270DBC998;
  qword_26B41BFC0 = (uint64_t)&qword_26B41BFA8;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41BF08, (uint64_t *)"stack-safety-print", 0x12uLL);
  byte_26B41BF88 = 0;
  word_26B41BF98 = 256;
  word_26B41BF12 = word_26B41BF12 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41BF08);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B41BF08, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B41BFC8, 0, 0);
  byte_26B41C048 = 0;
  qword_26B41C058 = 0;
  qword_26B41C050 = (uint64_t)&unk_270DBC978;
  qword_26B41BFC8 = (uint64_t)&unk_270DBC910;
  qword_26B41C060 = (uint64_t)&unk_270DBC658;
  qword_26B41C068 = (uint64_t)&unk_270DBC998;
  qword_26B41C080 = (uint64_t)&qword_26B41C068;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41BFC8, (uint64_t *)"stack-safety-run", 0x10uLL);
  byte_26B41C048 = 0;
  LOWORD(qword_26B41C058) = 256;
  word_26B41BFD2 = word_26B41BFD2 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41BFC8);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B41BFC8, &dword_261C2B000);
}

void llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::~opt(llvm::cl::Option *a1)
{
  *(void *)a1 = &unk_270DC0540;
  std::__function::__value_func<void ()(llvm::TargetLibraryInfoImpl::VectorLibrary const&)>::~__value_func[abi:nn180100]((void *)a1 + 71);
  *((void *)a1 + 19) = &unk_270DC05A8;
  uint64_t v2 = (void *)*((void *)a1 + 21);
  if (v2 != (void *)((char *)a1 + 184)) {
    free(v2);
  }
  llvm::cl::Option::~Option(a1);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)a1 = &unk_270DC0540;
  std::__function::__value_func<void ()(llvm::TargetLibraryInfoImpl::VectorLibrary const&)>::~__value_func[abi:nn180100]((void *)a1 + 71);
  *((void *)a1 + 19) = &unk_270DC05A8;
  uint64_t v2 = (void *)*((void *)a1 + 21);
  if (v2 != (void *)((char *)a1 + 184)) {
    free(v2);
  }
  llvm::cl::Option::~Option(a1);
  JUMPOUT(0x263E500B0);
}

void *llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::~parser(void *a1)
{
  *a1 = &unk_270DC05A8;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a3 = a5;
  }
  if (v8) {
    a4 = a6;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    _DWORD v21[2] = "'!";
    __int16 v22 = 770;
    __n128 v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error(v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    uint64_t v17 = std::__throw_bad_function_call[abi:nn180100]();
    return llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::getValueExpectedFlagDefault(v17);
  }
}

uint64_t llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

unint64_t llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::printOptionValue(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    uint64_t v4 = &unk_270DC05F8;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::setDefault(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

unsigned int *llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::getExtraOptionNames(uint64_t a1, unsigned int *a2)
{
  return llvm::cl::generic_parser_base::getExtraOptionNames((unsigned int *)(a1 + 152), a2);
}

void *std::__function::__value_func<void ()(llvm::TargetLibraryInfoImpl::VectorLibrary const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::~parser(void *a1)
{
  *a1 = &unk_270DC05A8;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::getOption(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL llvm::cl::OptionValueCopy<llvm::TargetLibraryInfoImpl::VectorLibrary>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t llvm::operator<(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  if (*a2 < *a1) {
    return 0;
  }
  unsigned int v2 = a1[1] & 0x7FFFFFFF;
  unsigned int v3 = a2[1] & 0x7FFFFFFF;
  if (v2 < v3) {
    return 1;
  }
  if (v3 < v2) {
    return 0;
  }
  unsigned int v5 = a1[2] & 0x7FFFFFFF;
  unsigned int v6 = a2[2] & 0x7FFFFFFF;
  BOOL v8 = v6 >= v5 && (a1[3] & 0x7FFFFFFFu) < (a2[3] & 0x7FFFFFFFu);
  return v5 < v6 || v8;
}

void std::__function::__func<llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::{lambda(llvm::TargetLibraryInfoImpl::VectorLibrary const&)#1},std::allocator<llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::{lambda(llvm::TargetLibraryInfoImpl::VectorLibrary const&)#1}>,void ()(llvm::TargetLibraryInfoImpl::VectorLibrary const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::{lambda(llvm::TargetLibraryInfoImpl::VectorLibrary const&)#1},std::allocator<llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::{lambda(llvm::TargetLibraryInfoImpl::VectorLibrary const&)#1}>,void ()(llvm::TargetLibraryInfoImpl::VectorLibrary const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_270DC0638;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::{lambda(llvm::TargetLibraryInfoImpl::VectorLibrary const&)#1},std::allocator<llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::{lambda(llvm::TargetLibraryInfoImpl::VectorLibrary const&)#1}>,void ()(llvm::TargetLibraryInfoImpl::VectorLibrary const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC0638;
}

void llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::OptionInfo,false>::grow(unint64_t a1)
{
  uint64_t v9 = 0;
  int v1 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_26B41DCD8, &unk_26B41DCE8, a1, 48, &v9);
  unsigned int v2 = (_OWORD *)qword_26B41DCD8;
  if (qword_26B41DCE0)
  {
    uint64_t v3 = qword_26B41DCD8 + 48 * qword_26B41DCE0;
    uint64_t v4 = v1 + 32;
    unsigned int v5 = v1;
    do
    {
      long long v6 = v2[1];
      *(_OWORD *)unsigned int v5 = *v2;
      *((_OWORD *)v5 + 1) = v6;
      *((void *)v5 + 4) = &unk_270DC0618;
      int v7 = *((_DWORD *)v2 + 10);
      v5[44] = *((unsigned char *)v2 + 44);
      *((_DWORD *)v5 + 10) = v7;
      *((void *)v5 + 4) = &unk_270DC05F8;
      v4 += 48;
      v2 += 3;
      v5 += 48;
    }
    while (v2 != (_OWORD *)v3);
    unsigned int v2 = (_OWORD *)qword_26B41DCD8;
  }
  int v8 = v9;
  if (v2 != (_OWORD *)&unk_26B41DCE8) {
    free(v2);
  }
  qword_26B41DCD8 = (uint64_t)v1;
  HIDWORD(qword_26B41DCE0) = v8;
}

uint64_t _GLOBAL__sub_I_TargetLibraryInfo_cpp()
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  __src = "none";
  uint64_t v19 = 4;
  LODWORD(v20) = 0;
  *((void *)&v20 + 1) = "No vector functions library";
  uint64_t v21 = 27;
  __int16 v22 = "Accelerate";
  uint64_t v23 = 10;
  int v24 = 1;
  uint64_t v25 = "Accelerate framework";
  uint64_t v26 = 20;
  uint64_t v27 = "Darwin_libsystem_m";
  uint64_t v28 = 18;
  int v29 = 2;
  uint64_t v30 = "Darwin libsystem_m";
  uint64_t v31 = 18;
  uint64_t v32 = "LIBMVEC-X86";
  uint64_t v33 = 11;
  int v34 = 3;
  uint64_t v35 = "GLIBC Vector Math library";
  uint64_t v36 = 25;
  int v37 = "MASSV";
  uint64_t v38 = 5;
  int v39 = 4;
  uint64_t v40 = "IBM MASS vector library";
  uint64_t v41 = 23;
  uint64_t v42 = "SVML";
  uint64_t v43 = 4;
  int v44 = 5;
  uint64_t v45 = "Intel SVML library";
  uint64_t v46 = 18;
  int v47 = "sleefgnuabi";
  uint64_t v48 = 11;
  int v49 = 6;
  v50 = "SIMD Library for Evaluating Elementary Functions";
  uint64_t v51 = 48;
  int v15 = v17;
  uint64_t v16 = 0x400000000;
  llvm::SmallVectorImpl<llvm::cl::OptionEnumValue>::append<llvm::cl::OptionEnumValue const*,void>((unsigned int *)&v15, &__src, &v52);
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&ClVectorLibrary, 0, 0);
  dword_26B41DCB0 = 0;
  qword_26B41DCB8 = (uint64_t)&unk_270DC05F8;
  *(void *)&dword_26B41DCC0 = 0;
  ClVectorLibrary = (uint64_t)&unk_270DC0540;
  qword_26B41DCC8 = (uint64_t)&unk_270DC05A8;
  qword_26B41DCD0 = (uint64_t)&ClVectorLibrary;
  qword_26B41DCD8 = (uint64_t)&unk_26B41DCE8;
  qword_26B41DCE0 = 0x800000000;
  qword_26B41DE68 = (uint64_t)&unk_270DC0638;
  qword_26B41DE80 = (uint64_t)&qword_26B41DE68;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"vector-library", 0xEuLL);
  word_26B41DC3A = word_26B41DC3A & 0xFF9F | 0x20;
  qword_26B41DC50 = (uint64_t)"Vector functions library";
  unk_26B41DC58 = 24;
  dword_26B41DCB0 = 0;
  byte_26B41DCC4 = 1;
  dword_26B41DCC0 = 0;
  if (v16)
  {
    int v1 = (char *)v15;
    unsigned int v2 = (char *)v15 + 40 * v16;
    do
    {
      uint64_t v3 = *(uint64_t **)v1;
      unint64_t v4 = *((void *)v1 + 1);
      int v5 = *((_DWORD *)v1 + 4);
      long long v6 = *(_OWORD *)(v1 + 24);
      __src = *(const char **)v1;
      uint64_t v19 = v4;
      long long v20 = v6;
      uint64_t v21 = (uint64_t)&unk_270DC05F8;
      BYTE4(v22) = 1;
      LODWORD(v22) = v5;
      uint64_t v7 = qword_26B41DCD8;
      if (qword_26B41DCE0 >= HIDWORD(qword_26B41DCE0))
      {
        unint64_t v12 = qword_26B41DCE0 + 1;
        if (qword_26B41DCD8 <= (unint64_t)&__src
          && qword_26B41DCD8 + 48 * (unint64_t)qword_26B41DCE0 > (unint64_t)&__src)
        {
          int v14 = (char *)&__src - qword_26B41DCD8;
          llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::OptionInfo,false>::grow(v12);
          uint64_t v7 = qword_26B41DCD8;
          p_src = (const char **)&v14[qword_26B41DCD8];
          goto LABEL_5;
        }
        llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::OptionInfo,false>::grow(v12);
        uint64_t v7 = qword_26B41DCD8;
      }
      p_src = &__src;
LABEL_5:
      uint64_t v9 = v7 + 48 * qword_26B41DCE0;
      long long v10 = *((_OWORD *)p_src + 1);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)p_src;
      *(_OWORD *)(v9 + 16) = v10;
      *(void *)(v9 + 32) = &unk_270DC0618;
      int v11 = *((_DWORD *)p_src + 10);
      *(unsigned char *)(v9 + 44) = *((unsigned char *)p_src + 44);
      *(_DWORD *)(v9 + 40) = v11;
      *(void *)(v9 + 32) = &unk_270DC05F8;
      LODWORD(qword_26B41DCE0) = qword_26B41DCE0 + 1;
      llvm::cl::AddLiteralOption(qword_26B41DCD0, v3, v4);
      v1 += 40;
    }
    while (v1 != v2);
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)&ClVectorLibrary);
  if (v15 != v17) {
    free(v15);
  }
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::~opt, &ClVectorLibrary, &dword_261C2B000);
}

void *llvm::generic_gep_type_iterator<llvm::Value const* const*>::operator++(void *a1)
{
  unint64_t IndexedType = llvm::generic_gep_type_iterator<llvm::Use const*>::getIndexedType((uint64_t)a1);
  int v3 = *(unsigned __int8 *)(IndexedType + 8);
  if (IndexedType && v3 == 17 || IndexedType && (v3 & 0xFE) == 0x12)
  {
    unint64_t v4 = *(void *)(IndexedType + 24) | 4;
  }
  else if (v3 == 16)
  {
    unint64_t v4 = IndexedType & 0xFFFFFFFFFFFFFFFBLL;
  }
  else
  {
    unint64_t v4 = 0;
  }
  a1[1] = v4;
  *a1 += 8;
  return a1;
}

uint64_t _GLOBAL__sub_I_TargetTransformInfo_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_27, 0, 0);
  byte_26B41C108 = 0;
  qword_26B41C110 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41C118 = 0;
  _MergedGlobals_27 = (uint64_t)&unk_270DBC910;
  qword_26B41C120 = (uint64_t)&unk_270DBC658;
  qword_26B41C128 = (uint64_t)&unk_270DBC998;
  qword_26B41C140 = (uint64_t)&qword_26B41C128;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"costmodel-reduxcost", 0x13uLL);
  byte_26B41C108 = 0;
  word_26B41C118 = 256;
  word_26B41C092 = word_26B41C092 & 0xFF9F | 0x20;
  qword_26B41C0A8 = (uint64_t)"Recognize reduction patterns.";
  unk_26B41C0B0 = 29;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_27);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_27, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B41C148, 0, 0);
  dword_26B41C1C8 = 0;
  qword_26B41C1D0 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B41C1D8 = 0;
  qword_26B41C148 = (uint64_t)&unk_270DBC7D8;
  qword_26B41C1E0 = (uint64_t)&unk_270DBC6E8;
  qword_26B41C1E8 = (uint64_t)&unk_270DBFE18;
  qword_26B41C200 = (uint64_t)&qword_26B41C1E8;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41C148, (uint64_t *)"cache-line-size", 0xFuLL);
  dword_26B41C1C8 = 0;
  byte_26B41C1DC = 1;
  dword_26B41C1D8 = 0;
  word_26B41C152 = word_26B41C152 & 0xFF9F | 0x20;
  qword_26B41C168 = (uint64_t)"Use this to override the target cache line size when specified by the user.";
  unk_26B41C170 = 75;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41C148);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B41C148, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&PredictableBranchThreshold, 0, 0);
  dword_26B41F410 = 0;
  qword_26B41F418 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B41F420 = 0;
  PredictableBranchThreshold = (uint64_t)&unk_270DBC7D8;
  qword_26B41F428 = (uint64_t)&unk_270DBC6E8;
  qword_26B41F430 = (uint64_t)&unk_270DBFE18;
  qword_26B41F448 = (uint64_t)&qword_26B41F430;
  llvm::cl::Option::setArgStr((uint64_t)&PredictableBranchThreshold, (uint64_t *)"predictable-branch-threshold", 0x1CuLL);
  dword_26B41F410 = 99;
  byte_26B41F424 = 1;
  dword_26B41F420 = 99;
  word_26B41F39A = word_26B41F39A & 0xFF9F | 0x20;
  qword_26B41F3B0 = (uint64_t)"Use this to override the target's predictable branch threshold (%).";
  unk_26B41F3B8 = 67;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PredictableBranchThreshold);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &PredictableBranchThreshold, &dword_261C2B000);
}

uint64_t _GLOBAL__sub_I_TypeBasedAliasAnalysis_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&EnableTBAA, 0, 0);
  byte_26B41EC58 = 0;
  qword_26B41EC60 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41EC68 = 0;
  EnableTBAA = (uint64_t)&unk_270DBC910;
  qword_26B41EC70 = (uint64_t)&unk_270DBC658;
  qword_26B41EC78 = (uint64_t)&unk_270DBC998;
  qword_26B41EC90 = (uint64_t)&qword_26B41EC78;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"enable-tbaa", 0xBuLL);
  byte_26B41EC58 = 1;
  word_26B41EC68 = 257;
  word_26B41EBE2 = word_26B41EBE2 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&EnableTBAA);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &EnableTBAA, &dword_261C2B000);
}

uint64_t _GLOBAL__sub_I_ScopedNoAliasAA_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&EnableScopedNoAlias, 0, 0);
  byte_26B41F350 = 0;
  qword_26B41F358 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41F360 = 0;
  EnableScopedNoAlias = (uint64_t)&unk_270DBC910;
  qword_26B41F368 = (uint64_t)&unk_270DBC658;
  qword_26B41F370 = (uint64_t)&unk_270DBC998;
  qword_26B41F388 = (uint64_t)&qword_26B41F370;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"enable-scoped-noalias", 0x15uLL);
  byte_26B41F350 = 1;
  word_26B41F360 = 257;
  word_26B41F2DA = word_26B41F2DA & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&EnableScopedNoAlias);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &EnableScopedNoAlias, &dword_261C2B000);
}

uint64_t llvm::IntrinsicInst::isAssumeLikeIntrinsic(llvm::IntrinsicInst *this)
{
  int v1 = *(_DWORD *)(*((void *)this - 4) + 36);
  uint64_t result = 1;
  if (v1 <= 239)
  {
    if (v1 <= 0x3B && ((1 << v1) & 0xF00000000000080) != 0) {
      return result;
    }
    unsigned int v4 = v1 - 127;
    BOOL v5 = v4 > 0x2C;
    uint64_t v6 = (1 << v4) & 0x18C000000001;
    if (!v5 && v6 != 0) {
      return result;
    }
    return 0;
  }
  BOOL v8 = (v1 - 240) > 0x23 || ((1 << (v1 + 16)) & 0x800000301) == 0;
  if (v8 && v1 != 319) {
    return 0;
  }
  return result;
}

char *llvm::InsertValueInst::Create(uint64_t *a1, uint64_t a2, unsigned char *a3, uint64_t a4, const llvm::Twine *a5, uint64_t *a6)
{
  unint64_t v12 = operator new(0xA0uLL);
  v12[21] = v12[21] & 0x38000000 | 2;
  *(void *)unint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = v12 + 16;
  *((void *)v12 + 4) = 0;
  *((void *)v12 + 5) = 0;
  *((void *)v12 + 6) = 0;
  *((void *)v12 + 7) = v12 + 16;
  __n128 v13 = (unsigned int *)llvm::Instruction::Instruction((uint64_t)(v12 + 16), *a1, 65, (uint64_t)v12, 2, a6);
  *((void *)v12 + 16) = v12 + 36;
  *((void *)v12 + 17) = 0x400000000;
  llvm::InsertValueInst::init(v13, (uint64_t)a1, a2, a3, a4, a5);
  return (char *)(v12 + 16);
}

uint64_t llvm::APInt::ashr@<X0>(llvm::APInt *this@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = *((unsigned int *)this + 2);
  *(_DWORD *)(a3 + 8) = v4;
  if (v4 > 0x40) {
    operator new[]();
  }
  *(void *)a3 = *(void *)this;
  unsigned int LimitedValue = llvm::APInt::getLimitedValue(a2, v4);
  return llvm::APInt::ashrInPlace(a3, LimitedValue);
}

uint64_t _GLOBAL__sub_I_ValueTracking_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&DomConditionsMaxUses, 0, 0);
  dword_26B41E090 = 0;
  qword_26B41E098 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B41E0A0 = 0;
  DomConditionsMaxUses = (uint64_t)&unk_270DBC7D8;
  qword_26B41E0A8 = (uint64_t)&unk_270DBC6E8;
  qword_26B41E0B0 = (uint64_t)&unk_270DBFE18;
  qword_26B41E0C8 = (uint64_t)&qword_26B41E0B0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"dom-conditions-max-uses", 0x17uLL);
  word_26B41E01A = word_26B41E01A & 0xFF9F | 0x20;
  dword_26B41E090 = 20;
  byte_26B41E0A4 = 1;
  dword_26B41E0A0 = 20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&DomConditionsMaxUses);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &DomConditionsMaxUses, &dword_261C2B000);
}

uint64_t llvm::SmallVectorImpl<int>::assign(uint64_t a1, unint64_t a2, int a3)
{
  if (*(unsigned int *)(a1 + 12) < a2) {
    return (uint64_t)llvm::SmallVectorTemplateBase<int,true>::growAndAssign(a1, a2, a3);
  }
  int v3 = *(int **)a1;
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *(unsigned int *)(a1 + 8);
  }
  if (v5)
  {
    uint64_t v6 = *(int **)a1;
    do
    {
      *v6++ = a3;
      --v5;
    }
    while (v5);
    unint64_t v4 = *(unsigned int *)(a1 + 8);
  }
  unint64_t v7 = v4 - a2;
  if (v4 < a2)
  {
    BOOL v8 = &v3[v4];
    do
      *v8++ = a3;
    while (!__CFADD__(v7++, 1));
  }
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

void *llvm::SmallVectorTemplateBase<int,true>::growAndAssign(uint64_t a1, unint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 4);
  if (a2)
  {
    unint64_t v7 = *(_DWORD **)a1;
    unint64_t v8 = a2;
    do
    {
      *v7++ = a3;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)(a1 + 8) = a2;
  return result;
}

uint64_t _GLOBAL__sub_I_VectorUtils_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&MaxInterleaveGroupFactor, 0, 0);
  dword_26B41E5D0 = 0;
  qword_26B41E5D8 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B41E5E0 = 0;
  MaxInterleaveGroupFactor = (uint64_t)&unk_270DBC7D8;
  qword_26B41E5E8 = (uint64_t)&unk_270DBC6E8;
  qword_26B41E5F0 = (uint64_t)&unk_270DBFE18;
  qword_26B41E608 = (uint64_t)&qword_26B41E5F0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"max-interleave-group-factor", 0x1BuLL);
  word_26B41E55A = word_26B41E55A & 0xFF9F | 0x20;
  qword_26B41E570 = (uint64_t)"Maximum factor for an interleaved access group (default = 8)";
  unk_26B41E578 = 60;
  dword_26B41E5D0 = 8;
  byte_26B41E5E4 = 1;
  dword_26B41E5E0 = 8;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&MaxInterleaveGroupFactor);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &MaxInterleaveGroupFactor, &dword_261C2B000);
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawAccessMode(uint64_t a1)
{
  v3[0] = *(void *)(a1 + 16) + 40;
  uint64_t v1 = v3[0];
  v3[1] = 8;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawLastModified(uint64_t a1)
{
  v3[0] = *(void *)(a1 + 16) + 16;
  uint64_t v1 = v3[0];
  v3[1] = 12;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawUID(uint64_t a1)
{
  v3[0] = *(void *)(a1 + 16) + 28;
  uint64_t v1 = v3[0];
  v3[1] = 6;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawGID(uint64_t a1)
{
  v3[0] = *(void *)(a1 + 16) + 34;
  uint64_t v1 = v3[0];
  v3[1] = 6;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getOffset(uint64_t a1)
{
  return *(void *)(a1 + 16) - *(void *)(*(void *)(a1 + 8) + 16);
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getSizeOf()
{
  return 60;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawAccessMode(uint64_t a1)
{
  v3[0] = *(void *)(a1 + 16) + 96;
  uint64_t v1 = v3[0];
  v3[1] = 12;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawLastModified(uint64_t a1)
{
  v3[0] = *(void *)(a1 + 16) + 60;
  uint64_t v1 = v3[0];
  v3[1] = 12;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawUID(uint64_t a1)
{
  v3[0] = *(void *)(a1 + 16) + 72;
  uint64_t v1 = v3[0];
  v3[1] = 12;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawGID(uint64_t a1)
{
  v3[0] = *(void *)(a1 + 16) + 84;
  uint64_t v1 = v3[0];
  v3[1] = 12;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getOffset(uint64_t a1)
{
  return *(void *)(a1 + 16) - *(void *)(*(void *)(a1 + 8) + 16);
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getSizeOf()
{
  return 114;
}

void createMemberHeaderParseError(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr, void *, uint64_t))(*a2 + 64))(v18, a2, a4);
  if (v19)
  {
    unint64_t v8 = (const char *)v18[0];
    v18[0] = 0;
    unint64_t v12 = v8;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v12);
    if (v12) {
      (*(void (**)(const char *))(*(void *)v12 + 8))(v12);
    }
    uint64_t v11 = a3 - *(void *)(a2[1] + 16);
    __int16 v15 = 773;
    unint64_t v12 = "remaining size of archive too small for next archive member header ";
    uint64_t v13 = 67;
    int v14 = "at offset ";
    v9[0] = &v12;
    long long v9[2] = &v11;
    __int16 v10 = 3074;
    unint64_t v7 = (llvm::Twine *)v9;
  }
  else
  {
    __int16 v15 = 773;
    unint64_t v12 = "remaining size of archive too small for next archive member header ";
    uint64_t v13 = 67;
    int v14 = "for ";
    v16[0] = &v12;
    long long v16[2] = v18[0];
    v16[3] = v18[1];
    __int16 v17 = 1282;
    unint64_t v7 = (llvm::Twine *)v16;
  }
  malformedError(a1, v7);
}

void malformedError(uint64_t a1, llvm::Twine *a2)
{
  llvm::Twine::str(a2, &v6);
  unsigned int v2 = std::string::insert(&v6, 0, "truncated or malformed archive (");
  std::string::size_type v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  unint64_t v4 = std::string::append(&v9, ")");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  operator new();
}

{
  std::string *v2;
  std::string::size_type v3;
  std::string *v4;
  std::string::size_type v5;
  std::string v6;
  void *__p[2];
  std::string::size_type v8;
  std::string v9;

  llvm::Twine::str(a2, &v6);
  unsigned int v2 = std::string::insert(&v6, 0, "truncated or malformed fat file (");
  std::string::size_type v3 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v9.__r_.__value_.__r.__words[2] = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  unint64_t v4 = std::string::append(&v9, ")");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  operator new();
}

unsigned char *llvm::object::ArchiveMemberHeader::getRawName@<X0>(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 1);
  int v4 = *(unsigned char *)(v3 + 98) & 7;
  if (v4 == 4 || v4 == 2)
  {
    std::string v6 = (unsigned char *)*((void *)this + 2);
    if (*v6 == 32)
    {
      int v14 = &v6[-*(void *)(v3 + 16)];
      v12[0] = "name contains a leading space for archive member header at offset ";
      _OWORD v12[2] = &v14;
      __int16 v13 = 3075;
      malformedError(a2, (llvm::Twine *)v12);
    }
    int v9 = 32;
  }
  else
  {
    std::string v6 = (unsigned char *)*((void *)this + 2);
    int v7 = *v6;
    if (v7 == 35 || v7 == 47) {
      int v9 = 32;
    }
    else {
      int v9 = 47;
    }
  }
  uint64_t result = memchr(v6, v9, 0x10uLL);
  uint64_t v11 = result - v6;
  if (!result) {
    uint64_t v11 = -1;
  }
  *(unsigned char *)(a2 + 16) &= ~1u;
  if (v11 == -1) {
    uint64_t v11 = 16;
  }
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v11;
  return result;
}

uint64_t getArchiveMemberDecField(uint64_t a1, uint64_t *a2, unint64_t a3, unint64_t *a4, uint64_t a5)
{
  v23[0] = 0;
  uint64_t v25 = (unint64_t *)a3;
  uint64_t v26 = a4;
  uint64_t result = llvm::consumeUnsignedInteger((llvm *)&v25, (llvm::StringRef *)0xA, v23, a4);
  if ((result & 1) != 0 || v26)
  {
    uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 80))(a5);
    int v12 = *((unsigned __int8 *)a2 + 32);
    if (*((unsigned char *)a2 + 32))
    {
      if (v12 == 1)
      {
        __int16 v13 = "characters in ";
        v19[0] = "characters in ";
        __int16 v20 = 259;
        char v14 = 3;
      }
      else
      {
        __int16 v17 = (uint64_t *)*a2;
        uint64_t v18 = a2[1];
        char v14 = 2;
        if (*((unsigned char *)a2 + 33) != 1)
        {
          LOBYTE(v12) = 2;
          __int16 v17 = a2;
        }
        v19[0] = "characters in ";
        v19[2] = v17;
        v19[3] = v18;
        LOBYTE(v20) = 3;
        HIBYTE(v20) = v12;
        __int16 v13 = (const char *)v19;
      }
      v21[0] = v13;
      _DWORD v21[2] = " field in archive member header are not all decimal numbers: '";
      LOBYTE(v22) = v14;
      HIBYTE(v22) = 3;
      v23[0] = (unint64_t)v21;
      void v23[2] = a3;
      v23[3] = (unint64_t)a4;
      __int16 v24 = 1282;
      uint64_t v25 = v23;
      uint64_t v27 = "' for the archive member header at offset ";
      __int16 v28 = 770;
      char v16 = 12;
      char v15 = 2;
      v29[0] = &v25;
      v29[2] = &v33;
    }
    else
    {
      char v15 = 0;
      __int16 v20 = 256;
      __int16 v22 = 256;
      __int16 v24 = 256;
      __int16 v28 = 256;
      char v16 = 1;
    }
    char v30 = v15;
    char v31 = v16;
    malformedError((uint64_t)&v32, (llvm::Twine *)v29);
  }
  unint64_t v11 = v23[0];
  *(unsigned char *)(a1 + 8) &= ~1u;
  *(void *)a1 = v11;
  return result;
}

uint64_t llvm::object::BigArchiveMemberHeader::getRawName@<X0>(llvm::object::BigArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  char v15 = "NameLen";
  __int16 v16 = 259;
  unint64_t v4 = *((void *)this + 2) + 108;
  unint64_t v17 = v4;
  uint64_t v18 = 4;
  uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v17, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(last_not_of + 1) < 4) {
    uint64_t v6 = last_not_of + 1;
  }
  else {
    uint64_t v6 = 4;
  }
  uint64_t result = getArchiveMemberDecField((uint64_t)&v17, (uint64_t *)&v15, v4, (unint64_t *)v6, (uint64_t)this);
  if (v18)
  {
    unint64_t v11 = v17;
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = v11;
  }
  else
  {
    unint64_t v8 = v17;
    unint64_t v9 = (v17 + 1) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v10 = *((void *)this + 2) + 112;
    if (v9 == -2 || *(_WORD *)(v10 + v9) != 2656)
    {
      unint64_t v14 = v10 + v9 - *(void *)(*((void *)this + 1) + 16);
      _OWORD v12[2] = &v14;
      __int16 v13 = 3075;
      malformedError(a2, (llvm::Twine *)v12);
    }
    *(unsigned char *)(a2 + 16) &= ~1u;
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v8;
  }
  return result;
}

void *llvm::object::ArchiveMemberHeader::getName@<X0>(llvm::object::ArchiveMemberHeader *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  if (a2 <= 0xF)
  {
    v81 = (char *)(*((void *)this + 2) - *(void *)(*((void *)this + 1) + 16));
    v91[0] = "archive header truncated before the name field for archive member header at offset ";
    v91[2] = &v81;
    __int16 v92 = 3075;
    malformedError(a3, (llvm::Twine *)v91);
  }
  uint64_t result = (*(void *(**)(long long *__return_ptr, llvm::object::ArchiveMemberHeader *))(*(void *)this
                                                                                                  + 24))(&v93, this);
  uint64_t v8 = v93;
  if (v94)
  {
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v8;
    return result;
  }
  uint64_t v9 = *((void *)&v93 + 1);
  if (*(unsigned char *)v93 != 47)
  {
    unint64_t v10 = *((void *)&v93 + 1) - 3;
    if (*((void *)&v93 + 1) < 3uLL || (*(_WORD *)v93 == 12579 ? (BOOL v11 = *(unsigned char *)(v93 + 2) == 47) : (BOOL v11 = 0), !v11))
    {
      unint64_t v12 = *((void *)&v93 + 1) - 1;
      if (*(unsigned char *)(v93 + *((void *)&v93 + 1) - 1) == 47)
      {
        if (*((void *)&v93 + 1) < v12) {
          unint64_t v12 = *((void *)&v93 + 1);
        }
      }
      else
      {
        unint64_t v16 = *((void *)&v93 + 1);
        do
        {
          unint64_t v17 = v16;
          if (!v16) {
            break;
          }
          --v16;
        }
        while (*(unsigned char *)(v93 - 1 + v17) == 32);
        if (v17 >= *((void *)&v93 + 1)) {
          unint64_t v12 = *((void *)&v93 + 1);
        }
        else {
          unint64_t v12 = v17;
        }
      }
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)a3 = v8;
      goto LABEL_30;
    }
    uint64_t v41 = *((void *)&v93 + 1) - 1;
    uint64_t v42 = *((void *)&v93 + 1) - 1;
    do
    {
      unint64_t v43 = v42 - 2;
      if (v42 == 2) {
        break;
      }
      int v44 = *(unsigned __int8 *)(v93 + v42--);
    }
    while (v44 == 32);
    v73 = 0;
    if (v43 >= v10) {
      unint64_t v43 = *((void *)&v93 + 1) - 3;
    }
    v81 = (char *)(v93 + 3);
    unint64_t v82 = v43;
    if ((llvm::consumeUnsignedInteger((llvm *)&v81, (llvm::StringRef *)0xA, (unint64_t *)&v73, v7) & 1) == 0
      && !v82)
    {
      uint64_t v45 = (char *)v73;
      v90 = v73;
      if ((unint64_t)&v45[(*(uint64_t (**)(llvm::object::ArchiveMemberHeader *))(*(void *)this
                                                                                                 + 104))(this)] <= a2)
      {
        uint64_t v56 = *((void *)this + 2);
        uint64_t result = (void *)(*(uint64_t (**)(llvm::object::ArchiveMemberHeader *))(*(void *)this + 104))(this);
        v57 = v45;
        do
        {
          unint64_t v58 = (unint64_t)v57;
          if (!v57) {
            break;
          }
          --v57;
        }
        while (!*((unsigned char *)result + v56 + v58 - 1));
        if (v58 >= (unint64_t)v45) {
          unint64_t v59 = (unint64_t)v45;
        }
        else {
          unint64_t v59 = v58;
        }
        *(unsigned char *)(a3 + 16) &= ~1u;
        *(void *)a3 = (char *)result + v56;
        *(void *)(a3 + 8) = v59;
        goto LABEL_104;
      }
      uint64_t v78 = *((void *)this + 2) - *(void *)(*((void *)this + 1) + 16);
      __p[0] = "long name length: ";
      __int16 v72 = 259;
      __int16 v69 = 268;
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
      llvm::operator+((uint64_t *)__p, (uint64_t *)&v68, (uint64_t)&v73);
      v66[0] = (uint64_t)" extends past the end of the member or archive for archive member header at offset ";
      __int16 v67 = 259;
      llvm::operator+((uint64_t *)&v73, v66, (uint64_t)&v81);
      __int16 v65 = 268;
      v64[0] = (uint64_t)&v78;
      llvm::operator+((uint64_t *)&v81, v64, (uint64_t)v60);
      uint64_t v46 = (llvm::Twine *)v60;
      goto LABEL_101;
    }
    v73 = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    LODWORD(v82) = 0;
    char v86 = 0;
    uint64_t v87 = 0;
    int v88 = 1;
    uint64_t v84 = 0;
    v85 = 0;
    v83 = 0;
    v81 = (char *)&unk_270DBD6E0;
    v89 = &v73;
    llvm::raw_ostream::SetUnbuffered(&v81);
    do
    {
      unint64_t v47 = v41 - 2;
      if (v41 == 2) {
        break;
      }
      int v48 = *(unsigned __int8 *)(v8 + v41--);
    }
    while (v48 == 32);
    if (v47 >= v10) {
      uint64_t v49 = v10;
    }
    else {
      uint64_t v49 = v47;
    }
    llvm::raw_ostream::write_escaped((llvm::raw_ostream *)&v81, (char *)(v8 + 3), v49, 0);
    uint64_t v50 = v85 - v83;
    if (v85 != v83)
    {
      v85 = v83;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v81, v83, v50);
    }
    v66[0] = *((void *)this + 2) - *(void *)(*((void *)this + 1) + 16);
    std::operator+<char>();
    uint64_t v51 = std::string::append(&v68, "' for archive member header at offset ");
    std::string::size_type v52 = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    std::string::size_type v71 = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    v61[0] = __p;
    v61[2] = v66;
    __int16 v62 = 3076;
    uint64_t v40 = (llvm::Twine *)v61;
LABEL_80:
    malformedError(a3, v40);
  }
  if (*((uint64_t *)&v93 + 1) > 12)
  {
    if (*((void *)&v93 + 1) == 13)
    {
      uint64_t v13 = *(void *)(v93 + 5);
      BOOL v14 = *(void *)v93 == 0x424D595343453C2FLL;
      uint64_t v15 = 0x534C4F424D59;
    }
    else
    {
      if (*((void *)&v93 + 1) != 14) {
        goto LABEL_36;
      }
      uint64_t v13 = *(void *)(v93 + 6);
      BOOL v14 = *(void *)v93 == 0x5341484746583C2FLL;
      uint64_t v15 = 0x50414D485341;
    }
    uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL | 0x2F3E000000000000;
    if (v14 && v13 == v18) {
      goto LABEL_51;
    }
    goto LABEL_36;
  }
  if (*((void *)&v93 + 1) != 1 && (*((void *)&v93 + 1) != 2 || *(unsigned char *)(v93 + 1) != 47))
  {
LABEL_36:
    if (*((void *)&v93 + 1)) {
      __int16 v20 = (char *)(v93 + 1);
    }
    else {
      __int16 v20 = (char *)v93;
    }
    unint64_t v21 = *((void *)&v93 + 1) - (*((void *)&v93 + 1) != 0);
    __int16 v22 = (unsigned __int8 *)(*((void *)&v93 + 1) + v93 - 1);
    unint64_t v23 = v21;
    do
    {
      unint64_t v24 = v23;
      if (!v23) {
        break;
      }
      --v23;
      int v25 = *v22--;
    }
    while (v25 == 32);
    v73 = 0;
    if (v24 >= v21) {
      unint64_t v26 = *((void *)&v93 + 1) - (*((void *)&v93 + 1) != 0);
    }
    else {
      unint64_t v26 = v24;
    }
    v81 = v20;
    unint64_t v82 = v26;
    if ((llvm::consumeUnsignedInteger((llvm *)&v81, (llvm::StringRef *)0xA, (unint64_t *)&v73, v7) & 1) == 0
      && !v82)
    {
      uint64_t v27 = (char *)v73;
      v90 = v73;
      uint64_t v28 = *((void *)this + 1);
      unint64_t v29 = *(void *)(v28 + 72);
      if (v29 <= (unint64_t)v73)
      {
        uint64_t v78 = *((void *)this + 2) - *(void *)(v28 + 16);
        __p[0] = "long name offset ";
        __int16 v72 = 259;
        __int16 v69 = 266;
        v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
        llvm::operator+((uint64_t *)__p, (uint64_t *)&v68, (uint64_t)&v73);
        v66[0] = (uint64_t)" past the end of the string table for archive member header at offset ";
        __int16 v67 = 259;
        llvm::operator+((uint64_t *)&v73, v66, (uint64_t)&v81);
        __int16 v65 = 268;
        v64[0] = (uint64_t)&v78;
        llvm::operator+((uint64_t *)&v81, v64, (uint64_t)v77);
        uint64_t v46 = (llvm::Twine *)v77;
      }
      else
      {
        uint64_t v30 = *(void *)(v28 + 64);
        if ((*(unsigned char *)(v28 + 98) & 6) != 0)
        {
          char v31 = (char *)v73 + v30;
          *(unsigned char *)(a3 + 16) &= ~1u;
          *(void *)a3 = &v27[v30];
          if (v30) {
            uint64_t result = (void *)strlen(v31);
          }
          else {
            uint64_t result = 0;
          }
          *(void *)(a3 + 8) = result;
          goto LABEL_104;
        }
        uint64_t result = memchr((char *)v73 + v30, 10, v29 - (void)v73);
        uint64_t v53 = (uint64_t)result - v30;
        if (!result) {
          uint64_t v53 = -1;
        }
        if ((unint64_t)(v53 + 1) >= 2)
        {
          v54 = (char *)(v53 - 1);
          if (v54[v30] == 47)
          {
            if (v29 >= (unint64_t)v27) {
              v55 = v27;
            }
            else {
              v55 = (char *)v29;
            }
            if (v55 > v54) {
              v54 = v27;
            }
            if ((unint64_t)v54 >= v29) {
              v54 = (char *)v29;
            }
            *(unsigned char *)(a3 + 16) &= ~1u;
            unint64_t v12 = v54 - v55;
            *(void *)a3 = &v55[v30];
LABEL_30:
            *(void *)(a3 + 8) = v12;
            goto LABEL_104;
          }
        }
        v73 = "string table at long name offset ";
        __int16 v76 = 259;
        __int16 v72 = 266;
        __p[0] = &v90;
        llvm::operator+((uint64_t *)&v73, (uint64_t *)__p, (uint64_t)&v81);
        v68.__r_.__value_.__r.__words[0] = (std::string::size_type)"not terminated";
        __int16 v69 = 259;
        llvm::operator+((uint64_t *)&v81, (uint64_t *)&v68, (uint64_t)v63);
        uint64_t v46 = (llvm::Twine *)v63;
      }
LABEL_101:
      malformedError(a3, v46);
    }
    v73 = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    LODWORD(v82) = 0;
    char v86 = 0;
    uint64_t v87 = 0;
    int v88 = 1;
    uint64_t v84 = 0;
    v85 = 0;
    v83 = 0;
    v81 = (char *)&unk_270DBD6E0;
    v89 = &v73;
    llvm::raw_ostream::SetUnbuffered(&v81);
    uint64_t v32 = (unsigned __int8 *)(v9 + v8 - 1);
    unint64_t v33 = v9 - (v9 != 0);
    do
    {
      unint64_t v34 = v33;
      if (!v33) {
        break;
      }
      --v33;
      int v35 = *v32--;
    }
    while (v35 == 32);
    if (v34 >= v21) {
      uint64_t v36 = v9 - (v9 != 0);
    }
    else {
      uint64_t v36 = v34;
    }
    llvm::raw_ostream::write_escaped((llvm::raw_ostream *)&v81, v20, v36, 0);
    uint64_t v37 = v85 - v83;
    if (v85 != v83)
    {
      v85 = v83;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v81, v83, v37);
    }
    v66[0] = *((void *)this + 2) - *(void *)(*((void *)this + 1) + 16);
    std::operator+<char>();
    uint64_t v38 = std::string::append(&v68, "' for archive member header at offset ");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    std::string::size_type v71 = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v79[0] = __p;
    v79[2] = v66;
    __int16 v80 = 3076;
    uint64_t v40 = (llvm::Twine *)v79;
    goto LABEL_80;
  }
LABEL_51:
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(_OWORD *)a3 = v93;
LABEL_104:
  if (v94)
  {
    uint64_t result = (void *)v93;
    *(void *)&long long v93 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t llvm::object::BigArchiveMemberHeader::getName(llvm::object::BigArchiveMemberHeader *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 24))();
}

uint64_t llvm::object::ArchiveMemberHeader::getSize@<X0>(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = "size";
  __int16 v9 = 259;
  unint64_t v4 = *((void *)this + 2) + 48;
  v10[0] = v4;
  v10[1] = 10;
  uint64_t last_not_of = llvm::StringRef::find_last_not_of(v10, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(last_not_of + 1) < 0xA) {
    uint64_t v6 = last_not_of + 1;
  }
  else {
    uint64_t v6 = 10;
  }
  return getArchiveMemberDecField(a2, (uint64_t *)&v8, v4, (unint64_t *)v6, (uint64_t)this);
}

uint64_t llvm::object::BigArchiveMemberHeader::getSize@<X0>(llvm::object::BigArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v13 = "size";
  __int16 v14 = 259;
  unint64_t v4 = *((void *)this + 2);
  v15[0] = v4;
  v15[1] = 20;
  uint64_t last_not_of = llvm::StringRef::find_last_not_of(v15, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(last_not_of + 1) < 0x14) {
    uint64_t v6 = last_not_of + 1;
  }
  else {
    uint64_t v6 = 20;
  }
  uint64_t result = getArchiveMemberDecField((uint64_t)&v17, (uint64_t *)&v13, v4, (unint64_t *)v6, (uint64_t)this);
  if (v18)
  {
    unint64_t v11 = v17;
LABEL_12:
    char v12 = *(unsigned char *)(a2 + 8) | 1;
    goto LABEL_13;
  }
  v15[0] = (uint64_t)"NameLen";
  __int16 v16 = 259;
  unint64_t v8 = *((void *)this + 2) + 108;
  unint64_t v19 = v8;
  uint64_t v20 = 4;
  uint64_t v9 = llvm::StringRef::find_last_not_of(&v19, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(v9 + 1) < 4) {
    uint64_t v10 = v9 + 1;
  }
  else {
    uint64_t v10 = 4;
  }
  uint64_t result = getArchiveMemberDecField((uint64_t)&v19, v15, v8, (unint64_t *)v10, (uint64_t)this);
  if (v20)
  {
    unint64_t v11 = v19;
    goto LABEL_12;
  }
  unint64_t v11 = ((v19 + 1) & 0xFFFFFFFFFFFFFFFELL) + v17;
  char v12 = *(unsigned char *)(a2 + 8) & 0xFE;
LABEL_13:
  *(unsigned char *)(a2 + 8) = v12;
  *(void *)a2 = v11;
  return result;
}

void *llvm::object::ArchiveMemberHeader::isThin@<X0>(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = (*(void *(**)(_DWORD **__return_ptr))(*(void *)this + 24))(&v8);
  if (v10)
  {
    uint64_t v6 = v8;
    *(unsigned char *)(a2 + 8) |= 1u;
    *(void *)a2 = v6;
    return result;
  }
  if ((*(unsigned char *)(*((void *)this + 1) + 98) & 8) != 0)
  {
    switch(v9)
    {
      case 7:
        BOOL v7 = *v8 == 1297699631 && *(_DWORD *)((char *)v8 + 3) == 791950925;
        break;
      case 2:
        BOOL v7 = *(unsigned __int16 *)v8 == 12079;
        break;
      case 1:
        BOOL v7 = *(unsigned char *)v8 == 47;
        break;
      default:
        char v5 = 1;
        goto LABEL_17;
    }
    char v5 = !v7;
    goto LABEL_17;
  }
  char v5 = 0;
LABEL_17:
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(unsigned char *)a2 = v5;
  return result;
}

void *llvm::object::ArchiveMemberHeader::getNextChildLoc@<X0>(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(llvm::object::ArchiveMemberHeader *))(*(void *)this + 104))(this);
  uint64_t result = (*(void *(**)(void **__return_ptr, llvm::object::ArchiveMemberHeader *))(*(void *)this + 96))(&v10, this);
  if (v11)
  {
    unint64_t v6 = (unint64_t)v10;
    char v10 = 0;
LABEL_8:
    *(unsigned char *)(a2 + 8) |= 1u;
    goto LABEL_9;
  }
  if ((_BYTE)v10) {
    goto LABEL_5;
  }
  uint64_t result = (*(void *(**)(unint64_t *__return_ptr, llvm::object::ArchiveMemberHeader *))(*(void *)this + 72))(&v8, this);
  if (v9)
  {
    unint64_t v6 = v8;
    goto LABEL_8;
  }
  v4 += v8;
LABEL_5:
  unint64_t v6 = *((void *)this + 2) + ((v4 + 1) & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v7 = *(void *)(*((void *)this + 1) + 16) + *(void *)(*((void *)this + 1) + 24);
  *(unsigned char *)(a2 + 8) &= ~1u;
  if (v6 == v7)
  {
    *(void *)a2 = 0;
    goto LABEL_10;
  }
LABEL_9:
  *(void *)a2 = v6;
LABEL_10:
  if (v11)
  {
    uint64_t result = v10;
    char v10 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t llvm::object::BigArchiveMemberHeader::getNextChildLoc@<X0>(llvm::object::BigArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = (*(uint64_t (**)(llvm::object::BigArchiveMemberHeader *))(*(void *)this + 80))(this);
  if (result == *(void *)(*((void *)this + 1) + 144))
  {
    *(unsigned char *)(a2 + 8) &= ~1u;
    *(void *)a2 = 0;
  }
  else
  {
    char v10 = "NextOffset";
    __int16 v11 = 259;
    unint64_t v5 = *((void *)this + 2) + 20;
    unint64_t v12 = v5;
    uint64_t v13 = 20;
    uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v12, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
    if ((unint64_t)(last_not_of + 1) < 0x14) {
      uint64_t v7 = last_not_of + 1;
    }
    else {
      uint64_t v7 = 20;
    }
    uint64_t result = getArchiveMemberDecField((uint64_t)&v12, (uint64_t *)&v10, v5, (unint64_t *)v7, (uint64_t)this);
    if (v13)
    {
      unint64_t v8 = v12;
      char v9 = *(unsigned char *)(a2 + 8) | 1;
    }
    else
    {
      unint64_t v8 = *(void *)(*((void *)this + 1) + 16) + v12;
      char v9 = *(unsigned char *)(a2 + 8) & 0xFE;
    }
    *(unsigned char *)(a2 + 8) = v9;
    *(void *)a2 = v8;
  }
  return result;
}

void llvm::object::Archive::createArchiveMemberHeader(llvm::object::Archive *this, const char *a2, unint64_t a3, llvm::Error *a4)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  operator new();
}

void *llvm::object::Archive::Child::Child(void *this, const llvm::object::Archive *a2, const char *a3, llvm::Error *a4)
{
  v5[10] = *MEMORY[0x263EF8340];
  *this = a2;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  if (a3)
  {
    if (a2) {
      uint64_t v4 = (llvm::Error *)(*((void *)a2 + 2) - (void)a3 + *((void *)a2 + 3));
    }
    else {
      uint64_t v4 = 0;
    }
    llvm::object::Archive::createArchiveMemberHeader((llvm::object::Archive *)v5, (const char *)a2, (unint64_t)a3, v4);
  }
  return this;
}

void *llvm::object::Archive::Child::getName@<X0>(llvm::object::Archive::Child *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = (*(void *(**)(void **__return_ptr))(**((void **)this + 1) + 72))(&v12);
  if (v13)
  {
    char v9 = v12;
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = v9;
  }
  else
  {
    unint64_t v5 = v12;
    uint64_t v6 = *((void *)this + 1);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 104))(v6);
    uint64_t result = (*(void *(**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v6 + 64))(&v10, v6, (uint64_t)v5 + v7);
    if (v11)
    {
      char v8 = *(unsigned char *)(a2 + 16) | 1;
      *(void *)a2 = v10;
    }
    else
    {
      *(_OWORD *)a2 = v10;
      char v8 = *(unsigned char *)(a2 + 16) & 0xFE;
    }
    *(unsigned char *)(a2 + 16) = v8;
    if (v13)
    {
      uint64_t result = v12;
      unint64_t v12 = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void *llvm::object::Archive::Child::getBuffer@<X0>(llvm::object::Archive::Child *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t result = (*(void *(**)(void **__return_ptr))(**((void **)this + 1) + 96))(&v54);
  if (v55)
  {
    char v8 = v54;
    v54 = 0;
    goto LABEL_11;
  }
  if (!(_BYTE)v54)
  {
    if ((*(unsigned char *)(*(void *)this + 98) & 8) == 0)
    {
      uint64_t v9 = *((void *)this + 3) - *((unsigned __int16 *)this + 16);
      __dst[8] = 0;
      *(void *)long long __dst = v9;
LABEL_16:
      char v8 = (void *)(*((void *)this + 2) + *((unsigned __int16 *)this + 16));
      uint64_t v10 = *(void *)__dst;
      *(unsigned char *)(a2 + 16) &= ~1u;
      *(void *)(a2 + 8) = v10;
      goto LABEL_17;
    }
    uint64_t result = (*(void *(**)(unsigned char *__return_ptr))(**((void **)this + 1) + 72))(__dst);
    if ((__dst[8] & 1) == 0) {
      goto LABEL_16;
    }
    char v8 = *(void **)__dst;
LABEL_11:
    *(unsigned char *)(a2 + 16) |= 1u;
LABEL_17:
    *(void *)a2 = v8;
    goto LABEL_80;
  }
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 96))(&v69);
  if (v70)
  {
    char v61 = -1;
    *(void *)&v59.__val_ = v69;
    goto LABEL_47;
  }
  llvm::object::Archive::Child::getName(this, (uint64_t)&v66);
  unint64_t v5 = v66;
  if (v68)
  {
    v66 = 0;
    char v61 = -1;
    *(void *)&v59.__val_ = v5;
    goto LABEL_41;
  }
  size_t v6 = v67;
  __int16 v65 = 261;
  *(void *)long long __dst = v66;
  *(void *)&__dst[8] = v67;
  if (!llvm::sys::path::is_absolute((llvm::sys::path *)__dst, 0))
  {
    char v11 = *(unsigned __int8 **)(*(void *)this + 32);
    unint64_t v12 = *(void *)(*(void *)this + 40);
    if (v12 >= v13) {
      unint64_t v14 = v13;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v13 == -1)
    {
      unint64_t v14 = 0;
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = v11;
    }
    *(void *)long long __dst = &v64;
    *(_OWORD *)&__dst[8] = xmmword_261E8A720;
    llvm::SmallVectorImpl<char>::append<char const*,void>(__dst, v15, &v15[v14]);
    __int16 v62 = 261;
    *(void *)&v59.__val_ = v5;
    v59.__cat_ = (const std::error_category *)v6;
    __int16 v58 = 257;
    __int16 v53 = 257;
    __int16 v51 = 257;
    llvm::sys::path::append(__dst, 0, (uint64_t)&v59, (uint64_t)&v56, (uint64_t)v52, (uint64_t)v50);
    __int16 v16 = *(const std::error_category **)&__dst[8];
    if (*(void *)&__dst[8] > 0x7FFFFFFFFFFFFFF7uLL) {
      goto LABEL_84;
    }
    unint64_t v17 = *(const void **)__dst;
    if (*(void *)&__dst[8] >= 0x17uLL)
    {
      uint64_t v21 = (*(void *)&__dst[8] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((*(void *)&__dst[8] | 7) != 0x17) {
        uint64_t v21 = *(void *)&__dst[8] | 7;
      }
      uint64_t v22 = v21 + 1;
      char v18 = operator new(v21 + 1);
      v56.__cat_ = v16;
      unint64_t v57 = v22 | 0x8000000000000000;
      *(void *)&v56.__val_ = v18;
    }
    else
    {
      HIBYTE(v57) = __dst[8];
      char v18 = &v56;
      if (!*(void *)&__dst[8])
      {
LABEL_39:
        *((unsigned char *)&v16->__vftable + (void)v18) = 0;
        char v61 = 0;
        std::error_code v59 = v56;
        unint64_t v60 = v57;
        if (*(uint64_t **)__dst != &v64) {
          free(*(void **)__dst);
        }
        goto LABEL_41;
      }
    }
    memmove(v18, v17, (size_t)v16);
    goto LABEL_39;
  }
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_84;
  }
  if (v6 >= 0x17)
  {
    uint64_t v19 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v19 = v6 | 7;
    }
    uint64_t v20 = v19 + 1;
    uint64_t v7 = operator new(v19 + 1);
    *(void *)&__dst[8] = v6;
    *(void *)&__dst[16] = v20 | 0x8000000000000000;
    *(void *)long long __dst = v7;
  }
  else
  {
    __dst[23] = v6;
    uint64_t v7 = __dst;
    if (!v6) {
      goto LABEL_34;
    }
  }
  memmove(v7, v5, v6);
LABEL_34:
  v7[v6] = 0;
  char v61 = 0;
  std::error_code v59 = *(std::error_code *)__dst;
  unint64_t v60 = *(void *)&__dst[16];
LABEL_41:
  if ((v68 & 1) != 0 && v66) {
    (*(void (**)(const void *))(*(void *)v66 + 8))(v66);
  }
  if (v70)
  {
    uint64_t v23 = v69;
    uint64_t v69 = 0;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
  }
LABEL_47:
  if ((v61 & 1) == 0)
  {
    __int16 v65 = 260;
    *(void *)long long __dst = &v59;
    getFileAux<llvm::MemoryBuffer>((const llvm::Twine *)__dst, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, 0, (uint64_t)&v56);
    if (v57)
    {
      if (v56.__val_)
      {
        *(void *)&v24.__val_ = v56.__cat_;
        llvm::errorCodeToError(*(llvm **)&v56.__val_, v24, &v49);
        *(unsigned char *)(a2 + 16) |= 1u;
        *(void *)a2 = v49;
LABEL_76:
        if ((v57 & 1) == 0)
        {
          uint64_t v48 = *(void *)&v56.__val_;
          *(void *)&v56.__val_ = 0;
          if (v48) {
            (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
          }
        }
        goto LABEL_79;
      }
    }
    else
    {
      std::system_category();
    }
    unint64_t v26 = *(void **)this;
    uint64_t v28 = *(void **)(*(void *)this + 112);
    unint64_t v27 = *(void *)(*(void *)this + 120);
    if ((unint64_t)v28 < v27)
    {
      uint64_t v29 = *(void *)&v56.__val_;
      *(void *)&v56.__val_ = 0;
      *uint64_t v28 = v29;
      uint64_t v30 = v26;
      char v31 = v28 + 1;
LABEL_75:
      v26[14] = v31;
      uint64_t v45 = *(void *)(v30[14] - 8);
      uint64_t v46 = *(void *)(v45 + 8);
      uint64_t v47 = *(void *)(v45 + 16) - v46;
      *(unsigned char *)(a2 + 16) &= ~1u;
      *(void *)a2 = v46;
      *(void *)(a2 + 8) = v47;
      goto LABEL_76;
    }
    uint64_t v32 = (void *)v26[13];
    uint64_t v33 = v28 - v32;
    unint64_t v34 = v33 + 1;
    if (!((unint64_t)(v33 + 1) >> 61))
    {
      uint64_t v35 = v27 - (void)v32;
      if (v35 >> 2 > v34) {
        unint64_t v34 = v35 >> 2;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36)
      {
        if (v36 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v37 = (char *)operator new(8 * v36);
      }
      else
      {
        uint64_t v37 = 0;
      }
      uint64_t v38 = &v37[8 * v33];
      std::string::size_type v39 = &v37[8 * v36];
      uint64_t v40 = *(void *)&v56.__val_;
      *(void *)&v56.__val_ = 0;
      *(void *)uint64_t v38 = v40;
      char v31 = v38 + 8;
      if (v28 == v32)
      {
        v26[13] = v38;
        v26[14] = v31;
        v26[15] = v39;
      }
      else
      {
        do
        {
          uint64_t v41 = *--v28;
          *uint64_t v28 = 0;
          *((void *)v38 - 1) = v41;
          v38 -= 8;
        }
        while (v28 != v32);
        uint64_t v28 = (void *)v26[13];
        uint64_t v42 = (void *)v26[14];
        v26[13] = v38;
        v26[14] = v31;
        v26[15] = v39;
        while (v42 != v28)
        {
          uint64_t v44 = *--v42;
          uint64_t v43 = v44;
          void *v42 = 0;
          if (v44) {
            (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
          }
        }
      }
      if (v28) {
        operator delete(v28);
      }
      uint64_t v30 = *(void **)this;
      goto LABEL_75;
    }
LABEL_84:
    abort();
  }
  uint64_t v25 = *(void *)&v59.__val_;
  *(void *)&v59.__val_ = 0;
  *(unsigned char *)(a2 + 16) |= 1u;
  *(void *)a2 = v25;
LABEL_79:
  uint64_t result = (void *)llvm::Expected<std::string>::~Expected((uint64_t)&v59);
LABEL_80:
  if (v55)
  {
    uint64_t result = v54;
    v54 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

const char *llvm::object::Archive::Child::getNext@<X0>(llvm::object::Archive::Child *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t result = (const char *)(*(void *(**)(const char **__return_ptr))(**((void **)this + 1) + 88))(&v25);
  unint64_t v5 = v25;
  if (v26)
  {
    uint64_t v25 = 0;
    *(unsigned char *)(a2 + 40) |= 1u;
    *(void *)a2 = v5;
  }
  else if (v25)
  {
    size_t v6 = *(const llvm::object::Archive **)this;
    if ((unint64_t)v25 > *(void *)(*(void *)this + 16) + *(void *)(*(void *)this + 24))
    {
      std::string::basic_string[abi:nn180100]<0>(v13, "offset to next archive member past the end of the archive after member ");
      llvm::object::Archive::Child::getName(this, (uint64_t)v23);
      if ((v24 & 1) == 0)
      {
        v16[0] = v13;
        long long v16[2] = v23[0];
        v16[3] = v23[1];
        __int16 v17 = 1284;
        malformedError(a2, (llvm::Twine *)v16);
      }
      __p[0] = (void *)v23[0];
      char v8 = __p;
      llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)__p);
      if (__p[0]) {
        (*(void (**)(void *))(*(void *)__p[0] + 8))(__p[0]);
      }
      uint64_t v22 = *((void *)this + 2) - *(void *)(*(void *)this + 16);
      if ((SBYTE7(v14) & 0x80u) == 0) {
        size_t v9 = BYTE7(v14);
      }
      else {
        size_t v9 = (size_t)v13[1];
      }
      std::string::basic_string[abi:nn180100]((uint64_t)__p, v9 + 10);
      if (v19 < 0) {
        char v8 = (void **)__p[0];
      }
      if (v9)
      {
        if ((SBYTE7(v14) & 0x80u) == 0) {
          uint64_t v10 = v13;
        }
        else {
          uint64_t v10 = (void **)v13[0];
        }
        memmove(v8, v10, v9);
      }
      strcpy((char *)v8 + v9, "at offset ");
      v20[0] = __p;
      v20[2] = &v22;
      __int16 v21 = 3076;
      malformedError(a2, (llvm::Twine *)v20);
    }
    v23[0] = 0;
    uint64_t result = (const char *)llvm::object::Archive::Child::Child(v13, v6, v25, (llvm::Error *)v23);
    uint64_t v7 = v23[0];
    if (v23[0])
    {
      v23[0] = 0;
      *(unsigned char *)(a2 + 40) |= 1u;
      uint64_t result = (const char *)v13[1];
      *(void *)a2 = v7;
      v13[1] = 0;
      if (result)
      {
        (*(void (**)(const char *))(*(void *)result + 16))(result);
        uint64_t result = (const char *)v23[0];
        if (v23[0]) {
          uint64_t result = (const char *)(*(uint64_t (**)(void))(*(void *)v23[0] + 8))(v23[0]);
        }
      }
    }
    else
    {
      *(unsigned char *)(a2 + 40) &= ~1u;
      *(_WORD *)(a2 + 32) = v15;
      long long v12 = *(_OWORD *)v13;
      long long v11 = v14;
      v13[1] = 0;
      *(_OWORD *)a2 = v12;
      *(_OWORD *)(a2 + 16) = v11;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 40) &= ~1u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  if (v26)
  {
    uint64_t result = v25;
    uint64_t v25 = 0;
    if (result) {
      return (const char *)(*(uint64_t (**)(const char *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *llvm::object::Archive::Child::getMemoryBufferRef@<X0>(llvm::object::Archive::Child *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::object::Archive::Child::getName(this, (uint64_t)v12);
  uint64_t v5 = v12[0];
  if (v13)
  {
    *(unsigned char *)(a2 + 32) |= 1u;
    *(void *)a2 = v5;
  }
  else
  {
    uint64_t v6 = v12[1];
    uint64_t result = llvm::object::Archive::Child::getBuffer(this, (uint64_t)&v10);
    if (v11)
    {
      __int16 v8 = 261;
      v7[0] = v5;
      v7[1] = v6;
      uint64_t v9 = v10;
      llvm::FileError::build((uint64_t)v7, 0, 0, &v9);
    }
    *(unsigned char *)(a2 + 32) &= ~1u;
    *(_OWORD *)a2 = v10;
    *(void *)(a2 + 16) = v5;
    *(void *)(a2 + 24) = v6;
  }
  return result;
}

uint64_t *llvm::object::Archive::Child::getAsBinary@<X0>(llvm::object::Archive::Child *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::object::Archive::Child::getMemoryBufferRef(a1, (uint64_t)v11);
  if (v12)
  {
    uint64_t v7 = *(void *)&v11[0];
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v7;
  }
  else
  {
    v8[0] = v11[0];
    v8[1] = v11[1];
    llvm::object::createBinary((uint64_t)v8, a2, 1, (uint64_t)&v9);
    if (v10)
    {
      uint64_t v6 = v9;
      *(unsigned char *)(a3 + 8) |= 1u;
    }
    else
    {
      *(unsigned char *)(a3 + 8) &= ~1u;
      uint64_t v6 = v9;
    }
    uint64_t v9 = 0;
    *(void *)a3 = v6;
    return llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected(&v9);
  }
  return result;
}

void llvm::object::Archive::create(uint64_t a1)
{
  uint64_t v1 = 0;
  if (*(void *)(a1 + 8) >= 8uLL && **(void **)a1 == 0xA3E66616769623CLL) {
    operator new();
  }
  operator new();
}

uint64_t llvm::object::Archive::Archive(uint64_t a1, long long *a2, llvm::Error *a3)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  long long v5 = *a2;
  long long v34 = a2[1];
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v34;
  *(void *)a1 = &unk_270DC0780;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v6 = (_OWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v7 = (_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 80) = 0u;
  __int16 v8 = (_OWORD *)(a1 + 80);
  *(_WORD *)(a1 + 96) = -1;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  if (*(void *)(a1 + 24) < 8uLL)
  {
LABEL_2:
    int v42 = 2;
    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>();
  }
  char v10 = *(void **)(a1 + 16);
  if (*v10 == 0xA3E6E6968743C21)
  {
    char v11 = *(unsigned char *)(a1 + 98) | 8;
    goto LABEL_10;
  }
  if (*v10 == 0xA3E686372613C21)
  {
    char v11 = *(unsigned char *)(a1 + 98) & 0xF7;
LABEL_10:
    *(unsigned char *)(a1 + 98) = v11 & 0xF8;
    llvm::object::Archive::child_begin((llvm::object::Archive *)a1, a3, 0, (uint64_t)&v46);
    if (*(void *)a3)
    {
LABEL_107:
      uint64_t v30 = v47;
      uint64_t v47 = 0;
      if (v30) {
        (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
      }
      goto LABEL_109;
    }
    llvm::object::Archive::child_end((uint64_t)&v42);
    if (v50 <= 7 && v45 < 8 || (uint64_t v12 = v44, (void)v48 == v44))
    {
      *(void *)a3 = 0;
LABEL_105:
      if (v43) {
        (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
      }
      goto LABEL_107;
    }
    uint64_t v13 = (llvm::object *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v47 + 24))(&v39);
    uint64_t v14 = (unsigned int *)v39;
    if (v41)
    {
      uint64_t v39 = 0;
      goto LABEL_25;
    }
    uint64_t v15 = v40;
    if (v40 == 12)
    {
      if (*(void *)v39 == 0x45444D59532E5F5FLL && *(_DWORD *)(v39 + 8) == 875978566)
      {
        char v17 = 4;
        goto LABEL_32;
      }
    }
    else
    {
      if (v40 == 9)
      {
        if (*(void *)v39 != 0x45444D59532E5F5FLL || *(unsigned char *)(v39 + 8) != 70) {
          goto LABEL_37;
        }
        char v17 = 2;
LABEL_32:
        *(unsigned char *)(a1 + 98) = *(unsigned char *)(a1 + 98) & 0xF8 | v17;
        llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v46, (uint64_t)&v37);
        if ((v38 & 1) == 0)
        {
          *uint64_t v6 = v37;
LABEL_34:
          llvm::fallible_iterator<llvm::object::Archive::ChildFallibleIterator>::operator++((llvm::object::Archive::ChildFallibleIterator *)&v46);
          uint64_t v19 = *(void *)a3;
          if (*(void *)a3) {
            goto LABEL_102;
          }
          *__int16 v8 = v48;
          *(_WORD *)(a1 + 96) = v49;
LABEL_101:
          *(void *)a3 = v19;
          goto LABEL_102;
        }
LABEL_100:
        uint64_t v19 = v37;
        goto LABEL_101;
      }
      if (v40 < 3)
      {
LABEL_41:
        if (v40 == 7)
        {
          if (*(_DWORD *)v39 != 1297699631 || *(_DWORD *)(v39 + 3) != 791950925)
          {
            BOOL v21 = 0;
            uint64_t v15 = 7;
            goto LABEL_64;
          }
        }
        else
        {
          if (v40 != 1)
          {
            BOOL v21 = 0;
            goto LABEL_61;
          }
          if (*(unsigned char *)v39 != 47)
          {
            BOOL v21 = 0;
LABEL_80:
            *(unsigned char *)(a1 + 98) = *(unsigned char *)(a1 + 98) & 0xF8 | v21;
LABEL_81:
            *__int16 v8 = v48;
            *(_WORD *)(a1 + 96) = v49;
LABEL_82:
            *(void *)a3 = 0;
            goto LABEL_102;
          }
        }
        llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v46, (uint64_t)&v37);
        if (v38) {
          goto LABEL_100;
        }
        *uint64_t v6 = v37;
        if (v15 == 7)
        {
          unsigned int v25 = 793991501;
          unsigned int v26 = bswap32(*v14);
          if (v26 == 793991501
            && (unsigned int v25 = 1295397935, v26 = bswap32(*(unsigned int *)((char *)v14 + 3)), v26 == 1295397935))
          {
            int v27 = 0;
          }
          else if (v26 < v25)
          {
            int v27 = -1;
          }
          else
          {
            int v27 = 1;
          }
          BOOL v21 = v27 == 0;
        }
        else
        {
          BOOL v21 = 0;
        }
        llvm::fallible_iterator<llvm::object::Archive::ChildFallibleIterator>::operator++((llvm::object::Archive::ChildFallibleIterator *)&v46);
        if (*(void *)a3) {
          goto LABEL_102;
        }
        if (v50 <= 7 && v45 < 8 || (void)v48 == v12) {
          goto LABEL_82;
        }
        uint64_t v13 = (llvm::object *)(*(void *(**)(long long *__return_ptr))(*(void *)v47 + 24))(&v35);
        uint64_t v14 = (unsigned int *)v35;
        if ((v36 & 1) == 0)
        {
          uint64_t v15 = *((void *)&v35 + 1);
LABEL_61:
          if (v15 != 2) {
            goto LABEL_64;
          }
          if (*(_WORD *)v14 != 12079)
          {
            uint64_t v15 = 2;
LABEL_64:
            if (*(unsigned char *)v14 != 47) {
              goto LABEL_80;
            }
            if (v15 == 1)
            {
              *(unsigned char *)(a1 + 98) = *(unsigned char *)(a1 + 98) & 0xF8 | 5;
              llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v46, (uint64_t)&v37);
              if ((v38 & 1) == 0)
              {
                *uint64_t v6 = v37;
                llvm::fallible_iterator<llvm::object::Archive::ChildFallibleIterator>::operator++((llvm::object::Archive::ChildFallibleIterator *)&v46);
                if (*(void *)a3) {
                  goto LABEL_102;
                }
                if (v50 <= 7 && v45 < 8 || (void)v48 == v12) {
                  goto LABEL_81;
                }
                (*(void (**)(long long *__return_ptr))(*(void *)v47 + 24))(&v35);
                llvm::Expected<llvm::StringRef>::moveAssign<llvm::StringRef>(&v39, &v35);
                if (v36)
                {
                  uint64_t v24 = v35;
                  *(void *)&long long v35 = 0;
                  if (v24) {
                    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
                  }
                }
                if (v41)
                {
                  uint64_t v19 = v39;
                  uint64_t v39 = 0;
                  goto LABEL_101;
                }
                if (v40 != 2 || *(_WORD *)v39 != 12079) {
                  goto LABEL_81;
                }
                llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v46, (uint64_t)&v35);
                if ((v36 & 1) == 0)
                {
                  *uint64_t v7 = v35;
                  llvm::fallible_iterator<llvm::object::Archive::ChildFallibleIterator>::operator++((llvm::object::Archive::ChildFallibleIterator *)&v46);
                  if (!*(void *)a3) {
                    goto LABEL_81;
                  }
LABEL_102:
                  if (v41)
                  {
                    uint64_t v29 = v39;
                    uint64_t v39 = 0;
                    if (v29) {
                      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
                    }
                  }
                  goto LABEL_105;
                }
                goto LABEL_139;
              }
            }
            else
            {
              *(void *)&v52.__val_ = llvm::object::object_category(v13);
              llvm::errorCodeToError((llvm *)3, v52, &v37);
            }
            goto LABEL_100;
          }
          *(unsigned char *)(a1 + 98) = *(unsigned char *)(a1 + 98) & 0xF8 | v21;
          llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v46, (uint64_t)&v37);
          if ((v38 & 1) == 0)
          {
            *uint64_t v7 = v37;
            goto LABEL_34;
          }
          goto LABEL_100;
        }
LABEL_25:
        *(void *)a3 = v14;
        goto LABEL_102;
      }
    }
LABEL_37:
    if (*(_WORD *)v39 != 12579 || *(unsigned char *)(v39 + 2) != 47) {
      goto LABEL_41;
    }
    *(unsigned char *)(a1 + 98) = *(unsigned char *)(a1 + 98) & 0xF8 | 2;
    llvm::object::Archive::Child::getName((llvm::object::Archive::Child *)&v46, (uint64_t)&v37);
    uint64_t v19 = v37;
    if (v38) {
      goto LABEL_101;
    }
    if (*((uint64_t *)&v37 + 1) > 15)
    {
      if (*((void *)&v37 + 1) != 19)
      {
        if (*((void *)&v37 + 1) != 16) {
          goto LABEL_138;
        }
        if (*(void *)v37 != 0x45444D59532E5F5FLL || *(void *)(v37 + 8) != 0x444554524F532046) {
          goto LABEL_138;
        }
        goto LABEL_136;
      }
      if (*(void *)v37 != 0x45444D59532E5F5FLL
        || *(void *)(v37 + 8) != 0x524F532034365F46
        || *(void *)(v37 + 11) != 0x444554524F532034)
      {
        goto LABEL_138;
      }
    }
    else
    {
      if (*((void *)&v37 + 1) == 9)
      {
        if (*(void *)v37 != 0x45444D59532E5F5FLL || *(unsigned char *)(v37 + 8) != 70) {
          goto LABEL_138;
        }
        goto LABEL_136;
      }
      if (*((void *)&v37 + 1) != 12) {
        goto LABEL_138;
      }
      if (*(void *)v37 != 0x45444D59532E5F5FLL || *(_DWORD *)(v37 + 8) != 875978566) {
        goto LABEL_138;
      }
    }
    *(unsigned char *)(a1 + 98) = *(unsigned char *)(a1 + 98) & 0xF8 | 4;
LABEL_136:
    llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v46, (uint64_t)&v35);
    if (v36)
    {
LABEL_139:
      uint64_t v19 = v35;
      goto LABEL_101;
    }
    *uint64_t v6 = v35;
    llvm::fallible_iterator<llvm::object::Archive::ChildFallibleIterator>::operator++((llvm::object::Archive::ChildFallibleIterator *)&v46);
    if (*(void *)a3) {
      goto LABEL_102;
    }
LABEL_138:
    *__int16 v8 = v48;
    *(_WORD *)(a1 + 96) = v49;
    goto LABEL_102;
  }
  if (*v10 != 0xA3E66616769623CLL) {
    goto LABEL_2;
  }
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a1 + 98) & 0xF0 | 6;
LABEL_109:
  if (!*(void *)a3) {
    *(void *)a3 = 0;
  }
  return a1;
}

void llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>()
{
}

uint64_t llvm::object::Archive::child_begin@<X0>(llvm::object::Archive *this@<X0>, llvm::Error *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if ((*(unsigned int (**)(llvm::object::Archive *))(*(void *)this + 32))(this))
  {
    return llvm::object::Archive::child_end(a4);
  }
  else
  {
    if (a3)
    {
      unint64_t v9 = *((void *)this + 10);
      char v10 = (llvm::Error *)*((void *)this + 11);
      __int16 v11 = *((_WORD *)this + 48);
      char v18 = this;
      v19[0] = 0;
      v19[1] = v9;
      v19[2] = v10;
      __int16 v20 = v11;
      llvm::object::Archive::createArchiveMemberHeader((llvm::object::Archive *)v19, (const char *)this, v9, v10);
    }
    uint64_t v12 = *((void *)this + 2);
    uint64_t v13 = (*(uint64_t (**)(llvm::object::Archive *))(*(void *)this + 40))(this);
    llvm::object::Archive::Child::Child(&v18, this, (const char *)(v12 + v13), a2);
    if (*(void *)a2)
    {
      llvm::object::Archive::child_end(a4);
    }
    else
    {
      llvm::object::Archive::Child::Child((uint64_t)v16, (uint64_t)&v18);
      __int16 v14 = v17;
      long long v15 = v16[1];
      *(_OWORD *)a4 = v16[0];
      *(_OWORD *)(a4 + 16) = v15;
      *(_WORD *)(a4 + 32) = v14;
      *(void *)(a4 + 40) = a2;
      *((void *)&v16[0] + 1) = 0;
    }
    uint64_t result = v19[0];
    v19[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    }
  }
  return result;
}

uint64_t llvm::object::Archive::child_end@<X0>(uint64_t a1@<X8>)
{
  memset(v6, 0, 32);
  llvm::object::Archive::Child::Child((uint64_t)v7, (uint64_t)v6);
  __int16 v3 = v8;
  long long v4 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = 0;
  *((void *)&v7[0] + 1) = 0;
  uint64_t result = *((void *)&v6[0] + 1);
  *((void *)&v6[0] + 1) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  return result;
}

__n128 llvm::object::Archive::Symbol::getMember@<Q0>(const llvm::object::Archive **this@<X0>, __n128 *a2@<X8>)
{
  __int16 v3 = *this;
  long long v4 = (unsigned int *)*((void *)*this + 6);
  int v5 = *((unsigned char *)*this + 98) & 7;
  if (v5 == 1)
  {
    uint64_t v7 = v4 + 2;
LABEL_13:
    unint64_t v8 = bswap64(*(void *)((char *)v7 + (8 * *((_DWORD *)this + 2))));
    goto LABEL_21;
  }
  if (v5 == 4 || v5 == 6)
  {
    uint64_t v7 = v4 + 2;
  }
  else
  {
    uint64_t v7 = v4 + 1;
    if ((*((unsigned char *)*this + 98) & 7) == 0)
    {
      unint64_t v8 = bswap32(*(_DWORD *)((char *)v7 + (4 * *((_DWORD *)this + 2))));
      goto LABEL_21;
    }
  }
  switch(v5)
  {
    case 2:
      unint64_t v8 = *(unsigned int *)((char *)v7 + (8 * *((_DWORD *)this + 2)) + 4);
      break;
    case 4:
      unint64_t v8 = *(void *)((char *)v7 + (16 * *((_DWORD *)this + 2)) + 8);
      break;
    case 6:
      goto LABEL_13;
    default:
      unsigned int v9 = *v4;
      char v10 = &v4[*v4 + 1];
      unsigned int v11 = *((_DWORD *)this + 2);
      if (v11 >= *v10 || (unsigned __int16 v12 = *((_WORD *)v10 + v11 + 2) - 1, v9 <= v12))
      {
        *(void *)&v20.__val_ = llvm::object::object_category((llvm::object *)this);
        llvm::errorCodeToError((llvm *)3, v20, a2);
        a2[2].n128_u8[8] |= 1u;
        return result;
      }
      unint64_t v8 = v7[v12];
      break;
  }
LABEL_21:
  __int16 v14 = (const char *)(*((void *)v3 + 2) + v8);
  unint64_t v19 = 0;
  llvm::object::Archive::Child::Child(v17, v3, v14, (llvm::Error *)&v19);
  unint64_t v15 = v19;
  if (v19)
  {
    unint64_t v19 = 0;
    a2[2].n128_u8[8] |= 1u;
    uint64_t v16 = *((void *)&v17[0] + 1);
    a2->n128_u64[0] = v15;
    *((void *)&v17[0] + 1) = 0;
    if (v16)
    {
      (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
      if (v19) {
        (*(void (**)(unint64_t))(*(void *)v19 + 8))(v19);
      }
    }
  }
  else
  {
    a2[2].n128_u8[8] &= ~1u;
    a2[2].n128_u16[0] = v18;
    __n128 result = (__n128)v17[1];
    *a2 = (__n128)v17[0];
    a2[1] = result;
  }
  return result;
}

uint64_t llvm::object::Archive::Symbol::getNext(llvm::object::Archive::Symbol *this)
{
  uint64_t v1 = *(void *)this;
  unint64_t v2 = *((void *)this + 1);
  if ((*(unsigned char *)(*(void *)this + 98) & 7) != 2)
  {
    unint64_t v3 = *(void *)(v1 + 56);
    if (v3 > HIDWORD(v2)) {
      memchr((void *)(*(void *)(v1 + 48) + HIDWORD(v2)), 0, v3 - HIDWORD(v2));
    }
  }
  return v1;
}

unint64_t llvm::object::Archive::getNumberOfSymbols(llvm::object::Archive *this)
{
  if (!*((void *)this + 7)) {
    return 0;
  }
  uint64_t v1 = (unsigned int *)*((void *)this + 6);
  switch(*((unsigned char *)this + 98) & 7)
  {
    case 0:
      unint64_t result = bswap32(*v1);
      break;
    case 1:
    case 6:
      unint64_t result = bswap64(*(void *)v1);
      break;
    case 2:
      unint64_t result = *v1 >> 3;
      break;
    case 4:
      unint64_t result = *(void *)v1 >> 4;
      break;
    default:
      unint64_t result = v1[*v1 + 1];
      break;
  }
  return result;
}

BOOL llvm::object::Archive::isEmpty(llvm::object::Archive *this)
{
  return *((void *)this + 3) == 8;
}

uint64_t llvm::object::BigArchive::BigArchive(uint64_t a1, long long *a2, llvm::Error *a3)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  long long v5 = a2[1];
  v52[0] = *a2;
  v52[1] = v5;
  uint64_t v6 = (void *)llvm::object::Archive::Archive(a1, v52, a3);
  *uint64_t v6 = &unk_270DC07C0;
  v6[17] = 0;
  uint64_t v7 = v6 + 17;
  v6[18] = 0;
  unsigned int v9 = (const char *)v6[2];
  unint64_t v8 = v6[3];
  v6[16] = v9;
  unint64_t v51 = v8;
  if (v8 <= 0x7F)
  {
    __int16 v58 = "malformed AIX big archive: incomplete fixed length header, the archive is only";
    *(void *)&long long v60 = &v51;
    __int16 v61 = 3075;
    v49[0] = &v58;
    v49[2] = " byte(s)";
    __int16 v50 = 770;
    char v10 = (llvm::Twine *)v49;
    goto LABEL_3;
  }
  uint64_t v11 = 20;
  __int16 v58 = v9 + 68;
  uint64_t v59 = 20;
  uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v58, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  unint64_t v53 = 0;
  if ((unint64_t)(last_not_of + 1) < 0x14) {
    uint64_t v11 = last_not_of + 1;
  }
  __int16 v58 = v9 + 68;
  uint64_t v59 = v11;
  if ((llvm::consumeUnsignedInteger((llvm *)&v58, (llvm::StringRef *)0xA, &v53, v13) & 1) != 0 || v59)
  {
    __int16 v61 = 1283;
    __int16 v58 = "malformed AIX big archive: first member offset \"";
    *(void *)&long long v60 = v9 + 68;
    *((void *)&v60 + 1) = v11;
    v47[0] = &v58;
    v47[2] = "\" is not a number";
    __int16 v48 = 770;
    malformedError((uint64_t)&v53, (llvm::Twine *)v47);
  }
  *uint64_t v7 = v53;
  uint64_t v14 = 20;
  __int16 v58 = v9 + 88;
  uint64_t v59 = 20;
  uint64_t v15 = llvm::StringRef::find_last_not_of(&v58, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  unint64_t v53 = 0;
  if ((unint64_t)(v15 + 1) < 0x14) {
    uint64_t v14 = v15 + 1;
  }
  __int16 v58 = v9 + 88;
  uint64_t v59 = v14;
  if ((llvm::consumeUnsignedInteger((llvm *)&v58, (llvm::StringRef *)0xA, &v53, v16) & 1) != 0 || v59)
  {
    __int16 v61 = 1283;
    __int16 v58 = "malformed AIX big archive: last member offset \"";
    *(void *)&long long v60 = v9 + 88;
    *((void *)&v60 + 1) = v14;
    v45[0] = &v58;
    void v45[2] = "\" is not a number";
    __int16 v46 = 770;
    malformedError((uint64_t)&v53, (llvm::Twine *)v45);
  }
  *(void *)(a1 + 144) = v53;
  __int16 v17 = v9 + 28;
  uint64_t v18 = 20;
  __int16 v58 = v17;
  uint64_t v59 = 20;
  uint64_t v19 = llvm::StringRef::find_last_not_of(&v58, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  unint64_t v53 = 0;
  if ((unint64_t)(v19 + 1) < 0x14) {
    uint64_t v18 = v19 + 1;
  }
  __int16 v58 = v17;
  uint64_t v59 = v18;
  if ((llvm::consumeUnsignedInteger((llvm *)&v58, (llvm::StringRef *)0xA, &v53, v20) & 1) != 0 || v59)
  {
    __int16 v61 = 1283;
    __int16 v58 = "malformed AIX big archive: global symbol table offset \"";
    *(void *)&long long v60 = v17;
    *((void *)&v60 + 1) = v18;
    v42[0] = &v58;
    void v42[2] = "\" is not a number";
    __int16 v43 = 770;
    malformedError((uint64_t)&v53, (llvm::Twine *)v42);
  }
  unint64_t v44 = v53;
  uint64_t v21 = *(void *)a3;
  if (!*(void *)a3)
  {
    if (v53)
    {
      uint64_t v22 = (char *)(v53 + 114);
      char v41 = (char *)(v53 + 114);
      if (v53 + 114 > v8)
      {
        char v36 = &v44;
        __int16 v37 = 3587;
        unint64_t v53 = (unint64_t)v35;
        char v55 = " and size 0x";
        __int16 v56 = 770;
        uint64_t v34 = 114;
        v35[0] = "global symbol table header at offset 0x";
        __int16 v58 = (const char *)&v53;
        *(void *)&long long v60 = &v34;
        __int16 v61 = 3586;
        v38[0] = &v58;
        void v38[2] = " goes past the end of file";
        __int16 v39 = 770;
        malformedError((uint64_t)&v40, (llvm::Twine *)v38);
      }
      uint64_t v24 = (const char *)(*(void *)(a1 + 16) + v53);
      uint64_t v25 = 20;
      __int16 v58 = v24;
      uint64_t v59 = 20;
      uint64_t v26 = llvm::StringRef::find_last_not_of(&v58, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
      unint64_t v53 = 0;
      if ((unint64_t)(v26 + 1) < 0x14) {
        uint64_t v25 = v26 + 1;
      }
      __int16 v58 = v24;
      uint64_t v59 = v25;
      if ((llvm::consumeUnsignedInteger((llvm *)&v58, (llvm::StringRef *)0xA, &v53, v27) & 1) != 0 || v59)
      {
        __int16 v61 = 1283;
        __int16 v58 = "malformed AIX big archive: global symbol table size \"";
        *(void *)&long long v60 = v24;
        *((void *)&v60 + 1) = v25;
        v32[0] = &v58;
        v32[2] = "\" is not a number";
        __int16 v33 = 770;
        char v10 = (llvm::Twine *)v32;
LABEL_3:
        malformedError((uint64_t)&v53, v10);
      }
      unint64_t v28 = v53;
      unint64_t v40 = v53;
      if ((unint64_t)&v22[v53] > v8)
      {
        v35[0] = "global symbol table content at offset 0x";
        char v36 = (unint64_t *)&v41;
        __int16 v37 = 3587;
        unint64_t v53 = (unint64_t)v35;
        char v55 = " and size 0x";
        __int16 v56 = 770;
        __int16 v58 = (const char *)&v53;
        *(void *)&long long v60 = &v40;
        __int16 v61 = 3586;
        v30[0] = &v58;
        v30[2] = " goes past the end of file";
        __int16 v31 = 770;
        malformedError((uint64_t)&v34, (llvm::Twine *)v30);
      }
      *(void *)(a1 + 48) = v24 + 114;
      *(void *)(a1 + 56) = v28;
      uint64_t v29 = 8 * llvm::object::Archive::getNumberOfSymbols((llvm::object::Archive *)a1) + 8;
      *(void *)(a1 + 64) = &v24[v29 + 114];
      *(void *)(a1 + 72) = v28 - v29;
    }
    llvm::object::Archive::child_begin((llvm::object::Archive *)a1, a3, 0, (uint64_t)&v58);
    if (!*(void *)a3)
    {
      llvm::object::Archive::child_end((uint64_t)&v53);
      if ((v62 > 7 || v57 >= 8) && (const char *)v60 != v55)
      {
        *(_OWORD *)(a1 + 80) = v60;
        *(_WORD *)(a1 + 96) = v61;
      }
      *(void *)a3 = 0;
      if (v54) {
        (*(void (**)(uint64_t))(*(void *)v54 + 16))(v54);
      }
    }
    if (v59) {
      (*(void (**)(uint64_t))(*(void *)v59 + 16))(v59);
    }
    uint64_t v21 = *(void *)a3;
  }
  if (!v21) {
    *(void *)a3 = 0;
  }
  return a1;
}

void llvm::object::Archive::~Archive(llvm::object::Archive *this)
{
  *(void *)this = &unk_270DC0780;
  uint64_t v1 = (void **)((char *)this + 104);
  std::vector<std::unique_ptr<llvm::MemoryBuffer>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

{
  void **v1;
  uint64_t vars8;

  *(void *)this = &unk_270DC0780;
  uint64_t v1 = (void **)((char *)this + 104);
  std::vector<std::unique_ptr<llvm::MemoryBuffer>>::__destroy_vector::operator()[abi:nn180100](&v1);
  JUMPOUT(0x263E500B0);
}

void llvm::object::Binary::initContent(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t llvm::object::Archive::getFirstChildOffset(llvm::object::Archive *this)
{
  return 8;
}

void llvm::object::ArchiveMemberHeader::clone(llvm::object::ArchiveMemberHeader *this)
{
}

void llvm::object::ArchiveMemberHeader::~ArchiveMemberHeader(llvm::object::ArchiveMemberHeader *this)
{
}

void llvm::object::BigArchiveMemberHeader::clone(llvm::object::BigArchiveMemberHeader *this)
{
}

void llvm::object::BigArchiveMemberHeader::~BigArchiveMemberHeader(llvm::object::BigArchiveMemberHeader *this)
{
}

void llvm::object::BigArchiveMemberHeader::isThin(unsigned char *a1@<X8>)
{
  a1[8] &= ~1u;
  *a1 = 0;
}

void llvm::object::BigArchive::~BigArchive(llvm::object::BigArchive *this)
{
  *(void *)this = &unk_270DC0780;
  uint64_t v1 = (void **)((char *)this + 104);
  std::vector<std::unique_ptr<llvm::MemoryBuffer>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

{
  void **v1;
  uint64_t vars8;

  *(void *)this = &unk_270DC0780;
  uint64_t v1 = (void **)((char *)this + 104);
  std::vector<std::unique_ptr<llvm::MemoryBuffer>>::__destroy_vector::operator()[abi:nn180100](&v1);
  JUMPOUT(0x263E500B0);
}

BOOL llvm::object::BigArchive::isEmpty(llvm::object::BigArchive *this)
{
  return (*(uint64_t (**)(llvm::object::BigArchive *))(*(void *)this + 40))(this) == 0;
}

uint64_t llvm::object::BigArchive::getFirstChildOffset(llvm::object::BigArchive *this)
{
  return *((void *)this + 17);
}

void std::vector<std::unique_ptr<llvm::MemoryBuffer>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    long long v4 = v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *long long v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t llvm::Expected<std::string>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v2 = *(void **)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(void *))(*(void *)v2 + 8))(v2);
    }
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned char *llvm::Expected<llvm::StringRef>::moveAssign<llvm::StringRef>(unsigned char *result, unsigned char *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    char v4 = result[16];
    if (v4)
    {
      unint64_t result = *(unsigned char **)result;
      *(void *)unint64_t v3 = 0;
      if (result)
      {
        unint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
        char v4 = v3[16];
      }
    }
    char v5 = a2[16];
    v3[16] = v4 & 0xFE | v5 & 1;
    if (v5)
    {
      uint64_t v6 = *(void *)a2;
      *(void *)a2 = 0;
      *(void *)unint64_t v3 = v6;
    }
    else
    {
      *(_OWORD *)unint64_t v3 = *(_OWORD *)a2;
    }
  }
  return result;
}

uint64_t llvm::object::createBinary@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t v8 = (llvm::object *)llvm::identify_magic(*(unsigned __int8 **)a1, *(void *)(a1 + 8));
  switch((int)v8)
  {
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 24:
    case 25:
    case 26:
    case 28:
    case 29:
    case 30:
      long long v9 = *(_OWORD *)(a1 + 16);
      v20[0] = *(_OWORD *)a1;
      v20[1] = v9;
      uint64_t result = (uint64_t)llvm::object::SymbolicFile::createSymbolicFile((uint64_t)v20, v8, a2, a3, (uint64_t)&v22);
      goto LABEL_3;
    case 2:
      long long v11 = *(_OWORD *)(a1 + 16);
      v21[0] = *(_OWORD *)a1;
      v21[1] = v11;
      llvm::object::Archive::create((uint64_t)v21);
    case 20:
      long long v12 = *(_OWORD *)(a1 + 16);
      v19[2] = *(_OWORD *)a1;
      void v19[3] = v12;
      llvm::object::MachOUniversalBinary::create();
    case 22:
      long long v13 = *(_OWORD *)(a1 + 16);
      v17[0] = *(_OWORD *)a1;
      v17[1] = v13;
      uint64_t result = llvm::object::MinidumpFile::create((uint64_t *)v17, (uint64_t)&v22);
LABEL_3:
      *(unsigned char *)(a4 + 8) = *(unsigned char *)(a4 + 8) & 0xFE | v23 & 1;
      *(void *)a4 = v22;
      break;
    case 27:
      long long v14 = *(_OWORD *)(a1 + 16);
      v19[0] = *(_OWORD *)a1;
      v19[1] = v14;
      llvm::object::WindowsResource::createWindowsResource(v19);
    case 32:
      llvm::object::TapiUniversal::create();
    case 34:
      long long v15 = *(_OWORD *)(a1 + 16);
      v18[0] = *(_OWORD *)a1;
      v18[1] = v15;
      llvm::object::OffloadBinary::create((uint64_t)v18, (uint64_t)&v22);
      *(unsigned char *)(a4 + 8) = *(unsigned char *)(a4 + 8) & 0xFE | v23 & 1;
      uint64_t v16 = v22;
      uint64_t v22 = 0;
      *(void *)a4 = v16;
      uint64_t result = (uint64_t)llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected(&v22);
      break;
    default:
      *(void *)&v25.__val_ = llvm::object::object_category(v8);
      uint64_t result = llvm::errorCodeToError((llvm *)2, v25, (void *)a4);
      *(unsigned char *)(a4 + 8) |= 1u;
      break;
  }
  return result;
}

uint64_t llvm::object::COFFObjectFile::moveSymbolNext(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 112);
  if (*(void *)(result + 96)) {
    unint64_t v3 = *(void *)a2 + 18 * *(unsigned __int8 *)(*(void *)a2 + 17) + 18;
  }
  else {
    unint64_t v3 = *(void *)a2 + 20 * *(unsigned __int8 *)(*(void *)a2 + 19) + 20;
  }
  if (v2 >= v3) {
    unint64_t v2 = v3;
  }
  *(void *)a2 = v2;
  return result;
}

uint64_t llvm::object::COFFObjectFile::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

uint64_t llvm::object::COFFObjectFile::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = (v2 - 1) | ((unint64_t)(v2 - 1) >> 1) | (((v2 - 1) | ((unint64_t)(v2 - 1) >> 1)) >> 2);
  unint64_t v4 = v3 | (v3 >> 4) | ((v3 | (v3 >> 4)) >> 8);
  unint64_t v5 = v4 | (v4 >> 16);
  if (v5 > 0x1E) {
    return 32;
  }
  else {
    return v5 + 1;
  }
}

void *llvm::object::COFFObjectFile::getSymbolAddress@<X0>(llvm::object *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD v18[2] = *MEMORY[0x263EF8340];
  uint64_t result = llvm::object::ObjectFile::getSymbolValue((uint64_t)a1, a2, (uint64_t)v18);
  uint64_t v7 = v18[0];
  if (!*((void *)a1 + 12))
  {
    uint64_t v14 = 0;
    uint64_t v15 = a2;
LABEL_11:
    int v8 = *(_DWORD *)(a2 + 12);
    int v9 = *(unsigned __int8 *)(a2 + 18);
    if (v9 == 2)
    {
      if (!v8)
      {
        if (*(_DWORD *)(a2 + 8)) {
          uint64_t result = (void *)llvm::object::COFFSymbolRef::isCommon((llvm::object::COFFSymbolRef *)&v14);
        }
        goto LABEL_21;
      }
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v14 = a2;
  uint64_t v15 = 0;
  if (!a2) {
    goto LABEL_11;
  }
  if (*(__int16 *)(a2 + 12) >= 0xFFFFFF00) {
    int v8 = *(__int16 *)(a2 + 12);
  }
  else {
    int v8 = *(unsigned __int16 *)(a2 + 12);
  }
  int v9 = *(unsigned __int8 *)(a2 + 16);
  if (v9 == 2)
  {
    if (!*(_WORD *)(a2 + 12) && !*(_DWORD *)(a2 + 8)) {
      goto LABEL_21;
    }
    goto LABEL_16;
  }
LABEL_15:
  if (v9 == 105)
  {
LABEL_21:
    *(unsigned char *)(a3 + 8) &= ~1u;
    *(void *)a3 = v7;
    return result;
  }
LABEL_16:
  uint64_t result = (void *)llvm::object::COFFSymbolRef::isCommon((llvm::object::COFFSymbolRef *)&v14);
  if ((result & 1) != 0 || v8 <= 0) {
    goto LABEL_21;
  }
  uint64_t result = llvm::object::COFFObjectFile::getSection(a1, v8, (uint64_t)&v16);
  uint64_t v10 = v16;
  if (v17)
  {
    char v13 = *(unsigned char *)(a3 + 8) | 1;
  }
  else
  {
    uint64_t v11 = *((void *)a1 + 8);
    if (v11)
    {
      uint64_t v12 = *(unsigned int *)(v11 + 28);
    }
    else
    {
      uint64_t v12 = *((void *)a1 + 9);
      if (v12) {
        uint64_t v12 = *(void *)(v12 + 24);
      }
    }
    uint64_t v10 = v7 + *(unsigned int *)(v16 + 12) + v12;
    char v13 = *(unsigned char *)(a3 + 8) & 0xFE;
  }
  *(unsigned char *)(a3 + 8) = v13;
  *(void *)a3 = v10;
  return result;
}

llvm::object *llvm::object::COFFObjectFile::getSection@<X0>(llvm::object *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 <= 0)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v4 = *((void *)this + 6);
    if (v4)
    {
      unsigned int v5 = *(unsigned __int16 *)(v4 + 2);
      if (v5 == 0xFFFF) {
        unsigned int v5 = 0;
      }
    }
    else
    {
      unsigned int v5 = *(_DWORD *)(*((void *)this + 7) + 44);
    }
    if (v5 < a2)
    {
      llvm::object::object_category(this);
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    uint64_t v6 = *((void *)this + 11) + 40 * (a2 - 1);
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v6;
  return this;
}

uint64_t llvm::object::COFFObjectFile::getSymbolType@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(result + 96))
  {
    uint64_t v13 = a2;
    uint64_t v14 = 0;
    if (a2)
    {
      if (*(__int16 *)(a2 + 12) >= 0xFFFFFF00) {
        int v4 = *(__int16 *)(a2 + 12);
      }
      else {
        int v4 = *(unsigned __int16 *)(a2 + 12);
      }
      if ((*(_WORD *)(a2 + 14) & 0xF0) != 0x20)
      {
        int v5 = *(unsigned __int8 *)(a2 + 16);
        if (v5 == 2)
        {
          if (!*(_WORD *)(a2 + 12) && !*(_DWORD *)(a2 + 8)) {
            goto LABEL_19;
          }
          goto LABEL_20;
        }
LABEL_18:
        if (v5 == 105) {
          goto LABEL_19;
        }
        goto LABEL_20;
      }
LABEL_13:
      *(unsigned char *)(a3 + 8) &= ~1u;
      int v6 = 5;
      goto LABEL_46;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = a2;
  }
  if ((*(_WORD *)(a2 + 16) & 0xF0) == 0x20) {
    goto LABEL_13;
  }
  int v4 = *(_DWORD *)(a2 + 12);
  int v5 = *(unsigned __int8 *)(a2 + 18);
  if (v5 != 2) {
    goto LABEL_18;
  }
  if (!v4)
  {
    if (!*(_DWORD *)(a2 + 8))
    {
LABEL_19:
      int v6 = 0;
      *(unsigned char *)(a3 + 8) &= ~1u;
      goto LABEL_46;
    }
    int v4 = 0;
  }
LABEL_20:
  uint64_t result = llvm::object::COFFSymbolRef::isCommon((llvm::object::COFFSymbolRef *)&v13);
  if (result)
  {
    *(unsigned char *)(a3 + 8) &= ~1u;
    int v6 = 2;
  }
  else
  {
    if (v13) {
      uint64_t v7 = (unsigned char *)(v13 + 16);
    }
    else {
      uint64_t v7 = (unsigned char *)(v14 + 18);
    }
    if (*v7 == 103)
    {
      *(unsigned char *)(a3 + 8) &= ~1u;
      int v6 = 4;
    }
    else if (v4 == -2 {
           || (!v13
    }
             ? ((int v8 = *(unsigned __int8 *)(v14 + 18), v8 != 2) ? (v9 = 0) : (v9 = *(_DWORD *)(v14 + 12) == -1),
                uint64_t v10 = (unsigned __int8 *)(v14 + 19))
             : ((int v8 = *(unsigned __int8 *)(v13 + 16), v8 != 2) ? (v9 = 0) : (v9 = *(__int16 *)(v13 + 12) == -1),
                uint64_t v10 = (unsigned __int8 *)(v13 + 17)),
               (int v11 = *v10, v8 == 3) ? (v12 = 1) : (v12 = v9),
               v11 && v12))
    {
      *(unsigned char *)(a3 + 8) &= ~1u;
      int v6 = 3;
    }
    else
    {
      *(unsigned char *)(a3 + 8) &= ~1u;
      if (v4 < 1) {
        int v6 = 1;
      }
      else {
        int v6 = 2;
      }
    }
  }
LABEL_46:
  *(_DWORD *)a3 = v6;
  return result;
}

BOOL llvm::object::COFFObjectFile::getSymbolFlags@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 96);
  if (!v4)
  {
    uint64_t v28 = 0;
    uint64_t v29 = a2;
LABEL_6:
    uint64_t v7 = 0;
    int v6 = (unsigned char *)(a2 + 18);
    int v5 = 1;
    goto LABEL_7;
  }
  uint64_t v28 = a2;
  uint64_t v29 = 0;
  if (!a2)
  {
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  int v5 = 0;
  uint64_t v4 = a2;
  int v6 = (unsigned char *)(a2 + 16);
  uint64_t v7 = a2;
  a2 = 0;
LABEL_7:
  if (*v6 == 2) {
    goto LABEL_11;
  }
  int v8 = (unsigned char *)(v7 + 16);
  if (v5) {
    int v8 = (unsigned char *)(a2 + 18);
  }
  if (*v8 == 105)
  {
LABEL_11:
    int v9 = 2;
    if (v5) {
      goto LABEL_12;
    }
  }
  else
  {
    int v9 = 0;
    if (v5)
    {
LABEL_12:
      if (*(unsigned char *)(a2 + 19) && *(unsigned char *)(a2 + 18) == 105)
      {
        if (*(_DWORD *)(a2 + 24) == 3) {
          int v10 = 4;
        }
        else {
          int v10 = 5;
        }
        v9 |= v10;
      }
      if (*(_DWORD *)(a2 + 12) == -1) {
        v9 |= 8u;
      }
      int v11 = (unsigned __int8 *)(a2 + 18);
      goto LABEL_33;
    }
  }
  if (*(unsigned char *)(v7 + 17) && *(unsigned char *)(v7 + 16) == 105)
  {
    if (*(_DWORD *)(v7 + 22) == 3) {
      int v12 = 4;
    }
    else {
      int v12 = 5;
    }
    v9 |= v12;
  }
  unsigned int v13 = *(unsigned __int16 *)(v7 + 12);
  int v14 = v9 | 8;
  if (v13 != 0xFFFF) {
    int v14 = v9;
  }
  if (v13 >> 8 >= 0xFF) {
    int v9 = v14;
  }
  int v11 = (unsigned __int8 *)(v7 + 16);
LABEL_33:
  int v15 = *v11;
  BOOL v16 = v15 == 103;
  if (v4)
  {
    int v17 = *(unsigned __int8 *)(v4 + 16);
    BOOL v18 = v17 == 2 && *(__int16 *)(v4 + 12) == -1;
    uint64_t v19 = (unsigned __int8 *)(v4 + 17);
  }
  else
  {
    int v17 = *(unsigned __int8 *)(a2 + 18);
    BOOL v18 = v17 == 2 && *(_DWORD *)(a2 + 12) == -1;
    uint64_t v19 = (unsigned __int8 *)(a2 + 19);
  }
  int v20 = *v19;
  int v21 = v17 == 3 || v18;
  if (v15 == 103) {
    int v22 = 1;
  }
  else {
    int v22 = v21;
  }
  if (v20) {
    int v23 = v22;
  }
  else {
    int v23 = v16;
  }
  if (v23) {
    int v24 = v9 | 0x80;
  }
  else {
    int v24 = v9;
  }
  BOOL result = llvm::object::COFFSymbolRef::isCommon((llvm::object::COFFSymbolRef *)&v28);
  int v26 = v24 | 0x10;
  if (!result) {
    int v26 = v24;
  }
  uint64_t v27 = v28;
  if (v28)
  {
    if (*(unsigned char *)(v28 + 16) == 2 && !*(_WORD *)(v28 + 12)) {
LABEL_62:
    }
      v26 |= *(_DWORD *)(v27 + 8) == 0;
  }
  else
  {
    uint64_t v27 = v29;
    if (*(unsigned char *)(v29 + 18) == 2 && !*(_DWORD *)(v29 + 12)) {
      goto LABEL_62;
    }
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v26;
  return result;
}

uint64_t llvm::object::COFFObjectFile::getCommonSymbolSizeImpl(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

llvm::object *llvm::object::COFFObjectFile::getSymbolSection@<X0>(llvm::object::COFFObjectFile *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*((void *)this + 12) && a2)
  {
    int v5 = *(unsigned __int16 *)(a2 + 12);
    if ((unsigned __int16)(v5 + 256) < 0x101u)
    {
LABEL_4:
      BOOL result = (llvm::object *)(*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(void *)this + 360))(this);
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)a3 = result;
      *(void *)(a3 + 8) = v7;
      return result;
    }
  }
  else
  {
    int v5 = *(_DWORD *)(a2 + 12);
    if (v5 <= 0) {
      goto LABEL_4;
    }
  }
  BOOL result = llvm::object::COFFObjectFile::getSection(this, v5, (uint64_t)&v9);
  uint64_t v8 = v9;
  if (v10)
  {
    *(unsigned char *)(a3 + 16) |= 1u;
  }
  else
  {
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)(a3 + 8) = this;
  }
  *(void *)a3 = v8;
  return result;
}

void llvm::object::COFFObjectFile::moveSectionNext(uint64_t a1, void *a2)
{
  *a2 += 40;
}

void llvm::object::COFFObjectFile::getSectionName(llvm::object::COFFObjectFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)BOOL v18 = a2;
  uint64_t v19 = 8;
  char v22 = 0;
  llvm::StringRef::split((uint64_t *)v18, &v22, 1uLL, (uint64_t)&v20);
  uint64_t v7 = v20;
  unint64_t v8 = v21;
  if (v21 && *(unsigned char *)v20 == 47)
  {
    unint64_t v9 = v21 - 2;
    if (v21 >= 2 && *(_WORD *)v20 == 12079)
    {
      if (v9 > 6) {
        goto LABEL_12;
      }
      unint64_t v11 = 0;
      if (v21 != 2)
      {
        int v14 = (char *)(v20 + 2);
        do
        {
          uint64_t v15 = *v14;
          unsigned int v16 = *v14;
          if (*v14 < 65)
          {
            if ((char)v16 < 48)
            {
              if (v16 == 43)
              {
                uint64_t v17 = 62;
              }
              else
              {
                if (v16 != 47) {
                  goto LABEL_12;
                }
                uint64_t v17 = 63;
              }
            }
            else
            {
              if (v16 > 0x39) {
                goto LABEL_12;
              }
              uint64_t v17 = v15 + 4;
            }
          }
          else if (v16 > 0x5A)
          {
            if (v16 - 97 > 0x19) {
              goto LABEL_12;
            }
            uint64_t v17 = v15 - 71;
          }
          else
          {
            uint64_t v17 = v15 - 65;
          }
          unint64_t v11 = v17 + (v11 << 6);
          ++v14;
          --v9;
        }
        while (v9);
        if (HIDWORD(v11))
        {
LABEL_12:
          unsigned int v13 = llvm::object::object_category(v5);
          uint64_t v20 = 3;
          unint64_t v21 = (unint64_t)v13;
          *(void *)BOOL v18 = "invalid section name";
          llvm::make_error<llvm::StringError,char const*&,std::error_code>();
        }
      }
    }
    else
    {
      *(void *)BOOL v18 = 0;
      ++v20;
      --v21;
      uint64_t v10 = llvm::consumeUnsignedInteger((llvm *)&v20, (llvm::StringRef *)0xA, (unint64_t *)v18, v6);
      if ((v10 & 1) != 0 || v21 || (LODWORD(v11) = v18[0], v18[1]))
      {
        int v12 = llvm::object::object_category((llvm::object *)v10);
        uint64_t v20 = 3;
        unint64_t v21 = (unint64_t)v12;
        *(void *)BOOL v18 = "invalid section name";
        llvm::make_error<llvm::StringError,char const*&,std::error_code>();
      }
    }
    llvm::object::COFFObjectFile::getString(a1, v11, a3);
  }
  else
  {
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = v8;
  }
}

uint64_t llvm::object::COFFObjectFile::getSectionAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 + 28);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 72);
    if (v3) {
      uint64_t v3 = *(void *)(v3 + 24);
    }
  }
  return v3 + *(unsigned int *)(a2 + 12);
}

unint64_t llvm::object::COFFObjectFile::getSectionIndex(uint64_t a1, uint64_t a2)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((a2 - *(void *)(a1 + 88)) >> 3);
}

uint64_t llvm::object::COFFObjectFile::getSectionSize(void *a1, uint64_t a2)
{
  if ((a1[8] || a1[9]) && a1[2])
  {
    unsigned int v2 = *(_DWORD *)(a2 + 16);
    if (v2 >= *(_DWORD *)(a2 + 8)) {
      return *(unsigned int *)(a2 + 8);
    }
  }
  else
  {
    return *(unsigned int *)(a2 + 16);
  }
  return v2;
}

double llvm::object::COFFObjectFile::getSectionContents@<D0>(llvm::object *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  long long v7 = 0uLL;
  llvm::object::COFFObjectFile::getSectionContents(a1, a2, (unint64_t *)&v7, &v6);
  uint64_t v5 = v6;
  if (v6)
  {
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v5;
  }
  else
  {
    *(unsigned char *)(a3 + 16) &= ~1u;
    double result = *(double *)&v7;
    *(_OWORD *)a3 = v7;
  }
  return result;
}

llvm::object *llvm::object::COFFObjectFile::getSectionContents@<X0>(llvm::object *result@<X0>, _DWORD *a2@<X1>, unint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a2[5];
  if (!v5) {
    goto LABEL_14;
  }
  uint64_t v7 = *((void *)result + 2);
  unint64_t v8 = v7 + v5;
  if (*((void *)result + 8))
  {
    if (v7)
    {
LABEL_4:
      unsigned int v9 = a2[4];
      if (v9 >= a2[2]) {
        unsigned int v9 = a2[2];
      }
      goto LABEL_12;
    }
  }
  else
  {
    if (*((void *)result + 9)) {
      BOOL v10 = v7 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10) {
      goto LABEL_4;
    }
  }
  unsigned int v9 = a2[4];
LABEL_12:
  long long v11 = *((_OWORD *)result + 2);
  unint64_t v12 = v9;
  v13[0] = *((_OWORD *)result + 1);
  v13[1] = v11;
  double result = llvm::object::Binary::checkOffset((llvm::object *)v13, v8, v9, a4);
  if (*a4) {
    return result;
  }
  *a3 = v8;
  a3[1] = v12;
LABEL_14:
  *a4 = 0;
  return result;
}

uint64_t llvm::object::COFFObjectFile::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 36);
  uint64_t result = 1;
  if ((v2 & 8) == 0)
  {
    BOOL v4 = ((v2 >> 20) & 0xF) == 0;
    unsigned int v5 = 1 << (((v2 >> 20) & 0xF) - 1);
    if (v4) {
      return 16;
    }
    else {
      return v5;
    }
  }
  return result;
}

uint64_t llvm::object::COFFObjectFile::isSectionCompressed()
{
  return 0;
}

uint64_t llvm::object::COFFObjectFile::isSectionText(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 36) >> 5) & 1;
}

uint64_t llvm::object::COFFObjectFile::isSectionData(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 36) >> 6) & 1;
}

BOOL llvm::object::COFFObjectFile::isSectionBSS(uint64_t a1, uint64_t a2)
{
  return (~*(_DWORD *)(a2 + 36) & 0xC0000080) == 0;
}

uint64_t llvm::object::COFFObjectFile::isDebugSection(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 144))(v4);
  if (v5)
  {
    uint64_t v3 = v4[0];
    v4[0] = 0;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v3);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    if (v5)
    {
      uint64_t result = v4[0];
      v4[0] = 0;
      if (!result) {
        return result;
      }
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    }
    return 0;
  }
  if (v4[1] < 6uLL) {
    return 0;
  }
  return *(_DWORD *)v4[0] == 1650811950 && *(_WORD *)(v4[0] + 4) == 26485;
}

BOOL llvm::object::COFFObjectFile::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 20) == 0;
}

unint64_t llvm::object::COFFObjectFile::section_rel_begin(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a1 + 32);
  v5[0] = *(_OWORD *)(a1 + 16);
  v5[1] = v3;
  unint64_t result = getFirstReloc(a2, v5, *(void *)(a1 + 16));
  if (result)
  {
    if (*(_DWORD *)(a2 + 12)) {
      llvm::report_fatal_error((llvm *)"Sections with relocations should have an address of 0", (const llvm::Twine *)1);
    }
  }
  return result;
}

unint64_t getFirstReloc(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  v14[0] = *a2;
  v14[1] = v6;
  unsigned int NumberOfRelocations = getNumberOfRelocations(a1, v14, a3);
  if (!NumberOfRelocations) {
    return 0;
  }
  unint64_t v8 = a3 + *(unsigned int *)(a1 + 24);
  if (*(unsigned char *)(a1 + 39)) {
    v8 += 10 * (*(_WORD *)(a1 + 32) == 0xFFFF);
  }
  long long v9 = a2[1];
  v12[0] = *a2;
  v12[1] = v9;
  llvm::object::Binary::checkOffset((llvm::object *)v12, v8, 10 * NumberOfRelocations, &v13);
  uint64_t v10 = v13;
  if (v13)
  {
    uint64_t v13 = 0;
    uint64_t v15 = v10;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v15);
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    return 0;
  }
  return v8;
}

unint64_t llvm::object::COFFObjectFile::section_rel_end(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  long long v4 = *(_OWORD *)(a1 + 32);
  v8[0] = *(_OWORD *)(a1 + 16);
  v8[1] = v4;
  unint64_t result = getFirstReloc(a2, v8, *(uint64_t *)&v8[0]);
  if (result)
  {
    long long v6 = *(_OWORD *)(v3 + 16);
    v7[0] = *(_OWORD *)v3;
    v7[1] = v6;
    result += 10 * getNumberOfRelocations(a2, v7, *(void *)v3);
  }
  return result;
}

uint64_t getNumberOfRelocations(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if ((*(unsigned char *)(a1 + 39) & 1) == 0) {
    return *(unsigned __int16 *)(a1 + 32);
  }
  uint64_t result = *(unsigned __int16 *)(a1 + 32);
  if (result == 0xFFFF)
  {
    long long v5 = a2[1];
    v9[0] = *a2;
    v9[1] = v5;
    long long v6 = (_DWORD *)(a3 + *(unsigned int *)(a1 + 24));
    llvm::object::Binary::checkOffset((llvm::object *)v9, (unint64_t)v6, 0xAuLL, &v8);
    uint64_t v7 = v8;
    if (v8)
    {
      uint64_t v8 = 0;
      *(void *)&v9[0] = v7;
      llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)v9);
      if (*(void *)&v9[0]) {
        (*(void (**)(void))(**(void **)&v9[0] + 8))(*(void *)&v9[0]);
      }
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      return 0;
    }
    else
    {
      return (*v6 - 1);
    }
  }
  return result;
}

llvm::object *llvm::object::COFFObjectFile::initSymbolTablePtr(llvm::object::COFFObjectFile *this, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  if (!v4)
  {
    uint64_t v8 = (void *)(a2 + 56);
    uint64_t v7 = *(void *)(a2 + 56);
    if (!v7) {
      goto LABEL_35;
    }
    long long v9 = (void *)(a2 + 104);
    long long v36 = *(_OWORD *)(a2 + 16);
    long long v37 = *(_OWORD *)(a2 + 32);
    uint64_t v10 = *(void *)(a2 + 16);
    unint64_t v11 = *(void *)(a2 + 96);
LABEL_6:
    uint64_t v12 = 0;
    uint64_t v13 = (unsigned int *)(v7 + 48);
    int v14 = 1;
    goto LABEL_7;
  }
  int v5 = *(unsigned __int16 *)(v4 + 2);
  if (v5 == 0xFFFF) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 8);
  }
  BOOL v18 = (long long *)(a2 + 16);
  unint64_t v11 = *(void *)(a2 + 16) + v6;
  if ((*(void *)(a2 + 96) || *(void *)(a2 + 104)) && v5 != 0xFFFF) {
    unsigned int v19 = *(_DWORD *)(v4 + 12);
  }
  else {
    unsigned int v19 = 0;
  }
  long long v20 = *(_OWORD *)(a2 + 32);
  long long v38 = *v18;
  long long v39 = v20;
  uint64_t result = llvm::object::Binary::checkOffset((llvm::object *)&v38, v11, 18 * v19, this);
  if (*(void *)this) {
    return result;
  }
  *(void *)(a2 + 96) = v11;
  *(void *)this = 0;
  uint64_t v8 = (void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 48);
  if (!v7)
  {
LABEL_31:
    if (v12)
    {
      if (*(__int16 *)(v12 + 2) == -1)
      {
        int v24 = 0;
        int v26 = 0;
        goto LABEL_37;
      }
      int v24 = 0;
      std::error_code v25 = (int *)(v12 + 8);
LABEL_36:
      int v26 = *v25;
LABEL_37:
      if (*(void *)(a2 + 96) || *(void *)(a2 + 104))
      {
        if (v24)
        {
          uint64_t v27 = (int *)(*v8 + 52);
LABEL_43:
          int v28 = *v27;
          goto LABEL_45;
        }
        if (*(__int16 *)(v12 + 2) != -1)
        {
          uint64_t v27 = (int *)(v12 + 12);
          goto LABEL_43;
        }
      }
      int v28 = 0;
LABEL_45:
      if (v24) {
        int v29 = 20;
      }
      else {
        int v29 = 18;
      }
      long long v30 = *(_OWORD *)(a2 + 32);
      __int16 v31 = (unsigned int *)(*(void *)(a2 + 16) + (v26 + v28 * v29));
      long long v38 = *(_OWORD *)(a2 + 16);
      long long v39 = v30;
      uint64_t result = llvm::object::Binary::checkOffset((llvm::object *)&v38, (unint64_t)v31, 4uLL, this);
      if (!*(void *)this)
      {
        *(void *)this = 0;
        unint64_t v32 = *v31;
        *(_DWORD *)(a2 + 120) = v32;
        long long v33 = *(_OWORD *)(a2 + 32);
        long long v38 = *(_OWORD *)(a2 + 16);
        long long v39 = v33;
        uint64_t result = llvm::object::Binary::checkOffset((llvm::object *)&v38, (unint64_t)v31, v32, this);
        if (!*(void *)this)
        {
          *(void *)(a2 + 112) = v31;
          *(void *)this = 0;
          unsigned int v34 = *(_DWORD *)(a2 + 120);
          if (v34 > 3)
          {
            if (v34 != 4)
            {
              if (*((unsigned char *)v31 + v34 - 1))
              {
                long long v35 = llvm::object::object_category(result);
                *(void *)&long long v38 = 3;
                *((void *)&v38 + 1) = v35;
                unint64_t v40 = "string table missing null terminator";
                llvm::make_error<llvm::StringError,char const*&,std::error_code>();
              }
            }
          }
          else
          {
            *(_DWORD *)(a2 + 120) = 4;
          }
          *(void *)this = 0;
        }
      }
      return result;
    }
    uint64_t v7 = *v8;
LABEL_35:
    uint64_t v12 = 0;
    std::error_code v25 = (int *)(v7 + 48);
    int v24 = 1;
    goto LABEL_36;
  }
  long long v9 = (void *)(a2 + 104);
  long long v36 = *v18;
  long long v37 = *(_OWORD *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 16);
  if (!v12) {
    goto LABEL_6;
  }
  if (*(__int16 *)(v12 + 2) == -1)
  {
    int v14 = 0;
    unsigned int v15 = 0;
    goto LABEL_8;
  }
  int v14 = 0;
  uint64_t v13 = (unsigned int *)(v12 + 8);
LABEL_7:
  unsigned int v15 = *v13;
LABEL_8:
  uint64_t v16 = v10 + v15;
  if (v11 || *v9)
  {
    if (v14)
    {
      uint64_t v17 = (unsigned int *)(v7 + 52);
LABEL_25:
      unsigned int v22 = *v17;
      goto LABEL_27;
    }
    if (*(__int16 *)(v12 + 2) != -1)
    {
      uint64_t v17 = (unsigned int *)(v12 + 12);
      goto LABEL_25;
    }
  }
  unsigned int v22 = 0;
LABEL_27:
  unsigned int v23 = 18;
  if (v14) {
    unsigned int v23 = 20;
  }
  long long v38 = v36;
  long long v39 = v37;
  uint64_t result = llvm::object::Binary::checkOffset((llvm::object *)&v38, v10 + v15, v22 * (unint64_t)v23, this);
  if (!*(void *)this)
  {
    *(void *)(a2 + 104) = v16;
    *(void *)this = 0;
    uint64_t v12 = *(void *)(a2 + 48);
    goto LABEL_31;
  }
  return result;
}

llvm::object *llvm::object::COFFObjectFile::getRvaPtr(llvm::object::COFFObjectFile *this, void *a2, unint64_t *a3, char *a4, uint64_t a5)
{
  unsigned int v7 = a3;
  uint64_t v10 = (llvm::object *)(*(uint64_t (**)(void *))(*a2 + 352))(a2);
  uint64_t v12 = v11;
  uint64_t result = (llvm::object *)(*(uint64_t (**)(void *))(*a2 + 360))(a2);
  unsigned int v34 = v10;
  uint64_t v35 = v12;
  if (v12 == v14 && v10 == result)
  {
LABEL_15:
    unsigned int v23 = llvm::object::object_category(result);
    if (a5)
    {
      uint64_t v43 = 3;
      unint64_t v44 = v23;
      __int16 v31 = 0;
      unint64_t v32 = 0;
      LODWORD(v35) = 0;
      char v39 = 0;
      uint64_t v40 = 0;
      int v41 = 1;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v36 = 0;
      uint64_t v33 = 0;
      unsigned int v34 = (llvm::object *)&unk_270DBD6E0;
      p_p = &v31;
      llvm::raw_ostream::SetUnbuffered(&v34);
      std::string __p = &unk_270DC0A20;
      int v28 = "RVA 0x%x for %s not found";
      LODWORD(v29) = v7;
      uint64_t v30 = a5;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v34, (uint64_t)&__p);
      llvm::make_error<llvm::StringError,std::string,std::error_code>();
    }
    uint64_t v43 = 3;
    unint64_t v44 = v23;
    std::string __p = 0;
    int v28 = 0;
    uint64_t v29 = 0;
    LODWORD(v35) = 0;
    char v39 = 0;
    uint64_t v40 = 0;
    int v41 = 1;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    unsigned int v34 = (llvm::object *)&unk_270DBD6E0;
    p_p = &__p;
    llvm::raw_ostream::SetUnbuffered(&v34);
    __int16 v31 = &unk_270DBD548;
    unint64_t v32 = "RVA 0x%x not found";
    LODWORD(v33) = v7;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v34, (uint64_t)&v31);
    llvm::make_error<llvm::StringError,std::string,std::error_code>();
  }
  uint64_t v16 = result;
  uint64_t v17 = v14;
  while (1)
  {
    unsigned int v19 = *((_DWORD *)v10 + 2);
    unsigned int v18 = *((_DWORD *)v10 + 3);
    uint64_t v20 = v7 - v18;
    if (v7 >= v18 && v19 + v18 > v7) {
      break;
    }
    uint64_t result = (llvm::object *)(*(uint64_t (**)(uint64_t, llvm::object **))(*(void *)v12 + 136))(v12, &v34);
    uint64_t v10 = v34;
    uint64_t v12 = v35;
    if (v35 == v17 && v34 == v16) {
      goto LABEL_15;
    }
  }
  unsigned int v24 = *((_DWORD *)v10 + 4);
  unsigned int v25 = v24 + v18;
  if (v24 < v19 && v25 <= v7) {
    operator new();
  }
  *(void *)a4 = a2[2] + *((unsigned int *)v10 + 5) + v20;
  *(void *)this = 0;
  return result;
}

llvm::object::COFFObjectFile *llvm::object::COFFObjectFile::initImportTablePtr(llvm::object::COFFObjectFile *this, uint64_t a2)
{
  unsigned int v2 = this;
  uint64_t v3 = *(void *)(a2 + 80);
  if (!v3) {
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  unsigned int v6 = (_DWORD *)(v5 ? v5 + 92 : *(void *)(a2 + 72) + 108);
  if (*v6 <= 1u) {
    goto LABEL_10;
  }
  unsigned int v7 = (unint64_t *)*(unsigned int *)(v3 + 8);
  if (!v7) {
    goto LABEL_10;
  }
  *(void *)uint64_t v11 = 0;
  this = llvm::object::COFFObjectFile::getRvaPtr(this, (void *)a2, v7, v11, (uint64_t)"import table");
  if (!*(void *)v2)
  {
    long long v8 = *(_OWORD *)(a2 + 32);
    v10[0] = *(_OWORD *)(a2 + 16);
    v10[1] = v8;
    unint64_t v9 = *(void *)v11;
    this = llvm::object::Binary::checkOffset((llvm::object *)v10, *(unint64_t *)v11, *(unsigned int *)(v3 + 12), v2);
    if (!*(void *)v2)
    {
      *(void *)(a2 + 128) = v9;
LABEL_10:
      *(void *)unsigned int v2 = 0;
    }
  }
  return this;
}

llvm::object::COFFObjectFile *llvm::object::COFFObjectFile::initDelayImportTablePtr(llvm::object::COFFObjectFile *this, uint64_t a2)
{
  unsigned int v2 = this;
  uint64_t v3 = *(void *)(a2 + 80);
  if (!v3) {
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  unsigned int v6 = (_DWORD *)(v5 ? v5 + 92 : *(void *)(a2 + 72) + 108);
  if (*v6 <= 0xDu) {
    goto LABEL_10;
  }
  unsigned int v7 = (unint64_t *)*(unsigned int *)(v3 + 104);
  if (!v7) {
    goto LABEL_10;
  }
  *(_DWORD *)(a2 + 144) = (*(_DWORD *)(v3 + 108) >> 5) - 1;
  *(void *)uint64_t v11 = 0;
  this = llvm::object::COFFObjectFile::getRvaPtr(this, (void *)a2, v7, v11, (uint64_t)"delay import table");
  if (!*(void *)v2)
  {
    long long v8 = *(_OWORD *)(a2 + 32);
    v10[0] = *(_OWORD *)(a2 + 16);
    v10[1] = v8;
    unint64_t v9 = *(void *)v11;
    this = llvm::object::Binary::checkOffset((llvm::object *)v10, *(unint64_t *)v11, *(unsigned int *)(v3 + 108), v2);
    if (!*(void *)v2)
    {
      *(void *)(a2 + 136) = v9;
LABEL_10:
      *(void *)unsigned int v2 = 0;
    }
  }
  return this;
}

llvm::object::COFFObjectFile *llvm::object::COFFObjectFile::initExportTablePtr(llvm::object::COFFObjectFile *this, uint64_t a2)
{
  unsigned int v2 = this;
  uint64_t v3 = *(unsigned int **)(a2 + 80);
  if (!v3) {
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  unsigned int v6 = (_DWORD *)(v5 ? v5 + 92 : *(void *)(a2 + 72) + 108);
  if (!*v6) {
    goto LABEL_10;
  }
  unsigned int v7 = (unint64_t *)*v3;
  if (!v7) {
    goto LABEL_10;
  }
  *(void *)uint64_t v11 = 0;
  this = llvm::object::COFFObjectFile::getRvaPtr(this, (void *)a2, v7, v11, (uint64_t)"export table");
  if (!*(void *)v2)
  {
    long long v8 = *(_OWORD *)(a2 + 32);
    v10[0] = *(_OWORD *)(a2 + 16);
    v10[1] = v8;
    unint64_t v9 = *(void *)v11;
    this = llvm::object::Binary::checkOffset((llvm::object *)v10, *(unint64_t *)v11, v3[1], v2);
    if (!*(void *)v2)
    {
      *(void *)(a2 + 152) = v9;
LABEL_10:
      *(void *)unsigned int v2 = 0;
    }
  }
  return this;
}

llvm::object::COFFObjectFile *llvm::object::COFFObjectFile::initBaseRelocPtr(llvm::object::COFFObjectFile *this, uint64_t a2)
{
  unsigned int v2 = this;
  uint64_t v3 = *(void *)(a2 + 80);
  if (!v3) {
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  unsigned int v6 = (_DWORD *)(v5 ? v5 + 92 : *(void *)(a2 + 72) + 108);
  if (*v6 <= 5u) {
    goto LABEL_10;
  }
  unsigned int v7 = (unint64_t *)*(unsigned int *)(v3 + 40);
  if (!v7) {
    goto LABEL_10;
  }
  *(void *)uint64_t v11 = 0;
  this = llvm::object::COFFObjectFile::getRvaPtr(this, (void *)a2, v7, v11, (uint64_t)"base reloc table");
  if (!*(void *)v2)
  {
    long long v8 = *(_OWORD *)(a2 + 32);
    v10[0] = *(_OWORD *)(a2 + 16);
    v10[1] = v8;
    unint64_t v9 = *(void *)v11;
    this = llvm::object::Binary::checkOffset((llvm::object *)v10, *(unint64_t *)v11, *(unsigned int *)(v3 + 44), v2);
    if (!*(void *)v2)
    {
      *(void *)(a2 + 160) = v9;
      *(void *)(a2 + 168) = v9 + *(unsigned int *)(v3 + 44);
LABEL_10:
      *(void *)unsigned int v2 = 0;
    }
  }
  return this;
}

llvm::object *llvm::object::COFFObjectFile::initDebugDirectoryPtr(llvm::object *this, uint64_t a2)
{
  unsigned int v2 = this;
  uint64_t v3 = *(void *)(a2 + 80);
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  unsigned int v6 = (_DWORD *)(v5 ? v5 + 92 : *(void *)(a2 + 72) + 108);
  if (*v6 <= 6u) {
    goto LABEL_12;
  }
  unsigned int v7 = (unint64_t *)*(unsigned int *)(v3 + 48);
  if (!v7) {
    goto LABEL_12;
  }
  HIDWORD(v8) = -1227133513 * *(_DWORD *)(v3 + 52);
  LODWORD(v8) = HIDWORD(v8);
  if ((v8 >> 2) >= 0x924924A)
  {
    *(void *)uint64_t v13 = 3;
    uint64_t v14 = llvm::object::object_category(this);
    uint64_t v12 = "debug directory has uneven size";
    llvm::make_error<llvm::StringError,char const*&,std::error_code>();
  }
  *(void *)uint64_t v13 = 0;
  this = llvm::object::COFFObjectFile::getRvaPtr(this, (void *)a2, v7, v13, (uint64_t)"debug directory");
  if (!*(void *)v2)
  {
    long long v9 = *(_OWORD *)(a2 + 32);
    v11[0] = *(_OWORD *)(a2 + 16);
    v11[1] = v9;
    unint64_t v10 = *(void *)v13;
    this = llvm::object::Binary::checkOffset((llvm::object *)v11, *(unint64_t *)v13, *(unsigned int *)(v3 + 52), v2);
    if (!*(void *)v2)
    {
      *(void *)(a2 + 176) = v10;
      *(void *)(a2 + 184) = v10 + *(unsigned int *)(v3 + 52);
LABEL_12:
      *(void *)unsigned int v2 = 0;
    }
  }
  return this;
}

llvm::object *llvm::object::COFFObjectFile::initTLSDirectoryPtr(llvm::object *this, uint64_t a2)
{
  unsigned int v2 = this;
  uint64_t v3 = *(void *)(a2 + 80);
  if (!v3) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  unsigned int v6 = (_DWORD *)(v5 ? v5 + 92 : *(void *)(a2 + 72) + 108);
  if (*v6 <= 9u) {
    goto LABEL_16;
  }
  unsigned int v7 = (unint64_t *)*(unsigned int *)(v3 + 72);
  if (!v7) {
    goto LABEL_16;
  }
  if (*(void *)(a2 + 72)) {
    uint64_t v8 = 40;
  }
  else {
    uint64_t v8 = 24;
  }
  if (v8 != *(_DWORD *)(v3 + 76))
  {
    uint64_t v12 = llvm::object::object_category(this);
    int v13 = *(_DWORD *)(v3 + 76);
    v27[3] = 3;
    v27[4] = v12;
    memset(v27, 0, 24);
    int v19 = 0;
    char v23 = 0;
    uint64_t v24 = 0;
    int v25 = 1;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    *(void *)unsigned int v18 = &unk_270DBD6E0;
    int v26 = v27;
    llvm::raw_ostream::SetUnbuffered(v18);
    v15[0] = &unk_270DC0A40;
    v15[1] = "TLS Directory size (%u) is not the expected size (%llu).";
    int v16 = v13;
    uint64_t v17 = v8;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)v18, (uint64_t)v15);
    llvm::make_error<llvm::StringError,std::string,std::error_code>();
  }
  *(void *)unsigned int v18 = 0;
  this = llvm::object::COFFObjectFile::getRvaPtr(this, (void *)a2, v7, v18, (uint64_t)"TLS directory");
  if (!*(void *)v2)
  {
    long long v9 = *(_OWORD *)(a2 + 32);
    v14[0] = *(_OWORD *)(a2 + 16);
    v14[1] = v9;
    unint64_t v10 = *(void *)v18;
    this = llvm::object::Binary::checkOffset((llvm::object *)v14, *(unint64_t *)v18, *(unsigned int *)(v3 + 76), v2);
    if (!*(void *)v2)
    {
      uint64_t v11 = 200;
      if (!*(void *)(a2 + 72)) {
        uint64_t v11 = 192;
      }
      *(void *)(a2 + v11) = v10;
LABEL_16:
      *(void *)unsigned int v2 = 0;
    }
  }
  return this;
}

llvm::object::COFFObjectFile *llvm::object::COFFObjectFile::initLoadConfigPtr(llvm::object::COFFObjectFile *this, uint64_t a2)
{
  unsigned int v2 = this;
  uint64_t v3 = *(void *)(a2 + 80);
  if (!v3) {
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  unsigned int v6 = (_DWORD *)(v5 ? v5 + 92 : *(void *)(a2 + 72) + 108);
  if (*v6 <= 0xAu) {
    goto LABEL_10;
  }
  unsigned int v7 = (unint64_t *)*(unsigned int *)(v3 + 80);
  if (!v7) {
    goto LABEL_10;
  }
  *(void *)uint64_t v11 = 0;
  this = llvm::object::COFFObjectFile::getRvaPtr(this, (void *)a2, v7, v11, (uint64_t)"load config table");
  if (!*(void *)v2)
  {
    long long v8 = *(_OWORD *)(a2 + 32);
    v10[0] = *(_OWORD *)(a2 + 16);
    v10[1] = v8;
    unint64_t v9 = *(void *)v11;
    this = llvm::object::Binary::checkOffset((llvm::object *)v10, *(unint64_t *)v11, *(unsigned int *)(v3 + 84), v2);
    if (!*(void *)v2)
    {
      *(void *)(a2 + 208) = v9;
LABEL_10:
      *(void *)unsigned int v2 = 0;
    }
  }
  return this;
}

void llvm::object::COFFObjectFile::create()
{
}

llvm::object *llvm::object::COFFObjectFile::initialize@<X0>(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (llvm::object *)std::system_category();
  unint64_t v5 = *((void *)this + 3);
  if (v5 <= 0x13)
  {
    *(void *)&v11.__val_ = llvm::object::object_category(result);
    return (llvm::object *)llvm::errorCodeToError((llvm *)4, v11, a2);
  }
  unsigned int v6 = (void *)((char *)this + 16);
  if (v5 <= 0x43)
  {
    llvm::object::object_category(result);
    int v12 = 0;
    uint64_t v13 = 0;
    unsigned int v7 = (unsigned char *)*v6;
  }
  else
  {
    unsigned int v7 = (unsigned char *)*v6;
    if (*(unsigned char *)*v6 == 77 && v7[1] == 90)
    {
      uint64_t v8 = *((unsigned int *)v7 + 15);
      if (*(_DWORD *)&v7[v8] != 17744)
      {
LABEL_6:
        unint64_t v9 = llvm::object::object_category(result);
        *(void *)&long long v48 = 3;
        *((void *)&v48 + 1) = v9;
        unint64_t v10 = "incorrect PE magic";
        goto LABEL_7;
      }
      uint64_t v13 = v8 + 4;
      int v12 = 1;
    }
    else
    {
      int v12 = 0;
      uint64_t v13 = 0;
    }
  }
  long long v14 = *((_OWORD *)this + 2);
  long long v48 = *(_OWORD *)v6;
  long long v49 = v14;
  unsigned int v15 = &v7[v13];
  uint64_t result = llvm::object::Binary::checkOffset((llvm::object *)&v48, (unint64_t)&v7[v13], 0x14uLL, a2);
  if (!*a2)
  {
    *((void *)this + 6) = v15;
    *a2 = 0;
    if ((v12 & 1) == 0)
    {
      if (*v15) {
        goto LABEL_30;
      }
      if ((__int16)v15[1] == -1)
      {
        if (*((void *)this + 3) <= 0x37uLL)
        {
          llvm::object::object_category(result);
        }
        else
        {
          long long v16 = *((_OWORD *)this + 2);
          long long v48 = *(_OWORD *)v6;
          long long v49 = v16;
          unint64_t v17 = *((void *)this + 2) + v13;
          uint64_t result = llvm::object::Binary::checkOffset((llvm::object *)&v48, v17, 0x38uLL, a2);
          if (*a2) {
            return result;
          }
          *((void *)this + 7) = v17;
          *a2 = 0;
          if (*(unsigned __int16 *)(v17 + 4) >= 2u
            && *(void *)(v17 + 12) == 0x4BA9BAEED1BAA1C7
            && *(void *)(v17 + 20) == 0xB8DCA46AF6FA20AFLL)
          {
            *((void *)this + 6) = 0;
            v13 += 56;
            goto LABEL_46;
          }
          *((void *)this + 7) = 0;
        }
      }
      unsigned int v15 = (_WORD *)*((void *)this + 6);
    }
    if (!v15)
    {
      uint64_t v21 = 0;
      if (!v12) {
        goto LABEL_32;
      }
      goto LABEL_38;
    }
LABEL_30:
    int v19 = std::system_category();
    uint64_t v21 = *((void *)this + 6);
    if (*(__int16 *)(v21 + 2) == -1)
    {
      *(void *)&v20.__val_ = v19;
      return (llvm::object *)llvm::errorCodeToError(0, v20, a2);
    }
    v13 += 20;
    if (!v12)
    {
LABEL_32:
      if (v21)
      {
LABEL_33:
        uint64_t v22 = v13 + *(unsigned __int16 *)(v21 + 16);
        long long v23 = *((_OWORD *)this + 2);
        long long v46 = *(_OWORD *)v6;
        long long v47 = v23;
        unint64_t v24 = *v6 + v22;
        unsigned int v25 = *(unsigned __int16 *)(v21 + 2);
        if (v25 == 0xFFFF) {
          unsigned int v25 = 0;
        }
LABEL_47:
        long long v48 = v46;
        long long v49 = v47;
        uint64_t result = llvm::object::Binary::checkOffset((llvm::object *)&v48, v24, 40 * v25, a2);
        if (*a2) {
          return result;
        }
        *((void *)this + 11) = v24;
        *a2 = 0;
        uint64_t v34 = *((void *)this + 6);
        if (v34)
        {
          if (*(__int16 *)(v34 + 2) == -1) {
            goto LABEL_58;
          }
          uint64_t v35 = (_DWORD *)(v34 + 8);
        }
        else
        {
          uint64_t v35 = (_DWORD *)(*((void *)this + 7) + 48);
        }
        if (*v35)
        {
          llvm::object::COFFObjectFile::initSymbolTablePtr((llvm::object::COFFObjectFile *)&v48, (uint64_t)this);
          if ((void)v48)
          {
            uint64_t v45 = v48;
            *(void *)&long long v48 = 0;
            llvm::consumeError(&v45);
            if (v45) {
              (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
            }
            *((void *)this + 12) = 0;
            *((void *)this + 13) = 0;
            *((_DWORD *)this + 30) = 0;
            *((void *)this + 14) = 0;
            if ((void)v48) {
              (*(void (**)(void))(*(void *)v48 + 8))(v48);
            }
          }
          goto LABEL_66;
        }
LABEL_58:
        if (*((void *)this + 12) || *((void *)this + 13))
        {
          if (!v34)
          {
            uint64_t v36 = (_DWORD *)(*((void *)this + 7) + 52);
LABEL_64:
            if (*v36)
            {
              uint64_t v37 = llvm::object::object_category(result);
              *(void *)&long long v48 = 3;
              *((void *)&v48 + 1) = v37;
              unint64_t v10 = "symbol table missing";
LABEL_7:
              __int16 v50 = v10;
              llvm::make_error<llvm::StringError,char const*&,std::error_code>();
            }
            goto LABEL_66;
          }
          if (*(__int16 *)(v34 + 2) != -1)
          {
            uint64_t v36 = (_DWORD *)(v34 + 12);
            goto LABEL_64;
          }
        }
LABEL_66:
        llvm::object::COFFObjectFile::initImportTablePtr((llvm::object::COFFObjectFile *)&v44, (uint64_t)this);
        ignoreStrippedErrors(a2, (uint64_t *)&v44);
        uint64_t result = v44;
        if (v44) {
          uint64_t result = (llvm::object *)(*(uint64_t (**)(llvm::object *))(*(void *)v44 + 8))(v44);
        }
        if (!*a2)
        {
          llvm::object::COFFObjectFile::initDelayImportTablePtr((llvm::object::COFFObjectFile *)&v43, (uint64_t)this);
          ignoreStrippedErrors(a2, (uint64_t *)&v43);
          uint64_t result = v43;
          if (v43) {
            uint64_t result = (llvm::object *)(*(uint64_t (**)(llvm::object *))(*(void *)v43 + 8))(v43);
          }
          if (!*a2)
          {
            llvm::object::COFFObjectFile::initExportTablePtr((llvm::object::COFFObjectFile *)&v42, (uint64_t)this);
            ignoreStrippedErrors(a2, (uint64_t *)&v42);
            uint64_t result = v42;
            if (v42) {
              uint64_t result = (llvm::object *)(*(uint64_t (**)(llvm::object *))(*(void *)v42 + 8))(v42);
            }
            if (!*a2)
            {
              llvm::object::COFFObjectFile::initBaseRelocPtr((llvm::object::COFFObjectFile *)&v41, (uint64_t)this);
              ignoreStrippedErrors(a2, (uint64_t *)&v41);
              uint64_t result = v41;
              if (v41) {
                uint64_t result = (llvm::object *)(*(uint64_t (**)(llvm::object *))(*(void *)v41 + 8))(v41);
              }
              if (!*a2)
              {
                llvm::object::COFFObjectFile::initDebugDirectoryPtr((llvm::object *)&v40, (uint64_t)this);
                ignoreStrippedErrors(a2, (uint64_t *)&v40);
                uint64_t result = v40;
                if (v40) {
                  uint64_t result = (llvm::object *)(*(uint64_t (**)(llvm::object *))(*(void *)v40 + 8))(v40);
                }
                if (!*a2)
                {
                  llvm::object::COFFObjectFile::initTLSDirectoryPtr((llvm::object *)&v39, (uint64_t)this);
                  ignoreStrippedErrors(a2, (uint64_t *)&v39);
                  uint64_t result = v39;
                  if (v39) {
                    uint64_t result = (llvm::object *)(*(uint64_t (**)(llvm::object *))(*(void *)v39 + 8))(v39);
                  }
                  if (!*a2)
                  {
                    llvm::object::COFFObjectFile::initLoadConfigPtr((llvm::object::COFFObjectFile *)&v38, (uint64_t)this);
                    ignoreStrippedErrors(a2, (uint64_t *)&v38);
                    uint64_t result = v38;
                    if (v38) {
                      uint64_t result = (llvm::object *)(*(uint64_t (**)(llvm::object *))(*(void *)v38 + 8))(v38);
                    }
                    if (!*a2) {
                      *a2 = 0;
                    }
                  }
                }
              }
            }
          }
        }
        return result;
      }
      goto LABEL_45;
    }
LABEL_38:
    long long v26 = *((_OWORD *)this + 2);
    long long v48 = *(_OWORD *)v6;
    long long v49 = v26;
    uint64_t v27 = (unsigned __int16 *)(*v6 + v13);
    uint64_t result = llvm::object::Binary::checkOffset((llvm::object *)&v48, (unint64_t)v27, 0x60uLL, a2);
    if (*a2) {
      return result;
    }
    *a2 = 0;
    int v28 = *v27;
    if (v28 == 267)
    {
      *((void *)this + 8) = v27;
      unint64_t v29 = *((void *)this + 2) + v13 + 96;
      uint64_t v30 = (unsigned int *)(v27 + 46);
    }
    else
    {
      if (v28 != 523) {
        goto LABEL_6;
      }
      *((void *)this + 9) = v27;
      unint64_t v29 = *((void *)this + 2) + v13 + 112;
      uint64_t v30 = (unsigned int *)(v27 + 54);
    }
    unint64_t v31 = 8 * *v30;
    long long v32 = *((_OWORD *)this + 2);
    long long v48 = *(_OWORD *)v6;
    long long v49 = v32;
    uint64_t result = llvm::object::Binary::checkOffset((llvm::object *)&v48, v29, v31, a2);
    if (*a2) {
      return result;
    }
    *((void *)this + 10) = v29;
    *a2 = 0;
    uint64_t v21 = *((void *)this + 6);
    if (v21) {
      goto LABEL_33;
    }
LABEL_45:
    unint64_t v17 = *((void *)this + 7);
LABEL_46:
    long long v33 = *((_OWORD *)this + 2);
    long long v46 = *(_OWORD *)v6;
    long long v47 = v33;
    unint64_t v24 = *v6 + v13;
    unsigned int v25 = *(_DWORD *)(v17 + 44);
    goto LABEL_47;
  }
  return result;
}

uint64_t ignoreStrippedErrors(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = 0;
    goto LABEL_6;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 48))(result, &llvm::object::BinaryError::ID);
  uint64_t v5 = *a2;
  if (!result)
  {
LABEL_6:
    *a1 = v5;
    a1 = a2;
    goto LABEL_7;
  }
  *a2 = 0;
  uint64_t v6 = v5;
  llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6);
  uint64_t result = v6;
  if (v6) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
LABEL_7:
  *a1 = 0;
  return result;
}

uint64_t llvm::object::COFFObjectFile::symbol_begin(llvm::object::COFFObjectFile *this)
{
  uint64_t result = *((void *)this + 12);
  if (!result) {
    return *((void *)this + 13);
  }
  return result;
}

uint64_t llvm::object::COFFObjectFile::symbol_end(llvm::object::COFFObjectFile *this)
{
  return *((void *)this + 14);
}

uint64_t llvm::object::COFFObjectFile::section_begin(llvm::object::COFFObjectFile *this)
{
  return *((void *)this + 11);
}

uint64_t llvm::object::COFFObjectFile::section_end(llvm::object::COFFObjectFile *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1)
  {
    int v2 = *(unsigned __int16 *)(v1 + 2);
    if (v2 == 0xFFFF) {
      int v2 = 0;
    }
  }
  else
  {
    int v2 = *(_DWORD *)(*((void *)this + 7) + 44);
  }
  return *((void *)this + 11) + 40 * v2;
}

uint64_t llvm::object::COFFObjectFile::getBytesInAddress(llvm::object::COFFObjectFile *this)
{
  uint64_t v2 = 8;
  if ((*(unsigned int (**)(llvm::object::COFFObjectFile *))(*(void *)this + 392))(this) != 38)
  {
    if ((*(unsigned int (**)(llvm::object::COFFObjectFile *))(*(void *)this + 392))(this) == 3) {
      return 8;
    }
    else {
      return 4;
    }
  }
  return v2;
}

const char *llvm::object::COFFObjectFile::getFileFormatName(llvm::object::COFFObjectFile *this)
{
  uint64_t v1 = (unsigned __int16 *)*((void *)this + 6);
  if (!v1) {
    uint64_t v1 = (unsigned __int16 *)(*((void *)this + 7) + 6);
  }
  int v2 = *v1;
  if (v2 <= 34403)
  {
    if (v2 == 332) {
      return "COFF-i386";
    }
    if (v2 == 452) {
      return "COFF-ARM";
    }
  }
  else
  {
    switch(v2)
    {
      case 43620:
        return "COFF-ARM64";
      case 42561:
        return "COFF-ARM64EC";
      case 34404:
        return "COFF-x86-64";
    }
  }
  return "COFF-<unknown arch>";
}

uint64_t llvm::object::COFFObjectFile::getArch(llvm::object::COFFObjectFile *this)
{
  uint64_t v1 = (unsigned __int16 *)*((void *)this + 6);
  if (!v1) {
    uint64_t v1 = (unsigned __int16 *)(*((void *)this + 7) + 6);
  }
  int v2 = *v1;
  if (v2 <= 34403)
  {
    if (v2 == 332) {
      return 37;
    }
    if (v2 == 452) {
      return 35;
    }
  }
  else
  {
    if (v2 == 43620 || v2 == 42561) {
      return 3;
    }
    if (v2 == 34404) {
      return 38;
    }
  }
  return 0;
}

uint64_t llvm::object::COFFObjectFile::getStartAddress@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 64);
  *(unsigned char *)(a2 + 8) &= ~1u;
  if (v2) {
    uint64_t v2 = *(unsigned int *)(v2 + 16);
  }
  *(void *)a2 = v2;
  return this;
}

uint64_t llvm::object::COFFObjectFile::getString@<X0>(llvm::object::COFFObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *((_DWORD *)this + 30);
  if (v4 <= 4)
  {
    llvm::object::object_category(this);
    llvm::make_error<llvm::StringError,char const*&,std::error_code>();
  }
  if (v4 <= a2)
  {
    *(void *)&v8.__val_ = llvm::object::object_category(this);
    uint64_t result = llvm::errorCodeToError((llvm *)4, v8, (void *)a3);
    *(unsigned char *)(a3 + 16) |= 1u;
  }
  else
  {
    uint64_t v5 = *((void *)this + 14);
    uint64_t v6 = v5 + a2;
    if (v5) {
      uint64_t result = strlen((const char *)(v5 + a2));
    }
    else {
      uint64_t result = 0;
    }
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = result;
  }
  return result;
}

llvm::object::COFFObjectFile *llvm::object::COFFObjectFile::getSymbolName@<X0>(char *__s@<X1>, llvm::object::COFFObjectFile *result@<X0>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)__s)
  {
    if (__s[7])
    {
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)a3 = __s;
      *(void *)(a3 + 8) = 8;
    }
    else
    {
      uint64_t result = (llvm::object::COFFObjectFile *)strlen(__s);
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)a3 = __s;
      *(void *)(a3 + 8) = result;
    }
  }
  else
  {
    unsigned int v5 = *((_DWORD *)__s + 1);
    return (llvm::object::COFFObjectFile *)llvm::object::COFFObjectFile::getString(result, v5, a3);
  }
  return result;
}

void llvm::object::COFFObjectFile::moveRelocationNext(uint64_t a1, void *a2)
{
  *a2 += 10;
}

uint64_t llvm::object::COFFObjectFile::getRelocationOffset(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t llvm::object::COFFObjectFile::getRelocationSymbol(void *a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 4);
  uint64_t v3 = a1[12];
  if (!v3 && !a1[13]) {
    return (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  }
  uint64_t v4 = a1[6];
  if (v4)
  {
    if (*(__int16 *)(v4 + 2) == -1) {
      return (*(uint64_t (**)(void *))(*a1 + 56))(a1);
    }
    unsigned int v5 = (unsigned int *)(v4 + 12);
  }
  else
  {
    unsigned int v5 = (unsigned int *)(a1[7] + 52);
  }
  if (v2 >= *v5) {
    return (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  }
  if (v3)
  {
    unsigned int v6 = 18;
  }
  else
  {
    uint64_t v3 = a1[13];
    unsigned int v6 = 20;
  }
  return v3 + v2 * (unint64_t)v6;
}

uint64_t llvm::object::COFFObjectFile::getRelocationType(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 8);
}

void *llvm::object::COFFObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(__int16 *)(a2 + 8);
  uint64_t v4 = *(unsigned __int16 **)(a1 + 48);
  if (!v4) {
    uint64_t v4 = (unsigned __int16 *)(*(void *)(a1 + 56) + 6);
  }
  int v5 = *v4;
  unsigned int v6 = "Unknown";
  uint64_t v7 = 7;
  if (v5 > 34403)
  {
    if (v5 != 43620 && v5 != 42561)
    {
      if (v5 == 34404)
      {
        if (v3 < 0x11)
        {
          unint64_t v9 = (char *)&unk_261E8D750 + 8 * v3;
          unint64_t v10 = off_265592BF8;
          goto LABEL_20;
        }
LABEL_21:
        uint64_t v7 = 7;
        return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v6, &v6[v7]);
      }
      return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v6, &v6[v7]);
    }
    if (v3 >= 0x12) {
      goto LABEL_21;
    }
    unint64_t v9 = (char *)&unk_261E8D890 + 8 * v3;
    unint64_t v10 = off_265592D38;
LABEL_20:
    uint64_t v7 = *(void *)v9;
    unsigned int v6 = v10[v3];
    return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v6, &v6[v7]);
  }
  if (v5 == 332)
  {
    if (v3 < 0x15)
    {
      unint64_t v9 = (char *)&unk_261E8D920 + 8 * v3;
      unint64_t v10 = off_265592DC8;
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  if (v5 == 452)
  {
    if (v3 >= 0x17) {
      goto LABEL_21;
    }
    unint64_t v9 = (char *)&unk_261E8D7D8 + 8 * v3;
    unint64_t v10 = off_265592C80;
    goto LABEL_20;
  }
  return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v6, &v6[v7]);
}

BOOL llvm::object::COFFObjectFile::isRelocatableObject(llvm::object::COFFObjectFile *this)
{
  return *((void *)this + 10) == 0;
}

const char *llvm::object::COFFObjectFile::mapDebugSectionName(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result = (const char *)a2;
  if (a3 == 7 && *a2 == 1717528677 && *(_DWORD *)((char *)a2 + 3) == 1835102822) {
    return "eh_frame";
  }
  return result;
}

void llvm::object::COFFObjectFile::~COFFObjectFile(llvm::object::COFFObjectFile *this)
{
}

uint64_t llvm::object::COFFObjectFile::is64Bit(llvm::object::COFFObjectFile *this)
{
  return 0;
}

void llvm::object::ObjectFile::dynamic_relocation_sections(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void llvm::object::COFFObjectFile::getFeatures(uint64_t a1@<X8>)
{
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  llvm::SubtargetFeatures::Split((char **)&v3, (uint64_t)"", 0);
  *(unsigned char *)(a1 + 24) &= ~1u;
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  int v5 = (void **)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v5);
}

void llvm::object::ObjectFile::tryGetCPUName(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void llvm::object::SectionStrippedError::~SectionStrippedError(llvm::object::SectionStrippedError *this)
{
}

void *llvm::ErrorInfo<llvm::object::SectionStrippedError,llvm::object::BinaryError>::dynamicClassID()
{
  return &llvm::object::BinaryError::ID;
}

uint64_t llvm::ErrorInfo<llvm::object::SectionStrippedError,llvm::object::BinaryError>::isA(uint64_t a1, void *a2)
{
  BOOL v3 = a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
  return a2 == &llvm::object::BinaryError::ID || v3;
}

uint64_t llvm::format_object<unsigned int,char const*>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t llvm::format_object<unsigned int,unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24));
}

const char *llvm::object::getELFRelocationTypeName(llvm::object *this, unsigned int a2)
{
  if ((int)this <= 92)
  {
    if ((int)this <= 39)
    {
      switch((int)this)
      {
        case 2:
        case 18:
          goto LABEL_19;
        case 3:
        case 6:
          if (a2 >= 0x2C) {
            return "Unknown";
          }
          unsigned int v2 = off_265593120;
          return v2[a2];
        case 4:
          if (a2 >= 0x2B) {
            return "Unknown";
          }
          unsigned int v2 = off_265592E70;
          return v2[a2];
        case 8:
          if (a2 >= 0xFA) {
            return "Unknown";
          }
          unsigned int v2 = off_265593280;
          return v2[a2];
        case 20:
          uint64_t result = "R_PPC_NONE";
          switch(a2)
          {
            case 0u:
              return result;
            case 1u:
              uint64_t result = "R_PPC_ADDR32";
              break;
            case 2u:
              uint64_t result = "R_PPC_ADDR24";
              break;
            case 3u:
              uint64_t result = "R_PPC_ADDR16";
              break;
            case 4u:
              uint64_t result = "R_PPC_ADDR16_LO";
              break;
            case 5u:
              uint64_t result = "R_PPC_ADDR16_HI";
              break;
            case 6u:
              uint64_t result = "R_PPC_ADDR16_HA";
              break;
            case 7u:
              uint64_t result = "R_PPC_ADDR14";
              break;
            case 8u:
              uint64_t result = "R_PPC_ADDR14_BRTAKEN";
              break;
            case 9u:
              uint64_t result = "R_PPC_ADDR14_BRNTAKEN";
              break;
            case 0xAu:
              uint64_t result = "R_PPC_REL24";
              break;
            case 0xBu:
              uint64_t result = "R_PPC_REL14";
              break;
            case 0xCu:
              uint64_t result = "R_PPC_REL14_BRTAKEN";
              break;
            case 0xDu:
              uint64_t result = "R_PPC_REL14_BRNTAKEN";
              break;
            case 0xEu:
              uint64_t result = "R_PPC_GOT16";
              break;
            case 0xFu:
              uint64_t result = "R_PPC_GOT16_LO";
              break;
            case 0x10u:
              uint64_t result = "R_PPC_GOT16_HI";
              break;
            case 0x11u:
              uint64_t result = "R_PPC_GOT16_HA";
              break;
            case 0x12u:
              uint64_t result = "R_PPC_PLTREL24";
              break;
            case 0x13u:
              uint64_t result = "R_PPC_COPY";
              break;
            case 0x14u:
              uint64_t result = "R_PPC_GLOB_DAT";
              break;
            case 0x15u:
              uint64_t result = "R_PPC_JMP_SLOT";
              break;
            case 0x16u:
              uint64_t result = "R_PPC_RELATIVE";
              break;
            case 0x17u:
              uint64_t result = "R_PPC_LOCAL24PC";
              break;
            case 0x18u:
              uint64_t result = "R_PPC_UADDR32";
              break;
            case 0x19u:
              uint64_t result = "R_PPC_UADDR16";
              break;
            case 0x1Au:
              uint64_t result = "R_PPC_REL32";
              break;
            case 0x1Bu:
              uint64_t result = "R_PPC_PLT32";
              break;
            case 0x1Cu:
              uint64_t result = "R_PPC_PLTREL32";
              break;
            case 0x1Du:
              uint64_t result = "R_PPC_PLT16_LO";
              break;
            case 0x1Eu:
              uint64_t result = "R_PPC_PLT16_HI";
              break;
            case 0x1Fu:
              uint64_t result = "R_PPC_PLT16_HA";
              break;
            case 0x20u:
              uint64_t result = "R_PPC_SDAREL16";
              break;
            case 0x21u:
              uint64_t result = "R_PPC_SECTOFF";
              break;
            case 0x22u:
              uint64_t result = "R_PPC_SECTOFF_LO";
              break;
            case 0x23u:
              uint64_t result = "R_PPC_SECTOFF_HI";
              break;
            case 0x24u:
              uint64_t result = "R_PPC_SECTOFF_HA";
              break;
            case 0x25u:
              uint64_t result = "R_PPC_ADDR30";
              break;
            case 0x26u:
            case 0x27u:
            case 0x28u:
            case 0x29u:
            case 0x2Au:
            case 0x2Bu:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x38u:
            case 0x39u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Eu:
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
              return "Unknown";
            case 0x43u:
              uint64_t result = "R_PPC_TLS";
              break;
            case 0x44u:
              uint64_t result = "R_PPC_DTPMOD32";
              break;
            case 0x45u:
              uint64_t result = "R_PPC_TPREL16";
              break;
            case 0x46u:
              uint64_t result = "R_PPC_TPREL16_LO";
              break;
            case 0x47u:
              uint64_t result = "R_PPC_TPREL16_HI";
              break;
            case 0x48u:
              uint64_t result = "R_PPC_TPREL16_HA";
              break;
            case 0x49u:
              uint64_t result = "R_PPC_TPREL32";
              break;
            case 0x4Au:
              uint64_t result = "R_PPC_DTPREL16";
              break;
            case 0x4Bu:
              uint64_t result = "R_PPC_DTPREL16_LO";
              break;
            case 0x4Cu:
              uint64_t result = "R_PPC_DTPREL16_HI";
              break;
            case 0x4Du:
              uint64_t result = "R_PPC_DTPREL16_HA";
              break;
            case 0x4Eu:
              uint64_t result = "R_PPC_DTPREL32";
              break;
            case 0x4Fu:
              uint64_t result = "R_PPC_GOT_TLSGD16";
              break;
            case 0x50u:
              uint64_t result = "R_PPC_GOT_TLSGD16_LO";
              break;
            case 0x51u:
              uint64_t result = "R_PPC_GOT_TLSGD16_HI";
              break;
            case 0x52u:
              uint64_t result = "R_PPC_GOT_TLSGD16_HA";
              break;
            case 0x53u:
              uint64_t result = "R_PPC_GOT_TLSLD16";
              break;
            case 0x54u:
              uint64_t result = "R_PPC_GOT_TLSLD16_LO";
              break;
            case 0x55u:
              uint64_t result = "R_PPC_GOT_TLSLD16_HI";
              break;
            case 0x56u:
              uint64_t result = "R_PPC_GOT_TLSLD16_HA";
              break;
            case 0x57u:
              uint64_t result = "R_PPC_GOT_TPREL16";
              break;
            case 0x58u:
              uint64_t result = "R_PPC_GOT_TPREL16_LO";
              break;
            case 0x59u:
              uint64_t result = "R_PPC_GOT_TPREL16_HI";
              break;
            case 0x5Au:
              uint64_t result = "R_PPC_GOT_TPREL16_HA";
              break;
            case 0x5Bu:
              uint64_t result = "R_PPC_GOT_DTPREL16";
              break;
            case 0x5Cu:
              uint64_t result = "R_PPC_GOT_DTPREL16_LO";
              break;
            case 0x5Du:
              uint64_t result = "R_PPC_GOT_DTPREL16_HI";
              break;
            case 0x5Eu:
              uint64_t result = "R_PPC_GOT_DTPREL16_HA";
              break;
            case 0x5Fu:
              uint64_t result = "R_PPC_TLSGD";
              break;
            case 0x60u:
              uint64_t result = "R_PPC_TLSLD";
              break;
            default:
              switch(a2)
              {
                case 0xF8u:
                  uint64_t result = "R_PPC_IRELATIVE";
                  break;
                case 0xF9u:
                  uint64_t result = "R_PPC_REL16";
                  break;
                case 0xFAu:
                  uint64_t result = "R_PPC_REL16_LO";
                  break;
                case 0xFBu:
                  uint64_t result = "R_PPC_REL16_HI";
                  break;
                case 0xFCu:
                  uint64_t result = "R_PPC_REL16_HA";
                  break;
                default:
                  return "Unknown";
              }
              break;
          }
          return result;
        case 21:
          if (a2 >= 0xFD) {
            return "Unknown";
          }
          BOOL v3 = off_265594720;
          return v3[a2];
        case 22:
          if (a2 >= 0x42) {
            return "Unknown";
          }
          BOOL v3 = off_2655950E8;
          return v3[a2];
        default:
          return "Unknown";
      }
    }
    if ((int)this <= 61)
    {
      if (this == 40)
      {
        if (a2 < 0xA1)
        {
          BOOL v3 = off_265593A50;
          return v3[a2];
        }
      }
      else if (this == 43)
      {
LABEL_19:
        if (a2 < 0x55)
        {
          BOOL v3 = off_2655952F8;
          return v3[a2];
        }
      }
      return "Unknown";
    }
    if (this != 62)
    {
      if (this == 83 && a2 < 0x24)
      {
        BOOL v3 = off_2655942A8;
        return v3[a2];
      }
      return "Unknown";
    }
    if (a2 < 0x2B)
    {
      unsigned int v2 = off_265592FC8;
      return v2[a2];
    }
    return "Unknown";
  }
  if ((int)this > 223)
  {
    switch((int)this)
    {
      case 243:
        if (a2 >= 0x3C) {
          return "Unknown";
        }
        BOOL v3 = off_265594F08;
        return v3[a2];
      case 244:
        if (a2 >= 7) {
          return "Unknown";
        }
        BOOL v3 = off_2655946E8;
        return v3[a2];
      case 245:
      case 246:
      case 248:
      case 249:
      case 250:
        return "Unknown";
      case 247:
        if (a2 >= 0xB) {
          return "Unknown";
        }
        BOOL v3 = off_265595618;
        return v3[a2];
      case 251:
        if (a2 >= 0x25) {
          return "Unknown";
        }
        BOOL v3 = off_2655956C8;
        return v3[a2];
      case 252:
        if (a2 >= 0x45) {
          return "Unknown";
        }
        BOOL v3 = off_2655957F0;
        return v3[a2];
      default:
        if (this != 224)
        {
          if (this == 258 && a2 < 0x65)
          {
            BOOL v3 = off_265595A18;
            return v3[a2];
          }
          return "Unknown";
        }
        if (a2 >= 0xF) {
          return "Unknown";
        }
        BOOL v3 = off_2655955A0;
        break;
    }
    return v3[a2];
  }
  if ((int)this <= 163)
  {
    if (this != 93)
    {
      if (this == 94)
      {
        if (a2 < 0x39)
        {
          BOOL v3 = off_265595D40;
          return v3[a2];
        }
      }
      else if (this == 105 && a2 < 0xB)
      {
        BOOL v3 = off_265595670;
        return v3[a2];
      }
      return "Unknown";
    }
    goto LABEL_24;
  }
  if (this == 164)
  {
    if (a2 < 0x64)
    {
      BOOL v3 = off_2655943C8;
      return v3[a2];
    }
    return "Unknown";
  }
  if (this != 183)
  {
    if (this != 195) {
      return "Unknown";
    }
LABEL_24:
    if (a2 < 0x6A)
    {
      BOOL v3 = off_265593F58;
      return v3[a2];
    }
    return "Unknown";
  }
  uint64_t result = "R_AARCH64_NONE";
  switch(a2)
  {
    case 0u:
      return result;
    case 1u:
      uint64_t result = "R_AARCH64_P32_ABS32";
      break;
    case 2u:
      uint64_t result = "R_AARCH64_P32_ABS16";
      break;
    case 3u:
      uint64_t result = "R_AARCH64_P32_PREL32";
      break;
    case 4u:
      uint64_t result = "R_AARCH64_P32_PREL16";
      break;
    case 5u:
      uint64_t result = "R_AARCH64_P32_MOVW_UABS_G0";
      break;
    case 6u:
      uint64_t result = "R_AARCH64_P32_MOVW_UABS_G0_NC";
      break;
    case 7u:
      uint64_t result = "R_AARCH64_P32_MOVW_UABS_G1";
      break;
    case 8u:
      uint64_t result = "R_AARCH64_P32_MOVW_SABS_G0";
      break;
    case 9u:
      uint64_t result = "R_AARCH64_P32_LD_PREL_LO19";
      break;
    case 0xAu:
      uint64_t result = "R_AARCH64_P32_ADR_PREL_LO21";
      break;
    case 0xBu:
      uint64_t result = "R_AARCH64_P32_ADR_PREL_PG_HI21";
      break;
    case 0xCu:
      uint64_t result = "R_AARCH64_P32_ADD_ABS_LO12_NC";
      break;
    case 0xDu:
      uint64_t result = "R_AARCH64_P32_LDST8_ABS_LO12_NC";
      break;
    case 0xEu:
      uint64_t result = "R_AARCH64_P32_LDST16_ABS_LO12_NC";
      break;
    case 0xFu:
      uint64_t result = "R_AARCH64_P32_LDST32_ABS_LO12_NC";
      break;
    case 0x10u:
      uint64_t result = "R_AARCH64_P32_LDST64_ABS_LO12_NC";
      break;
    case 0x11u:
      uint64_t result = "R_AARCH64_P32_LDST128_ABS_LO12_NC";
      break;
    case 0x12u:
      uint64_t result = "R_AARCH64_P32_TSTBR14";
      break;
    case 0x13u:
      uint64_t result = "R_AARCH64_P32_CONDBR19";
      break;
    case 0x14u:
      uint64_t result = "R_AARCH64_P32_JUMP26";
      break;
    case 0x15u:
      uint64_t result = "R_AARCH64_P32_CALL26";
      break;
    case 0x16u:
      uint64_t result = "R_AARCH64_P32_MOVW_PREL_G0";
      break;
    case 0x17u:
      uint64_t result = "R_AARCH64_P32_MOVW_PREL_G0_NC";
      break;
    case 0x18u:
      uint64_t result = "R_AARCH64_P32_MOVW_PREL_G1";
      break;
    case 0x19u:
      uint64_t result = "R_AARCH64_P32_GOT_LD_PREL19";
      break;
    case 0x1Au:
      uint64_t result = "R_AARCH64_P32_ADR_GOT_PAGE";
      break;
    case 0x1Bu:
      uint64_t result = "R_AARCH64_P32_LD32_GOT_LO12_NC";
      break;
    case 0x1Cu:
      uint64_t result = "R_AARCH64_P32_LD32_GOTPAGE_LO14";
      break;
    case 0x1Du:
      uint64_t result = "R_AARCH64_P32_PLT32";
      break;
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
    case 0x4Eu:
    case 0x4Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xEAu:
    case 0xEBu:
    case 0xECu:
    case 0xEDu:
    case 0xEEu:
    case 0xEFu:
    case 0xF0u:
    case 0xF1u:
    case 0xF2u:
    case 0xF3u:
    case 0xF4u:
    case 0xF5u:
    case 0xF6u:
    case 0xF7u:
    case 0xF8u:
    case 0xF9u:
    case 0xFAu:
    case 0xFBu:
    case 0xFCu:
    case 0xFDu:
    case 0xFEu:
    case 0xFFu:
    case 0x100u:
    case 0x119u:
    case 0x126u:
    case 0x127u:
    case 0x128u:
    case 0x129u:
    case 0x12Au:
      return "Unknown";
    case 0x50u:
      uint64_t result = "R_AARCH64_P32_TLSGD_ADR_PREL21";
      break;
    case 0x51u:
      uint64_t result = "R_AARCH64_P32_TLSGD_ADR_PAGE21";
      break;
    case 0x52u:
      uint64_t result = "R_AARCH64_P32_TLSGD_ADD_LO12_NC";
      break;
    case 0x53u:
      uint64_t result = "R_AARCH64_P32_TLSLD_ADR_PREL21";
      break;
    case 0x54u:
      uint64_t result = "R_AARCH64_P32_TLSLD_ADR_PAGE21";
      break;
    case 0x55u:
      uint64_t result = "R_AARCH64_P32_TLSLD_ADD_LO12_NC";
      break;
    case 0x56u:
      uint64_t result = "R_AARCH64_P32_TLSLD_LD_PREL19";
      break;
    case 0x57u:
      uint64_t result = "R_AARCH64_P32_TLSLD_MOVW_DTPREL_G1";
      break;
    case 0x58u:
      uint64_t result = "R_AARCH64_P32_TLSLD_MOVW_DTPREL_G0";
      break;
    case 0x59u:
      uint64_t result = "R_AARCH64_P32_TLSLD_MOVW_DTPREL_G0_NC";
      break;
    case 0x5Au:
      uint64_t result = "R_AARCH64_P32_TLSLD_ADD_DTPREL_HI12";
      break;
    case 0x5Bu:
      uint64_t result = "R_AARCH64_P32_TLSLD_ADD_DTPREL_LO12";
      break;
    case 0x5Cu:
      uint64_t result = "R_AARCH64_P32_TLSLD_ADD_DTPREL_LO12_NC";
      break;
    case 0x5Du:
      uint64_t result = "R_AARCH64_P32_TLSLD_LDST8_DTPREL_LO12";
      break;
    case 0x5Eu:
      uint64_t result = "R_AARCH64_P32_TLSLD_LDST8_DTPREL_LO12_NC";
      break;
    case 0x5Fu:
      uint64_t result = "R_AARCH64_P32_TLSLD_LDST16_DTPREL_LO12";
      break;
    case 0x60u:
      uint64_t result = "R_AARCH64_P32_TLSLD_LDST16_DTPREL_LO12_NC";
      break;
    case 0x61u:
      uint64_t result = "R_AARCH64_P32_TLSLD_LDST32_DTPREL_LO12";
      break;
    case 0x62u:
      uint64_t result = "R_AARCH64_P32_TLSLD_LDST32_DTPREL_LO12_NC";
      break;
    case 0x63u:
      uint64_t result = "R_AARCH64_P32_TLSLD_LDST64_DTPREL_LO12";
      break;
    case 0x64u:
      uint64_t result = "R_AARCH64_P32_TLSLD_LDST64_DTPREL_LO12_NC";
      break;
    case 0x65u:
      uint64_t result = "R_AARCH64_P32_TLSLD_LDST128_DTPREL_LO12";
      break;
    case 0x66u:
      uint64_t result = "R_AARCH64_P32_TLSLD_LDST128_DTPREL_LO12_NC";
      break;
    case 0x67u:
      uint64_t result = "R_AARCH64_P32_TLSIE_ADR_GOTTPREL_PAGE21";
      break;
    case 0x68u:
      uint64_t result = "R_AARCH64_P32_TLSIE_LD32_GOTTPREL_LO12_NC";
      break;
    case 0x69u:
      uint64_t result = "R_AARCH64_P32_TLSIE_LD_GOTTPREL_PREL19";
      break;
    case 0x6Au:
      uint64_t result = "R_AARCH64_P32_TLSLE_MOVW_TPREL_G1";
      break;
    case 0x6Bu:
      uint64_t result = "R_AARCH64_P32_TLSLE_MOVW_TPREL_G0";
      break;
    case 0x6Cu:
      uint64_t result = "R_AARCH64_P32_TLSLE_MOVW_TPREL_G0_NC";
      break;
    case 0x6Du:
      uint64_t result = "R_AARCH64_P32_TLSLE_ADD_TPREL_HI12";
      break;
    case 0x6Eu:
      uint64_t result = "R_AARCH64_P32_TLSLE_ADD_TPREL_LO12";
      break;
    case 0x6Fu:
      uint64_t result = "R_AARCH64_P32_TLSLE_ADD_TPREL_LO12_NC";
      break;
    case 0x70u:
      uint64_t result = "R_AARCH64_P32_TLSLE_LDST8_TPREL_LO12";
      break;
    case 0x71u:
      uint64_t result = "R_AARCH64_P32_TLSLE_LDST8_TPREL_LO12_NC";
      break;
    case 0x72u:
      uint64_t result = "R_AARCH64_P32_TLSLE_LDST16_TPREL_LO12";
      break;
    case 0x73u:
      uint64_t result = "R_AARCH64_P32_TLSLE_LDST16_TPREL_LO12_NC";
      break;
    case 0x74u:
      uint64_t result = "R_AARCH64_P32_TLSLE_LDST32_TPREL_LO12";
      break;
    case 0x75u:
      uint64_t result = "R_AARCH64_P32_TLSLE_LDST32_TPREL_LO12_NC";
      break;
    case 0x76u:
      uint64_t result = "R_AARCH64_P32_TLSLE_LDST64_TPREL_LO12";
      break;
    case 0x77u:
      uint64_t result = "R_AARCH64_P32_TLSLE_LDST64_TPREL_LO12_NC";
      break;
    case 0x78u:
      uint64_t result = "R_AARCH64_P32_TLSLE_LDST128_TPREL_LO12";
      break;
    case 0x79u:
      uint64_t result = "R_AARCH64_P32_TLSLE_LDST128_TPREL_LO12_NC";
      break;
    case 0x7Au:
      uint64_t result = "R_AARCH64_P32_TLSDESC_LD_PREL19";
      break;
    case 0x7Bu:
      uint64_t result = "R_AARCH64_P32_TLSDESC_ADR_PREL21";
      break;
    case 0x7Cu:
      uint64_t result = "R_AARCH64_P32_TLSDESC_ADR_PAGE21";
      break;
    case 0x7Du:
      uint64_t result = "R_AARCH64_P32_TLSDESC_LD32_LO12";
      break;
    case 0x7Eu:
      uint64_t result = "R_AARCH64_P32_TLSDESC_ADD_LO12";
      break;
    case 0x7Fu:
      uint64_t result = "R_AARCH64_P32_TLSDESC_CALL";
      break;
    case 0xB4u:
      uint64_t result = "R_AARCH64_P32_COPY";
      break;
    case 0xB5u:
      uint64_t result = "R_AARCH64_P32_GLOB_DAT";
      break;
    case 0xB6u:
      uint64_t result = "R_AARCH64_P32_JUMP_SLOT";
      break;
    case 0xB7u:
      uint64_t result = "R_AARCH64_P32_RELATIVE";
      break;
    case 0xB8u:
      uint64_t result = "R_AARCH64_P32_TLS_DTPREL";
      break;
    case 0xB9u:
      uint64_t result = "R_AARCH64_P32_TLS_DTPMOD";
      break;
    case 0xBAu:
      uint64_t result = "R_AARCH64_P32_TLS_TPREL";
      break;
    case 0xBBu:
      uint64_t result = "R_AARCH64_P32_TLSDESC";
      break;
    case 0xBCu:
      uint64_t result = "R_AARCH64_P32_IRELATIVE";
      break;
    case 0x101u:
      uint64_t result = "R_AARCH64_ABS64";
      break;
    case 0x102u:
      uint64_t result = "R_AARCH64_ABS32";
      break;
    case 0x103u:
      uint64_t result = "R_AARCH64_ABS16";
      break;
    case 0x104u:
      uint64_t result = "R_AARCH64_PREL64";
      break;
    case 0x105u:
      uint64_t result = "R_AARCH64_PREL32";
      break;
    case 0x106u:
      uint64_t result = "R_AARCH64_PREL16";
      break;
    case 0x107u:
      uint64_t result = "R_AARCH64_MOVW_UABS_G0";
      break;
    case 0x108u:
      uint64_t result = "R_AARCH64_MOVW_UABS_G0_NC";
      break;
    case 0x109u:
      uint64_t result = "R_AARCH64_MOVW_UABS_G1";
      break;
    case 0x10Au:
      uint64_t result = "R_AARCH64_MOVW_UABS_G1_NC";
      break;
    case 0x10Bu:
      uint64_t result = "R_AARCH64_MOVW_UABS_G2";
      break;
    case 0x10Cu:
      uint64_t result = "R_AARCH64_MOVW_UABS_G2_NC";
      break;
    case 0x10Du:
      uint64_t result = "R_AARCH64_MOVW_UABS_G3";
      break;
    case 0x10Eu:
      uint64_t result = "R_AARCH64_MOVW_SABS_G0";
      break;
    case 0x10Fu:
      uint64_t result = "R_AARCH64_MOVW_SABS_G1";
      break;
    case 0x110u:
      uint64_t result = "R_AARCH64_MOVW_SABS_G2";
      break;
    case 0x111u:
      uint64_t result = "R_AARCH64_LD_PREL_LO19";
      break;
    case 0x112u:
      uint64_t result = "R_AARCH64_ADR_PREL_LO21";
      break;
    case 0x113u:
      uint64_t result = "R_AARCH64_ADR_PREL_PG_HI21";
      break;
    case 0x114u:
      uint64_t result = "R_AARCH64_ADR_PREL_PG_HI21_NC";
      break;
    case 0x115u:
      uint64_t result = "R_AARCH64_ADD_ABS_LO12_NC";
      break;
    case 0x116u:
      uint64_t result = "R_AARCH64_LDST8_ABS_LO12_NC";
      break;
    case 0x117u:
      uint64_t result = "R_AARCH64_TSTBR14";
      break;
    case 0x118u:
      uint64_t result = "R_AARCH64_CONDBR19";
      break;
    case 0x11Au:
      uint64_t result = "R_AARCH64_JUMP26";
      break;
    case 0x11Bu:
      uint64_t result = "R_AARCH64_CALL26";
      break;
    case 0x11Cu:
      uint64_t result = "R_AARCH64_LDST16_ABS_LO12_NC";
      break;
    case 0x11Du:
      uint64_t result = "R_AARCH64_LDST32_ABS_LO12_NC";
      break;
    case 0x11Eu:
      uint64_t result = "R_AARCH64_LDST64_ABS_LO12_NC";
      break;
    case 0x11Fu:
      uint64_t result = "R_AARCH64_MOVW_PREL_G0";
      break;
    case 0x120u:
      uint64_t result = "R_AARCH64_MOVW_PREL_G0_NC";
      break;
    case 0x121u:
      uint64_t result = "R_AARCH64_MOVW_PREL_G1";
      break;
    case 0x122u:
      uint64_t result = "R_AARCH64_MOVW_PREL_G1_NC";
      break;
    case 0x123u:
      uint64_t result = "R_AARCH64_MOVW_PREL_G2";
      break;
    case 0x124u:
      uint64_t result = "R_AARCH64_MOVW_PREL_G2_NC";
      break;
    case 0x125u:
      uint64_t result = "R_AARCH64_MOVW_PREL_G3";
      break;
    case 0x12Bu:
      uint64_t result = "R_AARCH64_LDST128_ABS_LO12_NC";
      break;
    case 0x12Cu:
      uint64_t result = "R_AARCH64_MOVW_GOTOFF_G0";
      break;
    case 0x12Du:
      uint64_t result = "R_AARCH64_MOVW_GOTOFF_G0_NC";
      break;
    case 0x12Eu:
      uint64_t result = "R_AARCH64_MOVW_GOTOFF_G1";
      break;
    case 0x12Fu:
      uint64_t result = "R_AARCH64_MOVW_GOTOFF_G1_NC";
      break;
    case 0x130u:
      uint64_t result = "R_AARCH64_MOVW_GOTOFF_G2";
      break;
    case 0x131u:
      uint64_t result = "R_AARCH64_MOVW_GOTOFF_G2_NC";
      break;
    case 0x132u:
      uint64_t result = "R_AARCH64_MOVW_GOTOFF_G3";
      break;
    case 0x133u:
      uint64_t result = "R_AARCH64_GOTREL64";
      break;
    case 0x134u:
      uint64_t result = "R_AARCH64_GOTREL32";
      break;
    case 0x135u:
      uint64_t result = "R_AARCH64_GOT_LD_PREL19";
      break;
    case 0x136u:
      uint64_t result = "R_AARCH64_LD64_GOTOFF_LO15";
      break;
    case 0x137u:
      uint64_t result = "R_AARCH64_ADR_GOT_PAGE";
      break;
    case 0x138u:
      uint64_t result = "R_AARCH64_LD64_GOT_LO12_NC";
      break;
    case 0x139u:
      uint64_t result = "R_AARCH64_LD64_GOTPAGE_LO15";
      break;
    case 0x13Au:
      uint64_t result = "R_AARCH64_PLT32";
      break;
    default:
      switch(a2)
      {
        case 0x200u:
          uint64_t result = "R_AARCH64_TLSGD_ADR_PREL21";
          break;
        case 0x201u:
          uint64_t result = "R_AARCH64_TLSGD_ADR_PAGE21";
          break;
        case 0x202u:
          uint64_t result = "R_AARCH64_TLSGD_ADD_LO12_NC";
          break;
        case 0x203u:
          uint64_t result = "R_AARCH64_TLSGD_MOVW_G1";
          break;
        case 0x204u:
          uint64_t result = "R_AARCH64_TLSGD_MOVW_G0_NC";
          break;
        case 0x205u:
          uint64_t result = "R_AARCH64_TLSLD_ADR_PREL21";
          break;
        case 0x206u:
          uint64_t result = "R_AARCH64_TLSLD_ADR_PAGE21";
          break;
        case 0x207u:
          uint64_t result = "R_AARCH64_TLSLD_ADD_LO12_NC";
          break;
        case 0x208u:
          uint64_t result = "R_AARCH64_TLSLD_MOVW_G1";
          break;
        case 0x209u:
          uint64_t result = "R_AARCH64_TLSLD_MOVW_G0_NC";
          break;
        case 0x20Au:
          uint64_t result = "R_AARCH64_TLSLD_LD_PREL19";
          break;
        case 0x20Bu:
          uint64_t result = "R_AARCH64_TLSLD_MOVW_DTPREL_G2";
          break;
        case 0x20Cu:
          uint64_t result = "R_AARCH64_TLSLD_MOVW_DTPREL_G1";
          break;
        case 0x20Du:
          uint64_t result = "R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC";
          break;
        case 0x20Eu:
          uint64_t result = "R_AARCH64_TLSLD_MOVW_DTPREL_G0";
          break;
        case 0x20Fu:
          uint64_t result = "R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC";
          break;
        case 0x210u:
          uint64_t result = "R_AARCH64_TLSLD_ADD_DTPREL_HI12";
          break;
        case 0x211u:
          uint64_t result = "R_AARCH64_TLSLD_ADD_DTPREL_LO12";
          break;
        case 0x212u:
          uint64_t result = "R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC";
          break;
        case 0x213u:
          uint64_t result = "R_AARCH64_TLSLD_LDST8_DTPREL_LO12";
          break;
        case 0x214u:
          uint64_t result = "R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC";
          break;
        case 0x215u:
          uint64_t result = "R_AARCH64_TLSLD_LDST16_DTPREL_LO12";
          break;
        case 0x216u:
          uint64_t result = "R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC";
          break;
        case 0x217u:
          uint64_t result = "R_AARCH64_TLSLD_LDST32_DTPREL_LO12";
          break;
        case 0x218u:
          uint64_t result = "R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC";
          break;
        case 0x219u:
          uint64_t result = "R_AARCH64_TLSLD_LDST64_DTPREL_LO12";
          break;
        case 0x21Au:
          uint64_t result = "R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC";
          break;
        case 0x21Bu:
          uint64_t result = "R_AARCH64_TLSIE_MOVW_GOTTPREL_G1";
          break;
        case 0x21Cu:
          uint64_t result = "R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC";
          break;
        case 0x21Du:
          uint64_t result = "R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21";
          break;
        case 0x21Eu:
          uint64_t result = "R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC";
          break;
        case 0x21Fu:
          uint64_t result = "R_AARCH64_TLSIE_LD_GOTTPREL_PREL19";
          break;
        case 0x220u:
          uint64_t result = "R_AARCH64_TLSLE_MOVW_TPREL_G2";
          break;
        case 0x221u:
          uint64_t result = "R_AARCH64_TLSLE_MOVW_TPREL_G1";
          break;
        case 0x222u:
          uint64_t result = "R_AARCH64_TLSLE_MOVW_TPREL_G1_NC";
          break;
        case 0x223u:
          uint64_t result = "R_AARCH64_TLSLE_MOVW_TPREL_G0";
          break;
        case 0x224u:
          uint64_t result = "R_AARCH64_TLSLE_MOVW_TPREL_G0_NC";
          break;
        case 0x225u:
          uint64_t result = "R_AARCH64_TLSLE_ADD_TPREL_HI12";
          break;
        case 0x226u:
          uint64_t result = "R_AARCH64_TLSLE_ADD_TPREL_LO12";
          break;
        case 0x227u:
          uint64_t result = "R_AARCH64_TLSLE_ADD_TPREL_LO12_NC";
          break;
        case 0x228u:
          uint64_t result = "R_AARCH64_TLSLE_LDST8_TPREL_LO12";
          break;
        case 0x229u:
          uint64_t result = "R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC";
          break;
        case 0x22Au:
          uint64_t result = "R_AARCH64_TLSLE_LDST16_TPREL_LO12";
          break;
        case 0x22Bu:
          uint64_t result = "R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC";
          break;
        case 0x22Cu:
          uint64_t result = "R_AARCH64_TLSLE_LDST32_TPREL_LO12";
          break;
        case 0x22Du:
          uint64_t result = "R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC";
          break;
        case 0x22Eu:
          uint64_t result = "R_AARCH64_TLSLE_LDST64_TPREL_LO12";
          break;
        case 0x22Fu:
          uint64_t result = "R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC";
          break;
        case 0x230u:
          uint64_t result = "R_AARCH64_TLSDESC_LD_PREL19";
          break;
        case 0x231u:
          uint64_t result = "R_AARCH64_TLSDESC_ADR_PREL21";
          break;
        case 0x232u:
          uint64_t result = "R_AARCH64_TLSDESC_ADR_PAGE21";
          break;
        case 0x233u:
          uint64_t result = "R_AARCH64_TLSDESC_LD64_LO12";
          break;
        case 0x234u:
          uint64_t result = "R_AARCH64_TLSDESC_ADD_LO12";
          break;
        case 0x235u:
          uint64_t result = "R_AARCH64_TLSDESC_OFF_G1";
          break;
        case 0x236u:
          uint64_t result = "R_AARCH64_TLSDESC_OFF_G0_NC";
          break;
        case 0x237u:
          uint64_t result = "R_AARCH64_TLSDESC_LDR";
          break;
        case 0x238u:
          uint64_t result = "R_AARCH64_TLSDESC_ADD";
          break;
        case 0x239u:
          uint64_t result = "R_AARCH64_TLSDESC_CALL";
          break;
        case 0x23Au:
          uint64_t result = "R_AARCH64_TLSLE_LDST128_TPREL_LO12";
          break;
        case 0x23Bu:
          uint64_t result = "R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC";
          break;
        case 0x23Cu:
          uint64_t result = "R_AARCH64_TLSLD_LDST128_DTPREL_LO12";
          break;
        case 0x23Du:
          uint64_t result = "R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC";
          break;
        default:
          switch(a2)
          {
            case 0x400u:
              uint64_t result = "R_AARCH64_COPY";
              break;
            case 0x401u:
              uint64_t result = "R_AARCH64_GLOB_DAT";
              break;
            case 0x402u:
              uint64_t result = "R_AARCH64_JUMP_SLOT";
              break;
            case 0x403u:
              uint64_t result = "R_AARCH64_RELATIVE";
              break;
            case 0x404u:
              uint64_t result = "R_AARCH64_TLS_DTPMOD64";
              break;
            case 0x405u:
              uint64_t result = "R_AARCH64_TLS_DTPREL64";
              break;
            case 0x406u:
              uint64_t result = "R_AARCH64_TLS_TPREL64";
              break;
            case 0x407u:
              uint64_t result = "R_AARCH64_TLSDESC";
              break;
            case 0x408u:
              uint64_t result = "R_AARCH64_IRELATIVE";
              break;
            default:
              return "Unknown";
          }
          break;
      }
      break;
  }
  return result;
}

const char *llvm::object::getELFSectionTypeName(llvm::object *this, int a2)
{
  if ((int)this <= 61)
  {
    if (this == 8 || this == 10)
    {
      if (a2 > 1879048221)
      {
        if (a2 == 1879048222) {
          return "SHT_MIPS_DWARF";
        }
        if (a2 == 1879048234) {
          return "SHT_MIPS_ABIFLAGS";
        }
      }
      else
      {
        if (a2 == 1879048198) {
          return "SHT_MIPS_REGINFO";
        }
        if (a2 == 1879048205) {
          return "SHT_MIPS_OPTIONS";
        }
      }
    }
    else if (this == 40 && (a2 - 1879048193) < 5)
    {
      return off_265595F08[a2 - 1879048193];
    }
  }
  else if ((int)this > 163)
  {
    if (this == 164)
    {
      if (a2 == 1879048192) {
        return "SHT_HEX_ORDERED";
      }
    }
    else if (this == 243 && a2 == 1879048195)
    {
      return "SHT_RISCV_ATTRIBUTES";
    }
  }
  else if (this == 62)
  {
    if (a2 == 1879048193) {
      return "SHT_X86_64_UNWIND";
    }
  }
  else if (this == 105 && a2 == 1879048195)
  {
    return "SHT_MSP430_ATTRIBUTES";
  }
  if (a2 > 1879002111)
  {
    switch(a2)
    {
      case 1879002112:
        uint64_t result = "SHT_LLVM_ODRTAB";
        break;
      case 1879002113:
        uint64_t result = "SHT_LLVM_LINKER_OPTIONS";
        break;
      case 1879002114:
LABEL_60:
        uint64_t result = "Unknown";
        break;
      case 1879002115:
        uint64_t result = "SHT_LLVM_ADDRSIG";
        break;
      case 1879002116:
        uint64_t result = "SHT_LLVM_DEPENDENT_LIBRARIES";
        break;
      case 1879002117:
        uint64_t result = "SHT_LLVM_SYMPART";
        break;
      case 1879002118:
        uint64_t result = "SHT_LLVM_PART_EHDR";
        break;
      case 1879002119:
        uint64_t result = "SHT_LLVM_PART_PHDR";
        break;
      case 1879002120:
        uint64_t result = "SHT_LLVM_BB_ADDR_MAP_V0";
        break;
      case 1879002121:
        uint64_t result = "SHT_LLVM_CALL_GRAPH_PROFILE";
        break;
      case 1879002122:
        uint64_t result = "SHT_LLVM_BB_ADDR_MAP";
        break;
      case 1879002123:
        uint64_t result = "SHT_LLVM_OFFLOADING";
        break;
      default:
        switch(a2)
        {
          case 1879048181:
            uint64_t result = "SHT_GNU_ATTRIBUTES";
            break;
          case 1879048182:
            uint64_t result = "SHT_GNU_HASH";
            break;
          case 1879048183:
          case 1879048184:
          case 1879048185:
          case 1879048186:
          case 1879048187:
          case 1879048188:
            goto LABEL_60;
          case 1879048189:
            uint64_t result = "SHT_GNU_verdef";
            break;
          case 1879048190:
            uint64_t result = "SHT_GNU_verneed";
            break;
          case 1879048191:
            uint64_t result = "SHT_GNU_versym";
            break;
          default:
            if (a2 != 1879047936) {
              goto LABEL_60;
            }
            uint64_t result = "SHT_ANDROID_RELR";
            break;
        }
        break;
    }
  }
  else
  {
    uint64_t result = "SHT_NULL";
    switch(a2)
    {
      case 0:
        return result;
      case 1:
        return "SHT_PROGBITS";
      case 2:
        return "SHT_SYMTAB";
      case 3:
        return "SHT_STRTAB";
      case 4:
        return "SHT_RELA";
      case 5:
        return "SHT_HASH";
      case 6:
        return "SHT_DYNAMIC";
      case 7:
        return "SHT_NOTE";
      case 8:
        return "SHT_NOBITS";
      case 9:
        return "SHT_REL";
      case 10:
        return "SHT_SHLIB";
      case 11:
        return "SHT_DYNSYM";
      case 12:
      case 13:
        goto LABEL_60;
      case 14:
        return "SHT_INIT_ARRAY";
      case 15:
        return "SHT_FINI_ARRAY";
      case 16:
        return "SHT_PREINIT_ARRAY";
      case 17:
        return "SHT_GROUP";
      case 18:
        return "SHT_SYMTAB_SHNDX";
      case 19:
        return "SHT_RELR";
      default:
        if (a2 == 1610612737)
        {
          uint64_t result = "SHT_ANDROID_REL";
        }
        else
        {
          if (a2 != 1610612738) {
            goto LABEL_60;
          }
          uint64_t result = "SHT_ANDROID_RELA";
        }
        break;
    }
  }
  return result;
}

uint64_t *llvm::object::ObjectFile::createELFObjectFile@<X0>(long long *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 1) > 0xFuLL)
  {
    __int16 v4 = *(_WORD *)(*(void *)a1 + 4);
    if (*(void *)a1)
    {
LABEL_3:
      v15[0] = (uint64_t)"Insufficient alignment";
      __int16 v16 = 259;
      LODWORD(v13) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
  }
  else
  {
    __int16 v4 = 0;
    if (*(void *)a1) {
      goto LABEL_3;
    }
  }
  if (v4 == 2)
  {
    int v8 = HIBYTE(v4);
    if (v8 == 2)
    {
      long long v11 = a1[1];
      long long v13 = *a1;
      long long v14 = v11;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::create((uint64_t)&v13, a2, (uint64_t)v15);
      if ((v17 & 1) == 0 || (uint64_t v7 = v15[0], v15[0] = 0, !v7)) {
        operator new();
      }
    }
    else
    {
      if (v8 != 1)
      {
        v15[0] = (uint64_t)"Invalid ELF data";
        __int16 v16 = 259;
        LODWORD(v13) = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
      }
      long long v9 = a1[1];
      long long v13 = *a1;
      long long v14 = v9;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::create((uint64_t)&v13, a2, (uint64_t)v15);
      if ((v17 & 1) == 0 || (uint64_t v7 = v15[0], v15[0] = 0, !v7)) {
        operator new();
      }
    }
  }
  else
  {
    if (v4 != 1)
    {
      v15[0] = (uint64_t)"Invalid ELF class";
      __int16 v16 = 259;
      LODWORD(v13) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    int v5 = HIBYTE(v4);
    if (v5 == 2)
    {
      long long v10 = a1[1];
      long long v13 = *a1;
      long long v14 = v10;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::create((uint64_t)&v13, a2, (uint64_t)v15);
      if ((v17 & 1) == 0 || (uint64_t v7 = v15[0], v15[0] = 0, !v7)) {
        operator new();
      }
    }
    else
    {
      if (v5 != 1)
      {
        v15[0] = (uint64_t)"Invalid ELF data";
        __int16 v16 = 259;
        LODWORD(v13) = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
      }
      long long v6 = a1[1];
      long long v13 = *a1;
      long long v14 = v6;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::create((uint64_t)&v13, a2, (uint64_t)v15);
      if ((v17 & 1) == 0 || (uint64_t v7 = v15[0], v15[0] = 0, !v7)) {
        operator new();
      }
    }
  }
  uint64_t result = llvm::Expected<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::~Expected(v15);
  *(unsigned char *)(a3 + 8) = *(unsigned char *)(a3 + 8) & 0xFE | 1;
  *(void *)a3 = v7;
  return result;
}

void llvm::object::ELFObjectFileBase::getFeatures(llvm::object::ELFObjectFileBase *this@<X0>, uint64_t a2@<X8>)
{
  v69[2] = *MEMORY[0x263EF8340];
  int v4 = (*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(void *)this + 544))(this);
  if (v4 <= 242)
  {
    if (v4 != 8)
    {
      if (v4 == 40)
      {
        long long v67 = 0uLL;
        uint64_t v68 = 0;
        llvm::SubtargetFeatures::Split((char **)&v67, (uint64_t)"", 0);
        *((void *)&v51 + 1) = "aeabi";
        uint64_t v52 = 5;
        long long v53 = 0u;
        long long v54 = 0u;
        int v55 = 1065353216;
        long long v56 = 0u;
        long long v57 = 0u;
        int v58 = 1065353216;
        uint64_t v59 = 0;
        long long v60 = &tagData;
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        uint64_t v61 = 52;
        __int16 v64 = 1;
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        *(void *)&long long v51 = &unk_270DBC2F8;
        (*(void (**)(void *__return_ptr, llvm::object::ELFObjectFileBase *, long long *))(*(void *)this + 512))(v69, this, &v51);
        uint64_t v5 = v69[0];
        if (v69[0])
        {
          v69[0] = 0;
          *(void *)&long long v49 = v5;
          llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v49);
          if ((void)v49) {
            (*(void (**)(void))(*(void *)v49 + 8))(v49);
          }
          uint64_t v50 = 0;
          long long v49 = 0uLL;
          llvm::SubtargetFeatures::Split((char **)&v49, (uint64_t)"", 0);
          if (v69[0]) {
            (*(void (**)(void))(*(void *)v69[0] + 8))(v69[0]);
          }
          goto LABEL_112;
        }
        long long v14 = v53;
        unsigned int v15 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v53, *((unint64_t *)&v53 + 1), 6u);
        if (v15) {
          BOOL v16 = *((_DWORD *)v15 + 5) == 10;
        }
        else {
          BOOL v16 = 0;
        }
        int v19 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v14, *((unint64_t *)&v14 + 1), 7u);
        if (v19)
        {
          int v20 = *((_DWORD *)v19 + 5);
          if (v20 == 65)
          {
            unsigned int v25 = "aclass";
            uint64_t v26 = 6;
          }
          else
          {
            if (v20 == 77)
            {
              llvm::SubtargetFeatures::AddFeature((char **)&v67, "mclass", 6, 1);
              if (!v16) {
                goto LABEL_73;
              }
            }
            else
            {
              if (v20 != 82) {
                goto LABEL_73;
              }
              llvm::SubtargetFeatures::AddFeature((char **)&v67, "rclass", 6, 1);
              if (!v16) {
                goto LABEL_73;
              }
            }
            unsigned int v25 = "hwdiv";
            uint64_t v26 = 5;
          }
          llvm::SubtargetFeatures::AddFeature((char **)&v67, (unsigned __int8 *)v25, v26, 1);
        }
LABEL_73:
        unint64_t v28 = *((void *)&v53 + 1);
        uint64_t v27 = v53;
        unint64_t v29 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v53, *((unint64_t *)&v53 + 1), 9u);
        if (!v29) {
          goto LABEL_79;
        }
        int v30 = *((_DWORD *)v29 + 5);
        if (v30 == 2)
        {
          int v31 = 1;
        }
        else
        {
          if (v30) {
            goto LABEL_79;
          }
          llvm::SubtargetFeatures::AddFeature((char **)&v67, "thumb", 5, 0);
          int v31 = 0;
        }
        llvm::SubtargetFeatures::AddFeature((char **)&v67, "thumb2", 6, v31);
        unint64_t v28 = *((void *)&v53 + 1);
        uint64_t v27 = v53;
LABEL_79:
        long long v32 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v27, v28, 0xAu);
        if (v32)
        {
          switch(*((_DWORD *)v32 + 5))
          {
            case 0:
              llvm::SubtargetFeatures::AddFeature((char **)&v67, "vfp2sp", 6, 0);
              llvm::SubtargetFeatures::AddFeature((char **)&v67, "vfp3d16sp", 9, 0);
              long long v33 = "vfp4d16sp";
              uint64_t v34 = 9;
              int v35 = 0;
              goto LABEL_86;
            case 2:
              long long v33 = "vfp2";
              goto LABEL_85;
            case 3:
            case 4:
              long long v33 = "vfp3";
              goto LABEL_85;
            case 5:
            case 6:
              long long v33 = "vfp4";
LABEL_85:
              uint64_t v34 = 4;
              int v35 = 1;
LABEL_86:
              llvm::SubtargetFeatures::AddFeature((char **)&v67, (unsigned __int8 *)v33, v34, v35);
              break;
            default:
              break;
          }
        }
        uint64_t v36 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v53, *((unint64_t *)&v53 + 1), 0xCu);
        if (!v36)
        {
LABEL_96:
          uint64_t v40 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v53, *((unint64_t *)&v53 + 1), 0x30u);
          if (!v40) {
            goto LABEL_105;
          }
          int v41 = *((_DWORD *)v40 + 5);
          if (v41 == 2)
          {
            int v42 = "mve.fp";
            uint64_t v43 = 6;
          }
          else
          {
            if (v41 != 1)
            {
              if (v41) {
                goto LABEL_105;
              }
              llvm::SubtargetFeatures::AddFeature((char **)&v67, "mve", 3, 0);
              int v42 = "mve.fp";
              uint64_t v43 = 6;
              int v44 = 0;
LABEL_104:
              llvm::SubtargetFeatures::AddFeature((char **)&v67, (unsigned __int8 *)v42, v43, v44);
LABEL_105:
              uint64_t v45 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v53, *((unint64_t *)&v53 + 1), 0x2Cu);
              if (v45)
              {
                int v46 = *((_DWORD *)v45 + 5);
                if (v46 == 1)
                {
                  int v47 = 0;
                  goto LABEL_110;
                }
                if (v46 == 2)
                {
                  int v47 = 1;
LABEL_110:
                  llvm::SubtargetFeatures::AddFeature((char **)&v67, "hwdiv", 5, v47);
                  llvm::SubtargetFeatures::AddFeature((char **)&v67, "hwdiv-arm", 9, v47);
                }
              }
              long long v49 = v67;
              uint64_t v50 = v68;
              uint64_t v68 = 0;
              long long v67 = 0uLL;
LABEL_112:
              llvm::ELFAttributeParser::~ELFAttributeParser((llvm::ELFAttributeParser *)&v51);
              *(void *)&long long v51 = &v67;
              std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v51);
              *(unsigned char *)(a2 + 24) &= ~1u;
              *(_OWORD *)a2 = v49;
              *(void *)(a2 + 16) = v50;
              long long v49 = 0uLL;
              uint64_t v50 = 0;
              long long v48 = &v49;
LABEL_115:
              *(void *)&long long v51 = v48;
              unint64_t v24 = (void ***)&v51;
              goto LABEL_116;
            }
            llvm::SubtargetFeatures::AddFeature((char **)&v67, "mve.fp", 6, 0);
            int v42 = "mve";
            uint64_t v43 = 3;
          }
          int v44 = 1;
          goto LABEL_104;
        }
        int v37 = *((_DWORD *)v36 + 5);
        if (v37 == 2)
        {
          llvm::SubtargetFeatures::AddFeature((char **)&v67, "neon", 4, 1);
          uint64_t v38 = "fp16";
        }
        else
        {
          if (v37 != 1)
          {
            if (v37) {
              goto LABEL_96;
            }
            llvm::SubtargetFeatures::AddFeature((char **)&v67, "neon", 4, 0);
            uint64_t v38 = "fp16";
            int v39 = 0;
            goto LABEL_95;
          }
          uint64_t v38 = "neon";
        }
        int v39 = 1;
LABEL_95:
        llvm::SubtargetFeatures::AddFeature((char **)&v67, (unsigned __int8 *)v38, 4, v39);
        goto LABEL_96;
      }
      goto LABEL_15;
    }
    long long v51 = 0uLL;
    uint64_t v52 = 0;
    llvm::SubtargetFeatures::Split((char **)&v51, (uint64_t)"", 0);
    unsigned int v9 = (*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(void *)this + 528))(this);
    long long v10 = "mips2";
    uint64_t v11 = 5;
    unsigned int v12 = v9;
    switch((v9 >> 28) ^ 8)
    {
      case 1u:
        long long v10 = "mips32r6";
        goto LABEL_58;
      case 2u:
        long long v10 = "mips64r6";
        goto LABEL_58;
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
        __break(1u);
        JUMPOUT(0x261D3CF24);
      case 8u:
        goto LABEL_60;
      case 9u:
        goto LABEL_59;
      case 0xAu:
        long long v10 = "mips3";
        goto LABEL_54;
      case 0xBu:
        long long v10 = "mips4";
        goto LABEL_54;
      case 0xCu:
        long long v10 = "mips5";
LABEL_54:
        uint64_t v11 = 5;
        goto LABEL_59;
      case 0xDu:
        long long v10 = "mips32";
        goto LABEL_56;
      case 0xEu:
        long long v10 = "mips64";
LABEL_56:
        uint64_t v11 = 6;
        goto LABEL_59;
      case 0xFu:
        long long v10 = "mips32r2";
        goto LABEL_58;
      default:
        long long v10 = "mips64r2";
LABEL_58:
        uint64_t v11 = 8;
LABEL_59:
        llvm::SubtargetFeatures::AddFeature((char **)&v51, (unsigned __int8 *)v10, v11, 1);
LABEL_60:
        if ((v12 & 0xFF0000) != 0) {
          llvm::SubtargetFeatures::AddFeature((char **)&v51, "cnmips", 6, 1);
        }
        if ((v12 & 0x4000000) != 0) {
          llvm::SubtargetFeatures::AddFeature((char **)&v51, "mips16", 6, 1);
        }
        if ((v12 & 0x2000000) == 0) {
          goto LABEL_67;
        }
        uint64_t v7 = "micromips";
        uint64_t v8 = 9;
        break;
    }
    goto LABEL_66;
  }
  if (v4 == 243)
  {
    long long v67 = 0uLL;
    uint64_t v68 = 0;
    llvm::SubtargetFeatures::Split((char **)&v67, (uint64_t)"", 0);
    if ((*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(void *)this + 528))(this)) {
      llvm::SubtargetFeatures::AddFeature((char **)&v67, "c", 1, 1);
    }
    *((void *)&v51 + 1) = "riscv";
    uint64_t v52 = 5;
    long long v53 = 0u;
    long long v54 = 0u;
    int v55 = 1065353216;
    long long v56 = 0u;
    long long v57 = 0u;
    int v58 = 1065353216;
    uint64_t v59 = 0;
    long long v60 = &tagData;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v61 = 6;
    __int16 v64 = 1;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    *(void *)&long long v51 = &unk_270DBD0B0;
    (*(void (**)(long long *__return_ptr, llvm::object::ELFObjectFileBase *, long long *))(*(void *)this
                                                                                                  + 512))(&v49, this, &v51);
    uint64_t v13 = v49;
    if ((void)v49)
    {
      *(unsigned char *)(a2 + 24) |= 1u;
      *(void *)a2 = v13;
    }
    else
    {
      if (*((void *)&v56 + 1))
      {
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v56 + 8));
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          uint64_t v18 = 5;
          if (*((void *)&v56 + 1) <= 5uLL) {
            uint64_t v18 = 5u % BYTE8(v56);
          }
        }
        else
        {
          uint64_t v18 = (DWORD2(v56) - 1) & 5;
        }
        uint64_t v21 = *(uint64_t ***)(v56 + 8 * v18);
        if (v21)
        {
          for (uint64_t i = *v21; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v23 = i[1];
            if (v23 == 5)
            {
              if (*((_DWORD *)i + 4) == 5) {
                llvm::RISCVISAInfo::parseNormalizedArchString(i[3], i[4]);
              }
            }
            else
            {
              if (v17.u32[0] > 1uLL)
              {
                if (v23 >= *((void *)&v56 + 1)) {
                  v23 %= *((void *)&v56 + 1);
                }
              }
              else
              {
                v23 &= *((void *)&v56 + 1) - 1;
              }
              if (v23 != v18) {
                break;
              }
            }
          }
        }
      }
      *(unsigned char *)(a2 + 24) &= ~1u;
      *(_OWORD *)a2 = v67;
      *(void *)(a2 + 16) = v68;
      long long v67 = 0uLL;
      uint64_t v68 = 0;
    }
    llvm::ELFAttributeParser::~ELFAttributeParser((llvm::ELFAttributeParser *)&v51);
    long long v48 = &v67;
    goto LABEL_115;
  }
  if (v4 == 258)
  {
    long long v51 = 0uLL;
    uint64_t v52 = 0;
    llvm::SubtargetFeatures::Split((char **)&v51, (uint64_t)"", 0);
    int v6 = (*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(void *)this + 528))(this) & 7;
    if (v6 != 2)
    {
      if (v6 != 3)
      {
LABEL_67:
        *(unsigned char *)(a2 + 24) &= ~1u;
        *(_OWORD *)a2 = v51;
        *(void *)(a2 + 16) = v52;
        long long v51 = 0uLL;
        uint64_t v52 = 0;
        *(void *)&long long v67 = &v51;
        goto LABEL_68;
      }
      llvm::SubtargetFeatures::AddFeature((char **)&v51, "d", 1, 1);
    }
    uint64_t v7 = "f";
    uint64_t v8 = 1;
LABEL_66:
    llvm::SubtargetFeatures::AddFeature((char **)&v51, (unsigned __int8 *)v7, v8, 1);
    goto LABEL_67;
  }
LABEL_15:
  long long v51 = 0uLL;
  uint64_t v52 = 0;
  llvm::SubtargetFeatures::Split((char **)&v51, (uint64_t)"", 0);
  *(unsigned char *)(a2 + 24) &= ~1u;
  *(_OWORD *)a2 = v51;
  *(void *)(a2 + 16) = v52;
  long long v51 = 0uLL;
  uint64_t v52 = 0;
  *(void *)&long long v67 = &v51;
LABEL_68:
  unint64_t v24 = (void ***)&v67;
LABEL_116:
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v24);
}

uint64_t llvm::object::ELFObjectFileBase::tryGetCPUName@<X0>(llvm::object::ELFObjectFileBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(void *)this + 544))(this);
  if (result == 21)
  {
    uint64_t v5 = "future";
LABEL_6:
    uint64_t v6 = 6;
  }
  else
  {
    if (result != 224)
    {
      char v7 = 0;
      *(unsigned char *)a2 = 0;
      goto LABEL_9;
    }
    uint64_t result = (*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(void *)this + 528))(this);
    uint64_t v5 = "r600";
    uint64_t v6 = 4;
    switch((char)result)
    {
      case 2:
        uint64_t v5 = "r630";
        goto LABEL_22;
      case 3:
        uint64_t v5 = "rs880";
        goto LABEL_40;
      case 4:
        uint64_t v5 = "rv670";
        goto LABEL_40;
      case 5:
        uint64_t v5 = "rv710";
        goto LABEL_40;
      case 6:
        uint64_t v5 = "rv730";
        goto LABEL_40;
      case 7:
        uint64_t v5 = "rv770";
        goto LABEL_40;
      case 8:
        uint64_t v5 = "cedar";
        goto LABEL_40;
      case 9:
        uint64_t v5 = "cypress";
        goto LABEL_64;
      case 10:
        uint64_t v5 = "juniper";
        goto LABEL_64;
      case 11:
        uint64_t v5 = "redwood";
        goto LABEL_64;
      case 12:
        uint64_t v5 = "sumo";
LABEL_22:
        uint64_t v6 = 4;
        break;
      case 13:
        uint64_t v5 = "barts";
        goto LABEL_40;
      case 14:
        uint64_t v5 = "caicos";
        goto LABEL_6;
      case 15:
        uint64_t v5 = "cayman";
        goto LABEL_6;
      case 16:
        uint64_t v5 = "turks";
LABEL_40:
        uint64_t v6 = 5;
        break;
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 39:
      case 67:
        __break(1u);
        JUMPOUT(0x261D3D2F4);
      case 32:
        uint64_t v5 = "gfx600";
        goto LABEL_6;
      case 33:
        uint64_t v5 = "gfx601";
        goto LABEL_6;
      case 34:
        uint64_t v5 = "gfx700";
        goto LABEL_6;
      case 35:
        uint64_t v5 = "gfx701";
        goto LABEL_6;
      case 36:
        uint64_t v5 = "gfx702";
        goto LABEL_6;
      case 37:
        uint64_t v5 = "gfx703";
        goto LABEL_6;
      case 38:
        uint64_t v5 = "gfx704";
        goto LABEL_6;
      case 40:
        uint64_t v5 = "gfx801";
        goto LABEL_6;
      case 41:
        uint64_t v5 = "gfx802";
        goto LABEL_6;
      case 42:
        uint64_t v5 = "gfx803";
        goto LABEL_6;
      case 43:
        uint64_t v5 = "gfx810";
        goto LABEL_6;
      case 44:
        uint64_t v5 = "gfx900";
        goto LABEL_6;
      case 45:
        uint64_t v5 = "gfx902";
        goto LABEL_6;
      case 46:
        uint64_t v5 = "gfx904";
        goto LABEL_6;
      case 47:
        uint64_t v5 = "gfx906";
        goto LABEL_6;
      case 48:
        uint64_t v5 = "gfx908";
        goto LABEL_6;
      case 49:
        uint64_t v5 = "gfx909";
        goto LABEL_6;
      case 50:
        uint64_t v5 = "gfx90c";
        goto LABEL_6;
      case 51:
        uint64_t v5 = "gfx1010";
        goto LABEL_64;
      case 52:
        uint64_t v5 = "gfx1011";
        goto LABEL_64;
      case 53:
        uint64_t v5 = "gfx1012";
        goto LABEL_64;
      case 54:
        uint64_t v5 = "gfx1030";
        goto LABEL_64;
      case 55:
        uint64_t v5 = "gfx1031";
        goto LABEL_64;
      case 56:
        uint64_t v5 = "gfx1032";
        goto LABEL_64;
      case 57:
        uint64_t v5 = "gfx1033";
        goto LABEL_64;
      case 58:
        uint64_t v5 = "gfx602";
        goto LABEL_6;
      case 59:
        uint64_t v5 = "gfx705";
        goto LABEL_6;
      case 60:
        uint64_t v5 = "gfx805";
        goto LABEL_6;
      case 61:
        uint64_t v5 = "gfx1035";
        goto LABEL_64;
      case 62:
        uint64_t v5 = "gfx1034";
        goto LABEL_64;
      case 63:
        uint64_t v5 = "gfx90a";
        goto LABEL_6;
      case 64:
        uint64_t v5 = "gfx940";
        goto LABEL_6;
      case 65:
        uint64_t v5 = "gfx1100";
        goto LABEL_64;
      case 66:
        uint64_t v5 = "gfx1013";
        goto LABEL_64;
      case 68:
        uint64_t v5 = "gfx1103";
        goto LABEL_64;
      case 69:
        uint64_t v5 = "gfx1036";
        goto LABEL_64;
      case 70:
        uint64_t v5 = "gfx1101";
        goto LABEL_64;
      case 71:
        uint64_t v5 = "gfx1102";
LABEL_64:
        uint64_t v6 = 7;
        break;
      default:
        break;
    }
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  char v7 = 1;
LABEL_9:
  *(unsigned char *)(a2 + 16) = v7;
  return result;
}

void llvm::object::ELFObjectFileBase::setARMSubArch(llvm::object::ELFObjectFileBase *this, llvm::Triple *a2)
{
  if (!*((_DWORD *)a2 + 7))
  {
    v15[1] = "aeabi";
    void v15[2] = 5;
    long long v16 = 0u;
    long long v17 = 0u;
    int v18 = 1065353216;
    long long v19 = 0u;
    long long v20 = 0u;
    int v21 = 1065353216;
    uint64_t v22 = 0;
    unint64_t v23 = &tagData;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v24 = 52;
    __int16 v27 = 1;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    v15[0] = &unk_270DBC2F8;
    (*(void (**)(std::string::size_type *__return_ptr))(*(void *)this + 512))(&v14);
    std::string::size_type v4 = v14;
    if (v14)
    {
      std::string::size_type v14 = 0;
      __p.__r_.__value_.__r.__words[0] = v4;
      llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&__p);
      if (__p.__r_.__value_.__r.__words[0]) {
        (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 8))(__p.__r_.__value_.__r.__words[0]);
      }
      if (v14) {
        (*(void (**)(std::string::size_type))(*(void *)v14 + 8))(v14);
      }
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      if ((*((_DWORD *)a2 + 6) - 35) >= 2) {
        uint64_t v5 = "arm";
      }
      else {
        uint64_t v5 = "thumb";
      }
      MEMORY[0x263E4FD30](&__p, v5);
      long long v6 = v16;
      char v7 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v16, *((unint64_t *)&v16 + 1), 6u);
      if (v7)
      {
        uint64_t v8 = "v4";
        switch(*((_DWORD *)v7 + 5))
        {
          case 1:
            goto LABEL_33;
          case 2:
            uint64_t v8 = "v4t";
            goto LABEL_33;
          case 3:
            uint64_t v8 = "v5t";
            goto LABEL_33;
          case 4:
            uint64_t v8 = "v5te";
            goto LABEL_33;
          case 5:
            uint64_t v8 = "v5tej";
            goto LABEL_33;
          case 6:
            uint64_t v8 = "v6";
            goto LABEL_33;
          case 7:
            uint64_t v8 = "v6kz";
            goto LABEL_33;
          case 8:
            uint64_t v8 = "v6t2";
            goto LABEL_33;
          case 9:
            uint64_t v8 = "v6k";
            goto LABEL_33;
          case 0xA:
            unsigned int v9 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v6, *((unint64_t *)&v6 + 1), 7u);
            if (v9 && *((_DWORD *)v9 + 5) == 77) {
              uint64_t v8 = "v7m";
            }
            else {
              uint64_t v8 = "v7";
            }
            goto LABEL_33;
          case 0xB:
            uint64_t v8 = "v6m";
            goto LABEL_33;
          case 0xC:
            uint64_t v8 = "v6sm";
            goto LABEL_33;
          case 0xD:
            uint64_t v8 = "v7em";
            goto LABEL_33;
          case 0xE:
            uint64_t v8 = "v8a";
            goto LABEL_33;
          case 0xF:
            uint64_t v8 = "v8r";
            goto LABEL_33;
          case 0x10:
            uint64_t v8 = "v8m.base";
            goto LABEL_33;
          case 0x11:
            uint64_t v8 = "v8m.main";
            goto LABEL_33;
          case 0x15:
            uint64_t v8 = "v8.1m.main";
            goto LABEL_33;
          case 0x16:
            uint64_t v8 = "v9a";
LABEL_33:
            std::string::append(&__p, v8);
            break;
          default:
            break;
        }
      }
      unsigned int v10 = *((_DWORD *)this + 2);
      if (v10 <= 0x14 && ((1 << v10) & 0x155800) != 0) {
        std::string::append(&__p, "eb");
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      llvm::Triple::setArchName(a2, p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    llvm::ELFAttributeParser::~ELFAttributeParser((llvm::ELFAttributeParser *)v15);
  }
}

uint64_t llvm::object::ObjectFile::getStartAddress@<X0>(llvm::object::ObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)&v4.__val_ = llvm::object::object_category(this);
  uint64_t result = llvm::errorCodeToError((llvm *)3, v4, (void *)a2);
  *(unsigned char *)(a2 + 8) |= 1u;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  uint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t llvm::Expected<std::unique_ptr<llvm::RISCVISAInfo>>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(void *)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    std::unique_ptr<llvm::RISCVISAInfo>::reset[abi:nn180100]((uint64_t *)a1, 0);
  }
  return a1;
}

llvm::object::GenericBinaryError *llvm::object::GenericBinaryError::GenericBinaryError(llvm::object::GenericBinaryError *this, const llvm::Twine *a2)
{
  *(void *)this = &unk_270DBCC28;
  *((_DWORD *)this + 2) = 0;
  unint64_t v4 = (llvm::object *)std::system_category();
  *((void *)this + 2) = v4;
  *(void *)this = &unk_270DC0AF8;
  llvm::object::object_category(v4);
  *((void *)this + 1) = 3;
  *((void *)this + 2) = llvm::object::object_category(void)::error_category;
  *(void *)this = &unk_270DC0A60;
  llvm::Twine::str(a2, (std::string *)this + 1);
  return this;
}

uint64_t llvm::object::GenericBinaryError::GenericBinaryError(uint64_t a1, llvm::Twine *a2, unsigned int a3)
{
  *(void *)a1 = &unk_270DBCC28;
  *(_DWORD *)(a1 + 8) = 0;
  long long v6 = (llvm::object *)std::system_category();
  *(void *)(a1 + 16) = v6;
  *(void *)a1 = &unk_270DC0AF8;
  llvm::object::object_category(v6);
  *(void *)(a1 + 8) = 3;
  *(void *)(a1 + 16) = llvm::object::object_category(void)::error_category;
  *(void *)a1 = &unk_270DC0A60;
  llvm::Twine::str(a2, (std::string *)(a1 + 24));
  llvm::object::object_category(v7);
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = llvm::object::object_category(void)::error_category;
  return a1;
}

llvm::raw_ostream *llvm::object::GenericBinaryError::log(llvm::object::GenericBinaryError *this, llvm::raw_ostream *a2)
{
  uint64_t v5 = (const char *)*((void *)this + 3);
  uint8x8_t v3 = (char *)this + 24;
  unint64_t v4 = v5;
  int v6 = v3[23];
  if (v6 >= 0) {
    unint64_t v7 = v3;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v6 >= 0) {
    size_t v8 = v3[23];
  }
  else {
    size_t v8 = *((void *)v3 + 1);
  }
  return llvm::raw_ostream::write(a2, v7, v8);
}

void (***llvm::object::object_category(llvm::object *this))(_anonymous_namespace_::_object_error_category *__hidden this)
{
  {
  }
  return llvm::object::object_category(void)::error_category;
}

void llvm::object::BinaryError::~BinaryError(llvm::object::BinaryError *this)
{
}

void *llvm::ErrorInfo<llvm::object::BinaryError,llvm::ECError>::dynamicClassID()
{
  return &llvm::object::BinaryError::ID;
}

uint64_t llvm::ErrorInfo<llvm::object::BinaryError,llvm::ECError>::isA(uint64_t a1, void *a2)
{
  BOOL v3 = a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
  return a2 == &llvm::object::BinaryError::ID || v3;
}

void llvm::object::GenericBinaryError::~GenericBinaryError(void **this)
{
  *this = &unk_270DC0A60;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

{
  uint64_t vars8;

  *this = &unk_270DC0A60;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  JUMPOUT(0x263E500B0);
}

void *llvm::ErrorInfo<llvm::object::GenericBinaryError,llvm::object::BinaryError>::dynamicClassID()
{
  return &llvm::object::GenericBinaryError::ID;
}

uint64_t llvm::ErrorInfo<llvm::object::GenericBinaryError,llvm::object::BinaryError>::isA(uint64_t a1, void *a2)
{
  BOOL v3 = a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
  return a2 == &llvm::object::GenericBinaryError::ID || a2 == &llvm::object::BinaryError::ID || v3;
}

void anonymous namespace'::_object_error_category::~_object_error_category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x263E500B0);
}

const char *anonymous namespace'::_object_error_category::name(_anonymous_namespace_::_object_error_category *this)
{
  return "llvm.object";
}

void *anonymous namespace'::_object_error_category::message@<X0>(int a1@<W1>, void *a2@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a2, off_265595F30[a1 - 1]);
}

void llvm::object::IRObjectFile::~IRObjectFile(llvm::object::IRObjectFile *this)
{
  *(void *)this = &unk_270DC0B48;
  MEMORY[0x263E500A0](*((void *)this + 25), 8);
  uint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }
  llvm::SpecificBumpPtrAllocator<std::pair<std::string,unsigned int>>::DestroyAll((uint64_t)this + 80);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 80);
  BOOL v3 = (void **)((char *)this + 48);
  std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:nn180100](&v3);
}

{
  uint64_t vars8;

  llvm::object::IRObjectFile::~IRObjectFile(this);
  JUMPOUT(0x263E500B0);
}

void llvm::object::IRObjectFile::moveSymbolNext(uint64_t a1, void *a2)
{
  *a2 += 8;
}

void llvm::object::IRObjectFile::printSymbolName(uint64_t a1@<X0>, llvm::raw_ostream *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
}

uint64_t llvm::object::IRObjectFile::getSymbolFlags@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = llvm::ModuleSymbolTable::getSymbolFlags(a1 + 72, *a2);
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = result;
  return result;
}

uint64_t llvm::object::IRObjectFile::symbol_begin(llvm::object::IRObjectFile *this)
{
  return *((void *)this + 22);
}

uint64_t llvm::object::IRObjectFile::symbol_end(llvm::object::IRObjectFile *this)
{
  return *((void *)this + 23);
}

__n128 llvm::object::IRObjectFile::findBitcodeInObject@<Q0>(__n128 *this@<X0>, const llvm::object::ObjectFile *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v5 = (*(uint64_t (**)(__n128 *, const llvm::object::ObjectFile *))(this->n128_u64[0] + 352))(this, a2);
  uint64_t v7 = v6;
  size_t v8 = (llvm::object *)(*(uint64_t (**)(__n128 *))(this->n128_u64[0] + 360))(this);
  uint64_t v17 = v5;
  uint64_t v18 = v7;
  if (v7 == v9 && v5 == (void)v8) {
    goto LABEL_15;
  }
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7 + 232))(v7, v5))
  {
    size_t v8 = (llvm::object *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v18 + 136))(v18, &v17);
    uint64_t v5 = v17;
    uint64_t v7 = v18;
    if (v18 == v12 && v17 == (void)v11) {
      goto LABEL_15;
    }
  }
  size_t v8 = (llvm::object *)(*(void *(**)(unint64_t *__return_ptr))(*(void *)v18 + 176))(&v19);
  unint64_t v15 = v19;
  if (v21)
  {
    a3[2].n128_u8[0] |= 1u;
    a3->n128_u64[0] = v15;
    return result;
  }
  unint64_t v16 = v20;
  if (v20 <= 1)
  {
LABEL_15:
    *(void *)&v23.__val_ = llvm::object::object_category(v8);
    llvm::errorCodeToError((llvm *)7, v23, a3);
    a3[2].n128_u8[0] |= 1u;
  }
  else
  {
    a3[2].n128_u8[0] &= ~1u;
    a3->n128_u64[0] = v15;
    a3->n128_u64[1] = v16;
    __n128 result = this[2];
    a3[1] = result;
  }
  return result;
}

uint64_t llvm::object::IRObjectFile::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(unsigned __int8 **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  __n128 v41 = *(_OWORD *)(a1 + 16);
  uint64_t v7 = llvm::identify_magic(v6, v5);
  if (v7 > 0x1E)
  {
LABEL_36:
    *(void *)&v59.__val_ = llvm::object::object_category((llvm::object *)v7);
    uint64_t result = llvm::errorCodeToError((llvm *)2, v59, &v51);
    goto LABEL_37;
  }
  if (((1 << v7) & 0x41000210) == 0)
  {
    if (v7 == 1)
    {
      char v53 = 0;
      v51.n128_u64[0] = (unint64_t)v6;
      v51.n128_u64[1] = v5;
      __n128 v52 = v41;
      goto LABEL_9;
    }
    goto LABEL_36;
  }
  *(void *)&long long v34 = v6;
  *((void *)&v34 + 1) = v5;
  long long v35 = v41;
  llvm::object::ObjectFile::createObjectFile((uint64_t)&v34, v7, 1, (uint64_t)&v54);
  uint64_t v9 = v54;
  if (v55.i8[0])
  {
    long long v54 = 0;
    v51.n128_u64[0] = (unint64_t)v9;
    uint64_t result = (uint64_t)llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected((uint64_t *)&v54);
LABEL_37:
    unint64_t v30 = v51.n128_u64[0];
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v30;
    return result;
  }
  llvm::object::IRObjectFile::findBitcodeInObject(v54, v8, &v51);
  char v10 = v53;
  uint64_t result = (uint64_t)llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected((uint64_t *)&v54);
  if (v10) {
    goto LABEL_37;
  }
LABEL_9:
  v40[0] = v51;
  v40[1] = (__n128)v52;
  llvm::getBitcodeModuleList(v40, (uint64_t)&v48);
  if (v50)
  {
    int v31 = v48;
    long long v48 = 0;
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v31;
    return llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v48);
  }
  else
  {
    int64x2_t v38 = 0uLL;
    v39[0] = 0;
    uint64_t v12 = v48;
    uint64_t v13 = v49;
    if (v48 == v49) {
LABEL_35:
    }
      operator new();
    while (1)
    {
      long long v34 = *v12;
      long long v35 = v12[1];
      long long v36 = v12[2];
      long long v37 = v12[3];
      memset(v42, 0, sizeof(v42));
      long long v43 = 0u;
      memset(v44, 0, sizeof(v44));
      uint64_t v45 = 0;
      llvm::BitcodeModule::getLazyModule((uint64_t)&v34, a2, v42, (uint64_t)&v46);
      if ((_BYTE)v45) {
        std::__function::__value_func<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::~__value_func[abi:nn180100](v44);
      }
      if (BYTE8(v43)) {
        std::__function::__value_func<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::~__value_func[abi:nn180100](&v42[5]);
      }
      if (LOBYTE(v42[4])) {
        std::__function::__value_func<std::optional<std::string> ()(llvm::StringRef,llvm::StringRef)>::~__value_func[abi:nn180100](v42);
      }
      if (v47) {
        break;
      }
      uint64_t v14 = v38.i64[1];
      if (v38.i64[1] >= v39[0])
      {
        uint64_t v16 = (v38.i64[1] - v38.i64[0]) >> 3;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61) {
          abort();
        }
        uint64_t v18 = v39[0] - v38.i64[0];
        if ((v39[0] - v38.i64[0]) >> 2 > v17) {
          unint64_t v17 = v18 >> 2;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        long long v57 = v39;
        if (v19) {
          unint64_t v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)v39, v19);
        }
        else {
          unint64_t v20 = 0;
        }
        char v21 = &v20[8 * v16];
        uint64_t v22 = &v20[8 * v19];
        long long v56 = v22;
        uint64_t v23 = v46;
        uint64_t v46 = 0;
        *(void *)char v21 = v23;
        uint64_t v24 = v21 + 8;
        v55.i64[1] = (uint64_t)(v21 + 8);
        uint64_t v25 = (void *)v38.i64[1];
        uint64_t v26 = (void *)v38.i64[0];
        if (v38.i64[1] == v38.i64[0])
        {
          int64x2_t v28 = vdupq_n_s64(v38.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v27 = *--v25;
            *uint64_t v25 = 0;
            *((void *)v21 - 1) = v27;
            v21 -= 8;
          }
          while (v25 != v26);
          int64x2_t v28 = v38;
          uint64_t v24 = (void *)v55.i64[1];
          uint64_t v22 = v56;
        }
        v38.i64[0] = (uint64_t)v21;
        v38.i64[1] = (uint64_t)v24;
        int64x2_t v55 = v28;
        uint64_t v29 = (char *)v39[0];
        v39[0] = v22;
        long long v56 = v29;
        long long v54 = (__n128 *)v28.i64[0];
        std::__split_buffer<std::unique_ptr<llvm::Module>>::~__split_buffer((uint64_t)&v54);
        v38.i64[1] = (uint64_t)v24;
      }
      else
      {
        uint64_t v15 = v46;
        uint64_t v46 = 0;
        *(void *)v38.i64[1] = v15;
        v38.i64[1] = v14 + 8;
      }
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t)&v46);
      v12 += 4;
      if (v12 == v13) {
        goto LABEL_35;
      }
    }
    uint64_t v32 = v46;
    uint64_t v46 = 0;
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v32;
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t)&v46);
    *(void *)&long long v34 = &v38;
    std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v34);
    char v33 = v53;
    uint64_t result = llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v48);
    if (v33)
    {
      uint64_t result = v51.n128_u64[0];
      if (v51.n128_u64[0]) {
        return (*(uint64_t (**)(unint64_t))(*(void *)v51.n128_u64[0] + 8))(v51.n128_u64[0]);
      }
    }
  }
  return result;
}

BOOL llvm::object::IRObjectFile::is64Bit(llvm::object::IRObjectFile *this)
{
  uint64_t v1 = **((void **)this + 6);
  uint64_t v4 = *(void *)(v1 + 208);
  uint64_t v2 = v1 + 208;
  uint64_t v3 = v4;
  int v5 = *(char *)(v2 + 23);
  if (v5 >= 0) {
    uint64_t v3 = v2;
  }
  uint64_t v6 = *(void *)(v2 + 8);
  if (v5 >= 0) {
    uint64_t v6 = v5;
  }
  __int16 v10 = 261;
  v9[0] = v3;
  v9[1] = v6;
  llvm::Triple::Triple(&__p, (const llvm::Twine *)v9);
  int v7 = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return getArchPointerBitWidth(v7) == 64;
}

uint64_t llvm::SpecificBumpPtrAllocator<std::pair<std::string,unsigned int>>::DestroyAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v8 = *(void *)a1;
      }
      else
      {
        uint64_t v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        unint64_t v8 = v6 + (4096 << v7);
      }
      for (unint64_t i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32; i <= v8; i += 32)
      {
        if (*(char *)(i - 9) < 0) {
          operator delete(*(void **)(i - 32));
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 72);
  if (v10)
  {
    uint64_t v11 = *(void **)(a1 + 64);
    int v12 = &v11[2 * v10];
    do
    {
      unint64_t v13 = *v11 + v11[1];
      for (unint64_t j = ((*v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 32; j <= v13; j += 32)
      {
        if (*(char *)(j - 9) < 0) {
          operator delete(*(void **)(j - 32));
        }
      }
      v11 += 2;
    }
    while (v11 != v12);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

void std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (llvm::Module **)**a1;
  if (v2)
  {
    uint64_t v4 = (llvm::Module **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<llvm::Module>::reset[abi:nn180100](--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<llvm::Module>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<llvm::Module>::reset[abi:nn180100]((llvm::Module **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t llvm::Expected<llvm::BitcodeFileContents>::~Expected(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 56);
  uint64_t v3 = *(void **)a1;
  if (v2)
  {
    *(void *)a1 = 0;
    if (v3) {
      (*(void (**)(void *))(*(void *)v3 + 8))(v3);
    }
  }
  else if (v3)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

char *_GLOBAL__sub_I_IRSymtab_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&qword_26B41C210, 0, 0);
  byte_26B41C290 = 0;
  qword_26B41C298 = (uint64_t)&unk_270DBC978;
  unk_26B41C2A0 = 0;
  qword_26B41C210 = (uint64_t)&unk_270DBC910;
  qword_26B41C2A8 = (uint64_t)&unk_270DBC658;
  qword_26B41C2B0 = (uint64_t)&unk_270DBC998;
  qword_26B41C2C8 = (uint64_t)&qword_26B41C2B0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"disable-bitcode-version-upgrade", 0x1FuLL);
  word_26B41C21A = word_26B41C21A & 0xFF9F | 0x20;
  qword_26B41C230 = (uint64_t)"Disable automatic bitcode upgrade for version mismatch";
  unk_26B41C238 = 54;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41C210);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B41C210, &dword_261C2B000);
  uint64_t result = getenv("LLVM_OVERRIDE_PRODUCER");
  if (result) {
    char v2 = result;
  }
  _MergedGlobals_28 = (uint64_t)v2;
  return result;
}

void llvm::object::MachOObjectFile::create()
{
  uint64_t v0 = 0;
  operator new();
}

uint64_t llvm::object::MachOObjectFile::MachOObjectFile(uint64_t a1, long long *a2, int a3, int a4, uint64_t *a5, int a6, unsigned int a7)
{
  uint64_t v323 = *MEMORY[0x263EF8340];
  long long v10 = *a2;
  long long v9 = a2[1];
  if (a4) {
    int v11 = 19;
  }
  else {
    int v11 = 17;
  }
  if (a4) {
    int v12 = 20;
  }
  else {
    int v12 = 18;
  }
  if (!a3) {
    int v11 = v12;
  }
  *(_DWORD *)(a1 + 8) = v11;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = v9;
  *(void *)a1 = &unk_270DC0BA0;
  *(void *)(a1 + 80) = a1 + 96;
  unint64_t v13 = (unsigned int *)(a1 + 80);
  *(void *)(a1 + 104) = a1 + 120;
  uint64_t v14 = (unsigned int *)(a1 + 104);
  *(void *)(a1 + 88) = 0x100000000;
  *(void *)(a1 + 112) = 0x100000000;
  uint64_t v15 = (void *)(a1 + 144);
  *(void *)(a1 + 128) = a1 + 144;
  uint64_t v16 = a1 + 128;
  *(void *)(a1 + 208) = a1 + 224;
  unint64_t v17 = (void *)(a1 + 208);
  *(void *)(a1 + 136) = 0x400000000;
  *(void *)(a1 + 216) = 0x100000000;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = 0x100000000;
  *(void *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(unsigned char *)(a1 + 344) = 0;
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v18 = *(void *)(a1 + 24);
  if ((v11 - 19) <= 1)
  {
    if ((unint64_t)v18 <= 0x1F)
    {
      unint64_t v20 = "the mach header extends past the end of the file";
      goto LABEL_16;
    }
    if (v18 < 32)
    {
      unint64_t v20 = "Structure read out-of-range";
LABEL_16:
      v306.i64[0] = (uint64_t)v20;
      LOWORD(v308) = 259;
      malformedError((const llvm::Twine *)&v317, v306.i64);
    }
    unsigned int v23 = *(_DWORD *)v19;
    uint64_t v22 = *(unsigned int *)(v19 + 4);
    int8x16_t v24 = *(int8x16_t *)(v19 + 8);
    int8x8_t v25 = *(int8x8_t *)(v19 + 24);
    if (!a3 && a4)
    {
      unsigned int v23 = bswap32(v23);
      uint64_t v22 = bswap32(v22);
      int8x16_t v24 = vrev32q_s8(v24);
      int8x8_t v25 = vrev32_s8(v25);
    }
    *(void *)(a1 + 48) = v23 | (unint64_t)(v22 << 32);
    *(int8x16_t *)(a1 + 56) = v24;
    *(int8x8_t *)(a1 + 72) = v25;
    uint64_t v26 = 32;
    goto LABEL_27;
  }
  if ((unint64_t)v18 <= 0x1B)
  {
    char v21 = "the mach header extends past the end of the file";
    goto LABEL_19;
  }
  if (v18 < 28)
  {
    char v21 = "Structure read out-of-range";
LABEL_19:
    v306.i64[0] = (uint64_t)v21;
    LOWORD(v308) = 259;
    malformedError((const llvm::Twine *)&v317, v306.i64);
  }
  unsigned int v28 = *(_DWORD *)v19;
  uint64_t v27 = *(unsigned int *)(v19 + 4);
  int8x16_t v29 = *(int8x16_t *)(v19 + 8);
  unsigned int v30 = *(_DWORD *)(v19 + 24);
  if (v11 == 18)
  {
    unsigned int v28 = bswap32(v28);
    uint64_t v27 = bswap32(v27);
    int8x16_t v29 = vrev32q_s8(v29);
    unsigned int v30 = bswap32(v30);
  }
  *(void *)(a1 + 48) = v28 | (unint64_t)(v27 << 32);
  *(int8x16_t *)(a1 + 56) = v29;
  *(_DWORD *)(a1 + 72) = v30;
  uint64_t v26 = 28;
LABEL_27:
  if (*a5) {
    return a1;
  }
  if (v26 + *(unsigned int *)(a1 + 68) > *(void *)(a1 + 24))
  {
    v306.i64[0] = (uint64_t)"load commands extend past the end of the file";
    LOWORD(v308) = 259;
    malformedError((const llvm::Twine *)&v317, v306.i64);
  }
  int v31 = *(_DWORD *)(a1 + 72);
  if (a6 && *(_DWORD *)(a1 + 52) != a6)
  {
    v317.i64[0] = (uint64_t)"universal header architecture: ";
    *(void *)&long long v318 = a7;
    LOWORD(v319) = 2051;
    v306.i64[0] = (uint64_t)&v317;
    *(void *)&long long v307 = "'s cputype does not match object file's mach header";
    LOWORD(v308) = 770;
    malformedError((const llvm::Twine *)&v301, v306.i64);
  }
  unint64_t v267 = v26 + *(unsigned int *)(a1 + 68);
  char v33 = operator new(0x28uLL);
  v33[2] = 0;
  v33[3] = v267;
  v33[4] = "Mach-O headers";
  void *v33 = &v277;
  v33[1] = &v277;
  v277 = v33;
  v278 = v33;
  uint64_t v279 = 1;
  uint64_t v268 = *(unsigned int *)(a1 + 64);
  if (!v268)
  {
    uint64_t v36 = 0;
    goto LABEL_40;
  }
  int v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  if (*(_DWORD *)(a1 + 68) <= 7u)
  {
    long long v35 = "load command 0 extends past the end all load commands in the file";
    goto LABEL_561;
  }
  uint64_t v40 = 28;
  if (v34) {
    uint64_t v40 = 32;
  }
  getLoadCommandInfo((uint64_t)&v317, (const char *)a1, (_DWORD *)(*(void *)(a1 + 16) + v40), 0);
  if (v318)
  {
    uint64_t v62 = v317.i64[0];
LABEL_563:
    *a5 = v62;
    goto LABEL_564;
  }
  int v263 = v31;
  unint64_t v41 = 0;
  uint64_t v259 = 0;
  uint64_t v260 = 0;
  uint64_t v262 = 0;
  uint64_t v261 = 0;
  uint64_t v36 = 0;
  uint64_t v266 = 0;
  v264 = 0;
  v265 = (void *)(a1 + 16);
  int8x16_t v276 = v317;
  uint64_t v274 = 0;
  uint64_t v275 = 0;
  v272 = 0;
  uint64_t v273 = 0;
  unint64_t v270 = 0;
  uint64_t v271 = 0;
  do
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1))
    {
      if ((v276.i8[12] & 7) != 0)
      {
        BOOL v42 = (v276.i8[12] & 3) == 0 && *(_DWORD *)(a1 + 60) == 4;
        if (!v42 || v276.i32[2] != 4)
        {
          v301.i64[0] = (uint64_t)"load command ";
          LOWORD(v303) = 259;
          LOWORD(v314) = 264;
          v312.i32[0] = v41;
          llvm::operator+(v301.i64, v312.i64, (uint64_t)&v317);
          v224 = " cmdsize not a multiple of 8";
          goto LABEL_568;
        }
      }
    }
    else if ((v276.i8[12] & 3) != 0)
    {
      v301.i64[0] = (uint64_t)"load command ";
      LOWORD(v303) = 259;
      LOWORD(v314) = 264;
      v312.i32[0] = v41;
      llvm::operator+(v301.i64, v312.i64, (uint64_t)&v317);
      v224 = " cmdsize not a multiple of 4";
      goto LABEL_568;
    }
    int8x16_t v44 = v276;
    unint64_t v45 = *(unsigned int *)(a1 + 136);
    if (v45 >= *(unsigned int *)(a1 + 140))
    {
      int8x16_t v258 = v276;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v16, v15, v45 + 1, 16);
      int8x16_t v44 = v258;
      unint64_t v45 = *(unsigned int *)(a1 + 136);
    }
    *(int8x16_t *)(*(void *)(a1 + 128) + 16 * v45) = v44;
    ++*(_DWORD *)(a1 + 136);
    if (*(uint64_t *)((char *)v276.i64 + 4) <= 0)
    {
      switch(v276.i32[2])
      {
        case 0x80000018:
          uint64_t v47 = a1;
          unsigned int v48 = v41;
          long long v49 = "LC_LOAD_WEAK_DYLIB";
          goto LABEL_99;
        case 0x80000019:
        case 0x8000001A:
        case 0x8000001B:
        case 0x8000001D:
        case 0x8000001E:
        case 0x80000020:
        case 0x80000021:
          goto LABEL_134;
        case 0x8000001C:
          if (v276.i32[3] > 0xBu)
          {
            unint64_t v84 = *(void *)(a1 + 16);
            if (v276.i64[0] < v84 || v276.i64[0] + 12 > v84 + *(void *)(a1 + 24))
            {
LABEL_156:
              v306.i64[0] = (uint64_t)"Structure read out-of-range";
              __int16 v90 = 259;
              goto LABEL_223;
            }
            unsigned int v85 = *(_DWORD *)(v276.i64[0] + 4);
            unsigned int v86 = *(_DWORD *)(v276.i64[0] + 8);
            unsigned int v87 = *(_DWORD *)(a1 + 8);
            unsigned int v88 = bswap32(v85);
            unsigned int v89 = bswap32(v86);
            if (((1 << v87) & 0x155800) == 0)
            {
              unsigned int v89 = *(_DWORD *)(v276.i64[0] + 8);
              unsigned int v88 = *(_DWORD *)(v276.i64[0] + 4);
            }
            if (v87 <= 0x14)
            {
              unsigned int v86 = v89;
              unsigned int v85 = v88;
            }
            if (v86 > 0xB)
            {
              BOOL v150 = v85 >= v86;
              unsigned int v133 = v85 - v86;
              if (v133 != 0 && v150)
              {
                v134 = (unsigned __int8 *)(v276.i64[0] + v86);
                do
                {
                  if (!*v134++) {
                    goto LABEL_175;
                  }
                  --v133;
                }
                while (v133);
                v317.i64[0] = (uint64_t)"load command ";
                *(void *)&long long v318 = v41;
                LOWORD(v319) = 2051;
                v306.i64[0] = (uint64_t)&v317;
                int64x2_t v55 = " LC_RPATH library name extends past the end of the load command";
              }
              else
              {
                v317.i64[0] = (uint64_t)"load command ";
                *(void *)&long long v318 = v41;
                LOWORD(v319) = 2051;
                v306.i64[0] = (uint64_t)&v317;
                int64x2_t v55 = " LC_RPATH path.offset field extends past the end of the load command";
              }
            }
            else
            {
              v317.i64[0] = (uint64_t)"load command ";
              *(void *)&long long v318 = v41;
              LOWORD(v319) = 2051;
              v306.i64[0] = (uint64_t)&v317;
              int64x2_t v55 = " LC_RPATH path.offset field too small, not past the end of the rpath_command struct";
            }
          }
          else
          {
            v317.i64[0] = (uint64_t)"load command ";
            *(void *)&long long v318 = v41;
            LOWORD(v319) = 2051;
            v306.i64[0] = (uint64_t)&v317;
            int64x2_t v55 = " LC_RPATH cmdsize too small";
          }
          *(void *)&long long v307 = v55;
          goto LABEL_222;
        case 0x8000001F:
          uint64_t v47 = a1;
          unsigned int v48 = v41;
          long long v49 = "LC_REEXPORT_DYLIB";
          goto LABEL_99;
        case 0x80000022:
          uint64_t v56 = a1;
          unsigned int v57 = v41;
          uint64_t v58 = (void *)(a1 + 304);
          std::error_code v59 = "LC_DYLD_INFO_ONLY";
LABEL_102:
          checkDyldInfoCommand((llvm::Twine *)&v306, v56, (uint64_t)&v276, v57, v58, v59, (uint64_t *)&v277);
          goto LABEL_138;
        case 0x80000023:
          uint64_t v47 = a1;
          unsigned int v48 = v41;
          long long v49 = "LC_LOAD_UPWARD_DYLIB";
LABEL_99:
          checkDylibCommand((const llvm::Twine *)&v306, v47, (unint64_t *)&v276, v48, v49);
          uint64_t v62 = v306.i64[0];
          *a5 = v306.i64[0];
          if (v62) {
            goto LABEL_564;
          }
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v14, v276.i64[0]);
          goto LABEL_140;
        default:
          if (v276.i32[2] == -2147483597)
          {
            uint64_t v50 = a1;
            unsigned int v51 = v41;
            __n128 v52 = (uint64_t *)(a1 + 328);
            char v53 = "LC_DYLD_EXPORTS_TRIE";
            long long v54 = "export trie";
          }
          else
          {
            if (v276.i32[2] != -2147483596)
            {
LABEL_134:
              switch(v276.i32[2])
              {
                case 3:
                case 6:
                case 7:
                case 9:
                case 0xA:
                case 0x10:
                case 0x17:
                  v298[0] = (uint64_t)"load command ";
                  __int16 v300 = 259;
                  __int16 v297 = 264;
                  LODWORD(v294) = v41;
                  llvm::operator+(v298, (uint64_t *)&v294, (uint64_t)&v312);
                  v291[0] = (uint64_t)" for cmd value of: ";
                  __int16 v293 = 259;
                  llvm::operator+(v312.i64, v291, (uint64_t)&v301);
                  __int16 v290 = 264;
                  LODWORD(v288[0]) = v276.i32[2];
                  llvm::operator+(v301.i64, v288, (uint64_t)&v317);
                  v285[0] = (uint64_t)" is obsolete and not supported";
                  __int16 v287 = 259;
                  llvm::operator+(v317.i64, v285, (uint64_t)&v306);
                  malformedError((const llvm::Twine *)v282, v306.i64);
                case 4:
                  checkThreadCommand((uint64_t)&v306, a1, v276.u64[0], v276.u32[3], v41, "LC_THREAD");
                  goto LABEL_138;
                case 5:
                  checkThreadCommand((uint64_t)&v306, a1, v276.u64[0], v276.u32[3], v41, "LC_UNIXTHREAD");
                  uint64_t v62 = v306.i64[0];
                  *a5 = v306.i64[0];
                  if (v62) {
                    goto LABEL_564;
                  }
                  if (v261)
                  {
                    long long v35 = "more than one LC_UNIXTHREAD command";
                    goto LABEL_561;
                  }
                  uint64_t v261 = v276.i64[0];
                  goto LABEL_140;
                case 8:
                  goto LABEL_146;
                case 0xB:
                case 0xC:
                case 0xD:
                case 0xE:
                case 0xF:
                case 0x18:
                case 0x19:
                case 0x1B:
                case 0x1C:
                case 0x1D:
                case 0x1E:
                case 0x1F:
                case 0x20:
                case 0x22:
                case 0x23:
                case 0x24:
                case 0x25:
                case 0x26:
                case 0x27:
                case 0x28:
                case 0x29:
                case 0x2A:
                case 0x2B:
                  goto LABEL_140;
                case 0x11:
                  if (v276.i32[3] != 40)
                  {
                    v225 = "LC_ROUTINES command ";
                    goto LABEL_574;
                  }
                  if (v262)
                  {
                    long long v35 = "more than one LC_ROUTINES and or LC_ROUTINES_64 command";
                    goto LABEL_561;
                  }
                  goto LABEL_399;
                case 0x12:
                  if (v276.i32[3] <= 0xBu)
                  {
                    v301.i64[0] = (uint64_t)"load command ";
                    LOWORD(v303) = 259;
                    LOWORD(v314) = 264;
                    v312.i32[0] = v41;
                    llvm::operator+(v301.i64, v312.i64, (uint64_t)&v317);
                    v224 = " LC_SUB_FRAMEWORK cmdsize too small";
                    goto LABEL_568;
                  }
                  unsigned int v177 = getStruct<llvm::MachO::sub_framework_command>(a1, v276.u64[0]);
                  uint64_t v178 = v276.i64[0];
                  unsigned int v179 = v276.u32[3];
                  unsigned int v180 = v41;
                  v181 = "LC_SUB_FRAMEWORK";
                  v182 = "sub_framework_command";
                  v183 = "umbrella";
                  goto LABEL_395;
                case 0x13:
                  if (v276.i32[3] <= 0xBu)
                  {
                    v301.i64[0] = (uint64_t)"load command ";
                    LOWORD(v303) = 259;
                    LOWORD(v314) = 264;
                    v312.i32[0] = v41;
                    llvm::operator+(v301.i64, v312.i64, (uint64_t)&v317);
                    v224 = " LC_SUB_UMBRELLA cmdsize too small";
                    goto LABEL_568;
                  }
                  unsigned int v177 = getStruct<llvm::MachO::sub_framework_command>(a1, v276.u64[0]);
                  uint64_t v178 = v276.i64[0];
                  unsigned int v179 = v276.u32[3];
                  unsigned int v180 = v41;
                  v181 = "LC_SUB_UMBRELLA";
                  v182 = "sub_umbrella_command";
                  v183 = "sub_umbrella";
                  goto LABEL_395;
                case 0x14:
                  if (v276.i32[3] <= 0xBu)
                  {
                    v301.i64[0] = (uint64_t)"load command ";
                    LOWORD(v303) = 259;
                    LOWORD(v314) = 264;
                    v312.i32[0] = v41;
                    llvm::operator+(v301.i64, v312.i64, (uint64_t)&v317);
                    v224 = " LC_SUB_CLIENT cmdsize too small";
                    goto LABEL_568;
                  }
                  unsigned int v177 = getStruct<llvm::MachO::sub_framework_command>(a1, v276.u64[0]);
                  uint64_t v178 = v276.i64[0];
                  unsigned int v179 = v276.u32[3];
                  unsigned int v180 = v41;
                  v181 = "LC_SUB_CLIENT";
                  v182 = "sub_client_command";
                  v183 = "client";
                  goto LABEL_395;
                case 0x15:
                  if (v276.i32[3] <= 0xBu)
                  {
                    v301.i64[0] = (uint64_t)"load command ";
                    LOWORD(v303) = 259;
                    LOWORD(v314) = 264;
                    v312.i32[0] = v41;
                    llvm::operator+(v301.i64, v312.i64, (uint64_t)&v317);
                    v224 = " LC_SUB_LIBRARY cmdsize too small";
                    goto LABEL_568;
                  }
                  unsigned int v177 = getStruct<llvm::MachO::sub_framework_command>(a1, v276.u64[0]);
                  uint64_t v178 = v276.i64[0];
                  unsigned int v179 = v276.u32[3];
                  unsigned int v180 = v41;
                  v181 = "LC_SUB_LIBRARY";
                  v182 = "sub_library_command";
                  v183 = "sub_library";
LABEL_395:
                  checkSubCommand((const llvm::Twine *)&v306, v178, v179, v180, v181, v182, v177, v183);
                  goto LABEL_138;
                case 0x16:
                  checkTwoLevelHintsCommand((llvm::Twine *)&v306, a1, (unint64_t *)&v276, v41, &v270, (uint64_t *)&v277);
                  goto LABEL_138;
                case 0x1A:
                  if (v276.i32[3] != 72)
                  {
                    v225 = "LC_ROUTINES_64 command ";
                    goto LABEL_574;
                  }
                  if (v262)
                  {
                    long long v35 = "more than one LC_ROUTINES_64 and or LC_ROUTINES command";
                    goto LABEL_561;
                  }
LABEL_399:
                  uint64_t v262 = v276.i64[0];
                  goto LABEL_140;
                case 0x21:
                  if (v276.i32[3] != 20)
                  {
                    v225 = "LC_ENCRYPTION_INFO command ";
                    goto LABEL_574;
                  }
                  int8x16_t v306 = 0uLL;
                  LODWORD(v307) = 0;
                  getStruct<llvm::MachO::encryption_info_command>(&v306, a1, (int8x16_t *)v276.i64[0]);
                  unint64_t v184 = v306.u32[2];
                  uint64_t v185 = v306.u32[3];
                  unint64_t v186 = *(void *)(a1 + 24);
                  uint64_t v187 = v276.i64[0];
                  unsigned int v188 = v41;
                  v189 = "LC_ENCRYPTION_INFO";
                  goto LABEL_404;
                case 0x2C:
                  if (v276.i32[3] != 24)
                  {
                    v225 = "LC_ENCRYPTION_INFO_64 command ";
                    goto LABEL_574;
                  }
                  int8x16_t v306 = 0uLL;
                  *(void *)&long long v307 = 0;
                  getStruct<llvm::MachO::encryption_info_command_64>((uint64_t)&v306, a1, (long long *)v276.i64[0]);
                  unint64_t v184 = v306.u32[2];
                  uint64_t v185 = v306.u32[3];
                  unint64_t v186 = *(void *)(a1 + 24);
                  uint64_t v187 = v276.i64[0];
                  unsigned int v188 = v41;
                  v189 = "LC_ENCRYPTION_INFO_64";
LABEL_404:
                  checkEncryptCommand((const llvm::Twine *)&v317, v186, v187, v188, v184, v185, &v271, v189);
                  goto LABEL_405;
                case 0x2D:
                  checkLinkerOptCommand((const llvm::Twine *)&v306, a1, v276.u64[0], v276.u32[3], v41);
                  goto LABEL_138;
                default:
                  if (v276.i32[2] != -2147483608) {
                    goto LABEL_140;
                  }
                  if (v276.i32[3] != 24)
                  {
                    v225 = "LC_MAIN command ";
LABEL_574:
                    v301.i64[0] = (uint64_t)v225;
                    LOWORD(v303) = 259;
                    LOWORD(v314) = 264;
                    v312.i32[0] = v41;
                    llvm::operator+(v301.i64, v312.i64, (uint64_t)&v317);
                    v224 = " has incorrect cmdsize";
LABEL_568:
                    v298[0] = (uint64_t)v224;
                    __int16 v300 = 259;
                    llvm::operator+(v317.i64, v298, (uint64_t)&v306);
                    malformedError((const llvm::Twine *)&v294, v306.i64);
                  }
                  if (v259)
                  {
                    long long v35 = "more than one LC_MAIN command";
LABEL_561:
                    v306.i64[0] = (uint64_t)v35;
                    LOWORD(v308) = 259;
                    malformedError((const llvm::Twine *)&v317, v306.i64);
                  }
                  uint64_t v259 = v276.i64[0];
                  goto LABEL_140;
              }
            }
            uint64_t v50 = a1;
            unsigned int v51 = v41;
            __n128 v52 = (uint64_t *)(a1 + 320);
            char v53 = "LC_DYLD_CHAINED_FIXUPS";
            long long v54 = "chained fixups";
          }
LABEL_137:
          checkLinkeditDataCommand((llvm::Twine *)&v306, v50, (uint64_t)&v276, v51, v52, v53, (uint64_t *)&v277, v54);
LABEL_138:
          uint64_t v62 = v306.i64[0];
          break;
      }
LABEL_139:
      *a5 = v62;
      if (v62) {
        goto LABEL_564;
      }
    }
    else
    {
      switch(v276.i32[2])
      {
        case 1:
          if (v276.i32[3] <= 0x37u)
          {
            v312.i64[0] = (uint64_t)"load command ";
            *(void *)&long long v313 = v41;
            LOWORD(v314) = 2051;
            v301.i64[0] = (uint64_t)&v312;
            *(void *)&long long v302 = " ";
            LOWORD(v303) = 770;
            uint64_t v46 = "LC_SEGMENT";
LABEL_91:
            v317.i64[0] = (uint64_t)&v301;
            *(void *)&long long v318 = v46;
            LOWORD(v319) = 770;
            long long v67 = &v317;
            uint64_t v68 = " cmdsize too small";
            goto LABEL_170;
          }
          getStructOrErr<llvm::MachO::segment_command>((uint64_t)&v301, a1, v276.u64[0]);
          if (BYTE8(v304))
          {
            uint64_t v62 = v301.i64[0];
            goto LABEL_139;
          }
          int8x16_t v312 = v301;
          long long v313 = v302;
          long long v314 = v303;
          *(void *)&long long v315 = v304;
          if (v304 > 0x3C3C3C3 || 68 * (int)v304 > (v276.i32[3] - 56))
          {
            v294 = (uint64_t *)"load command ";
            unint64_t v296 = v41;
            __int16 v297 = 2051;
            v298[0] = (uint64_t)&v294;
            v299 = " inconsistent cmdsize in ";
            __int16 v300 = 770;
            v317.i64[0] = (uint64_t)v298;
            *(void *)&long long v318 = "LC_SEGMENT";
            LOWORD(v319) = 770;
            long long v67 = &v317;
LABEL_169:
            uint64_t v68 = " for the number of sections";
LABEL_170:
            v306.i64[0] = (uint64_t)v67;
            *(void *)&long long v307 = v68;
            LOWORD(v308) = 770;
            malformedError((const llvm::Twine *)&v269, v306.i64);
          }
          uint64_t v256 = v36;
          unint64_t v136 = *(void *)(a1 + 24);
          unint64_t v236 = v314;
          int v247 = v304;
          if (v304)
          {
            uint64_t v137 = 0;
            unsigned int v230 = DWORD1(v314);
            unsigned int v227 = DWORD2(v313);
            int v242 = HIDWORD(v313);
            unint64_t v233 = HIDWORD(v313) + (unint64_t)DWORD2(v313);
            unint64_t v252 = *(void *)(a1 + 24);
            while (1)
            {
              uint64_t v138 = v276.i64[0];
              int v139 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
              if (v139) {
                int v140 = 80;
              }
              else {
                int v140 = 68;
              }
              uint64_t v141 = 56;
              if (v139) {
                uint64_t v141 = 72;
              }
              unint64_t v142 = v141 + v138 + (v140 * v137);
              llvm::SmallVectorTemplateBase<void *,true>::push_back(v13, v142);
              unint64_t v239 = v142;
              getStructOrErr<llvm::MachO::section>((uint64_t)&v306, a1, v142);
              if (BYTE8(v310)) {
                goto LABEL_453;
              }
              long long v319 = v308;
              long long v320 = v309;
              LODWORD(v321) = v310;
              int8x16_t v317 = v306;
              long long v318 = v307;
              int v143 = *(_DWORD *)(a1 + 60);
              unint64_t v136 = v252;
              if (v143 == 9) {
                break;
              }
              unint64_t v144 = DWORD2(v319);
              BOOL v149 = v143 != 10 && DWORD2(v320) != 1 && DWORD2(v320) != 18;
              BOOL v150 = !v149 || v252 >= DWORD2(v319);
              if (!v150)
              {
                v210 = "offset field of section ";
                goto LABEL_497;
              }
              if (v236) {
                BOOL v151 = 0;
              }
              else {
                BOOL v151 = v149;
              }
              uint64_t v145 = DWORD1(v319);
              if (v151 && v267 > DWORD2(v319) && DWORD1(v319) != 0)
              {
                v282[0] = (uint64_t)"offset field of section ";
                uint64_t v283 = v137;
                __int16 v284 = 2051;
                v285[0] = (uint64_t)v282;
                v286 = " in ";
                __int16 v287 = 770;
                v217 = "LC_SEGMENT";
                goto LABEL_513;
              }
              if (DWORD1(v319) + (unint64_t)DWORD2(v319) > v252 && v149)
              {
                v210 = "offset field plus size field of section ";
LABEL_497:
                v282[0] = (uint64_t)v210;
                uint64_t v283 = v137;
                __int16 v284 = 2051;
                v285[0] = (uint64_t)v282;
                v286 = " in ";
                __int16 v287 = 770;
                v212 = "LC_SEGMENT";
LABEL_501:
                v288[0] = (uint64_t)v285;
                v289 = v212;
                __int16 v290 = 770;
                v291[0] = (uint64_t)v288;
                v292 = " command ";
                __int16 v293 = 770;
                v294 = v291;
                unint64_t v296 = v41;
                __int16 v297 = 2050;
                v214 = " extends past the end of the file";
LABEL_502:
                v298[0] = (uint64_t)&v294;
                v299 = v214;
                __int16 v300 = 770;
                v203 = (int8x16_t *)v298;
LABEL_503:
                malformedError((const llvm::Twine *)&v269, v203->i64);
              }
              if (DWORD1(v319) <= v230) {
                BOOL v149 = 0;
              }
              if (v149)
              {
                v282[0] = (uint64_t)"size field of section ";
                uint64_t v283 = v137;
                __int16 v284 = 2051;
                v285[0] = (uint64_t)v282;
                v286 = " in ";
                __int16 v287 = 770;
                v215 = "LC_SEGMENT";
LABEL_509:
                v288[0] = (uint64_t)v285;
                v289 = v215;
                __int16 v290 = 770;
                v291[0] = (uint64_t)v288;
                v292 = " command ";
                __int16 v293 = 770;
                v294 = v291;
                unint64_t v296 = v41;
                __int16 v297 = 2050;
                v214 = " greater than the segment";
                goto LABEL_502;
              }
              if (v143 == 10 || !DWORD1(v319)) {
                goto LABEL_242;
              }
              if (v319 < v227)
              {
                v282[0] = (uint64_t)"addr field of section ";
                uint64_t v283 = v137;
                __int16 v284 = 2051;
                v285[0] = (uint64_t)v282;
                v286 = " in ";
                __int16 v287 = 770;
                v216 = "LC_SEGMENT";
                goto LABEL_515;
              }
              int v146 = 1;
LABEL_279:
              if (v242 && v146 && v145 + (unint64_t)v319 > v233)
              {
                v282[0] = (uint64_t)"addr field plus size of section ";
                uint64_t v283 = v137;
                __int16 v284 = 2051;
                v285[0] = (uint64_t)v282;
                v286 = " in ";
                __int16 v287 = 770;
                v213 = "LC_SEGMENT";
LABEL_507:
                v288[0] = (uint64_t)v285;
                v289 = v213;
                __int16 v290 = 770;
                v291[0] = (uint64_t)v288;
                v292 = " command ";
                __int16 v293 = 770;
                v294 = v291;
                unint64_t v296 = v41;
                __int16 v297 = 2050;
                v214 = " greater than than the segment's vmaddr plus vmsize";
                goto LABEL_502;
              }
              if (v143 != 9 && v143 != 10 && DWORD2(v320) != 1 && DWORD2(v320) != 18)
              {
                checkOverlappingElement(&v269, (uint64_t *)&v277, v144, v145, "section contents");
                if (v269) {
                  goto LABEL_504;
                }
              }
              if (v252 < v320)
              {
                v210 = "reloff field of section ";
                goto LABEL_497;
              }
              if (v320 + 8 * (unint64_t)DWORD1(v320) > v252)
              {
                v210 = "reloff field plus nreloc field times sizeof(struct relocation_info) of section ";
                goto LABEL_497;
              }
              checkOverlappingElement(&v269, (uint64_t *)&v277, v320, 8 * DWORD1(v320), "section relocation entries");
              if (v269) {
                goto LABEL_504;
              }
              if (strlen((const char *)&v318) == 6)
              {
                BOOL v155 = v318 == 1163157343 && WORD2(v318) == 21592;
                if (v155
                  && strlen(v317.i8) == 14
                  && v317.i64[0] == 0x5F6E696168635F5FLL
                  && *(uint64_t *)((char *)v317.i64 + 6) == 0x7374726174735F6ELL)
                {
                  *(void *)(a1 + 352) = v239;
                }
              }
              if (v247 == ++v137) {
                goto LABEL_304;
              }
            }
            uint64_t v145 = DWORD1(v319);
            unint64_t v144 = DWORD2(v319);
LABEL_242:
            int v146 = v145;
            goto LABEL_279;
          }
LABEL_304:
          if (v136 < v236)
          {
            v294 = (uint64_t *)"load command ";
            unint64_t v296 = v41;
            __int16 v297 = 2051;
            v298[0] = (uint64_t)&v294;
            v299 = " fileoff field in ";
            __int16 v300 = 770;
            v317.i64[0] = (uint64_t)v298;
            *(void *)&long long v318 = "LC_SEGMENT";
            LOWORD(v319) = 770;
            v157 = &v317;
            goto LABEL_378;
          }
          if (DWORD1(v314) + v236 > v136)
          {
            v291[0] = (uint64_t)"load command ";
            __int16 v293 = 259;
            __int16 v290 = 264;
            LODWORD(v288[0]) = v41;
            llvm::operator+(v291, v288, (uint64_t)&v294);
            v285[0] = (uint64_t)" fileoff field plus filesize field in ";
            __int16 v287 = 259;
            llvm::operator+((uint64_t *)&v294, v285, (uint64_t)v298);
            v282[0] = (uint64_t)"LC_SEGMENT";
            __int16 v284 = 259;
            llvm::operator+(v298, v282, (uint64_t)&v317);
            v198 = " extends past the end of the file";
            goto LABEL_457;
          }
          if (HIDWORD(v313) && DWORD1(v314) > HIDWORD(v313))
          {
            v291[0] = (uint64_t)"load command ";
            __int16 v293 = 259;
            __int16 v290 = 264;
            LODWORD(v288[0]) = v41;
            llvm::operator+(v291, v288, (uint64_t)&v294);
            v285[0] = (uint64_t)" filesize field in ";
            __int16 v287 = 259;
            llvm::operator+((uint64_t *)&v294, v285, (uint64_t)v298);
            v282[0] = (uint64_t)"LC_SEGMENT";
            __int16 v284 = 259;
            llvm::operator+(v298, v282, (uint64_t)&v317);
            v198 = " greater than vmsize field";
LABEL_457:
            v280 = v198;
            __int16 v281 = 259;
            v202 = &v317;
LABEL_462:
            llvm::operator+(v202->i64, (uint64_t *)&v280, (uint64_t)&v306);
LABEL_463:
            v203 = &v306;
            goto LABEL_503;
          }
          goto LABEL_464;
        case 2:
          if (v276.i32[3] <= 0x17u)
          {
            v317.i64[0] = (uint64_t)"load command ";
            *(void *)&long long v318 = v41;
            LOWORD(v319) = 2051;
            long long v60 = " LC_SYMTAB cmdsize too small";
LABEL_81:
            v306.i64[0] = (uint64_t)&v317;
            *(void *)&long long v307 = v60;
            __int16 v61 = 770;
            goto LABEL_211;
          }
          if (*(void *)(a1 + 272))
          {
            v91 = "more than one LC_SYMTAB command";
LABEL_210:
            v306.i64[0] = (uint64_t)v91;
            __int16 v61 = 259;
LABEL_211:
            LOWORD(v308) = v61;
            malformedError((const llvm::Twine *)v282, v306.i64);
          }
          unint64_t v102 = *(void *)(a1 + 16);
          if (v276.i64[0] < v102) {
            goto LABEL_209;
          }
          unint64_t v103 = *(void *)(a1 + 24);
          if (v276.i64[0] + 24 > v102 + v103) {
            goto LABEL_209;
          }
          unsigned int v105 = *(_DWORD *)(v276.i64[0] + 4);
          unsigned int v104 = *(_DWORD *)(v276.i64[0] + 8);
          unsigned int v107 = *(_DWORD *)(v276.i64[0] + 12);
          unsigned int v106 = *(_DWORD *)(v276.i64[0] + 16);
          unsigned int v108 = *(_DWORD *)(v276.i64[0] + 20);
          unsigned int v109 = *(_DWORD *)(a1 + 8);
          if (v109 <= 0x14)
          {
            BOOL v42 = ((1 << v109) & 0x155800) == 0;
            unsigned int v110 = bswap32(v105);
            unsigned int v111 = bswap32(v104);
            unsigned int v112 = bswap32(v107);
            unsigned int v113 = bswap32(v106);
            unsigned int v114 = bswap32(v108);
            if (!v42)
            {
              unsigned int v108 = v114;
              unsigned int v106 = v113;
              unsigned int v107 = v112;
              unsigned int v104 = v111;
              unsigned int v105 = v110;
            }
          }
          if (v105 != 24)
          {
            v190 = "LC_SYMTAB command ";
            goto LABEL_414;
          }
          unsigned int v246 = v106;
          unsigned int v241 = v108;
          unint64_t v251 = *(void *)(a1 + 24);
          if (v103 < v104)
          {
            v115 = "symoff field of LC_SYMTAB command ";
            goto LABEL_208;
          }
          uint64_t v256 = v36;
          unint64_t v191 = v104;
          int v192 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
          if (v192) {
            uint64_t v193 = 16 * v107;
          }
          else {
            uint64_t v193 = 12 * v107;
          }
          v194 = "struct nlist_64";
          if (!v192) {
            v194 = "struct nlist";
          }
          if (v193 + v191 > v251)
          {
            v298[0] = (uint64_t)"symoff field plus nsyms field times sizeof(";
            __int16 v300 = 259;
            char v195 = 1;
            HIBYTE(v297) = 1;
            if (*v194)
            {
              v294 = (uint64_t *)v194;
              char v195 = 3;
            }
            LOBYTE(v297) = v195;
            llvm::operator+(v298, (uint64_t *)&v294, (uint64_t)&v312);
            v291[0] = (uint64_t)") of LC_SYMTAB command ";
            __int16 v293 = 259;
            llvm::operator+(v312.i64, v291, (uint64_t)&v301);
            __int16 v290 = 264;
            LODWORD(v288[0]) = v41;
            llvm::operator+(v301.i64, v288, (uint64_t)&v317);
            v285[0] = (uint64_t)" extends past the end of the file";
            __int16 v287 = 259;
            v196 = v285;
LABEL_474:
            llvm::operator+(v317.i64, v196, (uint64_t)&v306);
            malformedError((const llvm::Twine *)v282, v306.i64);
          }
          checkOverlappingElement(v282, (uint64_t *)&v277, v191, v193, "symbol table");
          uint64_t v62 = v282[0];
          if (v282[0]) {
            goto LABEL_563;
          }
          if (v251 < v246)
          {
            v200 = "stroff field of LC_SYMTAB command ";
LABEL_473:
            v301.i64[0] = (uint64_t)v200;
            LOWORD(v303) = 259;
            LOWORD(v314) = 264;
            v312.i32[0] = v41;
            llvm::operator+(v301.i64, v312.i64, (uint64_t)&v317);
            v298[0] = (uint64_t)" extends past the end of the file";
            __int16 v300 = 259;
            v196 = v298;
            goto LABEL_474;
          }
          if (v246 + (unint64_t)v241 > v251)
          {
            v200 = "stroff field plus strsize field of LC_SYMTAB command ";
            goto LABEL_473;
          }
          checkOverlappingElement(v282, (uint64_t *)&v277, v246, v241, "string table");
          uint64_t v62 = v282[0];
          if (v282[0]) {
            goto LABEL_563;
          }
          *(void *)(a1 + 272) = v276.i64[0];
LABEL_492:
          *a5 = 0;
          uint64_t v36 = v256;
          break;
        case 0xB:
          if (v276.i32[3] <= 0x4Fu)
          {
            v317.i64[0] = (uint64_t)"load command ";
            *(void *)&long long v318 = v41;
            LOWORD(v319) = 2051;
            long long v60 = " LC_DYSYMTAB cmdsize too small";
            goto LABEL_81;
          }
          if (*(void *)(a1 + 280))
          {
            v91 = "more than one LC_DYSYMTAB command";
            goto LABEL_210;
          }
          unint64_t v116 = *(void *)(a1 + 16);
          if (v276.i64[0] < v116 || (unint64_t v117 = *(void *)(a1 + 24), v276.i64[0] + 80 > v116 + v117))
          {
LABEL_209:
            v91 = "Structure read out-of-range";
            goto LABEL_210;
          }
          unsigned int v118 = *(_DWORD *)(v276.i64[0] + 4);
          unsigned int v120 = *(_DWORD *)(v276.i64[0] + 32);
          unsigned int v119 = *(_DWORD *)(v276.i64[0] + 36);
          unsigned int v122 = *(_DWORD *)(v276.i64[0] + 40);
          unsigned int v121 = *(_DWORD *)(v276.i64[0] + 44);
          unsigned int v124 = *(_DWORD *)(v276.i64[0] + 48);
          unsigned int v123 = *(_DWORD *)(v276.i64[0] + 52);
          unsigned int v126 = *(_DWORD *)(v276.i64[0] + 56);
          unsigned int v125 = *(_DWORD *)(v276.i64[0] + 60);
          unsigned int v128 = *(_DWORD *)(v276.i64[0] + 64);
          unsigned int v127 = *(_DWORD *)(v276.i64[0] + 68);
          unsigned int v130 = *(_DWORD *)(v276.i64[0] + 72);
          unsigned int v129 = *(_DWORD *)(v276.i64[0] + 76);
          unsigned int v131 = *(_DWORD *)(a1 + 8);
          if (v131 <= 0x14 && ((1 << v131) & 0x155800) != 0)
          {
            unsigned int v118 = bswap32(v118);
            unsigned int v120 = bswap32(v120);
            unsigned int v119 = bswap32(v119);
            unsigned int v122 = bswap32(v122);
            unsigned int v121 = bswap32(v121);
            unsigned int v124 = bswap32(v124);
            unsigned int v123 = bswap32(v123);
            unsigned int v126 = bswap32(v126);
            unsigned int v125 = bswap32(v125);
            unsigned int v128 = bswap32(v128);
            unsigned int v127 = bswap32(v127);
            unsigned int v130 = bswap32(v130);
            unsigned int v129 = bswap32(v129);
          }
          if (v118 != 80)
          {
            v190 = "LC_DYSYMTAB command ";
LABEL_414:
            v317.i64[0] = (uint64_t)v190;
            *(void *)&long long v318 = v41;
            LOWORD(v319) = 2051;
            v132 = " has incorrect cmdsize";
LABEL_415:
            v306.i64[0] = (uint64_t)&v317;
            *(void *)&long long v307 = v132;
            LOWORD(v308) = 770;
            goto LABEL_416;
          }
          if (v117 < v120)
          {
            v115 = "tocoff field of LC_DYSYMTAB command ";
LABEL_208:
            v317.i64[0] = (uint64_t)v115;
            *(void *)&long long v318 = v41;
            LOWORD(v319) = 2051;
            v132 = " extends past the end of the file";
            goto LABEL_415;
          }
          unsigned int v254 = v121;
          unsigned int v249 = v124;
          unsigned int v244 = v123;
          unsigned int v240 = v126;
          unsigned int v238 = v125;
          unsigned int v235 = v128;
          unsigned int v232 = v127;
          unsigned int v229 = v130;
          unsigned int v226 = v129;
          unint64_t v257 = *(void *)(a1 + 24);
          if (v120 + 8 * (unint64_t)v119 > v117)
          {
            v197 = "tocoff field plus ntoc field times sizeof(struct dylib_table_of_contents) of LC_DYSYMTAB command ";
            goto LABEL_451;
          }
          checkOverlappingElement(v282, (uint64_t *)&v277, v120, 8 * v119, "table of contents");
          uint64_t v62 = v282[0];
          if (v282[0]) {
            goto LABEL_563;
          }
          if (v257 < v122)
          {
            v197 = "modtaboff field of LC_DYSYMTAB command ";
            goto LABEL_451;
          }
          int v206 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
          v207 = "struct dylib_module";
          if (v206) {
            v207 = "struct dylib_module_64";
          }
          unsigned int v208 = 52;
          if (v206) {
            unsigned int v208 = 56;
          }
          if (v122 + v208 * (unint64_t)v254 > v257)
          {
            v298[0] = (uint64_t)"modtaboff field plus nmodtab field times sizeof(";
            __int16 v300 = 259;
            char v209 = 1;
            HIBYTE(v297) = 1;
            if (*v207)
            {
              v294 = (uint64_t *)v207;
              char v209 = 3;
            }
            LOBYTE(v297) = v209;
            llvm::operator+(v298, (uint64_t *)&v294, (uint64_t)&v312);
            v291[0] = (uint64_t)") of LC_DYSYMTAB command ";
            __int16 v293 = 259;
            llvm::operator+(v312.i64, v291, (uint64_t)&v301);
            __int16 v290 = 264;
            LODWORD(v288[0]) = v41;
            llvm::operator+(v301.i64, v288, (uint64_t)&v317);
            v285[0] = (uint64_t)" extends past the end of the file";
            __int16 v287 = 259;
            v201 = v285;
LABEL_452:
            llvm::operator+(v317.i64, v201, (uint64_t)&v306);
LABEL_416:
            malformedError((const llvm::Twine *)v282, v306.i64);
          }
          checkOverlappingElement(v282, (uint64_t *)&v277, v122, v208 * (unint64_t)v254, "module table");
          uint64_t v62 = v282[0];
          if (v282[0]) {
            goto LABEL_563;
          }
          if (v257 < v249)
          {
            v197 = "extrefsymoff field of LC_DYSYMTAB command ";
LABEL_451:
            v301.i64[0] = (uint64_t)v197;
            LOWORD(v303) = 259;
            LOWORD(v314) = 264;
            v312.i32[0] = v41;
            llvm::operator+(v301.i64, v312.i64, (uint64_t)&v317);
            v298[0] = (uint64_t)" extends past the end of the file";
            __int16 v300 = 259;
            v201 = v298;
            goto LABEL_452;
          }
          if (v249 + 4 * (unint64_t)v244 > v257)
          {
            v197 = "extrefsymoff field plus nextrefsyms field times sizeof(struct dylib_reference) of LC_DYSYMTAB command ";
            goto LABEL_451;
          }
          checkOverlappingElement(v282, (uint64_t *)&v277, v249, 4 * v244, "reference table");
          uint64_t v62 = v282[0];
          if (v282[0]) {
            goto LABEL_563;
          }
          if (v257 < v240)
          {
            v197 = "indirectsymoff field of LC_DYSYMTAB command ";
            goto LABEL_451;
          }
          if (v240 + 4 * (unint64_t)v238 > v257)
          {
            v197 = "indirectsymoff field plus nindirectsyms field times sizeof(uint32_t) of LC_DYSYMTAB command ";
            goto LABEL_451;
          }
          checkOverlappingElement(v282, (uint64_t *)&v277, v240, 4 * v238, "indirect table");
          uint64_t v62 = v282[0];
          if (v282[0]) {
            goto LABEL_563;
          }
          if (v257 < v235)
          {
            v197 = "extreloff field of LC_DYSYMTAB command ";
            goto LABEL_451;
          }
          if (v235 + 8 * (unint64_t)v232 > v257)
          {
            v197 = "extreloff field plus nextrel field times sizeof(struct relocation_info) of LC_DYSYMTAB command ";
            goto LABEL_451;
          }
          checkOverlappingElement(v282, (uint64_t *)&v277, v235, 8 * v232, "external relocation table");
          uint64_t v62 = v282[0];
          if (v282[0]) {
            goto LABEL_563;
          }
          if (v257 < v229)
          {
            v197 = "locreloff field of LC_DYSYMTAB command ";
            goto LABEL_451;
          }
          if (v229 + 8 * (unint64_t)v226 > v257)
          {
            v197 = "locreloff field plus nlocrel field times sizeof(struct relocation_info) of LC_DYSYMTAB command ";
            goto LABEL_451;
          }
          checkOverlappingElement(v282, (uint64_t *)&v277, v229, 8 * v226, "local relocation table");
          uint64_t v62 = v282[0];
          if (v282[0]) {
            goto LABEL_563;
          }
          *(void *)(a1 + 280) = v276.i64[0];
          *a5 = 0;
          break;
        case 0xC:
          long long v49 = "LC_LOAD_DYLIB";
          goto LABEL_98;
        case 0xD:
          checkDylibCommand((const llvm::Twine *)&v317, a1, (unint64_t *)&v276, v41, "LC_ID_DYLIB");
          uint64_t v62 = v317.i64[0];
          if (v317.i64[0]) {
            goto LABEL_563;
          }
          if (v36)
          {
            uint64_t v63 = "more than one LC_ID_DYLIB command";
            goto LABEL_86;
          }
          int v93 = *(_DWORD *)(a1 + 60);
          if (v93 != 6 && v93 != 9)
          {
            uint64_t v63 = "LC_ID_DYLIB load command in non-dynamic library file type";
LABEL_86:
            v306.i64[0] = (uint64_t)v63;
            LOWORD(v308) = 259;
            malformedError((const llvm::Twine *)&v317, v306.i64);
          }
          uint64_t v36 = v276.i64[0];
          goto LABEL_175;
        case 0xE:
          unint64_t v64 = v276.i64[0];
          unsigned int v65 = v276.u32[3];
          uint64_t v66 = "LC_LOAD_DYLINKER";
          goto LABEL_107;
        case 0xF:
          unint64_t v64 = v276.i64[0];
          unsigned int v65 = v276.u32[3];
          uint64_t v66 = "LC_ID_DYLINKER";
          goto LABEL_107;
        case 0x19:
          if (v276.i32[3] <= 0x47u)
          {
            v312.i64[0] = (uint64_t)"load command ";
            *(void *)&long long v313 = v41;
            LOWORD(v314) = 2051;
            v301.i64[0] = (uint64_t)&v312;
            *(void *)&long long v302 = " ";
            LOWORD(v303) = 770;
            uint64_t v46 = "LC_SEGMENT_64";
            goto LABEL_91;
          }
          getStructOrErr<llvm::MachO::segment_command_64>((uint64_t)&v317, a1, v276.u64[0]);
          if (v322)
          {
LABEL_405:
            uint64_t v62 = v317.i64[0];
            goto LABEL_139;
          }
          long long v314 = v319;
          long long v315 = v320;
          uint64_t v316 = v321;
          int8x16_t v312 = v317;
          long long v313 = v318;
          if (v321 > 0x3333333 || 80 * (int)v321 > (v276.i32[3] - 72))
          {
            v294 = (uint64_t *)"load command ";
            unint64_t v296 = v41;
            __int16 v297 = 2051;
            v298[0] = (uint64_t)&v294;
            v299 = " inconsistent cmdsize in ";
            __int16 v300 = 770;
            v301.i64[0] = (uint64_t)v298;
            *(void *)&long long v302 = "LC_SEGMENT_64";
            LOWORD(v303) = 770;
            long long v67 = &v301;
            goto LABEL_169;
          }
          unint64_t v253 = *(void *)(a1 + 24);
          uint64_t v256 = v36;
          unint64_t v237 = *((void *)&v314 + 1);
          int v248 = v321;
          if (v321)
          {
            uint64_t v158 = 0;
            unint64_t v228 = *((void *)&v313 + 1);
            unint64_t v231 = v315;
            uint64_t v243 = v314;
            unint64_t v234 = v314 + *((void *)&v313 + 1);
            while (1)
            {
              uint64_t v159 = v276.i64[0];
              int v160 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
              if (v160) {
                int v161 = 80;
              }
              else {
                int v161 = 68;
              }
              uint64_t v162 = 56;
              if (v160) {
                uint64_t v162 = 72;
              }
              unint64_t v163 = v162 + v159 + (v161 * v158);
              llvm::SmallVectorTemplateBase<void *,true>::push_back(v13, v163);
              getStructOrErr<llvm::MachO::section_64>((uint64_t)&v306, a1, v163);
              if (v311) {
                break;
              }
              long long v303 = v308;
              long long v304 = v309;
              long long v305 = v310;
              int8x16_t v301 = v306;
              long long v302 = v307;
              int v164 = *(_DWORD *)(a1 + 60);
              if (v164 == 9)
              {
                unint64_t v165 = v304;
                uint64_t v166 = *((void *)&v303 + 1);
              }
              else
              {
                unint64_t v165 = v304;
                BOOL v169 = v164 != 10 && v305 != 1 && v305 != 18;
                if (v169 && v253 < v304)
                {
                  v211 = "offset field of section ";
LABEL_500:
                  v282[0] = (uint64_t)v211;
                  uint64_t v283 = v158;
                  __int16 v284 = 2051;
                  v285[0] = (uint64_t)v282;
                  v286 = " in ";
                  __int16 v287 = 770;
                  v212 = "LC_SEGMENT_64";
                  goto LABEL_501;
                }
                if (v237) {
                  BOOL v171 = 0;
                }
                else {
                  BOOL v171 = v169;
                }
                uint64_t v166 = *((void *)&v303 + 1);
                if (v171 && v267 > v304 && *((void *)&v303 + 1) != 0)
                {
                  v282[0] = (uint64_t)"offset field of section ";
                  uint64_t v283 = v158;
                  __int16 v284 = 2051;
                  v285[0] = (uint64_t)v282;
                  v286 = " in ";
                  __int16 v287 = 770;
                  v217 = "LC_SEGMENT_64";
LABEL_513:
                  v288[0] = (uint64_t)v285;
                  v289 = v217;
                  __int16 v290 = 770;
                  v291[0] = (uint64_t)v288;
                  v292 = " command ";
                  __int16 v293 = 770;
                  v294 = v291;
                  unint64_t v296 = v41;
                  __int16 v297 = 2050;
                  v214 = " not past the headers of the file";
                  goto LABEL_502;
                }
                if (*((void *)&v303 + 1) + (unint64_t)v304 > v253 && v169)
                {
                  v211 = "offset field plus size field of section ";
                  goto LABEL_500;
                }
                if (*((void *)&v303 + 1) <= v231) {
                  BOOL v169 = 0;
                }
                if (v169)
                {
                  v282[0] = (uint64_t)"size field of section ";
                  uint64_t v283 = v158;
                  __int16 v284 = 2051;
                  v285[0] = (uint64_t)v282;
                  v286 = " in ";
                  __int16 v287 = 770;
                  v215 = "LC_SEGMENT_64";
                  goto LABEL_509;
                }
                if (v164 != 10 && *((void *)&v303 + 1) && (unint64_t)v303 < v228)
                {
                  v282[0] = (uint64_t)"addr field of section ";
                  uint64_t v283 = v158;
                  __int16 v284 = 2051;
                  v285[0] = (uint64_t)v282;
                  v286 = " in ";
                  __int16 v287 = 770;
                  v216 = "LC_SEGMENT_64";
LABEL_515:
                  v288[0] = (uint64_t)v285;
                  v289 = v216;
                  __int16 v290 = 770;
                  v291[0] = (uint64_t)v288;
                  v292 = " command ";
                  __int16 v293 = 770;
                  v294 = v291;
                  unint64_t v296 = v41;
                  __int16 v297 = 2050;
                  v214 = " less than the segment's vmaddr";
                  goto LABEL_502;
                }
              }
              if (v243 && v166 && (uint64_t)v303 + v166 > v234)
              {
                v282[0] = (uint64_t)"addr field plus size of section ";
                uint64_t v283 = v158;
                __int16 v284 = 2051;
                v285[0] = (uint64_t)v282;
                v286 = " in ";
                __int16 v287 = 770;
                v213 = "LC_SEGMENT_64";
                goto LABEL_507;
              }
              if (v164 != 9 && v164 != 10 && v305 != 1 && v305 != 18)
              {
                checkOverlappingElement(&v269, (uint64_t *)&v277, v165, v166, "section contents");
                if (v269) {
                  goto LABEL_504;
                }
              }
              if (v253 < DWORD2(v304))
              {
                v211 = "reloff field of section ";
                goto LABEL_500;
              }
              if (DWORD2(v304) + 8 * (unint64_t)HIDWORD(v304) > v253)
              {
                v211 = "reloff field plus nreloc field times sizeof(struct relocation_info) of section ";
                goto LABEL_500;
              }
              checkOverlappingElement(&v269, (uint64_t *)&v277, DWORD2(v304), 8 * HIDWORD(v304), "section relocation entries");
              if (v269) {
                goto LABEL_504;
              }
              if (strlen((const char *)&v302) == 6)
              {
                BOOL v175 = v302 == 1163157343 && WORD2(v302) == 21592;
                if (v175
                  && strlen(v301.i8) == 14
                  && v301.i64[0] == 0x5F6E696168635F5FLL
                  && *(uint64_t *)((char *)v301.i64 + 6) == 0x7374726174735F6ELL)
                {
                  *(void *)(a1 + 352) = v163;
                }
              }
              if (v248 == ++v158) {
                goto LABEL_376;
              }
            }
LABEL_453:
            uint64_t v269 = v306.i64[0];
LABEL_504:
            uint64_t v36 = v256;
            uint64_t v62 = v269;
            goto LABEL_139;
          }
LABEL_376:
          if (v237 > v253)
          {
            v294 = (uint64_t *)"load command ";
            unint64_t v296 = v41;
            __int16 v297 = 2051;
            v298[0] = (uint64_t)&v294;
            v299 = " fileoff field in ";
            __int16 v300 = 770;
            v301.i64[0] = (uint64_t)v298;
            *(void *)&long long v302 = "LC_SEGMENT_64";
            LOWORD(v303) = 770;
            v157 = &v301;
LABEL_378:
            v306.i64[0] = (uint64_t)v157;
            *(void *)&long long v307 = " extends past the end of the file";
            LOWORD(v308) = 770;
            goto LABEL_463;
          }
          if ((unint64_t)v315 + v237 > v253)
          {
            v291[0] = (uint64_t)"load command ";
            __int16 v293 = 259;
            __int16 v290 = 264;
            LODWORD(v288[0]) = v41;
            llvm::operator+(v291, v288, (uint64_t)&v294);
            v285[0] = (uint64_t)" fileoff field plus filesize field in ";
            __int16 v287 = 259;
            llvm::operator+((uint64_t *)&v294, v285, (uint64_t)v298);
            v282[0] = (uint64_t)"LC_SEGMENT_64";
            __int16 v284 = 259;
            llvm::operator+(v298, v282, (uint64_t)&v301);
            v199 = " extends past the end of the file";
LABEL_461:
            v280 = v199;
            __int16 v281 = 259;
            v202 = &v301;
            goto LABEL_462;
          }
          if ((void)v314 && (unint64_t)v315 > (unint64_t)v314)
          {
            v291[0] = (uint64_t)"load command ";
            __int16 v293 = 259;
            __int16 v290 = 264;
            LODWORD(v288[0]) = v41;
            llvm::operator+(v291, v288, (uint64_t)&v294);
            v285[0] = (uint64_t)" filesize field in ";
            __int16 v287 = 259;
            llvm::operator+((uint64_t *)&v294, v285, (uint64_t)v298);
            v282[0] = (uint64_t)"LC_SEGMENT_64";
            __int16 v284 = 259;
            llvm::operator+(v298, v282, (uint64_t)&v301);
            v199 = " greater than vmsize field";
            goto LABEL_461;
          }
LABEL_464:
          BOOL v205 = strlen(&v312.i8[8]) == 10 && v312.i64[1] == 0x455A454741505F5FLL && (unsigned __int16)v313 == 20306;
          *(unsigned char *)(a1 + 344) |= v205;
          goto LABEL_492;
        case 0x1B:
          if (v276.i32[3] != 24)
          {
            v225 = "LC_UUID command ";
            goto LABEL_574;
          }
          if (*(void *)(a1 + 336))
          {
            long long v35 = "more than one LC_UUID command";
            goto LABEL_561;
          }
          *(void *)(a1 + 336) = v276.i64[0];
          break;
        case 0x1D:
          char v53 = "LC_CODE_SIGNATURE";
          long long v54 = "code signature data";
          __n128 v52 = &v273;
          goto LABEL_113;
        case 0x1E:
          char v53 = "LC_SEGMENT_SPLIT_INFO";
          long long v54 = "split info data";
          __n128 v52 = &v275;
          goto LABEL_113;
        case 0x20:
          long long v49 = "LC_LAZY_LOAD_DYLIB";
LABEL_98:
          uint64_t v47 = a1;
          unsigned int v48 = v41;
          goto LABEL_99;
        case 0x22:
          std::error_code v59 = "LC_DYLD_INFO";
          uint64_t v56 = a1;
          unsigned int v57 = v41;
          uint64_t v58 = (void *)(a1 + 304);
          goto LABEL_102;
        case 0x24:
          uint64_t v69 = v276.i64[0];
          int v70 = v276.i32[3];
          uint64_t v71 = "LC_VERSION_MIN_MACOSX";
          goto LABEL_117;
        case 0x25:
          uint64_t v69 = v276.i64[0];
          int v70 = v276.i32[3];
          uint64_t v71 = "LC_VERSION_MIN_IPHONEOS";
          goto LABEL_117;
        case 0x26:
          char v53 = "LC_FUNCTION_STARTS";
          long long v54 = "function starts data";
          uint64_t v50 = a1;
          unsigned int v51 = v41;
          __n128 v52 = (uint64_t *)(a1 + 312);
          goto LABEL_137;
        case 0x27:
          unint64_t v64 = v276.i64[0];
          unsigned int v65 = v276.u32[3];
          uint64_t v66 = "LC_DYLD_ENVIRONMENT";
LABEL_107:
          checkDyldCommand((const llvm::Twine *)&v306, a1, v64, v65, v41, v66);
          goto LABEL_138;
        case 0x29:
          char v53 = "LC_DATA_IN_CODE";
          long long v54 = "data in code info";
          uint64_t v50 = a1;
          unsigned int v51 = v41;
          __n128 v52 = (uint64_t *)(a1 + 288);
          goto LABEL_137;
        case 0x2A:
          if (v276.i32[3] != 16)
          {
            v225 = "LC_SOURCE_VERSION command ";
            goto LABEL_574;
          }
          if (v266)
          {
            long long v35 = "more than one LC_SOURCE_VERSION command";
            goto LABEL_561;
          }
          uint64_t v266 = v276.i64[0];
          break;
        case 0x2B:
          char v53 = "LC_DYLIB_CODE_SIGN_DRS";
          long long v54 = "code signing RDs data";
          __n128 v52 = &v274;
LABEL_113:
          uint64_t v50 = a1;
          unsigned int v51 = v41;
          goto LABEL_137;
        case 0x2E:
          char v53 = "LC_LINKER_OPTIMIZATION_HINT";
          long long v54 = "linker optimization hints";
          uint64_t v50 = a1;
          unsigned int v51 = v41;
          __n128 v52 = (uint64_t *)(a1 + 296);
          goto LABEL_137;
        case 0x2F:
          uint64_t v69 = v276.i64[0];
          int v70 = v276.i32[3];
          uint64_t v71 = "LC_VERSION_MIN_TVOS";
          goto LABEL_117;
        case 0x30:
          uint64_t v69 = v276.i64[0];
          int v70 = v276.i32[3];
          uint64_t v71 = "LC_VERSION_MIN_WATCHOS";
LABEL_117:
          checkVersCommand((const llvm::Twine *)&v306, v69, v70, v41, &v272, v71);
          goto LABEL_138;
        case 0x31:
          if (v276.i32[3] != 40)
          {
            v317.i64[0] = (uint64_t)"load command ";
            *(void *)&long long v318 = v41;
            LOWORD(v319) = 2051;
            __int16 v92 = " LC_NOTE has incorrect cmdsize";
            goto LABEL_221;
          }
          unint64_t v72 = *(void *)(a1 + 16);
          if (v276.i64[0] < v72) {
            goto LABEL_156;
          }
          unint64_t v73 = *(void *)(a1 + 24);
          if (v276.i64[0] + 40 > v72 + v73) {
            goto LABEL_156;
          }
          unsigned int v74 = *(_DWORD *)(a1 + 8);
          unint64_t v75 = bswap64(*(void *)(v276.i64[0] + 24));
          unint64_t v76 = bswap64(*(void *)(v276.i64[0] + 32));
          if (((1 << v74) & 0x155800) == 0)
          {
            unint64_t v76 = *(void *)(v276.i64[0] + 32);
            unint64_t v75 = *(void *)(v276.i64[0] + 24);
          }
          if (v74 <= 0x14) {
            uint64_t v77 = v76;
          }
          else {
            uint64_t v77 = *(void *)(v276.i64[0] + 32);
          }
          if (v74 <= 0x14) {
            unint64_t v78 = v75;
          }
          else {
            unint64_t v78 = *(void *)(v276.i64[0] + 24);
          }
          if (v78 > v73)
          {
            v79 = "offset field of LC_NOTE command ";
            goto LABEL_220;
          }
          if (v78 + v77 > v73)
          {
            v79 = "size field plus offset field of LC_NOTE command ";
LABEL_220:
            v317.i64[0] = (uint64_t)v79;
            *(void *)&long long v318 = v41;
            LOWORD(v319) = 2051;
            __int16 v92 = " extends past the end of the file";
LABEL_221:
            v306.i64[0] = (uint64_t)&v317;
            *(void *)&long long v307 = v92;
LABEL_222:
            __int16 v90 = 770;
LABEL_223:
            LOWORD(v308) = v90;
            malformedError((const llvm::Twine *)&v301, v306.i64);
          }
          checkOverlappingElement(&v301, (uint64_t *)&v277, v78, v77, "LC_NOTE data");
          uint64_t v62 = v301.i64[0];
          if (v301.i64[0]) {
            goto LABEL_563;
          }
          goto LABEL_175;
        case 0x32:
          if (v276.i64[0] < *v265
            || (uint64_t v80 = v276.i64[0] + 24, (unint64_t)(v276.i64[0] + 24) > *v265 + *(void *)(a1 + 24)))
          {
            v306.i64[0] = (uint64_t)"Structure read out-of-range";
            LOWORD(v308) = 259;
            malformedError((const llvm::Twine *)v291, v306.i64);
          }
          uint64_t v255 = v36;
          unsigned int v94 = *(_DWORD *)(v276.i64[0] + 20);
          unsigned int v95 = *(_DWORD *)(a1 + 8);
          unsigned int v96 = bswap32(*(_DWORD *)(v276.i64[0] + 8));
          LODWORD(v97) = bswap32(v94);
          if (((1 << v95) & 0x155800) == 0)
          {
            LODWORD(v97) = *(_DWORD *)(v276.i64[0] + 20);
            unsigned int v96 = *(_DWORD *)(v276.i64[0] + 8);
          }
          if (v95 <= 0x14) {
            unint64_t v97 = v97;
          }
          else {
            unint64_t v97 = v94;
          }
          if (v95 <= 0x14) {
            unsigned int v98 = v96;
          }
          else {
            unsigned int v98 = *(_DWORD *)(v276.i64[0] + 8);
          }
          uint64_t v99 = 8 * v97;
          if (v99 + 24 != v276.u32[3])
          {
            v317.i64[0] = (uint64_t)"load command ";
            *(void *)&long long v318 = v41;
            LOWORD(v319) = 2051;
            v306.i64[0] = (uint64_t)&v317;
            *(void *)&long long v307 = " LC_BUILD_VERSION_COMMAND has incorrect cmdsize";
            LOWORD(v308) = 770;
            goto LABEL_226;
          }
          unsigned int v245 = v98;
          int v250 = v97;
          llvm::SmallVectorImpl<unsigned long long>::resizeImpl<false>((uint64_t)v17, v97);
          if (v250)
          {
            uint64_t v100 = 0;
            do
            {
              *(void *)(*v17 + v100) = v80 + v100;
              v100 += 8;
            }
            while (v99 != v100);
          }
          if (v264)
          {
            uint64_t v36 = v255;
            if ((v263 & 0x8000000) == 0 && v260)
            {
              v101 = "more than two LC_BUILD_VERSION load commands";
LABEL_425:
              v306.i64[0] = (uint64_t)v101;
              LOWORD(v308) = 259;
              goto LABEL_426;
            }
            uint64_t v260 = v276.i64[0];
            uint64_t v295 = 0;
            v294 = 0;
            unint64_t v296 = 0;
            getStruct<llvm::MachO::encryption_info_command_64>((uint64_t)&v294, a1, v264);
            if (v295 != 6 && v295 != 1
              || v295 == 1 && v245 != 6
              || v295 == 6 && v245 != 1)
            {
              if ((v263 & 0x8000000) == 0)
              {
                v101 = "the two LC_BUILD_VERSION load commands are not for the platforms MACOS and MACCATALYST";
                goto LABEL_425;
              }
              if (v245 - 6 >= 4 && v245 != 1)
              {
                v301.i64[0] = (uint64_t)"the LC_BUILD_VERSION, command ";
                LOWORD(v303) = 259;
                LOWORD(v314) = 264;
                v312.i32[0] = v41;
                llvm::operator+(v301.i64, v312.i64, (uint64_t)&v317);
                v298[0] = (uint64_t)", platform value is not allowed when the mach header flag MH_SIM_SUPPORT is set";
                __int16 v300 = 259;
                llvm::operator+(v317.i64, v298, (uint64_t)&v306);
LABEL_426:
                malformedError((const llvm::Twine *)v291, v306.i64);
              }
            }
          }
          else
          {
            v264 = (long long *)v276.i64[0];
            uint64_t v36 = v255;
            if ((v263 & 0x8000000) != 0 && v245 - 6 >= 4)
            {
              if (v245 != 1)
              {
                v301.i64[0] = (uint64_t)"the LC_BUILD_VERSION, command ";
                LOWORD(v303) = 259;
                LOWORD(v314) = 264;
                v312.i32[0] = v41;
                llvm::operator+(v301.i64, v312.i64, (uint64_t)&v317);
                v298[0] = (uint64_t)", platform value is not allowed when the mach header flag MH_SIM_SUPPORT is set";
                __int16 v300 = 259;
                llvm::operator+(v317.i64, v298, (uint64_t)&v306);
LABEL_226:
                malformedError((const llvm::Twine *)v291, v306.i64);
              }
              uint64_t v36 = v255;
            }
          }
LABEL_175:
          *a5 = 0;
          break;
        default:
          goto LABEL_134;
      }
    }
LABEL_140:
    if (v41 < (v268 - 1))
    {
      int v81 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      unint64_t v82 = (_DWORD *)(v276.i64[0] + v276.u32[3]);
      uint64_t v83 = 28;
      if (v81) {
        uint64_t v83 = 32;
      }
      if ((unint64_t)(v82 + 2) > *(void *)(a1 + 16) + (unint64_t)*(unsigned int *)(a1 + 68) + v83)
      {
        v317.i64[0] = (uint64_t)"load command ";
        *(void *)&long long v318 = v41 + 1;
        LOWORD(v319) = 2051;
        v306.i64[0] = (uint64_t)&v317;
        *(void *)&long long v307 = " extends past the end all load commands in the file";
        LOWORD(v308) = 770;
        malformedError((const llvm::Twine *)&v301, v306.i64);
      }
      getLoadCommandInfo((uint64_t)&v301, (const char *)a1, v82, v41 + 1);
      if (v302)
      {
        uint64_t v62 = v301.i64[0];
        goto LABEL_563;
      }
      int8x16_t v276 = v301;
    }
LABEL_146:
    ++v41;
  }
  while (v41 != v268);
  if (v272 && v264)
  {
    uint64_t v218 = getStruct<llvm::MachO::version_min_command>(a1, v272);
    if ((v263 & 0x8000000) != 0 && v218 != 36)
    {
      long long v35 = "MH_SIM_SUPPORT files only support LC_BUILD_VERSION and LC_VERSION_MIN_MACOSX load commands";
      goto LABEL_561;
    }
    if ((v263 & 0x8000000) == 0 && v218 != 36)
    {
      long long v35 = "LC_BUILD_VERSION and some LC_VERSION_MIN load command also found";
      goto LABEL_561;
    }
  }
LABEL_40:
  long long v37 = *(long long **)(a1 + 272);
  uint64_t v38 = *(void *)(a1 + 280);
  if (v37)
  {
    if (v38)
    {
      int8x16_t v301 = 0uLL;
      *(void *)&long long v302 = 0;
      getStruct<llvm::MachO::symtab_command>(a1, v37, (uint64_t)&v301);
      long long v309 = 0u;
      long long v310 = 0u;
      long long v307 = 0u;
      long long v308 = 0u;
      int8x16_t v306 = 0u;
      getStruct<llvm::MachO::dysymtab_command>(a1, *(int8x16_t **)(a1 + 280), &v306);
      if (v306.i32[3])
      {
        if (v306.i32[2] > (unsigned __int32)v301.i32[3])
        {
          int v39 = "ilocalsym in LC_DYSYMTAB load command extends past the end of the symbol table";
          goto LABEL_555;
        }
        if (v306.u32[2] + (unint64_t)v306.u32[3] > v301.u32[3])
        {
          int v39 = "ilocalsym plus nlocalsym in LC_DYSYMTAB load command extends past the end of the symbol table";
          goto LABEL_555;
        }
      }
      if (DWORD1(v307))
      {
        if (v307 > v301.i32[3])
        {
          int v39 = "iextdefsym in LC_DYSYMTAB load command extends past the end of the symbol table";
          goto LABEL_555;
        }
        if (v307 + (unint64_t)DWORD1(v307) > v301.u32[3])
        {
          int v39 = "iextdefsym plus nextdefsym in LC_DYSYMTAB load command extends past the end of the symbol table";
          goto LABEL_555;
        }
      }
      if (HIDWORD(v307))
      {
        if (DWORD2(v307) > v301.i32[3])
        {
          int v39 = "iundefsym in LC_DYSYMTAB load command extends past the end of the symbol table";
          goto LABEL_555;
        }
        if (DWORD2(v307) + (unint64_t)HIDWORD(v307) > v301.u32[3])
        {
          int v39 = "iundefsym plus nundefsym in LC_DYSYMTAB load  command extends past the end of the symbol table";
LABEL_555:
          v317.i64[0] = (uint64_t)v39;
          LOWORD(v319) = 259;
          malformedError((const llvm::Twine *)&v312, v317.i64);
        }
      }
    }
  }
  else if (v38)
  {
    long long v35 = "contains LC_DYSYMTAB load command without a LC_SYMTAB load command";
    goto LABEL_561;
  }
  int v219 = *(_DWORD *)(a1 + 60);
  if ((v219 == 6 || v219 == 9) && !v36)
  {
    long long v35 = "no LC_ID_DYLIB load command in dynamic library filetype";
    goto LABEL_561;
  }
  uint64_t v62 = 0;
  *a5 = 0;
LABEL_564:
  if (v279)
  {
    uint64_t v221 = (uint64_t)v277;
    v220 = v278;
    uint64_t v222 = *v278;
    *(void *)(v222 + 8) = v277[1];
    **(void **)(v221 + 8) = v222;
    uint64_t v279 = 0;
    if (v220 != (uint64_t *)&v277)
    {
      do
      {
        v223 = (uint64_t *)v220[1];
        operator delete(v220);
        v220 = v223;
      }
      while (v223 != (uint64_t *)&v277);
      uint64_t v62 = *a5;
    }
  }
  if (!v62) {
    *a5 = 0;
  }
  return a1;
}

void malformedError(const llvm::Twine *a1, uint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 32);
  if (*((unsigned char *)a2 + 32))
  {
    if (v2 == 1)
    {
      uint64_t v3 = "truncated or malformed object (";
      v8[0] = "truncated or malformed object (";
      __int16 v9 = 259;
      char v4 = 3;
    }
    else
    {
      uint64_t v6 = (uint64_t *)*a2;
      uint64_t v7 = a2[1];
      char v4 = 2;
      if (*((unsigned char *)a2 + 33) != 1)
      {
        LOBYTE(v2) = 2;
        uint64_t v6 = a2;
      }
      v8[0] = "truncated or malformed object (";
      _OWORD v8[2] = v6;
      v8[3] = v7;
      LOBYTE(v9) = 3;
      HIBYTE(v9) = v2;
      uint64_t v3 = (const char *)v8;
    }
    long long v10 = v3;
    int v11 = ")";
    char v5 = 3;
  }
  else
  {
    char v4 = 0;
    __int16 v9 = 256;
    char v5 = 1;
  }
  char v12 = v4;
  char v13 = v5;
  operator new();
}

void *checkLinkeditDataCommand(llvm::Twine *a1, uint64_t a2, uint64_t a3, unsigned int a4, void *a5, unsigned char *a6, uint64_t *a7, unsigned char *a8)
{
  if (*(_DWORD *)(a3 + 12) <= 0xFu)
  {
    v54[0] = (uint64_t)"load command ";
    unint64_t v55 = a4;
    __int16 v56 = 2051;
    *(void *)&long long v57 = v54;
    *(void *)&long long v58 = " ";
    LOWORD(v59) = 770;
    if (*a6)
    {
      long long v10 = &v57;
      *(void *)&long long v60 = &v57;
      *(void *)&long long v61 = a6;
      LOWORD(v62) = 770;
      char v11 = 2;
      char v12 = &v60;
LABEL_4:
      v63[0] = (uint64_t)v12;
      v63[1] = (uint64_t)v10;
      unint64_t v64 = " cmdsize too small";
      LOBYTE(v65) = v11;
LABEL_20:
      HIBYTE(v65) = 3;
      goto LABEL_57;
    }
    long long v60 = v57;
    long long v61 = v58;
    uint64_t v62 = v59;
    char v11 = v59;
    if (v59 != 1)
    {
      long long v10 = (long long *)*((void *)&v60 + 1);
      char v12 = &v60;
      if (BYTE1(v62) == 1) {
        char v12 = (long long *)v60;
      }
      else {
        char v11 = 2;
      }
      goto LABEL_4;
    }
    v63[0] = (uint64_t)" cmdsize too small";
    __int16 v37 = 259;
    goto LABEL_56;
  }
  if (*a5)
  {
    int v14 = *a6;
    uint64_t v15 = "more than one ";
    if (*a6)
    {
      *(void *)&long long v60 = "more than one ";
      *(void *)&long long v61 = a6;
      LOWORD(v62) = 771;
      char v16 = 2;
    }
    else
    {
      *(void *)&long long v60 = "more than one ";
      LOWORD(v62) = 259;
      char v16 = 3;
    }
    if (v14) {
      uint64_t v15 = (const char *)&v60;
    }
    v63[0] = (uint64_t)v15;
    unint64_t v64 = " command";
    LOBYTE(v65) = v16;
    goto LABEL_20;
  }
  uint64_t v18 = *(_DWORD **)a3;
  unint64_t v20 = *(void *)(a2 + 16);
  unint64_t v19 = *(void *)(a2 + 24);
  BOOL v21 = *(void *)a3 < v20 || *(void *)a3 + 16 > v20 + v19;
  if (v21)
  {
    v63[0] = (uint64_t)"Structure read out-of-range";
    __int16 v65 = 259;
    malformedError((const llvm::Twine *)&v60, v63);
  }
  unsigned int v22 = v18[1];
  unsigned int v23 = v18[2];
  unsigned int v24 = v18[3];
  unsigned int v25 = *(_DWORD *)(a2 + 8);
  BOOL v21 = v25 > 0x14;
  int v26 = (1 << v25) & 0x155800;
  BOOL v27 = v21 || v26 == 0;
  unsigned int v28 = bswap32(v22);
  unsigned int v29 = bswap32(v23);
  unsigned int v30 = bswap32(v24);
  if (v27) {
    uint64_t v31 = v24;
  }
  else {
    uint64_t v31 = v30;
  }
  if (v27) {
    unint64_t v32 = v23;
  }
  else {
    unint64_t v32 = v29;
  }
  if (v27) {
    unsigned int v33 = v22;
  }
  else {
    unsigned int v33 = v28;
  }
  if (v33 != 16)
  {
    if (*a6)
    {
      *(void *)&long long v57 = a6;
      *(void *)&long long v58 = " command ";
      LOWORD(v59) = 771;
      uint64_t v38 = (const char *)&v57;
      char v39 = 2;
    }
    else
    {
      uint64_t v38 = " command ";
      *(void *)&long long v57 = " command ";
      LOWORD(v59) = 259;
      char v39 = 3;
    }
    *(void *)&long long v60 = v38;
    *(void *)&long long v61 = a4;
    LOBYTE(v62) = v39;
    BYTE1(v62) = 8;
    unint64_t v41 = " has incorrect cmdsize";
LABEL_55:
    v63[0] = (uint64_t)&v60;
    unint64_t v64 = v41;
    __int16 v37 = 770;
LABEL_56:
    __int16 v65 = v37;
    goto LABEL_57;
  }
  if (v19 < v32)
  {
    int v34 = *a6;
    long long v35 = (uint64_t *)"dataoff field of ";
    if (*a6)
    {
      v54[0] = (uint64_t)"dataoff field of ";
      unint64_t v55 = (unint64_t)a6;
      __int16 v56 = 771;
      char v36 = 2;
    }
    else
    {
      v54[0] = (uint64_t)"dataoff field of ";
      __int16 v56 = 259;
      char v36 = 3;
    }
    if (v34) {
      long long v35 = v54;
    }
    *(void *)&long long v57 = v35;
    *(void *)&long long v58 = " command ";
    LOBYTE(v59) = v36;
    BYTE1(v59) = 3;
    *(void *)&long long v60 = &v57;
    *(void *)&long long v61 = a4;
    LOWORD(v62) = 2050;
    unint64_t v41 = " extends past the end of the file";
    goto LABEL_55;
  }
  if (v32 + v31 > v19)
  {
    __n128 v52 = "dataoff field plus datasize field of ";
    __int16 v53 = 259;
    char v40 = 1;
    char v51 = 1;
    if (*a6)
    {
      v49[0] = (uint64_t)a6;
      char v40 = 3;
    }
    char v50 = v40;
    llvm::operator+((uint64_t *)&v52, v49, (uint64_t)v54);
    uint64_t v47 = " command ";
    __int16 v48 = 259;
    llvm::operator+(v54, (uint64_t *)&v47, (uint64_t)&v57);
    __int16 v46 = 264;
    LODWORD(v45[0]) = a4;
    llvm::operator+((uint64_t *)&v57, v45, (uint64_t)&v60);
    long long v43 = " extends past the end of the file";
    __int16 v44 = 259;
    llvm::operator+((uint64_t *)&v60, (uint64_t *)&v43, (uint64_t)v63);
LABEL_57:
    malformedError(a1, v63);
  }
  uint64_t result = checkOverlappingElement(a1, a7, v32, v31, a8);
  if (!*(void *)a1)
  {
    *a5 = *(void *)a3;
    *(void *)a1 = 0;
  }
  return result;
}

void *checkDyldInfoCommand(llvm::Twine *a1, uint64_t a2, uint64_t a3, unsigned int a4, void *a5, unsigned char *a6, uint64_t *a7)
{
  if (*(_DWORD *)(a3 + 12) <= 0x2Fu)
  {
    v70[0] = (uint64_t)"load command ";
    unint64_t v71 = a4;
    __int16 v72 = 2051;
    *(void *)&long long v73 = v70;
    *(void *)&long long v74 = " ";
    LOWORD(v75) = 770;
    if (*a6)
    {
      long long v10 = &v73;
      *(void *)&long long v76 = &v73;
      *(void *)&long long v77 = a6;
      LOWORD(v78) = 770;
      char v11 = 2;
      char v12 = &v76;
LABEL_4:
      v79[0] = (uint64_t)v12;
      v79[1] = (uint64_t)v10;
      uint64_t v80 = " cmdsize too small";
      LOBYTE(v81) = v11;
      HIBYTE(v81) = 3;
      goto LABEL_9;
    }
    long long v76 = v73;
    long long v77 = v74;
    uint64_t v78 = v75;
    char v11 = v75;
    if (v75 != 1)
    {
      long long v10 = (long long *)*((void *)&v76 + 1);
      char v12 = &v76;
      if (BYTE1(v78) == 1) {
        char v12 = (long long *)v76;
      }
      else {
        char v11 = 2;
      }
      goto LABEL_4;
    }
    int v14 = " cmdsize too small";
    goto LABEL_7;
  }
  if (*a5)
  {
    int v14 = "more than one LC_DYLD_INFO and or LC_DYLD_INFO_ONLY command";
LABEL_7:
    v79[0] = (uint64_t)v14;
    __int16 v15 = 259;
LABEL_8:
    __int16 v81 = v15;
    goto LABEL_9;
  }
  unint64_t v17 = *(_DWORD **)a3;
  unint64_t v19 = *(void *)(a2 + 16);
  unint64_t v18 = *(void *)(a2 + 24);
  if (*(void *)a3 < v19 || *(void *)a3 + 48 > v19 + v18)
  {
    v79[0] = (uint64_t)"Structure read out-of-range";
    __int16 v81 = 259;
    malformedError((const llvm::Twine *)&v76, v79);
  }
  unsigned int v23 = v17[1];
  unsigned int v22 = v17[2];
  unsigned int v24 = v17[3];
  unsigned int v25 = v17[4];
  unsigned int v26 = v17[5];
  unsigned int v27 = v17[6];
  unsigned int v28 = v17[7];
  unsigned int v29 = v17[8];
  unsigned int v31 = v17[9];
  unsigned int v30 = v17[10];
  unsigned int v32 = v17[11];
  unsigned int v33 = *(_DWORD *)(a2 + 8);
  if (v33 <= 0x14)
  {
    BOOL v34 = ((1 << v33) & 0x155800) == 0;
    unsigned int v35 = bswap32(v23);
    unsigned int v36 = bswap32(v22);
    unsigned int v37 = bswap32(v24);
    unsigned int v38 = bswap32(v25);
    unsigned int v39 = bswap32(v26);
    unsigned int v40 = bswap32(v27);
    unsigned int v41 = bswap32(v28);
    unsigned int v42 = bswap32(v29);
    unsigned int v43 = bswap32(v31);
    unsigned int v44 = bswap32(v30);
    unsigned int v45 = bswap32(v32);
    if (!v34)
    {
      unsigned int v32 = v45;
      unsigned int v30 = v44;
      unsigned int v31 = v43;
      unsigned int v29 = v42;
      unsigned int v28 = v41;
      unsigned int v27 = v40;
      unsigned int v26 = v39;
      unsigned int v25 = v38;
      unsigned int v24 = v37;
      unsigned int v22 = v36;
      unsigned int v23 = v35;
    }
  }
  if (v23 != 48)
  {
    if (*a6)
    {
      *(void *)&long long v73 = a6;
      *(void *)&long long v74 = " command ";
      LOWORD(v75) = 771;
      long long v49 = (const char *)&v73;
      char v50 = 2;
    }
    else
    {
      long long v49 = " command ";
      *(void *)&long long v73 = " command ";
      LOWORD(v75) = 259;
      char v50 = 3;
    }
    *(void *)&long long v76 = v49;
    *(void *)&long long v77 = a4;
    LOBYTE(v78) = v50;
    BYTE1(v78) = 8;
    __int16 v53 = " has incorrect cmdsize";
    goto LABEL_46;
  }
  if (v18 < v22)
  {
    int v46 = *a6;
    uint64_t v47 = (uint64_t *)"rebase_off field of ";
    if (*a6)
    {
      v70[0] = (uint64_t)"rebase_off field of ";
      unint64_t v71 = (unint64_t)a6;
      __int16 v72 = 771;
      char v48 = 2;
    }
    else
    {
      v70[0] = (uint64_t)"rebase_off field of ";
      __int16 v72 = 259;
      char v48 = 3;
    }
    if (v46) {
      uint64_t v47 = v70;
    }
    *(void *)&long long v73 = v47;
    *(void *)&long long v74 = " command ";
    LOBYTE(v75) = v48;
    BYTE1(v75) = 3;
    *(void *)&long long v76 = &v73;
    *(void *)&long long v77 = a4;
    LOWORD(v78) = 2050;
    __int16 v53 = " extends past the end of the file";
LABEL_46:
    v79[0] = (uint64_t)&v76;
    uint64_t v80 = v53;
    __int16 v15 = 770;
    goto LABEL_8;
  }
  if (v22 + (unint64_t)v24 > v18)
  {
    char v51 = "rebase_off field plus rebase_size field of ";
LABEL_34:
    uint64_t v68 = v51;
    __int16 v69 = 259;
    char v52 = 1;
    char v67 = 1;
    if (*a6)
    {
      v65[0] = (uint64_t)a6;
      char v52 = 3;
    }
    char v66 = v52;
    llvm::operator+((uint64_t *)&v68, v65, (uint64_t)v70);
    uint64_t v63 = " command ";
    __int16 v64 = 259;
    llvm::operator+(v70, (uint64_t *)&v63, (uint64_t)&v73);
    __int16 v62 = 264;
    LODWORD(v61[0]) = a4;
    llvm::operator+((uint64_t *)&v73, v61, (uint64_t)&v76);
    uint64_t v59 = " extends past the end of the file";
    __int16 v60 = 259;
    llvm::operator+((uint64_t *)&v76, (uint64_t *)&v59, (uint64_t)v79);
LABEL_9:
    malformedError(a1, v79);
  }
  unsigned int v57 = v31;
  unsigned int v55 = v32;
  unsigned int v56 = v30;
  unint64_t v58 = v18;
  uint64_t result = checkOverlappingElement(a1, a7, v22, v24, "dyld rebase info");
  if (!*(void *)a1)
  {
    if (v58 < v25)
    {
      char v51 = "bind_off field of ";
      goto LABEL_34;
    }
    if (v25 + (unint64_t)v26 > v58)
    {
      char v51 = "bind_off field plus bind_size field of ";
      goto LABEL_34;
    }
    uint64_t result = checkOverlappingElement(a1, a7, v25, v26, "dyld bind info");
    if (!*(void *)a1)
    {
      if (v58 < v27)
      {
        char v51 = "weak_bind_off field of ";
        goto LABEL_34;
      }
      if (v27 + (unint64_t)v28 > v58)
      {
        char v51 = "weak_bind_off field plus weak_bind_size field of ";
        goto LABEL_34;
      }
      uint64_t result = checkOverlappingElement(a1, a7, v27, v28, "dyld weak bind info");
      if (!*(void *)a1)
      {
        if (v58 < v29)
        {
          char v51 = "lazy_bind_off field of ";
          goto LABEL_34;
        }
        if (v29 + (unint64_t)v57 > v58)
        {
          char v51 = "lazy_bind_off field plus lazy_bind_size field of ";
          goto LABEL_34;
        }
        uint64_t result = checkOverlappingElement(a1, a7, v29, v57, "dyld lazy bind info");
        if (!*(void *)a1)
        {
          if (v58 < v56)
          {
            char v51 = "export_off field of ";
            goto LABEL_34;
          }
          if (v56 + (unint64_t)v55 > v58)
          {
            char v51 = "export_off field plus export_size field of ";
            goto LABEL_34;
          }
          uint64_t result = checkOverlappingElement(a1, a7, v56, v55, "dyld export info");
          if (!*(void *)a1)
          {
            *a5 = *(void *)a3;
            *(void *)a1 = 0;
          }
        }
      }
    }
  }
  return result;
}

const llvm::Twine *checkDylibCommand(const llvm::Twine *result, uint64_t a2, unint64_t *a3, unsigned int a4, unsigned char *a5)
{
  if (*((_DWORD *)a3 + 3) <= 0x17u)
  {
    v30[0] = "load command ";
    uint64_t v31 = a4;
    __int16 v32 = 2051;
    *(void *)&long long v33 = v30;
    *(void *)&long long v34 = " ";
    LOWORD(v35) = 770;
    if (*a5)
    {
      char v5 = &v33;
      *(void *)&long long v36 = &v33;
      *(void *)&long long v37 = a5;
      LOWORD(v38) = 770;
      char v6 = 2;
      uint64_t v7 = (const char *)&v36;
    }
    else
    {
      long long v36 = v33;
      long long v37 = v34;
      uint64_t v38 = v35;
      char v6 = v35;
      if (v35 == 1)
      {
        unsigned int v27 = " cmdsize too small";
        goto LABEL_32;
      }
      char v5 = (long long *)*((void *)&v36 + 1);
      uint64_t v7 = (const char *)&v36;
      if (BYTE1(v38) == 1) {
        uint64_t v7 = (const char *)v36;
      }
      else {
        char v6 = 2;
      }
    }
    unsigned int v39 = v7;
    unsigned int v40 = v5;
    unint64_t v8 = " cmdsize too small";
    goto LABEL_5;
  }
  unint64_t v9 = *a3;
  unint64_t v10 = *(void *)(a2 + 16);
  BOOL v11 = *a3 < v10 || *a3 + 24 > v10 + *(void *)(a2 + 24);
  if (v11)
  {
    unsigned int v39 = "Structure read out-of-range";
    __int16 v42 = 259;
    malformedError((const llvm::Twine *)&v36, (uint64_t *)&v39);
  }
  unsigned int v12 = *(_DWORD *)(v9 + 4);
  unsigned int v13 = *(_DWORD *)(v9 + 8);
  unsigned int v14 = *(_DWORD *)(a2 + 8);
  BOOL v11 = v14 > 0x14;
  int v15 = (1 << v14) & 0x155800;
  BOOL v16 = v11 || v15 == 0;
  unsigned int v17 = bswap32(v12);
  unsigned int v18 = bswap32(v13);
  if (!v16)
  {
    unsigned int v13 = v18;
    unsigned int v12 = v17;
  }
  if (v13 <= 0x17)
  {
    v30[0] = "load command ";
    uint64_t v31 = a4;
    __int16 v32 = 2051;
    *(void *)&long long v33 = v30;
    *(void *)&long long v34 = " ";
    LOWORD(v35) = 770;
    if (*a5)
    {
      unint64_t v19 = &v33;
      *(void *)&long long v36 = &v33;
      *(void *)&long long v37 = a5;
      LOWORD(v38) = 770;
      char v6 = 2;
      unint64_t v20 = (const char *)&v36;
    }
    else
    {
      long long v36 = v33;
      long long v37 = v34;
      uint64_t v38 = v35;
      char v6 = v35;
      if (v35 == 1)
      {
        unsigned int v27 = " name.offset field too small, not past the end of the dylib_command struct";
        goto LABEL_32;
      }
      unint64_t v19 = (long long *)*((void *)&v36 + 1);
      unint64_t v20 = (const char *)&v36;
      if (BYTE1(v38) == 1) {
        unint64_t v20 = (const char *)v36;
      }
      else {
        char v6 = 2;
      }
    }
    unsigned int v39 = v20;
    unsigned int v40 = v19;
    unint64_t v8 = " name.offset field too small, not past the end of the dylib_command struct";
    goto LABEL_5;
  }
  BOOL v21 = v12 >= v13;
  unsigned int v22 = v12 - v13;
  if (v22 == 0 || !v21)
  {
    v30[0] = "load command ";
    uint64_t v31 = a4;
    __int16 v32 = 2051;
    *(void *)&long long v33 = v30;
    *(void *)&long long v34 = " ";
    LOWORD(v35) = 770;
    if (*a5)
    {
      unsigned int v28 = &v33;
      *(void *)&long long v36 = &v33;
      *(void *)&long long v37 = a5;
      LOWORD(v38) = 770;
      char v6 = 2;
      unsigned int v29 = (const char *)&v36;
    }
    else
    {
      long long v36 = v33;
      long long v37 = v34;
      uint64_t v38 = v35;
      char v6 = v35;
      if (v35 == 1)
      {
        unsigned int v27 = " name.offset field extends past the end of the load command";
        goto LABEL_32;
      }
      unsigned int v28 = (long long *)*((void *)&v36 + 1);
      unsigned int v29 = (const char *)&v36;
      if (BYTE1(v38) == 1) {
        unsigned int v29 = (const char *)v36;
      }
      else {
        char v6 = 2;
      }
    }
    unsigned int v39 = v29;
    unsigned int v40 = v28;
    unint64_t v8 = " name.offset field extends past the end of the load command";
    goto LABEL_5;
  }
  unsigned int v23 = (unsigned __int8 *)(v9 + v13);
  while (*v23++)
  {
    if (!--v22)
    {
      v30[0] = "load command ";
      uint64_t v31 = a4;
      __int16 v32 = 2051;
      *(void *)&long long v33 = v30;
      *(void *)&long long v34 = " ";
      LOWORD(v35) = 770;
      if (*a5)
      {
        unsigned int v25 = &v33;
        *(void *)&long long v36 = &v33;
        *(void *)&long long v37 = a5;
        LOWORD(v38) = 770;
        char v6 = 2;
        unsigned int v26 = (const char *)&v36;
        goto LABEL_30;
      }
      long long v36 = v33;
      long long v37 = v34;
      uint64_t v38 = v35;
      char v6 = v35;
      if (v35 != 1)
      {
        unsigned int v25 = (long long *)*((void *)&v36 + 1);
        unsigned int v26 = (const char *)&v36;
        if (BYTE1(v38) == 1) {
          unsigned int v26 = (const char *)v36;
        }
        else {
          char v6 = 2;
        }
LABEL_30:
        unsigned int v39 = v26;
        unsigned int v40 = v25;
        unint64_t v8 = " library name extends past the end of the load command";
LABEL_5:
        unsigned int v41 = v8;
        LOBYTE(v42) = v6;
        HIBYTE(v42) = 3;
LABEL_33:
        malformedError(result, (uint64_t *)&v39);
      }
      unsigned int v27 = " library name extends past the end of the load command";
LABEL_32:
      unsigned int v39 = v27;
      __int16 v42 = 259;
      goto LABEL_33;
    }
  }
  *(void *)uint64_t result = 0;
  return result;
}

const llvm::Twine *checkDyldCommand(const llvm::Twine *result, uint64_t a2, unint64_t a3, unsigned int a4, unsigned int a5, unsigned char *a6)
{
  if (a4 <= 0xB)
  {
    v30[0] = "load command ";
    uint64_t v31 = a5;
    __int16 v32 = 2051;
    *(void *)&long long v33 = v30;
    *(void *)&long long v34 = " ";
    LOWORD(v35) = 770;
    if (*a6)
    {
      char v6 = &v33;
      *(void *)&long long v36 = &v33;
      *(void *)&long long v37 = a6;
      LOWORD(v38) = 770;
      char v7 = 2;
      unint64_t v8 = (const char *)&v36;
    }
    else
    {
      long long v36 = v33;
      long long v37 = v34;
      uint64_t v38 = v35;
      char v7 = v35;
      if (v35 == 1)
      {
        unsigned int v12 = " cmdsize too small";
        goto LABEL_12;
      }
      char v6 = (long long *)*((void *)&v36 + 1);
      unint64_t v8 = (const char *)&v36;
      if (BYTE1(v38) == 1) {
        unint64_t v8 = (const char *)v36;
      }
      else {
        char v7 = 2;
      }
    }
    unsigned int v39 = v8;
    unsigned int v40 = v6;
    unint64_t v9 = " cmdsize too small";
    goto LABEL_5;
  }
  unint64_t v10 = *(void *)(a2 + 16);
  BOOL v11 = v10 > a3 || a3 + 12 > v10 + *(void *)(a2 + 24);
  if (v11)
  {
    unsigned int v12 = "Structure read out-of-range";
    goto LABEL_12;
  }
  unsigned int v13 = *(_DWORD *)(a3 + 4);
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  unsigned int v15 = *(_DWORD *)(a2 + 8);
  BOOL v11 = v15 > 0x14;
  int v16 = (1 << v15) & 0x155800;
  BOOL v17 = v11 || v16 == 0;
  unsigned int v18 = bswap32(v13);
  unsigned int v19 = bswap32(v14);
  if (!v17)
  {
    unsigned int v14 = v19;
    unsigned int v13 = v18;
  }
  if (v14 <= 0xB)
  {
    v30[0] = "load command ";
    uint64_t v31 = a5;
    __int16 v32 = 2051;
    *(void *)&long long v33 = v30;
    *(void *)&long long v34 = " ";
    LOWORD(v35) = 770;
    if (*a6)
    {
      unint64_t v20 = &v33;
      *(void *)&long long v36 = &v33;
      *(void *)&long long v37 = a6;
      LOWORD(v38) = 770;
      char v7 = 2;
      BOOL v21 = (const char *)&v36;
    }
    else
    {
      long long v36 = v33;
      long long v37 = v34;
      uint64_t v38 = v35;
      char v7 = v35;
      if (v35 == 1)
      {
        unsigned int v12 = " name.offset field too small, not past the end of the dylinker_command struct";
        goto LABEL_12;
      }
      unint64_t v20 = (long long *)*((void *)&v36 + 1);
      BOOL v21 = (const char *)&v36;
      if (BYTE1(v38) == 1) {
        BOOL v21 = (const char *)v36;
      }
      else {
        char v7 = 2;
      }
    }
    unsigned int v39 = v21;
    unsigned int v40 = v20;
    unint64_t v9 = " name.offset field too small, not past the end of the dylinker_command struct";
    goto LABEL_5;
  }
  BOOL v22 = v13 >= v14;
  unsigned int v23 = v13 - v14;
  if (v23 == 0 || !v22)
  {
    v30[0] = "load command ";
    uint64_t v31 = a5;
    __int16 v32 = 2051;
    *(void *)&long long v33 = v30;
    *(void *)&long long v34 = " ";
    LOWORD(v35) = 770;
    if (*a6)
    {
      unsigned int v28 = &v33;
      *(void *)&long long v36 = &v33;
      *(void *)&long long v37 = a6;
      LOWORD(v38) = 770;
      char v7 = 2;
      unsigned int v29 = (const char *)&v36;
    }
    else
    {
      long long v36 = v33;
      long long v37 = v34;
      uint64_t v38 = v35;
      char v7 = v35;
      if (v35 == 1)
      {
        unsigned int v12 = " name.offset field extends past the end of the load command";
        goto LABEL_12;
      }
      unsigned int v28 = (long long *)*((void *)&v36 + 1);
      unsigned int v29 = (const char *)&v36;
      if (BYTE1(v38) == 1) {
        unsigned int v29 = (const char *)v36;
      }
      else {
        char v7 = 2;
      }
    }
    unsigned int v39 = v29;
    unsigned int v40 = v28;
    unint64_t v9 = " name.offset field extends past the end of the load command";
    goto LABEL_5;
  }
  unsigned int v24 = (unsigned __int8 *)(a3 + v14);
  while (*v24++)
  {
    if (!--v23)
    {
      v30[0] = "load command ";
      uint64_t v31 = a5;
      __int16 v32 = 2051;
      *(void *)&long long v33 = v30;
      *(void *)&long long v34 = " ";
      LOWORD(v35) = 770;
      if (*a6)
      {
        unsigned int v26 = &v33;
        *(void *)&long long v36 = &v33;
        *(void *)&long long v37 = a6;
        LOWORD(v38) = 770;
        char v7 = 2;
        unsigned int v27 = (const char *)&v36;
        goto LABEL_32;
      }
      long long v36 = v33;
      long long v37 = v34;
      uint64_t v38 = v35;
      char v7 = v35;
      if (v35 != 1)
      {
        unsigned int v26 = (long long *)*((void *)&v36 + 1);
        unsigned int v27 = (const char *)&v36;
        if (BYTE1(v38) == 1) {
          unsigned int v27 = (const char *)v36;
        }
        else {
          char v7 = 2;
        }
LABEL_32:
        unsigned int v39 = v27;
        unsigned int v40 = v26;
        unint64_t v9 = " dyld name extends past the end of the load command";
LABEL_5:
        unsigned int v41 = v9;
        LOBYTE(v42) = v7;
        HIBYTE(v42) = 3;
LABEL_24:
        malformedError(result, (uint64_t *)&v39);
      }
      unsigned int v12 = " dyld name extends past the end of the load command";
LABEL_12:
      unsigned int v39 = v12;
      __int16 v42 = 259;
      goto LABEL_24;
    }
  }
  *(void *)uint64_t result = 0;
  return result;
}

const llvm::Twine *checkVersCommand(const llvm::Twine *result, uint64_t a2, int a3, unsigned int a4, void *a5, unsigned char *a6)
{
  if (a3 != 16)
  {
    v10[0] = "load command ";
    _OWORD v10[2] = a4;
    __int16 v11 = 2051;
    *(void *)&long long v12 = v10;
    *(void *)&long long v13 = " ";
    LOWORD(v14) = 770;
    if (*a6)
    {
      char v7 = &v12;
      *(void *)&long long v15 = &v12;
      *(void *)&long long v16 = a6;
      LOWORD(v17) = 770;
      char v8 = 2;
      unint64_t v9 = &v15;
    }
    else
    {
      long long v15 = v12;
      long long v16 = v13;
      uint64_t v17 = v14;
      char v8 = v14;
      if (v14 == 1)
      {
        char v6 = " has incorrect cmdsize";
        goto LABEL_4;
      }
      char v7 = (long long *)*((void *)&v15 + 1);
      unint64_t v9 = &v15;
      if (BYTE1(v17) == 1) {
        unint64_t v9 = (long long *)v15;
      }
      else {
        char v8 = 2;
      }
    }
    v18[0] = (uint64_t)v9;
    v18[1] = (uint64_t)v7;
    unsigned int v18[2] = (uint64_t)" has incorrect cmdsize";
    LOBYTE(v19) = v8;
    HIBYTE(v19) = 3;
LABEL_8:
    malformedError(result, v18);
  }
  if (*a5)
  {
    char v6 = "more than one LC_VERSION_MIN_MACOSX, LC_VERSION_MIN_IPHONEOS, LC_VERSION_MIN_TVOS or LC_VERSION_MIN_WATCHOS command";
LABEL_4:
    v18[0] = (uint64_t)v6;
    __int16 v19 = 259;
    goto LABEL_8;
  }
  *a5 = a2;
  *(void *)uint64_t result = 0;
  return result;
}

int8x16_t getStruct<llvm::MachO::encryption_info_command>(int8x16_t *a1, uint64_t a2, int8x16_t *a3)
{
  unint64_t v3 = *(void *)(a2 + 16);
  BOOL v4 = v3 > (unint64_t)a3 || (unint64_t)a3[1].u64 + 4 > v3 + *(void *)(a2 + 24);
  if (v4) {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  }
  int8x16_t result = *a3;
  *a1 = *a3;
  a1[1].i32[0] = a3[1].i32[0];
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  BOOL v4 = v6 > 0x14;
  int v7 = (1 << v6) & 0x155800;
  if (!v4 && v7 != 0)
  {
    int8x16_t result = vrev32q_s8(*a1);
    *a1 = result;
    a1[1].i32[0] = bswap32(a1[1].u32[0]);
  }
  return result;
}

const llvm::Twine *checkEncryptCommand(const llvm::Twine *result, unint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, uint64_t a6, void *a7, unsigned char *a8)
{
  if (*a7)
  {
    v19[0] = (uint64_t)"more than one LC_ENCRYPTION_INFO and or LC_ENCRYPTION_INFO_64 command";
    __int16 v8 = 259;
    goto LABEL_12;
  }
  if (a2 < a5)
  {
    int v9 = *a8;
    unint64_t v10 = "cryptoff field of ";
    if (*a8)
    {
LABEL_5:
      v12[0] = v10;
      _OWORD v12[2] = a8;
      __int16 v13 = 771;
      char v11 = 2;
LABEL_9:
      if (v9) {
        unint64_t v10 = (const char *)v12;
      }
      v14[0] = v10;
      _OWORD v14[2] = " command ";
      char v15 = v11;
      char v16 = 3;
      v17[0] = v14;
      _OWORD v17[2] = a4;
      __int16 v18 = 2050;
      v19[0] = (uint64_t)v17;
      v19[2] = (uint64_t)" extends past the end of the file";
      __int16 v8 = 770;
LABEL_12:
      __int16 v20 = v8;
      malformedError(result, v19);
    }
LABEL_8:
    v12[0] = v10;
    __int16 v13 = 259;
    char v11 = 3;
    goto LABEL_9;
  }
  if (a6 + a5 > a2)
  {
    int v9 = *a8;
    unint64_t v10 = "cryptoff field plus cryptsize field of ";
    if (*a8) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  *a7 = a3;
  *(void *)int8x16_t result = 0;
  return result;
}

double getStruct<llvm::MachO::encryption_info_command_64>(uint64_t a1, uint64_t a2, long long *a3)
{
  unint64_t v3 = *(void *)(a2 + 16);
  BOOL v4 = v3 > (unint64_t)a3 || (unint64_t)a3 + 24 > v3 + *(void *)(a2 + 24);
  if (v4) {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  }
  long long v5 = *a3;
  *(_OWORD *)a1 = *a3;
  *(void *)(a1 + 16) = *((void *)a3 + 2);
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  BOOL v4 = v6 > 0x14;
  int v7 = (1 << v6) & 0x155800;
  if (!v4 && v7 != 0)
  {
    *(int8x16_t *)a1 = vrev32q_s8(*(int8x16_t *)a1);
    *(int8x8_t *)&long long v5 = vrev32_s8(*(int8x8_t *)(a1 + 16));
    *(void *)(a1 + 16) = v5;
  }
  return *(double *)&v5;
}

const llvm::Twine *checkLinkerOptCommand(const llvm::Twine *result, uint64_t a2, unint64_t a3, unsigned int a4, unsigned int a5)
{
  unsigned int v6 = result;
  if (a4 <= 0xB)
  {
    v33[0] = "load command ";
    uint64_t v34 = a5;
    __int16 v35 = 2051;
    long long v36 = (const char *)v33;
    long long v37 = " LC_LINKER_OPTION cmdsize too small";
    __int16 v7 = 770;
    goto LABEL_6;
  }
  unint64_t v8 = *(void *)(a2 + 16);
  if (v8 > a3 || (int v9 = (unsigned char *)(a3 + 12), a3 + 12 > v8 + *(void *)(a2 + 24)))
  {
    long long v36 = "Structure read out-of-range";
    __int16 v7 = 259;
    goto LABEL_6;
  }
  unsigned int v10 = *(_DWORD *)(a3 + 4);
  unsigned int v11 = *(_DWORD *)(a3 + 8);
  unsigned int v12 = *(_DWORD *)(a2 + 8);
  BOOL v13 = v12 > 0x14;
  int v14 = (1 << v12) & 0x155800;
  BOOL v15 = v13 || v14 == 0;
  unsigned int v16 = bswap32(v10);
  unsigned int v17 = bswap32(v11);
  if (v15) {
    uint64_t v18 = v11;
  }
  else {
    uint64_t v18 = v17;
  }
  if (!v15) {
    unsigned int v10 = v16;
  }
  LODWORD(v19) = 0;
  unsigned int v20 = v10 - 12;
  if (v10 != 12)
  {
    while (1)
    {
      if (!*v9)
      {
        do
        {
          unsigned int v21 = v20;
          int v22 = *++v9;
          --v20;
          if (v22) {
            BOOL v23 = 1;
          }
          else {
            BOOL v23 = v21 == 1;
          }
        }
        while (!v23);
        if (v21 == 1) {
          goto LABEL_28;
        }
      }
      uint64_t v19 = (v19 + 1);
      int8x16_t result = (const llvm::Twine *)memchr(v9, 0, v20);
      if (!result) {
        break;
      }
      unsigned int v24 = result - v9;
      if (result - v9 == -1) {
        break;
      }
      if (v20 < v24) {
        unsigned int v24 = v20;
      }
      uint64_t v25 = v24 + 1;
      v9 += v25;
      v20 -= v25;
      if (!v20) {
        goto LABEL_28;
      }
    }
    v27[0] = "load command ";
    uint64_t v28 = a5;
    __int16 v29 = 2051;
    v30[0] = v27;
    uint64_t v31 = " LC_LINKER_OPTION string #";
    __int16 v7 = 770;
    __int16 v32 = 770;
    v33[0] = v30;
    uint64_t v34 = v19;
    __int16 v35 = 2050;
    unsigned int v26 = " is not NULL terminated";
    goto LABEL_32;
  }
LABEL_28:
  if (v18 != v19)
  {
    v27[0] = "load command ";
    uint64_t v28 = a5;
    __int16 v29 = 2051;
    v30[0] = v27;
    uint64_t v31 = " LC_LINKER_OPTION string count ";
    __int16 v7 = 770;
    __int16 v32 = 770;
    v33[0] = v30;
    uint64_t v34 = v18;
    __int16 v35 = 2050;
    unsigned int v26 = " does not match number of strings";
LABEL_32:
    long long v36 = (const char *)v33;
    long long v37 = v26;
LABEL_6:
    __int16 v38 = v7;
    malformedError(v6, (uint64_t *)&v36);
  }
  *(void *)unsigned int v6 = 0;
  return result;
}

uint64_t getStruct<llvm::MachO::sub_framework_command>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  BOOL v3 = v2 > a2 || a2 + 12 > v2 + *(void *)(a1 + 24);
  if (v3) {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  }
  unsigned int v4 = *(_DWORD *)(a2 + 8);
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  BOOL v3 = v5 > 0x14;
  int v6 = (1 << v5) & 0x155800;
  BOOL v7 = v3 || v6 == 0;
  unsigned int v8 = bswap32(v4);
  if (v7) {
    return v4;
  }
  else {
    return v8;
  }
}

const llvm::Twine *checkSubCommand(const llvm::Twine *result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned char *a5, unsigned char *a6, unsigned int a7, unsigned char *a8)
{
  if (a7 <= 0xB)
  {
    v31[0] = "load command ";
    void v31[2] = a4;
    __int16 v32 = 2051;
    unsigned int v8 = " ";
    *(void *)&long long v33 = v31;
    *(void *)&long long v34 = " ";
    LOWORD(v35) = 770;
    if (*a5)
    {
      int v9 = &v33;
      *(void *)&long long v36 = &v33;
      *(void *)&long long v37 = a5;
      LOWORD(v38) = 770;
      char v10 = 2;
      unsigned int v11 = &v36;
    }
    else
    {
      long long v36 = v33;
      long long v37 = v34;
      uint64_t v38 = v35;
      char v10 = v35;
      if (v35 == 1)
      {
        *(void *)&long long v39 = " ";
        LOWORD(v41) = 259;
        if (*a8)
        {
          char v12 = 3;
          goto LABEL_6;
        }
LABEL_30:
        long long v42 = v39;
        long long v43 = v40;
        uint64_t v44 = v41;
        char v12 = v41;
        goto LABEL_31;
      }
      int v9 = (long long *)*((void *)&v36 + 1);
      unsigned int v11 = &v36;
      if (BYTE1(v38) == 1) {
        unsigned int v11 = (long long *)v36;
      }
      else {
        char v10 = 2;
      }
    }
    *(void *)&long long v39 = v11;
    *((void *)&v39 + 1) = v9;
    *(void *)&long long v40 = " ";
    LOBYTE(v41) = v10;
    BYTE1(v41) = 3;
    if (*a8)
    {
      char v12 = 2;
      unsigned int v8 = (const char *)&v39;
LABEL_6:
      *(void *)&long long v42 = v8;
      *(void *)&long long v43 = a8;
      LOBYTE(v44) = v12;
      BYTE1(v44) = 3;
LABEL_31:
      unsigned int v26 = (long long *)v42;
      char v27 = 2;
      if (BYTE1(v44) != 1)
      {
        char v12 = 2;
        unsigned int v26 = &v42;
      }
      *(void *)&long long v45 = v26;
      *((void *)&v45 + 1) = *((void *)&v42 + 1);
      *(void *)&long long v46 = ".offset field too small, not past the end of the ";
      LOBYTE(v47) = v12;
      BYTE1(v47) = 3;
      if (*a6)
      {
        *(void *)&long long v48 = &v45;
        *(void *)&long long v49 = a6;
        goto LABEL_60;
      }
      long long v48 = v45;
      long long v49 = v46;
      uint64_t v50 = v47;
LABEL_61:
      malformedError(result, (uint64_t *)&v48);
    }
    goto LABEL_30;
  }
  int v13 = a3 - a7;
  if (a3 <= a7)
  {
    *(void *)&long long v33 = "load command ";
    *(void *)&long long v34 = a4;
    LOWORD(v35) = 2051;
    unsigned int v21 = " ";
    *(void *)&long long v36 = &v33;
    *(void *)&long long v37 = " ";
    LOWORD(v38) = 770;
    if (*a5)
    {
      int v22 = &v36;
      *(void *)&long long v39 = &v36;
      *(void *)&long long v40 = a5;
      LOWORD(v41) = 770;
      char v23 = 2;
      unsigned int v24 = &v39;
    }
    else
    {
      long long v39 = v36;
      long long v40 = v37;
      uint64_t v41 = v38;
      char v23 = v38;
      if (v38 == 1)
      {
        *(void *)&long long v42 = " ";
        LOWORD(v44) = 259;
        if (*a8)
        {
          char v25 = 3;
          goto LABEL_20;
        }
LABEL_43:
        long long v45 = v42;
        long long v46 = v43;
        uint64_t v47 = v44;
        char v25 = v44;
        goto LABEL_44;
      }
      int v22 = (long long *)*((void *)&v39 + 1);
      unsigned int v24 = &v39;
      if (BYTE1(v41) == 1) {
        unsigned int v24 = (long long *)v39;
      }
      else {
        char v23 = 2;
      }
    }
    *(void *)&long long v42 = v24;
    *((void *)&v42 + 1) = v22;
    *(void *)&long long v43 = " ";
    LOBYTE(v44) = v23;
    BYTE1(v44) = 3;
    if (*a8)
    {
      char v25 = 2;
      unsigned int v21 = (const char *)&v42;
LABEL_20:
      *(void *)&long long v45 = v21;
      *(void *)&long long v46 = a8;
      LOBYTE(v47) = v25;
      BYTE1(v47) = 3;
LABEL_44:
      if (BYTE1(v47) == 1) {
        char v27 = v25;
      }
      else {
        char v27 = 2;
      }
      uint64_t v28 = &v45;
      if (BYTE1(v47) == 1) {
        uint64_t v28 = (long long *)v45;
      }
      *(void *)&long long v48 = v28;
      *((void *)&v48 + 1) = *((void *)&v45 + 1);
      __int16 v29 = ".offset field extends past the end of the load command";
      goto LABEL_59;
    }
    goto LABEL_43;
  }
  int v14 = (unsigned __int8 *)(a2 + a7);
  while (*v14++)
  {
    if (!--v13)
    {
      *(void *)&long long v33 = "load command ";
      *(void *)&long long v34 = a4;
      LOWORD(v35) = 2051;
      unsigned int v16 = " ";
      *(void *)&long long v36 = &v33;
      *(void *)&long long v37 = " ";
      LOWORD(v38) = 770;
      if (*a5)
      {
        unsigned int v17 = &v36;
        *(void *)&long long v39 = &v36;
        *(void *)&long long v40 = a5;
        LOWORD(v41) = 770;
        char v18 = 2;
        uint64_t v19 = &v39;
        goto LABEL_13;
      }
      long long v39 = v36;
      long long v40 = v37;
      uint64_t v41 = v38;
      char v18 = v38;
      if (v38 == 1)
      {
        *(void *)&long long v42 = " ";
        LOWORD(v44) = 259;
        if (!*a8) {
          goto LABEL_52;
        }
        char v20 = 3;
LABEL_15:
        *(void *)&long long v45 = v16;
        *(void *)&long long v46 = a8;
        LOBYTE(v47) = v20;
        BYTE1(v47) = 3;
      }
      else
      {
        unsigned int v17 = (long long *)*((void *)&v39 + 1);
        uint64_t v19 = &v39;
        if (BYTE1(v41) == 1) {
          uint64_t v19 = (long long *)v39;
        }
        else {
          char v18 = 2;
        }
LABEL_13:
        *(void *)&long long v42 = v19;
        *((void *)&v42 + 1) = v17;
        *(void *)&long long v43 = " ";
        LOBYTE(v44) = v18;
        BYTE1(v44) = 3;
        if (*a8)
        {
          char v20 = 2;
          unsigned int v16 = (const char *)&v42;
          goto LABEL_15;
        }
LABEL_52:
        long long v45 = v42;
        long long v46 = v43;
        uint64_t v47 = v44;
        char v20 = v44;
      }
      if (BYTE1(v47) == 1) {
        char v27 = v20;
      }
      else {
        char v27 = 2;
      }
      unsigned int v30 = &v45;
      if (BYTE1(v47) == 1) {
        unsigned int v30 = (long long *)v45;
      }
      *(void *)&long long v48 = v30;
      *((void *)&v48 + 1) = *((void *)&v45 + 1);
      __int16 v29 = " name extends past the end of the load command";
LABEL_59:
      *(void *)&long long v49 = v29;
LABEL_60:
      LOBYTE(v50) = v27;
      BYTE1(v50) = 3;
      goto LABEL_61;
    }
  }
  *(void *)int8x16_t result = 0;
  return result;
}

uint64_t checkThreadCommand(uint64_t result, uint64_t a2, unint64_t a3, unsigned int a4, unsigned int a5, unsigned char *a6)
{
  BOOL v7 = (const llvm::Twine *)result;
  if (a4 <= 7)
  {
    *(void *)&long long v69 = "load command ";
    *(void *)&long long v70 = a5;
    LOWORD(v71) = 2051;
    uint64_t v8 = *a6;
    if (*a6)
    {
      *(void *)&long long v72 = &v69;
      *(void *)&long long v73 = a6;
      LOWORD(v74) = 770;
      char v9 = 2;
      char v10 = (const char *)&v72;
    }
    else
    {
      long long v72 = v69;
      long long v73 = v70;
      uint64_t v74 = v71;
      char v9 = v71;
      if (v71 == 1)
      {
        int v14 = " cmdsize too small";
        goto LABEL_9;
      }
      uint64_t v8 = *((void *)&v72 + 1);
      char v10 = (const char *)&v72;
      if (BYTE1(v74) == 1) {
        char v10 = (const char *)v72;
      }
      else {
        char v9 = 2;
      }
    }
    uint64_t v75 = v10;
    uint64_t v76 = v8;
    unsigned int v11 = " cmdsize too small";
    goto LABEL_5;
  }
  unint64_t v12 = *(void *)(a2 + 16);
  if (v12 > a3 || (int v13 = (unsigned int *)(a3 + 8), a3 + 8 > v12 + *(void *)(a2 + 24)))
  {
    int v14 = "Structure read out-of-range";
    goto LABEL_9;
  }
  unsigned int v15 = *(_DWORD *)(a2 + 8);
  BOOL v16 = v15 > 0x14 || ((1 << v15) & 0x155800) == 0;
  unsigned int v17 = bswap32(*(_DWORD *)(a3 + 4));
  if (v16) {
    unsigned int v18 = *(_DWORD *)(a3 + 4);
  }
  else {
    unsigned int v18 = v17;
  }
  if (v18 >= 9)
  {
    unsigned int v19 = 0;
    uint64_t v20 = *(unsigned int *)(a2 + 52);
    int8x16_t result = 16777228;
    unint64_t v21 = a3 + v18;
    do
    {
      if ((unint64_t)(v13 + 1) > v21)
      {
        v66[0] = (uint64_t)"load command ";
        uint64_t v67 = a5;
        __int16 v68 = 2051;
        unsigned int v26 = "flavor in ";
        goto LABEL_84;
      }
      LODWORD(v22) = *v13;
      unsigned int v23 = bswap32(*v13);
      if (((1 << v15) & 0x155800) == 0) {
        unsigned int v23 = *v13;
      }
      if (v15 <= 0x14) {
        uint64_t v22 = v23;
      }
      else {
        uint64_t v22 = v22;
      }
      if ((unint64_t)(v13 + 2) > v21)
      {
        v66[0] = (uint64_t)"load command ";
        uint64_t v67 = a5;
        __int16 v68 = 2051;
        unsigned int v26 = " count in ";
LABEL_84:
        *(void *)&long long v69 = v66;
        *(void *)&long long v70 = v26;
        uint64_t v27 = 770;
        LOWORD(v71) = 770;
        if (*a6)
        {
          *(void *)&long long v72 = &v69;
          *(void *)&long long v73 = a6;
          LOWORD(v74) = 770;
          char v9 = 2;
          uint64_t v28 = (const char *)&v72;
        }
        else
        {
          long long v72 = v69;
          long long v73 = v70;
          uint64_t v74 = v71;
          char v9 = v71;
          if (v71 == 1)
          {
            int v14 = " extends past end of command";
            goto LABEL_9;
          }
          uint64_t v27 = *((void *)&v72 + 1);
          uint64_t v28 = (const char *)&v72;
          if (BYTE1(v74) == 1) {
            uint64_t v28 = (const char *)v72;
          }
          else {
            char v9 = 2;
          }
        }
        uint64_t v75 = v28;
        uint64_t v76 = v27;
        unsigned int v11 = " extends past end of command";
        goto LABEL_5;
      }
      unsigned int v24 = bswap32(v13[1]);
      if (((1 << v15) & 0x155800) == 0) {
        unsigned int v24 = v13[1];
      }
      if (v15 <= 0x14) {
        unsigned int v25 = v24;
      }
      else {
        unsigned int v25 = v13[1];
      }
      if ((int)v20 > 16777222)
      {
        if (v20 == 16777223)
        {
          switch((int)v22)
          {
            case 4:
              if (v25 != 42)
              {
                v57[0] = (uint64_t)"load command ";
                __int16 v59 = 259;
                __int16 v56 = 264;
                LODWORD(v54[0]) = a5;
                llvm::operator+(v57, v54, (uint64_t)v60);
                v52[0] = (uint64_t)" count not x86_THREAD_STATE64_COUNT for flavor number ";
                __int16 v53 = 259;
                llvm::operator+(v60, v52, (uint64_t)v63);
                __int16 v51 = 264;
                LODWORD(v50[0]) = v19;
                llvm::operator+(v63, v50, (uint64_t)v66);
                uint64_t v38 = " which is a x86_THREAD_STATE64 flavor in ";
LABEL_127:
                long long v48 = v38;
                __int16 v49 = 259;
                llvm::operator+(v66, (uint64_t *)&v48, (uint64_t)&v69);
                char v39 = 1;
                char v47 = 1;
                if (*a6)
                {
                  v45[0] = (uint64_t)a6;
                  char v39 = 3;
                }
                char v46 = v39;
                llvm::operator+((uint64_t *)&v69, v45, (uint64_t)&v72);
                long long v43 = " command";
                __int16 v44 = 259;
                long long v40 = (uint64_t *)&v43;
                goto LABEL_133;
              }
              v13 += 44;
              if ((unint64_t)v13 > v21)
              {
                v63[0] = (uint64_t)"load command ";
                __int16 v65 = 259;
                __int16 v62 = 264;
                LODWORD(v60[0]) = a5;
                llvm::operator+(v63, v60, (uint64_t)v66);
                uint64_t v41 = " x86_THREAD_STATE64 extends past end of command in ";
                goto LABEL_130;
              }
              break;
            case 6:
              if (v25 != 4)
              {
                v57[0] = (uint64_t)"load command ";
                __int16 v59 = 259;
                __int16 v56 = 264;
                LODWORD(v54[0]) = a5;
                llvm::operator+(v57, v54, (uint64_t)v60);
                v52[0] = (uint64_t)" count not x86_EXCEPTION_STATE64_COUNT for flavor number ";
                __int16 v53 = 259;
                llvm::operator+(v60, v52, (uint64_t)v63);
                __int16 v51 = 264;
                LODWORD(v50[0]) = v19;
                llvm::operator+(v63, v50, (uint64_t)v66);
                uint64_t v38 = " which is a x86_EXCEPTION_STATE64 flavor in ";
                goto LABEL_127;
              }
              v13 += 6;
              if ((unint64_t)v13 > v21)
              {
                v63[0] = (uint64_t)"load command ";
                __int16 v65 = 259;
                __int16 v62 = 264;
                LODWORD(v60[0]) = a5;
                llvm::operator+(v63, v60, (uint64_t)v66);
                uint64_t v41 = " x86_EXCEPTION_STATE64 extends past end of command in ";
                goto LABEL_130;
              }
              break;
            case 7:
              if (v25 != 44)
              {
                v57[0] = (uint64_t)"load command ";
                __int16 v59 = 259;
                __int16 v56 = 264;
                LODWORD(v54[0]) = a5;
                llvm::operator+(v57, v54, (uint64_t)v60);
                v52[0] = (uint64_t)" count not x86_THREAD_STATE_COUNT for flavor number ";
                __int16 v53 = 259;
                llvm::operator+(v60, v52, (uint64_t)v63);
                __int16 v51 = 264;
                LODWORD(v50[0]) = v19;
                llvm::operator+(v63, v50, (uint64_t)v66);
                uint64_t v38 = " which is a x86_THREAD_STATE flavor in ";
                goto LABEL_127;
              }
              v13 += 46;
              if ((unint64_t)v13 > v21)
              {
                v63[0] = (uint64_t)"load command ";
                __int16 v65 = 259;
                __int16 v62 = 264;
                LODWORD(v60[0]) = a5;
                llvm::operator+(v63, v60, (uint64_t)v66);
                uint64_t v41 = " x86_THREAD_STATE extends past end of command in ";
                goto LABEL_130;
              }
              break;
            case 8:
              if (v25 != 133)
              {
                v57[0] = (uint64_t)"load command ";
                __int16 v59 = 259;
                __int16 v56 = 264;
                LODWORD(v54[0]) = a5;
                llvm::operator+(v57, v54, (uint64_t)v60);
                v52[0] = (uint64_t)" count not x86_FLOAT_STATE_COUNT for flavor number ";
                __int16 v53 = 259;
                llvm::operator+(v60, v52, (uint64_t)v63);
                __int16 v51 = 264;
                LODWORD(v50[0]) = v19;
                llvm::operator+(v63, v50, (uint64_t)v66);
                uint64_t v38 = " which is a x86_FLOAT_STATE flavor in ";
                goto LABEL_127;
              }
              v13 += 135;
              if ((unint64_t)v13 > v21)
              {
                v63[0] = (uint64_t)"load command ";
                __int16 v65 = 259;
                __int16 v62 = 264;
                LODWORD(v60[0]) = a5;
                llvm::operator+(v63, v60, (uint64_t)v66);
                uint64_t v41 = " x86_FLOAT_STATE extends past end of command in ";
                goto LABEL_130;
              }
              break;
            case 9:
              if (v25 != 6)
              {
                v57[0] = (uint64_t)"load command ";
                __int16 v59 = 259;
                __int16 v56 = 264;
                LODWORD(v54[0]) = a5;
                llvm::operator+(v57, v54, (uint64_t)v60);
                v52[0] = (uint64_t)" count not x86_EXCEPTION_STATE_COUNT for flavor number ";
                __int16 v53 = 259;
                llvm::operator+(v60, v52, (uint64_t)v63);
                __int16 v51 = 264;
                LODWORD(v50[0]) = v19;
                llvm::operator+(v63, v50, (uint64_t)v66);
                uint64_t v38 = " which is a x86_EXCEPTION_STATE flavor in ";
                goto LABEL_127;
              }
              v13 += 8;
              if ((unint64_t)v13 > v21)
              {
                v63[0] = (uint64_t)"load command ";
                __int16 v65 = 259;
                __int16 v62 = 264;
                LODWORD(v60[0]) = a5;
                llvm::operator+(v63, v60, (uint64_t)v66);
                uint64_t v41 = " x86_EXCEPTION_STATE extends past end of command in ";
LABEL_130:
                v57[0] = (uint64_t)v41;
                __int16 v59 = 259;
                llvm::operator+(v66, v57, (uint64_t)&v69);
                char v42 = 1;
                HIBYTE(v56) = 1;
                if (*a6)
                {
                  v54[0] = (uint64_t)a6;
                  char v42 = 3;
                }
                LOBYTE(v56) = v42;
                llvm::operator+((uint64_t *)&v69, v54, (uint64_t)&v72);
                v52[0] = (uint64_t)" command";
                __int16 v53 = 259;
                long long v40 = v52;
LABEL_133:
                llvm::operator+((uint64_t *)&v72, v40, (uint64_t)&v75);
                goto LABEL_10;
              }
              break;
            default:
              goto LABEL_91;
          }
        }
        else
        {
          if (v20 != 16777228 && v20 != 33554444)
          {
LABEL_93:
            v60[0] = (uint64_t)"unknown cputype (";
            uint64_t v61 = v20;
            __int16 v62 = 2051;
            v63[0] = (uint64_t)v60;
            __int16 v64 = ") load command ";
            uint64_t v30 = 770;
            __int16 v65 = 770;
            v66[0] = (uint64_t)v63;
            uint64_t v67 = a5;
            __int16 v68 = 2050;
            *(void *)&long long v69 = v66;
            *(void *)&long long v70 = " for ";
            LOWORD(v71) = 770;
            if (*a6)
            {
              *(void *)&long long v72 = &v69;
              *(void *)&long long v73 = a6;
              LOWORD(v74) = 770;
              char v9 = 2;
              uint64_t v31 = (const char *)&v72;
            }
            else
            {
              long long v72 = v69;
              long long v73 = v70;
              uint64_t v74 = v71;
              char v9 = v71;
              if (v71 == 1)
              {
                int v14 = " command can't be checked";
                goto LABEL_9;
              }
              uint64_t v30 = *((void *)&v72 + 1);
              uint64_t v31 = (const char *)&v72;
              if (BYTE1(v74) == 1) {
                uint64_t v31 = (const char *)v72;
              }
              else {
                char v9 = 2;
              }
            }
            uint64_t v75 = v31;
            uint64_t v76 = v30;
            unsigned int v11 = " command can't be checked";
            goto LABEL_5;
          }
          if (v22 == 7)
          {
            if (v25 != 4)
            {
              v60[0] = (uint64_t)"load command ";
              uint64_t v61 = a5;
              __int16 v62 = 2051;
              v63[0] = (uint64_t)v60;
              __int16 v64 = " count not ARM_EXCEPTION_STATE64_COUNT for flavor number ";
              uint64_t v34 = 770;
              __int16 v65 = 770;
              v66[0] = (uint64_t)v63;
              uint64_t v67 = v19;
              __int16 v68 = 2050;
              __int16 v29 = " which is a ARM_EXCEPTION_STATE64 flavor in ";
              goto LABEL_103;
            }
            v13 += 6;
            if ((unint64_t)v13 > v21)
            {
              v66[0] = (uint64_t)"load command ";
              uint64_t v67 = a5;
              __int16 v68 = 2051;
              long long v33 = " ARM_EXCEPTION_STATE64 extends past end of command in ";
LABEL_108:
              *(void *)&long long v69 = v66;
              *(void *)&long long v70 = v33;
              uint64_t v34 = 770;
LABEL_109:
              LOWORD(v71) = 770;
              if (*a6)
              {
LABEL_110:
                *(void *)&long long v72 = &v69;
                *(void *)&long long v73 = a6;
                LOWORD(v74) = 770;
                char v9 = 2;
                long long v37 = (const char *)&v72;
                goto LABEL_111;
              }
              long long v72 = v69;
              long long v73 = v70;
              uint64_t v74 = v71;
              char v9 = v71;
              if (v71 != 1)
              {
                uint64_t v34 = *((void *)&v72 + 1);
                long long v36 = (const char *)v72;
                int v35 = BYTE1(v74);
LABEL_114:
                BOOL v16 = v35 == 1;
                long long v37 = (const char *)&v72;
                if (v16) {
                  long long v37 = v36;
                }
                else {
                  char v9 = 2;
                }
LABEL_111:
                uint64_t v75 = v37;
                uint64_t v76 = v34;
                unsigned int v11 = " command";
LABEL_5:
                long long v77 = v11;
                LOBYTE(v78) = v9;
                HIBYTE(v78) = 3;
LABEL_10:
                malformedError(v7, (uint64_t *)&v75);
              }
LABEL_117:
              int v14 = " command";
LABEL_9:
              uint64_t v75 = v14;
              __int16 v78 = 259;
              goto LABEL_10;
            }
          }
          else
          {
            if (v22 != 6) {
              goto LABEL_91;
            }
            if (v25 != 68)
            {
              v60[0] = (uint64_t)"load command ";
              uint64_t v61 = a5;
              __int16 v62 = 2051;
              v63[0] = (uint64_t)v60;
              __int16 v64 = " count not ARM_THREAD_STATE64_COUNT for flavor number ";
              uint64_t v34 = 770;
              __int16 v65 = 770;
              v66[0] = (uint64_t)v63;
              uint64_t v67 = v19;
              __int16 v68 = 2050;
              __int16 v29 = " which is a ARM_THREAD_STATE64 flavor in ";
              goto LABEL_103;
            }
            v13 += 70;
            if ((unint64_t)v13 > v21)
            {
              v66[0] = (uint64_t)"load command ";
              uint64_t v67 = a5;
              __int16 v68 = 2051;
              long long v33 = " ARM_THREAD_STATE64 extends past end of command in ";
              goto LABEL_108;
            }
          }
        }
      }
      else
      {
        switch(v20)
        {
          case 7:
            if (v22 != 1)
            {
              v54[0] = (uint64_t)"load command ";
              uint64_t v55 = a5;
              __int16 v56 = 2051;
              v57[0] = (uint64_t)v54;
              unint64_t v58 = " unknown flavor (";
              uint64_t v34 = 770;
              __int16 v59 = 770;
              v60[0] = (uint64_t)v57;
              uint64_t v61 = v22;
              __int16 v62 = 2050;
              v63[0] = (uint64_t)v60;
              __int16 v64 = ") for flavor number ";
              __int16 v65 = 770;
              v66[0] = (uint64_t)v63;
              uint64_t v67 = v19;
              __int16 v68 = 2050;
              __int16 v32 = " in ";
LABEL_101:
              *(void *)&long long v69 = v66;
              *(void *)&long long v70 = v32;
LABEL_105:
              LOWORD(v71) = 770;
              if (*a6) {
                goto LABEL_110;
              }
              long long v72 = v69;
              long long v73 = v70;
              uint64_t v74 = v71;
              char v9 = v71;
              if (v71 != 1)
              {
                int v35 = BYTE1(v74);
                uint64_t v34 = *((void *)&v72 + 1);
                long long v36 = (const char *)v72;
                goto LABEL_114;
              }
              goto LABEL_117;
            }
            if (v25 != 16)
            {
              v60[0] = (uint64_t)"load command ";
              uint64_t v61 = a5;
              __int16 v62 = 2051;
              v63[0] = (uint64_t)v60;
              __int16 v64 = " count not x86_THREAD_STATE32_COUNT for flavor number ";
              uint64_t v34 = 770;
              __int16 v65 = 770;
              v66[0] = (uint64_t)v63;
              uint64_t v67 = v19;
              __int16 v68 = 2050;
              __int16 v32 = " which is a x86_THREAD_STATE32 flavor in ";
              goto LABEL_101;
            }
            v13 += 18;
            if ((unint64_t)v13 > v21)
            {
              v66[0] = (uint64_t)"load command ";
              uint64_t v67 = a5;
              __int16 v68 = 2051;
              *(void *)&long long v69 = v66;
              *(void *)&long long v70 = " x86_THREAD_STATE32 extends past end of command in ";
              uint64_t v34 = 770;
              goto LABEL_105;
            }
            break;
          case 0xC:
            if (v22 != 1) {
              goto LABEL_91;
            }
            if (v25 != 17)
            {
              v60[0] = (uint64_t)"load command ";
              uint64_t v61 = a5;
              __int16 v62 = 2051;
              v63[0] = (uint64_t)v60;
              __int16 v64 = " count not ARM_THREAD_STATE_COUNT for flavor number ";
              uint64_t v34 = 770;
              __int16 v65 = 770;
              v66[0] = (uint64_t)v63;
              uint64_t v67 = v19;
              __int16 v68 = 2050;
              __int16 v29 = " which is a ARM_THREAD_STATE flavor in ";
              goto LABEL_103;
            }
            v13 += 19;
            if ((unint64_t)v13 > v21)
            {
              v66[0] = (uint64_t)"load command ";
              uint64_t v67 = a5;
              __int16 v68 = 2051;
              long long v33 = " ARM_THREAD_STATE extends past end of command in ";
              goto LABEL_108;
            }
            break;
          case 0x12:
            if (v22 != 1)
            {
LABEL_91:
              v54[0] = (uint64_t)"load command ";
              uint64_t v55 = a5;
              __int16 v56 = 2051;
              v57[0] = (uint64_t)v54;
              unint64_t v58 = " unknown flavor (";
              uint64_t v34 = 770;
              __int16 v59 = 770;
              v60[0] = (uint64_t)v57;
              uint64_t v61 = v22;
              __int16 v62 = 2050;
              v63[0] = (uint64_t)v60;
              __int16 v64 = ") for flavor number ";
              __int16 v65 = 770;
              v66[0] = (uint64_t)v63;
              uint64_t v67 = v19;
              __int16 v68 = 2050;
              __int16 v29 = " in ";
              goto LABEL_103;
            }
            if (v25 != 40)
            {
              v60[0] = (uint64_t)"load command ";
              uint64_t v61 = a5;
              __int16 v62 = 2051;
              v63[0] = (uint64_t)v60;
              __int16 v64 = " count not PPC_THREAD_STATE_COUNT for flavor number ";
              uint64_t v34 = 770;
              __int16 v65 = 770;
              v66[0] = (uint64_t)v63;
              uint64_t v67 = v19;
              __int16 v68 = 2050;
              __int16 v29 = " which is a PPC_THREAD_STATE flavor in ";
LABEL_103:
              *(void *)&long long v69 = v66;
              *(void *)&long long v70 = v29;
              goto LABEL_109;
            }
            v13 += 42;
            if ((unint64_t)v13 > v21)
            {
              v66[0] = (uint64_t)"load command ";
              uint64_t v67 = a5;
              __int16 v68 = 2051;
              long long v33 = " PPC_THREAD_STATE extends past end of command in ";
              goto LABEL_108;
            }
            break;
          default:
            goto LABEL_93;
        }
      }
      ++v19;
    }
    while ((unint64_t)v13 < v21);
  }
  *(void *)BOOL v7 = 0;
  return result;
}

void *checkTwoLevelHintsCommand(llvm::Twine *a1, uint64_t a2, unint64_t *a3, unsigned int a4, unint64_t *a5, uint64_t *a6)
{
  if (*((_DWORD *)a3 + 3) != 16)
  {
    unsigned int v26 = "load command ";
    uint64_t v27 = a4;
    __int16 v28 = 2051;
    char v9 = " LC_TWOLEVEL_HINTS has incorrect cmdsize";
LABEL_5:
    v29[0] = (uint64_t)&v26;
    v29[2] = (uint64_t)v9;
    __int16 v10 = 770;
    goto LABEL_13;
  }
  if (*a5)
  {
    uint64_t v8 = "more than one LC_TWOLEVEL_HINTS command";
LABEL_12:
    v29[0] = (uint64_t)v8;
    __int16 v10 = 259;
LABEL_13:
    __int16 v30 = v10;
    malformedError(a1, v29);
  }
  unint64_t v12 = *a3;
  unint64_t v14 = *(void *)(a2 + 16);
  unint64_t v13 = *(void *)(a2 + 24);
  BOOL v15 = *a3 < v14 || *a3 + 16 > v14 + v13;
  if (v15)
  {
    uint64_t v8 = "Structure read out-of-range";
    goto LABEL_12;
  }
  unsigned int v17 = *(_DWORD *)(v12 + 8);
  unsigned int v16 = *(_DWORD *)(v12 + 12);
  unsigned int v18 = *(_DWORD *)(a2 + 8);
  BOOL v15 = v18 > 0x14;
  int v19 = (1 << v18) & 0x155800;
  BOOL v20 = v15 || v19 == 0;
  unsigned int v21 = bswap32(v17);
  unsigned int v22 = bswap32(v16);
  if (v20)
  {
    unint64_t v23 = v17;
  }
  else
  {
    unsigned int v16 = v22;
    unint64_t v23 = v21;
  }
  if (v13 < v23)
  {
    unsigned int v24 = "offset field of LC_TWOLEVEL_HINTS command ";
LABEL_25:
    unsigned int v26 = v24;
    uint64_t v27 = a4;
    __int16 v28 = 2051;
    char v9 = " extends past the end of the file";
    goto LABEL_5;
  }
  if (v23 + 4 * v16 > v13)
  {
    unsigned int v24 = "offset field plus nhints times sizeof(struct twolevel_hint) field of LC_TWOLEVEL_HINTS command ";
    goto LABEL_25;
  }
  int8x16_t result = checkOverlappingElement(a1, a6, v23, 4 * v16, "two level hints");
  if (!*(void *)a1)
  {
    *a5 = *a3;
    *(void *)a1 = 0;
  }
  return result;
}

uint64_t getStruct<llvm::MachO::version_min_command>(uint64_t a1, _DWORD *a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  BOOL v3 = v2 > (unint64_t)a2 || (unint64_t)(a2 + 4) > v2 + *(void *)(a1 + 24);
  if (v3) {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  }
  LODWORD(v4) = *a2;
  LODWORD(v5) = a2[1];
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  BOOL v3 = v6 > 0x14;
  int v7 = (1 << v6) & 0x155800;
  BOOL v8 = v3 || v7 == 0;
  unsigned int v9 = bswap32(v4);
  unsigned int v10 = bswap32(v5);
  if (v8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = v9;
  }
  if (v8) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = v10;
  }
  return v4 | (v5 << 32);
}

double getStruct<llvm::MachO::symtab_command>@<D0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *(void *)(a1 + 16);
  BOOL v4 = v3 > (unint64_t)a2 || (unint64_t)a2 + 24 > v3 + *(void *)(a1 + 24);
  if (v4) {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  }
  long long v5 = *a2;
  *(_OWORD *)a3 = *a2;
  *(void *)(a3 + 16) = *((void *)a2 + 2);
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  BOOL v4 = v6 > 0x14;
  int v7 = (1 << v6) & 0x155800;
  if (!v4 && v7 != 0)
  {
    *(int8x16_t *)a3 = vrev32q_s8(*(int8x16_t *)a3);
    *(int8x8_t *)&long long v5 = vrev32_s8(*(int8x8_t *)(a3 + 16));
    *(void *)(a3 + 16) = v5;
  }
  return *(double *)&v5;
}

int8x16_t getStruct<llvm::MachO::dysymtab_command>@<Q0>(uint64_t a1@<X0>, int8x16_t *a2@<X1>, int8x16_t *a3@<X8>)
{
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 > (unint64_t)a2 || (unint64_t)&a2[5] > v3 + *(void *)(a1 + 24)) {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  }
  int8x16_t v5 = a2[3];
  a3[2] = a2[2];
  a3[3] = v5;
  a3[4] = a2[4];
  int8x16_t result = a2[1];
  *a3 = *a2;
  a3[1] = result;
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  if (v7 <= 0x14 && ((1 << v7) & 0x155800) != 0)
  {
    int8x16_t v8 = vrev32q_s8(a3[1]);
    *a3 = vrev32q_s8(*a3);
    a3[1] = v8;
    int8x16_t v9 = vrev32q_s8(a3[3]);
    a3[2] = vrev32q_s8(a3[2]);
    a3[3] = v9;
    int8x16_t result = vrev32q_s8(a3[4]);
    a3[4] = result;
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSymbol64TableEntry(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  BOOL v3 = v2 > (unint64_t)a2 || (unint64_t)(a2 + 2) > v2 + *(void *)(a1 + 24);
  if (v3) {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  }
  uint64_t v4 = *a2;
  unint64_t v5 = HIWORD(*a2);
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  BOOL v3 = v6 > 0x14;
  int v7 = (1 << v6) & 0x155800;
  BOOL v8 = v3 || v7 == 0;
  unsigned int v9 = bswap32(v4);
  unsigned int v10 = __rev16(v5);
  if (v8) {
    uint64_t v11 = v4;
  }
  else {
    uint64_t v11 = v9;
  }
  if (v8) {
    unint64_t v5 = v5;
  }
  else {
    unint64_t v5 = v10;
  }
  return v4 & 0xFFFF00000000 | (v5 << 48) | v11;
}

uint64_t llvm::object::MachOObjectFile::getSymbolTableEntry(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  BOOL v3 = v2 > (unint64_t)a2 || (unint64_t)a2 + 12 > v2 + *(void *)(a1 + 24);
  if (v3) {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  }
  uint64_t v4 = *a2;
  unint64_t v5 = HIWORD(*a2);
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  BOOL v3 = v6 > 0x14;
  int v7 = (1 << v6) & 0x155800;
  BOOL v8 = v3 || v7 == 0;
  unsigned int v9 = bswap32(v4);
  unsigned int v10 = __rev16(v5);
  if (v8) {
    uint64_t v11 = v4;
  }
  else {
    uint64_t v11 = v9;
  }
  if (v8) {
    unint64_t v5 = v5;
  }
  else {
    unint64_t v5 = v10;
  }
  return v4 & 0xFFFF00000000 | (v5 << 48) | v11;
}

uint64_t llvm::object::MachOObjectFile::moveSymbolNext(uint64_t a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v4 = 12;
  if (result) {
    uint64_t v4 = 16;
  }
  *a2 += v4;
  return result;
}

size_t llvm::object::MachOObjectFile::getSymbolName@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = (long long *)a1[34];
  if (v6)
  {
    v20[0] = 0;
    v20[1] = 0;
    p_unint64_t SymbolIndex = 0;
    getStruct<llvm::MachO::symtab_command>((uint64_t)a1, v6, (uint64_t)v20);
    unint64_t v7 = p_SymbolIndex;
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  size_t result = getSymbolTableEntryBase((uint64_t)a1, a2);
  if (result)
  {
    if (v9 >= v7) {
      unint64_t v11 = v7;
    }
    else {
      unint64_t v11 = v9;
    }
    unint64_t v12 = (const char *)(v8 + result + v11);
    unint64_t v13 = a1[2];
    if ((unint64_t)v12 < v13 || (unint64_t)v12 >= v13 + a1[3])
    {
      v16[0] = "bad string index: ";
      _OWORD v16[2] = result;
      __int16 v17 = 2051;
      v18[0] = v16;
      unsigned int v18[2] = " for symbol at index ";
      __int16 v19 = 770;
      unint64_t SymbolIndex = llvm::object::MachOObjectFile::getSymbolIndex(a1, (uint64_t)a2);
      v20[0] = (uint64_t)v18;
      p_unint64_t SymbolIndex = &SymbolIndex;
      __int16 v22 = 3074;
      malformedError((const llvm::Twine *)a3, v20);
    }
    if (v8) {
      size_t result = strlen(v12);
    }
    else {
      size_t result = 0;
    }
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = v12;
    *(void *)(a3 + 8) = result;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) &= ~1u;
  }
  return result;
}

uint64_t getSymbolTableEntryBase(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  BOOL v3 = v2 > (unint64_t)a2 || (unint64_t)(a2 + 1) > v2 + *(void *)(a1 + 24);
  if (v3) {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  }
  uint64_t v4 = *a2;
  unint64_t v5 = HIWORD(*a2);
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  BOOL v3 = v6 > 0x14;
  int v7 = (1 << v6) & 0x155800;
  BOOL v8 = v3 || v7 == 0;
  LODWORD(v9) = bswap32(v4);
  unsigned int v10 = __rev16(v5);
  if (v8) {
    uint64_t v9 = v4;
  }
  else {
    uint64_t v9 = v9;
  }
  if (v8) {
    unint64_t v5 = v5;
  }
  else {
    unint64_t v5 = v10;
  }
  return v4 & 0xFFFF00000000 | (v5 << 48) | v9;
}

unint64_t llvm::object::MachOObjectFile::getSymbolIndex(void *a1, uint64_t a2)
{
  BOOL v3 = (long long *)a1[34];
  if (!v3
    || (uint64_t v9 = 0,
        uint64_t v10 = 0,
        uint64_t v11 = 0,
        double v5 = getStruct<llvm::MachO::symtab_command>((uint64_t)a1, v3, (uint64_t)&v9),
        !a1[34]))
  {
    llvm::report_fatal_error((llvm *)"getSymbolIndex() called with no symbol table symbol", (const llvm::Twine *)1);
  }
  int v6 = (*(uint64_t (**)(void *, double))(*a1 + 64))(a1, v5);
  unint64_t v7 = 12;
  if (v6) {
    unint64_t v7 = 16;
  }
  return (a2 - (a1[2] + (unint64_t)v10)) / v7;
}

uint64_t getSectionFlags(void *a1, unsigned int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void *))(*a1 + 64))(a1))
  {
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
    getStruct<llvm::MachO::section_64>((uint64_t)a1, *(_OWORD **)(a1[10] + 8 * a2), (uint64_t)&v5);
    return v9;
  }
  else
  {
    LODWORD(v9) = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    getStruct<llvm::MachO::section>((uint64_t)a1, *(void *)(a1[10] + 8 * a2), (uint64_t)&v5);
    return DWORD2(v8);
  }
}

uint64_t llvm::object::MachOObjectFile::getNValue(uint64_t a1, uint64_t *a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    llvm::object::MachOObjectFile::getSymbol64TableEntry(a1, a2);
    return v4;
  }
  else
  {
    llvm::object::MachOObjectFile::getSymbolTableEntry(a1, a2);
    return v6;
  }
}

uint64_t llvm::object::MachOObjectFile::getSymbolAlignment(uint64_t a1, uint64_t *a2)
{
  _OWORD v5[2] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 40))(v5);
  if ((v5[0] & 0x10) != 0) {
    return (1 << (((unint64_t)getSymbolTableEntryBase(a1, a2) >> 56) & 0xF));
  }
  else {
    return 0;
  }
}

uint64_t llvm::object::MachOObjectFile::getSymbolType@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t result = getSymbolTableEntryBase(a1, a2);
  if ((result & 0xE000000000) != 0)
  {
    *(unsigned char *)(a3 + 8) &= ~1u;
    int v7 = 3;
LABEL_3:
    *(_DWORD *)a3 = v7;
    return result;
  }
  if ((BYTE4(result) & 0xE) != 0xE)
  {
    if ((result & 0xE00000000) == 0)
    {
      *(unsigned char *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 0;
      return result;
    }
    *(unsigned char *)(a3 + 8) &= ~1u;
    int v7 = 1;
    goto LABEL_3;
  }
  uint64_t result = (uint64_t)(*(void *(**)(void *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 128))(v14, a1, a2);
  if (v15)
  {
    uint64_t v13 = v14[0];
    v14[0] = 0;
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v13;
  }
  else
  {
    uint64_t v8 = v14[0];
    uint64_t v9 = v14[1];
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 360))(a1);
    if (v9 == v10 && v8 == result)
    {
      *(unsigned char *)(a3 + 8) &= ~1u;
      int v12 = 1;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 208))(v9, v8);
      if ((result & 1) != 0
        || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 216))(v9, v8), result))
      {
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v12 = 2;
      }
      else
      {
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v12 = 5;
      }
    }
    *(_DWORD *)a3 = v12;
  }
  if (v15)
  {
    uint64_t result = v14[0];
    v14[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

unint64_t llvm::object::MachOObjectFile::getSymbolFlags@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = getSymbolTableEntryBase(a1, a2);
  unint64_t v7 = result;
  unint64_t v8 = HIDWORD(result);
  int v9 = BYTE4(result) & 0xE;
  if ((result & 0xE000000000) != 0) {
    int v10 = (32 * ((BYTE4(result) & 0xE) == 10)) | 0x80;
  }
  else {
    int v10 = 32 * ((BYTE4(result) & 0xE) == 10);
  }
  if ((result & 0x100000000) != 0)
  {
    if ((result & 0xE00000000) != 0)
    {
      int v12 = v10 | 2;
    }
    else
    {
      unint64_t result = llvm::object::MachOObjectFile::getNValue(a1, a2);
      int v12 = v10 | 3;
      if (result) {
        int v12 = v10 | 0x12;
      }
    }
    int v13 = v12 | 0x40;
    int v14 = v12 | 0x200;
    if ((v8 & 0x10) != 0) {
      unsigned int v11 = v14;
    }
    else {
      unsigned int v11 = v13;
    }
  }
  else
  {
    unsigned int v11 = v10 & 0xFFFFFDFF | (((HIDWORD(result) >> 4) & 1) << 9);
  }
  int v15 = v11 | 4;
  if ((v7 & 0xC0000000000000) == 0) {
    int v15 = v11;
  }
  int v16 = v15 | (32 * HIWORD(v7)) & 0x100;
  if (v9 == 2) {
    v16 |= 8u;
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v16;
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSymbolSection@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = getSymbolTableEntryBase(a1, a2);
  if (BYTE5(result))
  {
    uint64_t v7 = BYTE5(result) - 1;
    if (*(_DWORD *)(a1 + 88) <= v7)
    {
      v10[0] = "bad section index: ";
      _OWORD v10[2] = BYTE5(result);
      __int16 v11 = 2307;
      v12[0] = v10;
      _OWORD v12[2] = " for symbol at index ";
      __int16 v13 = 770;
      unint64_t SymbolIndex = llvm::object::MachOObjectFile::getSymbolIndex((void *)a1, (uint64_t)a2);
      v14[0] = (uint64_t)v12;
      void v14[2] = (uint64_t)&SymbolIndex;
      __int16 v15 = 3074;
      malformedError((const llvm::Twine *)a3, v14);
    }
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = a1;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 360))(a1);
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v8;
  }
  return result;
}

void llvm::object::MachOObjectFile::moveSectionNext(uint64_t a1, _DWORD *a2)
{
}

size_t llvm::object::MachOObjectFile::getSectionName@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 8 * a2);
  if (*(unsigned char *)(v4 + 15)) {
    size_t result = 16;
  }
  else {
    size_t result = strlen(*(const char **)(*(void *)(a1 + 80) + 8 * a2));
  }
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = result;
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSectionAddress(void *a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void *))(*a1 + 64))(a1))
  {
    getStruct<llvm::MachO::section_64>((uint64_t)a1, *(_OWORD **)(a1[10] + 8 * a2), (uint64_t)v5);
    return v6;
  }
  else
  {
    getStruct<llvm::MachO::section>((uint64_t)a1, *(void *)(a1[10] + 8 * a2), (uint64_t)v5);
    return v6;
  }
}

uint64_t llvm::object::MachOObjectFile::getSectionIndex(uint64_t a1, unsigned int a2)
{
  return a2;
}

unint64_t llvm::object::MachOObjectFile::getSectionSize(void *a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void *))(*a1 + 64))(a1))
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v10 = 0u;
    getStruct<llvm::MachO::section_64>((uint64_t)a1, *(_OWORD **)(a1[10] + 8 * a2), (uint64_t)&v10);
    unint64_t result = *((void *)&v12 + 1);
    unsigned int v5 = v13;
    char v6 = v14;
  }
  else
  {
    LODWORD(v14) = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    getStruct<llvm::MachO::section>((uint64_t)a1, *(void *)(a1[10] + 8 * a2), (uint64_t)&v10);
    unint64_t result = DWORD1(v12);
    unsigned int v5 = DWORD2(v12);
    char v6 = BYTE8(v13);
  }
  if (v6 != 1 && v6 != 12)
  {
    unint64_t v8 = a1[3];
    unint64_t v9 = v8 - v5;
    if (v9 >= result) {
      unint64_t v9 = result;
    }
    if (v8 >= v5) {
      return v9;
    }
    else {
      return 0;
    }
  }
  return result;
}

void llvm::object::MachOObjectFile::getSectionContents(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void *))(*a1 + 64))(a1))
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    getStruct<llvm::MachO::section_64>((uint64_t)a1, *(_OWORD **)(a1[10] + 8 * a2), (uint64_t)&v11);
    LODWORD(v6) = v14;
    unint64_t v7 = *((void *)&v13 + 1);
  }
  else
  {
    LODWORD(v15) = 0;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    getStruct<llvm::MachO::section>((uint64_t)a1, *(void *)(a1[10] + 8 * a2), (uint64_t)&v11);
    unint64_t v7 = DWORD1(v13);
    LODWORD(v6) = DWORD2(v13);
  }
  unint64_t v8 = a1[3];
  if (v8 >= v6) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = a1[3];
  }
  uint64_t v9 = a1[2] + v6;
  unint64_t v10 = v8 - v6;
  if (v10 < v7) {
    unint64_t v7 = v10;
  }
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v7;
}

uint64_t llvm::object::MachOObjectFile::getSectionAlignment(void *a1, unsigned int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void *))(*a1 + 64))(a1))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v6 = 0u;
    getStruct<llvm::MachO::section_64>((uint64_t)a1, *(_OWORD **)(a1[10] + 8 * a2), (uint64_t)&v6);
    char v4 = BYTE4(v9);
  }
  else
  {
    LODWORD(v10) = 0;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    getStruct<llvm::MachO::section>((uint64_t)a1, *(void *)(a1[10] + 8 * a2), (uint64_t)&v6);
    char v4 = BYTE12(v8);
  }
  return 1 << v4;
}

uint64_t llvm::object::MachOObjectFile::isSectionCompressed()
{
  return 0;
}

uint64_t llvm::object::MachOObjectFile::isSectionText(void *a1, unsigned int a2)
{
  return getSectionFlags(a1, a2) >> 31;
}

BOOL llvm::object::MachOObjectFile::isSectionData(void *a1, unsigned int a2)
{
  int SectionFlags = getSectionFlags(a1, a2);
  BOOL v4 = SectionFlags != 1 && SectionFlags != 12;
  return SectionFlags >= 0 && v4;
}

BOOL llvm::object::MachOObjectFile::isSectionBSS(void *a1, unsigned int a2)
{
  int SectionFlags = getSectionFlags(a1, a2);
  BOOL v4 = SectionFlags == 1 || SectionFlags == 12;
  return SectionFlags >= 0 && v4;
}

uint64_t llvm::object::MachOObjectFile::isDebugSection(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  (*(void (**)(_DWORD **__return_ptr))(*(void *)a1 + 144))(&v7);
  if (v9)
  {
    long long v6 = v7;
    long long v7 = 0;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v6);
    if (v6) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    if (v9)
    {
      uint64_t result = (uint64_t)v7;
      long long v7 = 0;
      if (!result) {
        return result;
      }
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    }
    return 0;
  }
  if (v8 < 7) {
    return 0;
  }
  if (*v7 == 1701076831 && *(_DWORD *)((char *)v7 + 3) == 1735746149) {
    return 1;
  }
  if (v8 >= 8)
  {
    if (*(void *)v7 == 0x67756265647A5F5FLL) {
      return 1;
    }
    if (*v7 == 1885429599 && *(_DWORD *)((char *)v7 + 3) == 1701605488) {
      return 1;
    }
    if (v8 == 11)
    {
      if (*(void *)v7 != 0x6E695F6264675F5FLL || *(void *)((char *)v7 + 3) != 0x7865646E695F6264) {
        return *(void *)v7 == 0x5F74666977735F5FLL && *(void *)((char *)v7 + 3) == 0x7473615F74666977;
      }
      return 1;
    }
    return 0;
  }
  return *v7 == 1885429599 && *(_DWORD *)((char *)v7 + 3) == 1701605488;
}

BOOL llvm::object::MachOObjectFile::isSectionVirtual(void *a1, unsigned int a2)
{
  int SectionFlags = getSectionFlags(a1, a2);
  return SectionFlags == 1 || SectionFlags == 12;
}

uint64_t llvm::object::MachOObjectFile::isSectionBitcode(void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1[10] + 8 * a2);
  uint64_t v5 = v4 + 16;
  if (*(unsigned char *)(v4 + 31)) {
    size_t v6 = 16;
  }
  else {
    size_t v6 = strlen((const char *)v5);
  }
  (*(void (**)(void *__return_ptr, void *, uint64_t))(*a1 + 144))(v12, a1, a2);
  if (v13)
  {
    uint64_t result = v12[0];
    v12[0] = 0;
    if (!result) {
      return result;
    }
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    return 0;
  }
  if (v6 != 6) {
    return 0;
  }
  BOOL v7 = *(_DWORD *)v5 == 1280073567 && *(_WORD *)(v5 + 4) == 19798;
  BOOL v8 = !v7;
  if (v8 || v12[1] != 9) {
    return 0;
  }
  return *(void *)v12[0] == 0x646F637469625F5FLL && *(unsigned char *)(v12[0] + 8) == 101;
}

BOOL llvm::object::MachOObjectFile::isSectionStripped(void *a1, unsigned int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void *))(*a1 + 64))(a1))
  {
    getStruct<llvm::MachO::section_64>((uint64_t)a1, *(_OWORD **)(a1[10] + 8 * a2), (uint64_t)v6);
    int v4 = v8;
  }
  else
  {
    getStruct<llvm::MachO::section>((uint64_t)a1, *(void *)(a1[10] + 8 * a2), (uint64_t)v6);
    int v4 = v7;
  }
  return v4 == 0;
}

uint64_t llvm::object::MachOObjectFile::section_rel_begin(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t llvm::object::MachOObjectFile::section_rel_end(void *a1, unsigned int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  if ((*(unsigned int (**)(void *))(*a1 + 64))(a1))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v6 = 0u;
    getStruct<llvm::MachO::section_64>((uint64_t)a1, *(_OWORD **)(a1[10] + 8 * v3), (uint64_t)&v6);
    uint64_t v4 = HIDWORD(v9);
  }
  else
  {
    LODWORD(v10) = 0;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    getStruct<llvm::MachO::section>((uint64_t)a1, *(void *)(a1[10] + 8 * v3), (uint64_t)&v6);
    uint64_t v4 = DWORD1(v9);
  }
  return v3 | (v4 << 32);
}

void llvm::object::MachOObjectFile::moveRelocationNext(uint64_t a1, uint64_t a2)
{
}

uint64_t llvm::object::MachOObjectFile::getRelocationOffset(uint64_t a1, unint64_t a2)
{
  int Relocation = llvm::object::MachOObjectFile::getRelocation(a1, a2);
  BOOL v4 = Relocation >= 0 || *(_DWORD *)(a1 + 52) == 16777223;
  unsigned int v5 = Relocation & 0xFFFFFF;
  if (v4) {
    return Relocation;
  }
  return v5;
}

uint64_t llvm::object::MachOObjectFile::getRelocation(uint64_t a1, unint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 60) == 1)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1))
    {
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      int8x16_t v19 = 0u;
      getStruct<llvm::MachO::section_64>(a1, *(_OWORD **)(*(void *)(a1 + 80) + 8 * a2), (uint64_t)&v19);
      unsigned int v4 = DWORD2(v22);
    }
    else
    {
      LODWORD(v23) = 0;
      long long v21 = 0u;
      long long v22 = 0u;
      int8x16_t v19 = 0u;
      long long v20 = 0u;
      getStruct<llvm::MachO::section>(a1, *(void *)(*(void *)(a1 + 80) + 8 * a2), (uint64_t)&v19);
      unsigned int v4 = v22;
    }
  }
  else
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    int8x16_t v19 = 0u;
    unsigned int v5 = *(int8x16_t **)(a1 + 280);
    if (v5)
    {
      getStruct<llvm::MachO::dysymtab_command>(a1, v5, &v19);
      unsigned int v4 = v23;
      unsigned int v6 = DWORD2(v23);
    }
    else
    {
      unsigned int v6 = 0;
      unsigned int v4 = 0;
    }
    if (a2) {
      unsigned int v4 = v6;
    }
  }
  unint64_t v7 = *(void *)(a1 + 16);
  long long v8 = (unsigned int *)(v7 + v4 + 8 * HIDWORD(a2));
  if ((unint64_t)v8 < v7 || (unint64_t)(v8 + 2) > v7 + *(void *)(a1 + 24)) {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  }
  unsigned int v10 = *v8;
  unsigned int v11 = v8[1];
  unsigned int v12 = *(_DWORD *)(a1 + 8);
  unsigned int v13 = bswap32(v10);
  unsigned int v14 = bswap32(v11);
  if (((1 << v12) & 0x155800) == 0)
  {
    unsigned int v13 = v10;
    unsigned int v14 = v11;
  }
  BOOL v15 = v12 > 0x14;
  if (v12 <= 0x14) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = v10;
  }
  if (v15) {
    uint64_t v17 = v11;
  }
  else {
    uint64_t v17 = v14;
  }
  return v16 | (v17 << 32);
}

uint64_t llvm::object::MachOObjectFile::getRelocationSymbol(uint64_t a1, unint64_t a2)
{
  uint64_t Relocation = llvm::object::MachOObjectFile::getRelocation(a1, a2);
  if (*(_DWORD *)(a1 + 52) != 16777223 && (int)Relocation < 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  }
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  if (v6 > 0x14 || ((1 << v6) & 0x155800) == 0) {
    int v8 = HIDWORD(Relocation) & 0xFFFFFF;
  }
  else {
    int v8 = HIDWORD(Relocation) >> 8;
  }
  if (v6 > 0x14 || ((1 << v6) & 0x155800) == 0)
  {
    if ((HIDWORD(Relocation) >> 27)) {
      goto LABEL_15;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  }
  if ((Relocation & 0x1000000000) == 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  }
LABEL_15:
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  long long v9 = *(long long **)(a1 + 272);
  if (v9)
  {
    v4.n128_f64[0] = getStruct<llvm::MachO::symtab_command>(a1, v9, (uint64_t)&v13);
    int v10 = v14;
  }
  else
  {
    int v10 = 0;
  }
  if ((*(unsigned int (**)(uint64_t, __n128))(*(void *)a1 + 64))(a1, v4)) {
    int v11 = 16;
  }
  else {
    int v11 = 12;
  }
  return *(void *)(a1 + 16) + (v10 + v11 * v8);
}

uint64_t llvm::object::MachOObjectFile::getRelocationType(uint64_t a1, unint64_t a2)
{
  uint64_t Relocation = llvm::object::MachOObjectFile::getRelocation(a1, a2);
  if (*(_DWORD *)(a1 + 52) == 16777223 || (Relocation & 0x80000000) == 0)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 8);
    BOOL v6 = v5 > 0x14;
    int v7 = (1 << v5) & 0x155800;
    BOOL v8 = v6 || v7 == 0;
    unsigned int v4 = HIDWORD(Relocation) >> 28;
    if (!v8) {
      return BYTE4(Relocation) & 0xF;
    }
  }
  else
  {
    return BYTE3(Relocation) & 0xF;
  }
  return v4;
}

void *llvm::object::MachOObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 392))(a1);
  size_t v7 = 0;
  if (v6 <= 20)
  {
    BOOL v8 = 0;
    switch(v6)
    {
      case 0:
        goto LABEL_15;
      case 1:
        if (v5 > 9) {
          goto LABEL_15;
        }
        long long v9 = llvm::object::MachOObjectFile::getRelocationTypeName(llvm::object::DataRefImpl,llvm::SmallVectorImpl<char> &)const::Table;
        goto LABEL_17;
      case 2:
      case 4:
        goto LABEL_18;
      case 3:
      case 5:
        if (v5 > 0xB) {
          goto LABEL_15;
        }
        long long v9 = llvm::object::MachOObjectFile::getRelocationTypeName(llvm::object::DataRefImpl,llvm::SmallVectorImpl<char> &)const::Table;
        goto LABEL_17;
      default:
        BOOL v8 = 0;
        goto LABEL_18;
    }
  }
  if (v6 == 21)
  {
    if (v5 <= 0xF)
    {
      long long v9 = llvm::object::MachOObjectFile::getRelocationTypeName(llvm::object::DataRefImpl,llvm::SmallVectorImpl<char> &)const::Table;
      goto LABEL_17;
    }
LABEL_15:
    BOOL v8 = "Unknown";
    size_t v7 = 7;
    goto LABEL_18;
  }
  if (v6 == 38)
  {
    if (v5 <= 9)
    {
      long long v9 = llvm::object::MachOObjectFile::getRelocationTypeName(llvm::object::DataRefImpl,llvm::SmallVectorImpl<char> &)const::Table;
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  BOOL v8 = 0;
  if (v6 != 37) {
    goto LABEL_18;
  }
  if (v5 > 5) {
    goto LABEL_15;
  }
  long long v9 = llvm::object::MachOObjectFile::getRelocationTypeName(llvm::object::DataRefImpl,llvm::SmallVectorImpl<char> &)const::Table;
LABEL_17:
  BOOL v8 = v9[v5];
  size_t v7 = strlen(v8);
LABEL_18:
  return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v8, &v8[v7]);
}

uint64_t llvm::object::MachOObjectFile::symbol_begin(llvm::object::MachOObjectFile *this)
{
  unint64_t v2 = (long long *)*((void *)this + 34);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  getStruct<llvm::MachO::symtab_command>((uint64_t)this, v2, (uint64_t)&v5);
  if (!*((void *)this + 34) || HIDWORD(v6) == 0) {
    return 0;
  }
  else {
    return llvm::object::MachOObjectFile::getSymbolByIndex(this, 0);
  }
}

uint64_t llvm::object::MachOObjectFile::getSymbolByIndex(llvm::object::MachOObjectFile *this, unsigned int a2)
{
  uint64_t v3 = (long long *)*((void *)this + 34);
  if (!v3
    || ((uint64_t v9 = 0,
         uint64_t v10 = 0,
         uint64_t v11 = 0,
         v5.n128_f64[0] = getStruct<llvm::MachO::symtab_command>((uint64_t)this, v3, (uint64_t)&v9),
         *((void *)this + 34))
      ? (BOOL v6 = HIDWORD(v10) > a2)
      : (BOOL v6 = 0),
        !v6))
  {
    llvm::report_fatal_error((llvm *)"Requested symbol index is out of range.", (const llvm::Twine *)1);
  }
  if ((*(unsigned int (**)(llvm::object::MachOObjectFile *, __n128))(*(void *)this + 64))(this, v5)) {
    int v7 = 16;
  }
  else {
    int v7 = 12;
  }
  return *((void *)this + 2) + v10 + v7 * a2;
}

uint64_t llvm::object::MachOObjectFile::symbol_end(llvm::object::MachOObjectFile *this)
{
  unint64_t v2 = (long long *)*((void *)this + 34);
  if (!v2) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v3.n128_f64[0] = getStruct<llvm::MachO::symtab_command>((uint64_t)this, v2, (uint64_t)&v9);
  int v4 = HIDWORD(v10);
  if (!*((void *)this + 34) || HIDWORD(v10) == 0) {
    return 0;
  }
  if ((*(unsigned int (**)(llvm::object::MachOObjectFile *, __n128))(*(void *)this + 64))(this, v3)) {
    int v8 = 16;
  }
  else {
    int v8 = 12;
  }
  return *((void *)this + 2) + (v10 + v8 * v4);
}

uint64_t llvm::object::MachOObjectFile::section_begin(llvm::object::MachOObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::MachOObjectFile::section_end(llvm::object::MachOObjectFile *this)
{
  return *((unsigned int *)this + 22);
}

uint64_t llvm::object::MachOObjectFile::getBytesInAddress(llvm::object::MachOObjectFile *this)
{
  if ((*(unsigned int (**)(llvm::object::MachOObjectFile *))(*(void *)this + 64))(this)) {
    return 8;
  }
  else {
    return 4;
  }
}

const char *llvm::object::MachOObjectFile::getFileFormatName(llvm::object::MachOObjectFile *this)
{
  int v1 = *((_DWORD *)this + 13);
  if (((*(uint64_t (**)(llvm::object::MachOObjectFile *))(*(void *)this + 64))(this) & 1) == 0)
  {
    if (v1 > 17)
    {
      if (v1 == 18) {
        return "Mach-O 32-bit ppc";
      }
      if (v1 == 33554444) {
        return "Mach-O arm64 (ILP32)";
      }
    }
    else
    {
      if (v1 == 7) {
        return "Mach-O 32-bit i386";
      }
      if (v1 == 12) {
        return "Mach-O arm";
      }
    }
    return "Mach-O 32-bit unknown";
  }
  if (v1 > 16777233)
  {
    if (v1 == 16777234) {
      return "Mach-O 64-bit ppc64";
    }
    if (v1 != 33554444) {
      return "Mach-O 64-bit unknown";
    }
    return "Mach-O arm64 (ILP32)";
  }
  if (v1 != 16777223)
  {
    if (v1 == 16777228) {
      return "Mach-O arm64";
    }
    return "Mach-O 64-bit unknown";
  }
  return "Mach-O 64-bit x86-64";
}

uint64_t llvm::object::MachOObjectFile::getArch(llvm::object::MachOObjectFile *this)
{
  if ((int)this > 16777222)
  {
    if ((int)this > 16777233)
    {
      if (this == 16777234) {
        return 23;
      }
      if (this == 33554444) {
        return 5;
      }
    }
    else
    {
      if (this == 16777223) {
        return 38;
      }
      if (this == 16777228) {
        return 3;
      }
    }
    return 0;
  }
  if (this == 7) {
    return 37;
  }
  if (this != 12)
  {
    if (this == 18) {
      return 21;
    }
    return 0;
  }
  return 1;
}

{
  return llvm::object::MachOObjectFile::getArch((llvm::object::MachOObjectFile *)*((unsigned int *)this + 13));
}

std::string *llvm::object::MachOObjectFile::getArchTriple@<X0>(std::string *this@<X0>, const char **a2@<X3>, int a3@<W1>, void *a4@<X2>, uint64_t a5@<X8>)
{
  if (a4) {
    *a4 = 0;
  }
  if (a2) {
    *a2 = 0;
  }
  if ((int)this <= 16777222)
  {
    if (this == 7)
    {
      if ((a3 & 0xFFFFFF) == 3)
      {
        if (a2) {
          *a2 = "i386";
        }
        BOOL v6 = "i386-apple-darwin";
        goto LABEL_94;
      }
    }
    else
    {
      if (this == 12)
      {
        switch(a3 & 0xFFFFFF)
        {
          case 5:
            if (a2) {
              *a2 = "armv4t";
            }
            BOOL v6 = "armv4t-apple-darwin";
            goto LABEL_94;
          case 6:
            if (a2) {
              *a2 = "armv6";
            }
            BOOL v6 = "armv6-apple-darwin";
            goto LABEL_94;
          case 7:
            if (a2) {
              *a2 = "armv5e";
            }
            BOOL v6 = "armv5e-apple-darwin";
            goto LABEL_94;
          case 8:
            if (a2) {
              *a2 = "xscale";
            }
            BOOL v6 = "xscale-apple-darwin";
            goto LABEL_94;
          case 9:
            if (a2) {
              *a2 = "armv7";
            }
            BOOL v6 = "armv7-apple-darwin";
            goto LABEL_94;
          case 0xB:
            if (a4) {
              *a4 = "cortex-a7";
            }
            if (a2) {
              *a2 = "armv7s";
            }
            BOOL v6 = "armv7s-apple-darwin";
            goto LABEL_94;
          case 0xC:
            if (a4) {
              *a4 = "cortex-a7";
            }
            if (a2) {
              *a2 = "armv7k";
            }
            BOOL v6 = "armv7k-apple-darwin";
            goto LABEL_94;
          case 0xE:
            if (a4) {
              *a4 = "cortex-m0";
            }
            if (a2) {
              *a2 = "armv6m";
            }
            BOOL v6 = "armv6m-apple-darwin";
            goto LABEL_94;
          case 0xF:
            if (a4) {
              *a4 = "cortex-m3";
            }
            if (a2) {
              *a2 = "armv7m";
            }
            BOOL v6 = "thumbv7m-apple-darwin";
            goto LABEL_94;
          case 0x10:
            if (a4) {
              *a4 = "cortex-m4";
            }
            if (a2) {
              *a2 = "armv7em";
            }
            BOOL v6 = "thumbv7em-apple-darwin";
            goto LABEL_94;
          default:
            goto LABEL_45;
        }
      }
      if (this == 18 && (a3 & 0xFFFFFF) == 0)
      {
        if (a2) {
          *a2 = "ppc";
        }
        BOOL v6 = "ppc-apple-darwin";
        goto LABEL_94;
      }
    }
    goto LABEL_45;
  }
  if ((int)this > 16777233)
  {
    if (this == 16777234)
    {
      if ((a3 & 0xFFFFFF) == 0)
      {
        if (a2) {
          *a2 = "ppc64";
        }
        BOOL v6 = "ppc64-apple-darwin";
        goto LABEL_94;
      }
    }
    else if (this == 33554444 && (a3 & 0xFFFFFF) == 1)
    {
      if (a4) {
        *a4 = "apple-s4";
      }
      if (a2) {
        *a2 = "arm64_32";
      }
      BOOL v6 = "arm64_32-apple-darwin";
      goto LABEL_94;
    }
    goto LABEL_45;
  }
  if (this == 16777223)
  {
    if ((a3 & 0xFFFFFF) == 8)
    {
      if (a2) {
        *a2 = "x86_64h";
      }
      BOOL v6 = "x86_64h-apple-darwin";
      goto LABEL_94;
    }
    if ((a3 & 0xFFFFFF) == 3)
    {
      if (a2) {
        *a2 = "x86_64";
      }
      BOOL v6 = "x86_64-apple-darwin";
      goto LABEL_94;
    }
    goto LABEL_45;
  }
  if (this != 16777228) {
    goto LABEL_45;
  }
  if ((a3 & 0xFFFFFF) == 2)
  {
    if (a4) {
      *a4 = "apple-a12";
    }
    if (a2) {
      *a2 = "arm64e";
    }
    BOOL v6 = "arm64e-apple-darwin";
    goto LABEL_94;
  }
  if ((a3 & 0xFFFFFF) != 0)
  {
LABEL_45:
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    return this;
  }
  if (a4) {
    *a4 = "cyclone";
  }
  if (a2) {
    *a2 = "arm64";
  }
  BOOL v6 = "arm64-apple-darwin";
LABEL_94:
  int v7 = v6;
  __int16 v8 = 259;
  return llvm::Triple::Triple((std::string *)a5, (const llvm::Twine *)&v7);
}

int8x16_t getStruct<llvm::MachO::section>@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 > a2 || a2 + 68 > v3 + *(void *)(a1 + 24)) {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a3 + 48) = v5;
  *(_DWORD *)(a3 + 64) = *(_DWORD *)(a2 + 64);
  int8x16_t result = *(int8x16_t *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(int8x16_t *)(a3 + 16) = result;
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  if (v7 <= 0x14 && ((1 << v7) & 0x155800) != 0)
  {
    int8x16_t result = vrev32q_s8(*(int8x16_t *)(a3 + 32));
    int8x16_t v8 = vrev32q_s8(*(int8x16_t *)(a3 + 48));
    *(int8x16_t *)(a3 + 32) = result;
    *(int8x16_t *)(a3 + 48) = v8;
    *(_DWORD *)(a3 + 64) = bswap32(*(_DWORD *)(a3 + 64));
  }
  return result;
}

double getStruct<llvm::MachO::section_64>@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 > (unint64_t)a2 || (unint64_t)(a2 + 5) > v3 + *(void *)(a1 + 24)) {
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  }
  long long v5 = a2[3];
  *(_OWORD *)(a3 + 32) = a2[2];
  *(_OWORD *)(a3 + 48) = v5;
  *(_OWORD *)(a3 + 64) = a2[4];
  long long v6 = a2[1];
  *(_OWORD *)a3 = *a2;
  *(_OWORD *)(a3 + 16) = v6;
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  if (v7 <= 0x14 && ((1 << v7) & 0x155800) != 0)
  {
    int8x16_t v8 = vrev32q_s8(*(int8x16_t *)(a3 + 48));
    *(int8x16_t *)(a3 + 32) = vrev64q_s8(*(int8x16_t *)(a3 + 32));
    *(int8x16_t *)(a3 + 48) = v8;
    *(int8x8_t *)&long long v6 = vrev32_s8(*(int8x8_t *)(a3 + 64));
    *(void *)(a3 + 64) = v6;
    *(_DWORD *)(a3 + 72) = bswap32(*(_DWORD *)(a3 + 72));
  }
  return *(double *)&v6;
}

uint64_t getStructOrErr<llvm::MachO::section_64>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(void *)(a2 + 16);
  BOOL v4 = v3 > a3 || a3 + 80 > v3 + *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v14 = "Structure read out-of-range";
    __int16 v15 = 259;
    malformedError((const llvm::Twine *)&v16, (uint64_t *)&v14);
  }
  int8x16_t v6 = *(int8x16_t *)(a3 + 32);
  int8x16_t v5 = *(int8x16_t *)(a3 + 48);
  int8x8_t v7 = *(int8x8_t *)(a3 + 64);
  unsigned int v9 = *(_DWORD *)(a3 + 72);
  int v8 = *(_DWORD *)(a3 + 76);
  unsigned int v10 = *(_DWORD *)(a2 + 8);
  BOOL v4 = v10 > 0x14;
  int v11 = (1 << v10) & 0x155800;
  if (!v4 && v11 != 0)
  {
    int8x16_t v6 = vrev64q_s8(v6);
    int8x16_t v5 = vrev32q_s8(v5);
    int8x8_t v7 = vrev32_s8(v7);
    unsigned int v9 = bswap32(v9);
  }
  *(unsigned char *)(result + 80) &= ~1u;
  long long v13 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)int8x16_t result = *(_OWORD *)a3;
  *(_OWORD *)(result + 16) = v13;
  *(int8x16_t *)(result + 32) = v6;
  *(int8x16_t *)(result + 48) = v5;
  *(int8x8_t *)(result + 64) = v7;
  *(_DWORD *)(result + 72) = v9;
  *(_DWORD *)(result + 76) = v8;
  return result;
}

uint64_t getStructOrErr<llvm::MachO::section>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(void *)(a2 + 16);
  BOOL v4 = v3 > a3 || a3 + 68 > v3 + *(void *)(a2 + 24);
  if (v4)
  {
    unsigned int v12 = "Structure read out-of-range";
    __int16 v13 = 259;
    malformedError((const llvm::Twine *)&v14, (uint64_t *)&v12);
  }
  int8x16_t v5 = *(int8x16_t *)(a3 + 32);
  int8x16_t v6 = *(int8x16_t *)(a3 + 48);
  unsigned int v7 = *(_DWORD *)(a3 + 64);
  unsigned int v8 = *(_DWORD *)(a2 + 8);
  BOOL v4 = v8 > 0x14;
  int v9 = (1 << v8) & 0x155800;
  if (!v4 && v9 != 0)
  {
    int8x16_t v5 = vrev32q_s8(v5);
    int8x16_t v6 = vrev32q_s8(v6);
    unsigned int v7 = bswap32(v7);
  }
  *(unsigned char *)(result + 72) &= ~1u;
  long long v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)int8x16_t result = *(_OWORD *)a3;
  *(_OWORD *)(result + 16) = v11;
  *(int8x16_t *)(result + 32) = v5;
  *(int8x16_t *)(result + 48) = v6;
  *(_DWORD *)(result + 64) = v7;
  return result;
}

BOOL llvm::object::MachOObjectFile::is64Bit(llvm::object::MachOObjectFile *this)
{
  return (*((_DWORD *)this + 2) - 19) < 2;
}

BOOL llvm::object::MachOObjectFile::isRelocatableObject(llvm::object::MachOObjectFile *this)
{
  return *((_DWORD *)this + 15) == 1;
}

void llvm::object::ObjectFile::createMachOObjectFile(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 4) {
    size_t v2 = 4;
  }
  else {
    size_t v2 = *(void *)(a1 + 8);
  }
  if (v1 < 4
    || (unint64_t v3 = *(const void **)a1, memcmp(*(const void **)a1, "\xFE\xED\xFA\xCE", v2))
    && memcmp(v3, &str_348, v2)
    && memcmp(v3, &str_349, v2)
    && memcmp(v3, &str_350, v2))
  {
    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>();
  }
  llvm::object::MachOObjectFile::create();
}

const char *llvm::object::MachOObjectFile::mapDebugSectionName(uint64_t a1, void *a2, uint64_t a3)
{
  int8x16_t result = (const char *)a2;
  if (a3 == 14 && *a2 == 0x74735F6775626564 && *(void *)((char *)a2 + 6) == 0x7366666F5F727473) {
    return "debug_str_offsets";
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::mapReflectionSectionNameToEnumValue(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3 == 14)
  {
    if (*a2 == 0x3574666977735F5FLL && *(void *)((char *)a2 + 6) == 0x6F746F72705F3574) {
      return 6;
    }
    return 10;
  }
  if (a3 == 15)
  {
    if (*a2 == 0x3574666977735F5FLL && *(void *)((char *)a2 + 7) == 0x736F746F72705F35) {
      return 7;
    }
    if (*a2 == 0x3574666977735F5FLL && *(void *)((char *)a2 + 7) == 0x6D756E65706D5F35) {
      return 9;
    }
    return 10;
  }
  if (a3 != 16) {
    return 10;
  }
  if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x646D646C6569665FLL) {
    return 0;
  }
  if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x7974636F7373615FLL) {
    return 1;
  }
  if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x6E69746C6975625FLL) {
    return 2;
  }
  if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x657275747061635FLL) {
    return 3;
  }
  if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x666572657079745FLL) {
    return 4;
  }
  if (*a2 != 0x3574666977735F5FLL || a2[1] != 0x7274736C6665725FLL)
  {
    if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x73636E756663615FLL) {
      return 8;
    }
    return 10;
  }
  return 5;
}

void llvm::object::MachOObjectFile::~MachOObjectFile(llvm::object::MachOObjectFile *this)
{
  llvm::object::MachOObjectFile::~MachOObjectFile(this);
  JUMPOUT(0x263E500B0);
}

{
  void **v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  *(void *)this = &unk_270DC0BA0;
  size_t v2 = (void **)*((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v2)
  {
    if (*v2 != v2 + 2) {
      free(*v2);
    }
    MEMORY[0x263E500B0](v2, 0x1080C40E09A0471);
  }
  unint64_t v3 = (char *)*((void *)this + 29);
  if (v3 != (char *)this + 248) {
    free(v3);
  }
  BOOL v4 = (char *)*((void *)this + 26);
  if (v4 != (char *)this + 224) {
    free(v4);
  }
  int8x16_t v5 = (char *)*((void *)this + 16);
  if (v5 != (char *)this + 144) {
    free(v5);
  }
  int8x16_t v6 = (char *)*((void *)this + 13);
  if (v6 != (char *)this + 120) {
    free(v6);
  }
  unsigned int v7 = (char *)*((void *)this + 10);
  if (v7 != (char *)this + 96) {
    free(v7);
  }
}

void llvm::object::MachOObjectFile::getFeatures(uint64_t a1@<X8>)
{
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  llvm::SubtargetFeatures::Split((char **)&v3, (uint64_t)"", 0);
  *(unsigned char *)(a1 + 24) &= ~1u;
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  int8x16_t v5 = (void **)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v5);
}

uint64_t getLoadCommandInfo(uint64_t result, const char *a2, _DWORD *a3, unsigned int a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  if (v4 > (unint64_t)a3 || (unint64_t v5 = v4 + *((void *)a2 + 3), (unint64_t)(a3 + 2) > v5))
  {
    v19[0] = (uint64_t)"Structure read out-of-range";
    __int16 v21 = 259;
    malformedError((const llvm::Twine *)result, v19);
  }
  LODWORD(v7) = *a3;
  LODWORD(v6) = a3[1];
  unsigned int v8 = *((_DWORD *)a2 + 2);
  BOOL v9 = v8 > 0x14;
  int v10 = (1 << v8) & 0x155800;
  BOOL v11 = v9 || v10 == 0;
  unsigned int v12 = bswap32(v7);
  unsigned int v13 = bswap32(v6);
  if (v11) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = v13;
  }
  if (v11) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = v12;
  }
  if ((unint64_t)a3 + v6 > v5)
  {
    v15[0] = "load command ";
    uint64_t v16 = a4;
    __int16 v17 = 2051;
    v19[0] = (uint64_t)v15;
    long long v20 = " extends past end of file";
    __int16 v21 = 770;
    malformedError((const llvm::Twine *)&v18, v19);
  }
  if (v6 <= 7)
  {
    v15[0] = "load command ";
    uint64_t v16 = a4;
    __int16 v17 = 2051;
    v19[0] = (uint64_t)v15;
    long long v20 = " with size less than 8 bytes";
    __int16 v21 = 770;
    malformedError((const llvm::Twine *)&v14, v19);
  }
  *(unsigned char *)(result + 16) &= ~1u;
  *(void *)int8x16_t result = a3;
  *(void *)(result + 8) = v7 | (v6 << 32);
  return result;
}

void *checkOverlappingElement(void *result, uint64_t *a2, unint64_t a3, uint64_t a4, unsigned char *a5)
{
  unint64_t v5 = result;
  uint64_t v48 = a4;
  unint64_t v49 = a3;
  if (a4)
  {
    int v10 = (uint64_t *)a2[1];
    if (v10 != a2)
    {
      unint64_t v11 = a4 + a3;
      unint64_t v12 = v10[2];
      while ((v12 > a3 || v10[3] + v12 <= a3)
           && (v11 <= v12 || v11 >= v10[3] + v12)
           && (v12 < a3 || v11 < v10[3] + v12))
      {
        int v10 = (uint64_t *)v10[1];
        if (v10 == a2) {
          goto LABEL_13;
        }
        unint64_t v12 = v10[2];
        if (v11 <= v12)
        {
          int8x16_t result = operator new(0x28uLL);
          result[2] = a3;
          result[3] = a4;
          result[4] = a5;
          uint64_t v13 = *v10;
          *(void *)(v13 + 8) = result;
          const char *result = v13;
          uint64_t *v10 = (uint64_t)result;
          result[1] = v10;
          goto LABEL_14;
        }
      }
      __int16 v15 = " at offset ";
      if (*a5)
      {
        v23[0] = a5;
        void v23[2] = " at offset ";
        __int16 v24 = 771;
        uint64_t v16 = (const char *)v23;
        char v17 = 2;
      }
      else
      {
        v23[0] = " at offset ";
        __int16 v24 = 259;
        char v17 = 3;
        uint64_t v16 = " at offset ";
      }
      v25[0] = v16;
      void v25[2] = &v49;
      char v26 = v17;
      char v27 = 12;
      v28[0] = v25;
      void v28[2] = " with a size of ";
      uint64_t v18 = 770;
      __int16 v29 = 770;
      v30[0] = v28;
      void v30[2] = &v48;
      __int16 v31 = 3074;
      *(void *)&long long v32 = v30;
      *(void *)&long long v33 = ", overlaps ";
      LOWORD(v34) = 770;
      int8x16_t v19 = (unsigned char *)v10[4];
      if (*v19)
      {
        *(void *)&long long v35 = &v32;
        *(void *)&long long v36 = v19;
        LOWORD(v37) = 770;
        char v20 = 2;
        __int16 v21 = &v35;
      }
      else
      {
        long long v35 = v32;
        long long v36 = v33;
        uint64_t v37 = v34;
        char v20 = v34;
        if (v34 == 1)
        {
          v38[0] = " at offset ";
          __int16 v39 = 259;
          char v22 = 3;
LABEL_22:
          v40[0] = v15;
          __n128 v40[2] = v10 + 2;
          char v41 = v22;
          char v42 = 12;
          v43[0] = v40;
          v43[2] = " with a size of ";
          __int16 v44 = 770;
          v45[0] = (uint64_t)v43;
          void v45[2] = (uint64_t)(v10 + 3);
          char v46 = 2;
          char v47 = 12;
          malformedError((const llvm::Twine *)result, v45);
        }
        uint64_t v18 = *((void *)&v35 + 1);
        __int16 v21 = &v35;
        if (BYTE1(v37) == 1) {
          __int16 v21 = (long long *)v35;
        }
        else {
          char v20 = 2;
        }
      }
      v38[0] = v21;
      v38[1] = v18;
      void v38[2] = " at offset ";
      LOBYTE(v39) = v20;
      char v22 = 2;
      __int16 v15 = (const char *)v38;
      HIBYTE(v39) = 3;
      goto LABEL_22;
    }
LABEL_13:
    int8x16_t result = operator new(0x28uLL);
    result[2] = a3;
    result[3] = a4;
    result[4] = a5;
    uint64_t v14 = *a2;
    const char *result = *a2;
    result[1] = a2;
    *(void *)(v14 + 8) = result;
    *a2 = (uint64_t)result;
LABEL_14:
    ++a2[2];
  }
  *unint64_t v5 = 0;
  return result;
}

uint64_t getStructOrErr<llvm::MachO::segment_command_64>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(void *)(a2 + 16);
  BOOL v4 = v3 > a3 || a3 + 72 > v3 + *(void *)(a2 + 24);
  if (v4)
  {
    unint64_t v12 = "Structure read out-of-range";
    __int16 v13 = 259;
    malformedError((const llvm::Twine *)&v14, (uint64_t *)&v12);
  }
  int8x8_t v5 = *(int8x8_t *)a3;
  int8x16_t v6 = *(int8x16_t *)(a3 + 24);
  int8x16_t v7 = *(int8x16_t *)(a3 + 40);
  int8x16_t v8 = *(int8x16_t *)(a3 + 56);
  unsigned int v9 = *(_DWORD *)(a2 + 8);
  BOOL v4 = v9 > 0x14;
  int v10 = (1 << v9) & 0x155800;
  if (!v4 && v10 != 0)
  {
    int8x8_t v5 = vrev32_s8(v5);
    int8x16_t v6 = vrev64q_s8(v6);
    int8x16_t v7 = vrev64q_s8(v7);
    int8x16_t v8 = vrev32q_s8(v8);
  }
  *(unsigned char *)(result + 72) &= ~1u;
  *(int8x8_t *)int8x16_t result = v5;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a3 + 8);
  *(int8x16_t *)(result + 24) = v6;
  *(int8x16_t *)(result + 40) = v7;
  *(int8x16_t *)(result + 56) = v8;
  return result;
}

uint64_t getStructOrErr<llvm::MachO::segment_command>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(void *)(a2 + 16);
  BOOL v4 = v3 > a3 || a3 + 56 > v3 + *(void *)(a2 + 24);
  if (v4)
  {
    unint64_t v11 = "Structure read out-of-range";
    __int16 v12 = 259;
    malformedError((const llvm::Twine *)&v13, (uint64_t *)&v11);
  }
  int8x8_t v5 = *(int8x8_t *)a3;
  int8x16_t v6 = *(int8x16_t *)(a3 + 24);
  int8x16_t v7 = *(int8x16_t *)(a3 + 40);
  unsigned int v8 = *(_DWORD *)(a2 + 8);
  BOOL v4 = v8 > 0x14;
  int v9 = (1 << v8) & 0x155800;
  if (!v4 && v9 != 0)
  {
    int8x8_t v5 = vrev32_s8(v5);
    int8x16_t v6 = vrev32q_s8(v6);
    int8x16_t v7 = vrev32q_s8(v7);
  }
  *(unsigned char *)(result + 56) &= ~1u;
  *(int8x8_t *)int8x16_t result = v5;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a3 + 8);
  *(int8x16_t *)(result + 24) = v6;
  *(int8x16_t *)(result + 40) = v7;
  return result;
}

double llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  if (a2 && *(_DWORD *)(a2 + 52) > a3)
  {
    uint64_t v3 = *(void *)(a2 + 16) + 8;
    if (*(_DWORD *)(a2 + 48) == -889275714)
    {
      BOOL v4 = (int8x16_t *)(v3 + 20 * a3);
      unsigned int v5 = bswap32(v4[1].u32[0]);
      int8x16_t v6 = vrev32q_s8(*v4);
      *(int8x16_t *)(a1 + 12) = v6;
      *(_DWORD *)(a1 + 28) = v5;
    }
    else
    {
      uint64_t v7 = v3 + 32 * a3;
      *(int8x8_t *)v6.i8 = vrev32_s8(*(int8x8_t *)v7);
      int8x16_t v8 = vrev64q_s8(*(int8x16_t *)(v7 + 8));
      int8x8_t v9 = vrev32_s8(*(int8x8_t *)(v7 + 24));
      *(void *)(a1 + 32) = v6.i64[0];
      *(int8x16_t *)(a1 + 40) = v8;
      *(int8x8_t *)(a1 + 56) = v9;
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  return *(double *)v6.i64;
}

void llvm::object::MachOUniversalBinary::create()
{
  uint64_t v0 = 0;
  operator new();
}

uint64_t llvm::object::MachOUniversalBinary::MachOUniversalBinary(uint64_t a1, long long *a2, void *a3)
{
  long long v6 = a2[1];
  long long v148 = *a2;
  long long v5 = v148;
  long long v149 = v6;
  *(_DWORD *)(a1 + 8) = 1;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)a1 = &unk_270DC0D70;
  *(void *)(a1 + 48) = 0;
  unint64_t v7 = *(void *)(a1 + 24);
  if (v7 <= 7)
  {
    LODWORD(v98) = 2;
    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>();
  }
  unint64_t v8 = __rev32(**(void **)(a1 + 16));
  *(void *)(a1 + 48) = v8;
  if (!HIDWORD(v8))
  {
    int v146 = "contains zero architecture types";
    __int16 v147 = 259;
    int v10 = &v146;
    goto LABEL_15;
  }
  if (v8 == -889275713)
  {
    unsigned int v9 = (32 * HIDWORD(v8)) | 8;
    goto LABEL_9;
  }
  if (v8 != -889275714)
  {
    unint64_t v144 = "bad magic number";
    __int16 v145 = 259;
    int v10 = &v144;
LABEL_15:
    malformedError((uint64_t)&v131, (llvm::Twine *)v10);
  }
  unsigned int v9 = 20 * HIDWORD(v8) + 8;
LABEL_9:
  if (v7 < v9)
  {
    unint64_t v11 = "";
    if (v8 != -889275714) {
      unint64_t v11 = "_64";
    }
    int v12 = *(unsigned __int8 *)v11;
    uint64_t v13 = (const char **)"fat_arch";
    if (*v11)
    {
      unsigned int v131 = "fat_arch";
      unsigned int v133 = v11;
      LOWORD(v136) = 771;
      char v14 = 2;
    }
    else
    {
      unsigned int v131 = "fat_arch";
      LOWORD(v136) = 259;
      char v14 = 3;
    }
    if (v12) {
      uint64_t v13 = &v131;
    }
    v141[0] = v13;
    v141[2] = " structs would extend past the end of the file";
    char v142 = v14;
    char v143 = 3;
    malformedError((uint64_t)&v98, (llvm::Twine *)v141);
  }
  unsigned int v16 = 0;
  unint64_t v17 = v9;
  do
  {
    llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v131, a1, v16);
    int v18 = *((_DWORD *)v131 + 12);
    unint64_t v19 = HIDWORD(v133);
    uint64_t v20 = v134;
    unint64_t v21 = v138;
    if (v18 == -889275714) {
      unint64_t v22 = HIDWORD(v133);
    }
    else {
      unint64_t v22 = v138;
    }
    if (v18 != -889275714) {
      uint64_t v20 = v139;
    }
    if (v20 + v22 > v7)
    {
      BOOL v44 = v18 == -889275714;
      if (v18 == -889275714) {
        long long v45 = &v132;
      }
      else {
        long long v45 = &v136;
      }
      char v46 = (const char *)*v45;
      v123[0] = "offset plus size of cputype (";
      unsigned int v124 = v46;
      __int16 v125 = 2051;
      v126[0] = v123;
      unsigned int v127 = ") cpusubtype (";
      __int16 v128 = 770;
      char v47 = &v137;
      if (v44) {
        char v47 = (int *)&v133;
      }
      uint64_t v48 = *v47 & 0xFFFFFF;
      unsigned int v98 = v126;
      uint64_t v100 = v48;
      __int16 v102 = 2050;
      v129[0] = &v98;
      v129[2] = ") extends past the end of the file";
      __int16 v130 = 770;
      malformedError((uint64_t)v118, (llvm::Twine *)v129);
    }
    if (v18 == -889275714) {
      uint64_t v23 = v135;
    }
    else {
      uint64_t v23 = v140;
    }
    if (v23 >= 0x10)
    {
      v109[0] = "align (2^";
      unsigned int v110 = (void *)v23;
      __int16 v111 = 2051;
      v112[0] = v109;
      unsigned int v113 = ") too large for cputype (";
      __int16 v114 = 770;
      BOOL v49 = v18 == -889275714;
      if (v18 == -889275714) {
        uint64_t v50 = &v132;
      }
      else {
        uint64_t v50 = &v136;
      }
      uint64_t v51 = *v50;
      v115[0] = v112;
      uint64_t v116 = v51;
      __int16 v117 = 2050;
      v118[0] = v115;
      unsigned int v119 = ") cpusubtype (";
      __int16 v120 = 770;
      char v52 = &v137;
      if (v49) {
        char v52 = (int *)&v133;
      }
      __int16 v53 = (const char *)(*v52 & 0xFFFFFF);
      v123[0] = v118;
      unsigned int v124 = v53;
      __int16 v125 = 2050;
      v126[0] = v123;
      unsigned int v127 = ") (maximum 2^";
      __int16 v128 = 770;
      unsigned int v98 = v126;
      uint64_t v100 = 15;
      __int16 v102 = 2050;
      v121[0] = &v98;
      v121[2] = ")";
      __int16 v122 = 770;
      long long v54 = (llvm::Twine *)v121;
      goto LABEL_102;
    }
    if (v18 != -889275714)
    {
      if ((v138 & ~(-1 << v140)) == 0) {
        goto LABEL_32;
      }
      unint64_t v19 = v138;
LABEL_96:
      v89[0] = v19;
      v109[0] = "offset: ";
      unsigned int v110 = v89;
      __int16 v111 = 3075;
      v112[0] = v109;
      unsigned int v113 = " for cputype (";
      __int16 v114 = 770;
      BOOL v60 = v18 == -889275714;
      if (v18 == -889275714) {
        uint64_t v61 = &v132;
      }
      else {
        uint64_t v61 = &v136;
      }
      uint64_t v62 = *v61;
      v115[0] = v112;
      uint64_t v116 = v62;
      __int16 v117 = 2050;
      v118[0] = v115;
      unsigned int v119 = ") cpusubtype (";
      __int16 v120 = 770;
      uint64_t v63 = &v137;
      if (v60) {
        uint64_t v63 = (int *)&v133;
      }
      __int16 v64 = (const char *)(*v63 & 0xFFFFFF);
      v123[0] = v118;
      unsigned int v124 = v64;
      __int16 v125 = 2050;
      v126[0] = v123;
      unsigned int v127 = ") not aligned on it's alignment (2^";
      __int16 v128 = 770;
      unsigned int v98 = v126;
      uint64_t v100 = v23;
      __int16 v102 = 2050;
      v107[0] = &v98;
      v107[2] = ")";
      __int16 v108 = 770;
      long long v54 = (llvm::Twine *)v107;
LABEL_102:
      malformedError((uint64_t)v91, v54);
    }
    if ((~(-1 << v135) & HIDWORD(v133)) != 0) {
      goto LABEL_96;
    }
    unint64_t v21 = HIDWORD(v133);
LABEL_32:
    if (v21 < v17)
    {
      BOOL v55 = v18 == -889275714;
      if (v18 == -889275714) {
        __int16 v56 = &v132;
      }
      else {
        __int16 v56 = &v136;
      }
      uint64_t v57 = *v56;
      v115[0] = "cputype (";
      uint64_t v116 = v57;
      __int16 v117 = 2051;
      v118[0] = v115;
      unsigned int v119 = ") cpusubtype (";
      __int16 v120 = 770;
      unint64_t v58 = &v137;
      if (v55) {
        unint64_t v58 = (int *)&v133;
      }
      __int16 v59 = (const char *)(*v58 & 0xFFFFFF);
      v123[0] = v118;
      unsigned int v124 = v59;
      __int16 v125 = 2050;
      v126[0] = v123;
      unsigned int v127 = ") offset ";
      __int16 v128 = 770;
      v109[0] = v22;
      unsigned int v98 = v126;
      uint64_t v100 = (uint64_t)v109;
      __int16 v102 = 3074;
      v105[0] = &v98;
      v105[2] = " overlaps universal headers";
      __int16 v106 = 770;
      malformedError((uint64_t)v112, (llvm::Twine *)v105);
    }
    ++v16;
    unsigned int v24 = *(_DWORD *)(a1 + 52);
  }
  while (v16 < v24);
  if (v24)
  {
    unsigned int v25 = 0;
    do
    {
      llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v131, a1, v25++);
      unsigned int v26 = *(_DWORD *)(a1 + 52);
      if (v25 < v26)
      {
        long long v72 = v131;
        int v70 = (int)v133;
        unsigned int v71 = v132;
        unsigned int v27 = v136;
        unsigned int v68 = v25;
        int v69 = v137;
        unint64_t v28 = HIDWORD(v133);
        uint64_t v29 = v134;
        unint64_t v30 = v138;
        uint64_t v31 = v139;
        do
        {
          llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v98, a1, v25);
          int v32 = *((_DWORD *)v72 + 12);
          if (v32 == -889275714) {
            unint64_t v33 = v71;
          }
          else {
            unint64_t v33 = v27;
          }
          int v34 = *((_DWORD *)v98 + 12);
          long long v35 = (__int16 *)&v99;
          if (v34 != -889275714) {
            long long v35 = &v102;
          }
          long long v36 = (void *)*(unsigned int *)v35;
          if (v33 == v36)
          {
            int v37 = v70;
            if (v32 != -889275714) {
              int v37 = v69;
            }
            uint64_t v38 = &v100;
            if (v34 != -889275714) {
              uint64_t v38 = (uint64_t *)v103;
            }
            if (((*(_DWORD *)v38 ^ v37) & 0xFFFFFF) == 0)
            {
              v118[0] = "contains two of the same architecture (cputype (";
              unsigned int v119 = (const char *)v33;
              __int16 v120 = 2051;
              v123[0] = v118;
              unsigned int v124 = ") cpusubtype (";
              __int16 v125 = 770;
              v126[0] = v123;
              unsigned int v127 = (const char *)(v37 & 0xFFFFFF);
              __int16 v128 = 2050;
              v96[0] = v126;
              v96[2] = "))";
              __int16 v97 = 770;
              malformedError((uint64_t)v115, (llvm::Twine *)v96);
            }
          }
          if (v32 == -889275714) {
            unint64_t v39 = v28;
          }
          else {
            unint64_t v39 = v30;
          }
          unint64_t v40 = HIDWORD(v100);
          if (v34 != -889275714) {
            unint64_t v40 = *(void *)&v103[4];
          }
          if (v39 >= v40)
          {
            uint64_t v41 = v101;
            if (v34 != -889275714) {
              uint64_t v41 = v104;
            }
            if (v39 < v41 + v40)
            {
              if (v32 == -889275714) {
                uint64_t v42 = v29;
              }
              else {
                uint64_t v42 = v31;
              }
LABEL_107:
              v77[0] = "cputype (";
              v77[2] = v33;
              __int16 v78 = 2051;
              v79[0] = v77;
              uint64_t v79[2] = ") cpusubtype (";
              __int16 v80 = 770;
              BOOL v44 = v32 == -889275714;
              int v65 = v70;
              if (!v44) {
                int v65 = v69;
              }
              v81[0] = v79;
              v81[2] = v65 & 0xFFFFFF;
              __int16 v82 = 2050;
              v83[0] = v81;
              v83[2] = ") at offset ";
              __int16 v84 = 770;
              uint64_t v75 = v42;
              unint64_t v76 = v39;
              v85[0] = v83;
              v85[2] = &v76;
              __int16 v86 = 3074;
              v87[0] = v85;
              v87[2] = " with a size of ";
              __int16 v88 = 770;
              v89[0] = v87;
              v89[2] = &v75;
              __int16 v90 = 3074;
              v91[0] = v89;
              v91[2] = ", overlaps cputype (";
              __int16 v92 = 770;
              v109[0] = v91;
              unsigned int v110 = v36;
              __int16 v111 = 2050;
              v112[0] = v109;
              unsigned int v113 = ") cpusubtype (";
              __int16 v114 = 770;
              if (v34 == -889275714) {
                char v66 = &v100;
              }
              else {
                char v66 = (uint64_t *)v103;
              }
              uint64_t v67 = *(_DWORD *)v66 & 0xFFFFFF;
              v115[0] = v112;
              uint64_t v116 = v67;
              __int16 v117 = 2050;
              v118[0] = v115;
              unsigned int v119 = ") at offset ";
              __int16 v120 = 770;
              uint64_t v73 = v41;
              unint64_t v74 = v40;
              v123[0] = v118;
              unsigned int v124 = (const char *)&v74;
              __int16 v125 = 3074;
              v126[0] = v123;
              unsigned int v127 = " with a size of ";
              __int16 v128 = 770;
              v93[0] = v126;
              v93[2] = &v73;
              __int16 v94 = 3074;
              malformedError((uint64_t)&v95, (llvm::Twine *)v93);
            }
          }
          if (v32 == -889275714) {
            uint64_t v42 = v29;
          }
          else {
            uint64_t v42 = v31;
          }
          unint64_t v43 = v42 + v39;
          if (v42 + v39 > v40)
          {
            uint64_t v41 = v101;
            if (v34 != -889275714) {
              uint64_t v41 = v104;
            }
            if (v43 < v41 + v40) {
              goto LABEL_107;
            }
          }
          if (v39 <= v40)
          {
            uint64_t v41 = v101;
            if (v34 != -889275714) {
              uint64_t v41 = v104;
            }
            if (v43 >= v41 + v40) {
              goto LABEL_107;
            }
          }
          ++v25;
          unsigned int v26 = *(_DWORD *)(a1 + 52);
        }
        while (v25 < v26);
        unsigned int v25 = v68;
      }
    }
    while (v25 < v26);
  }
  *a3 = 0;
  return a1;
}

void llvm::object::MachOUniversalBinary::~MachOUniversalBinary(llvm::object::MachOUniversalBinary *this)
{
}

uint64_t llvm::object::MinidumpFile::getDataSlice(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 + a4 > a3) {
    operator new();
  }
  uint64_t result = a2 + a4;
  *(unsigned char *)(a1 + 16) &= ~1u;
  *(void *)(a1 + 8) = a5;
  *(void *)a1 = a2 + a4;
  return result;
}

uint64_t llvm::object::MinidumpFile::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t result = llvm::object::MinidumpFile::getDataSlice((uint64_t)&v23, *a1, v4, 0, 32);
  long long v6 = v23;
  if (v24)
  {
    *(unsigned char *)(a2 + 8) |= 1u;
    *(void *)a2 = v6;
    return result;
  }
  if (*v23 != 1347241037) {
    operator new();
  }
  if (*((unsigned __int16 *)v23 + 2) != 42899) {
    operator new();
  }
  uint64_t v7 = v23[2];
  uint64_t result = llvm::object::MinidumpFile::getDataSlice((uint64_t)&v23, v3, v4, v23[3], 12 * v7);
  unint64_t v8 = v23;
  if (v24)
  {
    *(unsigned char *)(a2 + 8) |= 1u;
    *(void *)a2 = v8;
    return result;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  unsigned int v20 = 0;
  if (!v7) {
LABEL_29:
  }
    operator new();
  uint64_t v17 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 12 * v7;
  unint64_t v11 = v23 + 1;
  while (1)
  {
    unsigned int v12 = *(v11 - 1);
    llvm::object::MinidumpFile::getDataSlice((uint64_t)&v21, v3, v4, v11[1], *v11);
    if (v22) {
      break;
    }
    if (v12)
    {
      if (v12 >= 0xFFFFFFFE) {
        operator new();
      }
LABEL_12:
      uint64_t v23 = 0;
      unsigned int v13 = v20;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>,llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>::LookupBucketFor<llvm::minidump::StreamType>(v17, v20, v12, &v23))operator new(); {
      if (4 * (int)v19 + 4 >= 3 * v13)
      }
      {
        int v15 = 2 * v13;
      }
      else
      {
        if (v13 + ~v19 - HIDWORD(v19) > v13 >> 3)
        {
LABEL_15:
          char v14 = v23;
          LODWORD(v19) = v19 + 1;
          if (*v23 != -1) {
            --HIDWORD(v19);
          }
          unsigned int *v23 = v12;
          *((void *)v14 + 1) = v9;
          goto LABEL_18;
        }
        int v15 = v13;
      }
      llvm::DenseMap<llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>::grow((uint64_t)&v18, v15);
      uint64_t v23 = 0;
      uint64_t v17 = v18;
      llvm::DenseMapBase<llvm::DenseMap<llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>,llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>::LookupBucketFor<llvm::minidump::StreamType>(v18, v20, v12, &v23);
      goto LABEL_15;
    }
    if (*v11) {
      goto LABEL_12;
    }
LABEL_18:
    ++v9;
    v11 += 3;
    v10 -= 12;
    if (!v10) {
      goto LABEL_29;
    }
  }
  uint64_t v16 = v21;
  *(unsigned char *)(a2 + 8) |= 1u;
  *(void *)a2 = v16;
  return MEMORY[0x263E500A0](v18, 8);
}

void llvm::object::MinidumpFile::~MinidumpFile(llvm::object::MinidumpFile *this)
{
  *(void *)this = &unk_270DC0DA0;
  MEMORY[0x263E500A0](*((void *)this + 9), 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_270DC0DA0;
  MEMORY[0x263E500A0](*((void *)this + 9), 8);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>,llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>::LookupBucketFor<llvm::minidump::StreamType>(uint64_t a1, int a2, int a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    long long v6 = (_DWORD *)(a1 + 16 * v5);
    int v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -2;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        long long v6 = (_DWORD *)(a1 + 16 * (v13 & v4));
        int v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        long long v6 = v10;
      }
    }
  }
  else
  {
    long long v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_DWORD *llvm::DenseMap<llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        _DWORD *result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = v4;
      do
      {
        int v14 = *(_DWORD *)v13;
        if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        {
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>,llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>::LookupBucketFor<llvm::minidump::StreamType>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          int v15 = v18;
          *uint64_t v18 = *(_DWORD *)v13;
          *((void *)v15 + 1) = *(void *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      _DWORD *result = -1;
      result += 4;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

void llvm::ModuleSymbolTable::addModule(llvm::ModuleSymbolTable *this, llvm::Module *a2)
{
  if (!*(void *)this) {
    *(void *)this = a2;
  }
  uint64_t v4 = (char *)a2 + 24;
  unint64_t v5 = (char *)*((void *)a2 + 4);
  unint64_t v6 = (char *)a2 + 8;
  int v7 = (llvm::ModuleSymbolTable **)*((void *)a2 + 2);
  unsigned int v8 = (char *)a2 + 40;
  uint64_t v9 = (char *)*((void *)a2 + 6);
  uint64_t v10 = (char *)a2 + 56;
  uint64_t v11 = (char *)*((void *)a2 + 8);
  unint64_t v28 = v5;
  uint64_t v29 = v7;
  unint64_t v30 = v9;
  uint64_t v31 = v11;
  int v32 = (char *)a2 + 24;
  unint64_t v33 = (char *)a2 + 8;
  int v34 = (char *)a2 + 40;
  long long v35 = (char *)a2 + 56;
  while (v5 != v4
       || v7 != (llvm::ModuleSymbolTable **)v6
       || v9 != v8
       || v11 != v10
       || v32 != v4
       || v33 != v6
       || v34 != v8
       || v35 != v10)
  {
    uint64_t v12 = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::get<0ul,1ul,2ul,3ul>((uint64_t)&v28);
    uint64_t v13 = v12;
    int v15 = (uint64_t *)*((void *)this + 14);
    unint64_t v14 = *((void *)this + 15);
    if ((unint64_t)v15 >= v14)
    {
      uint64_t v17 = *((void *)this + 13);
      uint64_t v18 = ((uint64_t)v15 - v17) >> 3;
      if ((unint64_t)(v18 + 1) >> 61) {
        abort();
      }
      uint64_t v19 = v14 - v17;
      uint64_t v20 = v19 >> 2;
      if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
        uint64_t v20 = v18 + 1;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21) {
        unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v21);
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v23 = (uint64_t *)(v21 + 8 * v18);
      uint64_t *v23 = v13;
      uint64_t v16 = v23 + 1;
      uint64_t v25 = (char *)*((void *)this + 13);
      char v24 = (char *)*((void *)this + 14);
      if (v24 != v25)
      {
        do
        {
          uint64_t v26 = *((void *)v24 - 1);
          v24 -= 8;
          *--uint64_t v23 = v26;
        }
        while (v24 != v25);
        char v24 = (char *)*((void *)this + 13);
      }
      *((void *)this + 13) = v23;
      *((void *)this + 14) = v16;
      *((void *)this + 15) = v21 + 8 * v22;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *int v15 = v12;
      uint64_t v16 = v15 + 1;
    }
    *((void *)this + 14) = v16;
    llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::increment<0ul,1ul,2ul,3ul>((uint64_t)&v28);
    unint64_t v5 = v28;
    int v7 = v29;
    uint64_t v9 = v30;
    uint64_t v11 = v31;
  }
  unsigned int v27 = this;
  unint64_t v28 = (char *)llvm::function_ref<void ()(llvm::StringRef,llvm::object::BasicSymbolRef::Flags)>::callback_fn<llvm::ModuleSymbolTable::addModule(llvm::Module *)::$_0>;
  uint64_t v29 = &v27;
  long long v36 = &v28;
  initializeRecordStreamer((uint64_t)a2);
}

void initializeRecordStreamer(uint64_t a1)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  int v1 = *(char *)(a1 + 111);
  if (v1 >= 0) {
    uint64_t v2 = a1 + 88;
  }
  else {
    uint64_t v2 = *(void *)(a1 + 88);
  }
  if (v1 >= 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 111);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 96);
  }
  if (v3)
  {
    v56[0] = 0;
    v56[1] = 0;
    uint64_t v57 = 0;
    LOWORD(v71) = 260;
    unsigned int v68 = (void **)(a1 + 208);
    llvm::Triple::Triple(v55, (const llvm::Twine *)&v68);
    uint64_t v5 = llvm::TargetRegistry::lookupTarget((uint64_t)v55, (uint64_t)v56);
    unint64_t v6 = (void *)v5;
    if ((v55[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v7 = v55;
    }
    else {
      int v7 = (std::string *)v55[0].__r_.__value_.__r.__words[0];
    }
    if ((v55[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v55[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v55[0].__r_.__value_.__l.__size_;
    }
    MCRegInfo = llvm::Target::createMCRegInfo(v5, (uint64_t)v7, size);
    if (MCRegInfo)
    {
      uint64_t v10 = (uint64_t)MCRegInfo;
      v44[0] = 2048;
      uint64_t v45 = 2;
      int v46 = 2;
      *(_OWORD *)char v47 = 0u;
      *(_OWORD *)uint64_t v48 = 0u;
      long long v49 = 0u;
      *(_OWORD *)uint64_t v50 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      v54[0] = 0u;
      if ((v55[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v11 = v55;
      }
      else {
        uint64_t v11 = (std::string *)v55[0].__r_.__value_.__r.__words[0];
      }
      if ((v55[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v12 = HIBYTE(v55[0].__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v12 = v55[0].__r_.__value_.__l.__size_;
      }
      v54[1] = 0uLL;
      uint64_t MCAsmInfo = llvm::Target::createMCAsmInfo((uint64_t)v6, (uint64_t)MCRegInfo, (uint64_t)v11, v12, (uint64_t)v44);
      if (MCAsmInfo)
      {
        uint64_t v14 = MCAsmInfo;
        if ((v55[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v15 = v55;
        }
        else {
          int v15 = (std::string *)v55[0].__r_.__value_.__r.__words[0];
        }
        if ((v55[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v16 = HIBYTE(v55[0].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v16 = v55[0].__r_.__value_.__l.__size_;
        }
        uint64_t MCSubtargetInfo = llvm::Target::createMCSubtargetInfo((uint64_t)v6, (uint64_t)v15, v16, (uint64_t)"", 0, (uint64_t)"", 0);
        if (MCSubtargetInfo)
        {
          uint64_t v18 = MCSubtargetInfo;
          uint64_t v19 = (uint64_t (*)(void))v6[8];
          if (v19 && v19())
          {
            LOWORD(v71) = 261;
            unsigned int v68 = (void **)"";
            *(void *)&long long v69 = 0;
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
            uint64_t v20 = operator new(24, (uint64_t *)&__str);
            *(void *)uint64_t v20 = &unk_270DBCE88;
            *((void *)v20 + 1) = v2;
            *((void *)v20 + 2) = v2 + v3;
            uint64_t v43 = 0;
            long long v41 = 0u;
            memset(v42, 0, sizeof(v42));
            __str.__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = (unint64_t)v20;
            unsigned int v71 = v42;
            unint64_t v21 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v42, 1uLL);
            std::string::size_type v22 = __str.__r_.__value_.__r.__words[0];
            int v70 = &v21[3 * v23];
            v21[1] = __str.__r_.__value_.__l.__size_;
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
            *unint64_t v21 = v22;
            _OWORD v21[2] = *((void *)&__str.__r_.__value_.__l + 2);
            char v24 = v21 + 3;
            long long v25 = v41;
            *(void *)&long long v41 = v21;
            long long v69 = v25;
            uint64_t v26 = *(void **)&v42[0];
            *(void *)&v42[0] = v70;
            int v70 = v26;
            unsigned int v68 = (void **)v25;
            std::__split_buffer<llvm::SourceMgr::SrcBuffer>::~__split_buffer((uint64_t)&v68);
            *((void *)&v41 + 1) = v24;
            llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&__str);
            llvm::MCContext::MCContext((uint64_t)&v68, (long long *)v55, v14, v10, v18, (uint64_t)&v41, 0, 1, 0, 0);
            unsigned int v27 = (uint64_t (*)(void ***, void, void))v6[7];
            if (v27)
            {
              uint64_t v28 = v27(&v68, 0, 0);
              uint64_t ModuleFlag = llvm::Module::getModuleFlag((llvm::Module *)a1, "SDK Version", 0xBuLL);
              *(void *)(v28 + 872) = getSDKVersionMD(ModuleFlag);
              *(void *)(v28 + 880) = v30;
              uint64_t v72 = v28;
              uint64_t v31 = llvm::Module::getModuleFlag((llvm::Module *)a1, "darwin.target_variant.triple", 0x1CuLL);
              if (v31 && **(void **)(v31 + 8))
              {
                uint64_t v32 = llvm::Module::getModuleFlag((llvm::Module *)a1, "darwin.target_variant.triple", 0x1CuLL);
                if (v32)
                {
                  unint64_t v33 = *(uint64_t **)(v32 + 8);
                  uint64_t v36 = *v33;
                  long long v35 = v33 + 3;
                  uint64_t v34 = v36;
                }
                else
                {
                  uint64_t v34 = 0;
                  long long v35 = &str_33;
                }
                __int16 v40 = 261;
                v39[0] = v35;
                v39[1] = v34;
                llvm::Triple::Triple(&__str, (const llvm::Twine *)v39);
                int v37 = (std::string *)(v28 + 888);
                if (*(unsigned char *)(v28 + 936))
                {
                  std::string::operator=(v37, &__str);
                  *(_OWORD *)(v28 + 912) = v59;
                  *(void *)(v28 + 928) = v60;
                }
                else
                {
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(v37, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    *(_OWORD *)&v37->__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                    *(void *)(v28 + 904) = *((void *)&__str.__r_.__value_.__l + 2);
                  }
                  *(_OWORD *)(v28 + 912) = v59;
                  *(void *)(v28 + 928) = v60;
                  *(unsigned char *)(v28 + 936) = 1;
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
              }
              llvm::MCStreamer::MCStreamer((llvm::MCStreamer *)&__str, (llvm::MCContext *)&v68);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_270DC0DF0;
              uint64_t v61 = a1;
              uint64_t v63 = 0;
              uint64_t v62 = 0;
              uint64_t v66 = 0;
              uint64_t v64 = 0x1000000000;
              uint64_t v65 = 0;
              int v67 = 0;
              uint64_t v38 = (void (*)(std::string *))v6[26];
              if (v38) {
                v38(&__str);
              }
              llvm::createMCAsmParser((uint64_t)&v41, (uint64_t)&v68);
            }
            operator new();
          }
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      unsigned int v68 = (void **)v54 + 1;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v68);
      if (SHIBYTE(v52) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(__p[0]) < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v49) < 0) {
        operator delete(v48[1]);
      }
      if (SHIBYTE(v48[0]) < 0) {
        operator delete(v47[0]);
      }
      unsigned int v68 = 0;
      std::default_delete<llvm::MCRegisterInfo>::operator()[abi:nn180100]((uint64_t)&v68, v10);
    }
    if (SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57) < 0) {
      operator delete(v56[0]);
    }
  }
}

void llvm::ModuleSymbolTable::printSymbolName(uint64_t a1, llvm::raw_ostream *this, uint64_t a3)
{
  unint64_t v4 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((a3 & 4) != 0)
  {
    int v7 = *(char *)(v4 + 23);
    if (v7 >= 0) {
      unsigned int v8 = (const char *)(a3 & 0xFFFFFFFFFFFFFFF8);
    }
    else {
      unsigned int v8 = *(const char **)v4;
    }
    if (v7 >= 0) {
      size_t v9 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      size_t v9 = *(void *)(v4 + 8);
    }
    llvm::raw_ostream::write(this, v8, v9);
  }
  else
  {
    if ((*(_DWORD *)(v4 + 32) & 0x300) == 0x100)
    {
      uint64_t v6 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v6) > 5)
      {
        *(_WORD *)(v6 + 4) = 24432;
        *(_DWORD *)uint64_t v6 = 1835622239;
        *((void *)this + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(this, "__imp_", 6uLL);
      }
    }
    llvm::Mangler::getNameWithPrefix((llvm::Mangler *)(a1 + 128), this, (const llvm::GlobalValue *)v4, 0);
  }
}

uint64_t llvm::ModuleSymbolTable::getSymbolFlags(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 4) != 0) {
    return *(unsigned int *)(v2 + 24);
  }
  int v3 = *(_DWORD *)(v2 + 32);
  int v4 = *(unsigned __int8 *)(v2 + 16);
  if ((v3 & 0xF) == 1)
  {
    unsigned int v5 = 1;
    goto LABEL_15;
  }
  if (*(unsigned char *)(v2 + 16))
  {
    if (v4 == 3 && (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) == 0)
    {
      unsigned int v5 = 1;
      int v4 = 3;
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  if ((v3 & 0x1000000) != 0 || *(void *)(v2 + 72) != v2 + 72)
  {
LABEL_12:
    if ((v3 & 0x30) == 0x10) {
      unsigned int v5 = ((v3 & 0xFu) - 7 > 1) << 9;
    }
    else {
      unsigned int v5 = 0;
    }
LABEL_15:
    BOOL v7 = v2 == 0;
    if (v2 && v4 == 3)
    {
      BOOL v7 = 0;
      unsigned int v5 = v5 & 0xFFFFFBFF | ((*(unsigned char *)(v2 + 80) & 1) << 10);
    }
    goto LABEL_18;
  }
  BOOL v7 = v2 == 0;
  unsigned int v5 = 1;
LABEL_18:
  v22[0] = 0;
  v22[1] = 0;
  int v23 = 0;
  uint64_t v8 = findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(v2, (uint64_t)v22);
  MEMORY[0x263E500A0](v22[0], 8);
  if (v8 && (*(unsigned __int8 *)(v8 + 16) | 2) == 2) {
    v5 |= 0x800u;
  }
  if (*(unsigned char *)(v2 + 16) == 1) {
    unsigned int v9 = v5 | 0x20;
  }
  else {
    unsigned int v9 = v5;
  }
  int v10 = *(_DWORD *)(v2 + 32);
  int v11 = v10 & 0xF;
  if (v11 == 8) {
    v9 |= 0x80u;
  }
  if ((v11 - 7) >= 2) {
    v9 |= 2u;
  }
  if (v11 == 10) {
    uint64_t v6 = v9 | 0x10;
  }
  else {
    uint64_t v6 = v9;
  }
  if ((v10 & 0xE) == 2
    || (v10 & 0xE) == 4
    || llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v2))
  {
    uint64_t v6 = v6 | 4;
  }
  if ((*(unsigned char *)(v2 + 23) & 0x10) != 0)
  {
    uint64_t ValueName = llvm::Value::getValueName((uint64_t ***)v2);
    if (*(void *)ValueName >= 5uLL && *(_DWORD *)(ValueName + 16) == 1836477548 && *(unsigned char *)(ValueName + 20) == 46) {
      return v6 | 0x80;
    }
  }
  char v14 = *(unsigned char *)(v2 + 16) != 3 || v7;
  if ((v14 & 1) == 0 && (*(unsigned char *)(v2 + 34) & 0x80) != 0)
  {
    int v15 = (uint64_t *)(***(void ***)v2 + 2552);
    v22[0] = v2;
    std::string::size_type v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v15, v22);
    if (v16[2] == 13)
    {
      uint64_t v17 = (unint64_t *)v16[1];
      unint64_t v18 = 0x6C6C766D2E6D6574;
      unint64_t v19 = bswap64(*v17);
      if (v19 == 0x6C6C766D2E6D6574
        && (unint64_t v18 = 0x6D65746164617461,
            unint64_t v19 = bswap64(*(unint64_t *)((char *)v17 + 5)),
            v19 == 0x6D65746164617461))
      {
        int v20 = 0;
      }
      else if (v19 < v18)
      {
        int v20 = -1;
      }
      else
      {
        int v20 = 1;
      }
      if (v20) {
        return v6;
      }
      else {
        return v6 | 0x80;
      }
    }
  }
  return v6;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>,llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>::destroyAll(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 32 * v1;
    int v3 = (void *)(*(void *)a1 + 16);
    do
    {
      if ((*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v4 = (void *)*(v3 - 1);
        if (v4)
        {
          *int v3 = v4;
          operator delete(v4);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

void llvm::function_ref<void ()(llvm::StringRef,llvm::object::BasicSymbolRef::Flags)>::callback_fn<llvm::ModuleSymbolTable::addModule(llvm::Module *)::$_0>(void *a1, const void *a2, size_t a3, int a4)
{
  BOOL v7 = (void *)*a1;
  unint64_t v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a1 + 8, 32, 3);
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_29;
  }
  unint64_t v9 = v8;
  if (a3 >= 0x17)
  {
    uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v11 = a3 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = a3;
    unint64_t v30 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v30) = a3;
  p_dst = &__dst;
  if (a3) {
LABEL_8:
  }
    memmove(p_dst, a2, a3);
  *((unsigned char *)p_dst + a3) = 0;
  *(void *)(v9 + 16) = v30;
  *(_OWORD *)unint64_t v9 = __dst;
  unint64_t v30 = 0;
  long long __dst = 0uLL;
  *(_DWORD *)(v9 + 24) = a4;
  uint64_t v13 = v9 | 4;
  int v15 = (uint64_t *)v7[14];
  unint64_t v14 = v7[15];
  if ((unint64_t)v15 < v14)
  {
    *int v15 = v13;
    std::string::size_type v16 = v15 + 1;
    goto LABEL_25;
  }
  uint64_t v17 = v7[13];
  uint64_t v18 = ((uint64_t)v15 - v17) >> 3;
  if ((unint64_t)(v18 + 1) >> 61) {
LABEL_29:
  }
    abort();
  uint64_t v19 = v14 - v17;
  uint64_t v20 = v19 >> 2;
  if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
    uint64_t v20 = v18 + 1;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v20;
  }
  if (v21) {
    unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v21);
  }
  else {
    uint64_t v22 = 0;
  }
  int v23 = (uint64_t *)(v21 + 8 * v18);
  unint64_t v24 = v21 + 8 * v22;
  uint64_t *v23 = v13;
  std::string::size_type v16 = v23 + 1;
  uint64_t v26 = (char *)v7[13];
  long long v25 = (char *)v7[14];
  if (v25 != v26)
  {
    do
    {
      uint64_t v27 = *((void *)v25 - 1);
      v25 -= 8;
      *--int v23 = v27;
    }
    while (v25 != v26);
    long long v25 = (char *)v7[13];
  }
  v7[13] = v23;
  v7[14] = v16;
  v7[15] = v24;
  if (v25) {
    operator delete(v25);
  }
LABEL_25:
  v7[14] = v16;
  if (SHIBYTE(v30) < 0)
  {
    uint64_t v28 = (void *)__dst;
    operator delete(v28);
  }
}

void llvm::function_ref<void ()(llvm::RecordStreamer &)>::callback_fn<llvm::ModuleSymbolTable::CollectAsmSymbols(llvm::Module const&,llvm::function_ref<void ()(llvm::StringRef,llvm::object::BasicSymbolRef::Flags)>)::$_0>(uint64_t a1, uint64_t a2)
{
  llvm::RecordStreamer::flushSymverDirectives((llvm::RecordStreamer *)a2);
  uint64_t v4 = *(void *)(a2 + 312);
  uint64_t v5 = *(unsigned int *)(a2 + 320);
  if (v5)
  {
    for (uint64_t i = *(uint64_t **)(a2 + 312); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    uint64_t i = *(uint64_t **)(a2 + 312);
  }
  unint64_t v8 = (uint64_t *)(v4 + 8 * v5);
  if (i != v8)
  {
    uint64_t v9 = *i;
    do
    {
      int v10 = *(_DWORD *)(v9 + 8) - 1;
      if (v10 > 5) {
        uint64_t v11 = 2048;
      }
      else {
        uint64_t v11 = dword_261E90A88[v10];
      }
      (**(void (***)(void, uint64_t, void, uint64_t))a1)(*(void *)(*(void *)a1 + 8), v9 + 16, *(void *)v9, v11);
      do
      {
        uint64_t v12 = i[1];
        ++i;
        uint64_t v9 = v12;
        if (v12) {
          BOOL v13 = v9 == -8;
        }
        else {
          BOOL v13 = 1;
        }
      }
      while (v13);
    }
    while (i != v8);
  }
}

void *llvm::object::ObjectFile::getSymbolValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)a1 + 40))(&v8);
  if (v9)
  {
    uint64_t v7 = v8;
    if (v8)
    {
      *(unsigned char *)(a3 + 8) |= 1u;
      *(void *)a3 = v7;
      return result;
    }
    goto LABEL_7;
  }
  if ((v8 & 1) == 0)
  {
    if ((v8 & 0x10) != 0)
    {
      uint64_t result = (void *)llvm::object::ObjectFile::getCommonSymbolSize(a1, a2);
LABEL_8:
      *(unsigned char *)(a3 + 8) &= ~1u;
      *(void *)a3 = result;
      return result;
    }
LABEL_7:
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a2);
    goto LABEL_8;
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = 0;
  return result;
}

llvm::raw_ostream *llvm::object::ObjectFile::printSymbolName@<X0>(uint64_t a1@<X0>, llvm::raw_ostream *a2@<X1>, const void **a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t result = (llvm::raw_ostream *)(*(void *(**)(const void **__return_ptr))(*(void *)a1 + 80))(v7);
  if (v8)
  {
    *a3 = v7[0];
  }
  else
  {
    uint64_t result = llvm::raw_ostream::operator<<(a2, v7[0], (size_t)v7[1]);
    char v6 = v8;
    *a3 = 0;
    if (v6)
    {
      uint64_t result = (llvm::raw_ostream *)v7[0];
      v7[0] = 0;
      if (result) {
        return (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t llvm::object::ObjectFile::isSectionBitcode(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 144))(v4);
  if (v5)
  {
    uint64_t v3 = v4[0];
    v4[0] = 0;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v3);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    if (v5)
    {
      uint64_t result = v4[0];
      v4[0] = 0;
      if (!result) {
        return result;
      }
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    }
    return 0;
  }
  if (v4[1] != 7) {
    return 0;
  }
  return *(_DWORD *)v4[0] == 1986817070 && *(_DWORD *)(v4[0] + 3) == 1667394934;
}

uint64_t llvm::object::ObjectFile::isSectionStripped()
{
  return 0;
}

uint64_t llvm::object::ObjectFile::isBerkeleyText(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 200))();
}

uint64_t llvm::object::ObjectFile::isBerkeleyData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
}

uint64_t llvm::object::ObjectFile::isDebugSection()
{
  return 0;
}

uint64_t llvm::object::ObjectFile::hasDebugInfo(llvm::object::ObjectFile *this)
{
  uint64_t v2 = (*(uint64_t (**)(llvm::object::ObjectFile *))(*(void *)this + 352))(this);
  uint64_t v4 = v3;
  uint64_t v5 = (*(uint64_t (**)(llvm::object::ObjectFile *))(*(void *)this + 360))(this);
  uint64_t v13 = v2;
  uint64_t v14 = v4;
  if (v4 == v6 && v2 == v5) {
    return 0;
  }
  uint64_t v8 = v5;
  uint64_t v9 = v6;
  do
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 264))(v4, v2);
    if (v10) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 136))(v14, &v13);
    uint64_t v2 = v13;
    uint64_t v4 = v14;
  }
  while (v14 != v9 || v13 != v8);
  return v10;
}

uint64_t llvm::object::ObjectFile::getRelocatedSection@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result;
  return result;
}

double llvm::object::ObjectFile::makeTriple@<D0>(llvm::object::ObjectFile *this@<X0>, llvm::Triple *a2@<X8>)
{
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v4 = (*(uint64_t (**)(llvm::object::ObjectFile *))(*(void *)this + 392))(this);
  int v5 = v4;
  ArchName = llvm::Triple::getArchName(v4, v4, 0);
  llvm::Triple::setArchName(a2, ArchName, v7);
  if ((v5 - 1) <= 1) {
    (*(void (**)(llvm::object::ObjectFile *, llvm::Triple *))(*(void *)this + 416))(this, a2);
  }
  int v9 = *((_DWORD *)this + 2);
  if ((v9 - 17) <= 3)
  {
    uint64_t v10 = a2;
    int v11 = 5;
LABEL_10:
    return llvm::Triple::setObjectFormat(v10, v11);
  }
  if (v9 != 10)
  {
    if ((v9 - 11) > 1) {
      return result;
    }
    llvm::Triple::setOSName(a2, (uint64_t)&str_85_0, 3);
    uint64_t v10 = a2;
    int v11 = 8;
    goto LABEL_10;
  }
  if ((*(unsigned int (**)(llvm::object::ObjectFile *))(*(void *)this + 392))(this) == 35)
  {
    uint64_t v12 = "thumbv7-windows";
    __int16 v13 = 259;
    return llvm::Triple::setTriple(a2, (const llvm::Twine *)&v12);
  }
  return result;
}

uint64_t llvm::object::ObjectFile::createObjectFile@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v5 = (long long *)a1;
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    a1 = llvm::identify_magic(*(unsigned __int8 **)a1, *(void *)(a1 + 8));
    a2 = a1;
  }
  switch(a2)
  {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      long long v9 = v5[1];
      v12[0] = *v5;
      v12[1] = v9;
      uint64_t result = (uint64_t)llvm::object::ObjectFile::createELFObjectFile(v12, a3, a4);
      break;
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
      long long v8 = v5[1];
      v11[0] = *v5;
      v11[1] = v8;
      llvm::object::ObjectFile::createMachOObjectFile((uint64_t)v11);
    case 24:
    case 25:
    case 26:
      long long v10 = v5[1];
      v12[3] = *v5;
      void v12[4] = v10;
      llvm::object::COFFObjectFile::create();
    case 28:
    case 29:
      llvm::object::ObjectFile::createXCOFFObjectFile();
    case 30:
      llvm::object::ObjectFile::createWasmObjectFile();
    default:
      *(void *)&v14.__val_ = llvm::object::object_category((llvm::object *)a1);
      uint64_t result = llvm::errorCodeToError((llvm *)2, v14, (void *)a4);
      *(unsigned char *)(a4 + 8) |= 1u;
      break;
  }
  return result;
}

uint64_t llvm::object::OffloadBinary::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 > 0x47)
  {
    uint64_t v6 = (llvm::object *)llvm::identify_magic(*(unsigned __int8 **)a1, v3);
    if (v6 == 34)
    {
      uint64_t v7 = *(unsigned __int8 **)a1;
      if ((*(void *)a1 & 7) != 0)
      {
        *(void *)&v18.__val_ = llvm::object::object_category(v6);
        llvm::errorCodeToError((llvm *)3, v18, &v14);
        *(unsigned char *)(a2 + 8) |= 1u;
        uint64_t result = v14;
      }
      else if (*((_DWORD *)v7 + 1) == 1)
      {
        unint64_t v8 = *((void *)v7 + 1);
        unint64_t v9 = *(void *)(a1 + 8);
        if (v8 <= v9 && (unint64_t v10 = *((void *)v7 + 2), v10 <= v8 - 40) && *((void *)v7 + 3) <= v8 - 32)
        {
          if (*(void *)&v7[v10 + 24] <= v9 && *(void *)&v7[v10 + 8] <= v9) {
            operator new();
          }
          *(void *)&v22.__val_ = llvm::object::object_category(v6);
          llvm::errorCodeToError((llvm *)4, v22, &v11);
          *(unsigned char *)(a2 + 8) |= 1u;
          uint64_t result = v11;
        }
        else
        {
          *(void *)&v20.__val_ = llvm::object::object_category(v6);
          llvm::errorCodeToError((llvm *)4, v20, &v12);
          *(unsigned char *)(a2 + 8) |= 1u;
          uint64_t result = v12;
        }
      }
      else
      {
        *(void *)&v21.__val_ = llvm::object::object_category(v6);
        llvm::errorCodeToError((llvm *)3, v21, &v13);
        *(unsigned char *)(a2 + 8) |= 1u;
        uint64_t result = v13;
      }
    }
    else
    {
      *(void *)&v19.__val_ = llvm::object::object_category(v6);
      llvm::errorCodeToError((llvm *)3, v19, &v15);
      *(unsigned char *)(a2 + 8) |= 1u;
      uint64_t result = v15;
    }
  }
  else
  {
    *(void *)&v17.__val_ = llvm::object::object_category((llvm::object *)a1);
    llvm::errorCodeToError((llvm *)3, v17, &v16);
    *(unsigned char *)(a2 + 8) |= 1u;
    uint64_t result = v16;
  }
  *(void *)a2 = result;
  return result;
}

uint64_t llvm::object::OffloadBinary::OffloadBinary(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  long long v5 = *a2;
  long long v44 = a2[1];
  *(_DWORD *)(a1 + 8) = 8;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v44;
  *(void *)a1 = &unk_270DC0DC8;
  *(void *)(a1 + 48) = 0;
  uint64_t v39 = a1 + 48;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v6 = (char **)(a1 + 72);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v7 = *(void *)a2;
  *(void *)(a1 + 96) = *(void *)a2;
  *(void *)(a1 + 104) = a3;
  *(void *)(a1 + 112) = a4;
  uint64_t v8 = *(void *)(a4 + 16);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v7 + *(void *)(a4 + 8);
    uint64_t v40 = v10;
    uint64_t v41 = *(void *)(a4 + 16);
    while (1)
    {
      uint64_t v11 = *(void *)(a1 + 96);
      uint64_t v12 = *(void *)(v10 + 16 * v9);
      uint64_t v13 = v11 + v12;
      if (v11)
      {
        size_t v14 = strlen((const char *)(v11 + v12));
        uint64_t v15 = (const char *)(v11 + *(void *)(v10 + 16 * v9 + 8));
        size_t v16 = strlen(v15);
      }
      else
      {
        size_t v14 = 0;
        size_t v16 = 0;
        uint64_t v15 = *(const char **)(v10 + 16 * v9 + 8);
      }
      *(void *)&long long v45 = v13;
      *((void *)&v45 + 1) = v14;
      int v46 = 0;
      unint64_t v47 = 0;
      char v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::LookupBucketFor<llvm::StringRef>(*(void *)(a1 + 48), *(_DWORD *)(a1 + 64), (uint64_t)&v45, &v47);
      unint64_t v18 = v47;
      if ((v17 & 1) == 0) {
        break;
      }
      int v19 = *(_DWORD *)(v47 + 16);
      std::error_code v20 = *v6;
LABEL_30:
      int v37 = &v20[32 * v19];
      *((void *)v37 + 2) = v15;
      *((void *)v37 + 3) = v16;
      if (++v9 == v8) {
        return a1;
      }
    }
    int v21 = *(_DWORD *)(a1 + 56);
    unsigned int v22 = *(_DWORD *)(a1 + 64);
    if (4 * v21 + 4 >= 3 * v22)
    {
      v22 *= 2;
    }
    else if (v22 + ~v21 - *(_DWORD *)(a1 + 60) > v22 >> 3)
    {
LABEL_10:
      size_t v42 = v16;
      ++*(_DWORD *)(a1 + 56);
      if (*(void *)v18 != -1) {
        --*(_DWORD *)(a1 + 60);
      }
      *(_OWORD *)unint64_t v18 = v45;
      *(_DWORD *)(v18 + 16) = 0;
      unint64_t v24 = *(char **)(a1 + 80);
      unint64_t v23 = *(void *)(a1 + 88);
      uint64_t v43 = v15;
      if ((unint64_t)v24 >= v23)
      {
        uint64_t v26 = v6;
        uint64_t v27 = *v6;
        uint64_t v28 = (v24 - *v6) >> 5;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 59) {
          abort();
        }
        uint64_t v30 = v23 - (void)v27;
        if (v30 >> 4 > v29) {
          unint64_t v29 = v30 >> 4;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          if (v31 >> 59) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v32 = (char *)operator new(32 * v31);
        }
        else
        {
          uint64_t v32 = 0;
        }
        unint64_t v33 = &v32[32 * v28];
        *(void *)unint64_t v33 = v13;
        *((void *)v33 + 1) = v14;
        *((void *)v33 + 2) = 0;
        *((void *)v33 + 3) = 0;
        uint64_t v34 = v33;
        uint64_t v6 = v26;
        if (v24 != v27)
        {
          do
          {
            long long v35 = *((_OWORD *)v24 - 1);
            *((_OWORD *)v34 - 2) = *((_OWORD *)v24 - 2);
            *((_OWORD *)v34 - 1) = v35;
            v34 -= 32;
            v24 -= 32;
          }
          while (v24 != v27);
          unint64_t v24 = *v26;
        }
        uint64_t v10 = v40;
        uint64_t v8 = v41;
        uint64_t v36 = &v32[32 * v31];
        long long v25 = v33 + 32;
        *(void *)(a1 + 72) = v34;
        *(void *)(a1 + 80) = v33 + 32;
        *(void *)(a1 + 88) = v36;
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *(void *)unint64_t v24 = v13;
        *((void *)v24 + 1) = v14;
        long long v25 = v24 + 32;
        *((void *)v24 + 2) = 0;
        *((void *)v24 + 3) = 0;
      }
      *(void *)(a1 + 80) = v25;
      std::error_code v20 = *(char **)(a1 + 72);
      int v19 = ((unint64_t)(v25 - v20) >> 5) - 1;
      *(_DWORD *)(v18 + 16) = v19;
      size_t v16 = v42;
      uint64_t v15 = v43;
      goto LABEL_30;
    }
    llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::grow(v39, v22);
    unint64_t v47 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::LookupBucketFor<llvm::StringRef>(*(void *)(a1 + 48), *(_DWORD *)(a1 + 64), (uint64_t)&v45, &v47);
    unint64_t v18 = v47;
    goto LABEL_10;
  }
  return a1;
}

void llvm::object::OffloadBinary::~OffloadBinary(llvm::object::OffloadBinary *this)
{
  *(void *)this = &unk_270DC0DC8;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  MEMORY[0x263E500A0](*((void *)this + 6), 8);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_270DC0DC8;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  MEMORY[0x263E500A0](*((void *)this + 6), 8);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::LookupBucketFor<llvm::StringRef>(uint64_t a1, int a2, uint64_t a3, unint64_t *a4)
{
  if (a2)
  {
    int v7 = a2 - 1;
    unsigned int v8 = (a2 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a3, *(void *)a3 + *(void *)(a3 + 8), a3, a4);
    unint64_t v9 = a1 + 24 * v8;
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a3, *(void *)(a3 + 8), *(void **)v9, *(void *)(v9 + 8)))
    {
      uint64_t result = 1;
    }
    else
    {
      unint64_t v11 = 0;
      int v12 = 1;
      while (*(void *)v9 != -1)
      {
        if (v11) {
          BOOL v13 = 0;
        }
        else {
          BOOL v13 = *(void *)v9 == -2;
        }
        if (v13) {
          unint64_t v11 = v9;
        }
        unint64_t v17 = v11;
        int v14 = v12 + 1;
        unsigned int v8 = (v8 + v12) & v7;
        unint64_t v9 = a1 + 24 * v8;
        BOOL isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a3, *(void *)(a3 + 8), *(void **)v9, *(void *)(v9 + 8));
        unint64_t v11 = v17;
        BOOL v16 = isEqual;
        uint64_t result = 1;
        int v12 = v14;
        if (v16) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v11) {
        unint64_t v9 = v11;
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a4 = v9;
  return result;
}

_OWORD *llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        _OWORD *result = xmmword_261E8A6B0;
        uint64_t result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = v4;
      do
      {
        if (*(void *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unint64_t v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::LookupBucketFor<llvm::StringRef>(*(void *)a1, *(_DWORD *)(a1 + 16), v13, (unint64_t *)&v17);
          int v14 = v17;
          *unint64_t v17 = *(_OWORD *)v13;
          *((_DWORD *)v14 + 4) = *(_DWORD *)(v13 + 16);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = 24 * v15;
    do
    {
      _OWORD *result = xmmword_261E8A6B0;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v16 -= 24;
    }
    while (v16);
  }
  return result;
}

uint64_t *llvm::RecordStreamer::markDefined(llvm::RecordStreamer *this, const llvm::MCSymbol *a2)
{
  uint64_t v2 = (llvm::RecordStreamer *)((char *)this + 312);
  if ((*(unsigned char *)a2 & 4) != 0)
  {
    unint64_t v5 = (void *)*((void *)a2 - 1);
    unint64_t v6 = *v5;
    uint64_t v3 = v5 + 2;
    unint64_t v4 = v6;
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
  }
  uint64_t result = llvm::StringMap<llvm::RecordStreamer::State,llvm::MallocAllocator>::try_emplace<>(v2, v3, v4);
  uint64_t v8 = *(int *)(*result + 8);
  if v8 <= 6 && ((0x6Fu >> v8)) {
    *(_DWORD *)(*result + 8) = dword_261E90AA0[v8];
  }
  return result;
}

uint64_t *llvm::RecordStreamer::markUsed(llvm::RecordStreamer *this, const llvm::MCSymbol *a2)
{
  uint64_t v2 = (llvm::RecordStreamer *)((char *)this + 312);
  if ((*(unsigned char *)a2 & 4) != 0)
  {
    unint64_t v5 = (void *)*((void *)a2 - 1);
    unint64_t v6 = *v5;
    uint64_t v3 = v5 + 2;
    unint64_t v4 = v6;
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
  }
  uint64_t result = llvm::StringMap<llvm::RecordStreamer::State,llvm::MallocAllocator>::try_emplace<>(v2, v3, v4);
  int v8 = *(_DWORD *)(*result + 8);
  if (v8 == 5 || v8 == 0) {
    *(_DWORD *)(*result + 8) = 5;
  }
  return result;
}

uint64_t *llvm::RecordStreamer::emitLabel(llvm::RecordStreamer *a1, llvm::MCSymbol *a2)
{
  llvm::MCStreamer::emitLabel((uint64_t)a1, a2, 0);
  return llvm::RecordStreamer::markDefined(a1, a2);
}

uint64_t llvm::RecordStreamer::emitAssignment(llvm::RecordStreamer *a1, const llvm::MCSymbol *a2, uint64_t a3)
{
  llvm::RecordStreamer::markDefined(a1, a2);
  return llvm::MCStreamer::emitAssignment((uint64_t)a1, (uint64_t)a2, a3);
}

uint64_t llvm::RecordStreamer::emitSymbolAttribute(llvm::RecordStreamer *this, llvm::MCSymbol *a2, int a3)
{
  switch(a3)
  {
    case 24:
      goto LABEL_4;
    case 16:
LABEL_18:
      llvm::RecordStreamer::markUsed(this, a2);
      return 1;
    case 9:
LABEL_4:
      unint64_t v6 = (llvm::RecordStreamer *)((char *)this + 312);
      if ((*(unsigned char *)a2 & 4) != 0)
      {
        unint64_t v9 = (void *)*((void *)a2 - 1);
        unint64_t v10 = *v9;
        int v7 = v9 + 2;
        unint64_t v8 = v10;
      }
      else
      {
        int v7 = 0;
        unint64_t v8 = 0;
      }
      uint64_t v11 = llvm::StringMap<llvm::RecordStreamer::State,llvm::MallocAllocator>::try_emplace<>(v6, v7, v8);
      unsigned int v12 = *(_DWORD *)(*v11 + 8);
      if (v12 <= 5)
      {
        int v13 = 1 << v12;
        if ((v13 & 0x23) != 0)
        {
          if (a3 == 24) {
            int v14 = 6;
          }
          else {
            int v14 = 1;
          }
        }
        else
        {
          if ((v13 & 0xC) == 0) {
            goto LABEL_17;
          }
          if (a3 == 24) {
            int v14 = 4;
          }
          else {
            int v14 = 3;
          }
        }
        *(_DWORD *)(*v11 + 8) = v14;
      }
LABEL_17:
      if (a3 == 16) {
        goto LABEL_18;
      }
      break;
  }
  return 1;
}

uint64_t *llvm::RecordStreamer::emitZerofill(llvm::RecordStreamer *a1, int a2, llvm::MCSymbol *a3)
{
  return llvm::RecordStreamer::markDefined(a1, a3);
}

void llvm::RecordStreamer::emitELFSymverDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v25 = 0;
  unint64_t v9 = v25;
  if (v8) {
    goto LABEL_7;
  }
  int v10 = *(_DWORD *)(a1 + 344);
  unsigned int v11 = *(_DWORD *)(a1 + 352);
  if (4 * v10 + 4 >= 3 * v11)
  {
    v11 *= 2;
    goto LABEL_25;
  }
  if (v11 + ~v10 - *(_DWORD *)(a1 + 348) <= v11 >> 3)
  {
LABEL_25:
    llvm::DenseMap<llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>::grow(a1 + 336, v11);
    long long v25 = 0;
    unint64_t v9 = v25;
  }
  ++*(_DWORD *)(a1 + 344);
  if (*v9 != -4096) {
    --*(_DWORD *)(a1 + 348);
  }
  *unint64_t v9 = a2;
  v9[1] = 0;
  _OWORD v9[2] = 0;
  v9[3] = 0;
LABEL_7:
  unint64_t v12 = v9[3];
  int v13 = (void *)v9[2];
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v15 = v9[1];
    uint64_t v16 = ((uint64_t)v13 - v15) >> 4;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60) {
      abort();
    }
    uint64_t v18 = v12 - v15;
    if (v18 >> 3 > v17) {
      unint64_t v17 = v18 >> 3;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19) {
      std::error_code v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(v9 + 3), v19);
    }
    else {
      std::error_code v20 = 0;
    }
    int v21 = &v20[16 * v16];
    unsigned int v22 = &v20[16 * v19];
    *(void *)int v21 = a3;
    *((void *)v21 + 1) = a4;
    int v14 = v21 + 16;
    unint64_t v24 = (char *)v9[1];
    unint64_t v23 = (char *)v9[2];
    if (v23 != v24)
    {
      do
      {
        *((_OWORD *)v21 - 1) = *((_OWORD *)v23 - 1);
        v21 -= 16;
        v23 -= 16;
      }
      while (v23 != v24);
      unint64_t v23 = (char *)v9[1];
    }
    v9[1] = (uint64_t)v21;
    _OWORD v9[2] = (uint64_t)v14;
    v9[3] = (uint64_t)v22;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    *int v13 = a3;
    v13[1] = a4;
    int v14 = v13 + 2;
  }
  _OWORD v9[2] = (uint64_t)v14;
}

void llvm::RecordStreamer::flushSymverDirectives(llvm::RecordStreamer *this)
{
  uint64_t v1 = 0;
  v114[8] = *MEMORY[0x263EF8340];
  __int16 v102 = 0;
  uint64_t v103 = 0;
  uint64_t v104 = 0x1000000000;
  v100[0] = 0;
  v100[1] = 0;
  int v101 = 0;
  unsigned int v112 = v114;
  long long v113 = xmmword_261E8ACE0;
  uint64_t v2 = (void *)*((void *)this + 38);
  uint64_t v3 = v2 + 3;
  unint64_t v4 = (void *)v2[4];
  unint64_t v5 = v2 + 1;
  unint64_t v6 = (void *)v2[2];
  int v7 = v2 + 5;
  char v8 = (unsigned char *)v2[6];
  unint64_t v9 = v2 + 7;
  int v10 = (void *)v2[8];
  *(void *)&long long v93 = v4;
  *((void *)&v93 + 1) = v6;
  __int16 v94 = v8;
  uint64_t v95 = v10;
  unsigned int v96 = v3;
  __int16 v97 = v5;
  unsigned int v98 = v7;
  int v99 = v9;
  __int16 v81 = v3;
  uint64_t v83 = v9;
  __int16 v80 = v5;
  unsigned int v85 = v7;
  while (v4 != v3 || v6 != v5 || v8 != (unsigned char *)v7 || v10 != v9 || v96 != v3 || v97 != v5 || v98 != v7 || v99 != v9)
  {
    uint64_t v11 = 0;
    uint64_t v111 = 0;
    uint64_t v107 = 0;
    uint64_t v109 = 0;
    *(void *)&long long v106 = 0;
    unsigned int v105 = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<0ul>;
    *((void *)&v106 + 1) = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<1ul>;
    __int16 v108 = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<2ul>;
    unsigned int v110 = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<3ul>;
    do
    {
      unint64_t v12 = *(uint64_t (**)(void *))((char *)&v105 + v11);
      uint64_t v13 = *(uint64_t *)((char *)&v105 + v11 + 8);
      int v14 = (void *)((char *)&v93 + (v13 >> 1));
      if (v13) {
        unint64_t v12 = *(uint64_t (**)(void *))(*v14 + v12);
      }
      uint64_t v15 = v12(v14);
      uint64_t v16 = (const llvm::GlobalValue *)v15;
      if (v15) {
        break;
      }
      BOOL v28 = v11 == 48;
      v11 += 16;
    }
    while (!v28);
    if ((*(unsigned char *)(v15 + 23) & 0x10) != 0)
    {
      *(void *)&long long v113 = 0;
      unint64_t v17 = *(void *)llvm::Value::getValueName((uint64_t ***)v15) + 1;
      if (*((void *)&v113 + 1) < v17) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v112, v114, v17, 1);
      }
      llvm::Mangler::getNameWithPrefix((llvm::Mangler *)v100, (uint64_t)&v112, v16, 0);
      unint64_t v19 = v112;
      size_t v18 = v113;
      unsigned int v20 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)&v102, v112, v113);
      uint64_t v1 = v102;
      uint64_t v21 = v20;
      uint64_t v22 = v102[v20];
      if (v22 == -8)
      {
        LODWORD(v104) = v104 - 1;
      }
      else if (v22)
      {
        unint64_t v9 = v83;
        int v7 = v85;
LABEL_32:
        *(void *)(v22 + 8) = v16;
        goto LABEL_33;
      }
      unint64_t v23 = operator new(v18 + 17, (std::align_val_t)8uLL);
      unint64_t v24 = v23;
      long long v25 = (char *)(v23 + 2);
      if (v18) {
        memcpy(v23 + 2, v19, v18);
      }
      v25[v18] = 0;
      size_t *v24 = v18;
      v24[1] = 0;
      v1[v21] = v24;
      ++HIDWORD(v103);
      unsigned int v26 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v102, v21);
      uint64_t v1 = v102;
      uint64_t v27 = v26;
      uint64_t v3 = v81;
      unint64_t v9 = v83;
      unint64_t v5 = v80;
      int v7 = v85;
      while (1)
      {
        uint64_t v22 = v102[v27];
        BOOL v28 = !v22 || v22 == -8;
        if (!v28) {
          break;
        }
        ++v27;
      }
      goto LABEL_32;
    }
LABEL_33:
    uint64_t v29 = 0;
    uint64_t v111 = 0;
    uint64_t v107 = 0;
    uint64_t v109 = 0;
    *(void *)&long long v106 = 0;
    unsigned int v105 = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<0ul>;
    *((void *)&v106 + 1) = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<1ul>;
    __int16 v108 = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<2ul>;
    unsigned int v110 = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<3ul>;
    do
    {
      uint64_t v30 = *(uint64_t (**)(void *))((char *)&v105 + v29);
      uint64_t v31 = *(uint64_t *)((char *)&v105 + v29 + 8);
      uint64_t v32 = (void *)((char *)&v93 + (v31 >> 1));
      if (v31) {
        uint64_t v30 = *(uint64_t (**)(void *))(*v32 + v30);
      }
      if (v30(v32)) {
        break;
      }
      BOOL v28 = v29 == 48;
      v29 += 16;
    }
    while (!v28);
    unint64_t v6 = (void *)*((void *)&v93 + 1);
    unint64_t v4 = (void *)v93;
    char v8 = v94;
    int v10 = v95;
  }
  unint64_t v33 = this;
  if (*((_DWORD *)this + 86))
  {
    uint64_t v34 = *((unsigned int *)this + 88);
    if (v34)
    {
      uint64_t v35 = 32 * v34;
      uint64_t v36 = (void *)*((void *)this + 42);
      while ((*v36 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v36 += 4;
        v35 -= 32;
        if (!v35) {
          goto LABEL_113;
        }
      }
    }
    else
    {
      uint64_t v36 = (void *)*((void *)this + 42);
    }
    uint64_t v37 = *((void *)this + 42) + 32 * v34;
    if (v36 != (void *)v37)
    {
      uint64_t v38 = &v107;
      long long v77 = (uint64_t *)((char *)this + 312);
      uint64_t v75 = v103;
      uint64_t v39 = (unsigned char *)*v36;
      unint64_t v76 = (void *)v37;
      while (1)
      {
        if ((*v39 & 4) != 0)
        {
          size_t v42 = (void *)*((void *)v39 - 1);
          unint64_t v43 = *v42;
          uint64_t v40 = v42 + 2;
          unint64_t v41 = v43;
        }
        else
        {
          uint64_t v40 = 0;
          unint64_t v41 = 0;
        }
        int Key = llvm::StringMapImpl::FindKey(v77, v40, v41);
        __int16 v84 = v39;
        if (Key == -1 || Key == (unint64_t)*((unsigned int *)v33 + 80)) {
          break;
        }
        int v45 = *(_DWORD *)(*(void *)(*v77 + 8 * Key) + 8);
        int v55 = v45 - 1;
        if ((v45 - 1) >= 6 || ((0x2Du >> v55) & 1) == 0) {
          goto LABEL_55;
        }
        uint64_t v46 = dword_261E90ABC[v55];
        if ((v45 - 2) < 3) {
          goto LABEL_80;
        }
        BOOL v86 = 0;
        int v47 = 0;
LABEL_56:
        if ((*v39 & 4) != 0)
        {
          uint64_t v50 = (void *)*((void *)v39 - 1);
          unint64_t v51 = *v50;
          uint64_t v48 = v50 + 2;
          unint64_t v49 = v51;
        }
        else
        {
          uint64_t v48 = 0;
          unint64_t v49 = 0;
        }
        uint64_t v52 = llvm::ValueSymbolTable::lookup(*(void *)(*((void *)v33 + 38) + 112), v48, v49);
        if (v52
          || ((*v39 & 4) != 0
            ? (v56 = (void *)*((void *)v39 - 1), v57 = *v56, long long v53 = v56 + 2, v54 = v57)
            : (long long v53 = 0, v54 = 0),
              (int v58 = llvm::StringMapImpl::FindKey((uint64_t *)&v102, v53, v54), v58 != -1)
           && v58 != v75
           && (uint64_t v52 = *(void *)(v1[v58] + 8)) != 0))
        {
          if (v47)
          {
            if ((*(_DWORD *)(v52 + 32) & 0xF) != 0)
            {
              if ((*(_DWORD *)(v52 + 32) & 0xFu) - 7 >= 2)
              {
                if ((*(_DWORD *)(v52 + 32) & 0xFu) - 2 > 8) {
                  uint64_t v46 = 0;
                }
                else {
                  uint64_t v46 = dword_261E90AD4[(*(_DWORD *)(v52 + 32) & 0xF) - 2];
                }
              }
              else
              {
                uint64_t v46 = 17;
              }
            }
            else
            {
              uint64_t v46 = 9;
            }
          }
          if (v86)
          {
LABEL_80:
            int v59 = 1;
LABEL_93:
            BOOL v86 = v59;
            goto LABEL_94;
          }
          if ((*(_DWORD *)(v52 + 32) & 0xF) == 1)
          {
            int v60 = 1;
LABEL_92:
            int v59 = v60 ^ 1;
            goto LABEL_93;
          }
          if (*(unsigned char *)(v52 + 16))
          {
            if (*(unsigned char *)(v52 + 16) == 3)
            {
              BOOL v61 = (*(_DWORD *)(v52 + 20) & 0x7FFFFFF) == 0;
              goto LABEL_89;
            }
          }
          else if (*(void *)(v52 + 72) == v52 + 72)
          {
            BOOL v61 = (*(_DWORD *)(v52 + 32) & 0x1000000) == 0;
LABEL_89:
            int v60 = v61;
            goto LABEL_92;
          }
          int v60 = 0;
          goto LABEL_92;
        }
LABEL_94:
        uint64_t v62 = (long long *)v36[1];
        __int16 v82 = (long long *)v36[2];
        if (v62 != v82)
        {
          uint64_t v63 = "@";
          if (v86) {
            uint64_t v63 = "@@";
          }
          __int16 v78 = v63;
          do
          {
            uint64_t v64 = v46;
            long long v92 = *v62;
            llvm::StringRef::split((uint64_t *)&v92, "@@@", 3uLL, (uint64_t)v89);
            uint64_t v65 = v38;
            unsigned int v105 = v38;
            long long v106 = xmmword_261E8A720;
            if (v91 && *v90 != 64)
            {
              __int16 v88 = 773;
              v87[0] = v89[0];
              v87[1] = v89[1];
              v87[2] = v78;
              *(void *)&long long v93 = v87;
              __int16 v94 = v90;
              uint64_t v95 = v91;
              LOWORD(v96) = 1282;
              *(void *)&long long v92 = llvm::Twine::toStringRef((uint64_t)&v93, (uint64_t)&v105);
              *((void *)&v92 + 1) = v66;
            }
            int v67 = (llvm::MCContext *)*((void *)this + 1);
            LOWORD(v96) = 261;
            long long v93 = v92;
            Symbol = (const llvm::MCSymbol *)llvm::MCContext::getOrCreateSymbol(v67, (const llvm::Twine *)&v93);
            uint64_t v69 = *((void *)this + 1);
            unint64_t v70 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v69 + 184, 24, 3);
            int v71 = *(unsigned __int8 *)(*(void *)(v69 + 144) + 18) << 16;
            *(unsigned char *)unint64_t v70 = 2;
            *(_DWORD *)(v70 + 1) = v71 | (*(unsigned __int8 *)(v70 + 4) << 24);
            *(void *)(v70 + 8) = 0;
            *(void *)(v70 + 16) = v84;
            if (v86) {
              llvm::RecordStreamer::markDefined(this, Symbol);
            }
            llvm::MCStreamer::emitAssignment((uint64_t)this, (uint64_t)Symbol, v70);
            uint64_t v38 = v65;
            uint64_t v46 = v64;
            if (v64) {
              (*(void (**)(llvm::RecordStreamer *, const llvm::MCSymbol *, uint64_t))(*(void *)this + 296))(this, Symbol, v64);
            }
            if (v105 != v65) {
              free(v105);
            }
            ++v62;
          }
          while (v62 != v82);
        }
        v36 += 4;
        unint64_t v33 = this;
        if (v36 != v76)
        {
          while (1)
          {
            uint64_t v39 = (unsigned char *)*v36;
            if ((*v36 | 0x1000) != 0xFFFFFFFFFFFFF000) {
              break;
            }
            v36 += 4;
            if (v36 == v76) {
              goto LABEL_113;
            }
          }
          if (v36 != v76) {
            continue;
          }
        }
        goto LABEL_113;
      }
      int v45 = 0;
LABEL_55:
      uint64_t v46 = 0;
      BOOL v86 = (v45 - 2) < 3;
      int v47 = 1;
      goto LABEL_56;
    }
  }
LABEL_113:
  if (v112 != v114) {
    free(v112);
  }
  MEMORY[0x263E500A0](v100[0], 8);
  if (HIDWORD(v103))
  {
    uint64_t v72 = v103;
    if (v103)
    {
      uint64_t v73 = v1;
      do
      {
        if (*v73 != -8 && *v73 != 0) {
          MEMORY[0x263E500A0]();
        }
        ++v73;
        --v72;
      }
      while (v72);
    }
  }
  free(v1);
}

void llvm::RecordStreamer::~RecordStreamer(llvm::RecordStreamer *this)
{
  *(void *)this = &unk_270DC0DF0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>,llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>::destroyAll((unsigned int *)this + 84);
  MEMORY[0x263E500A0](*((void *)this + 42), 8);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 312);
  llvm::MCStreamer::~MCStreamer(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_270DC0DF0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>,llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>::destroyAll((unsigned int *)this + 84);
  MEMORY[0x263E500A0](*((void *)this + 42), 8);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 312);
  llvm::MCStreamer::~MCStreamer(this);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::MCStreamer::getAssemblerPtr(llvm::MCStreamer *this)
{
  return 0;
}

uint64_t llvm::MCStreamer::isVerboseAsm(llvm::MCStreamer *this)
{
  return 0;
}

uint64_t llvm::MCStreamer::hasRawTextSupport(llvm::MCStreamer *this)
{
  return 0;
}

uint64_t llvm::MCStreamer::isIntegratedAssemblerRequired(llvm::MCStreamer *this)
{
  return 0;
}

const char *llvm::MCStreamer::getMnemonic()
{
  return "";
}

uint64_t llvm::MCStreamer::emitIntValueInHex(llvm::MCStreamer *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 512))();
}

uint64_t llvm::MCStreamer::emitIntValueInHexWithPadding(llvm::MCStreamer *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 512))();
}

void llvm::MCStreamer::emitRelocDirective(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[32] = 0;
}

uint64_t llvm::MCStreamer::mayHaveInstructions()
{
  return 1;
}

uint64_t *llvm::StringMap<llvm::RecordStreamer::State,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  uint64_t i = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      uint64_t v9 = i[1];
      ++i;
      uint64_t v8 = v9;
    }
    return i;
  }
  uint64_t v11 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  unint64_t v12 = v11;
  uint64_t v13 = v11 + 16;
  if (a3) {
    memcpy(v11 + 16, a2, a3);
  }
  v13[a3] = 0;
  *(void *)unint64_t v12 = a3;
  *((_DWORD *)v12 + 2) = 0;
  uint64_t *i = (uint64_t)v12;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v6)); !*i || *i == -8; ++i)
    ;
  return i;
}

void *llvm::DenseMap<llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        void *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 32 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if ((*(void *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          size_t v18 = 0;
          uint64_t v15 = v18;
          *size_t v18 = *(void *)v13;
          v15[1] = 0;
          void v15[2] = 0;
          void v15[3] = 0;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          void v15[3] = *(void *)(v13 + 24);
          *(void *)(v13 + 8) = 0;
          *(void *)(v13 + 16) = 0;
          *(void *)(v13 + 24) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 32 * v16;
    do
    {
      void *result = -4096;
      result += 4;
      v17 -= 32;
    }
    while (v17);
  }
  return result;
}

BOOL llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<0ul>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[4];
  if (*a1 != v2) {
    *a1 = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

BOOL llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<1ul>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v1 != v2) {
    *(void *)(a1 + 8) = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

BOOL llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<2ul>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 48);
  if (v1 != v2) {
    *(void *)(a1 + 16) = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

BOOL llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<3ul>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 56);
  if (v1 != v2) {
    *(void *)(a1 + 24) = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

uint64_t llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<0ul>(void *a1)
{
  if (*a1 == a1[4] || *a1 == 0) {
    return 0;
  }
  else {
    return *a1 - 56;
  }
}

uint64_t llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<1ul>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == *(void *)(a1 + 40) || v1 == 0) {
    return 0;
  }
  else {
    return v1 - 56;
  }
}

uint64_t llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<2ul>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1 == *(void *)(a1 + 48) || v1 == 0) {
    return 0;
  }
  else {
    return v1 - 48;
  }
}

uint64_t llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<3ul>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1 == *(void *)(a1 + 56) || v1 == 0) {
    return 0;
  }
  else {
    return v1 - 56;
  }
}

uint64_t *llvm::object::SymbolicFile::createSymbolicFile@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v7 = (_OWORD *)a1;
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    a1 = llvm::identify_magic(*(unsigned __int8 **)a1, *(void *)(a1 + 8));
    a2 = a1;
  }
  if (a2 > 0x1E)
  {
LABEL_18:
    *(void *)&v34.__val_ = llvm::object::object_category((llvm::object *)a1);
    uint64_t result = (uint64_t *)llvm::errorCodeToError((llvm *)2, v34, (void *)a5);
    *(unsigned char *)(a5 + 8) |= 1u;
    return result;
  }
  if (((1 << a2) & 0x772FFFF8) == 0)
  {
    if (a2 == 1 && a3)
    {
      long long v17 = v7[1];
      v26[0] = *v7;
      v26[1] = v17;
      llvm::object::IRObjectFile::create((uint64_t)v26, a3, (uint64_t)&v29);
      *(unsigned char *)(a5 + 8) = *(unsigned char *)(a5 + 8) & 0xFE | v29.n128_u8[8] & 1;
      unint64_t v18 = v29.n128_u64[0];
      v29.n128_u64[0] = 0;
      *(void *)a5 = v18;
      return llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected((uint64_t *)&v29);
    }
    goto LABEL_18;
  }
  if (((1 << a2) & 0x742FFDE8) != 0)
  {
    long long v9 = v7[1];
    v25[0] = *v7;
    v25[1] = v9;
    llvm::object::ObjectFile::createObjectFile((uint64_t)v25, a2, a4, (uint64_t)&v29);
    *(unsigned char *)(a5 + 8) = *(unsigned char *)(a5 + 8) & 0xFE | v29.n128_u8[8] & 1;
    unint64_t v10 = v29.n128_u64[0];
    v29.n128_u64[0] = 0;
    *(void *)a5 = v10;
    uint64_t v11 = &v29;
  }
  else
  {
    if (((1 << a2) & 0x1000210) == 0) {
      operator new();
    }
    long long v13 = v7[1];
    v24[0] = *v7;
    v24[1] = v13;
    llvm::object::ObjectFile::createObjectFile((uint64_t)v24, a2, a4, (uint64_t)&v31);
    if (!a3 || (v32 & 1) != 0)
    {
      *(unsigned char *)(a5 + 8) = *(unsigned char *)(a5 + 8) & 0xFE | v32 & 1;
      unint64_t v19 = v31;
      uint64_t v31 = 0;
      *(void *)a5 = v19;
    }
    else
    {
      llvm::object::IRObjectFile::findBitcodeInObject(v31, v14, &v29);
      if (v30)
      {
        unint64_t v20 = v29.n128_u64[0];
        v29.n128_u64[0] = 0;
        unint64_t v27 = v20;
        llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v27);
        if (v27) {
          (*(void (**)(unint64_t))(*(void *)v27 + 8))(v27);
        }
        *(unsigned char *)(a5 + 8) = *(unsigned char *)(a5 + 8) & 0xFE | v32 & 1;
        uint64_t v21 = v31;
        uint64_t v31 = 0;
        *(void *)a5 = v21;
      }
      else
      {
        long long v15 = v7[1];
        v23[0] = v29;
        v23[1] = v15;
        llvm::object::IRObjectFile::create((uint64_t)v23, a3, (uint64_t)&v27);
        *(unsigned char *)(a5 + 8) = *(unsigned char *)(a5 + 8) & 0xFE | v28 & 1;
        uint64_t v16 = v27;
        unint64_t v27 = 0;
        *(void *)a5 = v16;
        llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected((uint64_t *)&v27);
      }
      if (v30)
      {
        unint64_t v22 = v29.n128_u64[0];
        v29.n128_u64[0] = 0;
        if (v22) {
          (*(void (**)(unint64_t))(*(void *)v22 + 8))(v22);
        }
      }
    }
    uint64_t v11 = (__n128 *)&v31;
  }
  return llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected((uint64_t *)v11);
}

void llvm::object::COFFImportFile::~COFFImportFile(llvm::object::COFFImportFile *this)
{
}

void llvm::object::COFFImportFile::moveSymbolNext(uint64_t a1, void *a2)
{
}

llvm::raw_ostream *llvm::object::COFFImportFile::printSymbolName@<X0>(llvm::raw_ostream *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (!a3)
  {
    uint64_t v7 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v7) > 5)
    {
      *(_WORD *)(v7 + 4) = 24432;
      *(_DWORD *)uint64_t v7 = 1835622239;
      *((void *)this + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(this, "__imp_", 6uLL);
    }
  }
  unsigned int v8 = (const char *)(*(void *)(a2 + 16) + 20);
  size_t v9 = strlen(v8);
  uint64_t result = llvm::raw_ostream::operator<<(this, v8, v9);
  *a4 = 0;
  return result;
}

void llvm::object::COFFImportFile::getSymbolFlags(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 8) &= ~1u;
  *(_DWORD *)a1 = 2;
}

uint64_t llvm::object::COFFImportFile::symbol_begin(llvm::object::COFFImportFile *this)
{
  return 0;
}

uint64_t llvm::object::COFFImportFile::symbol_end(llvm::object::COFFImportFile *this)
{
  if ((*(_WORD *)(*((void *)this + 2) + 18) & 3) == 1) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t llvm::object::COFFImportFile::is64Bit(llvm::object::COFFImportFile *this)
{
  return 0;
}

BOOL llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>::count(uint64_t a1, int *a2)
{
  if (*(void *)(a1 + 48))
  {
    uint64_t v2 = *(uint64_t **)(a1 + 40);
    if (v2)
    {
      int v3 = *a2;
      BOOL result = 1;
      do
      {
        int v5 = *((_DWORD *)v2 + 7);
        if (v3 >= v5)
        {
          if (v5 >= v3) {
            return result;
          }
          ++v2;
        }
        uint64_t v2 = (uint64_t *)*v2;
      }
      while (v2);
    }
    return 0;
  }
  else
  {
    unint64_t v6 = *(_DWORD **)a1;
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    uint64_t v8 = *(void *)a1 + 4 * v7;
    if (v7)
    {
      uint64_t v9 = 4 * v7;
      while (*v6 != *a2)
      {
        ++v6;
        v9 -= 4;
        if (!v9) {
          goto LABEL_14;
        }
      }
    }
    else
    {
LABEL_14:
      unint64_t v6 = (_DWORD *)v8;
    }
    return v6 != (_DWORD *)v8;
  }
}

uint64_t llvm::MachO::SymbolSet::symbols@<X0>(uint64_t this@<X0>, int64x2_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(this + 96);
  uint64_t v4 = *(unsigned int *)(this + 112);
  if (*(_DWORD *)(this + 104))
  {
    uint64_t v5 = this;
    v8.i64[0] = *(void *)(this + 96);
    v8.i64[1] = v3 + 32 * v4;
    this = llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)&v8);
    int64x2_t v6 = v8;
    uint64_t v3 = *(void *)(v5 + 96);
    uint64_t v4 = *(unsigned int *)(v5 + 112);
  }
  else
  {
    int64x2_t v6 = vdupq_n_s64(v3 + 32 * v4);
  }
  *a2 = v6;
  uint64_t v7 = v3 + 32 * v4;
  a2[1].i64[0] = v7;
  a2[1].i64[1] = v7;
  return this;
}

uint64_t llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets(uint64_t result)
{
  char v7 = 0;
  v8[0] = 0;
  v8[1] = 0;
  char v5 = 3;
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v1 = *(unsigned __int8 **)result;
  if (*(void *)result != *(void *)(result + 8))
  {
    uint64_t v2 = (unsigned __int8 **)result;
    do
    {
      uint64_t v11 = v1;
      uint64_t v12 = v1 + 8;
      uint64_t v9 = &v7;
      unint64_t v10 = v8;
      BOOL result = std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v13, &v11, (unsigned __int8 **)&v9);
      if ((result & 1) == 0)
      {
        uint64_t v3 = (uint64_t)(*v2 + 8);
        uint64_t v11 = *v2;
        uint64_t v12 = (unsigned __int8 *)v3;
        uint64_t v9 = &v5;
        unint64_t v10 = v6;
        BOOL result = std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v13, &v11, (unsigned __int8 **)&v9);
        if (!result) {
          break;
        }
      }
      uint64_t v4 = v2[1];
      uint64_t v1 = *v2 + 32;
      *uint64_t v2 = v1;
    }
    while (v1 != v4);
  }
  return result;
}

BOOL std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  if (**a2 != **a3) {
    return 0;
  }
  uint64_t v4 = a2[1];
  size_t v5 = *((void *)v4 + 1);
  int64x2_t v6 = a3[1];
  if (v5 != *((void *)v6 + 1)) {
    return 0;
  }
  if (v5) {
    return memcmp(*(const void **)v4, *(const void **)v6, v5) == 0;
  }
  return 1;
}

uint64_t llvm::object::TapiUniversal::TapiUniversal(uint64_t a1, long long *a2, llvm::MachO::InterfaceFile **a3)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  long long v6 = a2[1];
  long long v82 = *a2;
  long long v5 = v82;
  long long v83 = v6;
  *(_DWORD *)(a1 + 8) = 4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = 0u;
  char v7 = (llvm::MachO::InterfaceFile **)(a1 + 48);
  *(void *)a1 = &unk_270DC1368;
  *(_OWORD *)(a1 + 64) = 0u;
  long long v8 = a2[1];
  v81[0] = *a2;
  v81[1] = v8;
  llvm::MachO::TextAPIReader::get((uint64_t *)v81, (uint64_t)&v84);
  uint64_t v9 = v84;
  __int16 v84 = 0;
  if ((v85 & 1) == 0)
  {
    __int16 v80 = a3;
    std::unique_ptr<llvm::MachO::InterfaceFile>::reset[abi:nn180100](v7, v9);
    unint64_t v10 = *v7;
    int v11 = *((char *)*v7 + 287);
    if (v11 >= 0) {
      uint64_t v12 = (uint64_t)*v7 + 264;
    }
    else {
      uint64_t v12 = *((void *)*v7 + 33);
    }
    if (v11 >= 0) {
      uint64_t v13 = *((unsigned __int8 *)*v7 + 287);
    }
    else {
      uint64_t v13 = *((void *)*v7 + 34);
    }
    uint64_t v14 = *((unsigned int *)v10 + 26);
    if (v14)
    {
      LODWORD(v15) = 0;
      uint64_t v16 = (unsigned __int8 *)*((void *)v10 + 12);
      uint64_t v17 = 24 * v14;
      do
      {
        int v18 = *v16;
        v16 += 24;
        int v19 = 1 << v18;
        if (v18 == 16) {
          int v20 = 0;
        }
        else {
          int v20 = v19;
        }
        unint64_t v15 = v20 | v15;
        v17 -= 24;
      }
      while (v17);
      if (v15)
      {
        unsigned int v21 = 0;
        unsigned int v22 = 0;
LABEL_25:
        unsigned int v26 = v22;
        unint64_t v27 = *(void *)(a1 + 64);
        while (1)
        {
          unint64_t v28 = *(void *)(a1 + 72);
          if (v27 < v28) {
            break;
          }
          uint64_t v29 = *(void *)(a1 + 56);
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v29) >> 3);
          unint64_t v31 = v30 + 1;
          if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_98:
          }
            abort();
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - v29) >> 3);
          if (2 * v32 > v31) {
            unint64_t v31 = 2 * v32;
          }
          if (v32 >= 0x555555555555555) {
            unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33) {
            unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v33);
          }
          else {
            uint64_t v34 = 0;
          }
          unint64_t v35 = v33 + 24 * v30;
          *(void *)unint64_t v35 = v12;
          *(void *)(v35 + 8) = v13;
          *(unsigned char *)(v35 + 16) = v26;
          uint64_t v37 = *(char **)(a1 + 56);
          uint64_t v36 = *(char **)(a1 + 64);
          unint64_t v38 = v35;
          if (v36 != v37)
          {
            do
            {
              long long v39 = *(_OWORD *)(v36 - 24);
              *(unsigned char *)(v38 - 8) = *(v36 - 8);
              *(_OWORD *)(v38 - 24) = v39;
              v38 -= 24;
              v36 -= 24;
            }
            while (v36 != v37);
            uint64_t v36 = *(char **)(a1 + 56);
          }
          unint64_t v27 = v35 + 24;
          *(void *)(a1 + 56) = v38;
          *(void *)(a1 + 64) = v35 + 24;
          *(void *)(a1 + 72) = v33 + 24 * v34;
          if (v36) {
            operator delete(v36);
          }
          *(void *)(a1 + 64) = v27;
          if (v21 != -1) {
            goto LABEL_43;
          }
LABEL_49:
          unsigned int v21 = v26;
          if (v26 == -1) {
            goto LABEL_50;
          }
        }
        *(void *)unint64_t v27 = v12;
        *(void *)(v27 + 8) = v13;
        *(unsigned char *)(v27 + 16) = v26;
        v27 += 24;
        *(void *)(a1 + 64) = v27;
LABEL_43:
        uint64_t v40 = v26;
        if ((v26 & 0xFFFFFFE0) != 0) {
          uint64_t v41 = v26;
        }
        else {
          uint64_t v41 = 31;
        }
        while (v41 != v40)
        {
          unsigned int v42 = v40 + 1;
          unint64_t v43 = v15 >> v40++;
          if ((v43 & 2) != 0)
          {
            unsigned int v26 = v42;
            goto LABEL_49;
          }
        }
        goto LABEL_50;
      }
    }
    else
    {
      unint64_t v15 = 0;
    }
    uint64_t v24 = 0;
    while (v24 != 31)
    {
      unsigned int v22 = v24 + 1;
      unint64_t v25 = v15 >> v24++;
      if ((v25 & 2) != 0)
      {
        if (v22 == -1) {
          break;
        }
        unsigned int v21 = v22;
        goto LABEL_25;
      }
    }
LABEL_50:
    long long v44 = *v7;
    int v45 = (uint64_t *)*((void *)*v7 + 47);
    uint64_t v46 = (uint64_t *)*((void *)v44 + 48);
    if (v45 != v46)
    {
      while (1)
      {
        uint64_t v47 = *v45;
        int v48 = *(char *)(*v45 + 287);
        uint64_t v49 = v48 >= 0 ? *v45 + 264 : *(void *)(*v45 + 264);
        uint64_t v50 = v48 >= 0 ? *(unsigned __int8 *)(*v45 + 287) : *(void *)(*v45 + 272);
        uint64_t v51 = *(unsigned int *)(v47 + 104);
        if (v51)
        {
          LODWORD(v52) = 0;
          long long v53 = *(unsigned __int8 **)(v47 + 96);
          uint64_t v54 = 24 * v51;
          do
          {
            int v55 = *v53;
            v53 += 24;
            int v56 = 1 << v55;
            if (v55 == 16) {
              int v57 = 0;
            }
            else {
              int v57 = v56;
            }
            unint64_t v52 = v57 | v52;
            v54 -= 24;
          }
          while (v54);
          if (v52)
          {
            unsigned int v58 = 0;
            unsigned int v59 = 0;
            goto LABEL_71;
          }
        }
        else
        {
          unint64_t v52 = 0;
        }
        uint64_t v60 = 0;
        do
        {
          if (v60 == 31) {
            goto LABEL_95;
          }
          unsigned int v59 = v60 + 1;
          unint64_t v61 = v52 >> v60++;
        }
        while ((v61 & 2) == 0);
        if (v59 != -1) {
          break;
        }
LABEL_95:
        v45 += 2;
        if (v45 == v46) {
          goto LABEL_96;
        }
      }
      unsigned int v58 = v59;
LABEL_71:
      unsigned int v62 = v59;
      unint64_t v63 = *(void *)(a1 + 64);
      while (1)
      {
        unint64_t v64 = *(void *)(a1 + 72);
        if (v63 >= v64)
        {
          uint64_t v65 = *(void *)(a1 + 56);
          unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v65) >> 3);
          unint64_t v67 = v66 + 1;
          if (v66 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_98;
          }
          unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - v65) >> 3);
          if (2 * v68 > v67) {
            unint64_t v67 = 2 * v68;
          }
          if (v68 >= 0x555555555555555) {
            unint64_t v69 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v69 = v67;
          }
          if (v69) {
            unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v69);
          }
          else {
            uint64_t v70 = 0;
          }
          unint64_t v71 = v69 + 24 * v66;
          *(void *)unint64_t v71 = v49;
          *(void *)(v71 + 8) = v50;
          *(unsigned char *)(v71 + 16) = v62;
          uint64_t v73 = *(char **)(a1 + 56);
          uint64_t v72 = *(char **)(a1 + 64);
          unint64_t v74 = v71;
          if (v72 != v73)
          {
            do
            {
              long long v75 = *(_OWORD *)(v72 - 24);
              *(unsigned char *)(v74 - 8) = *(v72 - 8);
              *(_OWORD *)(v74 - 24) = v75;
              v74 -= 24;
              v72 -= 24;
            }
            while (v72 != v73);
            uint64_t v72 = *(char **)(a1 + 56);
          }
          unint64_t v63 = v71 + 24;
          *(void *)(a1 + 56) = v74;
          *(void *)(a1 + 64) = v71 + 24;
          *(void *)(a1 + 72) = v69 + 24 * v70;
          if (v72) {
            operator delete(v72);
          }
          *(void *)(a1 + 64) = v63;
          if (v58 == -1) {
            goto LABEL_94;
          }
        }
        else
        {
          *(void *)unint64_t v63 = v49;
          *(void *)(v63 + 8) = v50;
          *(unsigned char *)(v63 + 16) = v62;
          v63 += 24;
          *(void *)(a1 + 64) = v63;
        }
        uint64_t v76 = v62;
        uint64_t v77 = 31;
        if ((v62 & 0xFFFFFFE0) != 0) {
          uint64_t v77 = v62;
        }
        do
        {
          if (v77 == v76) {
            goto LABEL_95;
          }
          unsigned int v78 = v76 + 1;
          unint64_t v79 = v52 >> v76++;
        }
        while ((v79 & 2) == 0);
        unsigned int v62 = v78;
LABEL_94:
        unsigned int v58 = v62;
        if (v62 == -1) {
          goto LABEL_95;
        }
      }
    }
LABEL_96:
    a3 = v80;
    if (!*v80) {
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  *a3 = v9;
  if (!v9) {
LABEL_17:
  }
    *a3 = 0;
LABEL_18:
  llvm::Expected<std::unique_ptr<llvm::MachO::InterfaceFile>>::~Expected((uint64_t)&v84);
  return a1;
}

void llvm::object::TapiUniversal::~TapiUniversal(llvm::object::TapiUniversal *this)
{
  *(void *)this = &unk_270DC1368;
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  std::unique_ptr<llvm::MachO::InterfaceFile>::reset[abi:nn180100]((llvm::MachO::InterfaceFile **)this + 6, 0);
}

{
  uint64_t vars8;

  llvm::object::TapiUniversal::~TapiUniversal(this);
  JUMPOUT(0x263E500B0);
}

void llvm::object::TapiUniversal::create()
{
  uint64_t v0 = 0;
  operator new();
}

llvm::MachO::InterfaceFile *std::unique_ptr<llvm::MachO::InterfaceFile>::reset[abi:nn180100](llvm::MachO::InterfaceFile **a1, llvm::MachO::InterfaceFile *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::MachO::InterfaceFile::~InterfaceFile(result);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

void llvm::MachO::InterfaceFile::~InterfaceFile(llvm::MachO::InterfaceFile *this)
{
  uint64_t v2 = *((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v3) {
    std::default_delete<llvm::MachO::SymbolSet>::operator()[abi:nn180100]((uint64_t)this + 448, v3);
  }
  long long v5 = (void **)((char *)this + 424);
  std::vector<llvm::MachO::InterfaceFileRef>::__destroy_vector::operator()[abi:nn180100](&v5);
  long long v5 = (void **)((char *)this + 400);
  std::vector<std::pair<llvm::MachO::Target,std::string>>::__destroy_vector::operator()[abi:nn180100](&v5);
  long long v5 = (void **)((char *)this + 376);
  std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v5);
  long long v5 = (void **)((char *)this + 352);
  std::vector<llvm::MachO::InterfaceFileRef>::__destroy_vector::operator()[abi:nn180100](&v5);
  long long v5 = (void **)((char *)this + 328);
  std::vector<llvm::MachO::InterfaceFileRef>::__destroy_vector::operator()[abi:nn180100](&v5);
  long long v5 = (void **)((char *)this + 304);
  std::vector<std::pair<llvm::MachO::Target,std::string>>::__destroy_vector::operator()[abi:nn180100](&v5);
  if (*((char *)this + 287) < 0) {
    operator delete(*((void **)this + 33));
  }
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  uint64_t v4 = (char *)*((void *)this + 12);
  if (v4 != (char *)this + 112) {
    free(v4);
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this);
}

void std::default_delete<llvm::MachO::SymbolSet>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::destroyAll(a2 + 96);
    MEMORY[0x263E500A0](*(void *)(a2 + 96), 8);
    llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(a2);
    JUMPOUT(0x263E500B0);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::destroyAll(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    char v6 = 0;
    v7[0] = 0;
    v7[1] = 0;
    char v4 = 3;
    v5[0] = 0;
    v5[1] = 0;
    uint64_t v2 = 32 * v1;
    uint64_t v3 = *(unsigned __int8 **)result;
    do
    {
      unint64_t v10 = v3;
      int v11 = v3 + 8;
      long long v8 = &v6;
      uint64_t v9 = v7;
      BOOL result = std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v12, &v10, (unsigned __int8 **)&v8);
      if ((result & 1) == 0)
      {
        unint64_t v10 = v3;
        int v11 = v3 + 8;
        long long v8 = &v4;
        uint64_t v9 = v5;
        BOOL result = std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v12, &v10, (unsigned __int8 **)&v8);
      }
      v3 += 32;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

void std::vector<llvm::MachO::InterfaceFileRef>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 160;
        std::allocator<llvm::MachO::InterfaceFileRef>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<llvm::MachO::InterfaceFileRef>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 24);
  if (v3 != (void *)(a2 + 40)) {
    free(v3);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v4 = *(void **)a2;
    operator delete(v4);
  }
}

void std::vector<std::pair<llvm::MachO::Target,std::string>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<llvm::MachO::Target,std::string>>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<llvm::MachO::Target,std::string>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t llvm::Expected<std::unique_ptr<llvm::MachO::InterfaceFile>>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(llvm::MachO::InterfaceFile **)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(llvm::MachO::InterfaceFile *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    std::unique_ptr<llvm::MachO::InterfaceFile>::reset[abi:nn180100]((llvm::MachO::InterfaceFile **)a1, 0);
  }
  return a1;
}

void llvm::object::ObjectFile::createWasmObjectFile()
{
  uint64_t v0 = 0;
  operator new();
}

void *llvm::object::WasmObjectFile::WasmObjectFile(void *a1, long long *a2, void *a3)
{
  uint64_t v451 = *MEMORY[0x263EF8340];
  long long v6 = *a2;
  long long v5 = a2[1];
  *((_DWORD *)a1 + 2) = 21;
  *((_OWORD *)a1 + 1) = v6;
  *((_OWORD *)a1 + 2) = v5;
  a1[9] = 0;
  char v7 = a1 + 9;
  *a1 = &unk_270DC1390;
  a1[10] = 0;
  a1[11] = 0;
  *((unsigned char *)a1 + 504) = 0;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *((unsigned char *)a1 + 496) = 0;
  a1[72] = 0;
  *((_OWORD *)a1 + 34) = 0u;
  *((_OWORD *)a1 + 35) = 0u;
  *((_OWORD *)a1 + 32) = 0u;
  *((_OWORD *)a1 + 33) = 0u;
  *((_DWORD *)a1 + 146) = -1;
  *((_WORD *)a1 + 294) = 0;
  *((unsigned char *)a1 + 590) = 0;
  *(_OWORD *)(a1 + 75) = 0u;
  *(_OWORD *)(a1 + 77) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_OWORD *)(a1 + 83) = 0u;
  *(_OWORD *)(a1 + 85) = 0u;
  *(_OWORD *)((char *)a1 + 692) = 0u;
  uint64_t v9 = (unsigned int *)a1[2];
  unint64_t v8 = a1[3];
  if (v8 >= 4) {
    size_t v10 = 4;
  }
  else {
    size_t v10 = a1[3];
  }
  a1[6] = v9;
  a1[7] = v10;
  if (v8 < 4 || memcmp(v9, &unk_261E90AF8, v10)) {
    operator new();
  }
  v442 = v9;
  v444 = (char *)v9 + v8;
  if ((uint64_t)v8 <= 7) {
    operator new();
  }
  char v12 = (void *)v9[1];
  *((_DWORD *)a1 + 16) = v12;
  if (v12 != 1)
  {
    v448[0] = "invalid version number: ";
    v448[2] = v12;
    LOWORD(v448[4]) = 2051;
    operator new();
  }
  v446[0] = 0;
  v446[1] = 0;
  int v447 = 0;
  if (v8 >= 9)
  {
    uint64_t v13 = (unsigned __int8 *)(v9 + 2);
    v429 = a1 + 64;
    v425 = a1 + 56;
    v428 = a1 + 35;
    v435 = v7;
    v436 = a3;
    while (1)
    {
      HIDWORD(v438) = 0;
      *(void *)&long long v439 = 0;
      long long v440 = 0u;
      memset(v441, 0, sizeof(v441));
      DWORD2(v439) = -1;
      *(void *)((char *)&v438 + 4) = (v13 - v442);
      int v15 = *v13;
      uint64_t v14 = (void *)*v13;
      v443 = (char *)(v13 + 1);
      LODWORD(v438) = v15;
      int Varuint32 = readVaruint32((uint64_t)&v442);
      if (!Varuint32) {
        operator new();
      }
      LODWORD(v17) = Varuint32;
      std::string::size_type v18 = (std::string::size_type)v443;
      int v19 = &v443[Varuint32];
      if (v19 > v444) {
        operator new();
      }
      unint64_t v20 = 0;
      unsigned int v21 = v14;
      uint64_t String = 0;
      switch((int)v14)
      {
        case 0:
          v448[0] = v443;
          v448[1] = v443;
          v448[2] = v19;
          uint64_t String = readString((uint64_t)v448);
          *((void *)&v438 + 1) = String;
          *(void *)&long long v439 = v23;
          v18 += (LODWORD(v448[1]) - LODWORD(v448[0]));
          uint64_t v17 = (v17 - (LODWORD(v448[1]) - LODWORD(v448[0])));
          if (v23 == 8)
          {
            a3 = v436;
            if (*(void *)String == 0x302E6B6E696C7964)
            {
              unsigned int v21 = 14;
              unint64_t v20 = 8;
              goto LABEL_37;
            }
            unint64_t v20 = 8;
          }
          else
          {
            unint64_t v20 = v23;
            a3 = v436;
            if (v23 == 7)
            {
              if (*(_DWORD *)String == 1802398060 && *(_DWORD *)(String + 3) == 1735289195)
              {
                unsigned int v21 = 15;
                unint64_t v20 = 7;
                goto LABEL_37;
              }
              unint64_t v20 = 7;
            }
            else if (v23 == 6)
            {
              if (*(_DWORD *)String == 1768716644 && *(_WORD *)(String + 4) == 27502)
              {
                unsigned int v21 = 14;
                unint64_t v20 = 6;
                goto LABEL_37;
              }
              unint64_t v20 = 6;
            }
            else if (v23 < 6)
            {
              if (v23 != 4) {
                goto LABEL_474;
              }
              if (*(_DWORD *)String != 1701667182)
              {
                unint64_t v20 = 4;
                goto LABEL_474;
              }
              unsigned int v21 = 17;
              unint64_t v20 = 4;
              goto LABEL_37;
            }
          }
          if (*(_DWORD *)String == 1869374834 && *(_WORD *)(String + 4) == 11875)
          {
            unsigned int v21 = 16;
          }
          else if (v20 == 15)
          {
            if (*(void *)String != 0x665F746567726174 || *(void *)(String + 7) != 0x7365727574616566)
            {
              unint64_t v20 = 15;
LABEL_474:
              uint64_t v432 = String;
              *(void *)&long long v440 = v18;
              *((void *)&v440 + 1) = v17;
              v443 = (char *)(v18 + v17);
              *a3 = 0;
              v445.__r_.__value_.__l.__size_ = v18;
              v445.__r_.__value_.__r.__words[2] = v18 + v17;
              v445.__r_.__value_.__r.__words[0] = v18;
LABEL_475:
              llvm::object::WasmObjectFile::parseCustomSection(&v437, (uint64_t)a1, v432, v20, (uint64_t)&v445);
              uint64_t v34 = v435;
              goto LABEL_476;
            }
            unsigned int v21 = 19;
            unint64_t v20 = 15;
          }
          else
          {
            if (v20 != 9) {
              goto LABEL_474;
            }
            if (*(void *)String != 0x72656375646F7270 || *(unsigned char *)(String + 8) != 115)
            {
              unint64_t v20 = 9;
              goto LABEL_474;
            }
            unsigned int v21 = 18;
            unint64_t v20 = 9;
          }
LABEL_37:
          uint64_t v432 = String;
          unsigned int v25 = 0;
          v448[0] = &v448[2];
          v448[1] = (void *)0x1400000000;
          memset(v449, 0, 20);
          LODWORD(v26) = v21;
          while (1)
          {
            int v27 = llvm::object::WasmSectionOrderChecker::DisallowedPredecessors[20 * (int)v26];
            unsigned int v28 = v25;
            if (v27)
            {
              uint64_t v29 = &llvm::object::WasmSectionOrderChecker::DisallowedPredecessors[20 * (int)v26 + 1];
              do
              {
                if (!v449[v27])
                {
                  uint64_t v30 = v27;
                  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v448, v27);
                  v449[v30] = 1;
                }
                int v31 = *v29++;
                int v27 = v31;
              }
              while (v31);
              unsigned int v28 = v448[1];
            }
            if (!v28) {
              break;
            }
            unint64_t v32 = (void **)v448[0];
            uint64_t v26 = *((int *)v448[0] + v28 - 1);
            unsigned int v25 = v28 - 1;
            LODWORD(v448[1]) = v28 - 1;
            if (*((unsigned char *)v446 + v26)) {
              goto LABEL_48;
            }
          }
          *((unsigned char *)v446 + v21) = 1;
          unint64_t v32 = (void **)v448[0];
LABEL_48:
          a3 = v436;
          if (v32 != &v448[2]) {
            free(v32);
          }
          if (v28)
          {
            llvm::to_string<unsigned int>((unsigned int *)&v438, &v445);
            v422 = std::string::insert(&v445, 0, "out of order section type: ");
            std::string::size_type v423 = v422->__r_.__value_.__r.__words[2];
            *(_OWORD *)v449 = *(_OWORD *)&v422->__r_.__value_.__l.__data_;
            *(void *)&v449[16] = v423;
            v422->__r_.__value_.__l.__size_ = 0;
            v422->__r_.__value_.__r.__words[2] = 0;
            v422->__r_.__value_.__r.__words[0] = 0;
            operator new();
          }
LABEL_51:
          *(void *)&long long v440 = v18;
          *((void *)&v440 + 1) = v17;
          v443 = (char *)(v18 + v17);
          *a3 = 0;
          v445.__r_.__value_.__l.__size_ = v18;
          v445.__r_.__value_.__r.__words[2] = v18 + v17;
          v445.__r_.__value_.__r.__words[0] = v18;
          switch((int)v14)
          {
            case 0:
              goto LABEL_475;
            case 1:
              unsigned int v33 = readVaruint32((uint64_t)&v445);
              uint64_t v34 = v435;
              if (v33 > (unint64_t)((a1[37] - *v428) >> 6))
              {
                uint64_t v35 = a1[36] - *v428;
                v448[4] = a1 + 37;
                v448[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSignature>>(v33);
                v448[1] = (char *)v448[0] + v35;
                v448[2] = (char *)v448[0] + v35;
                v448[3] = (char *)v448[0] + 64 * v36;
                std::vector<llvm::wasm::WasmSignature>::__swap_out_circular_buffer(v428, v448);
                std::__split_buffer<llvm::wasm::WasmSignature>::~__split_buffer((uint64_t)v448);
              }
              while (2)
              {
                if (!v33)
                {
                  if (v445.__r_.__value_.__l.__size_ == v445.__r_.__value_.__r.__words[2]) {
                    goto LABEL_400;
                  }
                  LODWORD(v448[0]) = 3;
LABEL_438:
                  llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                }
                v448[0] = &v448[2];
                v448[1] = (void *)0x100000000;
                v448[3] = &v448[5];
                v448[4] = (void *)0x400000000;
                LODWORD(v448[7]) = 0;
                std::string::size_type size = (unsigned char *)v445.__r_.__value_.__l.__size_;
                if (v445.__r_.__value_.__l.__size_ == v445.__r_.__value_.__r.__words[2]) {
                  break;
                }
                ++v445.__r_.__value_.__l.__size_;
                if (*size != 96)
                {
                  *(_DWORD *)v449 = 3;
                  llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                }
                unsigned int v38 = readVaruint32((uint64_t)&v445);
                unsigned int v39 = v38;
                if (HIDWORD(v448[4]) < v38)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v448[3], &v448[5], v38, 4);
                  goto LABEL_61;
                }
                if (v38)
                {
LABEL_61:
                  while (1)
                  {
                    uint64_t v40 = (unsigned __int8 *)v445.__r_.__value_.__l.__size_;
                    if (v445.__r_.__value_.__l.__size_ == v445.__r_.__value_.__r.__words[2]) {
                      break;
                    }
                    --v39;
                    ++v445.__r_.__value_.__l.__size_;
                    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v448[3], *v40);
                    if (!v39) {
                      goto LABEL_63;
                    }
                  }
                }
                else
                {
LABEL_63:
                  int v41 = readVaruint32((uint64_t)&v445);
                  if (!v41)
                  {
LABEL_67:
                    unint64_t v45 = a1[36];
                    unint64_t v44 = a1[37];
                    if (v45 >= v44)
                    {
                      uint64_t v47 = (uint64_t)(v45 - *v428) >> 6;
                      if ((unint64_t)(v47 + 1) >> 58) {
LABEL_534:
                      }
                        abort();
                      uint64_t v48 = v44 - *v428;
                      uint64_t v49 = v48 >> 5;
                      if (v48 >> 5 <= (unint64_t)(v47 + 1)) {
                        uint64_t v49 = v47 + 1;
                      }
                      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFC0) {
                        unint64_t v50 = 0x3FFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v50 = v49;
                      }
                      v450 = a1 + 37;
                      if (v50) {
                        unint64_t v50 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSignature>>(v50);
                      }
                      else {
                        uint64_t v51 = 0;
                      }
                      uint64_t v52 = v50 + (v47 << 6);
                      *(void *)v449 = v50;
                      *(void *)&v449[8] = v52;
                      *(void *)&v449[24] = v50 + (v51 << 6);
                      std::allocator<llvm::wasm::WasmSignature>::construct[abi:nn180100]<llvm::wasm::WasmSignature,llvm::wasm::WasmSignature>(v52, v448);
                      *(void *)&v449[16] = v52 + 64;
                      std::vector<llvm::wasm::WasmSignature>::__swap_out_circular_buffer(v428, v449);
                      unint64_t v46 = a1[36];
                      std::__split_buffer<llvm::wasm::WasmSignature>::~__split_buffer((uint64_t)v449);
                    }
                    else
                    {
                      std::allocator<llvm::wasm::WasmSignature>::construct[abi:nn180100]<llvm::wasm::WasmSignature,llvm::wasm::WasmSignature>(a1[36], v448);
                      unint64_t v46 = v45 + 64;
                    }
                    a1[36] = v46;
                    if (v448[3] != &v448[5]) {
                      free(v448[3]);
                    }
                    if (v448[0] != &v448[2]) {
                      free(v448[0]);
                    }
                    --v33;
                    continue;
                  }
                  int v42 = v41;
                  while (1)
                  {
                    unint64_t v43 = (unsigned __int8 *)v445.__r_.__value_.__l.__size_;
                    if (v445.__r_.__value_.__l.__size_ == v445.__r_.__value_.__r.__words[2]) {
                      break;
                    }
                    --v42;
                    ++v445.__r_.__value_.__l.__size_;
                    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v448, *v43);
                    if (!v42) {
                      goto LABEL_67;
                    }
                  }
                }
                break;
              }
LABEL_533:
              llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const llvm::Twine *)1);
            case 2:
              unsigned int v53 = readVaruint32((uint64_t)&v445);
              uint64_t v55 = a1[35];
              uint64_t v54 = a1[36];
              unsigned int v56 = v53;
              uint64_t v57 = a1[50];
              uint64_t v34 = v435;
              if (0x8E38E38E38E38E39 * ((a1[52] - v57) >> 3) < v53)
              {
                uint64_t v58 = (unsigned __int128)((a1[51] - v57) * (__int128)0xE38E38E38E38E39) >> 64;
                uint64_t v59 = (v58 >> 2) + ((unint64_t)v58 >> 63);
                uint64_t v60 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmImport>>(v53);
                unint64_t v63 = (char *)a1[50];
                unsigned int v62 = (char *)a1[51];
                unint64_t v64 = &v60[72 * v59];
                if (v62 != v63)
                {
                  do
                  {
                    *(_OWORD *)(v64 - 72) = *(_OWORD *)(v62 - 72);
                    long long v65 = *(_OWORD *)(v62 - 56);
                    long long v66 = *(_OWORD *)(v62 - 40);
                    long long v67 = *(_OWORD *)(v62 - 24);
                    *((void *)v64 - 1) = *((void *)v62 - 1);
                    *(_OWORD *)(v64 - 24) = v67;
                    *(_OWORD *)(v64 - 40) = v66;
                    *(_OWORD *)(v64 - 56) = v65;
                    v64 -= 72;
                    v62 -= 72;
                  }
                  while (v62 != v63);
                  unsigned int v62 = (char *)a1[50];
                }
                a1[50] = v64;
                a1[51] = &v60[72 * v59];
                a1[52] = &v60[72 * v61];
                if (v62) {
                  operator delete(v62);
                }
              }
              if (!v56) {
                goto LABEL_126;
              }
              int v68 = 0;
              int v433 = 0;
              unint64_t v424 = (unint64_t)(v54 - v55) >> 6;
              unsigned int v430 = v56;
              do
              {
                uint64_t v69 = readString((uint64_t)&v445);
                uint64_t v71 = v70;
                uint64_t v72 = readString((uint64_t)&v445);
                long long v74 = *(_OWORD *)&v445.__r_.__value_.__r.__words[1];
                if (v445.__r_.__value_.__l.__size_ == v445.__r_.__value_.__r.__words[2]) {
                  goto LABEL_533;
                }
                std::string::size_type v75 = ++v445.__r_.__value_.__l.__size_;
                char v76 = *(unsigned char *)v74;
                uint64_t v77 = v72;
                uint64_t v78 = v73;
                switch(*(unsigned char *)v74)
                {
                  case 0:
                    ++*((_DWORD *)a1 + 170);
                    unsigned int v79 = readVaruint32((uint64_t)&v445);
                    if (v79 >= v424)
                    {
                      LODWORD(v448[0]) = 3;
                      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                    }
                    goto LABEL_105;
                  case 1:
                    readTableType(v448, (uint64_t)&v445);
                    unsigned int v80 = v448[0];
                    int v81 = LOBYTE(v448[0]);
                    *(_OWORD *)v449 = *(_OWORD *)((char *)v448 + 4);
                    *(_OWORD *)&v449[12] = *(_OWORD *)&v448[2];
                    ++*((_DWORD *)a1 + 169);
                    if ((v81 - 111) >= 2)
                    {
                      LODWORD(v448[0]) = 3;
                      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                    }
                    int Varuint1 = BYTE1(v80);
                    unsigned int v83 = HIWORD(v80);
                    goto LABEL_106;
                  case 2:
                    readLimits((uint64_t)v448, (uint64_t)&v445);
                    int v81 = LOBYTE(v448[0]);
                    int Varuint1 = BYTE1(v448[0]);
                    int v433 = HIWORD(LODWORD(v448[0]));
                    *(_OWORD *)v449 = *(_OWORD *)((char *)v448 + 4);
                    *(_DWORD *)&v449[16] = HIDWORD(v448[2]);
                    if (((uint64_t)v448[0] & 4) != 0) {
                      *((unsigned char *)a1 + 590) = 1;
                    }
                    break;
                  case 3:
                    ++*((_DWORD *)a1 + 168);
                    if (v75 == *((void *)&v74 + 1)) {
                      goto LABEL_533;
                    }
                    v445.__r_.__value_.__l.__size_ = v74 + 2;
                    int v81 = *(unsigned __int8 *)(v74 + 1);
                    int Varuint1 = readVaruint1((uint64_t)&v445);
                    break;
                  case 4:
                    ++*((_DWORD *)a1 + 171);
                    if (v75 == *((void *)&v74 + 1)) {
                      goto LABEL_533;
                    }
                    v445.__r_.__value_.__l.__size_ = v74 + 2;
                    if (*(unsigned char *)(v74 + 1)) {
                      operator new();
                    }
                    unsigned int v79 = readVaruint32((uint64_t)&v445);
                    if (v79 >= v424)
                    {
                      LODWORD(v448[0]) = 3;
                      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                    }
LABEL_105:
                    int v81 = v79;
                    int Varuint1 = BYTE1(v79);
                    unsigned int v83 = HIWORD(v79);
LABEL_106:
                    int v433 = v83;
                    break;
                  default:
                    LODWORD(v448[0]) = 3;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                }
                unint64_t v84 = a1[51];
                unint64_t v85 = a1[52];
                if (v84 >= v85)
                {
                  uint64_t v88 = a1[50];
                  unint64_t v89 = 0x8E38E38E38E38E39 * ((uint64_t)(v84 - v88) >> 3);
                  unint64_t v90 = v89 + 1;
                  if (v89 + 1 > 0x38E38E38E38E38ELL) {
                    goto LABEL_534;
                  }
                  unint64_t v91 = 0x8E38E38E38E38E39 * ((uint64_t)(v85 - v88) >> 3);
                  if (2 * v91 > v90) {
                    unint64_t v90 = 2 * v91;
                  }
                  if (v91 >= 0x1C71C71C71C71C7) {
                    unint64_t v92 = 0x38E38E38E38E38ELL;
                  }
                  else {
                    unint64_t v92 = v90;
                  }
                  if (v92)
                  {
                    int v426 = v68;
                    uint64_t v93 = v77;
                    uint64_t v94 = v78;
                    uint64_t v95 = v69;
                    uint64_t v96 = v71;
                    int v97 = v81;
                    int v98 = Varuint1;
                    unint64_t v92 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmImport>>(v92);
                    int Varuint1 = v98;
                    int v81 = v97;
                    uint64_t v71 = v96;
                    uint64_t v69 = v95;
                    uint64_t v78 = v94;
                    uint64_t v77 = v93;
                    int v68 = v426;
                  }
                  else
                  {
                    uint64_t v99 = 0;
                  }
                  unint64_t v100 = v92 + 72 * v89;
                  *(void *)unint64_t v100 = v69;
                  *(void *)(v100 + 8) = v71;
                  *(void *)(v100 + 16) = v77;
                  *(void *)(v100 + 24) = v78;
                  *(unsigned char *)(v100 + 32) = v76;
                  *(_DWORD *)(v100 + 40) = (v433 << 16) | (Varuint1 << 8) | v81;
                  *(_OWORD *)(v100 + 44) = *(_OWORD *)v449;
                  *(_OWORD *)(v100 + 56) = *(_OWORD *)&v449[12];
                  __int16 v102 = (char *)a1[50];
                  int v101 = (char *)a1[51];
                  unint64_t v103 = v100;
                  if (v101 == v102)
                  {
                    uint64_t v34 = v435;
                    a3 = v436;
                    unsigned int v87 = v430;
                  }
                  else
                  {
                    uint64_t v34 = v435;
                    a3 = v436;
                    unsigned int v87 = v430;
                    do
                    {
                      *(_OWORD *)(v103 - 72) = *(_OWORD *)(v101 - 72);
                      long long v104 = *(_OWORD *)(v101 - 56);
                      long long v105 = *(_OWORD *)(v101 - 40);
                      long long v106 = *(_OWORD *)(v101 - 24);
                      *(void *)(v103 - 8) = *((void *)v101 - 1);
                      *(_OWORD *)(v103 - 24) = v106;
                      *(_OWORD *)(v103 - 40) = v105;
                      *(_OWORD *)(v103 - 56) = v104;
                      v103 -= 72;
                      v101 -= 72;
                    }
                    while (v101 != v102);
                    int v101 = (char *)a1[50];
                  }
                  unint64_t v86 = v100 + 72;
                  a1[50] = v103;
                  a1[51] = v100 + 72;
                  a1[52] = v92 + 72 * v99;
                  if (v101) {
                    operator delete(v101);
                  }
                }
                else
                {
                  *(void *)unint64_t v84 = v69;
                  *(void *)(v84 + 8) = v71;
                  *(void *)(v84 + 16) = v77;
                  *(void *)(v84 + 24) = v78;
                  *(unsigned char *)(v84 + 32) = v76;
                  *(_DWORD *)(v84 + 40) = (v433 << 16) | (Varuint1 << 8) | v81;
                  *(_OWORD *)(v84 + 44) = *(_OWORD *)v449;
                  *(_OWORD *)(v84 + 56) = *(_OWORD *)&v449[12];
                  unint64_t v86 = v84 + 72;
                  uint64_t v34 = v435;
                  a3 = v436;
                  unsigned int v87 = v430;
                }
                a1[51] = v86;
                ++v68;
              }
              while (v68 != v87);
LABEL_126:
              if (v445.__r_.__value_.__l.__size_ == v445.__r_.__value_.__r.__words[2]) {
                goto LABEL_400;
              }
              LODWORD(v448[0]) = 3;
              goto LABEL_269;
            case 3:
              unsigned int v107 = readVaruint32((uint64_t)&v445);
              uint64_t v34 = v435;
              if (v107 > (unint64_t)((a1[66] - *v429) >> 7))
              {
                uint64_t v108 = a1[65] - *v429;
                v448[4] = a1 + 66;
                v448[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmFunction>>(v107);
                v448[1] = (char *)v448[0] + v108;
                v448[2] = (char *)v448[0] + v108;
                v448[3] = (char *)v448[0] + 128 * v109;
                std::vector<llvm::wasm::WasmFunction>::__swap_out_circular_buffer(v429, v448);
                std::__split_buffer<llvm::wasm::WasmFunction>::~__split_buffer((uint64_t)v448);
              }
              if (!v107) {
                goto LABEL_147;
              }
              uint64_t v110 = (a1[36] - a1[35]) >> 6;
              do
              {
                unsigned int v111 = readVaruint32((uint64_t)&v445);
                if (v111 >= v110)
                {
                  LODWORD(v448[0]) = 3;
                  llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                }
                LOBYTE(v448[8]) = 0;
                LOBYTE(v448[10]) = 0;
                memset(&v448[1], 0, 40);
                memset(&v448[11], 0, 32);
                HIDWORD(v448[0]) = v111;
                unint64_t v112 = a1[65];
                unint64_t v113 = a1[66];
                if (v112 >= v113)
                {
                  uint64_t v114 = (uint64_t)(v112 - *v429) >> 7;
                  if ((unint64_t)(v114 + 1) >> 57) {
                    goto LABEL_534;
                  }
                  uint64_t v115 = v113 - *v429;
                  uint64_t v116 = v115 >> 6;
                  if (v115 >> 6 <= (unint64_t)(v114 + 1)) {
                    uint64_t v116 = v114 + 1;
                  }
                  if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFF80) {
                    unint64_t v117 = 0x1FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v117 = v116;
                  }
                  v450 = a1 + 66;
                  if (v117) {
                    unint64_t v117 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmFunction>>(v117);
                  }
                  else {
                    uint64_t v118 = 0;
                  }
                  unint64_t v119 = v117 + (v114 << 7);
                  *(void *)v449 = v117;
                  *(void *)&v449[8] = v119;
                  *(void *)&v449[24] = v117 + (v118 << 7);
                  *(void **)unint64_t v119 = v448[0];
                  std::vector<llvm::wasm::WasmLocalDecl>::vector((void *)(v119 + 8), (uint64_t)&v448[1]);
                  *(_OWORD *)(v119 + 32) = *(_OWORD *)&v448[4];
                  *(_OWORD *)(v119 + 48) = *(_OWORD *)&v448[6];
                  *(_OWORD *)(v119 + 64) = *(_OWORD *)&v448[8];
                  *(_OWORD *)(v119 + 80) = *(_OWORD *)&v448[10];
                  *(_OWORD *)(v119 + 96) = *(_OWORD *)&v448[12];
                  *(_OWORD *)(v119 + 108) = *(_OWORD *)((char *)&v448[13] + 4);
                  *(void *)&v449[16] = v119 + 128;
                  std::vector<llvm::wasm::WasmFunction>::__swap_out_circular_buffer(v429, v449);
                  uint64_t v120 = a1[65];
                  std::__split_buffer<llvm::wasm::WasmFunction>::~__split_buffer((uint64_t)v449);
                  unsigned int v121 = v448[1];
                  a1[65] = v120;
                  if (v121) {
                    operator delete(v121);
                  }
                }
                else
                {
                  *(void **)unint64_t v112 = v448[0];
                  std::vector<llvm::wasm::WasmLocalDecl>::vector((void *)(v112 + 8), (uint64_t)&v448[1]);
                  *(_OWORD *)(v112 + 64) = *(_OWORD *)&v448[8];
                  *(_OWORD *)(v112 + 80) = *(_OWORD *)&v448[10];
                  *(_OWORD *)(v112 + 96) = *(_OWORD *)&v448[12];
                  *(_OWORD *)(v112 + 108) = *(_OWORD *)((char *)&v448[13] + 4);
                  *(_OWORD *)(v112 + 32) = *(_OWORD *)&v448[4];
                  *(_OWORD *)(v112 + 48) = *(_OWORD *)&v448[6];
                  a1[65] = v112 + 128;
                }
                --v107;
              }
              while (v107);
LABEL_147:
              if (v445.__r_.__value_.__l.__size_ != v445.__r_.__value_.__r.__words[2])
              {
                LODWORD(v448[0]) = 3;
                llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
              }
              goto LABEL_400;
            case 4:
              *((_DWORD *)a1 + 176) = 954437177 * ((a1[10] - a1[9]) >> 3);
              unsigned int v122 = readVaruint32((uint64_t)&v445);
              unsigned int v123 = v122;
              uint64_t v124 = a1[38];
              uint64_t v34 = v435;
              if (0x6DB6DB6DB6DB6DB7 * ((a1[40] - v124) >> 3) < (unint64_t)v122)
              {
                uint64_t v125 = (unsigned __int128)((a1[39] - v124) * (__int128)0x4924924924924925) >> 64;
                uint64_t v126 = (v125 >> 4) + ((unint64_t)v125 >> 63);
                unsigned int v127 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::WrapperFunctionCall>>(v122);
                __int16 v130 = (char *)a1[38];
                unsigned int v129 = (char *)a1[39];
                unsigned int v131 = &v127[56 * v126];
                if (v129 != v130)
                {
                  do
                  {
                    long long v132 = *(_OWORD *)(v129 - 56);
                    long long v133 = *(_OWORD *)(v129 - 40);
                    long long v134 = *(_OWORD *)(v129 - 24);
                    *((void *)v131 - 1) = *((void *)v129 - 1);
                    *(_OWORD *)(v131 - 24) = v134;
                    *(_OWORD *)(v131 - 40) = v133;
                    *(_OWORD *)(v131 - 56) = v132;
                    v131 -= 56;
                    v129 -= 56;
                  }
                  while (v129 != v130);
                  unsigned int v129 = (char *)a1[38];
                }
                a1[38] = v131;
                a1[39] = &v127[56 * v126];
                a1[40] = &v127[56 * v128];
                if (v129) {
                  operator delete(v129);
                }
              }
              if (!v123) {
                goto LABEL_174;
              }
              do
              {
                readTableType(v449, (uint64_t)&v445);
                *(_OWORD *)((char *)v448 + 4) = *(_OWORD *)v449;
                *(_OWORD *)((char *)&v448[2] + 4) = *(_OWORD *)&v449[16];
                uint64_t v136 = a1[38];
                unint64_t v135 = a1[39];
                uint64_t v137 = (uint64_t)(v135 - v136) / 56;
                int v138 = *((_DWORD *)a1 + 169) + v137;
                unint64_t v139 = a1[40];
                if (v135 >= v139)
                {
                  unint64_t v141 = v137 + 1;
                  if ((unint64_t)(v137 + 1) > 0x492492492492492) {
                    goto LABEL_534;
                  }
                  unint64_t v142 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v139 - v136) >> 3);
                  if (2 * v142 > v141) {
                    unint64_t v141 = 2 * v142;
                  }
                  if (v142 >= 0x249249249249249) {
                    unint64_t v143 = 0x492492492492492;
                  }
                  else {
                    unint64_t v143 = v141;
                  }
                  if (v143) {
                    unint64_t v143 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::WrapperFunctionCall>>(v143);
                  }
                  else {
                    uint64_t v144 = 0;
                  }
                  unint64_t v145 = v143 + 56 * v137;
                  *(_DWORD *)unint64_t v145 = v138;
                  *(_OWORD *)(v145 + 4) = *(_OWORD *)v448;
                  *(_OWORD *)(v145 + 20) = *(_OWORD *)&v448[2];
                  *(_DWORD *)(v145 + 36) = v448[4];
                  *(void *)(v145 + 40) = 0;
                  *(void *)(v145 + 48) = 0;
                  __int16 v147 = (char *)a1[38];
                  int v146 = (char *)a1[39];
                  unint64_t v148 = v145;
                  if (v146 != v147)
                  {
                    do
                    {
                      long long v149 = *(_OWORD *)(v146 - 56);
                      long long v150 = *(_OWORD *)(v146 - 40);
                      long long v151 = *(_OWORD *)(v146 - 24);
                      *(void *)(v148 - 8) = *((void *)v146 - 1);
                      *(_OWORD *)(v148 - 24) = v151;
                      *(_OWORD *)(v148 - 40) = v150;
                      *(_OWORD *)(v148 - 56) = v149;
                      v148 -= 56;
                      v146 -= 56;
                    }
                    while (v146 != v147);
                    int v146 = (char *)a1[38];
                  }
                  unint64_t v140 = v145 + 56;
                  a1[38] = v148;
                  a1[39] = v145 + 56;
                  a1[40] = v143 + 56 * v144;
                  if (v146) {
                    operator delete(v146);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v135 = v138;
                  *(_OWORD *)(v135 + 4) = *(_OWORD *)v448;
                  *(_OWORD *)(v135 + 20) = *(_OWORD *)&v448[2];
                  *(_DWORD *)(v135 + 36) = v448[4];
                  *(void *)(v135 + 40) = 0;
                  *(void *)(v135 + 48) = 0;
                  unint64_t v140 = v135 + 56;
                }
                a1[39] = v140;
                if (*(unsigned __int8 *)(v140 - 48) - 111 >= 2)
                {
                  *(_DWORD *)v449 = 3;
                  llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                }
                --v123;
              }
              while (v123);
LABEL_174:
              if (v445.__r_.__value_.__l.__size_ != v445.__r_.__value_.__r.__words[2])
              {
                LODWORD(v448[0]) = 3;
                llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>();
              }
              goto LABEL_400;
            case 5:
              unsigned int v152 = readVaruint32((uint64_t)&v445);
              unsigned int v153 = v152;
              uint64_t v154 = a1[41];
              uint64_t v34 = v435;
              if (0xAAAAAAAAAAAAAAABLL * ((a1[43] - v154) >> 3) < v152)
              {
                uint64_t v155 = (unsigned __int128)((a1[42] - v154) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
                uint64_t v156 = (v155 >> 2) + ((unint64_t)v155 >> 63);
                uint64_t v158 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v152);
                int v160 = (char *)a1[41];
                uint64_t v159 = (char *)a1[42];
                int v161 = &v158[24 * v156];
                if (v159 != v160)
                {
                  do
                  {
                    long long v162 = *(_OWORD *)(v159 - 24);
                    *((void *)v161 - 1) = *((void *)v159 - 1);
                    *(_OWORD *)(v161 - 24) = v162;
                    v161 -= 24;
                    v159 -= 24;
                  }
                  while (v159 != v160);
                  uint64_t v159 = (char *)a1[41];
                }
                a1[41] = v161;
                a1[42] = &v158[24 * v156];
                a1[43] = &v158[24 * v157];
                if (v159) {
                  operator delete(v159);
                }
              }
              if (!v153) {
                goto LABEL_202;
              }
              do
              {
                memset(v448, 0, 24);
                readLimits((uint64_t)v448, (uint64_t)&v445);
                if (((uint64_t)v448[0] & 4) != 0) {
                  *((unsigned char *)a1 + 590) = 1;
                }
                unint64_t v164 = a1[42];
                unint64_t v163 = a1[43];
                if (v164 >= v163)
                {
                  uint64_t v166 = a1[41];
                  unint64_t v167 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v164 - v166) >> 3);
                  unint64_t v168 = v167 + 1;
                  if (v167 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_534;
                  }
                  unint64_t v169 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v163 - v166) >> 3);
                  if (2 * v169 > v168) {
                    unint64_t v168 = 2 * v169;
                  }
                  if (v169 >= 0x555555555555555) {
                    unint64_t v170 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v170 = v168;
                  }
                  if (v170) {
                    unint64_t v170 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v170);
                  }
                  else {
                    uint64_t v171 = 0;
                  }
                  unint64_t v172 = v170 + 24 * v167;
                  *(_OWORD *)unint64_t v172 = *(_OWORD *)v448;
                  *(void **)(v172 + 16) = v448[2];
                  v174 = (char *)a1[41];
                  v173 = (char *)a1[42];
                  unint64_t v175 = v172;
                  if (v173 != v174)
                  {
                    do
                    {
                      long long v176 = *(_OWORD *)(v173 - 24);
                      *(void *)(v175 - 8) = *((void *)v173 - 1);
                      *(_OWORD *)(v175 - 24) = v176;
                      v175 -= 24;
                      v173 -= 24;
                    }
                    while (v173 != v174);
                    v173 = (char *)a1[41];
                  }
                  unint64_t v165 = v172 + 24;
                  a1[41] = v175;
                  a1[42] = v172 + 24;
                  a1[43] = v170 + 24 * v171;
                  if (v173) {
                    operator delete(v173);
                  }
                }
                else
                {
                  *(_OWORD *)unint64_t v164 = *(_OWORD *)v448;
                  *(void **)(v164 + 16) = v448[2];
                  unint64_t v165 = v164 + 24;
                }
                a1[42] = v165;
                --v153;
              }
              while (v153);
LABEL_202:
              if (v445.__r_.__value_.__l.__size_ == v445.__r_.__value_.__r.__words[2]) {
                goto LABEL_400;
              }
              LODWORD(v448[0]) = 3;
              goto LABEL_269;
            case 6:
              *((_DWORD *)a1 + 175) = 954437177 * ((a1[10] - a1[9]) >> 3);
              unsigned int v177 = readVaruint32((uint64_t)&v445);
              uint64_t v178 = a1[44];
              uint64_t v34 = v435;
              if (v177 > (unint64_t)((a1[46] - v178) >> 6))
              {
                uint64_t v179 = a1[45] - v178;
                unsigned int v180 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSignature>>(v177);
                v183 = (char *)a1[44];
                v182 = (char *)a1[45];
                unint64_t v184 = &v180[v179 & 0xFFFFFFFFFFFFFFC0];
                if (v182 != v183)
                {
                  do
                  {
                    long long v185 = *((_OWORD *)v182 - 4);
                    long long v186 = *((_OWORD *)v182 - 3);
                    long long v187 = *((_OWORD *)v182 - 1);
                    *((_OWORD *)v184 - 2) = *((_OWORD *)v182 - 2);
                    *((_OWORD *)v184 - 1) = v187;
                    *((_OWORD *)v184 - 4) = v185;
                    *((_OWORD *)v184 - 3) = v186;
                    v184 -= 64;
                    v182 -= 64;
                  }
                  while (v182 != v183);
                  v182 = (char *)a1[44];
                }
                a1[44] = v184;
                a1[45] = &v180[v179 & 0xFFFFFFFFFFFFFFC0];
                a1[46] = &v180[64 * v181];
                if (v182) {
                  operator delete(v182);
                }
              }
              if (!v177) {
                goto LABEL_231;
              }
              unsigned int v188 = (_OWORD *)a1[45];
              while (1)
              {
                memset(&v448[4], 0, 32);
                LODWORD(v448[0]) = *((_DWORD *)a1 + 168) + (((unint64_t)v188 - a1[44]) >> 6);
                v189 = (unsigned char *)v445.__r_.__value_.__l.__size_;
                if (v445.__r_.__value_.__l.__size_ == v445.__r_.__value_.__r.__words[2]) {
                  goto LABEL_533;
                }
                ++v445.__r_.__value_.__l.__size_;
                BYTE4(v448[0]) = *v189;
                BYTE5(v448[0]) = readVaruint1((uint64_t)&v445);
                readInitExpr((uint64_t)&v437, (uint64_t)&v448[1], (uint64_t)&v445);
                if (v437) {
                  break;
                }
                v190 = (_OWORD *)a1[45];
                unint64_t v191 = a1[46];
                if ((unint64_t)v190 >= v191)
                {
                  uint64_t v192 = a1[44];
                  uint64_t v193 = ((uint64_t)v190 - v192) >> 6;
                  unint64_t v194 = v193 + 1;
                  if ((unint64_t)(v193 + 1) >> 58) {
                    goto LABEL_534;
                  }
                  uint64_t v195 = v191 - v192;
                  if (v195 >> 5 > v194) {
                    unint64_t v194 = v195 >> 5;
                  }
                  if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFC0) {
                    unint64_t v196 = 0x3FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v196 = v194;
                  }
                  if (v196) {
                    unint64_t v196 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSignature>>(v196);
                  }
                  else {
                    uint64_t v197 = 0;
                  }
                  v198 = (_OWORD *)(v196 + (v193 << 6));
                  _OWORD *v198 = *(_OWORD *)v448;
                  v198[1] = *(_OWORD *)&v448[2];
                  v198[2] = *(_OWORD *)&v448[4];
                  v198[3] = *(_OWORD *)&v448[6];
                  v200 = (char *)a1[44];
                  v199 = (char *)a1[45];
                  v201 = v198;
                  if (v199 != v200)
                  {
                    do
                    {
                      long long v202 = *((_OWORD *)v199 - 4);
                      long long v203 = *((_OWORD *)v199 - 3);
                      long long v204 = *((_OWORD *)v199 - 1);
                      *(v201 - 2) = *((_OWORD *)v199 - 2);
                      *(v201 - 1) = v204;
                      *(v201 - 4) = v202;
                      *(v201 - 3) = v203;
                      v201 -= 4;
                      v199 -= 64;
                    }
                    while (v199 != v200);
                    v199 = (char *)a1[44];
                  }
                  unsigned int v188 = v198 + 4;
                  a1[44] = v201;
                  a1[45] = v198 + 4;
                  a1[46] = v196 + (v197 << 6);
                  if (v199) {
                    operator delete(v199);
                  }
                }
                else
                {
                  _OWORD *v190 = *(_OWORD *)v448;
                  v190[1] = *(_OWORD *)&v448[2];
                  v190[2] = *(_OWORD *)&v448[4];
                  v190[3] = *(_OWORD *)&v448[6];
                  unsigned int v188 = v190 + 4;
                }
                a1[45] = v188;
                if (!--v177)
                {
LABEL_231:
                  if (v445.__r_.__value_.__l.__size_ != v445.__r_.__value_.__r.__words[2])
                  {
                    LODWORD(v448[0]) = 3;
                    goto LABEL_269;
                  }
                  goto LABEL_400;
                }
              }
              *a3 = v437;
              goto LABEL_529;
            case 7:
              unsigned int v205 = readVaruint32((uint64_t)&v445);
              unsigned int v206 = v205;
              uint64_t v207 = a1[53];
              uint64_t v34 = v435;
              if (0xAAAAAAAAAAAAAAABLL * ((a1[55] - v207) >> 3) < v205)
              {
                uint64_t v208 = (unsigned __int128)((a1[54] - v207) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
                uint64_t v209 = (v208 >> 2) + ((unint64_t)v208 >> 63);
                v210 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v205);
                v213 = (char *)a1[53];
                v212 = (char *)a1[54];
                v214 = &v210[24 * v209];
                if (v212 != v213)
                {
                  do
                  {
                    long long v215 = *(_OWORD *)(v212 - 24);
                    *((void *)v214 - 1) = *((void *)v212 - 1);
                    *(_OWORD *)(v214 - 24) = v215;
                    v214 -= 24;
                    v212 -= 24;
                  }
                  while (v212 != v213);
                  v212 = (char *)a1[53];
                }
                a1[53] = v214;
                a1[54] = &v210[24 * v209];
                a1[55] = &v210[24 * v211];
                if (v212) {
                  operator delete(v212);
                }
              }
              if (!v206) {
                goto LABEL_267;
              }
              for (int i = 0; i != v206; ++i)
              {
                uint64_t v217 = readString((uint64_t)&v445);
                int v219 = (unsigned __int8 *)v445.__r_.__value_.__l.__size_;
                if (v445.__r_.__value_.__l.__size_ == v445.__r_.__value_.__r.__words[2]) {
                  goto LABEL_533;
                }
                uint64_t v220 = v217;
                uint64_t v221 = v218;
                ++v445.__r_.__value_.__l.__size_;
                int v222 = *v219;
                unsigned int v223 = readVaruint32((uint64_t)&v445);
                unsigned int v224 = v223;
                switch(v222)
                {
                  case 0:
                    uint64_t v225 = *((unsigned int *)a1 + 170);
                    if (v223 < v225
                      || (uint64_t v226 = a1[64], v225 + ((a1[65] - v226) >> 7) <= (unint64_t)v223))
                    {
                      LODWORD(v448[0]) = 3;
                      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                    }
                    uint64_t v227 = v226 + ((unint64_t)(v223 - v225) << 7);
                    *(void *)(v227 + 64) = v220;
                    uint64_t v228 = v227 + 64;
                    int v229 = *(unsigned __int8 *)(v228 + 16);
                    *(void *)(v228 + 8) = v221;
                    if (!v229) {
                      *(unsigned char *)(v228 + 16) = 1;
                    }
                    break;
                  case 1:
                  case 2:
                    break;
                  case 3:
                    if ((unint64_t)*((unsigned int *)a1 + 168) + ((uint64_t)(a1[45] - a1[44]) >> 6) <= v223)
                    {
                      LODWORD(v448[0]) = 3;
                      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                    }
                    return result;
                  case 4:
                    if ((unint64_t)*((unsigned int *)a1 + 171)
                       - 0x5555555555555555 * ((uint64_t)(a1[48] - a1[47]) >> 3) <= v223)
                      operator new();
                    return result;
                  default:
                    LODWORD(v448[0]) = 3;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                }
                unint64_t v231 = a1[54];
                unint64_t v230 = a1[55];
                if (v231 >= v230)
                {
                  uint64_t v233 = a1[53];
                  unint64_t v234 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v231 - v233) >> 3);
                  unint64_t v235 = v234 + 1;
                  if (v234 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_534;
                  }
                  unint64_t v236 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v230 - v233) >> 3);
                  if (2 * v236 > v235) {
                    unint64_t v235 = 2 * v236;
                  }
                  if (v236 >= 0x555555555555555) {
                    unint64_t v237 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v237 = v235;
                  }
                  if (v237) {
                    unint64_t v237 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v237);
                  }
                  else {
                    uint64_t v238 = 0;
                  }
                  unint64_t v239 = v237 + 24 * v234;
                  *(void *)unint64_t v239 = v220;
                  *(void *)(v239 + 8) = v221;
                  *(unsigned char *)(v239 + 16) = v222;
                  *(_DWORD *)(v239 + 20) = v224;
                  unsigned int v241 = (char *)a1[53];
                  unsigned int v240 = (char *)a1[54];
                  unint64_t v242 = v239;
                  if (v240 != v241)
                  {
                    do
                    {
                      long long v243 = *(_OWORD *)(v240 - 24);
                      *(void *)(v242 - 8) = *((void *)v240 - 1);
                      *(_OWORD *)(v242 - 24) = v243;
                      v242 -= 24;
                      v240 -= 24;
                    }
                    while (v240 != v241);
                    unsigned int v240 = (char *)a1[53];
                  }
                  unint64_t v232 = v239 + 24;
                  a1[53] = v242;
                  a1[54] = v239 + 24;
                  a1[55] = v237 + 24 * v238;
                  if (v240) {
                    operator delete(v240);
                  }
                }
                else
                {
                  *(void *)unint64_t v231 = v220;
                  *(void *)(v231 + 8) = v221;
                  *(unsigned char *)(v231 + 16) = v222;
                  unint64_t v232 = v231 + 24;
                  *(_DWORD *)(v231 + 20) = v223;
                }
                a1[54] = v232;
              }
LABEL_267:
              a3 = v436;
              if (v445.__r_.__value_.__l.__size_ != v445.__r_.__value_.__r.__words[2])
              {
                LODWORD(v448[0]) = 3;
LABEL_269:
                llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
              }
LABEL_400:
              *a3 = 0;
              goto LABEL_477;
            case 8:
              unsigned int v244 = readVaruint32((uint64_t)&v445);
              *((_DWORD *)a1 + 146) = v244;
              uint64_t v34 = v435;
              if ((unint64_t)*((unsigned int *)a1 + 170) + ((uint64_t)(a1[65] - a1[64]) >> 7) > v244) {
                goto LABEL_400;
              }
              LODWORD(v448[0]) = 3;
              goto LABEL_434;
            case 9:
              unsigned int v245 = readVaruint32((uint64_t)&v445);
              unsigned int v246 = v245;
              uint64_t v34 = v435;
              if (0xCCCCCCCCCCCCCCCDLL * ((a1[58] - *v425) >> 4) < v245)
              {
                uint64_t v247 = a1[57] - *v425;
                v448[4] = a1 + 58;
                v448[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmElemSegment>>(v245);
                v448[1] = (char *)v448[0] + v247;
                v448[2] = (char *)v448[0] + v247;
                v448[3] = (char *)v448[0] + 80 * v248;
                std::vector<llvm::wasm::WasmElemSegment>::__swap_out_circular_buffer(v425, v448);
                std::__split_buffer<llvm::wasm::WasmElemSegment>::~__split_buffer((uint64_t)v448);
              }
              if (!v246) {
                goto LABEL_328;
              }
              while (2)
              {
                memset(&v448[5], 0, 40);
                unsigned int v249 = readVaruint32((uint64_t)&v445);
                LODWORD(v448[0]) = v249;
                if (v249 >= 8)
                {
                  *(_DWORD *)v449 = 3;
                  llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                }
                if ((v249 & 2) != 0) {
                  unsigned int v250 = readVaruint32((uint64_t)&v445);
                }
                else {
                  unsigned int v250 = 0;
                }
                HIDWORD(v448[0]) = v250;
                if ((unint64_t)*((unsigned int *)a1 + 169)
                   + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[39] - a1[38]) >> 3) <= v250)
                  operator new();
                char v251 = (char)v448[0];
                if ((uint64_t)v448[0])
                {
                  LOBYTE(v448[2]) = 0;
                  LOBYTE(v448[3]) = 65;
                  LODWORD(v448[4]) = 0;
LABEL_284:
                  if ((v251 & 3) != 0)
                  {
                    unint64_t v252 = (unsigned __int8 *)v445.__r_.__value_.__l.__size_;
                    if (v445.__r_.__value_.__l.__size_ == v445.__r_.__value_.__r.__words[2]) {
                      goto LABEL_533;
                    }
                    ++v445.__r_.__value_.__l.__size_;
                    int v253 = *v252;
                    LOBYTE(v448[1]) = v253;
                    if ((v251 & 4) != 0)
                    {
                      if ((v253 - 113) <= 0xFFFFFFFD)
                      {
                        *(_DWORD *)v449 = 3;
                        llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                      }
LABEL_508:
                      operator new();
                    }
                    if (v253)
                    {
                      *(_DWORD *)v449 = 3;
                      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                    }
                    LOBYTE(v448[1]) = 112;
                  }
                  else
                  {
                    LOBYTE(v448[1]) = 112;
                    if ((v251 & 4) != 0) {
                      goto LABEL_508;
                    }
                  }
                  int v254 = readVaruint32((uint64_t)&v445);
                  if (v254)
                  {
                    int v255 = v254;
                    do
                    {
                      int v256 = readVaruint32((uint64_t)&v445);
                      int v257 = v256;
                      int8x16_t v258 = (char *)v448[8];
                      if (v448[8] >= v448[9])
                      {
                        uint64_t v260 = (char *)v448[7];
                        int64_t v261 = ((char *)v448[8] - (char *)v448[7]) >> 2;
                        unint64_t v262 = v261 + 1;
                        if ((unint64_t)(v261 + 1) >> 62) {
                          goto LABEL_534;
                        }
                        int64_t v263 = (char *)v448[9] - (char *)v448[7];
                        if (((char *)v448[9] - (char *)v448[7]) >> 1 > v262) {
                          unint64_t v262 = v263 >> 1;
                        }
                        if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFFCLL) {
                          unint64_t v264 = 0x3FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v264 = v262;
                        }
                        if (v264)
                        {
                          v265 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v448[9], v264);
                          uint64_t v260 = (char *)v448[7];
                          int8x16_t v258 = (char *)v448[8];
                        }
                        else
                        {
                          v265 = 0;
                        }
                        uint64_t v266 = &v265[4 * v261];
                        *(_DWORD *)uint64_t v266 = v257;
                        uint64_t v259 = v266 + 4;
                        while (v258 != v260)
                        {
                          int v267 = *((_DWORD *)v258 - 1);
                          v258 -= 4;
                          *((_DWORD *)v266 - 1) = v267;
                          v266 -= 4;
                        }
                        v448[7] = v266;
                        v448[8] = v259;
                        v448[9] = &v265[4 * v264];
                        if (v260) {
                          operator delete(v260);
                        }
                      }
                      else
                      {
                        *(_DWORD *)v448[8] = v256;
                        uint64_t v259 = v258 + 4;
                      }
                      v448[8] = v259;
                      --v255;
                    }
                    while (v255);
                  }
                  unint64_t v269 = a1[57];
                  unint64_t v268 = a1[58];
                  if (v269 >= v268)
                  {
                    unint64_t v277 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v269 - *v425) >> 4);
                    unint64_t v278 = v277 + 1;
                    if (v277 + 1 > 0x333333333333333) {
                      goto LABEL_534;
                    }
                    unint64_t v279 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v268 - *v425) >> 4);
                    if (2 * v279 > v278) {
                      unint64_t v278 = 2 * v279;
                    }
                    if (v279 >= 0x199999999999999) {
                      unint64_t v280 = 0x333333333333333;
                    }
                    else {
                      unint64_t v280 = v278;
                    }
                    v450 = a1 + 58;
                    if (v280) {
                      unint64_t v280 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmElemSegment>>(v280);
                    }
                    else {
                      uint64_t v281 = 0;
                    }
                    unint64_t v282 = v280 + 80 * v277;
                    *(void *)v449 = v280;
                    *(void *)&v449[8] = v282;
                    *(void *)&v449[24] = v280 + 80 * v281;
                    long long v283 = *(_OWORD *)v448;
                    long long v284 = *(_OWORD *)&v448[2];
                    long long v285 = *(_OWORD *)&v448[4];
                    *(void **)(v282 + 48) = v448[6];
                    *(_OWORD *)(v282 + 16) = v284;
                    *(_OWORD *)(v282 + 32) = v285;
                    *(void *)(v282 + 56) = 0;
                    *(_OWORD *)unint64_t v282 = v283;
                    *(void *)(v282 + 64) = 0;
                    *(void *)(v282 + 72) = 0;
                    v286 = v448[7];
                    int64_t v287 = (char *)v448[8] - (char *)v448[7];
                    if (v448[8] != v448[7])
                    {
                      unint64_t v288 = v280 + 80 * v277;
                      std::vector<unsigned int>::__vallocate[abi:nn180100]((void *)(v282 + 56), v287 >> 2);
                      v289 = *(char **)(v288 + 64);
                      memmove(v289, v286, v287);
                      *(void *)(v288 + 64) = &v289[v287];
                    }
                    *(void *)&v449[16] = v282 + 80;
                    std::vector<llvm::wasm::WasmElemSegment>::__swap_out_circular_buffer(v425, v449);
                    unint64_t v276 = a1[57];
                    std::__split_buffer<llvm::wasm::WasmElemSegment>::~__split_buffer((uint64_t)v449);
                  }
                  else
                  {
                    long long v270 = *(_OWORD *)v448;
                    long long v271 = *(_OWORD *)&v448[2];
                    long long v272 = *(_OWORD *)&v448[4];
                    *(void **)(v269 + 48) = v448[6];
                    *(_OWORD *)(v269 + 16) = v271;
                    *(_OWORD *)(v269 + 32) = v272;
                    *(void *)(v269 + 56) = 0;
                    *(_OWORD *)unint64_t v269 = v270;
                    *(void *)(v269 + 64) = 0;
                    *(void *)(v269 + 72) = 0;
                    uint64_t v273 = v448[7];
                    int64_t v274 = (char *)v448[8] - (char *)v448[7];
                    if (v448[8] != v448[7])
                    {
                      std::vector<unsigned int>::__vallocate[abi:nn180100]((void *)(v269 + 56), v274 >> 2);
                      uint64_t v275 = *(char **)(v269 + 64);
                      memmove(v275, v273, v274);
                      *(void *)(v269 + 64) = &v275[v274];
                    }
                    unint64_t v276 = v269 + 80;
                  }
                  a1[57] = v276;
                  if (v448[7])
                  {
                    v448[8] = v448[7];
                    operator delete(v448[7]);
                  }
                  if (!--v246)
                  {
LABEL_328:
                    if (v445.__r_.__value_.__l.__size_ == v445.__r_.__value_.__r.__words[2]) {
                      goto LABEL_400;
                    }
                    LODWORD(v448[0]) = 3;
                    goto LABEL_438;
                  }
                  continue;
                }
                break;
              }
              readInitExpr((uint64_t)&v437, (uint64_t)&v448[2], (uint64_t)&v445);
              if (!v437)
              {
                char v251 = (char)v448[0];
                goto LABEL_284;
              }
              if (v448[7])
              {
                v448[8] = v448[7];
                operator delete(v448[7]);
              }
              break;
            case 10:
              *((_DWORD *)a1 + 172) = 954437177 * ((a1[10] - a1[9]) >> 3);
              unsigned int v290 = readVaruint32((uint64_t)&v445);
              if (v290 != (uint64_t)(a1[65] - a1[64]) >> 7)
              {
                LODWORD(v448[0]) = 3;
LABEL_434:
                llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
              }
              std::string::size_type v291 = v445.__r_.__value_.__l.__size_;
              if (!v290) {
                goto LABEL_360;
              }
              uint64_t v292 = 0;
              uint64_t v427 = v290;
              while (1)
              {
                uint64_t v434 = a1[64];
                uint64_t v293 = v434 + (v292 << 7);
                int v294 = readVaruint32((uint64_t)&v445);
                int v295 = LODWORD(v445.__r_.__value_.__r.__words[1]) + v294;
                *(_DWORD *)(v293 + 56) = LODWORD(v445.__r_.__value_.__r.__words[1]) - v291;
                *(_DWORD *)uint64_t v293 = *((_DWORD *)a1 + 170) + v292;
                int v431 = v295;
                *(_DWORD *)(v293 + 48) = v291 - LODWORD(v445.__r_.__value_.__l.__data_);
                *(_DWORD *)(v293 + 52) = v295 - v291;
                unsigned int v296 = readVaruint32((uint64_t)&v445);
                v298 = (unint64_t **)(v293 + 8);
                uint64_t v297 = *(void *)(v293 + 8);
                v299 = (void *)(v293 + 24);
                if (v296 > (unint64_t)((*(void *)(v293 + 24) - v297) >> 3))
                {
                  uint64_t v301 = *(void *)(v293 + 16);
                  __int16 v300 = (void **)(v293 + 16);
                  uint64_t v302 = v301 - v297;
                  long long v304 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v296);
                  long long v305 = (char *)*v300;
                  int8x16_t v306 = *v298;
                  long long v307 = &v304[v302 & 0xFFFFFFFFFFFFFFF8];
                  if (*v300 != *v298)
                  {
                    do
                    {
                      uint64_t v308 = *((void *)v305 - 1);
                      v305 -= 8;
                      *((void *)v307 - 1) = v308;
                      v307 -= 8;
                    }
                    while (v305 != (char *)v306);
                    long long v305 = (char *)*v298;
                  }
                  *v298 = (unint64_t *)v307;
                  *__int16 v300 = &v304[v302 & 0xFFFFFFFFFFFFFFF8];
                  void *v299 = &v304[8 * v303];
                  if (v305) {
                    operator delete(v305);
                  }
                }
                if (v296) {
                  break;
                }
LABEL_359:
                uint64_t v325 = (v431 - LODWORD(v445.__r_.__value_.__r.__words[1]));
                uint64_t v326 = v434 + (v292 << 7);
                *(void *)(v326 + 32) = v445.__r_.__value_.__l.__size_;
                *(void *)(v326 + 40) = v325;
                *(_DWORD *)(v326 + 120) = -1;
                std::string::size_type v291 = v445.__r_.__value_.__l.__size_ + v325;
                v445.__r_.__value_.__l.__size_ += v325;
                ++v292;
                a3 = v436;
                if (v292 == v427)
                {
LABEL_360:
                  uint64_t v34 = v435;
                  if (v291 == v445.__r_.__value_.__r.__words[2]) {
                    goto LABEL_400;
                  }
                  LODWORD(v448[0]) = 3;
                  goto LABEL_438;
                }
              }
              long long v309 = (unint64_t **)(v434 + (v292 << 7) + 16);
              while (1)
              {
                unint64_t v310 = readVaruint32((uint64_t)&v445);
                char v311 = (unsigned __int8 *)v445.__r_.__value_.__l.__size_;
                if (v445.__r_.__value_.__l.__size_ == v445.__r_.__value_.__r.__words[2]) {
                  goto LABEL_533;
                }
                unint64_t v312 = v310;
                ++v445.__r_.__value_.__l.__size_;
                uint64_t v313 = *v311;
                long long v314 = *v309;
                if ((unint64_t)*v309 >= *v299)
                {
                  uint64_t v316 = v314 - *v298;
                  if ((unint64_t)(v316 + 1) >> 61) {
                    goto LABEL_534;
                  }
                  uint64_t v317 = *v299 - (void)*v298;
                  uint64_t v318 = v317 >> 2;
                  if (v317 >> 2 <= (unint64_t)(v316 + 1)) {
                    uint64_t v318 = v316 + 1;
                  }
                  if ((unint64_t)v317 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v319 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v319 = v318;
                  }
                  if (v319) {
                    unint64_t v319 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v319);
                  }
                  else {
                    uint64_t v320 = 0;
                  }
                  uint64_t v321 = (unint64_t *)(v319 + 8 * v316);
                  *uint64_t v321 = v313 | (v312 << 32);
                  long long v315 = v321 + 1;
                  char v322 = *v309;
                  uint64_t v323 = *v298;
                  if (*v309 != *v298)
                  {
                    do
                    {
                      unint64_t v324 = *--v322;
                      *--uint64_t v321 = v324;
                    }
                    while (v322 != v323);
                    char v322 = *v298;
                  }
                  *v298 = v321;
                  *long long v309 = v315;
                  void *v299 = v319 + 8 * v320;
                  if (v322) {
                    operator delete(v322);
                  }
                }
                else
                {
                  *long long v314 = v313 | (v310 << 32);
                  long long v315 = v314 + 1;
                }
                *long long v309 = v315;
                if (!--v296) {
                  goto LABEL_359;
                }
              }
            case 11:
              *((_DWORD *)a1 + 173) = 954437177 * ((a1[10] - a1[9]) >> 3);
              unsigned int v327 = readVaruint32((uint64_t)&v445);
              uint64_t v34 = v435;
              if (*((unsigned char *)a1 + 504) && a1[62] != v327) {
                operator new();
              }
              uint64_t v328 = a1[59];
              if (0x4EC4EC4EC4EC4EC5 * ((a1[61] - v328) >> 3) < (unint64_t)v327)
              {
                uint64_t v329 = (unsigned __int128)((a1[60] - v328) * (__int128)0x4EC4EC4EC4EC4EC5) >> 64;
                uint64_t v330 = (v329 >> 5) + ((unint64_t)v329 >> 63);
                v331 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::object::WasmSegment>>(v327);
                v334 = (char *)a1[59];
                v333 = (char *)a1[60];
                v335 = &v331[104 * v330];
                if (v333 != v334)
                {
                  do
                  {
                    long long v336 = *(_OWORD *)(v333 - 104);
                    long long v337 = *(_OWORD *)(v333 - 88);
                    *(_OWORD *)(v335 - 72) = *(_OWORD *)(v333 - 72);
                    *(_OWORD *)(v335 - 88) = v337;
                    *(_OWORD *)(v335 - 104) = v336;
                    long long v338 = *(_OWORD *)(v333 - 56);
                    long long v339 = *(_OWORD *)(v333 - 40);
                    long long v340 = *(_OWORD *)(v333 - 24);
                    *((void *)v335 - 1) = *((void *)v333 - 1);
                    *(_OWORD *)(v335 - 24) = v340;
                    *(_OWORD *)(v335 - 40) = v339;
                    *(_OWORD *)(v335 - 56) = v338;
                    v335 -= 104;
                    v333 -= 104;
                  }
                  while (v333 != v334);
                  v333 = (char *)a1[59];
                }
                a1[59] = v335;
                a1[60] = &v331[104 * v330];
                a1[61] = &v331[104 * v332];
                if (v333) {
                  operator delete(v333);
                }
              }
              if (v327)
              {
                do
                {
                  memset(&v448[5], 0, 48);
                  int v341 = readVaruint32((uint64_t)&v445);
                  char v342 = v341;
                  LODWORD(v448[1]) = v341;
                  if ((v341 & 2) != 0) {
                    int v343 = readVaruint32((uint64_t)&v445);
                  }
                  else {
                    int v343 = 0;
                  }
                  HIDWORD(v448[1]) = v343;
                  if (v342)
                  {
                    LOBYTE(v448[2]) = 0;
                    LOBYTE(v448[3]) = 65;
                    LODWORD(v448[4]) = 0;
                  }
                  else
                  {
                    readInitExpr((uint64_t)&v437, (uint64_t)&v448[2], (uint64_t)&v445);
                    if (v437) {
                      goto LABEL_476;
                    }
                  }
                  unsigned int v344 = readVaruint32((uint64_t)&v445);
                  std::string::size_type v345 = v445.__r_.__value_.__r.__words[2];
                  std::string::size_type v346 = v445.__r_.__value_.__l.__size_;
                  if (v445.__r_.__value_.__r.__words[2] - v445.__r_.__value_.__l.__size_ < v344) {
                    operator new();
                  }
                  uint64_t v347 = v344;
                  v448[7] = (void *)v445.__r_.__value_.__l.__size_;
                  v448[8] = (void *)v344;
                  v448[11] = 0;
                  LODWORD(v448[12]) = -1;
                  LODWORD(v448[0]) = LODWORD(v445.__r_.__value_.__r.__words[1])
                                   - LODWORD(v445.__r_.__value_.__l.__data_);
                  v445.__r_.__value_.__l.__size_ += v344;
                  unint64_t v348 = a1[60];
                  unint64_t v349 = a1[61];
                  if (v348 >= v349)
                  {
                    uint64_t v351 = a1[59];
                    uint64_t v352 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v348 - v351) >> 3);
                    unint64_t v353 = v352 + 1;
                    if ((unint64_t)(v352 + 1) > 0x276276276276276) {
                      goto LABEL_534;
                    }
                    unint64_t v354 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v349 - v351) >> 3);
                    if (2 * v354 > v353) {
                      unint64_t v353 = 2 * v354;
                    }
                    if (v354 >= 0x13B13B13B13B13BLL) {
                      unint64_t v355 = 0x276276276276276;
                    }
                    else {
                      unint64_t v355 = v353;
                    }
                    if (v355) {
                      unint64_t v355 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::object::WasmSegment>>(v355);
                    }
                    else {
                      uint64_t v356 = 0;
                    }
                    unint64_t v357 = v355 + 104 * v352;
                    *(_OWORD *)unint64_t v357 = *(_OWORD *)v448;
                    *(_OWORD *)(v357 + 16) = *(_OWORD *)&v448[2];
                    *(_OWORD *)(v357 + 32) = *(_OWORD *)&v448[4];
                    *(void **)(v357 + 96) = v448[12];
                    *(_OWORD *)(v357 + 80) = *(_OWORD *)&v448[10];
                    *(_OWORD *)(v357 + 64) = *(_OWORD *)&v448[8];
                    *(_OWORD *)(v357 + 48) = *(_OWORD *)&v448[6];
                    v359 = (char *)a1[59];
                    v358 = (char *)a1[60];
                    unint64_t v360 = v357;
                    if (v358 != v359)
                    {
                      do
                      {
                        long long v361 = *(_OWORD *)(v358 - 104);
                        long long v362 = *(_OWORD *)(v358 - 88);
                        *(_OWORD *)(v360 - 72) = *(_OWORD *)(v358 - 72);
                        *(_OWORD *)(v360 - 88) = v362;
                        *(_OWORD *)(v360 - 104) = v361;
                        long long v363 = *(_OWORD *)(v358 - 56);
                        long long v364 = *(_OWORD *)(v358 - 40);
                        long long v365 = *(_OWORD *)(v358 - 24);
                        *(void *)(v360 - 8) = *((void *)v358 - 1);
                        *(_OWORD *)(v360 - 24) = v365;
                        *(_OWORD *)(v360 - 40) = v364;
                        *(_OWORD *)(v360 - 56) = v363;
                        v360 -= 104;
                        v358 -= 104;
                      }
                      while (v358 != v359);
                      v358 = (char *)a1[59];
                    }
                    unint64_t v350 = v357 + 104;
                    a1[59] = v360;
                    a1[60] = v357 + 104;
                    a1[61] = v355 + 104 * v356;
                    if (v358) {
                      operator delete(v358);
                    }
                  }
                  else
                  {
                    *(_OWORD *)(v348 + 48) = *(_OWORD *)&v448[6];
                    *(_OWORD *)(v348 + 64) = *(_OWORD *)&v448[8];
                    *(_OWORD *)(v348 + 80) = *(_OWORD *)&v448[10];
                    *(void **)(v348 + 96) = v448[12];
                    *(_OWORD *)unint64_t v348 = *(_OWORD *)v448;
                    *(_OWORD *)(v348 + 16) = *(_OWORD *)&v448[2];
                    *(_OWORD *)(v348 + 32) = *(_OWORD *)&v448[4];
                    unint64_t v350 = v348 + 104;
                  }
                  a1[60] = v350;
                  --v327;
                }
                while (v327);
                std::string::size_type v366 = v346 + v347;
              }
              else
              {
                std::string::size_type v345 = v445.__r_.__value_.__r.__words[2];
                std::string::size_type v366 = v445.__r_.__value_.__l.__size_;
              }
              if (v366 == v345) {
                goto LABEL_400;
              }
              LODWORD(v448[0]) = 3;
              goto LABEL_438;
            case 12:
              unsigned int v367 = readVaruint32((uint64_t)&v445);
              uint64_t v34 = v435;
              if (!*((unsigned char *)a1 + 504)) {
                *((unsigned char *)a1 + 504) = 1;
              }
              a1[62] = v367;
              goto LABEL_400;
            case 13:
              *((_DWORD *)a1 + 174) = 954437177 * ((a1[10] - a1[9]) >> 3);
              unsigned int v368 = readVaruint32((uint64_t)&v445);
              unsigned int v369 = v368;
              uint64_t v370 = a1[47];
              uint64_t v34 = v435;
              if (0xAAAAAAAAAAAAAAABLL * ((a1[49] - v370) >> 3) < v368)
              {
                uint64_t v371 = (unsigned __int128)((a1[48] - v370) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
                uint64_t v372 = (v371 >> 2) + ((unint64_t)v371 >> 63);
                v373 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v368);
                v376 = (char *)a1[47];
                v375 = (char *)a1[48];
                v377 = &v373[24 * v372];
                if (v375 != v376)
                {
                  do
                  {
                    long long v378 = *(_OWORD *)(v375 - 24);
                    *((void *)v377 - 1) = *((void *)v375 - 1);
                    *(_OWORD *)(v377 - 24) = v378;
                    v377 -= 24;
                    v375 -= 24;
                  }
                  while (v375 != v376);
                  v375 = (char *)a1[47];
                }
                a1[47] = v377;
                a1[48] = &v373[24 * v372];
                a1[49] = &v373[24 * v374];
                if (v375) {
                  operator delete(v375);
                }
              }
              if (!v369) {
                goto LABEL_429;
              }
              uint64_t v379 = (a1[36] - a1[35]) >> 6;
              while (1)
              {
                v380 = (unsigned char *)v445.__r_.__value_.__l.__size_;
                if (v445.__r_.__value_.__l.__size_ == v445.__r_.__value_.__r.__words[2]) {
                  goto LABEL_533;
                }
                ++v445.__r_.__value_.__l.__size_;
                if (*v380) {
                  operator new();
                }
                unsigned int v381 = readVaruint32((uint64_t)&v445);
                if (v381 >= v379)
                {
                  LODWORD(v448[0]) = 3;
                  llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                }
                unsigned int v382 = v381;
                uint64_t v384 = a1[47];
                unint64_t v383 = a1[48];
                uint64_t v385 = (uint64_t)(v383 - v384) / 24;
                int v386 = *((_DWORD *)a1 + 171) + v385;
                unint64_t v387 = a1[49];
                if (v383 >= v387)
                {
                  unint64_t v389 = v385 + 1;
                  if ((unint64_t)(v385 + 1) > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_534;
                  }
                  unint64_t v390 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v387 - v384) >> 3);
                  if (2 * v390 > v389) {
                    unint64_t v389 = 2 * v390;
                  }
                  if (v390 >= 0x555555555555555) {
                    unint64_t v391 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v391 = v389;
                  }
                  if (v391) {
                    unint64_t v391 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v391);
                  }
                  else {
                    uint64_t v392 = 0;
                  }
                  unint64_t v393 = v391 + 24 * v385;
                  *(_DWORD *)unint64_t v393 = v386;
                  *(_DWORD *)(v393 + 4) = v382;
                  *(void *)(v393 + 8) = 0;
                  *(void *)(v393 + 16) = 0;
                  v395 = (char *)a1[47];
                  v394 = (char *)a1[48];
                  unint64_t v396 = v393;
                  if (v394 != v395)
                  {
                    do
                    {
                      long long v397 = *(_OWORD *)(v394 - 24);
                      *(void *)(v396 - 8) = *((void *)v394 - 1);
                      *(_OWORD *)(v396 - 24) = v397;
                      v396 -= 24;
                      v394 -= 24;
                    }
                    while (v394 != v395);
                    v394 = (char *)a1[47];
                  }
                  unint64_t v388 = v393 + 24;
                  a1[47] = v396;
                  a1[48] = v393 + 24;
                  a1[49] = v391 + 24 * v392;
                  if (v394) {
                    operator delete(v394);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v383 = v386;
                  *(_DWORD *)(v383 + 4) = v381;
                  unint64_t v388 = v383 + 24;
                  *(void *)(v383 + 8) = 0;
                  *(void *)(v383 + 16) = 0;
                }
                a1[48] = v388;
                if (!--v369)
                {
LABEL_429:
                  if (v445.__r_.__value_.__l.__size_ != v445.__r_.__value_.__r.__words[2])
                  {
                    LODWORD(v448[0]) = 3;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                  }
                  goto LABEL_400;
                }
              }
            default:
              v448[0] = "invalid section type: ";
              v448[2] = v14;
              LOWORD(v448[4]) = 2051;
              operator new();
          }
LABEL_476:
          uint64_t v402 = v437;
          *a3 = v437;
          if (v402)
          {
LABEL_529:
            if (v441[0])
            {
              v441[1] = v441[0];
              operator delete(v441[0]);
            }
            goto LABEL_531;
          }
LABEL_477:
          unint64_t v404 = a1[10];
          unint64_t v403 = a1[11];
          if (v404 >= v403)
          {
            unint64_t v408 = 0x8E38E38E38E38E39 * ((uint64_t)(v404 - *v34) >> 3);
            unint64_t v409 = v408 + 1;
            if (v408 + 1 > 0x38E38E38E38E38ELL) {
              goto LABEL_534;
            }
            unint64_t v410 = 0x8E38E38E38E38E39 * ((uint64_t)(v403 - *v34) >> 3);
            if (2 * v410 > v409) {
              unint64_t v409 = 2 * v410;
            }
            if (v410 >= 0x1C71C71C71C71C7) {
              unint64_t v411 = 0x38E38E38E38E38ELL;
            }
            else {
              unint64_t v411 = v409;
            }
            if (v411)
            {
              if (v411 > 0x38E38E38E38E38ELL) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              v412 = (char *)operator new(72 * v411);
            }
            else
            {
              v412 = 0;
            }
            v413 = &v412[72 * v408];
            v414 = &v412[72 * v411];
            long long v415 = v439;
            *(_OWORD *)v413 = v438;
            *((_OWORD *)v413 + 1) = v415;
            *((_OWORD *)v413 + 2) = v440;
            std::vector<llvm::wasm::WasmRelocation>::vector((void *)v413 + 6, (uint64_t)v441);
            v407 = v413 + 72;
            v416 = (char *)a1[9];
            v417 = (char *)a1[10];
            if (v417 == v416)
            {
              a1[9] = v413;
              a1[10] = v407;
              a1[11] = v414;
            }
            else
            {
              do
              {
                long long v418 = *(_OWORD *)(v417 - 72);
                long long v419 = *(_OWORD *)(v417 - 56);
                *(_OWORD *)(v413 - 40) = *(_OWORD *)(v417 - 40);
                *(_OWORD *)(v413 - 56) = v419;
                *(_OWORD *)(v413 - 72) = v418;
                *((void *)v413 - 2) = 0;
                *((void *)v413 - 1) = 0;
                *((void *)v413 - 3) = 0;
                *(_OWORD *)(v413 - 24) = *(_OWORD *)(v417 - 24);
                *((void *)v413 - 1) = *((void *)v417 - 1);
                v413 -= 72;
                *((void *)v417 - 3) = 0;
                *((void *)v417 - 2) = 0;
                *((void *)v417 - 1) = 0;
                v417 -= 72;
              }
              while (v417 != v416);
              v417 = (char *)a1[9];
              v420 = (char *)a1[10];
              a1[9] = v413;
              a1[10] = v407;
              a1[11] = v414;
              while (v420 != v417)
              {
                v421 = (void *)*((void *)v420 - 3);
                if (v421)
                {
                  *((void *)v420 - 2) = v421;
                  operator delete(v421);
                }
                v420 -= 72;
              }
            }
            if (v417) {
              operator delete(v417);
            }
          }
          else
          {
            long long v405 = v438;
            long long v406 = v440;
            *(_OWORD *)(v404 + 16) = v439;
            *(_OWORD *)(v404 + 32) = v406;
            *(_OWORD *)unint64_t v404 = v405;
            std::vector<llvm::wasm::WasmRelocation>::vector((void *)(v404 + 48), (uint64_t)v441);
            v407 = (char *)(v404 + 72);
          }
          a1[10] = v407;
          if (v441[0]) {
            operator delete(v441[0]);
          }
          uint64_t v13 = (unsigned __int8 *)v443;
          if (v443 >= v444) {
            goto LABEL_531;
          }
          break;
        case 1:
          goto LABEL_37;
        case 2:
          unint64_t v20 = 0;
          uint64_t String = 0;
          unsigned int v21 = 2;
          goto LABEL_37;
        case 3:
          unint64_t v20 = 0;
          uint64_t String = 0;
          unsigned int v21 = 3;
          goto LABEL_37;
        case 4:
          unint64_t v20 = 0;
          uint64_t String = 0;
          unsigned int v21 = 4;
          goto LABEL_37;
        case 5:
          unint64_t v20 = 0;
          uint64_t String = 0;
          unsigned int v21 = 5;
          goto LABEL_37;
        case 6:
          unint64_t v20 = 0;
          uint64_t String = 0;
          unsigned int v21 = 7;
          goto LABEL_37;
        case 7:
          unint64_t v20 = 0;
          uint64_t String = 0;
          unsigned int v21 = 8;
          goto LABEL_37;
        case 8:
          unint64_t v20 = 0;
          uint64_t String = 0;
          unsigned int v21 = 9;
          goto LABEL_37;
        case 9:
          unint64_t v20 = 0;
          uint64_t String = 0;
          unsigned int v21 = 10;
          goto LABEL_37;
        case 10:
          unint64_t v20 = 0;
          uint64_t String = 0;
          unsigned int v21 = 12;
          goto LABEL_37;
        case 11:
          unint64_t v20 = 0;
          uint64_t String = 0;
          unsigned int v21 = 13;
          goto LABEL_37;
        case 12:
          unint64_t v20 = 0;
          uint64_t String = 0;
          unsigned int v21 = 11;
          goto LABEL_37;
        case 13:
          unint64_t v20 = 0;
          uint64_t String = 0;
          unsigned int v21 = 6;
          goto LABEL_37;
        default:
          uint64_t v432 = 0;
          a3 = v436;
          goto LABEL_51;
      }
    }
  }
LABEL_531:
  if (!*a3) {
    *a3 = 0;
  }
  return a1;
}

void llvm::object::WasmObjectFile::parseCustomSection(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  long long v6 = (void *)a2;
  char v7 = a1;
  uint64_t v571 = *MEMORY[0x263EF8340];
  switch(a4)
  {
    case 4uLL:
      if (*(_DWORD *)a3 != 1701667182) {
        goto LABEL_751;
      }
      long long v554 = 0uLL;
      LODWORD(v555[0]) = 0;
      memset(__dst, 0, 20);
      v525[0] = 0;
      v525[1] = 0;
      LODWORD(p_ULEB128) = 0;
      unint64_t v8 = *(unsigned __int8 **)(a5 + 8);
      while (2)
      {
        uint64_t v9 = *(unsigned __int8 **)(v5 + 16);
        if (v8 < v9)
        {
          *(void *)(v5 + 8) = v8 + 1;
          unsigned int v10 = *v8;
          unsigned int Varuint32 = readVaruint32(v5);
          BOOL v12 = v10 > 9 || ((1 << v10) & 0x282) == 0;
          v509 = (unsigned __int8 *)(*(void *)(v5 + 8) + Varuint32);
          if (v12)
          {
            *(void *)(v5 + 8) += Varuint32;
          }
          else
          {
            int v13 = readVaruint32(v5);
            if (v13)
            {
              int v14 = v13;
              unsigned int v513 = v10;
              do
              {
                unsigned int v15 = readVaruint32(v5);
                uint64_t String = readString(v5);
                uint64_t v18 = v17;
                if (v10 == 7)
                {
                  v523.__r_.__value_.__r.__words[0] = v15;
                  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)__dst, &v523, (uint64_t)&v560);
                  if (!(_BYTE)v562)
                  {
                    LODWORD(v560) = 3;
                    goto LABEL_736;
                  }
                  if ((unint64_t)*((unsigned int *)v6 + 168) + ((uint64_t)(v6[45] - v6[44]) >> 6) <= v15
                    || v18 == 0)
                  {
                    LODWORD(v560) = 3;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                  }
                  int v22 = 1;
                }
                else if (v10 == 1)
                {
                  v523.__r_.__value_.__r.__words[0] = v15;
                  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v554, &v523, (uint64_t)&v560);
                  if (!(_BYTE)v562)
                  {
                    LODWORD(v560) = 3;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                  }
                  uint64_t v19 = *((unsigned int *)v6 + 170);
                  uint64_t v20 = v6[64];
                  if (v19 + ((v6[65] - v20) >> 7) <= (unint64_t)v15 || v18 == 0)
                  {
                    LODWORD(v560) = 3;
LABEL_736:
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                  }
                  int v22 = 0;
                  BOOL v23 = v15 >= v19;
                  uint64_t v24 = v15 - v19;
                  if (v23)
                  {
                    uint64_t v25 = v20 + (v24 << 7);
                    *(void *)(v25 + 104) = String;
                    *(void *)(v25 + 112) = v18;
                  }
                }
                else
                {
                  v523.__r_.__value_.__r.__words[0] = v15;
                  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v525, &v523, (uint64_t)&v560);
                  if (!(_BYTE)v562)
                  {
                    LODWORD(v560) = 3;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                  }
                  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v6[60] - v6[59]) >> 3) < (unint64_t)v15)
                  {
                    LODWORD(v560) = 3;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>();
                  }
                  int v22 = 2;
                }
                int v27 = (int *)v6[71];
                unint64_t v28 = v6[72];
                if ((unint64_t)v27 >= v28)
                {
                  uint64_t v30 = (int *)v6[70];
                  unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v30) >> 3) + 1;
                  if (v31 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_758;
                  }
                  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (void)v30) >> 3);
                  if (2 * v32 > v31) {
                    unint64_t v31 = 2 * v32;
                  }
                  if (v32 >= 0x555555555555555) {
                    unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v33 = v31;
                  }
                  if (v33)
                  {
                    if (v33 > 0xAAAAAAAAAAAAAAALL) {
                      goto LABEL_759;
                    }
                    uint64_t v34 = (char *)operator new(24 * v33);
                  }
                  else
                  {
                    uint64_t v34 = 0;
                  }
                  uint64_t v35 = &v34[8 * (((char *)v27 - (char *)v30) >> 3)];
                  *(_DWORD *)uint64_t v35 = v22;
                  *((_DWORD *)v35 + 1) = v15;
                  *((void *)v35 + 1) = String;
                  *((void *)v35 + 2) = v18;
                  uint64_t v36 = v35;
                  if (v27 == v30)
                  {
                    char v7 = a1;
                    long long v6 = (void *)a2;
                    unsigned int v10 = v513;
                  }
                  else
                  {
                    char v7 = a1;
                    long long v6 = (void *)a2;
                    unsigned int v10 = v513;
                    do
                    {
                      long long v37 = *(_OWORD *)(v27 - 6);
                      *((void *)v36 - 1) = *((void *)v27 - 1);
                      *(_OWORD *)(v36 - 24) = v37;
                      v36 -= 24;
                      v27 -= 6;
                    }
                    while (v27 != v30);
                    int v27 = *(int **)(a2 + 560);
                  }
                  v6[70] = v36;
                  uint64_t v29 = v35 + 24;
                  v6[71] = v35 + 24;
                  v6[72] = &v34[24 * v33];
                  if (v27) {
                    operator delete(v27);
                  }
                  uint64_t v5 = a5;
                }
                else
                {
                  *int v27 = v22;
                  v27[1] = v15;
                  uint64_t v29 = v27 + 6;
                  *((void *)v27 + 1) = String;
                  *((void *)v27 + 2) = v18;
                  char v7 = a1;
                  uint64_t v5 = a5;
                  unsigned int v10 = v513;
                }
                v6[71] = v29;
                --v14;
              }
              while (v14);
            }
          }
          unint64_t v8 = v509;
          if (*(unsigned __int8 **)(v5 + 8) != v509)
          {
            LODWORD(v560) = 3;
            llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
          }
          continue;
        }
        break;
      }
      if (v8 != v9)
      {
        LODWORD(v560) = 3;
        llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
      }
      *char v7 = 0;
      MEMORY[0x263E500A0](v525[0], 8);
      MEMORY[0x263E500A0](*(void *)__dst, 8);
      MEMORY[0x263E500A0](v554, 8);
      goto LABEL_750;
    case 6uLL:
      if (*(_DWORD *)a3 != 1768716644 || *(_WORD *)(a3 + 4) != 27502) {
        goto LABEL_556;
      }
      *(unsigned char *)(a2 + 589) = 1;
      *(_DWORD *)(a2 + 96) = readVaruint32(a5);
      *((_DWORD *)v6 + 25) = readVaruint32(v5);
      *((_DWORD *)v6 + 26) = readVaruint32(v5);
      *((_DWORD *)v6 + 27) = readVaruint32(v5);
      int v39 = readVaruint32(v5);
      if (!v39) {
        goto LABEL_81;
      }
      int v40 = v39;
      do
      {
        uint64_t v41 = readString(v5);
        uint64_t v43 = v41;
        uint64_t v44 = v42;
        unint64_t v46 = (uint64_t *)v6[15];
        unint64_t v45 = v6[16];
        if ((unint64_t)v46 >= v45)
        {
          uint64_t v48 = v6[14];
          uint64_t v49 = ((uint64_t)v46 - v48) >> 4;
          unint64_t v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 60) {
            goto LABEL_758;
          }
          uint64_t v51 = v45 - v48;
          if (v51 >> 3 > v50) {
            unint64_t v50 = v51 >> 3;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v50;
          }
          if (v52) {
            unsigned int v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(v6 + 16), v52);
          }
          else {
            unsigned int v53 = 0;
          }
          uint64_t v54 = (uint64_t *)&v53[16 * v49];
          uint64_t *v54 = v43;
          v54[1] = v44;
          unsigned int v56 = (char *)v6[14];
          uint64_t v55 = (char *)v6[15];
          uint64_t v57 = v54;
          if (v55 != v56)
          {
            do
            {
              *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
              v57 -= 2;
              v55 -= 16;
            }
            while (v55 != v56);
            uint64_t v55 = (char *)v6[14];
          }
          uint64_t v47 = v54 + 2;
          v6[14] = v57;
          v6[15] = v54 + 2;
          v6[16] = &v53[16 * v52];
          if (v55) {
            operator delete(v55);
          }
        }
        else
        {
          *unint64_t v46 = v41;
          v46[1] = v42;
          uint64_t v47 = v46 + 2;
        }
        v6[15] = v47;
        --v40;
      }
      while (v40);
LABEL_81:
      char v7 = a1;
      if (*(void *)(v5 + 8) == *(void *)(v5 + 16)) {
        goto LABEL_751;
      }
      LODWORD(v560) = 3;
      goto LABEL_83;
    case 7uLL:
      if (*(_DWORD *)a3 != 1802398060 || *(_DWORD *)(a3 + 3) != 1735289195) {
        goto LABEL_556;
      }
      *(unsigned char *)(a2 + 588) = 1;
      unsigned int v59 = readVaruint32(a5);
      *((_DWORD *)v6 + 148) = v59;
      if (v59 != 2)
      {
        v525[0] = "unexpected metadata version: ";
        unint64_t p_ULEB128 = v59;
        __int16 v527 = 2051;
        *(void *)long long __dst = v525;
        *(void *)&__dst[16] = " (Expected: ";
        __int16 v530 = 770;
        *(void *)&long long v554 = __dst;
        v555[0] = 2;
        __int16 v556 = 2050;
        v560 = &v554;
        unint64_t v562 = (unint64_t)")";
        __int16 v564 = 770;
        operator new();
      }
      uint64_t v60 = *(unsigned __int8 **)(v5 + 8);
      uint64_t v61 = *(unsigned __int8 **)(v5 + 16);
      uint64_t v499 = (uint64_t)(v6 + 80);
      v501 = v61;
LABEL_91:
      if (v60 >= v61)
      {
        if (v60 == v61) {
          goto LABEL_751;
        }
        LODWORD(v560) = 3;
LABEL_745:
        llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
      }
      *(void *)(v5 + 8) = v60 + 1;
      *(void *)(v5 + 16) = v61;
      int v62 = *v60;
      uint64_t v63 = *(void *)(v5 + 8) + readVaruint32(v5);
      *(void *)(v5 + 16) = v63;
      switch(v62)
      {
        case 5:
          unsigned int v64 = readVaruint32(v5);
          if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v6[60] - v6[59]) >> 3) < (unint64_t)v64)
          {
            LODWORD(v560) = 3;
            llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
          }
          if (v64)
          {
            uint64_t v65 = 0;
            uint64_t v66 = 104 * v64;
            do
            {
              uint64_t v67 = readString(v5);
              uint64_t v68 = v6[59] + v65;
              *(void *)(v68 + 72) = v67;
              *(void *)(v68 + 80) = v69;
              *(_DWORD *)(v6[59] + v65 + 88) = readVaruint32(v5);
              *(_DWORD *)(v6[59] + v65 + 92) = readVaruint32(v5);
              v65 += 104;
            }
            while (v66 != v65);
          }
          goto LABEL_372;
        case 6:
          unsigned int v70 = readVaruint32(v5);
          unsigned int v71 = v70;
          uint64_t v72 = v6[75];
          if (v70 > (unint64_t)((v6[77] - v72) >> 3))
          {
            uint64_t v73 = v6[76] - v72;
            std::string::size_type v75 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v70);
            char v76 = (char *)v6[76];
            uint64_t v77 = (char *)v6[75];
            uint64_t v78 = &v75[v73 & 0xFFFFFFFFFFFFFFF8];
            if (v76 != v77)
            {
              do
              {
                uint64_t v79 = *((void *)v76 - 1);
                v76 -= 8;
                *((void *)v78 - 1) = v79;
                v78 -= 8;
              }
              while (v76 != v77);
              char v76 = (char *)v6[75];
            }
            v6[75] = v78;
            v6[76] = &v75[v73 & 0xFFFFFFFFFFFFFFF8];
            v6[77] = &v75[8 * v74];
            if (v76) {
              operator delete(v76);
            }
          }
          if (!v71) {
            goto LABEL_372;
          }
          for (int i = 0; i != v71; ++i)
          {
            unsigned int v81 = readVaruint32(v5);
            unsigned int v82 = readVaruint32(v5);
            uint64_t v83 = v82;
            uint64_t v84 = v6[67];
            if (v82 >= (unint64_t)((v6[68] - v84) >> 5) || *(unsigned char *)(*(void *)(v84 + 32 * v82) + 16))
            {
              v560 = "invalid function symbol: ";
              unint64_t v562 = v82;
LABEL_720:
              __int16 v564 = 2051;
              operator new();
            }
            unint64_t v85 = (unint64_t *)v6[76];
            unint64_t v86 = v6[77];
            if ((unint64_t)v85 >= v86)
            {
              uint64_t v88 = v6[75];
              uint64_t v89 = ((uint64_t)v85 - v88) >> 3;
              if ((unint64_t)(v89 + 1) >> 61) {
                goto LABEL_758;
              }
              uint64_t v90 = v86 - v88;
              uint64_t v91 = v90 >> 2;
              if (v90 >> 2 <= (unint64_t)(v89 + 1)) {
                uint64_t v91 = v89 + 1;
              }
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v92 = v91;
              }
              if (v92) {
                unint64_t v92 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v92);
              }
              else {
                uint64_t v93 = 0;
              }
              uint64_t v94 = (unint64_t *)(v92 + 8 * v89);
              *uint64_t v94 = v81 | (unint64_t)(v83 << 32);
              unsigned int v87 = v94 + 1;
              uint64_t v95 = (char *)v6[76];
              uint64_t v96 = (char *)v6[75];
              if (v95 == v96)
              {
                char v7 = a1;
              }
              else
              {
                char v7 = a1;
                do
                {
                  unint64_t v97 = *((void *)v95 - 1);
                  v95 -= 8;
                  *--uint64_t v94 = v97;
                }
                while (v95 != v96);
                uint64_t v95 = (char *)v6[75];
              }
              v6[75] = v94;
              v6[76] = v87;
              v6[77] = v92 + 8 * v93;
              if (v95) {
                operator delete(v95);
              }
            }
            else
            {
              unint64_t *v85 = v81 | ((unint64_t)v82 << 32);
              unsigned int v87 = v85 + 1;
              char v7 = a1;
            }
            v6[76] = v87;
          }
          goto LABEL_372;
        case 7:
          int v98 = readVaruint32(v5);
          long long v554 = 0uLL;
          v555[0] = 0x800000000;
          if (!v98) {
            goto LABEL_166;
          }
          int v99 = v98;
          for (int j = 0; j != v99; ++j)
          {
            __int16 v102 = (uint64_t *)readString(v5);
            unint64_t v103 = v101;
            if (!v101
              || (llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&v554, v102, v101), (v104 & 1) == 0))
            {
              v560 = "bad/duplicate COMDAT name ";
              unint64_t v562 = (unint64_t)v102;
              unint64_t v563 = v103;
              __int16 v564 = 1283;
              operator new();
            }
            long long v105 = (uint64_t **)v6[79];
            unint64_t v106 = v6[80];
            if ((unint64_t)v105 >= v106)
            {
              uint64_t v108 = v6[78];
              uint64_t v109 = ((uint64_t)v105 - v108) >> 4;
              unint64_t v110 = v109 + 1;
              if ((unint64_t)(v109 + 1) >> 60) {
                goto LABEL_758;
              }
              uint64_t v111 = v106 - v108;
              if (v111 >> 3 > v110) {
                unint64_t v110 = v111 >> 3;
              }
              if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v112 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v112 = v110;
              }
              if (v112) {
                unint64_t v113 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v499, v112);
              }
              else {
                unint64_t v113 = 0;
              }
              uint64_t v114 = (uint64_t **)&v113[16 * v109];
              *uint64_t v114 = v102;
              v114[1] = (uint64_t *)v103;
              uint64_t v115 = (char *)v6[79];
              uint64_t v116 = (char *)v6[78];
              unint64_t v117 = v114;
              if (v115 != v116)
              {
                do
                {
                  *((_OWORD *)v117 - 1) = *((_OWORD *)v115 - 1);
                  v117 -= 2;
                  v115 -= 16;
                }
                while (v115 != v116);
                uint64_t v115 = (char *)v6[78];
              }
              v6[78] = v117;
              unsigned int v107 = v114 + 2;
              v6[79] = v114 + 2;
              v6[80] = &v113[16 * v112];
              if (v115) {
                operator delete(v115);
              }
            }
            else
            {
              *long long v105 = v102;
              v105[1] = (uint64_t *)v103;
              unsigned int v107 = v105 + 2;
            }
            v6[79] = v107;
            if (readVaruint32(v5))
            {
              LODWORD(v560) = 3;
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
            }
            int v118 = readVaruint32(v5);
            if (v118)
            {
              for (int k = v118; k; --k)
              {
                int v120 = readVaruint32(v5);
                unsigned int v121 = readVaruint32(v5);
                if (v120)
                {
                  if (v120 == 1)
                  {
                    uint64_t v127 = *((unsigned int *)v6 + 170);
                    if (v121 < v127
                      || (uint64_t v128 = v6[64], v127 + ((v6[65] - v128) >> 7) <= (unint64_t)v121))
                    {
                      LODWORD(v560) = 3;
                      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                    }
                    uint64_t v129 = v128 + ((unint64_t)(v121 - v127) << 7);
                    int v130 = *(_DWORD *)(v129 + 120);
                    unsigned int v123 = (_DWORD *)(v129 + 120);
                    if (v130 != -1)
                    {
                      LODWORD(v560) = 3;
                      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                    }
                  }
                  else
                  {
                    if (v120 != 5)
                    {
                      LODWORD(v560) = 3;
                      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                    }
                    uint64_t v122 = v6[9];
                    if (0x8E38E38E38E38E39 * ((v6[10] - v122) >> 3) <= v121)
                    {
                      LODWORD(v560) = 3;
                      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                    }
                    if (*(_DWORD *)(v122 + 72 * v121))
                    {
                      LODWORD(v560) = 3;
LABEL_348:
                      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                    }
                    unsigned int v123 = (_DWORD *)(v122 + 72 * v121 + 24);
                  }
                }
                else
                {
                  uint64_t v124 = v6[59];
                  if (0x4EC4EC4EC4EC4EC5 * ((v6[60] - v124) >> 3) <= (unint64_t)v121)
                  {
                    LODWORD(v560) = 3;
                    goto LABEL_348;
                  }
                  uint64_t v125 = v124 + 104 * v121;
                  int v126 = *(_DWORD *)(v125 + 96);
                  unsigned int v123 = (_DWORD *)(v125 + 96);
                  if (v126 != -1)
                  {
                    LODWORD(v560) = 3;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                  }
                }
                *unsigned int v123 = j;
              }
            }
          }
LABEL_166:
          char v7 = a1;
          *a1 = 0;
          uint64_t v302 = &v554;
          goto LABEL_371;
        case 8:
          unsigned int v131 = readVaruint32(v5);
          unsigned int v132 = v131;
          unint64_t v133 = v131;
          uint64_t v134 = v6[81];
          if (0xEEEEEEEEEEEEEEEFLL * ((v6[83] - v134) >> 3) < v131)
          {
            uint64_t v135 = (v6[82] - v134) / 120;
            uint64_t v136 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSymbolInfo>>(v131);
            int v138 = (char *)v6[82];
            unint64_t v139 = (char *)v6[81];
            unint64_t v140 = &v136[120 * v135];
            if (v138 != v139)
            {
              do
              {
                long long v141 = *(_OWORD *)(v138 - 120);
                long long v142 = *(_OWORD *)(v138 - 104);
                long long v143 = *(_OWORD *)(v138 - 88);
                *(_OWORD *)(v140 - 72) = *(_OWORD *)(v138 - 72);
                *(_OWORD *)(v140 - 88) = v143;
                *(_OWORD *)(v140 - 104) = v142;
                *(_OWORD *)(v140 - 120) = v141;
                long long v144 = *(_OWORD *)(v138 - 56);
                long long v145 = *(_OWORD *)(v138 - 40);
                long long v146 = *(_OWORD *)(v138 - 24);
                *((void *)v140 - 1) = *((void *)v138 - 1);
                *(_OWORD *)(v140 - 24) = v146;
                *(_OWORD *)(v140 - 40) = v145;
                *(_OWORD *)(v140 - 56) = v144;
                v140 -= 120;
                v138 -= 120;
              }
              while (v138 != v139);
              int v138 = (char *)v6[81];
            }
            v6[81] = v140;
            v6[82] = &v136[120 * v135];
            v6[83] = &v136[120 * v137];
            if (v138) {
              operator delete(v138);
            }
          }
          uint64_t v147 = v6[67];
          if (v133 > (v6[69] - v147) >> 5)
          {
            uint64_t v148 = v6[68] - v147;
            long long v149 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>(v133);
            long long v151 = (char *)v6[68];
            unsigned int v152 = (char *)v6[67];
            unsigned int v153 = &v149[v148 & 0xFFFFFFFFFFFFFFE0];
            if (v151 != v152)
            {
              do
              {
                long long v154 = *((_OWORD *)v151 - 1);
                *((_OWORD *)v153 - 2) = *((_OWORD *)v151 - 2);
                *((_OWORD *)v153 - 1) = v154;
                v153 -= 32;
                v151 -= 32;
              }
              while (v151 != v152);
              long long v151 = (char *)v6[67];
            }
            v6[67] = v153;
            v6[68] = &v149[v148 & 0xFFFFFFFFFFFFFFE0];
            v6[69] = &v149[32 * v150];
            if (v151) {
              operator delete(v151);
            }
          }
          v550[0] = 0;
          v550[1] = 0;
          v550[2] = 0x800000000;
          v547 = 0;
          v548 = 0;
          unint64_t v549 = 0;
          v544 = 0;
          v545 = 0;
          unint64_t v546 = 0;
          v541 = 0;
          v542 = 0;
          unint64_t v543 = 0;
          uint64_t v155 = (uint64_t)(v6[51] - v6[50]) >> 3;
          std::string __p = 0;
          v539 = 0;
          unint64_t v540 = 0;
          std::vector<llvm::wasm::WasmImport *>::reserve(&v547, 0x8E38E38E38E38E39 * v155);
          std::vector<llvm::wasm::WasmImport *>::reserve(&v544, 0x8E38E38E38E38E39 * ((uint64_t)(v6[51] - v6[50]) >> 3));
          std::vector<llvm::wasm::WasmImport *>::reserve(&v541, 0x8E38E38E38E38E39 * ((uint64_t)(v6[51] - v6[50]) >> 3));
          std::vector<llvm::wasm::WasmImport *>::reserve(&__p, 0x8E38E38E38E38E39 * ((uint64_t)(v6[51] - v6[50]) >> 3));
          uint64_t v156 = v6[50];
          uint64_t v157 = v6[51];
          if (v156 == v157) {
            goto LABEL_250;
          }
          break;
        default:
          *(void *)(v5 + 8) = v63;
          goto LABEL_372;
      }
      while (2)
      {
        switch(*(unsigned char *)(v156 + 32))
        {
          case 0:
            uint64_t v158 = v545;
            if ((unint64_t)v545 >= v546)
            {
              uint64_t v166 = (char *)v544;
              uint64_t v167 = (v545 - (unsigned char *)v544) >> 3;
              unint64_t v168 = v167 + 1;
              if ((unint64_t)(v167 + 1) >> 61) {
                goto LABEL_758;
              }
              uint64_t v169 = v546 - (void)v544;
              if ((uint64_t)(v546 - (void)v544) >> 2 > v168) {
                unint64_t v168 = v169 >> 2;
              }
              if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v170 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v170 = v168;
              }
              if (v170) {
                unint64_t v170 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v170);
              }
              else {
                uint64_t v171 = 0;
              }
              v190 = (char *)(v170 + 8 * v167);
              *(void *)v190 = v156;
              uint64_t v159 = v190 + 8;
              if (v158 != v166)
              {
                do
                {
                  uint64_t v191 = *((void *)v158 - 1);
                  v158 -= 8;
                  *((void *)v190 - 1) = v191;
                  v190 -= 8;
                }
                while (v158 != v166);
                uint64_t v158 = (char *)v544;
              }
              v544 = v190;
              unint64_t v546 = v170 + 8 * v171;
              if (v158) {
                operator delete(v158);
              }
            }
            else
            {
              *(void *)v545 = v156;
              uint64_t v159 = v158 + 8;
            }
            v545 = v159;
            goto LABEL_249;
          case 1:
            int v160 = v539;
            if ((unint64_t)v539 >= v540)
            {
              unint64_t v172 = (char *)__p;
              uint64_t v173 = (v539 - (unsigned char *)__p) >> 3;
              unint64_t v174 = v173 + 1;
              if ((unint64_t)(v173 + 1) >> 61) {
                goto LABEL_758;
              }
              uint64_t v175 = v540 - (void)__p;
              if ((uint64_t)(v540 - (void)__p) >> 2 > v174) {
                unint64_t v174 = v175 >> 2;
              }
              if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v176 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v176 = v174;
              }
              if (v176) {
                unint64_t v176 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v176);
              }
              else {
                uint64_t v177 = 0;
              }
              uint64_t v192 = (char *)(v176 + 8 * v173);
              *(void *)uint64_t v192 = v156;
              int v161 = v192 + 8;
              if (v160 != v172)
              {
                do
                {
                  uint64_t v193 = *((void *)v160 - 1);
                  v160 -= 8;
                  *((void *)v192 - 1) = v193;
                  v192 -= 8;
                }
                while (v160 != v172);
                int v160 = (char *)__p;
              }
              std::string __p = v192;
              unint64_t v540 = v176 + 8 * v177;
              if (v160) {
                operator delete(v160);
              }
            }
            else
            {
              *(void *)v539 = v156;
              int v161 = v160 + 8;
            }
            v539 = v161;
            goto LABEL_249;
          case 3:
            long long v162 = v548;
            if ((unint64_t)v548 >= v549)
            {
              uint64_t v178 = (char *)v547;
              uint64_t v179 = (v548 - (unsigned char *)v547) >> 3;
              unint64_t v180 = v179 + 1;
              if ((unint64_t)(v179 + 1) >> 61) {
                goto LABEL_758;
              }
              uint64_t v181 = v549 - (void)v547;
              if ((uint64_t)(v549 - (void)v547) >> 2 > v180) {
                unint64_t v180 = v181 >> 2;
              }
              if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v182 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v182 = v180;
              }
              if (v182) {
                unint64_t v182 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v182);
              }
              else {
                uint64_t v183 = 0;
              }
              unint64_t v194 = (char *)(v182 + 8 * v179);
              *(void *)unint64_t v194 = v156;
              unint64_t v163 = v194 + 8;
              if (v162 != v178)
              {
                do
                {
                  uint64_t v195 = *((void *)v162 - 1);
                  v162 -= 8;
                  *((void *)v194 - 1) = v195;
                  v194 -= 8;
                }
                while (v162 != v178);
                long long v162 = (char *)v547;
              }
              v547 = v194;
              unint64_t v549 = v182 + 8 * v183;
              if (v162) {
                operator delete(v162);
              }
            }
            else
            {
              *(void *)v548 = v156;
              unint64_t v163 = v162 + 8;
            }
            v548 = v163;
            goto LABEL_249;
          case 4:
            unint64_t v164 = v542;
            if ((unint64_t)v542 >= v543)
            {
              unint64_t v184 = (char *)v541;
              uint64_t v185 = (v542 - (unsigned char *)v541) >> 3;
              unint64_t v186 = v185 + 1;
              if ((unint64_t)(v185 + 1) >> 61) {
                goto LABEL_758;
              }
              uint64_t v187 = v543 - (void)v541;
              if ((uint64_t)(v543 - (void)v541) >> 2 > v186) {
                unint64_t v186 = v187 >> 2;
              }
              if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v188 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v188 = v186;
              }
              if (v188) {
                unint64_t v188 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v188);
              }
              else {
                uint64_t v189 = 0;
              }
              unint64_t v196 = (char *)(v188 + 8 * v185);
              *(void *)unint64_t v196 = v156;
              unint64_t v165 = v196 + 8;
              if (v164 != v184)
              {
                do
                {
                  uint64_t v197 = *((void *)v164 - 1);
                  v164 -= 8;
                  *((void *)v196 - 1) = v197;
                  v196 -= 8;
                }
                while (v164 != v184);
                unint64_t v164 = (char *)v541;
              }
              v541 = v196;
              unint64_t v543 = v188 + 8 * v189;
              if (v164) {
                operator delete(v164);
              }
            }
            else
            {
              *(void *)v542 = v156;
              unint64_t v165 = v164 + 8;
            }
            v542 = v165;
LABEL_249:
            v156 += 72;
            if (v156 != v157) {
              continue;
            }
LABEL_250:
            if (!v132)
            {
LABEL_340:
              char v7 = a1;
              *a1 = 0;
              long long v6 = (void *)a2;
              if (__p) {
                operator delete(__p);
              }
              if (v541) {
                operator delete(v541);
              }
              if (v544) {
                operator delete(v544);
              }
              if (v547) {
                operator delete(v547);
              }
              uint64_t v302 = (long long *)v550;
LABEL_371:
              llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)v302);
              if (!*v7)
              {
LABEL_372:
                uint64_t v60 = *(unsigned __int8 **)(v5 + 8);
                uint64_t v61 = v501;
                if (v60 != *(unsigned __int8 **)(v5 + 16))
                {
                  LODWORD(v560) = 3;
                  llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
                }
                goto LABEL_91;
              }
              return;
            }
            return;
          default:
            goto LABEL_249;
        }
      }
      while (1)
      {
        v198 = *(unsigned __int8 **)(v5 + 8);
        if (v198 == *(unsigned __int8 **)(v5 + 16)) {
          goto LABEL_760;
        }
        *(void *)(v5 + 8) = v198 + 1;
        v199 = (const char *)*v198;
        int v200 = readVaruint32(v5);
        int v201 = v200;
        unsigned int v202 = v200 & 0x10;
        switch((int)v199)
        {
          case 0:
            unsigned int v203 = readVaruint32(v5);
            uint64_t v204 = *(unsigned int *)(a2 + 680);
            if (v204 + ((uint64_t)(*(void *)(a2 + 520) - *(void *)(a2 + 512)) >> 7) <= (unint64_t)v203
              || (unsigned int v205 = v203, ((v202 >> 4) ^ 1) != v204 <= v203))
            {
              LODWORD(v560) = 3;
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
            }
            unsigned int v506 = v203;
            if (v202)
            {
              uint64_t v240 = v203;
              unsigned int v241 = v544;
              goto LABEL_288;
            }
            v514 = (void *)readString(v5);
            uint64_t v207 = v206;
            unint64_t v208 = *(void *)(a2 + 512) + ((unint64_t)(v205 - *(_DWORD *)(a2 + 680)) << 7);
            unint64_t v209 = *(void *)(a2 + 280) + ((unint64_t)*(unsigned int *)(v208 + 4) << 6);
            if (*(void *)(v208 + 96)) {
              goto LABEL_274;
            }
            char v510 = 0;
            char v210 = 0;
            char v211 = 0;
            char v212 = 0;
            unint64_t v213 = 0;
            v214 = 0;
            *(void *)(v208 + 88) = v514;
            *(void *)(v208 + 96) = v206;
            goto LABEL_301;
          case 1:
            v514 = (void *)readString(v5);
            uint64_t v207 = v215;
            if (v202) {
              goto LABEL_262;
            }
            unsigned int v216 = readVaruint32(v5);
            if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a2 + 480) - *(void *)(a2 + 472)) >> 3) <= (unint64_t)v216)
            {
              LODWORD(v560) = 3;
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
            }
            unsigned int v217 = v216;
            unsigned int v218 = v216;
            unint64_t ULEB128 = readULEB128(v5);
            uint64_t v503 = readULEB128(v5);
            unint64_t v505 = ULEB128;
            unint64_t v531 = *(void *)(*(void *)(a2 + 472) + 104 * v218 + 64);
            if (ULEB128 > v531)
            {
              __int16 v522 = 1283;
              __src[2] = v514;
              __src[3] = v207;
              v523.__r_.__value_.__r.__words[0] = (std::string::size_type)__src;
              __int16 v524 = 770;
              v525[0] = &v523;
              unint64_t p_ULEB128 = (unint64_t)&ULEB128;
              __int16 v527 = 3074;
              *(void *)long long __dst = v525;
              *(void *)&__dst[16] = " segment size: ";
              __int16 v530 = 770;
              *(void *)&long long v554 = __dst;
              v555[0] = &v531;
              __int16 v556 = 2562;
              v560 = &v554;
              unint64_t v562 = (unint64_t)")";
              __int16 v564 = 770;
LABEL_361:
              operator new();
            }
            unsigned int v506 = v217;
LABEL_262:
            char v510 = 0;
            char v210 = 0;
            char v211 = 0;
            char v212 = 0;
            unint64_t v209 = 0;
            goto LABEL_275;
          case 2:
            unsigned int v219 = readVaruint32(v5);
            uint64_t v220 = *(unsigned int *)(a2 + 672);
            if (v220 + ((uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 6) <= (unint64_t)v219
              || (unsigned int v221 = v219, ((v202 >> 4) ^ 1) != v220 <= v219))
            {
              LODWORD(v560) = 3;
              goto LABEL_351;
            }
            unsigned int v506 = v219;
            if (!v202)
            {
              v514 = (void *)readString(v5);
              uint64_t v207 = v222;
              unint64_t v223 = *(void *)(a2 + 352) + ((unint64_t)(v221 - *(_DWORD *)(a2 + 672)) << 6);
              unint64_t v213 = v223 + 4;
              if (*(void *)(v223 + 56))
              {
                char v510 = 0;
                char v210 = 0;
                char v211 = 0;
                char v212 = 0;
                unint64_t v209 = 0;
LABEL_276:
                v214 = 0;
              }
              else
              {
                char v510 = 0;
                char v210 = 0;
                char v211 = 0;
                char v212 = 0;
                unint64_t v209 = 0;
                v214 = 0;
                *(void *)(v223 + 48) = v514;
                *(void *)(v223 + 56) = v222;
              }
              goto LABEL_301;
            }
            if ((v201 & 3) == 1) {
              goto LABEL_358;
            }
            unint64_t v242 = (char *)*((void *)v547 + v219);
            if ((v201 & 0x40) != 0)
            {
              v514 = (void *)readString(a5);
              uint64_t v207 = v247;
              char v210 = v242[16];
              v552[0] = *(void *)(v242 + 17);
              *(void *)((char *)v552 + 7) = *((void *)v242 + 3);
              char v510 = 1;
            }
            else
            {
              char v510 = 0;
              char v210 = 0;
              uint64_t v207 = (void *)*((void *)v242 + 3);
              v514 = (void *)*((void *)v242 + 2);
            }
            unint64_t v209 = 0;
            v214 = 0;
            unint64_t v213 = (unint64_t)(v242 + 40);
            goto LABEL_299;
          case 3:
            if ((v200 & 3) != 2) {
              operator new();
            }
            unsigned int v224 = readVaruint32(v5);
            char v510 = 0;
            char v210 = 0;
            char v211 = 0;
            char v212 = 0;
            unint64_t v209 = 0;
            unint64_t v213 = 0;
            v214 = 0;
            unsigned int v506 = v224;
            uint64_t v225 = *(void *)(a2 + 72) + 72 * v224;
            uint64_t v207 = *(void **)(v225 + 16);
            v514 = *(void **)(v225 + 8);
            goto LABEL_301;
          case 4:
            unsigned int v226 = readVaruint32(v5);
            uint64_t v227 = *(unsigned int *)(a2 + 684);
            if (v227 - 0x5555555555555555 * ((uint64_t)(*(void *)(a2 + 384) - *(void *)(a2 + 376)) >> 3) <= (unint64_t)v226
              || (unsigned int v228 = v226, ((v202 >> 4) ^ 1) != v227 <= v226))
            {
              LODWORD(v560) = 3;
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
            }
            unsigned int v506 = v226;
            if (v202)
            {
              if ((v201 & 3) == 1)
              {
LABEL_358:
                LODWORD(v560) = 3;
                llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
              }
              uint64_t v240 = v226;
              unsigned int v241 = v541;
LABEL_288:
              long long v243 = (char *)v241[v240];
              if ((v201 & 0x40) != 0)
              {
                v514 = (void *)readString(a5);
                uint64_t v207 = v244;
                char v210 = v243[16];
                v552[0] = *(void *)(v243 + 17);
                *(void *)((char *)v552 + 7) = *((void *)v243 + 3);
                char v510 = 1;
              }
              else
              {
                char v510 = 0;
                char v210 = 0;
                uint64_t v207 = (void *)*((void *)v243 + 3);
                v514 = (void *)*((void *)v243 + 2);
              }
              unint64_t v213 = 0;
              v214 = 0;
              unint64_t v209 = *(void *)(a2 + 280) + ((unint64_t)*((unsigned int *)v243 + 10) << 6);
              char v245 = *v243;
              v553[0] = *(void *)(v243 + 1);
              uint64_t v246 = *((void *)v243 + 1);
              char v212 = v245;
              *(void *)((char *)v553 + 7) = v246;
              goto LABEL_300;
            }
            v514 = (void *)readString(v5);
            uint64_t v207 = v229;
            unsigned int v230 = v228 - *(_DWORD *)(a2 + 684);
            uint64_t v231 = *(void *)(a2 + 376);
            uint64_t v232 = v231 + 24 * v230;
            unint64_t v209 = *(void *)(a2 + 280) + ((unint64_t)*(unsigned int *)(v232 + 4) << 6);
            if (!*(void *)(v232 + 16))
            {
              char v510 = 0;
              char v210 = 0;
              char v211 = 0;
              char v212 = 0;
              unint64_t v213 = 0;
              v214 = 0;
              uint64_t v300 = v231 + 24 * v230;
              *(void *)(v300 + 8) = v514;
              *(void *)(v300 + 16) = v229;
              goto LABEL_301;
            }
LABEL_274:
            char v510 = 0;
            char v210 = 0;
            char v211 = 0;
            char v212 = 0;
LABEL_275:
            unint64_t v213 = 0;
            goto LABEL_276;
          case 5:
            unsigned int v233 = readVaruint32(v5);
            uint64_t v234 = *(unsigned int *)(a2 + 676);
            if (v234 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 3) <= (unint64_t)v233
              || (unsigned int v235 = v233, ((v202 >> 4) ^ 1) != v234 <= v233))
            {
              LODWORD(v560) = 3;
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
            }
            unsigned int v506 = v233;
            if (v202)
            {
              if ((v201 & 3) == 1)
              {
                LODWORD(v560) = 3;
LABEL_351:
                llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
              }
              unint64_t v242 = (char *)*((void *)__p + v233);
              if ((v201 & 0x40) != 0)
              {
                v514 = (void *)readString(a5);
                uint64_t v207 = v248;
                char v210 = v242[16];
                v552[0] = *(void *)(v242 + 17);
                *(void *)((char *)v552 + 7) = *((void *)v242 + 3);
                char v510 = 1;
              }
              else
              {
                char v510 = 0;
                char v210 = 0;
                uint64_t v207 = (void *)*((void *)v242 + 3);
                v514 = (void *)*((void *)v242 + 2);
              }
              unint64_t v209 = 0;
              unint64_t v213 = 0;
              v214 = v242 + 40;
LABEL_299:
              char v249 = *v242;
              v553[0] = *(void *)(v242 + 1);
              uint64_t v250 = *((void *)v242 + 1);
              char v212 = v249;
              *(void *)((char *)v553 + 7) = v250;
LABEL_300:
              char v211 = 1;
            }
            else
            {
              v514 = (void *)readString(v5);
              uint64_t v207 = v236;
              unsigned int v237 = v235 - *(_DWORD *)(a2 + 676);
              uint64_t v238 = *(void *)(a2 + 304);
              uint64_t v239 = v238 + 56 * v237;
              v214 = (char *)(v239 + 8);
              char v510 = 0;
              char v210 = 0;
              char v211 = 0;
              char v212 = 0;
              unint64_t v209 = 0;
              unint64_t v213 = 0;
              if (!*(void *)(v239 + 48))
              {
                uint64_t v301 = v238 + 56 * v237;
                *(void *)(v301 + 40) = v514;
                *(void *)(v301 + 48) = v236;
              }
            }
LABEL_301:
            if ((v201 & 3) != 2)
            {
              char v251 = v210;
              char v252 = v211;
              llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)v550, (uint64_t *)v514, (unint64_t)v207);
              char v211 = v252;
              char v210 = v251;
              if ((v253 & 1) == 0)
              {
                v560 = "duplicate symbol name ";
                unint64_t v562 = (unint64_t)v514;
                unint64_t v563 = (unint64_t)v207;
                __int16 v564 = 1283;
                operator new();
              }
            }
            unint64_t v507 = v213;
            unint64_t v254 = *(void *)(a2 + 656);
            unint64_t v255 = *(void *)(a2 + 664);
            if (v254 >= v255)
            {
              uint64_t v260 = *(void *)(a2 + 648);
              unint64_t v261 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v254 - v260) >> 3);
              unint64_t v262 = v261 + 1;
              if (v261 + 1 > 0x222222222222222) {
                goto LABEL_758;
              }
              int v256 = v214;
              unint64_t v263 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v255 - v260) >> 3);
              if (2 * v263 > v262) {
                unint64_t v262 = 2 * v263;
              }
              if (v263 >= 0x111111111111111) {
                unint64_t v264 = 0x222222222222222;
              }
              else {
                unint64_t v264 = v262;
              }
              if (v264)
              {
                v265 = v207;
                char v266 = (char)v199;
                char v267 = v212;
                unint64_t v268 = v209;
                char v269 = v211;
                unint64_t v264 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSymbolInfo>>(v264);
                char v211 = v269;
                unint64_t v209 = v268;
                char v212 = v267;
                LOBYTE(v199) = v266;
                uint64_t v207 = v265;
              }
              else
              {
                uint64_t v270 = 0;
              }
              unint64_t v271 = v264 + 120 * v261;
              *(void *)unint64_t v271 = v514;
              *(void *)(v271 + 8) = v207;
              *(unsigned char *)(v271 + 16) = (_BYTE)v199;
              *(_WORD *)(v271 + 17) = v536;
              *(unsigned char *)(v271 + 19) = v537;
              *(_DWORD *)(v271 + 20) = v201;
              *(unsigned char *)(v271 + 24) = v212;
              *(void *)(v271 + 25) = v553[0];
              *(void *)(v271 + 32) = *(void *)((char *)v553 + 7);
              *(unsigned char *)(v271 + 40) = v211;
              *(_DWORD *)(v271 + 44) = *(_DWORD *)&v535[3];
              *(_DWORD *)(v271 + 41) = *(_DWORD *)v535;
              *(unsigned char *)(v271 + 48) = v210;
              *(void *)(v271 + 49) = v552[0];
              *(void *)(v271 + 56) = *(void *)((char *)v552 + 7);
              *(unsigned char *)(v271 + 64) = v510;
              *(_DWORD *)(v271 + 65) = *(_DWORD *)v534;
              *(_DWORD *)(v271 + 68) = *(_DWORD *)&v534[3];
              *(unsigned char *)(v271 + 72) = 0;
              *(void *)(v271 + 73) = *(void *)v551;
              *(void *)(v271 + 80) = *(void *)&v551[7];
              *(unsigned char *)(v271 + 88) = 0;
              int v272 = *(_DWORD *)v533;
              *(_DWORD *)(v271 + 92) = *(_DWORD *)&v533[3];
              *(_DWORD *)(v271 + 89) = v272;
              *(_DWORD *)(v271 + 96) = v506;
              *(void *)(v271 + 104) = v505;
              *(void *)(v271 + 112) = v503;
              uint64_t v273 = *(char **)(a2 + 656);
              int64_t v274 = *(char **)(a2 + 648);
              unint64_t v275 = v271;
              if (v273 == v274)
              {
                unint64_t v282 = (void *)a2;
                uint64_t v5 = a5;
              }
              else
              {
                uint64_t v5 = a5;
                do
                {
                  long long v276 = *(_OWORD *)(v273 - 120);
                  long long v277 = *(_OWORD *)(v273 - 104);
                  long long v278 = *(_OWORD *)(v273 - 88);
                  *(_OWORD *)(v275 - 72) = *(_OWORD *)(v273 - 72);
                  *(_OWORD *)(v275 - 88) = v278;
                  *(_OWORD *)(v275 - 104) = v277;
                  *(_OWORD *)(v275 - 120) = v276;
                  long long v279 = *(_OWORD *)(v273 - 56);
                  long long v280 = *(_OWORD *)(v273 - 40);
                  long long v281 = *(_OWORD *)(v273 - 24);
                  *(void *)(v275 - 8) = *((void *)v273 - 1);
                  *(_OWORD *)(v275 - 24) = v281;
                  *(_OWORD *)(v275 - 40) = v280;
                  *(_OWORD *)(v275 - 56) = v279;
                  v275 -= 120;
                  v273 -= 120;
                }
                while (v273 != v274);
                unint64_t v282 = (void *)a2;
                uint64_t v273 = *(char **)(a2 + 648);
              }
              v282[81] = v275;
              unint64_t v259 = v271 + 120;
              v282[82] = v271 + 120;
              v282[83] = v264 + 120 * v270;
              unint64_t v257 = v209;
              if (v273) {
                operator delete(v273);
              }
            }
            else
            {
              int v256 = v214;
              unint64_t v257 = v209;
              *(void *)unint64_t v254 = v514;
              *(void *)(v254 + 8) = v207;
              *(unsigned char *)(v254 + 16) = (_BYTE)v199;
              *(_WORD *)(v254 + 17) = v536;
              *(unsigned char *)(v254 + 19) = v537;
              *(_DWORD *)(v254 + 20) = v201;
              *(unsigned char *)(v254 + 24) = v212;
              *(void *)(v254 + 25) = v553[0];
              *(void *)(v254 + 32) = *(void *)((char *)v553 + 7);
              *(unsigned char *)(v254 + 40) = v211;
              *(_DWORD *)(v254 + 44) = *(_DWORD *)&v535[3];
              *(_DWORD *)(v254 + 41) = *(_DWORD *)v535;
              *(unsigned char *)(v254 + 48) = v210;
              *(void *)(v254 + 49) = v552[0];
              *(void *)(v254 + 56) = *(void *)((char *)v552 + 7);
              *(unsigned char *)(v254 + 64) = v510;
              *(_DWORD *)(v254 + 65) = *(_DWORD *)v534;
              *(_DWORD *)(v254 + 68) = *(_DWORD *)&v534[3];
              *(unsigned char *)(v254 + 72) = 0;
              *(void *)(v254 + 73) = *(void *)v551;
              *(void *)(v254 + 80) = *(void *)&v551[7];
              *(unsigned char *)(v254 + 88) = 0;
              int v258 = *(_DWORD *)v533;
              *(_DWORD *)(v254 + 92) = *(_DWORD *)&v533[3];
              *(_DWORD *)(v254 + 89) = v258;
              *(_DWORD *)(v254 + 96) = v506;
              unint64_t v259 = v254 + 120;
              *(void *)(v254 + 104) = v505;
              *(void *)(v254 + 112) = v503;
              uint64_t v5 = a5;
            }
            *(void *)(a2 + 656) = v259;
            unint64_t v283 = v259 - 120;
            long long v284 = *(unint64_t **)(a2 + 544);
            unint64_t v285 = *(void *)(a2 + 552);
            if ((unint64_t)v284 >= v285)
            {
              uint64_t v287 = *(void *)(a2 + 536);
              uint64_t v288 = ((uint64_t)v284 - v287) >> 5;
              unint64_t v289 = v288 + 1;
              if ((unint64_t)(v288 + 1) >> 59) {
                goto LABEL_758;
              }
              uint64_t v290 = v285 - v287;
              if (v290 >> 4 > v289) {
                unint64_t v289 = v290 >> 4;
              }
              if ((unint64_t)v290 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v291 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v291 = v289;
              }
              uint64_t v292 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>(v291);
              int v294 = &v292[32 * v288];
              *(void *)int v294 = v283;
              *((void *)v294 + 1) = v507;
              *((void *)v294 + 2) = v256;
              *((void *)v294 + 3) = v257;
              int v295 = *(char **)(a2 + 544);
              unsigned int v296 = *(char **)(a2 + 536);
              uint64_t v297 = v294;
              if (v295 == v296)
              {
                v299 = (void *)a2;
              }
              else
              {
                do
                {
                  long long v298 = *((_OWORD *)v295 - 1);
                  *((_OWORD *)v297 - 2) = *((_OWORD *)v295 - 2);
                  *((_OWORD *)v297 - 1) = v298;
                  v297 -= 32;
                  v295 -= 32;
                }
                while (v295 != v296);
                v299 = (void *)a2;
                int v295 = *(char **)(a2 + 536);
              }
              v299[67] = v297;
              v286 = v294 + 32;
              v299[68] = v294 + 32;
              v299[69] = &v292[32 * v293];
              if (v295) {
                operator delete(v295);
              }
            }
            else
            {
              *long long v284 = v283;
              v284[1] = v507;
              v286 = v284 + 4;
              v284[2] = (unint64_t)v256;
              v284[3] = v257;
            }
            *(void *)(a2 + 544) = v286;
            if (!--v132) {
              goto LABEL_340;
            }
            break;
          default:
            v560 = "invalid symbol type: ";
            unint64_t v562 = (unint64_t)v199;
            __int16 v564 = 2051;
            goto LABEL_361;
        }
      }
    case 8uLL:
      if (*(void *)a3 != 0x302E6B6E696C7964) {
        goto LABEL_556;
      }
      *(unsigned char *)(a2 + 589) = 1;
      uint64_t v303 = *(unsigned __int8 **)(a5 + 8);
      long long v304 = *(unsigned __int8 **)(a5 + 16);
      if (v303 >= v304)
      {
        if (v303 != v304)
        {
          LODWORD(v560) = 3;
          llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
        }
      }
      else
      {
        uint64_t v515 = a2 + 128;
        unint64_t v511 = *(void *)(a5 + 16);
        do
        {
          *(void *)(v5 + 8) = v303 + 1;
          *(void *)(v5 + 16) = v304;
          int v305 = *v303;
          uint64_t v306 = *(void *)(v5 + 8) + readVaruint32(v5);
          *(void *)(v5 + 16) = v306;
          switch(v305)
          {
            case 1:
              *((_DWORD *)v6 + 24) = readVaruint32(v5);
              *((_DWORD *)v6 + 25) = readVaruint32(v5);
              *((_DWORD *)v6 + 26) = readVaruint32(v5);
              *((_DWORD *)v6 + 27) = readVaruint32(v5);
              goto LABEL_446;
            case 2:
              int v307 = readVaruint32(v5);
              if (!v307) {
                goto LABEL_446;
              }
              int v308 = v307;
              do
              {
                uint64_t v309 = readString(v5);
                uint64_t v311 = v309;
                uint64_t v312 = v310;
                long long v314 = (uint64_t *)v6[15];
                unint64_t v313 = v6[16];
                if ((unint64_t)v314 >= v313)
                {
                  uint64_t v316 = v6[14];
                  uint64_t v317 = ((uint64_t)v314 - v316) >> 4;
                  unint64_t v318 = v317 + 1;
                  if ((unint64_t)(v317 + 1) >> 60) {
                    goto LABEL_758;
                  }
                  uint64_t v319 = v313 - v316;
                  if (v319 >> 3 > v318) {
                    unint64_t v318 = v319 >> 3;
                  }
                  if ((unint64_t)v319 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v320 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v320 = v318;
                  }
                  if (v320) {
                    uint64_t v321 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v515, v320);
                  }
                  else {
                    uint64_t v321 = 0;
                  }
                  char v322 = (uint64_t *)&v321[16 * v317];
                  *char v322 = v311;
                  v322[1] = v312;
                  unint64_t v324 = (char *)v6[14];
                  uint64_t v323 = (char *)v6[15];
                  uint64_t v325 = v322;
                  if (v323 != v324)
                  {
                    do
                    {
                      *((_OWORD *)v325 - 1) = *((_OWORD *)v323 - 1);
                      v325 -= 2;
                      v323 -= 16;
                    }
                    while (v323 != v324);
                    uint64_t v323 = (char *)v6[14];
                  }
                  long long v315 = v322 + 2;
                  v6[14] = v325;
                  v6[15] = v322 + 2;
                  v6[16] = &v321[16 * v320];
                  if (v323) {
                    operator delete(v323);
                  }
                }
                else
                {
                  *long long v314 = v309;
                  v314[1] = v310;
                  long long v315 = v314 + 2;
                }
                v6[15] = v315;
                --v308;
              }
              while (v308);
              goto LABEL_446;
            case 3:
              int v326 = readVaruint32(v5);
              if (!v326) {
                goto LABEL_446;
              }
              int v327 = v326;
              do
              {
                uint64_t v328 = readString(v5);
                uint64_t v330 = v329;
                int v331 = readVaruint32(v5);
                int v332 = v331;
                v334 = (uint64_t *)v6[21];
                unint64_t v333 = v6[22];
                if ((unint64_t)v334 >= v333)
                {
                  long long v336 = (void *)v6[20];
                  unint64_t v337 = 0xAAAAAAAAAAAAAAABLL * (v334 - v336) + 1;
                  if (v337 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_758;
                  }
                  unint64_t v338 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v333 - (void)v336) >> 3);
                  if (2 * v338 > v337) {
                    unint64_t v337 = 2 * v338;
                  }
                  if (v338 >= 0x555555555555555) {
                    unint64_t v339 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v339 = v337;
                  }
                  if (v339)
                  {
                    if (v339 > 0xAAAAAAAAAAAAAAALL) {
                      goto LABEL_759;
                    }
                    long long v340 = (char *)operator new(24 * v339);
                  }
                  else
                  {
                    long long v340 = 0;
                  }
                  int v341 = &v340[8 * (v334 - v336)];
                  *(void *)int v341 = v328;
                  *((void *)v341 + 1) = v330;
                  *((_DWORD *)v341 + 4) = v332;
                  char v342 = v341;
                  if (v334 == v336)
                  {
                    uint64_t v5 = a5;
                  }
                  else
                  {
                    uint64_t v5 = a5;
                    do
                    {
                      long long v343 = *(_OWORD *)(v334 - 3);
                      *((_DWORD *)v342 - 2) = *((_DWORD *)v334 - 2);
                      *(_OWORD *)(v342 - 24) = v343;
                      v342 -= 24;
                      v334 -= 3;
                    }
                    while (v334 != v336);
                    v334 = (uint64_t *)v6[20];
                  }
                  v335 = v341 + 24;
                  v6[20] = v342;
                  v6[21] = v341 + 24;
                  v6[22] = &v340[24 * v339];
                  if (v334) {
                    operator delete(v334);
                  }
                }
                else
                {
                  uint64_t *v334 = v328;
                  v334[1] = v330;
                  v335 = v334 + 3;
                  *((_DWORD *)v334 + 4) = v331;
                  uint64_t v5 = a5;
                }
                v6[21] = v335;
                --v327;
              }
              while (v327);
              goto LABEL_446;
            case 4:
              int v344 = readVaruint32(v5);
              if (!v344) {
                goto LABEL_446;
              }
              int v345 = v344;
              break;
            default:
              *(void *)(v5 + 8) = v306;
              goto LABEL_446;
          }
          do
          {
            uint64_t v346 = v5;
            uint64_t v347 = readString(v5);
            uint64_t v349 = v348;
            uint64_t v350 = readString(v346);
            uint64_t v351 = v6;
            uint64_t v353 = v352;
            int v354 = readVaruint32(v346);
            int v355 = v354;
            unint64_t v357 = (uint64_t *)v351[18];
            unint64_t v356 = v351[19];
            if ((unint64_t)v357 >= v356)
            {
              v359 = (void *)v351[17];
              unint64_t v360 = 0xCCCCCCCCCCCCCCCDLL * (v357 - v359) + 1;
              if (v360 > 0x666666666666666) {
                goto LABEL_758;
              }
              unint64_t v361 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v356 - (void)v359) >> 3);
              if (2 * v361 > v360) {
                unint64_t v360 = 2 * v361;
              }
              if (v361 >= 0x333333333333333) {
                unint64_t v362 = 0x666666666666666;
              }
              else {
                unint64_t v362 = v360;
              }
              if (v362)
              {
                if (v362 > 0x666666666666666) {
                  goto LABEL_759;
                }
                long long v363 = (char *)operator new(40 * v362);
              }
              else
              {
                long long v363 = 0;
              }
              long long v364 = &v363[8 * (v357 - v359)];
              *(void *)long long v364 = v347;
              *((void *)v364 + 1) = v349;
              *((void *)v364 + 2) = v350;
              *((void *)v364 + 3) = v353;
              *((_DWORD *)v364 + 8) = v355;
              long long v365 = v364;
              if (v357 == v359)
              {
                long long v6 = (void *)a2;
                uint64_t v5 = a5;
              }
              else
              {
                long long v6 = (void *)a2;
                uint64_t v5 = a5;
                do
                {
                  long long v366 = *(_OWORD *)(v357 - 5);
                  long long v367 = *(_OWORD *)(v357 - 3);
                  *((_DWORD *)v365 - 2) = *((_DWORD *)v357 - 2);
                  *(_OWORD *)(v365 - 24) = v367;
                  *(_OWORD *)(v365 - 40) = v366;
                  v365 -= 40;
                  v357 -= 5;
                }
                while (v357 != v359);
                unint64_t v357 = *(uint64_t **)(a2 + 136);
              }
              v358 = v364 + 40;
              v6[17] = v365;
              v6[18] = v364 + 40;
              v6[19] = &v363[40 * v362];
              if (v357) {
                operator delete(v357);
              }
            }
            else
            {
              *unint64_t v357 = v347;
              v357[1] = v349;
              v357[2] = v350;
              v357[3] = v353;
              v358 = v357 + 5;
              *((_DWORD *)v357 + 8) = v354;
              uint64_t v5 = a5;
              long long v6 = v351;
            }
            v6[18] = v358;
            --v345;
          }
          while (v345);
LABEL_446:
          uint64_t v303 = *(unsigned __int8 **)(v5 + 8);
          if (v303 != *(unsigned __int8 **)(v5 + 16)) {
            operator new();
          }
          long long v304 = (unsigned __int8 *)v511;
          char v7 = a1;
        }
        while ((unint64_t)v303 < v511);
      }
      goto LABEL_751;
    case 9uLL:
      if (*(void *)a3 != 0x72656375646F7270 || *(unsigned char *)(a3 + 8) != 115) {
        goto LABEL_556;
      }
      *(void *)&long long v554 = v555;
      *((void *)&v554 + 1) = 0x300000000;
      uint64_t v559 = 0;
      v558 = 0;
      v557 = (uint64_t *)&v558;
      unsigned int v369 = readVaruint32(a5);
      if (!v369) {
        goto LABEL_550;
      }
      uint64_t v370 = 0;
      v502 = (char **)(v6 + 29);
      uint64_t v504 = v369;
      v498 = (char **)(v6 + 26);
      v500 = (char **)(v6 + 23);
      while (1)
      {
        uint64_t v508 = v370;
        uint64_t v371 = readString(v5);
        v523.__r_.__value_.__r.__words[0] = v371;
        v523.__r_.__value_.__l.__size_ = v372;
        if (v559)
        {
          std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(&v557, (long long *)&v523, &v523);
          if (!v373) {
            goto LABEL_739;
          }
        }
        else
        {
          uint64_t v374 = (const void *)v371;
          size_t v375 = v372;
          unsigned int v376 = DWORD2(v554);
          if (!DWORD2(v554)) {
            goto LABEL_468;
          }
          uint64_t v377 = 16 * DWORD2(v554);
          long long v378 = (void *)(v554 + 8);
          while (*v378 != v375 || v375 && memcmp((const void *)*(v378 - 1), v374, v375))
          {
            v378 += 2;
            v377 -= 16;
            if (!v377) {
              goto LABEL_467;
            }
          }
          if (v377) {
LABEL_739:
          }
            operator new();
LABEL_467:
          if (v376 >= 3)
          {
            do
            {
              std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(&v557, (long long *)(v554 + 16 * v376 - 16), (_OWORD *)(v554 + 16 * v376 - 16));
              unsigned int v376 = --DWORD2(v554);
            }
            while (DWORD2(v554));
            std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(&v557, (long long *)&v523, &v523);
          }
          else
          {
LABEL_468:
            llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v554, (uint64_t)v374, v375);
          }
        }
        if (v523.__r_.__value_.__l.__size_ == 3) {
          break;
        }
        if (v523.__r_.__value_.__l.__size_ == 12)
        {
          BOOL v380 = *(void *)v523.__r_.__value_.__l.__data_ == 0x65737365636F7270
              && *(_DWORD *)(v523.__r_.__value_.__r.__words[0] + 8) == 2036477284;
          uint64_t v379 = v498;
          goto LABEL_484;
        }
        if (v523.__r_.__value_.__l.__size_ != 8
          || (uint64_t v379 = v500, *(void *)v523.__r_.__value_.__l.__data_ != 0x65676175676E616CLL))
        {
LABEL_727:
          operator new();
        }
LABEL_486:
        unsigned int v381 = readVaruint32(v5);
        v560 = &v562;
        uint64_t v561 = 0x800000000;
        v566 = 0;
        uint64_t v567 = 0;
        v565 = (uint64_t *)&v566;
        if (v381)
        {
          uint64_t v382 = 0;
          uint64_t v516 = v381;
          while (1)
          {
            __src[0] = (void *)readString(v5);
            __src[1] = v383;
            uint64_t v384 = (const void *)readString(v5);
            size_t v386 = v385;
            if (v567)
            {
              std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(&v565, (long long *)__src, __src);
              if (!v387) {
                goto LABEL_546;
              }
            }
            else
            {
              unsigned int v388 = v561;
              unint64_t v389 = __src[0];
              unint64_t v390 = __src[1];
              if (!v561) {
                goto LABEL_500;
              }
              uint64_t v391 = 16 * v561;
              uint64_t v392 = (void **)((char *)v560 + 8);
              while (*v392 != v390 || v390 && memcmp(*(v392 - 1), v389, (size_t)v390))
              {
                v392 += 2;
                v391 -= 16;
                if (!v391) {
                  goto LABEL_499;
                }
              }
              if (v391)
              {
LABEL_546:
                *(_DWORD *)long long __dst = 3;
                llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>();
              }
LABEL_499:
              if (v388 >= 8)
              {
                do
                {
                  std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(&v565, (long long *)v560 + v388 - 1, (_OWORD *)v560 + v388 - 1);
                  unsigned int v388 = v561 - 1;
                  LODWORD(v561) = v561 - 1;
                }
                while (v561);
                std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(&v565, (long long *)__src, __src);
              }
              else
              {
LABEL_500:
                llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v560, (uint64_t)v389, (uint64_t)v390);
              }
            }
            unint64_t v393 = __src[1];
            if (__src[1] > (void *)0x7FFFFFFFFFFFFFF7) {
              goto LABEL_758;
            }
            v394 = __src[0];
            if (__src[1] >= (void *)0x17) {
              break;
            }
            __dst[23] = __src[1];
            v395 = __dst;
            if (__src[1]) {
              goto LABEL_510;
            }
LABEL_511:
            v393[(void)v395] = 0;
            if (v386 > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_758;
            }
            if (v386 >= 0x17)
            {
              uint64_t v399 = (v386 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v386 | 7) != 0x17) {
                uint64_t v399 = v386 | 7;
              }
              uint64_t v400 = v399 + 1;
              v398 = operator new(v399 + 1);
              v525[1] = (void *)v386;
              unint64_t p_ULEB128 = v400 | 0x8000000000000000;
              v525[0] = v398;
            }
            else
            {
              HIBYTE(p_ULEB128) = v386;
              v398 = v525;
              if (!v386) {
                goto LABEL_519;
              }
            }
            memmove(v398, v384, v386);
LABEL_519:
            *((unsigned char *)v398 + v386) = 0;
            v401 = v379[1];
            unint64_t v402 = (unint64_t)v379[2];
            if ((unint64_t)v401 >= v402)
            {
              unint64_t v403 = *v379;
              unint64_t v404 = 0xAAAAAAAAAAAAAAABLL * ((v401 - *v379) >> 4);
              unint64_t v405 = v404 + 1;
              if (v404 + 1 > 0x555555555555555) {
                goto LABEL_758;
              }
              unint64_t v406 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v402 - (void)v403) >> 4);
              if (2 * v406 > v405) {
                unint64_t v405 = 2 * v406;
              }
              if (v406 >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v407 = 0x555555555555555;
              }
              else {
                unint64_t v407 = v405;
              }
              if (v407)
              {
                if (v407 > 0x555555555555555) {
                  goto LABEL_759;
                }
                unint64_t v408 = (char *)operator new(48 * v407);
                v401 = v379[1];
              }
              else
              {
                unint64_t v408 = 0;
              }
              unint64_t v409 = &v408[48 * v404];
              *(_OWORD *)unint64_t v409 = *(_OWORD *)__dst;
              *((void *)v409 + 2) = *(void *)&__dst[16];
              memset(__dst, 0, sizeof(__dst));
              *(_OWORD *)(v409 + 24) = *(_OWORD *)v525;
              *((void *)v409 + 5) = p_ULEB128;
              v525[0] = 0;
              v525[1] = 0;
              unint64_t p_ULEB128 = 0;
              if (v401 == v403)
              {
                char v414 = 0;
                long long v415 = v409 + 48;
                *uint64_t v379 = v409;
                v379[1] = v409 + 48;
                v379[2] = &v408[48 * v407];
              }
              else
              {
                unint64_t v410 = &v408[48 * v404];
                do
                {
                  long long v411 = *((_OWORD *)v401 - 3);
                  *((void *)v410 - 4) = *((void *)v401 - 4);
                  *((_OWORD *)v410 - 3) = v411;
                  *((void *)v401 - 5) = 0;
                  *((void *)v401 - 4) = 0;
                  *((void *)v401 - 6) = 0;
                  long long v412 = *(_OWORD *)(v401 - 24);
                  *((void *)v410 - 1) = *((void *)v401 - 1);
                  *(_OWORD *)(v410 - 24) = v412;
                  v410 -= 48;
                  *((void *)v401 - 2) = 0;
                  *((void *)v401 - 1) = 0;
                  *((void *)v401 - 3) = 0;
                  v401 -= 48;
                }
                while (v401 != v403);
                unint64_t v403 = *v379;
                uint64_t v413 = (uint64_t)v379[1];
                char v414 = HIBYTE(p_ULEB128);
                long long v415 = v409 + 48;
                *uint64_t v379 = v410;
                v379[1] = v409 + 48;
                v379[2] = &v408[48 * v407];
                while ((char *)v413 != v403)
                {
                  v413 -= 48;
                  std::allocator<std::pair<std::string,std::string>>::destroy[abi:nn180100](v413);
                }
              }
              if (v403) {
                operator delete(v403);
              }
              v379[1] = v415;
              if (v414 < 0) {
                operator delete(v525[0]);
              }
            }
            else
            {
              *(_OWORD *)v401 = *(_OWORD *)__dst;
              *((void *)v401 + 2) = *(void *)&__dst[16];
              memset(__dst, 0, sizeof(__dst));
              *(_OWORD *)(v401 + 24) = *(_OWORD *)v525;
              *((void *)v401 + 5) = p_ULEB128;
              v379[1] = v401 + 48;
            }
            if ((__dst[23] & 0x80000000) != 0) {
              operator delete(*(void **)__dst);
            }
            ++v382;
            uint64_t v5 = a5;
            if (v382 == v516) {
              goto LABEL_545;
            }
          }
          unint64_t v396 = ((unint64_t)__src[1] & 0xFFFFFFFFFFFFFFF8) + 8;
          if (((unint64_t)__src[1] | 7) != 0x17) {
            unint64_t v396 = (unint64_t)__src[1] | 7;
          }
          unint64_t v397 = v396 + 1;
          v395 = operator new(v396 + 1);
          *(void *)&__dst[8] = v393;
          *(void *)&__dst[16] = v397 | 0x8000000000000000;
          *(void *)long long __dst = v395;
LABEL_510:
          memmove(v395, v394, (size_t)v393);
          goto LABEL_511;
        }
LABEL_545:
        char v7 = a1;
        std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)&v565, v566);
        if (v560 != &v562) {
          free(v560);
        }
        uint64_t v370 = v508 + 1;
        if (v508 + 1 == v504)
        {
LABEL_550:
          if (*(void *)(v5 + 8) != *(void *)(v5 + 16)) {
            operator new();
          }
          *char v7 = 0;
          std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)&v557, v558);
          if ((void *)v554 != v555) {
            free((void *)v554);
          }
          goto LABEL_750;
        }
      }
      BOOL v380 = *(_WORD *)v523.__r_.__value_.__l.__data_ == 25715
          && *(unsigned char *)(v523.__r_.__value_.__r.__words[0] + 2) == 107;
      uint64_t v379 = v502;
LABEL_484:
      if (!v380) {
        goto LABEL_727;
      }
      goto LABEL_486;
    case 0xFuLL:
      if (*(void *)a3 != 0x665F746567726174 || *(void *)(a3 + 7) != 0x7365727574616566) {
        goto LABEL_556;
      }
      v560 = &v562;
      uint64_t v561 = 0x800000000;
      uint64_t v570 = 0;
      v569 = 0;
      v568 = &v569;
      unsigned int v455 = readVaruint32(a5);
      if (!v455) {
        goto LABEL_714;
      }
      uint64_t v456 = 0;
      uint64_t v518 = v455;
      break;
    default:
      if (a4 < 6) {
        goto LABEL_751;
      }
LABEL_556:
      if (*(_DWORD *)a3 != 1869374834 || *(_WORD *)(a3 + 4) != 11875) {
        goto LABEL_751;
      }
      unsigned int v418 = readVaruint32(a5);
      uint64_t v419 = v6[9];
      if (0x8E38E38E38E38E39 * ((v6[10] - v419) >> 3) <= v418)
      {
        LODWORD(v560) = 3;
        llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
      }
      unsigned int v420 = v418;
      int v421 = readVaruint32(v5);
      if (!v421) {
        goto LABEL_712;
      }
      int v422 = v421;
      unsigned int v423 = 0;
      uint64_t v424 = v419 + 72 * v420;
      unint64_t v517 = *(unsigned int *)(v424 + 40);
      v425 = (void **)(v424 + 48);
      int v426 = (void **)(v424 + 56);
      uint64_t v427 = (void *)(v424 + 64);
      while (1)
      {
        unsigned int v428 = readVaruint32(v5);
        unsigned int v429 = readVaruint32(v5);
        if (v429 < v423)
        {
          LODWORD(v560) = 3;
          goto LABEL_724;
        }
        unsigned int v423 = v429;
        unsigned int v430 = readVaruint32(v5);
        unsigned int v431 = v430;
        switch(v428)
        {
          case 0u:
          case 1u:
          case 2u:
          case 0xCu:
          case 0x12u:
          case 0x13u:
          case 0x18u:
            uint64_t v432 = *(void *)(a2 + 536);
            if (v430 >= (unint64_t)((*(void *)(a2 + 544) - v432) >> 5)
              || *(unsigned char *)(*(void *)(v432 + 32 * v430) + 16))
            {
              goto LABEL_731;
            }
            uint64_t Varint32 = 0;
            goto LABEL_575;
          case 3u:
          case 4u:
          case 5u:
          case 0xBu:
          case 0x15u:
          case 0x17u:
            uint64_t v434 = *(void *)(a2 + 536);
            if (v430 >= (unint64_t)((*(void *)(a2 + 544) - v434) >> 5)
              || *(unsigned char *)(*(void *)(v434 + 32 * v430) + 16) != 1)
            {
              goto LABEL_729;
            }
            uint64_t Varint32 = (int)readVarint32(v5);
            goto LABEL_575;
          case 6u:
            if (v430 < (unint64_t)((uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 6)) {
              goto LABEL_624;
            }
            LODWORD(v560) = 3;
            goto LABEL_730;
          case 7u:
            uint64_t v448 = *(void *)(a2 + 536);
            if (v430 >= (unint64_t)((*(void *)(a2 + 544) - v448) >> 5)
              || *(unsigned __int8 *)(*(void *)(v448 + 32 * v430) + 16) >= 3u)
            {
              goto LABEL_748;
            }
            goto LABEL_624;
          case 8u:
            uint64_t v449 = *(void *)(a2 + 536);
            if (v430 >= (unint64_t)((*(void *)(a2 + 544) - v449) >> 5)
              || *(unsigned char *)(*(void *)(v449 + 32 * v430) + 16))
            {
              goto LABEL_731;
            }
            goto LABEL_615;
          case 9u:
            uint64_t v450 = *(void *)(a2 + 536);
            if (v430 >= (unint64_t)((*(void *)(a2 + 544) - v450) >> 5)
              || *(unsigned char *)(*(void *)(v450 + 32 * v430) + 16) != 3)
            {
              LODWORD(v560) = 3;
LABEL_83:
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
            }
LABEL_615:
            uint64_t Varint32 = (int)readVarint32(v5);
            goto LABEL_580;
          case 0xAu:
            uint64_t v451 = *(void *)(a2 + 536);
            if (v430 >= (unint64_t)((*(void *)(a2 + 544) - v451) >> 5)
              || *(unsigned char *)(*(void *)(v451 + 32 * v430) + 16) != 4)
            {
              LODWORD(v560) = 3;
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
            }
            goto LABEL_624;
          case 0xDu:
            uint64_t v452 = *(void *)(a2 + 536);
            if (v430 >= (unint64_t)((*(void *)(a2 + 544) - v452) >> 5)
              || *(unsigned char *)(*(void *)(v452 + 32 * v430) + 16) != 2)
            {
LABEL_748:
              LODWORD(v560) = 3;
              goto LABEL_724;
            }
            uint64_t Varint32 = 0;
LABEL_580:
            uint64_t v436 = 4;
LABEL_581:
            if (v428 <= 0x16u && ((1 << v428) & 0x490000) != 0) {
              goto LABEL_583;
            }
            goto LABEL_584;
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x19u:
            uint64_t v435 = *(void *)(a2 + 536);
            if (v430 >= (unint64_t)((*(void *)(a2 + 544) - v435) >> 5)
              || *(unsigned char *)(*(void *)(v435 + 32 * v430) + 16) != 1)
            {
LABEL_729:
              LODWORD(v560) = 3;
LABEL_730:
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
            }
            uint64_t Varint32 = readLEB128(v5);
LABEL_575:
            if ((v428 - 14) > 3u) {
              uint64_t v436 = 5;
            }
            else {
              uint64_t v436 = qword_261E91140[(char)(v428 - 14)];
            }
            if (v428 <= 0x17u && ((1 << v428) & 0x802324) != 0) {
              goto LABEL_580;
            }
            goto LABEL_581;
          case 0x14u:
            uint64_t v453 = *(void *)(a2 + 536);
            if (v430 >= (unint64_t)((*(void *)(a2 + 544) - v453) >> 5)
              || *(unsigned char *)(*(void *)(v453 + 32 * v430) + 16) != 5)
            {
              LODWORD(v560) = 3;
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
            }
LABEL_624:
            uint64_t Varint32 = 0;
            uint64_t v436 = 5;
            goto LABEL_584;
          case 0x16u:
            uint64_t v454 = *(void *)(a2 + 536);
            if (v430 >= (unint64_t)((*(void *)(a2 + 544) - v454) >> 5)
              || *(unsigned char *)(*(void *)(v454 + 32 * v430) + 16))
            {
LABEL_731:
              LODWORD(v560) = 3;
              goto LABEL_745;
            }
            uint64_t Varint32 = readLEB128(v5);
LABEL_583:
            uint64_t v436 = 8;
LABEL_584:
            if (v436 + (unint64_t)v423 > v517)
            {
              LODWORD(v560) = 3;
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
            }
            uint64_t v437 = (char *)*v426;
            if ((unint64_t)*v426 >= *v427)
            {
              unint64_t v439 = 0xAAAAAAAAAAAAAAABLL * ((v437 - (unsigned char *)*v425) >> 3);
              unint64_t v440 = v439 + 1;
              if (v439 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_758:
              }
                abort();
              if (0x5555555555555556 * ((uint64_t)(*v427 - (void)*v425) >> 3) > v440) {
                unint64_t v440 = 0x5555555555555556 * ((uint64_t)(*v427 - (void)*v425) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v427 - (void)*v425) >> 3) >= 0x555555555555555) {
                unint64_t v441 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v441 = v440;
              }
              if (v441) {
                unint64_t v441 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v441);
              }
              else {
                uint64_t v442 = 0;
              }
              unint64_t v443 = v441 + 24 * v439;
              *(unsigned char *)unint64_t v443 = v428;
              *(_WORD *)(v443 + 1) = 0;
              *(unsigned char *)(v443 + 3) = 0;
              *(_DWORD *)(v443 + 4) = v431;
              *(void *)(v443 + 8) = v423;
              *(void *)(v443 + 16) = Varint32;
              v444 = (char *)*v426;
              std::string v445 = (char *)*v425;
              v446 = (char *)v443;
              if (*v426 == *v425)
              {
                uint64_t v5 = a5;
              }
              else
              {
                uint64_t v5 = a5;
                do
                {
                  long long v447 = *(_OWORD *)(v444 - 24);
                  *((void *)v446 - 1) = *((void *)v444 - 1);
                  *(_OWORD *)(v446 - 24) = v447;
                  v446 -= 24;
                  v444 -= 24;
                }
                while (v444 != v445);
                v444 = (char *)*v425;
              }
              uint64_t *v425 = v446;
              long long v438 = (char *)(v443 + 24);
              *int v426 = (void *)(v443 + 24);
              *uint64_t v427 = v441 + 24 * v442;
              if (v444) {
                operator delete(v444);
              }
            }
            else
            {
              *uint64_t v437 = v428;
              *(_WORD *)(v437 + 1) = 0;
              v437[3] = 0;
              *((_DWORD *)v437 + 1) = v431;
              long long v438 = v437 + 24;
              *((void *)v437 + 1) = v423;
              *((void *)v437 + 2) = Varint32;
              uint64_t v5 = a5;
            }
            *int v426 = v438;
            if (!--v422)
            {
LABEL_712:
              char v7 = a1;
              if (*(void *)(v5 + 8) == *(void *)(v5 + 16)) {
                goto LABEL_751;
              }
              LODWORD(v560) = 3;
LABEL_724:
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>();
            }
            return;
          default:
            v560 = "invalid relocation type: ";
            unint64_t v562 = v428;
            goto LABEL_720;
        }
      }
  }
  do
  {
    *(void *)&__dst[8] = 0;
    *(void *)&__dst[16] = 0;
    uint64_t v529 = 0;
    v457 = *(unsigned __int8 **)(v5 + 8);
    if (v457 == *(unsigned __int8 **)(v5 + 16)) {
LABEL_760:
    }
      llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const llvm::Twine *)1);
    *(void *)(v5 + 8) = v457 + 1;
    unsigned int v458 = *v457;
    __dst[0] = v458;
    BOOL v459 = v458 > 0x3D;
    uint64_t v460 = (1 << v458) & 0x2000280000000000;
    if (v459 || v460 == 0)
    {
      LODWORD(v554) = 3;
      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
    }
    uint64_t v462 = readString(v5);
    if (v463 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_758;
    }
    v464 = (const void *)v462;
    size_t v465 = v463;
    if (v463 >= 0x17)
    {
      uint64_t v467 = (v463 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v463 | 7) != 0x17) {
        uint64_t v467 = v463 | 7;
      }
      uint64_t v468 = v467 + 1;
      v466 = (long long *)operator new(v467 + 1);
      *((void *)&v554 + 1) = v465;
      v555[0] = v468 | 0x8000000000000000;
      *(void *)&long long v554 = v466;
    }
    else
    {
      HIBYTE(v555[0]) = v463;
      v466 = &v554;
      if (!v463) {
        goto LABEL_644;
      }
    }
    memmove(v466, v464, v465);
LABEL_644:
    *((unsigned char *)v466 + v465) = 0;
    if (SHIBYTE(v529) < 0) {
      operator delete(*(void **)&__dst[8]);
    }
    *(_OWORD *)&__dst[8] = v554;
    uint64_t v529 = v555[0];
    if (v570)
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v568, (const void **)&__dst[8], (uint64_t)&__dst[8]);
      if (v469) {
        goto LABEL_677;
      }
LABEL_725:
      std::operator+<char>();
      v496 = std::string::append(&v523, "\"");
      unint64_t v497 = v496->__r_.__value_.__r.__words[2];
      *(_OWORD *)v525 = *(_OWORD *)&v496->__r_.__value_.__l.__data_;
      unint64_t p_ULEB128 = v497;
      v496->__r_.__value_.__l.__size_ = 0;
      v496->__r_.__value_.__r.__words[2] = 0;
      v496->__r_.__value_.__r.__words[0] = 0;
      operator new();
    }
    unsigned int v470 = v561;
    if (!v561) {
      goto LABEL_671;
    }
    v471 = (char *)v560;
    v472 = (char *)v560 + 24 * v561;
    if (v529 >= 0) {
      uint64_t v473 = HIBYTE(v529);
    }
    else {
      uint64_t v473 = *(void *)&__dst[16];
    }
    if (v529 >= 0) {
      v474 = &__dst[8];
    }
    else {
      v474 = *(unsigned char **)&__dst[8];
    }
    while (1)
    {
      uint64_t v475 = v471[23];
      uint64_t v476 = (v475 & 0x80u) == 0 ? v471[23] : *((void *)v471 + 1);
      if (v476 == v473)
      {
        if ((v475 & 0x80) == 0)
        {
          if (!v471[23]) {
            break;
          }
          uint64_t v477 = 0;
          while (v471[v477] == v474[v477])
          {
            if (v475 == ++v477) {
              goto LABEL_669;
            }
          }
          goto LABEL_667;
        }
        if (!memcmp(*(const void **)v471, v474, *((void *)v471 + 1))) {
          break;
        }
      }
LABEL_667:
      v471 += 24;
      if (v471 == v472) {
        goto LABEL_670;
      }
    }
LABEL_669:
    if (v471 != v472) {
      goto LABEL_725;
    }
LABEL_670:
    if (v470 >= 8)
    {
      do
      {
        while (1)
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v568, (const void **)v560 + 3 * v470 - 3, (uint64_t)v560 + 24 * v470 - 24);
          unsigned int v470 = v561 - 1;
          LODWORD(v561) = v470;
          v478 = (void **)((char *)v560 + 24 * v470);
          if (*((char *)v478 + 23) < 0) {
            break;
          }
          if (!v470) {
            goto LABEL_676;
          }
        }
        operator delete(*v478);
        unsigned int v470 = v561;
      }
      while (v561);
LABEL_676:
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v568, (const void **)&__dst[8], (uint64_t)&__dst[8]);
    }
    else
    {
LABEL_671:
      llvm::SmallVectorTemplateBase<std::string,false>::push_back((uint64_t)&v560, (unint64_t)&__dst[8]);
    }
LABEL_677:
    unint64_t v480 = *(void *)(a2 + 264);
    unint64_t v479 = *(void *)(a2 + 272);
    if (v480 < v479)
    {
      *(unsigned char *)unint64_t v480 = __dst[0];
      v481 = (std::string *)(v480 + 8);
      uint64_t v5 = a5;
      if (SHIBYTE(v529) < 0)
      {
        std::string::__init_copy_ctor_external(v481, *(const std::string::value_type **)&__dst[8], *(std::string::size_type *)&__dst[16]);
      }
      else
      {
        long long v482 = *(_OWORD *)&__dst[8];
        *(void *)(v480 + 24) = v529;
        *(_OWORD *)&v481->__r_.__value_.__l.__data_ = v482;
      }
      v489 = (char *)(v480 + 32);
      goto LABEL_705;
    }
    v483 = *(void ***)(a2 + 256);
    uint64_t v484 = (uint64_t)(v480 - (void)v483) >> 5;
    unint64_t v485 = v484 + 1;
    if ((unint64_t)(v484 + 1) >> 59) {
      goto LABEL_758;
    }
    uint64_t v486 = v479 - (void)v483;
    if (v486 >> 4 > v485) {
      unint64_t v485 = v486 >> 4;
    }
    if ((unint64_t)v486 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v487 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v487 = v485;
    }
    if (v487)
    {
      if (v487 >> 59) {
LABEL_759:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      v488 = (char *)operator new(32 * v487);
    }
    else
    {
      v488 = 0;
    }
    v490 = &v488[32 * v484];
    char *v490 = __dst[0];
    v491 = (std::string *)(v490 + 8);
    if (SHIBYTE(v529) < 0)
    {
      std::string::__init_copy_ctor_external(v491, *(const std::string::value_type **)&__dst[8], *(std::string::size_type *)&__dst[16]);
      v483 = *(void ***)(a2 + 256);
      unint64_t v480 = *(void *)(a2 + 264);
    }
    else
    {
      *(_OWORD *)&v491->__r_.__value_.__l.__data_ = *(_OWORD *)&__dst[8];
      *((void *)v490 + 3) = v529;
    }
    if ((void **)v480 == v483)
    {
      v489 = v490 + 32;
      *(void *)(a2 + 256) = v490;
      *(void *)(a2 + 264) = v490 + 32;
      *(void *)(a2 + 272) = &v488[32 * v487];
LABEL_710:
      uint64_t v5 = a5;
      if (!v483) {
        goto LABEL_705;
      }
LABEL_704:
      operator delete(v483);
      goto LABEL_705;
    }
    v492 = &v488[32 * v484];
    do
    {
      char v493 = *(unsigned char *)(v480 - 32);
      v480 -= 32;
      *(v492 - 32) = v493;
      v492 -= 32;
      long long v494 = *(_OWORD *)(v480 + 8);
      *((void *)v492 + 3) = *(void *)(v480 + 24);
      *(_OWORD *)(v492 + 8) = v494;
      *(void *)(v480 + 16) = 0;
      *(void *)(v480 + 24) = 0;
      *(void *)(v480 + 8) = 0;
    }
    while ((void **)v480 != v483);
    v483 = *(void ***)(a2 + 256);
    v495 = *(void ***)(a2 + 264);
    v489 = v490 + 32;
    *(void *)(a2 + 256) = v492;
    *(void *)(a2 + 264) = v490 + 32;
    *(void *)(a2 + 272) = &v488[32 * v487];
    if (v495 == v483) {
      goto LABEL_710;
    }
    uint64_t v5 = a5;
    do
    {
      if (*((char *)v495 - 1) < 0) {
        operator delete(*(v495 - 3));
      }
      v495 -= 4;
    }
    while (v495 != v483);
    if (v483) {
      goto LABEL_704;
    }
LABEL_705:
    *(void *)(a2 + 264) = v489;
    if (SHIBYTE(v529) < 0) {
      operator delete(*(void **)&__dst[8]);
    }
    ++v456;
  }
  while (v456 != v518);
LABEL_714:
  if (*(void *)(v5 + 8) != *(void *)(v5 + 16)) {
    operator new();
  }
  char v7 = a1;
  *a1 = 0;
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)&v568, v569);
  llvm::SmallVector<std::string,2u>::~SmallVector((char **)&v560);
LABEL_750:
  if (!*v7) {
LABEL_751:
  }
    *char v7 = 0;
}

unint64_t readVaruint32(uint64_t a1)
{
  unint64_t result = readULEB128(a1);
  if (HIDWORD(result)) {
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t readString(uint64_t a1)
{
  unsigned int ULEB128 = readULEB128(a1);
  uint64_t result = *(void *)(a1 + 8);
  unint64_t v4 = result + ULEB128;
  if (v4 > *(void *)(a1 + 16)) {
    llvm::report_fatal_error((llvm *)"EOF while reading string", (const llvm::Twine *)1);
  }
  *(void *)(a1 + 8) = v4;
  return result;
}

void llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>()
{
}

void std::vector<llvm::wasm::WasmImport *>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    char v7 = &v4[8 * v6];
    uint64_t v9 = (char *)*a1;
    unint64_t v8 = (char *)a1[1];
    unsigned int v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      unint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t readVarint32(uint64_t a1)
{
  uint64_t result = readLEB128(a1);
  if (result != (int)result) {
    llvm::report_fatal_error((llvm *)"LEB is outside Varint32 range", (const llvm::Twine *)1);
  }
  return result;
}

unint64_t readVaruint1(uint64_t a1)
{
  unint64_t result = readLEB128(a1);
  if (result >= 2) {
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint1 range", (const llvm::Twine *)1);
  }
  return result;
}

uint64_t readLimits(uint64_t a1, uint64_t a2)
{
  char Varuint32 = readVaruint32(a2);
  *(unsigned char *)a1 = Varuint32;
  uint64_t result = readULEB128(a2);
  *(void *)(a1 + 8) = result;
  if (Varuint32)
  {
    uint64_t result = readULEB128(a2);
    *(void *)(a1 + 16) = result;
  }
  return result;
}

uint64_t readTableType(unsigned char *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 8);
  if (v2 == *(unsigned char **)(a2 + 16)) {
    llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const llvm::Twine *)1);
  }
  *(void *)(a2 + 8) = v2 + 1;
  *a1 = *v2;
  uint64_t v3 = (uint64_t)(a1 + 8);
  return readLimits(v3, a2);
}

uint64_t readInitExpr(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 **)(a3 + 8);
  *(unsigned char *)a2 = 0;
  unint64_t v4 = *(void *)(a3 + 16);
  if (v3 == (unsigned __int8 *)v4) {
    goto LABEL_37;
  }
  char v7 = (void *)result;
  unint64_t v8 = (int *)(v3 + 1);
  *(void *)(a3 + 8) = v3 + 1;
  int v9 = *v3;
  *(unsigned char *)(a2 + 8) = v9;
  switch(v9)
  {
    case 'A':
      uint64_t result = readVarint32(a3);
      *(_DWORD *)(a2 + 16) = result;
      goto LABEL_14;
    case 'B':
      uint64_t result = readLEB128(a3);
      *(void *)(a2 + 16) = result;
      goto LABEL_14;
    case 'C':
      if ((unint64_t)(v3 + 5) > v4) {
        goto LABEL_39;
      }
      int v10 = *v8;
      *(void *)(a3 + 8) = v3 + 5;
      *(_DWORD *)(a2 + 16) = v10;
      goto LABEL_14;
    case 'D':
      if ((unint64_t)(v3 + 9) > v4)
      {
LABEL_39:
        uint64_t v16 = "EOF while reading float64";
LABEL_38:
        llvm::report_fatal_error((llvm *)v16, (const llvm::Twine *)1);
      }
      uint64_t v11 = *(void *)v8;
      *(void *)(a3 + 8) = v3 + 9;
      *(void *)(a2 + 16) = v11;
      goto LABEL_14;
    default:
      if (v9 == 35)
      {
        uint64_t result = readULEB128(a3);
        *(_DWORD *)(a2 + 16) = result;
      }
      else
      {
        if (v9 != 208) {
          goto LABEL_17;
        }
        uint64_t result = readULEB128(a3);
        if (result != 111)
        {
          LODWORD(v17) = 3;
          llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>();
        }
      }
LABEL_14:
      unint64_t v4 = *(void *)(a3 + 16);
      if (*(unsigned char *)a2) {
        goto LABEL_18;
      }
      BOOL v12 = *(unsigned char **)(a3 + 8);
      if (v12 == (unsigned char *)v4)
      {
LABEL_37:
        uint64_t v16 = "EOF while reading uint8";
        goto LABEL_38;
      }
      *(void *)(a3 + 8) = v12 + 1;
      if (*v12 == 11) {
        goto LABEL_35;
      }
LABEL_17:
      *(unsigned char *)a2 = 1;
LABEL_18:
      *(void *)(a3 + 8) = v3;
      if (v3 == (unsigned __int8 *)v4) {
        goto LABEL_37;
      }
      int v13 = v3;
      while (1)
      {
        *(void *)(a3 + 8) = v13 + 1;
        uint64_t v14 = *v13;
        if (*v13 <= 0x69u) {
          break;
        }
        BOOL v15 = (v14 - 106) > 0x14 || ((1 << (v14 - 106)) & 0x1C0007) == 0;
        ++v13;
        if (!v15) {
          goto LABEL_30;
        }
        if (v14 != 208) {
          goto LABEL_36;
        }
LABEL_29:
        uint64_t result = readULEB128(a3);
        int v13 = *(unsigned __int8 **)(a3 + 8);
        unint64_t v4 = *(void *)(a3 + 16);
LABEL_30:
        if (v13 == (unsigned __int8 *)v4) {
          goto LABEL_37;
        }
      }
      if ((v14 - 65) < 4 || v14 == 35) {
        goto LABEL_29;
      }
      if (v14 != 11)
      {
LABEL_36:
        uint64_t v17 = "invalid opcode in init_expr: ";
        uint64_t v18 = v14;
        __int16 v19 = 2051;
        operator new();
      }
      *(void *)(a2 + 24) = v3;
      *(void *)(a2 + 32) = v13 + 1 - v3;
LABEL_35:
      *char v7 = 0;
      return result;
  }
}

void llvm::object::WasmObjectFile::moveSymbolNext(uint64_t a1, uint64_t a2)
{
}

uint64_t llvm::object::WasmObjectFile::getSymbolFlags@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(result + 536) + ((a2 >> 27) & 0x1FFFFFFFE0));
  unsigned int v4 = *(_DWORD *)(v3 + 20);
  if ((v4 & 3) == 1)
  {
    int v5 = 6;
  }
  else if ((v4 & 3) == 2)
  {
    int v5 = 0;
  }
  else
  {
    int v5 = 2;
  }
  if ((v4 & 0xC) == 4) {
    v5 |= 0x200u;
  }
  int v6 = v5 | (v4 >> 4) & 1;
  if (*(unsigned char *)(v3 + 16)) {
    int v7 = v6;
  }
  else {
    int v7 = v6 | 0x800;
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v7;
  return result;
}

uint64_t llvm::object::WasmObjectFile::symbol_begin(llvm::object::WasmObjectFile *this)
{
  return 1;
}

unint64_t llvm::object::WasmObjectFile::symbol_end(llvm::object::WasmObjectFile *this)
{
  return ((unint64_t)((*((void *)this + 68) - *((void *)this + 67)) >> 5) << 32) | 1;
}

__n128 llvm::object::WasmObjectFile::getSymbolName@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v3 = *(__n128 **)(*(void *)(a1 + 536) + ((a2 >> 27) & 0x1FFFFFFFE0));
  a3[1].n128_u8[0] &= ~1u;
  __n128 result = *v3;
  *a3 = *v3;
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSymbolAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 536) + (((unint64_t)a2 >> 27) & 0x1FFFFFFFE0));
  if (*(unsigned char *)(v3 + 16)) {
    return (uint64_t)llvm::object::ObjectFile::getSymbolValue(a1, a2, a3);
  }
  unint64_t v4 = *(unsigned int *)(v3 + 96);
  uint64_t v5 = *(unsigned int *)(a1 + 680);
  if (v4 < v5) {
    return (uint64_t)llvm::object::ObjectFile::getSymbolValue(a1, a2, a3);
  }
  uint64_t v6 = *(void *)(a1 + 512);
  if (v5 + ((*(void *)(a1 + 520) - v6) >> 7) <= v4) {
    return (uint64_t)llvm::object::ObjectFile::getSymbolValue(a1, a2, a3);
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = *(unsigned int *)(v6 + ((unint64_t)(v4 - v5) << 7) + 48);
  return a1;
}

uint64_t llvm::object::WasmObjectFile::getSymbolValueImpl(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 536) + ((a2 >> 27) & 0x1FFFFFFFE0));
  int v4 = *(unsigned __int8 *)(v3 + 16);
  if (((1 << v4) & 0x35) != 0) {
    return *(unsigned int *)(v3 + 96);
  }
  uint64_t result = 0;
  if (v4 == 1)
  {
    unsigned int v6 = *(_DWORD *)(v3 + 96);
    uint64_t v7 = *(void *)(a1 + 472);
    if (*(unsigned char *)(v7 + 104 * v6 + 24) == 65) {
      uint64_t v8 = *(int *)(v7 + 104 * v6 + 32);
    }
    else {
      uint64_t v8 = *(void *)(v7 + 104 * v6 + 32);
    }
    return *(void *)(v3 + 104) + v8;
  }
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSymbolType@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = dword_261E91160[*(char *)(*(void *)(*(void *)(result + 536) + ((a2 >> 27) & 0x1FFFFFFFE0)) + 16)];
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v3;
  return result;
}

unsigned int *llvm::object::WasmObjectFile::getSymbolSection@<X0>(unsigned int *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(*((void *)result + 67) + ((a2 >> 27) & 0x1FFFFFFFE0));
  if ((*(unsigned char *)(v4 + 20) & 0x10) != 0)
  {
    uint64_t v6 = (*(uint64_t (**)(unsigned int *))(*(void *)result + 360))(result);
    uint64_t result = v7;
  }
  else
  {
    switch(*(unsigned char *)(v4 + 16))
    {
      case 1:
        uint64_t v5 = result + 173;
        break;
      case 2:
        uint64_t v5 = result + 175;
        break;
      case 3:
        uint64_t v5 = (unsigned int *)(v4 + 96);
        break;
      case 4:
        uint64_t v5 = result + 174;
        break;
      case 5:
        uint64_t v5 = result + 176;
        break;
      default:
        uint64_t v5 = result + 172;
        break;
    }
    uint64_t v6 = *v5;
  }
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = result;
  return result;
}

void llvm::object::WasmObjectFile::moveSectionNext(uint64_t a1, _DWORD *a2)
{
}

char *llvm::object::WasmObjectFile::getSectionName@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t result = (char *)*(unsigned int *)(v4 + 72 * a2);
  if (result)
  {
    if (result >= 0xE)
    {
      llvm::object::object_category((llvm::object *)result);
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    uint64_t result = llvm::wasm::sectionTypeToString((llvm::wasm *)result);
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v6;
  }
  else
  {
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(_OWORD *)a3 = *(_OWORD *)(v4 + 72 * a2 + 8);
  }
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSectionAddress()
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::getSectionIndex(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t llvm::object::WasmObjectFile::getSectionSize(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 72) + 72 * a2 + 40);
}

__n128 llvm::object::WasmObjectFile::getSectionContents@<Q0>(uint64_t a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  int v3 = (__n128 *)(*(void *)(a1 + 72) + 72 * a2);
  a3[1].n128_u8[0] &= ~1u;
  __n128 result = v3[2];
  *a3 = result;
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSectionAlignment()
{
  return 1;
}

uint64_t llvm::object::WasmObjectFile::isSectionCompressed()
{
  return 0;
}

BOOL llvm::object::WasmObjectFile::isSectionText(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(*(void *)(a1 + 72) + 72 * a2) == 10;
}

BOOL llvm::object::WasmObjectFile::isSectionData(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(*(void *)(a1 + 72) + 72 * a2) == 11;
}

uint64_t llvm::object::WasmObjectFile::isSectionBSS()
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::isSectionVirtual()
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::section_rel_begin(uint64_t a1, unsigned int a2)
{
  return a2;
}

unint64_t llvm::object::WasmObjectFile::section_rel_end(uint64_t a1, unsigned int a2)
{
  return a2 | ((unint64_t)(-1431655765
                                * ((*(void *)(*(void *)(a1 + 72) + 72 * a2 + 56)
                                                - *(void *)(*(void *)(a1 + 72) + 72 * a2 + 48)) >> 3)) << 32);
}

void llvm::object::WasmObjectFile::moveRelocationNext(uint64_t a1, uint64_t a2)
{
}

uint64_t llvm::object::WasmObjectFile::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(void *)(a1 + 72) + 72 * a2 + 48) + 24 * HIDWORD(a2) + 8);
}

unint64_t llvm::object::WasmObjectFile::getRelocationSymbol(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1[9] + 72 * a2 + 48);
  if (*(unsigned char *)(v2 + 24 * HIDWORD(a2)) == 6) {
    return (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  }
  else {
    return ((unint64_t)*(unsigned int *)(v2 + 24 * HIDWORD(a2) + 4) << 32) | 1;
  }
}

uint64_t llvm::object::WasmObjectFile::getRelocationType(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 72) + 72 * a2 + 48) + 24 * HIDWORD(a2));
}

void *llvm::object::WasmObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = *(char *)(*(void *)(*(void *)(a1 + 72) + 72 * a2 + 48) + 24 * HIDWORD(a2));
  if (v3 > 0x19)
  {
    uint64_t v4 = "Unknown";
    uint64_t v5 = 7;
  }
  else
  {
    uint64_t v4 = off_265596128[v3];
    uint64_t v5 = qword_261E91178[v3];
  }
  return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v4, &v4[v5]);
}

uint64_t llvm::object::WasmObjectFile::section_begin(llvm::object::WasmObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::section_end(llvm::object::WasmObjectFile *this)
{
  return 954437177 * ((*((void *)this + 10) - *((void *)this + 9)) >> 3);
}

uint64_t llvm::object::WasmObjectFile::getBytesInAddress(llvm::object::WasmObjectFile *this)
{
  if (*((unsigned char *)this + 590)) {
    return 8;
  }
  else {
    return 4;
  }
}

const char *llvm::object::WasmObjectFile::getFileFormatName(llvm::object::WasmObjectFile *this)
{
  return "WASM";
}

uint64_t llvm::object::WasmObjectFile::getArch(llvm::object::WasmObjectFile *this)
{
  if (*((unsigned char *)this + 590)) {
    return 57;
  }
  else {
    return 56;
  }
}

void llvm::object::WasmObjectFile::getFeatures(uint64_t a1@<X8>)
{
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  llvm::SubtargetFeatures::Split((char **)&v3, (uint64_t)"", 0);
  *(unsigned char *)(a1 + 24) &= ~1u;
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  uint64_t v5 = (void **)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v5);
}

uint64_t llvm::object::WasmObjectFile::isRelocatableObject(llvm::object::WasmObjectFile *this)
{
  return *((unsigned __int8 *)this + 588);
}

void llvm::object::WasmObjectFile::~WasmObjectFile(llvm::object::WasmObjectFile *this)
{
  llvm::object::WasmObjectFile::~WasmObjectFile(this);
  JUMPOUT(0x263E500B0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void **v35;

  *(void *)this = &unk_270DC1390;
  uint64_t v2 = (void *)*((void *)this + 81);
  if (v2)
  {
    *((void *)this + 82) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 78);
  if (v3)
  {
    *((void *)this + 79) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 75);
  if (v4)
  {
    *((void *)this + 76) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 70);
  if (v5)
  {
    *((void *)this + 71) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 67);
  if (v6)
  {
    *((void *)this + 68) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *((void *)this + 64);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 65);
    int v9 = (void *)*((void *)this + 64);
    if (v8 != v7)
    {
      do
      {
        int v10 = *(void **)(v8 - 120);
        if (v10)
        {
          *(void *)(v8 - 112) = v10;
          operator delete(v10);
        }
        v8 -= 128;
      }
      while (v8 != v7);
      int v9 = (void *)*((void *)this + 64);
    }
    *((void *)this + 65) = v7;
    operator delete(v9);
  }
  uint64_t v11 = (void *)*((void *)this + 59);
  if (v11)
  {
    *((void *)this + 60) = v11;
    operator delete(v11);
  }
  BOOL v12 = *((void *)this + 56);
  if (v12)
  {
    int v13 = *((void *)this + 57);
    uint64_t v14 = (void *)*((void *)this + 56);
    if (v13 != v12)
    {
      do
      {
        BOOL v15 = *(void **)(v13 - 24);
        if (v15)
        {
          *(void *)(v13 - 16) = v15;
          operator delete(v15);
        }
        v13 -= 80;
      }
      while (v13 != v12);
      uint64_t v14 = (void *)*((void *)this + 56);
    }
    *((void *)this + 57) = v12;
    operator delete(v14);
  }
  uint64_t v16 = (void *)*((void *)this + 53);
  if (v16)
  {
    *((void *)this + 54) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 50);
  if (v17)
  {
    *((void *)this + 51) = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)*((void *)this + 47);
  if (v18)
  {
    *((void *)this + 48) = v18;
    operator delete(v18);
  }
  __int16 v19 = (void *)*((void *)this + 44);
  if (v19)
  {
    *((void *)this + 45) = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)*((void *)this + 41);
  if (v20)
  {
    *((void *)this + 42) = v20;
    operator delete(v20);
  }
  unsigned int v21 = (void *)*((void *)this + 38);
  if (v21)
  {
    *((void *)this + 39) = v21;
    operator delete(v21);
  }
  int v22 = *((void *)this + 35);
  if (v22)
  {
    BOOL v23 = *((void *)this + 36);
    uint64_t v24 = (void *)*((void *)this + 35);
    if (v23 != v22)
    {
      do
      {
        v23 -= 64;
        std::allocator<llvm::wasm::WasmSignature>::destroy[abi:nn180100](v23);
      }
      while (v23 != v22);
      uint64_t v24 = (void *)*((void *)this + 35);
    }
    *((void *)this + 36) = v22;
    operator delete(v24);
  }
  uint64_t v25 = *((void *)this + 32);
  if (v25)
  {
    uint64_t v26 = *((void *)this + 33);
    int v27 = (void *)*((void *)this + 32);
    if (v26 != v25)
    {
      do
      {
        if (*(char *)(v26 - 1) < 0) {
          operator delete(*(void **)(v26 - 24));
        }
        v26 -= 32;
      }
      while (v26 != v25);
      int v27 = (void *)*((void *)this + 32);
    }
    *((void *)this + 33) = v25;
    operator delete(v27);
  }
  uint64_t v35 = (void **)((char *)this + 232);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:nn180100](&v35);
  uint64_t v35 = (void **)((char *)this + 208);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:nn180100](&v35);
  uint64_t v35 = (void **)((char *)this + 184);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:nn180100](&v35);
  unint64_t v28 = (void *)*((void *)this + 20);
  if (v28)
  {
    *((void *)this + 21) = v28;
    operator delete(v28);
  }
  uint64_t v29 = (void *)*((void *)this + 17);
  if (v29)
  {
    *((void *)this + 18) = v29;
    operator delete(v29);
  }
  uint64_t v30 = (void *)*((void *)this + 14);
  if (v30)
  {
    *((void *)this + 15) = v30;
    operator delete(v30);
  }
  unint64_t v31 = *((void *)this + 9);
  if (v31)
  {
    unint64_t v32 = *((void *)this + 10);
    unint64_t v33 = (void *)*((void *)this + 9);
    if (v32 != v31)
    {
      do
      {
        uint64_t v34 = *(void **)(v32 - 24);
        if (v34)
        {
          *(void *)(v32 - 16) = v34;
          operator delete(v34);
        }
        v32 -= 72;
      }
      while (v32 != v31);
      unint64_t v33 = (void *)*((void *)this + 9);
    }
    *((void *)this + 10) = v31;
    operator delete(v33);
  }
}

uint64_t llvm::object::WasmObjectFile::is64Bit(llvm::object::WasmObjectFile *this)
{
  return 0;
}

void llvm::to_string<unsigned int>(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  int v6 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  int v12 = 1;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = &unk_270DBD6E0;
  int v13 = v14;
  llvm::raw_ostream::SetUnbuffered(&v5);
  write_unsigned<unsigned long>((llvm::raw_ostream *)&v5, *a1, 0, 0, 0);
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v13, (std::string::size_type)v13[1]);
  }
  else
  {
    long long v4 = *(_OWORD *)v13;
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)v13[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

uint64_t readULEB128(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = "malformed uleb128, extends past end";
  do
  {
    if (v5 + v2 == v6) {
      goto LABEL_9;
    }
    char v8 = *(unsigned char *)(v5 + v2);
    uint64_t v9 = v8 & 0x7F;
    if (v4 >= 0x40 && (v8 & 0x7F) != 0 || (unint64_t)(v9 << v4) >> v4 != v9)
    {
      uint64_t v7 = "uleb128 too big for uint64";
LABEL_9:
      llvm::report_fatal_error((llvm *)v7, (const llvm::Twine *)1);
    }
    v3 += v9 << v4;
    v4 += 7;
    ++v2;
  }
  while (v8 < 0);
  *(void *)(a1 + 8) = v5 + v2;
  return v3;
}

uint64_t readLEB128(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  unsigned int v3 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = "malformed sleb128, extends past end";
  do
  {
    if (v4 + v1 == *(void *)(a1 + 16)) {
      goto LABEL_20;
    }
    char v6 = *(unsigned char *)(v4 + v1);
    uint64_t v7 = v6 & 0x7F;
    if (v3 < 0x40)
    {
      if (v3 == 63 && v7 != 127 && v7 != 0)
      {
LABEL_19:
        uint64_t v5 = "sleb128 too big for int64";
LABEL_20:
        llvm::report_fatal_error((llvm *)v5, (const llvm::Twine *)1);
      }
    }
    else if (((v2 >> 63) & 0x7F) != v7)
    {
      goto LABEL_19;
    }
    v2 |= v7 << v3;
    v3 += 7;
    ++v1;
  }
  while (v6 < 0);
  BOOL v9 = (v6 & 0x40) == 0 || v3 > 0x3F;
  uint64_t v10 = -1 << v3;
  if (v9) {
    uint64_t v10 = 0;
  }
  *(void *)(a1 + 8) = v4 + v1;
  return v2 | v10;
}

void std::allocator<llvm::wasm::WasmSignature>::destroy[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40)) {
    free(v2);
  }
  unsigned int v3 = *(void **)a1;
  if (*(void *)a1 != a1 + 16)
  {
    free(v3);
  }
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:nn180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:nn180100](uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::vector<llvm::wasm::WasmRelocation>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v5 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    char v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(0xAAAAAAAAAAAAAAABLL * (v5 >> 3));
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[24 * v7];
    memmove(v6, v4, v5);
    a1[1] = &v6[8 * (v5 >> 3)];
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSymbolInfo>>(unint64_t a1)
{
  if (a1 >= 0x222222222222223) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(120 * a1);
}

void llvm::SmallVectorTemplateBase<std::string,false>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>(a1, a2, 1);
  uint64_t v4 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 8);
  if (*(char *)(v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(*(void *)a1 + 24 * *(unsigned int *)(a1 + 8)), *(const std::string::value_type **)v3, *(void *)(v3 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v3;
    *(void *)(v4 + 16) = *(void *)(v3 + 16);
    *(_OWORD *)uint64_t v4 = v5;
  }
  ++*(_DWORD *)(a1 + 8);
}

uint64_t *std::vector<llvm::wasm::WasmSignature>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  unint64_t v3 = result;
  long long v5 = (_DWORD *)*result;
  uint64_t v4 = (_DWORD *)result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 64;
    v4 -= 16;
    __n128 result = (uint64_t *)std::allocator<llvm::wasm::WasmSignature>::construct[abi:nn180100]<llvm::wasm::WasmSignature,llvm::wasm::WasmSignature>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *v3;
  *unint64_t v3 = v6;
  a2[1] = v7;
  uint64_t v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = v3[2];
  void v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSignature>>(unint64_t a1)
{
  if (a1 >> 58) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(a1 << 6);
}

uint64_t std::allocator<llvm::wasm::WasmSignature>::construct[abi:nn180100]<llvm::wasm::WasmSignature,llvm::wasm::WasmSignature>(uint64_t a1, _DWORD *a2)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x100000000;
  if (a2[2]) {
    llvm::SmallVectorImpl<llvm::wasm::ValType>::operator=(a1, (uint64_t)a2);
  }
  *(void *)(a1 + 24) = a1 + 40;
  uint64_t result = a1 + 24;
  *(void *)(a1 + 32) = 0x400000000;
  if (a2[8]) {
    uint64_t result = llvm::SmallVectorImpl<llvm::wasm::ValType>::operator=(result, (uint64_t)(a2 + 6));
  }
  *(_DWORD *)(a1 + 56) = a2[14];
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::wasm::ValType>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 != v5)
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    uint64_t v7 = (_DWORD *)(a2 + 8);
    unint64_t v8 = *(unsigned int *)(a2 + 8);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if (v8) {
        memmove(*(void **)a1, v4, 4 * v8);
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if (v9)
      {
        memmove(*(void **)a1, v4, 4 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 4);
    }
    uint64_t v9 = 0;
LABEL_14:
    uint64_t v10 = *v7;
    if (v9 != v10) {
      memcpy((void *)(*(void *)a1 + 4 * v9), (const void *)(*(void *)a2 + 4 * v9), *(void *)a2 + 4 * v10 - (*(void *)a2 + 4 * v9));
    }
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *uint64_t v7 = 0;
  }
  return a1;
}

uint64_t std::__split_buffer<llvm::wasm::WasmSignature>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    std::allocator<llvm::wasm::WasmSignature>::destroy[abi:nn180100](i - 64);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmImport>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(72 * a1);
}

uint64_t *std::vector<llvm::wasm::WasmFunction>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 128) = *(void *)(v2 + v5 - 128);
      *(void *)(v6 - 120) = 0;
      *(void *)(v6 - 112) = 0;
      *(void *)(v6 - 104) = 0;
      *(_OWORD *)(v6 - 120) = *(_OWORD *)(v2 + v5 - 120);
      *(void *)(v6 - 104) = *(void *)(v2 + v5 - 104);
      *(void *)(v7 - 112) = 0;
      *(void *)(v7 - 104) = 0;
      *(void *)(v7 - 120) = 0;
      long long v9 = *(_OWORD *)(v2 + v5 - 48);
      long long v8 = *(_OWORD *)(v2 + v5 - 32);
      long long v10 = *(_OWORD *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 20) = *(_OWORD *)(v2 + v5 - 20);
      *(_OWORD *)(v6 - 48) = v9;
      *(_OWORD *)(v6 - 32) = v8;
      *(_OWORD *)(v6 - 64) = v10;
      long long v11 = *(_OWORD *)(v2 + v5 - 80);
      *(_OWORD *)(v6 - 96) = *(_OWORD *)(v2 + v5 - 96);
      *(_OWORD *)(v6 - 80) = v11;
      v5 -= 128;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v12 = *result;
  char *result = v4;
  a2[1] = v12;
  uint64_t v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmFunction>>(unint64_t a1)
{
  if (a1 >> 57) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(a1 << 7);
}

uint64_t std::__split_buffer<llvm::wasm::WasmFunction>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 128;
    uint64_t v4 = *(void **)(v2 - 120);
    if (v4)
    {
      *(void *)(v2 - 112) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 128;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<llvm::wasm::WasmLocalDecl>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  size_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if (v3 - *(void *)a2 < 0) {
      abort();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v5 >> 3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[8 * v7];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

uint64_t *std::vector<llvm::wasm::WasmElemSegment>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 80;
      long long v6 = *(_OWORD *)(v3 - 80);
      long long v7 = *(_OWORD *)(v3 - 48);
      uint64_t v8 = *(void *)(v3 - 32);
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(_OWORD *)(v4 - 48) = v7;
      *(_OWORD *)(v4 - 80) = v6;
      *(void *)(v4 - 32) = v8;
      *(void *)(v4 - 24) = 0;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v3 -= 80;
      v4 -= 80;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v9 = *result;
  char *result = v5;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmElemSegment>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(80 * a1);
}

uint64_t std::__split_buffer<llvm::wasm::WasmElemSegment>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 80;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 80;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::object::WasmSegment>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(104 * a1);
}

void llvm::object::WindowsResource::createWindowsResource(void *a1)
{
  if (a1[1] <= 0x1FuLL)
  {
    uint64_t v1 = a1[2];
    uint64_t v2 = a1[3];
    __int16 v6 = 773;
    uint64_t v3 = v1;
    uint64_t v4 = v2;
    uint64_t v5 = ": too small to be a resource file";
    operator new();
  }
  operator new();
}

void llvm::object::WindowsResource::~WindowsResource(llvm::object::WindowsResource *this)
{
}

uint64_t llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader64,llvm::object::XCOFFRelocation64>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[6];
  unint64_t v7 = *(void *)(a3 + 40);
  if ((*(unsigned int (**)(void *))(*a2 + 64))(a2))
  {
    unsigned int v8 = *(_DWORD *)(a3 + 56);
LABEL_3:
    unsigned int v9 = bswap32(v8);
LABEL_5:
    uint64_t v10 = v9;
    char v11 = 1;
    goto LABEL_6;
  }
  unsigned int v9 = bswap32(*(_DWORD *)(a3 + 56));
  if (v9 < 0xFFFF) {
    goto LABEL_5;
  }
  uint64_t v19 = a2[8];
  uint64_t v20 = (llvm::object *)(*(uint64_t (**)(void *))(*a2 + 64))(a2);
  uint64_t v21 = a2[6];
  if (*(_WORD *)(v21 + 2))
  {
    int v22 = (_DWORD *)(v19 + 36);
    uint64_t v23 = 40 * __rev16(*(unsigned __int16 *)(v21 + 2));
    while (*v22 != 0x800000
         || bswap32(*((unsigned __int16 *)v22 - 2)) >> 16 != (unsigned __int16)(-29127 * ((a3 - v19) >> 3)
                                                                              + 1))
    {
      v22 += 10;
      v23 -= 40;
      if (!v23) {
        goto LABEL_18;
      }
    }
    unsigned int v8 = *(v22 - 7);
    goto LABEL_3;
  }
LABEL_18:
  *(void *)&v41.__val_ = llvm::object::object_category(v20);
  uint64_t result = llvm::errorCodeToError((llvm *)3, v41, &v37);
  uint64_t v24 = v37;
  if ((void)v37)
  {
    *(unsigned char *)(a1 + 16) |= 1u;
    *(void *)a1 = v24;
    return result;
  }
  char v11 = 0;
  uint64_t v10 = 0;
LABEL_6:
  unint64_t v12 = v6 + bswap64(v7);
  long long v13 = *((_OWORD *)a2 + 2);
  long long v37 = *((_OWORD *)a2 + 1);
  long long v38 = v13;
  uint64_t result = (uint64_t)llvm::object::Binary::checkOffset((llvm::object *)&v37, v12, 14 * v10, v35);
  if (v35[0])
  {
    uint64_t v27 = v35[0];
    llvm::toString(&v27, &v28);
    uint64_t v15 = std::string::append(&v28, ": relocations with offset 0x");
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    unint64_t v17 = bswap64(*(void *)(a3 + 40));
    uint64_t v25 = 14 * v10;
    unint64_t v26 = v17;
    v31[0] = __p;
    void v31[2] = &v26;
    __int16 v32 = 3588;
    v33[0] = v31;
    void v33[2] = " and size 0x";
    __int16 v34 = 770;
    v35[0] = v33;
    void v35[2] = &v25;
    __int16 v36 = 3586;
    *(void *)&long long v37 = v35;
    *(void *)&long long v38 = " go past the end of the file";
    __int16 v39 = 770;
    int v40 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  *(unsigned char *)(a1 + 16) &= ~1u;
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v10;
  if (v10) {
    char v18 = v11;
  }
  else {
    char v18 = 1;
  }
  if ((v18 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader32,llvm::object::XCOFFRelocation32>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[6];
  unsigned int v7 = *(_DWORD *)(a3 + 24);
  if ((*(unsigned int (**)(void *))(*a2 + 64))(a2))
  {
    uint64_t v8 = bswap32(*(unsigned __int16 *)(a3 + 32)) >> 16;
LABEL_5:
    char v10 = 1;
    goto LABEL_6;
  }
  unsigned int v9 = *(unsigned __int16 *)(a3 + 32);
  if (v9 != 0xFFFF)
  {
    uint64_t v8 = __rev16(v9);
    goto LABEL_5;
  }
  uint64_t v18 = a2[8];
  uint64_t v19 = (llvm::object *)(*(uint64_t (**)(void *))(*a2 + 64))(a2);
  uint64_t v20 = a2[6];
  if (*(_WORD *)(v20 + 2))
  {
    uint64_t v21 = (_DWORD *)(v18 + 36);
    uint64_t v22 = 40 * __rev16(*(unsigned __int16 *)(v20 + 2));
    while (*v21 != 0x800000
         || bswap32(*((unsigned __int16 *)v21 - 2)) >> 16 != (unsigned __int16)(-13107 * ((a3 - v18) >> 3)
                                                                              + 1))
    {
      v21 += 10;
      v22 -= 40;
      if (!v22) {
        goto LABEL_19;
      }
    }
    uint64_t v8 = bswap32(*(v21 - 7));
    goto LABEL_5;
  }
LABEL_19:
  *(void *)&v40.__val_ = llvm::object::object_category(v19);
  uint64_t result = llvm::errorCodeToError((llvm *)3, v40, &v36);
  uint64_t v23 = v36;
  if ((void)v36)
  {
    *(unsigned char *)(a1 + 16) |= 1u;
    *(void *)a1 = v23;
    return result;
  }
  char v10 = 0;
  uint64_t v8 = 0;
LABEL_6:
  unint64_t v11 = v6 + bswap32(v7);
  long long v12 = *((_OWORD *)a2 + 2);
  long long v36 = *((_OWORD *)a2 + 1);
  long long v37 = v12;
  uint64_t result = (uint64_t)llvm::object::Binary::checkOffset((llvm::object *)&v36, v11, 10 * v8, v34);
  if (v34[0])
  {
    uint64_t v26 = v34[0];
    llvm::toString(&v26, &v27);
    uint64_t v14 = std::string::append(&v27, ": relocations with offset 0x");
    std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v29 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = bswap32(*(_DWORD *)(a3 + 24));
    uint64_t v24 = 10 * v8;
    uint64_t v25 = v16;
    v30[0] = __p;
    void v30[2] = &v25;
    __int16 v31 = 3588;
    v32[0] = v30;
    v32[2] = " and size 0x";
    __int16 v33 = 770;
    v34[0] = v32;
    void v34[2] = &v24;
    __int16 v35 = 3586;
    *(void *)&long long v36 = v34;
    *(void *)&long long v37 = " go past the end of the file";
    __int16 v38 = 770;
    int v39 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  *(unsigned char *)(a1 + 16) &= ~1u;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v8;
  if (v8) {
    char v17 = v10;
  }
  else {
    char v17 = 1;
  }
  if ((v17 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::moveSymbolNext(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v5 = v3;
  if (result) {
    goto LABEL_5;
  }
  if (!v3)
  {
    uint64_t v5 = 0;
LABEL_5:
    uint64_t v6 = (unsigned __int8 *)(v5 + 17);
    goto LABEL_6;
  }
  uint64_t v6 = (unsigned __int8 *)(v3 + 17);
LABEL_6:
  *a2 = v3 + 18 * *v6 + 18;
  return result;
}

size_t llvm::object::XCOFFObjectFile::getStringTableEntry(size_t this, uint64_t a2, unsigned int a3)
{
  size_t v3 = this;
  if (a3 > 3)
  {
    uint64_t v4 = *(void *)(a2 + 88);
    uint64_t v5 = *(unsigned int *)(a2 + 80);
    if (v4) {
      BOOL v6 = v5 > a3;
    }
    else {
      BOOL v6 = 0;
    }
    if (!v6)
    {
      uint64_t v9 = a3;
      v10[0] = "entry with offset 0x";
      _OWORD v10[2] = &v9;
      __int16 v11 = 3587;
      v12[0] = v10;
      void v12[2] = " in a string table with size 0x";
      __int16 v13 = 770;
      uint64_t v8 = v5;
      v14[0] = v12;
      void v14[2] = &v8;
      __int16 v15 = 3586;
      uint64_t v16 = v14;
      char v17 = " is invalid";
      __int16 v18 = 770;
      int v19 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    unsigned int v7 = (const char *)(v4 + a3);
    *(unsigned char *)(v3 + 16) &= ~1u;
    *(void *)size_t v3 = v7;
    this = strlen(v7);
    *(void *)(v3 + 8) = this;
  }
  else
  {
    *(unsigned char *)(this + 16) &= ~1u;
    *(void *)this = 0;
    *(void *)(this + 8) = 0;
  }
  return this;
}

void *llvm::object::XCOFFObjectFile::getSymbolName@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v8[1] = 0;
  void v8[2] = 0;
  v8[0] = a1;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v6 = 1;
  if (v5) {
    uint64_t v6 = 2;
  }
  v8[v6] = a2;
  return llvm::object::XCOFFSymbolRef::getName(a3, (uint64_t)v8);
}

void *llvm::object::XCOFFSymbolRef::getName(void *this, uint64_t a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *(void *)(a2 + 8);
  if (!v3)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    if ((*(char *)(v5 + 16) & 0x80000000) == 0)
    {
      uint64_t v6 = *(void *)a2;
      unsigned int v7 = *(_DWORD *)(v5 + 8);
      goto LABEL_11;
    }
LABEL_9:
    *((unsigned char *)this + 16) &= ~1u;
    *this = "Unimplemented Debug Name";
    this[1] = 24;
    return this;
  }
  if (*(char *)(v3 + 16) < 0) {
    goto LABEL_9;
  }
  if (*(_DWORD *)v3)
  {
    this = memchr(*(void **)(a2 + 8), 0, 8uLL);
    uint64_t v4 = (uint64_t)this - v3;
    v2[16] &= ~1u;
    if (!this) {
      uint64_t v4 = 8;
    }
    *(void *)uint64_t v2 = v3;
    *((void *)v2 + 1) = v4;
    return this;
  }
  uint64_t v6 = *(void *)a2;
  unsigned int v7 = *(_DWORD *)(v3 + 4);
LABEL_11:
  unsigned int v8 = bswap32(v7);
  return (void *)llvm::object::XCOFFObjectFile::getStringTableEntry((size_t)this, v6, v8);
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  if (result) {
    unint64_t v6 = bswap64(*(void *)a2);
  }
  else {
    unint64_t v6 = bswap32(*(_DWORD *)(a2 + 8));
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v6;
  return result;
}

unint64_t llvm::object::XCOFFObjectFile::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1)) {
    return bswap64(*(void *)a2);
  }
  else {
    return bswap32(*(_DWORD *)(a2 + 8));
  }
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = a1;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v4 = 8;
  if (v3) {
    uint64_t v4 = 16;
  }
  *(uint64_t *)((char *)&v9 + v4) = a2;
  uint64_t v5 = v10;
  if (!v10) {
    uint64_t v5 = v11;
  }
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 != 2 && v6 != 111 && v6 != 107) {
    return 0;
  }
  llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)v13, &v9);
  uint64_t v7 = v13[0];
  if (v14)
  {
    uint64_t v12 = v13[0];
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v12);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    return 0;
  }
  if (!v13[0]) {
    uint64_t v7 = v13[1];
  }
  return (1 << (*(unsigned char *)(v7 + 10) >> 3));
}

void *llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef(llvm::object::XCOFFSymbolRef *this, void *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2[1];
  if (!v4) {
    uint64_t v4 = a2[2];
  }
  unsigned int v5 = *(unsigned __int8 *)(v4 + 17);
  uint64_t result = llvm::object::XCOFFSymbolRef::getName(&v28, (uint64_t)a2);
  char v7 = v30;
  if (v30)
  {
    uint64_t v8 = v28;
    uint64_t v28 = 0;
    if (v8)
    {
      *((unsigned char *)this + 16) |= 1u;
      *(void *)this = v8;
      return result;
    }
  }
  uint64_t v9 = (void *)*a2;
  uint64_t v10 = a2[1];
  if (!v10) {
    uint64_t v10 = a2[2];
  }
  unint64_t v11 = (v10 - v9[9]) / 0x12uLL;
  if (!v5)
  {
    __int16 v16 = 1283;
    v15[0] = "csect symbol \"";
    void v15[2] = v28;
    void v15[3] = v29;
    v17[0] = v15;
    __int16 v18 = "\" with index ";
    __int16 v20 = 770;
    v21[0] = v17;
    unint64_t v22 = v11;
    __int16 v23 = 2050;
    uint64_t v24 = v21;
    unint64_t v25 = (unint64_t)" contains no auxiliary entry";
    __int16 v26 = 770;
    int v27 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t result = (void *)(*(uint64_t (**)(void *))(*v9 + 64))(v9);
  uint64_t v12 = a2[1];
  if (result)
  {
    while (1)
    {
      uint64_t v13 = a2[1];
      if (!v12) {
        uint64_t v13 = a2[2];
      }
      uint64_t v14 = v13 + 18 * v5;
      if (*(unsigned __int8 *)(v14 + 17) == 251) {
        break;
      }
      LOBYTE(v5) = v5 - 1;
      if (!(_BYTE)v5)
      {
        __int16 v20 = 1283;
        v17[0] = "a csect auxiliary entry has not been found for symbol \"";
        __int16 v18 = (const char *)v28;
        uint64_t v19 = v29;
        v21[0] = v17;
        unint64_t v22 = (unint64_t)"\" with index ";
        __int16 v23 = 770;
        uint64_t v24 = v21;
        unint64_t v25 = v11;
        __int16 v26 = 2050;
        LODWORD(v15[0]) = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
      }
    }
    *((unsigned char *)this + 16) &= ~1u;
    *(void *)this = 0;
    *((void *)this + 1) = v14;
    if (v7)
    {
LABEL_21:
      uint64_t result = (void *)v28;
      if (v28) {
        return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 8))(v28);
      }
    }
  }
  else
  {
    if (!v12) {
      uint64_t v12 = a2[2];
    }
    *((unsigned char *)this + 16) &= ~1u;
    *(void *)this = v12 + 18 * v5;
    *((void *)this + 1) = 0;
    if (v7) {
      goto LABEL_21;
    }
  }
  return result;
}

unint64_t llvm::object::XCOFFObjectFile::getCommonSymbolSizeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = a1;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v4 = 8;
  if (v3) {
    uint64_t v4 = 16;
  }
  *(uint64_t *)((char *)&v8 + v4) = a2;
  uint64_t v5 = v9;
  if (!v9) {
    uint64_t v5 = v10;
  }
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 2 || v6 == 111 || (unint64_t result = 0, v6 == 107))
  {
    llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)&v12, &v8);
    if (v14)
    {
      unint64_t v11 = v12;
      llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v11);
      if (v11) {
        (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
      }
      return 0;
    }
    else if (v12)
    {
      return bswap32(*v12);
    }
    else
    {
      return bswap64(v13[3] | ((unint64_t)*v13 << 32));
    }
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolType@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  unint64_t v25 = a1;
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  uint64_t v7 = 1;
  if (result) {
    uint64_t v7 = 2;
  }
  (&v25)[v7] = a2;
  uint64_t v8 = v26;
  uint64_t v9 = v27;
  if (v26) {
    uint64_t v10 = v26;
  }
  else {
    uint64_t v10 = v27;
  }
  int v11 = *(unsigned __int8 *)(v10 + 16);
  if (v11 != 2 && v11 != 107 && v11 != 111) {
    goto LABEL_28;
  }
  if (v26) {
    uint64_t v12 = v26;
  }
  else {
    uint64_t v12 = v27;
  }
  if ((*(_WORD *)(v12 + 14) & 0x2000) != 0)
  {
LABEL_25:
    *(unsigned char *)(a3 + 8) &= ~1u;
    int v17 = 5;
LABEL_52:
    *(_DWORD *)a3 = v17;
    return result;
  }
  uint64_t result = (uint64_t)llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)&v31, &v25);
  uint64_t v13 = v31;
  if (v33)
  {
    uint64_t v29 = (void *)v31;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v29);
    uint64_t result = (uint64_t)v29;
    if (!v29) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (!v31) {
    uint64_t v13 = v32;
  }
  if ((*(unsigned char *)(v13 + 10) & 7) != 2 || *(unsigned char *)(v13 + 11)) {
    goto LABEL_28;
  }
  if (v8) {
    uint64_t v14 = v8;
  }
  else {
    uint64_t v14 = v9;
  }
  llvm::object::XCOFFObjectFile::getSectionByNum((llvm::object::XCOFFObjectFile *)&v29, a1, (int)bswap32(*(unsigned __int16 *)(v14 + 12)) >> 16);
  if (v30)
  {
    uint64_t v28 = v29;
    llvm::consumeError((uint64_t *)&v28);
    uint64_t result = (uint64_t)v28;
    if (!v28) {
      goto LABEL_28;
    }
LABEL_27:
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    goto LABEL_28;
  }
  uint64_t v15 = (uint64_t)v29;
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  uint64_t v16 = 36;
  if (result) {
    uint64_t v16 = 64;
  }
  if ((*(_DWORD *)(v15 + v16) & 0x20000000) != 0) {
    goto LABEL_25;
  }
LABEL_28:
  if (v8)
  {
    if (*(unsigned char *)(v8 + 16) != 103)
    {
      int v18 = (int)bswap32(*(unsigned __int16 *)(v8 + 12)) >> 16;
      if (v18 <= 0) {
        goto LABEL_50;
      }
      goto LABEL_35;
    }
LABEL_33:
    *(unsigned char *)(a3 + 8) &= ~1u;
    int v17 = 4;
    goto LABEL_52;
  }
  if (*(unsigned char *)(v9 + 16) == 103) {
    goto LABEL_33;
  }
  int v18 = (int)bswap32(*(unsigned __int16 *)(v9 + 12)) >> 16;
  if (v18 < 1) {
    goto LABEL_50;
  }
LABEL_35:
  uint64_t result = llvm::object::XCOFFObjectFile::getSectionByNum((llvm::object::XCOFFObjectFile *)&v29, a1, v18);
  if (v30)
  {
    uint64_t v24 = (uint64_t)v29;
  }
  else
  {
    uint64_t v19 = v29;
    uint64_t result = (uint64_t)llvm::object::XCOFFSymbolRef::getName(&v31, (uint64_t)&v25);
    if ((v33 & 1) == 0)
    {
      __int16 v20 = (const void *)v31;
      size_t v21 = v32;
      if (v32 != 3 || (*(_WORD *)v31 == 20308 ? (BOOL v22 = *(unsigned char *)(v31 + 2) == 67) : (BOOL v22 = 0), !v22))
      {
        (*(void (**)(void *))(*a1 + 64))(a1);
        uint64_t result = (uint64_t)memchr(v19, 0, 8uLL);
        uint64_t v23 = result - (void)v19;
        if (!result) {
          uint64_t v23 = 8;
        }
        if (v23 != v21 || v21 && (uint64_t result = memcmp(v19, v20, v21), result))
        {
          uint64_t result = (*(uint64_t (**)(void *, void *))(*a1 + 208))(a1, v19);
          if ((result & 1) != 0
            || (uint64_t result = (*(uint64_t (**)(void *, void *))(*a1 + 216))(a1, v19), result))
          {
            *(unsigned char *)(a3 + 8) &= ~1u;
            int v17 = 2;
            goto LABEL_52;
          }
          uint64_t result = (*(uint64_t (**)(void *, void *))(*a1 + 264))(a1, v19);
          *(unsigned char *)(a3 + 8) &= ~1u;
          if (result)
          {
            int v17 = 3;
            goto LABEL_52;
          }
LABEL_51:
          int v17 = 1;
          goto LABEL_52;
        }
      }
LABEL_50:
      *(unsigned char *)(a3 + 8) &= ~1u;
      goto LABEL_51;
    }
    uint64_t v24 = v31;
  }
  *(unsigned char *)(a3 + 8) |= 1u;
  *(void *)a3 = v24;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getSectionByNum(llvm::object::XCOFFObjectFile *this, void *a2, int a3)
{
  uint64_t v4 = this;
  unsigned int v5 = a3 - 1;
  if (a3 < 1
    || (this = (llvm::object::XCOFFObjectFile *)(*(uint64_t (**)(void *))(*a2 + 64))(a2),
        a3 > (int)(bswap32(*(unsigned __int16 *)(a2[6] + 2)) >> 16)))
  {
    uint64_t v7 = llvm::object::object_category(this);
    v12[0] = "the section index (";
    void v12[2] = a3;
    __int16 v13 = 2307;
    v14[0] = v12;
    void v14[2] = ") is invalid";
    __int16 v15 = 770;
    llvm::Twine::str((llvm::Twine *)v14, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v16;
    }
    else {
      uint64_t v8 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    uint64_t v18 = 6;
    uint64_t v19 = v7;
    int v17 = v8;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>();
  }
  uint64_t v9 = a2[8];
  uint64_t result = (*(uint64_t (**)(void *))(*a2 + 64))(a2);
  unsigned int v11 = 40;
  if (result) {
    unsigned int v11 = 72;
  }
  *((unsigned char *)v4 + 8) &= ~1u;
  *(void *)uint64_t v4 = v9 + v11 * (unint64_t)v5;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  (*(void (**)(void *))(*a1 + 64))(a1);
  unsigned int v6 = bswap32(*(unsigned __int16 *)(a2 + 12)) >> 16;
  if ((unsigned __int16)(v6 + 2) > 2u)
  {
    uint64_t result = llvm::object::XCOFFObjectFile::getSectionByNum((llvm::object::XCOFFObjectFile *)&v12, a1, (__int16)v6);
    char v9 = *(unsigned char *)(a3 + 16);
    uint64_t v10 = v12;
    if (v13)
    {
      char v11 = v9 | 1;
    }
    else
    {
      char v11 = v9 & 0xFE;
      *(void *)(a3 + 8) = a1;
    }
    *(unsigned char *)(a3 + 16) = v11;
    *(void *)a3 = v10;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *))(*a1 + 360))(a1);
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v8;
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::moveSectionNext(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v5 = 40;
  if (result) {
    uint64_t v5 = 72;
  }
  *a2 = v3 + v5;
  return result;
}

unsigned char *llvm::object::XCOFFObjectFile::getSectionName@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t result = memchr(a2, 0, 8uLL);
  uint64_t v6 = result - (unsigned char *)a2;
  *(unsigned char *)(a3 + 16) &= ~1u;
  if (!result) {
    uint64_t v6 = 8;
  }
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = v6;
  return result;
}

unint64_t llvm::object::XCOFFObjectFile::getSectionAddress(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1)) {
    return bswap64(*(void *)(a2 + 16));
  }
  else {
    return bswap32(*(_DWORD *)(a2 + 12));
  }
}

uint64_t llvm::object::XCOFFObjectFile::getSectionIndex(void *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  uint64_t v5 = 40;
  if (v4) {
    uint64_t v5 = 72;
  }
  return (a2 - a1[8]) / v5 + 1;
}

unint64_t llvm::object::XCOFFObjectFile::getSectionSize(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1)) {
    return bswap64(*(void *)(a2 + 24));
  }
  else {
    return bswap32(*(_DWORD *)(a2 + 16));
  }
}

llvm::object *llvm::object::XCOFFObjectFile::getSectionContents@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (llvm::object *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
  if (result)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) &= ~1u;
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1)) {
      unint64_t v7 = bswap64(*(void *)(a2 + 32));
    }
    else {
      unint64_t v7 = bswap32(*(_DWORD *)(a2 + 20));
    }
    unint64_t v29 = v7;
    unint64_t v8 = *(void *)(a1 + 16) + v7;
    unint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 168))(a1, a2);
    unint64_t v28 = v9;
    long long v10 = *(_OWORD *)(a1 + 32);
    v26[0] = *(_OWORD *)(a1 + 16);
    v26[1] = v10;
    uint64_t result = llvm::object::Binary::checkOffset((llvm::object *)v26, v8, v9, &v27);
    if (v27)
    {
      uint64_t v13 = v27;
      uint64_t v27 = 0;
      llvm::toString(&v13, &v14);
      char v11 = std::string::append(&v14, ": section data with offset 0x");
      std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      std::string::size_type v16 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v17[0] = __p;
      void v17[2] = &v29;
      __int16 v18 = 3588;
      v19[0] = v17;
      uint64_t v19[2] = " and size 0x";
      __int16 v20 = 770;
      v21[0] = v19;
      void v21[2] = &v28;
      __int16 v22 = 3586;
      uint64_t v23 = v21;
      uint64_t v24 = " goes past the end of the file";
      __int16 v25 = 770;
      int v30 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = v8;
    *(void *)(a3 + 8) = v9;
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::isSectionCompressed()
{
  return 0;
}

uint64_t llvm::object::XCOFFObjectFile::isSectionText(uint64_t a1, uint64_t a2)
{
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v4 = 36;
  if (v3) {
    uint64_t v4 = 64;
  }
  return (*(unsigned __int8 *)(a2 + v4 + 3) >> 5) & 1;
}

BOOL llvm::object::XCOFFObjectFile::isSectionData(uint64_t a1, uint64_t a2)
{
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v4 = 36;
  if (v3) {
    uint64_t v4 = 64;
  }
  return (*(_WORD *)(a2 + v4 + 2) & 0x4004) != 0;
}

BOOL llvm::object::XCOFFObjectFile::isSectionBSS(uint64_t a1, uint64_t a2)
{
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v4 = 36;
  if (v3) {
    uint64_t v4 = 64;
  }
  return (*(_WORD *)(a2 + v4 + 2) & 0x8008) != 0;
}

BOOL llvm::object::XCOFFObjectFile::isDebugSection(uint64_t a1, uint64_t a2)
{
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v4 = 36;
  if (v3) {
    uint64_t v4 = 64;
  }
  return (*(_WORD *)(a2 + v4 + 2) & 0x1020) != 0;
}

BOOL llvm::object::XCOFFObjectFile::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1)) {
    return *(void *)(a2 + 32) == 0;
  }
  else {
    return *(_DWORD *)(a2 + 20) == 0;
  }
}

uint64_t llvm::object::XCOFFObjectFile::section_rel_begin(void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void *))(*a1 + 64))(a1)) {
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader64,llvm::object::XCOFFRelocation64>((uint64_t)v6, a1, a2);
  }
  else {
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader32,llvm::object::XCOFFRelocation32>((uint64_t)v6, a1, a2);
  }
  uint64_t result = v6[0];
  if ((v7 & 1) != 0 && v6[0])
  {
    uint64_t v5 = v6[0];
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v5);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    return 0;
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::section_rel_end(void *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void *))(*a1 + 64))(a1))
  {
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader64,llvm::object::XCOFFRelocation64>((uint64_t)&v9, a1, a2);
    uint64_t v4 = v9;
    if ((v11 & 1) == 0 || !v9)
    {
      uint64_t v5 = v10;
      uint64_t v6 = 14;
      return v4 + v5 * v6;
    }
  }
  else
  {
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader32,llvm::object::XCOFFRelocation32>((uint64_t)&v9, a1, a2);
    uint64_t v4 = v9;
    if ((v11 & 1) == 0 || !v9)
    {
      uint64_t v5 = v10;
      uint64_t v6 = 10;
      return v4 + v5 * v6;
    }
  }
  uint64_t v8 = v4;
  llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v8);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return 0;
}

uint64_t llvm::object::XCOFFObjectFile::moveRelocationNext(uint64_t a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v4 = 10;
  if (result) {
    uint64_t v4 = 14;
  }
  *a2 += v4;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getRelocationOffset(void *a1, unint64_t *a2)
{
  int v4 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  uint64_t v5 = a1[8];
  uint64_t v6 = *(void (**)(void *))(*a1 + 64);
  if (v4)
  {
    unint64_t v7 = *a2;
    v6(a1);
    uint64_t v8 = a1[6];
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2);
    if (*(_WORD *)(v8 + 2))
    {
      int v10 = 0;
      unint64_t v11 = bswap64(v7);
      unsigned int v12 = __rev16(v9);
      for (uint64_t i = (unint64_t *)(v5 + 24); ; i += 9)
      {
        unint64_t v14 = bswap64(*(i - 1));
        uint64_t result = v11 - v14;
        if (v11 >= v14 && v11 < bswap64(*i) + v14) {
          break;
        }
        if (v12 <= (unsigned __int16)++v10) {
          return -1;
        }
      }
      return result;
    }
    return -1;
  }
  unsigned int v16 = *(_DWORD *)a2;
  v6(a1);
  uint64_t v17 = a1[6];
  unsigned int v18 = *(unsigned __int16 *)(v17 + 2);
  if (!*(_WORD *)(v17 + 2)) {
    return -1;
  }
  int v19 = 0;
  unsigned int v20 = bswap32(v16);
  unsigned int v21 = __rev16(v18);
  for (int j = (unsigned int *)(v5 + 16); ; j += 10)
  {
    unsigned int v23 = bswap32(*(j - 1));
    uint64_t result = v20 - v23;
    if (v20 >= v23 && v20 < bswap32(*j) + v23) {
      break;
    }
    if (v21 <= (unsigned __int16)++v19) {
      return -1;
    }
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getRelocationSymbol(void *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(void *))(*a1 + 64))(a1))
  {
    unsigned int v4 = bswap32(*(_DWORD *)(a2 + 8));
    unsigned int v5 = bswap32(*(_DWORD *)(a1[6] + 20));
  }
  else
  {
    unsigned int v4 = bswap32(*(_DWORD *)(a2 + 4));
    int v6 = bswap32(*(_DWORD *)(a1[6] + 12));
    unsigned int v5 = v6 & ~(v6 >> 31);
  }
  if (v4 >= v5) {
    return (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  }
  else {
    return a1[9] + 18 * v4;
  }
}

uint64_t llvm::object::XCOFFObjectFile::getRelocationType(uint64_t a1, uint64_t a2)
{
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v4 = 9;
  if (v3) {
    uint64_t v4 = 13;
  }
  return *(unsigned __int8 *)(a2 + v4);
}

void *llvm::object::XCOFFObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v6 = 9;
  if (v5) {
    uint64_t v6 = 13;
  }
  RelocationTypeuint64_t String = (char *)llvm::XCOFF::getRelocationTypeString(*(unsigned __int8 *)(a2 + v6));
  return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, RelocationTypeString, &RelocationTypeString[v7]);
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolFlags@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = a1;
  int v6 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  uint64_t v7 = 1;
  if (v6) {
    uint64_t v7 = 2;
  }
  (&v24)[v7] = a2;
  uint64_t v8 = v25;
  uint64_t v9 = v26;
  if (v25) {
    uint64_t v10 = v25;
  }
  else {
    uint64_t v10 = v26;
  }
  int v11 = *(unsigned __int16 *)(v10 + 12);
  int v12 = *(unsigned __int8 *)(v10 + 16);
  if (v12 == 111) {
    int v13 = 6;
  }
  else {
    int v13 = 2;
  }
  int v14 = v13 | (8 * (v11 == 0xFFFF));
  if (v12 == 111 || v12 == 2) {
    int v16 = v14;
  }
  else {
    int v16 = 8 * (v11 == 0xFFFF);
  }
  if (v12 == 2 || v12 == 111 || v12 == 107)
  {
    uint64_t result = (uint64_t)llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)v27, &v24);
    uint64_t v18 = v27[0];
    if (v28)
    {
      *(unsigned char *)(a3 + 8) |= 1u;
      *(void *)a3 = v18;
      return result;
    }
    if (!v27[0]) {
      uint64_t v18 = v27[1];
    }
    if ((*(unsigned char *)(v18 + 10) & 7) == 3) {
      v16 |= 0x10u;
    }
    int v11 = *(unsigned __int16 *)(v10 + 12);
  }
  int v19 = v16 | (v11 == 0);
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  if ((result & 1) != 0 || (uint64_t v20 = a1[7]) != 0 && *(_WORD *)(v20 + 2) == 512)
  {
    if (v8) {
      uint64_t v21 = v8;
    }
    else {
      uint64_t v21 = v9;
    }
    int v22 = (*(unsigned __int16 *)(v21 + 14) << 8) & 0x7000;
    int v23 = v19 | 0x200;
    if (v22 != 0x2000) {
      int v23 = v19;
    }
    if (v22 == 0x4000) {
      v19 |= 0x40u;
    }
    else {
      int v19 = v23;
    }
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v19;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::symbol_begin(llvm::object::XCOFFObjectFile *this)
{
  return *((void *)this + 9);
}

uint64_t llvm::object::XCOFFObjectFile::symbol_end(llvm::object::XCOFFObjectFile *this)
{
  int v2 = (*(uint64_t (**)(llvm::object::XCOFFObjectFile *))(*(void *)this + 64))(this);
  uint64_t v3 = *((void *)this + 6);
  if (v2)
  {
    unsigned int v4 = bswap32(*(_DWORD *)(v3 + 20));
  }
  else
  {
    int v5 = bswap32(*(_DWORD *)(v3 + 12));
    unsigned int v4 = v5 & ~(v5 >> 31);
  }
  return *((void *)this + 9) + 18 * v4;
}

uint64_t llvm::object::XCOFFObjectFile::section_begin(llvm::object::XCOFFObjectFile *this)
{
  return *((void *)this + 8);
}

uint64_t llvm::object::XCOFFObjectFile::section_end(llvm::object::XCOFFObjectFile *this)
{
  uint64_t v2 = *((void *)this + 8);
  (*(void (**)(llvm::object::XCOFFObjectFile *))(*(void *)this + 64))(this);
  unsigned int v3 = bswap32(*(unsigned __int16 *)(*((void *)this + 6) + 2)) >> 16;
  int v4 = (*(uint64_t (**)(llvm::object::XCOFFObjectFile *))(*(void *)this + 64))(this);
  unsigned int v5 = 40;
  if (v4) {
    unsigned int v5 = 72;
  }
  return v2 + v5 * (unint64_t)v3;
}

uint64_t llvm::object::XCOFFObjectFile::getBytesInAddress(llvm::object::XCOFFObjectFile *this)
{
  if ((*(unsigned int (**)(llvm::object::XCOFFObjectFile *))(*(void *)this + 64))(this)) {
    return 8;
  }
  else {
    return 4;
  }
}

const char *llvm::object::XCOFFObjectFile::getFileFormatName(llvm::object::XCOFFObjectFile *this)
{
  if ((*(unsigned int (**)(llvm::object::XCOFFObjectFile *))(*(void *)this + 64))(this)) {
    return "aix5coff64-rs6000";
  }
  else {
    return "aixcoff-rs6000";
  }
}

uint64_t llvm::object::XCOFFObjectFile::getArch(llvm::object::XCOFFObjectFile *this)
{
  if ((*(unsigned int (**)(llvm::object::XCOFFObjectFile *))(*(void *)this + 64))(this)) {
    return 23;
  }
  else {
    return 21;
  }
}

void llvm::object::XCOFFObjectFile::getFeatures(uint64_t a1@<X8>)
{
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  llvm::SubtargetFeatures::Split((char **)&v3, (uint64_t)"", 0);
  *(unsigned char *)(a1 + 24) &= ~1u;
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  unsigned int v5 = (void **)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v5);
}

BOOL llvm::object::XCOFFObjectFile::isRelocatableObject(llvm::object::XCOFFObjectFile *this)
{
  return (*(_WORD *)(*((void *)this + 6) + 18) & 0x100) == 0;
}

void llvm::object::XCOFFObjectFile::getStartAddress(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 8) &= ~1u;
  *(void *)a1 = 0;
}

const char *llvm::object::XCOFFObjectFile::mapDebugSectionName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (const char *)a2;
  switch(a3)
  {
    case 5:
      if (*(_DWORD *)a2 == 1953724260 && *(unsigned char *)(a2 + 4) == 114)
      {
        return "debug_str";
      }
      else if (*(_DWORD *)a2 == 1869379428 && *(unsigned char *)(a2 + 4) == 99)
      {
        return "debug_loc";
      }
      else if (!(*(_DWORD *)a2 ^ 0x616D7764 | *(unsigned __int8 *)(a2 + 4) ^ 0x63))
      {
        return "debug_macinfo";
      }
      break;
    case 7:
      if (*(_DWORD *)a2 == 1651537764 && *(_DWORD *)(a2 + 3) == 1936551522)
      {
        return "debug_pubnames";
      }
      else if (*(_DWORD *)a2 == 1651537764 && *(_DWORD *)(a2 + 3) == 1887007842)
      {
        return "debug_pubtypes";
      }
      else if (*(_DWORD *)a2 == 1918990180 && *(_DWORD *)(a2 + 3) == 1701277298)
      {
        return "debug_aranges";
      }
      else if (*(_DWORD *)a2 == 1650554724 && *(_DWORD *)(a2 + 3) == 1986359906)
      {
        return "debug_abbrev";
      }
      else if (*(_DWORD *)a2 == 1852995428 && *(_DWORD *)(a2 + 3) == 1936025454)
      {
        return "debug_ranges";
      }
      else if (*(_DWORD *)a2 == 1919317860 && *(_DWORD *)(a2 + 3) == 1701667186)
      {
        return "debug_frame";
      }
      break;
    case 6:
      if (*(_DWORD *)a2 == 1852405604 && *(_WORD *)(a2 + 4) == 28518)
      {
        return "debug_info";
      }
      else if (*(_DWORD *)a2 == 1768716132 && *(_WORD *)(a2 + 4) == 25966)
      {
        return "debug_line";
      }
      break;
  }
  return result;
}

BOOL llvm::object::XCOFFObjectFile::is64Bit(llvm::object::XCOFFObjectFile *this)
{
  return *((_DWORD *)this + 2) == 12;
}

void llvm::object::XCOFFObjectFile::create()
{
}

void llvm::object::ObjectFile::createXCOFFObjectFile()
{
}

void llvm::object::XCOFFObjectFile::~XCOFFObjectFile(llvm::object::XCOFFObjectFile *this)
{
}

uint64_t llvm::opt::Arg::Arg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a9;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 40) = a6;
  *(unsigned char *)(a1 + 44) &= 0xFCu;
  *(void *)(a1 + 48) = a1 + 64;
  int v11 = (unsigned int *)(a1 + 48);
  *(void *)(a1 + 56) = 0x200000000;
  *(void *)(a1 + 80) = 0;
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(a1 + 48), a7);
  llvm::SmallVectorTemplateBase<void *,true>::push_back(v11, a8);
  return a1;
}

void llvm::opt::Arg::~Arg(llvm::opt::Arg *this)
{
  if ((*((unsigned char *)this + 44) & 2) != 0)
  {
    uint64_t v2 = *((unsigned int *)this + 14);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*((void *)this + 6) + v3);
        if (v5) {
          MEMORY[0x263E50080](v5, 0x1000C8077774924);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  std::unique_ptr<llvm::opt::Arg>::reset[abi:nn180100]((llvm::opt::Arg **)this + 10, 0);
  int v6 = (char *)*((void *)this + 6);
  if (v6 != (char *)this + 64) {
    free(v6);
  }
}

uint64_t llvm::opt::ArgList::MakeArgString(llvm::opt::ArgList *this, const llvm::Twine *a2)
{
  v9[32] = *MEMORY[0x263EF8340];
  uint64_t v7 = v9;
  long long v8 = xmmword_261E8A780;
  uint64_t v3 = llvm::Twine::toStringRef((uint64_t)a2, (uint64_t)&v7);
  uint64_t v5 = (*(uint64_t (**)(llvm::opt::ArgList *, const char *, uint64_t))(*(void *)this + 16))(this, v3, v4);
  if (v7 != v9) {
    free(v7);
  }
  return v5;
}

llvm::opt::Arg *std::unique_ptr<llvm::opt::Arg>::reset[abi:nn180100](llvm::opt::Arg **a1, llvm::opt::Arg *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::opt::Arg::~Arg(result);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

uint64_t llvm::opt::ArgList::append(llvm::opt::ArgList *this, llvm::opt::Arg *a2)
{
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)this + 2, (uint64_t)a2);
  uint64_t result = llvm::opt::Option::getUnaliasedOption(a2);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = v5;
    do
    {
      LODWORD(v14[0]) = *(_DWORD *)(v6 + 48);
      *(void *)((char *)v14 + 4) = 0xFFFFFFFFLL;
      uint64_t v12 = v14[0];
      int v13 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::try_emplace<std::pair<unsigned int,unsigned int>>((uint64_t)this + 152, &v12, (uint64_t *)((char *)&v12 + 4), (uint64_t)v14);
      uint64_t v8 = v14[0];
      int v9 = *((_DWORD *)this + 4);
      int v10 = v9 - 1;
      if ((v9 - 1) >= *(_DWORD *)(v14[0] + 4)) {
        int v10 = *(_DWORD *)(v14[0] + 4);
      }
      *(_DWORD *)(v14[0] + 4) = v10;
      *(_DWORD *)(v8 + 8) = v9;
      if (!*(_WORD *)(v6 + 60)) {
        break;
      }
      uint64_t v11 = *(void *)(v7 + 8);
      uint64_t v6 = v11 + 80 * (*(unsigned __int16 *)(v6 + 60) - 1);
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::opt::Option::getUnaliasedOption(llvm::opt::Option *this)
{
  uint64_t result = *(void *)this;
  if (*(_WORD *)(result + 62))
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v4 = *(void *)(v3 + 8);
    v5[0] = v4 + 80 * (*(unsigned __int16 *)(result + 62) - 1);
    v5[1] = v3;
    if (v4) {
      return llvm::opt::Option::getUnaliasedOption((llvm::opt::Option *)v5);
    }
  }
  return result;
}

uint64_t llvm::opt::InputArgList::releaseMemory(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 16);
  if (v1)
  {
    uint64_t v2 = 8 * v1;
    for (uint64_t i = *(uint64_t **)(this + 8); !*i; ++i)
    {
      v2 -= 8;
      if (!v2) {
        return this;
      }
    }
  }
  else
  {
    uint64_t i = *(uint64_t **)(this + 8);
  }
  uint64_t v4 = *(void *)(this + 8) + 8 * v1;
  if (i != (uint64_t *)v4)
  {
    this = *i;
LABEL_9:
    if (this)
    {
      llvm::opt::Arg::~Arg((llvm::opt::Arg *)this);
      this = MEMORY[0x263E500B0]();
    }
    while (++i != (uint64_t *)v4)
    {
      this = *i;
      if (*i)
      {
        if (i != (uint64_t *)v4) {
          goto LABEL_9;
        }
        return this;
      }
    }
  }
  return this;
}

llvm::opt::InputArgList *llvm::opt::InputArgList::InputArgList(llvm::opt::InputArgList *this, const char **a2, const char **a3)
{
  *((void *)this + 2) = 0x1000000000;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *(void *)this = &unk_270DC1758;
  *((void *)this + 1) = (char *)this + 24;
  *((void *)this + 22) = (char *)this + 192;
  *((void *)this + 23) = 0x1000000000;
  *((void *)this + 40) = (char *)this + 320;
  *((void *)this + 41) = (char *)this + 320;
  *((void *)this + 42) = 0;
  *((_DWORD *)this + 86) = (unint64_t)((char *)a3 - (char *)a2) >> 3;
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)this + 44, a2, a3);
  return this;
}

uint64_t llvm::opt::InputArgList::MakeArgStringRef(uint64_t a1, const void *a2, size_t a3)
{
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v6 = *(unsigned int *)(a1 + 184);
  uint64_t v7 = a1 + 320;
  if (a3 >= 0x17)
  {
    uint64_t v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v9 = a3 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = a3;
    unint64_t v16 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = a3;
  p_dst = &__dst;
  if (a3) {
LABEL_8:
  }
    memmove(p_dst, a2, a3);
  *((unsigned char *)p_dst + a3) = 0;
  uint64_t v11 = (char *)operator new(0x28uLL);
  uint64_t v12 = v11 + 16;
  *((_OWORD *)v11 + 1) = __dst;
  *((void *)v11 + 4) = v16;
  uint64_t v13 = *(void *)(a1 + 320);
  *(void *)uint64_t v11 = v13;
  *((void *)v11 + 1) = v7;
  *(void *)(v13 + 8) = v11;
  *(void *)(a1 + 320) = v11;
  ++*(void *)(a1 + 336);
  if (v11[39] < 0) {
    uint64_t v12 = (void *)*v12;
  }
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(a1 + 176), (uint64_t)v12);
  return *(void *)(*(void *)(a1 + 176) + 8 * v6);
}

uint64_t llvm::opt::InputArgList::getArgString(llvm::opt::InputArgList *this, unsigned int a2)
{
  return *(void *)(*((void *)this + 22) + 8 * a2);
}

uint64_t llvm::opt::InputArgList::getNumInputArgStrings(llvm::opt::InputArgList *this)
{
  return *((unsigned int *)this + 86);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::try_emplace<std::pair<unsigned int,unsigned int>>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a2, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::InsertIntoBucketImpl<unsigned int>(a1, (uint64_t)a2, a2, v12);
    uint64_t v9 = (_DWORD *)result;
    *(_DWORD *)uint64_t result = *a2;
    *(void *)(result + 4) = *a3;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 12 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::LookupBucketFor<unsigned int>(uint64_t *a1, _DWORD *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = (37 * *a2) & (v3 - 1);
    uint64_t v7 = (_DWORD *)(*a1 + 12 * v6);
    int v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      char v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -2;
        }
        if (v12) {
          char v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (_DWORD *)(v4 + 12 * (v13 & v5));
        int v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_DWORD *llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(12 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 12 * v10;
      do
      {
        _DWORD *result = -1;
        result += 3;
        v11 -= 12;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 12 * v3;
      uint64_t v13 = v4;
      do
      {
        if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        {
          uint64_t v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::LookupBucketFor<unsigned int>((uint64_t *)a1, (_DWORD *)v13, &v17);
          int v14 = v17;
          *uint64_t v17 = *(_DWORD *)v13;
          *(void *)(v14 + 1) = *(void *)(v13 + 4);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 12;
        v12 -= 12;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = 12 * v15;
    do
    {
      _DWORD *result = -1;
      result += 3;
      v16 -= 12;
    }
    while (v16);
  }
  return result;
}

void std::make_unique[abi:nn180100]<llvm::opt::Arg,llvm::opt::Option const&,llvm::StringRef &,unsigned int,char const*>()
{
}

const char *llvm::opt::Option::accept@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X3>, int a4@<W4>, unsigned int *a5@<X5>, void *a6@<X8>)
{
  if (a4 && *(unsigned char *)(*(void *)a1 + 52) == 3) {
    operator new();
  }
  uint64_t result = (const char *)(**(uint64_t (***)(uint64_t, void))a2)(a2, *a5);
  if (result)
  {
    uint64_t result = (const char *)strlen(result);
    uint64_t v12 = result;
  }
  else
  {
    uint64_t v12 = 0;
  }
  switch(*(unsigned char *)(*(void *)a1 + 52))
  {
    case 4:
      uint64_t v14 = *a5;
      goto LABEL_18;
    case 5:
      __break(1u);
      JUMPOUT(0x261D59894);
    case 6:
      if (a3 != v12) {
        break;
      }
      unsigned int v13 = *a5 + 2;
      goto LABEL_15;
    case 7:
      if (a3 == v12)
      {
        ++*a5;
        operator new();
      }
      break;
    case 8:
      operator new();
    case 9:
      (**(void (***)(uint64_t, void))a2)(a2, *a5);
      ++*a5;
      operator new();
    case 0xA:
      if (a3 == v12)
      {
        unsigned int v15 = *(unsigned __int8 *)(*(void *)a1 + 53) + *a5 + 1;
        *a5 = v15;
        uint64_t result = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
        if (v15 <= result)
        {
          (**(void (***)(uint64_t, void))a2)(a2, *a5 - *(unsigned __int8 *)(*(void *)a1 + 53));
          operator new();
        }
      }
      break;
    case 0xB:
      uint64_t v14 = *a5;
      if (a3 != v12)
      {
LABEL_18:
        (**(void (***)(uint64_t, uint64_t))a2)(a2, v14);
        ++*a5;
        operator new();
      }
      unsigned int v13 = v14 + 2;
LABEL_15:
      *a5 = v13;
      uint64_t result = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
      if (v13 <= result)
      {
        uint64_t result = (const char *)(**(uint64_t (***)(uint64_t, void))a2)(a2, *a5 - 1);
        if (result)
        {
          (**(void (***)(uint64_t, void))a2)(a2, *a5 - 1);
          std::make_unique[abi:nn180100]<llvm::opt::Arg,llvm::opt::Option const&,llvm::StringRef &,unsigned int,char const*>();
        }
      }
      return result;
    case 0xC:
      unsigned int v16 = *a5 + 2;
      *a5 = v16;
      uint64_t result = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
      if (v16 <= result)
      {
        uint64_t result = (const char *)(**(uint64_t (***)(uint64_t, void))a2)(a2, *a5 - 1);
        if (result)
        {
          (**(void (***)(uint64_t, void))a2)(a2, *a5 - 2);
          (**(void (***)(uint64_t, void))a2)(a2, *a5 - 1);
          operator new();
        }
      }
      return result;
    default:
      if (a3 == v12)
      {
        ++*a5;
        operator new();
      }
      return result;
  }
  *a6 = 0;
  return result;
}

uint64_t llvm::opt::OptTable::OptTable(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)uint64_t result = &unk_270DC1780;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(unsigned char *)(result + 24) = a4;
  *(unsigned char *)(result + 25) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(void *)(result + 56) = result + 80;
  *(_OWORD *)(result + 64) = xmmword_261E8A740;
  if (a3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a2 + 48;
    do
    {
      int v6 = *(unsigned __int8 *)(v5 + 4);
      if (*(unsigned char *)(v5 + 4))
      {
        if (v6 == 2)
        {
          *(_DWORD *)(result + 44) = *(_DWORD *)v5;
        }
        else
        {
          if (v6 != 1)
          {
            *(_DWORD *)(result + 48) = v4;
            return result;
          }
          *(_DWORD *)(result + 40) = *(_DWORD *)v5;
        }
      }
      ++v4;
      v5 += 80;
    }
    while (a3 != v4);
  }
  return result;
}

char *llvm::opt::OptTable::buildPrefixChars(size_t *this)
{
  uint64_t result = (char *)(*(uint64_t (**)(size_t *))*this)(this);
  if (v3)
  {
    uint64_t v4 = (uint64_t)result;
    uint64_t v5 = &result[16 * v3];
    do
    {
      uint64_t v6 = *(void *)(v4 + 8);
      if (v6)
      {
        int v7 = *(char **)v4;
        do
        {
          char v8 = *v7;
          uint64_t v9 = (char *)this[7];
          size_t v10 = this[8];
          uint64_t result = (char *)memchr(v9, *v7, v10);
          if (result) {
            uint64_t v11 = result;
          }
          else {
            uint64_t v11 = &v9[v10];
          }
          if (v11 - v9 == v10) {
            uint64_t result = (char *)llvm::SmallVectorTemplateBase<char,true>::push_back(this + 7, v8);
          }
          ++v7;
          --v6;
        }
        while (v6);
      }
      v4 += 16;
    }
    while ((char *)v4 != v5);
  }
  return result;
}

void *llvm::opt::OptTable::parseOneArgGrouped@<X0>(llvm::opt::OptTable *this@<X0>, llvm::opt::InputArgList *a2@<X1>, unsigned int *a3@<X2>, llvm::opt::Arg **a4@<X8>)
{
  uint64_t v7 = *(void *)(*((void *)a2 + 22) + 8 * *a3);
  v34[0] = v7;
  if (v7) {
    size_t v8 = strlen((const char *)v7);
  }
  else {
    size_t v8 = 0;
  }
  v34[1] = v8;
  uint64_t v9 = (**(uint64_t (***)(llvm::opt::OptTable *))this)(this);
  if (isInput(v9, v10, (unsigned char *)v7, v8)) {
    goto LABEL_29;
  }
  uint64_t v11 = *((void *)this + 1);
  uint64_t v12 = v11 + 80 * *((void *)this + 2);
  unint64_t first_not_of = llvm::StringRef::find_first_not_of(v34, *((unsigned __int8 **)this + 7), *((void *)this + 8), 0);
  if (first_not_of >= v8) {
    size_t v14 = v8;
  }
  else {
    size_t v14 = first_not_of;
  }
  uint64_t v15 = std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,llvm::opt::OptTable::Info const*,llvm::opt::OptTable::Info const*,llvm::StringRef,std::__identity,std::__less<void,void>>(v11 + 80 * *((unsigned int *)this + 12), v12, (char *)(v7 + v14), v8 - v14);
  if (v15 == v12) {
    goto LABEL_28;
  }
  unsigned int v16 = (uint64_t *)v15;
  uint64_t v26 = 0;
  unsigned int v17 = *a3;
  do
  {
    unsigned int matched = matchOption(v16, (char *)v7, v8, *((unsigned __int8 *)this + 24));
    if (matched)
    {
      unsigned int v19 = matched;
      uint64_t v28 = (uint64_t)v16;
      uint64_t v29 = this;
      uint64_t result = (void *)llvm::opt::Option::accept((uint64_t)&v28, (uint64_t)a2, (const char *)matched, 0, a3, a4);
      if (*a4) {
        return result;
      }
      uint64_t result = std::unique_ptr<llvm::opt::Arg>::reset[abi:nn180100](a4, 0);
      if (v19 == 2)
      {
        uint64_t v21 = v26;
        if (*(unsigned char *)(v28 + 52) == 3) {
          uint64_t v21 = v16;
        }
        uint64_t v26 = v21;
      }
      if (v17 != *a3)
      {
        *a4 = 0;
        return result;
      }
    }
    v16 += 10;
  }
  while (v16 != (uint64_t *)v12);
  if (!v26)
  {
LABEL_28:
    if (*(unsigned char *)(v7 + 1) != 45)
    {
      __int16 v32 = 261;
      if (v8 >= 2) {
        uint64_t v24 = 2;
      }
      else {
        uint64_t v24 = v8;
      }
      uint64_t v28 = v7;
      uint64_t v29 = (llvm::opt::OptTable *)v24;
      llvm::opt::ArgList::MakeArgString(a2, (const llvm::Twine *)&v28);
      uint64_t v25 = *a3;
      uint64_t v28 = 45;
      uint64_t v30 = v7 + v24;
      size_t v31 = v8 - v24;
      __int16 v32 = 1287;
      *(void *)(*((void *)a2 + 22) + 8 * v25) = llvm::opt::ArgList::MakeArgString(a2, (const llvm::Twine *)&v28);
      operator new();
    }
LABEL_29:
    ++*a3;
    operator new();
  }
  v33[0] = v26;
  v33[1] = this;
  if (*(unsigned char *)(v7 + 2) == 61)
  {
    *a3 = v17 + 1;
    operator new();
  }
  if (v8 >= 2) {
    uint64_t v22 = 2;
  }
  else {
    uint64_t v22 = v8;
  }
  llvm::opt::Option::accept((uint64_t)v33, (uint64_t)a2, (const char *)v22, 1, a3, a4);
  if (!*a4)
  {
    std::unique_ptr<llvm::opt::Arg>::reset[abi:nn180100](a4, 0);
    goto LABEL_28;
  }
  uint64_t v23 = *a3;
  uint64_t v28 = 45;
  uint64_t v30 = v7 + v22;
  size_t v31 = v8 - v22;
  __int16 v32 = 1287;
  uint64_t result = (void *)llvm::opt::ArgList::MakeArgString(a2, (const llvm::Twine *)&v28);
  *(void *)(*((void *)a2 + 22) + 8 * v23) = result;
  return result;
}

uint64_t isInput(uint64_t a1, uint64_t a2, unsigned char *__s1, size_t a4)
{
  uint64_t v6 = a1;
  if ((a4 != 1 || *__s1 != 45) && a2)
  {
    uint64_t v7 = a1 + 16 * a2;
    do
    {
      size_t v8 = *(void *)(v6 + 8);
      if (a4 >= v8)
      {
        if (!v8) {
          return 0;
        }
        uint64_t result = memcmp(__s1, *(const void **)v6, v8);
        if (!result) {
          return result;
        }
      }
      v6 += 16;
    }
    while (v6 != v7);
  }
  return 1;
}

uint64_t matchOption(uint64_t *a1, char *__s1, unint64_t a3, int a4)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    return 0;
  }
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 + 16 * v4;
  while (1)
  {
    unint64_t v11 = *(void *)(v9 + 8);
    if (a3 < v11 || v11 && memcmp(__s1, *(const void **)v9, *(void *)(v9 + 8))) {
      goto LABEL_16;
    }
    uint64_t v12 = a3 >= v11 ? v11 : a3;
    unsigned int v13 = &__s1[v12];
    unint64_t v14 = a3 - v12;
    uint64_t v15 = (const char *)a1[2];
    unint64_t v16 = a1[3];
    if (!a4) {
      break;
    }
    if (v14 >= v16 && !ascii_strncasecmp(v13, v15, a1[3])) {
      return (v16 + v11);
    }
LABEL_16:
    v9 += 16;
    if (v9 == v10) {
      return 0;
    }
  }
  if (v14 < v16 || v16 && memcmp(v13, v15, a1[3])) {
    goto LABEL_16;
  }
  return (v16 + v11);
}

void *llvm::opt::OptTable::ParseOneArg@<X0>(llvm::opt::OptTable *this@<X0>, const llvm::opt::ArgList *a2@<X1>, unsigned int *a3@<X2>, int a4@<W3>, int a5@<W4>, llvm::opt::Arg **a6@<X8>)
{
  unsigned int v12 = *a3;
  unsigned int v13 = (const char *)(**(uint64_t (***)(const llvm::opt::ArgList *, void))a2)(a2, *a3);
  unint64_t v14 = (char *)v13;
  v37[0] = v13;
  if (v13) {
    size_t v15 = strlen(v13);
  }
  else {
    size_t v15 = 0;
  }
  v37[1] = v15;
  uint64_t v16 = (**(uint64_t (***)(llvm::opt::OptTable *))this)(this);
  if (isInput(v16, v17, v14, v15))
  {
    ++*a3;
    operator new();
  }
  int v33 = a4;
  int v34 = a5;
  __int16 v35 = a6;
  uint64_t v18 = *((void *)this + 1);
  uint64_t v19 = v18 + 80 * *((unsigned int *)this + 12);
  uint64_t v20 = v18 + 80 * *((void *)this + 2);
  unint64_t first_not_of = llvm::StringRef::find_first_not_of(v37, *((unsigned __int8 **)this + 7), *((void *)this + 8), 0);
  if (first_not_of >= v15) {
    size_t v22 = v15;
  }
  else {
    size_t v22 = first_not_of;
  }
  uint64_t v23 = std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,llvm::opt::OptTable::Info const*,llvm::opt::OptTable::Info const*,llvm::StringRef,std::__identity,std::__less<void,void>>(v19, v20, &v14[v22], v15 - v22);
  if (v23 == v20)
  {
LABEL_27:
    ++*a3;
    operator new();
  }
  uint64_t v24 = v23;
  while (1)
  {
    int v25 = *((unsigned __int8 *)this + 24);
    v24 += 80;
    while (1)
    {
      unsigned int matched = matchOption((uint64_t *)(v24 - 80), v14, v15, v25 != 0);
      if (matched) {
        break;
      }
      BOOL v28 = v24 == v20;
      v24 += 80;
      if (v28) {
        goto LABEL_27;
      }
    }
    int v27 = *(_DWORD *)(v24 - 24);
    BOOL v28 = (v27 & v33) != 0 || v33 == 0;
    v36[0] = v24 - 80;
    v36[1] = this;
    int v29 = v27 & v34;
    if (v28 && v29 == 0)
    {
      unsigned int v31 = matched;
      (**(void (***)(const llvm::opt::ArgList *, void))a2)(a2, *a3);
      uint64_t result = (void *)llvm::opt::Option::accept((uint64_t)v36, (uint64_t)a2, (const char *)v31, 0, a3, v35);
      if (*v35) {
        return result;
      }
      uint64_t result = std::unique_ptr<llvm::opt::Arg>::reset[abi:nn180100](v35, 0);
      if (v12 != *a3) {
        break;
      }
    }
    if (v24 == v20) {
      goto LABEL_27;
    }
  }
  char *v35 = 0;
  return result;
}

llvm::opt::Arg *llvm::opt::OptTable::ParseArgs@<X0>(llvm::opt::OptTable *a1@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, _DWORD *a5@<X4>, int a6@<W5>, int a7@<W6>, llvm::opt::InputArgList *a8@<X8>)
{
  unsigned int v12 = a3;
  uint64_t result = llvm::opt::InputArgList::InputArgList(a8, a2, &a2[a3]);
  *a5 = 0;
  *a4 = 0;
  unsigned int v21 = 0;
  if (v12)
  {
    unsigned int v16 = 0;
    do
    {
      uint64_t v17 = *(unsigned char **)(*((void *)a8 + 22) + 8 * v16);
      if (v17)
      {
        if (*v17)
        {
          if (*((unsigned char *)a1 + 25)) {
            uint64_t result = (llvm::opt::Arg *)llvm::opt::OptTable::parseOneArgGrouped(a1, a8, &v21, &v20);
          }
          else {
            uint64_t result = (llvm::opt::Arg *)llvm::opt::OptTable::ParseOneArg(a1, a8, &v21, a6, a7, &v20);
          }
          uint64_t v19 = v20;
          if (v20)
          {
            uint64_t v20 = 0;
            llvm::opt::ArgList::append(a8, v19);
            uint64_t result = v20;
            uint64_t v20 = 0;
            if (result)
            {
              llvm::opt::Arg::~Arg(result);
              uint64_t result = (llvm::opt::Arg *)MEMORY[0x263E500B0]();
            }
            int v18 = 0;
          }
          else
          {
            *a4 = v16;
            *a5 = v21 + ~v16;
            int v18 = 3;
          }
          unsigned int v16 = v21;
        }
        else
        {
          unsigned int v21 = ++v16;
          int v18 = 2;
        }
        if (v18 == 3) {
          return result;
        }
      }
      else
      {
        unsigned int v21 = ++v16;
      }
    }
    while (v16 < v12);
  }
  return result;
}

uint64_t std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,llvm::opt::OptTable::Info const*,llvm::opt::OptTable::Info const*,llvm::StringRef,std::__identity,std::__less<void,void>>(uint64_t a1, uint64_t a2, char *a3, unint64_t a4)
{
  uint64_t v4 = a2;
  if (a2 != a1)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
    uint64_t v4 = a1;
    do
    {
      uint64_t v8 = v4 + 80 * (v7 >> 1);
      unint64_t v9 = *(void *)(v8 + 24);
      if (a4 >= v9) {
        uint64_t v10 = *(void *)(v8 + 24);
      }
      else {
        uint64_t v10 = a4;
      }
      int v11 = ascii_strncasecmp(*(const char **)(v8 + 16), a3, v10);
      if (v9 > a4) {
        int v12 = -1;
      }
      else {
        int v12 = 1;
      }
      if (v9 == a4) {
        int v12 = 0;
      }
      if (v11) {
        int v12 = v11;
      }
      if (v12 >= 0) {
        v7 >>= 1;
      }
      else {
        v7 += ~(v7 >> 1);
      }
      if (v12 < 0) {
        uint64_t v4 = v8 + 80;
      }
    }
    while (v7);
  }
  return v4;
}

void llvm::readWideAPInt(unint64_t *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, llvm::APInt *a4@<X8>)
{
  v16[8] = *MEMORY[0x263EF8340];
  v15[0] = v16;
  v15[1] = (void *)0x800000000;
  llvm::SmallVectorImpl<unsigned long long>::resizeImpl<false>((uint64_t)v15, a2);
  uint64_t v8 = v15[0];
  if (a2)
  {
    uint64_t v9 = 8 * a2;
    uint64_t v10 = (unint64_t *)v15[0];
    do
    {
      unint64_t v12 = *a1++;
      unint64_t v11 = v12;
      unint64_t v13 = -(uint64_t)(v12 >> 1);
      if (v12 == 1) {
        unint64_t v13 = 0x8000000000000000;
      }
      if (v11) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v11 >> 1;
      }
      *v10++ = v14;
      v9 -= 8;
    }
    while (v9);
  }
  *((_DWORD *)a4 + 2) = a3;
  llvm::APInt::initFromArray(a4, v8);
  if (v15[0] != v16) {
    free(v15[0]);
  }
}

void (***llvm::BitcodeErrorCategory(llvm *this))(_anonymous_namespace_::BitcodeErrorCategoryType *__hidden this)
{
  {
  }
  return llvm::BitcodeErrorCategory(void)::ErrorCategory;
}

uint64_t llvm::getBitcodeModuleList@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  long long v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  llvm::getBitcodeFileContents((unsigned __int8 **)v6, (uint64_t)&v7);
  if (v9)
  {
    uint64_t v4 = v7;
    uint64_t v7 = 0;
    *(unsigned char *)(a2 + 24) |= 1u;
  }
  else
  {
    *(unsigned char *)(a2 + 24) &= ~1u;
    uint64_t v4 = v7;
    *(_OWORD *)(a2 + 8) = v8;
    uint64_t v7 = 0;
    long long v8 = 0uLL;
  }
  *(void *)a2 = v4;
  return llvm::Expected<llvm::BitcodeFileContents>::~Expected((uint64_t)&v7);
}

void llvm::getBitcodeFileContents(unsigned __int8 **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  long long v3 = a1[1];
  if ((v3 & 3) != 0)
  {
    *(void *)&long long v70 = "Invalid bitcode signature";
    LOWORD(v72) = 259;
    error((const llvm::Twine *)&v70);
  }
  uint64_t v5 = *a1;
  uint64_t v6 = &v3[(void)*a1];
  if (v3 && *v5 == 222 && v5[1] == 192 && v5[2] == 23 && v5[3] == 11)
  {
    if ((v3 & 0xFFFFFFF0) == 0
      || (uint64_t v7 = *((unsigned int *)v5 + 2), v8 = *((unsigned int *)v5 + 3), v8 + v7 > (unint64_t)v3))
    {
      *(void *)&long long v70 = "Invalid bitcode wrapper header";
      LOWORD(v72) = 259;
      error((const llvm::Twine *)&v70);
    }
    v5 += v7;
    uint64_t v6 = &v5[v8];
  }
  *(void *)&long long v70 = v5;
  *((void *)&v70 + 1) = v6 - v5;
  long long v71 = 0uLL;
  uint64_t v72 = 0x200000000;
  long long v73 = 0uLL;
  uint64_t v74 = 0;
  std::string::size_type v75 = (char *)&v77;
  uint64_t v76 = 0x800000000;
  uint64_t v78 = 0;
  if ((unint64_t)(v6 - v5) <= 3)
  {
    *(void *)&long long v62 = 92;
    *((void *)&v62 + 1) = std::generic_category();
    *(void *)&long long v81 = "file too small to contain bitcode header";
    llvm::make_error<llvm::StringError,char const*&,std::error_code>();
  }
  char v9 = 0;
  uint64_t v10 = 0;
  LOWORD(v61) = 17218;
  do
  {
    char v11 = v9;
    int v12 = *((char *)&v61 + v10);
    llvm::SimpleBitstreamCursor::Read((uint64_t)&v70, 8u, (uint64_t)&v81);
    if (BYTE8(v81))
    {
      uint64_t v15 = v81;
      goto LABEL_27;
    }
    if ((void)v81 != v12)
    {
      unsigned int v16 = std::generic_category();
      *(void *)&long long v62 = 92;
      *((void *)&v62 + 1) = v16;
      uint64_t v79 = "file doesn't start with bitcode header";
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    char v9 = 1;
    uint64_t v10 = 1;
  }
  while ((v11 & 1) == 0);
  uint64_t v13 = 0;
  long long v81 = xmmword_261E91250;
  while (1)
  {
    unint64_t v14 = (const char *)*(unsigned int *)((char *)&v81 + v13);
    llvm::SimpleBitstreamCursor::Read((uint64_t)&v70, 4u, (uint64_t)&v79);
    if (v80) {
      break;
    }
    if (v79 != v14)
    {
      uint64_t v17 = std::generic_category();
      *(void *)&long long v62 = 92;
      *((void *)&v62 + 1) = v17;
      uint64_t v61 = "file doesn't start with bitcode header";
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    v13 += 4;
    if (v13 == 16) {
      goto LABEL_29;
    }
  }
  uint64_t v15 = (uint64_t)v79;
LABEL_27:
  if (v15)
  {
    char v69 = -1;
    *(void *)&long long v62 = v15;
  }
  else
  {
LABEL_29:
    char v69 = 0;
    uint64_t v64 = v72;
    long long v62 = v70;
    long long v63 = v71;
    long long v65 = v73;
    uint64_t v18 = v74;
    uint64_t v74 = 0;
    long long v73 = 0uLL;
    uint64_t v66 = v18;
    v67[0] = (char *)v68;
    v67[1] = (char *)0x800000000;
    if (v76) {
      llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=((uint64_t)v67, (uint64_t)&v75);
    }
    v68[32] = v78;
  }
  llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector(&v75);
  *(void *)&long long v81 = &v73;
  std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v81);
  if (v69)
  {
    uint64_t v54 = v62;
    *(void *)&long long v62 = 0;
    *(unsigned char *)(a2 + 56) |= 1u;
    *(void *)a2 = v54;
    goto LABEL_101;
  }
  unint64_t v19 = 8 * v63 - v64;
  unint64_t v20 = v19 >> 3;
  if ((v19 >> 3) + 8 < *((void *)&v62 + 1))
  {
    unsigned int v21 = 0;
    size_t v22 = 0;
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v25 = 0;
    while (1)
    {
      llvm::BitstreamCursor::advance((llvm::BitstreamCursor *)&v62, 0, (uint64_t)&v81);
      if (BYTE8(v81))
      {
        uint64_t v26 = v81;
        *(void *)&long long v81 = 0;
LABEL_42:
        *(unsigned char *)(a2 + 56) |= 1u;
        *(void *)a2 = v26;
        int v27 = 1;
        goto LABEL_44;
      }
      if (v81 < 2)
      {
        *(void *)&long long v70 = "Malformed block";
        LOWORD(v72) = 259;
        error((const llvm::Twine *)&v70);
      }
      if (v81 != 2) {
        break;
      }
      if (SDWORD1(v81) <= 22)
      {
        if (DWORD1(v81) == 8)
        {
          uint64_t v57 = v24;
          uint64_t v58 = v25;
          unint64_t v33 = v19 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v34 = -1;
          goto LABEL_64;
        }
        if (DWORD1(v81) == 13)
        {
          uint64_t v57 = v24;
          uint64_t v58 = v25;
          uint64_t v29 = v63;
          uint64_t v30 = v64;
          llvm::BitstreamCursor::SkipBlock((llvm::BitstreamCursor *)&v62, (uint64_t *)&v70);
          uint64_t v31 = v70;
          if (!(void)v70)
          {
            llvm::BitstreamCursor::advance((llvm::BitstreamCursor *)&v62, 0, (uint64_t)&v70);
            if (BYTE8(v70))
            {
              uint64_t v31 = v70;
            }
            else
            {
              if ((void)v70 != 0x800000002)
              {
                *(void *)&long long v70 = "Malformed block";
                LOWORD(v72) = 259;
                error((const llvm::Twine *)&v70);
              }
              uint64_t v32 = 8 * v29;
              unint64_t v33 = v19 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v34 = v32 - ((v19 & 0xFFFFFFFFFFFFFFF8) + v30);
LABEL_64:
              uint64_t v35 = v63;
              uint64_t v36 = v64;
              llvm::BitstreamCursor::SkipBlock((llvm::BitstreamCursor *)&v62, (uint64_t *)&v70);
              uint64_t v31 = v70;
              if (!(void)v70)
              {
                uint64_t v37 = 8 * v35 - (v33 + v36);
                unint64_t v38 = ((8 * (void)v63 - (unint64_t)v64) >> 3) - v20;
                uint64_t v39 = v62 + v20;
                std::error_code v40 = a1[2];
                std::error_code v41 = a1[3];
                if ((unint64_t)v22 >= v23)
                {
                  uint64_t v43 = (v22 - v21) >> 6;
                  unint64_t v44 = v43 + 1;
                  if ((unint64_t)(v43 + 1) >> 58) {
                    abort();
                  }
                  if ((uint64_t)(v23 - (void)v21) >> 5 > v44) {
                    unint64_t v44 = (uint64_t)(v23 - (void)v21) >> 5;
                  }
                  if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFC0) {
                    unint64_t v45 = 0x3FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v45 = v44;
                  }
                  if (v45)
                  {
                    unint64_t v46 = v38;
                    uint64_t v56 = v37;
                    unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSignature>>(v45);
                    uint64_t v37 = v56;
                    unint64_t v38 = v46;
                  }
                  else
                  {
                    uint64_t v47 = 0;
                  }
                  uint64_t v48 = (void *)(v45 + (v43 << 6));
                  *uint64_t v48 = v39;
                  v48[1] = v38;
                  v48[2] = v40;
                  v48[3] = v41;
                  v48[4] = 0;
                  v48[5] = 0;
                  v48[6] = v34;
                  v48[7] = v37;
                  if (v22 == v21)
                  {
                    unsigned int v53 = (char *)(v45 + (v43 << 6));
                  }
                  else
                  {
                    unint64_t v49 = v45 + (v43 << 6);
                    do
                    {
                      long long v50 = *((_OWORD *)v22 - 4);
                      long long v51 = *((_OWORD *)v22 - 3);
                      long long v52 = *((_OWORD *)v22 - 1);
                      unsigned int v53 = (char *)(v49 - 64);
                      *(_OWORD *)(v49 - 32) = *((_OWORD *)v22 - 2);
                      *(_OWORD *)(v49 - 16) = v52;
                      *(_OWORD *)(v49 - 64) = v50;
                      *(_OWORD *)(v49 - 48) = v51;
                      v22 -= 64;
                      v49 -= 64;
                    }
                    while (v22 != v21);
                  }
                  unint64_t v23 = v45 + (v47 << 6);
                  size_t v22 = (char *)(v48 + 8);
                  if (v21) {
                    operator delete(v21);
                  }
                  int v27 = 2;
                  unsigned int v21 = v53;
                }
                else
                {
                  *(void *)size_t v22 = v39;
                  *((void *)v22 + 1) = v38;
                  *((void *)v22 + 2) = v40;
                  *((void *)v22 + 3) = v41;
                  *((void *)v22 + 4) = 0;
                  *((void *)v22 + 5) = 0;
                  *((void *)v22 + 6) = v34;
                  *((void *)v22 + 7) = v37;
                  v22 += 64;
                  int v27 = 2;
                }
                goto LABEL_89;
              }
            }
          }
          *(unsigned char *)(a2 + 56) |= 1u;
          *(void *)a2 = v31;
          int v27 = 1;
LABEL_89:
          uint64_t v24 = v57;
          uint64_t v25 = v58;
          goto LABEL_44;
        }
LABEL_75:
        llvm::BitstreamCursor::SkipBlock((llvm::BitstreamCursor *)&v62, (uint64_t *)&v70);
        goto LABEL_76;
      }
      if (DWORD1(v81) == 23)
      {
        readBlobInRecord((llvm::BitstreamCursor *)&v70, (llvm::BitstreamCursor *)&v62, 23);
        if (v71) {
          goto LABEL_78;
        }
        if (v22 != v21)
        {
          uint64_t v42 = v22;
          do
          {
            if (*((void *)v42 - 3)) {
              break;
            }
            *((_OWORD *)v42 - 2) = v70;
            v42 -= 64;
          }
          while (v42 != v21);
        }
        int v27 = 2;
        if (v60 && !v59)
        {
          uint64_t v59 = *((void *)&v70 + 1);
          uint64_t v25 = v70;
        }
      }
      else
      {
        if (DWORD1(v81) != 25) {
          goto LABEL_75;
        }
        readBlobInRecord((llvm::BitstreamCursor *)&v70, (llvm::BitstreamCursor *)&v62, 25);
        if (v71)
        {
LABEL_78:
          uint64_t v26 = v70;
          goto LABEL_42;
        }
        if (v60) {
          goto LABEL_77;
        }
        int v27 = 2;
        uint64_t v60 = *((void *)&v70 + 1);
        uint64_t v24 = v70;
      }
LABEL_44:
      if (BYTE8(v81))
      {
        uint64_t v28 = v81;
        *(void *)&long long v81 = 0;
        if (v28) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
      }
      if ((v27 | 2) != 2)
      {
        if (v21) {
          operator delete(v21);
        }
        goto LABEL_101;
      }
      unint64_t v19 = 8 * v63 - v64;
      unint64_t v20 = v19 >> 3;
      if ((v19 >> 3) + 8 >= *((void *)&v62 + 1)) {
        goto LABEL_107;
      }
    }
    if (v81 != 3)
    {
      int v27 = 0;
      goto LABEL_44;
    }
    llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)&v62, SDWORD1(v81), (uint64_t)&v70);
    if ((BYTE8(v70) & 1) == 0) {
      goto LABEL_77;
    }
LABEL_76:
    uint64_t v26 = v70;
    if (!(void)v70)
    {
LABEL_77:
      int v27 = 2;
      goto LABEL_44;
    }
    goto LABEL_42;
  }
  uint64_t v24 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v25 = 0;
  unint64_t v23 = 0;
  size_t v22 = 0;
  unsigned int v21 = 0;
LABEL_107:
  *(unsigned char *)(a2 + 56) &= ~1u;
  *(void *)a2 = v21;
  *(void *)(a2 + 8) = v22;
  *(void *)(a2 + 16) = v23;
  *(void *)(a2 + 24) = v24;
  *(void *)(a2 + 32) = v60;
  *(void *)(a2 + 40) = v25;
  *(void *)(a2 + 48) = v59;
LABEL_101:
  if (v69)
  {
    uint64_t v55 = v62;
    *(void *)&long long v62 = 0;
    if (v55) {
      (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
    }
  }
  else
  {
    llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector(v67);
    *(void *)&long long v70 = &v65;
    std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v70);
  }
}

void llvm::BitstreamCursor::advance(llvm::BitstreamCursor *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v6 = *(unsigned __int8 *)(a3 + 8);
  while (*((_DWORD *)this + 8) || *((void *)this + 1) > *((void *)this + 2))
  {
    llvm::BitstreamCursor::ReadCode(this, (uint64_t)&v12);
    if (v13)
    {
      unint64_t v7 = v12;
      unint64_t v12 = 0;
      goto LABEL_12;
    }
    if (v12 != 2)
    {
      if (v12 != 1)
      {
        if (!v12)
        {
          if ((a2 & 1) != 0 || !llvm::BitstreamCursor::ReadBlockEnd(this))
          {
            v6 &= ~1u;
            *(unsigned char *)(a3 + 8) = v6;
            int v8 = 1;
            *(void *)a3 = 1;
            goto LABEL_22;
          }
          v6 &= ~1u;
          *(unsigned char *)(a3 + 8) = v6;
          *(void *)a3 = 0;
          goto LABEL_21;
        }
LABEL_16:
        unint64_t v7 = ((unint64_t)v12 << 32) | 3;
LABEL_19:
        v6 &= ~1u;
LABEL_20:
        *(unsigned char *)(a3 + 8) = v6;
        *(void *)a3 = v7;
LABEL_21:
        int v8 = 1;
        goto LABEL_22;
      }
      llvm::SimpleBitstreamCursor::ReadVBR(this, 8u, (uint64_t)&v10);
      if ((v11 & 1) == 0)
      {
        unint64_t v7 = ((unint64_t)v10 << 32) | 2;
        goto LABEL_19;
      }
      unint64_t v7 = v10;
LABEL_12:
      v6 |= 1u;
      goto LABEL_20;
    }
    if ((a2 & 2) != 0) {
      goto LABEL_16;
    }
    llvm::BitstreamCursor::ReadAbbrevRecord(this, (uint64_t *)&v10);
    unint64_t v7 = v10;
    if (v10) {
      goto LABEL_12;
    }
    int v8 = 2;
LABEL_22:
    if (v13)
    {
      unint64_t v9 = v12;
      unint64_t v12 = 0;
      if (v9) {
        (*(void (**)(unint64_t))(*(void *)v9 + 8))(v9);
      }
    }
    if (v8 == 1) {
      return;
    }
  }
  *(unsigned char *)(a3 + 8) = v6 & 0xFE;
  *(void *)a3 = 0;
}

void error(const llvm::Twine *a1)
{
}

{
  llvm::BitcodeErrorCategory(a1);
  operator new();
}

uint64_t llvm::BitstreamCursor::SkipBlock@<X0>(llvm::BitstreamCursor *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::SimpleBitstreamCursor::ReadVBR(this, 4u, (uint64_t)&v17);
  if ((v18 & 1) != 0
    || ((unsigned int v5 = *((_DWORD *)this + 8), v6 = v5 >= 0x20, v7 = v5 - 32, v6)
      ? (*((void *)this + 3) >>= v7, int v8 = 32)
      : (int v8 = 0),
        *((_DWORD *)this + 8) = v8,
        uint64_t result = llvm::SimpleBitstreamCursor::Read((uint64_t)this, 0x20u, (uint64_t)&v17),
        (v18 & 1) != 0))
  {
    *a2 = v17;
  }
  else
  {
    uint64_t v9 = *((unsigned int *)this + 8);
    unint64_t v10 = *((void *)this + 1);
    unint64_t v11 = *((void *)this + 2);
    if (!v9 && v10 <= v11)
    {
      unint64_t v12 = std::generic_category();
      uint64_t v17 = 92;
      uint64_t v18 = v12;
      v15[0] = "can't skip block: already at end of stream";
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    uint64_t v13 = 8 * v11 - v9;
    unint64_t v14 = v13 + 32 * v17;
    if (v10 < v14 >> 3)
    {
      __p[3] = (void *)92;
      __p[4] = (void *)std::generic_category();
      memset(__p, 0, 24);
      LODWORD(v18) = 0;
      char v22 = 0;
      uint64_t v23 = 0;
      int v24 = 1;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = (uint64_t)&unk_270DBD6E0;
      uint64_t v25 = __p;
      llvm::raw_ostream::SetUnbuffered(&v17);
      v15[0] = &unk_270DC19E0;
      v15[1] = "can't skip to bit %zu from %llu";
      void v15[2] = v14;
      void v15[3] = v13;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v17, (uint64_t)v15);
      llvm::make_error<llvm::StringError,std::string,std::error_code>();
    }
    uint64_t result = llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)this, v14, a2);
    if (!*a2) {
      *a2 = 0;
    }
  }
  return result;
}

void readBlobInRecord(llvm::BitstreamCursor *a1, llvm::BitstreamCursor *a2, int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  llvm::BitstreamCursor::EnterSubBlock(a2, 0, a3, (void ***)v16);
  unsigned int v5 = v16[0];
  if (v16[0])
  {
    *((unsigned char *)a1 + 16) |= 1u;
    *(void *)a1 = v5;
  }
  else
  {
    long long v13 = 0uLL;
    int v6 = *((unsigned __int8 *)a1 + 16);
    do
    {
      llvm::BitstreamCursor::advance(a2, 0, (uint64_t)&v18);
      if ((v19 & 1) == 0)
      {
        switch((int)v18)
        {
          case 0:
            v16[0] = "Malformed block";
            v17[8] = 259;
            error((const llvm::Twine *)v16);
          case 1:
            char v7 = 0;
            v6 &= ~1u;
            *((unsigned char *)a1 + 16) = v6;
            *(_OWORD *)a1 = v13;
            goto LABEL_21;
          case 2:
            llvm::BitstreamCursor::SkipBlock(a2, (uint64_t *)v16);
            int v8 = v16[0];
            if (!v16[0]) {
              goto LABEL_19;
            }
            char v7 = 0;
            goto LABEL_8;
          case 3:
            long long v12 = 0uLL;
            v16[0] = v17;
            v16[1] = (void *)0x100000000;
            llvm::BitstreamCursor::readRecord(a2, SHIDWORD(v18), (unsigned int *)v16, (unsigned __int8 **)&v12, (uint64_t)&v14);
            char v9 = v15;
            if (v15)
            {
              uint64_t v10 = v14;
              v6 |= 1u;
              *((unsigned char *)a1 + 16) = v6;
              *(void *)a1 = v10;
            }
            else if (v14 == 1)
            {
              long long v13 = v12;
            }
            if (v16[0] != v17) {
              free(v16[0]);
            }
            if ((v9 & 1) == 0) {
              goto LABEL_19;
            }
            char v7 = 0;
            goto LABEL_21;
          default:
LABEL_19:
            char v7 = 1;
            goto LABEL_21;
        }
      }
      char v7 = 0;
      int v8 = v18;
      uint64_t v18 = 0;
LABEL_8:
      v6 |= 1u;
      *((unsigned char *)a1 + 16) = v6;
      *(void *)a1 = v8;
LABEL_21:
      if (v19)
      {
        unint64_t v11 = v18;
        uint64_t v18 = 0;
        if (v11) {
          (*(void (**)(void *))(*(void *)v11 + 8))(v11);
        }
      }
    }
    while ((v7 & 1) != 0);
  }
}

void llvm::BitcodeModule::getModuleImpl(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  v27[0] = *(_OWORD *)a1;
  v27[1] = 0uLL;
  uint64_t v28 = 0x200000000;
  memset(v29, 0, sizeof(v29));
  v30[0] = (char *)v31;
  v30[1] = (char *)0x800000000;
  v31[32] = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  unint64_t v10 = *(void *)(a1 + 48);
  if (v10 == -1) {
    goto LABEL_36;
  }
  llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)v27, v10, v41);
  unint64_t v11 = v41[0];
  if (v41[0]) {
    goto LABEL_37;
  }
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)v27, 0, 13, (void ***)v41);
  if (v41[0])
  {
    v26 |= 1u;
    v25.__r_.__value_.__l.__data_ = (std::string::pointer)v41[0];
    if (v26) {
      goto LABEL_34;
    }
    goto LABEL_5;
  }
  v41[0] = &v42;
  v41[1] = (void *)0x4000000000;
  memset(&__p, 0, sizeof(__p));
  char v12 = v26;
  while (1)
  {
    llvm::BitstreamCursor::advance((llvm::BitstreamCursor *)v27, 0, (uint64_t)&p_dst);
    if ((v36 & 1) == 0) {
      break;
    }
    if (p_dst)
    {
      char v26 = v12 | 1;
      v25.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      goto LABEL_29;
    }
LABEL_11:
    LODWORD(v41[1]) = 0;
    llvm::BitstreamCursor::readRecord((llvm::SimpleBitstreamCursor *)v27, a3, (unsigned int *)v41, 0, (uint64_t)&v39);
    if (v40)
    {
      char v14 = 0;
      std::string::size_type v15 = v39;
      std::string::size_type v39 = 0;
      v12 |= 1u;
      char v26 = v12;
      v25.__r_.__value_.__r.__words[0] = v15;
    }
    else
    {
      if (v39 == 1)
      {
        std::string::append[abi:nn180100]<unsigned long long const*,0>(&__p, (std::string *)v41[0], (std::string *)((char *)v41[0] + 8 * LODWORD(v41[1])));
      }
      else
      {
        if (v39 != 2)
        {
          p_dst = "Invalid value";
          LOWORD(v38) = 259;
          error((const llvm::Twine *)&p_dst);
        }
        if (*(_DWORD *)v41[0])
        {
          unint64_t v13 = *(unsigned int *)v41[0] | a2 & 0xFFFFFFFF00000000;
          v20[0] = "Incompatible epoch: Bitcode '";
          uint64_t v20[2] = v13;
          __int16 v21 = 2051;
          v22[0] = v20;
          void v22[2] = "' vs current: '";
          __int16 v23 = 770;
          *(void *)&long long __dst = v22;
          unint64_t v33 = a4 & 0xFFFFFFFF00000000;
          LOWORD(v34) = 2306;
          p_dst = (const char *)&__dst;
          uint64_t v37 = "'";
          LOWORD(v38) = 770;
          error((const llvm::Twine *)&p_dst);
        }
      }
      char v14 = 1;
    }
    if (v40)
    {
      std::string::size_type v16 = v39;
      std::string::size_type v39 = 0;
      if (v16) {
        (*(void (**)(std::string::size_type))(*(void *)v16 + 8))(v16);
      }
    }
    if ((v14 & 1) == 0) {
      goto LABEL_29;
    }
  }
  if (p_dst == 3)
  {
    a3 = HIDWORD(p_dst);
    goto LABEL_11;
  }
  if (p_dst != 1)
  {
    p_dst = "Malformed block";
    LOWORD(v38) = 259;
    error((const llvm::Twine *)&p_dst);
  }
  char v26 = v12 & 0xFE;
  std::string v25 = __p;
  memset(&__p, 0, sizeof(__p));
LABEL_29:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v41[0] != &v42) {
    free(v41[0]);
  }
  if ((v26 & 1) == 0)
  {
LABEL_5:
    uint64_t v18 = (void *)v25.__r_.__value_.__r.__words[0];
    char v19 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    *((unsigned char *)&v25.__r_.__value_.__s + 23) = 0;
    v25.__r_.__value_.__s.__data_[0] = 0;
    llvm::Expected<std::string>::~Expected((uint64_t)&v25);
    goto LABEL_36;
  }
LABEL_34:
  std::string::size_type v17 = v25.__r_.__value_.__r.__words[0];
  v25.__r_.__value_.__r.__words[0] = 0;
  llvm::Expected<std::string>::~Expected((uint64_t)&v25);
  if (v17)
  {
    *(unsigned char *)(a5 + 8) |= 1u;
    *(void *)a5 = v17;
    goto LABEL_38;
  }
LABEL_36:
  llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)v27, *(void *)(a1 + 56), v41);
  unint64_t v11 = v41[0];
  if (!v41[0]) {
    operator new();
  }
LABEL_37:
  *(unsigned char *)(a5 + 8) |= 1u;
  *(void *)a5 = v11;
LABEL_38:
  if (v19 < 0) {
    operator delete(v18);
  }
  llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector(v30);
  v41[0] = v29;
  std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100]((void ***)v41);
}

uint64_t llvm::SimpleBitstreamCursor::JumpToBit@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *(void *)(this + 16) = (a2 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *(_DWORD *)(this + 32) = 0;
  unsigned int v4 = a2 & 0x3F;
  if (v4)
  {
    this = llvm::SimpleBitstreamCursor::Read(this, v4, (uint64_t)&v6);
    if (v7) {
      uint64_t v5 = v6;
    }
    else {
      uint64_t v5 = 0;
    }
    *a3 = v5;
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

_anonymous_namespace_::BitcodeReaderBase *anonymous namespace'::BitcodeReader::materializeForwardReferencedFunctions(_anonymous_namespace_::BitcodeReaderBase *this, uint64_t a2)
{
  uint64_t v2 = this;
  if (*(unsigned char *)(a2 + 1713)) {
    goto LABEL_15;
  }
  *(unsigned char *)(a2 + 1713) = 1;
  while (1)
  {
    uint64_t v4 = *(void *)(a2 + 1680);
    if (!v4) {
      break;
    }
    uint64_t v5 = *(void ***)(a2 + 1648);
    unint64_t v6 = *(void *)(a2 + 1672);
    uint64_t v7 = (*(void **)((char *)v5 + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8)))[v6 & 0x1FF];
    *(void *)(a2 + 1680) = v4 - 1;
    *(void *)(a2 + 1672) = v6 + 1;
    if (v6 + 1 >= 0x400)
    {
      operator delete(*v5);
      *(void *)(a2 + 1648) += 8;
      *(void *)(a2 + 1672) -= 512;
    }
    if (this)
    {
      if ((*(unsigned char *)(v7 + 35) & 1) == 0)
      {
        v10[0] = "Never resolved function from blockaddress";
        __int16 v11 = 259;
      }
      this = (_anonymous_namespace_::BitcodeReaderBase *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v7);
      if (*(void *)v2) {
        return this;
      }
    }
  }
  uint64_t v8 = *(void **)(a2 + 1688);
  char v9 = *(void **)(a2 + 1696);
  if (v8 == v9)
  {
LABEL_14:
    *(void *)(a2 + 1696) = v8;
    *(unsigned char *)(a2 + 1713) = 0;
LABEL_15:
    *(void *)uint64_t v2 = 0;
    return this;
  }
  while (1)
  {
    this = (_anonymous_namespace_::BitcodeReaderBase *)(*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *v8);
    if (*(void *)v2) {
      return this;
    }
    if (++v8 == v9)
    {
      uint64_t v8 = *(void **)(a2 + 1688);
      goto LABEL_14;
    }
  }
}

void llvm::BitcodeModule::getLazyModule(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  LOBYTE(v8[0]) = 0;
  char v9 = 0;
  if (a3[32])
  {
    std::__function::__value_func<std::optional<std::string> ()(llvm::StringRef,llvm::StringRef)>::__value_func[abi:nn180100]((uint64_t)v8, (uint64_t)a3);
    char v9 = 1;
  }
  LOBYTE(v10[0]) = 0;
  char v11 = 0;
  if (a3[72])
  {
    std::__function::__value_func<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::__value_func[abi:nn180100]((uint64_t)v10, (uint64_t)(a3 + 40));
    char v11 = 1;
  }
  LOBYTE(v12[0]) = 0;
  char v13 = 0;
  if (a3[112])
  {
    std::__function::__value_func<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::__value_func[abi:nn180100]((uint64_t)v12, (uint64_t)(a3 + 80));
    char v13 = 1;
  }
  llvm::BitcodeModule::getModuleImpl(a1, a2, 0, (uint64_t)v8, a4);
  if (v13) {
    std::__function::__value_func<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::~__value_func[abi:nn180100](v12);
  }
  if (v11) {
    std::__function::__value_func<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::~__value_func[abi:nn180100](v10);
  }
  if (v9) {
    std::__function::__value_func<std::optional<std::string> ()(llvm::StringRef,llvm::StringRef)>::~__value_func[abi:nn180100](v8);
  }
}

void anonymous namespace'::BitcodeErrorCategoryType::~BitcodeErrorCategoryType(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x263E500B0);
}

const char *anonymous namespace'::BitcodeErrorCategoryType::name(_anonymous_namespace_::BitcodeErrorCategoryType *this)
{
  return "llvm.bitcode";
}

void *anonymous namespace'::BitcodeErrorCategoryType::message@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "Corrupted bitcode");
}

uint64_t llvm::SimpleBitstreamCursor::Read@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = this;
  unsigned int v6 = *(_DWORD *)(this + 32);
  if (a2 <= v6)
  {
    unint64_t v8 = *(void *)(this + 24);
    *(void *)(this + 24) = v8 >> a2;
    *(_DWORD *)(this + 32) = v6 - a2;
    *(unsigned char *)(a3 + 8) &= ~1u;
    *(void *)a3 = v8 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2);
  }
  else
  {
    if (v6) {
      uint64_t v7 = *(void *)(this + 24);
    }
    else {
      uint64_t v7 = 0;
    }
    this = llvm::SimpleBitstreamCursor::fillCurWord(this, &v15);
    unint64_t v9 = (unint64_t)v15;
    if (v15)
    {
      char v10 = *(unsigned char *)(a3 + 8) | 1;
    }
    else
    {
      unsigned int v11 = *(_DWORD *)(v4 + 32);
      BOOL v12 = v11 >= a2 - v6;
      unsigned int v13 = v11 - (a2 - v6);
      if (!v12)
      {
        std::generic_category();
        memset(__p, 0, sizeof(__p));
        int v16 = 0;
        char v20 = 0;
        uint64_t v21 = 0;
        int v22 = 1;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v17 = 0;
        std::string::size_type v15 = &unk_270DBD6E0;
        __int16 v23 = __p;
        llvm::raw_ostream::SetUnbuffered(&v15);
        v25[0] = &unk_270DC19C0;
        v25[1] = "Unexpected end of file reading %u of %u bits";
        int v26 = *(_DWORD *)(v4 + 32);
        unsigned int v27 = a2 - v6;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v15, (uint64_t)v25);
        operator new();
      }
      unint64_t v14 = *(void *)(v4 + 24);
      *(void *)(v4 + 24) = v14 >> (a2 - v6);
      *(_DWORD *)(v4 + 32) = v13;
      unint64_t v9 = ((v14 & (0xFFFFFFFFFFFFFFFFLL >> (v6 - a2))) << v6) | v7;
      char v10 = *(unsigned char *)(a3 + 8) & 0xFE;
    }
    *(unsigned char *)(a3 + 8) = v10;
    *(void *)a3 = v9;
  }
  return this;
}

uint64_t llvm::SimpleBitstreamCursor::fillCurWord@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this;
  unint64_t v5 = *(void *)(this + 8);
  unint64_t v4 = *(void *)(this + 16);
  unsigned int v6 = v5 - v4;
  if (v5 <= v4)
  {
    v22[3] = 5;
    void v22[4] = std::generic_category();
    memset(v22, 0, 24);
    int v14 = 0;
    char v18 = 0;
    uint64_t v19 = 0;
    int v20 = 1;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = 0;
    unsigned int v13 = &unk_270DBD6E0;
    uint64_t v21 = v22;
    llvm::raw_ostream::SetUnbuffered(&v13);
    uint64_t v11 = *(void *)(v2 + 16);
    v12[0] = &unk_270DC19A0;
    v12[1] = "Unexpected end of file reading %u of %u bytes";
    void v12[2] = v11;
    v12[3] = v5;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v13, (uint64_t)v12);
    llvm::make_error<llvm::StringError,std::string,std::error_code>();
  }
  uint64_t v7 = (void *)(*(void *)this + v4);
  if (v5 >= v4 + 8)
  {
    *(void *)(this + 24) = *v7;
    unsigned int v6 = 8;
  }
  else
  {
    *(void *)(this + 24) = 0;
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        unsigned int v10 = *(unsigned __int8 *)v7;
        uint64_t v7 = (void *)((char *)v7 + 1);
        v9 |= (unint64_t)v10 << (v8 & 0xF8);
        *(void *)(this + 24) = v9;
        v8 += 8;
      }
      while (8 * (v5 - v4) != v8);
    }
  }
  *(void *)(this + 16) = v4 + v6;
  *(_DWORD *)(this + 32) = 8 * v6;
  *a2 = 0;
  return this;
}

uint64_t llvm::format_object<unsigned long,unsigned long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t llvm::format_object<unsigned int,unsigned int>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20));
}

uint64_t llvm::BitstreamCursor::ReadCode@<X0>(llvm::BitstreamCursor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::SimpleBitstreamCursor::Read((uint64_t)this, *((_DWORD *)this + 9), (uint64_t)&v5);
  char v4 = v6;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a2 + 8) & 0xFE | v6 & 1;
  if (v4) {
    *(void *)a2 = v5;
  }
  else {
    *(_DWORD *)a2 = v5;
  }
  return result;
}

BOOL llvm::BitstreamCursor::ReadBlockEnd(llvm::BitstreamCursor *this)
{
  int v1 = *((_DWORD *)this + 18);
  if (v1)
  {
    unsigned int v2 = *((_DWORD *)this + 8);
    BOOL v3 = v2 >= 0x20;
    char v4 = v2 - 32;
    if (v3)
    {
      *((void *)this + 3) >>= v4;
      int v5 = 32;
    }
    else
    {
      int v5 = 0;
    }
    *((_DWORD *)this + 8) = v5;
    llvm::BitstreamCursor::popBlockScope(this);
  }
  return v1 == 0;
}

void llvm::BitstreamCursor::popBlockScope(llvm::BitstreamCursor *this)
{
  uint64_t v2 = *((void *)this + 8) + 32 * *((unsigned int *)this + 18);
  *((_DWORD *)this + 9) = *(_DWORD *)(v2 - 32);
  std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__vdeallocate((uint64_t *)this + 5);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)(v2 - 24);
  *((void *)this + 7) = *(void *)(v2 - 8);
  *(void *)(v2 - 24) = 0;
  *(void *)(v2 - 16) = 0;
  *(void *)(v2 - 8) = 0;
  uint64_t v3 = (*((_DWORD *)this + 18) - 1);
  *((_DWORD *)this + 18) = v3;
  char v4 = (void **)(*((void *)this + 8) + 32 * v3 + 8);
  std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v4);
}

uint64_t llvm::SimpleBitstreamCursor::ReadVBR@<X0>(llvm::SimpleBitstreamCursor *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::SimpleBitstreamCursor::Read((uint64_t)this, a2, (uint64_t)&v18);
  char v17 = v19 & 1;
  if (v19)
  {
    uint64_t v12 = v18;
    *(unsigned char *)(a3 + 8) |= 1u;
LABEL_18:
    *(void *)a3 = v12;
    return result;
  }
  int v7 = v18;
  LODWORD(v16) = v18;
  uint64_t v8 = 1 << (a2 - 1);
  if ((v18 & v8) != 0)
  {
    int v9 = (v8 - 1) & v18;
    unsigned int v10 = a2 - 1;
    while (1)
    {
      if (v10 > 0x1F)
      {
        unsigned int v13 = std::generic_category();
        uint64_t v18 = 92;
        uint64_t v19 = v13;
        int v14 = "Unterminated VBR";
        llvm::make_error<llvm::StringError,char const*&,std::error_code>();
      }
      llvm::SimpleBitstreamCursor::Read((uint64_t)this, a2, (uint64_t)&v14);
      LOBYTE(v19) = v19 & 0xFE | v15 & 1;
      if (v15)
      {
        uint64_t v11 = v14;
        int v14 = 0;
        uint64_t v18 = (uint64_t)v11;
      }
      else
      {
        LODWORD(v18) = v14;
      }
      uint64_t result = (uint64_t)llvm::Expected<unsigned int>::moveAssign<unsigned int>(&v16, &v18);
      if (v19)
      {
        uint64_t result = v18;
        uint64_t v18 = 0;
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      if (v15)
      {
        uint64_t result = (uint64_t)v14;
        int v14 = 0;
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      if (v17) {
        break;
      }
      v9 |= (v16 & (v8 - 1)) << v10;
      v10 += a2 - 1;
      if ((v16 & v8) == 0)
      {
        *(unsigned char *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = v9;
        return result;
      }
    }
    *(unsigned char *)(a3 + 8) |= 1u;
    uint64_t v12 = v16;
    goto LABEL_18;
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v7;
  return result;
}

unsigned char *llvm::Expected<unsigned int>::moveAssign<unsigned int>(unsigned char *result, unsigned char *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    char v4 = result[8];
    if (v4)
    {
      uint64_t result = *(unsigned char **)result;
      *(void *)uint64_t v3 = 0;
      if (result)
      {
        uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
        char v4 = v3[8];
      }
    }
    char v5 = a2[8];
    v3[8] = v4 & 0xFE | v5 & 1;
    if (v5)
    {
      uint64_t v6 = *(void *)a2;
      *(void *)a2 = 0;
      *(void *)uint64_t v3 = v6;
    }
    else
    {
      *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
    }
  }
  return result;
}

uint64_t llvm::format_object<unsigned long,unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

std::string *std::string::append[abi:nn180100]<unsigned long long const*,0>(std::string *this, std::string *a2, std::string *a3)
{
  char v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v7 = (char *)a3 - (char *)a2;
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unsigned int v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    uint64_t v7 = (char *)a3 - (char *)a2;
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    unsigned int v10 = this;
  }
  unint64_t v12 = v7 >> 3;
  if (v10 > v4 || (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= v4)
  {
    if (v9 - size < v12)
    {
      std::string::__grow_by(this, v9, size - v9 + v12, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    int v14 = this;
    if ((v6 & 0x80) != 0) {
      int v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    char v15 = (char *)v14 + size;
    while (v4 != a3)
    {
      std::string::size_type v16 = v4->__r_.__value_.__r.__words[0];
      char v4 = (std::string *)((char *)v4 + 8);
      *v15++ = v16;
    }
    *char v15 = 0;
    std::string::size_type v17 = v12 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    if (v7 < 0) {
      abort();
    }
    if ((unint64_t)v7 > 0xB7)
    {
      uint64_t v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v18 = v12 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_p = operator new(v18 + 1);
      std::string::size_type v25 = v12;
      int64_t v26 = v19 | 0x8000000000000000;
      std::string __p = p_p;
    }
    else
    {
      HIBYTE(v26) = (unint64_t)v7 >> 3;
      p_p = &__p;
    }
    while (v4 != a3)
    {
      std::string::size_type v20 = v4->__r_.__value_.__r.__words[0];
      char v4 = (std::string *)((char *)v4 + 8);
      *p_p++ = v20;
    }
    unsigned char *p_p = 0;
    if (v26 >= 0) {
      uint64_t v21 = (const std::string::value_type *)&__p;
    }
    else {
      uint64_t v21 = (const std::string::value_type *)__p;
    }
    if (v26 >= 0) {
      std::string::size_type v22 = HIBYTE(v26);
    }
    else {
      std::string::size_type v22 = v25;
    }
    std::string::append(this, v21, v22);
    if (SHIBYTE(v26) < 0) {
      operator delete(__p);
    }
  }
  return this;
}

uint64_t llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v5 = (char *)(a2 + 16);
    char v4 = *(char **)a2;
    if (v4 != v5)
    {
      llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::assignRemote((char **)a1, (char **)a2);
      return a1;
    }
    unint64_t v6 = *(unsigned int *)(a2 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v6)
    {
      unsigned int v10 = *(char **)a1;
      if (v6)
      {
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::BitstreamCursor::Block *,llvm::BitstreamCursor::Block *,llvm::BitstreamCursor::Block *>((uint64_t)&v27, (uint64_t)v4, (uint64_t)&v4[32 * v6], (uint64_t)v10);
        unint64_t v12 = v11;
        unsigned int v10 = *(char **)a1;
        uint64_t v7 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        unint64_t v12 = *(char **)a1;
      }
      uint64_t v21 = &v10[32 * v7];
      if (v21 != v12)
      {
        do
        {
          std::string::size_type v22 = v21 - 32;
          unsigned int v27 = (void **)(v21 - 24);
          std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v27);
          uint64_t v21 = v22;
        }
        while (v22 != v12);
      }
      *(_DWORD *)(a1 + 8) = v6;
      uint64_t v23 = *(unsigned int *)(a2 + 8);
      if (v23)
      {
        uint64_t v24 = *(void *)a2 - 24;
        uint64_t v25 = 32 * v23;
        do
        {
          unsigned int v27 = (void **)(v24 + v25);
          std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v27);
          v25 -= 32;
        }
        while (v25);
      }
      goto LABEL_29;
    }
    if (*(_DWORD *)(a1 + 12) >= v6)
    {
      if (v7)
      {
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::BitstreamCursor::Block *,llvm::BitstreamCursor::Block *,llvm::BitstreamCursor::Block *>((uint64_t)&v27, (uint64_t)v4, (uint64_t)&v4[32 * v7], *(void *)a1);
LABEL_15:
        unsigned int v13 = *(char **)a2;
        uint64_t v14 = *(unsigned int *)(a2 + 8);
        if (v7 != v14)
        {
          char v15 = &v13[32 * v14];
          uint64_t v16 = *(void *)a1 + 32 * v7;
          std::string::size_type v17 = &v13[32 * v7];
          do
          {
            *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
            *(void *)(v16 + 16) = 0;
            *(void *)(v16 + 24) = 0;
            *(void *)(v16 + 8) = 0;
            *(_OWORD *)(v16 + 8) = *(_OWORD *)(v17 + 8);
            *(void *)(v16 + 24) = *((void *)v17 + 3);
            *((void *)v17 + 1) = 0;
            *((void *)v17 + 2) = 0;
            *((void *)v17 + 3) = 0;
            v17 += 32;
            v16 += 32;
          }
          while (v17 != v15);
          unsigned int v13 = *(char **)a2;
        }
        *(_DWORD *)(a1 + 8) = v6;
        uint64_t v18 = *(unsigned int *)(a2 + 8);
        if (v18)
        {
          uint64_t v19 = v13 - 24;
          uint64_t v20 = 32 * v18;
          do
          {
            unsigned int v27 = (void **)&v19[v20];
            std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v27);
            v20 -= 32;
          }
          while (v20);
        }
LABEL_29:
        *(_DWORD *)(a2 + 8) = 0;
        return a1;
      }
    }
    else
    {
      if (v7)
      {
        uint64_t v8 = *(void *)a1 - 24;
        uint64_t v9 = 32 * v7;
        do
        {
          unsigned int v27 = (void **)(v8 + v9);
          std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v27);
          v9 -= 32;
        }
        while (v9);
      }
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::grow(a1, v6);
    }
    uint64_t v7 = 0;
    goto LABEL_15;
  }
  return a1;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v18;

  if (a1 != a2)
  {
    char v4 = *(unsigned int *)(a2 + 8);
    char v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        uint64_t v8 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::BitstreamCursor::Block const*,llvm::BitstreamCursor::Block const*,llvm::BitstreamCursor::Block*>(*(void *)a2, *(void *)a2 + 32 * v4, *(void *)a1);
        uint64_t v9 = *(void *)a1;
        char v5 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        uint64_t v9 = *(void *)a1;
        uint64_t v8 = *(void *)a1;
      }
      char v15 = v9 + 32 * v5;
      if (v15 != v8)
      {
        do
        {
          uint64_t v16 = v15 - 32;
          uint64_t v18 = (void **)(v15 - 24);
          std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v18);
          char v15 = v16;
        }
        while (v16 != v8);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if (v5)
      {
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::BitstreamCursor::Block const*,llvm::BitstreamCursor::Block const*,llvm::BitstreamCursor::Block*>(*(void *)a2, *(void *)a2 + 32 * v5, *(void *)a1);
        goto LABEL_13;
      }
    }
    else
    {
      if (v5)
      {
        unint64_t v6 = *(void *)a1 - 24;
        uint64_t v7 = 32 * v5;
        do
        {
          uint64_t v18 = (void **)(v6 + v7);
          std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v18);
          v7 -= 32;
        }
        while (v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::grow(a1, v4);
    }
    char v5 = 0;
LABEL_13:
    unsigned int v10 = *(unsigned int *)(a2 + 8);
    if (v5 != v10)
    {
      unint64_t v11 = *(void *)a2;
      unint64_t v12 = *(void *)a2 + 32 * v10;
      unsigned int v13 = *(void *)a1 + 32 * v5;
      uint64_t v14 = v11 + 32 * v5;
      do
      {
        *(_DWORD *)unsigned int v13 = *(_DWORD *)v14;
        *(void *)(v13 + 16) = 0;
        *(void *)(v13 + 24) = 0;
        *(void *)(v13 + 8) = 0;
        std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__init_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>((char *)(v13 + 8), *(void **)(v14 + 8), *(void **)(v14 + 16), (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 4);
        v14 += 32;
        v13 += 32;
      }
      while (v14 != v12);
    }
LABEL_20:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

double llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::assignRemote(char **a1, char **a2)
{
  char v4 = *a1;
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    unint64_t v6 = v4 - 24;
    uint64_t v7 = 32 * v5;
    do
    {
      uint64_t v9 = (void **)&v6[v7];
      std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v9);
      v7 -= 32;
    }
    while (v7);
    char v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2)) {
    free(v4);
  }
  *a1 = *a2;
  double result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = a1 + 16;
  char v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 32, &v6);
  llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::moveElementsForGrow((uint64_t *)a1, (uint64_t)v4);
  int v5 = v6;
  if (*(void *)a1 != v3) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::BitstreamCursor::Block *,llvm::BitstreamCursor::Block *,llvm::BitstreamCursor::Block *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_DWORD *)a4 = *(_DWORD *)v5;
    std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__vdeallocate((uint64_t *)(a4 + 8));
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(v5 + 8);
    *(void *)(a4 + 24) = *(void *)(v5 + 24);
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
    a4 += 32;
    v5 += 32;
  }
  while (v5 != v6);
  return v6;
}

void llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::moveElementsForGrow(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = *a1 + 32 * v2;
    do
    {
      *(_DWORD *)a2 = *(_DWORD *)v3;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(v3 + 8);
      *(void *)(a2 + 24) = *(void *)(v3 + 24);
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
      *(void *)(v3 + 24) = 0;
      v3 += 32;
      a2 += 32;
    }
    while (v3 != v4);
    uint64_t v5 = *((unsigned int *)a1 + 2);
    if (v5)
    {
      uint64_t v6 = *a1 - 24;
      uint64_t v7 = 32 * v5;
      do
      {
        uint64_t v8 = (void **)(v6 + v7);
        std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v8);
        v7 -= 32;
      }
      while (v7);
    }
  }
}

void anonymous namespace'::BitcodeReader::~BitcodeReader(_anonymous_namespace_::BitcodeReader *this)
{
  *(void *)this = &unk_270DC17F0;
  uint64_t v2 = (void *)*((void *)this + 234);
  if (v2)
  {
    *((void *)this + 235) = v2;
    operator delete(v2);
  }
  if (*((unsigned char *)this + 1864)) {
    std::__function::__value_func<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::~__value_func[abi:nn180100]((void *)this + 229);
  }
  uint64_t v3 = (char *)*((void *)this + 225);
  if (v3 != (char *)this + 1824) {
    free(v3);
  }
  uint64_t v35 = (void **)((char *)this + 1776);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v35);
  MEMORY[0x263E500A0](*((void *)this + 219), 8);
  MEMORY[0x263E500A0](*((void *)this + 216), 8);
  uint64_t v4 = (void *)*((void *)this + 211);
  if (v4)
  {
    *((void *)this + 212) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void **)*((void *)this + 206);
  uint64_t v6 = (void **)*((void *)this + 207);
  *((void *)this + 210) = 0;
  unint64_t v7 = (char *)v6 - (char *)v5;
  if ((unint64_t)((char *)v6 - (char *)v5) >= 0x11)
  {
    do
    {
      operator delete(*v5);
      uint64_t v5 = (void **)(*((void *)this + 206) + 8);
      *((void *)this + 206) = v5;
      uint64_t v6 = (void **)*((void *)this + 207);
      unint64_t v7 = (char *)v6 - (char *)v5;
    }
    while ((unint64_t)((char *)v6 - (char *)v5) > 0x10);
  }
  unint64_t v8 = v7 >> 3;
  if (v8 == 1)
  {
    uint64_t v9 = 256;
    goto LABEL_15;
  }
  if (v8 == 2)
  {
    uint64_t v9 = 512;
LABEL_15:
    *((void *)this + 209) = v9;
  }
  if (v5 != v6)
  {
    do
    {
      unsigned int v10 = *v5++;
      operator delete(v10);
    }
    while (v5 != v6);
    uint64_t v11 = *((void *)this + 206);
    uint64_t v12 = *((void *)this + 207);
    if (v12 != v11) {
      *((void *)this + 207) = v12 + ((v11 - v12 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  unsigned int v13 = (void *)*((void *)this + 205);
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = *((unsigned int *)this + 408);
  uint64_t v15 = *((void *)this + 202);
  if (v14)
  {
    uint64_t v16 = (void *)(v15 + 16);
    uint64_t v17 = 32 * v14;
    do
    {
      if ((*(v16 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v18 = (void *)*(v16 - 1);
        if (v18)
        {
          void *v16 = v18;
          operator delete(v18);
        }
      }
      v16 += 4;
      v17 -= 32;
    }
    while (v17);
    uint64_t v15 = *((void *)this + 202);
  }
  MEMORY[0x263E500A0](v15, 8);
  uint64_t v19 = (void *)*((void *)this + 199);
  if (v19)
  {
    *((void *)this + 200) = v19;
    operator delete(v19);
  }
  MEMORY[0x263E500A0](*((void *)this + 196), 8);
  MEMORY[0x263E500A0](*((void *)this + 192), 8);
  uint64_t v20 = (void *)*((void *)this + 189);
  if (v20)
  {
    *((void *)this + 190) = v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)*((void *)this + 186);
  if (v21)
  {
    *((void *)this + 187) = v21;
    operator delete(v21);
  }
  std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(*((void **)this + 184));
  std::string::size_type v22 = (void *)*((void *)this + 180);
  if (v22)
  {
    *((void *)this + 181) = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)*((void *)this + 177);
  if (v23)
  {
    *((void *)this + 178) = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)*((void *)this + 174);
  if (v24)
  {
    *((void *)this + 175) = v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)*((void *)this + 171);
  if (v25)
  {
    *((void *)this + 172) = v25;
    operator delete(v25);
  }
  int64_t v26 = (char *)*((void *)this + 105);
  if (v26 != (char *)this + 856) {
    free(v26);
  }
  MEMORY[0x263E500A0](*((void *)this + 102), 8);
  unsigned int v27 = (void *)*((void *)this + 99);
  if (v27)
  {
    *((void *)this + 100) = v27;
    operator delete(v27);
  }
  if (*((unsigned char *)this + 784)) {
    std::unique_ptr<llvm::MetadataLoader::MetadataLoaderImpl>::reset[abi:nn180100]((llvm::MetadataLoader::MetadataLoaderImpl **)this + 97, 0);
  }
  std::__function::__value_func<llvm::Expected<llvm::Value *> ()(unsigned int,llvm::BasicBlock *)>::~__value_func[abi:nn180100]((void *)this + 93);
  uint64_t v28 = (llvm::ValueHandleBase *)*((void *)this + 89);
  if (v28)
  {
    std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__base_destruct_at_end[abi:nn180100]((uint64_t)this + 712, v28);
    operator delete(*((void **)this + 89));
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 616);
  MEMORY[0x263E500A0](*((void *)this + 74), 8);
  MEMORY[0x263E500A0](*((void *)this + 71), 8);
  uint64_t v29 = *((unsigned int *)this + 140);
  uint64_t v30 = *((void *)this + 68);
  if (v29)
  {
    uint64_t v31 = 32 * v29;
    uint64_t v32 = (void *)(v30 + 24);
    do
    {
      if (*((_DWORD *)v32 - 6) <= 0xFFFFFFFD)
      {
        unint64_t v33 = (void *)*(v32 - 2);
        if (v32 != v33) {
          free(v33);
        }
      }
      v32 += 4;
      v31 -= 32;
    }
    while (v31);
    uint64_t v30 = *((void *)this + 68);
  }
  MEMORY[0x263E500A0](v30, 8);
  uint64_t v34 = (void *)*((void *)this + 65);
  if (v34)
  {
    *((void *)this + 66) = v34;
    operator delete(v34);
  }
  uint64_t v35 = (void **)((char *)this + 496);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v35);
  uint64_t v35 = (void **)((char *)this + 472);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v35);
  if (*((char *)this + 423) < 0) {
    operator delete(*((void **)this + 50));
  }
  llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector((char **)this + 12);
  uint64_t v35 = (void **)((char *)this + 72);
  std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v35);
  uint64_t v35 = (void **)((char *)this + 8);
  std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__destroy_vector::operator()[abi:nn180100](&v35);
}

{
  uint64_t vars8;

  JUMPOUT(0x263E500B0);
}

void anonymous namespace'::BitcodeReader::materialize(_anonymous_namespace_::BitcodeReader *this@<X0>, llvm::GlobalValue *a2@<X1>, _anonymous_namespace_::BitcodeReaderBase *a3@<X8>)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  if (!a2 || *((unsigned char *)a2 + 16) || (*((unsigned char *)a2 + 35) & 1) == 0)
  {
    *(void *)a3 = 0;
    return;
  }
  uint64_t v6 = *((void *)this + 196);
  uint64_t v7 = *((unsigned int *)this + 396);
  if (v7)
  {
    LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v9 = v6 + 16 * v8;
    unsigned int v10 = *(llvm::GlobalValue **)v9;
    if (*(llvm::GlobalValue **)v9 == a2) {
      goto LABEL_13;
    }
    int v11 = 1;
    while (v10 != (llvm::GlobalValue *)-4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & (v7 - 1);
      unsigned int v10 = *(llvm::GlobalValue **)(v6 + 16 * v8);
      if (v10 == a2)
      {
        uint64_t v9 = v6 + 16 * v8;
        goto LABEL_13;
      }
    }
  }
  uint64_t v9 = v6 + 16 * v7;
LABEL_13:
  if (!*(void *)(v9 + 8))
  {
    while (!*(void *)(v9 + 8))
    {
      llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)this + 32, *((void *)this + 55), a3);
      if (*(void *)a3) {
        return;
      }
      if (!*((_DWORD *)this + 16) && *((void *)this + 5) <= *((void *)this + 6))
      {
        unsigned int v87 = "Could not find function in stream";
LABEL_38:
        LOWORD(v91) = 259;
      }
      if (!*((unsigned char *)this + 1560))
      {
        unsigned int v87 = "Trying to materialize functions before seeing function blocks";
        goto LABEL_38;
      }
      unsigned int v87 = &v89;
      uint64_t v88 = 0x4000000000;
      llvm::BitstreamCursor::advance((_anonymous_namespace_::BitcodeReader *)((char *)this + 32), 0, (uint64_t)&v85);
      if (v86)
      {
        uint64_t v18 = v85;
        uint64_t v85 = 0;
        *(void *)a3 = v18;
      }
      else
      {
        if (v85 != 2)
        {
          uint64_t v19 = "Expect SubBlock";
          goto LABEL_41;
        }
        if (HIDWORD(v85) != 12)
        {
          uint64_t v19 = "Expect function block";
LABEL_41:
          uint64_t v83 = v19;
          __int16 v84 = 259;
        }
        if (!*(void *)a3)
        {
          *((void *)this + 55) = 8 * *((void *)this + 6) - *((unsigned int *)this + 16);
          *(void *)a3 = 0;
        }
      }
      if (v86)
      {
        uint64_t v20 = v85;
        uint64_t v85 = 0;
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
        }
      }
      if (v87 != &v89) {
        free(v87);
      }
      if (*(void *)a3) {
        return;
      }
    }
    *(void *)a3 = 0;
  }
  (*(void (**)(_anonymous_namespace_::BitcodeReader *))(*(void *)this + 32))(this);
  if (!*(void *)a3)
  {
    llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)this + 32, *(void *)(v9 + 8), a3);
    if (!*(void *)a3)
    {
      if (!*(void *)a3)
      {
        *((_DWORD *)a2 + 8) &= ~0x1000000u;
        if (*((unsigned char *)this + 1714)) {
          llvm::stripDebugInfo(a2, v13);
        }
        if (*((_DWORD *)this + 386))
        {
          uint64_t v15 = *((unsigned int *)this + 388);
          if (v15)
          {
            uint64_t v16 = 16 * v15;
            uint64_t v17 = (uint64_t *)*((void *)this + 192);
            while ((*v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v17 += 2;
              v16 -= 16;
              if (!v16) {
                goto LABEL_61;
              }
            }
          }
          else
          {
            uint64_t v17 = (uint64_t *)*((void *)this + 192);
          }
          uint64_t v21 = *((void *)this + 192) + 16 * v15;
          if (v17 != (uint64_t *)v21)
          {
            uint64_t v22 = *v17;
LABEL_53:
            uint64_t v23 = *(void *)(v22 + 8);
            while (v23)
            {
              uint64_t v24 = *(llvm **)(v23 + 24);
              uint64_t v23 = *(void *)(v23 + 8);
              if (v24 && *((unsigned char *)v24 + 16) == 84) {
                llvm::UpgradeIntrinsicCall(v24, (llvm::CallBase *)v17[1], v14);
              }
            }
            while (1)
            {
              v17 += 2;
              if (v17 == (uint64_t *)v21) {
                break;
              }
              uint64_t v22 = *v17;
              if ((*v17 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if (v17 != (uint64_t *)v21) {
                  goto LABEL_53;
                }
                break;
              }
            }
          }
        }
LABEL_61:
        uint64_t v25 = (llvm::MDNode *)llvm::MetadataLoader::lookupSubprogramForFunction((_anonymous_namespace_::BitcodeReader *)((char *)this + 776), a2);
        if (v25) {
          llvm::Value::setMetadata((uint64_t)a2, 0, v25);
        }
        if (!*(unsigned char *)(*((void *)this + 97) + 1040))
        {
          llvm::instructions((char **)&v87, (Function *)a2);
          unsigned int v27 = (void *)v88;
          uint64_t v28 = v89;
          char v80 = v92;
          BOOL v29 = v91 == v87 || v89 == v92;
          BOOL v30 = !v29;
          long long v81 = v91;
          uint64_t v82 = v87;
          if ((void *)v88 != v91 || v30)
          {
            do
            {
              if (v28) {
                unint64_t v45 = (llvm::Value *)(v28 - 3);
              }
              else {
                unint64_t v45 = 0;
              }
              if (*((void *)v45 + 6) || (*((unsigned char *)v45 + 23) & 0x20) != 0)
              {
                Metadata = (const llvm::MDNode *)llvm::Value::getMetadata(v45, 1);
                if (Metadata)
                {
                  if ((llvm::TBAAVerifier::visitTBAAMetadata((llvm::raw_ostream ***)this + 215, (llvm::Type **)v45, Metadata) & 1) == 0)
                  {
                    *(unsigned char *)(*((void *)this + 97) + 1040) = 1;
                    uint64_t v34 = *((void *)a2 + 5);
                    uint64_t v35 = v34 + 24;
                    for (uint64_t i = *(void *)(v34 + 32); i != v35; uint64_t i = *(void *)(i + 8))
                    {
                      uint64_t v37 = i - 56;
                      if (!i) {
                        uint64_t v37 = 0;
                      }
                      if ((*(unsigned char *)(v37 + 35) & 1) == 0)
                      {
                        uint64_t v38 = v37 + 72;
                        for (uint64_t j = *(void *)(v37 + 80); j != v38; uint64_t j = *(void *)(j + 8))
                        {
                          uint64_t v40 = j - 24;
                          if (!j) {
                            uint64_t v40 = 0;
                          }
                          uint64_t v41 = *(void *)(v40 + 48);
                          if (v41 != v40 + 40)
                          {
LABEL_104:
                            while (j != v38)
                            {
                              if (v41) {
                                uint64_t v42 = v41 - 24;
                              }
                              else {
                                uint64_t v42 = 0;
                              }
                              if (*(void *)(v42 + 48) || (*(unsigned char *)(v42 + 23) & 0x20) != 0) {
                                llvm::Value::setMetadata(v42, 1, 0);
                              }
                              uint64_t v41 = *(void *)(v41 + 8);
                              uint64_t v43 = j - 24;
                              if (!j) {
                                uint64_t v43 = 0;
                              }
                              if (v41 == v43 + 40)
                              {
                                while (1)
                                {
                                  uint64_t j = *(void *)(j + 8);
                                  if (j == v38) {
                                    goto LABEL_105;
                                  }
                                  uint64_t v44 = j - 24;
                                  if (!j) {
                                    uint64_t v44 = 0;
                                  }
                                  uint64_t v41 = *(void *)(v44 + 48);
                                  if (v41 != v44 + 40) {
                                    goto LABEL_104;
                                  }
                                }
                              }
                            }
                            break;
                          }
                        }
                      }
LABEL_105:
                      ;
                    }
                  }
                }
              }
              uint64_t v28 = (void *)v28[1];
              uint64_t v47 = v27 - 3;
              if (!v27) {
                uint64_t v47 = 0;
              }
              if (v28 == v47 + 5)
              {
                uint64_t v31 = (void *)v27[1];
                uint64_t v32 = v82;
                unsigned int v27 = v82;
                if (v31 != v82)
                {
                  unsigned int v27 = v31;
                  while (1)
                  {
                    unint64_t v33 = v27 - 3;
                    if (!v27) {
                      unint64_t v33 = 0;
                    }
                    uint64_t v28 = (void *)v33[6];
                    if (v28 != v33 + 5) {
                      break;
                    }
                    unsigned int v27 = (void *)v27[1];
                    if (v27 == v82)
                    {
                      unsigned int v27 = v82;
                      break;
                    }
                  }
                }
              }
              else
              {
                uint64_t v32 = v82;
              }
              BOOL v49 = v81 != v32 && v28 != v80;
            }
            while (v27 != v81 || v49);
          }
        }
        long long v50 = (char *)a2 + 72;
        for (int k = (char *)*((void *)a2 + 10); ; int k = (char *)*((void *)k + 1))
        {
          if (k == v50) {
            goto LABEL_190;
          }
          long long v52 = k - 24;
          if (!k) {
            long long v52 = 0;
          }
          unsigned int v53 = (char *)*((void *)v52 + 6);
          if (v53 != v52 + 40) {
            break;
          }
        }
        if (k == v50)
        {
LABEL_190:
          llvm::UpgradeFunctionAttributes(a2, v26);
          return;
        }
        while (1)
        {
          if (v53) {
            uint64_t v54 = (uint64_t)(v53 - 24);
          }
          else {
            uint64_t v54 = 0;
          }
          if (*(void *)(v54 + 48) || (*(unsigned char *)(v54 + 23) & 0x20) != 0)
          {
            uint64_t v55 = llvm::Value::getMetadata((llvm::Value *)v54, 2);
            if (v55)
            {
              unint64_t v56 = *(void *)(v55 - 16);
              uint64_t v57 = (v56 & 2) != 0 ? *(uint64_t **)(v55 - 32) : (uint64_t *)(v55 - 16 - 8 * ((v56 >> 2) & 0xF));
              uint64_t v58 = *v57;
              if (v58)
              {
                if (!*(unsigned char *)v58)
                {
                  long long v73 = *(void **)(v58 + 8);
                  if (*v73 != 14) {
                    goto LABEL_150;
                  }
                  uint64_t v74 = v73[3];
                  uint64_t v75 = *(void *)((char *)v73 + 30);
                  if (v74 != 0x775F68636E617262 || v75 != 0x737468676965775FLL) {
                    goto LABEL_150;
                  }
                  int v77 = *(unsigned __int8 *)(v54 + 16);
                  if (v53 && v77 == 30)
                  {
                    if ((*(_DWORD *)(v54 + 20) & 0x7FFFFFF) == 3) {
                      int v78 = 2;
                    }
                    else {
                      int v78 = 1;
                    }
                  }
                  else if (v53 && v77 == 31)
                  {
                    int v78 = (*(_DWORD *)(v54 + 20) >> 1) & 0x3FFFFFF;
                  }
                  else if (v77 == 84)
                  {
                    int v78 = 1;
                  }
                  else if (v53 && v77 == 32)
                  {
                    int v78 = (*(_DWORD *)(v54 + 20) & 0x7FFFFFF) - 1;
                  }
                  else
                  {
                    if (v77 != 85) {
                      goto LABEL_150;
                    }
                    int v78 = 2;
                  }
                  if ((v56 & 2) != 0) {
                    unsigned int v79 = *(_DWORD *)(v55 - 24);
                  }
                  else {
                    unsigned int v79 = (v56 >> 6) & 0xF;
                  }
                  if (v79 != v78 + 1 && (*(void *)(v54 + 48) || (*(unsigned char *)(v54 + 23) & 0x20) != 0)) {
                    llvm::Value::setMetadata(v54, 2, 0);
                  }
                }
              }
            }
          }
          unsigned int v59 = *(unsigned __int8 *)(v54 + 16) - 33;
          BOOL v60 = v59 > 0x33;
          uint64_t v61 = (1 << v59) & 0x8000000000041;
          if (!v60 && v61 != 0)
          {
            llvm::AttributeFuncs::typeIncompatible(**(void **)(*(void *)(v54 + 72) + 16), 3, (uint64_t *)&v87);
            *(void *)(v54 + 64) = llvm::AttributeList::removeAttributesAtIndex((void *)(v54 + 64), **(uint64_t ***)v54, 0, (uint64_t)&v87);
            std::__tree<llvm::SmallString<32u>>::destroy((uint64_t)&v89, v90);
            uint64_t v63 = llvm::CallBase::arg_end((llvm::CallBase *)v54);
            uint64_t v64 = *(_DWORD *)(v54 + 20) & 0x7FFFFFF;
            if (((v63 - v54 + 32 * v64) & 0x1FFFFFFFE0) != 0)
            {
              unint64_t v65 = 0;
              uint64_t v66 = -v64;
              uint64_t v67 = v54;
              do
              {
                llvm::AttributeFuncs::typeIncompatible(**(void **)(v67 + 32 * v66), 3, (uint64_t *)&v87);
                *(void *)(v54 + 64) = llvm::AttributeList::removeAttributesAtIndex((void *)(v54 + 64), **(uint64_t ***)v54, ++v65, (uint64_t)&v87);
                std::__tree<llvm::SmallString<32u>>::destroy((uint64_t)&v89, v90);
                uint64_t v68 = llvm::CallBase::arg_end((llvm::CallBase *)v54);
                uint64_t v69 = *(_DWORD *)(v54 + 20) & 0x7FFFFFF;
                uint64_t v66 = -v69;
                v67 += 32;
              }
              while (v65 < ((unint64_t)(v68 - v54 + 32 * v69) >> 5));
            }
          }
LABEL_150:
          unsigned int v53 = (char *)*((void *)v53 + 1);
          long long v70 = k - 24;
          if (!k) {
            long long v70 = 0;
          }
          if (v53 == v70 + 40)
          {
            int k = (char *)*((void *)k + 1);
            long long v71 = (char *)a2 + 72;
            while (k != (char *)a2 + 72)
            {
              uint64_t v72 = k - 24;
              if (!k) {
                uint64_t v72 = 0;
              }
              unsigned int v53 = (char *)*((void *)v72 + 6);
              if (v53 != v72 + 40) {
                goto LABEL_154;
              }
              int k = (char *)*((void *)k + 1);
            }
            goto LABEL_190;
          }
          long long v71 = (char *)a2 + 72;
LABEL_154:
          if (k == v71) {
            goto LABEL_190;
          }
        }
      }
    }
  }
}

void anonymous namespace'::BitcodeReader::materializeModule(_anonymous_namespace_::BitcodeReader *this@<X0>, void ***a2@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  (*(void (**)(void ***__return_ptr))(*(void *)this + 32))(a2);
  if (!*a2)
  {
    *((unsigned char *)this + 1713) = 1;
    uint64_t v7 = *((void *)this + 54);
    uint64_t v8 = v7 + 24;
    for (uint64_t i = *(void *)(v7 + 32); i != v8; uint64_t i = *(void *)(i + 8))
    {
      if (i) {
        uint64_t v10 = i - 56;
      }
      else {
        uint64_t v10 = 0;
      }
      (*(void (**)(_anonymous_namespace_::BitcodeReader *, uint64_t))(*(void *)this + 16))(this, v10);
      if (*a2) {
        return;
      }
    }
    unint64_t v12 = *((void *)this + 55);
    unint64_t v11 = *((void *)this + 56);
    if (*(_OWORD *)((char *)this + 440) == 0) {
      goto LABEL_69;
    }
    uint64_t v42 = 0;
    if (v11 <= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v11;
    }
    memset(v41, 0, sizeof(v41));
    long long v40 = 0u;
    memset(v39, 0, sizeof(v39));
    if ((_BYTE)v42) {
      std::__function::__value_func<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::~__value_func[abi:nn180100](v41);
    }
    if (BYTE8(v40)) {
      std::__function::__value_func<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::~__value_func[abi:nn180100]((void *)&v39[2] + 1);
    }
    if (LOBYTE(v39[2])) {
      std::__function::__value_func<std::optional<std::string> ()(llvm::StringRef,llvm::StringRef)>::~__value_func[abi:nn180100](v39);
    }
    if (!*a2)
    {
LABEL_69:
      if (*((_DWORD *)this + 406))
      {
        uint64_t v37 = "Never resolved function from blockaddress";
        __int16 v38 = 259;
      }
      if (*((_DWORD *)this + 386))
      {
        uint64_t v14 = *((unsigned int *)this + 388);
        if (v14)
        {
          uint64_t v15 = 16 * v14;
          uint64_t v16 = (llvm::CallBase **)*((void *)this + 192);
          while (((unint64_t)*v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v16 += 2;
            v15 -= 16;
            if (!v15) {
              goto LABEL_43;
            }
          }
        }
        else
        {
          uint64_t v16 = (llvm::CallBase **)*((void *)this + 192);
        }
        uint64_t v17 = *((void *)this + 192) + 16 * v14;
        if (v16 != (llvm::CallBase **)v17)
        {
          uint64_t v18 = *v16;
LABEL_32:
          uint64_t v19 = *((void *)v18 + 1);
          if (v19)
          {
            do
            {
              uint64_t v20 = *(llvm **)(v19 + 24);
              if (v20 && *((unsigned char *)v20 + 16) == 84) {
                llvm::UpgradeIntrinsicCall(v20, v16[1], v5);
              }
              uint64_t v19 = *(void *)(v19 + 8);
            }
            while (v19);
            uint64_t v18 = *v16;
            if (*((void *)*v16 + 1))
            {
              llvm::Value::doRAUW(v18, v16[1], (llvm::Value *)1, v6);
              uint64_t v18 = *v16;
            }
          }
          llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::erase(*((void *)v18 + 5) + 24, (uint64_t)v18 + 56);
          while (1)
          {
            v16 += 2;
            if (v16 == (llvm::CallBase **)v17) {
              break;
            }
            uint64_t v18 = *v16;
            if (((unint64_t)*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              if (v16 != (llvm::CallBase **)v17) {
                goto LABEL_32;
              }
              break;
            }
          }
        }
      }
LABEL_43:
      uint64_t v21 = (void *)((char *)this + 1536);
      int v22 = *((_DWORD *)this + 386);
      if (v22)
      {
        unsigned int v23 = *((_DWORD *)this + 388);
        if (v23 > 4 * v22 && v23 >= 0x41)
        {
          int v24 = 1 << (33 - __clz(v22 - 1));
          if (v24 <= 64) {
            int v25 = 64;
          }
          else {
            int v25 = v24;
          }
LABEL_52:
          if (v25 == v23)
          {
            *((void *)this + 193) = 0;
            int64_t v26 = (void *)*((void *)this + 192);
            uint64_t v27 = 16 * v23;
            do
            {
              *int64_t v26 = -4096;
              v26 += 2;
              v27 -= 16;
            }
            while (v27);
          }
          else
          {
            MEMORY[0x263E500A0](*v21, 8);
            if (v25)
            {
              unint64_t v32 = (4 * v25 / 3u + 1) | ((unint64_t)(4 * v25 / 3u + 1) >> 1);
              unint64_t v33 = v32 | (v32 >> 2) | ((v32 | (v32 >> 2)) >> 4);
              LODWORD(v33) = (((v33 | (v33 >> 8)) >> 16) | v33 | (v33 >> 8)) + 1;
              *((_DWORD *)this + 388) = v33;
              uint64_t v34 = operator new(16 * v33, (std::align_val_t)8uLL);
              *((void *)this + 192) = v34;
              *((void *)this + 193) = 0;
              uint64_t v35 = *((unsigned int *)this + 388);
              if (v35)
              {
                uint64_t v36 = 16 * v35;
                do
                {
                  void *v34 = -4096;
                  v34 += 2;
                  v36 -= 16;
                }
                while (v36);
              }
            }
            else
            {
              *uint64_t v21 = 0;
              *((void *)this + 193) = 0;
              *((_DWORD *)this + 388) = 0;
            }
          }
          goto LABEL_60;
        }
      }
      else
      {
        if (!*((_DWORD *)this + 387))
        {
LABEL_60:
          llvm::UpgradeDebugInfo(*((llvm **)this + 54), v4);
          llvm::UpgradeModuleFlags(*((llvm **)this + 54), v30);
          llvm::UpgradeARCRuntime(*((uint64_t ***)this + 54), v31);
          *a2 = 0;
          return;
        }
        unsigned int v23 = *((_DWORD *)this + 388);
        if (v23 > 0x40)
        {
          int v25 = 0;
          goto LABEL_52;
        }
      }
      if (v23)
      {
        uint64_t v28 = (void *)*v21;
        uint64_t v29 = 16 * v23;
        do
        {
          *uint64_t v28 = -4096;
          v28 += 2;
          v29 -= 16;
        }
        while (v29);
      }
      *((void *)this + 193) = 0;
      goto LABEL_60;
    }
  }
}

void anonymous namespace'::BitcodeReader::materializeMetadata(_anonymous_namespace_::BitcodeReader *this@<X0>, const llvm::Twine *a2@<X8>)
{
  uint64_t v4 = (unint64_t *)*((void *)this + 199);
  uint64_t v5 = (unint64_t *)*((void *)this + 200);
  if (v4 == v5)
  {
LABEL_5:
    __n128 v6 = (llvm::Module *)*((void *)this + 54);
    v15[0] = (uint64_t)"llvm.linker.options";
    __int16 v16 = 259;
    if (llvm::Module::getNamedMetadata(v6, (const llvm::Twine *)v15)) {
      goto LABEL_6;
    }
    uint64_t ModuleFlag = llvm::Module::getModuleFlag(*((llvm::Module **)this + 54), "Linker Options", 0xEuLL);
    if (!ModuleFlag) {
      goto LABEL_6;
    }
    uint64_t v8 = ModuleFlag;
    unint64_t inserted = llvm::Module::getOrInsertNamedMetadata(*((void *)this + 54), (uint64_t *)"llvm.linker.options", 0x13uLL);
    unint64_t v10 = *(void *)(v8 - 16);
    if ((v10 & 2) != 0)
    {
      unint64_t v11 = *(uint64_t **)(v8 - 32);
      uint64_t v12 = *(unsigned int *)(v8 - 24);
      if (!*(_DWORD *)(v8 - 24))
      {
LABEL_6:
        *((void *)this + 200) = *((void *)this + 199);
        *(void *)a2 = 0;
        return;
      }
    }
    else
    {
      unint64_t v11 = (uint64_t *)(v8 - 16 - 8 * ((v10 >> 2) & 0xF));
      uint64_t v12 = (v10 >> 6) & 0xF;
      if (!v12) {
        goto LABEL_6;
      }
    }
    uint64_t v13 = 8 * v12;
    do
    {
      uint64_t v14 = *v11++;
      v15[0] = v14;
      llvm::SmallVectorImpl<llvm::TrackingMDRef>::emplace_back<llvm::MDNode *&>(*(void *)(inserted + 48), v15);
      v13 -= 8;
    }
    while (v13);
    goto LABEL_6;
  }
  while (1)
  {
    llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)this + 32, *v4, a2);
    if (*(void *)a2) {
      break;
    }
    llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(*((llvm::MetadataLoader::MetadataLoaderImpl **)this + 97), 1, a2);
    if (*(void *)a2) {
      break;
    }
    if (++v4 == v5) {
      goto LABEL_5;
    }
  }
}

uint64_t anonymous namespace'::BitcodeReader::setStripDebugInfo(uint64_t this)
{
  *(unsigned char *)(this + 1714) = 1;
  return this;
}

void *anonymous namespace'::BitcodeReader::getIdentifiedStructTypes@<X0>(void *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = (unsigned char *)this[234];
  uint64_t v4 = (unsigned char *)this[235];
  int64_t v5 = v4 - v3;
  if (v4 != v3)
  {
    std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](a2, v5 >> 3);
    __n128 v6 = (char *)a2[1];
    this = memmove(v6, v3, v5);
    a2[1] = &v6[v5];
  }
  return this;
}

void std::__function::__func<anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0,std::allocator<anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0>,llvm::Expected<llvm::Value *> ()(unsigned int,llvm::BasicBlock *)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0,std::allocator<anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0>,llvm::Expected<llvm::Value *> ()(unsigned int,llvm::BasicBlock *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_270DC1838;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0,std::allocator<anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0>,llvm::Expected<llvm::Value *> ()(unsigned int,llvm::BasicBlock *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270DC1838;
  a2[1] = v2;
  return result;
}

void std::__function::__func<anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0,std::allocator<anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0>,llvm::Expected<llvm::Value *> ()(unsigned int,llvm::BasicBlock *)>::operator()(uint64_t a1@<X0>, unsigned int *a2@<X1>, const llvm::Twine **a3@<X2>, _anonymous_namespace_::BitcodeReader *a4@<X8>)
{
}

void anonymous namespace'::BitcodeReader::materializeValue(_anonymous_namespace_::BitcodeReader *this, void *a2, llvm::BasicBlock *a3, const llvm::Twine *a4)
{
  int64_t v5 = this;
  uint64_t v150 = *MEMORY[0x263EF8340];
  int v133 = (int)a3;
  uint64_t v6 = a2[89];
  if (((unint64_t)(a2[90] - v6) >> 5) > a3)
  {
    uint64_t v7 = *(void *)(v6 + 32 * a3 + 16);
    if (v7)
    {
      if (*(unsigned __int8 *)(v7 + 16) != 255)
      {
        *((unsigned char *)this + 8) &= ~1u;
        *(void *)this = v7;
        return;
      }
    }
  }
  uint64_t v147 = 1;
  for (uint64_t i = 8; i != 72; i += 16)
    *(_DWORD *)((char *)&v147 + i) = -1;
  long long v144 = v146;
  uint64_t v145 = 0xC00000000;
  int v122 = (int)a3;
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v144, (int)a3);
  unsigned int v9 = v145;
  if (v145)
  {
    unsigned int v121 = (llvm::Twine *)(a2 + 1);
    unint64_t v119 = (uint64_t *)((char *)a4 + 40);
    do
    {
      while (1)
      {
        unint64_t v10 = (char *)v144 + 4 * v9;
        uint64_t v11 = *((unsigned int *)v10 - 1);
        if ((llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::LookupBucketFor<unsigned int>((uint64_t)&v147, *((_DWORD *)v10 - 1), &v134) & 1) == 0)break; {
LABEL_14:
        }
        LODWORD(v145) = --v9;
        if (!v9) {
          goto LABEL_172;
        }
      }
      uint64_t v17 = a2[89];
      if (v11 >= ((unint64_t)(a2[90] - v17) >> 5)
        || (uint64_t v18 = *(uint64_t ****)(v17 + 32 * v11 + 16)) == 0)
      {
        uint64_t v134 = "Invalid value ID";
        __int16 v137 = 259;
      }
      if (*((unsigned __int8 *)v18 + 16) != 255)
      {
        LODWORD(v141) = v11;
        uint64_t v142 = (uint64_t)v18;
        llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::try_emplace<llvm::Value *>((uint64_t)&v134, (uint64_t)&v147, (int *)&v141, &v142);
        unsigned int v9 = v145;
        goto LABEL_14;
      }
      long long v141 = v143;
      uint64_t v142 = 0x600000000;
      uint64_t v19 = *((unsigned int *)v18 + 7);
      if (v19)
      {
        uint64_t v20 = 4 * v19;
        do
        {
          int v21 = *(_DWORD *)((char *)v18 + v20 + 44);
          uint64_t v134 = 0;
          int v22 = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::LookupBucketFor<unsigned int>((uint64_t)&v147, v21, &v134);
          if (v147) {
            unsigned int v23 = &v150;
          }
          else {
            unsigned int v23 = (uint64_t *)(v148 + 16 * v149);
          }
          if (v22) {
            BOOL v24 = v134 == v23;
          }
          else {
            BOOL v24 = 1;
          }
          if (v24)
          {
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v144, v21);
          }
          else
          {
            if (v147) {
              int v25 = &v151;
            }
            else {
              int v25 = (uint64_t *)(v148 + 16 * v149 + 8);
            }
            if (v22) {
              int v25 = (uint64_t *)((char *)v134 + 8);
            }
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v141, *v25);
          }
          v20 -= 4;
        }
        while (v20);
        uint64_t v26 = v142;
        uint64_t v27 = (llvm::GlobalValue **)v141;
        if (v142 != *((_DWORD *)v18 + 7))
        {
          int v44 = 2;
          goto LABEL_94;
        }
        if (v142)
        {
          uint64_t v28 = (char *)v141 + 8 * v142 - 8;
          if (v28 > v141)
          {
            uint64_t v29 = (char *)v141 + 8;
            do
            {
              uint64_t v30 = *((void *)v29 - 1);
              *((void *)v29 - 1) = *(void *)v28;
              *(void *)uint64_t v28 = v30;
              v28 -= 8;
              BOOL v31 = v29 >= v28;
              v29 += 8;
            }
            while (!v31);
            uint64_t v27 = (llvm::GlobalValue **)v141;
          }
        }
        int v138 = v140;
        uint64_t v139 = 0x600000000;
        if (v26)
        {
          uint64_t v32 = 8 * v26;
          do
          {
            uint64_t v12 = *v27;
            if (*v27) {
              BOOL v33 = *((unsigned __int8 *)*v27 + 16) > 0x14u;
            }
            else {
              BOOL v33 = 1;
            }
            if (!v33) {
              llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v138, (uint64_t)v12);
            }
            ++v27;
            v32 -= 8;
          }
          while (v32);
        }
      }
      else
      {
        int v138 = v140;
        uint64_t v139 = 0x600000000;
      }
      unsigned int v34 = *((unsigned __int8 *)v18 + 24);
      if (v34 <= 0xF9)
      {
        if (byte_26B41C410) {
          goto LABEL_57;
        }
        if (v34 - 13 > 0x11)
        {
          switch(v34)
          {
            case 0xCu:
              goto LABEL_57;
            case 0x39u:
              goto LABEL_57;
            case 0x22u:
              BOOL v60 = (uint64_t *)v18[5];
              int v61 = *((unsigned __int8 *)v60 + 8);
              if (v61 == 19) {
                goto LABEL_57;
              }
              if (v61 == 21)
              {
                v16.n128_f64[0] = getTargetTypeInfo(v60);
                if (*(unsigned char *)(v62 + 8) == 19) {
                  goto LABEL_57;
                }
              }
              break;
          }
        }
        else if (((1 << v34) & 0x1FD4000) != 0)
        {
          goto LABEL_57;
        }
      }
      uint64_t v35 = (llvm::BasicBlock *)v139;
      if (v139 == v142)
      {
        uint64_t v36 = (llvm::ConstantExpr *)*((unsigned __int8 *)v18 + 24);
        if ((v36 - 38) > 0xC)
        {
          if ((v36 - 13) > 0x11)
          {
            switch(*((unsigned char *)v18 + 24))
            {
              case 0xFA:
                if (*(unsigned char *)(*(void *)v138 + 16)) {
                  uint64_t v63 = 0;
                }
                else {
                  uint64_t v63 = *(llvm::BlockAddress **)v138;
                }
                __src = v63;
                if (!v63)
                {
                  uint64_t v134 = "blockaddress operand must be a function";
                  __int16 v137 = 259;
                }
                uint64_t v64 = *((unsigned int *)v18 + 8);
                if (!v64)
                {
                  uint64_t v134 = "Invalid ID";
                  __int16 v137 = 259;
                }
                if (*((llvm::BlockAddress **)v63 + 9) == (llvm::BlockAddress *)((char *)v63 + 72))
                {
                  unsigned int v107 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::FindAndConstruct((uint64_t)(a2 + 202), (uint64_t *)&__src);
                  uint64_t v109 = v107 + 1;
                  uint64_t v108 = v107[1];
                  uint64_t v110 = v107[2];
                  if (v108 == v110)
                  {
                    uint64_t v111 = v107;
                    std::deque<llvm::jitlink::Block *>::push_back(a2 + 205, &__src);
                    uint64_t v108 = v111[1];
                    uint64_t v110 = v111[2];
                  }
                  unint64_t v112 = (v64 + 1);
                  if (v112 > (v110 - v108) >> 3)
                  {
                    std::vector<llvm::BasicBlock *>::resize(v109, v112);
                    uint64_t v108 = *v109;
                  }
                  uint64_t v66 = *(llvm::Function **)(v108 + 8 * v64);
                  if (!v66)
                  {
                    __int16 v137 = 257;
                    llvm::BasicBlock::Create();
                  }
                }
                else
                {
                  unint64_t v65 = (void *)*((void *)v63 + 10);
                  do
                  {
                    if (v65 == (void *)((char *)v63 + 72))
                    {
                      uint64_t v134 = "Invalid ID";
                      __int16 v137 = 259;
                    }
                    unint64_t v65 = (void *)v65[1];
                    --v64;
                  }
                  while (v64);
                  if (v65) {
                    uint64_t v66 = (llvm::Function *)(v65 - 3);
                  }
                  else {
                    uint64_t v66 = 0;
                  }
                }
                uint64_t Compare = (uint64_t)llvm::BlockAddress::get(v63, v66, v35);
                break;
              case 0xFB:
                int v78 = *(unsigned __int8 **)v138;
                if (!*(void *)v138 || v78[16] >= 4u)
                {
                  uint64_t v134 = "dso_local operand must be GlobalValue";
                  __int16 v137 = 259;
                }
                uint64_t Compare = llvm::DSOLocalEquivalent::get((llvm::DSOLocalEquivalent *)v78, v12);
                break;
              case 0xFC:
                unsigned int v79 = *(unsigned __int8 **)v138;
                if (!*(void *)v138 || v79[16] >= 4u)
                {
                  uint64_t v134 = "no_cfi operand must be GlobalValue";
                  __int16 v137 = 259;
                }
                uint64_t Compare = llvm::NoCFIValue::get((llvm::NoCFIValue *)v79, v12);
                break;
              case 0xFD:
                uint64_t Compare = (uint64_t)llvm::ConstantVector::get((uint64_t ****)v138, (llvm::Type *)v139);
                break;
              case 0xFE:
                uint64_t Compare = (uint64_t)llvm::ConstantArray::get((llvm::PoisonValue *)*v18, (llvm::Type *)v138, (unint64_t *)v139);
                break;
              case 0xFF:
                uint64_t Compare = (uint64_t)llvm::ConstantStruct::get((llvm::ConstantAggregateZero *)*v18, (llvm::Constant **)v138, (unint64_t *)v139);
                break;
              default:
                switch(*((unsigned char *)v18 + 24))
                {
                  case '5':
                  case '6':
                    uint64_t Compare = (uint64_t)llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)*((unsigned __int8 *)v18 + 25), *(uint64_t ****)v138, *((llvm::Constant **)v138 + 1), 0);
                    goto LABEL_72;
                  case '7':
                  case '8':
                  case '9':
                  case ':':
                  case ';':
                  case '<':
                    goto LABEL_182;
                  case '=':
                    uint64_t Compare = (uint64_t)llvm::ConstantExpr::getExtractElement(*(llvm::ConstantExpr **)v138, *((llvm::Constant **)v138 + 1), 0, v13, v16);
                    goto LABEL_72;
                  case '>':
                    uint64_t Compare = (uint64_t)llvm::ConstantExpr::getInsertElement(*(llvm::ConstantExpr **)v138, *((llvm::Constant **)v138 + 1), *((llvm::Constant **)v138 + 2), 0, v14);
                    goto LABEL_72;
                  case '?':
                    uint64_t v134 = v136;
                    uint64_t v135 = 0x1000000000;
                    llvm::ShuffleVectorInst::getShuffleMask(*((unsigned int **)v138 + 2), (unsigned int *)&v134);
                    uint64_t ShuffleVector = (uint64_t)llvm::ConstantExpr::getShuffleVector(*(llvm::ConstantExpr **)v138, *((llvm::ConstantExpr **)v138 + 1), (int *)v134, v135, 0);
                    if (v134 != v136) {
                      free(v134);
                    }
                    goto LABEL_73;
                  default:
                    LODWORD(v80) = *((_DWORD *)v18 + 8);
                    uint64_t v81 = v80 != -1;
                    if (v80 == -1) {
                      uint64_t v80 = 0;
                    }
                    else {
                      uint64_t v80 = v80;
                    }
                    uint64_t Compare = llvm::ConstantExpr::getGetElementPtr((llvm::GetElementPtrInst *)v18[5], *(uint64_t **)v138, (llvm::Value *)((char *)v138 + 8), v139 - 1, *((unsigned char *)v18 + 25) != 0, v80 | (v81 << 32), 0);
                    goto LABEL_72;
                }
            }
          }
          else
          {
            uint64_t Compare = (uint64_t)llvm::ConstantExpr::get(v36, *(llvm::PoisonValue ***)v138, *((llvm::Constant **)v138 + 1), (llvm::Constant *)*((unsigned __int8 *)v18 + 25), 0, v15);
          }
LABEL_72:
          uint64_t ShuffleVector = Compare;
        }
        else
        {
          uint64_t ShuffleVector = (uint64_t)llvm::UpgradeBitCastExpr(v36, *(void ***)v138, (llvm::Constant *)*v18, v13);
          if (!ShuffleVector)
          {
            uint64_t Compare = (uint64_t)llvm::ConstantExpr::getCast((llvm::ConstantExpr *)*((unsigned __int8 *)v18 + 24), *(llvm::ConstantExpr **)v138, (llvm::Constant ***)*v18, 0, v38);
            goto LABEL_72;
          }
        }
LABEL_73:
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2[89] + 32 * v11), ShuffleVector);
        LODWORD(__src) = v11;
        int v126 = (llvm::Value *)ShuffleVector;
        llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::try_emplace<llvm::Value *>((uint64_t)&v134, (uint64_t)&v147, (int *)&__src, &v126);
        LODWORD(v145) = v145 - 1;
        int v44 = 2;
        goto LABEL_91;
      }
LABEL_57:
      if (!a4)
      {
        OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)*((unsigned __int8 *)v18 + 24));
        if (*OpcodeName)
        {
          uint64_t v134 = "Value referenced by initializer is an unsupported constant expression of type ";
          v136[0] = OpcodeName;
          char v46 = 3;
        }
        else
        {
          uint64_t v134 = "Value referenced by initializer is an unsupported constant expression of type ";
          char v46 = 1;
        }
        LOBYTE(v137) = 3;
        HIBYTE(v137) = v46;
      }
      int v120 = v5;
      int v40 = *((unsigned __int8 *)v18 + 24);
      if ((v40 - 38) > 0xC)
      {
        if (v40 != 12)
        {
          if ((v40 - 13) > 0x11)
          {
            if (*((unsigned __int8 *)v18 + 24) <= 0xFCu)
            {
              switch(*((unsigned char *)v18 + 24))
              {
                case '5':
                case '6':
                  __int16 v67 = *((unsigned __int8 *)v18 + 25);
                  uint64_t v68 = *(llvm::CmpInst ***)v141;
                  uint64_t v69 = *((void *)v141 + 1);
                  uint64_t v134 = "constexpr";
                  __int16 v137 = 259;
                  uint64_t v43 = llvm::CmpInst::Create(v40, v67, v68, v69, (const llvm::Twine *)&v134, (uint64_t)a4);
                  goto LABEL_65;
                case '7':
                case '8':
                case ':':
                case ';':
                case '<':
LABEL_182:
                  __break(1u);
                  JUMPOUT(0x261D5FB90);
                case '9':
                  __int16 v84 = *(llvm::SelectInst **)v141;
                  uint64_t v85 = (llvm::Value *)*((void *)v141 + 1);
                  char v86 = (llvm::Value *)*((void *)v141 + 2);
                  uint64_t v134 = "constexpr";
                  __int16 v137 = 259;
                  uint64_t v43 = (uint64_t)llvm::SelectInst::Create(v84, v85, v86, (llvm::Value *)&v134, a4, v15);
                  goto LABEL_65;
                case '=':
                  unsigned int v87 = *(llvm::ExtractElementInst **)v141;
                  uint64_t v88 = (llvm::Value *)*((void *)v141 + 1);
                  uint64_t v134 = "constexpr";
                  __int16 v137 = 259;
                  uint64_t v43 = (uint64_t)llvm::ExtractElementInst::Create(v87, v88, (llvm::Value *)&v134, a4, v14);
                  goto LABEL_65;
                case '>':
                  uint64_t v89 = *(llvm::InsertElementInst **)v141;
                  uint64_t v90 = (llvm::Value *)*((void *)v141 + 1);
                  uint64_t v91 = (llvm::Value *)*((void *)v141 + 2);
                  uint64_t v134 = "constexpr";
                  __int16 v137 = 259;
                  uint64_t v43 = (uint64_t)llvm::InsertElementInst::Create(v89, v90, v91, (llvm::Value *)&v134, a4, v15);
                  goto LABEL_65;
                case '?':
                  unint64_t v92 = (char *)operator new(0xA8uLL);
                  uint64_t v48 = (llvm::Value *)(v92 + 64);
                  *((_DWORD *)v92 + 21) = *((_DWORD *)v92 + 21) & 0x38000000 | 2;
                  *(void *)unint64_t v92 = 0;
                  *((void *)v92 + 1) = 0;
                  *((void *)v92 + 2) = 0;
                  *((void *)v92 + 3) = v92 + 64;
                  *((void *)v92 + 4) = 0;
                  *((void *)v92 + 5) = 0;
                  *((void *)v92 + 6) = 0;
                  *((void *)v92 + 7) = v92 + 64;
                  uint64_t v93 = *(llvm::Value **)v141;
                  uint64_t v94 = (llvm::Value *)*((void *)v141 + 1);
                  uint64_t v95 = (llvm::Value *)*((void *)v141 + 2);
                  uint64_t v134 = "constexpr";
                  __int16 v137 = 259;
                  llvm::ShuffleVectorInst::ShuffleVectorInst((llvm::ShuffleVectorInst *)(v92 + 64), v93, v94, v95, (const llvm::Twine *)&v134, a4);
                  goto LABEL_66;
                default:
                  uint64_t v82 = (llvm::GetElementPtrInst *)v18[5];
                  uint64_t v83 = *(uint64_t **)v141;
                  uint64_t v134 = "constexpr";
                  __int16 v137 = 259;
                  uint64_t v48 = (llvm::Value *)llvm::GetElementPtrInst::Create(v82, v83, (llvm::Value *)((char *)v141 + 8), v142 - 1, (const llvm::Twine *)&v134, (uint64_t)a4);
                  if (!*((unsigned char *)v18 + 25)) {
                    goto LABEL_66;
                  }
                  goto LABEL_88;
              }
            }
            if ((v40 - 254) >= 2)
            {
              uint64_t v96 = ***v18;
              uint64_t v97 = llvm::PoisonValue::get((llvm::PoisonValue *)*v18, v12);
              int v98 = (llvm::Value *)v97;
              if (v142)
              {
                int v99 = 0;
                unint64_t v100 = (llvm::ConstantInt *)(v96 + 1992);
                unint64_t v101 = (llvm::Value **)v141;
                uint64_t v116 = (llvm::Value **)((char *)v141 + 8 * v142);
                int v118 = v100;
                do
                {
                  __int16 v102 = (llvm::Value *)llvm::ConstantInt::get(v118, v99);
                  unint64_t v103 = *v101;
                  uint64_t v134 = "constexpr.ins";
                  __int16 v137 = 259;
                  char v104 = (char *)operator new(0xA0uLL);
                  uint64_t v105 = 0;
                  uint64_t v48 = (llvm::Value *)(v104 + 96);
                  *((_DWORD *)v104 + 29) = *((_DWORD *)v104 + 29) & 0x38000000 | 3;
                  do
                  {
                    unint64_t v106 = &v104[v105];
                    *(void *)unint64_t v106 = 0;
                    *((void *)v106 + 1) = 0;
                    *((void *)v106 + 2) = 0;
                    *((void *)v106 + 3) = v48;
                    v105 += 32;
                  }
                  while (v105 != 96);
                  llvm::InsertElementInst::InsertElementInst((llvm::InsertElementInst *)(v104 + 96), v98, v103, v102, (const llvm::Twine *)&v134, a4);
                  int v99 = (llvm::Type *)((char *)v99 + 1);
                  ++v101;
                  int v98 = v48;
                }
                while (v101 != v116);
              }
              else
              {
                uint64_t v48 = (llvm::Value *)v97;
              }
            }
            else
            {
              uint64_t v70 = llvm::PoisonValue::get((llvm::PoisonValue *)*v18, v12);
              long long v71 = (uint64_t *)v70;
              if (v142)
              {
                uint64_t v72 = 0;
                uint64_t v115 = v141;
                uint64_t v73 = 8 * v142;
                do
                {
                  unint64_t v117 = (llvm::ConstantInt *)v115[v72];
                  LODWORD(__src) = v72;
                  uint64_t v134 = "constexpr.ins";
                  __int16 v137 = 259;
                  uint64_t v74 = (char *)operator new(0xA0uLL);
                  *((void *)v74 + 1) = 0;
                  *((void *)v74 + 2) = 0;
                  *(void *)uint64_t v74 = 0;
                  *((void *)v74 + 5) = 0;
                  *((void *)v74 + 6) = 0;
                  *((void *)v74 + 4) = 0;
                  uint64_t v75 = *v71;
                  *(_OWORD *)(v74 + 88) = 0u;
                  uint64_t v76 = (uint64_t *)(v74 + 88);
                  *((void *)v74 + 8) = v75;
                  uint64_t v48 = (llvm::Value *)(v74 + 64);
                  *((void *)v74 + 3) = v74 + 64;
                  *((void *)v74 + 7) = v74 + 64;
                  *((void *)v74 + 9) = 0;
                  v74[80] = 93;
                  v74[81] = 0;
                  *((_WORD *)v74 + 41) = 0;
                  *((_DWORD *)v74 + 21) = 2;
                  *((_DWORD *)v74 + 30) = 0;
                  *(_OWORD *)(v74 + 104) = 0u;
                  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)v119, (uint64_t)(v74 + 64));
                  uint64_t v77 = *v119;
                  *uint64_t v76 = *v119;
                  v76[1] = (uint64_t)v119;
                  *(void *)(v77 + 8) = v76;
                  *unint64_t v119 = (uint64_t)v76;
                  v76[5] = (uint64_t)(v76 + 7);
                  v76[6] = 0x400000000;
                  llvm::InsertValueInst::init((unsigned int *)v48, (uint64_t)v71, (uint64_t)v117, &__src, 1, (const llvm::Twine *)&v134);
                  ++v72;
                  long long v71 = (uint64_t *)v48;
                  v73 -= 8;
                }
                while (v73);
              }
              else
              {
                uint64_t v48 = (llvm::Value *)v70;
              }
            }
          }
          else
          {
            BOOL v49 = *(uint64_t **)v141;
            uint64_t v50 = *((void *)v141 + 1);
            uint64_t v134 = "constexpr";
            __int16 v137 = 259;
            long long v51 = llvm::BinaryOperator::Create(v40, v49, v50, (const llvm::Twine *)&v134, (uint64_t)a4);
            uint64_t v48 = (llvm::Value *)v51;
            unsigned int v52 = v51[16];
            HIDWORD(v54) = v52 - 41;
            LODWORD(v54) = v52 - 41;
            unsigned int v53 = v54 >> 1;
            BOOL v33 = v53 > 6;
            int v55 = (1 << v53) & 0x47;
            if (!v33 && v55 != 0)
            {
              char v57 = *((unsigned char *)v18 + 25);
              if ((v57 & 2) != 0)
              {
                v51[17] |= 4u;
                char v57 = *((unsigned char *)v18 + 25);
              }
              if (v57) {
                v51[17] |= 2u;
              }
            }
            BOOL v33 = v52 > 0x37;
            uint64_t v58 = (1 << v52) & 0xC1800000000000;
            BOOL v59 = v33 || v58 == 0;
            if (!v59 && (*((unsigned char *)v18 + 25) & 1) != 0) {
LABEL_88:
            }
              *((unsigned char *)v48 + 17) |= 2u;
          }
          goto LABEL_66;
        }
        uint64_t v47 = *(llvm::Value **)v141;
        uint64_t v134 = "constexpr";
        __int16 v137 = 259;
        uint64_t v43 = (uint64_t)llvm::UnaryOperator::Create(12, v47, (const llvm::Twine *)&v134, (uint64_t)a4);
      }
      else
      {
        uint64_t v41 = *(llvm::Value **)v141;
        uint64_t v42 = (llvm::Type *)*v18;
        uint64_t v134 = "constexpr";
        __int16 v137 = 259;
        uint64_t v43 = (uint64_t)llvm::CastInst::Create(v40, v41, v42, (const llvm::Twine *)&v134, a4);
      }
LABEL_65:
      uint64_t v48 = (llvm::Value *)v43;
LABEL_66:
      LODWORD(__src) = v11;
      int v126 = v48;
      llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::try_emplace<llvm::Value *>((uint64_t)&v134, (uint64_t)&v147, (int *)&__src, &v126);
      int v44 = 0;
      LODWORD(v145) = v145 - 1;
      int64_t v5 = v120;
LABEL_91:
      if (v138 != v140) {
        free(v138);
      }
      uint64_t v27 = (llvm::GlobalValue **)v141;
LABEL_94:
      if (v27 != (llvm::GlobalValue **)v143) {
        free(v27);
      }
      if ((v44 | 2) != 2) {
        goto LABEL_177;
      }
      unsigned int v9 = v145;
    }
    while (v145);
  }
LABEL_172:
  uint64_t v134 = 0;
  if (llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::LookupBucketFor<unsigned int>((uint64_t)&v147, v122, &v134))
  {
    uint64_t v113 = *((void *)v134 + 1);
  }
  else
  {
    unint64_t inserted = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::InsertIntoBucketImpl<unsigned int>(&v147, &v133, v134);
    uint64_t v113 = 0;
    *unint64_t inserted = v122;
    *((void *)inserted + 1) = 0;
  }
  *((unsigned char *)v5 + 8) &= ~1u;
  *(void *)int64_t v5 = v113;
LABEL_177:
  if (v144 != v146) {
    free(v144);
  }
  if ((v147 & 1) == 0) {
    MEMORY[0x263E500A0](v148, 8);
  }
}

void anonymous namespace'::BitcodeReaderBase::error(_anonymous_namespace_::BitcodeReaderBase *this, const llvm::Twine *a2, llvm::Twine *a3)
{
  llvm::Twine::str(a3, &v22);
  if (*((char *)a2 + 415) < 0)
  {
    if (!*((void *)a2 + 50)) {
      goto LABEL_27;
    }
  }
  else if (!*((unsigned char *)a2 + 415))
  {
    goto LABEL_27;
  }
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v19, "' Reader: 'LLVM ");
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  llvm::AppleInternalGetFullBitcodeVersionString(v17);
  if ((v18 & 0x80u) == 0) {
    uint64_t v6 = v17;
  }
  else {
    uint64_t v6 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v7 = v18;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)v17[1];
  }
  uint64_t v8 = std::string::append(&v20, (const std::string::value_type *)v6, v7);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  unint64_t v10 = std::string::append(&v21, "')");
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  uint64_t v15 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v15 >= 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if (v15 >= 0) {
    std::string::size_type v13 = HIBYTE(v15);
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  std::string::append(&v22, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
LABEL_27:
  __int16 v16 = 260;
  __p[0] = &v22;
  error((const llvm::Twine *)__p);
}

void std::vector<llvm::BasicBlock *>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v5 = (uint64_t)&v4[-*a1] >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    std::string v20 = &v3[8 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 3)
  {
    bzero(v4, 8 * v6);
    std::string v20 = &v4[8 * v6];
LABEL_19:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61) {
    abort();
  }
  uint64_t v9 = v8 - (void)v3;
  uint64_t v10 = v9 >> 2;
  if (v9 >> 2 <= a2) {
    uint64_t v10 = a2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  uint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v7, v11);
  std::string::size_type v13 = &v12[8 * v5];
  uint64_t v15 = &v12[8 * v14];
  bzero(v13, 8 * v6);
  __int16 v16 = &v13[8 * v6];
  unsigned __int8 v18 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      uint64_t v19 = *((void *)v17 - 1);
      v17 -= 8;
      *((void *)v13 - 1) = v19;
      v13 -= 8;
    }
    while (v17 != v18);
    uint64_t v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
  {
    operator delete(v17);
  }
}

llvm::InsertElementInst *llvm::InsertElementInst::Create(llvm::InsertElementInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::BasicBlock *a6)
{
  unint64_t v11 = operator new(0xA0uLL);
  uint64_t v12 = 0;
  std::string::size_type v13 = (llvm::InsertElementInst *)(v11 + 24);
  v11[29] = v11[29] & 0x38000000 | 3;
  do
  {
    uint64_t v14 = &v11[v12];
    *uint64_t v14 = 0;
    v14[1] = 0;
    void v14[2] = 0;
    void v14[3] = v13;
    v12 += 8;
  }
  while (v12 != 24);
  return llvm::InsertElementInst::InsertElementInst(v13, this, a2, a3, a4, a5);
}

void *llvm::GetElementPtrInst::Create(llvm::GetElementPtrInst *TypeAtIndex, uint64_t *a2, llvm::Value *a3, uint64_t a4, const llvm::Twine *a5, uint64_t a6)
{
  int v12 = a4 + 1;
  std::string::size_type v13 = llvm::User::operator new((llvm::User *)0x50, (int)a4 + 1);
  llvm::GetElementPtrInst::getGEPReturnType(TypeAtIndex, a2, a3, a4);
  *std::string::size_type v13 = v14;
  v13[1] = 0;
  unsigned int v15 = *((_DWORD *)v13 + 5) & 0xC0000000 | v12 & 0x7FFFFFF;
  *((_DWORD *)v13 + 4) = 62;
  *((_DWORD *)v13 + 5) = v15;
  *(_OWORD *)(v13 + 5) = 0u;
  *((_DWORD *)v13 + 14) = 0;
  *(_OWORD *)(v13 + 3) = 0u;
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(a6 + 40, (uint64_t)v13);
  uint64_t v17 = *(void *)(a6 + 40);
  v13[4] = a6 + 40;
  v13[3] = v17;
  *(void *)(v17 + 8) = v13 + 3;
  *(void *)(a6 + 40) = v13 + 3;
  char v13[8] = TypeAtIndex;
  if (a4)
  {
    unsigned __int8 v18 = (llvm::Type **)((char *)a3 + 8);
    uint64_t v19 = 8 * a4 - 8;
    do
    {
      if (!v19) {
        break;
      }
      std::string v20 = *v18++;
      TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v20, v16);
      v19 -= 8;
    }
    while (TypeAtIndex);
  }
  v13[9] = TypeAtIndex;
  llvm::GetElementPtrInst::init((llvm::Value *)v13, (uint64_t)a2, (uint64_t *)a3, a4, a5);
  return v13;
}

llvm::Value *llvm::SelectInst::Create(llvm::SelectInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::BasicBlock *a6)
{
  unint64_t v11 = (char *)operator new(0xA0uLL);
  uint64_t v12 = 0;
  std::string::size_type v13 = (llvm::Value *)(v11 + 96);
  *((_DWORD *)v11 + 29) = *((_DWORD *)v11 + 29) & 0x38000000 | 3;
  do
  {
    uint64_t v14 = &v11[v12];
    *(void *)uint64_t v14 = 0;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *((void *)v14 + 3) = v13;
    v12 += 32;
  }
  while (v12 != 96);
  *(_OWORD *)(v11 + 120) = 0u;
  unsigned int v15 = v11 + 120;
  *((void *)v11 + 12) = *(void *)a2;
  *((void *)v11 + 13) = 0;
  unsigned int v16 = *((_DWORD *)v11 + 29) & 0xC0000000 | 3;
  *((_DWORD *)v11 + 28) = 85;
  *((_DWORD *)v11 + 29) = v16;
  *(_OWORD *)(v11 + 136) = 0u;
  *((_DWORD *)v11 + 38) = 0;
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)a5 + 40, (uint64_t)v13);
  uint64_t v17 = *((void *)a5 + 5);
  *unsigned int v15 = v17;
  v15[1] = (char *)a5 + 40;
  *(void *)(v17 + 8) = v15;
  *((void *)a5 + 5) = v15;
  llvm::SelectInst::init((uint64_t)v13, (uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  llvm::Value::setName(v13, a4);
  return v13;
}

llvm::ExtractElementInst *llvm::ExtractElementInst::Create(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  uint64_t v9 = operator new(0x80uLL);
  v9[21] = v9[21] & 0x38000000 | 2;
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = v9 + 16;
  *((void *)v9 + 4) = 0;
  *((void *)v9 + 5) = 0;
  *((void *)v9 + 6) = 0;
  *((void *)v9 + 7) = v9 + 16;
  uint64_t v10 = (llvm::ExtractElementInst *)(v9 + 16);
  return llvm::ExtractElementInst::ExtractElementInst(v10, this, a2, a3, a4);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::LookupBucketFor<unsigned int>(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  uint64_t v7 = (_DWORD *)(v3 + 16 * v6);
  int v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -1)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (_DWORD *)(v3 + 16 * (v13 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::try_emplace<llvm::Value *>(uint64_t a1, uint64_t a2, int *a3, void *a4)
{
  unsigned int v16 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::LookupBucketFor<unsigned int>(a2, *a3, &v16);
  uint64_t v9 = v16;
  if (result)
  {
    uint64_t v10 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      uint64_t v11 = 4;
    }
    else
    {
      uint64_t v10 = *(void *)(a2 + 8);
      uint64_t v11 = *(unsigned int *)(a2 + 16);
    }
    char v14 = 0;
    uint64_t v15 = v10 + 16 * v11;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::InsertIntoBucketImpl<unsigned int>((_DWORD *)a2, a3, v16);
    uint64_t v9 = (_DWORD *)result;
    *(_DWORD *)uint64_t result = *a3;
    *(void *)(result + 8) = *a4;
    uint64_t v12 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      uint64_t v13 = 4;
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 8);
      uint64_t v13 = *(unsigned int *)(a2 + 16);
    }
    uint64_t v15 = v12 + 16 * v13;
    char v14 = 1;
  }
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v15;
  *(unsigned char *)(a1 + 16) = v14;
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::InsertIntoBucketImpl<unsigned int>(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v5 = *a1 >> 1;
  if (*a1) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::grow((uint64_t)a1, v6);
  int v8 = 0;
  llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::LookupBucketFor<unsigned int>((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -1) {
    --a1[1];
  }
  return a3;
}

uint64_t llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::grow(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::moveFromOldBuckets(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x263E500A0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v14;
  do
  {
    unsigned int v10 = *(_DWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      *(_DWORD *)uint64_t v9 = v10;
      *((void *)v9 + 1) = *(void *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::moveFromOldBuckets(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (_DWORD *)(result + 8);
    uint64_t v9 = (_DWORD *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(_DWORD **)(result + 8);
    uint64_t v9 = &v8[4 * v7];
  }
  do
  {
    *uint64_t v8 = -1;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    int v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      uint64_t v12 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::LookupBucketFor<unsigned int>((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      _DWORD *v12 = *(_DWORD *)a2;
      *((void *)v11 + 1) = *(void *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>::grow(a1, v7);
    uint64_t v8 = 0;
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  uint64_t *result = *a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *std::__function::__value_func<llvm::Expected<llvm::Value *> ()(unsigned int,llvm::BasicBlock *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__base_destruct_at_end[abi:nn180100](uint64_t a1, llvm::ValueHandleBase *a2)
{
  char v4 = *(llvm::ValueHandleBase **)(a1 + 8);
  while (v4 != a2)
  {
    uint64_t v5 = *((void *)v4 - 2);
    char v4 = (llvm::ValueHandleBase *)((char *)v4 - 32);
    if (v5 != -8192 && v5 != -4096 && v5 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList(v4);
    }
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<llvm::BitstreamBlockInfo::BlockInfo>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<llvm::BitstreamBlockInfo::BlockInfo>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void **)(a2 + 56);
  std::vector<std::pair<unsigned int,std::string>>::__destroy_vector::operator()[abi:nn180100](&v3);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  unint64_t v3 = (void **)(a2 + 8);
  std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v3);
}

void std::vector<std::pair<unsigned int,std::string>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<unsigned int,std::string>>::__clear[abi:nn180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<unsigned int,std::string>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void anonymous namespace'::BitcodeReader::parseFunctionBody(void ***this, llvm::Function *a2, llvm::Value *a3)
{
  v833[12] = *MEMORY[0x263EF8340];
  v805 = a3;
  int v6 = (llvm::Function *)((char *)a2 + 32);
  llvm::BitstreamCursor::EnterSubBlock((llvm::Function *)((char *)a2 + 32), 0, 12, this);
  if (*this) {
    return;
  }
  uint64_t v7 = *((void *)a2 + 97);
  if (*(_DWORD *)(v7 + 24) >= 2u)
  {
    v827 = "Invalid function metadata: incoming forward references";
    v829[8] = 259;
  }
  v774 = (llvm::Function *)((char *)a2 + 8);
  v772 = (unsigned int *)((char *)a2 + 840);
  *((_DWORD *)a2 + 212) = 0;
  unint64_t v769 = *((void *)a2 + 90) - *((void *)a2 + 89);
  unint64_t v770 = *(unsigned int *)(v7 + 8);
  int v8 = *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>,llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::FindAndConstruct((uint64_t)a2 + 592, (uint64_t *)&v805)+ 8);
  uint64_t v9 = llvm::Function::args(a3);
  if ((llvm::Value *)v9 != v10)
  {
    uint64_t v11 = (llvm::Value *)v9;
    uint64_t v12 = v10;
    unsigned int v13 = 1;
    do
    {
      llvm::BitcodeReaderValueList::push_back((llvm::Function *)((char *)a2 + 712), v11, ContainedTypeID);
      uint64_t v11 = (llvm::Value *)((char *)v11 + 40);
      ++v13;
    }
    while (v11 != v12);
  }
  v773 = (llvm::Function *)((char *)a2 + 712);
  unint64_t v15 = *((void *)a2 + 90) - *((void *)a2 + 89);
  v804 = 0;
  unsigned int v803 = 0;
  v830[0] = 1;
  uint64_t v16 = 1;
  int64x2_t v17 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v830[v16] = v17;
    v16 += 3;
  }
  while (v16 != 13);
  unsigned __int8 v18 = v833;
  v831 = v833;
  uint64_t v832 = 0x400000000;
  v801[2] = (uint64_t *)a2;
  v802 = 0;
  uint64_t v19 = v829;
  v801[0] = (uint64_t *)&v804;
  v801[1] = (uint64_t *)&v803;
  v771 = (llvm::BasicBlock ***)((char *)a2 + 1488);
  uint64_t v798 = 0;
  uint64_t v799 = 0;
  uint64_t v800 = 0;
  v827 = v829;
  *(void *)v828 = 0x4000000000;
  v768 = (int32x2_t *)((char *)a2 + 1616);
  *(void *)v775 = v15 >> 5;
  std::string v20 = (llvm::Function *)((char *)a2 + 8);
  while (2)
  {
    llvm::BitstreamCursor::advance(v6, 0, (uint64_t)&v825);
    if (v826)
    {
      std::string v22 = v825;
      v825 = 0;
      *this = v22;
LABEL_16:
      int v23 = 1;
      goto LABEL_17;
    }
    uint64_t v21 = HIDWORD(v825);
    switch(v825)
    {
      case 2:
        switch(HIDWORD(v825))
        {
          case 0xB:
            if (*this) {
              goto LABEL_16;
            }
            *(void *)v775 = (*((void *)a2 + 90) - *((void *)a2 + 89)) >> 5;
            int v23 = 4;
            goto LABEL_17;
          case 0xE:
            goto LABEL_37;
          case 0xF:
            llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(*((llvm::MetadataLoader::MetadataLoaderImpl **)a2 + 97), 0, (const llvm::Twine *)this);
            goto LABEL_37;
          case 0x10:
            llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataAttachment(*((void *)a2 + 97), v805, *((void *)a2 + 105), this);
            goto LABEL_37;
          case 0x12:
            goto LABEL_37;
          default:
            llvm::BitstreamCursor::SkipBlock(v6, (uint64_t *)this);
LABEL_37:
            if (*this) {
              int v23 = 1;
            }
            else {
              int v23 = 4;
            }
            break;
        }
        goto LABEL_17;
      case 1:
        int v23 = 7;
        goto LABEL_17;
      case 0:
        v817 = "Malformed block";
        v821[0] = 259;
    }
    v828[0] = 0;
    unsigned int VirtualTypeID = -1;
    llvm::BitstreamCursor::readRecord(v6, SHIDWORD(v825), (unsigned int *)&v827, 0, (uint64_t)&v823);
    if (v824)
    {
      uint64_t v32 = v823;
      v823 = 0;
      *this = v32;
      int v23 = 1;
      goto LABEL_827;
    }
    int v26 = (int)v823;
    switch((int)v823)
    {
      case 1:
        if (!v828[0] || !*(void *)v827) {
          goto LABEL_398;
        }
        std::vector<llvm::BasicBlock *>::resize(v771, *(void *)v827);
        unint64_t v65 = v805;
        uint64_t v66 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::find((uint64_t)v768, (uint64_t)v805);
        if (*((void *)a2 + 202) + 32 * *((unsigned int *)a2 + 408) == v66)
        {
          v739 = v19;
          if (*((void *)a2 + 186) != *((void *)a2 + 187))
          {
            v821[0] = 257;
            operator new();
          }
        }
        else
        {
          v777 = (llvm::PHINode *)v66;
          uint64_t v67 = *(void *)(v66 + 16) - *(void *)(v66 + 8);
          uint64_t v68 = *((void *)a2 + 187) - *((void *)a2 + 186);
          if (v67 >> 3 > (unint64_t)(v68 >> 3))
          {
            uint64_t v69 = "Invalid ID";
            goto LABEL_315;
          }
          v739 = v19;
          v762 = v18;
          if ((v68 & 0x7FFFFFFF8) != 0)
          {
            unint64_t v498 = 0;
            unint64_t v499 = ((unint64_t)v67 >> 3);
            uint64_t v500 = ((unint64_t)v68 >> 3);
            v501 = (uint64_t *)((char *)v65 + 72);
            do
            {
              if (v498 >= v499 || (v502 = *((void *)v777 + 1), (uint64_t v503 = *(void *)(v502 + 8 * v498)) == 0))
              {
                v821[0] = 257;
                llvm::BasicBlock::Create();
              }
              llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v65 + 72, *(void *)(v502 + 8 * v498));
              uint64_t v504 = *v501;
              *(void *)(v503 + 24) = *v501;
              *(void *)(v503 + 32) = v501;
              uint64_t v505 = v503 + 24;
              *(void *)(v504 + 8) = v505;
              uint64_t *v501 = v505;
              (*v771)[v498] = *(llvm::BasicBlock **)(*((void *)v777 + 1) + 8 * v498);
              ++v498;
            }
            while (v500 != v498);
          }
          llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::erase(v768, v777);
          unsigned __int8 v18 = v762;
          std::string v20 = (llvm::Function *)((char *)a2 + 8);
        }
        v804 = **v771;
        int v23 = 4;
        uint64_t v19 = v739;
        goto LABEL_827;
      case 2:
        uint64_t v70 = v19;
        LODWORD(v810) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v806) = 0;
        {
          goto LABEL_374;
        }
        int v71 = (int)v810;
        if (v828[0] == v810) {
          goto LABEL_374;
        }
        uint64_t v72 = (uint64_t *)__p.n128_u64[0];
        unsigned int v73 = v806;
        unsigned int v74 = *((unsigned char *)a2 + 1712)
            ? v775[0] - *((void *)v827 + v810)
            : *((void *)v827 + v810);
        if (!FnValueByID
          || (uint64_t v76 = (v71 + 2), v828[0] < v76)
          || (uint64_t v77 = (uint64_t)FnValueByID,
              unsigned int DecodedBinaryOpcode = getDecodedBinaryOpcode(*((void *)v827 + (v71 + 1)), *v72),
              DecodedBinaryOpcode == -1))
        {
LABEL_374:
          v817 = "Invalid record";
          v821[0] = 259;
        }
        unsigned int v79 = DecodedBinaryOpcode;
        v821[0] = 257;
        uint64_t v80 = llvm::BinaryOperator::Create(DecodedBinaryOpcode, v72, v77, (const llvm::Twine *)&v817, 0);
        unsigned int VirtualTypeID = v73;
        uint64_t v81 = (uint64_t)v80;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)v80);
        v776 = (llvm::PHINode *)v81;
        if (v828[0] <= v76) {
          goto LABEL_1026;
        }
        HIDWORD(v83) = v79 - 13;
        LODWORD(v83) = v79 - 13;
        unsigned int v82 = v83 >> 1;
        if (v82 <= 6 && ((1 << v82) & 0x47) != 0)
        {
          uint64_t v19 = v70;
          __int16 v84 = v827;
          uint64_t v85 = *((void *)v827 + v76);
          if ((v85 & 2) != 0)
          {
            *(unsigned char *)(v81 + 17) |= 4u;
            uint64_t v85 = v84[v76];
          }
          std::string v20 = (llvm::Function *)((char *)a2 + 8);
          if (v85) {
            *(unsigned char *)(v81 + 17) |= 2u;
          }
          goto LABEL_882;
        }
        if (v79 <= 0x1B && ((1 << v79) & 0xC180000) != 0)
        {
          if (*((void *)v827 + v76)) {
            *(unsigned char *)(v81 + 17) |= 2u;
          }
        }
        else if (llvm::FPMathOperator::classof(v81))
        {
          int v681 = *((void *)v827 + v76) & 0x7E | (*((void *)v827 + v76) >> 7) & 1 | -(*((void *)v827 + v76) & 1);
          if (v681) {
            *(unsigned char *)(v81 + 17) |= 2 * (_BYTE)v681;
          }
        }
LABEL_1026:
        int v23 = 9;
        uint64_t v19 = v70;
        goto LABEL_1122;
      case 3:
        LODWORD(v806) = 0;
        __p.n128_u64[0] = 0;
        v790[0] = 0;
        {
          goto LABEL_818;
        }
        int v86 = (int)v806;
        if (v828[0] != v806 + 2) {
          goto LABEL_818;
        }
        unsigned int v87 = v19;
        uint64_t v88 = *((void *)v827 + v806);
        unsigned int VirtualTypeID = v88;
        DecodedCastOpcode = (llvm *)getDecodedCastOpcode(*((void *)v827 + (v86 + 1)));
        BOOL v92 = DecodedCastOpcode == -1 || TypeByID == 0;
        if (!v92)
        {
          int v467 = (int)DecodedCastOpcode;
          v761 = v18;
          v810 = 0;
          uint64_t v468 = (uint64_t *)__p.n128_u64[0];
          char v469 = llvm::UpgradeBitCastInst(DecodedCastOpcode, (llvm::Value *)__p.n128_u64[0], TypeByID, (llvm::Type *)&v810, v91);
          if (v469)
          {
            unsigned int v470 = v469;
            v471 = v810;
            if (v810)
            {
              v472 = (unsigned int *)((char *)a2 + 840);
              llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)v810);
              uint64_t v473 = v804;
              v474 = (char *)v804 + 40;
              llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)v804 + 40, (uint64_t)v471);
              uint64_t v475 = *((void *)v473 + 5);
              *((void *)v471 + 3) = v475;
              *((void *)v471 + 4) = v474;
              uint64_t v476 = (char *)v471 + 24;
              *(void *)(v475 + 8) = v476;
              *((void *)v473 + 5) = v476;
              uint64_t v19 = v87;
              std::string v20 = (llvm::Function *)((char *)a2 + 8);
            }
            else
            {
              uint64_t v19 = v87;
              std::string v20 = (llvm::Function *)((char *)a2 + 8);
              v472 = (unsigned int *)((char *)a2 + 840);
            }
            unint64_t v543 = v470;
          }
          else
          {
            if (!llvm::CastInst::castIsValid(v467, *v468, (uint64_t)TypeByID))
            {
              v817 = "Invalid cast";
              v821[0] = 259;
            }
            v821[0] = 257;
            unint64_t v543 = llvm::CastInst::Create(v467, (llvm::Value *)v468, TypeByID, (const llvm::Twine *)&v817, 0);
            uint64_t v19 = v87;
            std::string v20 = (llvm::Function *)((char *)a2 + 8);
            v472 = (unsigned int *)((char *)a2 + 840);
          }
          unsigned __int8 v18 = v761;
          v776 = v543;
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v472, (uint64_t)v543);
LABEL_882:
          int v23 = 9;
          goto LABEL_821;
        }
        v817 = "Invalid record";
        v821[0] = 259;
        uint64_t v93 = (_anonymous_namespace_::BitcodeReaderBase *)this;
        goto LABEL_272;
      case 4:
      case 30:
      case 43:
        uint64_t v27 = v19;
        uint64_t v28 = v18;
        v790[0] = 0;
        if (v823 == 43)
        {
          BOOL v29 = *(void *)v827 != 0;
          v790[0] = 2;
          unsigned int v30 = *((_DWORD *)v827 + 2);
        }
        else
        {
          BOOL v31 = 0;
          BOOL v29 = v823 == 30;
          unsigned int v30 = -1;
        }
        v810 = 0;
        LODWORD(v789.__r_.__value_.__l.__data_) = 0;
        {
          v817 = "Invalid record";
          v821[0] = 259;
          BOOL v59 = (_anonymous_namespace_::BitcodeReaderBase *)this;
          goto LABEL_89;
        }
        if (v31)
        {
          int v61 = (uint64_t *)v810;
          uint64_t v62 = *(void *)v810;
          if ((*(_DWORD *)(*(void *)v810 + 8) & 0xFE) == 0x12) {
            uint64_t v62 = **(void **)(v62 + 16);
          }
          uint64_t v63 = (llvm::Value *)&v819;
          uint64_t v64 = *(llvm::GetElementPtrInst **)(v62 + 24);
          if (v64 && v64 != v31)
          {
            v817 = "Explicit gep type does not match pointee type of pointer operand";
            v821[0] = 259;
            BOOL v59 = (_anonymous_namespace_::BitcodeReaderBase *)this;
            std::string v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_89:
          }
        }
        else
        {
          int v61 = (uint64_t *)v810;
          if ((*(_DWORD *)(*(void *)v810 + 8) & 0xFE) == 0x12) {
          uint64_t v63 = (llvm::Value *)&v819;
          }
        }
        v817 = &v819;
        v818 = (void *)0x1000000000;
        if (v828[0] == v790[0])
        {
          uint64_t v299 = 0;
        }
        else
        {
          do
          {
            v806 = 0;
            v793[0] = 0;
            {
              __p.n128_u64[0] = (unint64_t)"Invalid record";
              __int16 v816 = 259;
            }
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v817, (uint64_t)v806);
          }
          while (v828[0] != v790[0]);
          uint64_t v63 = (llvm::Value *)v817;
          uint64_t v299 = v818;
        }
        __int16 v816 = 257;
        uint64_t v300 = llvm::GetElementPtrInst::Create(v31, v61, v63, v299, (const llvm::Twine *)&__p, 0);
        unsigned int VirtualTypeID = v30;
        uint64_t v301 = v300;
        int v302 = *((_DWORD *)v300 + 5);
        uint64_t v19 = v27;
        std::string v20 = (llvm::Function *)((char *)a2 + 8);
        v776 = v300;
        if ((v302 & 0x7FFFFFF) != 1)
        {
          uint64_t v303 = 24;
          if (*((unsigned char *)v300 + 16) == 62) {
            uint64_t v303 = 64;
          }
          if ((v302 & 0x40000000) != 0) {
            long long v304 = (char *)*((void *)v300 - 1);
          }
          else {
            long long v304 = (char *)v300 - 32 * (v302 & 0x7FFFFFF);
          }
          uint64_t v419 = *(void *)((char *)v300 + v303);
          unint64_t v420 = (unint64_t)(v304 + 32);
          std::next[abi:nn180100]<llvm::generic_gep_type_iterator<llvm::Use const*>,0>((uint64_t)(v304 + 32), v419 | 4, 1);
          __p.n128_u64[0] = v420;
          __p.n128_u64[1] = v421;
          int v422 = *((_DWORD *)v301 + 5);
          if ((v422 & 0x40000000) != 0)
          {
            uint64_t v424 = (_DWORD *)*((void *)v301 - 1);
            uint64_t v423 = v422 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v423 = v422 & 0x7FFFFFF;
            uint64_t v424 = (_DWORD *)((char *)v301 - 32 * v423);
          }
          if (v423 != 2)
          {
            v425 = v424 + 16;
            uint64_t v426 = 32 * v423 - 64;
            do
            {
              if ((__p.n128_u8[8] & 4) != 0)
              {
                unsigned int v429 = 0;
              }
              else
              {
                uint64_t SplatValue = *(_DWORD **)v425;
                if ((*(_DWORD *)(**(void **)v425 + 8) & 0xFE) == 0x12) {
                  uint64_t SplatValue = (_DWORD *)llvm::Constant::getSplatValue((llvm::Constant *)SplatValue, 0);
                }
                unsigned int v428 = SplatValue + 6;
                if (SplatValue[8] >= 0x41u) {
                  unsigned int v428 = (void *)*v428;
                }
                unsigned int v429 = *(_DWORD *)v428;
              }
              llvm::generic_gep_type_iterator<llvm::Use const*>::operator++(&__p);
              v425 += 8;
              v426 -= 32;
            }
            while (v426);
          }
          uint64_t v301 = v776;
        }
        uint64_t v430 = *(void *)v301;
        if ((*(_DWORD *)(*(void *)v301 + 8) & 0xFE) == 0x12) {
          uint64_t v430 = **(void **)(v430 + 16);
        }
        if ((*(_DWORD *)(*(void *)v301 + 8) & 0xFE) == 0x12) {
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)v301);
        }
        if (v29) {
          *((unsigned char *)v301 + 17) |= 2u;
        }
        int v23 = 9;
        v572 = (uint64_t *)v817;
        unsigned __int8 v18 = v28;
        if (v817 != &v819) {
          goto LABEL_886;
        }
        goto LABEL_821;
      case 5:
        LODWORD(v810) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v806) = 0;
        uint64_t v94 = **((void **)a2 + 53);
        {
          int v95 = (int)v810;
          if (v828[0] != v810)
          {
            uint64_t v96 = (llvm::Value *)__p.n128_u64[0];
            unsigned int v97 = *((unsigned char *)a2 + 1712)
                ? v775[0] - *((void *)v827 + v810)
                : *((void *)v827 + v810);
            unsigned int v778 = v806;
            if (v98)
            {
              int v99 = v98;
              LODWORD(v810) = v95 + 1;
              if (v828[0] != v95 + 1)
              {
                unsigned int v101 = *((unsigned char *)a2 + 1712)
                     ? v775[0] - *((void *)v827 + (v95 + 1))
                     : *((void *)v827 + (v95 + 1));
                if (v102)
                {
                  unint64_t v103 = v102;
                  v821[0] = 257;
                  char v104 = operator new(0xA0uLL);
                  uint64_t v105 = 0;
                  uint64_t v106 = (uint64_t)(v104 + 24);
                  v104[29] = v104[29] & 0x38000000 | 3;
                  do
                  {
                    unsigned int v107 = &v104[v105];
                    *unsigned int v107 = 0;
                    v107[1] = 0;
                    v107[2] = 0;
                    v107[3] = v106;
                    v105 += 8;
                  }
                  while (v105 != 24);
                  llvm::SelectInst::SelectInst((llvm::SelectInst *)(v104 + 24), v103, v96, v99, (const llvm::Twine *)&v817, 0);
                  unsigned int VirtualTypeID = v778;
                  v776 = (llvm::PHINode *)v106;
                  llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, v106);
                  int v23 = 9;
                  goto LABEL_1122;
                }
              }
            }
          }
        }
        v817 = "Invalid record";
        v821[0] = 259;
        BOOL v60 = (_anonymous_namespace_::BitcodeReaderBase *)this;
        std::string v20 = (llvm::Function *)((char *)a2 + 8);
        goto LABEL_376;
      case 6:
        LODWORD(v806) = 0;
        __p.n128_u64[0] = 0;
        v810 = 0;
        v790[0] = 0;
        LODWORD(v789.__r_.__value_.__l.__data_) = 0;
        {
          goto LABEL_818;
        }
        if ((*(_DWORD *)(*(void *)__p.n128_u64[0] + 8) & 0xFE) == 0x12)
        {
          v821[0] = 257;
          uint64_t v110 = llvm::ExtractElementInst::Create((llvm::ExtractElementInst *)__p.n128_u64[0], v810, (llvm::Value *)&v817, v108, v109);
LABEL_341:
          uint64_t v134 = (unsigned int *)((char *)a2 + 840);
          v776 = v110;
          uint64_t v133 = (uint64_t)v110;
LABEL_342:
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v134, v133);
          int v23 = 9;
          goto LABEL_821;
        }
        unint64_t v405 = "Invalid type for value";
        goto LABEL_551;
      case 7:
        LODWORD(v806) = 0;
        __p.n128_u64[0] = 0;
        v810 = 0;
        v790[0] = 0;
        LODWORD(v789.__r_.__value_.__l.__data_) = 0;
        {
          goto LABEL_818;
        }
        uint64_t v111 = (llvm::InsertElementInst *)__p.n128_u64[0];
        if ((*(_DWORD *)(*(void *)__p.n128_u64[0] + 8) & 0xFE) == 0x12)
        {
          unint64_t v112 = v19;
          uint64_t v113 = *(llvm::Type **)(*(void *)__p.n128_u64[0] + 24);
          unsigned int v114 = v790[0];
          int v116 = (int)v806;
          if (v828[0] != v806)
          {
            unsigned int v117 = *((unsigned char *)a2 + 1712)
                 ? v775[0] - *((void *)v827 + v806)
                 : *((void *)v827 + v806);
            if (v118)
            {
              unint64_t v119 = v118;
              LODWORD(v806) = v116 + 1;
              {
                v821[0] = 257;
                int v122 = llvm::InsertElementInst::Create(v111, v119, v810, (llvm::Value *)&v817, v120, v121);
                unsigned int VirtualTypeID = v114;
                unsigned int v123 = (unsigned int *)((char *)a2 + 840);
                v776 = v122;
LABEL_155:
                llvm::SmallVectorTemplateBase<void *,true>::push_back(v123, (uint64_t)v122);
                goto LABEL_156;
              }
            }
          }
          goto LABEL_270;
        }
        uint64_t v173 = "Invalid type for value";
        goto LABEL_819;
      case 8:
        unint64_t v112 = v19;
        LODWORD(v806) = 0;
        __p.n128_u64[0] = 0;
        v810 = 0;
        v790[0] = 0;
        {
          goto LABEL_270;
        }
        int v124 = (int)v806;
        if (v828[0] == v806) {
          goto LABEL_270;
        }
        uint64_t v125 = (llvm::Value *)__p.n128_u64[0];
        int v126 = v790[0];
        unsigned int v127 = *((unsigned char *)a2 + 1712)
             ? v775[0] - *((void *)v827 + v806)
             : *((void *)v827 + v806);
        if (!v128) {
          goto LABEL_270;
        }
        uint64_t v129 = v128;
        LODWORD(v806) = v124 + 1;
        LODWORD(v789.__r_.__value_.__l.__data_) = 0;
        {
          goto LABEL_270;
        }
        if ((*(_DWORD *)(*(void *)v125 + 8) & 0xFE) != 0x12 || (*(_DWORD *)(*(void *)v129 + 8) & 0xFE) != 0x12) {
          goto LABEL_233;
        }
        v755 = v18;
        uint64_t v130 = operator new(0xA8uLL);
        v130[21] = v130[21] & 0x38000000 | 2;
        uint64_t v131 = (llvm::PHINode *)(v130 + 16);
        *(void *)uint64_t v130 = 0;
        *((void *)v130 + 1) = 0;
        *((void *)v130 + 2) = 0;
        *((void *)v130 + 3) = v130 + 16;
        *((void *)v130 + 4) = 0;
        *((void *)v130 + 5) = 0;
        *((void *)v130 + 6) = 0;
        *((void *)v130 + 7) = v130 + 16;
        v821[0] = 257;
        llvm::ShuffleVectorInst::ShuffleVectorInst((llvm::ShuffleVectorInst *)(v130 + 16), v125, v129, v810, (const llvm::Twine *)&v817, 0);
        uint64_t v132 = *((void *)v130 + 8);
        unsigned __int8 v18 = v755;
        unsigned int v123 = (unsigned int *)((char *)a2 + 840);
        v776 = v131;
        int v122 = v131;
        goto LABEL_155;
      case 9:
      case 28:
        BOOL v33 = v19;
        LODWORD(v810) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v806) = 0;
        {
          char v57 = "Invalid record";
        }
        else
        {
          unsigned int v38 = v34 + 1;
          if (v828[0] > (v34 + 1))
          {
            uint64_t v39 = (uint64_t)v37;
            int v40 = *v35;
            int v41 = *((_DWORD *)*v35 + 2);
            LOBYTE(v42) = v41;
            if ((v41 & 0xFE) == 0x12) {
              int v42 = *(_DWORD *)(**((void **)v40 + 2) + 8);
            }
            uint64_t v43 = (llvm::Type *)*((void *)v827 + v38);
            if ((v42 < 4u || v42 == 5 || (v42 & 0xFD) == 4)
              && v828[0] > (v34 + 2))
            {
              LODWORD(v810) = v34 + 2;
              int v44 = *((void *)v827 + (v34 + 2)) & 0x7E | (*((void *)v827
                                                                                        + (v34 + 2)) >> 7) & 1 | -(*((void *)v827 + (v34 + 2)) & 1);
              unsigned int v38 = v34 + 2;
            }
            else
            {
              int v44 = 0;
            }
            if (v828[0] == v38 + 1)
            {
              if ((v41 & 0xFE) == 0x12) {
                int v41 = *(_DWORD *)(**((void **)v40 + 2) + 8);
              }
              int v751 = v44;
              v533 = v43;
              if (v41 < 4u || v41 == 5 || (v41 & 0xFD) == 4)
              {
                v534 = operator new(0x80uLL);
                v534[21] = v534[21] & 0x38000000 | 2;
                v535 = (llvm::PHINode *)(v534 + 16);
                *(void *)v534 = 0;
                *((void *)v534 + 1) = 0;
                *((void *)v534 + 2) = 0;
                *((void *)v534 + 3) = v534 + 16;
                *((void *)v534 + 4) = 0;
                *((void *)v534 + 5) = 0;
                *((void *)v534 + 6) = 0;
                *((void *)v534 + 7) = v534 + 16;
                v821[0] = 257;
                llvm::FCmpInst::FCmpInst((_WORD *)v534 + 32, v533, v35, v39, (const llvm::Twine *)&v817);
              }
              else
              {
                v621 = operator new(0x80uLL);
                v621[21] = v621[21] & 0x38000000 | 2;
                v535 = (llvm::PHINode *)(v621 + 16);
                *(void *)v621 = 0;
                *((void *)v621 + 1) = 0;
                *((void *)v621 + 2) = 0;
                *((void *)v621 + 3) = v621 + 16;
                *((void *)v621 + 4) = 0;
                *((void *)v621 + 5) = 0;
                *((void *)v621 + 6) = 0;
                *((void *)v621 + 7) = v621 + 16;
                v821[0] = 257;
                llvm::ICmpInst::ICmpInst((_WORD *)v621 + 32, v533, v35, v39, (const llvm::Twine *)&v817);
              }
              v776 = v535;
              uint64_t v536 = *(void *)v535;
              BOOL v92 = (*(_DWORD *)(*(void *)v535 + 8) & 0xFE) == 18;
              uint64_t v19 = v33;
              std::string v20 = (llvm::Function *)((char *)a2 + 8);
              if (v92) {
                uint64_t v536 = **(void **)(v536 + 16);
              }
              if ((*((_DWORD *)*v35 + 2) & 0xFE) == 0x12) {
              if (v751)
              }
                *((unsigned char *)v776 + 17) |= 2 * (_BYTE)v751;
              uint64_t v225 = (unsigned int *)((char *)a2 + 840);
              uint64_t v224 = (uint64_t)v776;
LABEL_275:
              llvm::SmallVectorTemplateBase<void *,true>::push_back(v225, v224);
LABEL_276:
              int v23 = 9;
              goto LABEL_821;
            }
            goto LABEL_791;
          }
          char v57 = "Invalid record: operand number exceeded available operands";
        }
        v817 = v57;
        v821[0] = 259;
        uint64_t v58 = (_anonymous_namespace_::BitcodeReaderBase *)this;
        goto LABEL_77;
      case 10:
        if (!v828[0])
        {
          uint64_t v148 = llvm::ReturnInst::Create(*((void **)a2 + 53), 0);
LABEL_742:
          v776 = (llvm::PHINode *)v148;
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, v148);
          goto LABEL_822;
        }
        LODWORD(v810) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v806) = 0;
        {
          goto LABEL_550;
        }
        uint64_t v133 = llvm::ReturnInst::Create(*((void **)a2 + 53), __p.n128_i64[0]);
        uint64_t v134 = (unsigned int *)((char *)a2 + 840);
        v776 = (llvm::PHINode *)v133;
        goto LABEL_342;
      case 11:
        if ((v828[0] | 2) != 3) {
          goto LABEL_398;
        }
        unint64_t v135 = *(unsigned int *)v827;
        uint64_t v136 = *((void *)a2 + 186);
        unint64_t v137 = (*((void *)a2 + 187) - v136) >> 3;
        if (v137 <= v135) {
          goto LABEL_314;
        }
        int v138 = *(llvm::BranchInst **)(v136 + 8 * v135);
        if (!v138) {
          goto LABEL_314;
        }
        if (v828[0] == 1)
        {
          uint64_t v139 = (void *)llvm::BranchInst::Create(*(llvm::BranchInst **)(v136 + 8 * v135), (llvm::BasicBlock *)v21, v25);
          goto LABEL_721;
        }
        uint64_t v181 = v19;
        unint64_t v508 = *((unsigned int *)v827 + 2);
        if (v137 <= v508) {
          v509 = 0;
        }
        else {
          v509 = *(llvm::BasicBlock **)(v136 + 8 * v508);
        }
        char v537 = (llvm::Type *)(**((void **)a2 + 53) + 1920);
        if (v828[0] == 2 {
          || (*((unsigned char *)a2 + 1712) ? (unsigned int v539 = v775[0] - *((_DWORD *)v827 + 4)) : (unsigned int v539 = *((_DWORD *)v827 + 4)),
        }
        {
LABEL_800:
          v817 = "Invalid record";
          v821[0] = 259;
        }
        uint64_t v148 = llvm::BranchInst::Create(v138, v509, v540, v541, v542);
LABEL_511:
        uint64_t v19 = v181;
        std::string v20 = (llvm::Function *)((char *)a2 + 8);
        goto LABEL_742;
      case 12:
        unint64_t v140 = *(void *)v827;
        if (*(void *)v827 >> 16 == 1205)
        {
          v738 = v19;
          unsigned int v141 = *((_DWORD *)v827 + 2);
          unsigned int v143 = *((_DWORD *)v142 + 2);
          if (v828[0] == 2)
          {
            long long v144 = 0;
          }
          else
          {
            if (*((unsigned char *)a2 + 1712)) {
              unsigned int v336 = v775[0] - *((_DWORD *)v827 + 4);
            }
            else {
              unsigned int v336 = *((_DWORD *)v827 + 4);
            }
          }
          unint64_t v337 = *((unsigned int *)v827 + 6);
          uint64_t v338 = *((void *)a2 + 186);
          if (v337 < (*((void *)a2 + 187) - v338) >> 3)
          {
            if (v144)
            {
              unint64_t v339 = *(llvm::BasicBlock **)(v338 + 8 * v337);
              if (v339)
              {
                int v340 = *((_DWORD *)v827 + 8);
                int v341 = operator new(0x48uLL);
                char v342 = (llvm::User *)(v341 + 2);
                v341[7] = v341[7] & 0x38000000 | 0x40000000;
                *(void *)int v341 = 0;
                llvm::SwitchInst::SwitchInst((llvm::SwitchInst *)(v341 + 2), v144, v339, v340, 0);
                llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)v342);
                v776 = v342;
                int v730 = v340;
                if (!v340) {
                  goto LABEL_493;
                }
                int v343 = 0;
                unsigned int v344 = v143 >> 8;
                unsigned int v345 = 5;
                v760 = v18;
                while (1)
                {
                  int v748 = v343;
                  v817 = &v819;
                  v818 = (void *)0x100000000;
                  unsigned int v346 = v345 + 1;
                  uint64_t v347 = (unsigned int *)v827;
                  uint64_t v348 = *((void *)v827 + v345);
                  if (!v348) {
                    goto LABEL_483;
                  }
                  int v349 = 0;
                  do
                  {
                    unsigned int v350 = v346 + 1;
                    uint64_t v351 = *((void *)v827 + v346);
                    LODWORD(v352) = 1;
                    __p.n128_u32[2] = 1;
                    __p.n128_u64[0] = 0;
                    if (v344 >= 0x41)
                    {
                      uint64_t v352 = *((void *)v827 + v350);
                      unsigned int v350 = v346 + 2;
                    }
                    llvm::readWideAPInt((unint64_t *)v827 + v350, v352, v344, (llvm::APInt *)&v810);
                    if (__p.n128_u32[2] >= 0x41 && __p.n128_u64[0]) {
                      MEMORY[0x263E50080](__p.n128_u64[0], 0x1000C8000313F17);
                    }
                    __p.n128_u64[0] = (unint64_t)v810;
                    __p.n128_u32[2] = v811;
                    unsigned int v346 = v352 + v350;
                    if (v351)
                    {
                      uint64_t v355 = llvm::ConstantInt::get(*((llvm::IntegerType **)a2 + 53), (llvm::APInt *)&__p, v353, v354);
                      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v817, v355);
                      char v342 = v776;
                      goto LABEL_478;
                    }
                    char v342 = v776;
                    if (v344 < 0x41) {
                      LODWORD(v356) = 1;
                    }
                    else {
                      uint64_t v356 = *((void *)v827 + v346++);
                    }
                    llvm::readWideAPInt((unint64_t *)v827 + v346, v356, v344, (llvm::APInt *)&v810);
                    while (__p.n128_u32[2] > 0x40)
                    {
                      v359 = v810;
                      unint64_t v360 = (((unint64_t)__p.n128_u32[2] + 63) >> 3) & 0x3FFFFFF8;
                      while (v360)
                      {
                        unint64_t v361 = *(void *)(__p.n128_u64[0] - 8 + v360);
                        unint64_t v362 = *(void *)((char *)v810 + v360 - 8);
                        v360 -= 8;
                        if (v361 != v362)
                        {
                          if (v361 > v362) {
                            goto LABEL_472;
                          }
                          break;
                        }
                      }
LABEL_471:
                      uint64_t v363 = llvm::ConstantInt::get(*((llvm::IntegerType **)a2 + 53), (llvm::APInt *)&__p, v357, v358);
                      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v817, v363);
                      llvm::APInt::operator++((uint64_t)&__p);
                    }
                    v359 = v810;
                    if (__p.n128_u64[0] <= (unint64_t)v810) {
                      goto LABEL_471;
                    }
LABEL_472:
                    if (v811 >= 0x41 && v359 != 0) {
                      MEMORY[0x263E50080]();
                    }
                    v346 += v356;
LABEL_478:
                    if (__p.n128_u32[2] >= 0x41 && __p.n128_u64[0]) {
                      MEMORY[0x263E50080](__p.n128_u64[0], 0x1000C8000313F17);
                    }
                    ++v349;
                  }
                  while (v349 != v348);
                  uint64_t v347 = (unsigned int *)v827;
LABEL_483:
                  unint64_t v365 = v347[2 * v346];
                  uint64_t v366 = *((void *)a2 + 186);
                  if (v365 >= (*((void *)a2 + 187) - v366) >> 3) {
                    uint64_t v367 = 0;
                  }
                  else {
                    uint64_t v367 = *(void *)(v366 + 8 * v365);
                  }
                  unsigned int v368 = (uint64_t *)v817;
                  if (v818)
                  {
                    uint64_t v369 = 8 * v818;
                    do
                    {
                      uint64_t v370 = *v368++;
                      llvm::SwitchInst::addCase(v342, v370, v367);
                      v369 -= 8;
                    }
                    while (v369);
                    unsigned int v368 = (uint64_t *)v817;
                  }
                  unsigned __int8 v18 = v760;
                  if (v368 != &v819) {
                    free(v368);
                  }
                  unsigned int v345 = v346 + 1;
                  int v343 = v748 + 1;
                  if (v748 + 1 == v730)
                  {
LABEL_493:
                    uint64_t v19 = v738;
                    goto LABEL_802;
                  }
                }
              }
            }
          }
        }
        else
        {
          if (v828[0] < 3u || (v828[0] & 1) == 0)
          {
LABEL_398:
            long long v298 = "Invalid record";
LABEL_399:
            v817 = v298;
            v821[0] = 259;
LABEL_400:
          }
          v738 = v19;
          uint64_t v309 = v18;
          if (v828[0] == 1)
          {
            uint64_t v310 = 0;
          }
          else
          {
            if (*((unsigned char *)a2 + 1712)) {
              unsigned int v483 = v775[0] - *((_DWORD *)v827 + 2);
            }
            else {
              unsigned int v483 = *((_DWORD *)v827 + 2);
            }
          }
          unint64_t v484 = *((unsigned int *)v827 + 4);
          uint64_t v485 = *((void *)a2 + 186);
          if (v484 >= (*((void *)a2 + 187) - v485) >> 3
            || !v308
            || !v310
            || (uint64_t v486 = *(llvm::BasicBlock **)(v485 + 8 * v484)) == 0)
          {
            v817 = "Invalid record";
            v821[0] = 259;
          }
          v732 = (llvm::Type *)(v828[0] + 0x1FFFFFFFDLL);
          unint64_t v487 = operator new(0x48uLL);
          v488 = (llvm::User *)(v487 + 2);
          v487[7] = v487[7] & 0x38000000 | 0x40000000;
          *(void *)unint64_t v487 = 0;
          llvm::SwitchInst::SwitchInst((llvm::SwitchInst *)(v487 + 2), v310, v486, (unint64_t)v732 >> 1, 0);
          v776 = v488;
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)v488);
          if (!((unint64_t)v732 >> 1))
          {
            unsigned __int8 v18 = v309;
            uint64_t v19 = v738;
            std::string v20 = (llvm::Function *)((char *)a2 + 8);
            goto LABEL_822;
          }
          uint64_t v489 = 0;
          unsigned __int8 v18 = v309;
          while (1)
          {
            if (v490) {
              v491 = *((unsigned char *)v490 + 16) == 16 ? v490 : 0;
            }
            else {
              v491 = 0;
            }
            unint64_t v492 = *((unsigned int *)v827 + 2 * (v489 + 4));
            uint64_t v493 = *((void *)a2 + 186);
            if (v492 >= (*((void *)a2 + 187) - v493) >> 3) {
              break;
            }
            if (!v491) {
              break;
            }
            uint64_t v494 = *(void *)(v493 + 8 * v492);
            if (!v494) {
              break;
            }
            llvm::SwitchInst::addCase(v488, (uint64_t)v491, v494);
            v489 += 2;
            if (((unint64_t)v732 & 0x1FFFFFFFELL) == v489) {
              goto LABEL_493;
            }
          }
          llvm::Instruction::~Instruction((llvm::UndefValue **)v488, v491);
          llvm::User::operator delete(v582);
        }
        v817 = "Invalid record";
        v821[0] = 259;
      case 13:
        if (v828[0] <= 3u) {
          goto LABEL_398;
        }
        unint64_t v145 = (*(_DWORD *)v827 - 1);
        uint64_t v146 = *((void *)a2 + 180);
        if (v145 >= (*((void *)a2 + 181) - v146) >> 3) {
          uint64_t v147 = 0;
        }
        else {
          uint64_t v147 = *(void *)(v146 + 8 * v145);
        }
        unint64_t v371 = *((unsigned int *)v827 + 4);
        uint64_t v372 = *((void *)a2 + 186);
        unint64_t v373 = (*((void *)a2 + 187) - v372) >> 3;
        if (v373 <= v371) {
          v782 = 0;
        }
        else {
          v782 = *(llvm::PHINode **)(v372 + 8 * v371);
        }
        uint64_t v409 = *((void *)v827 + 1);
        LODWORD(v789.__r_.__value_.__l.__data_) = 4;
        unint64_t v410 = *((unsigned int *)v827 + 6);
        if (v373 <= v410) {
          v731 = 0;
        }
        else {
          v731 = *(llvm::Type **)(v372 + 8 * v410);
        }
        __int16 v750 = v409;
        if ((v409 & 0x2000) != 0)
        {
          LODWORD(v789.__r_.__value_.__l.__data_) = 5;
          int v414 = *((_DWORD *)v827 + 8);
          if (!v415 || (uint64_t v413 = v415, *(unsigned char *)(v415 + 8) != 14))
          {
            v416 = "Explicit invoke type is not a function type";
            goto LABEL_894;
          }
        }
        else
        {
          uint64_t v413 = 0;
          int v414 = -1;
        }
        v806 = 0;
        v793[0] = 0;
        {
          goto LABEL_564;
        }
        long long v438 = v806;
        uint64_t v439 = *(void *)v806;
        if (!*(void *)v806 || *(unsigned char *)(v439 + 8) != 15)
        {
          v416 = "Callee is not a pointer";
          goto LABEL_894;
        }
        if (v413)
        {
          uint64_t v440 = *(void *)(v439 + 24);
          if (v440 && v440 != v413)
          {
            v416 = "Explicit invoke type does not match pointee type of callee operand";
            goto LABEL_894;
          }
        }
        else
        {
          v566 = v806;
          if (!v567 || (long long v438 = v566, v413 = v567, *(unsigned char *)(v567 + 8) != 14))
          {
            v416 = "Callee is not of pointer to function type";
LABEL_894:
            v817 = v416;
            v821[0] = 259;
          }
        }
        int v568 = v828[0];
        uint64_t v569 = (*(_DWORD *)(v413 + 12) - 1);
        uint64_t data_low = LODWORD(v789.__r_.__value_.__l.__data_);
        if (v828[0] < (v569 + LODWORD(v789.__r_.__value_.__l.__data_)))
        {
          v416 = "Insufficient operands to call";
          goto LABEL_894;
        }
        v741 = v19;
        v817 = &v819;
        v818 = (void *)0x1000000000;
        __p.n128_u64[0] = (unint64_t)v815;
        __p.n128_u64[1] = 0x1000000000;
        v766 = v18;
        uint64_t v713 = (uint64_t)v438;
        uint64_t v717 = v147;
        if (!v569) {
          goto LABEL_912;
        }
        uint64_t v725 = v569;
        uint64_t v588 = 0;
        do
        {
          uint64_t v589 = v588 + 1;
          uint64_t v590 = data_low;
          unsigned int v591 = data_low + v588;
          if (v591 == v828[0])
          {
            v593 = 0;
          }
          else
          {
            if (*((unsigned char *)a2 + 1712)) {
              unsigned int v594 = v775[0] - *((void *)v827 + v591);
            }
            else {
              unsigned int v594 = *((void *)v827 + v591);
            }
          }
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v817, (uint64_t)v593);
          llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, v592);
          if (!*((void *)v817 + v818 - 1))
          {
            LODWORD(v789.__r_.__value_.__l.__data_) = v590 + v588;
            goto LABEL_992;
          }
          ++v588;
          uint64_t data_low = v590;
        }
        while (v725 != v589);
        int v568 = v828[0];
        LODWORD(data_low) = v590 + v589;
LABEL_912:
        LODWORD(v789.__r_.__value_.__l.__data_) = data_low;
        if (*(_DWORD *)(v413 + 8) < 0x100u)
        {
          if (v568 != data_low) {
            goto LABEL_992;
          }
        }
        else if (v568 != data_low)
        {
          while (1)
          {
            *(void *)v790 = 0;
            int v794 = 0;
            {
              break;
            }
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v817, *(uint64_t *)v790);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, v794);
            if (v828[0] == LODWORD(v789.__r_.__value_.__l.__data_)) {
              goto LABEL_986;
            }
          }
LABEL_992:
          v810 = (llvm::Value *)"Invalid record";
          __int16 v813 = 259;
        }
LABEL_986:
        uint64_t v619 = v798;
        if (v798 == v799)
        {
          uint64_t v620 = v798;
        }
        else
        {
          llvm::UpgradeOperandBundles(&v798);
          uint64_t v620 = v798;
          uint64_t v619 = v799;
        }
        __int16 v813 = 257;
        v776 = (llvm::PHINode *)llvm::InvokeInst::Create(v413, v713, (uint64_t)v782, (uint64_t)v731, (uint64_t *)v817, v818, v620, 0xAAAAAAAAAAAAAAABLL * ((v619 - v620) >> 4), (const llvm::Twine *)&v810, 0);
        uint64_t v643 = v798;
        for (uint64_t i = v799;
              i != v643;
              std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::destroy[abi:nn180100]((uint64_t)&v800, i))
        {
          i -= 48;
        }
        uint64_t v799 = v643;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)v776);
        *((_WORD *)v776 + 9) = *((_WORD *)v776 + 9) & 0xF003 | (4 * (v750 & 0x3FF));
        *((void *)v776 + 8) = v717;
        if (*this)
        {
          llvm::Value::deleteValue((void (**)(void))v776, (llvm::Value *)v21);
          int v23 = 1;
        }
        else
        {
          int v23 = 9;
        }
        unsigned __int8 v18 = v766;
        std::string v20 = (llvm::Function *)((char *)a2 + 8);
        v645 = (void *)__p.n128_u64[0];
        uint64_t v19 = v741;
        if ((void *)__p.n128_u64[0] == v815) {
          goto LABEL_807;
        }
        goto LABEL_1163;
      case 15:
        uint64_t v148 = (uint64_t)operator new(0x40uLL);
        *(_DWORD *)(v148 + 20) &= 0x38000000u;
        *(void *)uint64_t v148 = **((void **)a2 + 53) + 1608;
        *(void *)(v148 + 8) = 0;
        *(unsigned char *)(v148 + 16) = 35;
        *(_OWORD *)(v148 + 33) = 0u;
        *(_OWORD *)(v148 + 44) = 0u;
        *(_OWORD *)(v148 + 17) = 0u;
        goto LABEL_742;
      case 16:
        if (v828[0])
        {
          unsigned int v745 = *(_DWORD *)v827;
          if (v149)
          {
            v756 = v18;
            unint64_t v721 = v828[0] - 1;
            v821[0] = 257;
            uint64_t v150 = (llvm::Type *)v149;
            uint64_t v151 = (char *)operator new(0x48uLL);
            unsigned int v152 = (void (**)(void))(v151 + 8);
            *((_DWORD *)v151 + 7) = *((_DWORD *)v151 + 7) & 0x38000000 | 0x40000000;
            v715 = v151;
            *(void *)uint64_t v151 = 0;
            v728 = v150;
            llvm::PHINode::PHINode((llvm::PHINode *)(v151 + 8), v150, v721 >> 1, (const llvm::Twine *)&v817, 0);
            if ((v828[0] & 1) == 0 && !llvm::FPMathOperator::classof((uint64_t)v152))
            {
              llvm::Value::deleteValue(v152, v153);
              v817 = "Invalid phi record";
              v821[0] = 259;
            }
            llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)v152);
            v817 = (void *)1;
            uint64_t v154 = 8;
            unsigned __int8 v18 = v756;
            do
            {
              *(void **)((char *)&v817 + v154) = (void *)-4096;
              v154 += 16;
            }
            while (v154 != 72);
            v776 = (llvm::PHINode *)v152;
            unint64_t v155 = v721 >> 1;
            if (v721 >= 2)
            {
              unsigned int v156 = 1;
              int v157 = 1;
              do
              {
                unint64_t v158 = *((unsigned int *)v827 + 2 * v156 + 2);
                uint64_t v159 = *((void *)a2 + 186);
                if (v158 >= (*((void *)a2 + 187) - v159) >> 3
                  || (int v160 = *(llvm::BasicBlock **)(v159 + 8 * v158)) == 0)
                {
                  llvm::Value::deleteValue((void (**)(void))v776, (llvm::Value *)v21);
                  __p.n128_u64[0] = (unint64_t)"Invalid phi BB";
                  __int16 v816 = 259;
                }
                int v161 = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::find((uint64_t)&v817, *(void *)(v159 + 8 * v158));
                long long v162 = (uint64_t *)((char *)v818 + 16 * v819);
                if (v817) {
                  long long v162 = &v822;
                }
                if (v162 == v161)
                {
                  __p.n128_u64[0] = (unint64_t)v160;
                  __p.n128_u64[1] = (unint64_t)v804;
                  unint64_t v163 = (llvm::BasicBlock *)llvm::MapVector<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *,llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,llvm::SmallVector<std::pair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *>,4u>>::lookup((uint64_t)v830, (uint64_t)&__p);
                  if (!v163)
                  {
                    __p.n128_u64[0] = (unint64_t)"phi.constexpr";
                    __int16 v816 = 259;
                    llvm::BasicBlock::Create();
                  }
                  unint64_t v165 = v18;
                  if (*((unsigned char *)a2 + 1712))
                  {
                  }
                  else
                  {
                    if (v156 == v828[0]) {
                      goto LABEL_900;
                    }
                  }
                  uint64_t v167 = (uint64_t)ValueSigned;
                  if (!ValueSigned)
                  {
LABEL_900:
                    llvm::Value::deleteValue((void (**)(void))v776, v164);
                    llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::erase(MEMORY[0x38] + 72, 24);
                    __p.n128_u64[0] = (unint64_t)"Invalid phi record";
                    __int16 v816 = 259;
                  }
                  llvm::PHINode::addIncoming(v776, ValueSigned, v160);
                  v810 = v160;
                  uint64_t v811 = v167;
                  llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::try_emplace<llvm::Value *>((uint64_t)&__p, (uint64_t)&v817, (uint64_t *)&v810, &v811);
                  unsigned __int8 v18 = v165;
                  unint64_t v155 = v721 >> 1;
                }
                else
                {
                  llvm::PHINode::addIncoming(v776, (llvm::Value *)v161[1], v160);
                }
                BOOL v92 = v155 == v157++;
                v156 += 2;
              }
              while (!v92);
            }
            unsigned int VirtualTypeID = v745;
            if (v828[0])
            {
              int v23 = 9;
              std::string v20 = (llvm::Function *)((char *)a2 + 8);
            }
            else
            {
              unsigned int v168 = *((_DWORD *)v827 + 2 * v828[0] - 2);
              int v169 = v168 & 0x7E | (v168 >> 7) & 1 | -(v168 & 1);
              std::string v20 = (llvm::Function *)((char *)a2 + 8);
              if (v169) {
                v715[25] |= 2 * (_BYTE)v169;
              }
              int v23 = 9;
            }
            if ((v817 & 1) == 0) {
              MEMORY[0x263E500A0](v818, 8);
            }
            goto LABEL_821;
          }
        }
        long long v298 = "Invalid phi record";
        goto LABEL_399;
      case 19:
        if ((v828[0] & 0xFFFFFFFE) != 4) {
          goto LABEL_398;
        }
        unint64_t v170 = *((void *)v827 + 3);
        LODWORD(v810) = *(_DWORD *)v827;
        if ((v170 & 0x40) != 0)
        {
          unint64_t v172 = (llvm::Type *)v171;
        }
        else
        {
          if (!v172)
          {
            uint64_t v173 = "Missing element type for old-style alloca";
LABEL_819:
            v817 = v173;
            v821[0] = 259;
            unint64_t v404 = (_anonymous_namespace_::BitcodeReaderBase *)this;
            goto LABEL_820;
          }
        }
        uint64_t v177 = v19;
        unsigned int v374 = *((_DWORD *)v827 + 2);
        LOWORD(v806) = 0;
        if (*this) {
          goto LABEL_1013;
        }
        if (v172 && v376)
        {
          uint64_t v377 = *((void *)a2 + 54);
          if (v828[0] == 5) {
            long long v378 = (llvm::PHINode *)*((void *)v827 + 4);
          }
          else {
            long long v378 = (llvm::PHINode *)*(unsigned int *)(v377 + 260);
          }
          v784 = v378;
          v817 = v821;
          v818 = v821;
          uint64_t v819 = 4;
          int v820 = 0;
          if (BYTE1(v806))
          {
            v765 = v18;
            unsigned __int8 Alignment = v806;
          }
          else
          {
            if ((llvm::Type::isSized((uint64_t)v172, (llvm::SmallPtrSetImplBase *)&v817) & 1) == 0)
            {
              __p.n128_u64[0] = (unint64_t)"alloca of unsized type";
              __int16 v816 = 259;
            }
            v765 = v18;
            unsigned __int8 Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(v377 + 256), v172, 0);
            LOWORD(v806) = Alignment | 0x100;
          }
          v581 = (char *)operator new(0x68uLL);
          *((_DWORD *)v581 + 13) = *((_DWORD *)v581 + 13) & 0x38000000 | 1;
          *(void *)v581 = 0;
          *((void *)v581 + 1) = 0;
          *((void *)v581 + 2) = 0;
          *((void *)v581 + 3) = v581 + 32;
          __int16 v816 = 257;
          llvm::AllocaInst::AllocaInst((uint64_t)(v581 + 32), (llvm::PointerType **)v172, v784, v376, Alignment, (const llvm::Twine *)&__p, 0);
          *((_WORD *)v581 + 25) = v170 & 0x80 | (((v170 >> 5) & 1) << 6) | *((_WORD *)v581 + 25) & 0xFF3F;
          v776 = (llvm::PHINode *)(v581 + 32);
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)(v581 + 32));
          int v23 = 9;
          unsigned __int8 v18 = v765;
          std::string v20 = (llvm::Function *)((char *)a2 + 8);
          v572 = (uint64_t *)v818;
          uint64_t v19 = v177;
          if (v818 != v817) {
            goto LABEL_886;
          }
          goto LABEL_821;
        }
        v817 = "Invalid record";
        v821[0] = 259;
        uint64_t v518 = (_anonymous_namespace_::BitcodeReaderBase *)this;
        goto LABEL_1012;
      case 20:
        LODWORD(v806) = 0;
        v810 = 0;
        v790[0] = 0;
        {
          goto LABEL_818;
        }
        uint64_t v174 = v806;
        int v175 = v806 + 3;
        if (v828[0] != v806 + 2 && v828[0] != v175) {
          goto LABEL_818;
        }
        unint64_t v176 = (uint64_t *)v810;
        if (*(unsigned char *)(*(void *)v810 + 8) != 15) {
          goto LABEL_538;
        }
        uint64_t v177 = v19;
        if (v828[0] == v175)
        {
          unsigned int v178 = v806 + 1;
          LODWORD(v806) = v806 + 1;
          uint64_t v179 = *((void *)v827 + v174);
          unsigned int VirtualTypeID = v179;
LABEL_759:
          if (!*this)
          {
            LOWORD(v789.__r_.__value_.__l.__data_) = 0;
            if (!*this)
            {
              v817 = v821;
              v818 = v821;
              uint64_t v819 = 4;
              int v820 = 0;
              if (v789.__r_.__value_.__s.__data_[1])
              {
                unsigned __int8 v525 = v789.__r_.__value_.__s.__data_[0];
              }
              else
              {
                if ((llvm::Type::isSized((uint64_t)v180, (llvm::SmallPtrSetImplBase *)&v817) & 1) == 0)
                {
                  __p.n128_u64[0] = (unint64_t)"load of unsized type";
                  __int16 v816 = 259;
                }
                unsigned __int8 v525 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*((void *)a2 + 54) + 256), v180, 1);
                LOWORD(v789.__r_.__value_.__l.__data_) = v525 | 0x100;
              }
              v628 = operator new(0x60uLL);
              uint64_t v629 = (uint64_t)(v628 + 8);
              v628[13] = v628[13] & 0x38000000 | 1;
              *(void *)v628 = 0;
              *((void *)v628 + 1) = 0;
              *((void *)v628 + 2) = 0;
              *((void *)v628 + 3) = v628 + 8;
              __int16 v816 = 257;
              llvm::LoadInst::LoadInst((llvm::UnaryInstruction *)(v628 + 8), v180, (llvm::Value *)v176, (const llvm::Twine *)&__p, *((void *)v827 + v178 + 1) != 0, v525, 0);
              v776 = (llvm::PHINode *)v629;
              llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, v629);
              int v23 = 9;
              if (v818 != v817) {
                free(v818);
              }
              goto LABEL_1050;
            }
          }
          goto LABEL_1013;
        }
        if (v524)
        {
          unint64_t v180 = (llvm::Type *)v524;
          unsigned int v178 = v174;
          goto LABEL_759;
        }
        v587 = "Missing element type for old-style load";
        goto LABEL_898;
      case 23:
        if (v828[0] <= 2u) {
          goto LABEL_398;
        }
        uint64_t v181 = v19;
        unsigned int v182 = *(_DWORD *)v827;
        if (v828[0] == 1)
        {
          unint64_t v184 = 0;
        }
        else
        {
          if (*((unsigned char *)a2 + 1712)) {
            unsigned int v379 = v775[0] - *((_DWORD *)v827 + 2);
          }
          else {
            unsigned int v379 = *((_DWORD *)v827 + 2);
          }
        }
        unsigned int VirtualTypeID = *((_DWORD *)v827 + 4);
        if (!v183) {
          goto LABEL_800;
        }
        if (!v184) {
          goto LABEL_800;
        }
        unsigned int v381 = (llvm::Type *)v380;
        if (!v380) {
          goto LABEL_800;
        }
        uint64_t v382 = operator new(0x60uLL);
        v382[13] = v382[13] & 0x38000000 | 1;
        *(void *)uint64_t v382 = 0;
        *((void *)v382 + 1) = 0;
        *((void *)v382 + 2) = 0;
        *((void *)v382 + 3) = v382 + 8;
        v821[0] = 257;
        unint64_t v383 = v184;
        uint64_t v148 = (uint64_t)(v382 + 8);
        llvm::UnaryInstruction::UnaryInstruction((llvm::UnaryInstruction *)(v382 + 8), v381, 60, v383, 0);
        llvm::Value::setName((llvm::Value *)v148, (const llvm::Twine *)&v817);
        goto LABEL_511;
      case 24:
      case 44:
        v790[0] = 0;
        v810 = 0;
        v806 = 0;
        LODWORD(v789.__r_.__value_.__l.__data_) = 0;
        v793[0] = 0;
        {
          goto LABEL_818;
        }
        if (v26 == 44)
        {
          {
            goto LABEL_818;
          }
          unsigned int v45 = v790[0];
LABEL_545:
          if (v828[0] == v45 + 2)
          {
            uint64_t v234 = v19;
            unint64_t v407 = (uint64_t *)v810;
            unint64_t v408 = v806;
            if (!*this)
            {
              LOWORD(v794) = 0;
              if (!*this)
              {
                v817 = v821;
                v818 = v821;
                uint64_t v819 = 4;
                int v820 = 0;
                if (BYTE1(v794))
                {
                  unsigned __int8 v783 = v794;
                }
                else
                {
                  if ((llvm::Type::isSized(*v407, (llvm::SmallPtrSetImplBase *)&v817) & 1) == 0)
                  {
                    __p.n128_u64[0] = (unint64_t)"store of unsized type";
                    __int16 v816 = 259;
                  }
                  unsigned __int8 v783 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*((void *)a2 + 54) + 256), (llvm::Type *)*v407, 1);
                  LOWORD(v794) = v783 | 0x100;
                }
                v606 = operator new(0x80uLL);
                uint64_t v607 = (uint64_t)(v606 + 16);
                v606[21] = v606[21] & 0x38000000 | 2;
                *(void *)v606 = 0;
                *((void *)v606 + 1) = 0;
                *((void *)v606 + 2) = 0;
                *((void *)v606 + 3) = v606 + 16;
                *((void *)v606 + 4) = 0;
                *((void *)v606 + 5) = 0;
                *((void *)v606 + 6) = 0;
                *((void *)v606 + 7) = v606 + 16;
                llvm::StoreInst::StoreInst((uint64_t)(v606 + 16), (uint64_t)v407, (uint64_t)v408, *((void *)v827 + v45 + 1) != 0, v783, 0, 1, 0);
                v776 = (llvm::PHINode *)v607;
                llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, v607);
                int v23 = 9;
                v572 = (uint64_t *)v818;
                uint64_t v19 = v234;
                std::string v20 = (llvm::Function *)((char *)a2 + 8);
                if (v818 != v817) {
                  goto LABEL_886;
                }
                goto LABEL_821;
              }
            }
LABEL_78:
            v776 = 0;
            int v23 = 1;
            uint64_t v19 = v234;
            goto LABEL_821;
          }
LABEL_818:
          uint64_t v173 = "Invalid record";
          goto LABEL_819;
        }
        v793[0] = v305;
        unsigned int v307 = v790[0];
        if (v828[0] == v790[0])
        {
          v810 = 0;
        }
        else
        {
          if (*((unsigned char *)a2 + 1712)) {
            unsigned int v406 = v775[0] - *((void *)v827 + v790[0]);
          }
          else {
            unsigned int v406 = *((void *)v827 + v790[0]);
          }
          if (v810)
          {
            unsigned int v45 = v307 + 1;
            v790[0] = v307 + 1;
            goto LABEL_545;
          }
        }
LABEL_550:
        unint64_t v405 = "Invalid record";
LABEL_551:
        v817 = v405;
        v821[0] = 259;
      case 26:
        LODWORD(v806) = 0;
        v810 = 0;
        v790[0] = 0;
        {
          goto LABEL_818;
        }
        int v185 = v828[0];
        unsigned int v186 = v806;
        if (v806 != v828[0])
        {
          uint64_t v384 = (uint64_t *)v810;
          size_t v385 = *(llvm::Type **)v810;
          __p.n128_u64[0] = (unint64_t)v815;
          __p.n128_u64[1] = 0x400000000;
          unsigned int VirtualTypeID = v790[0];
          while (1)
          {
            if ((*((_DWORD *)v385 + 2) & 0xFE) != 0x10)
            {
              LODWORD(v806) = v186;
              v817 = "EXTRACTVAL: Invalid type";
              v821[0] = 259;
            }
            size_t v386 = v19;
            unint64_t v387 = *((void *)v827 + v186);
            if (HIDWORD(v387))
            {
              LODWORD(v806) = v186;
              std::string v523 = "Invalid value";
              goto LABEL_868;
            }
            if (*((_DWORD *)v385 + 2) == 16)
            {
              if (v387 >= *((unsigned int *)v385 + 3))
              {
                LODWORD(v806) = v186;
                std::string v523 = "EXTRACTVAL: Invalid struct index";
                goto LABEL_868;
              }
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, *((void *)v827 + v186));
              size_t v385 = *(llvm::Type **)(*((void *)v385 + 2) + 8 * v387);
              unsigned int v388 = VirtualTypeID;
              unint64_t v389 = a2;
              unsigned int v390 = v387;
            }
            else
            {
              if (v387 >= *((void *)v385 + 4))
              {
                LODWORD(v806) = v186;
                std::string v523 = "EXTRACTVAL: Invalid array index";
LABEL_868:
                v817 = v523;
                v821[0] = 259;
              }
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, *((void *)v827 + v186));
              size_t v385 = (llvm::Type *)**((void **)v385 + 2);
              unsigned int v388 = VirtualTypeID;
              unint64_t v389 = a2;
              unsigned int v390 = 0;
            }
            ++v186;
            uint64_t v19 = v386;
            if (v185 == v186)
            {
              LODWORD(v806) = v185;
              v821[0] = 257;
              v776 = llvm::ExtractValueInst::Create(v384, (unsigned int *)__p.n128_u64[0], __p.n128_u32[2], (const llvm::Twine *)&v817, 0);
              llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)v776);
              int v23 = 9;
              std::string v20 = (llvm::Function *)((char *)a2 + 8);
              v572 = (uint64_t *)__p.n128_u64[0];
              BOOL v573 = __p.n128_u64[0] == (void)v815;
              goto LABEL_869;
            }
          }
        }
        uint64_t v187 = "EXTRACTVAL: Invalid instruction with 0 indices";
        goto LABEL_537;
      case 27:
        v790[0] = 0;
        v810 = 0;
        LODWORD(v789.__r_.__value_.__l.__data_) = 0;
        {
          goto LABEL_818;
        }
        v806 = 0;
        v793[0] = 0;
        {
          goto LABEL_818;
        }
        int v188 = v828[0];
        unsigned int v189 = v790[0];
        if (v790[0] == v828[0])
        {
          uint64_t v187 = "INSERTVAL: Invalid instruction with 0 indices";
LABEL_537:
          v817 = v187;
          v821[0] = 259;
          unint64_t v404 = (_anonymous_namespace_::BitcodeReaderBase *)this;
          std::string v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_820:
        }
        __p.n128_u64[0] = (unint64_t)v815;
        __p.n128_u64[1] = 0x400000000;
        uint64_t v477 = (uint64_t *)v810;
        v478 = *(llvm::Type **)v810;
        do
        {
          if ((*((_DWORD *)v478 + 2) & 0xFE) != 0x10)
          {
            v790[0] = v189;
            long long v482 = "INSERTVAL: Invalid type";
LABEL_864:
            v817 = v482;
            v821[0] = 259;
          }
          unint64_t v479 = v19;
          unint64_t v480 = *((void *)v827 + v189);
          if (HIDWORD(v480))
          {
            v790[0] = v189;
            uint64_t v571 = "Invalid value";
            goto LABEL_922;
          }
          if (*((_DWORD *)v478 + 2) == 16)
          {
            if (v480 < *((unsigned int *)v478 + 3))
            {
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, *((void *)v827 + v189));
              v481 = (llvm::Type **)(*((void *)v478 + 2) + 8 * v480);
              goto LABEL_663;
            }
            v790[0] = v189;
            uint64_t v571 = "INSERTVAL: Invalid struct index";
LABEL_922:
            v817 = v571;
            v821[0] = 259;
          }
          if (v480 >= *((void *)v478 + 4))
          {
            v790[0] = v189;
            uint64_t v571 = "INSERTVAL: Invalid array index";
            goto LABEL_922;
          }
          llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, *((void *)v827 + v189));
          v481 = (llvm::Type **)*((void *)v478 + 2);
LABEL_663:
          v478 = *v481;
          ++v189;
          uint64_t v19 = v479;
        }
        while (v188 != v189);
        v790[0] = v188;
        if (v478 != *(llvm::Type **)v806)
        {
          long long v482 = "Inserted value type doesn't match aggregate type";
          goto LABEL_864;
        }
        v821[0] = 257;
        v605 = llvm::InsertValueInst::Create(v477, (uint64_t)v806, __p.n128_u64[0], __p.n128_u32[2], (const llvm::Twine *)&v817, 0);
        unsigned int VirtualTypeID = v789.__r_.__value_.__l.__data_;
        v776 = (llvm::PHINode *)v605;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)v605);
        int v23 = 9;
        std::string v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_923:
        v572 = (uint64_t *)__p.n128_u64[0];
        v544 = v815;
LABEL_924:
        if (v572 != v544) {
LABEL_886:
        }
          free(v572);
LABEL_821:
        if (v23 == 9)
        {
LABEL_822:
          v550 = v804;
          if (!v804)
          {
            llvm::Value::deleteValue((void (**)(void))v776, (llvm::Value *)v21);
            char v210 = "Invalid instruction with no BB";
LABEL_826:
            v817 = v210;
            v821[0] = 259;
          }
          if (v798 != v799)
          {
            llvm::Value::deleteValue((void (**)(void))v776, (llvm::Value *)v21);
            char v210 = "Operand bundles found with no consumer";
            goto LABEL_826;
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)v804 + 40, (uint64_t)v776);
          uint64_t v553 = *((void *)v550 + 5);
          *((void *)v776 + 3) = v553;
          *((void *)v776 + 4) = (char *)v550 + 40;
          *(void *)(v553 + 8) = (char *)v776 + 24;
          *((void *)v550 + 5) = (char *)v776 + 24;
          if (*((unsigned __int8 *)v776 + 16) - 29 <= 0xA)
          {
            ++v803;
            uint64_t v554 = *((void *)a2 + 186);
            if (v803 >= (unint64_t)((*((void *)a2 + 187) - v554) >> 3)) {
              v555 = 0;
            }
            else {
              v555 = *(llvm::BasicBlock **)(v554 + 8 * v803);
            }
            v804 = v555;
          }
          if (*(unsigned char *)(*(void *)v776 + 8) == 7)
          {
            int v23 = 0;
          }
          else
          {
            llvm::BitcodeReaderValueList::assignValue(v773, v776, v775[0], VirtualTypeID, this, v552);
            int v23 = *this != 0;
            ++v775[0];
          }
        }
LABEL_827:
        if (v824)
        {
          v551 = v823;
          v823 = 0;
          if (v551) {
            (*((void (**)(void **))*v551 + 1))(v551);
          }
        }
LABEL_17:
        if (v826)
        {
          BOOL v24 = v825;
          v825 = 0;
          if (v24) {
            (*((void (**)(void **))*v24 + 1))(v24);
          }
        }
        if (!v23 || v23 == 4) {
          continue;
        }
        if (v23 == 7)
        {
          if (v798 != v799)
          {
            v691 = "Operand bundles found with no consumer";
            goto LABEL_1187;
          }
          uint64_t v692 = *((void *)a2 + 90);
          uint64_t v693 = *(void *)(v692 - 16);
          if (v693 && *(unsigned char *)(v693 + 16) == 21 && !*(void *)(v693 + 24))
          {
            unint64_t v706 = (unint64_t)(v692 - *(void *)v773) >> 5;
            for (unsigned int j = v769 >> 5; v706 != j; ++j)
            {
              uint64_t v708 = *(void *)(*(void *)v773 + 32 * j + 16);
              if (v708 && *(unsigned char *)(v708 + 16) == 21 && !*(void *)(v708 + 24))
              {
                v709 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v708, (llvm::Type *)v21);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v708, v709, (llvm::Value *)1, v710);
                llvm::Value::~Value((llvm::Value *)v708, v711);
                MEMORY[0x263E500B0]();
              }
            }
            v691 = "Never resolved value found in function";
LABEL_1187:
            v817 = v691;
            v821[0] = 259;
          }
          if (*(_DWORD *)(*((void *)a2 + 97) + 24) >= 2u)
          {
            v691 = "Invalid function metadata: outgoing forward refs";
            goto LABEL_1187;
          }
          v694 = v19;
          if (v832)
          {
            v695 = (char *)v831;
            v696 = (char *)v831 + 24 * v832;
            do
            {
              v698 = *(llvm::BasicBlock **)v695;
              v697 = (llvm::BasicBlock *)*((void *)v695 + 1);
              v699 = (llvm::BasicBlock *)*((void *)v695 + 2);
              v700 = operator new(0x60uLL);
              v700[13] = v700[13] & 0x38000000 | 1;
              *(void *)v700 = 0;
              *((void *)v700 + 1) = 0;
              *((void *)v700 + 2) = 0;
              *((void *)v700 + 3) = v700 + 8;
              llvm::BranchInst::BranchInst((llvm::BranchInst *)(v700 + 8), v697, v699);
              v701 = (void *)*((void *)v698 + 5);
              if (v701 == (void *)((char *)v698 + 40))
              {
                v704 = 0;
              }
              else
              {
                v702 = (llvm::Instruction *)(v701 - 3);
                if (v701) {
                  v703 = v701 - 3;
                }
                else {
                  v703 = 0;
                }
                if (*((unsigned __int8 *)v703 + 16) - 29 >= 0xB) {
                  v704 = 0;
                }
                else {
                  v704 = v702;
                }
              }
              llvm::Instruction::replaceSuccessorWith(v704, v697, v699);
              llvm::BasicBlock::replacePhiUsesWith((uint64_t)v697, v698, v699);
              llvm::BasicBlock::moveBefore(v699, v697);
              v695 += 24;
            }
            while (v695 != v696);
          }
          std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::resize(v773, (v769 >> 5));
          llvm::SmallVectorImpl<llvm::TrackingMDRef>::resizeImpl<false>(*((void *)a2 + 97), v770);
          v705 = (void *)*((void *)a2 + 186);
          *v771 = 0;
          *((void *)a2 + 187) = 0;
          *((void *)a2 + 188) = 0;
          if (v705) {
            operator delete(v705);
          }
          *this = 0;
          uint64_t v19 = v694;
        }
        if (v827 != v19) {
          free(v827);
        }
        v827 = &v798;
        std::vector<llvm::OperandBundleDefT<llvm::Value *>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v827);
        if (v802) {
          llvm::MetadataTracking::untrack((uint64_t)&v802, (uint64_t)v802);
        }
        if (v831 != v18) {
          free(v831);
        }
        if ((v830[0] & 1) == 0) {
          MEMORY[0x263E500A0](v830[1], 8);
        }
        return;
      case 29:
        unint64_t v112 = v19;
        LODWORD(v806) = 0;
        __p.n128_u64[0] = 0;
        v810 = 0;
        v790[0] = 0;
        LODWORD(v789.__r_.__value_.__l.__data_) = 0;
        {
          goto LABEL_270;
        }
        int v190 = (int)v806;
        if (v828[0] == v806) {
          goto LABEL_270;
        }
        uint64_t v191 = (llvm::Value *)__p.n128_u64[0];
        unsigned int v192 = v790[0];
        unsigned int v193 = *((unsigned char *)a2 + 1712)
             ? v775[0] - *((void *)v827 + v806)
             : *((void *)v827 + v806);
        if (!v194) {
          goto LABEL_270;
        }
        uint64_t v195 = v194;
        LODWORD(v806) = v190 + 1;
        {
          goto LABEL_270;
        }
        unint64_t v196 = *(llvm::Type **)v810;
        if (*(void *)v810 && (*((_DWORD *)v196 + 2) & 0xFE) == 0x12) {
          unint64_t v196 = (llvm::Type *)*((void *)v196 + 3);
        }
        if (v196 == (llvm::Type *)(**((void **)a2 + 53) + 1920))
        {
          v752 = v810;
          unsigned int v785 = v192;
          v821[0] = 257;
          v574 = operator new(0xA0uLL);
          v575 = v574;
          uint64_t v576 = 0;
          uint64_t v577 = (uint64_t)(v574 + 24);
          v574[29] = v574[29] & 0x38000000 | 3;
          do
          {
            v578 = &v574[v576];
            void *v578 = 0;
            v578[1] = 0;
            v578[2] = 0;
            v578[3] = v577;
            v576 += 8;
          }
          while (v576 != 24);
          llvm::SelectInst::SelectInst((llvm::SelectInst *)(v574 + 24), v752, v191, v195, (const llvm::Twine *)&v817, 0);
          unsigned int VirtualTypeID = v785;
          v776 = (llvm::PHINode *)v577;
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, v577);
          uint64_t v579 = v806;
          if (v828[0] > v806 && llvm::FPMathOperator::classof((uint64_t)v776))
          {
            int v580 = *((void *)v827 + v579) & 0x7E | (*((void *)v827 + v579) >> 7) & 1 | -(*((void *)v827 + v579) & 1);
            if (v580) {
              *((unsigned char *)v575 + 113) |= 2 * (_BYTE)v580;
            }
            int v23 = 9;
            uint64_t v19 = v112;
            std::string v20 = (llvm::Function *)((char *)a2 + 8);
            goto LABEL_821;
          }
LABEL_156:
          int v23 = 9;
          uint64_t v19 = v112;
          std::string v20 = (llvm::Function *)((char *)a2 + 8);
          goto LABEL_821;
        }
LABEL_233:
        uint64_t v197 = "Invalid type for value";
        goto LABEL_271;
      case 31:
        if (v828[0] <= 1u) {
          goto LABEL_398;
        }
        v198 = v19;
        unsigned int v199 = *(_DWORD *)v827;
        if (v828[0] == 1 {
          || ((uint64_t v391 = v200, *((unsigned char *)a2 + 1712))
        }
            ? (unsigned int v392 = v775[0] - *((_DWORD *)v827 + 2))
            : (unsigned int v392 = *((_DWORD *)v827 + 2)),
        {
          v817 = "Invalid record";
          v821[0] = 259;
        }
        uint64_t v395 = (v828[0] - 2);
        unint64_t v396 = operator new(0x48uLL);
        uint64_t v397 = (uint64_t)(v396 + 2);
        v396[7] = v396[7] & 0x38000000 | 0x40000000;
        *(void *)unint64_t v396 = 0;
        llvm::IndirectBrInst::IndirectBrInst((llvm::IndirectBrInst *)(v396 + 2), v394, v395, 0);
        v776 = (llvm::PHINode *)v397;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, v397);
        if (!v395)
        {
          uint64_t v19 = v198;
LABEL_802:
          std::string v20 = (llvm::Function *)((char *)a2 + 8);
          goto LABEL_822;
        }
        uint64_t v398 = 0;
        uint64_t v19 = v198;
        std::string v20 = (llvm::Function *)((char *)a2 + 8);
        while (1)
        {
          unint64_t v399 = *((unsigned int *)v827 + 2 * (v398 + 2));
          uint64_t v400 = *((void *)a2 + 186);
          if (v399 >= (*((void *)a2 + 187) - v400) >> 3) {
            break;
          }
          uint64_t v21 = *(void *)(v400 + 8 * v399);
          if (!v21) {
            break;
          }
          llvm::IndirectBrInst::addDestination(v776, (llvm::BasicBlock *)v21);
          if (v395 == ++v398) {
            goto LABEL_822;
          }
        }
        llvm::Instruction::~Instruction((llvm::UndefValue **)v776, (llvm::Type *)v21);
        llvm::User::operator delete(v532);
LABEL_253:
        char v210 = "Invalid record";
        goto LABEL_826;
      case 33:
        if (!v201) {
          goto LABEL_398;
        }
        uint64_t v202 = v201;
        v796 = v802;
        if (v802) {
          llvm::MetadataTracking::track((uint64_t)&v796, (uint64_t)v802, 2);
        }
        llvm::TrackingMDRef::operator=((uint64_t *)(v202 + 48), &v796);
        uint64_t v21 = (uint64_t)v796;
        if (!v796) {
          goto LABEL_243;
        }
        unsigned int v203 = &v796;
        goto LABEL_242;
      case 34:
        if (v828[0] <= 2u) {
          goto LABEL_398;
        }
        unint64_t v204 = (*(_DWORD *)v827 - 1);
        uint64_t v205 = *((void *)a2 + 180);
        v757 = v18;
        if (v204 >= (*((void *)a2 + 181) - v205) >> 3) {
          uint64_t v206 = 0;
        }
        else {
          uint64_t v206 = *(void *)(v205 + 8 * v204);
        }
        uint64_t v401 = 2;
        LODWORD(v789.__r_.__value_.__l.__data_) = 2;
        uint64_t v402 = *((void *)v827 + 1);
        if ((v402 & 0x20000) != 0)
        {
          uint64_t v401 = 3;
          LODWORD(v789.__r_.__value_.__l.__data_) = 3;
          int v403 = *((_DWORD *)v827 + 4) & 0x7E | (*((_DWORD *)v827 + 4) >> 7) & 1 | -(*((_DWORD *)v827 + 4) & 1);
          if (!v403)
          {
            v817 = "Fast math flags indicator set for call with no FMF";
            v821[0] = 259;
            uint64_t v515 = (_anonymous_namespace_::BitcodeReaderBase *)this;
            goto LABEL_919;
          }
        }
        else
        {
          int v403 = 0;
        }
        int v749 = v403;
        if ((v402 & 0x8000) != 0)
        {
          LODWORD(v789.__r_.__value_.__l.__data_) = v401 + 1;
          uint64_t v412 = *((void *)v827 + v401);
          if (!v417 || (uint64_t v411 = v417, *(unsigned char *)(v417 + 8) != 14))
          {
            unsigned int v418 = "Explicit call type is not a function type";
            goto LABEL_918;
          }
        }
        else
        {
          uint64_t v411 = 0;
          LODWORD(v412) = -1;
        }
        v806 = 0;
        v793[0] = 0;
        {
          unsigned int v418 = "Invalid record";
LABEL_918:
          v817 = v418;
          v821[0] = 259;
          uint64_t v515 = (_anonymous_namespace_::BitcodeReaderBase *)this;
          std::string v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_919:
        }
        uint64_t v461 = *(void *)v806;
        if (!*(void *)v806 || *(unsigned char *)(v461 + 8) != 15)
        {
          unsigned int v418 = "Callee is not a pointer type";
          goto LABEL_918;
        }
        v722 = v806;
        if (v411)
        {
          uint64_t v462 = *(void *)(v461 + 24);
          if (v462 && v462 != v411)
          {
            unsigned int v418 = "Explicit call type does not match pointee type of callee operand";
            goto LABEL_918;
          }
        }
        else
        {
          if (!v583 || (uint64_t v411 = v583, *(unsigned char *)(v583 + 8) != 14))
          {
            unsigned int v418 = "Callee is not of pointer to function type";
            goto LABEL_918;
          }
        }
        int v584 = v828[0];
        v585 = (llvm::PHINode *)(*(_DWORD *)(v411 + 12) - 1);
        uint64_t v586 = LODWORD(v789.__r_.__value_.__l.__data_);
        if (v828[0] < (v585 + LODWORD(v789.__r_.__value_.__l.__data_)))
        {
          unsigned int v418 = "Insufficient operands to call";
          goto LABEL_918;
        }
        int v734 = v412;
        v742 = v19;
        uint64_t v718 = v206;
        v817 = &v819;
        v818 = (void *)0x1000000000;
        __p.n128_u64[0] = (unint64_t)v815;
        __p.n128_u64[1] = 0x1000000000;
        v786 = v585;
        if (!v585) {
          goto LABEL_941;
        }
        uint64_t v595 = 0;
        while (1)
        {
          v596 = (llvm::PHINode *)(v595 + 1);
          uint64_t v597 = v586;
          unsigned int v598 = v586 + v595;
          v600 = *(llvm::Type **)(*(void *)(v411 + 16) + 8 * v595 + 8);
          if (*((unsigned char *)v600 + 8) != 8) {
            break;
          }
          unint64_t v601 = *((unsigned int *)v827 + 2 * v598);
          uint64_t v602 = *((void *)a2 + 186);
          if (v601 >= (*((void *)a2 + 187) - v602) >> 3) {
            goto LABEL_933;
          }
          v603 = *(llvm::MCAsmLexer **)(v602 + 8 * v601);
LABEL_938:
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v817, (uint64_t)v603);
          llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, v599);
          if (!*((void *)v817 + v818 - 1))
          {
            LODWORD(v789.__r_.__value_.__l.__data_) = v597 + v595;
            goto LABEL_1028;
          }
          ++v595;
          uint64_t v586 = v597;
          if (v786 == v596)
          {
            int v584 = v828[0];
            LODWORD(v586) = v597 + v596;
LABEL_941:
            LODWORD(v789.__r_.__value_.__l.__data_) = v586;
            if (*(_DWORD *)(v411 + 8) < 0x100u)
            {
              if (v584 != v586) {
                goto LABEL_1028;
              }
            }
            else if (v584 != v586)
            {
              while (1)
              {
                *(void *)v790 = 0;
                int v794 = 0;
                {
                  break;
                }
                llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v817, *(uint64_t *)v790);
                llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, v794);
                if (v828[0] == LODWORD(v789.__r_.__value_.__l.__data_)) {
                  goto LABEL_1020;
                }
              }
LABEL_1028:
              v810 = (llvm::Value *)"Invalid record";
              __int16 v813 = 259;
            }
LABEL_1020:
            uint64_t v630 = v798;
            if (v798 == v799)
            {
              uint64_t v631 = v798;
            }
            else
            {
              llvm::UpgradeOperandBundles(&v798);
              uint64_t v631 = v798;
              uint64_t v630 = v799;
            }
            __int16 v813 = 257;
            v776 = (llvm::PHINode *)llvm::CallInst::Create(v411, (uint64_t)v722, (uint64_t *)v817, v818, v631, 0xAAAAAAAAAAAAAAABLL * ((v630 - v631) >> 4), (const llvm::Twine *)&v810, 0);
            uint64_t v646 = v798;
            for (uint64_t k = v799;
                  k != v646;
                  std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::destroy[abi:nn180100]((uint64_t)&v800, k))
            {
              k -= 48;
            }
            uint64_t v799 = v646;
            llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)v776);
            __int16 v648 = v402 & 1;
            if ((v402 & 0x4000) != 0) {
              __int16 v648 = 2;
            }
            if ((v402 & 0x10000) != 0) {
              __int16 v648 = 3;
            }
            *((_WORD *)v776 + 9) = v648 & 0xF003 | (4 * ((v402 >> 1) & 0x3FF)) | *((_WORD *)v776 + 9) & 0xF000;
            *((void *)v776 + 8) = v718;
            if (*this)
            {
              llvm::Value::deleteValue((void (**)(void))v776, (llvm::Value *)v21);
              int v23 = 1;
            }
            else
            {
              if (v749)
              {
                if (!llvm::FPMathOperator::classof((uint64_t)v776))
                {
                  v810 = (llvm::Value *)"Fast-math-flags specified for call without floating-point scalar or vector return type";
                  __int16 v813 = 259;
                }
                *((unsigned char *)v776 + 17) |= 2 * (_BYTE)v749;
              }
              int v23 = 9;
            }
            if ((void *)__p.n128_u64[0] != v815) {
              free((void *)__p.n128_u64[0]);
            }
            if (v817 != &v819) {
              free(v817);
            }
            unsigned __int8 v18 = v757;
            uint64_t v19 = v742;
LABEL_1122:
            std::string v20 = (llvm::Function *)((char *)a2 + 8);
            goto LABEL_821;
          }
        }
        if (v598 != v828[0])
        {
          if (*((unsigned char *)a2 + 1712)) {
            unsigned int v604 = v775[0] - *((void *)v827 + v598);
          }
          else {
            unsigned int v604 = *((void *)v827 + v598);
          }
          goto LABEL_938;
        }
LABEL_933:
        v603 = 0;
        goto LABEL_938;
      case 35:
        if (!v207 || v828[0] <= 3u) {
          goto LABEL_398;
        }
        uint64_t v208 = v207;
        int v779 = v828[0] == 5 && *((void *)v827 + 4) != 0;
        uint64_t v448 = v19;
        unsigned int v449 = *(_DWORD *)v827;
        unsigned int v450 = *((_DWORD *)v827 + 2);
        int v451 = *((_DWORD *)v827 + 4);
        int v452 = *((_DWORD *)v827 + 6);
        if (v451)
        {
          MetadataFwdRefOrLoad = llvm::MetadataLoader::MetadataLoaderImpl::getMetadataFwdRefOrLoad(*((llvm::MetadataLoader::MetadataLoaderImpl **)a2 + 97), v451 - 1);
          if (!MetadataFwdRefOrLoad
            || (uint64_t v454 = (uint64_t)MetadataFwdRefOrLoad, (llvm::MDNode::classof(MetadataFwdRefOrLoad) & 1) == 0))
          {
            v817 = "Invalid record";
            v821[0] = 259;
          }
        }
        else
        {
          uint64_t v454 = 0;
        }
        v763 = v18;
        if (v452)
        {
          unsigned int v506 = llvm::MetadataLoader::MetadataLoaderImpl::getMetadataFwdRefOrLoad(*((llvm::MetadataLoader::MetadataLoaderImpl **)a2 + 97), v452 - 1);
          if (!v506 || (uint64_t v507 = (uint64_t)v506, (llvm::MDNode::classof(v506) & 1) == 0))
          {
            v817 = "Invalid record";
            v821[0] = 259;
          }
        }
        else
        {
          uint64_t v507 = 0;
        }
        uint64_t v520 = *(void *)(v454 + 8);
        v521 = (void *)(v520 & 0xFFFFFFFFFFFFFFF8);
        if ((v520 & 4) != 0) {
          v521 = (void *)*v521;
        }
        Impl = llvm::DILocation::getImpl(v521, v449, v450, v454, v507, v779, 0, 1);
        v817 = Impl;
        if (Impl) {
          llvm::MetadataTracking::track((uint64_t)&v817, (uint64_t)Impl, 2);
        }
        llvm::TrackingMDRef::operator=((uint64_t *)&v802, (unsigned __int8 **)&v817);
        unsigned __int8 v18 = v763;
        uint64_t v19 = v448;
        std::string v20 = (llvm::Function *)((char *)a2 + 8);
        if (v817) {
          llvm::MetadataTracking::untrack((uint64_t)&v817, (uint64_t)v817);
        }
        v795 = v802;
        if (v802) {
          llvm::MetadataTracking::track((uint64_t)&v795, (uint64_t)v802, 2);
        }
        llvm::TrackingMDRef::operator=((uint64_t *)(v208 + 48), &v795);
        uint64_t v21 = (uint64_t)v795;
        if (!v795) {
          goto LABEL_243;
        }
        unsigned int v203 = &v795;
LABEL_242:
        llvm::MetadataTracking::untrack((uint64_t)v203, v21);
LABEL_243:
        int v23 = 4;
        goto LABEL_827;
      case 36:
        if (v828[0] != 2) {
          goto LABEL_398;
        }
        __int16 v209 = 4;
        switch(*(_DWORD *)v827)
        {
          case 0:
          case 1:
          case 2:
            goto LABEL_253;
          case 3:
            goto LABEL_737;
          case 4:
            __int16 v209 = 5;
            goto LABEL_737;
          case 5:
            __int16 v209 = 6;
            goto LABEL_737;
          default:
            __int16 v209 = 7;
LABEL_737:
            unint64_t v519 = *((void *)v827 + 1);
            if ((*((void *)v827 + 1) & 0xFFFFFFFELL) != 0)
            {
              if (*((void *)a2 + 226) <= v519) {
                LOBYTE(v519) = 1;
              }
              else {
                LOBYTE(v519) = *(unsigned char *)(*((void *)a2 + 225) + v519);
              }
            }
            uint64_t v148 = (uint64_t)operator new(0x40uLL);
            *(_DWORD *)(v148 + 20) &= 0x38000000u;
            *(void *)uint64_t v148 = **((void **)a2 + 53) + 1608;
            *(void *)(v148 + 8) = 0;
            *(unsigned char *)(v148 + 16) = 63;
            *(_OWORD *)(v148 + 17) = 0u;
            *(_OWORD *)(v148 + 33) = 0u;
            *(_OWORD *)(v148 + 44) = 0u;
            *(_WORD *)(v148 + 18) = v209;
            *(unsigned char *)(v148 + 60) = v519;
            break;
        }
        goto LABEL_742;
      case 37:
        unsigned int v211 = v828[0];
        LODWORD(v810) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v806) = 0;
        {
          goto LABEL_818;
        }
        char v212 = (uint64_t *)__p.n128_u64[0];
        if (*(unsigned char *)(*(void *)__p.n128_u64[0] + 8) == 15)
        {
          unint64_t v213 = v19;
          int v216 = (int)v810;
          if (v828[0] != v810)
          {
            unsigned int v217 = *((unsigned char *)a2 + 1712)
                 ? v775[0] - *((void *)v827 + v810)
                 : *((void *)v827 + v810);
            if (v218)
            {
              if (v828[0] == v216 + 1 {
                || (*((unsigned char *)a2 + 1712)
              }
                  ? (unsigned int v219 = v775[0] - *((void *)v827 + (v216 + 1)))
                  : (unsigned int v219 = *((void *)v827 + (v216 + 1))),
                    (v746 = v218,
              {
LABEL_269:
                v817 = "Invalid record";
                v821[0] = 259;
              }
              v729 = v220;
              uint64_t v221 = *((void *)v827 + (v216 + 3));
              switch((int)v221)
              {
                case 0:
                case 1:
                  goto LABEL_269;
                case 2:
                  goto LABEL_1099;
                case 3:
                  LODWORD(v221) = 4;
                  goto LABEL_1099;
                case 4:
                  LODWORD(v221) = 5;
                  goto LABEL_1099;
                case 5:
                  LODWORD(v221) = 6;
                  goto LABEL_1099;
                default:
                  LODWORD(v221) = 7;
LABEL_1099:
                  int v727 = v221;
                  unint64_t v788 = *((void *)v827 + (v216 + 4));
                  if ((*((void *)v827 + (v216 + 4)) & 0xFFFFFFFELL) != 0)
                  {
                    if (*((void *)a2 + 226) <= v788) {
                      LOBYTE(v788) = 1;
                    }
                    else {
                      LOBYTE(v788) = *(unsigned char *)(*((void *)a2 + 225) + v788);
                    }
                  }
                  if (*this)
                  {
                    v776 = 0;
                    int v23 = 1;
                  }
                  else
                  {
                    if (v211 > 6)
                    {
                      uint64_t v720 = *((void *)v827 + (v216 + 5));
                      switch((int)v720)
                      {
                        case 0:
                        case 1:
                          goto LABEL_269;
                        case 2:
                          goto LABEL_1108;
                        case 3:
                          LOWORD(v649) = 4;
                          goto LABEL_1107;
                        case 4:
                          LOWORD(v649) = 5;
                          goto LABEL_1107;
                        case 5:
                          LOWORD(v649) = 6;
                          goto LABEL_1107;
                        default:
                          LOWORD(v649) = 7;
                          goto LABEL_1107;
                      }
                    }
                    int v649 = dword_261E91260[v727 - 2];
LABEL_1107:
                    LOWORD(v720) = v649;
LABEL_1108:
                    unint64_t TypeSizeInBits = llvm::DataLayout::getTypeSizeInBits((llvm::DataLayout *)(*((void *)a2 + 54) + 256), *v746);
                    if ((_BYTE)v650) {
                    char v652 = __clz((TypeSizeInBits + 7) >> 3);
                    }
                    v653 = operator new(0xA0uLL);
                    uint64_t v654 = 0;
                    uint64_t v655 = (uint64_t)(v653 + 24);
                    v653[29] = v653[29] & 0x38000000 | 3;
                    do
                    {
                      v656 = &v653[v654];
                      void *v656 = 0;
                      v656[1] = 0;
                      v656[2] = 0;
                      v656[3] = v655;
                      v654 += 8;
                    }
                    while (v654 != 24);
                    char v657 = v788;
                    v776 = (llvm::PHINode *)(v653 + 24);
                    uint64_t v658 = (uint64_t)v212;
                    v659 = v653;
                    llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(v655, v658, (uint64_t ***)v746, (uint64_t)v729, 63 - v652, v727, v720, v657, 0);
                    v660 = v827;
                    __int16 v661 = *((_WORD *)v659 + 57) & 0xFFFE | (*((void *)v827 + (v216 + 2)) != 0);
                    *((_WORD *)v659 + 57) = v661;
                    if (v211 > 7)
                    {
                      *((_WORD *)v659 + 57) = v661 & 0xFFFD | (2 * (v660[v216 + 6] != 0));
                      uint64_t v667 = *((void *)v659 + 12);
                      v817 = (void *)__PAIR64__(v666, v214);
                    }
                    else
                    {
                      v662 = v804;
                      v663 = (char *)v804 + 40;
                      llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)v804 + 40, (uint64_t)v776);
                      uint64_t v664 = *((void *)v662 + 5);
                      *((void *)v659 + 15) = v664;
                      *((void *)v659 + 16) = v663;
                      *(void *)(v664 + 8) = v659 + 30;
                      *((void *)v662 + 5) = v659 + 30;
                      v790[0] = 0;
                      v821[0] = 257;
                      v776 = llvm::ExtractValueInst::Create((uint64_t *)v776, v790, 1, (const llvm::Twine *)&v817, 0);
                    }
                    unsigned int VirtualTypeID = v214;
                    llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)v776);
                    int v23 = 9;
                  }
                  uint64_t v19 = v213;
                  break;
              }
              goto LABEL_1122;
            }
          }
LABEL_270:
          uint64_t v197 = "Invalid record";
LABEL_271:
          v817 = v197;
          v821[0] = 259;
          uint64_t v93 = (_anonymous_namespace_::BitcodeReaderBase *)this;
          std::string v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_272:
        }
        uint64_t v187 = "Cmpxchg operand is not a pointer type";
        goto LABEL_537;
      case 38:
      case 59:
        int v46 = v828[0];
        LODWORD(v806) = 0;
        __p.n128_u64[0] = 0;
        v790[0] = 0;
        {
          v817 = "Invalid record";
          v821[0] = 259;
          BOOL v60 = (_anonymous_namespace_::BitcodeReaderBase *)this;
LABEL_376:
        }
        v810 = 0;
        LODWORD(v789.__r_.__value_.__l.__data_) = -1;
        if (v26 == 38)
        {
          v737 = v19;
          LODWORD(v789.__r_.__value_.__l.__data_) = v48;
          int v50 = (int)v806;
          if (v828[0] == v806)
          {
            v810 = 0;
            goto LABEL_650;
          }
          if (*((unsigned char *)a2 + 1712)) {
            unsigned int v463 = v775[0] - *((void *)v827 + v806);
          }
          else {
            unsigned int v463 = *((void *)v827 + v806);
          }
          if (!v810)
          {
LABEL_650:
            v817 = "Invalid record";
            v821[0] = 259;
          }
          v759 = v18;
          unsigned int v331 = v50 + 1;
          LODWORD(v806) = v50 + 1;
        }
        else
        {
          {
LABEL_564:
            v416 = "Invalid record";
            goto LABEL_894;
          }
          v737 = v19;
          v759 = v18;
          unsigned int v331 = v806;
        }
        unsigned int v464 = v331 + 4;
        unsigned int v465 = v331 + 5;
        if (v46 == v331 + 4 || v46 == v465)
        {
          char v510 = v827;
          unsigned int DecodedRMWOperation = getDecodedRMWOperation(*((void *)v827 + v331));
          if (DecodedRMWOperation < 0x11)
          {
            __int16 v512 = DecodedRMWOperation;
            uint64_t v513 = v510[v331 + 1];
            uint64_t v514 = v510[v331 + 2];
            switch((int)v514)
            {
              case 0:
              case 1:
                goto LABEL_716;
              case 2:
                goto LABEL_971;
              case 3:
                LOWORD(v514) = 4;
                goto LABEL_971;
              case 4:
                LOWORD(v514) = 5;
                goto LABEL_971;
              case 5:
                LOWORD(v514) = 6;
                goto LABEL_971;
              default:
                LOWORD(v514) = 7;
LABEL_971:
                unint64_t v612 = v510[v331 + 3];
                if ((v510[v331 + 3] & 0xFFFFFFFELL) != 0)
                {
                  uint64_t v19 = v737;
                  if (*((void *)a2 + 226) <= v612) {
                    LOBYTE(v612) = 1;
                  }
                  else {
                    LOBYTE(v612) = *(unsigned char *)(*((void *)a2 + 225) + v612);
                  }
                }
                else
                {
                  uint64_t v19 = v737;
                }
                LOWORD(v817) = 0;
                BOOL v92 = v46 == v465;
                __int16 v787 = v514;
                char v753 = v612;
                uint64_t v613 = v513;
                if (v92)
                {
                  if (*this)
                  {
                    v776 = 0;
                    int v23 = 1;
                    std::string v20 = (llvm::Function *)((char *)a2 + 8);
                    goto LABEL_984;
                  }
                  __int16 v735 = v512;
                  v743 = (uint64_t *)v810;
                  if (BYTE1(v817))
                  {
                    unsigned __int8 v617 = v817;
                    std::string v20 = (llvm::Function *)((char *)a2 + 8);
                    goto LABEL_983;
                  }
                  v614 = (llvm::Type **)v810;
                }
                else
                {
                  v614 = (llvm::Type **)v810;
                }
                __int16 v735 = v512;
                v743 = (uint64_t *)v614;
                unint64_t v616 = llvm::DataLayout::getTypeSizeInBits((llvm::DataLayout *)(*((void *)a2 + 54) + 256), *v614);
                std::string v20 = (llvm::Function *)((char *)a2 + 8);
                if ((_BYTE)v615) {
                unsigned __int8 v617 = 63 - __clz((v616 + 7) >> 3);
                }
                LOWORD(v817) = v617 | 0x100;
LABEL_983:
                v618 = operator new(0x80uLL);
                v618[21] = v618[21] & 0x38000000 | 2;
                *(void *)v618 = 0;
                *((void *)v618 + 1) = 0;
                *((void *)v618 + 2) = 0;
                *((void *)v618 + 3) = v618 + 16;
                *((void *)v618 + 4) = 0;
                *((void *)v618 + 5) = 0;
                *((void *)v618 + 6) = 0;
                *((void *)v618 + 7) = v618 + 16;
                llvm::AtomicRMWInst::AtomicRMWInst((uint64_t)(v618 + 16), v735, v47, v743, v617, v787, v753, 0);
                unsigned int VirtualTypeID = v789.__r_.__value_.__l.__data_;
                *((_WORD *)v618 + 41) = *((_WORD *)v618 + 41) & 0xFFFE | (v613 != 0);
                v776 = (llvm::PHINode *)(v618 + 16);
                llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)(v618 + 16));
                int v23 = 9;
LABEL_984:
                unsigned __int8 v18 = v759;
                break;
            }
            goto LABEL_821;
          }
LABEL_716:
          v817 = "Invalid record";
          v821[0] = 259;
          v466 = (_anonymous_namespace_::BitcodeReaderBase *)this;
          std::string v20 = (llvm::Function *)((char *)a2 + 8);
        }
        else
        {
          v817 = "Invalid record";
          v821[0] = 259;
          v466 = (_anonymous_namespace_::BitcodeReaderBase *)this;
        }
      case 39:
        LODWORD(v810) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v806) = 0;
        {
          goto LABEL_818;
        }
        uint64_t v224 = llvm::ResumeInst::Create((llvm::ResumeInst *)__p.n128_u64[0], v222, v223);
        uint64_t v225 = (unsigned int *)((char *)a2 + 840);
        v776 = (llvm::PHINode *)v224;
        goto LABEL_275;
      case 40:
      case 47:
        if (v823 == 47)
        {
          if (v828[0] <= 2u) {
            goto LABEL_818;
          }
        }
        else if (v828[0] <= 3u)
        {
          goto LABEL_818;
        }
        LODWORD(v810) = 1;
        unsigned int VirtualTypeID = *(_DWORD *)v827;
        if (v292)
        {
          int v294 = (llvm::LandingPadInst *)v292;
          if (v26 == 40)
          {
            __p.n128_u64[0] = 0;
            LODWORD(v806) = 0;
            {
              goto LABEL_818;
            }
            int v295 = v19;
            unsigned int v296 = v805;
            if ((*((_WORD *)v805 + 9) & 8) != 0)
            {
              int v516 = *((_DWORD *)v805 + 5);
              if ((v516 & 0x40000000) != 0) {
                unint64_t v517 = (void *)*((void *)v805 - 1);
              }
              else {
                unint64_t v517 = (void *)((char *)v805 - 32 * (v516 & 0x7FFFFFF));
              }
              if (*v517 != __p.n128_u64[0])
              {
                v817 = "Personality function mismatch";
                v821[0] = 259;
              }
            }
            else
            {
              __int16 v297 = __p.n128_u64[0] != 0;
              llvm::Function::setHungoffOperand<0>((uint64_t)v805, __p.n128_i64[0]);
              *((_WORD *)v296 + 9) = *((_WORD *)v296 + 9) & 0xFFF7 | (8 * v297);
            }
            unsigned int v330 = v810;
          }
          else
          {
            int v295 = v19;
            unsigned int v330 = 1;
          }
          __int16 v545 = *((void *)v827 + v330) != 0;
          LODWORD(v810) = v330 + 2;
          unint64_t v546 = (llvm::Type *)*((void *)v827 + v330 + 1);
          v821[0] = 257;
          v547 = llvm::LandingPadInst::Create(v294, v546, (const llvm::Twine *)&v817, 0, v293);
          *((_WORD *)v547 + 9) = *((_WORD *)v547 + 9) & 0xFFFE | v545;
          if (!v546)
          {
LABEL_815:
            v776 = (llvm::PHINode *)v547;
            llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)v547);
            int v23 = 9;
            uint64_t v19 = v295;
            goto LABEL_821;
          }
          while (1)
          {
            LODWORD(v810) = v810 + 1;
            __p.n128_u64[0] = 0;
            LODWORD(v806) = 0;
            {
              break;
            }
            llvm::LandingPadInst::addClause((llvm::LandingPadInst *)v547, (llvm::Constant *)__p.n128_u64[0]);
            LODWORD(v546) = v546 - 1;
            if (!v546) {
              goto LABEL_815;
            }
          }
          if (v547)
          {
            llvm::Instruction::~Instruction((llvm::UndefValue **)v547, v548);
            llvm::User::operator delete(v549);
          }
          goto LABEL_818;
        }
        goto LABEL_818;
      case 41:
        LODWORD(v810) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v806) = 0;
        {
          goto LABEL_818;
        }
        uint64_t v226 = v810;
        int v227 = v810 + 5;
        if (v828[0] != v810 + 4 && v828[0] != v227) {
          goto LABEL_818;
        }
        unsigned int v228 = (uint64_t *)__p.n128_u64[0];
        if (*(unsigned char *)(*(void *)__p.n128_u64[0] + 8) == 15)
        {
          uint64_t v177 = v19;
          if (v828[0] == v227)
          {
            unsigned int v229 = v810 + 1;
            LODWORD(v810) = v810 + 1;
            uint64_t v230 = *((void *)v827 + v226);
            unsigned int VirtualTypeID = v230;
          }
          else
          {
            if (!v526)
            {
              v587 = "Missing element type for old style atomic load";
LABEL_898:
              v817 = v587;
              v821[0] = 259;
            }
            uint64_t v231 = (llvm::Type *)v526;
            unsigned int v229 = v226;
          }
          if (!*this)
          {
            uint64_t v527 = *((void *)v827 + v229 + 2);
            switch((int)v527)
            {
              case 0:
              case 4:
              case 5:
                goto LABEL_1011;
              case 1:
                goto LABEL_1007;
              case 2:
                LOWORD(v527) = 2;
                goto LABEL_1007;
              case 3:
                LOWORD(v527) = 4;
                goto LABEL_1007;
              default:
                LOWORD(v527) = 7;
LABEL_1007:
                unint64_t v626 = *((void *)v827 + v229);
                if (!v626)
                {
LABEL_1011:
                  v817 = "Invalid record";
                  v821[0] = 259;
                  uint64_t v518 = (_anonymous_namespace_::BitcodeReaderBase *)this;
                  std::string v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_1012:
                }
                v767 = v18;
                unint64_t v627 = *((void *)v827 + v229 + 3);
                if ((*((void *)v827 + v229 + 3) & 0xFFFFFFFELL) != 0)
                {
                  if (*((void *)a2 + 226) <= v627) {
                    LOBYTE(v627) = 1;
                  }
                  else {
                    LOBYTE(v627) = *(unsigned char *)(*((void *)a2 + 225) + v627);
                  }
                }
                LOWORD(v790[0]) = 0;
                if (*this)
                {
                  v776 = 0;
                  int v23 = 1;
                }
                else
                {
                  if (!BYTE1(v790[0]))
                  {
                    v817 = "Alignment missing from atomic load";
                    v821[0] = 259;
                  }
                  v641 = operator new(0x60uLL);
                  uint64_t v642 = (uint64_t)(v641 + 8);
                  v641[13] = v641[13] & 0x38000000 | 1;
                  *(void *)v641 = 0;
                  *((void *)v641 + 1) = 0;
                  *((void *)v641 + 2) = 0;
                  *((void *)v641 + 3) = v641 + 8;
                  v821[0] = 257;
                  llvm::LoadInst::LoadInst((llvm::UnaryInstruction *)(v641 + 8), v231, (llvm::Value *)v228, (const llvm::Twine *)&v817, *((void *)v827 + v229 + 1) != 0, v790[0], v527, v627, 0);
                  v776 = (llvm::PHINode *)v642;
                  llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, v642);
                  int v23 = 9;
                }
                unsigned __int8 v18 = v767;
                break;
            }
LABEL_1050:
            uint64_t v19 = v177;
            goto LABEL_1122;
          }
LABEL_1013:
          v776 = 0;
          int v23 = 1;
          uint64_t v19 = v177;
          goto LABEL_821;
        }
LABEL_538:
        unint64_t v405 = "Load operand is not a pointer type";
        goto LABEL_551;
      case 42:
      case 45:
        LODWORD(v806) = 0;
        __p.n128_u64[0] = 0;
        v810 = 0;
        v790[0] = 0;
        LODWORD(v789.__r_.__value_.__l.__data_) = 0;
        {
          goto LABEL_818;
        }
        long long v51 = (uint64_t *)v810;
        if (*(unsigned char *)(*(void *)v810 + 8) != 15) {
          goto LABEL_818;
        }
        if (v26 == 45)
        {
          {
            goto LABEL_818;
          }
          unsigned int v52 = v806;
          goto LABEL_692;
        }
        int v332 = v19;
        LODWORD(v789.__r_.__value_.__l.__data_) = v333;
        int v335 = (int)v806;
        if (v828[0] == v806)
        {
          __p.n128_u64[0] = 0;
        }
        else
        {
          if (*((unsigned char *)a2 + 1712)) {
            unsigned int v495 = v775[0] - *((void *)v827 + v806);
          }
          else {
            unsigned int v495 = *((void *)v827 + v806);
          }
          if (__p.n128_u64[0])
          {
            unsigned int v52 = v335 + 1;
            LODWORD(v806) = v335 + 1;
            uint64_t v19 = v332;
            std::string v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_692:
            if (v828[0] != v52 + 4) {
              goto LABEL_818;
            }
            uint64_t v234 = v19;
            uint64_t v496 = __p.n128_u64[0];
            if (*this) {
              goto LABEL_78;
            }
            uint64_t v497 = *((void *)v827 + v52 + 2);
            switch((int)v497)
            {
              case 0:
              case 3:
              case 5:
                goto LABEL_791;
              case 1:
                goto LABEL_995;
              case 2:
                LOWORD(v497) = 2;
                goto LABEL_995;
              case 4:
                LOWORD(v497) = 5;
                goto LABEL_995;
              default:
                LOWORD(v497) = 7;
LABEL_995:
                unint64_t v622 = *((void *)v827 + v52 + 3);
                v758 = v18;
                if ((*((void *)v827 + v52 + 3) & 0xFFFFFFFELL) != 0)
                {
                  if (*((void *)a2 + 226) <= v622) {
                    LOBYTE(v622) = 1;
                  }
                  else {
                    LOBYTE(v622) = *(unsigned char *)(*((void *)a2 + 225) + v622);
                  }
                }
                unint64_t v623 = *((void *)v827 + v52);
                if (!v623) {
                  goto LABEL_1003;
                }
                LOWORD(v793[0]) = 0;
                if (*this) {
                  goto LABEL_1068;
                }
                if (!BYTE1(v793[0]))
                {
                  v817 = "Alignment missing from atomic store";
                  v821[0] = 259;
                }
                v624 = operator new(0x80uLL);
                uint64_t v625 = (uint64_t)(v624 + 16);
                v624[21] = v624[21] & 0x38000000 | 2;
                *(void *)v624 = 0;
                *((void *)v624 + 1) = 0;
                *((void *)v624 + 2) = 0;
                *((void *)v624 + 3) = v624 + 16;
                *((void *)v624 + 4) = 0;
                *((void *)v624 + 5) = 0;
                *((void *)v624 + 6) = 0;
                *((void *)v624 + 7) = v624 + 16;
                llvm::StoreInst::StoreInst((uint64_t)(v624 + 16), v496, (uint64_t)v51, *((void *)v827 + v52 + 1) != 0, v793[0], v497, v622, 0);
                break;
            }
            goto LABEL_1179;
          }
        }
        v817 = "Invalid record";
        v821[0] = 259;
      case 46:
        unsigned int v232 = v828[0];
        LODWORD(v806) = 0;
        __p.n128_u64[0] = 0;
        v790[0] = 0;
        {
          goto LABEL_818;
        }
        unsigned int v233 = (uint64_t *)__p.n128_u64[0];
        if (*(unsigned char *)(*(void *)__p.n128_u64[0] + 8) != 15)
        {
          uint64_t v173 = "Cmpxchg operand is not a pointer type";
          goto LABEL_819;
        }
        v810 = 0;
        LODWORD(v789.__r_.__value_.__l.__data_) = 0;
        {
          goto LABEL_818;
        }
        uint64_t v234 = v19;
        int v235 = (int)v806;
        if (v828[0] == v806 {
          || ((unint64_t v236 = (llvm::Type **)v810, *((unsigned char *)a2 + 1712))
        }
            ? (unsigned int v237 = v775[0] - *((void *)v827 + v806))
            : (unsigned int v237 = *((void *)v827 + v806)),
              unsigned int data = v789.__r_.__value_.__l.__data_,
        {
LABEL_791:
          v817 = "Invalid record";
          v821[0] = 259;
          uint64_t v58 = (_anonymous_namespace_::BitcodeReaderBase *)this;
          std::string v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_77:
        }
        v758 = v18;
        LODWORD(v806) = v235 + 1;
        if (v232 < v235 + 4 || v232 > v235 + 7)
        {
LABEL_1003:
          uint64_t v240 = "Invalid record";
          goto LABEL_1004;
        }
        uint64_t v239 = *((void *)v827 + (v235 + 2));
        switch((int)v239)
        {
          case 0:
          case 1:
            uint64_t v240 = "Invalid cmpxchg success ordering";
            goto LABEL_1004;
          case 2:
            goto LABEL_1063;
          case 3:
            LOWORD(v239) = 4;
            goto LABEL_1063;
          case 4:
            LOWORD(v239) = 5;
            goto LABEL_1063;
          case 5:
            LOWORD(v239) = 6;
            goto LABEL_1063;
          default:
            LOWORD(v239) = 7;
LABEL_1063:
            uint64_t v726 = *((void *)v827 + (v235 + 1));
            __int16 v736 = v239;
            uint64_t v744 = (uint64_t)v238;
            v754 = (llvm::Value *)*((void *)v827 + (v235 + 3));
            if ((*((void *)v827 + (v235 + 3)) & 0xFFFFFFFELL) != 0)
            {
              if (*((void *)a2 + 226) <= (unint64_t)*((void *)v827 + (v235 + 3))) {
                LOBYTE(v754) = 1;
              }
              else {
                LOBYTE(v754) = *((unsigned char *)v754 + *((void *)a2 + 225));
              }
            }
            if (*this) {
              goto LABEL_1068;
            }
            uint64_t v719 = *((void *)v827 + (v235 + 4));
            if (v719 > 5)
            {
              __int16 v665 = 7;
            }
            else
            {
              if (((1 << v719) & 0x33) != 0)
              {
                uint64_t v240 = "Invalid cmpxchg failure ordering";
LABEL_1004:
                v817 = v240;
                v821[0] = 259;
              }
              if (v719 == 2)
              {
LABEL_1169:
                uint64_t v714 = *((void *)v827 + (v235 + 5));
                LOWORD(v793[0]) = 0;
                if (v232 != v235 + 7) {
                  goto LABEL_1173;
                }
                if (*this)
                {
LABEL_1068:
                  v776 = 0;
                  int v23 = 1;
LABEL_1069:
                  unsigned __int8 v18 = v758;
                  uint64_t v19 = v234;
                  goto LABEL_1122;
                }
                if (BYTE1(v793[0]))
                {
                  unsigned __int8 v682 = v793[0];
                }
                else
                {
LABEL_1173:
                  unint64_t v684 = llvm::DataLayout::getTypeSizeInBits((llvm::DataLayout *)(*((void *)a2 + 54) + 256), *v236);
                  if ((_BYTE)v683) {
                  unsigned __int8 v682 = 63 - __clz((v684 + 7) >> 3);
                  }
                }
                unsigned __int8 v712 = v682;
                v685 = operator new(0xA0uLL);
                v686 = v685;
                uint64_t v687 = 0;
                uint64_t v625 = (uint64_t)(v685 + 24);
                v685[29] = v685[29] & 0x38000000 | 3;
                do
                {
                  v688 = &v685[v687];
                  void *v688 = 0;
                  v688[1] = 0;
                  v688[2] = 0;
                  v688[3] = v625;
                  v687 += 8;
                }
                while (v687 != 24);
                llvm::AtomicCmpXchgInst::AtomicCmpXchgInst((uint64_t)(v685 + 24), (uint64_t)v233, (uint64_t ***)v236, v744, v712, v736, v719, (char)v754, 0);
                *((_WORD *)v686 + 57) = (v726 != 0) | (unsigned __int16)(2 * (v714 != 0)) | *((_WORD *)v686 + 57) & 0xFFFC;
                uint64_t v690 = *((void *)v686 + 12);
                v817 = (void *)__PAIR64__(v689, data);
LABEL_1179:
                v776 = (llvm::PHINode *)v625;
                llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, v625);
                int v23 = 9;
                goto LABEL_1069;
              }
              __int16 v665 = 4;
            }
            LOWORD(v719) = v665;
            goto LABEL_1169;
        }
      case 48:
        if ((unint64_t)v828[0] - 1 >= 2) {
          goto LABEL_398;
        }
        unsigned int v241 = (llvm::Type *)(**((void **)a2 + 53) + 1776);
        if (!v828[0]) {
          goto LABEL_314;
        }
        unsigned int v243 = *((unsigned char *)a2 + 1712) ? v775[0] - *(_DWORD *)v827 : *(_DWORD *)v827;
        if (!v244) {
          goto LABEL_314;
        }
        if (v828[0] == 2)
        {
          unint64_t v247 = *((unsigned int *)v827 + 2);
          uint64_t v248 = *((void *)a2 + 186);
          if (v247 >= (*((void *)a2 + 187) - v248) >> 3 || (char v249 = *(llvm::Value **)(v248 + 8 * v247)) == 0)
          {
LABEL_314:
            uint64_t v69 = "Invalid record";
LABEL_315:
            v817 = v69;
            v821[0] = 259;
          }
        }
        else
        {
          char v249 = 0;
        }
        uint64_t v139 = llvm::CleanupReturnInst::Create(v244, v249, v245, v246);
LABEL_721:
        uint64_t v148 = (uint64_t)v139;
        goto LABEL_742;
      case 49:
        if (v828[0] != 2) {
          goto LABEL_398;
        }
        uint64_t v250 = (llvm::Type *)(**((void **)a2 + 53) + 1776);
        if (!v828[0]) {
          goto LABEL_314;
        }
        unsigned int v252 = *((unsigned char *)a2 + 1712) ? v775[0] - *(_DWORD *)v827 : *(_DWORD *)v827;
        if (!v253) {
          goto LABEL_314;
        }
        unint64_t v256 = *((unsigned int *)v827 + 2);
        uint64_t v257 = *((void *)a2 + 186);
        if (v256 >= (*((void *)a2 + 187) - v257) >> 3) {
          goto LABEL_314;
        }
        int v258 = *(llvm::Value **)(v257 + 8 * v256);
        if (!v258) {
          goto LABEL_314;
        }
        uint64_t v139 = llvm::CatchReturnInst::Create(v253, v258, v254, v255);
        goto LABEL_721;
      case 50:
      case 51:
        if (v828[0] <= 1u) {
          goto LABEL_398;
        }
        unsigned int v53 = (llvm::Type *)(**((void **)a2 + 53) + 1776);
        if (v828[0])
        {
          if (*((unsigned char *)a2 + 1712)) {
            unsigned int v55 = v775[0] - *(_DWORD *)v827;
          }
          else {
            unsigned int v55 = *(_DWORD *)v827;
          }
        }
        else
        {
          unint64_t v56 = 0;
        }
        int v320 = 2;
        LODWORD(v806) = 2;
        int v321 = *((_DWORD *)v827 + 2);
        __p.n128_u64[0] = (unint64_t)v815;
        __p.n128_u64[1] = 0x200000000;
        if (!v321) {
          goto LABEL_417;
        }
        do
        {
          v810 = 0;
          v790[0] = 0;
          {
            goto LABEL_420;
          }
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__p, (uint64_t)v810);
          --v321;
        }
        while (v321);
        int v320 = (int)v806;
LABEL_417:
        if (v828[0] == v320)
        {
          v821[0] = 257;
          if (v26 == 51) {
            char v322 = llvm::CleanupPadInst::Create(v56, (uint64_t *)__p.n128_u64[0], __p.n128_u32[2], (const llvm::Twine *)&v817);
          }
          else {
            char v322 = llvm::CatchPadInst::Create(v56, (uint64_t *)__p.n128_u64[0], __p.n128_u32[2], (const llvm::Twine *)&v817);
          }
          uint64_t v445 = (uint64_t)v322;
          v776 = (llvm::PHINode *)v445;
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, v445);
          int v23 = 9;
          goto LABEL_923;
        }
LABEL_420:
        v817 = "Invalid record";
        v821[0] = 259;
      case 52:
        if (v828[0] <= 1u) {
          goto LABEL_398;
        }
        unint64_t v259 = (llvm::Type *)(**((void **)a2 + 53) + 1776);
        if (v828[0])
        {
          unint64_t v261 = v19;
          if (*((unsigned char *)a2 + 1712)) {
            unsigned int v262 = v775[0] - *(_DWORD *)v827;
          }
          else {
            unsigned int v262 = *(_DWORD *)v827;
          }
        }
        else
        {
          unint64_t v261 = v19;
          unint64_t v263 = 0;
        }
        int v431 = *((_DWORD *)v827 + 2);
        __p.n128_u64[0] = (unint64_t)v815;
        __p.n128_u64[1] = 0x200000000;
        if (v431)
        {
          int v432 = 0;
          while (1)
          {
            unint64_t v433 = *((unsigned int *)v827 + 2 * (v432 + 2));
            uint64_t v434 = *((void *)a2 + 186);
            if (v433 >= (*((void *)a2 + 187) - v434) >> 3) {
              break;
            }
            uint64_t v435 = *(void *)(v434 + 8 * v433);
            if (!v435) {
              break;
            }
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__p, v435);
            if (v431 == ++v432)
            {
              unsigned int v436 = v432 + 2;
              goto LABEL_607;
            }
          }
          v817 = "Invalid record";
          v821[0] = 259;
          uint64_t v437 = (_anonymous_namespace_::BitcodeReaderBase *)this;
LABEL_634:
        }
        unsigned int v436 = 2;
LABEL_607:
        unsigned int v441 = v436 + 1;
        if (v828[0] == v436 + 1)
        {
          unint64_t v442 = *((unsigned int *)v827 + 2 * v436);
          uint64_t v443 = *((void *)a2 + 186);
          if (v442 >= (*((void *)a2 + 187) - v443) >> 3 || (v444 = *(llvm::BasicBlock **)(v443 + 8 * v442)) == 0)
          {
LABEL_633:
            v817 = "Invalid record";
            v821[0] = 259;
            uint64_t v437 = (_anonymous_namespace_::BitcodeReaderBase *)this;
            std::string v20 = (llvm::Function *)((char *)a2 + 8);
            goto LABEL_634;
          }
          unsigned int v436 = v441;
        }
        else
        {
          v444 = 0;
        }
        if (v828[0] == v436)
        {
          v821[0] = 257;
          unsigned int v455 = operator new(0x48uLL);
          v455[7] = v455[7] & 0x38000000 | 0x40000000;
          *(void *)unsigned int v455 = 0;
          uint64_t v456 = v263;
          v457 = (llvm::CatchSwitchInst *)(v455 + 2);
          llvm::CatchSwitchInst::CatchSwitchInst((llvm::CatchSwitchInst *)(v455 + 2), v456, v444, v431, (const llvm::Twine *)&v817, 0);
          if (__p.n128_u32[2])
          {
            unsigned int v458 = (llvm::BasicBlock **)__p.n128_u64[0];
            uint64_t v459 = 8 * __p.n128_u32[2];
            do
            {
              uint64_t v460 = *v458++;
              llvm::CatchSwitchInst::addHandler(v457, v460);
              v459 -= 8;
            }
            while (v459);
          }
          v776 = v457;
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)v457);
          int v23 = 9;
          uint64_t v19 = v261;
          std::string v20 = (llvm::Function *)((char *)a2 + 8);
          v572 = (uint64_t *)__p.n128_u64[0];
          BOOL v573 = __p.n128_u64[0] == (void)v815;
LABEL_869:
          if (!v573) {
            goto LABEL_886;
          }
          goto LABEL_821;
        }
        goto LABEL_633;
      case 55:
        if (!v828[0]) {
          goto LABEL_398;
        }
        unint64_t v264 = v827;
        uint64_t v265 = *((void *)a2 + 222);
        if (*(void *)v827 >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)a2 + 223) - v265) >> 3)) {
          goto LABEL_398;
        }
        __n128 __p = 0uLL;
        v815[0] = 0;
        LODWORD(v806) = 1;
        if (v828[0] != 1)
        {
          do
          {
            v810 = 0;
            v790[0] = 0;
            {
              v817 = "Invalid record";
              v821[0] = 259;
            }
            std::vector<llvm::Value *>::push_back[abi:nn180100]((void **)&__p, &v810);
          }
          while (v828[0] != v806);
          unint64_t v264 = v827;
          uint64_t v265 = *((void *)a2 + 222);
        }
        std::vector<llvm::OperandBundleDefT<llvm::Value *>>::emplace_back<std::string &,std::vector<llvm::Value *>>(&v798, v265 + 24 * *v264, &__p);
        int v23 = 4;
        if (__p.n128_u64[0])
        {
          __p.n128_u64[1] = __p.n128_u64[0];
          operator delete((void *)__p.n128_u64[0]);
        }
        goto LABEL_827;
      case 56:
        LODWORD(v810) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v806) = 0;
        {
          goto LABEL_818;
        }
        uint64_t v266 = (v810 + 1);
        if (v828[0] < v266) {
          goto LABEL_818;
        }
        char v267 = (llvm::Value *)__p.n128_u64[0];
        int DecodedUnaryOpcode = getDecodedUnaryOpcode(*((void *)v827 + v810), *(void *)__p.n128_u64[0]);
        if (DecodedUnaryOpcode == -1) {
          goto LABEL_818;
        }
        v821[0] = 257;
        char v269 = llvm::UnaryOperator::Create(DecodedUnaryOpcode, v267, (const llvm::Twine *)&v817, 0);
        unsigned int VirtualTypeID = v806;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)v269);
        v776 = v269;
        if (v828[0] > v266 && llvm::FPMathOperator::classof((uint64_t)v269))
        {
          int v270 = *((void *)v827 + v266) & 0x7E | (*((void *)v827 + v266) >> 7) & 1 | -(*((void *)v827 + v266) & 1);
          if (v270) {
            *((unsigned char *)v269 + 17) |= 2 * (_BYTE)v270;
          }
        }
        goto LABEL_276;
      case 57:
        unint64_t v271 = (*(_DWORD *)v827 - 1);
        uint64_t v272 = *((void *)a2 + 180);
        if (v271 >= (*((void *)a2 + 181) - v272) >> 3) {
          uint64_t v273 = 0;
        }
        else {
          uint64_t v273 = *(void *)(v272 + 8 * v271);
        }
        unint64_t v311 = *((unsigned int *)v827 + 4);
        uint64_t v312 = *((void *)a2 + 186);
        if (v311 >= (*((void *)a2 + 187) - v312) >> 3) {
          v781 = 0;
        }
        else {
          v781 = *(llvm::BasicBlock **)(v312 + 8 * v311);
        }
        uint64_t v313 = *((void *)v827 + 1);
        int v314 = *((_DWORD *)v827 + 6);
        v817 = &v819;
        v818 = (void *)0x1000000000;
        if (v314)
        {
          for (int m = 0; m != v314; ++m)
          {
            unint64_t v316 = *((unsigned int *)v827 + 2 * (m + 4));
            uint64_t v317 = *((void *)a2 + 186);
            if (v316 >= (*((void *)a2 + 187) - v317) >> 3) {
              uint64_t v318 = 0;
            }
            else {
              uint64_t v318 = *(void *)(v317 + 8 * v316);
            }
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v817, v318);
          }
          unsigned int v319 = m + 4;
        }
        else
        {
          unsigned int v319 = 4;
        }
        int v794 = v319;
        __int16 v747 = v313;
        if ((v313 & 0x8000) != 0)
        {
          int v794 = v319 + 1;
          uint64_t v324 = *((void *)v827 + v319);
          if (!v325 || (unint64_t v323 = v325, *(unsigned char *)(v325 + 8) != 14))
          {
            int v327 = "Explicit call type is not a function type";
            goto LABEL_806;
          }
        }
        else
        {
          unint64_t v323 = 0;
          LODWORD(v324) = -1;
        }
        *(void *)v793 = 0;
        unsigned int v792 = 0;
        {
          int v327 = "Invalid record";
          goto LABEL_806;
        }
        uint64_t v328 = *(void *)v793;
        if (**(void **)v793) {
          BOOL v329 = *(unsigned char *)(**(void **)v793 + 8) == 15;
        }
        else {
          BOOL v329 = 0;
        }
        if (!v329)
        {
          int v327 = "Callee is not a pointer type";
          goto LABEL_806;
        }
        if (v323)
        {
          uint64_t v446 = *(void *)(**(void **)v793 + 24);
          if (v446) {
            BOOL v447 = v446 == v323;
          }
          else {
            BOOL v447 = 1;
          }
          if (!v447)
          {
            int v327 = "Explicit call type does not match pointee type of callee operand";
            goto LABEL_806;
          }
        }
        else
        {
          uint64_t v723 = *(void *)v793;
          uint64_t v328 = v723;
          if (!v528 || (unint64_t v323 = v528, *(unsigned char *)(v528 + 8) != 14))
          {
            int v327 = "Callee is not of pointer to function type";
LABEL_806:
            __p.n128_u64[0] = (unint64_t)v327;
            __int16 v816 = 259;
          }
        }
        v764 = v18;
        int v529 = v828[0];
        uint64_t v530 = (*(_DWORD *)(v323 + 12) - 1);
        int v531 = v794;
        if (v828[0] < (v530 + v794))
        {
          __p.n128_u64[0] = (unint64_t)"Insufficient operands to call";
          __int16 v816 = 259;
        }
        uint64_t v724 = v328;
        int v733 = v324;
        uint64_t v716 = v273;
        v740 = v19;
        __p.n128_u64[0] = (unint64_t)v815;
        __p.n128_u64[1] = 0x1000000000;
        v810 = (llvm::Value *)v812;
        uint64_t v811 = 0x1000000000;
        if (v530)
        {
          uint64_t v557 = 0;
          while (1)
          {
            uint64_t v558 = v557 + 1;
            unsigned int v559 = v531 + v557;
            uint64_t v561 = *(llvm::Type **)(*(void *)(v323 + 16) + 8 * v557 + 8);
            if (*((unsigned char *)v561 + 8) == 8)
            {
              unint64_t v562 = *((unsigned int *)v827 + 2 * (v531 + v557));
              uint64_t v563 = *((void *)a2 + 186);
              if (v562 >= (*((void *)a2 + 187) - v563) >> 3) {
                break;
              }
              __int16 v564 = *(llvm::MCAsmLexer **)(v563 + 8 * v562);
            }
            else
            {
              if (v559 == v828[0]) {
                break;
              }
              unsigned int v565 = *((unsigned char *)a2 + 1712) ? v775[0] - *((void *)v827 + v559) : *((void *)v827 + v559);
            }
            if (!v564) {
              break;
            }
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__p, (uint64_t)v564);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v810, v560);
            ++v557;
            if (v530 == v558)
            {
              int v529 = v828[0];
              v531 += v558;
              goto LABEL_854;
            }
          }
          int v794 = v531 + v557;
LABEL_966:
          v806 = "Invalid record";
          __int16 v809 = 259;
        }
LABEL_854:
        int v794 = v531;
        if (*(_DWORD *)(v323 + 8) < 0x100u)
        {
          if (v529 != v531) {
            goto LABEL_966;
          }
        }
        else if (v529 != v531)
        {
          do
          {
            *(void *)v790 = 0;
            LODWORD(v789.__r_.__value_.__l.__data_) = 0;
            {
              goto LABEL_966;
            }
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__p, *(uint64_t *)v790);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v810, (int)v789.__r_.__value_.__l.__data_);
          }
          while (v828[0] != v794);
        }
        if (v798 != v799) {
          llvm::UpgradeOperandBundles(&v798);
        }
        if (*(unsigned char *)(v724 + 16) == 24)
        {
          int v608 = *(char *)(v724 + 71);
          if (v608 >= 0) {
            v609 = (char *)(v724 + 48);
          }
          else {
            v609 = *(char **)(v724 + 48);
          }
          if (v608 >= 0) {
            uint64_t v610 = *(unsigned __int8 *)(v724 + 71);
          }
          else {
            uint64_t v610 = *(void *)(v724 + 56);
          }
          llvm::InlineAsm::ParseConstraints(v609, v610, (uint64_t *)v790);
          for (n = *(_DWORD **)v790; n != v791; n += 20)
          {
            if (*n == 3) {
              goto LABEL_1154;
            }
          }
          unsigned __int32 v632 = __p.n128_u32[2] - v818;
          v633 = (uint64_t **)__p.n128_u64[0];
          if (__p.n128_u32[2] > __p.n128_u32[2] - v818)
          {
            unint64_t v634 = 0;
            do
            {
              uint64_t v635 = *(void *)(__p.n128_u64[0] + 8 * v632 + 8 * v634);
              if (v635) {
                BOOL v636 = *(unsigned char *)(v635 + 16) == 4;
              }
              else {
                BOOL v636 = 0;
              }
              if (!v636
                || v634 > v818
                || *(llvm::Value **)(v635 - 64) != v805
                || *(void *)(v635 - 32) != *((void *)v817 + v634))
              {
                v806 = "callbr argument does not match indirect dest";
                __int16 v809 = 259;
              }
              ++v634;
            }
            while (__p.n128_u32[2] - (unint64_t)v632 != v634);
          }
          __p.n128_u32[2] -= v818;
          LODWORD(v811) = v632;
          v806 = v808;
          uint64_t v807 = 0x600000000;
          if (v632)
          {
            uint64_t v637 = 8 * v632;
            do
            {
              v638 = *v633++;
              llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v806, *v638);
              v637 -= 8;
            }
            while (v637);
            v639 = (uint64_t *)v806;
            uint64_t v640 = v807;
          }
          else
          {
            uint64_t v640 = 0;
            v639 = (uint64_t *)v808;
          }
          unint64_t v323 = llvm::FunctionType::get(**(uint64_t ****)(v323 + 16), v639, v640, (unint64_t *)(*(_DWORD *)(v323 + 8) > 0xFFu));
          if (*(char *)(v724 + 71) < 0) {
            std::string::__init_copy_ctor_external(&v789, *(const std::string::value_type **)(v724 + 48), *(void *)(v724 + 56));
          }
          else {
            std::string v789 = *(std::string *)(v724 + 48);
          }
          v668 = v791;
          if (*(_DWORD **)v790 != v791)
          {
            std::string::size_type v669 = 0;
            unsigned __int32 v670 = 0;
            uint64_t v671 = *(void *)v790 + 80;
            do
            {
              int v672 = *(_DWORD *)(v671 - 80);
              if (!v672 || v672 == 1 && *(unsigned char *)(v671 - 67))
              {
                if (v670 >= v632) {
                  std::string::insert(&v789, v669, "!");
                }
                ++v670;
              }
              std::string::size_type v673 = std::string::find(&v789, 44, v669);
              std::string::size_type v669 = v673 + 1;
              if (v673 == -1) {
                break;
              }
              BOOL v92 = v671 == (void)v668;
              v671 += 80;
            }
            while (!v92);
          }
          int v674 = *(char *)(v724 + 47);
          if (v674 >= 0) {
            uint64_t v675 = v724 + 24;
          }
          else {
            uint64_t v675 = *(void *)(v724 + 24);
          }
          if (v674 >= 0) {
            uint64_t v676 = *(unsigned __int8 *)(v724 + 47);
          }
          else {
            uint64_t v676 = *(void *)(v724 + 32);
          }
          if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v677 = &v789;
          }
          else {
            v677 = (std::string *)v789.__r_.__value_.__r.__words[0];
          }
          if ((v789.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v789.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v789.__r_.__value_.__l.__size_;
          }
          uint64_t v724 = llvm::InlineAsm::get((llvm::PointerType **)v323, v675, v676, (uint64_t)v677, size, *(unsigned char *)(v724 + 80), *(unsigned char *)(v724 + 81), *(_DWORD *)(v724 + 84), *(unsigned char *)(v724 + 88));
          *(void *)v793 = v724;
          if (SHIBYTE(v789.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v789.__r_.__value_.__l.__data_);
          }
          if (v806 != v808) {
            free(v806);
          }
LABEL_1154:
          v806 = v790;
          std::vector<llvm::InlineAsm::ConstraintInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v806);
        }
        __int16 v809 = 257;
        v776 = (llvm::PHINode *)llvm::CallBrInst::Create(v323, v724, v781, (uint64_t)v817, (int)v818, (uint64_t *)__p.n128_u64[0], __p.n128_u32[2], v326, v798, 0xAAAAAAAAAAAAAAABLL * ((v799 - v798) >> 4), (const llvm::Twine *)&v806, 0);
        uint64_t v679 = v798;
        for (iuint64_t i = v799;
              ii != v679;
              std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::destroy[abi:nn180100]((uint64_t)&v800, ii))
        {
          ii -= 48;
        }
        uint64_t v799 = v679;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v772, (uint64_t)v776);
        *((_WORD *)v776 + 9) = *((_WORD *)v776 + 9) & 0xF003 | (2 * v747) & 0xFFC;
        *((void *)v776 + 8) = v716;
        if (*this)
        {
          llvm::Value::deleteValue((void (**)(void))v776, (llvm::Value *)v21);
          int v23 = 1;
        }
        else
        {
          int v23 = 9;
        }
        unsigned __int8 v18 = v764;
        uint64_t v19 = v740;
        std::string v20 = (llvm::Function *)((char *)a2 + 8);
        if (v810 != (llvm::Value *)v812) {
          free(v810);
        }
        v645 = (void *)__p.n128_u64[0];
        if ((void *)__p.n128_u64[0] != v815) {
LABEL_1163:
        }
          free(v645);
LABEL_807:
        v572 = (uint64_t *)v817;
        v544 = &v819;
        goto LABEL_924;
      case 58:
        LODWORD(v810) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v806) = 0;
        {
          goto LABEL_818;
        }
        if (v828[0] != v810) {
          goto LABEL_550;
        }
        int64_t v274 = operator new(0x60uLL);
        uint64_t v110 = (llvm::ExtractElementInst *)(v274 + 8);
        v274[13] = v274[13] & 0x38000000 | 1;
        *(void *)int64_t v274 = 0;
        *((void *)v274 + 1) = 0;
        *((void *)v274 + 2) = 0;
        *((void *)v274 + 3) = v274 + 8;
        v821[0] = 257;
        llvm::FreezeInst::FreezeInst((llvm::FreezeInst *)(v274 + 8), (llvm::Type **)__p.n128_u64[0], (const llvm::Twine *)&v817, 0);
        unsigned int VirtualTypeID = v806;
        goto LABEL_341;
      case 60:
        if (!v828[0]) {
          goto LABEL_398;
        }
        unint64_t v275 = v19;
        long long v276 = (char *)v827;
        long long v277 = (char *)v827 + 8 * v828[0];
        do
        {
          uint64_t v278 = *(void *)(*(void *)v773 + 32 * *(unsigned int *)v276 + 16);
          if (v278) {
            BOOL v279 = *(unsigned char *)(v278 + 16) == 0;
          }
          else {
            BOOL v279 = 0;
          }
          if (!v279)
          {
            v817 = "Invalid record";
            v821[0] = 259;
          }
          long long v280 = (void *)*((void *)a2 + 212);
          unint64_t v281 = *((void *)a2 + 213);
          if ((unint64_t)v280 >= v281)
          {
            uint64_t v283 = *((void *)a2 + 211);
            uint64_t v284 = ((uint64_t)v280 - v283) >> 3;
            if ((unint64_t)(v284 + 1) >> 61) {
              abort();
            }
            uint64_t v285 = v281 - v283;
            uint64_t v286 = v285 >> 2;
            if (v285 >> 2 <= (unint64_t)(v284 + 1)) {
              uint64_t v286 = v284 + 1;
            }
            if ((unint64_t)v285 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v287 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v287 = v286;
            }
            if (v287) {
              unint64_t v287 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v287);
            }
            else {
              uint64_t v21 = 0;
            }
            uint64_t v288 = (void *)(v287 + 8 * v284);
            *uint64_t v288 = v278;
            unint64_t v282 = v288 + 1;
            unint64_t v289 = (char *)*((void *)a2 + 212);
            uint64_t v290 = (char *)*((void *)a2 + 211);
            if (v289 != v290)
            {
              do
              {
                uint64_t v291 = *((void *)v289 - 1);
                v289 -= 8;
                *--uint64_t v288 = v291;
              }
              while (v289 != v290);
              unint64_t v289 = (char *)*((void *)a2 + 211);
            }
            *((void *)a2 + 211) = v288;
            *((void *)a2 + 212) = v282;
            *((void *)a2 + 213) = v287 + 8 * v21;
            if (v289) {
              operator delete(v289);
            }
          }
          else
          {
            void *v280 = v278;
            unint64_t v282 = v280 + 1;
          }
          *((void *)a2 + 212) = v282;
          v276 += 8;
          int v23 = 4;
        }
        while (v276 != v277);
        uint64_t v19 = v275;
        std::string v20 = (llvm::Function *)((char *)a2 + 8);
        goto LABEL_827;
      default:
        v817 = "Invalid value";
        v821[0] = 259;
        goto LABEL_400;
    }
  }
}

char **llvm::instructions(char **this, Function *a2)
{
  uint64_t v2 = (char *)a2 + 72;
  unint64_t v3 = (char *)*((void *)a2 + 10);
  if (v3 == (char *)a2 + 72)
  {
    int v6 = 0;
LABEL_13:
    unint64_t v3 = (char *)a2 + 72;
  }
  else
  {
    uint64_t v4 = v3 - 24;
    if (!v3) {
      uint64_t v4 = 0;
    }
    uint64_t v5 = v4 + 40;
    int v6 = (char *)*((void *)v4 + 6);
    if (v6 == v5)
    {
      uint64_t v7 = (char *)*((void *)v3 + 1);
      unint64_t v3 = (char *)a2 + 72;
      if (v7 != v2)
      {
        unint64_t v3 = v7;
        while (1)
        {
          int v8 = v3 - 24;
          if (!v3) {
            int v8 = 0;
          }
          uint64_t v9 = v8 + 40;
          int v6 = (char *)*((void *)v8 + 6);
          if (v6 != v9) {
            break;
          }
          unint64_t v3 = (char *)*((void *)v3 + 1);
          if (v3 == v2) {
            goto LABEL_13;
          }
        }
      }
    }
  }
  *this = v2;
  this[1] = v3;
  this[2] = v6;
  this[3] = v2;
  this[4] = v2;
  this[5] = 0;
  return this;
}

uint64_t anonymous namespace'::BitcodeReader::rememberAndSkipFunctionBody(_anonymous_namespace_::BitcodeReader *this, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 1520);
  if (*(void *)(a2 + 1512) == v3)
  {
    v7[0] = (uint64_t)"Insufficient function protos";
    __int16 v8 = 259;
  }
  v7[0] = *(void *)(v3 - 8);
  *(void *)(a2 + 1520) = v3 - 8;
  uint64_t v4 = (llvm::BitstreamCursor *)(a2 + 32);
  uint64_t v5 = 8 * *(void *)(a2 + 48) - *(unsigned int *)(a2 + 64);
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>,llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>::FindAndConstruct(a2 + 1568, v7)[1] = v5;
  uint64_t result = llvm::BitstreamCursor::SkipBlock(v4, (uint64_t *)this);
  if (!*(void *)this) {
    *(void *)this = 0;
  }
  return result;
}

uint64_t anonymous namespace'::BitcodeReader::getContainedTypeID(_anonymous_namespace_::BitcodeReader *this, int a2, unsigned int a3)
{
  uint64_t v7 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::LookupBucketFor<unsigned int>(*((void *)this + 68), *((_DWORD *)this + 140), a2, &v7))BOOL v5 = v7 == *((void *)this + 68) + 32 * *((unsigned int *)this + 140); {
  else
  }
    BOOL v5 = 1;
  if (v5 || *(_DWORD *)(v7 + 16) <= a3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(unsigned int *)(*(void *)(v7 + 8) + 4 * a3);
  }
}

uint64_t llvm::BitcodeReaderValueList::push_back(llvm::BitcodeReaderValueList *this, llvm::Value *a2, int a3)
{
  unint64_t v8 = *((void *)this + 2);
  uint64_t result = (uint64_t)this + 16;
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(result - 8);
  if (v9 >= v8)
  {
    uint64_t v11 = (uint64_t)(v9 - *(void *)this) >> 5;
    if ((unint64_t)(v11 + 1) >> 59) {
      abort();
    }
    uint64_t v12 = v7 - *(void *)this;
    uint64_t v13 = v12 >> 4;
    if (v12 >> 4 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    void v17[4] = result;
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(result, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v16 = &v15[32 * v11];
    v17[0] = v15;
    v17[1] = v16;
    v17[3] = &v15[32 * v14];
    *(void *)uint64_t v16 = 6;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = a2;
    if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v16);
    }
    *((_DWORD *)v16 + 6) = a3;
    void v17[2] = v16 + 32;
    std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__swap_out_circular_buffer((unint64_t **)this, v17);
    unint64_t v10 = *((void *)this + 1);
    uint64_t result = std::__split_buffer<std::pair<llvm::WeakTrackingVH,unsigned int>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *(void *)unint64_t v9 = 6;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = a2;
    if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2) {
      uint64_t result = llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v9);
    }
    *(_DWORD *)(v9 + 24) = a3;
    unint64_t v10 = v9 + 32;
  }
  *((void *)this + 1) = v10;
  return result;
}

void anonymous namespace'::BitcodeReader::parseConstants(void ***this, uint64_t a2)
{
  v169[64] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::BitstreamCursor *)(a2 + 32);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 11, this);
  if (!*this)
  {
    __src = v169;
    uint64_t v168 = 0x4000000000;
    uint64_t v5 = **(void **)(a2 + 424) + 1992;
    uint64_t v6 = (*(void *)(a2 + 720) - *(void *)(a2 + 712)) >> 5;
    uint64_t v153 = a2 + 616;
    PtrElementstd::string::size_type TypeByID = 0;
    while (1)
    {
      llvm::BitstreamCursor::advanceSkippingSubblocks(v4, 0, (uint64_t)&v165);
      if (v166) {
        break;
      }
      switch(v165)
      {
        case 2:
          goto LABEL_7;
        case 1:
          if (v6 != ((*(void *)(a2 + 720) - *(void *)(a2 + 712)) >> 5))
          {
            uint64_t v159 = "Invalid constant reference";
LABEL_16:
            __int16 v162 = 259;
          }
          *this = 0;
          goto LABEL_17;
        case 0:
LABEL_7:
          uint64_t v159 = "Malformed block";
          goto LABEL_16;
      }
      LODWORD(v168) = 0;
      uint64_t v8 = **(void **)(a2 + 424);
      llvm::BitstreamCursor::readRecord(v4, SHIDWORD(v165), (unsigned int *)&__src, 0, (uint64_t)&v163);
      if (v164)
      {
        unint64_t v14 = v163;
        unint64_t v163 = 0;
        *this = v14;
        int v12 = 1;
      }
      else
      {
        int v10 = (int)v163;
        switch((int)v163)
        {
          case 1:
            if (!v168
              || (std::string::size_type v20 = *(void *)__src,
                  uint64_t v21 = *(void *)(a2 + 520),
                  *(void *)__src >= (unint64_t)((*(void *)(a2 + 528) - v21) >> 3))
              || (uint64_t v22 = *(void *)(v21 + 8 * v20)) == 0)
            {
              uint64_t v11 = "Invalid settype record";
              goto LABEL_300;
            }
            if (v22 == v8 + 1608)
            {
              uint64_t v11 = "Invalid constant type";
LABEL_300:
              uint64_t v159 = v11;
              __int16 v162 = 259;
            }
            uint64_t v5 = *(void *)(v21 + 8 * v20);
            int v12 = 2;
            unsigned int VirtualTypeID = v20;
            break;
          case 2:
            unsigned int v23 = *(unsigned __int8 *)(v5 + 8);
            if (v23 <= 0xE && ((1 << v23) & 0x4180) != 0
              || v23 == 21 && (getTargetTypeInfo((uint64_t *)v5), (v9 & 1) == 0))
            {
              uint64_t v11 = "Invalid type for a constant null value";
              goto LABEL_300;
            }
            uint64_t v155 = v5;
            uint64_t NullValue = llvm::Constant::getNullValue((llvm::Constant *)v5, v9);
            goto LABEL_333;
          case 4:
            if (*(unsigned char *)(v5 + 8) != 13 || !v168)
            {
              uint64_t v11 = "Invalid integer const record";
              goto LABEL_300;
            }
            std::string::size_type v24 = *(void *)__src;
            if (*(void *)__src)
            {
              if (v24 == 1) {
                std::string::size_type v25 = 0x8000000000000000;
              }
              else {
                std::string::size_type v25 = -(uint64_t)(v24 >> 1);
              }
            }
            else
            {
              std::string::size_type v25 = v24 >> 1;
            }
            uint64_t v155 = v5;
            uint64_t NullValue = llvm::ConstantInt::get((llvm::ConstantInt *)v5, (llvm::Type *)v25);
            goto LABEL_333;
          case 5:
            if (*(_DWORD *)(v5 + 8) != 13 || !v168)
            {
              uint64_t v11 = "Invalid wide integer const record";
              goto LABEL_300;
            }
            uint64_t v155 = v5;
            llvm::readWideAPInt((unint64_t *)__src, v168, *(_DWORD *)(v5 + 8) >> 8, (llvm::APInt *)&v159);
            uint64_t String = (llvm::Value *)llvm::ConstantInt::get(*(llvm::IntegerType **)(a2 + 424), (llvm::APInt *)&v159, v26, v27);
            if (v160 >= 0x41 && v159) {
              MEMORY[0x263E50080](v159, 0x1000C8000313F17);
            }
            goto LABEL_334;
          case 6:
            if (v168)
            {
              uint64_t v155 = v5;
              switch(*(unsigned char *)(v5 + 8))
              {
                case 0:
                  uint64_t v28 = *(void *)(a2 + 424);
                  std::string::size_type v29 = *(unsigned __int16 *)__src;
                  LODWORD(__s.__r_.__value_.__r.__words[1]) = 16;
                  __s.__r_.__value_.__r.__words[0] = v29;
                  llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v160, (const llvm::APInt **)&__s);
                  goto LABEL_292;
                case 1:
                  uint64_t v28 = *(void *)(a2 + 424);
                  std::string::size_type v124 = *(unsigned __int16 *)__src;
                  LODWORD(__s.__r_.__value_.__r.__words[1]) = 16;
                  __s.__r_.__value_.__r.__words[0] = v124;
                  llvm::detail::IEEEFloat::initFromBFloatAPInt((llvm::detail::IEEEFloat *)&v160, (const llvm::APInt **)&__s);
                  goto LABEL_292;
                case 2:
                  uint64_t v28 = *(void *)(a2 + 424);
                  std::string::size_type v122 = *(unsigned int *)__src;
                  LODWORD(__s.__r_.__value_.__r.__words[1]) = 32;
                  __s.__r_.__value_.__r.__words[0] = v122;
                  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v160, (const llvm::APInt **)&__s);
                  goto LABEL_292;
                case 3:
                  uint64_t v28 = *(void *)(a2 + 424);
                  std::string::size_type v125 = *(void *)__src;
                  LODWORD(__s.__r_.__value_.__r.__words[1]) = 64;
                  __s.__r_.__value_.__r.__words[0] = v125;
                  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v160, (const llvm::APInt **)&__s);
LABEL_292:
                  uint64_t String = (llvm::Value *)llvm::ConstantFP::get(v28, (uint64_t)&v159);
                  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v160);
                  goto LABEL_334;
                case 4:
                  __s.__r_.__value_.__r.__words[0] = *((unsigned __int16 *)__src + 4) | (*(void *)__src << 16);
                  __s.__r_.__value_.__l.__size_ = *((unsigned __int16 *)__src + 3);
                  LODWORD(v156.__r_.__value_.__r.__words[1]) = 80;
                  llvm::APInt::initFromArray((llvm::APInt *)&v156, &__s);
                  llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt((llvm::detail::IEEEFloat *)&v160, (const llvm::APInt *)&v156);
                case 5:
                  LODWORD(__s.__r_.__value_.__r.__words[1]) = 128;
                  llvm::APInt::initFromArray((llvm::APInt *)&__s, __src);
                  llvm::detail::IEEEFloat::initFromQuadrupleAPInt((llvm::detail::IEEEFloat *)&v160, (const llvm::APInt **)&__s);
                case 6:
                  LODWORD(__s.__r_.__value_.__r.__words[1]) = 128;
                  llvm::APInt::initFromArray((llvm::APInt *)&__s, __src);
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v160, (uint64_t)&llvm::semPPCDoubleDouble);
                default:
                  goto LABEL_205;
              }
            }
            uint64_t v11 = "Invalid float const record";
            goto LABEL_300;
          case 7:
            if (!v168)
            {
              uint64_t v11 = "Invalid aggregate record";
              goto LABEL_300;
            }
            uint64_t v30 = 0;
            uint64_t v159 = (char *)&v160 + 8;
            *(void *)&long long v160 = 0x1000000000;
            uint64_t v31 = 8 * v168;
            do
            {
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v159, *(_DWORD *)((char *)__src + v30));
              v30 += 8;
            }
            while (v31 != v30);
            int v33 = *(_DWORD *)(v5 + 8);
            uint64_t v155 = v5;
            if (v33 == 16)
            {
              __int16 v34 = 255;
              goto LABEL_257;
            }
            if (v33 == 17)
            {
              __int16 v34 = 254;
LABEL_257:
              LOWORD(__s.__r_.__value_.__l.__data_) = v34;
              HIDWORD(__s.__r_.__value_.__r.__words[0]) = 0;
              __s.__r_.__value_.__l.__size_ = 0;
              goto LABEL_258;
            }
            if ((v33 & 0xFE) == 0x12)
            {
              __int16 v34 = 253;
              goto LABEL_257;
            }
            unint64_t v116 = (unint64_t)llvm::UndefValue::get((llvm::UndefValue *)v5, v32);
            goto LABEL_258;
          case 8:
          case 9:
            if (!v168)
            {
              uint64_t v11 = "Invalid string record";
              goto LABEL_300;
            }
            uint64_t v155 = v5;
            uint64_t v159 = &v161;
            long long v160 = xmmword_261E8D180;
            llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v159, (char *)__src, (char *)__src + 8 * v168);
            uint64_t String = (llvm::Value *)llvm::ConstantDataArray::getString(*(void *)(a2 + 424), (char *)v159, (llvm::Type *)v160, v10 == 9);
            int64x2_t v17 = (char *)v159;
            if (v159 == &v161) {
              goto LABEL_334;
            }
            goto LABEL_285;
          case 10:
            unsigned int v35 = v168;
            if (v168 <= 2)
            {
              uint64_t v11 = "Invalid binary op constexpr record";
              goto LABEL_300;
            }
            uint64_t v88 = (char *)__src;
            int DecodedBinaryOpcode = getDecodedBinaryOpcode(*(_DWORD *)__src, v5);
            uint64_t v155 = v5;
            if (DecodedBinaryOpcode < 0) {
              goto LABEL_205;
            }
            if (v35 < 4) {
              goto LABEL_199;
            }
            HIDWORD(v91) = DecodedBinaryOpcode - 13;
            LODWORD(v91) = DecodedBinaryOpcode - 13;
            unsigned int v90 = v91 >> 1;
            if (v90 < 7 && ((0x47u >> v90) & 1) != 0)
            {
              char v127 = 3;
            }
            else
            {
              if ((DecodedBinaryOpcode - 19) >= 9 || ((0x183u >> (DecodedBinaryOpcode - 19)) & 1) == 0)
              {
LABEL_199:
                char v92 = 0;
                goto LABEL_330;
              }
              char v127 = 1;
            }
            char v92 = v127 & v88[24];
LABEL_330:
            LOBYTE(v159) = DecodedBinaryOpcode;
            BYTE1(v159) = v92;
            HIDWORD(v159) = 0;
            *(void *)&long long v160 = 0;
            __s.__r_.__value_.__l.__data_ = (std::string::pointer)vmovn_s64(*(int64x2_t *)(v88 + 8));
            uint64_t v96 = a2 + 616;
            goto LABEL_331;
          case 11:
            if (v168 <= 2) {
              goto LABEL_59;
            }
            uint64_t v93 = __src;
            int DecodedCastOpcode = getDecodedCastOpcode(*(_DWORD *)__src);
            if (DecodedCastOpcode < 0) {
              goto LABEL_204;
            }
            unsigned __int8 v95 = DecodedCastOpcode;
            {
LABEL_59:
              uint64_t v11 = "Invalid cast constexpr record";
              goto LABEL_300;
            }
            LOWORD(v159) = v95;
            HIDWORD(v159) = 0;
            *(void *)&long long v160 = 0;
            uint64_t v57 = *((void *)__src + 2);
            goto LABEL_203;
          case 12:
          case 20:
          case 24:
            if (v168 <= 1)
            {
              uint64_t v11 = "Constant GEP record must have at least two elements";
              goto LABEL_300;
            }
            uint64_t v155 = v5;
            if (v163 != 24 && (v168 & 1) == 0)
            {
              unsigned int v18 = 0;
              std::string::size_type TypeByID = 0;
LABEL_186:
              LOBYTE(v85) = v10 == 20;
              LODWORD(v86) = -1;
              unsigned int v87 = __src;
              goto LABEL_235;
            }
            if (v10 != 24)
            {
              unsigned int v18 = 1;
              goto LABEL_186;
            }
            unsigned int v87 = __src;
            uint64_t v85 = *((void *)__src + 1) & 1;
            uint64_t v86 = *((void *)__src + 1) >> 1;
            unsigned int v18 = 2;
LABEL_235:
            uint64_t v159 = (char *)&v160 + 8;
            *(void *)&long long v160 = 0x1000000000;
            if (v168 == v18) {
              goto LABEL_236;
            }
            int v143 = v86;
            std::string::value_type v149 = v85;
            uint64_t v110 = v87[v18];
            do
            {
              {
                uint64_t v109 = "Invalid getelementptr constexpr record";
                goto LABEL_275;
              }
              unsigned int v111 = v18 + 1;
              v18 += 2;
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v159, *((void *)__src + v111));
            }
            while (v18 != v168);
            if (!v160)
            {
LABEL_236:
              uint64_t v109 = "Invalid gep with no operands";
              goto LABEL_275;
            }
            if ((*(_DWORD *)(v112 + 8) & 0xFE) == 0x12)
            {
              if (v112)
              {
                int v113 = *(unsigned __int8 *)(v112 + 8);
                goto LABEL_269;
              }
              goto LABEL_274;
            }
            int v113 = *(_DWORD *)(v112 + 8);
LABEL_269:
            if (v113 != 15)
            {
LABEL_274:
              uint64_t v109 = "GEP base operand must be pointer or vector of pointer";
LABEL_275:
              __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v109;
              __int16 v158 = 259;
            }
            if (TypeByID)
            {
              uint64_t v119 = *(void *)(v112 + 24);
              if (v119)
              {
                std::string::value_type v120 = v149;
                int v121 = v143;
                if (v119 != TypeByID)
                {
                  uint64_t v109 = "Explicit gep operator type does not match pointee type of pointer operand";
                  goto LABEL_275;
                }
              }
              else
              {
                std::string::value_type v120 = v149;
                int v121 = v143;
              }
            }
            else
            {
              std::string::value_type v120 = v149;
              int v121 = v143;
              if (!TypeByID)
              {
                __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Missing element type for old-style constant GEP";
                __int16 v158 = 259;
              }
            }
            __s.__r_.__value_.__s.__data_[0] = 34;
            __s.__r_.__value_.__s.__data_[1] = v120;
            HIDWORD(__s.__r_.__value_.__r.__words[0]) = v121;
            __s.__r_.__value_.__l.__size_ = TypeByID;
            if (v159 != (char *)&v160 + 8) {
              free(v159);
            }
            goto LABEL_334;
          case 13:
            if (v168 <= 2)
            {
              uint64_t v11 = "Invalid select constexpr record";
              goto LABEL_300;
            }
            __int16 v43 = 57;
LABEL_207:
            LOWORD(v159) = v43;
            HIDWORD(v159) = 0;
            *(void *)&long long v160 = 0;
            __s.__r_.__value_.__l.__data_ = (std::string::pointer)vmovn_s64(*(int64x2_t *)__src);
            uint64_t v56 = *((void *)__src + 2);
            goto LABEL_208;
          case 14:
            if (v168 <= 2) {
              goto LABEL_181;
            }
            if (!v36 || (*(_DWORD *)(v36 + 8) & 0xFE) != 0x12) {
              goto LABEL_181;
            }
            uint64_t v37 = __src;
            unsigned int v38 = (unsigned int *)((char *)__src + 16);
            if (v168 != 4) {
              goto LABEL_68;
            }
            {
LABEL_181:
              uint64_t v11 = "Invalid extractelement constexpr record";
              goto LABEL_300;
            }
            uint64_t v37 = __src;
            unsigned int v38 = (unsigned int *)((char *)__src + 24);
LABEL_68:
            uint64_t v39 = *(void *)v38;
            LOWORD(v159) = 61;
            HIDWORD(v159) = 0;
            *(void *)&long long v160 = 0;
            LODWORD(__s.__r_.__value_.__l.__data_) = v37[1];
            HIDWORD(__s.__r_.__value_.__r.__words[0]) = v39;
            goto LABEL_298;
          case 15:
            if (v168 < 3 || (*(_DWORD *)(v5 + 8) & 0xFE) != 0x12 || !v5) {
              goto LABEL_191;
            }
            int v40 = (int64x2_t *)__src;
            int v41 = (unsigned int *)((char *)__src + 16);
            if (v168 != 4) {
              goto LABEL_75;
            }
            {
LABEL_191:
              uint64_t v11 = "Invalid insertelement constexpr record";
              goto LABEL_300;
            }
            int v40 = (int64x2_t *)__src;
            int v41 = (unsigned int *)((char *)__src + 24);
LABEL_75:
            uint64_t v42 = *(void *)v41;
            LOWORD(v159) = 62;
            HIDWORD(v159) = 0;
            *(void *)&long long v160 = 0;
            __s.__r_.__value_.__l.__data_ = (std::string::pointer)vmovn_s64(*v40);
            LODWORD(__s.__r_.__value_.__r.__words[1]) = v42;
LABEL_209:
            uint64_t v96 = a2 + 616;
            uint64_t v155 = v5;
            uint64_t v97 = v5;
            uint64_t v98 = 3;
            goto LABEL_332;
          case 16:
            if (v168 < 3 || (*(_DWORD *)(v5 + 8) & 0xFE) != 0x12 || !v5) {
              goto LABEL_110;
            }
            __int16 v43 = 63;
            goto LABEL_207;
          case 17:
            if (v168 <= 3)
            {
              uint64_t v11 = "Invalid cmp constexpt record";
              goto LABEL_300;
            }
            if (!v99)
            {
              uint64_t v11 = "Invalid cmp constexpr record";
              goto LABEL_300;
            }
            int v100 = *(_DWORD *)(v99 + 8);
            if ((v100 & 0xFE) == 0x12) {
              int v100 = *(_DWORD *)(**(void **)(v99 + 16) + 8);
            }
            if v100 < 6u && ((0x2Fu >> v100))
            {
              char v101 = 54;
            }
            else if ((v100 & 0xFD) == 4)
            {
              char v101 = 54;
            }
            else
            {
              char v101 = 53;
            }
            uint64_t v126 = *((void *)__src + 3);
            LOBYTE(v159) = v101;
            BYTE1(v159) = v126;
            HIDWORD(v159) = 0;
            *(void *)&long long v160 = 0;
            __s.__r_.__value_.__l.__data_ = (std::string::pointer)vmovn_s64(*(int64x2_t *)((char *)__src + 8));
LABEL_298:
            uint64_t v96 = a2 + 616;
            uint64_t v155 = v5;
LABEL_331:
            uint64_t v97 = v5;
            uint64_t v98 = 2;
LABEL_332:
LABEL_333:
            uint64_t String = (llvm::Value *)NullValue;
LABEL_334:
            llvm::BitcodeReaderValueList::assignValue((llvm::BitcodeReaderValueList *)(a2 + 712), String, v6, VirtualTypeID, this, v16);
            int v12 = *this != 0;
            if (!*this) {
              LODWORD(v6) = v6 + 1;
            }
            uint64_t v5 = v155;
            break;
          case 18:
            if (v168 <= 1) {
              goto LABEL_180;
            }
            memset(&__s, 0, sizeof(__s));
            memset(&v156, 0, sizeof(v156));
            uint64_t v44 = *((void *)__src + 1);
            unint64_t v45 = (v44 + 2);
            uint64_t v155 = v5;
            if (v45 >= v168
              || v168 < v44 + *((void *)__src + v45) + 3)
            {
              goto LABEL_225;
            }
            unint64_t v140 = *(void *)__src;
            uint64_t v146 = *((void *)__src + v45);
            if (v44)
            {
              uint64_t v46 = 0;
              do
                std::string::push_back(&__s, *((void *)__src + (v46++ + 2)));
              while (v44 != v46);
            }
            if (v146)
            {
              uint64_t v47 = v146;
              unsigned int v48 = v44 + 3;
              do
              {
                std::string::push_back(&v156, *((void *)__src + v48++));
                --v47;
              }
              while (v47);
            }
            llvm::UpgradeInlineAsmString(&__s);
            if (!PtrElementTypeByID) {
              goto LABEL_265;
            }
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_s = &__s;
            }
            else {
              p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
            }
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __s.__r_.__value_.__l.__size_;
            }
            if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v51 = &v156;
            }
            else {
              long long v51 = (std::string *)v156.__r_.__value_.__r.__words[0];
            }
            if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v52 = HIBYTE(v156.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v52 = v156.__r_.__value_.__l.__size_;
            }
            uint64_t v53 = llvm::InlineAsm::get(PtrElementTypeByID, (uint64_t)p_s, size, (uint64_t)v51, v52, v140 & 1, v140 > 1, 0, 0);
            goto LABEL_321;
          case 19:
            int v54 = *(_DWORD *)(v5 + 8);
            if (!v55 || v168 < 4 || (v54 & 0xFE) != 0x12 || (*(_DWORD *)(v55 + 8) & 0xFE) != 0x12)
            {
LABEL_110:
              uint64_t v11 = "Invalid shufflevector constexpr record";
              goto LABEL_300;
            }
            LOWORD(v159) = 63;
            HIDWORD(v159) = 0;
            *(void *)&long long v160 = 0;
            __s.__r_.__value_.__l.__data_ = (std::string::pointer)vmovn_s64(*(int64x2_t *)((char *)__src + 8));
            uint64_t v56 = *((void *)__src + 3);
LABEL_208:
            LODWORD(__s.__r_.__value_.__r.__words[1]) = v56;
            goto LABEL_209;
          case 21:
            if (v168 <= 2
            {
              uint64_t v11 = "Invalid blockaddress record";
              goto LABEL_300;
            }
            LOWORD(v159) = 250;
            *(void *)&long long v160 = 0;
            uint64_t v57 = *((void *)__src + 1);
            HIDWORD(v159) = *((void *)__src + 2);
            goto LABEL_203;
          case 22:
            if (!v168)
            {
              uint64_t v11 = "Invalid data record";
              goto LABEL_300;
            }
            uint64_t v58 = v5;
            uint64_t v59 = *(void *)(v5 + 24);
            unsigned int v60 = *(_DWORD *)(v59 + 8);
            unsigned int v61 = v60 >> 8;
            BOOL v62 = v60 == 13 && v61 == 8;
            uint64_t v155 = v58;
            if (v62)
            {
              uint64_t v159 = &v161;
              long long v160 = xmmword_261E8D180;
              llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v159, (char *)__src, (char *)__src + 8 * v168);
              uint64_t v115 = *(void *)(a2 + 424);
              if ((*(_DWORD *)(v58 + 8) & 0xFE) == 0x12) {
                uint64_t FP = llvm::ConstantDataVector::get(v115, (uint64_t *)v159, (llvm::Type *)v160);
              }
              else {
                uint64_t FP = llvm::ConstantDataArray::get<unsigned char>(v115, (uint64_t *)v159, (llvm::Type *)v160);
              }
              goto LABEL_283;
            }
            if (v60 == 13 && v61 == 16)
            {
              uint64_t v159 = &v161;
              long long v160 = xmmword_261E8D180;
              llvm::SmallVectorImpl<unsigned short>::append<unsigned long long *,void>(&v159, (char *)__src, (char *)__src + 8 * v168);
              uint64_t v63 = *(void *)(a2 + 424);
              if ((*(_DWORD *)(v58 + 8) & 0xFE) == 0x12) {
                uint64_t FP = llvm::ConstantDataVector::get(v63, (uint64_t *)v159, (llvm::Type *)v160);
              }
              else {
                uint64_t FP = llvm::ConstantDataArray::get<unsigned short>(v63, (uint64_t *)v159, (llvm::Type *)v160);
              }
LABEL_283:
              uint64_t String = (llvm::Value *)FP;
              int64x2_t v17 = (char *)v159;
              unsigned int v117 = (char *)&v161;
              goto LABEL_284;
            }
            if (v60 == 13 && v61 == 32)
            {
              uint64_t v159 = (char *)&v160 + 8;
              *(void *)&long long v160 = 0x1000000000;
              llvm::SmallVectorImpl<unsigned int>::append<unsigned long long *,void>((unsigned int *)&v159, (char *)__src, (char *)__src + 8 * v168);
              uint64_t v118 = *(void *)(a2 + 424);
              if ((*(_DWORD *)(v58 + 8) & 0xFE) == 0x12) {
                unint64_t v116 = llvm::ConstantDataVector::get(v118, (uint64_t *)v159, (llvm::Type *)v160);
              }
              else {
                unint64_t v116 = llvm::ConstantDataArray::get<unsigned int>(v118, (uint64_t *)v159, (llvm::Type *)v160);
              }
            }
            else
            {
              if (v60 != 13 || v61 != 64)
              {
                switch((char)v60)
                {
                  case 0:
                  case 1:
                    uint64_t v159 = &v161;
                    long long v160 = xmmword_261E8D180;
                    llvm::SmallVectorImpl<unsigned short>::append<unsigned long long *,void>(&v159, (char *)__src, (char *)__src + 8 * v168);
                    if ((*(_DWORD *)(v58 + 8) & 0xFE) == 0x12) {
                      uint64_t FP = llvm::ConstantDataVector::getFP((uint64_t **)v59, (uint64_t *)v159, (llvm::Type *)v160);
                    }
                    else {
                      uint64_t FP = llvm::ConstantDataArray::getFP((uint64_t **)v59, (uint64_t *)v159, (llvm::Type *)v160);
                    }
                    goto LABEL_283;
                  case 2:
                    uint64_t v159 = (char *)&v160 + 8;
                    *(void *)&long long v160 = 0x1000000000;
                    llvm::SmallVectorImpl<unsigned int>::append<unsigned long long *,void>((unsigned int *)&v159, (char *)__src, (char *)__src + 8 * v168);
                    if ((*(_DWORD *)(v58 + 8) & 0xFE) == 0x12) {
                      unint64_t v116 = llvm::ConstantDataVector::getFP((uint64_t **)v59, (uint64_t *)v159, (llvm::Type *)v160);
                    }
                    else {
                      unint64_t v116 = llvm::ConstantDataArray::getFP((uint64_t **)v59, (uint64_t *)v159, (llvm::Type *)v160);
                    }
                    goto LABEL_258;
                  case 3:
                    uint64_t v159 = (char *)&v160 + 8;
                    *(void *)&long long v160 = 0x1000000000;
                    llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v159, __src, (unsigned char *)__src + 8 * v168);
                    if ((*(_DWORD *)(v58 + 8) & 0xFE) == 0x12) {
                      unint64_t v116 = llvm::ConstantDataVector::getFP((uint64_t **)v59, (uint64_t *)v159, (llvm::Type *)v160);
                    }
                    else {
                      unint64_t v116 = llvm::ConstantDataArray::getFP((uint64_t **)v59, (uint64_t *)v159, (llvm::Type *)v160);
                    }
                    goto LABEL_258;
                  default:
                    unsigned int v114 = "Invalid type for value";
                    goto LABEL_246;
                }
              }
              uint64_t v159 = (char *)&v160 + 8;
              *(void *)&long long v160 = 0x1000000000;
              llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v159, __src, (unsigned char *)__src + 8 * v168);
              uint64_t v123 = *(void *)(a2 + 424);
              if ((*(_DWORD *)(v58 + 8) & 0xFE) == 0x12) {
                unint64_t v116 = llvm::ConstantDataVector::get(v123, (uint64_t *)v159, (llvm::Type *)v160);
              }
              else {
                unint64_t v116 = llvm::ConstantDataArray::get<unsigned long long>(v123, (uint64_t *)v159, (llvm::Type *)v160);
              }
            }
LABEL_258:
            uint64_t String = (llvm::Value *)v116;
            int64x2_t v17 = (char *)v159;
            unsigned int v117 = (char *)&v160 + 8;
LABEL_284:
            if (v17 != v117) {
LABEL_285:
            }
              free(v17);
            goto LABEL_334;
          case 23:
            if (v168 <= 1) {
              goto LABEL_180;
            }
            memset(&__s, 0, sizeof(__s));
            memset(&v156, 0, sizeof(v156));
            uint64_t v65 = *((void *)__src + 1);
            unint64_t v66 = (v65 + 2);
            uint64_t v155 = v5;
            if (v66 >= v168
              || v168 < v65 + *((void *)__src + v66) + 3)
            {
              goto LABEL_225;
            }
            unint64_t v141 = *(void *)__src;
            uint64_t v147 = *((void *)__src + v66);
            if (v65)
            {
              uint64_t v67 = 0;
              do
                std::string::push_back(&__s, *((void *)__src + (v67++ + 2)));
              while (v65 != v67);
            }
            if (v147)
            {
              uint64_t v68 = v147;
              unsigned int v69 = v65 + 3;
              do
              {
                std::string::push_back(&v156, *((void *)__src + v69++));
                --v68;
              }
              while (v68);
            }
            llvm::UpgradeInlineAsmString(&__s);
            if (!PtrElementTypeByID) {
              goto LABEL_265;
            }
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v70 = &__s;
            }
            else {
              uint64_t v70 = (std::string *)__s.__r_.__value_.__r.__words[0];
            }
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v71 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v71 = __s.__r_.__value_.__l.__size_;
            }
            if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v72 = &v156;
            }
            else {
              uint64_t v72 = (std::string *)v156.__r_.__value_.__r.__words[0];
            }
            if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v73 = HIBYTE(v156.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v73 = v156.__r_.__value_.__l.__size_;
            }
            uint64_t v53 = llvm::InlineAsm::get(PtrElementTypeByID, (uint64_t)v70, v71, (uint64_t)v72, v73, v141 & 1, (v141 & 2) != 0, v141 >> 2, 0);
            goto LABEL_321;
          case 25:
            if (v168 <= 1)
            {
              uint64_t v11 = "Invalid unary op constexpr record";
              goto LABEL_300;
            }
            __int16 v102 = __src;
            int DecodedUnaryOpcode = getDecodedUnaryOpcode(*(_DWORD *)__src, v5);
            uint64_t v155 = v5;
            if (DecodedUnaryOpcode < 0)
            {
LABEL_205:
              uint64_t NullValue = (uint64_t)llvm::UndefValue::get((llvm::UndefValue *)v5, v9);
              goto LABEL_333;
            }
            LOWORD(v159) = DecodedUnaryOpcode;
            HIDWORD(v159) = 0;
            *(void *)&long long v160 = 0;
            LODWORD(__s.__r_.__value_.__l.__data_) = v102[1];
            uint64_t v96 = a2 + 616;
            goto LABEL_220;
          case 26:
            uint64_t v155 = v5;
            uint64_t NullValue = llvm::PoisonValue::get((llvm::PoisonValue *)v5, v9);
            goto LABEL_333;
          case 27:
            if (v168 <= 1
            {
              uint64_t v11 = "Invalid dso_local record";
              goto LABEL_300;
            }
            __int16 v75 = 251;
            goto LABEL_178;
          case 28:
            if (v168 <= 1) {
              goto LABEL_180;
            }
            memset(&__s, 0, sizeof(__s));
            memset(&v156, 0, sizeof(v156));
            uint64_t v76 = *((void *)__src + 1);
            unint64_t v77 = (v76 + 2);
            uint64_t v155 = v5;
            if (v77 >= v168
              || v168 < v76 + *((void *)__src + v77) + 3)
            {
              goto LABEL_225;
            }
            uint64_t v142 = *(void *)__src;
            uint64_t v148 = *((void *)__src + v77);
            if (v76)
            {
              uint64_t v78 = 0;
              do
                std::string::push_back(&__s, *((void *)__src + (v78++ + 2)));
              while (v76 != v78);
            }
            if (v148)
            {
              uint64_t v79 = v148;
              unsigned int v80 = v76 + 3;
              do
              {
                std::string::push_back(&v156, *((void *)__src + v80++));
                --v79;
              }
              while (v79);
            }
            llvm::UpgradeInlineAsmString(&__s);
            if (!PtrElementTypeByID)
            {
LABEL_265:
              uint64_t v108 = "Missing element type for old-style inlineasm";
LABEL_226:
              uint64_t v159 = v108;
              __int16 v162 = 259;
            }
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v81 = &__s;
            }
            else {
              uint64_t v81 = (std::string *)__s.__r_.__value_.__r.__words[0];
            }
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v82 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v82 = __s.__r_.__value_.__l.__size_;
            }
            if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v83 = &v156;
            }
            else {
              unint64_t v83 = (std::string *)v156.__r_.__value_.__r.__words[0];
            }
            if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v84 = HIBYTE(v156.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v84 = v156.__r_.__value_.__l.__size_;
            }
            uint64_t v53 = llvm::InlineAsm::get(PtrElementTypeByID, (uint64_t)v81, v82, (uint64_t)v83, v84, v142 & 1, (v142 & 2) != 0, (v142 >> 2) & 1, (v142 & 8) != 0);
            goto LABEL_321;
          case 29:
            if (v168 <= 1
            {
              uint64_t v11 = "Invalid no_cfi record";
              goto LABEL_300;
            }
            __int16 v75 = 252;
LABEL_178:
            LOWORD(v159) = v75;
            HIDWORD(v159) = 0;
            *(void *)&long long v160 = 0;
            uint64_t v57 = *((void *)__src + 1);
LABEL_203:
            LODWORD(__s.__r_.__value_.__l.__data_) = v57;
            uint64_t v96 = a2 + 616;
            uint64_t v155 = v5;
LABEL_220:
            uint64_t v97 = v5;
            uint64_t v98 = 1;
            goto LABEL_332;
          case 30:
            if (v168 <= 2)
            {
LABEL_180:
              uint64_t v11 = "Invalid inlineasm record";
              goto LABEL_300;
            }
            uint64_t v155 = v5;
            if (!v104 || (uint64_t v105 = (llvm::PointerType **)v104, *(unsigned char *)(v104 + 8) != 14))
            {
              unsigned int v114 = "Invalid inlineasm record";
LABEL_246:
              uint64_t v159 = v114;
              __int16 v162 = 259;
            }
            memset(&__s, 0, sizeof(__s));
            memset(&v156, 0, sizeof(v156));
            uint64_t v106 = *((void *)__src + 2);
            unint64_t v107 = (v106 + 3);
            if (v107 >= v168
              || v168 < v106 + *((void *)__src + v107) + 4)
            {
LABEL_225:
              uint64_t v108 = "Invalid inlineasm record";
              goto LABEL_226;
            }
            uint64_t v139 = *((void *)__src + v107);
            unint64_t v144 = *((void *)__src + 1);
            uint64_t v150 = *((void *)__src + 2);
            if (v106)
            {
              uint64_t v128 = 0;
              uint64_t v129 = *((void *)__src + 2);
              do
                std::string::push_back(&__s, *((void *)__src + (v128++ + 3)));
              while (v129 != v128);
            }
            if (v139)
            {
              uint64_t v130 = v139;
              unsigned int v131 = v150 + 4;
              do
              {
                std::string::push_back(&v156, *((void *)__src + v131++));
                --v130;
              }
              while (v130);
            }
            unsigned int v151 = (v144 >> 2) & 1;
            unsigned int v132 = (v144 >> 3) & 1;
            char v133 = v144 & 1;
            uint64_t v145 = (v144 >> 1) & 1;
            llvm::UpgradeInlineAsmString(&__s);
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v134 = &__s;
            }
            else {
              uint64_t v134 = (std::string *)__s.__r_.__value_.__r.__words[0];
            }
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v135 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v135 = __s.__r_.__value_.__l.__size_;
            }
            if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v136 = &v156;
            }
            else {
              uint64_t v136 = (std::string *)v156.__r_.__value_.__r.__words[0];
            }
            if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v137 = HIBYTE(v156.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v137 = v156.__r_.__value_.__l.__size_;
            }
            uint64_t v53 = llvm::InlineAsm::get(v105, (uint64_t)v134, v135, (uint64_t)v136, v137, v133, v145, v151, v132);
LABEL_321:
            uint64_t String = (llvm::Value *)v53;
            if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v156.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s.__r_.__value_.__l.__data_);
            }
            goto LABEL_334;
          default:
LABEL_204:
            uint64_t v155 = v5;
            goto LABEL_205;
        }
      }
      if (v164)
      {
        int v138 = v163;
        unint64_t v163 = 0;
        if (v138) {
          (*((void (**)(void **))*v138 + 1))(v138);
        }
      }
LABEL_18:
      if (v166)
      {
        uint64_t v13 = v165;
        unint64_t v165 = 0;
        if (v13) {
          (*((void (**)(void **))*v13 + 1))(v13);
        }
      }
      if ((v12 | 2) != 2)
      {
        if (__src != v169) {
          free(__src);
        }
        return;
      }
    }
    unint64_t v7 = v165;
    unint64_t v165 = 0;
    *this = v7;
LABEL_17:
    int v12 = 1;
    goto LABEL_18;
  }
}

void anonymous namespace'::BitcodeReader::parseValueSymbolTable(void ***this, uint64_t a2, uint64_t a3)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    unint64_t v9 = 0;
LABEL_35:
    int v19 = *(_DWORD *)(a2 + 68);
    llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 14, this);
    if (*this) {
      return;
    }
    unint64_t v45 = v47;
    uint64_t v46 = 0x4000000000;
    std::string::size_type v20 = (void *)(*(void *)(a2 + 432) + 208);
    __int16 v43 = 260;
    int v40 = v20;
    llvm::Triple::Triple(__p, (const llvm::Twine *)&v40);
    int v40 = &v42;
    long long v41 = xmmword_261E8A720;
    while (1)
    {
      llvm::BitstreamCursor::advanceSkippingSubblocks((llvm::BitstreamCursor *)(a2 + 32), 0, (uint64_t)&v38);
      if (v39)
      {
        uint64_t v21 = v38;
        unsigned int v38 = 0;
        *this = v21;
      }
      else
      {
        if (v38 == 2) {
          goto LABEL_41;
        }
        if (v38 != 1)
        {
          if (!v38)
          {
LABEL_41:
            unsigned int v35 = "Malformed block";
            __int16 v37 = 259;
          }
          LODWORD(v46) = 0;
          llvm::BitstreamCursor::readRecord((llvm::SimpleBitstreamCursor *)(a2 + 32), SHIDWORD(v38), (unsigned int *)&v45, 0, (uint64_t)&v33);
          if (v34)
          {
            std::string::size_type v24 = v33;
            int v33 = 0;
            *this = v24;
          }
          else
          {
            if (v33 != 3)
            {
              if (v33 == 2)
              {
                if (!v46
                  || (llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v40, (char *)v45 + 8, (char *)v45 + 8 * v46), unint64_t v25 = *(unsigned int *)v45, v26 = *(void *)(a2 + 1488), v25 >= (*(void *)(a2 + 1496) - v26) >> 3)|| (v27 = *(llvm::Value **)(v26 + 8 * v25)) == 0)
                {
                  unsigned int v35 = "Invalid bbentry record";
                  __int16 v37 = 259;
                }
                __int16 v37 = 261;
                unsigned int v35 = (const char *)v40;
                uint64_t v36 = v41;
                llvm::Value::setName(v27, (const llvm::Twine *)&v35);
                BOOL v22 = 0;
                *(void *)&long long v41 = 0;
                goto LABEL_73;
              }
              if (v33 == 1)
              {
                if (v36)
                {
                  std::string::size_type v29 = v35;
                  *this = (void **)v35;
                  BOOL v22 = v29 != 0;
                }
                else
                {
                  BOOL v22 = 0;
                  *this = 0;
                }
LABEL_73:
                if (v34)
                {
                  uint64_t v31 = v33;
                  int v33 = 0;
                  if (v31) {
                    (*((void (**)(void **))*v31 + 1))(v31);
                  }
                }
                goto LABEL_44;
              }
              goto LABEL_72;
            }
            if ((v36 & 1) == 0)
            {
              *this = 0;
              if (v35)
              {
                if (!v35[16])
                {
                  uint64_t v32 = v35;
                  unint64_t v28 = 32 * *((void *)v45 + 1) - 32;
                  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>,llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>::FindAndConstruct(a2 + 1568, (uint64_t *)&v32)[1] = v28 + (v19 + 8);
                  if (v28 > *(void *)(a2 + 448)) {
                    *(void *)(a2 + 448) = v28;
                  }
                }
              }
              goto LABEL_72;
            }
            uint64_t v30 = v35;
            *this = (void **)v35;
            if (!v30)
            {
LABEL_72:
              BOOL v22 = 0;
              goto LABEL_73;
            }
          }
          BOOL v22 = 1;
          goto LABEL_73;
        }
        if (!a3 || (llvm::SimpleBitstreamCursor::JumpToBit(a2 + 32, v9, this), !*this)) {
          *this = 0;
        }
      }
      BOOL v22 = 1;
LABEL_44:
      if (v39)
      {
        unsigned int v23 = v38;
        unsigned int v38 = 0;
        if (v23) {
          (*((void (**)(void **))*v23 + 1))(v23);
        }
      }
      if (v22)
      {
        if (v40 != &v42) {
          free(v40);
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        if (v45 != v47) {
          free(v45);
        }
        return;
      }
    }
  }
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(unsigned int *)(a2 + 64);
  llvm::SimpleBitstreamCursor::JumpToBit(a2 + 32, 32 * a3, &v45);
  uint64_t v8 = (void **)v45;
  if (v45) {
    goto LABEL_83;
  }
  llvm::BitstreamCursor::advance((llvm::BitstreamCursor *)(a2 + 32), 0, (uint64_t)&v40);
  if (v41)
  {
    uint64_t v8 = (void **)v40;
    goto LABEL_83;
  }
  if (v40 != (void *)0xE00000002)
  {
    unint64_t v45 = "Expected value symbol table subblock";
    v47[8] = 259;
    error((const llvm::Twine *)&v45);
  }
  unint64_t v9 = 8 * v6 - v7;
  if (!*(unsigned char *)(a2 + 392)) {
    goto LABEL_35;
  }
  int v10 = *(_DWORD *)(a2 + 68);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 14, this);
  if (*this) {
    return;
  }
  uint64_t v11 = (v10 + 8);
  unint64_t v45 = v47;
  uint64_t v46 = 0x4000000000;
  do
  {
    llvm::BitstreamCursor::advanceSkippingSubblocks((llvm::BitstreamCursor *)(a2 + 32), 0, (uint64_t)__p);
    if (__p[0].__r_.__value_.__s.__data_[8])
    {
      std::string::size_type v12 = __p[0].__r_.__value_.__r.__words[0];
      __p[0].__r_.__value_.__r.__words[0] = 0;
      *this = (void **)v12;
LABEL_15:
      int v13 = 1;
      goto LABEL_16;
    }
    switch(LODWORD(__p[0].__r_.__value_.__l.__data_))
    {
      case 2:
        goto LABEL_12;
      case 1:
        *this = 0;
        goto LABEL_15;
      case 0:
LABEL_12:
        int v40 = "Malformed block";
        __int16 v43 = 259;
    }
    LODWORD(v46) = 0;
    llvm::BitstreamCursor::readRecord((llvm::SimpleBitstreamCursor *)(a2 + 32), SHIDWORD(__p[0].__r_.__value_.__r.__words[0]), (unsigned int *)&v45, 0, (uint64_t)&v35);
    if (v36)
    {
      int64x2_t v17 = (void **)v35;
      unsigned int v35 = 0;
      *this = v17;
      int v13 = 1;
    }
    else if (v35 == 3)
    {
      uint64_t v15 = *(void *)(a2 + 712);
      if (((unint64_t)(*(void *)(a2 + 720) - v15) >> 5) <= *(void *)v45
        || !*(void *)(v15 + 32 * *(void *)v45 + 16))
      {
        int v40 = "Invalid value reference in symbol table";
        __int16 v43 = 259;
      }
      int v40 = *(void **)(v15 + 32 * *(void *)v45 + 16);
      unint64_t v16 = 32 * *((void *)v45 + 1) - 32;
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>,llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>::FindAndConstruct(a2 + 1568, (uint64_t *)&v40)[1] = v16 + v11;
      if (v16 > *(void *)(a2 + 448)) {
        *(void *)(a2 + 448) = v16;
      }
      int v13 = 0;
    }
    else
    {
      int v13 = 0;
    }
    if (v36)
    {
      unsigned int v18 = v35;
      unsigned int v35 = 0;
      if (v18) {
        (*(void (**)(const char *))(*(void *)v18 + 8))(v18);
      }
    }
LABEL_16:
    if (__p[0].__r_.__value_.__s.__data_[8])
    {
      std::string::size_type v14 = __p[0].__r_.__value_.__r.__words[0];
      __p[0].__r_.__value_.__r.__words[0] = 0;
      if (v14) {
        (*(void (**)(std::string::size_type))(*(void *)v14 + 8))(v14);
      }
    }
  }
  while (!v13);
  if (v45 != v47) {
    free(v45);
  }
  if (!*this)
  {
    llvm::SimpleBitstreamCursor::JumpToBit(a2 + 32, v9, this);
    if (!*this)
    {
      uint64_t v8 = 0;
LABEL_83:
      *this = v8;
    }
  }
}

void anonymous namespace'::BitcodeReader::parseUseLists(void ***this, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::BitstreamCursor *)(a2 + 4);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 4), 0, 18, this);
  if (!*this)
  {
    uint64_t v5 = (const llvm::Twine *)(v2 + 1);
    uint64_t v6 = v54;
    std::string::size_type v52 = v54;
    uint64_t v53 = 0x4000000000;
    while (1)
    {
      llvm::BitstreamCursor::advanceSkippingSubblocks(v4, 0, (uint64_t)&v50);
      if (v51)
      {
        uint64_t v7 = v50;
        int v50 = 0;
        *this = v7;
LABEL_10:
        int v8 = 1;
        goto LABEL_11;
      }
      switch(v50)
      {
        case 2:
          goto LABEL_7;
        case 1:
          *this = 0;
          goto LABEL_10;
        case 0:
LABEL_7:
          v45[0] = "Malformed block";
          __int16 v47 = 259;
      }
      LODWORD(v53) = 0;
      llvm::BitstreamCursor::readRecord(v4, SHIDWORD(v50), (unsigned int *)&v52, 0, (uint64_t)&v48);
      if (v49)
      {
        int v13 = v48;
        uint64_t v48 = 0;
        *this = v13;
        int v8 = 1;
        goto LABEL_78;
      }
      if (v48 == 1)
      {
        if (v53 <= 2) {
          goto LABEL_42;
        }
        uint64_t v14 = *((unsigned int *)v52 + 2 * v53 - 2);
        unsigned int v11 = v53 - 1;
        LODWORD(v53) = v53 - 1;
        std::string::size_type v12 = (uint64_t *)(v2[89] + 32 * v14 + 16);
      }
      else
      {
        if (v48 != 2)
        {
          int v8 = 0;
          goto LABEL_78;
        }
        if (v53 <= 2)
        {
LABEL_42:
          v45[0] = "Invalid record";
          __int16 v47 = 259;
        }
        uint64_t v10 = *((unsigned int *)v52 + 2 * v53 - 2);
        unsigned int v11 = v53 - 1;
        LODWORD(v53) = v53 - 1;
        std::string::size_type v12 = (uint64_t *)(v2[186] + 8 * v10);
      }
      __int16 v43 = v6;
      uint64_t v44 = v5;
      uint64_t v15 = *v12;
      v45[0] = 1;
      for (uint64_t i = 1; i != 33; i += 2)
        v45[i] = -4096;
      uint64_t v19 = *(void *)(v15 + 8);
      unsigned int v18 = (uint64_t *)(v15 + 8);
      uint64_t v17 = v19;
      if (!v19)
      {
        unsigned int v20 = 0;
        goto LABEL_46;
      }
      uint64_t v42 = v2;
      unsigned int v20 = 0;
      while (1)
      {
        unsigned int v21 = v20++;
        unsigned int v11 = v53;
        if (v53 < v20) {
          break;
        }
        uint64_t v22 = *((void *)v52 + v21);
        uint64_t v55 = 0;
        char v23 = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>((uint64_t)v45, v17, &v55);
        uint64_t v24 = v55;
        if ((v23 & 1) == 0)
        {
          int v25 = LODWORD(v45[0]) >> 1;
          if (v45[0]) {
            unsigned int v26 = 16;
          }
          else {
            unsigned int v26 = v46;
          }
          if (4 * v25 + 4 >= 3 * v26)
          {
            v26 *= 2;
          }
          else if (v26 + ~v25 - HIDWORD(v45[0]) > v26 >> 3)
          {
LABEL_35:
            LODWORD(v45[0]) += 2;
            if (*(void *)v24 != -4096) {
              --HIDWORD(v45[0]);
            }
            *(void *)uint64_t v24 = v17;
            *(_DWORD *)(v24 + 8) = 0;
            goto LABEL_38;
          }
          llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::grow((uint64_t)v45, v26);
          uint64_t v55 = 0;
          llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>((uint64_t)v45, v17, &v55);
          uint64_t v24 = v55;
          goto LABEL_35;
        }
LABEL_38:
        *(_DWORD *)(v24 + 8) = v22;
        uint64_t v17 = *(void *)(v17 + 8);
        if (!v17)
        {
          unsigned int v11 = v53;
          unsigned int v20 = v21 + 1;
          break;
        }
      }
      uint64_t v2 = v42;
LABEL_46:
      char v27 = v45[0];
      if (v11 >= v20 && v11 == LODWORD(v45[0]) >> 1)
      {
        uint64_t v29 = *v18;
        if (*v18)
        {
          uint64_t v30 = *(void *)(v29 + 8);
          if (v30)
          {
            uint64_t v71 = 0;
            long long v69 = 0u;
            long long v70 = 0u;
            long long v67 = 0u;
            long long v68 = 0u;
            long long v65 = 0u;
            long long v66 = 0u;
            long long v63 = 0u;
            long long v64 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            long long v59 = 0u;
            long long v60 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            long long v56 = 0u;
            *(void *)(v29 + 8) = 0;
            uint64_t v55 = v29;
            uint64_t v31 = *(void *)(v30 + 8);
            if (v31)
            {
              unsigned int v32 = 1;
              do
              {
                uint64_t v33 = v30;
                uint64_t v30 = v31;
                uint64_t v34 = v32;
                *(void *)(v33 + 8) = 0;
                if (v32)
                {
                  uint64_t v35 = 0;
                  while (1)
                  {
                    uint64_t v36 = *(&v55 + v35);
                    if (!v36) {
                      break;
                    }
                    *(&v55 + v35++) = 0;
                    if (v34 == v35)
                    {
                      LODWORD(v35) = v34;
                      break;
                    }
                  }
                }
                else
                {
                  LODWORD(v35) = 0;
                }
                if (v35 == v34) {
                  unsigned int v32 = v34 + 1;
                }
                else {
                  unsigned int v32 = v34;
                }
                *(&v55 + v35) = v33;
                uint64_t v31 = *(void *)(v30 + 8);
              }
              while (v31);
              *unsigned int v18 = v30;
              if (!v32)
              {
                do
                {
LABEL_73:
                  uint64_t v40 = *(void *)(v30 + 8);
                  char v39 = (uint64_t *)(v30 + 8);
                  v39[1] = (uint64_t)v18;
                  unsigned int v18 = v39;
                  uint64_t v30 = v40;
                }
                while (v40);
                goto LABEL_74;
              }
            }
            else
            {
              *unsigned int v18 = v30;
              unsigned int v32 = 1;
            }
            uint64_t v37 = v32;
            unsigned int v38 = &v55;
            do
            {
              if (*v38)
              {
                *unsigned int v18 = v30;
              }
              ++v38;
              --v37;
            }
            while (v37);
            if (v30) {
              goto LABEL_73;
            }
LABEL_74:
            char v27 = v45[0];
          }
        }
      }
      if ((v27 & 1) == 0) {
        MEMORY[0x263E500A0](v45[1], 8);
      }
      int v8 = 0;
      uint64_t v6 = v43;
      uint64_t v5 = v44;
LABEL_78:
      if (v49)
      {
        long long v41 = v48;
        uint64_t v48 = 0;
        if (v41) {
          (*((void (**)(void **))*v41 + 1))(v41);
        }
      }
LABEL_11:
      if (v51)
      {
        unint64_t v9 = v50;
        int v50 = 0;
        if (v9) {
          (*((void (**)(void **))*v9 + 1))(v9);
        }
      }
      if (v8)
      {
        if (v52 != v6) {
          free(v52);
        }
        return;
      }
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::find(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  else {
    return *(void *)a1 + 32 * *(unsigned int *)(a1 + 16);
  }
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::erase(int32x2_t *a1, void *a2)
{
  uint64_t v4 = (void *)a2[1];
  if (v4)
  {
    a2[2] = v4;
    operator delete(v4);
  }
  *a2 = -8192;
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

void std::vector<llvm::Function *>::push_back[abi:nn180100](void **a1, void *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((char *)v5 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      abort();
    }
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    std::string::size_type v12 = (void *)(v10 + 8 * v7);
    unint64_t v13 = v10 + 8 * v11;
    void *v12 = *a2;
    uint64_t v6 = v12 + 1;
    uint64_t v15 = (char *)*a1;
    uint64_t v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *--std::string::size_type v12 = v16;
      }
      while (v14 != v15);
      uint64_t v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (void *)v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    uint64_t v6 = v5 + 1;
  }
  a1[1] = v6;
}

uint64_t anonymous namespace'::BitcodeReader::parseFunctionBody(llvm::Function *)::$_1::operator()(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (!v1 || (uint64_t v2 = *(void *)(v1 + 40), v2 == v1 + 40))
  {
    int v5 = *(_DWORD *)a1[1];
    if (!v5) {
      return 0;
    }
    uint64_t v6 = *(void *)(a1[2][186] + 8 * (v5 - 1));
    if (!v6) {
      return 0;
    }
    uint64_t v7 = *(void *)(v6 + 40);
    if (v7 == v6 + 40) {
      return 0;
    }
    uint64_t v3 = v7 - 24;
    BOOL v4 = v7 == 0;
  }
  else
  {
    uint64_t v3 = v2 - 24;
    BOOL v4 = v2 == 0;
  }
  if (v4) {
    return 0;
  }
  else {
    return v3;
  }
}

BOOL anonymous namespace'::BitcodeReader::getValueTypePair(unsigned char *a1, uint64_t *a2, _DWORD *a3, unsigned int a4, llvm::MCAsmLexer **a5, unsigned int *a6, llvm::BasicBlock *a7)
{
  uint64_t v7 = *a3;
  if (*((_DWORD *)a2 + 2) == v7) {
    return 1;
  }
  unsigned int v12 = v7 + 1;
  uint64_t v13 = *a2;
  uint64_t v14 = *(void *)(*a2 + 8 * v7);
  *a3 = v7 + 1;
  if (a1[1712]) {
    uint64_t v15 = a4 - v14;
  }
  else {
    uint64_t v15 = v14;
  }
  if (v15 >= a4)
  {
    if (*((_DWORD *)a2 + 2) != v12)
    {
      *a3 = v7 + 2;
      uint64_t v19 = *(void *)(v13 + 8 * v12);
      *a6 = v19;
      goto LABEL_10;
    }
    return 1;
  }
  unsigned int v16 = *(_DWORD *)(*((void *)a1 + 89) + 32 * v15 + 24);
  *a6 = v16;
  FnValueByID = llvm::BitcodeReaderValueList::getValueFwdRef((llvm::BitcodeReaderValueList *)(a1 + 712), v15, 0, v16, a7);
LABEL_10:
  *a5 = FnValueByID;
  return FnValueByID == 0;
}

uint64_t getDecodedUnaryOpcode(int a1, uint64_t a2)
{
  LOBYTE(v2) = *(_DWORD *)(a2 + 8);
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
    int v2 = *(_DWORD *)(**(void **)(a2 + 16) + 8);
  }
  BOOL v3 = v2 < 4u || v2 == 5;
  int v4 = v2 & 0xFD;
  if (!v3 && v4 != 4) {
    return 0xFFFFFFFFLL;
  }
  if (a1) {
    return 0xFFFFFFFFLL;
  }
  return 12;
}

uint64_t getDecodedBinaryOpcode(int a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 8) & 0xFE;
  LOBYTE(v4) = *(_DWORD *)(a2 + 8);
  if (v3 == 18) {
    int v4 = *(_DWORD *)(**(void **)(a2 + 16) + 8);
  }
  if (v4 >= 6u)
  {
    if ((v4 & 0xFD) == 4)
    {
      int v5 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    int v5 = 1;
    if (((0x2Fu >> v4) & 1) != 0 || (v4 & 0xFD) == 4) {
      goto LABEL_13;
    }
  }
  if (v3 == 18) {
    int v2 = *(unsigned __int8 *)(**(void **)(a2 + 16) + 8);
  }
  if (v2 != 13) {
    return 0xFFFFFFFFLL;
  }
  int v5 = 0;
LABEL_13:
  switch(a1)
  {
    case 0:
      BOOL v6 = v5 == 0;
      unsigned int v7 = 13;
      goto LABEL_22;
    case 1:
      BOOL v6 = v5 == 0;
      unsigned int v7 = 15;
      goto LABEL_22;
    case 2:
      BOOL v6 = v5 == 0;
      unsigned int v7 = 17;
      goto LABEL_22;
    case 3:
      BOOL v9 = v5 == 0;
      unsigned int v10 = 19;
      goto LABEL_31;
    case 4:
      BOOL v6 = v5 == 0;
      unsigned int v7 = 20;
      goto LABEL_22;
    case 5:
      BOOL v9 = v5 == 0;
      unsigned int v10 = 22;
      goto LABEL_31;
    case 6:
      BOOL v6 = v5 == 0;
      unsigned int v7 = 23;
LABEL_22:
      if (v6) {
        return v7;
      }
      else {
        return v7 + 1;
      }
    case 7:
      BOOL v9 = v5 == 0;
      unsigned int v10 = 25;
      goto LABEL_31;
    case 8:
      BOOL v9 = v5 == 0;
      unsigned int v10 = 26;
      goto LABEL_31;
    case 9:
      BOOL v9 = v5 == 0;
      unsigned int v10 = 27;
      goto LABEL_31;
    case 10:
      BOOL v9 = v5 == 0;
      unsigned int v10 = 28;
      goto LABEL_31;
    case 11:
      BOOL v9 = v5 == 0;
      unsigned int v10 = 29;
      goto LABEL_31;
    case 12:
      BOOL v9 = v5 == 0;
      unsigned int v10 = 30;
LABEL_31:
      if (v9) {
        uint64_t result = v10;
      }
      else {
        uint64_t result = 0xFFFFFFFFLL;
      }
      break;
    default:
      return 0xFFFFFFFFLL;
  }
  return result;
}

unint64_t anonymous namespace'::BitcodeReader::getTypeByID(_anonymous_namespace_::BitcodeReader *this, unsigned int a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *((void *)this + 65);
  if (a2 >= (unint64_t)((*((void *)this + 66) - v3) >> 3)) {
    return 0;
  }
  unint64_t v4 = *(void *)(v3 + 8 * a2);
  if (!v4)
  {
    BOOL v6 = (void *)*((void *)this + 53);
    unint64_t v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*v6 + 2072, 32, 3);
    unint64_t v4 = v7;
    *(void *)unint64_t v7 = v6;
    *(_DWORD *)(v7 + 8) = 16;
    *(void *)(v7 + 20) = 0;
    *(void *)(v7 + 12) = 0;
    *(_DWORD *)(v7 + 28) = 0;
    uint64_t v8 = (unint64_t *)*((void *)this + 235);
    unint64_t v9 = *((void *)this + 236);
    if ((unint64_t)v8 >= v9)
    {
      uint64_t v11 = *((void *)this + 234);
      uint64_t v12 = ((uint64_t)v8 - v11) >> 3;
      if ((unint64_t)(v12 + 1) >> 61) {
        abort();
      }
      uint64_t v13 = v9 - v11;
      uint64_t v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        unsigned int v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)this + 1888, v15);
      }
      else {
        unsigned int v16 = 0;
      }
      uint64_t v17 = (unint64_t *)&v16[8 * v12];
      unsigned int v18 = &v16[8 * v15];
      *uint64_t v17 = v4;
      unsigned int v10 = v17 + 1;
      uint64_t v19 = (char *)*((void *)this + 235);
      unsigned int v20 = (char *)*((void *)this + 234);
      if (v19 != v20)
      {
        do
        {
          unint64_t v21 = *((void *)v19 - 1);
          v19 -= 8;
          *--uint64_t v17 = v21;
        }
        while (v19 != v20);
        uint64_t v19 = (char *)*((void *)this + 234);
      }
      *((void *)this + 234) = v17;
      *((void *)this + 235) = v10;
      *((void *)this + 236) = v18;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *uint64_t v8 = v7;
      unsigned int v10 = v8 + 1;
    }
    *((void *)this + 235) = v10;
    *(void *)(*((void *)this + 65) + 8 * v2) = v4;
  }
  return v4;
}

uint64_t getDecodedCastOpcode(unsigned int a1)
{
  if (a1 >= 0xD) {
    return 0xFFFFFFFFLL;
  }
  else {
    return a1 + 38;
  }
}

uint64_t anonymous namespace'::BitcodeReader::getVirtualTypeID(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  if (a4) {
    uint64_t v8 = *(unsigned int *)a3;
  }
  else {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  *(void *)&long long v32 = a2;
  *((void *)&v32 + 1) = v8;
  *(void *)&long long v29 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>,std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>(*(void *)(a1 + 568), *(_DWORD *)(a1 + 584), &v32, &v29))BOOL v9 = (void)v29 == *(void *)(a1 + 568) + 24 * *(unsigned int *)(a1 + 584); {
  else
  }
    BOOL v9 = 1;
  if (!v9) {
    return *(unsigned int *)(v29 + 16);
  }
  unsigned int v10 = *(void **)(a1 + 528);
  uint64_t v11 = *(void *)(a1 + 520);
  uint64_t v14 = ((uint64_t)v10 - v11) >> 3;
  int v31 = v14;
  unint64_t v12 = *(void *)(a1 + 536);
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v14 + 1) >> 61) {
      abort();
    }
    uint64_t v15 = v12 - v11;
    uint64_t v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
      uint64_t v16 = v14 + 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17) {
      unsigned int v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(a1 + 536, v17);
    }
    else {
      unsigned int v18 = 0;
    }
    uint64_t v19 = &v18[8 * v14];
    unsigned int v20 = &v18[8 * v17];
    *(void *)uint64_t v19 = a2;
    uint64_t v13 = v19 + 8;
    unint64_t v21 = *(char **)(a1 + 528);
    uint64_t v22 = *(char **)(a1 + 520);
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      unint64_t v21 = *(char **)(a1 + 520);
    }
    *(void *)(a1 + 520) = v19;
    *(void *)(a1 + 528) = v13;
    *(void *)(a1 + 536) = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    void *v10 = a2;
    uint64_t v13 = v10 + 1;
  }
  *(void *)(a1 + 528) = v13;
  if (a4)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::FindAndConstruct(a1 + 544, &v31);
    llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)(v24 + 8), a3, &a3[4 * a4]);
  }
  long long v29 = v32;
  int v30 = v14;
  uint64_t v33 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>,std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>(*(void *)(a1 + 568), *(_DWORD *)(a1 + 584), &v29, &v33) & 1) == 0)
  {
    int v25 = *(_DWORD *)(a1 + 576);
    unsigned int v26 = *(_DWORD *)(a1 + 584);
    if (4 * v25 + 4 >= 3 * v26)
    {
      v26 *= 2;
    }
    else if (v26 + ~v25 - *(_DWORD *)(a1 + 580) > v26 >> 3)
    {
      goto LABEL_30;
    }
    llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::grow(a1 + 568, v26);
    uint64_t v33 = 0;
    llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>,std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>(*(void *)(a1 + 568), *(_DWORD *)(a1 + 584), &v29, &v33);
LABEL_30:
    uint64_t v27 = v33;
    ++*(_DWORD *)(a1 + 576);
    if (*(void *)v27 != -4096 || *(_DWORD *)(v27 + 8) != -1) {
      --*(_DWORD *)(a1 + 580);
    }
    *(void *)uint64_t v27 = v29;
    *(_DWORD *)(v27 + 8) = DWORD2(v29);
    *(_DWORD *)(v27 + 16) = v30;
  }
  return v14;
}

llvm::ExtractElementInst *llvm::ExtractElementInst::Create(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  uint64_t v8 = operator new(0x80uLL);
  v8[21] = v8[21] & 0x38000000 | 2;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = v8 + 16;
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 6) = 0;
  *((void *)v8 + 7) = v8 + 16;
  BOOL v9 = (llvm::ExtractElementInst *)(v8 + 16);
  return llvm::ExtractElementInst::ExtractElementInst(v9, this, a2, a3, 0);
}

llvm::InsertElementInst *llvm::InsertElementInst::Create(llvm::InsertElementInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  unsigned int v10 = operator new(0xA0uLL);
  uint64_t v11 = 0;
  unint64_t v12 = (llvm::InsertElementInst *)(v10 + 24);
  v10[29] = v10[29] & 0x38000000 | 3;
  do
  {
    uint64_t v13 = &v10[v11];
    *uint64_t v13 = 0;
    v13[1] = 0;
    void v13[2] = 0;
    v13[3] = v12;
    v11 += 8;
  }
  while (v11 != 24);
  return llvm::InsertElementInst::InsertElementInst(v12, this, a2, a3, a4, 0);
}

_WORD *llvm::FCmpInst::FCmpInst(_WORD *a1, llvm::Type *a2, llvm::CmpInst **a3, uint64_t a4, const llvm::Twine *a5)
{
  __int16 v8 = (__int16)a2;
  llvm::CmpInst::makeCmpResultType(*a3, a2);
  return llvm::CmpInst::CmpInst(a1, v10, 54, v8, (uint64_t)a3, a4, a5, 0, 0);
}

_WORD *llvm::ICmpInst::ICmpInst(_WORD *a1, llvm::Type *a2, llvm::CmpInst **a3, uint64_t a4, const llvm::Twine *a5)
{
  __int16 v8 = (__int16)a2;
  llvm::CmpInst::makeCmpResultType(*a3, a2);
  return llvm::CmpInst::CmpInst(a1, v10, 53, v8, (uint64_t)a3, a4, a5, 0, 0);
}

uint64_t llvm::ReturnInst::Create(void *a1, uint64_t a2)
{
  unint64_t v4 = llvm::User::operator new((llvm::User *)0x40, a2 != 0);
  return llvm::ReturnInst::ReturnInst((uint64_t)v4, a1, a2, 0);
}

uint64_t llvm::BranchInst::Create(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::Instruction *a3)
{
  unint64_t v4 = operator new(0x60uLL);
  v4[13] = v4[13] & 0x38000000 | 1;
  *(void *)unint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = v4 + 8;
  int v5 = (llvm::BranchInst *)(v4 + 8);
  return llvm::BranchInst::BranchInst(v5, this, 0);
}

uint64_t llvm::BranchInst::Create(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::Value *a4, llvm::Instruction *a5)
{
  __int16 v8 = operator new(0xA0uLL);
  uint64_t v9 = 0;
  uint64_t v10 = (llvm::BranchInst *)(v8 + 24);
  v8[29] = v8[29] & 0x38000000 | 3;
  do
  {
    uint64_t v11 = &v8[v9];
    *uint64_t v11 = 0;
    v11[1] = 0;
    _OWORD v11[2] = 0;
    v11[3] = v10;
    v9 += 8;
  }
  while (v9 != 24);
  return llvm::BranchInst::BranchInst(v10, this, a2, a3, 0);
}

void *llvm::CleanupReturnInst::Create(llvm::CleanupReturnInst *this, llvm::Value *a2, llvm::BasicBlock *a3, llvm::Instruction *a4)
{
  if (a2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = 1;
  }
  unint64_t v7 = llvm::User::operator new((llvm::User *)0x40, v6);
  *unint64_t v7 = ***(void ***)this + 1608;
  v7[1] = 0;
  *((unsigned char *)v7 + 16) = 36;
  *((unsigned char *)v7 + 17) = 0;
  *((_WORD *)v7 + 9) = 0;
  *((_DWORD *)v7 + 5) = *((_DWORD *)v7 + 5) & 0xC0000000 | v6;
  *((_DWORD *)v7 + 14) = 0;
  *(_OWORD *)(v7 + 5) = 0u;
  *(_OWORD *)(v7 + 3) = 0u;
  llvm::CleanupReturnInst::init((uint64_t)v7, (uint64_t)this, (uint64_t)a2);
  return v7;
}

char *llvm::CatchReturnInst::Create(llvm::CatchReturnInst *this, llvm::Value *a2, llvm::BasicBlock *a3, llvm::Instruction *a4)
{
  unsigned int v6 = (char *)operator new(0x80uLL);
  *((_DWORD *)v6 + 21) = *((_DWORD *)v6 + 21) & 0x38000000 | 2;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unsigned int v6 = 0;
  *((void *)v6 + 5) = 0;
  *((void *)v6 + 6) = 0;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 8) = ***(void ***)a2 + 1608;
  unint64_t v7 = v6 + 64;
  *((_DWORD *)v6 + 21) = 2;
  *((void *)v6 + 3) = v6 + 64;
  *((void *)v6 + 7) = v6 + 64;
  *((void *)v6 + 9) = 0;
  v6[80] = 37;
  v6[81] = 0;
  *((_WORD *)v6 + 41) = 0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *((_DWORD *)v6 + 30) = 0;
  llvm::CatchReturnInst::init((uint64_t)(v6 + 64), (uint64_t)this, (uint64_t)a2);
  return v7;
}

void *llvm::CleanupPadInst::Create(void *a1, uint64_t *a2, uint64_t a3, const llvm::Twine *a4)
{
  int v8 = a3 + 1;
  uint64_t v9 = llvm::User::operator new((llvm::User *)0x40, (int)a3 + 1);
  *uint64_t v9 = *a1;
  v9[1] = 0;
  unsigned int v10 = *((_DWORD *)v9 + 5) & 0xC0000000 | v8 & 0x7FFFFFF;
  *((_DWORD *)v9 + 4) = 79;
  *((_DWORD *)v9 + 5) = v10;
  *((_DWORD *)v9 + 14) = 0;
  *(_OWORD *)(v9 + 5) = 0u;
  *(_OWORD *)(v9 + 3) = 0u;
  llvm::FuncletPadInst::init((llvm::Value *)v9, (uint64_t)a1, a2, a3, a4);
  return v9;
}

void *llvm::CatchPadInst::Create(void *a1, uint64_t *a2, uint64_t a3, const llvm::Twine *a4)
{
  int v8 = a3 + 1;
  uint64_t v9 = llvm::User::operator new((llvm::User *)0x40, (int)a3 + 1);
  *uint64_t v9 = *a1;
  v9[1] = 0;
  unsigned int v10 = *((_DWORD *)v9 + 5) & 0xC0000000 | v8 & 0x7FFFFFF;
  *((_DWORD *)v9 + 4) = 80;
  *((_DWORD *)v9 + 5) = v10;
  *((_DWORD *)v9 + 14) = 0;
  *(_OWORD *)(v9 + 5) = 0u;
  *(_OWORD *)(v9 + 3) = 0u;
  llvm::FuncletPadInst::init((llvm::Value *)v9, (uint64_t)a1, a2, a3, a4);
  return v9;
}

llvm::MCAsmLexer *anonymous namespace'::BitcodeReader::getFnValueByID(llvm::MetadataLoader::MetadataLoaderImpl **this, unsigned int a2, llvm::Type *a3, unsigned int a4, llvm::BasicBlock *a5)
{
  if (a3 && *((unsigned char *)a3 + 8) == 9)
  {
    int v5 = *(void **)a3;
    MetadataFwdRefOrLoad = llvm::MetadataLoader::MetadataLoaderImpl::getMetadataFwdRefOrLoad(this[97], a2);
    return (llvm::MCAsmLexer *)llvm::MetadataAsValue::get(v5, MetadataFwdRefOrLoad);
  }
  else
  {
    int v8 = (llvm::BitcodeReaderValueList *)(this + 89);
    return llvm::BitcodeReaderValueList::getValueFwdRef(v8, a2, a3, a4, a5);
  }
}

char *llvm::InvokeInst::Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, const llvm::Twine *a9, uint64_t *a10)
{
  int v16 = 0;
  if (a8)
  {
    uint64_t v17 = 48 * a8;
    unsigned int v18 = (void *)(a7 + 32);
    do
    {
      v16 += (*v18 - *(v18 - 1)) >> 3;
      v18 += 6;
      v17 -= 48;
    }
    while (v17);
  }
  signed int v19 = a6 + v16 + 3;
  unsigned int v20 = llvm::User::operator new((llvm::User *)0x50, v19, 16 * (int)a8);
  uint64_t v21 = llvm::Instruction::Instruction((uint64_t)v20, **(void **)(a1 + 16), 5, (uint64_t)&v20[-32 * v19], v19, a10);
  *(void *)(v21 + 64) = 0;
  llvm::InvokeInst::init(v21, a1, a2, a3, a4, a5, a6, v22, a7, a8, a9);
  return v20;
}

void anonymous namespace'::BitcodeReader::propagateAttributeTypes(_anonymous_namespace_::BitcodeReaderBase *a1, uint64_t **a2, llvm::CallBase *this, uint64_t a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  unint64_t v7 = (uint64_t *)*((void *)this + 8);
  uint64_t v42 = v7;
  unsigned int v41 = 0;
  if (((llvm::CallBase::arg_end(this) - ((void)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0)
  {
    do
    {
      uint64_t v8 = 0;
      uint64_t v43 = 0x4A00000046;
      LODWORD(v44) = 72;
      uint64_t v9 = v7;
      do
      {
        if (v9)
        {
          uint64_t v10 = v41;
          if (v41 + 2 < *((_DWORD *)v9 + 2))
          {
            uint64_t v11 = v9[v41 + 7];
            if (v11)
            {
              int v12 = *(_DWORD *)((char *)&v43 + v8);
              if ((*(unsigned __int8 *)(v11 + v12 / 8 + 12) >> (v12 & 7)))
              {
                uint64_t AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex((uint64_t *)&v42, v41 + 1, *(_DWORD *)((char *)&v43 + v8));
                if (!AttributeAtIndex || !*(void *)(AttributeAtIndex + 16))
                {
                  if (!PtrElementTypeByID)
                  {
                    long long v32 = (const llvm::Twine *)(a2 + 1);
                    v39[0] = (void **)"Missing element type for typed attribute upgrade";
                    __int16 v40 = 259;
                    uint64_t v33 = a1;
                    goto LABEL_34;
                  }
                  unint64_t v15 = llvm::Attribute::get(a2[53], v12, PtrElementTypeByID);
                  unint64_t v7 = llvm::AttributeList::addParamAttribute(&v42, a2[53], &v41, 1, v15);
                  uint64_t v42 = v7;
                  uint64_t v9 = v7;
                }
              }
            }
          }
        }
        v8 += 4;
      }
      while (v8 != 12);
      unsigned int v16 = ++v41;
    }
    while (v16 != ((unint64_t)(llvm::CallBase::arg_end(this)
                                                   - ((void)this
                                                    - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF))) >> 5));
  }
  uint64_t v17 = *((void *)this - 4);
  if (*(unsigned char *)(v17 + 16) == 24)
  {
    unsigned int v41 = 0;
    unsigned int v20 = *(char **)(v17 + 48);
    uint64_t v18 = v17 + 48;
    signed int v19 = v20;
    int v21 = *(char *)(v18 + 23);
    if (v21 >= 0) {
      uint64_t v22 = (char *)v18;
    }
    else {
      uint64_t v22 = v19;
    }
    uint64_t v23 = *(void *)(v18 + 8);
    if (v21 >= 0) {
      uint64_t v24 = v21;
    }
    else {
      uint64_t v24 = v23;
    }
    llvm::InlineAsm::ParseConstraints(v22, v24, &v43);
    uint64_t v25 = v43;
    uint64_t v26 = v44;
    if (v43 != v44)
    {
      unsigned int v27 = 0;
      unint64_t v28 = a1;
      while (!*(_DWORD *)v25)
      {
        if (*(unsigned char *)(v25 + 13)) {
          goto LABEL_27;
        }
LABEL_30:
        unsigned int v41 = ++v27;
LABEL_31:
        v25 += 80;
        if (v25 == v26) {
          goto LABEL_38;
        }
      }
      if (*(_DWORD *)v25 != 1 || !*(unsigned char *)(v25 + 13)) {
        goto LABEL_31;
      }
LABEL_27:
      if (!llvm::AttributeList::getParamElementType((llvm::AttributeList *)&v42, v27))
      {
        if (!v29)
        {
          v39[0] = (void **)"Missing element type for inline asm upgrade";
          __int16 v40 = 259;
        }
        int v30 = a2[53];
        unint64_t v31 = llvm::Attribute::get(v30, 71, v29);
        unint64_t v7 = llvm::AttributeList::addParamAttribute(&v42, v30, &v41, 1, v31);
        uint64_t v42 = v7;
        unsigned int v27 = v41;
      }
      goto LABEL_30;
    }
    unint64_t v28 = a1;
LABEL_38:
    v39[0] = (void **)&v43;
    std::vector<llvm::InlineAsm::ConstraintInfo>::__destroy_vector::operator()[abi:nn180100](v39);
    uint64_t v17 = *((void *)this - 4);
    if (!v17 || *(unsigned char *)(v17 + 16)) {
      goto LABEL_63;
    }
  }
  else
  {
    unint64_t v28 = a1;
    if (*(unsigned char *)(v17 + 16)) {
      goto LABEL_63;
    }
  }
  if (*(void *)(v17 + 24) != *((void *)this + 9)) {
    goto LABEL_63;
  }
  int v34 = *(_DWORD *)(v17 + 36);
  if (v34 > 954)
  {
    if (v34 <= 2604)
    {
      if (v34 != 955 && v34 != 2599) {
        goto LABEL_63;
      }
    }
    else if (v34 != 2605 && v34 != 3007 && v34 != 3005)
    {
      goto LABEL_63;
    }
  }
  else if (v34 > 479)
  {
    if (v34 != 480 && v34 != 953) {
      goto LABEL_63;
    }
  }
  else if ((v34 - 245) >= 2 && v34 != 477)
  {
    goto LABEL_63;
  }
  BOOL v35 = 1;
  if (v34 <= 3004 && v34 != 953) {
    BOOL v35 = v34 == 955;
  }
  LODWORD(v43) = v35;
  if (!llvm::AttributeList::getParamElementType((llvm::AttributeList *)&v42, v35))
  {
    if (!v36)
    {
      long long v32 = (const llvm::Twine *)(a2 + 1);
      v39[0] = (void **)"Missing element type for elementtype upgrade";
      __int16 v40 = 259;
      uint64_t v33 = v28;
LABEL_34:
    }
    unint64_t v37 = llvm::Attribute::get(a2[53], 71, v36);
    unint64_t v7 = llvm::AttributeList::addParamAttribute(&v42, a2[53], &v43, 1, v37);
  }
LABEL_63:
  *((void *)this + 8) = v7;
  *(void *)unint64_t v28 = 0;
}

uint64_t llvm::ResumeInst::Create(llvm::ResumeInst *this, llvm::Value *a2, llvm::Instruction *a3)
{
  unint64_t v4 = operator new(0x60uLL);
  v4[13] = v4[13] & 0x38000000 | 1;
  *(void *)unint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = v4 + 8;
  int v5 = (llvm::ResumeInst *)(v4 + 8);
  return llvm::ResumeInst::ResumeInst(v5, this, 0);
}

char *llvm::CallBrInst::Create(uint64_t a1, uint64_t a2, llvm::BasicBlock *a3, uint64_t a4, int a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const llvm::Twine *a11, uint64_t *a12)
{
  int v16 = 0;
  if (a10)
  {
    uint64_t v17 = 48 * a10;
    uint64_t v18 = (void *)(a9 + 32);
    do
    {
      v16 += (*v18 - *(v18 - 1)) >> 3;
      v18 += 6;
      v17 -= 48;
    }
    while (v17);
  }
  signed int v19 = a5 + a7 + v16 + 2;
  unsigned int v20 = llvm::User::operator new((llvm::User *)0x58, v19, 16 * (int)a10);
  uint64_t v21 = llvm::Instruction::Instruction((uint64_t)v20, **(void **)(a1 + 16), 11, (uint64_t)&v20[-32 * v19], v19, a12);
  *(void *)(v21 + 64) = 0;
  llvm::CallBrInst::init(v21, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11);
  return v20;
}

uint64_t *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::find(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  if (*(_DWORD *)a1)
  {
    int v3 = 4;
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 8);
    int v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
    {
      uint64_t v4 = 0;
      return (uint64_t *)(v2 + 16 * v4);
    }
  }
  int v6 = v3 - 1;
  LODWORD(v7) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v5 = (uint64_t *)(v2 + 16 * v7);
  uint64_t v8 = *v5;
  if (*v5 == a2) {
    return v5;
  }
  int v10 = 1;
  while (v8 != -4096)
  {
    int v11 = v7 + v10++;
    uint64_t v7 = v11 & v6;
    uint64_t v8 = *(void *)(v2 + 16 * v7);
    if (v8 == a2) {
      return (uint64_t *)(v2 + 16 * v7);
    }
  }
  if (*(_DWORD *)a1) {
    return (uint64_t *)(a1 + 72);
  }
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  return (uint64_t *)(v2 + 16 * v4);
}

uint64_t llvm::MapVector<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *,llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,llvm::SmallVector<std::pair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *>,4u>>::lookup(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  if (llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>(a1, a2, &v6))
  {
    uint64_t v3 = v6;
    if ((*(_DWORD *)a1 & 1) == 0) {
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v4 = a1 + 104;
    goto LABEL_9;
  }
  if (*(_DWORD *)a1)
  {
    uint64_t v3 = a1 + 104;
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16);
LABEL_8:
  uint64_t v4 = *(void *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16);
LABEL_9:
  if (v4 == v3) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 104) + 24 * *(unsigned int *)(v3 + 16) + 16);
  }
}

llvm::MCAsmLexer *anonymous namespace'::BitcodeReader::getValueSigned(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, llvm::Type *a6, unsigned int a7, llvm::BasicBlock *a8)
{
  if (a3 == a4) {
    return 0;
  }
  unint64_t v9 = *(void *)(a2 + 8 * a4);
  LODWORD(v10) = 0;
  if (v9 != 1) {
    uint64_t v10 = -(uint64_t)(v9 >> 1);
  }
  if (v9) {
    LODWORD(v11) = v10;
  }
  else {
    unint64_t v11 = v9 >> 1;
  }
  if (*(unsigned char *)(a1 + 1712)) {
    unsigned int v12 = a5 - v11;
  }
  else {
    unsigned int v12 = v11;
  }
}

__n128 llvm::MapVector<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *,llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,llvm::SmallVector<std::pair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *>,4u>>::insert(uint64_t a1, __n128 *a2)
{
  uint64_t v2 = a2;
  __n128 v14 = *a2;
  int v15 = 0;
  uint64_t v16 = 0;
  if (llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>(a1, (uint64_t)&v14, &v16))return result; {
  int v5 = *(_DWORD *)a1 >> 1;
  }
  if (*(_DWORD *)a1) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 4) > v6 >> 3)
  {
    goto LABEL_7;
  }
  llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::grow(a1, v6);
  uint64_t v16 = 0;
  llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>(a1, (uint64_t)&v14, &v16);
LABEL_7:
  uint64_t v7 = v16;
  *(_DWORD *)a1 += 2;
  if (*(void *)v7 != -4096 || *(void *)(v7 + 8) != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *(__n128 *)uint64_t v7 = v14;
  *(_DWORD *)(v7 + 16) = v15;
  uint64_t v8 = a1 + 104;
  unint64_t v9 = *(void *)(a1 + 104);
  uint64_t v10 = *(unsigned int *)(a1 + 112);
  if (v10 >= *(_DWORD *)(a1 + 116))
  {
    unint64_t v12 = v10 + 1;
    if (v9 <= (unint64_t)v2 && v9 + 24 * v10 > (unint64_t)v2)
    {
      uint64_t v13 = (char *)v2 - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 120), v12, 24);
      unint64_t v9 = *(void *)(a1 + 104);
      uint64_t v2 = (__n128 *)&v13[v9];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 120), v12, 24);
      unint64_t v9 = *(void *)(a1 + 104);
    }
  }
  unint64_t v11 = (__n128 *)(v9 + 24 * *(unsigned int *)(a1 + 112));
  __n128 result = *v2;
  v11[1].n128_u64[0] = v2[1].n128_u64[0];
  *unint64_t v11 = result;
  LODWORD(v11) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(a1 + 112) = v11 + 1;
  *(_DWORD *)(v7 + 16) = v11;
  return result;
}

_anonymous_namespace_::BitcodeReaderBase *anonymous namespace'::BitcodeReader::parseAlignmentValue(_anonymous_namespace_::BitcodeReaderBase *result, uint64_t a2, unint64_t a3, _WORD *a4)
{
  if (a3 >= 0x22)
  {
    int v5 = "Invalid alignment value";
    __int16 v6 = 259;
  }
  if (a3) {
    __int16 v4 = (a3 - 1) | 0x100;
  }
  else {
    __int16 v4 = 0;
  }
  *a4 = v4;
  *(void *)__n128 result = 0;
  return result;
}

_anonymous_namespace_::BitcodeReaderBase *anonymous namespace'::BitcodeReader::typeCheckLoadStoreInst(_anonymous_namespace_::BitcodeReaderBase *this, llvm::Type *a2, llvm::Type *a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 8) != 15)
  {
    uint64_t v10 = (llvm::Type *)((char *)a2 + 8);
    unint64_t v11 = "Load/Store operand is not a pointer type";
LABEL_13:
    unint64_t v12 = v11;
    __int16 v13 = 259;
  }
  __int16 v4 = *(llvm::Type **)(a4 + 24);
  if (v4) {
    BOOL v5 = v4 == a3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v10 = (llvm::Type *)((char *)a2 + 8);
    unint64_t v11 = "Explicit load/store type does not match pointee type of pointer operand";
    goto LABEL_13;
  }
  unsigned int v6 = *((unsigned __int8 *)a3 + 8);
  BOOL v7 = v6 > 0xE;
  int v8 = (1 << v6) & 0x5B80;
  if (!v7 && v8 != 0)
  {
    uint64_t v10 = (llvm::Type *)((char *)a2 + 8);
    unint64_t v11 = "Cannot load/store from pointer";
    goto LABEL_13;
  }
  *(void *)this = 0;
  return this;
}

uint64_t getDecodedRMWOperation(uint64_t result)
{
  if (result >= 0x11) {
    return 17;
  }
  else {
    return result;
  }
}

void std::vector<llvm::Value *>::push_back[abi:nn180100](void **a1, void *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  BOOL v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      __int16 v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v4, v12);
    }
    else {
      __int16 v13 = 0;
    }
    __n128 v14 = &v13[8 * v9];
    int v15 = &v13[8 * v12];
    *(void *)__n128 v14 = *a2;
    int v8 = v14 + 8;
    uint64_t v17 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *BOOL v7 = *a2;
    int v8 = v7 + 1;
  }
  a1[1] = v8;
}

void std::vector<llvm::OperandBundleDefT<llvm::Value *>>::emplace_back<std::string &,std::vector<llvm::Value *>>(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 4);
    if (v11 + 1 > 0x555555555555555) {
      abort();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= v11 + 1) {
      uint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v20 = v6;
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::SymbolDependenceGroup>>(v6, v14);
    }
    else {
      int v15 = 0;
    }
    uint64_t v16 = v15;
    uint64_t v17 = &v15[48 * v11];
    signed int v19 = &v15[48 * v14];
    std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::construct[abi:nn180100]<llvm::OperandBundleDefT<llvm::Value *>,std::string &,std::vector<llvm::Value *>>((uint64_t)v17, a2, a3);
    uint64_t v18 = v17 + 48;
    std::vector<llvm::OperandBundleDefT<llvm::Value *>>::__swap_out_circular_buffer(a1, &v16);
    uint64_t v10 = a1[1];
    std::__split_buffer<llvm::OperandBundleDefT<llvm::Value *>>::~__split_buffer(&v16);
  }
  else
  {
    std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::construct[abi:nn180100]<llvm::OperandBundleDefT<llvm::Value *>,std::string &,std::vector<llvm::Value *>>(*(void *)(v6 - 8), a2, a3);
    uint64_t v10 = v9 + 48;
  }
  a1[1] = v10;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>,llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::grow(a1, v7);
    uint64_t v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

void *llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        void *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if ((*(void *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          int v15 = v18;
          *uint64_t v18 = *(void *)v13;
          *((_DWORD *)v15 + 2) = *(_DWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      void *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::LookupBucketFor<unsigned int>(uint64_t a1, int a2, int a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = (37 * a3) & (a2 - 1);
    unint64_t v5 = (_DWORD *)(a1 + 32 * v4);
    int v6 = *v5;
    if (*v5 == a3)
    {
      uint64_t v7 = 1;
    }
    else
    {
      unint64_t v9 = 0;
      int v10 = 1;
      while (v6 != -1)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -2;
        }
        if (v11) {
          unint64_t v9 = v5;
        }
        int v12 = v4 + v10++;
        uint64_t v4 = v12 & (a2 - 1);
        unint64_t v5 = (_DWORD *)(a1 + 32 * v4);
        int v6 = *v5;
        uint64_t v7 = 1;
        if (*v5 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v7 = 0;
      if (v9) {
        unint64_t v5 = v9;
      }
    }
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

unint64_t *std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__swap_out_circular_buffer(unint64_t **a1, void *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  int v6 = (unint64_t *)a2[1];
  if (v5 == *a1)
  {
    uint64_t result = (unint64_t *)a2[1];
  }
  else
  {
    do
    {
      uint64_t result = llvm::ValueHandleBase::ValueHandleBase(v6 - 4, 3u, (uint64_t *)v5 - 4);
      *((_DWORD *)v6 - 2) = *((_DWORD *)v5 - 2);
      v5 -= 4;
      int v6 = result;
    }
    while (v5 != v4);
  }
  a2[1] = result;
  unsigned int v8 = *a1;
  *a1 = result;
  a2[1] = v8;
  unint64_t v9 = a1[1];
  a1[1] = (unint64_t *)a2[2];
  a2[2] = v9;
  int v10 = a1[2];
  a1[2] = (unint64_t *)a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<llvm::WeakTrackingVH,unsigned int>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

llvm::ValueHandleBase *std::__split_buffer<std::pair<llvm::WeakTrackingVH,unsigned int>>::__destruct_at_end[abi:nn180100](uint64_t a1, llvm::ValueHandleBase *a2)
{
  uint64_t result = *(llvm::ValueHandleBase **)(a1 + 16);
  while (result != a2)
  {
    uint64_t v5 = *((void *)result - 2);
    uint64_t result = (llvm::ValueHandleBase *)((char *)result - 32);
    *(void *)(a1 + 16) = result;
    if (v5 != -8192 && v5 != -4096 && v5 != 0)
    {
      llvm::ValueHandleBase::RemoveFromUseList(result);
      uint64_t result = *(llvm::ValueHandleBase **)(a1 + 16);
    }
  }
  return result;
}

void llvm::BitstreamCursor::advanceSkippingSubblocks(llvm::BitstreamCursor *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(a3 + 8);
  while (1)
  {
    llvm::BitstreamCursor::advance(this, a2, (uint64_t)&v11);
    if (v12)
    {
      *(unsigned char *)(a3 + 8) = v6 | 1;
      uint64_t v7 = v11;
      goto LABEL_13;
    }
    uint64_t v7 = v11;
    if (v11 != 2) {
      break;
    }
    llvm::BitstreamCursor::SkipBlock(this, &v10);
    uint64_t v8 = v10;
    if (v10)
    {
      v6 |= 1u;
      *(unsigned char *)(a3 + 8) = v6;
      *(void *)a3 = v8;
    }
    if (v12)
    {
      uint64_t v9 = v11;
      uint64_t v11 = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
    }
    if (v8) {
      return;
    }
  }
  *(unsigned char *)(a3 + 8) = v6 & 0xFE;
LABEL_13:
  *(void *)a3 = v7;
}

unint64_t anonymous namespace'::BitcodeReader::getPtrElementTypeByID(_anonymous_namespace_::BitcodeReader *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 65);
  if (a2 >= (unint64_t)((*((void *)this + 66) - v2) >> 3)
    || *(unsigned char *)(*(void *)(v2 + 8 * a2) + 8) != 15)
  {
    return 0;
  }
}

unint64_t anonymous namespace'::BitcodeConstant::create(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v9 = 4 * a5;
  unint64_t result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 4 * a5 + 48, 3);
  *(void *)unint64_t result = a2;
  *(void *)(result + 8) = 0;
  unsigned int v11 = *(_DWORD *)(result + 20) & 0xC0000000;
  *(_DWORD *)(result + 16) = 255;
  *(_DWORD *)(result + 20) = v11;
  *(_WORD *)(result + 24) = *(_WORD *)a3;
  int v12 = *(_DWORD *)(a3 + 4);
  *(_DWORD *)(result + 28) = a5;
  *(_DWORD *)(result + 32) = v12;
  *(void *)(result + 40) = *(void *)(a3 + 8);
  if (a5)
  {
    uint64_t v13 = (_DWORD *)(result + 48);
    do
    {
      int v14 = *a4++;
      *v13++ = v14;
      v9 -= 4;
    }
    while (v9);
  }
  return result;
}

void *llvm::SmallVectorImpl<unsigned short>::append<unsigned long long *,void>(void *result, char *a2, char *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = result;
  uint64_t v6 = a3 - a2;
  uint64_t v7 = result[1];
  unint64_t v8 = v7 + ((a3 - a2) >> 3);
  if (result[2] < v8)
  {
    unint64_t result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v8, 2);
    uint64_t v7 = v5[1];
  }
  if (v4 != a3)
  {
    uint64_t v9 = (_WORD *)(*v5 + 2 * v7);
    do
    {
      uint64_t v10 = *(void *)v4;
      v4 += 8;
      *v9++ = v10;
    }
    while (v4 != a3);
  }
  v5[1] = v7 + (v6 >> 3);
  return result;
}

uint64_t llvm::ConstantDataArray::get<unsigned short>(uint64_t a1, uint64_t *a2, llvm::Type *a3)
{
  uint64_t v4 = (uint64_t *)(2 * (void)a3);
  llvm::ArrayType::get((uint64_t **)(*(void *)a1 + 1968), a3);
  return llvm::ConstantDataSequential::getImpl(a2, v4, v5);
}

uint64_t llvm::ConstantDataArray::get<unsigned int>(uint64_t a1, uint64_t *a2, llvm::Type *a3)
{
  uint64_t v4 = (uint64_t *)(4 * (void)a3);
  llvm::ArrayType::get((uint64_t **)(*(void *)a1 + 1992), a3);
  return llvm::ConstantDataSequential::getImpl(a2, v4, v5);
}

uint64_t llvm::ConstantDataArray::get<unsigned long long>(uint64_t a1, uint64_t *a2, llvm::Type *a3)
{
  uint64_t v4 = (uint64_t *)(8 * (void)a3);
  llvm::ArrayType::get((uint64_t **)(*(void *)a1 + 2016), a3);
  return llvm::ConstantDataSequential::getImpl(a2, v4, v5);
}

void anonymous namespace'::BitcodeReader::recordValue(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  v40[16] = *MEMORY[0x263EF8340];
  unsigned int v38 = v40;
  long long v39 = xmmword_261E8A720;
  uint64_t v7 = *(unsigned int *)(a3 + 8);
  if (v7 < a4)
  {
    v35[0] = "Invalid record";
    __int16 v36 = 259;
  }
  llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v38, (char *)(*(void *)a3 + 8 * a4), (char *)(*(void *)a3 + 8 * v7));
  uint64_t v10 = *(void *)(a2 + 712);
  if (((unint64_t)(*(void *)(a2 + 720) - v10) >> 5) <= **(void **)a3
    || (unsigned int v11 = *(unsigned __int8 **)(v10 + 32 * **(void **)a3 + 16)) == 0)
  {
    v35[0] = "Invalid record";
    __int16 v36 = 259;
  }
  int v12 = v38;
  uint64_t v13 = v39;
  if ((void)v39)
  {
    int v14 = memchr(v38, 0, v39);
    if (v14)
    {
      if (v14 - v12 != -1)
      {
        v35[0] = "Invalid value name";
        __int16 v36 = 259;
      }
    }
  }
  __int16 v36 = 261;
  v35[0] = v12;
  v35[1] = v13;
  llvm::Value::setName((llvm::Value *)v11, (const llvm::Twine *)v35);
  unsigned int v15 = v11[16];
  if (v15 <= 3 && v15 != 1)
  {
    uint64_t v17 = *(void *)(a2 + 816);
    uint64_t v18 = *(unsigned int *)(a2 + 832);
    if (v18)
    {
      LODWORD(v19) = (v18 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      uint64_t v20 = (unsigned __int8 **)(v17 + 8 * v19);
      uint64_t v21 = *v20;
      if (*v20 == v11)
      {
LABEL_24:
        if ((unsigned __int8 **)(v17 + 8 * v18) != v20)
        {
          unsigned int v24 = *(_DWORD *)(a5 + 44);
          BOOL v25 = v24 > 8;
          int v26 = (1 << v24) & 0x124;
          if (v25 || v26 == 0)
          {
            uint64_t v28 = *(void *)(a2 + 432);
            if ((v11[23] & 0x10) != 0)
            {
              uint64_t ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)v11);
              int v30 = (uint64_t *)(ValueName + 2);
              unint64_t v29 = *ValueName;
            }
            else
            {
              unint64_t v29 = 0;
              int v30 = (uint64_t *)&str_3_24;
            }
            unint64_t inserted = llvm::Module::getOrInsertComdat(v28, v30, v29);
            llvm::GlobalObject::setComdat((const void **)v11, (uint64_t)inserted);
          }
        }
        goto LABEL_34;
      }
      int v22 = 1;
      while (v21 != (unsigned __int8 *)-4096)
      {
        int v23 = v19 + v22++;
        uint64_t v19 = v23 & (v18 - 1);
        uint64_t v21 = *(unsigned __int8 **)(v17 + 8 * v19);
        if (v21 == v11)
        {
          uint64_t v20 = (unsigned __int8 **)(v17 + 8 * v19);
          goto LABEL_24;
        }
      }
    }
    uint64_t v20 = (unsigned __int8 **)(v17 + 8 * v18);
    goto LABEL_24;
  }
LABEL_34:
  *(unsigned char *)(a1 + 8) &= ~1u;
  *(void *)a1 = v11;
  if (v38 != v40) {
    free(v38);
  }
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::grow(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::moveFromOldBuckets(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x263E500A0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)uint64_t v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::moveFromOldBuckets(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 264);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v12 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      void *v12 = *(void *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t llvm::Value::mergeUseLists<anonymous namespace'::BitcodeReader::parseUseLists(void)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  int v6 = &v10;
  while (a2)
  {
    uint64_t v11 = 0;
    if (llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>(a3, a2, &v11))unsigned int v7 = *(_DWORD *)(v11 + 8); {
    else
    }
      unsigned int v7 = 0;
    uint64_t v11 = 0;
    if (llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>(a3, a1, &v11))unsigned int v8 = *(_DWORD *)(v11 + 8); {
    else
    }
      unsigned int v8 = 0;
    if (v7 >= v8)
    {
      *int v6 = a1;
      int v6 = (uint64_t *)(a1 + 8);
      a1 = *(void *)(a1 + 8);
      if (!a1) {
        goto LABEL_15;
      }
    }
    else
    {
      *int v6 = a2;
      int v6 = (uint64_t *)(a2 + 8);
      a2 = *(void *)(a2 + 8);
      if (!a1) {
        goto LABEL_15;
      }
    }
  }
  a2 = a1;
LABEL_15:
  *int v6 = a2;
  return v10;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>,std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>(uint64_t a1, int a2, _DWORD *a3, void *a4)
{
  if (a2)
  {
    int HashValue = llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>::getHashValue(a3);
    int v9 = a2 - 1;
    int v10 = a3[2];
    unsigned int v11 = HashValue & (a2 - 1);
    BOOL v12 = (uint64_t *)(a1 + 24 * v11);
    uint64_t v13 = *v12;
    int v14 = *((_DWORD *)v12 + 2);
    if (*(void *)a3 == *v12 && v10 == v14)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      uint64_t result = 1;
      while (v13 != -4096 || v14 != -1)
      {
        if (v16) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v14 == -2;
        }
        if (v19 && v13 == -8192) {
          uint64_t v16 = v12;
        }
        unsigned int v21 = v11 + v17++;
        unsigned int v11 = v21 & v9;
        BOOL v12 = (uint64_t *)(a1 + 24 * (v21 & v9));
        uint64_t v13 = *v12;
        int v14 = *((_DWORD *)v12 + 2);
        if (*(void *)a3 == *v12 && v10 == v14) {
          goto LABEL_9;
        }
      }
      uint64_t result = 0;
      if (v16) {
        BOOL v12 = v16;
      }
    }
  }
  else
  {
    BOOL v12 = 0;
    uint64_t result = 0;
  }
LABEL_9:
  *a4 = v12;
  return result;
}

uint64_t llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>::getHashValue(_DWORD *a1)
{
  unint64_t v1 = ~((unint64_t)(37 * a1[2]) << 32)
     + (37 * a1[2])
     + ((unint64_t)((*a1 >> 4) ^ (*a1 >> 9)) << 32);
  unint64_t v2 = (v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13);
  unint64_t v3 = (9 * (v2 ^ (v2 >> 8))) ^ ((9 * (v2 ^ (v2 >> 8))) >> 15);
  return ((v3 + ~(v3 << 27)) >> 31) ^ (v3 + ~(v3 << 27));
}

double llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::FindAndConstruct(uint64_t a1, int *a2)
{
  uint64_t v9 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::LookupBucketFor<unsigned int>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  uint64_t v6 = v9;
  if (v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::grow(a1, v8);
    uint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::LookupBucketFor<unsigned int>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    uint64_t v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)v6 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)uint64_t v6 = *a2;
  *(void *)(v6 + 8) = v6 + 24;
  *(void *)&double result = 0x100000000;
  *(void *)(v6 + 16) = 0x100000000;
  return result;
}

_DWORD *llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        _DWORD *result = -1;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 32 * v3;
      uint64_t v13 = (_DWORD *)(v4 + 24);
      do
      {
        unsigned int v14 = *(v13 - 6);
        if (v14 <= 0xFFFFFFFD)
        {
          uint64_t v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::LookupBucketFor<unsigned int>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v20);
          uint64_t v15 = v20;
          _DWORD *v20 = *(v13 - 6);
          *((void *)v15 + 2) = 0x100000000;
          *((void *)v15 + 1) = v15 + 6;
          uint64_t v16 = (uint64_t)(v15 + 2);
          if (*(v13 - 2)) {
            llvm::SmallVectorImpl<unsigned int>::operator=(v16, (uint64_t)(v13 - 4));
          }
          ++*(_DWORD *)(a1 + 8);
          int v17 = (_DWORD *)*((void *)v13 - 2);
          if (v13 != v17) {
            free(v17);
          }
        }
        v13 += 8;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    uint64_t v19 = 32 * v18;
    do
    {
      _DWORD *result = -1;
      result += 8;
      v19 -= 32;
    }
    while (v19);
  }
  return result;
}

_OWORD *llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        _OWORD *result = xmmword_261E8D730;
        double result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = (_DWORD *)v4;
      do
      {
        int v14 = v13[2];
        if ((*(void *)v13 != -4096 || v14 != -1) && (*(void *)v13 != -8192 || v14 != -2))
        {
          uint64_t v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>,std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>(*(void *)a1, *(_DWORD *)(a1 + 16), v13, &v20);
          int v17 = v20;
          void *v20 = *(void *)v13;
          *((_DWORD *)v17 + 2) = v13[2];
          *((_DWORD *)v17 + 4) = v13[4];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 6;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    uint64_t v19 = 24 * v18;
    do
    {
      _OWORD *result = xmmword_261E8D730;
      double result = (_OWORD *)((char *)result + 24);
      v19 -= 24;
    }
    while (v19);
  }
  return result;
}

void std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v4 = *(void **)a2;
    operator delete(v4);
  }
}

void std::vector<llvm::InlineAsm::ConstraintInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<llvm::InlineAsm::ConstraintInfo>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<llvm::InlineAsm::ConstraintInfo>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 80)
  {
    unint64_t v5 = (void **)(i - 32);
    std::vector<llvm::InlineAsm::SubConstraintInfo>::__destroy_vector::operator()[abi:nn180100](&v5);
    unint64_t v5 = (void **)(i - 64);
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v5);
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<llvm::InlineAsm::SubConstraintInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 32;
        int v7 = (void **)(v4 - 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v6 = 4;
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      uint64_t v11 = 0;
      uint64_t result = 0;
      goto LABEL_11;
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  int HashValue = llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>::getHashValue((_DWORD *)a2);
  int v8 = v6 - 1;
  uint64_t v9 = *(void *)(a2 + 8);
  unsigned int v10 = HashValue & (v6 - 1);
  uint64_t v11 = (void *)(v5 + 24 * v10);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (*(void *)a2 == *v11 && v9 == v13)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v15 = 0;
    int v16 = 1;
    uint64_t result = 1;
    while (v12 != -4096 || v13 != -4096)
    {
      if (v15) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v13 == -8192;
      }
      if (v18 && v12 == -8192) {
        uint64_t v15 = v11;
      }
      unsigned int v20 = v10 + v16++;
      unsigned int v10 = v20 & v8;
      uint64_t v11 = (void *)(v5 + 24 * (v20 & v8));
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      if (*(void *)a2 == *v11 && v9 == v13) {
        goto LABEL_11;
      }
    }
    uint64_t result = 0;
    if (v15) {
      uint64_t v11 = v15;
    }
  }
LABEL_11:
  *a3 = v11;
  return result;
}

uint64_t llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::grow(uint64_t a1, unsigned int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v14 = a2;
      *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::moveFromOldBuckets(a1, v6, v6 + 24 * v7);
    JUMPOUT(0x263E500A0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v15;
  do
  {
    uint64_t v11 = *(void *)(a1 + v8 + 8);
    uint64_t v10 = *(void *)(a1 + v8 + 16);
    if ((v11 != -4096 || v10 != -4096) && (v11 != -8192 || v10 != -8192))
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)(a1 + v8 + 8);
      *((_DWORD *)v9 + 4) = *(_DWORD *)(a1 + v8 + 24);
      v9 += 24;
    }
    v8 += 24;
  }
  while (v8 != 96);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v12;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::moveFromOldBuckets(a1, (uint64_t)v15, (uint64_t)v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (int64x2_t *)(result + 8);
    uint64_t v9 = (int64x2_t *)(result + 104);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(result + 16);
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v8 = *(int64x2_t **)(result + 8);
    uint64_t v9 = (int64x2_t *)((char *)v8 + 24 * v7);
  }
  int64x2_t v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *uint64_t v8 = v10;
    uint64_t v8 = (int64x2_t *)((char *)v8 + 24);
  }
  while (v8 != v9);
LABEL_14:
  while (a2 != a3)
  {
    uint64_t v11 = *(void *)(a2 + 8);
    if ((*(void *)a2 != -4096 || v11 != -4096) && (*(void *)a2 != -8192 || v11 != -8192))
    {
      uint64_t v13 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>((uint64_t)v5, a2, &v13);
      uint64_t v12 = v13;
      *uint64_t v13 = *(void *)a2;
      v12[1] = *(void *)(a2 + 8);
      *((_DWORD *)v12 + 4) = *(_DWORD *)(a2 + 16);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::try_emplace<llvm::Value *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v19 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::LookupBucketFor<llvm::BasicBlock *>(a2, *a3, &v19);
  uint64_t v9 = v19;
  unsigned int v10 = *(_DWORD *)a2;
  if (result)
  {
    if (v10)
    {
      uint64_t v11 = a2 + 8;
      uint64_t v12 = 4;
    }
    else
    {
      uint64_t v11 = *(void *)(a2 + 8);
      uint64_t v12 = *(unsigned int *)(a2 + 16);
    }
    char v15 = 0;
    uint64_t v16 = v11 + 16 * v12;
    goto LABEL_17;
  }
  unsigned int v13 = v10 >> 1;
  if (v10) {
    unsigned int v14 = 4;
  }
  else {
    unsigned int v14 = *(_DWORD *)(a2 + 16);
  }
  if (4 * v13 + 4 >= 3 * v14)
  {
    v14 *= 2;
    goto LABEL_19;
  }
  if (v14 + ~v13 - *(_DWORD *)(a2 + 4) <= v14 >> 3)
  {
LABEL_19:
    llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::grow(a2, v14);
    uint64_t v19 = 0;
    uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::LookupBucketFor<llvm::BasicBlock *>(a2, *a3, &v19);
    uint64_t v9 = v19;
  }
  *(_DWORD *)a2 += 2;
  if (*v9 != -4096) {
    --*(_DWORD *)(a2 + 4);
  }
  *uint64_t v9 = *a3;
  v9[1] = *a4;
  uint64_t v17 = a2 + 8;
  if (*(unsigned char *)a2)
  {
    uint64_t v18 = 4;
  }
  else
  {
    uint64_t v17 = *(void *)(a2 + 8);
    uint64_t v18 = *(unsigned int *)(a2 + 16);
  }
  uint64_t v16 = v17 + 16 * v18;
  char v15 = 1;
LABEL_17:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v16;
  *(unsigned char *)(a1 + 16) = v15;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::LookupBucketFor<llvm::BasicBlock *>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    unsigned int v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        unsigned int v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      unsigned int v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::grow(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x263EF8340];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::moveFromOldBuckets(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x263E500A0);
  }
  uint64_t v8 = 0;
  uint64_t v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *uint64_t v9 = v10;
      v9[1] = *(void *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::moveFromOldBuckets(a1, v14, v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v12 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::LookupBucketFor<llvm::BasicBlock *>((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      uint64_t *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

__n128 std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::construct[abi:nn180100]<llvm::OperandBundleDefT<llvm::Value *>,std::string &,std::vector<llvm::Value *>>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v7 = *(std::string *)a2;
  }
  unint64_t v5 = a3[1].n128_u64[0];
  __n128 result = *a3;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  *(std::string *)a1 = v7;
  *(__n128 *)(a1 + 24) = result;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t *std::vector<llvm::OperandBundleDefT<llvm::Value *>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 48;
      long long v6 = *(_OWORD *)(v3 - 48);
      *(void *)(v4 - 32) = *(void *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v6;
      *(void *)(v3 - 40) = 0;
      *(void *)(v3 - 32) = 0;
      *(void *)(v3 - 48) = 0;
      *(void *)(v4 - 24) = 0;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v3 -= 48;
      v4 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v7 = *result;
  _OWORD *result = v5;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void **std::__split_buffer<llvm::OperandBundleDefT<llvm::Value *>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<llvm::OperandBundleDefT<llvm::Value *>>::clear[abi:nn180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::destroy[abi:nn180100](v4, i - 48);
  }
}

void std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::resize(void *a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__base_destruct_at_end[abi:nn180100]((uint64_t)a1, (llvm::ValueHandleBase *)(*a1 + 32 * a2));
    }
  }
  else
  {
    std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__append((uint64_t)a1, a2 - v2);
  }
}

uint64_t std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t result = a1 + 16;
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = v7 + 32 * a2;
      do
      {
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)uint64_t v7 = 6;
        *(_DWORD *)(v7 + 24) = 0;
        v7 += 32;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    *(void *)(a1 + 8) = v7;
  }
  else
  {
    uint64_t v8 = v7 - *(void *)a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      abort();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *(void *)a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    void v17[4] = result;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(result, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    char v15 = &v13[32 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[32 * v12];
    uint64_t v16 = &v15[32 * a2];
    do
    {
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = 0;
      *(void *)char v15 = 6;
      *((_DWORD *)v15 + 6) = 0;
      v15 += 32;
    }
    while (v15 != v16);
    void v17[2] = v16;
    std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__swap_out_circular_buffer((unint64_t **)a1, v17);
    return std::__split_buffer<std::pair<llvm::WeakTrackingVH,unsigned int>>::~__split_buffer((uint64_t)v17);
  }
  return result;
}

void std::vector<llvm::OperandBundleDefT<llvm::Value *>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<llvm::SmallString<32u>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<llvm::SmallString<32u>>::destroy(a1, *a2);
    std::__tree<llvm::SmallString<32u>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[4];
    if (v4 != a2 + 7) {
      free(v4);
    }
    operator delete(a2);
  }
}

void anonymous namespace'::BitcodeReader::parseModule(void ***a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8 = a2;
  uint64_t v577 = *MEMORY[0x263EF8340];
  uint64_t v10 = a5 + 40;
  uint64_t v11 = a2 + 1832;
  if (*(unsigned __int8 *)(a2 + 1864) == *(unsigned __int8 *)(a5 + 72))
  {
    if (*(unsigned char *)(a2 + 1864))
    {
      uint64_t v12 = *(void *)(a2 + 1856);
      *(void *)(a2 + 1856) = 0;
      if (v12 == v11)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 32))(a2 + 1832);
      }
      else if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
      }
      uint64_t v14 = *(void *)(a5 + 64);
      if (v14)
      {
        if (v14 == v10)
        {
          *(void *)(v8 + 1856) = v11;
          (*(void (**)(void, uint64_t))(**(void **)(a5 + 64) + 24))(*(void *)(a5 + 64), v11);
        }
        else
        {
          *(void *)(v8 + 1856) = v14;
          *(void *)(a5 + 64) = 0;
        }
      }
      else
      {
        *(void *)(v8 + 1856) = 0;
      }
    }
  }
  else if (*(unsigned char *)(a2 + 1864))
  {
    std::__function::__value_func<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::~__value_func[abi:nn180100]((void *)(a2 + 1832));
    *(unsigned char *)(v8 + 1864) = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(a5 + 64);
    if (v13)
    {
      if (v13 == v10)
      {
        *(void *)(a2 + 1856) = v11;
        (*(void (**)(void, uint64_t))(**(void **)(a5 + 64) + 24))(*(void *)(a5 + 64), a2 + 1832);
      }
      else
      {
        *(void *)(a2 + 1856) = v13;
        *(void *)(a5 + 64) = 0;
      }
    }
    else
    {
      *(void *)(a2 + 1856) = 0;
    }
    *(unsigned char *)(v8 + 1864) = 1;
  }
  char v15 = (llvm::BitstreamCursor *)(v8 + 32);
  uint64_t v16 = (llvm::BitstreamCursor *)(v8 + 32);
  if (a3) {
    llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)v16, a3, a1);
  }
  else {
    llvm::BitstreamCursor::EnterSubBlock(v16, 0, 8, a1);
  }
  if (!*a1)
  {
    uint64_t v554 = v556;
    uint64_t v555 = 0x4000000000;
    char v550 = 0;
    uint64_t v17 = *(void *)(v8 + 432);
    int v545 = a4;
    if (*(char *)(v17 + 495) < 0) {
      std::string::__init_copy_ctor_external(&v549, *(const std::string::value_type **)(v17 + 472), *(void *)(v17 + 480));
    }
    else {
      std::string v549 = *(std::string *)(v17 + 472);
    }
    v548[0] = &v550;
    v548[1] = &v549;
    uint64_t v18 = (const llvm::Twine *)(v8 + 8);
    v548[2] = v8;
    v548[3] = a5;
    char v537 = (std::allocator<std::string> *)(v8 + 1792);
    uint64_t v530 = (void **)(v8 + 1512);
    unsigned int v539 = (void *)(v8 + 1800);
    uint64_t v540 = v8 + 1608;
    v534 = (void *)(v8 + 520);
    uint64_t v535 = v8 + 544;
    unsigned int v538 = (uint64_t **)(v8 + 1464);
    uint64_t v536 = v8 + 1456;
    v541 = (llvm::BitcodeReaderValueList *)(v8 + 712);
    uint64_t v532 = v8 + 592;
    uint64_t v533 = v8 + 816;
    int v531 = (char **)(v8 + 1416);
    uint64_t v529 = v8 + 1568;
    unint64_t v543 = (std::allocator<std::string> *)(v8 + 512);
    v544 = (int64x2_t *)(v8 + 472);
    v542 = (std::allocator<std::string> *)(v8 + 488);
    unint64_t v546 = (llvm::Twine *)(v8 + 8);
    v547 = (_anonymous_namespace_::BitcodeReader *)v8;
    while (2)
    {
      llvm::BitstreamCursor::advance(v15, 0, (uint64_t)&v552);
      if (v553)
      {
        uint64_t v19 = v552;
        __n128 v552 = 0;
        *a1 = v19;
        goto LABEL_34;
      }
      if (v552 != 2)
      {
        if (v552 != 1)
        {
          if (!v552)
          {
            v576.__first_ = (std::__split_buffer<std::string>::pointer)"Malformed block";
            LOWORD(v576.__end_cap_.__value_) = 259;
          }
          llvm::BitstreamCursor::readRecord(v15, SHIDWORD(v552), (unsigned int *)&v554, 0, (uint64_t)&v557);
          if (v558)
          {
            unint64_t v29 = (void **)v557;
            uint64_t v557 = 0;
            *a1 = v29;
LABEL_52:
            int v20 = 1;
            goto LABEL_882;
          }
          int v23 = (int)v557;
          switch((int)v557)
          {
            case 1:
              if (!v555)
              {
                v576.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid version record";
                LOWORD(v576.__end_cap_.__value_) = 259;
              }
              uint64_t v208 = *(void *)v554;
              if (*(void *)v554 >= 3)
              {
                v576.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid value";
                LOWORD(v576.__end_cap_.__value_) = 259;
              }
              *(unsigned char *)(v8 + 392) = v208 == 2;
              unint64_t v515 = v208 | v515 & 0xFFFFFFFF00000000;
              *(unsigned char *)(v8 + 1712) = v208 != 0;
              goto LABEL_881;
            case 2:
              if (v550)
              {
                __int16 v209 = (std::string *)"target triple too late in module";
                goto LABEL_654;
              }
              memset(&v576, 0, 24);
              std::string::append[abi:nn180100]<unsigned long long const*,0>((std::string *)&v576, (std::string *)v554, (std::string *)((char *)v554 + 8 * v555));
              if (SHIBYTE(v576.__end_) >= 0) {
                int first = &v576;
              }
              else {
                int first = v576.__first_;
              }
              if (SHIBYTE(v576.__end_) >= 0) {
                size_t end_high = HIBYTE(v576.__end_);
              }
              else {
                size_t end_high = (size_t)v576.__begin_;
              }
              llvm::Module::setTargetTriple(*(void *)(v8 + 432), first, end_high);
LABEL_631:
              if (SHIBYTE(v576.__end_) < 0)
              {
                std::__split_buffer<std::string>::pointer v251 = v576.__first_;
LABEL_782:
                operator delete(v251);
              }
              goto LABEL_881;
            case 3:
              if (v550)
              {
                __int16 v209 = (std::string *)"datalayout too late in module";
                goto LABEL_654;
              }
              std::string::append[abi:nn180100]<unsigned long long const*,0>(&v549, (std::string *)v554, (std::string *)((char *)v554 + 8 * v555));
              goto LABEL_881;
            case 4:
              memset(&v576, 0, 24);
              std::string::append[abi:nn180100]<unsigned long long const*,0>((std::string *)&v576, (std::string *)v554, (std::string *)((char *)v554 + 8 * v555));
              if (SHIBYTE(v576.__end_) >= 0) {
                char v210 = &v576;
              }
              else {
                char v210 = v576.__first_;
              }
              if (SHIBYTE(v576.__end_) >= 0) {
                size_t begin = HIBYTE(v576.__end_);
              }
              else {
                size_t begin = (size_t)v576.__begin_;
              }
              llvm::Module::setModuleInlineAsm(*(void *)(v8 + 432), v210, begin);
              goto LABEL_631;
            case 5:
              memset(&v575, 0, 24);
              std::string::append[abi:nn180100]<unsigned long long const*,0>((std::string *)&v575, (std::string *)v554, (std::string *)((char *)v554 + 8 * v555));
              unint64_t v213 = *(void *)(v8 + 480);
              unint64_t v212 = *(void *)(v8 + 488);
              if (v213 >= v212)
              {
                unint64_t v234 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v213 - v544->i64[0]) >> 3);
                unint64_t v235 = v234 + 1;
                if (v234 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_1095;
                }
                unint64_t v236 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v212 - v544->i64[0]) >> 3);
                if (2 * v236 > v235) {
                  unint64_t v235 = 2 * v236;
                }
                if (v236 >= 0x555555555555555) {
                  unint64_t v237 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v237 = v235;
                }
                v576.__end_cap_.__value_ = v542;
                if (v237)
                {
                  uint64_t v238 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v542, v237);
                  uint64_t v240 = v239;
                }
                else
                {
                  uint64_t v238 = 0;
                  uint64_t v240 = 0;
                }
                unint64_t v311 = &v238->__r_.__value_.__s.__data_[24 * v234];
                if (SHIBYTE(v575.__end_) < 0)
                {
                  std::string::__init_copy_ctor_external(v238 + v234, (const std::string::value_type *)v575.__first_, (std::string::size_type)v575.__begin_);
                }
                else
                {
                  long long v312 = *(_OWORD *)&v575.__first_;
                  *((void *)v311 + 2) = v575.__end_;
                  *(_OWORD *)unint64_t v311 = v312;
                }
                uint64_t v316 = *((void *)v547 + 59);
                unint64_t v315 = *((void *)v547 + 60);
                if (v315 == v316)
                {
                  int64x2_t v319 = vdupq_n_s64(v315);
                  uint64_t v317 = &v238->__r_.__value_.__s.__data_[24 * v234];
                }
                else
                {
                  uint64_t v317 = &v238->__r_.__value_.__s.__data_[24 * v234];
                  do
                  {
                    long long v318 = *(_OWORD *)(v315 - 24);
                    *((void *)v317 - 1) = *(void *)(v315 - 8);
                    *(_OWORD *)(v317 - 24) = v318;
                    v317 -= 24;
                    *(void *)(v315 - 16) = 0;
                    *(void *)(v315 - 8) = 0;
                    *(void *)(v315 - 24) = 0;
                    v315 -= 24;
                  }
                  while (v315 != v316);
                  int64x2_t v319 = *v544;
                }
                uint64_t v309 = v311 + 24;
                uint64_t v326 = &v238[v240];
                uint64_t v8 = (uint64_t)v547;
                *((void *)v547 + 59) = v317;
                *((void *)v547 + 60) = v311 + 24;
                *(int64x2_t *)&v576.__begin_ = v319;
                int v327 = (std::string *)*((void *)v547 + 61);
                *((void *)v547 + 61) = v326;
                v576.__end_cap_.__value_ = v327;
                v576.__first_ = (std::__split_buffer<std::string>::pointer)v319.i64[0];
                std::__split_buffer<std::string>::~__split_buffer(&v576);
              }
              else
              {
                if (SHIBYTE(v575.__end_) < 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(v8 + 480), (const std::string::value_type *)v575.__first_, (std::string::size_type)v575.__begin_);
                }
                else
                {
                  long long v214 = *(_OWORD *)&v575.__first_;
                  *(void *)(v213 + 16) = v575.__end_;
                  *(_OWORD *)unint64_t v213 = v214;
                }
                uint64_t v309 = (char *)(v213 + 24);
              }
              *(void *)(v8 + 480) = v309;
              goto LABEL_780;
            case 6:
              memset(&v576, 0, 24);
              std::string::append[abi:nn180100]<unsigned long long const*,0>((std::string *)&v576, (std::string *)v554, (std::string *)((char *)v554 + 8 * v555));
              goto LABEL_631;
            case 7:
              long long v215 = (char *)v554;
              unint64_t v216 = v555;
              if (*(unsigned char *)(v8 + 392))
              {
                uint64_t v217 = v8;
                unsigned int v218 = (std::string *)*((void *)v554 + 1);
                if ((unint64_t)v218 + *(void *)v554 > *(void *)(v217 + 384)) {
                  goto LABEL_641;
                }
                unsigned int v219 = (const char *)(*((void *)v547 + 47) + *(void *)v554);
                unint64_t v216 = v555 - 2;
                long long v215 = (char *)v554 + 16;
              }
              else
              {
                unsigned int v218 = 0;
                unsigned int v219 = "";
              }
              if (v216 <= 5 {
                || (uint64_t v518 = (std::string *)v219,
              }
                    unint64_t v525 = v216,
                    LODWORD(v567) = *(_DWORD *)v215,
                    int v252 = (int)v567,
              {
LABEL_641:
                v576.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid record";
                LOWORD(v576.__end_cap_.__value_) = 259;
                uint64_t v207 = (_anonymous_namespace_::BitcodeReaderBase *)a1;
LABEL_642:
              }
              unint64_t v254 = *((void *)v215 + 1);
              if ((v254 & 2) != 0)
              {
                *(void *)__int16 v512 = *((void *)v215 + 1);
                unint64_t v499 = (v254 >> 2);
                uint64_t v502 = (llvm::PointerType **)TypeByID;
              }
              else
              {
                unint64_t v255 = *(unsigned int *)(TypeByID + 8);
                if (*(_DWORD *)(TypeByID + 8) != 15)
                {
LABEL_753:
                  uint64_t v206 = (std::string *)"Invalid type for value";
                  goto LABEL_558;
                }
                *(void *)__int16 v512 = *((void *)v215 + 1);
                if (!v256)
                {
                  uint64_t v206 = (std::string *)"Missing element type for old-style global";
LABEL_558:
                  v576.__first_ = v206;
LABEL_559:
                  LOWORD(v576.__end_cap_.__value_) = 259;
                  uint64_t v207 = (_anonymous_namespace_::BitcodeReaderBase *)a1;
                  uint64_t v18 = v546;
                  goto LABEL_642;
                }
                unint64_t v499 = v255 >> 8;
                uint64_t v502 = (llvm::PointerType **)v256;
                uint64_t v18 = v546;
              }
              unint64_t v369 = *((void *)v215 + 3);
              int DecodedLinkage = getDecodedLinkage(v369);
              LOWORD(v564) = 0;
              if (*a1) {
                goto LABEL_1033;
              }
              memset(&v575, 0, 24);
              uint64_t v370 = *((void *)v215 + 5);
              if (!v370) {
                goto LABEL_858;
              }
              unint64_t v371 = v370 - 1;
              uint64_t v372 = *((void *)v547 + 59);
              if (v371 >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)v547 + 60) - v372) >> 3))
              {
                size_t v385 = (std::string *)"Invalid ID";
                goto LABEL_1014;
              }
              std::string::operator=((std::string *)&v575, (const std::string *)(v372 + 24 * v371));
LABEL_858:
              unint64_t v491 = v369;
              if (v525 < 7)
              {
                char v493 = 0;
                char v498 = 0;
              }
              else
              {
                if ((DecodedLinkage - 7) >= 2)
                {
                  int v387 = *((_DWORD *)v215 + 12);
                  if (v387 == 2) {
                    char v373 = 2;
                  }
                  else {
                    char v373 = v387 == 1;
                  }
                }
                else
                {
                  char v373 = 0;
                }
                char v498 = v373;
                if (v525 >= 8)
                {
                  if (*((_DWORD *)v215 + 14) >= 5u) {
                    LOBYTE(v388) = 1;
                  }
                  else {
                    int v388 = *((_DWORD *)v215 + 14);
                  }
                  char v495 = v388;
                  if (v525 == 8)
                  {
                    char v493 = 0;
                  }
                  else
                  {
                    int v445 = *((_DWORD *)v215 + 16);
                    if (v445 == 2) {
                      char v446 = 1;
                    }
                    else {
                      char v446 = 2 * (v445 == 1);
                    }
                    char v493 = v446;
                    if (v525 != 9)
                    {
                      BOOL v389 = *((void *)v215 + 9) != 0;
LABEL_916:
                      unsigned int v390 = (char *)operator new(0x78uLL);
                      *((_DWORD *)v390 + 13) = *((_DWORD *)v390 + 13) & 0x38000000 | 1;
                      *(void *)unsigned int v390 = 0;
                      *((void *)v390 + 1) = 0;
                      *((void *)v390 + 2) = 0;
                      *((void *)v390 + 3) = v390 + 32;
                      uint64_t v391 = *((void *)v547 + 54);
                      LOWORD(v576.__end_cap_.__value_) = 261;
                      v576.__first_ = v518;
                      v576.__begin_ = v218;
                      char v490 = v389;
                      unsigned int v392 = (uint64_t *)(v390 + 32);
                      llvm::GlobalVariable::GlobalVariable((uint64_t)(v390 + 32), v391, v502, v512[0] & 1, DecodedLinkage, 0, (const llvm::Twine *)&v576, 0, v495, v499 | 0x100000000, v490);
                      if (BYTE1(v564)) {
                        *((_DWORD *)v390 + 16) = ((v564 << 17) + 0x20000) | *((_DWORD *)v390 + 16) & 0xFF81FFFF;
                      }
                      if (SHIBYTE(v575.__end_) >= 0) {
                        uint64_t v394 = HIBYTE(v575.__end_);
                      }
                      else {
                        uint64_t v394 = (uint64_t)v575.__begin_;
                      }
                      if (v394)
                      {
                        if (SHIBYTE(v575.__end_) >= 0) {
                          uint64_t v395 = &v575;
                        }
                        else {
                          uint64_t v395 = v575.__first_;
                        }
                        llvm::GlobalObject::setSection(v392, (uint64_t)v395, v394, v393);
                      }
                      llvm::GlobalValue::setVisibility((uint64_t)v392, v498);
                      int v396 = *((_DWORD *)v390 + 16) & 0xF;
                      unsigned int v397 = *((_DWORD *)v390 + 16) & 0xFFFFFF3F | ((v493 & 3) << 6);
                      *((_DWORD *)v390 + 16) = v397;
                      unsigned int v398 = v396 - 7;
                      if (v525 < 0xB)
                      {
                        if (v398 >= 2)
                        {
                          if (v491 == 5)
                          {
                            int v400 = 256;
                          }
                          else
                          {
                            if (v491 != 6) {
                              goto LABEL_991;
                            }
                            int v400 = 512;
                          }
LABEL_990:
                          *((_DWORD *)v390 + 16) = v400 | v397 & 0xFFFFFCFF;
                        }
                      }
                      else if (v398 >= 2)
                      {
                        int v399 = *((_DWORD *)v215 + 20);
                        if (v399 == 2) {
                          int v400 = 512;
                        }
                        else {
                          int v400 = (v399 == 1) << 8;
                        }
                        goto LABEL_990;
                      }
LABEL_991:
                      llvm::BitcodeReaderValueList::push_back(v541, (llvm::Value *)v392, VirtualTypeID);
                      uint64_t v448 = *((void *)v215 + 2);
                      unint64_t v449 = v525;
                      v521 = (const void **)(v390 + 32);
                      if (v448)
                      {
                        unsigned int v450 = (const void **)(v448 - 1);
                        int v451 = (uint64_t **)*((void *)v547 + 172);
                        unint64_t v452 = *((void *)v547 + 173);
                        if ((unint64_t)v451 >= v452)
                        {
                          uint64_t v454 = *((void *)v547 + 171);
                          uint64_t v455 = ((uint64_t)v451 - v454) >> 4;
                          unint64_t v456 = v455 + 1;
                          if ((unint64_t)(v455 + 1) >> 60) {
LABEL_1095:
                          }
                            abort();
                          uint64_t v457 = v452 - v454;
                          if (v457 >> 3 > v456) {
                            unint64_t v456 = v457 >> 3;
                          }
                          if ((unint64_t)v457 >= 0x7FFFFFFFFFFFFFF0) {
                            unint64_t v458 = 0xFFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v458 = v456;
                          }
                          if (v458)
                          {
                            *(void *)uint64_t v514 = v450;
                            unint64_t v458 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v458);
                            unsigned int v450 = *(const void ***)v514;
                          }
                          else
                          {
                            uint64_t v459 = 0;
                          }
                          uint64_t v460 = (const void ***)(v458 + 16 * v455);
                          *uint64_t v460 = v521;
                          v460[1] = v450;
                          uint64_t v461 = (char *)*((void *)v547 + 172);
                          uint64_t v462 = (char *)*((void *)v547 + 171);
                          unsigned int v463 = v460;
                          if (v461 != v462)
                          {
                            do
                            {
                              *((_OWORD *)v463 - 1) = *((_OWORD *)v461 - 1);
                              v463 -= 2;
                              v461 -= 16;
                            }
                            while (v461 != v462);
                            uint64_t v461 = (char *)*((void *)v547 + 171);
                          }
                          *((void *)v547 + 171) = v463;
                          uint64_t v453 = v460 + 2;
                          *((void *)v547 + 172) = v460 + 2;
                          *((void *)v547 + 173) = v458 + 16 * v459;
                          if (v461) {
                            operator delete(v461);
                          }
                          unint64_t v449 = v525;
                        }
                        else
                        {
                          *int v451 = v392;
                          v451[1] = (uint64_t *)v450;
                          uint64_t v453 = v451 + 2;
                        }
                        *((void *)v547 + 172) = v453;
                      }
                      if (v449 < 0xC)
                      {
                        uint64_t v18 = v546;
                        if (v491 <= 0xB && ((1 << v491) & 0xC12) != 0)
                        {
                          unsigned int v560 = v390 + 32;
                          llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>,llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v576, v533, (uint64_t *)&v560);
                        }
                        goto LABEL_1030;
                      }
                      uint64_t v464 = *((void *)v215 + 11);
                      uint64_t v18 = v546;
                      if (v464)
                      {
                        uint64_t v465 = *((void *)v547 + 99);
                        if (*((void *)v215 + 11) > (unint64_t)((*((void *)v547 + 100) - v465) >> 3))
                        {
                          size_t v385 = (std::string *)"Invalid global variable comdat ID";
LABEL_1014:
                          v576.__first_ = v385;
                          LOWORD(v576.__end_cap_.__value_) = 259;
                        }
                        llvm::GlobalObject::setComdat(v521, *(void *)(v465 + 8 * (v464 - 1)));
                        unint64_t v449 = v525;
                      }
                      if (v449 < 0xD) {
                        goto LABEL_1030;
                      }
                      unint64_t v466 = (*((_DWORD *)v215 + 24) - 1);
                      uint64_t v467 = *((void *)v547 + 180);
                      if (v466 >= (*((void *)v547 + 181) - v467) >> 3) {
                        goto LABEL_1024;
                      }
                      uint64_t v468 = *(void *)(v467 + 8 * v466);
                      if (!v468) {
                        goto LABEL_1025;
                      }
                      if (*(_DWORD *)(v468 + 8)) {
                        uint64_t v468 = *(void *)(v468 + 40);
                      }
                      else {
LABEL_1024:
                      }
                        uint64_t v468 = 0;
LABEL_1025:
                      *((void *)v390 + 13) = v468;
                      if (v449 > 0xD)
                      {
                        *((_DWORD *)v390 + 16) = *((_DWORD *)v390 + 16) & 0xFFFFBFFF | ((*((_DWORD *)v215 + 26) == 1) << 14);
                        inferDSOLocal((uint64_t)v521);
                        if (v525 >= 0x10)
                        {
                          llvm::GlobalValue::setPartition(v521, *((void *)v547 + 47) + *((void *)v215 + 14), *((void *)v215 + 15), v469);
                          if (v525 != 16)
                          {
                            uint64_t v470 = *((void *)v215 + 16);
                            if (v470) {
                              llvm::GlobalValue::setSanitizerMetadata(v521, v470 & 0xF);
                            }
                          }
                        }
LABEL_1031:
                        *a1 = 0;
                        if (SHIBYTE(v575.__end_) < 0) {
                          operator delete(v575.__first_);
                        }
LABEL_1033:
                        uint64_t v8 = (uint64_t)v547;
                        goto LABEL_880;
                      }
LABEL_1030:
                      inferDSOLocal((uint64_t)v521);
                      goto LABEL_1031;
                    }
                  }
LABEL_915:
                  BOOL v389 = 0;
                  goto LABEL_916;
                }
                char v493 = 0;
              }
              char v495 = 0;
              goto LABEL_915;
            case 8:
              if (*a1)
              {
                int v20 = 1;
                goto LABEL_882;
              }
              uint64_t v257 = (unsigned int *)v554;
              unint64_t v258 = v555;
              if (*(unsigned char *)(v8 + 392))
              {
                unint64_t v259 = (std::string *)*((void *)v554 + 1);
                if ((unint64_t)v259 + *(void *)v554 > *(void *)(v8 + 384)) {
                  goto LABEL_849;
                }
                unsigned int v260 = (std::string *)(*(void *)(v8 + 376) + *(void *)v554);
                unint64_t v258 = v555 - 2;
                uint64_t v257 = (unsigned int *)((char *)v554 + 16);
              }
              else
              {
                unint64_t v259 = 0;
                unsigned int v260 = (std::string *)"";
              }
              if (v258 <= 7 {
                || (unint64_t v497 = v258,
              }
                    v501 = v257,
                    v573[0] = *v257,
                    int v513 = v573[0],
              {
LABEL_849:
                uint64_t v367 = (std::string *)"Invalid record";
                goto LABEL_850;
              }
              unint64_t v363 = v362;
              int v364 = *(unsigned __int8 *)(v362 + 8);
              if (v364 == 15)
              {
                int v513 = v573[0];
                if (!v365)
                {
                  uint64_t v367 = (std::string *)"Missing element type for old-style function";
LABEL_850:
                  v576.__first_ = v367;
LABEL_851:
                  LOWORD(v576.__end_cap_.__value_) = 259;
                  unsigned int v368 = (_anonymous_namespace_::BitcodeReaderBase *)a1;
                  uint64_t v18 = v546;
                  goto LABEL_852;
                }
                unint64_t v363 = v365;
                int v364 = *(unsigned __int8 *)(v365 + 8);
              }
              if (v364 != 14)
              {
                uint64_t v367 = (std::string *)"Invalid type for value";
                goto LABEL_850;
              }
              uint64_t v366 = *((void *)v501 + 1);
              if ((v366 & 0xFFFFFC00) != 0)
              {
                uint64_t v206 = (std::string *)"Invalid calling convention ID";
                goto LABEL_558;
              }
              uint64_t v526 = *((void *)v547 + 54);
              if (v497 < 0x11)
              {
                unsigned int v519 = *(_DWORD *)(*((void *)v547 + 54) + 268);
                size_t v386 = v501;
              }
              else
              {
                size_t v386 = v501;
                unsigned int v519 = v501[32];
              }
              LOWORD(v576.__end_cap_.__value_) = 261;
              v576.__first_ = v260;
              v576.__begin_ = v259;
              uint64_t v401 = (char *)operator new(0x80uLL);
              *((_DWORD *)v401 + 7) = *((_DWORD *)v401 + 7) & 0x38000000 | 0x40000000;
              *(void *)uint64_t v401 = 0;
              uint64_t v402 = v363;
              uint64_t v403 = (uint64_t)(v401 + 8);
              unint64_t v567 = (void *)llvm::Function::Function((uint64_t)(v401 + 8), v402, 0, (llvm::Type *)v519, (const llvm::Twine *)&v576, v526);
              *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>,llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::FindAndConstruct(v532, (uint64_t *)&v567)+ 8) = v513;
              *((_WORD *)v401 + 13) = *((_WORD *)v401 + 13) & 0xC00F | (16 * v366);
              uint64_t v492 = *((void *)v386 + 2);
              unint64_t v494 = *((void *)v386 + 3);
              uint64_t v496 = v401;
              int v404 = getDecodedLinkage(v494);
              llvm::GlobalValue::setLinkage((uint64_t)(v401 + 8), v404);
              uint64_t v405 = 0;
              unint64_t v406 = v386[8] - 1;
              uint64_t v8 = (uint64_t)v547;
              uint64_t v407 = *((void *)v547 + 180);
              if (v406 < (*((void *)v547 + 181) - v407) >> 3) {
                uint64_t v405 = *(void *)(v407 + 8 * v406);
              }
              *((void *)v401 + 15) = v405;
              unint64_t v408 = (uint64_t *)(v401 + 120);
              uint64_t v18 = v546;
              if (*((unsigned char *)v547 + 1864))
              {
                v576.__first_ = (std::__split_buffer<std::string>::pointer)&unk_270DC1880;
                v576.__begin_ = (std::__split_buffer<std::string>::pointer)v547;
                v576.__end_cap_.__value_ = (std::string *)&v576;
                v575.__first_ = (std::__split_buffer<std::string>::pointer)&unk_270DC18C8;
                v575.__begin_ = (std::__split_buffer<std::string>::pointer)v547;
                v575.__end_cap_.__value_ = (std::string *)&v575;
                uint64_t v409 = v408;
                std::function<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::operator()(*((void *)v547 + 232), v403, v513);
                std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::~__value_func[abi:nn180100](&v575);
                std::__function::__value_func<llvm::Type * ()>::~__value_func[abi:nn180100](&v576);
                unint64_t v408 = v409;
              }
              unint64_t v508 = (uint64_t ***)v403;
              unint64_t v410 = v501;
              if (*((void *)v496 + 13))
              {
                unsigned int v411 = 0;
                uint64_t v412 = *v408;
                do
                {
                  uint64_t v413 = 0;
                  v575.__first_ = (std::__split_buffer<std::string>::pointer)0x4A00000046;
                  LODWORD(v575.__begin_) = 72;
                  unsigned int v527 = v411 + 1;
                  unsigned int v504 = v411;
                  int v414 = (llvm::GlobalValue *)(v411 + 2);
                  uint64_t v415 = v412;
                  uint64_t v520 = v414;
                  do
                  {
                    if (v415)
                    {
                      if (v414 < *(_DWORD *)(v415 + 8))
                      {
                        uint64_t v416 = *(void *)(v415 + 8 * (void)v414 + 40);
                        if (v416)
                        {
                          int v417 = *(_DWORD *)((char *)&v575.__first_ + v413);
                          if ((*(unsigned __int8 *)(v416 + v417 / 8 + 12) >> (v417 & 7)))
                          {
                            unsigned int v418 = v408;
                            uint64_t AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(v408, v527, *(_DWORD *)((char *)&v575.__first_ + v413));
                            int v414 = v520;
                            unint64_t v408 = v418;
                            if (!AttributeAtIndex || !*(void *)(AttributeAtIndex + 16))
                            {
                              *unsigned int v418 = (uint64_t)llvm::AttributeList::removeAttributeAtIndex(v418, **v508, v527, v417);
                              if (!PtrElementTypeByID)
                              {
                                v576.__first_ = (std::__split_buffer<std::string>::pointer)"Missing param element type fo"
                                                                                           "r attribute upgrade";
                                LOWORD(v576.__end_cap_.__value_) = 259;
                              }
                              unint64_t v422 = llvm::Attribute::get(*((uint64_t **)v547 + 53), v417, PtrElementTypeByID);
                              LODWORD(v576.__first_) = v504;
                              uint64_t v423 = llvm::AttributeList::addParamAttribute(v418, **v508, &v576, 1, v422);
                              *unsigned int v418 = (uint64_t)v423;
                              uint64_t v412 = (uint64_t)v423;
                              uint64_t v415 = (uint64_t)v423;
                              unint64_t v408 = v418;
                              int v414 = v520;
                            }
                          }
                        }
                      }
                    }
                    v413 += 4;
                  }
                  while (v413 != 12);
                  unsigned int v411 = v527;
                }
                while (*((void *)v496 + 13) != v527);
                uint64_t v18 = v546;
                uint64_t v8 = (uint64_t)v547;
                unint64_t v410 = v501;
                if (v527)
                {
                  if ((*((_WORD *)v496 + 13) & 0x3FF0) == 0x530
                    && (!v412
                     || *(_DWORD *)(v412 + 8) < 3u
                     || (uint64_t v424 = *(void *)(v412 + 56)) == 0
                     || (*(unsigned char *)(v424 + 20) & 0x40) == 0))
                  {
                    v425 = v408;
                    if (!v427)
                    {
                      v472 = (std::string *)"Missing param element type for x86_intrcc upgrade";
LABEL_1037:
                      v576.__first_ = v472;
                      LOWORD(v576.__end_cap_.__value_) = 259;
                      unsigned int v368 = (_anonymous_namespace_::BitcodeReaderBase *)a1;
LABEL_852:
                    }
                    unint64_t v428 = llvm::Attribute::get(*((uint64_t **)v547 + 53), 70, v427);
                    LODWORD(v576.__first_) = 0;
                    void *v425 = llvm::AttributeList::addParamAttribute(v425, **v508, &v576, 1, v428);
                    unint64_t v410 = v501;
                  }
                }
              }
              LOWORD(v571) = 0;
              if (*a1) {
                goto LABEL_880;
              }
              if (BYTE1(v571)) {
                *((_DWORD *)v496 + 10) = ((v571 << 17) + 0x20000) | *((_DWORD *)v496 + 10) & 0xFF81FFFF;
              }
              uint64_t v430 = *((void *)v410 + 6);
              int v431 = v508;
              if (v430)
              {
                unint64_t v432 = v430 - 1;
                uint64_t v433 = *(void *)(v8 + 472);
                if (v432 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v8 + 480) - v433) >> 3))
                {
                  v472 = (std::string *)"Invalid ID";
                  goto LABEL_1037;
                }
                uint64_t v434 = v433 + 24 * v432;
                int v435 = *(char *)(v434 + 23);
                if (v435 >= 0) {
                  uint64_t v436 = v434;
                }
                else {
                  uint64_t v436 = *(void *)v434;
                }
                if (v435 >= 0) {
                  uint64_t v437 = *(unsigned __int8 *)(v434 + 23);
                }
                else {
                  uint64_t v437 = *(void *)(v434 + 8);
                }
                llvm::GlobalObject::setSection(v508, v436, v437, v429);
              }
              if ((*((_DWORD *)v496 + 10) & 0xFu) - 7 >= 2)
              {
                unsigned int v438 = v501[14];
                if (v438 == 2) {
                  char v439 = 2;
                }
                else {
                  char v439 = v438 == 1;
                }
                llvm::GlobalValue::setVisibility((uint64_t)v508, v439);
              }
              if (v497 < 9)
              {
                int v471 = 0;
              }
              else
              {
                uint64_t v440 = *((void *)v501 + 8);
                if (v440)
                {
                  unint64_t v441 = v440 - 1;
                  uint64_t v442 = *(void *)(v8 + 496);
                  if (v441 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v8 + 504) - v442) >> 3))
                  {
                    uint64_t v473 = (std::string *)"Invalid ID";
LABEL_1039:
                    v576.__first_ = v473;
                    goto LABEL_559;
                  }
                  uint64_t v443 = (long long *)(v442 + 24 * v441);
                  if (*((char *)v443 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)&v575, *(const std::string::value_type **)v443, *((void *)v443 + 1));
                  }
                  else
                  {
                    long long v444 = *v443;
                    v575.__end_ = (std::__split_buffer<std::string>::pointer)*((void *)v443 + 2);
                    *(_OWORD *)&v575.__first_ = v444;
                  }
                  llvm::Function::setGC((uint64_t)v508, (uint64_t)&v575);
                  if (SHIBYTE(v575.__end_) < 0) {
                    operator delete(v575.__first_);
                  }
                }
                if (v497 < 0xA)
                {
                  int v471 = 0;
                }
                else
                {
                  unsigned int v474 = v501[18];
                  if (v474 == 2) {
                    int v471 = 64;
                  }
                  else {
                    int v471 = (v474 == 1) << 7;
                  }
                }
                int v431 = v508;
              }
              unsigned int v528 = 0;
              int v475 = *((_DWORD *)v496 + 10);
              unsigned int v476 = v475 & 0xFFFFFF3F | v471;
              *((_DWORD *)v496 + 10) = v476;
              unsigned int v560 = v431;
              long long v561 = 0uLL;
              if (v497 < 0xB || (unsigned int v528 = v501[20], DWORD2(v561) = v528, v497 == 11))
              {
                if ((v475 & 0xFu) - 7 >= 2)
                {
                  if (v494 == 5)
                  {
                    int v477 = 256;
                    goto LABEL_1065;
                  }
                  if (v494 == 6)
                  {
                    int v477 = 512;
LABEL_1065:
                    *((_DWORD *)v496 + 10) = v477 | v476 & 0xFFFFFCFF;
                  }
                }
              }
              else
              {
                if ((v475 & 0xFu) - 7 >= 2)
                {
                  unsigned int v478 = v501[22];
                  if (v478 == 2) {
                    int v479 = 512;
                  }
                  else {
                    int v479 = (v478 == 1) << 8;
                  }
                  *((_DWORD *)v496 + 10) = v479 | v476 & 0xFFFFFCFF;
                }
                if (v497 >= 0xD)
                {
                  uint64_t v480 = *((void *)v501 + 12);
                  if (v480)
                  {
                    uint64_t v481 = *((void *)v547 + 99);
                    if (*((void *)v501 + 12) > (unint64_t)((*((void *)v547 + 100) - v481) >> 3))
                    {
                      uint64_t v473 = (std::string *)"Invalid function comdat ID";
                      goto LABEL_1039;
                    }
                    llvm::GlobalObject::setComdat((const void **)v508, *(void *)(v481 + 8 * (v480 - 1)));
                  }
                  if (v497 < 0xE)
                  {
                    unsigned int v482 = 0;
                  }
                  else
                  {
                    unsigned int v482 = v501[26];
                    DWORD1(v561) = v482;
                    if (v497 != 14)
                    {
                      unsigned int v484 = v501[28];
                      LODWORD(v561) = v484;
                      if (v497 > 0xF)
                      {
                        *((_DWORD *)v496 + 10) = *((_DWORD *)v496 + 10) & 0xFFFFBFFF | ((v501[30] == 1) << 14);
                        inferDSOLocal((uint64_t)v508);
                        if (v497 >= 0x13
                          && (uint64_t v486 = *((void *)v547 + 47)) != 0
                          && (uint64_t v488 = *((void *)v501 + 17),
                              uint64_t v487 = *((void *)v501 + 18),
                              (unint64_t)(v487 + v488) <= *((void *)v547 + 48)))
                        {
                          unsigned int v483 = (uint64_t *)v508;
                          llvm::GlobalValue::setPartition(v508, v486 + v488, v487, v485);
                          uint64_t v8 = (uint64_t)v547;
                        }
                        else
                        {
                          uint64_t v8 = (uint64_t)v547;
                          unsigned int v483 = (uint64_t *)v508;
                        }
                        goto LABEL_1082;
                      }
                      goto LABEL_1080;
                    }
                  }
                  unsigned int v484 = 0;
LABEL_1080:
                  uint64_t v8 = (uint64_t)v547;
                  unsigned int v483 = (uint64_t *)v508;
                  goto LABEL_1081;
                }
              }
              unsigned int v482 = 0;
              if (v494 > 0xB || ((1 << v494) & 0xC12) == 0)
              {
                unsigned int v484 = 0;
                goto LABEL_1080;
              }
              unsigned int v483 = (uint64_t *)v508;
              __int16 v564 = v508;
              llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>,llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v576, v533, (uint64_t *)&v564);
              unsigned int v482 = 0;
              unsigned int v484 = 0;
              uint64_t v8 = (uint64_t)v547;
LABEL_1081:
              inferDSOLocal((uint64_t)v483);
LABEL_1082:
              llvm::BitcodeReaderValueList::push_back(v541, (llvm::Value *)v483, v489);
              if (v484 || v482 || v528) {
              if (!v492)
              }
              {
                *((_DWORD *)v496 + 10) |= 0x1000000u;
                std::vector<llvm::Function *>::push_back[abi:nn180100](v530, &v567);
                llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>,llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>::FindAndConstruct(v529, (uint64_t *)&v567)[1] = 0;
              }
              *a1 = 0;
              uint64_t v18 = v546;
LABEL_880:
              if (*a1) {
                goto LABEL_52;
              }
LABEL_881:
              int v20 = 0;
              LODWORD(v555) = 0;
LABEL_882:
              if (v558)
              {
                unint64_t v383 = v557;
                uint64_t v557 = 0;
                if (v383) {
                  (*(void (**)(void *))(*(void *)v383 + 8))(v383);
                }
              }
LABEL_35:
              if (v553)
              {
                unsigned int v21 = v552;
                __n128 v552 = 0;
                if (v21) {
                  (*((void (**)(void **))*v21 + 1))(v21);
                }
              }
              if ((v20 | 2) != 2)
              {
                if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v549.__r_.__value_.__l.__data_);
                }
                if (v554 != v556) {
                  free(v554);
                }
                return;
              }
              continue;
            case 9:
            case 14:
            case 18:
              uint64_t v24 = v8;
              BOOL v25 = (char *)v554;
              unint64_t v26 = v555;
              if (*(unsigned char *)(v24 + 392))
              {
                unsigned int v27 = (std::string *)*((void *)v554 + 1);
                if ((unint64_t)v27 + *(void *)v554 > *(void *)(v24 + 384)) {
                  goto LABEL_557;
                }
                uint64_t v28 = (const char *)(*((void *)v547 + 47) + *(void *)v554);
                unint64_t v26 = v555 - 2;
                BOOL v25 = (char *)v554 + 16;
              }
              else
              {
                unsigned int v27 = 0;
                uint64_t v28 = "";
              }
              unint64_t v198 = 3;
              if (v557 != 9) {
                unint64_t v198 = 4;
              }
              if (v26 < v198 {
                || (unint64_t v517 = (std::string *)v28,
              }
                    unint64_t v524 = v26,
                    LODWORD(v575.__first_) = *(_DWORD *)v25,
                    int v199 = (int)v575.__first_,
              {
LABEL_557:
                uint64_t v206 = (std::string *)"Invalid record";
                goto LABEL_558;
              }
              uint64_t v201 = (llvm::PointerType **)v200;
              if (v23 == 9)
              {
                if (*(_DWORD *)(v200 + 8) != 15) {
                  goto LABEL_753;
                }
                unsigned int v510 = *(_DWORD *)(v200 + 8);
                if (!v202)
                {
                  uint64_t v206 = (std::string *)"Missing element type for old-style indirect symbol";
                  goto LABEL_558;
                }
                uint64_t v201 = (llvm::PointerType **)v202;
                unsigned int v203 = (llvm::Type *)(v510 >> 8);
                uint64_t v204 = *((void *)v25 + 2);
                uint64_t v506 = 3;
                *(void *)unint64_t v511 = *((void *)v25 + 1);
                uint64_t v205 = 1;
              }
              else
              {
                unsigned int v203 = (llvm::Type *)*((unsigned int *)v25 + 2);
                uint64_t v204 = *((void *)v25 + 3);
                *(void *)unint64_t v511 = *((void *)v25 + 2);
                if (v23 != 14)
                {
                  uint64_t v500 = *((void *)v25 + 3);
                  int v330 = getDecodedLinkage(v204);
                  LOWORD(v576.__end_cap_.__value_) = 261;
                  v576.__first_ = v517;
                  v576.__begin_ = v27;
                  uint64_t v304 = llvm::GlobalIFunc::create(v201, v203, v330, (const llvm::Twine *)&v576, 0, *((void *)v547 + 54));
                  uint64_t v306 = 4;
                  uint64_t v305 = 2;
LABEL_786:
                  unint64_t v331 = v524;
                  uint64_t v18 = v546;
                  if (v524 == v306)
                  {
                    uint64_t v332 = v306;
                  }
                  else
                  {
                    uint64_t v332 = v305 + 3;
                    if ((*(_DWORD *)(v304 + 32) & 0xFu) - 7 >= 2)
                    {
                      uint64_t v333 = *(void *)&v25[8 * v306];
                      if (v333 == 2) {
                        char v334 = 2;
                      }
                      else {
                        char v334 = v333 == 1;
                      }
                      llvm::GlobalValue::setVisibility(v304, v334);
                      unint64_t v331 = v524;
                    }
                  }
                  if (v23 != 14 && v23 != 9) {
                    goto LABEL_826;
                  }
                  if (v331 != v332)
                  {
                    unsigned int v335 = *(_DWORD *)(v304 + 32);
                    if ((v335 & 0xF) - 7 >= 2)
                    {
                      uint64_t v343 = *(void *)&v25[8 * v332];
                      if (v343 == 2) {
                        int v344 = 512;
                      }
                      else {
                        int v344 = (v343 == 1) << 8;
                      }
                      unsigned int v335 = v344 | v335 & 0xFFFFFCFF;
                      *(_DWORD *)(v304 + 32) = v335;
                    }
                    ++v332;
                    goto LABEL_815;
                  }
                  unsigned int v335 = *(_DWORD *)(v304 + 32);
                  if ((v335 & 0xF) - 7 >= 2)
                  {
                    if (v500 == 5)
                    {
                      int v336 = 256;
                    }
                    else
                    {
                      if (v500 != 6) {
                        goto LABEL_815;
                      }
                      int v336 = 512;
                    }
                    unsigned int v335 = v336 | v335 & 0xFFFFFCFF;
                    *(_DWORD *)(v304 + 32) = v335;
                  }
LABEL_815:
                  if (v331 == v332)
                  {
                    unint64_t v345 = v331;
                  }
                  else
                  {
                    unint64_t v345 = v332 + 1;
                    uint64_t v346 = *(void *)&v25[8 * v332];
                    if (v346 >= 5) {
                      int v347 = 1024;
                    }
                    else {
                      int v347 = v346 << 10;
                    }
                    unsigned int v335 = v347 | v335 & 0xFFFFE3FF;
                    *(_DWORD *)(v304 + 32) = v335;
                    ++v332;
                  }
                  if (v331 != v345)
                  {
                    ++v332;
                    uint64_t v348 = *(void *)&v25[8 * v345];
                    if (v348 == 2) {
                      int v349 = 64;
                    }
                    else {
                      int v349 = (v348 == 1) << 7;
                    }
                    *(_DWORD *)(v304 + 32) = v349 | v335 & 0xFFFFFF3F;
                  }
LABEL_826:
                  if (v331 != v332)
                  {
                    uint64_t v350 = *(void *)&v25[8 * v332++];
                    *(_DWORD *)(v304 + 32) = *(_DWORD *)(v304 + 32) & 0xFFFFBFFF | ((v350 == 1) << 14);
                  }
                  inferDSOLocal(v304);
                  if (v524 > v332 + 1) {
                    llvm::GlobalValue::setPartition((void *)v304, *((void *)v547 + 47) + *(void *)&v25[8 * v332], *(void *)&v25[8 * v332 + 8], v351);
                  }
                  uint64_t v8 = (uint64_t)v547;
                  llvm::BitcodeReaderValueList::push_back(v541, (llvm::Value *)v304, v352);
                  unint64_t v353 = *((void *)v547 + 175);
                  unint64_t v354 = *((void *)v547 + 176);
                  if (v353 >= v354)
                  {
                    uint64_t v356 = *((void *)v547 + 174);
                    uint64_t v357 = (uint64_t)(v353 - v356) >> 4;
                    unint64_t v358 = v357 + 1;
                    if ((unint64_t)(v357 + 1) >> 60) {
                      goto LABEL_1095;
                    }
                    uint64_t v359 = v354 - v356;
                    if (v359 >> 3 > v358) {
                      unint64_t v358 = v359 >> 3;
                    }
                    if ((unint64_t)v359 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v360 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v360 = v358;
                    }
                    if (v360) {
                      unint64_t v360 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v360);
                    }
                    else {
                      uint64_t v361 = 0;
                    }
                    unint64_t v375 = v360 + 16 * v357;
                    *(void *)unint64_t v375 = v304;
                    *(_DWORD *)(v375 + 8) = v511[0];
                    unsigned int v376 = (char *)*((void *)v547 + 175);
                    uint64_t v377 = (char *)*((void *)v547 + 174);
                    unint64_t v378 = v375;
                    if (v376 != v377)
                    {
                      do
                      {
                        *(_OWORD *)(v378 - 16) = *((_OWORD *)v376 - 1);
                        v378 -= 16;
                        v376 -= 16;
                      }
                      while (v376 != v377);
                      unsigned int v376 = (char *)*((void *)v547 + 174);
                    }
                    *((void *)v547 + 174) = v378;
                    unint64_t v355 = v375 + 16;
                    *((void *)v547 + 175) = v375 + 16;
                    *((void *)v547 + 176) = v360 + 16 * v361;
                    if (v376) {
                      operator delete(v376);
                    }
                  }
                  else
                  {
                    *(void *)unint64_t v353 = v304;
                    *(_DWORD *)(v353 + 8) = v511[0];
                    unint64_t v355 = v353 + 16;
                  }
                  *((void *)v547 + 175) = v355;
                  *a1 = 0;
                  goto LABEL_880;
                }
                uint64_t v506 = 4;
                uint64_t v205 = 2;
              }
              LODWORD(v500) = v204;
              uint64_t v503 = v205;
              int v303 = getDecodedLinkage(v204);
              LOWORD(v576.__end_cap_.__value_) = 261;
              v576.__first_ = v517;
              v576.__begin_ = v27;
              uint64_t v304 = llvm::GlobalAlias::create(v201, v203, v303, (const llvm::Twine *)&v576, *((void *)v547 + 54));
              uint64_t v305 = v503;
              uint64_t v306 = v506;
              goto LABEL_786;
            case 11:
              memset(&v575, 0, 24);
              std::string::append[abi:nn180100]<unsigned long long const*,0>((std::string *)&v575, (std::string *)v554, (std::string *)((char *)v554 + 8 * v555));
              unint64_t v221 = *(void *)(v8 + 504);
              unint64_t v220 = *(void *)(v8 + 512);
              if (v221 >= v220)
              {
                uint64_t v241 = *(void *)(v8 + 496);
                unint64_t v242 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v221 - v241) >> 3);
                unint64_t v243 = v242 + 1;
                if (v242 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_1095;
                }
                unint64_t v244 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v220 - v241) >> 3);
                if (2 * v244 > v243) {
                  unint64_t v243 = 2 * v244;
                }
                if (v244 >= 0x555555555555555) {
                  unint64_t v245 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v245 = v243;
                }
                v576.__end_cap_.__value_ = v543;
                if (v245)
                {
                  uint64_t v246 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v543, v245);
                  uint64_t v248 = v247;
                }
                else
                {
                  uint64_t v246 = 0;
                  uint64_t v248 = 0;
                }
                uint64_t v313 = &v246->__r_.__value_.__s.__data_[24 * v242];
                if (SHIBYTE(v575.__end_) < 0)
                {
                  std::string::__init_copy_ctor_external(v246 + v242, (const std::string::value_type *)v575.__first_, (std::string::size_type)v575.__begin_);
                }
                else
                {
                  long long v314 = *(_OWORD *)&v575.__first_;
                  *((void *)v313 + 2) = v575.__end_;
                  *(_OWORD *)uint64_t v313 = v314;
                }
                uint64_t v321 = *((void *)v547 + 62);
                unint64_t v320 = *((void *)v547 + 63);
                if (v320 == v321)
                {
                  int64x2_t v325 = vdupq_n_s64(v320);
                  char v322 = &v246->__r_.__value_.__s.__data_[24 * v242];
                  uint64_t v324 = v547;
                }
                else
                {
                  char v322 = &v246->__r_.__value_.__s.__data_[24 * v242];
                  do
                  {
                    long long v323 = *(_OWORD *)(v320 - 24);
                    *((void *)v322 - 1) = *(void *)(v320 - 8);
                    *(_OWORD *)(v322 - 24) = v323;
                    v322 -= 24;
                    *(void *)(v320 - 16) = 0;
                    *(void *)(v320 - 8) = 0;
                    *(void *)(v320 - 24) = 0;
                    v320 -= 24;
                  }
                  while (v320 != v321);
                  uint64_t v324 = v547;
                  int64x2_t v325 = *((int64x2_t *)v547 + 31);
                }
                uint64_t v310 = v313 + 24;
                *((void *)v324 + 62) = v322;
                *((void *)v324 + 63) = v313 + 24;
                *(int64x2_t *)&v576.__begin_ = v325;
                uint64_t v328 = (std::string *)*((void *)v324 + 64);
                *((void *)v324 + 64) = &v246[v248];
                v576.__end_cap_.__value_ = v328;
                v576.__first_ = (std::__split_buffer<std::string>::pointer)v325.i64[0];
                std::__split_buffer<std::string>::~__split_buffer(&v576);
                uint64_t v8 = (uint64_t)v324;
                uint64_t v18 = v546;
              }
              else
              {
                if (SHIBYTE(v575.__end_) < 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(v8 + 504), (const std::string::value_type *)v575.__first_, (std::string::size_type)v575.__begin_);
                }
                else
                {
                  long long v222 = *(_OWORD *)&v575.__first_;
                  *(void *)(v221 + 16) = v575.__end_;
                  *(_OWORD *)unint64_t v221 = v222;
                }
                uint64_t v310 = (char *)(v221 + 24);
              }
              *(void *)(v8 + 504) = v310;
LABEL_780:
              if ((SHIBYTE(v575.__end_) & 0x80000000) == 0) {
                goto LABEL_881;
              }
              std::__split_buffer<std::string>::pointer v251 = v575.__first_;
              goto LABEL_782;
            case 12:
              unint64_t v223 = v554;
              unint64_t v224 = v555;
              int v225 = *(unsigned __int8 *)(v8 + 392);
              if (*(unsigned char *)(v8 + 392))
              {
                unint64_t v226 = *((void *)v554 + 1);
                if (v226 + *(void *)v554 > *(void *)(v8 + 384)
                  || (int v227 = (uint64_t *)(*(void *)(v8 + 376) + *(void *)v554),
                      unint64_t v224 = v555 - 2,
                      unint64_t v223 = (char *)v554 + 16,
                      v555 == 2))
                {
LABEL_589:
                  v576.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid record";
                  goto LABEL_851;
                }
              }
              else
              {
                unint64_t v226 = 0;
                int v227 = (uint64_t *)"";
                if (!v555) {
                  goto LABEL_589;
                }
              }
              if ((*v223 - 2) >= 4) {
                int v261 = 0;
              }
              else {
                int v261 = *v223 - 1;
              }
              memset(&v575, 0, 24);
              if (v225) {
                goto LABEL_651;
              }
              if (v224 <= 1)
              {
                BOOL v329 = (std::string *)"Invalid record";
                goto LABEL_863;
              }
              unint64_t v374 = v223[2];
              if (v374 > v224 - 2)
              {
                BOOL v329 = (std::string *)"Comdat name size too large";
LABEL_863:
                v576.__first_ = v329;
                LOWORD(v576.__end_cap_.__value_) = 259;
              }
              std::string::reserve((std::string *)&v575, v223[2]);
              if (v374)
              {
                for (uint64_t i = 0; i != v374; ++i)
                  std::string::push_back((std::string *)&v575, *(void *)&v223[2 * (i + 2)]);
              }
              if (SHIBYTE(v575.__end_) >= 0) {
                int v227 = (uint64_t *)&v575;
              }
              else {
                int v227 = (uint64_t *)v575.__first_;
              }
              if (SHIBYTE(v575.__end_) >= 0) {
                unint64_t v226 = HIBYTE(v575.__end_);
              }
              else {
                unint64_t v226 = (unint64_t)v575.__begin_;
              }
              uint64_t v8 = (uint64_t)v547;
LABEL_651:
              unint64_t inserted = llvm::Module::getOrInsertComdat(*(void *)(v8 + 432), v227, v226);
              unint64_t v263 = inserted;
              *((_DWORD *)inserted + 2) = v261;
              unint64_t v264 = *(char ***)(v8 + 800);
              unint64_t v265 = *(void *)(v8 + 808);
              if ((unint64_t)v264 >= v265)
              {
                uint64_t v337 = *(void *)(v8 + 792);
                uint64_t v338 = ((uint64_t)v264 - v337) >> 3;
                if ((unint64_t)(v338 + 1) >> 61) {
                  goto LABEL_1095;
                }
                uint64_t v339 = v265 - v337;
                uint64_t v340 = v339 >> 2;
                if (v339 >> 2 <= (unint64_t)(v338 + 1)) {
                  uint64_t v340 = v338 + 1;
                }
                if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v341 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v341 = v340;
                }
                if (v341) {
                  unint64_t v341 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v341);
                }
                else {
                  uint64_t v342 = 0;
                }
                unsigned int v379 = (char **)(v341 + 8 * v338);
                *unsigned int v379 = v263;
                uint64_t v266 = v379 + 1;
                unint64_t v380 = *(char **)(v8 + 800);
                unsigned int v381 = *(char **)(v8 + 792);
                if (v380 != v381)
                {
                  do
                  {
                    uint64_t v382 = (char *)*((void *)v380 - 1);
                    v380 -= 8;
                    *--unsigned int v379 = v382;
                  }
                  while (v380 != v381);
                  unint64_t v380 = *(char **)(v8 + 792);
                }
                *(void *)(v8 + 792) = v379;
                *(void *)(v8 + 800) = v266;
                *(void *)(v8 + 808) = v341 + 8 * v342;
                if (v380) {
                  operator delete(v380);
                }
              }
              else
              {
                void *v264 = inserted;
                uint64_t v266 = v264 + 1;
              }
              *(void *)(v8 + 800) = v266;
              *a1 = 0;
              uint64_t v18 = v546;
              if (SHIBYTE(v575.__end_) < 0) {
                operator delete(v575.__first_);
              }
              goto LABEL_880;
            case 13:
              if (!v555)
              {
                __int16 v209 = (std::string *)"Invalid record";
LABEL_654:
                v576.__first_ = v209;
                LOWORD(v576.__end_cap_.__value_) = 259;
              }
              *(void *)(v8 + 464) = *(void *)v554 - 1;
              goto LABEL_881;
            case 16:
              v576.__first_ = (std::__split_buffer<std::string>::pointer)&v576.__end_cap_;
              *(_OWORD *)&v576.__begin_ = xmmword_261E8A720;
              llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v576, (char *)v554, (char *)v554 + 8 * v555);
              llvm::Module::setSourceFileName(*(void *)(v8 + 432), v576.__first_, (size_t)v576.__begin_);
              if ((std::__compressed_pair<std::string *> *)v576.__first_ != &v576.__end_cap_) {
                free(v576.__first_);
              }
              goto LABEL_881;
            default:
              goto LABEL_881;
          }
        }
        if (!*a1) {
LABEL_45:
        }
LABEL_34:
        int v20 = 1;
        goto LABEL_35;
      }
      break;
    }
    switch(HIDWORD(v552))
    {
      case 0:
        llvm::BitstreamCursor::ReadBlockInfoBlock(v15, 0, (uint64_t)&v576);
        if ((uint64_t)v576.__end_cap_.__value_)
        {
          std::__split_buffer<std::string>::pointer v197 = v576.__first_;
          v576.__first_ = 0;
          *a1 = (void **)&v197->__r_.__value_.__l.__data_;
        }
        else
        {
          if (!LOBYTE(v576.__end_cap_.__value_))
          {
            v575.__first_ = (std::__split_buffer<std::string>::pointer)"Malformed block";
            LOWORD(v575.__end_cap_.__value_) = 259;
          }
          std::__split_buffer<std::string>::pointer end = v576.__end_;
          long long v522 = *(_OWORD *)&v576.__first_;
          memset(&v576, 0, 24);
          LOBYTE(v575.__end_cap_.__value_) = 1;
          std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__vdeallocate((void **)v18);
          *(_OWORD *)(v8 + 8) = v522;
          *(void *)(v8 + 24) = end;
          memset(&v575, 0, 24);
          *a1 = 0;
          unsigned int v560 = &v575;
          std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v560);
        }
        llvm::Expected<std::optional<llvm::BitstreamBlockInfo>>::~Expected((uint64_t)&v576);
        goto LABEL_736;
      case 9:
        llvm::BitstreamCursor::EnterSubBlock(v15, 0, 9, a1);
        if (*a1) {
          goto LABEL_34;
        }
        if (*(void *)(v8 + 1440) != *(void *)(v8 + 1448)) {
          goto LABEL_540;
        }
        v576.__first_ = (std::__split_buffer<std::string>::pointer)&v576.__end_;
        v576.__begin_ = (std::__split_buffer<std::string>::pointer)0x4000000000;
        unsigned int v560 = (char *)&v561 + 8;
        *(void *)&long long v561 = 0x800000000;
        while (1)
        {
          llvm::BitstreamCursor::advanceSkippingSubblocks(v15, 0, (uint64_t)&v557);
          if (v558)
          {
            int v30 = (void **)v557;
            uint64_t v557 = 0;
            *a1 = v30;
          }
          else
          {
            if (v557 == 2) {
              goto LABEL_60;
            }
            if (v557 != 1)
            {
              if (!v557)
              {
LABEL_60:
                v575.__first_ = (std::__split_buffer<std::string>::pointer)"Malformed block";
                LOWORD(v575.__end_cap_.__value_) = 259;
              }
              LODWORD(v576.__begin_) = 0;
              llvm::BitstreamCursor::readRecord(v15, SHIDWORD(v557), (unsigned int *)&v576, 0, (uint64_t)&v567);
              if (v568)
              {
                long long v66 = (void **)v567;
                unint64_t v567 = 0;
                *a1 = v66;
                int v31 = 1;
              }
              else if (v567 == 2)
              {
                if (LODWORD(v576.__begin_))
                {
                  uint64_t v67 = 0;
                  uint64_t v68 = 8 * LODWORD(v576.__begin_);
                  do
                  {
                    LODWORD(v575.__first_) = *(_DWORD *)((char *)&v576.__first_->__r_.__value_.__l.__data_ + v67);
                    long long v69 = std::__tree<std::__value_type<unsigned int,llvm::AttributeList>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::AttributeList>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::AttributeList>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v538, v575.__first_, &v575);
                    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v560, (uint64_t)v69[5]);
                    v67 += 8;
                  }
                  while (v68 != v67);
                }
                long long v57 = llvm::AttributeList::get(*(uint64_t **)(v8 + 424), (uint64_t *)v560, (uint64_t *)v561);
                long long v58 = *(uint64_t ***)(v8 + 1448);
                unint64_t v70 = *(void *)(v8 + 1456);
                if ((unint64_t)v58 < v70) {
                  goto LABEL_180;
                }
                uint64_t v72 = *(void *)(v8 + 1440);
                uint64_t v73 = ((uint64_t)v58 - v72) >> 3;
                if ((unint64_t)(v73 + 1) >> 61) {
                  goto LABEL_1095;
                }
                uint64_t v74 = v70 - v72;
                uint64_t v75 = v74 >> 2;
                if (v74 >> 2 <= (unint64_t)(v73 + 1)) {
                  uint64_t v75 = v73 + 1;
                }
                if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v64 = v75;
                }
                if (v64) {
                  long long v65 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v536, v64);
                }
                else {
                  long long v65 = 0;
                }
                uint64_t v76 = (uint64_t **)&v65[8 * v73];
                *uint64_t v76 = v57;
                uint64_t v71 = v76 + 1;
                unint64_t v77 = *(char **)(v8 + 1448);
                uint64_t v78 = *(char **)(v8 + 1440);
                if (v77 != v78)
                {
                  do
                  {
                    uint64_t v79 = (uint64_t *)*((void *)v77 - 1);
                    v77 -= 8;
                    *--uint64_t v76 = v79;
                  }
                  while (v77 != v78);
LABEL_198:
                  unint64_t v77 = *(char **)(v8 + 1440);
                }
LABEL_199:
                *(void *)(v8 + 1440) = v76;
                *(void *)(v8 + 1448) = v71;
                *(void *)(v8 + 1456) = &v65[8 * v64];
                if (v77) {
                  operator delete(v77);
                }
LABEL_201:
                int v31 = 0;
                *(void *)(v8 + 1448) = v71;
                LODWORD(v561) = 0;
                uint64_t v18 = v546;
              }
              else
              {
                if (v567 == 1)
                {
                  int v33 = (int)v576.__begin_;
                  if ((uint64_t)v576.__begin_)
                  {
                    v575.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid parameter attribute record";
                    LOWORD(v575.__end_cap_.__value_) = 259;
                  }
                  if (LODWORD(v576.__begin_))
                  {
                    unsigned int v34 = 0;
                    while (1)
                    {
                      v575.__first_ = (std::__split_buffer<std::string>::pointer)*((void *)v547 + 53);
                      v575.__begin_ = (std::__split_buffer<std::string>::pointer)&v575.__end_cap_;
                      v575.__end_ = (std::__split_buffer<std::string>::pointer)0x800000000;
                      unint64_t v35 = v576.__first_->__r_.__value_.__r.__words[v34 | 1];
                      uint64_t v36 = *((void *)&v576.__first_->__r_.__value_.__l.__data_ + v34);
                      if ((v35 & 0xFFFF0000) != 0) {
                        llvm::AttrBuilder::addAlignmentAttr((uint64_t **)&v575, __clz(WORD1(v35)) ^ 0x13F);
                      }
                      uint64_t v37 = (unsigned __int16)v35 | ((HIDWORD(v35) & 0xFFFFF) << 21);
                      if (v36 != 0xFFFFFFFFLL) {
                        goto LABEL_89;
                      }
                      uint64_t v38 = (v35 & 0x200) != 0
                          ? (unsigned __int16)v35 & 0xFDFF | ((HIDWORD(v35) & 0xFFFFF) << 21) & 0x1FFFFE0FDFFLL
                          : (unsigned __int16)v35 | ((HIDWORD(v35) & 0xFFFFF) << 21);
                      if ((v38 & 0x400) != 0) {
                        break;
                      }
                      if ((v35 & 0x200) != 0)
                      {
                        uint64_t v39 = 0;
                        uint64_t v37 = (unsigned __int16)v35 & 0xFDFF | ((HIDWORD(v35) & 0xFFFFF) << 21) & 0x1FFFFE0FDFFLL;
LABEL_88:
                        unint64_t v40 = llvm::Attribute::get((uint64_t *)v575.__first_, 80, v39);
                        llvm::AttrBuilder::addAttribute((uint64_t)&v575, v40);
                      }
LABEL_89:
                      if (v37)
                      {
                        int v41 = 0;
                        while (1)
                        {
                          unint64_t v42 = 0;
                          switch(v41)
                          {
                            case 3:
                              unint64_t v42 = 4096;
                              goto LABEL_148;
                            case 4:
                              unint64_t v42 = 0x20000000000;
                              goto LABEL_148;
                            case 5:
                              unint64_t v42 = 0x10000000000;
                              goto LABEL_148;
                            case 6:
                              unint64_t v42 = 0x400000000000;
                              goto LABEL_148;
                            case 10:
                              unint64_t v42 = 0x2000000000000000;
                              goto LABEL_148;
                            case 11:
                              unint64_t v42 = 8;
                              goto LABEL_148;
                            case 12:
                              unint64_t v42 = 0x2000000;
                              goto LABEL_148;
                            case 13:
                              unint64_t v42 = 0x200000000000;
                              goto LABEL_148;
                            case 14:
                              unint64_t v42 = 0x200000000;
                              goto LABEL_148;
                            case 16:
                              unint64_t v42 = 0x1000000;
                              goto LABEL_148;
                            case 17:
                              unint64_t v42 = 256;
                              goto LABEL_148;
                            case 18:
                              unint64_t v42 = 64;
                              goto LABEL_148;
                            case 19:
                              unint64_t v42 = 0x4000000000;
                              goto LABEL_148;
                            case 21:
                              unint64_t v42 = 0x200000;
                              goto LABEL_148;
                            case 22:
                              unint64_t v42 = 0x200000000000000;
                              goto LABEL_148;
                            case 23:
                              unint64_t v42 = 0x400000000;
                              goto LABEL_148;
                            case 24:
                              unint64_t v42 = 0x8000000000000000;
                              goto LABEL_148;
                            case 25:
                              unint64_t v42 = 0x800000;
                              goto LABEL_148;
                            case 26:
                              unint64_t v42 = 2048;
                              goto LABEL_148;
                            case 29:
                              unint64_t v42 = 0x1000000000000;
                              goto LABEL_148;
                            case 30:
                              unint64_t v42 = 0x400000;
                              goto LABEL_148;
                            case 31:
                              unint64_t v42 = 4;
                              goto LABEL_148;
                            case 36:
                              unint64_t v42 = 32;
                              goto LABEL_148;
                            case 37:
                              unint64_t v42 = 0x80000000;
                              goto LABEL_148;
                            case 38:
                              unint64_t v42 = 0x100000000000;
                              goto LABEL_148;
                            case 40:
                              unint64_t v42 = 0x400000000000000;
                              goto LABEL_148;
                            case 41:
                              unint64_t v42 = 0x2000;
                              goto LABEL_148;
                            case 42:
                              unint64_t v42 = 0x40000000000;
                              goto LABEL_148;
                            case 44:
                              unint64_t v42 = 512;
                              goto LABEL_148;
                            case 45:
                              unint64_t v42 = 1024;
                              goto LABEL_148;
                            case 46:
                              unint64_t v42 = 0x8000000000;
                              goto LABEL_148;
                            case 47:
                              unint64_t v42 = 0x20000000;
                              goto LABEL_148;
                            case 48:
                              unint64_t v42 = 2;
                              goto LABEL_148;
                            case 49:
                              unint64_t v42 = 0x800000000000;
                              goto LABEL_148;
                            case 50:
                              unint64_t v42 = 0x100000000;
                              goto LABEL_148;
                            case 51:
                              unint64_t v42 = 0x100000000000000;
                              goto LABEL_148;
                            case 53:
                              unint64_t v42 = 0x2000000000;
                              goto LABEL_148;
                            case 54:
                              unint64_t v42 = 0x1000000000;
                              goto LABEL_148;
                            case 55:
                              unint64_t v42 = 0x800000000000000;
                              goto LABEL_148;
                            case 57:
                              unint64_t v42 = 0x40000000000000;
                              goto LABEL_148;
                            case 58:
                              unint64_t v42 = 0x1000000000000000;
                              goto LABEL_148;
                            case 59:
                              unint64_t v42 = 0x4000;
                              goto LABEL_148;
                            case 60:
                              unint64_t v42 = 0x8000;
                              goto LABEL_148;
                            case 61:
                              unint64_t v42 = 0x800000000;
                              goto LABEL_148;
                            case 62:
                              unint64_t v42 = 0x80000000000000;
                              goto LABEL_148;
                            case 64:
                              unint64_t v42 = 0x10000000000000;
                              goto LABEL_148;
                            case 65:
                              unint64_t v42 = 0x8000000000000;
                              goto LABEL_148;
                            case 66:
                              unint64_t v42 = 0x4000000000000000;
                              goto LABEL_148;
                            case 67:
                              unint64_t v42 = 0x20000000000000;
                              goto LABEL_148;
                            case 68:
                              unint64_t v42 = 1;
                              goto LABEL_148;
                            case 70:
                              unint64_t v42 = 128;
                              goto LABEL_148;
                            case 72:
                              unint64_t v42 = 0x80000000000;
                              goto LABEL_148;
                            case 74:
                              unint64_t v42 = 16;
                              goto LABEL_148;
                            case 75:
                              unint64_t v42 = 2031616;
                              goto LABEL_148;
                            case 82:
                              unint64_t v42 = 469762048;
                              goto LABEL_148;
                            case 83:
                              unint64_t v42 = 0x40000000;
                              goto LABEL_148;
                            case 85:
                              goto LABEL_163;
                            default:
LABEL_148:
                              unint64_t v43 = v42 & v37;
                              if (v43)
                              {
                                if (v41 == 82)
                                {
                                  unint64_t v47 = (v43 >> 26) - 1;
                                  unint64_t v48 = __clz((1 << v47)) ^ 0x13F;
                                  if (v47 <= 0x1F) {
                                    __int16 v49 = v48;
                                  }
                                  else {
                                    __int16 v49 = 0;
                                  }
                                  llvm::AttrBuilder::addStackAlignmentAttr((uint64_t **)&v575, v49);
                                }
                                else if (v41 == 75)
                                {
                                  unint64_t v44 = (v43 >> 16) - 1;
                                  unint64_t v45 = __clz((1 << v44)) ^ 0x13F;
                                  if (v44 <= 0x1F) {
                                    __int16 v46 = v45;
                                  }
                                  else {
                                    __int16 v46 = 0;
                                  }
                                  llvm::AttrBuilder::addAlignmentAttr((uint64_t **)&v575, v46);
                                }
                                else if ((v41 - 69) > 5)
                                {
                                  unint64_t v51 = llvm::Attribute::get((uint64_t *)v575.__first_, v41, 0);
                                  addAttributeImpl<llvm::Attribute::AttrKind>((unsigned int *)&v575.__begin_, v41, v51);
                                }
                                else
                                {
                                  unint64_t v50 = llvm::Attribute::get((uint64_t *)v575.__first_, v41, 0);
                                  llvm::AttrBuilder::addAttribute((uint64_t)&v575, v50);
                                }
                              }
                              ++v41;
                              break;
                          }
                        }
                      }
LABEL_163:
                      uint64_t v52 = v34;
                      uint64_t v53 = (uint64_t *)*((void *)v547 + 53);
                      uint64_t v54 = *((void *)&v576.__first_->__r_.__value_.__l.__data_ + v52);
                      Sorted = llvm::AttributeSetNode::getSorted(v53, (uint64_t *)v575.__begin_, LODWORD(v575.__end_));
                      long long v56 = llvm::AttributeList::get(v53, v54, (uint64_t)Sorted);
                      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v560, (uint64_t)v56);
                      if ((std::__compressed_pair<std::string *> *)v575.__begin_ != &v575.__end_cap_) {
                        free(v575.__begin_);
                      }
                      unsigned int v34 = v52 + 2;
                      if (v52 + 2 == v33) {
                        goto LABEL_166;
                      }
                    }
                    if ((v35 & 0x200) != 0) {
                      uint64_t v39 = 0;
                    }
                    else {
                      uint64_t v39 = 21;
                    }
                    uint64_t v37 = v38 & 0x1FFFFE0FBFFLL;
                    goto LABEL_88;
                  }
LABEL_166:
                  uint64_t v8 = (uint64_t)v547;
                  long long v57 = llvm::AttributeList::get(*((uint64_t **)v547 + 53), (uint64_t *)v560, (uint64_t *)v561);
                  long long v58 = (uint64_t **)*((void *)v547 + 181);
                  unint64_t v59 = *((void *)v547 + 182);
                  if ((unint64_t)v58 >= v59)
                  {
                    uint64_t v60 = *((void *)v547 + 180);
                    uint64_t v61 = ((uint64_t)v58 - v60) >> 3;
                    if ((unint64_t)(v61 + 1) >> 61) {
                      goto LABEL_1095;
                    }
                    uint64_t v62 = v59 - v60;
                    uint64_t v63 = v62 >> 2;
                    if (v62 >> 2 <= (unint64_t)(v61 + 1)) {
                      uint64_t v63 = v61 + 1;
                    }
                    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v64 = v63;
                    }
                    if (v64) {
                      long long v65 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v536, v64);
                    }
                    else {
                      long long v65 = 0;
                    }
                    uint64_t v76 = (uint64_t **)&v65[8 * v61];
                    *uint64_t v76 = v57;
                    uint64_t v71 = v76 + 1;
                    unint64_t v77 = (char *)*((void *)v547 + 181);
                    unsigned int v80 = (char *)*((void *)v547 + 180);
                    if (v77 != v80)
                    {
                      do
                      {
                        uint64_t v81 = (uint64_t *)*((void *)v77 - 1);
                        v77 -= 8;
                        *--uint64_t v76 = v81;
                      }
                      while (v77 != v80);
                      goto LABEL_198;
                    }
                    goto LABEL_199;
                  }
LABEL_180:
                  *long long v58 = v57;
                  uint64_t v71 = v58 + 1;
                  goto LABEL_201;
                }
                int v31 = 0;
              }
              if (v568)
              {
                std::string::size_type v82 = v567;
                unint64_t v567 = 0;
                if (v82) {
                  (*(void (**)(void *))(*(void *)v82 + 8))(v82);
                }
              }
              goto LABEL_64;
            }
            *a1 = 0;
          }
          int v31 = 1;
LABEL_64:
          if (v558)
          {
            long long v32 = v557;
            uint64_t v557 = 0;
            if (v32) {
              (*(void (**)(void *))(*(void *)v32 + 8))(v32);
            }
          }
          if (v31)
          {
            if (v560 != (char *)&v561 + 8) {
              free(v560);
            }
LABEL_734:
            std::__split_buffer<std::string>::pointer v272 = v576.__first_;
            if ((std::__split_buffer<std::string>::pointer *)v576.__first_ == &v576.__end_) {
              goto LABEL_736;
            }
            goto LABEL_735;
          }
        }
      case 0xA:
        llvm::BitstreamCursor::EnterSubBlock(v15, 0, 10, a1);
        if (*a1) {
          goto LABEL_34;
        }
        if (*(void *)(v8 + 1480)) {
          goto LABEL_540;
        }
        v576.__first_ = (std::__split_buffer<std::string>::pointer)&v576.__end_;
        v576.__begin_ = (std::__split_buffer<std::string>::pointer)0x4000000000;
        while (1)
        {
          llvm::BitstreamCursor::advanceSkippingSubblocks(v15, 0, (uint64_t)&v567);
          if (v568)
          {
            unint64_t v83 = (void **)v567;
            unint64_t v567 = 0;
            *a1 = v83;
          }
          else
          {
            if (v567 == 2) {
              goto LABEL_212;
            }
            if (v567 != 1)
            {
              if (!v567)
              {
LABEL_212:
                v575.__first_ = (std::__split_buffer<std::string>::pointer)"Malformed block";
                LOWORD(v575.__end_cap_.__value_) = 259;
              }
              LODWORD(v576.__begin_) = 0;
              llvm::BitstreamCursor::readRecord(v15, SHIDWORD(v567), (unsigned int *)&v576, 0, (uint64_t)&v564);
              if (v565)
              {
                uint64_t v88 = (uint64_t)v564;
                __int16 v564 = 0;
                *a1 = (void **)v88;
                int v84 = 1;
              }
              else
              {
                if (v564 == 3)
                {
                  int v86 = (int)v576.__begin_;
                  int v87 = LODWORD(v576.__begin_) - 2;
                  if (LODWORD(v576.__begin_) <= 2)
                  {
                    v575.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid grp record";
                    LOWORD(v575.__end_cap_.__value_) = 259;
                  }
                  std::string::pointer data = v576.__first_->__r_.__value_.__l.__data_;
                  std::string::size_type size = (llvm::GlobalValue *)v576.__first_->__r_.__value_.__l.__size_;
                  v575.__first_ = *(std::__split_buffer<std::string>::pointer *)(v8 + 424);
                  v575.__begin_ = (std::__split_buffer<std::string>::pointer)&v575.__end_cap_;
                  v575.__end_ = (std::__split_buffer<std::string>::pointer)0x800000000;
                  unsigned int v90 = 2;
                  unsigned int v505 = data;
                  uint64_t v509 = 63;
                  int v523 = (int)v576.__begin_;
                  while (2)
                  {
                    std::__split_buffer<std::string>::pointer v91 = v576.__first_;
                    uint64_t v92 = *((void *)&v576.__first_->__r_.__value_.__l.__data_ + v90);
                    switch(v92)
                    {
                      case 0:
                        LODWORD(v557) = 0;
                        unsigned int v93 = v90 + 1;
                        uint64_t v98 = *(&v576.__first_->__r_.__value_.__l.__size_ + v90);
                        uint64_t v8 = (uint64_t)v547;
                        if (size != (llvm::GlobalValue *)0xFFFFFFFFLL) {
                          goto LABEL_266;
                        }
                        break;
                      case 1:
                        LODWORD(v557) = 0;
                        unsigned int v93 = v90 + 1;
                        uint64_t v8 = (uint64_t)v547;
                        if (*a1) {
                          goto LABEL_305;
                        }
                        if ((v557 - 75) >= 0xA)
                        {
                          unint64_t v116 = "Not an int attribute";
                          goto LABEL_304;
                        }
                        switch((int)v557)
                        {
                          case 'K':
                            unsigned int v93 = v90 + 2;
                            unint64_t v100 = __clz(LODWORD(v576.__first_->__r_.__value_.__r.__words[v90 + 2])) ^ 0x13F;
                            if (LODWORD(v576.__first_->__r_.__value_.__r.__words[v90 + 2])) {
                              __int16 v101 = v100;
                            }
                            else {
                              __int16 v101 = 0;
                            }
                            llvm::AttrBuilder::addAlignmentAttr((uint64_t **)&v575, v101);
                            break;
                          case 'L':
                            unsigned int v93 = v90 + 2;
                            llvm::AttrBuilder::addAllocKindAttr((uint64_t **)&v575, v576.__first_->__r_.__value_.__r.__words[v90 + 2]);
                            break;
                          case 'M':
                            unsigned int v93 = v90 + 2;
                            llvm::AttrBuilder::addAllocSizeAttrFromRawRepr((uint64_t **)&v575, v576.__first_->__r_.__value_.__r.__words[v90 + 2]);
                            break;
                          case 'N':
                            unsigned int v93 = v90 + 2;
                            llvm::AttrBuilder::addDereferenceableAttr((uint64_t **)&v575, v576.__first_->__r_.__value_.__r.__words[v90 + 2]);
                            break;
                          case 'O':
                            unsigned int v93 = v90 + 2;
                            llvm::AttrBuilder::addDereferenceableOrNullAttr((uint64_t **)&v575, v576.__first_->__r_.__value_.__r.__words[v90 + 2]);
                            break;
                          case 'P':
                            unsigned int v93 = v90 + 2;
                            llvm::AttrBuilder::addMemoryAttr((uint64_t **)&v575, v576.__first_->__r_.__value_.__r.__words[v90 + 2]);
                            break;
                          case 'Q':
                            unsigned int v93 = v90 + 2;
                            llvm::AttrBuilder::addNoFPClassAttr((uint64_t **)&v575, v576.__first_->__r_.__value_.__r.__words[v90 + 2] & 0x3FF);
                            break;
                          case 'R':
                            unsigned int v93 = v90 + 2;
                            unint64_t v111 = __clz(LODWORD(v576.__first_->__r_.__value_.__r.__words[v90 + 2])) ^ 0x13F;
                            if (LODWORD(v576.__first_->__r_.__value_.__r.__words[v90 + 2])) {
                              __int16 v112 = v111;
                            }
                            else {
                              __int16 v112 = 0;
                            }
                            llvm::AttrBuilder::addStackAlignmentAttr((uint64_t **)&v575, v112);
                            break;
                          case 'S':
                            unsigned int v93 = v90 + 2;
                            std::string::size_type v110 = v576.__first_->__r_.__value_.__r.__words[v90 + 2];
                            goto LABEL_289;
                          case 'T':
                            unsigned int v93 = v90 + 2;
                            llvm::AttrBuilder::addVScaleRangeAttrFromRawRepr((uint64_t **)&v575, v576.__first_->__r_.__value_.__r.__words[v90 + 2]);
                            break;
                          default:
                            goto LABEL_261;
                        }
                        goto LABEL_261;
                      case 3:
                      case 4:
                        unsigned int v560 = &v562;
                        long long v561 = xmmword_261E8ACE0;
                        uint64_t v557 = v559;
                        long long v558 = xmmword_261E8ACE0;
                        unsigned int v93 = v90 + 1;
                        if (v90 + 1 == v86 || (std::string::size_type v94 = v576.__first_->__r_.__value_.__r.__words[v93]) == 0)
                        {
                          unsigned int v95 = v90;
                        }
                        else
                        {
                          do
                          {
                            llvm::SmallVectorTemplateBase<char,true>::push_back(&v560, v94);
                            std::__split_buffer<std::string>::pointer v91 = v576.__first_;
                            unsigned int v95 = v90 + 1;
                            if (v87 == v90) {
                              break;
                            }
                            std::string::size_type v94 = v576.__first_->__r_.__value_.__r.__words[v90 + 2];
                            ++v90;
                          }
                          while (v94);
                          unsigned int v93 = v95 + 1;
                        }
                        if (v92 == 4)
                        {
                          unsigned int v93 = v95 + 2;
                          if (v95 + 2 != v523)
                          {
                            uint64_t v102 = *((void *)&v91->__r_.__value_.__l.__data_ + v93);
                            if (v102)
                            {
                              unsigned int v103 = v95 + 3;
                              do
                              {
                                llvm::SmallVectorTemplateBase<char,true>::push_back(&v557, v102);
                                unsigned int v104 = v103 + 1;
                                if (v523 == v103) {
                                  break;
                                }
                                uint64_t v102 = *((void *)&v576.__first_->__r_.__value_.__l.__data_ + v103++);
                              }
                              while (v102);
                              unsigned int v93 = v104 - 1;
                            }
                          }
                        }
                        uint64_t v105 = v560;
                        uint64_t v106 = v561;
                        unint64_t v107 = llvm::Attribute::get((uint64_t *)v575.__first_, v560, v561, v557, v558);
                        addAttributeImpl<llvm::StringRef>((unsigned int *)&v575.__begin_, v105, v106, (uint64_t)v107);
                        if (v557 != v559) {
                          free(v557);
                        }
                        uint64_t v8 = (uint64_t)v547;
                        if (v560 != &v562) {
                          free(v560);
                        }
                        goto LABEL_261;
                      case 5:
                      case 6:
                        LODWORD(v557) = 0;
                        unsigned int v93 = v90 + 1;
                        if (*a1)
                        {
                          int v115 = 0;
                          int v84 = 1;
                          uint64_t v8 = (uint64_t)v547;
                          goto LABEL_306;
                        }
                        int v96 = (int)v557;
                        if ((v557 - 69) >= 6)
                        {
                          unsigned int v560 = "Not a type attribute";
                          __int16 v563 = 259;
                        }
                        if (v92 == 6)
                        {
                          unsigned int v93 = v90 + 2;
                          uint64_t v8 = (uint64_t)v547;
                        }
                        else
                        {
                          unint64_t v97 = 0;
                          uint64_t v8 = (uint64_t)v547;
                        }
                        unint64_t v108 = llvm::Attribute::get((uint64_t *)v575.__first_, v96, v97);
                        llvm::AttrBuilder::addAttribute((uint64_t)&v575, v108);
                        goto LABEL_261;
                      default:
                        unsigned int v560 = "Invalid attribute group entry";
                        __int16 v563 = 259;
                    }
                    switch(v98)
                    {
                      case '-':
                        uint64_t v99 = v509 & 3;
                        goto LABEL_293;
                      case '.':
                      case '/':
                      case '0':
                      case '3':
                        goto LABEL_266;
                      case '1':
                        uint64_t v99 = v509 & 0xC;
                        goto LABEL_293;
                      case '2':
                        uint64_t v99 = v509 & 0xF;
LABEL_293:
                        uint64_t v509 = v99;
                        goto LABEL_261;
                      case '4':
                        uint64_t v109 = 42;
                        goto LABEL_295;
                      default:
                        if (v98 == 20)
                        {
                          uint64_t v509 = 0;
                          goto LABEL_261;
                        }
                        if (v98 == 21)
                        {
                          uint64_t v109 = 21;
LABEL_295:
                          v509 &= v109;
                          goto LABEL_261;
                        }
LABEL_266:
                        if (*a1)
                        {
LABEL_305:
                          int v115 = 0;
                          int v84 = 1;
                          goto LABEL_306;
                        }
                        if ((int)v557 > 73)
                        {
                          if (v557 == 74)
                          {
                            llvm::AttrBuilder::addStructRetAttr((uint64_t **)&v575, 0);
                            goto LABEL_261;
                          }
                          if (v557 == 83)
                          {
                            LODWORD(v110) = 2;
LABEL_289:
                            llvm::AttrBuilder::addUWTableAttr((uint64_t **)&v575, v110);
                            goto LABEL_261;
                          }
                        }
                        else
                        {
                          if (v557 == 70)
                          {
                            llvm::AttrBuilder::addByValAttr((uint64_t **)&v575, 0);
                            goto LABEL_261;
                          }
                          if (v557 == 72)
                          {
                            llvm::AttrBuilder::addInAllocaAttr((uint64_t **)&v575, 0);
                            goto LABEL_261;
                          }
                        }
                        if ((v557 - 1) > 0x43)
                        {
                          unint64_t v116 = "Not an enum attribute";
LABEL_304:
                          unsigned int v560 = v116;
                          __int16 v563 = 259;
                        }
                        llvm::AttrBuilder::addAttribute((uint64_t **)&v575, (int)v557);
LABEL_261:
                        unsigned int v90 = v93 + 1;
                        int v86 = v523;
                        if (v93 + 1 != v523) {
                          continue;
                        }
                        int v113 = (llvm::AttrBuilder *)v509;
                        if (v509 != 63) {
                          llvm::AttrBuilder::addMemoryAttr((uint64_t **)&v575, v509);
                        }
                        llvm::UpgradeAttributes((llvm *)&v575, v113);
                        unsigned int v114 = llvm::AttributeList::get(*(uint64_t **)(v8 + 424), (int)size, (uint64_t)&v575);
                        LODWORD(v560) = v505;
                        std::__tree<std::__value_type<unsigned int,llvm::AttributeList>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::AttributeList>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::AttributeList>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v538, v505, &v560)[5] = v114;
                        int v84 = 5;
                        int v115 = 1;
LABEL_306:
                        if ((std::__compressed_pair<std::string *> *)v575.__begin_ != &v575.__end_cap_) {
                          free(v575.__begin_);
                        }
                        if (v115) {
                          goto LABEL_309;
                        }
                        goto LABEL_310;
                    }
                  }
                }
LABEL_309:
                int v84 = 0;
              }
LABEL_310:
              if (v565)
              {
                uint64_t v117 = (uint64_t)v564;
                __int16 v564 = 0;
                if (v117) {
                  (*(void (**)(uint64_t))(*(void *)v117 + 8))(v117);
                }
              }
              uint64_t v18 = v546;
              goto LABEL_215;
            }
            *a1 = 0;
          }
          int v84 = 1;
LABEL_215:
          if (v568)
          {
            uint64_t v85 = v567;
            unint64_t v567 = 0;
            if (v85) {
              (*(void (**)(void *))(*(void *)v85 + 8))(v85);
            }
          }
          if (v84) {
            goto LABEL_734;
          }
        }
      case 0xB:
        if (*a1) {
          goto LABEL_34;
        }
        goto LABEL_736;
      case 0xC:
        if (*a1) {
          goto LABEL_34;
        }
        if (*(unsigned char *)(v8 + 1560)) {
          goto LABEL_319;
        }
        unint64_t v267 = *(void *)(v8 + 1512);
        uint64_t v268 = *(void *)(v8 + 1520);
        if (v267 != v268)
        {
          char v269 = (void *)(v268 - 8);
          if ((unint64_t)v269 > v267)
          {
            unint64_t v270 = v267 + 8;
            do
            {
              uint64_t v271 = *(void *)(v270 - 8);
              *(void *)(v270 - 8) = *v269;
              *v269-- = v271;
              BOOL v163 = v270 >= (unint64_t)v269;
              v270 += 8;
            }
            while (!v163);
          }
        }
        if (*a1) {
          goto LABEL_34;
        }
        *(unsigned char *)(v8 + 1560) = 1;
LABEL_319:
        uint64_t v118 = *(void *)(v8 + 464);
        if (!v118) {
          goto LABEL_323;
        }
        if (*(unsigned char *)(v8 + 456))
        {
LABEL_327:
          llvm::BitstreamCursor::SkipBlock(v15, (uint64_t *)a1);
          goto LABEL_736;
        }
        if (*a1) {
          goto LABEL_34;
        }
        *(unsigned char *)(v8 + 456) = 1;
LABEL_323:
        if (*a1) {
          goto LABEL_34;
        }
        if (*(unsigned char *)(v8 + 456))
        {
          *(void *)(v8 + 440) = 8 * *(void *)(v8 + 48) - *(unsigned int *)(v8 + 64);
          goto LABEL_45;
        }
LABEL_596:
        int v20 = 2;
        goto LABEL_35;
      case 0xE:
        if (*(unsigned char *)(v8 + 456)) {
          goto LABEL_327;
        }
        if (*a1) {
          goto LABEL_34;
        }
        *(unsigned char *)(v8 + 456) = 1;
        goto LABEL_596;
      case 0xF:
        if (!v545)
        {
          llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(*(llvm::MetadataLoader::MetadataLoaderImpl **)(v8 + 776), 1, (const llvm::Twine *)a1);
          goto LABEL_736;
        }
        uint64_t v119 = 8 * *(void *)(v8 + 48) - *(unsigned int *)(v8 + 64);
        std::string::value_type v120 = *(uint64_t **)(v8 + 1600);
        unint64_t v121 = *(void *)(v8 + 1608);
        if ((unint64_t)v120 >= v121)
        {
          unsigned int v228 = *(uint64_t **)(v8 + 1592);
          uint64_t v229 = v120 - v228;
          unint64_t v230 = v229 + 1;
          if ((unint64_t)(v229 + 1) >> 61) {
            goto LABEL_1095;
          }
          uint64_t v231 = v121 - (void)v228;
          if (v231 >> 2 > v230) {
            unint64_t v230 = v231 >> 2;
          }
          if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v232 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v232 = v230;
          }
          if (v232)
          {
            unsigned int v233 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v540, v232);
            std::string::value_type v120 = *(uint64_t **)(v8 + 1600);
            unsigned int v228 = *(uint64_t **)(v8 + 1592);
          }
          else
          {
            unsigned int v233 = 0;
          }
          unsigned int v307 = (uint64_t *)&v233[8 * v229];
          *unsigned int v307 = v119;
          std::string::size_type v122 = v307 + 1;
          while (v120 != v228)
          {
            uint64_t v308 = *--v120;
            *--unsigned int v307 = v308;
          }
          *(void *)(v8 + 1592) = v307;
          *(void *)(v8 + 1600) = v122;
          *(void *)(v8 + 1608) = &v233[8 * v232];
          if (v228) {
            operator delete(v228);
          }
        }
        else
        {
          *std::string::value_type v120 = v119;
          std::string::size_type v122 = v120 + 1;
        }
        *(void *)(v8 + 1600) = v122;
        llvm::BitstreamCursor::SkipBlock(v15, (uint64_t *)a1);
        if (*a1)
        {
          int v20 = 1;
        }
        else
        {
          *a1 = 0;
          int v20 = 2;
        }
        uint64_t v18 = v546;
        goto LABEL_35;
      case 0x11:
        llvm::BitstreamCursor::EnterSubBlock(v15, 0, 17, a1);
        if (*a1) {
          goto LABEL_34;
        }
        if (*(void *)(v8 + 520) != *(void *)(v8 + 528)) {
          goto LABEL_540;
        }
        unsigned int v123 = 0;
        v576.__first_ = (std::__split_buffer<std::string>::pointer)&v576.__end_;
        v576.__begin_ = (std::__split_buffer<std::string>::pointer)0x4000000000;
        unsigned int v551 = 0;
        v575.__first_ = (std::__split_buffer<std::string>::pointer)&v575.__end_cap_;
        *(_OWORD *)&v575.__begin_ = xmmword_261E8ACE0;
        while (1)
        {
          llvm::BitstreamCursor::advanceSkippingSubblocks(v15, 0, (uint64_t)v573);
          if (v574) {
            break;
          }
          switch(v573[0])
          {
            case 2u:
              goto LABEL_345;
            case 1u:
              if (v123 != (uint64_t)(*(void *)(v8 + 528) - *(void *)(v8 + 520)) >> 3)
              {
LABEL_345:
                unsigned int v560 = "Malformed block";
                __int16 v563 = 259;
              }
              *a1 = 0;
              goto LABEL_346;
            case 0u:
              goto LABEL_345;
          }
          LODWORD(v576.__begin_) = 0;
          uint64_t v557 = (char *)&v558 + 8;
          *(void *)&long long v558 = 0xC00000000;
          llvm::BitstreamCursor::readRecord(v15, v573[1], (unsigned int *)&v576, 0, (uint64_t)&v571);
          if (v572)
          {
            char v127 = v571;
            uint64_t v571 = 0;
            *a1 = v127;
            int v125 = 1;
          }
          else
          {
            switch((int)v571)
            {
              case 1:
                if (!LODWORD(v576.__begin_))
                {
                  uint64_t v128 = "Invalid numentry record";
                  goto LABEL_524;
                }
                std::vector<llvm::BasicBlock *>::resize(v534, v576.__first_->__r_.__value_.__r.__words[0]);
LABEL_390:
                int v125 = 2;
                break;
              case 2:
                uint64_t IdentifiedStructType = **(void **)(v8 + 424) + 1608;
                goto LABEL_521;
              case 3:
                uint64_t IdentifiedStructType = **(void **)(v8 + 424) + 1704;
                goto LABEL_521;
              case 4:
                uint64_t IdentifiedStructType = **(void **)(v8 + 424) + 1728;
                goto LABEL_521;
              case 5:
                uint64_t IdentifiedStructType = **(void **)(v8 + 424) + 1632;
                goto LABEL_521;
              case 6:
                if (LODWORD(v576.__begin_) != 1)
                {
                  uint64_t v128 = "Invalid opaque type record";
                  goto LABEL_524;
                }
                uint64_t v130 = *(void *)(v8 + 520);
                if (v123 >= (unint64_t)((*(void *)(v8 + 528) - v130) >> 3)) {
                  goto LABEL_416;
                }
                uint64_t IdentifiedStructType = *(void *)(v130 + 8 * v123);
                if (IdentifiedStructType)
                {
                  llvm::StructType::setName(*(void *)(v130 + 8 * v123), (uint64_t *)v575.__first_, (unint64_t)v575.__begin_);
                  *(void *)(*v534 + 8 * v123) = 0;
                }
                else
                {
                }
                v575.__begin_ = 0;
                goto LABEL_521;
              case 7:
                if (!LODWORD(v576.__begin_))
                {
                  uint64_t v128 = "Invalid integer record";
                  goto LABEL_524;
                }
                if ((unint64_t)(v576.__first_->__r_.__value_.__l.__data_ - 1) >> 23)
                {
                  uint64_t v128 = "Bitwidth for integer type out of range";
                  goto LABEL_524;
                }
                unint64_t v131 = (unint64_t)llvm::IntegerType::get(*(llvm::IntegerType **)(v8 + 424), (llvm::LLVMContext *)v576.__first_->__r_.__value_.__l.__data_);
                goto LABEL_511;
              case 8:
                if (!LODWORD(v576.__begin_))
                {
                  uint64_t v128 = "Invalid pointer record";
                  goto LABEL_524;
                }
                if (LODWORD(v576.__begin_) == 2)
                {
                  unsigned int v132 = (unsigned int *)v576.__first_;
                  char v133 = (llvm::Type *)LODWORD(v576.__first_->__r_.__value_.__r.__words[1]);
                }
                else
                {
                  char v133 = 0;
                  unsigned int v132 = (unsigned int *)v576.__first_;
                }
                if (!v170) {
                  goto LABEL_469;
                }
                unint64_t v171 = (llvm::PointerType **)v170;
                unsigned int v172 = *(unsigned __int8 *)(v170 + 8);
                BOOL v173 = v172 > 0xC || ((1 << v172) & 0x1380) == 0;
                if (!v173 || v172 == 11) {
                  goto LABEL_469;
                }
                llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v557, (int)v576.__first_->__r_.__value_.__l.__data_);
                unint64_t v131 = llvm::PointerType::get(v171, v133);
                goto LABEL_511;
              case 9:
                int v134 = (int)v576.__begin_;
                if (LODWORD(v576.__begin_) <= 2) {
                  goto LABEL_396;
                }
                unsigned int v560 = (char *)&v561 + 8;
                *(void *)&long long v561 = 0x800000000;
                if (LODWORD(v576.__begin_) != 3)
                {
                  int v135 = 3;
                  do
                  {
                    if (!v136) {
                      break;
                    }
                    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v560, v136);
                    ++v135;
                  }
                  while (v134 != v135);
                }
                if (!v137) {
                  goto LABEL_451;
                }
                uint64_t begin_low = LODWORD(v576.__begin_);
                if ((unint64_t)LODWORD(v576.__begin_) - 3 > v561) {
                  goto LABEL_451;
                }
                std::__split_buffer<std::string>::pointer v139 = v576.__first_;
                unint64_t v140 = &v576.__first_->__r_.__value_.__s.__data_[16];
                goto LABEL_493;
              case 10:
                uint64_t IdentifiedStructType = **(void **)(v8 + 424) + 1656;
                goto LABEL_521;
              case 11:
                if (LODWORD(v576.__begin_) <= 1)
                {
                  uint64_t v128 = "Invalid array type record";
                  goto LABEL_524;
                }
                if (!v154) {
                  goto LABEL_469;
                }
                uint64_t v155 = (uint64_t **)v154;
                unsigned int v156 = *(unsigned __int8 *)(v154 + 8);
                BOOL v157 = v156 > 0xE || ((1 << v156) & 0x5B80) == 0;
                if (!v157 || v156 == 19) {
                  goto LABEL_469;
                }
                llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v557, v576.__first_->__r_.__value_.__r.__words[1]);
                llvm::ArrayType::get(v155, (llvm::Type *)v576.__first_->__r_.__value_.__l.__data_);
                goto LABEL_511;
              case 12:
                if (LODWORD(v576.__begin_) <= 1)
                {
                  uint64_t v128 = "Invalid vector type record";
                  goto LABEL_524;
                }
                if (!v576.__first_->__r_.__value_.__l.__data_)
                {
                  uint64_t v128 = "Invalid vector length";
                  goto LABEL_524;
                }
                if (!v159) {
                  goto LABEL_469;
                }
                long long v160 = (uint64_t **)v159;
                int v161 = *(_DWORD *)(v159 + 8);
                int v162 = v161;
                BOOL v163 = v161 != 13 && v161 >= 4u;
                BOOL v164 = !v163 || v161 == 5;
                int v165 = v161 & 0xFD;
                BOOL v166 = v164 || v165 == 4;
                BOOL v167 = v166 || v162 == 15;
                if (!v167 && v162 != 20)
                {
LABEL_469:
                  uint64_t v128 = "Invalid type";
                  goto LABEL_524;
                }
                if (LODWORD(v576.__begin_) < 3) {
                  std::string::size_type v169 = 0;
                }
                else {
                  std::string::size_type v169 = v576.__first_->__r_.__value_.__r.__words[2];
                }
                uint64_t v189 = v169 != 0;
                llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v557, v576.__first_->__r_.__value_.__r.__words[1]);
                llvm::VectorType::get(v160, (llvm::Type *)(LODWORD(v576.__first_->__r_.__value_.__l.__data_) | (unint64_t)(v189 << 32)));
                goto LABEL_511;
              case 13:
                uint64_t IdentifiedStructType = **(void **)(v8 + 424) + 1800;
                goto LABEL_521;
              case 14:
                uint64_t IdentifiedStructType = **(void **)(v8 + 424) + 1824;
                goto LABEL_521;
              case 15:
                uint64_t IdentifiedStructType = **(void **)(v8 + 424) + 1848;
                goto LABEL_521;
              case 16:
                uint64_t IdentifiedStructType = **(void **)(v8 + 424) + 1752;
                goto LABEL_521;
              case 17:
                uint64_t IdentifiedStructType = **(void **)(v8 + 424) + 1872;
                goto LABEL_521;
              case 18:
                int v141 = (int)v576.__begin_;
                if (!LODWORD(v576.__begin_))
                {
                  uint64_t v128 = "Invalid anon struct record";
                  goto LABEL_524;
                }
                unsigned int v560 = (char *)&v561 + 8;
                *(void *)&long long v561 = 0x800000000;
                if (LODWORD(v576.__begin_) == 1)
                {
                  uint64_t v142 = 0;
                  uint64_t v143 = 1;
                }
                else
                {
                  uint64_t v175 = 1;
                  do
                  {
                    if (!v176) {
                      break;
                    }
                    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v560, v176);
                    ++v175;
                  }
                  while (v141 != v175);
                  uint64_t v142 = v561;
                  uint64_t v143 = LODWORD(v576.__begin_);
                }
                uint64_t v177 = v143 - 1;
                if (v143 - 1 != v142)
                {
                  unint64_t v567 = "Invalid type";
                  __int16 v570 = 259;
                }
                llvm::SmallVectorImpl<unsigned int>::append<unsigned long long *,void>((unsigned int *)&v557, &v576.__first_->__r_.__value_.__s.__data_[8], &v576.__first_->__r_.__value_.__s.__data_[8 * v143]);
                uint64_t IdentifiedStructType = llvm::StructType::get(*((uint64_t **)v547 + 53), (uint64_t)v560, v561, (unint64_t *)(v576.__first_->__r_.__value_.__r.__words[0] != 0));
                int v125 = 5;
                if (v560 != (char *)&v561 + 8) {
                  free(v560);
                }
                BOOL v178 = v177 == v142;
                goto LABEL_507;
              case 19:
                llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v575, (char *)v576.__first_, &v576.__first_->__r_.__value_.__s.__data_[8 * LODWORD(v576.__begin_)]);
                goto LABEL_390;
              case 20:
                if (!LODWORD(v576.__begin_))
                {
                  uint64_t v128 = "Invalid named struct record";
                  goto LABEL_524;
                }
                uint64_t v144 = *(void *)(v8 + 520);
                if (v123 >= (unint64_t)((*(void *)(v8 + 528) - v144) >> 3)) {
                  goto LABEL_416;
                }
                uint64_t IdentifiedStructType = *(void *)(v144 + 8 * v123);
                if (IdentifiedStructType)
                {
                  llvm::StructType::setName(*(void *)(v144 + 8 * v123), (uint64_t *)v575.__first_, (unint64_t)v575.__begin_);
                  *(void *)(*v534 + 8 * v123) = 0;
                }
                else
                {
                }
                v575.__begin_ = 0;
                unsigned int v560 = (char *)&v561 + 8;
                *(void *)&long long v561 = 0x800000000;
                int v183 = (int)v576.__begin_;
                if (LODWORD(v576.__begin_) == 1)
                {
                  uint64_t v184 = 0;
                  uint64_t v185 = 1;
                }
                else
                {
                  uint64_t v186 = 1;
                  do
                  {
                    if (!v187) {
                      break;
                    }
                    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v560, v187);
                    ++v186;
                  }
                  while (v183 != v186);
                  uint64_t v184 = v561;
                  uint64_t v185 = LODWORD(v576.__begin_);
                }
                uint64_t v188 = v185 - 1;
                if (v185 - 1 != v184)
                {
                  unint64_t v567 = "Invalid named struct record";
                  __int16 v570 = 259;
                }
                llvm::StructType::setBody(IdentifiedStructType, (uint64_t)v560, v184, v576.__first_->__r_.__value_.__r.__words[0] != 0);
                llvm::SmallVectorImpl<unsigned int>::append<unsigned long long *,void>((unsigned int *)&v557, &v576.__first_->__r_.__value_.__s.__data_[8], &v576.__first_->__r_.__value_.__s.__data_[8 * LODWORD(v576.__begin_)]);
                int v125 = 5;
                if (v560 != (char *)&v561 + 8) {
                  free(v560);
                }
                BOOL v178 = v188 == v184;
LABEL_507:
                uint64_t v8 = (uint64_t)v547;
                if (v178) {
                  goto LABEL_521;
                }
                uint64_t v18 = v546;
                break;
              case 21:
                int v145 = (int)v576.__begin_;
                if (LODWORD(v576.__begin_) <= 1)
                {
LABEL_396:
                  uint64_t v128 = "Invalid function record";
                  goto LABEL_524;
                }
                unsigned int v560 = (char *)&v561 + 8;
                *(void *)&long long v561 = 0x800000000;
                if (LODWORD(v576.__begin_) != 2)
                {
                  int v179 = 2;
                  do
                  {
                    if (!v180) {
                      break;
                    }
                    int v181 = *(unsigned __int8 *)(v180 + 8);
                    if (v181 == 7 || v181 == 14)
                    {
                      unint64_t v567 = "Invalid function argument type";
                      __int16 v570 = 259;
                    }
                    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v560, v180);
                    ++v179;
                  }
                  while (v145 != v179);
                }
                if (!v137
                  || (uint64_t begin_low = LODWORD(v576.__begin_),
                      (unint64_t)LODWORD(v576.__begin_) - 2 > v561))
                {
LABEL_451:
                  unint64_t v567 = "Invalid type";
                  __int16 v570 = 259;
                }
                std::__split_buffer<std::string>::pointer v139 = v576.__first_;
                unint64_t v140 = &v576.__first_->__r_.__value_.__s.__data_[8];
LABEL_493:
                llvm::SmallVectorImpl<unsigned int>::append<unsigned long long *,void>((unsigned int *)&v557, v140, &v139->__r_.__value_.__s.__data_[8 * begin_low]);
                uint64_t IdentifiedStructType = llvm::FunctionType::get(v137, (uint64_t *)v560, v561, (unint64_t *)(v576.__first_->__r_.__value_.__r.__words[0] != 0));
                goto LABEL_519;
              case 22:
                uint64_t IdentifiedStructType = **(void **)(v8 + 424) + 1776;
                goto LABEL_521;
              case 23:
                uint64_t IdentifiedStructType = **(void **)(v8 + 424) + 1680;
                goto LABEL_521;
              case 24:
                uint64_t IdentifiedStructType = **(void **)(v8 + 424) + 1896;
                goto LABEL_521;
              case 25:
                if (LODWORD(v576.__begin_) != 1)
                {
                  uint64_t v128 = "Invalid opaque pointer record";
                  goto LABEL_524;
                }
                uint64_t v146 = **(void **)(v8 + 424);
                if (*(unsigned char *)(v146 + 2737))
                {
                  if (!*(unsigned char *)(v146 + 2736)) {
                    goto LABEL_536;
                  }
                }
                else
                {
                  int v195 = byte_26B41F148;
                  *(unsigned char *)(v146 + 2737) = 1;
                  *(unsigned char *)(v146 + 2736) = v195;
                  if (!v195)
                  {
LABEL_536:
                    uint64_t v128 = "Opaque pointers are only supported in -opaque-pointers mode";
                    goto LABEL_524;
                  }
                }
                unint64_t v131 = llvm::PointerType::get(*(llvm::PointerType **)(v8 + 424), (llvm::LLVMContext *)LODWORD(v576.__first_->__r_.__value_.__l.__data_));
LABEL_511:
                uint64_t IdentifiedStructType = v131;
LABEL_521:
                uint64_t v191 = *(void *)(v8 + 520);
                if (v123 >= (unint64_t)((*(void *)(v8 + 528) - v191) >> 3))
                {
                  unsigned int v560 = "Invalid TYPE table";
                  __int16 v563 = 259;
                  unsigned int v192 = (_anonymous_namespace_::BitcodeReaderBase *)a1;
                  uint64_t v18 = v546;
LABEL_526:
                }
                uint64_t v18 = v546;
                if (*(void *)(v191 + 8 * v123))
                {
                  uint64_t v128 = "Invalid TYPE table: Only named structs can be forward referenced";
LABEL_524:
                  unsigned int v560 = v128;
                  __int16 v563 = 259;
                  unsigned int v192 = (_anonymous_namespace_::BitcodeReaderBase *)a1;
                  goto LABEL_526;
                }
                *(void *)(v191 + 8 * v123) = IdentifiedStructType;
                if (v558)
                {
                  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::FindAndConstruct(v535, (int *)&v551);
                  llvm::SmallVectorImpl<unsigned int>::operator=(v194 + 8, (uint64_t)&v557);
                }
                int v125 = 0;
                unsigned int v551 = ++v123;
                break;
              case 26:
                unint64_t v147 = LODWORD(v576.__begin_);
                if (!LODWORD(v576.__begin_))
                {
                  uint64_t v128 = "Invalid target extension type record";
                  goto LABEL_524;
                }
                if (v123 >= (unint64_t)((uint64_t)(*(void *)(v8 + 528) - *(void *)(v8 + 520)) >> 3))
                {
LABEL_416:
                  uint64_t v128 = "Invalid TYPE table";
                  goto LABEL_524;
                }
                std::string::pointer v148 = v576.__first_->__r_.__value_.__l.__data_;
                if (v576.__first_->__r_.__value_.__l.__data_ >= (std::string::pointer)LODWORD(v576.__begin_))
                {
                  uint64_t v128 = "Too many type parameters";
                  goto LABEL_524;
                }
                uint64_t v149 = v576.__first_->__r_.__value_.__l.__data_;
                unsigned int v560 = (char *)&v561 + 8;
                *(void *)&long long v561 = 0x400000000;
                unint64_t v567 = v569;
                uint64_t v568 = 0x800000000;
                if (!v148) {
                  goto LABEL_412;
                }
                uint64_t v150 = 0;
                do
                {
                  if (!v151)
                  {
                    int v190 = "Invalid type";
                    goto LABEL_516;
                  }
                  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v560, v151);
                  ++v150;
                }
                while (v149 != v150);
                unint64_t v147 = LODWORD(v576.__begin_);
LABEL_412:
                unint64_t v152 = v149 + 1;
                if (v152 < v147)
                {
                  while (1)
                  {
                    unint64_t v153 = v576.__first_->__r_.__value_.__r.__words[v152];
                    if (HIDWORD(v153)) {
                      break;
                    }
                    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v567, v153);
                    if (v147 == ++v152) {
                      goto LABEL_415;
                    }
                  }
                  int v190 = "Integer parameter too large";
LABEL_516:
                  __int16 v564 = (void *)v190;
                  __int16 v566 = 259;
                }
LABEL_415:
                uint64_t IdentifiedStructType = llvm::TargetExtType::get(*(void **)(v8 + 424), (uint64_t)v575.__first_, (unint64_t *)v575.__begin_, (unint64_t *)v560, v561, (int *)v567, v568);
                v575.__begin_ = 0;
                if (v567 != v569) {
                  free(v567);
                }
LABEL_519:
                if (v560 != (char *)&v561 + 8) {
                  free(v560);
                }
                goto LABEL_521;
              default:
                uint64_t v128 = "Invalid value";
                goto LABEL_524;
            }
          }
          if (v572)
          {
            unsigned int v193 = v571;
            uint64_t v571 = 0;
            if (v193) {
              (*((void (**)(void **))*v193 + 1))(v193);
            }
          }
          if (v557 != (char *)&v558 + 8) {
            free(v557);
          }
LABEL_347:
          if (v574)
          {
            uint64_t v126 = *(void ***)v573;
            *(void *)BOOL v573 = 0;
            if (v126) {
              (*((void (**)(void **))*v126 + 1))(v126);
            }
          }
          if ((v125 | 2) != 2)
          {
            if ((std::__compressed_pair<std::string *> *)v575.__first_ != &v575.__end_cap_) {
              free(v575.__first_);
            }
            std::__split_buffer<std::string>::pointer v272 = v576.__first_;
            if ((std::__split_buffer<std::string>::pointer *)v576.__first_ == &v576.__end_)
            {
LABEL_736:
              if (*a1) {
                int v20 = 1;
              }
              else {
                int v20 = 2;
              }
              goto LABEL_35;
            }
LABEL_735:
            free(v272);
            goto LABEL_736;
          }
        }
        std::string::size_type v124 = *(void ***)v573;
        *(void *)BOOL v573 = 0;
        *a1 = v124;
LABEL_346:
        int v125 = 1;
        goto LABEL_347;
      case 0x12:
        goto LABEL_736;
      case 0x15:
        llvm::BitstreamCursor::EnterSubBlock(v15, 0, 21, a1);
        if (*a1) {
          goto LABEL_34;
        }
        if (*(void *)(v8 + 1776) != *(void *)(v8 + 1784))
        {
LABEL_540:
          unint64_t v196 = (std::string *)"Invalid multiple blocks";
          goto LABEL_541;
        }
        v576.__first_ = (std::__split_buffer<std::string>::pointer)&v576.__end_;
        v576.__begin_ = (std::__split_buffer<std::string>::pointer)0x4000000000;
        while (1)
        {
          llvm::BitstreamCursor::advanceSkippingSubblocks(v15, 0, (uint64_t)&v560);
          if (v561)
          {
            uint64_t v273 = (void **)v560;
            unsigned int v560 = 0;
            *a1 = v273;
          }
          else
          {
            if (v560 == 2) {
              goto LABEL_671;
            }
            if (v560 != 1)
            {
              if (!v560)
              {
LABEL_671:
                v575.__first_ = (std::__split_buffer<std::string>::pointer)"Malformed block";
                LOWORD(v575.__end_cap_.__value_) = 259;
              }
              llvm::BitstreamCursor::readRecord(v15, SHIDWORD(v560), (unsigned int *)&v576, 0, (uint64_t)&v557);
              if (v558)
              {
                BOOL v279 = (void **)v557;
                uint64_t v557 = 0;
                *a1 = v279;
                int v274 = 1;
              }
              else
              {
                if (v557 != 1)
                {
                  v575.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid operand bundle record";
                  LOWORD(v575.__end_cap_.__value_) = 259;
                }
                long long v276 = *(std::string **)(v8 + 1784);
                unint64_t v277 = *(void *)(v8 + 1792);
                if ((unint64_t)v276 >= v277)
                {
                  uint64_t v280 = *(void *)(v8 + 1776);
                  unint64_t v281 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v276 - v280) >> 3);
                  unint64_t v282 = v281 + 1;
                  if (v281 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_1095;
                  }
                  unint64_t v283 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v277 - v280) >> 3);
                  if (2 * v283 > v282) {
                    unint64_t v282 = 2 * v283;
                  }
                  if (v283 >= 0x555555555555555) {
                    unint64_t v284 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v284 = v282;
                  }
                  v575.__end_cap_.__value_ = v537;
                  if (v284) {
                    uint64_t v285 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v537, v284);
                  }
                  else {
                    uint64_t v285 = 0;
                  }
                  uint64_t v286 = &v285[24 * v281];
                  *(void *)uint64_t v286 = 0;
                  *((void *)v286 + 1) = 0;
                  *((void *)v286 + 2) = 0;
                  unint64_t v287 = *(void *)(v8 + 1784);
                  uint64_t v288 = *(void *)(v8 + 1776);
                  if (v287 == v288)
                  {
                    int64x2_t v291 = vdupq_n_s64(v287);
                    unint64_t v289 = &v285[24 * v281];
                  }
                  else
                  {
                    unint64_t v289 = &v285[24 * v281];
                    do
                    {
                      long long v290 = *(_OWORD *)(v287 - 24);
                      *((void *)v289 - 1) = *(void *)(v287 - 8);
                      *(_OWORD *)(v289 - 24) = v290;
                      v289 -= 24;
                      *(void *)(v287 - 16) = 0;
                      *(void *)(v287 - 8) = 0;
                      *(void *)(v287 - 24) = 0;
                      v287 -= 24;
                    }
                    while (v287 != v288);
                    int64x2_t v291 = *(int64x2_t *)(v8 + 1776);
                  }
                  uint64_t v278 = (std::string *)(v286 + 24);
                  *(void *)(v8 + 1776) = v289;
                  *(void *)(v8 + 1784) = v286 + 24;
                  *(int64x2_t *)&v575.__begin_ = v291;
                  unint64_t v292 = *(std::string **)(v8 + 1792);
                  *(void *)(v8 + 1792) = &v285[24 * v284];
                  v575.__end_cap_.__value_ = v292;
                  v575.__first_ = (std::__split_buffer<std::string>::pointer)v291.i64[0];
                  std::__split_buffer<std::string>::~__split_buffer(&v575);
                }
                else
                {
                  v276->__r_.__value_.__r.__words[0] = 0;
                  v276->__r_.__value_.__l.__size_ = 0;
                  uint64_t v278 = v276 + 1;
                  v276->__r_.__value_.__r.__words[2] = 0;
                }
                *(void *)(v8 + 1784) = v278;
                std::string::append[abi:nn180100]<unsigned long long const*,0>(v278 - 1, v576.__first_, (std::string *)((char *)v576.__first_ + 8 * LODWORD(v576.__begin_)));
                int v274 = 0;
                LODWORD(v576.__begin_) = 0;
              }
              if (v558)
              {
                uint64_t v293 = v557;
                uint64_t v557 = 0;
                if (v293) {
                  (*(void (**)(void *))(*(void *)v293 + 8))(v293);
                }
              }
              goto LABEL_675;
            }
            *a1 = 0;
          }
          int v274 = 1;
LABEL_675:
          if (v561)
          {
            unint64_t v275 = v560;
            unsigned int v560 = 0;
            if (v275) {
              (*(void (**)(void *))(*(void *)v275 + 8))(v275);
            }
          }
          if (v274) {
            goto LABEL_734;
          }
        }
      case 0x16:
        llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKinds(*(llvm::BitstreamCursor ***)(v8 + 776), a1);
        goto LABEL_736;
      case 0x1A:
        llvm::BitstreamCursor::EnterSubBlock(v15, 0, 26, a1);
        if (*a1) {
          goto LABEL_34;
        }
        if (*(void *)(v8 + 1808))
        {
          unint64_t v196 = (std::string *)"Invalid multiple synchronization scope names blocks";
LABEL_541:
          v576.__first_ = v196;
          LOWORD(v576.__end_cap_.__value_) = 259;
        }
        v576.__first_ = (std::__split_buffer<std::string>::pointer)&v576.__end_;
        v576.__begin_ = (std::__split_buffer<std::string>::pointer)0x4000000000;
        break;
      default:
        goto LABEL_327;
    }
    while (1)
    {
      llvm::BitstreamCursor::advanceSkippingSubblocks(v15, 0, (uint64_t)&v557);
      if (v558) {
        break;
      }
      switch(v557)
      {
        case 2:
          goto LABEL_710;
        case 1:
          if (!*(void *)(v8 + 1808))
          {
            int v294 = (std::string *)"Invalid empty synchronization scope names block";
LABEL_711:
            v575.__first_ = v294;
            LOWORD(v575.__end_cap_.__value_) = 259;
          }
          *a1 = 0;
          goto LABEL_713;
        case 0:
LABEL_710:
          int v294 = (std::string *)"Malformed block";
          goto LABEL_711;
      }
      llvm::BitstreamCursor::readRecord(v15, SHIDWORD(v557), (unsigned int *)&v576, 0, (uint64_t)&v567);
      if (v568)
      {
        uint64_t v301 = (void **)v567;
        unint64_t v567 = 0;
        *a1 = v301;
        int v296 = 1;
      }
      else
      {
        if (v567 != 1)
        {
          v575.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid sync scope record";
          LOWORD(v575.__end_cap_.__value_) = 259;
        }
        v575.__first_ = (std::__split_buffer<std::string>::pointer)&v575.__end_cap_;
        *(_OWORD *)&v575.__begin_ = xmmword_261E8D180;
        llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v575, (char *)v576.__first_, &v576.__first_->__r_.__value_.__s.__data_[8 * LODWORD(v576.__begin_)]);
        uint64_t v298 = **(void **)(v8 + 424);
        uint64_t v299 = (llvm::StringMapImpl *)(v298 + 2672);
        LODWORD(v298) = *(_DWORD *)(v298 + 2684);
        unsigned int v560 = v575.__first_;
        *(void *)&long long v561 = v575.__begin_;
        BYTE8(v561) = v298;
        uint64_t v300 = llvm::StringMap<unsigned char,llvm::MallocAllocator>::try_emplace<unsigned char>(v299, (uint64_t *)v575.__first_, (unint64_t)v575.__begin_, (char *)&v561 + 8);
        llvm::SmallVectorTemplateBase<char,true>::push_back(v539, *(unsigned char *)(*v300 + 8));
        LODWORD(v576.__begin_) = 0;
        if ((std::__compressed_pair<std::string *> *)v575.__first_ != &v575.__end_cap_) {
          free(v575.__first_);
        }
        int v296 = 0;
      }
      if (v568)
      {
        int v302 = v567;
        unint64_t v567 = 0;
        if (v302) {
          (*(void (**)(void *))(*(void *)v302 + 8))(v302);
        }
      }
LABEL_714:
      if (v558)
      {
        __int16 v297 = v557;
        uint64_t v557 = 0;
        if (v297) {
          (*(void (**)(void *))(*(void *)v297 + 8))(v297);
        }
      }
      if (v296) {
        goto LABEL_734;
      }
    }
    int v295 = (void **)v557;
    uint64_t v557 = 0;
    *a1 = v295;
LABEL_713:
    int v296 = 1;
    goto LABEL_714;
  }
}

llvm::DataLayout *anonymous namespace'::BitcodeReader::parseModule(unsigned long long,BOOL,llvm::ParserCallbacks)::$_0::operator()(llvm::DataLayout *result, uint64_t a2)
{
  unint64_t v2 = result;
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (**(unsigned char **)a2)
  {
    *(void *)uint64_t result = 0;
    return result;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  **(unsigned char **)a2 = 1;
  uint64_t v5 = *(void *)(a2 + 8);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = *(const char ***)(a2 + 8);
  }
  else {
    uint64_t v7 = *(const char ***)v5;
  }
  if (v6 >= 0) {
    size_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    size_t v8 = *(void *)(v5 + 8);
  }
  uint64_t v9 = *(void *)(v4 + 432);
  uint64_t v12 = *(const char ***)(v9 + 208);
  uint64_t v10 = v9 + 208;
  uint64_t v11 = v12;
  int v13 = *(char *)(v10 + 23);
  if (v13 >= 0) {
    uint64_t v14 = (const char **)v10;
  }
  else {
    uint64_t v14 = v11;
  }
  size_t v15 = *(void *)(v10 + 8);
  if (v13 >= 0) {
    size_t v16 = v13;
  }
  else {
    size_t v16 = v15;
  }
  llvm::UpgradeDataLayoutString(v7, v8, v14, v16, (uint64_t)&__str);
  uint64_t v17 = *(void *)(a2 + 8);
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  long long v18 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(void *)(v17 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v17 = v18;
  uint64_t v19 = *(void *)(a2 + 24);
  if (*(unsigned char *)(v19 + 32))
  {
    uint64_t v20 = *(void *)(v19 + 24);
    if (!v20)
    {
      unint64_t v26 = (_anonymous_namespace_::BitcodeReader *)std::__throw_bad_function_call[abi:nn180100]();
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v20 + 48))(&__str);
    if (v28)
    {
      std::string::operator=(*(std::string **)(a2 + 8), &__str);
      if (v28)
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  uint64_t v21 = *(void *)(a2 + 8);
  int v22 = *(char *)(v21 + 23);
  if (v22 >= 0) {
    int v23 = *(void **)(a2 + 8);
  }
  else {
    int v23 = *(void **)v21;
  }
  if (v22 >= 0) {
    unint64_t v24 = *(unsigned __int8 *)(v21 + 23);
  }
  else {
    unint64_t v24 = *(void *)(v21 + 8);
  }
  llvm::DataLayout::parse(v23, v24, (llvm::DataLayout *)&__str);
  if (v29)
  {
    std::string::size_type v25 = __str.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[0] = 0;
  }
  else
  {
    llvm::DataLayout::operator=(*(void *)(v4 + 432) + 256, (uint64_t)&__str);
    std::string::size_type v25 = 0;
  }
  *unint64_t v2 = v25;
  return llvm::Expected<llvm::DataLayout>::~Expected((llvm::DataLayout *)&__str);
}

void anonymous namespace'::BitcodeReader::globalCleanup(_anonymous_namespace_::BitcodeReader *this, uint64_t a2)
{
  if (!*(void *)this)
  {
    if (*(void *)(a2 + 1368) != *(void *)(a2 + 1376) || *(void *)(a2 + 1392) != *(void *)(a2 + 1400))
    {
      v42[0] = "Malformed global initializer set";
      __int16 v43 = 259;
    }
    uint64_t v5 = *(void *)(a2 + 432);
    uint64_t v6 = v5 + 24;
    uint64_t v7 = *(void *)(v5 + 32);
    if (v7 != v5 + 24)
    {
      while (1)
      {
        if (v7) {
          size_t v8 = (llvm::Function *)(v7 - 56);
        }
        else {
          size_t v8 = 0;
        }
        llvm::MetadataLoader::MetadataLoaderImpl::upgradeDeclareExpressions(*(llvm::MetadataLoader::MetadataLoaderImpl **)(a2 + 776), v8);
        int v41 = 0;
        if (!llvm::UpgradeIntrinsicFunction(v8, &v41, v9)) {
          goto LABEL_18;
        }
        uint64_t v11 = v41;
        v42[0] = 0;
        char v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)(a2 + 1536), *(_DWORD *)(a2 + 1552), (uint64_t)v8, v42);
        int v13 = (llvm::Function **)v42[0];
        if ((v12 & 1) == 0) {
          break;
        }
LABEL_17:
        v13[1] = v11;
LABEL_18:
        llvm::UpgradeFunctionAttributes(v8, v10);
        uint64_t v7 = *(void *)(v7 + 8);
        if (v7 == v6)
        {
          uint64_t v5 = *(void *)(a2 + 432);
          goto LABEL_22;
        }
      }
      int v14 = *(_DWORD *)(a2 + 1544);
      uint64_t v10 = (llvm::Function *)*(unsigned int *)(a2 + 1552);
      if (4 * v14 + 4 >= (3 * v10))
      {
        LODWORD(v10) = 2 * v10;
      }
      else if ((int)v10 + ~v14 - *(_DWORD *)(a2 + 1548) > v10 >> 3)
      {
LABEL_14:
        ++*(_DWORD *)(a2 + 1544);
        if (*v13 != (llvm::Function *)-4096) {
          --*(_DWORD *)(a2 + 1548);
        }
        *int v13 = v8;
        v13[1] = 0;
        goto LABEL_17;
      }
      llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::grow(a2 + 1536, (int)v10);
      v42[0] = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)(a2 + 1536), *(_DWORD *)(a2 + 1552), (uint64_t)v8, v42);
      int v13 = (llvm::Function **)v42[0];
      goto LABEL_14;
    }
LABEL_22:
    uint64_t v15 = v5 + 8;
    uint64_t v16 = *(void *)(v5 + 16);
    if (v16 == v5 + 8)
    {
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = 0;
      long long v18 = 0;
      uint64_t v19 = 0;
      do
      {
        if (v16) {
          uint64_t v20 = (uint64_t **)(v16 - 56);
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v21 = llvm::UpgradeGlobalVariable(v20, v4);
        if (v21)
        {
          uint64_t v22 = v21;
          if (v18 >= v19)
          {
            uint64_t v23 = (v18 - v17) >> 4;
            unint64_t v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 60) {
              abort();
            }
            if ((v19 - v17) >> 3 > v24) {
              unint64_t v24 = (v19 - v17) >> 3;
            }
            if ((unint64_t)(v19 - v17) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v24;
            }
            if (v25 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unint64_t v26 = (char *)operator new(16 * v25);
            unsigned int v27 = (uint64_t ***)&v26[16 * v23];
            *unsigned int v27 = v20;
            v27[1] = (uint64_t **)v22;
            if (v18 == v17)
            {
              char v29 = &v26[16 * v23];
            }
            else
            {
              char v28 = &v26[16 * v23];
              do
              {
                char v29 = v28 - 16;
                *((_OWORD *)v28 - 1) = *((_OWORD *)v18 - 1);
                v18 -= 16;
                v28 -= 16;
              }
              while (v18 != v17);
            }
            uint64_t v19 = &v26[16 * v25];
            long long v18 = (char *)(v27 + 2);
            if (v17) {
              operator delete(v17);
            }
            uint64_t v17 = v29;
          }
          else
          {
            *(void *)long long v18 = v20;
            *((void *)v18 + 1) = v21;
            v18 += 16;
          }
        }
        uint64_t v16 = *(void *)(v16 + 8);
      }
      while (v16 != v15);
      if (v17 != v18)
      {
        uint64_t v30 = v17;
        do
        {
          if (*(void *)v30) {
            uint64_t v31 = *(void *)v30 + 56;
          }
          else {
            uint64_t v31 = 0;
          }
          llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalVariable>,llvm::SymbolTableListTraits<llvm::GlobalVariable>>::erase(*(void *)(*(void *)v30 + 40) + 8, v31);
          uint64_t v32 = *(void *)(a2 + 432);
          uint64_t v33 = *((void *)v30 + 1);
          *(void *)(v33 + 40) = v32;
          if ((*(unsigned char *)(v33 + 23) & 0x10) != 0)
          {
            unsigned int v34 = *(llvm::ValueSymbolTable **)(v32 + 112);
            if (v34) {
              llvm::ValueSymbolTable::reinsertValue(v34, (uint64_t ***)v33);
            }
          }
          uint64_t v35 = *(void *)(v32 + 8);
          *(void *)(v33 + 56) = v35;
          *(void *)(v33 + 64) = v32 + 8;
          uint64_t v36 = v33 + 56;
          *(void *)(v35 + 8) = v36;
          *(void *)(v32 + 8) = v36;
          v30 += 16;
        }
        while (v30 != v18);
      }
    }
    uint64_t v37 = (void *)(a2 + 1368);
    uint64_t v38 = *(void **)(a2 + 1368);
    uint64_t v39 = a2 + 1392;
    v37[1] = 0;
    void v37[2] = 0;
    void *v37 = 0;
    if (v38) {
      operator delete(v38);
    }
    unint64_t v40 = *(void **)v39;
    *(void *)(v39 + 8) = 0;
    *(void *)(v39 + 16) = 0;
    *(void *)uint64_t v39 = 0;
    if (v40) {
      operator delete(v40);
    }
    *(void *)this = 0;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void anonymous namespace'::BitcodeReader::resolveGlobalAndIndirectSymbolInits(_anonymous_namespace_::BitcodeReader *this, void *a2)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t *)a2[171];
  uint64_t v4 = (uint64_t *)a2[172];
  *(_OWORD *)(a2 + 171) = 0u;
  a2[173] = 0;
  uint64_t v5 = (uint64_t *)a2[174];
  uint64_t v6 = (uint64_t *)a2[175];
  *((_OWORD *)a2 + 87) = 0u;
  a2[176] = 0;
  uint64_t v7 = (void *)a2[177];
  a2[177] = 0;
  size_t v8 = (_DWORD *)a2[178];
  a2[179] = 0;
  a2[178] = 0;
  while (v3 != v4)
  {
    uint64_t v9 = (llvm::BasicBlock *)*((unsigned int *)v4 - 2);
    v4 -= 2;
    if (v9 >= ((a2[90] - a2[89]) >> 5))
    {
      uint64_t v10 = (_OWORD *)a2[172];
      unint64_t v11 = a2[173];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = a2[171];
        uint64_t v14 = ((uint64_t)v10 - v13) >> 4;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60) {
LABEL_102:
        }
          abort();
        uint64_t v16 = v11 - v13;
        if (v16 >> 3 > v15) {
          unint64_t v15 = v16 >> 3;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (_OWORD *)(v17 + 16 * v14);
        *uint64_t v19 = *(_OWORD *)v4;
        uint64_t v20 = (char *)a2[172];
        uint64_t v21 = (char *)a2[171];
        uint64_t v22 = v19;
        if (v20 != v21)
        {
          do
          {
            *--uint64_t v22 = *((_OWORD *)v20 - 1);
            v20 -= 16;
          }
          while (v20 != v21);
          uint64_t v20 = (char *)a2[171];
        }
        a2[171] = v22;
        char v12 = v19 + 1;
        a2[172] = v19 + 1;
        a2[173] = v17 + 16 * v18;
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        _OWORD *v10 = *(_OWORD *)v4;
        char v12 = v10 + 1;
      }
      a2[172] = v12;
    }
    else
    {
      if (v71)
      {
        *(void *)this = v70;
        if (!v7) {
          goto LABEL_94;
        }
        goto LABEL_93;
      }
      llvm::GlobalVariable::setInitializer(*v4, v70);
    }
  }
  if (v5 == v6)
  {
LABEL_55:
    if (v7 == (void *)v8)
    {
LABEL_88:
      *(void *)this = 0;
      if (!v7) {
        goto LABEL_94;
      }
      goto LABEL_93;
    }
    while (1)
    {
      int v44 = *(v8 - 4);
      if (v44)
      {
        unint64_t v45 = (llvm::BasicBlock *)(v44 - 1);
        if (v45 < ((a2[90] - a2[89]) >> 5))
        {
          FoldedCast = v70;
          if (v71) {
            goto LABEL_90;
          }
          uint64_t v46 = *((void *)v8 - 3);
          llvm::Function::setHungoffOperand<0>(v46, (uint64_t)v70);
          *(_WORD *)(v46 + 18) = *(_WORD *)(v46 + 18) & 0xFFF7 | (8 * (FoldedCast != 0));
          *(v8 - 4) = 0;
        }
      }
      int v47 = *(v8 - 3);
      if (v47)
      {
        unint64_t v48 = (llvm::BasicBlock *)(v47 - 1);
        if (v48 < ((a2[90] - a2[89]) >> 5))
        {
          FoldedCast = v70;
          if (v71) {
            goto LABEL_90;
          }
          uint64_t v49 = *((void *)v8 - 3);
          llvm::Function::setHungoffOperand<1>(v49, (uint64_t)v70);
          int v47 = 0;
          *(_WORD *)(v49 + 18) = *(_WORD *)(v49 + 18) & 0xFFFD | (2 * (FoldedCast != 0));
          *(v8 - 3) = 0;
        }
      }
      unint64_t v50 = v8 - 6;
      int v51 = *(v8 - 2);
      if (v51)
      {
        uint64_t v52 = (llvm::BasicBlock *)(v51 - 1);
        if (v52 >= ((a2[90] - a2[89]) >> 5)) {
          goto LABEL_69;
        }
        FoldedCast = v70;
        if (v71) {
          goto LABEL_90;
        }
        uint64_t v53 = *((void *)v8 - 3);
        llvm::Function::setHungoffOperand<2>(v53, (uint64_t)v70);
        *(_WORD *)(v53 + 18) = *(_WORD *)(v53 + 18) & 0xFFFB | (4 * (FoldedCast != 0));
        *(v8 - 2) = 0;
        int v47 = *(v8 - 3);
      }
      if (*(v8 - 4) | v47)
      {
LABEL_69:
        uint64_t v54 = (void *)a2[178];
        unint64_t v55 = a2[179];
        if ((unint64_t)v54 >= v55)
        {
          long long v58 = (void *)a2[177];
          unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * (v54 - v58) + 1;
          if (v59 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_102;
          }
          unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - (void)v58) >> 3);
          if (2 * v60 > v59) {
            unint64_t v59 = 2 * v60;
          }
          if (v60 >= 0x555555555555555) {
            unint64_t v61 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v61 = v59;
          }
          if (v61)
          {
            if (v61 > 0xAAAAAAAAAAAAAAALL) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            uint64_t v62 = (char *)operator new(24 * v61);
          }
          else
          {
            uint64_t v62 = 0;
          }
          long long v63 = *(_OWORD *)v50;
          unint64_t v64 = &v62[8 * (v54 - v58)];
          *((void *)v64 + 2) = v50[2];
          *(_OWORD *)unint64_t v64 = v63;
          long long v65 = v64;
          if (v54 != v58)
          {
            do
            {
              long long v66 = *(_OWORD *)(v54 - 3);
              *((void *)v65 - 1) = *(v54 - 1);
              *(_OWORD *)(v65 - 24) = v66;
              v65 -= 24;
              v54 -= 3;
            }
            while (v54 != v58);
            uint64_t v54 = (void *)a2[177];
          }
          a2[177] = v65;
          long long v57 = v64 + 24;
          a2[178] = v64 + 24;
          a2[179] = &v62[24 * v61];
          if (v54) {
            operator delete(v54);
          }
        }
        else
        {
          long long v56 = *(_OWORD *)v50;
          _OWORD v54[2] = *((void *)v8 - 1);
          *(_OWORD *)uint64_t v54 = v56;
          long long v57 = v54 + 3;
        }
        a2[178] = v57;
      }
      size_t v8 = v50;
      if (v7 == v50) {
        goto LABEL_88;
      }
    }
  }
  while (1)
  {
    uint64_t v23 = (llvm::BasicBlock *)*((unsigned int *)v6 - 2);
    v6 -= 2;
    if (v23 >= ((a2[90] - a2[89]) >> 5))
    {
      uint64_t v31 = (_OWORD *)a2[175];
      unint64_t v32 = a2[176];
      if ((unint64_t)v31 >= v32)
      {
        uint64_t v34 = a2[174];
        uint64_t v35 = ((uint64_t)v31 - v34) >> 4;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 60) {
          goto LABEL_102;
        }
        uint64_t v37 = v32 - v34;
        if (v37 >> 3 > v36) {
          unint64_t v36 = v37 >> 3;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v38 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38) {
          unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v38);
        }
        else {
          uint64_t v39 = 0;
        }
        unint64_t v40 = (_OWORD *)(v38 + 16 * v35);
        _OWORD *v40 = *(_OWORD *)v6;
        int v41 = (char *)a2[175];
        unint64_t v42 = (char *)a2[174];
        __int16 v43 = v40;
        if (v41 != v42)
        {
          do
          {
            *--__int16 v43 = *((_OWORD *)v41 - 1);
            v41 -= 16;
          }
          while (v41 != v42);
          int v41 = (char *)a2[174];
        }
        a2[174] = v43;
        uint64_t v33 = v40 + 1;
        a2[175] = v40 + 1;
        a2[176] = v38 + 16 * v39;
        if (v41) {
          operator delete(v41);
        }
      }
      else
      {
        *uint64_t v31 = *(_OWORD *)v6;
        uint64_t v33 = v31 + 1;
      }
      a2[175] = v33;
      goto LABEL_54;
    }
    FoldedCast = v70;
    if (v71) {
      break;
    }
    unint64_t v25 = (llvm::PointerType ***)*v6;
    int v26 = *(unsigned __int8 *)(*v6 + 16);
    if (*v6) {
      BOOL v27 = v26 == 1;
    }
    else {
      BOOL v27 = 0;
    }
    if (v27)
    {
      if (*(llvm::PointerType ***)v70 != *v25)
      {
        uint64_t v67 = (const llvm::Twine *)(a2 + 1);
        uint64_t v68 = "Alias and aliasee types don't match";
LABEL_101:
        unint64_t v70 = (llvm::Constant *)v68;
        __int16 v72 = 259;
      }
      llvm::GlobalIFunc::setResolver(*v6, (uint64_t)v70);
    }
    else
    {
      if (!v25 || v26 != 2)
      {
        uint64_t v67 = (const llvm::Twine *)(a2 + 1);
        uint64_t v68 = "Expected an alias or an ifunc";
        goto LABEL_101;
      }
      char v28 = (uint64_t **)llvm::PointerType::get(v25[3], 0);
      char v29 = (llvm::PointerType **)llvm::FunctionType::get(v28, 0, 0, 0);
      uint64_t v30 = (llvm::Constant ****)llvm::PointerType::get(v29, (llvm::Type *)(*((_DWORD *)*v25 + 2) >> 8));
      if (*(llvm::Constant *****)FoldedCast != v30) {
        FoldedCast = getFoldedCast((llvm *)0x31, (void **)FoldedCast, v30, 0);
      }
      llvm::GlobalIFunc::setResolver((uint64_t)v25, (uint64_t)FoldedCast);
    }
LABEL_54:
    if (v5 == v6) {
      goto LABEL_55;
    }
  }
LABEL_90:
  *(void *)this = FoldedCast;
  if (v7) {
LABEL_93:
  }
    operator delete(v7);
LABEL_94:
  if (v5) {
    operator delete(v5);
  }
  if (v3) {
    operator delete(v3);
  }
}

void *llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        void *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = (uint64_t *)v4;
      do
      {
        uint64_t v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          unint64_t v15 = v18;
          *uint64_t v18 = *v13;
          v15[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      void *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

void std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__vdeallocate(void **a1)
{
  unint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::allocator<llvm::BitstreamBlockInfo::BlockInfo>::destroy[abi:nn180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t llvm::Expected<std::optional<llvm::BitstreamBlockInfo>>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    unint64_t v2 = *(void **)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(void *))(*(void *)v2 + 8))(v2);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = (void **)a1;
    std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__destroy_vector::operator()[abi:nn180100](&v4);
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<unsigned int,llvm::AttributeList>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::AttributeList>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::AttributeList>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    int v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    *int v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    *unint64_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

_anonymous_namespace_::BitcodeReaderBase *anonymous namespace'::BitcodeReader::parseAttrKind(_anonymous_namespace_::BitcodeReaderBase *result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v9 = a3;
  int v4 = 75;
  switch(a3)
  {
    case 1:
      break;
    case 2:
      int v4 = 3;
      break;
    case 3:
      int v4 = 70;
      break;
    case 4:
      int v4 = 12;
      break;
    case 5:
      int v4 = 11;
      break;
    case 6:
      int v4 = 14;
      break;
    case 7:
      int v4 = 16;
      break;
    case 8:
      int v4 = 17;
      break;
    case 9:
      int v4 = 18;
      break;
    case 10:
      int v4 = 19;
      break;
    case 11:
      int v4 = 21;
      break;
    case 12:
      int v4 = 23;
      break;
    case 13:
      int v4 = 25;
      break;
    case 14:
      int v4 = 26;
      break;
    case 15:
      int v4 = 37;
      break;
    case 16:
      int v4 = 30;
      break;
    case 17:
      int v4 = 31;
      break;
    case 18:
      int v4 = 36;
      break;
    case 19:
      int v4 = 41;
      break;
    case 20:
      int v4 = 44;
      break;
    case 21:
      int v4 = 45;
      break;
    case 22:
      int v4 = 46;
      break;
    case 23:
      int v4 = 47;
      break;
    case 24:
      int v4 = 48;
      break;
    case 25:
      int v4 = 82;
      break;
    case 26:
      int v4 = 59;
      break;
    case 27:
      int v4 = 60;
      break;
    case 28:
      int v4 = 61;
      break;
    case 29:
      int v4 = 74;
      break;
    case 30:
      int v4 = 50;
      break;
    case 31:
      int v4 = 54;
      break;
    case 32:
      int v4 = 53;
      break;
    case 33:
      int v4 = 83;
      break;
    case 34:
      int v4 = 68;
      break;
    case 35:
      int v4 = 4;
      break;
    case 36:
      int v4 = 5;
      break;
    case 37:
      int v4 = 42;
      break;
    case 38:
      int v4 = 72;
      break;
    case 39:
      int v4 = 38;
      break;
    case 40:
      int v4 = 13;
      break;
    case 41:
      int v4 = 78;
      break;
    case 42:
      int v4 = 79;
      break;
    case 43:
      int v4 = 6;
      break;
    case 44:
      int v4 = 49;
      break;
    case 46:
      int v4 = 65;
      break;
    case 47:
      int v4 = 64;
      break;
    case 48:
      int v4 = 29;
      break;
    case 51:
      int v4 = 77;
      break;
    case 52:
      int v4 = 67;
      break;
    case 53:
      int v4 = 57;
      break;
    case 54:
      int v4 = 62;
      break;
    case 55:
      int v4 = 51;
      break;
    case 56:
      int v4 = 22;
      break;
    case 57:
      int v4 = 40;
      break;
    case 58:
      int v4 = 55;
      break;
    case 59:
      int v4 = 58;
      break;
    case 60:
      int v4 = 10;
      break;
    case 61:
      int v4 = 66;
      break;
    case 62:
      int v4 = 24;
      break;
    case 63:
      int v4 = 34;
      break;
    case 64:
      int v4 = 52;
      break;
    case 65:
      int v4 = 73;
      break;
    case 66:
      int v4 = 27;
      break;
    case 67:
      int v4 = 39;
      break;
    case 68:
      int v4 = 35;
      break;
    case 69:
      int v4 = 69;
      break;
    case 70:
      int v4 = 15;
      break;
    case 71:
      int v4 = 20;
      break;
    case 72:
      int v4 = 9;
      break;
    case 73:
      int v4 = 28;
      break;
    case 74:
      int v4 = 84;
      break;
    case 75:
      int v4 = 63;
      break;
    case 76:
      int v4 = 33;
      break;
    case 77:
      int v4 = 71;
      break;
    case 78:
      int v4 = 7;
      break;
    case 79:
      int v4 = 32;
      break;
    case 80:
      int v4 = 1;
      break;
    case 81:
      int v4 = 2;
      break;
    case 82:
      int v4 = 76;
      break;
    case 83:
      int v4 = 43;
      break;
    case 84:
      int v4 = 8;
      break;
    case 85:
      int v4 = 56;
      break;
    case 86:
      int v4 = 80;
      break;
    case 87:
      int v4 = 81;
      break;
    default:
      *a4 = 0;
      v5[0] = "Unknown attribute kind (";
      void v5[2] = &v9;
      __int16 v6 = 3075;
      v7[0] = v5;
      void v7[2] = ")";
      __int16 v8 = 770;
  }
  *a4 = v4;
  *(void *)uint64_t result = 0;
  return result;
}

unint64_t anonymous namespace'::BitcodeReader::createIdentifiedStructType(void *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v5 = llvm::StructType::create(a2, a3, a4);
  unint64_t v6 = v5;
  int v7 = (unint64_t *)a1[235];
  unint64_t v8 = a1[236];
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = a1[234];
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      abort();
    }
    uint64_t v12 = v8 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(a1 + 236), v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v16 = (unint64_t *)&v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    unint64_t *v16 = v6;
    uint64_t v9 = v16 + 1;
    uint64_t v18 = (char *)a1[235];
    uint64_t v19 = (char *)a1[234];
    if (v18 != v19)
    {
      do
      {
        unint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *--uint64_t v16 = v20;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)a1[234];
    }
    a1[234] = v16;
    a1[235] = v9;
    a1[236] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *int v7 = v5;
    uint64_t v9 = v7 + 1;
  }
  a1[235] = v9;
  return v6;
}

void std::vector<anonymous namespace'::BitcodeReader::FunctionOperandInfo>::push_back[abi:nn180100](char **a1, long long *a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v8) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v13 = (char *)operator new(24 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[24 * v9];
    *(_OWORD *)unint64_t v14 = *a2;
    *((void *)v14 + 2) = *((void *)a2 + 2);
    int v7 = v14 + 24;
    if (v5 != v8)
    {
      do
      {
        long long v15 = *(_OWORD *)(v5 - 24);
        *((void *)v14 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v14 - 24) = v15;
        v14 -= 24;
        v5 -= 24;
      }
      while (v5 != v8);
      unint64_t v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[24 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    *((void *)v5 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v5 = v6;
    int v7 = v5 + 24;
  }
  a1[1] = v7;
}

uint64_t getDecodedLinkage(int a1)
{
  if ((a1 - 1) > 0x12) {
    return 0;
  }
  else {
    return dword_261E91278[a1 - 1];
  }
}

uint64_t inferDSOLocal(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 32);
  if ((v2 & 0xFu) - 7 < 2) {
    goto LABEL_5;
  }
  if ((v2 & 0x30) != 0)
  {
    uint64_t result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)result);
    if ((result & 1) == 0)
    {
      int v2 = *(_DWORD *)(v1 + 32);
LABEL_5:
      *(_DWORD *)(v1 + 32) = v2 | 0x4000;
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>,llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>::try_emplace<llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v12 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  int v7 = v12;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (result)
  {
    char v9 = 0;
    goto LABEL_8;
  }
  int v10 = *(_DWORD *)(a2 + 8);
  if (4 * v10 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_10;
  }
  if (v8 + ~v10 - *(_DWORD *)(a2 + 12) <= v8 >> 3)
  {
LABEL_10:
    llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::grow(a2, v8);
    unint64_t v12 = 0;
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
    int v7 = v12;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v7 != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *int v7 = *a3;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  char v9 = 1;
LABEL_8:
  uint64_t v11 = *(void *)a2 + 8 * v8;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v9;
  return result;
}

uint64_t std::function<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()(unsigned int)>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a2;
  int v4 = a3;
  if (!a1)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x261D735A0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(void *)a1 + 48))(a1, &v5, &v4);
}

void std::__function::__func<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0,std::allocator<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0>,llvm::Type * ()(unsigned int)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0,std::allocator<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0>,llvm::Type * ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_270DC1880;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0,std::allocator<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0>,llvm::Type * ()(unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270DC1880;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0,std::allocator<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0>,llvm::Type * ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
}

void std::__function::__func<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1,std::allocator<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1>,unsigned int ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1,std::allocator<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_270DC18C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1,std::allocator<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270DC18C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1,std::allocator<anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1>,unsigned int ()(unsigned int,unsigned int)>::operator()(uint64_t a1, int *a2, unsigned int *a3)
{
}

void *std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<llvm::Type * ()(unsigned int)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char **llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    int v4 = v2 - 24;
    uint64_t v5 = 32 * v3;
    do
    {
      int v7 = (void **)&v4[v5];
      std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v7);
      v5 -= 32;
    }
    while (v5);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void std::__function::__func<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0,std::allocator<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0>,llvm::Type * ()(unsigned int)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0,std::allocator<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0>,llvm::Type * ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_270DC1910;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0,std::allocator<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0>,llvm::Type * ()(unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270DC1910;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0,std::allocator<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0>,llvm::Type * ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
}

void std::__function::__func<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1,std::allocator<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1>,unsigned int ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1,std::allocator<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_270DC1958;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1,std::allocator<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270DC1958;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1,std::allocator<anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1>,unsigned int ()(unsigned int,unsigned int)>::operator()(uint64_t a1, int *a2, unsigned int *a3)
{
}

uint64_t std::__function::__value_func<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()(unsigned int)>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<llvm::Type * ()(unsigned int)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<std::optional<std::string> ()(llvm::StringRef,llvm::StringRef)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()(unsigned int)>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t _GLOBAL__sub_I_BitcodeReader_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_29, 0, 0);
  byte_26B41C350 = 0;
  qword_26B41C358 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41C360 = 0;
  _MergedGlobals_29 = (uint64_t)&unk_270DBC910;
  qword_26B41C368 = (uint64_t)&unk_270DBC658;
  qword_26B41C370 = (uint64_t)&unk_270DBC998;
  qword_26B41C388 = (uint64_t)&qword_26B41C370;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"print-summary-global-ids", 0x18uLL);
  byte_26B41C350 = 0;
  word_26B41C360 = 256;
  word_26B41C2DA = word_26B41C2DA & 0xFF9F | 0x20;
  qword_26B41C2F0 = (uint64_t)"Print the global id for each value when reading the module summary";
  unk_26B41C2F8 = 66;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_29);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_29, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B41C390, 0, 0);
  byte_26B41C410 = 0;
  qword_26B41C418 = (uint64_t)&unk_270DBC978;
  unk_26B41C420 = 0;
  qword_26B41C390 = (uint64_t)&unk_270DBC910;
  qword_26B41C428 = (uint64_t)&unk_270DBC658;
  qword_26B41C430 = (uint64_t)&unk_270DBC998;
  qword_26B41C448 = (uint64_t)&qword_26B41C430;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41C390, (uint64_t *)"expand-constant-exprs", 0x15uLL);
  word_26B41C39A = word_26B41C39A & 0xFF9F | 0x20;
  qword_26B41C3B0 = (uint64_t)"Expand constant expressions to instructions for testing purposes";
  unk_26B41C3B8 = 64;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41C390);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_26B41C390, &dword_261C2B000);
}

uint64_t llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataStrings(llvm::Twine *a1, int *a2, uint64_t a3, const char *a4, unint64_t a5, uint64_t (*a6)(uint64_t, const char *, unint64_t), uint64_t a7)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a3 != 2)
  {
    uint64_t v11 = "Invalid record: metadata strings layout";
    goto LABEL_7;
  }
  int v8 = *a2;
  if (!*a2)
  {
    uint64_t v11 = "Invalid record: metadata strings with no strings";
    goto LABEL_7;
  }
  unint64_t v9 = a2[2];
  unint64_t v10 = a5 - v9;
  if (a5 < v9)
  {
    uint64_t v11 = "Invalid record: metadata strings corrupt offset";
LABEL_7:
    unint64_t v20 = v11;
    LOWORD(v24) = 259;
    goto LABEL_8;
  }
  unint64_t v20 = a4;
  unint64_t v21 = v9;
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  unint64_t v14 = &a4[v9];
  int v24 = 0;
  do
  {
    if (!v24 && v21 <= v22)
    {
      uint64_t v19 = "Invalid record: metadata strings bad length";
LABEL_22:
      unint64_t v25 = v19;
      __int16 v27 = 259;
LABEL_8:
      error(a1);
    }
    uint64_t result = llvm::SimpleBitstreamCursor::ReadVBR((llvm::SimpleBitstreamCursor *)&v20, 6u, (uint64_t)&v25);
    if (v26)
    {
      uint64_t v17 = v25;
      *(void *)a1 = v25;
      if (v17) {
        return result;
      }
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v25;
      *(void *)a1 = 0;
    }
    BOOL v18 = v10 >= v16;
    v10 -= v16;
    if (!v18)
    {
      uint64_t v19 = "Invalid record: metadata strings truncated chars";
      goto LABEL_22;
    }
    uint64_t result = a6(a7, v14, v16);
    v14 += v16;
    --v8;
  }
  while (v8);
  *(void *)a1 = 0;
  return result;
}

llvm::MDNode *anonymous namespace'::BitcodeReaderMetadataList::getMDNodeFwdRefOrNull(_anonymous_namespace_::BitcodeReaderMetadataList *this, unsigned int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (llvm::MDNode::classof(result)) {
      return v3;
    }
    else {
      return 0;
    }
  }
  return result;
}

void llvm::MetadataLoader::MetadataLoaderImpl::loadGlobalDeclAttachments(llvm::MetadataLoader::MetadataLoaderImpl *this, uint64_t a2)
{
  v38[34] = *MEMORY[0x263EF8340];
  if (!*(void *)(a2 + 720))
  {
    *((unsigned char *)this + 8) &= ~1u;
    *(unsigned char *)this = 1;
    return;
  }
  uint64_t v5 = *(long long **)(a2 + 200);
  long long v7 = *v5;
  long long v6 = v5[1];
  uint64_t v35 = *((void *)v5 + 4);
  long long v33 = v7;
  long long v34 = v6;
  HIDWORD(v35) = *((_DWORD *)v5 + 9);
  memset(v36, 0, sizeof(v36));
  std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__init_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>((char *)v36, *((void **)v5 + 5), *((void **)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 4);
  v37[0] = (char *)v38;
  v37[1] = (char *)0x800000000;
  if (*((_DWORD *)v5 + 18)) {
    llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=((uint64_t)v37, (uint64_t)(v5 + 4));
  }
  v38[32] = *((void *)v5 + 42);
  uint64_t v30 = v32;
  uint64_t v31 = 0x4000000000;
  llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)&v33, *(void *)(a2 + 720), &v27);
  int v8 = v27;
  if (!v27)
  {
    int v10 = *((unsigned __int8 *)this + 8);
    while (1)
    {
      llvm::BitstreamCursor::advanceSkippingSubblocks((llvm::BitstreamCursor *)&v33, 1, (uint64_t)&v27);
      if (v28)
      {
        int v8 = v27;
        if (v27)
        {
          char v9 = v10 | 1;
          goto LABEL_6;
        }
      }
      else
      {
        int v2 = (int)v27;
        LODWORD(v5) = HIDWORD(v27);
      }
      switch(v2)
      {
        case 2:
          goto LABEL_44;
        case 1:
          *((unsigned char *)this + 8) = v10 & 0xFE;
          *(unsigned char *)this = 1;
          goto LABEL_7;
        case 0:
LABEL_44:
          __int16 v27 = "Malformed block";
          __int16 v29 = 259;
          error((const llvm::Twine *)&v24);
      }
      uint64_t v11 = v34;
      uint64_t v12 = v35;
      llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)&v33, (int)v5, (uint64_t)&v25);
      if (v26) {
        break;
      }
      if (v25 == 36)
      {
        llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)&v33, 8 * v11 - v12, &v27);
        uint64_t v13 = v27;
        if (v27) {
          goto LABEL_22;
        }
        LODWORD(v31) = 0;
        llvm::BitstreamCursor::readRecord((llvm::SimpleBitstreamCursor *)&v33, (int)v5, (unsigned int *)&v30, 0, (uint64_t)&v27);
        if (v28)
        {
          char v14 = 0;
          uint64_t v13 = v27;
          goto LABEL_24;
        }
        if ((v31 & 1) == 0)
        {
          __int16 v27 = "Invalid record";
          __int16 v29 = 259;
          error((const llvm::Twine *)&v23);
        }
        uint64_t v16 = **(void **)(a2 + 192);
        if (((unint64_t)(*(void *)(*(void *)(a2 + 192) + 8) - v16) >> 5) <= *(void *)v30)
        {
          __int16 v27 = "Invalid record";
          __int16 v29 = 259;
          error((const llvm::Twine *)&v22);
        }
        uint64_t v17 = *(unsigned __int8 **)(v16 + 32 * *(void *)v30 + 16);
        unsigned int v18 = v17[16];
        if (v18 <= 3 && v18 != 1)
        {
          uint64_t v20 = v34;
          uint64_t v21 = v35;
          llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment((uint64_t)&v27, a2, (llvm::Value *)v17, (uint64_t)v30 + 8, v31 - 1);
          uint64_t v13 = v27;
          if (v27 || (llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)&v33, 8 * v20 - v21, &v27), (uint64_t v13 = v27) != 0))
          {
LABEL_22:
            char v14 = 0;
LABEL_24:
            v10 |= 1u;
            *((unsigned char *)this + 8) = v10;
            *(void *)this = v13;
            goto LABEL_26;
          }
        }
        char v14 = 1;
      }
      else
      {
        char v14 = 0;
        v10 &= ~1u;
        *((unsigned char *)this + 8) = v10;
        *(unsigned char *)this = 1;
      }
LABEL_26:
      if (v26)
      {
        long long v15 = v25;
        unint64_t v25 = 0;
        if (v15) {
          (*(void (**)(const char *))(*(void *)v15 + 8))(v15);
        }
      }
      if ((v14 & 1) == 0) {
        goto LABEL_7;
      }
    }
    char v14 = 0;
    uint64_t v13 = v25;
    unint64_t v25 = 0;
    goto LABEL_24;
  }
  char v9 = *((unsigned char *)this + 8) | 1;
LABEL_6:
  *((unsigned char *)this + 8) = v9;
  *(void *)this = v8;
LABEL_7:
  if (v30 != v32) {
    free(v30);
  }
  llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector(v37);
  uint64_t v30 = v36;
  std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v30);
}

uint64_t llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment(uint64_t result, uint64_t a2, llvm::Value *a3, uint64_t a4, int a5)
{
  long long v6 = (const llvm::Twine *)result;
  if (a5)
  {
    unsigned int v10 = 0;
    uint64_t v11 = (uint64_t *)(a2 + 1016);
    while (1)
    {
      int v18 = *(void *)(a4 + 8 * v10);
      uint64_t v16 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>(v11, &v18, &v16))break; {
      uint64_t v12 = v16;
      }
      if (v16 == (const char *)(*(void *)(a2 + 1016) + 8 * *(unsigned int *)(a2 + 1032))) {
        break;
      }
      MetadataFwdRefOrLoad = llvm::MetadataLoader::MetadataLoaderImpl::getMetadataFwdRefOrLoad((llvm::MetadataLoader::MetadataLoaderImpl *)a2, *(void *)(a4 + 8 * (v10 + 1)));
      if (!MetadataFwdRefOrLoad || (char v14 = MetadataFwdRefOrLoad, (llvm::MDNode::classof(MetadataFwdRefOrLoad) & 1) == 0))
      {
        long long v15 = "Invalid metadata attachment: expect fwd ref to MDNode";
        goto LABEL_11;
      }
      uint64_t result = llvm::Value::addMetadata(a3, *((_DWORD *)v12 + 1), v14);
      v10 += 2;
      if (a5 == v10) {
        goto LABEL_8;
      }
    }
    long long v15 = "Invalid ID";
LABEL_11:
    uint64_t v16 = v15;
    __int16 v17 = 259;
    error(v6);
  }
LABEL_8:
  *(void *)long long v6 = 0;
  return result;
}

void *llvm::MetadataLoader::MetadataLoaderImpl::callMDTypeCallback(void *result, uint64_t a2, int a3)
{
  void v12[4] = *MEMORY[0x263EF8340];
  if (*((unsigned char *)result + 320))
  {
    uint64_t v5 = result;
    std::__function::__value_func<llvm::Type * ()>::__value_func[abi:nn180100]((uint64_t)v12, (uint64_t)(result + 28));
    std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::__value_func[abi:nn180100]((uint64_t)v11, (uint64_t)(v5 + 32));
    uint64_t v6 = v5[39];
    uint64_t v10 = a2;
    int v9 = a3;
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t *, int *, void *, void *))(*(void *)v6 + 48))(v6, &v10, &v9, v12, v11);
      std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::~__value_func[abi:nn180100](v11);
      return std::__function::__value_func<llvm::Type * ()>::~__value_func[abi:nn180100](v12);
    }
    else
    {
      long long v7 = (llvm::MetadataLoader::MetadataLoaderImpl *)std::__throw_bad_function_call[abi:nn180100]();
      return (void *)llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(v7, v8);
    }
  }
  return result;
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(llvm::MetadataLoader::MetadataLoaderImpl *this@<X0>, int a2@<W1>, const llvm::Twine *a3@<X8>)
{
  int v5 = a2;
  uint64_t v76 = *MEMORY[0x263EF8340];
  if ((a2 & 1) == 0 && *((_DWORD *)this + 6) >= 2u)
  {
    __int16 v72 = "Invalid metadata: fwd refs into function blocks";
    __int16 v75 = 259;
    error(a3);
  }
  uint64_t v8 = *((void *)this + 25);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = *(unsigned int *)(v8 + 32);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)v8, 0, 15, (void ***)a3);
  if (*(void *)a3) {
    return;
  }
  unint64_t v64 = v66;
  uint64_t v65 = 0x4000000000;
  memset(v60, 0, sizeof(v60));
  if (!v5 || !*((unsigned char *)this + 1044) || *((_DWORD *)this + 2) || byte_26B41C590) {
    goto LABEL_96;
  }
  unint64_t v56 = 8 * v9 - v10;
  uint64_t v11 = *((void *)this + 25);
  LODWORD(v10) = this + 328;
  int v12 = *(_DWORD *)(v11 + 32);
  long long v13 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)((char *)this + 328) = *(_OWORD *)v11;
  *(_OWORD *)((char *)this + 344) = v13;
  *((_DWORD *)this + 90) = v12;
  *((_DWORD *)this + 91) = *(_DWORD *)(v11 + 36);
  if ((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328) != (llvm::MetadataLoader::MetadataLoaderImpl *)v11) {
    std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__assign_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>((uint64_t *)this + 46, *(uint64_t **)(v11 + 40), *(uint64_t **)(v11 + 48), (uint64_t)(*(void *)(v11 + 48) - *(void *)(v11 + 40)) >> 4);
  }
  llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=((uint64_t)this + 392, v11 + 64);
  int v58 = 0;
  *((void *)this + 83) = *(void *)(v11 + 336);
  __int16 v72 = v74;
  unint64_t v73 = 0x4000000000;
  *((void *)this + 90) = 0;
  long long v57 = (void **)((char *)this + 696);
  while (2)
  {
    while (2)
    {
      uint64_t v14 = *((void *)this + 43);
      uint64_t v15 = *((unsigned int *)this + 90);
      llvm::BitstreamCursor::advanceSkippingSubblocks((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), 1, (uint64_t)&v69);
      if (v70)
      {
        uint64_t v16 = (llvm::MDNode *)v69;
        if (v69) {
          goto LABEL_81;
        }
      }
      else
      {
        int v4 = (int)v69;
        int v3 = HIDWORD(v69);
      }
      switch(v4)
      {
        case 0:
        case 2:
          __int16 v43 = "Malformed block";
          goto LABEL_76;
        case 1:
          int v5 = v58 & 0xFE;
          char v63 = v58 & 0xFE;
          LOBYTE(v62) = 1;
          goto LABEL_82;
        case 3:
          uint64_t v17 = *((void *)this + 43);
          uint64_t v18 = *((unsigned int *)this + 90);
          llvm::BitstreamCursor::skipRecord((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), v3, (uint64_t)&v69);
          if (v70)
          {
            uint64_t v16 = (llvm::MDNode *)v69;
            int v4 = 3;
            if (v69) {
              goto LABEL_81;
            }
            continue;
          }
          break;
        default:
          continue;
      }
      break;
    }
    int v4 = 3;
    unint64_t v19 = 8 * v17 - v18;
    switch((int)v69)
    {
      case 1:
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 37:
      case 40:
      case 41:
      case 44:
      case 45:
      case 47:
        *((void *)this + 85) = *((void *)this + 84);
        *((void *)this + 88) = *((void *)this + 87);
        int v5 = v58 & 0xFE;
        char v63 = v58 & 0xFE;
        LOBYTE(v62) = 0;
        goto LABEL_82;
      case 4:
        llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)this + 328, v19, &v69);
        uint64_t v16 = (llvm::MDNode *)v69;
        if (v69) {
          goto LABEL_81;
        }
        LODWORD(v73) = 0;
        llvm::BitstreamCursor::readRecord((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), v3, (unsigned int *)&v72, 0, (uint64_t)&v69);
        if (v70) {
          goto LABEL_78;
        }
        long long v69 = v71;
        long long v70 = xmmword_261E8A740;
        llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v69, (char *)v72, (char *)v72 + 8 * v73);
        llvm::BitstreamCursor::ReadCode((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), (uint64_t)&MDNodeFwdRefOrNull);
        if ((v68 & 1) != 0
          || (LODWORD(v73) = 0,
              llvm::BitstreamCursor::readRecord((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), (int)MDNodeFwdRefOrNull, (unsigned int *)&v72, 0, (uint64_t)&MDNodeFwdRefOrNull), (v68 & 1) != 0))
        {
          char v25 = 0;
          v58 |= 1u;
          uint64_t v62 = MDNodeFwdRefOrNull;
        }
        else
        {
          uint64_t v20 = v73;
          unint64_t inserted = llvm::Module::getOrInsertNamedMetadata(*((void *)this + 27), (uint64_t *)v69, v70);
          if (v20)
          {
            unint64_t v22 = inserted;
            uint64_t v23 = 0;
            uint64_t v24 = 8 * v20;
            do
            {
              llvm::SmallVectorImpl<llvm::TrackingMDRef>::emplace_back<llvm::MDNode *&>(*(void *)(v22 + 48), (uint64_t *)&MDNodeFwdRefOrNull);
              v23 += 8;
            }
            while (v24 != v23);
          }
          char v25 = 1;
        }
        if (v69 != v71) {
          free(v69);
        }
        int v4 = 3;
        if ((v25 & 1) == 0) {
          goto LABEL_73;
        }
        continue;
      case 35:
        llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)this + 328, v19, &v69);
        uint64_t v16 = (llvm::MDNode *)v69;
        if (v69) {
          goto LABEL_81;
        }
        *(void *)&long long v70 = 0;
        long long v69 = 0;
        LODWORD(v73) = 0;
        llvm::BitstreamCursor::readRecord((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), v3, (unsigned int *)&v72, (unsigned __int8 **)&v69, (uint64_t)&MDNodeFwdRefOrNull);
        if ((v68 & 1) == 0)
        {
          std::vector<llvm::StringRef>::reserve((void **)this + 84, *(unsigned int *)v72);
          MDNodeFwdRefOrNull = this;
          llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataStrings((llvm::Twine *)&v61, (int *)v72, v73, (const char *)v69, v70, (uint64_t (*)(uint64_t, const char *, unint64_t))llvm::function_ref<void ()(llvm::StringRef)>::callback_fn<llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadModuleMetadataBlock(void)::$_0>, (uint64_t)&MDNodeFwdRefOrNull);
          uint64_t v16 = v61;
          if (v61) {
            goto LABEL_81;
          }
          continue;
        }
        uint64_t v16 = MDNodeFwdRefOrNull;
LABEL_81:
        int v5 = v58 | 1;
        char v63 = v58 | 1;
        uint64_t v62 = v16;
LABEL_82:
        if (v72 != v74) {
          free(v72);
        }
        if (v5) {
          goto LABEL_112;
        }
        if (!(_BYTE)v62)
        {
LABEL_96:
          LODWORD(MDNodeFwdRefOrNull) = *((_DWORD *)this + 2);
          while (1)
          {
            llvm::BitstreamCursor::advanceSkippingSubblocks(*((llvm::BitstreamCursor **)this + 25), 0, (uint64_t)&v72);
            if (v73)
            {
              unint64_t v48 = v72;
              *(void *)a3 = v72;
              if (v48) {
                goto LABEL_116;
              }
            }
            else
            {
              LODWORD(v10) = v72;
              int v5 = HIDWORD(v72);
              *(void *)a3 = 0;
            }
            switch(v10)
            {
              case 2:
LABEL_109:
                __int16 v72 = "Malformed block";
                __int16 v75 = 259;
                error(a3);
              case 1:
                llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders((unint64_t)this, (uint64_t)v60);
                llvm::MetadataLoader::MetadataLoaderImpl::upgradeCUSubprograms(this, v51, v52, v53);
                llvm::MetadataLoader::MetadataLoaderImpl::upgradeCUVariables(this);
                *(void *)a3 = 0;
                goto LABEL_116;
              case 0:
                goto LABEL_109;
            }
            LODWORD(v65) = 0;
            unint64_t v73 = 0;
            __int16 v72 = 0;
            llvm::BitstreamCursor::readRecord(*((llvm::SimpleBitstreamCursor **)this + 25), v5, (unsigned int *)&v64, (unsigned __int8 **)&v72, (uint64_t)&v69);
            if (v70) {
              break;
            }
            llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata(a3, (unint64_t)this, (unsigned int **)&v64, (int)v69, (llvm::MetadataLoader::MetadataLoaderImpl *)v60, (const char *)v72, v73, (llvm::MetadataLoader::MetadataLoaderImpl *)&MDNodeFwdRefOrNull);
            uint64_t v49 = *(void *)a3;
            if (v70)
            {
              unint64_t v50 = v69;
              long long v69 = 0;
              if (v50) {
                (*(void (**)(void *))(*(void *)v50 + 8))(v50);
              }
            }
            if (v49) {
              goto LABEL_116;
            }
          }
          *(void *)a3 = v69;
          goto LABEL_116;
        }
        llvm::SmallVectorImpl<llvm::TrackingMDRef>::resizeImpl<false>((unint64_t)this, ((*((void *)this + 88) - *((void *)this + 87)) >> 3)+ ((*((void *)this + 85) - *((void *)this + 84)) >> 4));
        llvm::MetadataLoader::MetadataLoaderImpl::loadGlobalDeclAttachments((llvm::MetadataLoader::MetadataLoaderImpl *)&v72, (uint64_t)this);
        llvm::Expected<BOOL>::moveAssign<BOOL>(&v62, &v72);
        if (v73)
        {
          int v44 = v72;
          __int16 v72 = 0;
          if (v44) {
            (*(void (**)(void *))(*(void *)v44 + 8))(v44);
          }
        }
        if (v63)
        {
LABEL_112:
          uint64_t v54 = v62;
          uint64_t v62 = 0;
          *(void *)a3 = v54;
          goto LABEL_113;
        }
        llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders((unint64_t)this, (uint64_t)v60);
        llvm::MetadataLoader::MetadataLoaderImpl::upgradeCUSubprograms(this, v45, v46, v47);
        llvm::MetadataLoader::MetadataLoaderImpl::upgradeCUVariables(this);
        llvm::BitstreamCursor::ReadBlockEnd(*((llvm::BitstreamCursor **)this + 25));
        llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)this + 328, v56, a3);
        if (!*(void *)a3)
        {
          llvm::BitstreamCursor::SkipBlock(*((llvm::BitstreamCursor **)this + 25), (uint64_t *)&v72);
          if (v72)
          {
            unint64_t v59 = v72;
            __int16 v72 = 0;
            llvm::consumeError((uint64_t *)&v59);
            if (v59) {
              (*(void (**)(void *))(*(void *)v59 + 8))(v59);
            }
            *(void *)a3 = 0;
            if (v72) {
              (*(void (**)(void *))(*(void *)v72 + 8))(v72);
            }
          }
          else
          {
            *(void *)a3 = 0;
          }
        }
LABEL_113:
        if (v63)
        {
          unint64_t v55 = v62;
          uint64_t v62 = 0;
          if (v55) {
            (*(void (**)(llvm::MDNode *))(*(void *)v55 + 8))(v55);
          }
        }
LABEL_116:
        std::deque<llvm::DistinctMDOperandPlaceholder>::~deque[abi:nn180100]((uint64_t)v60);
        if (v64 != v66) {
          free(v64);
        }
        return;
      case 36:
        if (!*((void *)this + 90)) {
          *((void *)this + 90) = 8 * v14 - v15;
        }
        continue;
      case 38:
        llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)this + 328, v19, &v69);
        uint64_t v16 = (llvm::MDNode *)v69;
        if (v69) {
          goto LABEL_81;
        }
        LODWORD(v73) = 0;
        llvm::BitstreamCursor::readRecord((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), v3, (unsigned int *)&v72, 0, (uint64_t)&v69);
        if (v70)
        {
LABEL_78:
          uint64_t v16 = (llvm::MDNode *)v69;
          goto LABEL_81;
        }
        if (v73 != 2)
        {
          __int16 v43 = "Invalid record";
LABEL_76:
          long long v69 = v43;
          v71[4] = 259;
          error((const llvm::Twine *)&v62);
        }
        uint64_t v26 = 8 * *((void *)this + 43) - *((unsigned int *)this + 90);
        llvm::SimpleBitstreamCursor::JumpToBit((uint64_t)this + 328, *(void *)v72 + (*((void *)v72 + 1) << 32) + v26, &v69);
        uint64_t v16 = (llvm::MDNode *)v69;
        if (v69) {
          goto LABEL_81;
        }
        llvm::BitstreamCursor::advanceSkippingSubblocks((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), 1, (uint64_t)&v69);
        if (v70)
        {
          char v40 = 0;
          int v41 = (llvm::MDNode *)v69;
          long long v69 = 0;
LABEL_68:
          v58 |= 1u;
          uint64_t v62 = v41;
          goto LABEL_69;
        }
        int v4 = (int)v69;
        int v3 = HIDWORD(v69);
        LODWORD(v73) = 0;
        llvm::BitstreamCursor::readRecord((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), SHIDWORD(v69), (unsigned int *)&v72, 0, (uint64_t)&MDNodeFwdRefOrNull);
        if (v68)
        {
          char v40 = 0;
          int v41 = MDNodeFwdRefOrNull;
          goto LABEL_68;
        }
        std::vector<llvm::orc::ExecutorAddr>::reserve(v57, v73);
        if (v73)
        {
          __int16 v27 = (char *)v72;
          char v28 = (char *)v72 + 8 * v73;
          __int16 v29 = (uint64_t *)*((void *)this + 88);
          uint64_t v30 = (void *)((char *)this + 712);
          do
          {
            v26 += *(void *)v27;
            if ((unint64_t)v29 >= *v30)
            {
              unint64_t v32 = (uint64_t *)*v57;
              uint64_t v33 = ((char *)v29 - (unsigned char *)*v57) >> 3;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 61) {
                abort();
              }
              uint64_t v35 = *v30 - (void)v32;
              if (v35 >> 2 > v34) {
                unint64_t v34 = v35 >> 2;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36)
              {
                uint64_t v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)v30, v36);
                __int16 v29 = (uint64_t *)*((void *)this + 88);
                unint64_t v32 = (uint64_t *)*((void *)this + 87);
              }
              else
              {
                uint64_t v37 = 0;
              }
              unint64_t v38 = (uint64_t *)&v37[8 * v33];
              *unint64_t v38 = v26;
              uint64_t v31 = v38 + 1;
              while (v29 != v32)
              {
                uint64_t v39 = *--v29;
                *--unint64_t v38 = v39;
              }
              *((void *)this + 87) = v38;
              *((void *)this + 88) = v31;
              *((void *)this + 89) = &v37[8 * v36];
              if (v32) {
                operator delete(v32);
              }
              uint64_t v30 = (void *)((char *)this + 712);
            }
            else
            {
              *__int16 v29 = v26;
              uint64_t v31 = v29 + 1;
            }
            *((void *)this + 88) = v31;
            v27 += 8;
            __int16 v29 = v31;
          }
          while (v27 != v28);
        }
        char v40 = 1;
LABEL_69:
        if (v70)
        {
          unint64_t v42 = v69;
          long long v69 = 0;
          if (v42) {
            (*(void (**)(void *))(*(void *)v42 + 8))(v42);
          }
        }
        if ((v40 & 1) == 0)
        {
LABEL_73:
          int v5 = v58;
          char v63 = v58;
          goto LABEL_82;
        }
        continue;
      case 39:
        __int16 v43 = "Corrupted Metadata block";
        goto LABEL_76;
      default:
        continue;
    }
  }
}

uint64_t llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders(unint64_t a1, uint64_t a2)
{
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  unsigned int v111 = 0;
  int v4 = (_DWORD *)(a1 + 24);
  while (1)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    if (*(void *)(a2 + 16) != v5)
    {
      unint64_t v6 = *(void *)(a2 + 32);
      long long v7 = (void *)(v5 + 8 * (v6 >> 8));
      uint64_t v8 = *v7 + 16 * v6;
      uint64_t v9 = *(void *)(v5 + (((*(void *)(a2 + 40) + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*(unsigned char *)(a2 + 40) + v6);
      while (v8 != v9)
      {
        uint64_t v10 = *(unsigned int *)(v8 + 4);
        int v112 = v10;
        if (*(_DWORD *)(a1 + 8) <= v10
          || (uint64_t v11 = *(void *)(*(void *)a1 + 8 * v10)) == 0
          || llvm::MDNode::classof(*(unsigned char **)(*(void *)a1 + 8 * v10))
          && (*(unsigned char *)(v11 + 1) & 0x7F) == 2)
        {
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v109, &v112, (uint64_t)v113);
        }
        v8 += 16;
        if (v8 - *v7 == 4096)
        {
          uint64_t v12 = v7[1];
          ++v7;
          uint64_t v8 = v12;
        }
      }
    }
    if (!v110) {
      break;
    }
    if (v111)
    {
      uint64_t v13 = 4 * v111;
      uint64_t v14 = v109;
      while (*v14 >= 0xFFFFFFFE)
      {
        ++v14;
        v13 -= 4;
        if (!v13) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      uint64_t v14 = v109;
    }
    uint64_t v15 = &v109[v111];
    if (v14 != v15)
    {
      unsigned int v16 = *v14;
LABEL_23:
      llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata(a1, v16, (llvm::MetadataLoader::MetadataLoaderImpl *)a2);
      while (++v14 != v15)
      {
        unsigned int v16 = *v14;
        if (*v14 < 0xFFFFFFFE)
        {
          if (v14 != v15) {
            goto LABEL_23;
          }
          break;
        }
      }
    }
LABEL_27:
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::clear(&v109);
    if (*v4 >= 2u)
    {
      do
      {
        uint64_t v17 = llvm::detail::DenseSetImpl<unsigned int,llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,llvm::DenseMapInfo<unsigned int,void>>::begin(v4);
        llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata(a1, *v17, (llvm::MetadataLoader::MetadataLoaderImpl *)a2);
      }
      while (*(_DWORD *)(a1 + 24) > 1u);
    }
  }
  if (*v4 > 1u) {
    goto LABEL_27;
  }
  unsigned int v18 = *(_DWORD *)(a1 + 120);
  if (v18 > 1)
  {
    if (v18)
    {
      unint64_t v22 = (uint64_t *)(a1 + 128);
      uint64_t v24 = (uint64_t *)(a1 + 144);
    }
    else
    {
      unint64_t v22 = *(uint64_t **)(a1 + 128);
      uint64_t v23 = *(unsigned int *)(a1 + 136);
      uint64_t v24 = &v22[2 * v23];
      if (!v23)
      {
        uint64_t v20 = *(uint64_t **)(a1 + 128);
LABEL_46:
        char v25 = &v22[2 * v23];
        goto LABEL_47;
      }
    }
    uint64_t v20 = v22;
    while ((*v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v20 += 2;
      if (v20 == v24)
      {
        uint64_t v20 = v24;
        break;
      }
    }
    if (v18) {
      goto LABEL_42;
    }
LABEL_45:
    unint64_t v22 = *(uint64_t **)(a1 + 128);
    LODWORD(v23) = *(_DWORD *)(a1 + 136);
    goto LABEL_46;
  }
  if (v18)
  {
    unint64_t v19 = a1 + 128;
    uint64_t v20 = (uint64_t *)(a1 + 144);
    uint64_t v21 = 1;
  }
  else
  {
    unint64_t v19 = *(void *)(a1 + 128);
    uint64_t v21 = *(unsigned int *)(a1 + 136);
    uint64_t v20 = (uint64_t *)(v19 + 16 * v21);
  }
  uint64_t v24 = (uint64_t *)(v19 + 16 * v21);
  if (!v18) {
    goto LABEL_45;
  }
LABEL_42:
  char v25 = (uint64_t *)(a1 + 144);
LABEL_47:
  if (v20 != v25)
  {
    do
    {
      v113[0] = 0;
      if ((llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(a1 + 96, *v20, v113) & 1) == 0)
      {
        uint64_t v26 = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::InsertIntoBucketImpl<llvm::MDString *>((_DWORD *)(a1 + 96), v20, v113[0]);
        *uint64_t v26 = *v20;
        v26[1] = v20[1];
      }
      __int16 v27 = v20 + 2;
      uint64_t v20 = v24;
      if (v27 != v24)
      {
        uint64_t v20 = v27;
        while ((*v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v20 += 2;
          if (v20 == v24)
          {
            uint64_t v20 = v24;
            break;
          }
        }
      }
    }
    while (v20 != v25);
    unsigned int v18 = *(_DWORD *)(a1 + 120);
  }
  if (v18 > 1 || *(_DWORD *)(a1 + 124))
  {
    if ((v18 & 1) == 0)
    {
      uint64_t v28 = *(unsigned int *)(a1 + 136);
      if (((2 * v18) & 0xFFFFFFFC) < v28 && v28 >= 0x41)
      {
        if (v18 < 2)
        {
          __int16 v29 = (void *)(a1 + 128);
          MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
          goto LABEL_64;
        }
        unsigned int v75 = (v18 >> 1) - 1;
        unsigned int v76 = 1 << (33 - __clz(v75));
        if (v75 >= 0x10) {
          uint64_t v77 = v76;
        }
        else {
          uint64_t v77 = 64;
        }
        if (v77 == v28)
        {
          *(void *)(a1 + 120) = 0;
          uint64_t v78 = 16 * v28;
          uint64_t v79 = *(void **)(a1 + 128);
          do
          {
            void *v79 = -4096;
            v79 += 2;
            v78 -= 16;
          }
          while (v78);
          goto LABEL_74;
        }
        __int16 v29 = (void *)(a1 + 128);
        MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
        if (v77 <= 1)
        {
LABEL_64:
          *(void *)(a1 + 120) = 1;
        }
        else
        {
          *(_DWORD *)(a1 + 120) &= ~1u;
          uint64_t v89 = operator new(16 * v77, (std::align_val_t)8uLL);
          *(void *)(a1 + 128) = v89;
          *(void *)(a1 + 136) = v77;
          int v90 = *(_DWORD *)(a1 + 120);
          *(void *)(a1 + 120) = v90 & 1;
          if ((v90 & 1) == 0)
          {
            uint64_t v30 = &v89[2 * v77];
            __int16 v29 = v89;
            do
            {
LABEL_66:
              *__int16 v29 = -4096;
              v29 += 2;
            }
            while (v29 != v30);
            goto LABEL_74;
          }
        }
        uint64_t v30 = (void *)(a1 + 144);
        goto LABEL_66;
      }
      if (v28)
      {
        uint64_t v31 = *(void **)(a1 + 128);
        unint64_t v32 = &v31[2 * v28];
        do
        {
LABEL_71:
          *uint64_t v31 = -4096;
          v31 += 2;
        }
        while (v31 != v32);
        int v33 = *(_DWORD *)(a1 + 120) & 1;
      }
      else
      {
        int v33 = 0;
      }
      *(_DWORD *)(a1 + 120) = v33;
      *(_DWORD *)(a1 + 124) = 0;
      goto LABEL_74;
    }
    uint64_t v31 = (void *)(a1 + 128);
    unint64_t v32 = (void *)(a1 + 144);
    goto LABEL_71;
  }
LABEL_74:
  unint64_t v34 = *(void **)(a1 + 144);
  uint64_t v35 = *(unsigned int *)(a1 + 152);
  if (v35)
  {
    uint64_t v36 = 16 * v35;
    uint64_t v37 = v34 + 1;
    do
    {
      uint64_t v38 = *v37;
      uint64_t v40 = *(void *)(v38 + 8);
      if ((v40 & 4) != 0) {
        llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v40 & 0xFFFFFFFFFFFFFFF8, (__n128 *)v39);
      }
      v37 += 2;
      v36 -= 16;
    }
    while (v36);
    unint64_t v34 = *(void **)(a1 + 144);
    uint64_t v41 = *(unsigned int *)(a1 + 152);
  }
  else
  {
    uint64_t v41 = 0;
  }
  llvm::SmallVectorTemplateBase<std::pair<llvm::TrackingMDRef,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>,false>::destroy_range(v34, (llvm::MDNode *)&v34[2 * v41]);
  *(_DWORD *)(a1 + 152) = 0;
  unsigned int v43 = *(_DWORD *)(a1 + 72);
  if (v43 > 1)
  {
    if (v43)
    {
      int v47 = (uint64_t *)(a1 + 80);
      uint64_t v49 = (uint64_t *)(a1 + 96);
    }
    else
    {
      int v47 = *(uint64_t **)(a1 + 80);
      uint64_t v48 = *(unsigned int *)(a1 + 88);
      uint64_t v49 = &v47[2 * v48];
      if (!v48)
      {
        uint64_t v50 = 0;
        uint64_t v45 = *(uint64_t **)(a1 + 80);
LABEL_97:
        uint64_t v51 = &v47[2 * v50];
        goto LABEL_98;
      }
    }
    uint64_t v45 = v47;
    while ((*v45 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v45 += 2;
      if (v45 == v49)
      {
        uint64_t v45 = v49;
        break;
      }
    }
    if (v43) {
      goto LABEL_93;
    }
LABEL_96:
    int v47 = *(uint64_t **)(a1 + 80);
    uint64_t v50 = *(unsigned int *)(a1 + 88);
    goto LABEL_97;
  }
  if (v43)
  {
    unint64_t v44 = a1 + 80;
    uint64_t v45 = (uint64_t *)(a1 + 96);
    uint64_t v46 = 1;
  }
  else
  {
    unint64_t v44 = *(void *)(a1 + 80);
    uint64_t v46 = *(unsigned int *)(a1 + 88);
    uint64_t v45 = (uint64_t *)(v44 + 16 * v46);
  }
  uint64_t v49 = (uint64_t *)(v44 + 16 * v46);
  if (!v43) {
    goto LABEL_96;
  }
LABEL_93:
  uint64_t v51 = (uint64_t *)(a1 + 96);
LABEL_98:
  uint64_t v52 = (unsigned int *)(a1 + 72);
  if (v45 != v51)
  {
    while (2)
    {
      uint64_t v53 = *v45;
      v113[0] = 0;
      if ((llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(a1 + 96, v53, v113) & 1) != 0&& (unint64_t v42 = (__n128 *)v113[0][1]) != 0)
      {
        uint64_t v54 = *(void *)(v45[1] + 8);
        if ((v54 & 4) == 0)
        {
LABEL_106:
          unint64_t v55 = v45 + 2;
          uint64_t v45 = v49;
          if (v55 != v49)
          {
            uint64_t v45 = v55;
            while ((*v45 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v45 += 2;
              if (v45 == v49)
              {
                uint64_t v45 = v49;
                break;
              }
            }
          }
          if (v45 == v51)
          {
            unsigned int v43 = *v52;
            goto LABEL_113;
          }
          continue;
        }
      }
      else
      {
        uint64_t v54 = *(void *)(v45[1] + 8);
        if ((v54 & 4) == 0) {
          goto LABEL_106;
        }
        unint64_t v42 = (__n128 *)*v45;
      }
      break;
    }
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v54 & 0xFFFFFFFFFFFFFFF8, v42);
    goto LABEL_106;
  }
LABEL_113:
  if (v43 <= 1 && !*(_DWORD *)(a1 + 76)) {
    goto LABEL_131;
  }
  if (v43)
  {
    int v58 = (void *)(a1 + 80);
    unint64_t v59 = (void *)(a1 + 96);
    goto LABEL_123;
  }
  uint64_t v56 = *(unsigned int *)(a1 + 88);
  if (((2 * v43) & 0xFFFFFFFC) < v56 && v56 >= 0x41)
  {
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::destroyAll(a1 + 72, (llvm::MDNode *)v42);
    if (v43 >= 2)
    {
      unsigned int v80 = (v43 >> 1) - 1;
      int v81 = 1 << (33 - __clz(v80));
      if (v80 >= 0x10) {
        unsigned int v57 = v81;
      }
      else {
        unsigned int v57 = 64;
      }
    }
    else
    {
      unsigned int v57 = 0;
    }
    if ((*v52 & 1) != 0 && v57 < 2)
    {
      *(void *)(a1 + 72) = 1;
      std::string::size_type v82 = (void *)(a1 + 80);
      unint64_t v83 = (void *)(a1 + 96);
      do
      {
LABEL_170:
        *std::string::size_type v82 = -4096;
        v82 += 2;
      }
      while (v82 != v83);
      goto LABEL_131;
    }
    if ((*v52 & 1) == 0)
    {
      if (v57 == *(_DWORD *)(a1 + 88))
      {
        *(void *)(a1 + 72) = 0;
        if (!v57) {
          goto LABEL_131;
        }
        std::string::size_type v82 = *(void **)(a1 + 80);
        unint64_t v83 = &v82[2 * v57];
        goto LABEL_170;
      }
      MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
    }
    if (v57 <= 1)
    {
      *(void *)uint64_t v52 = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 72) &= ~1u;
      uint64_t v106 = operator new(16 * v57, (std::align_val_t)8uLL);
      *(void *)(a1 + 80) = v106;
      *(void *)(a1 + 88) = v57;
      int v107 = *(_DWORD *)(a1 + 72);
      *(void *)(a1 + 72) = v107 & 1;
      if ((v107 & 1) == 0)
      {
        unint64_t v108 = &v106[2 * v57];
        goto LABEL_212;
      }
    }
    uint64_t v106 = (void *)(a1 + 80);
    unint64_t v108 = (void *)(a1 + 96);
    do
    {
LABEL_212:
      *uint64_t v106 = -4096;
      v106 += 2;
    }
    while (v106 != v108);
    goto LABEL_131;
  }
  if (!v56) {
    goto LABEL_130;
  }
  int v58 = *(void **)(a1 + 80);
  unint64_t v59 = &v58[2 * v56];
LABEL_123:
  while (2)
  {
    if (*v58 == -8192)
    {
LABEL_127:
      *int v58 = -4096;
    }
    else if (*v58 != -4096)
    {
      unint64_t v60 = (llvm::MDNode *)v58[1];
      v58[1] = 0;
      if (v60) {
        llvm::MDNode::deleteTemporary(v60, (llvm::MDNode *)v42);
      }
      goto LABEL_127;
    }
    v58 += 2;
    if (v58 != v59) {
      continue;
    }
    break;
  }
  LODWORD(v56) = *v52 & 1;
LABEL_130:
  *(_DWORD *)(a1 + 72) = v56;
  *(_DWORD *)(a1 + 76) = 0;
LABEL_131:
  unint64_t v61 = (unsigned int *)(a1 + 48);
  unsigned int v62 = *(_DWORD *)(a1 + 48);
  if (v62 < 2) {
    goto LABEL_192;
  }
  char v63 = llvm::detail::DenseSetImpl<unsigned int,llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,llvm::DenseMapInfo<unsigned int,void>>::begin((_DWORD *)(a1 + 48));
  unint64_t v64 = v63;
  long long v66 = v65;
  if (v62) {
    uint64_t v67 = a1 + 60;
  }
  else {
    uint64_t v67 = *(void *)(a1 + 56) + 4 * *(unsigned int *)(a1 + 64);
  }
  if ((_DWORD *)v67 == v63) {
    goto LABEL_148;
  }
  do
  {
    uint64_t v68 = *v64;
    long long v69 = *(llvm::MDNode **)(*(void *)a1 + 8 * v68);
    if (v69 && llvm::MDNode::classof(*(unsigned char **)(*(void *)a1 + 8 * v68))) {
      llvm::MDNode::resolveCycles(v69);
    }
    while (++v64 != v66)
    {
      if (*v64 < 0xFFFFFFFE) {
        goto LABEL_143;
      }
    }
    unint64_t v64 = v66;
LABEL_143:
    ;
  }
  while (v64 != (_DWORD *)v67);
  unsigned int v62 = *v61;
  if (*v61 > 1)
  {
LABEL_148:
    char v70 = 0;
    if ((v62 & 1) == 0) {
      goto LABEL_149;
    }
LABEL_147:
    char v71 = (void *)(a1 + 56);
    uint64_t v72 = 1;
    goto LABEL_155;
  }
  if (!*(_DWORD *)(a1 + 52)) {
    goto LABEL_192;
  }
  char v70 = 1;
  if (v62) {
    goto LABEL_147;
  }
LABEL_149:
  uint64_t v72 = *(unsigned int *)(a1 + 64);
  if (((2 * v62) & 0xFFFFFFFC) >= v72 || v72 < 0x41)
  {
    if (!v72)
    {
LABEL_156:
      *(_DWORD *)(a1 + 48) = v72;
      *(_DWORD *)(a1 + 52) = 0;
      goto LABEL_192;
    }
    char v71 = *(void **)(a1 + 56);
LABEL_155:
    memset(v71, 255, 4 * v72);
    LODWORD(v72) = *v61 & 1;
    goto LABEL_156;
  }
  if (v70)
  {
    unint64_t v73 = (void *)(a1 + 56);
    size_t v74 = 4;
    MEMORY[0x263E500A0](*(void *)(a1 + 56), 4);
    goto LABEL_189;
  }
  unsigned int v84 = (v62 >> 1) - 1;
  unsigned int v85 = 1 << (33 - __clz(v84));
  if (v84 >= 0x10) {
    uint64_t v86 = v85;
  }
  else {
    uint64_t v86 = 64;
  }
  if (v86 == v72)
  {
    *(void *)(a1 + 48) = 0;
    size_t v87 = 4 * v72;
    uint64_t v88 = *(void **)(a1 + 56);
  }
  else
  {
    unint64_t v73 = (void *)(a1 + 56);
    size_t v74 = 4;
    MEMORY[0x263E500A0](*(void *)(a1 + 56), 4);
    if (v86 < 2)
    {
LABEL_189:
      int v92 = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 48) &= ~1u;
      size_t v74 = 4 * v86;
      std::__split_buffer<std::string>::pointer v91 = operator new(v74, (std::align_val_t)4uLL);
      *(void *)(a1 + 56) = v91;
      *(void *)(a1 + 64) = v86;
      int v92 = *(_DWORD *)(a1 + 48) & 1;
      if (v92) {
        size_t v74 = 4;
      }
      else {
        unint64_t v73 = v91;
      }
    }
    *(_DWORD *)(a1 + 48) = v92;
    *(_DWORD *)(a1 + 52) = 0;
    uint64_t v88 = v73;
    size_t v87 = v74;
  }
  memset(v88, 255, v87);
LABEL_192:
  if (*(void *)(a2 + 40))
  {
    unint64_t v93 = *(void *)(a2 + 32);
    do
    {
      uint64_t v94 = *(void *)(*(void *)(a2 + 8) + ((v93 >> 5) & 0x7FFFFFFFFFFFFF8));
      uint64_t v95 = v94 + 16 * v93;
      uint64_t v96 = *(unsigned int *)(v95 + 4);
      if (*(_DWORD *)(a1 + 8) <= v96) {
        uint64_t v97 = 0;
      }
      else {
        uint64_t v97 = *(void *)(*(void *)a1 + 8 * v96);
      }
      uint64_t v98 = v94 + 16 * v93;
      __int16 v101 = *(void **)(v98 + 8);
      uint64_t v99 = (uint64_t *)(v98 + 8);
      unint64_t v100 = v101;
      if (v101)
      {
        *unint64_t v100 = v97;
        uint64_t v102 = *(void *)*v99;
        if (v102) {
          llvm::MetadataTracking::track(*v99, v102, 2);
        }
        v113[0] = (void *)v95;
        llvm::MetadataTracking::untrack((uint64_t)v113, v95);
        unint64_t v93 = *(void *)(a2 + 32);
        unsigned int v103 = *(void **)(*(void *)(*(void *)(a2 + 8) + ((v93 >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * v93
                          + 8);
        if (v103) {
          *unsigned int v103 = 0;
        }
      }
      uint64_t v104 = *(void *)(a2 + 40) - 1;
      *(void *)(a2 + 32) = ++v93;
      *(void *)(a2 + 40) = v104;
      if (v93 >= 0x200)
      {
        operator delete(**(void ***)(a2 + 8));
        *(void *)(a2 + 8) += 8;
        uint64_t v104 = *(void *)(a2 + 40);
        unint64_t v93 = *(void *)(a2 + 32) - 256;
        *(void *)(a2 + 32) = v93;
      }
    }
    while (v104);
  }
  return MEMORY[0x263E500A0](v109, 4);
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata(llvm::Twine *a1, unint64_t a2, unsigned int **a3, int a4, llvm::MetadataLoader::MetadataLoaderImpl *a5, const char *a6, unint64_t a7, llvm::MetadataLoader::MetadataLoaderImpl *a8)
{
  uint64_t v8 = a1;
  uint64_t v943 = *MEMORY[0x263EF8340];
  unsigned __int8 v933 = 0;
  v932[0] = (llvm::MetadataLoader::MetadataLoaderImpl *)a2;
  v932[1] = (llvm::MetadataLoader::MetadataLoaderImpl *)&v933;
  v932[2] = a8;
  v932[3] = a5;
  switch(a4)
  {
    case 1:
      std::string::__init_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>(&v938, (uint64_t *)*a3, (uint64_t *)&(*a3)[2 * *((unsigned int *)a3 + 2)], *((unsigned int *)a3 + 2));
      if (v939[0] >= 0) {
        uint64_t v12 = (uint64_t *)&v938;
      }
      else {
        uint64_t v12 = (uint64_t *)v938;
      }
      if (v939[0] >= 0) {
        unint64_t v13 = HIBYTE(v939[0]);
      }
      else {
        unint64_t v13 = *((void *)&v938 + 1);
      }
      BOOL v14 = v13 >= 0x10 && *v12 == 0x6365762E6D766C6CLL && v12[1] == 0x2E72657A69726F74;
      *(unsigned char *)(a2 + 1041) |= v14;
      uint64_t v208 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**(void **)(a2 + 208) + 312), v12, v13);
      if (v209) {
        *(void *)(v208 + 16) = v208;
      }
      ++*(_DWORD *)a8;
      if (SHIBYTE(v939[0]) < 0) {
        operator delete((void *)v938);
      }
      goto LABEL_1076;
    case 2:
      if (*((_DWORD *)a3 + 2) != 2) {
        goto LABEL_269;
      }
      unsigned int v15 = **a3;
      unsigned int v16 = (unsigned __int8 *)std::function<llvm::Type * ()>::operator()(*(void *)(a2 + 248), v15);
      int v17 = v16[8];
      if (v17 == 9 || v17 == 7) {
        goto LABEL_269;
      }
      ValueFwdRef = llvm::BitcodeReaderValueList::getValueFwdRef(*(llvm::BitcodeReaderValueList **)(a2 + 192), (*a3)[2], (llvm::Type *)v16, v15, 0);
      if (ValueFwdRef)
      {
        *(void *)&long long v938 = llvm::ValueAsMetadata::get(ValueFwdRef, v20);
        llvm::MetadataLoader::MetadataLoaderImpl::callMDTypeCallback((void *)a2, (uint64_t)&v938, v15);
        uint64_t v21 = (__n128 *)v938;
LABEL_1074:
        int v737 = *(_DWORD *)a8;
        unint64_t v738 = a2;
LABEL_1075:
        ++*(_DWORD *)a8;
        goto LABEL_1076;
      }
      unint64_t v154 = "Invalid value reference from metadata";
      goto LABEL_270;
    case 3:
      goto LABEL_20;
    case 4:
      unint64_t v22 = (uint64_t *)*a3;
      uint64_t v23 = (char *)&(*a3)[2 * *((unsigned int *)a3 + 2)];
      v934 = &v936;
      long long v935 = xmmword_261E8A740;
      llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v934, (char *)v22, v23);
      *((_DWORD *)a3 + 2) = 0;
      llvm::BitstreamCursor::ReadCode(*(llvm::BitstreamCursor **)(a2 + 200), (uint64_t)&v938);
      if (BYTE8(v938))
      {
        uint64_t v210 = v938;
        *(void *)uint64_t v8 = v938;
        if (v210) {
          goto LABEL_865;
        }
        int v24 = 4;
      }
      else
      {
        int v24 = v938;
        *(void *)uint64_t v8 = 0;
      }
      llvm::BitstreamCursor::readRecord(*(llvm::SimpleBitstreamCursor **)(a2 + 200), v24, (unsigned int *)a3, 0, (uint64_t)&v941);
      if ((v942 & 1) == 0)
      {
        if (v941 != 10)
        {
          *(void *)&long long v938 = "METADATA_NAME not followed by METADATA_NAMED_NODE";
          __int16 v940 = 259;
          error(v8);
        }
        uint64_t v211 = *((unsigned int *)a3 + 2);
        unint64_t inserted = llvm::Module::getOrInsertNamedMetadata(*(void *)(a2 + 216), v934, v935);
        if (v211)
        {
          unint64_t v213 = inserted;
          unint64_t v214 = 0;
          uint64_t v215 = 8 * v211;
          do
          {
            if (!MDNodeFwdRefOrNull)
            {
              *(void *)&long long v938 = "Invalid named metadata: expect fwd ref to MDNode";
              __int16 v940 = 259;
              error(v8);
            }
            *(void *)&long long v938 = MDNodeFwdRefOrNull;
            llvm::SmallVectorImpl<llvm::TrackingMDRef>::emplace_back<llvm::MDNode *&>(*(void *)(v213 + 48), (uint64_t *)&v938);
            v214 += 8;
          }
          while (v215 != v214);
        }
        char v217 = 1;
LABEL_866:
        if (v934 != &v936) {
          free(v934);
        }
        if (v217) {
          goto LABEL_1076;
        }
        return;
      }
      *(void *)uint64_t v8 = v941;
LABEL_865:
      char v217 = 0;
      goto LABEL_866;
    case 5:
      unsigned __int8 v933 = 1;
LABEL_20:
      *(void *)&long long v938 = v939;
      *((void *)&v938 + 1) = 0x800000000;
      unint64_t v25 = *((unsigned int *)a3 + 2);
      if (v25 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v938, v939, v25, 8);
        LODWORD(v25) = *((_DWORD *)a3 + 2);
      }
      if (v25)
      {
        uint64_t v26 = (uint64_t *)*a3;
        uint64_t v27 = 8 * v25;
        do
        {
          if (*(_DWORD *)v26) {
          else
          }
            uint64_t v28 = 0;
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v938, (uint64_t)v28);
          ++v26;
          v27 -= 8;
        }
        while (v27);
      }
      Impl = llvm::MDTuple::getImpl(*(void **)(a2 + 208), (llvm::hashing::detail::hash_state *)v938, DWORD2(v938), (unint64_t *)v933, 1);
      goto LABEL_195;
    case 6:
      llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKindRecord(a1, a2, (char *)*a3, *((_DWORD *)a3 + 2));
      goto LABEL_158;
    case 7:
      if ((unint64_t)*((unsigned int *)a3 + 2) - 5 >= 2) {
        goto LABEL_269;
      }
      uint64_t v30 = (uint64_t *)*a3;
      unsigned __int8 v933 = *(void *)*a3 != 0;
      unsigned int v31 = *((_DWORD *)v30 + 2);
      unsigned int v32 = *((_DWORD *)v30 + 4);
      unsigned int v34 = (*a3)[8];
      if (v34) {
      else
      }
        uint64_t v35 = 0;
      int v257 = *((_DWORD *)a3 + 2) == 6 && *((void *)*a3 + 5) != 0;
      uint64_t v59 = (uint64_t)llvm::DILocation::getImpl(*(void **)(a2 + 208), v31, v32, (uint64_t)v33, (uint64_t)v35, v257, v933, 1);
      goto LABEL_1073;
    case 8:
      int v36 = *((_DWORD *)a3 + 2);
      if (v36) {
        goto LABEL_269;
      }
      *(void *)&long long v938 = v939;
      *((void *)&v938 + 1) = 0x800000000;
      if (v36)
      {
        int v37 = 0;
        while (1)
        {
          uint64_t v38 = *(void *)&(*a3)[2 * v37];
          uint64_t v39 = (unsigned __int8 *)std::function<llvm::Type * ()>::operator()(*(void *)(a2 + 248), v38);
          if (!v39) {
            break;
          }
          int v40 = v39[8];
          if (v40 == 7)
          {
            uint64_t v41 = 0;
          }
          else if (v40 == 9)
          {
          }
          else
          {
            unint64_t v42 = llvm::BitcodeReaderValueList::getValueFwdRef(*(llvm::BitcodeReaderValueList **)(a2 + 192), *(void *)&(*a3)[2 * (v37 + 1)], (llvm::Type *)v39, v38, 0);
            if (!v42)
            {
              uint64_t v324 = "Invalid value reference from old metadata";
LABEL_904:
              v934 = (uint64_t *)v324;
              __int16 v937 = 259;
              error(v8);
            }
            v934 = 0;
            v934 = (uint64_t *)llvm::ValueAsMetadata::get(v42, v43);
            llvm::MetadataLoader::MetadataLoaderImpl::callMDTypeCallback((void *)a2, (uint64_t)&v934, v38);
            uint64_t v41 = (llvm::MDNode *)v934;
          }
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v938, (uint64_t)v41);
          v37 += 2;
          if (v36 == v37)
          {
            unint64_t v44 = (llvm::hashing::detail::hash_state *)v938;
            unint64_t v45 = DWORD2(v938);
            goto LABEL_291;
          }
        }
        uint64_t v324 = "Invalid record";
        goto LABEL_904;
      }
      unint64_t v45 = 0;
      unint64_t v44 = (llvm::hashing::detail::hash_state *)v939;
LABEL_291:
      unint64_t v258 = llvm::MDTuple::getImpl(*(void **)(a2 + 208), v44, v45, 0, 1);
      ++*(_DWORD *)a8;
      uint64_t v205 = (void *)v938;
      if ((void *)v938 == v939) {
        goto LABEL_1076;
      }
      goto LABEL_196;
    case 9:
      int v46 = *((_DWORD *)a3 + 2);
      if (v46) {
        goto LABEL_269;
      }
      v934 = (uint64_t *)a2;
      *(void *)&long long v935 = a8;
      if (v46 != 2
        || ((unsigned int v47 = **a3,
             uint64_t v48 = (unsigned __int8 *)std::function<llvm::Type * ()>::operator()(*(void *)(a2 + 248), v47), v49 = v48[8], v49 != 9)? (v50 = v49 == 7): (v50 = 1), v50))
      {
        goto LABEL_1076;
      }
      unint64_t v499 = llvm::BitcodeReaderValueList::getValueFwdRef(*(llvm::BitcodeReaderValueList **)(a2 + 192), (*a3)[2], (llvm::Type *)v48, v47, 0);
      if (v499)
      {
        uint64_t v59 = llvm::ValueAsMetadata::get(v499, v500);
        goto LABEL_1073;
      }
      unint64_t v154 = "Invalid value reference from old fn metadata";
      goto LABEL_270;
    case 12:
      unsigned int v51 = *((_DWORD *)a3 + 2);
      if (v51 <= 3) {
        goto LABEL_269;
      }
      uint64_t v52 = (uint64_t *)*a3;
      unsigned __int8 v933 = *(void *)*a3 != 0;
      unsigned int v53 = *((_DWORD *)v52 + 2);
      if (HIWORD(v53) || *((_DWORD *)v52 + 4) != 0) {
        goto LABEL_269;
      }
      int v55 = *((_DWORD *)v52 + 6);
      if (v55)
      {
        unsigned int v51 = *((_DWORD *)a3 + 2);
      }
      else
      {
        uint64_t v56 = 0;
      }
      *(void *)&long long v938 = v939;
      *((void *)&v938 + 1) = 0x800000000;
      if (v51 == 4)
      {
        uint64_t v435 = 0;
        uint64_t v436 = (llvm::hashing::detail::hash_state *)v939;
      }
      else
      {
        for (unsigned int i = 4; i != v51; ++i)
        {
          uint64_t v438 = *(void *)&(*a3)[2 * i];
          if (v438) {
          else
          }
            char v439 = 0;
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v938, (uint64_t)v439);
        }
        uint64_t v436 = (llvm::hashing::detail::hash_state *)v938;
        uint64_t v435 = DWORD2(v938);
      }
      uint64_t v440 = llvm::GenericDINode::getImpl(*(void **)(a2 + 208), v53, (uint64_t)v56, v436, v435, v933, 1);
      ++*(_DWORD *)a8;
      uint64_t v205 = (void *)v938;
      if ((void *)v938 == v939) {
        goto LABEL_1076;
      }
      goto LABEL_196;
    case 13:
      unsigned int v57 = (uint64_t *)*a3;
      uint64_t v58 = *(void *)*a3 >> 1;
      switch(v58)
      {
        case 2:
          unint64_t v236 = *(void **)(a2 + 208);
          int v237 = *((_DWORD *)v57 + 2);
          if (v237)
          {
            unsigned int v57 = (uint64_t *)*a3;
          }
          else
          {
            uint64_t v238 = 0;
          }
          int v443 = *((_DWORD *)v57 + 4);
          if (v443)
          {
            unsigned int v57 = (uint64_t *)*a3;
          }
          else
          {
            long long v444 = 0;
          }
          int v478 = *((_DWORD *)v57 + 6);
          if (v478)
          {
            unsigned int v57 = (uint64_t *)*a3;
          }
          else
          {
            int v479 = 0;
          }
          int v486 = *((_DWORD *)v57 + 8);
          if (v486) {
          else
          }
            uint64_t v487 = 0;
          uint64_t v59 = (uint64_t)llvm::DISubrange::getImpl(v236, (uint64_t)v238, (uint64_t)v444, (uint64_t)v479, (uint64_t)v487, 0, 1);
          goto LABEL_1073;
        case 1:
          uint64_t v239 = *(void **)(a2 + 208);
          int v240 = *((_DWORD *)v57 + 2);
          if (v240)
          {
            unsigned int v57 = (uint64_t *)*a3;
          }
          else
          {
            uint64_t v241 = 0;
          }
          uint64_t v59 = (uint64_t)llvm::DISubrange::getImpl(v239, (uint64_t)v241, -(v57[2] & 1) ^ ((unint64_t)v57[2] >> 1), 0, 1);
          goto LABEL_1073;
        case 0:
          uint64_t v59 = (uint64_t)llvm::DISubrange::getImpl(*(void **)(a2 + 208), v57[1], -(v57[2] & 1) ^ ((unint64_t)v57[2] >> 1), 0, 1);
LABEL_1073:
          uint64_t v21 = (__n128 *)v59;
          goto LABEL_1074;
      }
      unint64_t v154 = "Invalid record: Unsupported version of DISubrange";
      goto LABEL_270;
    case 14:
      uint64_t v60 = *((unsigned int *)a3 + 2);
      if (v60 <= 2) {
        goto LABEL_269;
      }
      unint64_t v61 = (uint64_t *)*a3;
      unint64_t v63 = *(void *)*a3;
      unint64_t v62 = *((void *)*a3 + 1);
      uint64_t v64 = *(void *)*a3 & 1;
      unsigned __int8 v933 = *(unsigned char *)*a3 & 1;
      if ((v63 & 4) != 0)
      {
        llvm::readWideAPInt((unint64_t *)v61 + 3, v60 - 3, v62, (llvm::APInt *)&v938);
        unint64_t v65 = v938;
        long long v66 = *(void **)(a2 + 208);
        if (!v933)
        {
          unsigned int v929 = DWORD2(v938);
          if (DWORD2(v938) > 0x40) {
            operator new[]();
          }
LABEL_549:
          unint64_t v928 = v65;
          unsigned int v642 = (*a3)[4];
          if (v642) {
          else
          }
            uint64_t v643 = 0;
          v644 = llvm::DIEnumerator::getImpl(v66, (uint64_t)&v928, (v63 >> 1) & 1, v643, 0, 1);
          if (v929 >= 0x41)
          {
            unint64_t v416 = v928;
            if (v928) {
LABEL_897:
            }
              MEMORY[0x263E50080](v416, 0x1000C8000313F17);
          }
LABEL_898:
          ++*(_DWORD *)a8;
          goto LABEL_1076;
        }
        unsigned int v931 = DWORD2(v938);
        if (DWORD2(v938) > 0x40) {
          operator new[]();
        }
      }
      else
      {
        unint64_t v65 = -(uint64_t)(v62 & 1) ^ (v62 >> 1);
        long long v66 = *(void **)(a2 + 208);
        if (!v64)
        {
          unsigned int v929 = 64;
          goto LABEL_549;
        }
        unsigned int v931 = 64;
      }
      unint64_t v930 = v65;
      unsigned int v327 = (*a3)[4];
      if (v327) {
      else
      }
        uint64_t v328 = 0;
      uint64_t v415 = llvm::DIEnumerator::getImpl(v66, (uint64_t)&v930, (v63 >> 1) & 1, v328, 1, 1);
      if (v931 >= 0x41)
      {
        unint64_t v416 = v930;
        if (v930) {
          goto LABEL_897;
        }
      }
      goto LABEL_898;
    case 15:
      unsigned int v67 = *((_DWORD *)a3 + 2);
      if (v67 - 8 <= 0xFFFFFFFD) {
        goto LABEL_269;
      }
      uint64_t v68 = (uint64_t *)*a3;
      uint64_t v69 = *(void *)*a3;
      unsigned __int8 v933 = v69 != 0;
      if (v67 < 7) {
        int v70 = 0;
      }
      else {
        int v70 = *((_DWORD *)v68 + 12);
      }
      unint64_t v242 = *(void **)(a2 + 208);
      int v243 = *((_DWORD *)v68 + 2);
      int v244 = *((_DWORD *)v68 + 4);
      if (v69)
      {
        if (v244)
        {
          uint64_t v68 = (uint64_t *)*a3;
        }
        else
        {
          unint64_t v245 = 0;
        }
        uint64_t v59 = (uint64_t)llvm::DIBasicType::getImpl(v242, v243, (uint64_t)v245, v68[3], *((_DWORD *)v68 + 8), *((_DWORD *)v68 + 10), v70, 1, 1);
      }
      else
      {
        if (v244)
        {
          uint64_t v68 = (uint64_t *)*a3;
        }
        else
        {
          long long v276 = 0;
        }
        uint64_t v59 = (uint64_t)llvm::DIBasicType::getImpl(v242, v243, (uint64_t)v276, v68[3], *((_DWORD *)v68 + 8), *((_DWORD *)v68 + 10), v70, 0, 1);
      }
      goto LABEL_1073;
    case 16:
      int v71 = *((_DWORD *)a3 + 2);
      if ((v71 - 5) < 2)
      {
        uint64_t v72 = (uint64_t *)*a3;
        int v73 = *(void *)*a3 != 0;
        unsigned __int8 v933 = *(void *)*a3 != 0;
        uint64_t v74 = v72[3];
        if (v74)
        {
          uint64_t v75 = v72[4];
          if (v75)
          {
            if (v75)
            {
              int v73 = v933;
              uint64_t v72 = (uint64_t *)*a3;
            }
            else
            {
              v917 = 0;
            }
            int v219 = v74 & 0xFFFFFF00;
            LODWORD(v74) = v74;
            char v218 = 1;
LABEL_651:
            unsigned int v505 = *(void **)(a2 + 208);
            int v506 = *((_DWORD *)v72 + 2);
            if (v73)
            {
              if (v506)
              {
                uint64_t v72 = (uint64_t *)*a3;
              }
              else
              {
                uint64_t v507 = 0;
              }
              int v509 = *((_DWORD *)v72 + 4);
              if (v509) {
              else
              }
                unsigned int v510 = 0;
              unint64_t v511 = v917;
              int v512 = v219 | v74;
              if (*((_DWORD *)a3 + 2) >= 6u && (unsigned int v513 = (*a3)[10]) != 0)
              {
                unint64_t v511 = v917;
                uint64_t v515 = (uint64_t)v514;
              }
              else
              {
                uint64_t v515 = 0;
              }
              LODWORD(v938) = v512;
              *((void *)&v938 + 1) = v511;
              LOBYTE(v939[0]) = v218;
              *(_DWORD *)((char *)v939 + 1) = v934;
              HIDWORD(v939[0]) = *(_DWORD *)((char *)&v934 + 3);
              int v516 = v505;
              uint64_t v517 = (uint64_t)v507;
              uint64_t v518 = (uint64_t)v510;
              int v519 = 1;
            }
            else
            {
              if (v506)
              {
                uint64_t v72 = (uint64_t *)*a3;
              }
              else
              {
                unint64_t v508 = 0;
              }
              int v520 = *((_DWORD *)v72 + 4);
              if (v520) {
              else
              }
                v521 = 0;
              long long v522 = v917;
              int v523 = v219 | v74;
              if (*((_DWORD *)a3 + 2) >= 6u && (unsigned int v524 = (*a3)[10]) != 0)
              {
                long long v522 = v917;
                uint64_t v515 = (uint64_t)v525;
              }
              else
              {
                uint64_t v515 = 0;
              }
              LODWORD(v938) = v523;
              *((void *)&v938 + 1) = v522;
              LOBYTE(v939[0]) = v218;
              *(_DWORD *)((char *)v939 + 1) = v934;
              HIDWORD(v939[0]) = *(_DWORD *)((char *)&v934 + 3);
              int v516 = v505;
              uint64_t v517 = (uint64_t)v508;
              uint64_t v518 = (uint64_t)v521;
              int v519 = 0;
            }
            uint64_t v59 = (uint64_t)llvm::DIFile::getImpl(v516, v517, v518, &v938, v515, v519, 1);
            goto LABEL_1073;
          }
          char v218 = 0;
          LODWORD(v74) = 0;
        }
        else
        {
          char v218 = 0;
        }
        int v219 = 0;
        goto LABEL_651;
      }
      if (v71 == 3)
      {
        char v218 = 0;
        LODWORD(v74) = 0;
        int v219 = 0;
        uint64_t v72 = (uint64_t *)*a3;
        int v73 = *(void *)*a3 != 0;
        unsigned __int8 v933 = *(void *)*a3 != 0;
        goto LABEL_651;
      }
      goto LABEL_269;
    case 17:
      unsigned int v76 = *((_DWORD *)a3 + 2);
      if (v76 - 16 <= 0xFFFFFFFB) {
        goto LABEL_269;
      }
      uint64_t v77 = (uint64_t *)*a3;
      if (v76 < 0xD)
      {
        unsigned __int8 v81 = 0;
        BOOL v82 = 0;
        BOOL v79 = 0;
        unsigned __int8 v80 = 0;
        unint64_t v83 = 0;
        unsigned int v905 = *((_DWORD *)a3 + 2);
        unsigned int v894 = v905;
      }
      else
      {
        uint64_t v78 = v77[12];
        BOOL v79 = v78 != 0;
        if (v78) {
          unsigned __int8 v80 = v78 - 1;
        }
        else {
          unsigned __int8 v80 = 0;
        }
        unsigned int v894 = (v78 - 1) >> 8;
        if (v76 == 13)
        {
          unsigned __int8 v81 = 0;
          BOOL v82 = 0;
          unint64_t v83 = 0;
          unsigned int v905 = 13;
        }
        else
        {
          uint64_t v329 = v77[13];
          BOOL v82 = v329 != 0;
          unsigned __int8 v81 = v329;
          unsigned int v905 = v329 >> 8;
          if (v76 >= 0xF && (uint64_t v330 = v77[14]) != 0 && v330)
          {
            uint64_t v77 = (uint64_t *)*a3;
          }
          else
          {
            unint64_t v83 = 0;
          }
        }
      }
      uint64_t v417 = *v77;
      unsigned __int8 v933 = *v77 != 0;
      v877 = *(void **)(a2 + 208);
      int v872 = *((_DWORD *)v77 + 2);
      int v418 = *((_DWORD *)v77 + 4);
      uint64_t v923 = (uint64_t)v83;
      int v886 = *((_DWORD *)v77 + 20);
      if (v417)
      {
        if (v418)
        {
          uint64_t v77 = (uint64_t *)*a3;
        }
        else
        {
          v847 = 0;
        }
        int v419 = *((_DWORD *)v77 + 6);
        if (v419)
        {
          uint64_t v77 = (uint64_t *)*a3;
        }
        else
        {
          v839 = 0;
        }
        int v866 = *((_DWORD *)v77 + 8);
        int v420 = *((_DWORD *)v77 + 10);
        if (v420) {
        else
        }
          unint64_t v421 = 0;
        unsigned int v423 = (*a3)[12];
        uint64_t v860 = (uint64_t)v422;
        if (v423) {
        else
        }
          uint64_t v424 = 0;
        v425 = (uint64_t *)*a3;
        uint64_t v426 = *((void *)*a3 + 7);
        int v427 = *((_DWORD *)v425 + 16);
        uint64_t v428 = v425[9];
        uint64_t v429 = 0x100000000;
        if (v79) {
          uint64_t v430 = 0x100000000;
        }
        else {
          uint64_t v430 = 0;
        }
        unint64_t v431 = v80 | ((unint64_t)(v894 & 0xFFFFFF) << 8) | v430;
        if (!v82) {
          uint64_t v429 = 0;
        }
        uint64_t v432 = v429 | v81 | ((*(void *)&v905 & 0xFFFFFFLL) << 8);
        int v433 = *((_DWORD *)v425 + 22);
        if (v433) {
        else
        }
          uint64_t v434 = 0;
        uint64_t v59 = llvm::DIDerivedType::getImpl(v877, v872, (uint64_t)v847, (uint64_t)v839, v866, v860, (uint64_t)v854, v426, v427, v428, v431, v432, v886, (uint64_t)v808, v923, 1, 1);
      }
      else
      {
        if (v418)
        {
          uint64_t v77 = (uint64_t *)*a3;
        }
        else
        {
          v848 = 0;
        }
        int v540 = *((_DWORD *)v77 + 6);
        if (v540)
        {
          uint64_t v77 = (uint64_t *)*a3;
        }
        else
        {
          v841 = 0;
        }
        int v867 = *((_DWORD *)v77 + 8);
        int v562 = *((_DWORD *)v77 + 10);
        if (v562) {
        else
        }
          __int16 v563 = 0;
        unsigned int v572 = (*a3)[12];
        if (v572) {
        else
        }
          BOOL v573 = 0;
        int v580 = (uint64_t *)*a3;
        uint64_t v581 = *((void *)*a3 + 7);
        int v582 = *((_DWORD *)v580 + 16);
        uint64_t v583 = v580[9];
        uint64_t v584 = 0x100000000;
        if (v79) {
          uint64_t v585 = 0x100000000;
        }
        else {
          uint64_t v585 = 0;
        }
        unint64_t v586 = v80 | ((unint64_t)(v894 & 0xFFFFFF) << 8) | v585;
        if (!v82) {
          uint64_t v584 = 0;
        }
        uint64_t v587 = v584 | v81 | ((*(void *)&v905 & 0xFFFFFFLL) << 8);
        int v588 = *((_DWORD *)v580 + 22);
        if (v588) {
        else
        }
          uint64_t v589 = 0;
        uint64_t v59 = llvm::DIDerivedType::getImpl(v877, v872, (uint64_t)v848, (uint64_t)v841, v867, (uint64_t)v861, (uint64_t)v855, v581, v582, v583, v586, v587, v886, (uint64_t)v809, v923, 0, 1);
      }
      goto LABEL_1073;
    case 18:
      if ((*((_DWORD *)a3 + 2) - 23) <= 0xFFFFFFF8) {
        goto LABEL_269;
      }
      unsigned int v84 = (uint64_t *)*a3;
      unint64_t v85 = *(void *)*a3;
      unsigned __int8 v933 = v85 & 1;
      unsigned int v86 = *((_DWORD *)v84 + 2);
      int v87 = *((_DWORD *)v84 + 4);
      if (v87)
      {
        unsigned int v84 = (uint64_t *)*a3;
      }
      else
      {
        uint64_t v88 = 0;
      }
      int v259 = *((_DWORD *)v84 + 6);
      if (v259)
      {
        unsigned int v84 = (uint64_t *)*a3;
      }
      else
      {
        unsigned int v260 = 0;
      }
      int v277 = *((_DWORD *)v84 + 8);
      int v278 = *((_DWORD *)v84 + 10);
      if (v278) {
      else
      }
        BOOL v279 = 0;
      unint64_t v287 = (uint64_t *)*a3;
      if (HIDWORD(*((void *)*a3 + 8))) {
        goto LABEL_347;
      }
      uint64_t v288 = v286;
      int v852 = v86;
      uint64_t v870 = *((void *)*a3 + 8);
      uint64_t v858 = v287[7];
      unsigned int v909 = *((_DWORD *)v287 + 20);
      int v864 = *((_DWORD *)v287 + 24);
      int v289 = *((_DWORD *)v287 + 30);
      if (v289) {
      else
      }
        v920 = 0;
      v845 = v8;
      unint64_t v849 = v85;
      uint64_t v835 = (uint64_t)v288;
      uint64_t v840 = (uint64_t)v260;
      int v831 = v277;
      uint64_t v827 = (uint64_t)v88;
      if (*(unsigned char *)(a2 + 1044) && !byte_26B41C4D0 && v920 && v86 <= 0x17 && ((1 << v86) & 0x880014) != 0)
      {
        unsigned int v456 = v909 | 4;
        if (!v88)
        {
          uint64_t v465 = 0;
          uint64_t v466 = 0;
          uint64_t v467 = 0;
          uint64_t v468 = 0;
          char v469 = 0;
          uint64_t v464 = 0;
          uint64_t v692 = 0;
          uint64_t v693 = 0;
          uint64_t v694 = 0;
          uint64_t v695 = 0;
          uint64_t v592 = v858;
          goto LABEL_1150;
        }
        v909 |= 4u;
        uint64_t v457 = (void *)*((void *)v88 + 1);
        size_t v460 = *v457;
        unint64_t v458 = v457 + 3;
        size_t v459 = v460;
        if ((!v460
           || (uint64_t v461 = memchr(v458, 60, v459)) == 0
           || v461 - v458 == -1
           || v459 >= 5 && (*(_DWORD *)v458 == 1314149215 ? (BOOL v462 = v458[4] == 124) : (BOOL v462 = 0), v462))
          && (unsigned int v463 = (*a3)[28]) != 0)
        {
          uint64_t v465 = 0;
          uint64_t v466 = 0;
          uint64_t v467 = 0;
          uint64_t v468 = 0;
          uint64_t v88 = 0;
          char v469 = 0;
        }
        else
        {
          uint64_t v465 = 0;
          uint64_t v466 = 0;
          uint64_t v467 = 0;
          uint64_t v468 = 0;
          uint64_t v88 = 0;
          char v469 = 0;
          uint64_t v464 = 0;
        }
        uint64_t v692 = 0;
        uint64_t v693 = 0;
        uint64_t v694 = 0;
        uint64_t v695 = 0;
        uint64_t v592 = v858;
LABEL_1149:
        unsigned int v456 = v909;
LABEL_1150:
        unsigned int v916 = v456;
        uint64_t v812 = v465;
        uint64_t v816 = v466;
        char v826 = v469;
        uint64_t v883 = v693;
        uint64_t v893 = v692;
        uint64_t v904 = v694;
        uint64_t v811 = v466;
        uint64_t v805 = v592;
        uint64_t v788 = v695;
        std::string v789 = v464;
        v790 = v467;
        uint64_t v791 = llvm::DICompositeType::buildODRType(*(void **)(a2 + 208), (uint64_t)v920, v852, v827, v840, v831, v835, v695, v805, v870, v694, v456, v693, v864, v692, (uint64_t)v464, (unint64_t)v469, (uint64_t)v88, (uint64_t)v468,
                 (uint64_t)v467,
                 v811,
                 v465);
        int v792 = v831;
        uint64_t v793 = v840;
        unsigned int v794 = v870;
        uint64_t v693 = v883;
        uint64_t v795 = v827;
        uint64_t v796 = v858;
        uint64_t v797 = v835;
        unsigned int v798 = v916;
        uint64_t v467 = v790;
        char v469 = v826;
        uint64_t v464 = v789;
        int v799 = v864;
        uint64_t v800 = v788;
        uint64_t v801 = v791;
        int v802 = v852;
        uint64_t v692 = v893;
        uint64_t v694 = v904;
        uint64_t v465 = v812;
        uint64_t v466 = v816;
        int v803 = 1;
        if (v791) {
          goto LABEL_1154;
        }
LABEL_1153:
        uint64_t v801 = llvm::DICompositeType::getImpl(*(void **)(a2 + 208), v802, v795, v793, v792, v797, v800, v796, v794, v694, v798, v693, v799, v692, (uint64_t)v464, (uint64_t)v920, (unint64_t)v469, (uint64_t)v88, (uint64_t)v468,
                 (uint64_t)v467,
                 v466,
                 v465,
                 v933,
                 1);
LABEL_1154:
        uint64_t v8 = v845;
        if (v849 <= 1 && v803) {
        int v737 = *(_DWORD *)a8;
        }
        unint64_t v738 = a2;
        uint64_t v21 = (__n128 *)v801;
        goto LABEL_1075;
      }
      unsigned int v470 = (*a3)[12];
      if (v470) {
      else
      }
        int v471 = 0;
      unint64_t v543 = (uint64_t *)*a3;
      uint64_t v899 = *((void *)*a3 + 9);
      unsigned int v544 = (*a3)[22];
      if (v544)
      {
        unint64_t v543 = (uint64_t *)*a3;
      }
      else
      {
        v878 = 0;
      }
      int v566 = *((_DWORD *)v543 + 26);
      if (v566) {
      else
      }
        unint64_t v567 = 0;
      unsigned int v574 = (*a3)[28];
      if (v574) {
      else
      }
        uint64_t v464 = 0;
      unsigned int v590 = *((_DWORD *)a3 + 2);
      if (v590 < 0x11)
      {
        uint64_t v467 = 0;
        uint64_t v468 = 0;
        char v469 = 0;
        uint64_t v88 = 0;
        uint64_t v466 = 0;
        uint64_t v465 = 0;
        uint64_t v592 = v858;
        goto LABEL_1148;
      }
      __int16 v813 = v464;
      unsigned int v591 = (*a3)[32];
      if (v591)
      {
        unsigned int v590 = *((_DWORD *)a3 + 2);
      }
      else
      {
        char v469 = 0;
      }
      if (v590 < 0x12)
      {
        uint64_t v88 = 0;
        uint64_t v468 = 0;
        uint64_t v467 = 0;
        uint64_t v592 = v858;
        uint64_t v464 = v813;
      }
      else
      {
        char v824 = v469;
        unsigned int v654 = (*a3)[34];
        if (v654)
        {
          unsigned int v590 = *((_DWORD *)a3 + 2);
        }
        else
        {
          v821 = 0;
        }
        uint64_t v464 = v813;
        if (v590 < 0x14)
        {
          uint64_t v468 = 0;
          uint64_t v467 = 0;
          uint64_t v592 = v858;
        }
        else
        {
          unint64_t v721 = (uint64_t *)*a3;
          unsigned int v722 = (*a3)[36];
          if (v722)
          {
            unint64_t v721 = (uint64_t *)*a3;
          }
          else
          {
            uint64_t v468 = 0;
          }
          int v777 = *((_DWORD *)v721 + 38);
          if (v777) {
          else
          }
            uint64_t v467 = 0;
          uint64_t v592 = v858;
          uint64_t v464 = v813;
        }
        uint64_t v88 = v821;
        char v469 = v824;
      }
      unsigned int v778 = *((_DWORD *)a3 + 2);
      if (v778 < 0x15)
      {
        uint64_t v466 = 0;
      }
      else
      {
        unsigned int v779 = (*a3)[40];
        if (v779)
        {
          v780 = v468;
          v781 = v469;
          v782 = v467;
          uint64_t v467 = v782;
          char v469 = v781;
          uint64_t v468 = v780;
          uint64_t v464 = v813;
          uint64_t v466 = (uint64_t)v783;
          unsigned int v778 = *((_DWORD *)a3 + 2);
        }
        else
        {
          uint64_t v466 = 0;
        }
        if (v778 >= 0x16)
        {
          unsigned int v784 = (*a3)[42];
          if (v784)
          {
            unsigned int v785 = v469;
            v786 = v467;
            uint64_t v467 = v786;
            char v469 = v785;
            uint64_t v464 = v813;
            uint64_t v465 = (uint64_t)v787;
            goto LABEL_1148;
          }
        }
      }
      uint64_t v465 = 0;
LABEL_1148:
      uint64_t v692 = (uint64_t)v887;
      uint64_t v694 = v899;
      uint64_t v693 = (uint64_t)v878;
      uint64_t v695 = (uint64_t)v817;
      if (!v920)
      {
        int v802 = v852;
        int v803 = 0;
        uint64_t v795 = v827;
        uint64_t v796 = v592;
        uint64_t v797 = v835;
        uint64_t v793 = v840;
        int v792 = v831;
        unsigned int v794 = v870;
        int v799 = v864;
        unsigned int v798 = v909;
        uint64_t v800 = (uint64_t)v817;
        goto LABEL_1153;
      }
      goto LABEL_1149;
    case 19:
      unsigned int v89 = *((_DWORD *)a3 + 2);
      if (v89 - 5 <= 0xFFFFFFFD) {
        goto LABEL_269;
      }
      int v90 = (uint64_t *)*a3;
      unint64_t v91 = *(void *)*a3;
      if (v89 < 4) {
        char v92 = 0;
      }
      else {
        char v92 = *((unsigned char *)v90 + 24);
      }
      unsigned __int8 v933 = v91 & 1;
      int v246 = *((_DWORD *)v90 + 2);
      int v247 = *((_DWORD *)v90 + 4);
      if (v247) {
      else
      }
        uint64_t v248 = 0;
      if (v91 <= 1) {
      uint64_t v59 = (uint64_t)llvm::DISubroutineType::getImpl(*(void **)(a2 + 208), v246, v92, (uint64_t)v248, v933, 1);
      }
      goto LABEL_1073;
    case 20:
      if ((*((_DWORD *)a3 + 2) - 23) <= 0xFFFFFFF6) {
        goto LABEL_269;
      }
      unsigned __int8 v933 = 1;
      uint64_t v93 = *(void *)(a2 + 208);
      uint64_t v94 = (uint64_t *)*a3;
      int v95 = (*a3)[2];
      unsigned int v96 = (*a3)[4];
      if (v96)
      {
        uint64_t v94 = (uint64_t *)*a3;
      }
      else
      {
        uint64_t v97 = 0;
      }
      int v261 = *((_DWORD *)v94 + 6);
      if (v261)
      {
        uint64_t v94 = (uint64_t *)*a3;
      }
      else
      {
        unsigned int v262 = 0;
      }
      uint64_t v875 = v94[4];
      int v280 = *((_DWORD *)v94 + 10);
      if (v280)
      {
        uint64_t v94 = (uint64_t *)*a3;
      }
      else
      {
        unint64_t v281 = 0;
      }
      int v290 = *((_DWORD *)v94 + 12);
      int v291 = *((_DWORD *)v94 + 14);
      if (v291)
      {
        uint64_t v94 = (uint64_t *)*a3;
      }
      else
      {
        v871 = 0;
      }
      int v865 = *((_DWORD *)v94 + 16);
      int v295 = *((_DWORD *)v94 + 18);
      if (v295)
      {
        uint64_t v94 = (uint64_t *)*a3;
      }
      else
      {
        v859 = 0;
      }
      int v302 = *((_DWORD *)v94 + 20);
      if (v302)
      {
        uint64_t v94 = (uint64_t *)*a3;
      }
      else
      {
        v853 = 0;
      }
      int v303 = *((_DWORD *)v94 + 24);
      if (v303)
      {
        uint64_t v94 = (uint64_t *)*a3;
      }
      else
      {
        v846 = 0;
      }
      int v304 = *((_DWORD *)v94 + 26);
      if (v304) {
      else
      }
        uint64_t v305 = 0;
      unsigned int v306 = *((_DWORD *)a3 + 2);
      uint64_t v910 = (uint64_t)v262;
      uint64_t v921 = (uint64_t)v97;
      uint64_t v895 = (uint64_t)v281;
      int v884 = v290;
      if (v306 >= 0x10)
      {
        uint64_t v308 = (uint64_t *)*a3;
        unsigned int v309 = (*a3)[30];
        if (!v309)
        {
          uint64_t v307 = 0;
          goto LABEL_589;
        }
        int v310 = v95;
        uint64_t v311 = v93;
        long long v312 = v305;
        uint64_t v305 = v312;
        uint64_t v93 = v311;
        int v95 = v310;
        uint64_t v307 = (uint64_t)v313;
        unsigned int v306 = *((_DWORD *)a3 + 2);
      }
      else
      {
        uint64_t v307 = 0;
      }
      if (v306 < 0xF)
      {
        int v314 = v95;
        uint64_t v315 = v93;
        uint64_t v316 = 0;
        int v317 = 0;
        uint64_t v318 = 0;
LABEL_591:
        char v472 = 0;
        char v473 = 0;
        unsigned int v474 = 0;
        char v475 = 1;
        goto LABEL_910;
      }
      uint64_t v308 = (uint64_t *)*a3;
LABEL_589:
      uint64_t v318 = v308[14];
      if (v306 < 0x11)
      {
        int v314 = v95;
        uint64_t v315 = v93;
        uint64_t v316 = 0;
        int v317 = 0;
        goto LABEL_591;
      }
      char v475 = v308[16] != 0;
      if (v306 == 17)
      {
        int v314 = v95;
        uint64_t v315 = v93;
        uint64_t v316 = 0;
        int v317 = 0;
        char v472 = 0;
      }
      else
      {
        char v472 = v308[17] != 0;
        if (v306 >= 0x13)
        {
          int v317 = *((_DWORD *)v308 + 36);
          if (v306 != 19)
          {
            char v473 = v308[19] != 0;
            if (v306 >= 0x15)
            {
              BOOL v830 = v308[16] != 0;
              uint64_t v834 = v308[14];
              uint64_t v838 = v307;
              v844 = v305;
              int v314 = v95;
              uint64_t v315 = v93;
              int v776 = *((_DWORD *)v308 + 40);
              if (v776)
              {
                unsigned int v306 = *((_DWORD *)a3 + 2);
              }
              else
              {
                uint64_t v316 = 0;
              }
              if (v306 >= 0x16 && (unsigned int v804 = (*a3)[42]) != 0) {
              else
              }
                unsigned int v474 = 0;
              uint64_t v307 = v838;
              uint64_t v305 = v844;
              uint64_t v318 = v834;
              char v475 = v830;
LABEL_910:
              *(void *)&long long v807 = v846;
              *((void *)&v807 + 1) = v305;
              *(void *)&long long v806 = v859;
              *((void *)&v806 + 1) = v853;
              v645 = (__n128 *)llvm::DICompileUnit::getImpl(v315, v314, v921, v910, v875 != 0, v895, v884, (uint64_t)v871, v865, v806, v807, v307, v318, v475, v472, v317, v473, (uint64_t)v316, (uint64_t)v474,
                                 1);
              ++*(_DWORD *)a8;
              unsigned int v646 = (*a3)[22];
              if (v646)
              {
                if (MetadataFwdRef)
                {
                  *(void *)&long long v938 = v645;
                  *((void *)&v938 + 1) = MetadataFwdRef;
                  std::vector<std::pair<llvm::DICompileUnit *,llvm::Metadata *>>::push_back[abi:nn180100]((char **)(a2 + 728), &v938);
                }
              }
              goto LABEL_1076;
            }
            int v314 = v95;
            uint64_t v315 = v93;
            uint64_t v316 = 0;
LABEL_909:
            unsigned int v474 = 0;
            goto LABEL_910;
          }
          int v314 = v95;
          uint64_t v315 = v93;
          uint64_t v316 = 0;
        }
        else
        {
          int v314 = v95;
          uint64_t v315 = v93;
          uint64_t v316 = 0;
          int v317 = 0;
        }
      }
      char v473 = 0;
      goto LABEL_909;
    case 21:
      unsigned int v98 = *((_DWORD *)a3 + 2);
      if (v98 - 22 <= 0xFFFFFFFB) {
        goto LABEL_269;
      }
      uint64_t v99 = (uint64_t *)*a3;
      uint64_t v100 = *(void *)*a3;
      if ((v100 & 4) != 0)
      {
        int v249 = *((_DWORD *)v99 + 22);
        unsigned int v103 = *((_DWORD *)v99 + 18) | 0x100;
        if ((v249 & 0x200000) != 0)
        {
          int v102 = v249 & 0x3FDFFFFF;
        }
        else
        {
          unsigned int v103 = *((_DWORD *)v99 + 18);
          int v102 = *((_DWORD *)v99 + 22);
        }
      }
      else
      {
        int v101 = *((_DWORD *)v99 + 26);
        int v102 = (v101 & 0x200000) != 0 ? v101 & 0x3FDFFFFF : *((_DWORD *)v99 + 26);
        unsigned int v103 = ((v101 & 0x200000u) >> 13) | (4 * (v99[7] != 0)) | (8 * (v99[8] != 0)) | (16 * (v99[14] != 0)) | v99[11] & 3;
      }
      int v250 = v100 & 1 | ((v103 & 8) != 0);
      unsigned __int8 v933 = v100 & 1 | ((v103 & 8) != 0);
      if ((v100 & 6) == 4) {
        goto LABEL_269;
      }
      if ((v100 & 6) == 2)
      {
        if (v98 <= 0x12) {
          goto LABEL_269;
        }
      }
      else if ((v100 & 4) != 0)
      {
        BOOL v876 = 0;
        int v320 = 0;
        int v321 = 0;
        BOOL v885 = v98 > 0x12;
        BOOL v896 = v98 > 0x13;
        BOOL v322 = 1;
        BOOL v323 = 1;
        goto LABEL_637;
      }
      BOOL v885 = 0;
      BOOL v896 = 0;
      BOOL v319 = v98 > 0x12;
      int v320 = 2;
      if (v98 <= 0x12) {
        int v321 = 2;
      }
      else {
        int v321 = 3;
      }
      if ((v100 & 2) != 0) {
        BOOL v319 = 0;
      }
      BOOL v876 = v319;
      BOOL v322 = v98 > 0x13;
      BOOL v323 = v98 > 0x14;
LABEL_637:
      int v912 = v103;
      uint64_t v501 = v99[v321 | 0xCu];
      if (v501)
      {
        int v250 = v933;
        uint64_t v99 = (uint64_t *)*a3;
      }
      else
      {
        v925 = 0;
      }
      v873 = *(void **)(a2 + 208);
      int v502 = *((_DWORD *)v99 + 2);
      if (!v250)
      {
        if (v502) {
        else
        }
          unsigned int v504 = 0;
        __int16 v648 = (uint64_t *)*a3;
        unsigned int v649 = (*a3)[4];
        if (v649)
        {
          __int16 v648 = (uint64_t *)*a3;
        }
        else
        {
          v833 = 0;
        }
        int v655 = *((_DWORD *)v648 + 6);
        if (v655)
        {
          __int16 v648 = (uint64_t *)*a3;
        }
        else
        {
          v829 = 0;
        }
        int v656 = *((_DWORD *)v648 + 8);
        if (v656)
        {
          __int16 v648 = (uint64_t *)*a3;
        }
        else
        {
          v825 = 0;
        }
        int v863 = *((_DWORD *)v648 + 10);
        int v657 = *((_DWORD *)v648 + 12);
        if (v657)
        {
          __int16 v648 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v822 = 0;
        }
        uint64_t v857 = v648[v320 + 7];
        uint64_t v658 = v648[v320 | 8u];
        if (v658) {
        else
        }
          v659 = 0;
        v660 = (uint64_t *)*a3;
        if (v322) {
          uint64_t v843 = v660[v321 | 0x10u];
        }
        else {
          LODWORD(v843) = 0;
        }
        uint64_t v837 = v660[v320 + 10];
        uint64_t v661 = v660[v321 + 13];
        if (v661)
        {
          v660 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v819 = 0;
        }
        uint64_t v662 = v660[v321 + 14];
        if (v662)
        {
          v660 = (uint64_t *)*a3;
        }
        else
        {
          v815 = 0;
        }
        uint64_t v663 = v660[v321 + 15];
        if (v663) {
        else
        }
          uint64_t v664 = 0;
        int v665 = v102;
        if (v323 && (uint64_t v666 = *(void *)&(*a3)[2 * (v321 + 17)], v666)) {
        else
        }
          uint64_t v667 = 0;
        uint64_t v668 = v100 << 62;
        if (v885 && (uint64_t v669 = *(void *)&(*a3)[2 * (v321 + 18)], v669)) {
        else
        }
          unsigned __int32 v670 = 0;
        uint64_t v671 = (uint64_t *)((unint64_t)v925 & (v668 >> 63));
        if (v896 && (uint64_t v672 = *(void *)&(*a3)[2 * (v321 + 19)], v672)) {
        else
        }
          std::string::size_type v673 = 0;
        BOOL v629 = v876;
        uint64_t v630 = (__n128 *)llvm::DISubprogram::getImpl(v873, v869, v833, v829, v825, v863, v822, v857, v851, v837, v843, v665, v912, v671, v819, v815, v664, v667, v670,
                           v673,
                           0,
                           1);
        goto LABEL_974;
      }
      if (v502) {
      else
      }
        uint64_t v503 = 0;
      int v608 = (uint64_t *)*a3;
      unsigned int v609 = (*a3)[4];
      if (v609)
      {
        int v608 = (uint64_t *)*a3;
      }
      else
      {
        v836 = 0;
      }
      int v610 = *((_DWORD *)v608 + 6);
      if (v610)
      {
        int v608 = (uint64_t *)*a3;
      }
      else
      {
        uint64_t v832 = 0;
      }
      int v611 = *((_DWORD *)v608 + 8);
      if (v611)
      {
        int v608 = (uint64_t *)*a3;
      }
      else
      {
        v828 = 0;
      }
      int v862 = *((_DWORD *)v608 + 10);
      int v612 = *((_DWORD *)v608 + 12);
      if (v612)
      {
        int v608 = (uint64_t *)*a3;
      }
      else
      {
        v823 = 0;
      }
      uint64_t v856 = v608[v320 + 7];
      uint64_t v613 = v608[v320 | 8u];
      if (v613) {
      else
      }
        v614 = 0;
      v615 = (uint64_t *)*a3;
      if (v322) {
        uint64_t v820 = v615[v321 | 0x10u];
      }
      else {
        LODWORD(v820) = 0;
      }
      uint64_t v842 = v615[v320 + 10];
      uint64_t v616 = v615[v321 + 13];
      if (v616)
      {
        v615 = (uint64_t *)*a3;
      }
      else
      {
        v818 = 0;
      }
      uint64_t v617 = v615[v321 + 14];
      if (v617)
      {
        v615 = (uint64_t *)*a3;
      }
      else
      {
        v814 = 0;
      }
      uint64_t v618 = v615[v321 + 15];
      if (v618) {
      else
      }
        uint64_t v619 = 0;
      if (v323 && (uint64_t v620 = *(void *)&(*a3)[2 * (v321 + 17)], v620)) {
      else
      }
        v621 = 0;
      uint64_t v622 = v100 << 62;
      if (v885)
      {
        int v623 = v102;
        uint64_t v624 = *(void *)&(*a3)[2 * (v321 + 18)];
        if (v624)
        {
          goto LABEL_859;
        }
      }
      else
      {
        int v623 = v102;
      }
      uint64_t v625 = 0;
LABEL_859:
      unint64_t v626 = (uint64_t *)((unint64_t)v925 & (v622 >> 63));
      if (v896 && (uint64_t v627 = *(void *)&(*a3)[2 * (v321 + 19)], v627)) {
      else
      }
        v628 = 0;
      BOOL v629 = v876;
      uint64_t v630 = (__n128 *)llvm::DISubprogram::getImpl(v873, v868, v836, v832, v828, v862, v823, v856, v850, v842, v820, v623, v912, v626, v818, v814, v619, v621, v625,
                         v628,
                         1,
                         1);
LABEL_974:
      int v674 = (llvm::MDNode *)v630;
      ++*(_DWORD *)a8;
      if (v925) {
        BOOL v675 = v629;
      }
      else {
        BOOL v675 = 0;
      }
      if (v675 && *(unsigned char *)v925 == 1)
      {
        uint64_t v676 = *(unsigned char *)(*((void *)v925 + 16) + 16) ? 0 : *((void *)v925 + 16);
        *(void *)&long long v938 = v676;
        if (v676)
        {
          if (*(unsigned char *)(v676 + 35))
          {
            llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::FindAndConstruct((_DWORD *)(a2 + 752), (uint64_t *)&v938)[1] = (uint64_t)v674;
          }
          else if (*(void *)(v676 + 72) != v676 + 72)
          {
            llvm::Value::setMetadata(v676, 0, v674);
          }
        }
      }
      goto LABEL_1076;
    case 22:
      if (*((_DWORD *)a3 + 2) != 5) {
        goto LABEL_269;
      }
      uint64_t v104 = (uint64_t *)*a3;
      uint64_t v105 = *(void *)*a3;
      unsigned __int8 v933 = v105 != 0;
      uint64_t v106 = *(void **)(a2 + 208);
      int v107 = *((_DWORD *)v104 + 2);
      if (v105)
      {
        if (v107)
        {
          uint64_t v104 = (uint64_t *)*a3;
        }
        else
        {
          unint64_t v108 = 0;
        }
        int v339 = *((_DWORD *)v104 + 4);
        if (v339)
        {
          uint64_t v104 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v340 = 0;
        }
        int v360 = *((_DWORD *)v104 + 6);
        unsigned int v361 = *((_DWORD *)v104 + 8);
        unint64_t v362 = v106;
        uint64_t v363 = (uint64_t)v108;
        int v364 = 1;
      }
      else
      {
        if (v107)
        {
          uint64_t v104 = (uint64_t *)*a3;
        }
        else
        {
          unint64_t v263 = 0;
        }
        int v526 = *((_DWORD *)v104 + 4);
        if (v526)
        {
          uint64_t v104 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v340 = 0;
        }
        int v360 = *((_DWORD *)v104 + 6);
        unsigned int v361 = *((_DWORD *)v104 + 8);
        unint64_t v362 = v106;
        uint64_t v363 = (uint64_t)v263;
        int v364 = 0;
      }
      uint64_t v59 = (uint64_t)llvm::DILexicalBlock::getImpl(v362, v363, (uint64_t)v340, v360, v361, v364, 1);
      goto LABEL_1073;
    case 23:
      if (*((_DWORD *)a3 + 2) != 4) {
        goto LABEL_269;
      }
      uint64_t v109 = (uint64_t *)*a3;
      uint64_t v110 = *(void *)*a3;
      unsigned __int8 v933 = v110 != 0;
      unsigned int v111 = *(void **)(a2 + 208);
      int v112 = *((_DWORD *)v109 + 2);
      if (v110)
      {
        if (v112)
        {
          uint64_t v109 = (uint64_t *)*a3;
        }
        else
        {
          int v113 = 0;
        }
        int v341 = *((_DWORD *)v109 + 4);
        if (v341)
        {
          uint64_t v109 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v342 = 0;
        }
        int v365 = *((_DWORD *)v109 + 6);
        uint64_t v366 = v111;
        uint64_t v367 = (uint64_t)v113;
        int v368 = 1;
      }
      else
      {
        if (v112)
        {
          uint64_t v109 = (uint64_t *)*a3;
        }
        else
        {
          unint64_t v264 = 0;
        }
        int v527 = *((_DWORD *)v109 + 4);
        if (v527)
        {
          uint64_t v109 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v342 = 0;
        }
        int v365 = *((_DWORD *)v109 + 6);
        uint64_t v366 = v111;
        uint64_t v367 = (uint64_t)v264;
        int v368 = 0;
      }
      uint64_t v59 = (uint64_t)llvm::DILexicalBlockFile::getImpl(v366, v367, (uint64_t)v342, v365, v368, 1);
      goto LABEL_1073;
    case 24:
      int v114 = *((_DWORD *)a3 + 2);
      if (v114 == 5)
      {
        int v115 = (uint64_t *)*a3;
        unsigned int v116 = (*a3)[6];
        if (!v116)
        {
LABEL_110:
          uint64_t v117 = 0;
LABEL_241:
          unint64_t v231 = *v115;
          unsigned __int8 v933 = *(unsigned char *)v115 & 1;
          unint64_t v232 = *(void **)(a2 + 208);
          int v233 = *((_DWORD *)v115 + 2);
          if (v231)
          {
            if (v233) {
            else
            }
              unint64_t v234 = 0;
            uint64_t v335 = (v231 >> 1) & 1;
            int v336 = v232;
            uint64_t v337 = (uint64_t)v117;
            int v338 = 1;
          }
          else
          {
            if (v233) {
            else
            }
              unint64_t v234 = 0;
            uint64_t v335 = (v231 >> 1) & 1;
            int v336 = v232;
            uint64_t v337 = (uint64_t)v117;
            int v338 = 0;
          }
          uint64_t v59 = (uint64_t)llvm::DINamespace::getImpl(v336, (uint64_t)v234, v337, v335, v338, 1);
          goto LABEL_1073;
        }
      }
      else
      {
        if (v114 != 3)
        {
LABEL_269:
          unint64_t v154 = "Invalid record";
          goto LABEL_270;
        }
        int v115 = (uint64_t *)*a3;
        unsigned int v116 = (*a3)[4];
        if (!v116) {
          goto LABEL_110;
        }
      }
      int v115 = (uint64_t *)*a3;
      goto LABEL_241;
    case 25:
      if ((*((_DWORD *)a3 + 2) - 5) <= 0xFFFFFFFD) {
        goto LABEL_269;
      }
      uint64_t v118 = (uint64_t *)*a3;
      uint64_t v119 = *(void *)*a3;
      unsigned __int8 v933 = v119 != 0;
      std::string::value_type v120 = *(void **)(a2 + 208);
      int v121 = *((_DWORD *)v118 + 2);
      if (v119)
      {
        if (v121)
        {
          uint64_t v118 = (uint64_t *)*a3;
        }
        else
        {
          std::string::size_type v122 = 0;
        }
        int v343 = *((_DWORD *)v118 + 4);
        if (v343) {
        else
        }
          int v344 = 0;
        char v371 = *((_DWORD *)a3 + 2) == 4
            && (unsigned int v370 = (*a3)[6]) != 0
        uint64_t v372 = v120;
        uint64_t v373 = (uint64_t)v122;
        uint64_t v374 = (uint64_t)v369;
        int v375 = 1;
      }
      else
      {
        if (v121)
        {
          uint64_t v118 = (uint64_t *)*a3;
        }
        else
        {
          unint64_t v265 = 0;
        }
        int v528 = *((_DWORD *)v118 + 4);
        if (v528) {
        else
        }
          uint64_t v529 = 0;
        char v371 = *((_DWORD *)a3 + 2) == 4
            && (unsigned int v546 = (*a3)[6]) != 0
        uint64_t v372 = v120;
        uint64_t v373 = (uint64_t)v265;
        uint64_t v374 = (uint64_t)v545;
        int v375 = 0;
      }
      uint64_t v59 = (uint64_t)llvm::DITemplateTypeParameter::getImpl(v372, v373, v374, v371, v375, 1);
      goto LABEL_1073;
    case 26:
      if ((*((_DWORD *)a3 + 2) - 7) <= 0xFFFFFFFD) {
        goto LABEL_269;
      }
      unsigned int v123 = (uint64_t *)*a3;
      uint64_t v124 = *(void *)*a3;
      unsigned __int8 v933 = v124 != 0;
      int v125 = *(void **)(a2 + 208);
      int v126 = *((_DWORD *)v123 + 2);
      int v127 = *((_DWORD *)v123 + 4);
      if (v124)
      {
        if (v127)
        {
          unsigned int v123 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v128 = 0;
        }
        int v345 = *((_DWORD *)v123 + 6);
        if (v345) {
        else
        }
          uint64_t v346 = 0;
        if (*((_DWORD *)a3 + 2) == 6)
        {
          uint64_t v377 = (uint64_t *)*a3;
          unsigned int v378 = (*a3)[8];
          if (!v378)
          {
            BOOL v379 = 0;
LABEL_809:
            unsigned int v380 = *((_DWORD *)v377 + 10);
            if (!v380) {
              goto LABEL_810;
            }
            goto LABEL_465;
          }
          if (*((_DWORD *)a3 + 2) == 6)
          {
            uint64_t v377 = (uint64_t *)*a3;
            goto LABEL_809;
          }
        }
        else
        {
          BOOL v379 = 0;
        }
        unsigned int v380 = (*a3)[8];
        if (!v380)
        {
LABEL_810:
          unsigned int v381 = 0;
          goto LABEL_811;
        }
LABEL_465:
LABEL_811:
        uint64_t v597 = v125;
        int v598 = v126;
        uint64_t v599 = (uint64_t)v128;
        uint64_t v600 = (uint64_t)v376;
        char v601 = v379;
        int v602 = 1;
        goto LABEL_920;
      }
      if (v127)
      {
        unsigned int v123 = (uint64_t *)*a3;
      }
      else
      {
        uint64_t v266 = 0;
      }
      int v530 = *((_DWORD *)v123 + 6);
      if (v530) {
      else
      }
        int v531 = 0;
      if (*((_DWORD *)a3 + 2) == 6)
      {
        v548 = (uint64_t *)*a3;
        unsigned int v549 = (*a3)[8];
        if (!v549)
        {
          BOOL v550 = 0;
LABEL_917:
          unsigned int v551 = *((_DWORD *)v548 + 10);
          if (!v551) {
            goto LABEL_918;
          }
          goto LABEL_736;
        }
        if (*((_DWORD *)a3 + 2) == 6)
        {
          v548 = (uint64_t *)*a3;
          goto LABEL_917;
        }
      }
      else
      {
        BOOL v550 = 0;
      }
      unsigned int v551 = (*a3)[8];
      if (!v551)
      {
LABEL_918:
        unsigned int v381 = 0;
LABEL_919:
        uint64_t v597 = v125;
        int v598 = v126;
        uint64_t v599 = (uint64_t)v266;
        uint64_t v600 = (uint64_t)v547;
        char v601 = v550;
        int v602 = 0;
LABEL_920:
        uint64_t v59 = (uint64_t)llvm::DITemplateValueParameter::getImpl(v597, v598, v599, v600, v601, (uint64_t)v381, v602, 1);
        goto LABEL_1073;
      }
LABEL_736:
      goto LABEL_919;
    case 27:
      unsigned int v129 = *((_DWORD *)a3 + 2);
      if (v129 - 14 <= 0xFFFFFFFC) {
        goto LABEL_269;
      }
      uint64_t v130 = (uint64_t *)*a3;
      unint64_t v131 = *(void *)*a3;
      int v132 = v131 & 1;
      unsigned __int8 v933 = *(unsigned char *)*a3 & 1;
      unint64_t v133 = v131 >> 1;
      if (v133)
      {
        if (v133 == 1)
        {
          uint64_t v333 = *(void **)(a2 + 208);
          int v334 = *((_DWORD *)v130 + 2);
          if (v132)
          {
            if (v334)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v922 = 0;
            }
            int v696 = *((_DWORD *)v130 + 4);
            if (v696)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v915 = 0;
            }
            int v698 = *((_DWORD *)v130 + 6);
            if (v698)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v901 = 0;
            }
            int v701 = *((_DWORD *)v130 + 8);
            if (v701)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v700 = 0;
            }
            int v702 = *((_DWORD *)v130 + 10);
            int v705 = *((_DWORD *)v130 + 12);
            if (v705) {
            else
            }
              unint64_t v706 = 0;
            uint64_t v713 = (uint64_t *)*a3;
            uint64_t v714 = *((void *)*a3 + 7);
            uint64_t v715 = *((void *)*a3 + 8);
            unsigned int v716 = (*a3)[20];
            if (v716)
            {
              uint64_t v713 = (uint64_t *)*a3;
            }
            else
            {
              unsigned __int8 v712 = 0;
            }
            char v717 = v715 != 0;
            char v718 = v714 != 0;
            uint64_t v719 = v713[11];
            v810[4] = 1;
            *(_DWORD *)v810 = 1;
          }
          else
          {
            if (v334)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v922 = 0;
            }
            int v691 = *((_DWORD *)v130 + 4);
            if (v691)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v915 = 0;
            }
            int v697 = *((_DWORD *)v130 + 6);
            if (v697)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v901 = 0;
            }
            int v699 = *((_DWORD *)v130 + 8);
            if (v699)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v700 = 0;
            }
            int v702 = *((_DWORD *)v130 + 10);
            int v703 = *((_DWORD *)v130 + 12);
            if (v703) {
            else
            }
              v704 = 0;
            uint64_t v708 = (uint64_t *)*a3;
            uint64_t v709 = *((void *)*a3 + 7);
            uint64_t v710 = *((void *)*a3 + 8);
            unsigned int v711 = (*a3)[20];
            if (v711)
            {
              uint64_t v708 = (uint64_t *)*a3;
            }
            else
            {
              unsigned __int8 v712 = 0;
            }
            char v717 = v710 != 0;
            char v718 = v709 != 0;
            uint64_t v719 = v708[11];
            v810[4] = 1;
            *(_DWORD *)v810 = 0;
          }
          uint64_t v59 = (uint64_t)llvm::DIGlobalVariable::getImpl(v333, (uint64_t)v922, (uint64_t)v915, (uint64_t)v901, (uint64_t)v700, v702, (uint64_t)v707, v718, v717, (uint64_t)v712, 0, v719, 0, *(int *)v810, v810[4]);
          goto LABEL_1073;
        }
        if (v133 == 2)
        {
          if (v129 >= 0xD && (int v134 = *((_DWORD *)v130 + 24)) != 0)
          {
            int v132 = v933;
            uint64_t v130 = (uint64_t *)*a3;
          }
          else
          {
            int v135 = 0;
          }
          uint64_t v488 = *(void **)(a2 + 208);
          int v489 = *((_DWORD *)v130 + 2);
          if (v132)
          {
            if (v489)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v911 = 0;
            }
            int v677 = *((_DWORD *)v130 + 4);
            if (v677)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v900 = 0;
            }
            int v678 = *((_DWORD *)v130 + 6);
            if (v678)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v889 = 0;
            }
            int v679 = *((_DWORD *)v130 + 8);
            uint64_t v926 = (uint64_t)v135;
            if (v679)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v879 = 0;
            }
            int v680 = *((_DWORD *)v130 + 10);
            int v681 = *((_DWORD *)v130 + 12);
            if (v681) {
            else
            }
              unsigned __int8 v682 = 0;
            unint64_t v684 = (uint64_t *)*a3;
            uint64_t v685 = *((void *)*a3 + 7);
            uint64_t v686 = *((void *)*a3 + 8);
            unsigned int v687 = (*a3)[18];
            if (v687)
            {
              unint64_t v684 = (uint64_t *)*a3;
            }
            else
            {
              v688 = 0;
            }
            int v689 = *((_DWORD *)v684 + 20);
            if (v689)
            {
              unint64_t v684 = (uint64_t *)*a3;
            }
            else
            {
              uint64_t v690 = 0;
            }
            uint64_t v59 = (uint64_t)llvm::DIGlobalVariable::getImpl(v488, (uint64_t)v911, (uint64_t)v900, (uint64_t)v889, (uint64_t)v879, v680, (uint64_t)v683, v685 != 0, v686 != 0, (uint64_t)v688, (uint64_t)v690, v684[11], v926, 1, 1);
          }
          else
          {
            if (v489)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v914 = 0;
            }
            int v720 = *((_DWORD *)v130 + 4);
            if (v720)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v902 = 0;
            }
            int v723 = *((_DWORD *)v130 + 6);
            if (v723)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v890 = 0;
            }
            int v724 = *((_DWORD *)v130 + 8);
            v874 = v488;
            if (v724)
            {
              uint64_t v130 = (uint64_t *)*a3;
            }
            else
            {
              v880 = 0;
            }
            int v725 = *((_DWORD *)v130 + 10);
            int v726 = *((_DWORD *)v130 + 12);
            uint64_t v727 = (uint64_t)v135;
            if (v726) {
            else
            }
              v728 = 0;
            int v730 = (uint64_t *)*a3;
            uint64_t v731 = *((void *)*a3 + 7);
            uint64_t v732 = *((void *)*a3 + 8);
            unsigned int v733 = (*a3)[18];
            if (v733)
            {
              int v730 = (uint64_t *)*a3;
            }
            else
            {
              int v734 = 0;
            }
            int v735 = *((_DWORD *)v730 + 20);
            if (v735)
            {
              int v730 = (uint64_t *)*a3;
            }
            else
            {
              __int16 v736 = 0;
            }
            uint64_t v59 = (uint64_t)llvm::DIGlobalVariable::getImpl(v874, (uint64_t)v914, (uint64_t)v902, (uint64_t)v890, (uint64_t)v880, v725, (uint64_t)v729, v731 != 0, v732 != 0, (uint64_t)v734, (uint64_t)v736, v730[11], v727, 0, 1);
          }
          goto LABEL_1073;
        }
        goto LABEL_269;
      }
      *(unsigned char *)(a2 + 1042) = 1;
      int v331 = *((_DWORD *)v130 + 18);
      if (v331)
      {
        unsigned int v129 = *((_DWORD *)a3 + 2);
      }
      else
      {
        uint64_t v332 = 0;
      }
      if (v129 < 0xC)
      {
        LODWORD(v638) = 0;
LABEL_886:
        int v913 = v638;
        if (v332 && *(unsigned char *)v332 == 1)
        {
          uint64_t v639 = *((void *)v332 + 16);
          int v640 = *(unsigned __int8 *)(v639 + 16);
          if (v639 && v640 == 3)
          {
            uint64_t v332 = 0;
            v641 = (llvm::Value *)v639;
            goto LABEL_1084;
          }
          uint64_t v332 = 0;
          v641 = 0;
          if (!v639 || v640 != 16)
          {
LABEL_1084:
            v741 = (uint64_t *)*a3;
            unsigned int v742 = (*a3)[2];
            v927 = v641;
            v903 = *(void **)(a2 + 208);
            if (v933)
            {
              if (v742)
              {
                v741 = (uint64_t *)*a3;
              }
              else
              {
                v891 = 0;
              }
              int v743 = *((_DWORD *)v741 + 4);
              if (v743)
              {
                v741 = (uint64_t *)*a3;
              }
              else
              {
                v881 = 0;
              }
              int v744 = *((_DWORD *)v741 + 6);
              if (v744)
              {
                v741 = (uint64_t *)*a3;
              }
              else
              {
                unsigned int v745 = 0;
              }
              int v746 = *((_DWORD *)v741 + 8);
              if (v746)
              {
                v741 = (uint64_t *)*a3;
              }
              else
              {
                __int16 v747 = 0;
              }
              int v748 = *((_DWORD *)v741 + 10);
              int v749 = *((_DWORD *)v741 + 12);
              if (v749) {
              else
              }
                __int16 v750 = 0;
              v752 = (uint64_t *)*a3;
              uint64_t v753 = *((void *)*a3 + 7);
              uint64_t v754 = v752[8];
              int v755 = *((_DWORD *)v752 + 20);
              if (v755) {
              else
              }
                v756 = 0;
              v757 = llvm::DIGlobalVariable::getImpl(v903, (uint64_t)v891, (uint64_t)v881, (uint64_t)v745, (uint64_t)v747, v748, (uint64_t)v751, v753 != 0, v754 != 0, (uint64_t)v756, 0, v913, 0, 1, 1);
            }
            else
            {
              if (v742)
              {
                v741 = (uint64_t *)*a3;
              }
              else
              {
                v892 = 0;
              }
              int v758 = *((_DWORD *)v741 + 4);
              if (v758)
              {
                v741 = (uint64_t *)*a3;
              }
              else
              {
                v882 = 0;
              }
              int v759 = *((_DWORD *)v741 + 6);
              if (v759)
              {
                v741 = (uint64_t *)*a3;
              }
              else
              {
                v760 = 0;
              }
              int v761 = *((_DWORD *)v741 + 8);
              if (v761)
              {
                v741 = (uint64_t *)*a3;
              }
              else
              {
                v762 = 0;
              }
              int v763 = *((_DWORD *)v741 + 10);
              int v764 = *((_DWORD *)v741 + 12);
              if (v764) {
              else
              }
                v765 = 0;
              v767 = (uint64_t *)*a3;
              uint64_t v768 = *((void *)*a3 + 7);
              uint64_t v769 = v767[8];
              int v770 = *((_DWORD *)v767 + 20);
              if (v770) {
              else
              }
                v771 = 0;
              v757 = llvm::DIGlobalVariable::getImpl(v903, (uint64_t)v892, (uint64_t)v882, (uint64_t)v760, (uint64_t)v762, v763, (uint64_t)v766, v768 != 0, v769 != 0, (uint64_t)v771, 0, v913, 0, 0, 1);
            }
            uint64_t v772 = (uint64_t)v757;
            if (!((unint64_t)v927 | (unint64_t)v332)) {
              goto LABEL_1129;
            }
            v773 = *(void **)(a2 + 208);
            v774 = v332;
            if (!v332) {
              v774 = llvm::DIExpression::getImpl(*(void **)(a2 + 208), 0, 0, 0, 1);
            }
            v775 = llvm::DIGlobalVariableExpression::getImpl(v773, v772, (uint64_t)v774, 1, 1);
            if (v927) {
              llvm::Value::addMetadata(v927, 0, v775);
            }
            if (!v332) {
LABEL_1129:
            }
              v775 = (llvm::MDNode *)v772;
            int v737 = *(_DWORD *)a8;
            unint64_t v738 = a2;
            uint64_t v21 = (__n128 *)v775;
            goto LABEL_1075;
          }
          v739 = *(void **)(a2 + 208);
          *(void *)&long long v938 = 16;
          v740 = (void *)(v639 + 24);
          if (*(_DWORD *)(v639 + 32) >= 0x41u) {
            v740 = (void *)*v740;
          }
          *((void *)&v938 + 1) = *v740;
          v939[0] = 159;
          uint64_t v332 = llvm::DIExpression::getImpl(v739, &v938, 3, 0, 1);
        }
        v641 = 0;
        goto LABEL_1084;
      }
      unint64_t v638 = *((void *)*a3 + 11);
      if (!HIDWORD(v638)) {
        goto LABEL_886;
      }
      goto LABEL_347;
    case 28:
      unsigned int v136 = *((_DWORD *)a3 + 2);
      if (v136 - 11 <= 0xFFFFFFFC) {
        goto LABEL_269;
      }
      std::string::size_type v137 = (uint64_t *)*a3;
      uint64_t v138 = *(void *)*a3;
      int v139 = v138 & 1;
      unsigned __int8 v933 = *(unsigned char *)*a3 & 1;
      if ((v138 & 2) != 0)
      {
        unint64_t v140 = v137[8];
        if (HIDWORD(v140))
        {
LABEL_347:
          unint64_t v154 = "Alignment value is too large";
LABEL_270:
          *(void *)&long long v938 = v154;
          __int16 v940 = 259;
          error(v8);
        }
        uint64_t v144 = v137[7];
        if (v136 >= 0xA && (int v251 = *((_DWORD *)v137 + 18)) != 0)
        {
          BOOL v142 = 0;
          int v139 = v933;
          std::string::size_type v137 = (uint64_t *)*a3;
        }
        else
        {
          BOOL v142 = 0;
          v906 = 0;
        }
      }
      else
      {
        LODWORD(v140) = 0;
        v906 = 0;
        BOOL v141 = v136 > 8;
        BOOL v142 = v136 > 8;
        uint64_t v143 = 7;
        if (v141) {
          uint64_t v143 = 8;
        }
        uint64_t v144 = v137[v143];
      }
      uint64_t v490 = v137[v142 + 1];
      v924 = *(void **)(a2 + 208);
      if (v139)
      {
        if (v490)
        {
          std::string::size_type v137 = (uint64_t *)*a3;
        }
        else
        {
          v897 = 0;
        }
        uint64_t v491 = v137[v142 | 2u];
        if (v491)
        {
          std::string::size_type v137 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v492 = 0;
        }
        uint64_t v493 = v137[v142 + 3];
        if (v493)
        {
          std::string::size_type v137 = (uint64_t *)*a3;
        }
        else
        {
          unint64_t v494 = 0;
        }
        uint64_t v495 = v137[v142 | 4u];
        uint64_t v496 = v137[v142 + 5];
        if (v496) {
        else
        }
          unint64_t v497 = 0;
        uint64_t v59 = (uint64_t)llvm::DILocalVariable::getImpl(v924, (uint64_t)v897, (uint64_t)v492, (uint64_t)v494, v495, (uint64_t)v498, *(void *)&(*a3)[2 * (v142 | 6)], v144, v140, (uint64_t)v906, 1, 1);
      }
      else
      {
        if (v490)
        {
          std::string::size_type v137 = (uint64_t *)*a3;
        }
        else
        {
          v898 = 0;
        }
        uint64_t v631 = v137[v142 | 2u];
        if (v631)
        {
          std::string::size_type v137 = (uint64_t *)*a3;
        }
        else
        {
          v888 = 0;
        }
        uint64_t v632 = v137[v142 + 3];
        if (v632)
        {
          std::string::size_type v137 = (uint64_t *)*a3;
        }
        else
        {
          v633 = 0;
        }
        uint64_t v634 = v137[v142 | 4u];
        uint64_t v635 = v137[v142 + 5];
        if (v635) {
        else
        }
          BOOL v636 = 0;
        uint64_t v59 = (uint64_t)llvm::DILocalVariable::getImpl(v924, (uint64_t)v898, (uint64_t)v888, (uint64_t)v633, v634, (uint64_t)v637, *(void *)&(*a3)[2 * (v142 | 6)], v144, v140, (uint64_t)v906, 0, 1);
      }
      goto LABEL_1073;
    case 29:
      uint64_t v145 = *((unsigned int *)a3 + 2);
      if (!v145) {
        goto LABEL_269;
      }
      uint64_t v146 = (int *)(*a3 + 2);
      unint64_t v147 = *(void *)*a3;
      unsigned __int8 v933 = *(unsigned char *)*a3 & 1;
      v934 = (uint64_t *)v146;
      *(void *)&long long v935 = v145 - 1;
      *(void *)&long long v938 = v939;
      *((void *)&v938 + 1) = 0x600000000;
      llvm::MetadataLoader::MetadataLoaderImpl::upgradeDIExpression(a1, a2, v147 >> 1, (uint64_t)&v934, (unsigned int *)&v938);
      if (*(void *)v8)
      {
        if ((void *)v938 != v939) {
          free((void *)v938);
        }
        return;
      }
      unint64_t v254 = llvm::DIExpression::getImpl(*(void **)(a2 + 208), v934, v935, (unint64_t *)v933, 1);
      ++*(_DWORD *)a8;
      uint64_t v205 = (void *)v938;
      if ((void *)v938 != v939) {
        goto LABEL_196;
      }
      goto LABEL_1076;
    case 30:
      if (*((_DWORD *)a3 + 2) != 8) {
        goto LABEL_269;
      }
      std::string::pointer v148 = (uint64_t *)*a3;
      uint64_t v149 = *(void *)*a3;
      unsigned __int8 v933 = v149 != 0;
      uint64_t v150 = *(void **)(a2 + 208);
      int v151 = *((_DWORD *)v148 + 2);
      if (v149)
      {
        if (v151)
        {
          std::string::pointer v148 = (uint64_t *)*a3;
        }
        else
        {
          unint64_t v152 = 0;
        }
        int v347 = *((_DWORD *)v148 + 4);
        if (v347)
        {
          std::string::pointer v148 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v348 = 0;
        }
        int v382 = *((_DWORD *)v148 + 6);
        int v383 = *((_DWORD *)v148 + 8);
        if (v383)
        {
          std::string::pointer v148 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v384 = 0;
        }
        int v402 = *((_DWORD *)v148 + 10);
        if (v402)
        {
          std::string::pointer v148 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v403 = 0;
        }
        int v406 = *((_DWORD *)v148 + 12);
        int v407 = *((_DWORD *)v148 + 14);
        if (v407) {
        else
        }
          unint64_t v408 = 0;
        uint64_t v59 = (uint64_t)llvm::DIObjCProperty::getImpl(v150, (uint64_t)v152, (uint64_t)v348, v382, (uint64_t)v384, (uint64_t)v403, v406, (uint64_t)v411, 1, 1);
      }
      else
      {
        if (v151)
        {
          std::string::pointer v148 = (uint64_t *)*a3;
        }
        else
        {
          unint64_t v267 = 0;
        }
        int v532 = *((_DWORD *)v148 + 4);
        if (v532)
        {
          std::string::pointer v148 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v533 = 0;
        }
        int v552 = *((_DWORD *)v148 + 6);
        int v553 = *((_DWORD *)v148 + 8);
        if (v553)
        {
          std::string::pointer v148 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v554 = 0;
        }
        int v568 = *((_DWORD *)v148 + 10);
        if (v568)
        {
          std::string::pointer v148 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v569 = 0;
        }
        int v575 = *((_DWORD *)v148 + 12);
        int v576 = *((_DWORD *)v148 + 14);
        if (v576) {
        else
        }
          uint64_t v577 = 0;
        uint64_t v59 = (uint64_t)llvm::DIObjCProperty::getImpl(v150, (uint64_t)v267, (uint64_t)v533, v552, (uint64_t)v554, (uint64_t)v569, v575, (uint64_t)v593, 0, 1);
      }
      goto LABEL_1073;
    case 31:
      unsigned int v153 = *((_DWORD *)a3 + 2);
      if (v153 - 9 > 0xFFFFFFFC)
      {
        unint64_t v220 = (uint64_t *)*a3;
        uint64_t v221 = *(void *)*a3;
        unsigned __int8 v933 = v221 != 0;
        long long v222 = *(void **)(a2 + 208);
        int v919 = *((_DWORD *)v220 + 2);
        int v223 = *((_DWORD *)v220 + 4);
        if (v221)
        {
          if (v223)
          {
            unint64_t v220 = (uint64_t *)*a3;
          }
          else
          {
            v907 = 0;
          }
          int v356 = *((_DWORD *)v220 + 6);
          if (v356) {
          else
          }
            uint64_t v357 = 0;
          int v396 = (uint64_t *)*a3;
          if (v153 < 7)
          {
            unsigned int v398 = 0;
            int v399 = 0;
          }
          else
          {
            int v397 = *((_DWORD *)v396 + 12);
            if (v397)
            {
              int v396 = (uint64_t *)*a3;
            }
            else
            {
              unsigned int v398 = 0;
            }
            int v399 = *((_DWORD *)v396 + 8);
          }
          v603 = v222;
          int v604 = *((_DWORD *)v396 + 10);
          if (v604) {
          else
          }
            v605 = 0;
          if (v153 >= 8 && (unsigned int v606 = (*a3)[14]) != 0) {
          else
          }
            uint64_t v607 = 0;
          uint64_t v59 = (uint64_t)llvm::DIImportedEntity::getImpl(v603, v919, (uint64_t)v907, (uint64_t)v395, (uint64_t)v398, v399, (uint64_t)v605, (uint64_t)v607, 1, 1);
        }
        else
        {
          if (v223)
          {
            unint64_t v220 = (uint64_t *)*a3;
          }
          else
          {
            v908 = 0;
          }
          int v536 = *((_DWORD *)v220 + 6);
          if (v536) {
          else
          }
            char v537 = 0;
          __int16 v556 = (uint64_t *)*a3;
          if (v153 < 7)
          {
            long long v558 = 0;
            int v559 = 0;
          }
          else
          {
            int v557 = *((_DWORD *)v556 + 12);
            if (v557)
            {
              __int16 v556 = (uint64_t *)*a3;
            }
            else
            {
              long long v558 = 0;
            }
            int v559 = *((_DWORD *)v556 + 8);
          }
          int v650 = *((_DWORD *)v556 + 10);
          if (v650) {
          else
          }
            v651 = 0;
          if (v153 >= 8 && (unsigned int v652 = (*a3)[14]) != 0) {
          else
          }
            v653 = 0;
          uint64_t v59 = (uint64_t)llvm::DIImportedEntity::getImpl(v222, v919, (uint64_t)v908, (uint64_t)v555, (uint64_t)v558, v559, (uint64_t)v651, (uint64_t)v653, 0, 1);
        }
        goto LABEL_1073;
      }
      unint64_t v154 = "Invalid DIImportedEntity record";
      goto LABEL_270;
    case 32:
      unsigned int v155 = *((_DWORD *)a3 + 2);
      if (v155 - 10 <= 0xFFFFFFFA) {
        goto LABEL_269;
      }
      if (v155 <= 7) {
        unsigned int v156 = 1;
      }
      else {
        unsigned int v156 = 2;
      }
      BOOL v157 = (uint64_t *)*a3;
      uint64_t v158 = *(void *)*a3;
      unsigned __int8 v933 = v158 != 0;
      v918 = *(void **)(a2 + 208);
      if (v158)
      {
        if (v155 >= 8 && (int v159 = *((_DWORD *)v157 + 2)) != 0)
        {
          BOOL v157 = (uint64_t *)*a3;
        }
        else
        {
          long long v160 = 0;
        }
        uint64_t v255 = v157[v156];
        if (v255)
        {
          BOOL v157 = (uint64_t *)*a3;
        }
        else
        {
          unint64_t v256 = 0;
        }
        uint64_t v358 = v157[v156 + 1];
        if (v358)
        {
          BOOL v157 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v359 = 0;
        }
        uint64_t v400 = v157[v156 + 2];
        if (v400)
        {
          BOOL v157 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v401 = 0;
        }
        uint64_t v404 = v157[v156 + 3];
        if (v404)
        {
          BOOL v157 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v405 = 0;
        }
        uint64_t v409 = v157[v156 | 4];
        if (v409) {
        else
        }
          unint64_t v410 = 0;
        unsigned int v412 = *((_DWORD *)a3 + 2);
        if (v412 >= 8)
        {
          int v413 = (*a3)[14];
          if (v412 != 8)
          {
            char v414 = *((void *)*a3 + 8) != 0;
            goto LABEL_646;
          }
        }
        else
        {
          int v413 = 0;
        }
        char v414 = 0;
LABEL_646:
        uint64_t v59 = (uint64_t)llvm::DIModule::getImpl(v918, (uint64_t)v160, (uint64_t)v256, (uint64_t)v359, (uint64_t)v401, (uint64_t)v405, (uint64_t)v410, v413, v414, 1, 1);
        goto LABEL_1073;
      }
      if (v155 >= 8 && (int v268 = *((_DWORD *)v157 + 2)) != 0)
      {
        BOOL v157 = (uint64_t *)*a3;
      }
      else
      {
        char v269 = 0;
      }
      uint64_t v325 = v157[v156];
      if (v325)
      {
        BOOL v157 = (uint64_t *)*a3;
      }
      else
      {
        uint64_t v326 = 0;
      }
      uint64_t v538 = v157[v156 + 1];
      if (v538)
      {
        BOOL v157 = (uint64_t *)*a3;
      }
      else
      {
        unsigned int v539 = 0;
      }
      uint64_t v560 = v157[v156 + 2];
      if (v560)
      {
        BOOL v157 = (uint64_t *)*a3;
      }
      else
      {
        long long v561 = 0;
      }
      uint64_t v570 = v157[v156 + 3];
      if (v570)
      {
        BOOL v157 = (uint64_t *)*a3;
      }
      else
      {
        uint64_t v571 = 0;
      }
      uint64_t v578 = v157[v156 | 4];
      if (v578) {
      else
      }
        uint64_t v579 = 0;
      unsigned int v594 = *((_DWORD *)a3 + 2);
      if (v594 >= 8)
      {
        int v595 = (*a3)[14];
        if (v594 != 8)
        {
          char v596 = *((void *)*a3 + 8) != 0;
          goto LABEL_902;
        }
      }
      else
      {
        int v595 = 0;
      }
      char v596 = 0;
LABEL_902:
      uint64_t v59 = (uint64_t)llvm::DIModule::getImpl(v918, (uint64_t)v269, (uint64_t)v326, (uint64_t)v539, (uint64_t)v561, (uint64_t)v571, (uint64_t)v579, v595, v596, 0, 1);
      goto LABEL_1073;
    case 33:
      if (*((_DWORD *)a3 + 2) != 5) {
        goto LABEL_269;
      }
      int v161 = (uint64_t *)*a3;
      uint64_t v162 = *(void *)*a3;
      unsigned __int8 v933 = v162 != 0;
      BOOL v163 = *(void **)(a2 + 208);
      unsigned int v164 = *((_DWORD *)v161 + 2);
      unsigned int v165 = *((_DWORD *)v161 + 4);
      int v166 = *((_DWORD *)v161 + 6);
      if (v162)
      {
        if (v166)
        {
          int v161 = (uint64_t *)*a3;
        }
        else
        {
          BOOL v167 = 0;
        }
        int v349 = *((_DWORD *)v161 + 8);
        if (v349) {
        else
        }
          uint64_t v350 = 0;
        size_t v385 = v163;
        unsigned int v386 = v164;
        unsigned int v387 = v165;
        unint64_t v388 = (unint64_t)v167;
        int v389 = 1;
      }
      else
      {
        if (v166)
        {
          int v161 = (uint64_t *)*a3;
        }
        else
        {
          unint64_t v270 = 0;
        }
        int v534 = *((_DWORD *)v161 + 8);
        if (v534) {
        else
        }
          uint64_t v350 = 0;
        size_t v385 = v163;
        unsigned int v386 = v164;
        unsigned int v387 = v165;
        unint64_t v388 = (unint64_t)v270;
        int v389 = 0;
      }
      uint64_t v59 = (uint64_t)llvm::DIMacro::getImpl(v385, v386, v387, v388, (unint64_t)v350, v389, 1);
      goto LABEL_1073;
    case 34:
      if (*((_DWORD *)a3 + 2) != 5) {
        goto LABEL_269;
      }
      uint64_t v168 = (uint64_t *)*a3;
      uint64_t v169 = *(void *)*a3;
      unsigned __int8 v933 = v169 != 0;
      unint64_t v170 = *(void **)(a2 + 208);
      unsigned int v171 = *((_DWORD *)v168 + 2);
      unsigned int v172 = *((_DWORD *)v168 + 4);
      int v173 = *((_DWORD *)v168 + 6);
      if (v169)
      {
        if (v173)
        {
          uint64_t v168 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v174 = 0;
        }
        int v351 = *((_DWORD *)v168 + 8);
        if (v351) {
        else
        }
          int v352 = 0;
        unsigned int v390 = v170;
        unsigned int v391 = v171;
        unsigned int v392 = v172;
        unint64_t v393 = (unint64_t)v174;
        int v394 = 1;
      }
      else
      {
        if (v173)
        {
          uint64_t v168 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v271 = 0;
        }
        int v535 = *((_DWORD *)v168 + 8);
        if (v535) {
        else
        }
          int v352 = 0;
        unsigned int v390 = v170;
        unsigned int v391 = v171;
        unsigned int v392 = v172;
        unint64_t v393 = (unint64_t)v271;
        int v394 = 0;
      }
      uint64_t v59 = (uint64_t)llvm::DIMacroFile::getImpl(v390, v391, v392, v393, (unint64_t)v352, v394, 1);
      goto LABEL_1073;
    case 35:
      *(void *)&long long v938 = a2;
      *((void *)&v938 + 1) = a8;
      goto LABEL_158;
    case 36:
      if ((a3[1] & 1) == 0) {
        goto LABEL_269;
      }
      uint64_t v175 = **(void **)(a2 + 192);
      if (((unint64_t)(*(void *)(*(void *)(a2 + 192) + 8) - v175) >> 5) <= *(void *)*a3) {
        goto LABEL_269;
      }
      unsigned int v176 = *(unsigned __int8 *)(*(void *)(v175 + 32 * *(void *)*a3 + 16) + 16);
      if (v176 > 3 || v176 == 1) {
        goto LABEL_1076;
      }
      llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment(a1, a2);
LABEL_158:
      if (!*(void *)v8) {
        goto LABEL_1076;
      }
      return;
    case 37:
      if (*((_DWORD *)a3 + 2) != 3) {
        goto LABEL_269;
      }
      BOOL v178 = (uint64_t *)*a3;
      unsigned __int8 v933 = *(void *)*a3 != 0;
      int v179 = *((_DWORD *)v178 + 4);
      if (!v179
      {
        unint64_t v180 = llvm::DIExpression::getImpl(*(void **)(a2 + 208), 0, 0, 0, 1);
      }
      int v181 = *(void **)(a2 + 208);
      unsigned int v182 = (*a3)[2];
      if (v933)
      {
        if (v182) {
        else
        }
          int v183 = 0;
        unint64_t v353 = v181;
        uint64_t v354 = (uint64_t)v180;
        int v355 = 1;
      }
      else
      {
        if (v182) {
        else
        }
          int v183 = 0;
        unint64_t v353 = v181;
        uint64_t v354 = (uint64_t)v180;
        int v355 = 0;
      }
      uint64_t v59 = (uint64_t)llvm::DIGlobalVariableExpression::getImpl(v353, (uint64_t)v183, v354, v355, 1);
      goto LABEL_1073;
    case 40:
      if (*((_DWORD *)a3 + 2) != 5) {
        goto LABEL_269;
      }
      uint64_t v184 = (uint64_t *)*a3;
      unsigned __int8 v933 = *(void *)*a3 & 1;
      uint64_t v185 = *(void **)(a2 + 208);
      int v186 = *((_DWORD *)v184 + 2);
      if (v933)
      {
        if (v186)
        {
          uint64_t v184 = (uint64_t *)*a3;
        }
        else
        {
          int v252 = 0;
        }
        int v445 = *((_DWORD *)v184 + 4);
        if (v445)
        {
          uint64_t v184 = (uint64_t *)*a3;
        }
        else
        {
          char v446 = 0;
        }
        int v480 = *((_DWORD *)v184 + 6);
        if (v480)
        {
          uint64_t v184 = (uint64_t *)*a3;
        }
        else
        {
          int v477 = 0;
        }
        int v481 = *((_DWORD *)v184 + 8);
        unsigned int v482 = v185;
        uint64_t v483 = (uint64_t)v252;
        uint64_t v484 = (uint64_t)v446;
        int v485 = 1;
      }
      else
      {
        if (v186)
        {
          uint64_t v184 = (uint64_t *)*a3;
        }
        else
        {
          unint64_t v187 = 0;
        }
        int v441 = *((_DWORD *)v184 + 4);
        if (v441)
        {
          uint64_t v184 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v442 = 0;
        }
        int v476 = *((_DWORD *)v184 + 6);
        if (v476)
        {
          uint64_t v184 = (uint64_t *)*a3;
        }
        else
        {
          int v477 = 0;
        }
        int v481 = *((_DWORD *)v184 + 8);
        unsigned int v482 = v185;
        uint64_t v483 = (uint64_t)v187;
        uint64_t v484 = (uint64_t)v442;
        int v485 = 0;
      }
      uint64_t v59 = (uint64_t)llvm::DILabel::getImpl(v482, v483, v484, (uint64_t)v477, v481, v485, 1);
      goto LABEL_1073;
    case 41:
      int v188 = *((_DWORD *)a3 + 2);
      if ((v188 - 10) <= 0xFFFFFFFD) {
        goto LABEL_269;
      }
      uint64_t v189 = (uint64_t *)*a3;
      int v190 = *(void *)*a3 != 0;
      unsigned __int8 v933 = *(void *)*a3 != 0;
      if (v188 == 8)
      {
        uint64_t v191 = 0;
        unsigned int v192 = 5;
      }
      else
      {
        int v253 = *((_DWORD *)v189 + 10);
        if (v253)
        {
          int v190 = v933;
          uint64_t v189 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v191 = 0;
        }
        unsigned int v192 = 6;
      }
      BOOL v447 = *(void **)(a2 + 208);
      int v448 = *((_DWORD *)v189 + 2);
      int v449 = *((_DWORD *)v189 + 4);
      if (v190)
      {
        if (v449)
        {
          uint64_t v189 = (uint64_t *)*a3;
        }
        else
        {
          unsigned int v450 = 0;
        }
        int v452 = *((_DWORD *)v189 + 6);
        if (v452)
        {
          uint64_t v189 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v453 = 0;
        }
        int v454 = *((_DWORD *)v189 + 8);
        if (v454)
        {
          uint64_t v189 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v455 = 0;
        }
        uint64_t v59 = (uint64_t)llvm::DIStringType::getImpl(v447, v448, (uint64_t)v450, (uint64_t)v453, (uint64_t)v455, (uint64_t)v191, v189[v192], v189[v192 + 1], v189[v192 + 2], 1, 1);
      }
      else
      {
        if (v449)
        {
          uint64_t v189 = (uint64_t *)*a3;
        }
        else
        {
          int v451 = 0;
        }
        int v541 = *((_DWORD *)v189 + 6);
        if (v541)
        {
          uint64_t v189 = (uint64_t *)*a3;
        }
        else
        {
          v542 = 0;
        }
        int v564 = *((_DWORD *)v189 + 8);
        if (v564)
        {
          uint64_t v189 = (uint64_t *)*a3;
        }
        else
        {
          char v565 = 0;
        }
        uint64_t v59 = (uint64_t)llvm::DIStringType::getImpl(v447, v448, (uint64_t)v451, (uint64_t)v542, (uint64_t)v565, (uint64_t)v191, v189[v192], v189[v192 + 1], v189[v192 + 2], 0, 1);
      }
      goto LABEL_1073;
    case 44:
      unsigned int v193 = (uint64_t *)*a3;
      unsigned __int8 v933 = *(void *)*a3 & 1;
      uint64_t v194 = *(void **)(a2 + 208);
      int v195 = *((_DWORD *)v193 + 2);
      if (v933)
      {
        if (v195)
        {
          unsigned int v193 = (uint64_t *)*a3;
        }
        else
        {
          unint64_t v224 = 0;
        }
        int v274 = *((_DWORD *)v193 + 4);
        if (v274)
        {
          unsigned int v193 = (uint64_t *)*a3;
        }
        else
        {
          unint64_t v275 = 0;
        }
        int v284 = *((_DWORD *)v193 + 6);
        if (v284)
        {
          unsigned int v193 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v285 = 0;
        }
        int v294 = *((_DWORD *)v193 + 8);
        if (v294)
        {
          unsigned int v193 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v293 = 0;
        }
        int v296 = *((_DWORD *)v193 + 10);
        __int16 v297 = v194;
        uint64_t v298 = (uint64_t)v224;
        uint64_t v299 = (uint64_t)v275;
        uint64_t v300 = (uint64_t)v285;
        int v301 = 1;
      }
      else
      {
        if (v195)
        {
          unsigned int v193 = (uint64_t *)*a3;
        }
        else
        {
          unint64_t v196 = 0;
        }
        int v272 = *((_DWORD *)v193 + 4);
        if (v272)
        {
          unsigned int v193 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v273 = 0;
        }
        int v282 = *((_DWORD *)v193 + 6);
        if (v282)
        {
          unsigned int v193 = (uint64_t *)*a3;
        }
        else
        {
          unint64_t v283 = 0;
        }
        int v292 = *((_DWORD *)v193 + 8);
        if (v292)
        {
          unsigned int v193 = (uint64_t *)*a3;
        }
        else
        {
          uint64_t v293 = 0;
        }
        int v296 = *((_DWORD *)v193 + 10);
        __int16 v297 = v194;
        uint64_t v298 = (uint64_t)v196;
        uint64_t v299 = (uint64_t)v273;
        uint64_t v300 = (uint64_t)v283;
        int v301 = 0;
      }
      uint64_t v59 = (uint64_t)llvm::DICommonBlock::getImpl(v297, v298, v299, v300, (uint64_t)v293, v296, v301, 1);
      goto LABEL_1073;
    case 45:
      std::__split_buffer<std::string>::pointer v197 = *(void **)(a2 + 208);
      unint64_t v198 = (uint64_t *)*a3;
      unsigned int v199 = (*a3)[2];
      if (v199)
      {
        unint64_t v198 = (uint64_t *)*a3;
      }
      else
      {
        unint64_t v200 = 0;
      }
      int v225 = *((_DWORD *)v198 + 4);
      if (v225)
      {
        unint64_t v198 = (uint64_t *)*a3;
      }
      else
      {
        unint64_t v226 = 0;
      }
      int v227 = *((_DWORD *)v198 + 6);
      if (v227)
      {
        unint64_t v198 = (uint64_t *)*a3;
      }
      else
      {
        unsigned int v228 = 0;
      }
      int v229 = *((_DWORD *)v198 + 8);
      if (v229) {
      else
      }
        unint64_t v230 = 0;
      uint64_t v59 = (uint64_t)llvm::DIGenericSubrange::getImpl(v197, (uint64_t)v200, (uint64_t)v226, (uint64_t)v228, (uint64_t)v230, 0, 1);
      goto LABEL_1073;
    case 46:
      *(void *)&long long v938 = v939;
      *((void *)&v938 + 1) = 0x400000000;
      unint64_t v201 = *((unsigned int *)a3 + 2);
      if (v201 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v938, v939, v201, 8);
        LODWORD(v201) = *((_DWORD *)a3 + 2);
      }
      if (!v201) {
        goto LABEL_194;
      }
      unint64_t v202 = (uint64_t *)*a3;
      uint64_t v203 = 8 * v201;
      break;
    case 47:
      if (*((_DWORD *)a3 + 2) == 1)
      {
        uint64_t v206 = *(void *)*a3;
        unsigned __int8 v933 = *(unsigned char *)*a3 & 1;
        if (v206)
        {
          uint64_t v59 = llvm::DIAssignID::getImpl(*(void *)(a2 + 208), 1);
          goto LABEL_1073;
        }
        unint64_t v154 = "Invalid DIAssignID record. Must be distinct";
      }
      else
      {
        unint64_t v154 = "Invalid DIAssignID record.";
      }
      goto LABEL_270;
    default:
      goto LABEL_1076;
  }
  do
  {
    if (llvm::MDNode::classof(v204) && (*((unsigned char *)v204 + 1) & 0x7F) == 2)
    {
      unint64_t v235 = "Invalid record: DIArgList should not contain forward refs";
LABEL_397:
      v934 = (uint64_t *)v235;
      __int16 v937 = 259;
      error(v8);
    }
    if (*(unsigned __int8 *)v204 - 1 >= 2)
    {
      unint64_t v235 = "Invalid record";
      goto LABEL_397;
    }
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v938, (uint64_t)v204);
    ++v202;
    v203 -= 8;
  }
  while (v203);
LABEL_194:
  Impl = llvm::DIArgList::getImpl(*(void **)(a2 + 208), (unsigned char *)v938, DWORD2(v938), 0, 1);
LABEL_195:
  ++*(_DWORD *)a8;
  uint64_t v205 = (void *)v938;
  if ((void *)v938 != v939) {
LABEL_196:
  }
    free(v205);
LABEL_1076:
  *(void *)uint64_t v8 = 0;
}

uint64_t llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString(llvm::MetadataLoader::MetadataLoaderImpl *this, unsigned int a2)
{
  if (*((_DWORD *)this + 2) <= a2 || (uint64_t v4 = *(void *)(*(void *)this + 8 * a2)) == 0)
  {
    uint64_t v5 = *((void *)this + 84) + 16 * a2;
    uint64_t v6 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**((void **)this + 26) + 312), *(uint64_t **)v5, *(void *)(v5 + 8));
    if (v7) {
      *(void *)(v6 + 16) = v6;
    }
    uint64_t v4 = v6 + 8;
  }
  return v4;
}

void anonymous namespace'::BitcodeReaderMetadataList::assignValue(unint64_t a1, __n128 *a2, int a3)
{
  unsigned int v3 = a3;
  unsigned int v14 = a3;
  int v6 = llvm::MDNode::classof(a2);
  if (a2 && v6 && ((a2->n128_u8[1] & 0x7F) == 2 || a2[-1].n128_u32[2]))
  {
    llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1 + 48, (int *)&v14, (uint64_t)v15);
    unsigned int v3 = v14;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  if (v3 == v7)
  {
    v15[0] = (uint64_t)a2;
    if (v3 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::growAndEmplaceBack<llvm::Metadata *&>(a1, v15);
    }
    else
    {
      uint64_t v8 = (__n128 **)(*(void *)a1 + 8 * v3);
      *uint64_t v8 = a2;
      if (a2)
      {
        llvm::MetadataTracking::track((uint64_t)v8, (uint64_t)a2, 2);
        unsigned int v3 = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 8) = v3 + 1;
    }
  }
  else
  {
    if (v3 >= v7)
    {
      llvm::SmallVectorImpl<llvm::TrackingMDRef>::resizeImpl<false>(a1, v3 + 1);
      unsigned int v3 = v14;
    }
    uint64_t v9 = (uint64_t *)(*(void *)a1 + 8 * v3);
    uint64_t v10 = (llvm::MDNode *)*v9;
    if (*v9)
    {
      uint64_t v11 = *((void *)v10 + 1);
      if ((v11 & 4) != 0)
      {
        llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v11 & 0xFFFFFFFFFFFFFFF8, a2);
        unsigned int v3 = v14;
      }
      v15[0] = 0;
      if (llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>(a1 + 24, v3, v15))
      {
        *(_DWORD *)v15[0] = -2;
        int v13 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 24) -= 2;
        *(_DWORD *)(a1 + 28) = v13;
      }
      llvm::MDNode::deleteTemporary(v10, v12);
    }
    else
    {
      llvm::TrackingMDRef::reset(v9, (uint64_t)a2);
    }
  }
}

llvm::MDNode *llvm::MetadataLoader::MetadataLoaderImpl::getMetadataFwdRefOrLoad(llvm::MetadataLoader::MetadataLoaderImpl *this, unsigned int a2)
{
  unint64_t v4 = (uint64_t)(*((void *)this + 85) - *((void *)this + 84)) >> 4;
  if (v4 > a2)
  {
    return (llvm::MDNode *)llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString(this, a2);
  }
  if (*((_DWORD *)this + 2) > a2)
  {
    uint64_t v6 = *(void *)(*(void *)this + 8 * a2);
    if (v6) {
      return (llvm::MDNode *)v6;
    }
  }
  if (v4 + ((uint64_t)(*((void *)this + 88) - *((void *)this + 87)) >> 3) > a2)
  {
    memset(v7, 0, sizeof(v7));
    llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata((unint64_t)this, a2, (llvm::MetadataLoader::MetadataLoaderImpl *)v7);
    llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders((unint64_t)this, (uint64_t)v7);
    if (*((_DWORD *)this + 2) <= a2) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = *(void *)(*(void *)this + 8 * a2);
    }
    std::deque<llvm::DistinctMDOperandPlaceholder>::~deque[abi:nn180100]((uint64_t)v7);
    return (llvm::MDNode *)v6;
  }
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataAttachment(unint64_t a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, void ***a4@<X8>)
{
  v34[64] = *MEMORY[0x263EF8340];
  llvm::BitstreamCursor::EnterSubBlock(*(llvm::BitstreamCursor **)(a1 + 200), 0, 16, a4);
  if (!*a4)
  {
    uint64_t v23 = a3;
    int v24 = a2;
    unsigned int v32 = v34;
    uint64_t v33 = 0x4000000000;
    memset(v26, 0, sizeof(v26));
    while (1)
    {
      llvm::BitstreamCursor::advanceSkippingSubblocks(*(llvm::BitstreamCursor **)(a1 + 200), 0, (uint64_t)&v29);
      if (v30)
      {
        uint64_t v10 = v29;
        *a4 = (void **)v29;
        if (v10) {
          goto LABEL_50;
        }
      }
      else
      {
        int v5 = (int)v29;
        int v4 = HIDWORD(v29);
        *a4 = 0;
      }
      if (v5 == 2)
      {
LABEL_48:
        __int16 v29 = "Malformed block";
        __int16 v31 = 259;
        error((const llvm::Twine *)a4);
      }
      if (v5 == 1) {
        break;
      }
      if (!v5) {
        goto LABEL_48;
      }
      LODWORD(v33) = 0;
      llvm::BitstreamCursor::readRecord(*(llvm::SimpleBitstreamCursor **)(a1 + 200), v4, (unsigned int *)&v32, 0, (uint64_t)&v27);
      if (v28)
      {
        int v13 = v27;
        uint64_t v27 = 0;
        *a4 = v13;
        int v12 = 1;
        goto LABEL_21;
      }
      if (v27 == 11)
      {
        int v11 = v33;
        if (!v33)
        {
          unsigned int v14 = "Invalid record";
          goto LABEL_18;
        }
        if ((v33 & 1) == 0)
        {
          llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment((uint64_t)a4, a1, v24, (uint64_t)v32, v33);
          if (*a4) {
            int v12 = 1;
          }
          else {
            int v12 = 2;
          }
          goto LABEL_21;
        }
        if (v33 != 1)
        {
          unsigned int v16 = *(uint64_t **)(v23 + 8 * *(void *)v32);
          unsigned int v17 = 1;
          while (1)
          {
            int v25 = *((void *)v32 + v17);
            __int16 v29 = 0;
            if (!llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)(a1 + 1016), &v25, &v29)|| (unsigned int v18 = v29, v29 == (const char *)(*(void *)(a1 + 1016) + 8 * *(unsigned int *)(a1 + 1032))))
            {
              unsigned int v14 = "Invalid ID";
              goto LABEL_18;
            }
            if (*((_DWORD *)v29 + 1) != 1 || !*(unsigned char *)(a1 + 1040)) {
              break;
            }
LABEL_44:
            int v12 = 0;
            v17 += 2;
            if (v11 == v17) {
              goto LABEL_21;
            }
          }
          unint64_t v19 = *((void *)v32 + v17 + 1);
          if (v19 < ((uint64_t)(*(void *)(a1 + 704) - *(void *)(a1 + 696)) >> 3)
                   + ((uint64_t)(*(void *)(a1 + 680) - *(void *)(a1 + 672)) >> 4)
            && (*(_DWORD *)(a1 + 8) <= v19 || !*(void *)(*(void *)a1 + 8 * v19)))
          {
            llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata(a1, *((void *)v32 + v17 + 1), (llvm::MetadataLoader::MetadataLoaderImpl *)v26);
            llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders(a1, (uint64_t)v26);
          }
          if (*(unsigned char *)MetadataFwdRef == 2) {
            goto LABEL_20;
          }
          uint64_t v21 = MetadataFwdRef;
          if ((llvm::MDNode::classof(MetadataFwdRef) & 1) == 0)
          {
            unsigned int v14 = "Invalid metadata attachment";
LABEL_18:
            __int16 v29 = v14;
            __int16 v31 = 259;
            error((const llvm::Twine *)a4);
          }
          if (*(unsigned char *)(a1 + 1041))
          {
            unint64_t v22 = (llvm::MDNode *)*((unsigned int *)v18 + 1);
            if (v22 == 18)
            {
              uint64_t v21 = llvm::upgradeInstructionLoopAttachment(v21, v22);
              goto LABEL_40;
            }
          }
          else
          {
LABEL_40:
            unint64_t v22 = (llvm::MDNode *)*((unsigned int *)v18 + 1);
          }
          if (v22 == 1)
          {
            uint64_t v21 = llvm::UpgradeTBAANode(v21, v22);
            LODWORD(v22) = *((_DWORD *)v18 + 1);
          }
          llvm::Instruction::setMetadata(v16, (int)v22, v21);
          goto LABEL_44;
        }
      }
LABEL_20:
      int v12 = 0;
LABEL_21:
      if (v28)
      {
        unsigned int v15 = v27;
        uint64_t v27 = 0;
        if (v15) {
          (*((void (**)(void **))*v15 + 1))(v15);
        }
      }
      if ((v12 | 2) != 2) {
        goto LABEL_50;
      }
    }
    llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders(a1, (uint64_t)v26);
    *a4 = 0;
LABEL_50:
    std::deque<llvm::DistinctMDOperandPlaceholder>::~deque[abi:nn180100]((uint64_t)v26);
    if (v32 != v34) {
      free(v32);
    }
  }
}

void llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata(unint64_t a1, unsigned int a2, llvm::MetadataLoader::MetadataLoaderImpl *a3)
{
  v27[64] = *MEMORY[0x263EF8340];
  unsigned int v21 = a2;
  if (*(_DWORD *)(a1 + 8) > a2)
  {
    uint64_t v5 = *(void *)(*(void *)a1 + 8 * a2);
    if (v5)
    {
      if ((*(unsigned char *)(v5 + 1) & 0x7F) != 2) {
        return;
      }
    }
  }
  v26[0] = v27;
  v26[1] = (void *)0x4000000000;
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  llvm::SimpleBitstreamCursor::JumpToBit(a1 + 328, *(void *)(*(void *)(a1 + 696) + 8 * (a2 - ((uint64_t)(*(void *)(a1 + 680) - *(void *)(a1 + 672)) >> 4))), &v22);
  if (v22)
  {
    unsigned int v17 = "lazyLoadOneMetadata failed jumping: ";
    __int16 v18 = 259;
    uint64_t v13 = v22;
    uint64_t v22 = 0;
    unsigned int v7 = &v13;
    goto LABEL_18;
  }
  llvm::BitstreamCursor::advanceSkippingSubblocks((llvm::BitstreamCursor *)(a1 + 328), 0, (uint64_t)&v24);
  if (v25)
  {
    unsigned int v17 = "lazyLoadOneMetadata failed advanceSkippingSubblocks: ";
    __int16 v18 = 259;
    uint64_t v12 = v24;
    unsigned int v7 = &v12;
    goto LABEL_18;
  }
  llvm::BitstreamCursor::readRecord((llvm::SimpleBitstreamCursor *)(a1 + 328), SHIDWORD(v24), (unsigned int *)v26, (unsigned __int8 **)&v19, (uint64_t)&v22);
  if (v23)
  {
    unsigned int v17 = "Can't lazyload MD: ";
    __int16 v18 = 259;
    uint64_t v8 = v22;
    uint64_t v22 = 0;
    uint64_t v9 = v8;
    unsigned int v7 = &v9;
    goto LABEL_18;
  }
  llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata((llvm::Twine *)&v11, a1, (unsigned int **)v26, v22, a3, v19, v20, (llvm::MetadataLoader::MetadataLoaderImpl *)&v21);
  if (v11)
  {
    unsigned int v17 = "Can't lazyload MD, parseOneMetadata: ";
    __int16 v18 = 259;
    uint64_t v10 = v11;
    unsigned int v7 = &v10;
LABEL_18:
    llvm::toString(v7, &v14);
    __int16 v16 = 260;
    unsigned int v15 = &v14;
    llvm::operator+((uint64_t *)&v17, (uint64_t *)&v15, (uint64_t)&v24);
    llvm::report_fatal_error((llvm *)&v24, (const llvm::Twine *)1);
  }
  if (v23)
  {
    uint64_t v6 = v22;
    uint64_t v22 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  if (v26[0] != v27) {
    free(v26[0]);
  }
}

llvm::MDNode *anonymous namespace'::BitcodeReaderMetadataList::getMetadataFwdRef(_anonymous_namespace_::BitcodeReaderMetadataList *this, unsigned int a2)
{
  unsigned int v6 = a2;
  if (*((_DWORD *)this + 46) <= a2) {
    return 0;
  }
  if (*((_DWORD *)this + 2) <= a2) {
    llvm::SmallVectorImpl<llvm::TrackingMDRef>::resizeImpl<false>((unint64_t)this, a2 + 1);
  }
  Impl = *(llvm::MDNode **)(*(void *)this + 8 * a2);
  if (!Impl)
  {
    llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 24, (int *)&v6, (uint64_t)v7);
    Impl = llvm::MDTuple::getImpl(*((void **)this + 22), 0, 0, (unint64_t *)2, 1);
    llvm::TrackingMDRef::reset((uint64_t *)(*(void *)this + 8 * v6), (uint64_t)Impl);
  }
  return Impl;
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKindRecord(llvm::Twine *a1, uint64_t a2, char *a3, unsigned int a4)
{
  v17[1] = *MEMORY[0x263EF8340];
  if (a4 <= 1)
  {
    v12[0] = "Invalid record";
    __int16 v14 = 259;
    error(a1);
  }
  uint64_t v6 = *(unsigned int *)a3;
  unsigned int v15 = v17;
  long long v16 = xmmword_261E8A740;
  llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v15, a3 + 8, &a3[8 * a4]);
  uint64_t v7 = ***(void ***)(a2 + 216);
  uint64_t v8 = (llvm::StringMapImpl *)(v7 + 2480);
  LODWORD(v7) = *(_DWORD *)(v7 + 2492);
  v12[0] = v15;
  v12[1] = (_DWORD *)v16;
  v13[0] = v7;
  uint64_t v9 = (uint64_t *)(a2 + 1016);
  unint64_t v11 = v6 | ((unint64_t)*(unsigned int *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(v8, (uint64_t *)v15, v16, v13)+ 8) << 32);
  v12[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>(v9, &v11, v12))
  {
    v12[0] = "Conflicting METADATA_KIND records";
    __int16 v14 = 259;
    error(a1);
  }
  unint64_t inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::InsertIntoBucketImpl<unsigned int>((uint64_t)v9, (uint64_t)&v11, &v11, v12[0]);
  *(void *)unint64_t inserted = v11;
  *(void *)a1 = 0;
  if (v15 != v17) {
    free(v15);
  }
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKinds(llvm::BitstreamCursor **this@<X0>, void ***a2@<X8>)
{
  unsigned char v14[64] = *MEMORY[0x263EF8340];
  llvm::BitstreamCursor::EnterSubBlock(this[25], 0, 22, a2);
  if (!*a2)
  {
    uint64_t v12 = v14;
    uint64_t v13 = 0x4000000000;
    while (1)
    {
      llvm::BitstreamCursor::advanceSkippingSubblocks(this[25], 0, (uint64_t)&v9);
      if (v10)
      {
        uint64_t v6 = v9;
        *a2 = (void **)v9;
        if (v6) {
          goto LABEL_19;
        }
      }
      else
      {
        int v3 = (int)v9;
        int v2 = HIDWORD(v9);
        *a2 = 0;
      }
      switch(v3)
      {
        case 2:
LABEL_16:
          uint64_t v9 = "Malformed block";
          __int16 v11 = 259;
          error((const llvm::Twine *)a2);
        case 1:
          *a2 = 0;
          goto LABEL_19;
        case 0:
          goto LABEL_16;
      }
      LODWORD(v13) = 0;
      llvm::BitstreamCursor::readRecord(this[25], v2, (unsigned int *)&v12, 0, (uint64_t)&v9);
      if (v10) {
        break;
      }
      if (v9 == 6)
      {
        llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKindRecord((llvm::Twine *)a2, (uint64_t)this, (char *)v12, v13);
        uint64_t v7 = *a2;
        if (v10)
        {
          uint64_t v8 = v9;
          uint64_t v9 = 0;
          if (v8) {
            (*(void (**)(const char *))(*(void *)v8 + 8))(v8);
          }
        }
        if (v7) {
          goto LABEL_19;
        }
      }
    }
    *a2 = (void **)v9;
LABEL_19:
    if (v12 != v14) {
      free(v12);
    }
  }
}

uint64_t llvm::MetadataLoader::lookupSubprogramForFunction(llvm::MetadataLoader *this, llvm::Function *a2)
{
  uint64_t v2 = *(void *)this + 752;
  uint64_t v5 = 0;
  uint64_t v6 = a2;
  int v3 = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::LookupBucketFor<llvm::Function const*>(v2, &v6, &v5);
  uint64_t result = 0;
  if (v3) {
    return *(void *)(v5 + 8);
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::BitstreamCursor::Block const*,llvm::BitstreamCursor::Block const*,llvm::BitstreamCursor::Block*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)v5;
      if (v5 != a3) {
        std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__assign_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>((uint64_t *)(a3 + 8), *(uint64_t **)(v5 + 8), *(uint64_t **)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 4);
      }
      v5 += 32;
      a3 += 32;
    }
    while (v5 != a2);
  }
  return a3;
}

char *std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__init_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>(char *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vallocate[abi:nn180100](result, a4);
    for (unsigned int i = (void *)*((void *)v6 + 1); a2 != a3; a2 += 2)
    {
      uint64_t v8 = a2[1];
      void *i = *a2;
      i[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      i += 2;
    }
    *((void *)v6 + 1) = i;
  }
  return result;
}

void llvm::SmallVectorImpl<llvm::TrackingMDRef>::resizeImpl<false>(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::grow(a1, a2);
        unint64_t v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2) {
        bzero((void *)(*(void *)a1 + 8 * v2), 8 * a2 - 8 * v2);
      }
      *(_DWORD *)(a1 + 8) = a2;
    }
    else
    {
      llvm::SmallVectorImpl<llvm::TrackingMDRef>::truncate(a1, a2);
    }
  }
}

unint64_t llvm::SmallVectorImpl<llvm::TrackingMDRef>::truncate(unint64_t result, uint64_t a2)
{
  int v2 = a2;
  unint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != a2)
  {
    uint64_t v5 = 8 * a2 - 8 * v4;
    uint64_t v6 = (uint64_t *)(*(void *)result + 8 * v4 - 8);
    do
    {
      if (*v6) {
        uint64_t result = llvm::MetadataTracking::untrack((uint64_t)v6, *v6);
      }
      --v6;
      v5 += 8;
    }
    while (v5);
  }
  *(_DWORD *)(v3 + 8) = v2;
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v6);
  llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::moveElementsForGrow(a1, v4);
  int v5 = v6;
  if (*(void *)a1 != v3) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::moveElementsForGrow(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t result = (uint64_t)llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::uninitialized_move<llvm::TrackingMDRef*,llvm::TrackingMDRef*>(*(unsigned __int8 ***)a1, (unsigned __int8 **)(*(void *)a1 + 8 * *(unsigned int *)(a1 + 8)), a2);
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4)
  {
    int v5 = *(unsigned __int8 ***)a1;
    uint64_t v6 = v4;
    uint64_t v7 = v5 - 1;
    do
    {
      uint64_t result = (uint64_t)&v7[v6];
      uint64_t v8 = (uint64_t)v7[v6];
      if (v8) {
        uint64_t result = llvm::MetadataTracking::untrack(result, v8);
      }
      --v6;
    }
    while (v6 * 8);
  }
  return result;
}

unsigned __int8 **llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::uninitialized_move<llvm::TrackingMDRef*,llvm::TrackingMDRef*>(unsigned __int8 **result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      *a3 = *v5;
      if (*v5)
      {
        uint64_t result = (unsigned __int8 **)llvm::MetadataTracking::retrack((uint64_t)v5, *v5, (uint64_t)a3);
        *int v5 = 0;
      }
      ++a3;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

void llvm::MetadataLoader::MetadataLoaderImpl::upgradeCUSubprograms(llvm::MetadataLoader::MetadataLoaderImpl *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5 = *((void *)this + 91);
  uint64_t v6 = *((void *)this + 92);
  if (v5 != v6)
  {
    while (1)
    {
      uint64_t v7 = *(unsigned char **)(v5 + 8);
      if (v7 && *v7 == 4)
      {
        unint64_t v8 = *((void *)v7 - 2);
        if ((v8 & 2) != 0)
        {
          uint64_t v9 = (__n128 **)*((void *)v7 - 4);
          uint64_t v10 = *((unsigned int *)v7 - 6);
          if (v10)
          {
LABEL_8:
            __int16 v11 = *(__n128 **)v5;
            uint64_t v12 = 8 * v10;
            do
            {
              uint64_t v13 = *v9;
              if (*v9 && v13->n128_u8[0] == 17) {
                llvm::MDNode::replaceOperandWith(v13, 5u, v11, a4);
              }
              ++v9;
              v12 -= 8;
            }
            while (v12);
          }
        }
        else
        {
          uint64_t v9 = (__n128 **)&v7[-8 * ((v8 >> 2) & 0xF) - 16];
          uint64_t v10 = (v8 >> 6) & 0xF;
          if (v10) {
            goto LABEL_8;
          }
        }
      }
      v5 += 16;
      if (v5 == v6)
      {
        uint64_t v5 = *((void *)this + 91);
        break;
      }
    }
  }
  *((void *)this + 92) = v5;
}

void llvm::MetadataLoader::MetadataLoaderImpl::upgradeCUVariables(llvm::MetadataLoader::MetadataLoaderImpl *this)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 1042))
  {
    int v2 = (llvm::Module *)*((void *)this + 27);
    __int16 v31 = "llvm.dbg.cu";
    v33[8] = 259;
    NamedMetastd::string::pointer data = llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)&v31);
    if (NamedMetadata)
    {
      uint64_t v4 = NamedMetadata;
      uint64_t v5 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
      if (v5)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          uint64_t v7 = *(void *)(**(void **)(v4 + 48) + 8 * i);
          unint64_t v10 = *(void *)(v7 - 16);
          uint64_t v8 = v7 - 16;
          unint64_t v9 = v10;
          if ((v10 & 2) != 0) {
            uint64_t v11 = *(void *)(*(void *)(**(void **)(v4 + 48) + 8 * i) - 32);
          }
          else {
            uint64_t v11 = v8 - 8 * ((v9 >> 2) & 0xF);
          }
          uint64_t v12 = *(__n128 **)(v11 + 48);
          if (v12 && v12->n128_u8[0] == 4)
          {
            unint64_t v13 = 0;
            __int16 v14 = v12 - 1;
            while (1)
            {
              unint64_t v15 = v14->n128_u64[0];
              if ((v14->n128_u64[0] & 2) != 0)
              {
                if (v13 >= v12[-2].n128_u32[2]) {
                  break;
                }
                long long v16 = (unint64_t *)v12[-2].n128_u64[0];
              }
              else
              {
                if (v13 >= ((v15 >> 6) & 0xF)) {
                  break;
                }
                long long v16 = &v14->n128_u64[-((v15 >> 2) & 0xF)];
              }
              unsigned int v17 = (unsigned char *)v16[v13];
              if (v17)
              {
                if (*v17 == 24)
                {
                  __int16 v18 = (void *)*((void *)this + 26);
                  Impl = llvm::DIExpression::getImpl(v18, 0, 0, 0, 1);
                  unint64_t v20 = llvm::DIGlobalVariableExpression::getImpl(v18, (uint64_t)v17, (uint64_t)Impl, 1, 1);
                  llvm::MDNode::replaceOperandWith(v12, v13, (__n128 *)v20, v21);
                }
              }
              ++v13;
            }
          }
        }
      }
    }
    uint64_t v22 = *((void *)this + 27);
    uint64_t v23 = v22 + 8;
    uint64_t v24 = *(void *)(v22 + 16);
    if (v24 != v22 + 8)
    {
      do
      {
        if (v24) {
          char v25 = (llvm::Value *)(v24 - 56);
        }
        else {
          char v25 = 0;
        }
        __int16 v31 = v33;
        uint64_t v32 = 0x100000000;
        llvm::Value::getMetadata(v25, 0, (unsigned int *)&v31);
        llvm::Value::eraseMetadata(v25, 0);
        uint64_t v26 = (llvm::MDNode **)v31;
        if (v32)
        {
          uint64_t v27 = 8 * v32;
          do
          {
            char v28 = *v26;
            if (*(unsigned char *)*v26 == 24)
            {
              __int16 v29 = (void *)*((void *)this + 26);
              char v30 = llvm::DIExpression::getImpl(v29, 0, 0, 0, 1);
              char v28 = llvm::DIGlobalVariableExpression::getImpl(v29, (uint64_t)v28, (uint64_t)v30, 1, 1);
            }
            llvm::Value::addMetadata(v25, 0, v28);
            ++v26;
            v27 -= 8;
          }
          while (v27);
          uint64_t v26 = (llvm::MDNode **)v31;
        }
        if (v26 != (llvm::MDNode **)v33) {
          free(v26);
        }
        uint64_t v24 = *(void *)(v24 + 8);
      }
      while (v24 != v23);
    }
  }
}

uint64_t std::deque<llvm::DistinctMDOperandPlaceholder>::~deque[abi:nn180100](uint64_t a1)
{
  int v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        unint64_t v10 = *(void **)(v8 + 8);
        if (v10)
        {
          void *v10 = 0;
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      int v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      int v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
    goto LABEL_16;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 256;
LABEL_16:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>(a1, *a2, &v17);
  uint64_t v7 = v17;
  unsigned int v8 = *(_DWORD *)a1;
  if (result)
  {
    if (v8)
    {
      uint64_t v9 = a1 + 8;
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v10 = *(unsigned int *)(a1 + 16);
    }
    char v13 = 0;
    uint64_t v14 = v9 + 4 * v10;
    goto LABEL_17;
  }
  unsigned int v11 = v8 >> 1;
  if (v8) {
    unsigned int v12 = 1;
  }
  else {
    unsigned int v12 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v11 + 4 >= 3 * v12)
  {
    v12 *= 2;
    goto LABEL_19;
  }
  if (v12 + ~v11 - *(_DWORD *)(a1 + 4) <= v12 >> 3)
  {
LABEL_19:
    llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow(a1, v12);
    uint64_t v17 = 0;
    uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>(a1, *a2, &v17);
    uint64_t v7 = v17;
  }
  *(_DWORD *)a1 += 2;
  if (*v7 != -1) {
    --*(_DWORD *)(a1 + 4);
  }
  *uint64_t v7 = *a2;
  uint64_t v15 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    uint64_t v16 = 1;
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = *(unsigned int *)(a1 + 16);
  }
  uint64_t v14 = v15 + 4 * v16;
  char v13 = 1;
LABEL_17:
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v14;
  *(unsigned char *)(a3 + 16) = v13;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 1;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  uint64_t v7 = (_DWORD *)(v3 + 4 * v6);
  int v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -1)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (_DWORD *)(v3 + 4 * (v13 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow(uint64_t a1, unsigned int a2)
{
  if (a2 >= 2)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  int v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v7 = *(int **)(a1 + 8);
    uint64_t v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      uint64_t v12 = a2;
      *(void *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
      *(void *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::moveFromOldBuckets(a1, v7, &v7[v8]);
    JUMPOUT(0x263E500A0);
  }
  uint64_t v9 = &v13;
  if (*(_DWORD *)(a1 + 8) <= 0xFFFFFFFD)
  {
    int v13 = *(_DWORD *)(a1 + 8);
    uint64_t v9 = (int *)&v14;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    uint64_t v10 = a2;
    *(void *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
    *(void *)(a1 + 16) = v10;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::moveFromOldBuckets(a1, &v13, v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::moveFromOldBuckets(uint64_t result, int *a2, int *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
  }
  uint64_t result = (uint64_t)memset(v8, 255, 4 * v7);
LABEL_9:
  while (a2 != a3)
  {
    int v9 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      uint64_t v10 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>((uint64_t)v5, v9, &v10);
      int *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::growAndEmplaceBack<llvm::Metadata *&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  uint64_t v4 = a1 + 16;
  int v5 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v9);
  int v6 = (uint64_t *)&v5[*(unsigned int *)(a1 + 8)];
  uint64_t v7 = *a2;
  *int v6 = *a2;
  if (v7) {
    llvm::MetadataTracking::track((uint64_t)v6, v7, 2);
  }
  llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::moveElementsForGrow(a1, v5);
  int v8 = v9;
  if (*(void *)a1 != v4) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  ++*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = v8;
}

void *llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::init(void *result, int a2)
{
  int v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    uint64_t result = operator new(4 * v4, (std::align_val_t)4uLL);
    *int v2 = result;
    v2[1] = 0;
    uint64_t v5 = *((unsigned int *)v2 + 4);
    if (v5)
    {
      return memset(result, 255, 4 * v5);
    }
  }
  else
  {
    llvm::MDNode *result = 0;
    result[1] = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::clear(void *result)
{
  uint64_t v1 = result;
  int v2 = *((_DWORD *)result + 2);
  if (v2 || *((_DWORD *)result + 3))
  {
    uint64_t v3 = *((unsigned int *)result + 4);
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      if (v3) {
        uint64_t result = memset((void *)*result, 255, 4 * v3);
      }
      v1[1] = 0;
    }
    else
    {
      return llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::shrink_and_clear(result);
    }
  }
  return result;
}

void *llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::shrink_and_clear(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((unsigned int *)result + 4);
  int v3 = *((_DWORD *)result + 2);
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    result[1] = 0;
    if (v2)
    {
      int v6 = (void *)*result;
      return memset(v6, 255, 4 * v2);
    }
  }
  else
  {
    MEMORY[0x263E500A0](*result, 4);
    return llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::init(v1, v5);
  }
  return result;
}

_DWORD *llvm::detail::DenseSetImpl<unsigned int,llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,llvm::DenseMapInfo<unsigned int,void>>::begin(_DWORD *a1)
{
  int v2 = *a1;
  if (*a1 > 1u)
  {
    if (v2)
    {
      uint64_t result = a1 + 2;
      int v5 = a1 + 3;
LABEL_8:
      while (*result >= 0xFFFFFFFE)
      {
        if (++result == v5) {
          return v5;
        }
      }
    }
    else
    {
      uint64_t result = (_DWORD *)*((void *)a1 + 1);
      uint64_t v4 = a1[4];
      int v5 = &result[v4];
      if (v4) {
        goto LABEL_8;
      }
    }
  }
  else if (v2)
  {
    return a1 + 3;
  }
  else
  {
    return (_DWORD *)(*((void *)a1 + 1) + 4 * a1[4]);
  }
  return result;
}

llvm::MDNode *anonymous namespace'::BitcodeReaderMetadataList::resolveTypeRefArray(uint64_t a1, llvm::MDNode *a2)
{
  Impl = a2;
  unsigned char v15[32] = *MEMORY[0x263EF8340];
  if (!a2 || *(unsigned char *)a2 != 4 || (*((unsigned char *)a2 + 1) & 0x7F) == 1) {
    return Impl;
  }
  int v13 = (llvm::hashing::detail::hash_state *)v15;
  uint64_t v14 = 0x2000000000;
  int v5 = (unint64_t *)((char *)a2 - 16);
  unint64_t v4 = *((void *)a2 - 2);
  if ((v4 & 2) != 0)
  {
    unint64_t v6 = *((unsigned int *)a2 - 6);
    if (v6 >= 0x21)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v6, 8);
      unint64_t v4 = *v5;
    }
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v7 = (unint64_t *)*((void *)Impl - 4);
    uint64_t v8 = *((unsigned int *)Impl - 6);
    if (!*((_DWORD *)Impl - 6)) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v7 = &v5[-((v4 >> 2) & 0xF)];
    uint64_t v8 = (v4 >> 6) & 0xF;
    if (!v8) {
      goto LABEL_13;
    }
  }
  uint64_t v9 = 8 * v8;
  do
  {
    uint64_t v10 = (unsigned char *)*v7++;
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v13, (uint64_t)v11);
    v9 -= 8;
  }
  while (v9);
LABEL_13:
  Impl = llvm::MDTuple::getImpl(*(void **)(a1 + 176), v13, v14, 0, 1);
  if (v13 != (llvm::hashing::detail::hash_state *)v15) {
    free(v13);
  }
  return Impl;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 1;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::InsertIntoBucketImpl<llvm::MDString *>(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v5 = *a1 >> 1;
  if (*a1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::grow((uint64_t)a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096) {
    --a1[1];
  }
  return a3;
}

uint64_t llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::grow(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2 >= 2)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  int v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v7 = *(uint64_t **)(a1 + 8);
    uint64_t v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::moveFromOldBuckets(a1, v7, &v7[2 * v8]);
    JUMPOUT(0x263E500A0);
  }
  uint64_t v9 = v14;
  if ((*(void *)(a1 + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    v14[0] = *(void *)(a1 + 8);
    v14[1] = v10;
    uint64_t v9 = &v15;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::moveFromOldBuckets(a1, v14, v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 24);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v12 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      uint64_t *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

llvm::MDNode *anonymous namespace'::BitcodeReaderMetadataList::upgradeTypeRef(uint64_t a1, unsigned char *a2)
{
  if (!a2) {
    return 0;
  }
  if (*a2) {
    return (llvm::MDNode *)a2;
  }
  uint64_t v12 = 0;
  if ((llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(a1 + 96, (uint64_t)a2, &v12) & 1) == 0|| (uint64_t result = *(llvm::MDNode **)(v12 + 8)) == 0)
  {
    int v5 = (_DWORD *)(a1 + 72);
    uint64_t v12 = 0;
    char v6 = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(a1 + 72, (uint64_t)a2, &v12);
    uint64_t v7 = (void *)v12;
    if (v6)
    {
      uint64_t result = *(llvm::MDNode **)(v12 + 8);
      if (result) {
        return result;
      }
      goto LABEL_19;
    }
    int v8 = *v5 >> 1;
    if (*v5) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = *(_DWORD *)(a1 + 88);
    }
    if (4 * v8 + 4 >= 3 * v9)
    {
      v9 *= 2;
    }
    else if (v9 + ~v8 - *(_DWORD *)(a1 + 76) > v9 >> 3)
    {
LABEL_16:
      *v5 += 2;
      if (*v7 != -4096) {
        --*(_DWORD *)(a1 + 76);
      }
      *uint64_t v7 = a2;
      v7[1] = 0;
LABEL_19:
      uint64_t result = llvm::MDTuple::getImpl(*(void **)(a1 + 176), 0, 0, (unint64_t *)2, 1);
      uint64_t v11 = (llvm::MDNode *)v7[1];
      v7[1] = result;
      if (v11)
      {
        llvm::MDNode::deleteTemporary(v11, v10);
        return (llvm::MDNode *)v7[1];
      }
      return result;
    }
    llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::grow(a1 + 72, v9);
    uint64_t v12 = 0;
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(a1 + 72, (uint64_t)a2, &v12);
    uint64_t v7 = (void *)v12;
    goto LABEL_16;
  }
  return result;
}

void llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::grow(uint64_t a1, unsigned int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a2 >= 2)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  int v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v7 = *(uint64_t **)(a1 + 8);
    uint64_t v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      uint64_t v12 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::moveFromOldBuckets(a1, v7, &v7[2 * v8]);
    JUMPOUT(0x263E500A0);
  }
  unsigned int v9 = v13;
  if ((*(void *)(a1 + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    v13[0] = *(void *)(a1 + 8);
    v13[1] = v10;
    unsigned int v9 = &v14;
    *(void *)(a1 + 16) = 0;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::moveFromOldBuckets(a1, v13, v9);
}

void llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 8);
    unsigned int v9 = (void *)(a1 + 24);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (!v7) {
      goto LABEL_11;
    }
    uint64_t v8 = *(void **)(a1 + 8);
    unsigned int v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_11:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v15 = 0;
      llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(a1, v10, &v15);
      uint64_t v12 = v15;
      *uint64_t v15 = *a2;
      uint64_t v13 = a2[1];
      a2[1] = 0;
      v12[1] = v13;
      *(_DWORD *)a1 += 2;
      uint64_t v14 = (llvm::MDNode *)a2[1];
      a2[1] = 0;
      if (v14) {
        llvm::MDNode::deleteTemporary(v14, v11);
      }
    }
    a2 += 2;
  }
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::TrackingMDRef,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>,false>::destroy_range(void *a1, llvm::MDNode *a2)
{
  if (a2 != (llvm::MDNode *)a1)
  {
    unint64_t v3 = (llvm::MDNode **)((char *)a2 - 16);
    do
    {
      unint64_t v4 = v3[1];
      v3[1] = 0;
      if (v4) {
        llvm::MDNode::deleteTemporary(v4, a2);
      }
      a2 = *v3;
      if (*v3) {
        llvm::MetadataTracking::untrack((uint64_t)v3, (uint64_t)a2);
      }
      BOOL v5 = v3 == a1;
      v3 -= 2;
    }
    while (!v5);
  }
}

void llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::destroyAll(uint64_t a1, llvm::MDNode *a2)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v3 = a1 + 8;
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(a1 + 16);
    if (!v2) {
      return;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  uint64_t v4 = 16 * v2;
  BOOL v5 = (llvm::MDNode **)(v3 + 8);
  do
  {
    if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v6 = *v5;
      *BOOL v5 = 0;
      if (v6) {
        llvm::MDNode::deleteTemporary(v6, a2);
      }
    }
    v5 += 2;
    v4 -= 16;
  }
  while (v4);
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata(llvm::SmallVectorImpl<unsigned long long> &,unsigned int,anonymous namespace'::anonymous namespace'::PlaceholderQueue &,llvm::StringRef,unsigned int &)::$_6::operator()(int **a1)
{
  unint64_t v2 = (unint64_t)*a1;
  Impl = llvm::MDTuple::getImpl(*((void **)*a1 + 26), 0, 0, 0, 1);
  ++*a1[1];
}

uint64_t std::function<llvm::Type * ()(unsigned int)>::operator()(uint64_t a1, int a2)
{
  int v5 = a2;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, &v5);
  }
  int v3 = std::__throw_bad_function_call[abi:nn180100]();
}

llvm::MDNode *llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata(llvm::SmallVectorImpl<unsigned long long> &,unsigned int,anonymous namespace'::anonymous namespace'::PlaceholderQueue &,llvm::StringRef,unsigned int &)::$_1::operator()(llvm::MetadataLoader::MetadataLoaderImpl **a1, uint64_t a2)
{
  int v3 = *a1;
  unint64_t v4 = (uint64_t)(*((void *)*a1 + 85) - *((void *)*a1 + 84)) >> 4;
  if (v4 > a2)
  {
    int v5 = *a1;
    return (llvm::MDNode *)llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString(v5, a2);
  }
  unsigned int v8 = *((_DWORD *)v3 + 2);
  if (*(unsigned char *)a1[1])
  {
    if (v8 > a2)
    {
      uint64_t v9 = *(void *)(*(void *)v3 + 8 * a2);
      if (v9)
      {
        if (!llvm::MDNode::classof(*(unsigned char **)(*(void *)v3 + 8 * a2))
          || (*(unsigned char *)(v9 + 1) & 0x7F) != 2 && !*(_DWORD *)(v9 - 8))
        {
          return (llvm::MDNode *)v9;
        }
      }
    }
    uint64_t v10 = a1[3];
    uint64_t v11 = (char *)*((void *)v10 + 2);
    uint64_t v12 = (char *)*((void *)v10 + 1);
    uint64_t v13 = v11 - v12;
    if (v11 == v12) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = 32 * (v11 - v12) - 1;
    }
    unint64_t v15 = *((void *)v10 + 4);
    unint64_t v16 = *((void *)v10 + 5) + v15;
    if (v14 != v16)
    {
LABEL_56:
      uint64_t v58 = *(void *)&v12[(v16 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v16;
      *(void *)(v58 + 8) = 0;
      *(_DWORD *)uint64_t v58 = 259;
      *(_DWORD *)(v58 + 4) = a2;
      uint64_t v60 = *((void *)v10 + 4);
      uint64_t v59 = *((void *)v10 + 5);
      *((void *)v10 + 5) = v59 + 1;
      return (llvm::MDNode *)(*(void *)(*((void *)v10 + 1)
                                        + (((unint64_t)(v60 + v59) >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * (v60 + v59));
    }
    if (v15 >= 0x100)
    {
      *((void *)v10 + 4) = v15 - 256;
      uint64_t v19 = *(void *)v12;
      uint64_t v17 = v12 + 8;
      uint64_t v18 = v19;
      *((void *)v10 + 1) = v17;
      if (v11 == *((char **)v10 + 3))
      {
        uint64_t v20 = (uint64_t)&v17[-*(void *)v10];
        if ((unint64_t)v17 <= *(void *)v10)
        {
          if (v11 == *(char **)v10) {
            unint64_t v48 = 1;
          }
          else {
            unint64_t v48 = (uint64_t)&v11[-*(void *)v10] >> 2;
          }
          int v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v48);
          unsigned int v51 = &v49[8 * (v48 >> 2)];
          uint64_t v52 = (uint64_t *)*((void *)v10 + 1);
          uint64_t v11 = v51;
          uint64_t v53 = *((void *)v10 + 2) - (void)v52;
          if (v53)
          {
            uint64_t v11 = &v51[v53 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v54 = 8 * (v53 >> 3);
            int v55 = &v49[8 * (v48 >> 2)];
            do
            {
              uint64_t v56 = *v52++;
              *(void *)int v55 = v56;
              v55 += 8;
              v54 -= 8;
            }
            while (v54);
          }
          unsigned int v57 = *(char **)v10;
          *(void *)uint64_t v10 = v49;
          *((void *)v10 + 1) = v51;
          *((void *)v10 + 2) = v11;
          *((void *)v10 + 3) = &v49[8 * v50];
          if (v57)
          {
            operator delete(v57);
            uint64_t v11 = (char *)*((void *)v10 + 2);
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = -(v24 >> 1);
          uint64_t v26 = v24 >> 1;
          uint64_t v27 = &v17[-8 * v26];
          int64_t v28 = v11 - v17;
          if (v11 != v17)
          {
            memmove(&v17[-8 * v26], v17, v11 - v17);
            uint64_t v11 = (char *)*((void *)v10 + 1);
          }
          __int16 v29 = &v11[8 * v25];
          uint64_t v11 = &v27[v28];
          *((void *)v10 + 1) = v29;
          *((void *)v10 + 2) = &v27[v28];
        }
      }
      *(void *)uint64_t v11 = v18;
LABEL_54:
      *((void *)v10 + 2) += 8;
LABEL_55:
      uint64_t v12 = (char *)*((void *)v10 + 1);
      unint64_t v16 = *((void *)v10 + 5) + *((void *)v10 + 4);
      goto LABEL_56;
    }
    uint64_t v31 = v13 >> 3;
    uint64_t v32 = (char *)*((void *)v10 + 3);
    uint64_t v33 = *(char **)v10;
    uint64_t v34 = (uint64_t)&v32[-*(void *)v10];
    if (v13 >> 3 < (unint64_t)(v34 >> 3))
    {
      uint64_t v35 = operator new(0x1000uLL);
      int v36 = v35;
      if (v32 == v11)
      {
        if (v12 == v33)
        {
          if (v11 == v12) {
            unint64_t v61 = 1;
          }
          else {
            unint64_t v61 = (v32 - v12) >> 2;
          }
          uint64_t v62 = 2 * v61;
          unint64_t v63 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v61);
          uint64_t v12 = &v63[(v62 + 6) & 0xFFFFFFFFFFFFFFF8];
          unint64_t v65 = (uint64_t *)*((void *)v10 + 1);
          long long v66 = v12;
          uint64_t v67 = *((void *)v10 + 2) - (void)v65;
          if (v67)
          {
            long long v66 = &v12[v67 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v68 = 8 * (v67 >> 3);
            uint64_t v69 = v12;
            do
            {
              uint64_t v70 = *v65++;
              *(void *)uint64_t v69 = v70;
              v69 += 8;
              v68 -= 8;
            }
            while (v68);
          }
          int v71 = *(char **)v10;
          *(void *)uint64_t v10 = v63;
          *((void *)v10 + 1) = v12;
          *((void *)v10 + 2) = v66;
          *((void *)v10 + 3) = &v63[8 * v64];
          if (v71)
          {
            operator delete(v71);
            uint64_t v12 = (char *)*((void *)v10 + 1);
          }
        }
        *((void *)v12 - 1) = v36;
        uint64_t v72 = (char *)*((void *)v10 + 1);
        int v73 = (char *)*((void *)v10 + 2);
        *((void *)v10 + 1) = v72 - 8;
        uint64_t v74 = *((void *)v72 - 1);
        *((void *)v10 + 1) = v72;
        if (v73 == *((char **)v10 + 3))
        {
          uint64_t v75 = (uint64_t)&v72[-*(void *)v10];
          if ((unint64_t)v72 <= *(void *)v10)
          {
            if (v73 == *(char **)v10) {
              unint64_t v106 = 1;
            }
            else {
              unint64_t v106 = (uint64_t)&v73[-*(void *)v10] >> 2;
            }
            int v107 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v106);
            uint64_t v109 = &v107[8 * (v106 >> 2)];
            uint64_t v110 = (uint64_t *)*((void *)v10 + 1);
            int v73 = v109;
            uint64_t v111 = *((void *)v10 + 2) - (void)v110;
            if (v111)
            {
              int v73 = &v109[v111 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v112 = 8 * (v111 >> 3);
              int v113 = &v107[8 * (v106 >> 2)];
              do
              {
                uint64_t v114 = *v110++;
                *(void *)int v113 = v114;
                v113 += 8;
                v112 -= 8;
              }
              while (v112);
            }
            int v115 = *(char **)v10;
            *(void *)uint64_t v10 = v107;
            *((void *)v10 + 1) = v109;
            *((void *)v10 + 2) = v73;
            *((void *)v10 + 3) = &v107[8 * v108];
            if (v115)
            {
              operator delete(v115);
              int v73 = (char *)*((void *)v10 + 2);
            }
          }
          else
          {
            uint64_t v76 = v75 >> 3;
            BOOL v22 = v75 >> 3 < -1;
            uint64_t v77 = (v75 >> 3) + 2;
            if (v22) {
              uint64_t v78 = v77;
            }
            else {
              uint64_t v78 = v76 + 1;
            }
            uint64_t v79 = -(v78 >> 1);
            uint64_t v80 = v78 >> 1;
            unsigned __int8 v81 = &v72[-8 * v80];
            int64_t v82 = v73 - v72;
            if (v73 != v72)
            {
              memmove(&v72[-8 * v80], v72, v73 - v72);
              uint64_t v72 = (char *)*((void *)v10 + 1);
            }
            int v73 = &v81[v82];
            *((void *)v10 + 1) = &v72[8 * v79];
            *((void *)v10 + 2) = &v81[v82];
          }
        }
        *(void *)int v73 = v74;
      }
      else
      {
        *(void *)uint64_t v11 = v35;
      }
      goto LABEL_54;
    }
    uint64_t v37 = v34 >> 2;
    if (v32 == v33) {
      unint64_t v38 = 1;
    }
    else {
      unint64_t v38 = v37;
    }
    uint64_t v39 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v38);
    uint64_t v41 = v40;
    unint64_t v42 = &v39[8 * v31];
    unsigned int v43 = &v39[8 * v40];
    unint64_t v44 = operator new(0x1000uLL);
    if (v31 == v41)
    {
      uint64_t v45 = 8 * v31;
      if (v13 < 1)
      {
        unint64_t v83 = v44;
        uint64_t v84 = v45 >> 2;
        if (v11 == v12) {
          unint64_t v85 = 1;
        }
        else {
          unint64_t v85 = v84;
        }
        unsigned int v86 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v85);
        unint64_t v42 = &v86[8 * (v85 >> 2)];
        unsigned int v43 = &v86[8 * v87];
        if (v39) {
          operator delete(v39);
        }
        uint64_t v39 = v86;
        unint64_t v44 = v83;
      }
      else
      {
        uint64_t v46 = v45 >> 3;
        if (v46 >= -1) {
          unint64_t v47 = v46 + 1;
        }
        else {
          unint64_t v47 = v46 + 2;
        }
        v42 -= 8 * (v47 >> 1);
      }
    }
    *(void *)unint64_t v42 = v44;
    uint64_t v88 = v42 + 8;
    uint64_t v89 = *((void *)v10 + 2);
    if (v89 == *((void *)v10 + 1))
    {
      uint64_t v104 = v42;
      int v90 = v42 + 8;
LABEL_102:
      uint64_t v105 = *(char **)v10;
      *(void *)uint64_t v10 = v39;
      *((void *)v10 + 1) = v104;
      *((void *)v10 + 2) = v90;
      *((void *)v10 + 3) = v43;
      if (v105) {
        operator delete(v105);
      }
      goto LABEL_55;
    }
    while (1)
    {
      if (v42 == v39)
      {
        if (v88 < v43)
        {
          uint64_t v92 = (v43 - v88) >> 3;
          if (v92 >= -1) {
            unint64_t v93 = v92 + 1;
          }
          else {
            unint64_t v93 = v92 + 2;
          }
          int v90 = &v88[8 * (v93 >> 1)];
          unint64_t v91 = &v42[8 * (v93 >> 1)];
          if (v88 == v42) {
            unint64_t v42 = v88;
          }
          else {
            memmove(&v42[8 * (v93 >> 1)], v42, v88 - v42);
          }
          goto LABEL_98;
        }
        if (v43 == v42) {
          unint64_t v94 = 1;
        }
        else {
          unint64_t v94 = (v43 - v42) >> 2;
        }
        uint64_t v95 = 2 * v94;
        unsigned int v96 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v94);
        uint64_t v39 = v96;
        unint64_t v91 = &v96[(v95 + 6) & 0xFFFFFFFFFFFFFFF8];
        int v90 = v91;
        uint64_t v98 = v88 - v42;
        if (v88 != v42)
        {
          int v90 = &v91[v98 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v99 = 8 * (v98 >> 3);
          uint64_t v100 = v91;
          int v101 = v42;
          do
          {
            uint64_t v102 = *(void *)v101;
            v101 += 8;
            *(void *)uint64_t v100 = v102;
            v100 += 8;
            v99 -= 8;
          }
          while (v99);
        }
        unsigned int v43 = &v96[8 * v97];
        operator delete(v42);
      }
      else
      {
        int v90 = v88;
        unint64_t v91 = v42;
      }
      unint64_t v42 = v39;
LABEL_98:
      uint64_t v39 = v42;
      uint64_t v103 = *(void *)(v89 - 8);
      v89 -= 8;
      *((void *)v91 - 1) = v103;
      uint64_t v104 = v91 - 8;
      uint64_t v88 = v90;
      unint64_t v42 = v104;
      if (v89 == *((void *)v10 + 1)) {
        goto LABEL_102;
      }
    }
  }
  if (v8 > a2)
  {
    uint64_t v9 = *(void *)(*(void *)v3 + 8 * a2);
    if (v9) {
      return (llvm::MDNode *)v9;
    }
  }
  if (v4 + ((uint64_t)(*((void *)v3 + 88) - *((void *)v3 + 87)) >> 3) > a2)
  {
    llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata(v3, a2, a1[3]);
    if (*((_DWORD *)v3 + 2) <= a2) {
      return 0;
    }
    else {
      return *(llvm::MDNode **)(*(void *)v3 + 8 * a2);
    }
  }
  char v30 = *a1;
}

void *anonymous namespace'::BitcodeReaderMetadataList::addTypeRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned char *)(a3 + 20) & 4) != 0) {
    uint64_t v3 = a1 + 120;
  }
  else {
    uint64_t v3 = a1 + 96;
  }
  uint64_t v6 = a2;
  uint64_t v7 = a3;
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::try_emplace<llvm::DICompositeType *>((uint64_t)v5, v3, &v6, &v7);
}

llvm::MDNode *anonymous namespace'::BitcodeReaderMetadataList::upgradeTypeRefArray(uint64_t a1, llvm::MDNode *a2)
{
  if (!a2) {
    return a2;
  }
  if (*(unsigned char *)a2 != 4) {
    return a2;
  }
  uint64_t v14 = a2;
  int v2 = *((unsigned char *)a2 + 1) & 0x7F;
  if (v2 == 1) {
    return a2;
  }
  if (v2 == 2)
  {
    unint64_t v4 = (void *)(a1 + 144);
    uint64_t v13 = &v14;
    Impl = llvm::MDTuple::getImpl(*(void **)(a1 + 176), 0, 0, (unint64_t *)2, 1);
    p_Impl = &Impl;
    uint64_t v5 = *(unsigned int *)(a1 + 152);
    if (v5 >= *(_DWORD *)(a1 + 156))
    {
      llvm::SmallVectorTemplateBase<std::pair<llvm::TrackingMDRef,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>,false>::growAndEmplaceBack<std::piecewise_construct_t const&,std::tuple<llvm::MDTuple*&>,std::tuple<std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>&&>>(a1 + 144, (uint64_t **)&v13, (unsigned __int8 ***)&p_Impl);
    }
    else
    {
      uint64_t v6 = (llvm::MDNode **)(*v4 + 16 * v5);
      uint64_t v7 = v14;
      *uint64_t v6 = v14;
      if (v7)
      {
        llvm::MetadataTracking::track((uint64_t)v6, (uint64_t)v7, 2);
        LODWORD(v5) = *(_DWORD *)(a1 + 152);
      }
      unsigned int v8 = Impl;
      Impl = 0;
      v6[1] = v8;
      *(_DWORD *)(a1 + 152) = v5 + 1;
    }
    uint64_t v9 = Impl;
    Impl = 0;
    if (v9) {
      llvm::MDNode::deleteTemporary(v9, v7);
    }
    return *(llvm::MDNode **)(*(void *)(a1 + 144) + 16 * *(unsigned int *)(a1 + 152) - 8);
  }
}

void std::vector<std::pair<llvm::DICompileUnit *,llvm::Metadata *>>::push_back[abi:nn180100](char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = (v5 - *a1) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[16 * v8];
    *(_OWORD *)uint64_t v13 = *a2;
    uint64_t v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *a2;
    uint64_t v6 = v5 + 16;
  }
  a1[1] = v6;
}

void *llvm::MetadataLoader::MetadataLoaderImpl::upgradeDIExpression(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = result;
  unint64_t v9 = *(void *)(a4 + 8);
  switch(a3)
  {
    case 0:
      unint64_t v10 = v9 - 3;
      if (v9 < 3) {
        goto LABEL_5;
      }
      uint64_t result = *(void **)a4;
      if (*(void *)(*(void *)a4 + 8 * v10) == 157) {
        result[v10] = 4096;
      }
      goto LABEL_7;
    case 1:
LABEL_5:
      if (!v9) {
        goto LABEL_14;
      }
      uint64_t result = *(void **)a4;
LABEL_7:
      if (*result == 6)
      {
        unint64_t v11 = (char *)&result[v9];
        if (v9 >= 3 && *((void *)v11 - 3) == 4096) {
          v11 -= 24;
        }
        if (v11 != (char *)(result + 1))
        {
          uint64_t result = memmove(result, result + 1, v11 - (char *)(result + 1));
          unint64_t v9 = *(void *)(a4 + 8);
        }
        *((void *)v11 - 1) = 6;
      }
LABEL_14:
      *(unsigned char *)(a2 + 1043) = 1;
LABEL_15:
      if (!v9) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void **)a4;
      break;
    case 2:
      goto LABEL_15;
    case 3:
      goto LABEL_39;
    default:
      error((const llvm::Twine *)result);
  }
  do
  {
    uint64_t v13 = *v12;
    if (*v12 > 0x22uLL || ((1 << *v12) & 0x410010000) == 0)
    {
      if (v13 == 4096)
      {
        if (v9 >= 3) {
          uint64_t v16 = 3;
        }
        else {
          uint64_t v16 = v9;
        }
        uint64_t v17 = v12 + 1;
        goto LABEL_34;
      }
      unint64_t v15 = 1;
    }
    else
    {
      unint64_t v15 = 2;
    }
    if (v15 >= v9) {
      uint64_t v16 = v9;
    }
    else {
      uint64_t v16 = v15;
    }
    uint64_t v17 = v12 + 1;
    if (v13 != 28)
    {
      if (v13 == 34)
      {
        uint64_t v18 = a5;
        uint64_t v13 = 35;
LABEL_35:
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v18, v13);
        uint64_t result = llvm::SmallVectorImpl<char const*>::append<char const* const*,void>(a5, v17, &v12[v16]);
        goto LABEL_37;
      }
LABEL_34:
      uint64_t v18 = a5;
      goto LABEL_35;
    }
    llvm::SmallVectorTemplateBase<void *,true>::push_back(a5, 16);
    llvm::SmallVectorImpl<char const*>::append<char const* const*,void>(a5, (unsigned char *)v12 + 8, &v12[v16]);
    uint64_t result = llvm::SmallVectorTemplateBase<void *,true>::push_back(a5, 28);
LABEL_37:
    v12 += v16;
    v9 -= v16;
  }
  while (v9);
LABEL_38:
  uint64_t v19 = a5[2];
  *(void *)a4 = *(void *)a5;
  *(void *)(a4 + 8) = v19;
LABEL_39:
  *uint64_t v5 = 0;
  return result;
}

void *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::try_emplace<llvm::DICompositeType *>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v16 = 0;
  uint64_t result = (void *)llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(a2, *a3, &v16);
  unint64_t v9 = v16;
  if (result)
  {
    uint64_t v10 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v10 = *(void *)(a2 + 8);
      uint64_t v11 = *(unsigned int *)(a2 + 16);
    }
    char v14 = 0;
    uint64_t v15 = v10 + 16 * v11;
  }
  else
  {
    uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::InsertIntoBucketImpl<llvm::MDString *>((_DWORD *)a2, a3, v16);
    unint64_t v9 = result;
    void *result = *a3;
    result[1] = *a4;
    uint64_t v12 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 8);
      uint64_t v13 = *(unsigned int *)(a2 + 16);
    }
    uint64_t v15 = v12 + 16 * v13;
    char v14 = 1;
  }
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v15;
  *(unsigned char *)(a1 + 16) = v14;
  return result;
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::TrackingMDRef,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>,false>::growAndEmplaceBack<std::piecewise_construct_t const&,std::tuple<llvm::MDTuple*&>,std::tuple<std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>&&>>(uint64_t a1, uint64_t **a2, unsigned __int8 ***a3)
{
  uint64_t v21 = 0;
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 16, &v21);
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  unint64_t v9 = (uint64_t *)&v7[2 * v8];
  uint64_t v10 = *a3;
  uint64_t v11 = **a2;
  *unint64_t v9 = v11;
  if (v11)
  {
    llvm::MetadataTracking::track((uint64_t)v9, v11, 2);
    uint64_t v12 = *(unsigned int *)(a1 + 8);
    int v13 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    uint64_t v12 = v8;
    int v13 = v8;
  }
  char v14 = *v10;
  llvm::MetadataLoader::MetadataLoaderImpl *v10 = 0;
  v7[2 * v8 + 1] = v14;
  uint64_t v15 = *(unsigned __int8 ***)a1;
  if (v13)
  {
    uint64_t v16 = 16 * v12;
    uint64_t v17 = v7;
    do
    {
      *uint64_t v17 = *v15;
      if (*v15)
      {
        llvm::MetadataTracking::retrack((uint64_t)v15, *v15, (uint64_t)v17);
        *uint64_t v15 = 0;
      }
      uint64_t v18 = v15[1];
      v15[1] = 0;
      v17[1] = v18;
      v17 += 2;
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    uint64_t v15 = *(unsigned __int8 ***)a1;
    uint64_t v19 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    uint64_t v19 = 0;
  }
  llvm::SmallVectorTemplateBase<std::pair<llvm::TrackingMDRef,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>,false>::destroy_range(v15, (llvm::MDNode *)&v15[2 * v19]);
  int v20 = v21;
  if (*(void *)a1 != v6) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  ++*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = v20;
}

uint64_t *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::FindAndConstruct(_DWORD *a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>((uint64_t)a1, *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 16;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_12;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_12:
    llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::grow((uint64_t)a1, v7);
    uint64_t v8 = 0;
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>((uint64_t)a1, *a2, &v8);
    uint64_t result = v8;
  }
  *a1 += 2;
  if (*result != -4096) {
    --a1[1];
  }
  uint64_t *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::grow(uint64_t a1, unsigned int a2)
{
  v14[32] = *MEMORY[0x263EF8340];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::moveFromOldBuckets(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x263E500A0);
  }
  uint64_t v8 = 0;
  unint64_t v9 = v14;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *unint64_t v9 = v10;
      v9[1] = *(void *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::moveFromOldBuckets(a1, v14, v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    unint64_t v9 = (void *)(result + 264);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void **)(result + 8);
    unint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      uint64_t *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void *std::string::__init_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v7 = result;
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v7[1] = a4;
    void v7[2] = v9 | 0x8000000000000000;
    *uint64_t v7 = result;
    uint64_t v7 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    uint64_t v10 = *a2++;
    *(unsigned char *)uint64_t v7 = v10;
    uint64_t v7 = (void *)((char *)v7 + 1);
  }
  *(unsigned char *)uint64_t v7 = 0;
  return result;
}

void llvm::function_ref<void ()(llvm::StringRef)>::callback_fn<llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata(llvm::SmallVectorImpl<unsigned long long> &,unsigned int,anonymous namespace'::anonymous namespace'::PlaceholderQueue &,llvm::StringRef,unsigned int &)::$_0>(int **a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v4 = (unint64_t)*a1;
  uint64_t v5 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**((void **)*a1 + 26) + 312), a2, a3);
  if (v6) {
    *(void *)(v5 + 16) = v5;
  }
  ++*a1[1];
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::LookupBucketFor<llvm::Function const*>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void llvm::MetadataLoader::MetadataLoaderImpl::upgradeDeclareExpressions(llvm::MetadataLoader::MetadataLoaderImpl *this, llvm::Function *a2)
{
  v16[8] = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 1043))
  {
    int v2 = (char *)a2 + 72;
    uint64_t v3 = (char *)*((void *)a2 + 10);
    if (v3 != (char *)a2 + 72)
    {
      do
      {
        int v5 = v3 - 24;
        if (!v3) {
          int v5 = 0;
        }
        unsigned int v6 = v5 + 40;
        for (uint64_t i = (void *)*((void *)v5 + 6); i != v6; uint64_t i = (void *)i[1])
        {
          if (i) {
            uint64_t v8 = (llvm::DbgVariableIntrinsic *)(i - 3);
          }
          else {
            uint64_t v8 = 0;
          }
          BOOL v9 = llvm::DbgDeclareInst::classof((uint64_t)v8);
          if (!v9) {
            uint64_t v8 = 0;
          }
          if (i)
          {
            if (v9)
            {
              uint64_t v10 = *(void *)(((void *)v8 - 4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF))[8] + 24);
              if (v10)
              {
                int v11 = *(void **)(v10 + 16);
                if (((*(void *)(v10 + 24) - (void)v11) & 0x7FFFFFFF8) != 0 && *v11 == 6)
                {
                  uint64_t VariableLocationOp = llvm::DbgVariableIntrinsic::getVariableLocationOp(v8, 0);
                  if (VariableLocationOp)
                  {
                    if (*(unsigned char *)(VariableLocationOp + 16) == 21)
                    {
                      char v14 = v16;
                      uint64_t v15 = 0x800000000;
                      llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v14, (unsigned char *)(*(void *)(v10 + 16) + 8), *(unsigned char **)(v10 + 24));
                      Impl = llvm::DIExpression::getImpl(*((void **)this + 26), v14, v15, 0, 1);
                      llvm::DbgVariableIntrinsic::setExpression(v8, Impl);
                      if (v14 != v16) {
                        free(v14);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v3 = (char *)*((void *)v3 + 1);
      }
      while (v3 != v2);
    }
  }
}

void llvm::function_ref<void ()(llvm::StringRef)>::callback_fn<llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadModuleMetadataBlock(void)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(void **)a1;
  unsigned int v6 = *(void **)(*(void *)a1 + 680);
  unint64_t v7 = *(void *)(*(void *)a1 + 688);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v9 = v5[84];
    uint64_t v10 = ((uint64_t)v6 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      abort();
    }
    uint64_t v12 = v7 - v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      char v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(v5 + 86), v13);
    }
    else {
      char v14 = 0;
    }
    uint64_t v15 = &v14[16 * v10];
    uint64_t v16 = &v14[16 * v13];
    *(void *)uint64_t v15 = a2;
    *((void *)v15 + 1) = a3;
    uint64_t v8 = v15 + 16;
    uint64_t v17 = (char *)v5[85];
    uint64_t v18 = (char *)v5[84];
    if (v17 != v18)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
        v15 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)v5[84];
    }
    v5[84] = v15;
    v5[85] = v8;
    v5[86] = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *unsigned int v6 = a2;
    v6[1] = a3;
    uint64_t v8 = v6 + 2;
  }
  v5[85] = v8;
}

unsigned char *llvm::Expected<BOOL>::moveAssign<BOOL>(unsigned char *result, unsigned char *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    char v4 = result[8];
    if (v4)
    {
      uint64_t result = *(unsigned char **)result;
      *(void *)uint64_t v3 = 0;
      if (result)
      {
        uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
        char v4 = v3[8];
      }
    }
    char v5 = a2[8];
    v3[8] = v4 & 0xFE | v5 & 1;
    if (v5)
    {
      uint64_t v6 = *(void *)a2;
      *(void *)a2 = 0;
      *(void *)uint64_t v3 = v6;
    }
    else
    {
      *uint64_t v3 = *a2;
    }
  }
  return result;
}

llvm::MetadataLoader::MetadataLoaderImpl *std::unique_ptr<llvm::MetadataLoader::MetadataLoaderImpl>::reset[abi:nn180100](llvm::MetadataLoader::MetadataLoaderImpl **a1, llvm::MetadataLoader::MetadataLoaderImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::MetadataLoader::MetadataLoaderImpl::~MetadataLoaderImpl(result);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

void llvm::MetadataLoader::MetadataLoaderImpl::~MetadataLoaderImpl(llvm::MetadataLoader::MetadataLoaderImpl *this)
{
  MEMORY[0x263E500A0](*((void *)this + 127), 4);
  if ((*((unsigned char *)this + 752) & 1) == 0) {
    MEMORY[0x263E500A0](*((void *)this + 95), 8);
  }
  int v2 = (void *)*((void *)this + 91);
  if (v2)
  {
    *((void *)this + 92) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 87);
  if (v3)
  {
    *((void *)this + 88) = v3;
    operator delete(v3);
  }
  char v4 = (void *)*((void *)this + 84);
  if (v4)
  {
    *((void *)this + 85) = v4;
    operator delete(v4);
  }
  llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector((char **)this + 49);
  uint64_t v12 = (void **)((char *)this + 368);
  std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v12);
  if (*((unsigned char *)this + 320)) {
    std::__function::__value_func<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::~__value_func[abi:nn180100]((void *)this + 36);
  }
  std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::~__value_func[abi:nn180100]((void *)this + 32);
  std::__function::__value_func<llvm::Type * ()>::~__value_func[abi:nn180100]((void *)this + 28);
  llvm::SmallVectorTemplateBase<std::pair<llvm::TrackingMDRef,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>,false>::destroy_range(*((void **)this + 18), (llvm::MDNode *)(*((void *)this + 18) + 16 * *((unsigned int *)this + 38)));
  uint64_t v6 = (char *)*((void *)this + 18);
  if (v6 != (char *)this + 160) {
    free(v6);
  }
  if ((*((unsigned char *)this + 120) & 1) == 0) {
    MEMORY[0x263E500A0](*((void *)this + 16), 8);
  }
  if ((*((unsigned char *)this + 96) & 1) == 0) {
    MEMORY[0x263E500A0](*((void *)this + 13), 8);
  }
  llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::destroyAll((uint64_t)this + 72, v5);
  if ((*((unsigned char *)this + 72) & 1) == 0) {
    MEMORY[0x263E500A0](*((void *)this + 10), 8);
  }
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    MEMORY[0x263E500A0](*((void *)this + 7), 4);
  }
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    MEMORY[0x263E500A0](*((void *)this + 4), 4);
  }
  unint64_t v7 = *(char **)this;
  uint64_t v8 = *((unsigned int *)this + 2);
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    uint64_t v10 = v7 - 8;
    do
    {
      uint64_t v11 = *(void *)&v10[v9];
      if (v11) {
        llvm::MetadataTracking::untrack((uint64_t)&v10[v9], v11);
      }
      v9 -= 8;
    }
    while (v9);
    unint64_t v7 = *(char **)this;
  }
  if (v7 != (char *)this + 16) {
    free(v7);
  }
}

uint64_t llvm::MetadataLoader::MetadataLoaderImpl::MetadataLoaderImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v9 = *a3;
  unint64_t v10 = *(void *)(a2 + 8);
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x100000000;
  *(void *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 32) = -1;
  *(void *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)(a1 + 72) = 1;
  *(void *)(a1 + 80) = -4096;
  *(void *)(a1 + 96) = 1;
  *(void *)(a1 + 104) = -4096;
  *(void *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = -4096;
  *(void *)(a1 + 144) = a1 + 160;
  *(void *)(a1 + 152) = 0x100000000;
  *(void *)(a1 + 176) = v9;
  if (v10 >= 0xFFFFFFFF) {
    int v11 = -1;
  }
  else {
    int v11 = v10;
  }
  *(_DWORD *)(a1 + 184) = v11;
  *(void *)(a1 + 192) = a4;
  *(void *)(a1 + 200) = a2;
  *(void *)(a1 + 208) = *a3;
  *(void *)(a1 + 216) = a3;
  std::__function::__value_func<llvm::Type * ()>::__value_func[abi:nn180100](a1 + 224, a5);
  std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::__value_func[abi:nn180100](a1 + 256, a5 + 32);
  *(unsigned char *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  if (*(unsigned char *)(a5 + 96))
  {
    std::__function::__value_func<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::__value_func[abi:nn180100](a1 + 288, a5 + 64);
    *(unsigned char *)(a1 + 320) = 1;
  }
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0x200000000;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = a1 + 408;
  *(void *)(a1 + 400) = 0x800000000;
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  uint64_t v12 = 760;
  *(void *)(a1 + 752) = 1;
  do
  {
    *(void *)(a1 + v12) = -4096;
    v12 += 16;
  }
  while (v12 != 1016);
  *(void *)(a1 + 1016) = 0;
  *(void *)(a1 + 1024) = 0;
  *(_DWORD *)(a1 + 1032) = 0;
  *(_DWORD *)(a1 + 1040) = 0;
  *(unsigned char *)(a1 + 1044) = a6;
  return a1;
}

uint64_t _GLOBAL__sub_I_MetadataLoader_cpp()
{
  char v3 = 0;
  char v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Import full type definitions for ThinLTO.";
  v1.n128_u64[1] = 41;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&_MergedGlobals_30, "import-full-type-definitions", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_30, &dword_261C2B000);
  char v3 = 0;
  char v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Force disable the lazy-loading on-demand of metadata when loading bitcode for importing.";
  v1.n128_u64[1] = 88;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_26B41C510, "disable-ondemand-mds-loading", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_26B41C510, &dword_261C2B000);
}

void llvm::BitcodeReaderValueList::assignValue(llvm::BitcodeReaderValueList *this@<X0>, llvm::Value *a2@<X2>, unsigned int a3@<W1>, int a4@<W3>, void *a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v10 = *(void *)this;
  uint64_t v11 = (*((void *)this + 1) - *(void *)this) >> 5;
  if (v11 == a3)
  {
    llvm::BitcodeReaderValueList::push_back(this, a2, a4);
  }
  else
  {
    if (v11 <= a3)
    {
      std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::resize(this, a3 + 1);
      uint64_t v10 = *(void *)this;
    }
    uint64_t v13 = v10 + 32 * a3;
    char v14 = *(void (***)(void))(v13 + 16);
    if (v14)
    {
      if (*v14 != *(void (**)(void))a2)
      {
        std::generic_category();
        llvm::make_error<llvm::StringError,char const*&,std::error_code>();
      }
      llvm::Value::doRAUW(*(llvm::ValueAsMetadata **)(v13 + 16), a2, (llvm::Value *)1, a6);
      llvm::Value::deleteValue(v14, v15);
    }
    else
    {
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)v13, (uint64_t)a2);
      *(_DWORD *)(v13 + 24) = a4;
    }
  }
  *a5 = 0;
}

llvm::MCAsmLexer *llvm::BitcodeReaderValueList::getValueFwdRef(llvm::BitcodeReaderValueList *this, unsigned int a2, llvm::Type *a3, unsigned int a4, llvm::BasicBlock *a5)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 6) <= a2) {
    return 0;
  }
  uint64_t v9 = *(void *)this;
  if (((*((void *)this + 1) - *(void *)this) >> 5) <= a2)
  {
    std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::resize(this, a2 + 1);
    uint64_t v9 = *(void *)this;
  }
  uint64_t v10 = *(llvm::Type ***)(v9 + 32 * a2 + 16);
  if (!v10)
  {
    if (a3) {
      operator new();
    }
    return 0;
  }
  if (a3 && *v10 != a3) {
    return 0;
  }
  uint64_t v11 = *((void *)this + 7);
  unsigned int v18 = a2;
  uint64_t v17 = a5;
  if (v11)
  {
    (*(void (**)(llvm::BasicBlock **__return_ptr))(*(void *)v11 + 48))(&v19);
    uint64_t v12 = v19;
    if ((v20 & 1) == 0) {
      return v12;
    }
    uint64_t v19 = 0;
    uint64_t v17 = v12;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v17);
    if (v17) {
      (*(void (**)(llvm::BasicBlock *))(*(void *)v17 + 8))(v17);
    }
    if (v20)
    {
      uint64_t v13 = v19;
      uint64_t v19 = 0;
      if (v13) {
        (*(void (**)(llvm::BasicBlock *))(*(void *)v13 + 8))(v13);
      }
    }
    return 0;
  }
  uint64_t v15 = (llvm::MCAsmLexer *)std::__throw_bad_function_call[abi:nn180100]();
  return llvm::AsmLexer::AsmLexer(v15, v16);
}

llvm::MCAsmLexer *llvm::AsmLexer::AsmLexer(llvm::MCAsmLexer *a1, uint64_t a2)
{
  uint64_t result = llvm::MCAsmLexer::MCAsmLexer(a1);
  *(void *)uint64_t result = &unk_270DC1A00;
  *((void *)result + 17) = a2;
  *((void *)result + 18) = 0;
  *((void *)result + 19) = 0;
  *((void *)result + 20) = 0;
  *((_DWORD *)result + 42) = 16777473;
  if (*(void *)(a2 + 56)) {
    BOOL v4 = **(unsigned char **)(a2 + 48) != 64;
  }
  else {
    BOOL v4 = 1;
  }
  *((unsigned char *)result + 105) = v4;
  *((unsigned char *)result + 111) = *(unsigned char *)(a2 + 491);
  return result;
}

void llvm::AsmLexer::~AsmLexer(void **this)
{
  llvm::MCAsmLexer::~MCAsmLexer(this);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::AsmLexer::ReturnError(uint64_t a1, std::string *a2, std::string::size_type a3, std::string *__str)
{
  a2[2].__r_.__value_.__r.__words[2] = a3;
  std::string::operator=(a2 + 3, __str);
  std::string::size_type v7 = a2[6].__r_.__value_.__r.__words[0] - a3;
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 32) = 64;
  *(void *)(a1 + 24) = 0;
  return llvm::APInt::clearUnusedBits(a1 + 24);
}

void llvm::AsmLexer::LexFloatLiteral(llvm::AsmLexer *this, std::string *a2)
{
  std::string::pointer data = (unsigned __int8 *)a2[6].__r_.__value_.__l.__data_;
  int v5 = *data;
  if ((v5 - 48) <= 9)
  {
    uint64_t v6 = data + 1;
    do
    {
      a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
      int v7 = *v6++;
      int v5 = v7;
    }
    while ((v7 - 48) < 0xA);
    std::string::pointer data = v6 - 1;
  }
  if (v5 > 68)
  {
    if (v5 == 69 || v5 == 101)
    {
      uint64_t v9 = data + 1;
      a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
      int v10 = data[1];
      if (v10 == 45 || v10 == 43)
      {
        uint64_t v9 = data + 2;
        a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 2);
        int v10 = data[2];
      }
      std::string::pointer data = v9;
      if ((v10 - 48) <= 9)
      {
        uint64_t v11 = v9 + 1;
        do
        {
          a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
          int v12 = *v11++;
        }
        while ((v12 - 48) < 0xA);
        std::string::pointer data = v11 - 1;
      }
    }
  }
  else if (v5 == 43 || v5 == 45)
  {
    std::string::basic_string[abi:nn180100]<0>(&__str, "invalid sign in float literal");
    a2[2].__r_.__value_.__r.__words[2] = (std::string::size_type)data;
    std::string::operator=(a2 + 3, &__str);
    std::string::size_type v8 = a2[6].__r_.__value_.__r.__words[0] - (void)data;
    *(_DWORD *)this = 1;
    *((void *)this + 1) = data;
    *((void *)this + 2) = v8;
    *((_DWORD *)this + 8) = 64;
    *((void *)this + 3) = 0;
    llvm::APInt::clearUnusedBits((uint64_t)this + 24);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    return;
  }
  uint64_t v13 = (unsigned __int8 *)a2[4].__r_.__value_.__l.__data_;
  *(_DWORD *)this = 6;
  *((void *)this + 1) = v13;
  *((void *)this + 2) = data - v13;
  *((_DWORD *)this + 8) = 64;
  *((void *)this + 3) = 0;
  char v14 = (char *)this + 24;
  llvm::APInt::clearUnusedBits((uint64_t)v14);
}

void llvm::AsmLexer::LexHexFloatLiteral(llvm::AsmLexer *this, std::string *a2, int a3)
{
  std::string::pointer data = (unsigned __int8 *)a2[6].__r_.__value_.__l.__data_;
  int v6 = *data;
  if (v6 != 46) {
    goto LABEL_5;
  }
  uint64_t v7 = 0;
  do
  {
    std::string::size_type v8 = &data[v7 + 1];
    a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    int v6 = *v8;
    ++v7;
  }
  while (llvm::hexDigitValue(char)::LUT[*v8] != -1);
  data += v7;
  if (v7 == 1)
  {
LABEL_5:
    if (a3)
    {
      std::string::pointer v9 = a2[4].__r_.__value_.__l.__data_;
      int v10 = "invalid hexadecimal floating-point constant: expected at least one significand digit";
      goto LABEL_20;
    }
  }
  if ((v6 | 0x20) != 0x70)
  {
    std::string::pointer v9 = a2[4].__r_.__value_.__l.__data_;
    int v10 = "invalid hexadecimal floating-point constant: expected exponent part 'p'";
LABEL_20:
    std::string::basic_string[abi:nn180100]<0>(&__str, v10);
    a2[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
    std::string::operator=(a2 + 3, &__str);
    std::string::size_type v18 = a2[6].__r_.__value_.__r.__words[0] - (void)v9;
    *(_DWORD *)this = 1;
    *((void *)this + 1) = v9;
    *((void *)this + 2) = v18;
    *((_DWORD *)this + 8) = 64;
    *((void *)this + 3) = 0;
    llvm::APInt::clearUnusedBits((uint64_t)this + 24);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    return;
  }
  uint64_t v11 = data + 1;
  a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
  int v12 = data[1];
  if (v12 == 45 || v12 == 43)
  {
    uint64_t v11 = data + 2;
    a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 2);
    int v12 = data[2];
  }
  if ((v12 - 48) > 9) {
    goto LABEL_18;
  }
  uint64_t v13 = 0;
  char v14 = v11 + 1;
  do
  {
    a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&v14[v13];
    unsigned int v15 = v14[v13++] - 48;
  }
  while (v15 < 0xA);
  if (!v13)
  {
LABEL_18:
    std::string::pointer v9 = a2[4].__r_.__value_.__l.__data_;
    int v10 = "invalid hexadecimal floating-point constant: expected at least one exponent digit";
    goto LABEL_20;
  }
  std::string::pointer v16 = a2[4].__r_.__value_.__l.__data_;
  *(_DWORD *)this = 6;
  *((void *)this + 1) = v16;
  *((void *)this + 2) = v11 - (unsigned __int8 *)v16 + v13;
  *((_DWORD *)this + 8) = 64;
  *((void *)this + 3) = 0;
  uint64_t v17 = (char *)this + 24;
  llvm::APInt::clearUnusedBits((uint64_t)v17);
}

void llvm::AsmLexer::LexIdentifier(llvm::AsmLexer *this, std::string *a2)
{
  std::string::pointer data = a2[6].__r_.__value_.__l.__data_;
  if (*(data - 1) == 46 && *data - 48 <= 9)
  {
    char v3 = (unsigned __int8 *)(data + 1);
    do
    {
      a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v3;
      int v5 = *v3++;
      int v4 = v5;
    }
    while ((v5 - 48) < 0xA);
    std::string::pointer data = (std::string::pointer)(v3 - 1);
    if ((v4 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      if ((v4 - 36) > 0x3B || ((1 << (v4 - 36)) & 0x800000008000401) == 0)
      {
        BOOL v17 = v4 != 35 || a2[4].__r_.__value_.__s.__data_[10] == 0;
        BOOL v18 = !v17;
        BOOL v19 = a2[4].__r_.__value_.__s.__data_[9] && v4 == 64;
        if (!v19 && !v18) {
          goto LABEL_7;
        }
      }
    }
    else if ((v4 | 0x20) == 0x65)
    {
LABEL_7:
      llvm::AsmLexer::LexFloatLiteral(this, a2);
      return;
    }
  }
  int v7 = a2[4].__r_.__value_.__s.__data_[9];
  int v8 = a2[4].__r_.__value_.__s.__data_[10];
  for (uint64_t i = -(uint64_t)data; ; --i)
  {
    int v10 = *data;
    if ((v10 - 48) >= 0xA
      && (v10 & 0xFFFFFFDF) - 65 >= 0x1A
      && ((v10 - 36) > 0x3B || ((1 << (v10 - 36)) & 0x800000008000401) == 0))
    {
      BOOL v13 = v8 && v10 == 35;
      BOOL v14 = v13;
      BOOL v15 = v10 != 64 || v7 == 0;
      if (v15 && !v14) {
        break;
      }
    }
    a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)++data;
  }
  std::string::pointer v16 = a2[4].__r_.__value_.__l.__data_;
  if (data == v16 + 1 && *v16 == 46)
  {
    *(_DWORD *)this = 24;
    *((void *)this + 1) = v16;
    *((_DWORD *)this + 8) = 64;
    *((_OWORD *)this + 1) = xmmword_261E8D700;
    llvm::APInt::clearUnusedBits((uint64_t)this + 24);
  }
  else
  {
    *(_DWORD *)this = 2;
    *((void *)this + 1) = v16;
    *((void *)this + 2) = -(uint64_t)&v16[i];
    *((_DWORD *)this + 8) = 64;
    *((void *)this + 3) = 0;
    llvm::APInt::clearUnusedBits((uint64_t)this + 24);
  }
}

void llvm::AsmLexer::LexSlash(llvm::AsmLexer *this, std::string *a2)
{
  if (!*(unsigned char *)(a2[5].__r_.__value_.__r.__words[2] + 65)) {
    goto LABEL_12;
  }
  std::string::pointer data = a2[6].__r_.__value_.__l.__data_;
  int v5 = *data;
  if (v5 != 47)
  {
    if (v5 == 42)
    {
      a2[7].__r_.__value_.__s.__data_[1] = 0;
      a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
      int v6 = (char *)(a2[6].__r_.__value_.__l.__size_ + a2[6].__r_.__value_.__r.__words[2]);
      if (data + 1 == v6)
      {
LABEL_9:
        std::string::pointer v9 = a2[4].__r_.__value_.__l.__data_;
        std::string::basic_string[abi:nn180100]<0>(&__str, "unterminated comment");
        a2[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
        std::string::operator=(a2 + 3, &__str);
        std::string::size_type v10 = a2[6].__r_.__value_.__r.__words[0] - (void)v9;
        *(_DWORD *)this = 1;
        *((void *)this + 1) = v9;
        *((void *)this + 2) = v10;
        *((_DWORD *)this + 8) = 64;
        *((void *)this + 3) = 0;
        llvm::APInt::clearUnusedBits((uint64_t)this + 24);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        return;
      }
      uint64_t v7 = 0;
      while (1)
      {
        int v8 = &data[v7 + 2];
        a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
        if (data[v7 + 1] == 42 && *v8 == 47) {
          break;
        }
        if (&data[++v7 + 1] == v6) {
          goto LABEL_9;
        }
      }
      std::string::size_type size = a2[5].__r_.__value_.__l.__size_;
      if (size)
      {
        (*(void (**)(std::string::size_type, std::string::pointer, std::string::pointer))(*(void *)size + 16))(size, data + 1, data + 1);
        uint64_t v14 = (uint64_t)a2[6].__r_.__value_.__l.__data_;
      }
      else
      {
        uint64_t v14 = (uint64_t)&data[v7 + 2];
      }
      uint64_t v15 = v14 + 1;
      a2[6].__r_.__value_.__r.__words[0] = v15;
      std::string::pointer v16 = a2[4].__r_.__value_.__l.__data_;
      *(_DWORD *)this = 7;
      *((void *)this + 1) = v16;
      *((void *)this + 2) = v15 - (void)v16;
      *((_DWORD *)this + 8) = 64;
      *((void *)this + 3) = 0;
      int v12 = (char *)this + 24;
      goto LABEL_13;
    }
LABEL_12:
    a2[7].__r_.__value_.__s.__data_[1] = 0;
    std::string::pointer v11 = a2[4].__r_.__value_.__l.__data_;
    *(_DWORD *)this = 15;
    *((void *)this + 1) = v11;
    int v12 = (char *)this + 24;
    *((_DWORD *)this + 8) = 64;
    *((_OWORD *)this + 1) = xmmword_261E8D700;
LABEL_13:
    llvm::APInt::clearUnusedBits((uint64_t)v12);
    return;
  }
  a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
  llvm::AsmLexer::LexLineComment(this, (uint64_t)a2);
}

uint64_t llvm::AsmLexer::LexLineComment(llvm::AsmLexer *this, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 144);
  int v5 = (unsigned __int8 *)(*(void *)(a2 + 152) + *(void *)(a2 + 160));
  int v6 = (unsigned __int8 *)v4;
  if ((unsigned __int8 *)v4 != v5) {
    goto LABEL_3;
  }
  int v7 = -1;
  int v8 = (unsigned __int8 *)v4;
  while (1)
  {
    BOOL v9 = (v7 + 1) > 0xE || ((1 << (v7 + 1)) & 0x4801) == 0;
    if (!v9) {
      break;
    }
    int v7 = -1;
    int v6 = v8;
    BOOL v9 = v8 == v5;
    int v8 = v5;
    if (!v9)
    {
LABEL_3:
      int v8 = v6 + 1;
      *(void *)(a2 + 144) = v6 + 1;
      int v7 = *v6;
    }
  }
  if (v7 == 13 && v8 != v5 && *v8 == 10) {
    *(void *)(a2 + 144) = v8 + 1;
  }
  uint64_t v10 = *(void *)(a2 + 128);
  if (v10) {
    (*(void (**)(uint64_t, unint64_t, unint64_t, unsigned __int8 *))(*(void *)v10 + 16))(v10, v4, v4, &v8[~v4]);
  }
  *(unsigned char *)(a2 + 168) = 1;
  if (*(unsigned char *)(a2 + 169))
  {
    uint64_t v11 = *(void *)(a2 + 96);
    uint64_t v12 = *(void *)(a2 + 144) - v11;
  }
  else
  {
    *(unsigned char *)(a2 + 169) = 1;
    uint64_t v11 = *(void *)(a2 + 96);
    uint64_t v12 = ~v11 + *(void *)(a2 + 144);
  }
  *(_DWORD *)this = 9;
  *((void *)this + 1) = v11;
  *((void *)this + 2) = v12;
  *((_DWORD *)this + 8) = 64;
  *((void *)this + 3) = 0;
  return llvm::APInt::clearUnusedBits((uint64_t)this + 24);
}

void llvm::AsmLexer::LexDigit(llvm::AsmLexer *this, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 109);
  if (!*(unsigned char *)(a2 + 109)) {
    goto LABEL_8;
  }
  int v6 = (void *)(a2 + 144);
  int v5 = *(unsigned __int8 **)(a2 + 144);
  int v7 = v5 - 1;
  if (((char)*(v5 - 1) & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * *(v5 - 1) + 60) & 0x400) != 0)
  {
    if ((*(v5 - 1) & 0xFE) == 0x30) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v5 - 1;
    }
    if (*(v5 - 1) - 58 >= 0xFFFFFFF6) {
      int v7 = 0;
    }
    uint64_t v20 = *v5;
    if (llvm::hexDigitValue(char)::LUT[v20] != -1)
    {
      uint64_t v21 = v5 + 1;
      while (1)
      {
        if (((char)v20 - 50) < 8) {
          goto LABEL_33;
        }
        if (((char)v20 - 48) >= 2) {
          break;
        }
LABEL_35:
        *int v6 = v21;
        int v22 = *v21++;
        LODWORD(v20) = v22;
        if (llvm::hexDigitValue(char)::LUT[v22] == -1)
        {
          uint64_t v25 = v21 - 1;
          goto LABEL_58;
        }
      }
      if (!v7) {
        int v7 = v21 - 1;
      }
LABEL_33:
      if (!v19) {
        BOOL v19 = v21 - 1;
      }
      goto LABEL_35;
    }
    uint64_t v25 = *(unsigned __int8 **)(a2 + 144);
LABEL_58:
    if (v20 == 46)
    {
      *(void *)(a2 + 144) = v25 + 1;
      goto LABEL_60;
    }
    if (*(unsigned char *)(a2 + 108))
    {
      if ((int)v20 <= 103)
      {
        switch((int)v20)
        {
          case 'O':
          case 'Q':
          case 'T':
          case 'Y':
            goto LABEL_102;
          case 'P':
          case 'S':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
            goto LABEL_107;
          case 'R':
            goto LABEL_73;
          default:
            if (v20 != 72) {
              goto LABEL_107;
            }
            goto LABEL_102;
        }
      }
      switch((int)v20)
      {
        case 'o':
        case 'q':
        case 't':
        case 'y':
          goto LABEL_102;
        case 'p':
        case 's':
        case 'u':
        case 'v':
        case 'w':
        case 'x':
          goto LABEL_107;
        case 'r':
LABEL_73:
          *(void *)(a2 + 144) = v25 + 1;
          uint64_t v28 = *(void *)(a2 + 96);
          *(_DWORD *)this = 6;
          *((void *)this + 1) = v28;
          *((void *)this + 2) = &v25[-v28 + 1];
          goto LABEL_74;
        default:
          if (v20 != 104) {
            goto LABEL_107;
          }
          goto LABEL_102;
      }
    }
    if ((int)v20 > 103)
    {
      if ((int)v20 <= 112)
      {
        if (v20 != 104 && v20 != 111) {
          goto LABEL_107;
        }
      }
      else if (v20 != 113 && v20 != 121 && v20 != 116)
      {
        goto LABEL_107;
      }
    }
    else if ((int)v20 <= 80)
    {
      if (v20 != 72 && v20 != 79) {
        goto LABEL_107;
      }
    }
    else if (v20 != 81 && v20 != 84 && v20 != 89)
    {
LABEL_107:
      if (v7) {
        BOOL v33 = v7 + 1 == v25;
      }
      else {
        BOOL v33 = 0;
      }
      if ((!v33 || *(_DWORD *)(a2 + 116) > 0xDu || (*v7 | 0x20) != 0x64)
        && (!v19 || v19 + 1 != v25 || *(_DWORD *)(a2 + 116) > 0xBu || (*v19 | 0x20) != 0x62))
      {
        *int v6 = v5;
        goto LABEL_4;
      }
LABEL_103:
      LODWORD(v44) = 128;
      operator new[]();
    }
LABEL_102:
    *int v6 = v25 + 1;
    goto LABEL_103;
  }
LABEL_4:
  if (*(unsigned char *)(a2 + 112))
  {
    int v8 = v5 - 1;
    BOOL v9 = v5 - 1;
    do
    {
      int v10 = *++v8;
      ++v9;
    }
    while ((unsigned __int16)llvm::hexDigitValue(char)::LUT[v10] < 0x10u);
    *(void *)(a2 + 144) = v8;
    unint64_t v44 = &v9[-*(void *)(a2 + 96)];
    operator new[]();
  }
LABEL_8:
  uint64_t v11 = (unsigned __int8 **)(a2 + 144);
  uint64_t v12 = *(unsigned __int8 **)(a2 + 144);
  if (*(unsigned char *)(a2 + 111))
  {
    int v13 = *(v12 - 1);
    if (v13 == 37)
    {
      if ((*v12 & 0xFE) == 0x30)
      {
        uint64_t v26 = v12 + 1;
        do
        {
          *uint64_t v11 = v26;
          char v27 = *v26++;
        }
        while ((v27 & 0xFE) == 0x30);
      }
      LODWORD(v41.__r_.__value_.__r.__words[1]) = 128;
      operator new[]();
    }
    if (v13 == 36)
    {
      if (llvm::hexDigitValue(char)::LUT[*v12] != -1)
      {
        uint64_t v14 = v12 + 1;
        do
        {
          *uint64_t v11 = v14;
          int v15 = *v14++;
        }
        while (llvm::hexDigitValue(char)::LUT[v15] != -1);
      }
      LODWORD(v41.__r_.__value_.__r.__words[1]) = 128;
      operator new[]();
    }
  }
  int v16 = *(unsigned __int8 *)(a2 + 120);
  if (*(unsigned char *)(a2 + 120) || *(v12 - 1) != 48 || (int v17 = *v12, v17 == 46))
  {
    BOOL v18 = 0;
    while (1)
    {
      if ((*v12 - 48) >= 0xAu)
      {
        if (!v18) {
          BOOL v18 = v12;
        }
        if (!v4)
        {
          int v23 = 10;
          goto LABEL_45;
        }
        if (llvm::hexDigitValue(char)::LUT[*v12] == -1) {
          break;
        }
      }
      ++v12;
    }
    if ((*v12 & 0xDF) == 0x48)
    {
      BOOL v18 = v12;
      int v23 = 16;
    }
    else
    {
      int v23 = 10;
    }
LABEL_45:
    *uint64_t v11 = v18;
    if (v16 || v23 == 16) {
      goto LABEL_51;
    }
    int v24 = *v18;
    if (v24 == 101 || v24 == 69) {
      goto LABEL_60;
    }
    if (v24 != 46)
    {
LABEL_51:
      unint64_t v44 = &v18[-*(void *)(a2 + 96)];
      operator new[]();
    }
    *uint64_t v11 = v18 + 1;
LABEL_60:
    llvm::AsmLexer::LexFloatLiteral(this, (std::string *)a2);
    return;
  }
  if (v4)
  {
    if ((v17 | 0x20) == 0x78) {
      goto LABEL_79;
    }
LABEL_126:
    LODWORD(v44) = 128;
    llvm::APInt::initSlowCase((llvm::APInt *)&v43);
  }
  if (*v12 > 0x61u)
  {
    if (v17 == 120) {
      goto LABEL_79;
    }
    if (v17 != 98) {
      goto LABEL_126;
    }
  }
  else if (v17 != 66)
  {
    if (v17 != 88) {
      goto LABEL_126;
    }
LABEL_79:
    uint64_t v30 = 0;
    do
    {
      uint64_t v31 = &v12[v30 + 1];
      *uint64_t v11 = v31;
      uint64_t v32 = *v31;
      ++v30;
    }
    while (llvm::hexDigitValue(char)::LUT[v32] != -1);
    if (v32 == 46 || v32 == 112 || v32 == 80)
    {
      llvm::AsmLexer::LexHexFloatLiteral(this, (std::string *)a2, v30 == 1);
      return;
    }
    if (v30 != 1)
    {
      LODWORD(v41.__r_.__value_.__r.__words[1]) = 128;
      llvm::APInt::initSlowCase((llvm::APInt *)&v41);
    }
    std::string::size_type v38 = (std::string::size_type)(v12 - 1);
    uint64_t v39 = "invalid hexadecimal number";
    goto LABEL_132;
  }
  *uint64_t v11 = v12 + 1;
  int v34 = v12[1];
  if ((v34 - 48) <= 9)
  {
    if ((v34 & 0xFE) == 0x30)
    {
      uint64_t v35 = v12 + 1;
      int v36 = v12 + 2;
      do
      {
        *uint64_t v11 = v36;
        char v37 = *v36++;
        ++v35;
      }
      while ((v37 & 0xFE) == 0x30);
      LODWORD(v41.__r_.__value_.__r.__words[1]) = 128;
      llvm::APInt::initSlowCase((llvm::APInt *)&v41);
    }
    std::string::size_type v38 = *(void *)(a2 + 96);
    uint64_t v39 = "invalid binary number";
LABEL_132:
    std::string::basic_string[abi:nn180100]<0>(&__str, v39);
    llvm::AsmLexer::ReturnError((uint64_t)this, (std::string *)a2, v38, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    return;
  }
  *(void *)(a2 + 144) = v12;
  uint64_t v40 = *(void *)(a2 + 96);
  *(_DWORD *)this = 4;
  *((void *)this + 1) = v40;
  *((void *)this + 2) = &v12[-v40];
LABEL_74:
  *((_DWORD *)this + 8) = 64;
  *((void *)this + 3) = 0;
  __int16 v29 = (char *)this + 24;
  llvm::APInt::clearUnusedBits((uint64_t)v29);
}

void radixName(void *a1, unsigned int a2)
{
  HIDWORD(v3) = a2;
  LODWORD(v3) = a2 - 2;
  switch((v3 >> 1))
  {
    case 0u:
      int v4 = "binary";
      goto LABEL_9;
    case 3u:
      int v4 = "octal";
      goto LABEL_9;
    case 4u:
      int v4 = "decimal";
      goto LABEL_9;
    case 7u:
      int v4 = "hexadecimal";
LABEL_9:
      std::string::basic_string[abi:nn180100]<0>(a1, v4);
      break;
    default:
      std::to_string(&v7, a2);
      int v5 = std::string::insert(&v7, 0, "base-");
      std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)a1 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      a1[2] = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v7.__r_.__value_.__l.__data_);
      }
      break;
  }
}

unsigned __int8 **SkipIgnoredIntegerSuffix(unsigned __int8 **result)
{
  uint64_t v1 = (uint64_t)*result;
  int v2 = **result;
  if ((v2 | 0x20) == 0x75)
  {
    llvm::MCAsmLexer *result = (unsigned __int8 *)(v1 + 1);
    int v2 = *(unsigned __int8 *)++v1;
  }
  if ((v2 | 0x20) == 0x6C)
  {
    llvm::MCAsmLexer *result = (unsigned __int8 *)(v1 + 1);
    int v2 = *(unsigned __int8 *)++v1;
  }
  if ((v2 | 0x20) == 0x6C) {
    llvm::MCAsmLexer *result = (unsigned __int8 *)(v1 + 1);
  }
  return result;
}

uint64_t intToken(uint64_t result, uint64_t a2, uint64_t a3, llvm::APInt *a4)
{
  unsigned int v4 = *((_DWORD *)a4 + 2);
  if (v4 >= 0x41)
  {
    llvm::APInt::countLeadingZerosSlowCase(a4);
    operator new[]();
  }
  uint64_t v5 = *(void *)a4;
  *(_DWORD *)uint64_t result = 4;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(_DWORD *)(result + 32) = v4;
  *(void *)(result + 24) = v5;
  return result;
}

void llvm::AsmLexer::LexSingleQuote(llvm::AsmLexer *this, std::string *a2)
{
  std::string::pointer data = a2[6].__r_.__value_.__l.__data_;
  std::string::pointer v5 = (std::string::pointer)(a2[6].__r_.__value_.__l.__size_ + a2[6].__r_.__value_.__r.__words[2]);
  if (data == v5)
  {
    int v6 = -1;
  }
  else
  {
    a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    int v6 = *data++;
  }
  if (a2[5].__r_.__value_.__s.__data_[1])
  {
    std::string::pointer v7 = a2[4].__r_.__value_.__l.__data_;
    int v8 = "invalid usage of character literals";
    goto LABEL_6;
  }
  if (!a2[4].__r_.__value_.__s.__data_[14])
  {
    if (v6 != -1)
    {
      if (v6 != 92) {
        goto LABEL_23;
      }
      if (data != v5)
      {
        a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)++data;
LABEL_23:
        if (data != v5)
        {
          int v13 = data + 1;
          a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
          if (*data == 39)
          {
            std::string::pointer v14 = a2[4].__r_.__value_.__l.__data_;
            uint64_t v15 = v13 - v14;
            if ((unint64_t)(v13 - v14) >= 2 && *(_WORD *)v14 == 23591)
            {
              int v19 = v14[2];
              uint64_t v20 = v14[2];
              uint64_t v21 = 10;
              uint64_t v22 = 13;
              uint64_t v23 = 9;
              if (v19 != 116) {
                uint64_t v23 = v14[2];
              }
              if (v19 != 114) {
                uint64_t v22 = v23;
              }
              if (v19 != 110) {
                uint64_t v21 = v22;
              }
              if (v19 == 102) {
                uint64_t v20 = 12;
              }
              if (v19 == 98) {
                uint64_t v20 = 8;
              }
              if (v19 == 39) {
                uint64_t v20 = v14[2];
              }
              if (v19 <= 109) {
                uint64_t v16 = v20;
              }
              else {
                uint64_t v16 = v21;
              }
            }
            else
            {
              uint64_t v16 = v14[1];
            }
            *(_DWORD *)this = 4;
            *((void *)this + 1) = v14;
            *((void *)this + 2) = v15;
            *((_DWORD *)this + 8) = 64;
            *((void *)this + 3) = v16;
            BOOL v18 = (char *)this + 24;
            goto LABEL_31;
          }
        }
        std::string::pointer v7 = a2[4].__r_.__value_.__l.__data_;
        int v8 = "single quote way too long";
        goto LABEL_6;
      }
    }
    std::string::pointer v7 = a2[4].__r_.__value_.__l.__data_;
    int v8 = "unterminated single quote";
LABEL_6:
    std::string::basic_string[abi:nn180100]<0>(&__str, v8);
    a2[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
    std::string::operator=(a2 + 3, &__str);
    std::string::size_type v9 = a2[6].__r_.__value_.__r.__words[0] - (void)v7;
    *(_DWORD *)this = 1;
    *((void *)this + 1) = v7;
    *((void *)this + 2) = v9;
    *((_DWORD *)this + 8) = 64;
    *((void *)this + 3) = 0;
    llvm::APInt::clearUnusedBits((uint64_t)this + 24);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    return;
  }
  while (1)
  {
    while (1)
    {
      std::string::pointer v10 = data;
      if (v6 == 39) {
        break;
      }
      if (v6 == -1)
      {
        std::string::pointer v7 = a2[4].__r_.__value_.__l.__data_;
        int v8 = "unterminated string constant";
        goto LABEL_6;
      }
      int v6 = -1;
      std::string::pointer data = v5;
      if (v10 != v5)
      {
        uint64_t v11 = 1;
        uint64_t v12 = (unsigned __int8 *)v10;
        goto LABEL_18;
      }
    }
    if (data == v5) {
      goto LABEL_30;
    }
    if (*data != 39) {
      break;
    }
    uint64_t v12 = (unsigned __int8 *)(data + 1);
    a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    int v6 = -1;
    std::string::pointer data = v5;
    if (v10 + 1 != v5)
    {
      uint64_t v11 = 2;
LABEL_18:
      std::string::pointer data = &v10[v11];
      a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      int v6 = *v12;
    }
  }
  std::string::pointer v5 = data;
LABEL_30:
  std::string::pointer v17 = a2[4].__r_.__value_.__l.__data_;
  *(_DWORD *)this = 3;
  *((void *)this + 1) = v17;
  *((void *)this + 2) = v5 - v17;
  *((_DWORD *)this + 8) = 64;
  *((void *)this + 3) = 0;
  BOOL v18 = (char *)this + 24;
LABEL_31:
  llvm::APInt::clearUnusedBits((uint64_t)v18);
}

void llvm::AsmLexer::LexQuote(llvm::AsmLexer *this, std::string *a2)
{
  std::string::pointer data = a2[6].__r_.__value_.__l.__data_;
  std::string::pointer v5 = (std::string::pointer)(a2[6].__r_.__value_.__l.__size_ + a2[6].__r_.__value_.__r.__words[2]);
  if (data == v5)
  {
    int v6 = -1;
  }
  else
  {
    a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    int v6 = *data++;
  }
  if (a2[5].__r_.__value_.__s.__data_[1])
  {
    std::string::pointer v7 = a2[4].__r_.__value_.__l.__data_;
    int v8 = "invalid usage of string literals";
    goto LABEL_26;
  }
  if (!a2[4].__r_.__value_.__s.__data_[14])
  {
    while (1)
    {
      switch(v6)
      {
        case 92:
          if (data == v5) {
            goto LABEL_25;
          }
          uint64_t v12 = (unsigned __int8 *)(data + 1);
          a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
          break;
        case -1:
LABEL_25:
          std::string::pointer v7 = a2[4].__r_.__value_.__l.__data_;
          int v8 = "unterminated string constant";
LABEL_26:
          std::string::basic_string[abi:nn180100]<0>(&__str, v8);
          a2[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
          std::string::operator=(a2 + 3, &__str);
          std::string::size_type v14 = a2[6].__r_.__value_.__r.__words[0] - (void)v7;
          *(_DWORD *)this = 1;
          *((void *)this + 1) = v7;
          *((void *)this + 2) = v14;
          *((_DWORD *)this + 8) = 64;
          *((void *)this + 3) = 0;
          llvm::APInt::clearUnusedBits((uint64_t)this + 24);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          return;
        case 34:
          std::string::pointer v13 = a2[4].__r_.__value_.__l.__data_;
          *(_DWORD *)this = 3;
          *((void *)this + 1) = v13;
          *((void *)this + 2) = data - v13;
          goto LABEL_31;
        default:
          uint64_t v12 = (unsigned __int8 *)data;
          break;
      }
      int v6 = -1;
      std::string::pointer data = v5;
      if (v12 != (unsigned __int8 *)v5)
      {
        std::string::pointer data = (std::string::pointer)(v12 + 1);
        a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v12 + 1);
        int v6 = *v12;
      }
    }
  }
  while (1)
  {
    while (1)
    {
      std::string::pointer v9 = data;
      if (v6 == 34) {
        break;
      }
      if (v6 == -1) {
        goto LABEL_25;
      }
      int v6 = -1;
      std::string::pointer data = v5;
      if (v9 != v5)
      {
        uint64_t v10 = 1;
        uint64_t v11 = (unsigned __int8 *)v9;
        goto LABEL_15;
      }
    }
    if (data == v5) {
      goto LABEL_30;
    }
    if (*data != 34) {
      break;
    }
    uint64_t v11 = (unsigned __int8 *)(data + 1);
    a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    int v6 = -1;
    std::string::pointer data = v5;
    if (v9 + 1 != v5)
    {
      uint64_t v10 = 2;
LABEL_15:
      std::string::pointer data = &v9[v10];
      a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      int v6 = *v11;
    }
  }
  std::string::pointer v5 = data;
LABEL_30:
  std::string::pointer v15 = a2[4].__r_.__value_.__l.__data_;
  *(_DWORD *)this = 3;
  *((void *)this + 1) = v15;
  *((void *)this + 2) = v5 - v15;
LABEL_31:
  *((_DWORD *)this + 8) = 64;
  *((void *)this + 3) = 0;
  uint64_t v16 = (char *)this + 24;
  llvm::APInt::clearUnusedBits((uint64_t)v16);
}

const char *llvm::AsmLexer::LexUntilEndOfStatement(llvm::AsmLexer *this)
{
  int v2 = (const char *)*((void *)this + 18);
  *((void *)this + 12) = v2;
  if (!llvm::AsmLexer::isAtStartOfComment(this, v2))
  {
    unsigned int v4 = *(const char **)(*((void *)this + 17) + 40);
    std::string::pointer v5 = v2;
    do
    {
      size_t v6 = strlen(v4);
      if (!strncmp(v5, v4, v6)) {
        break;
      }
      int v7 = *(unsigned __int8 *)v5;
      if (v7 == 10 || v7 == 13) {
        break;
      }
      if (v5 == (const char *)(*((void *)this + 19) + *((void *)this + 20))) {
        break;
      }
      *((void *)this + 18) = ++v5;
    }
    while (!llvm::AsmLexer::isAtStartOfComment(this, v5));
  }
  return v2;
}

BOOL llvm::AsmLexer::isAtStartOfComment(llvm::AsmLexer *this, const char *__s1)
{
  uint64_t v2 = *((void *)this + 17);
  if (*(unsigned char *)(v2 + 64) && !*((unsigned char *)this + 169)) {
    return 0;
  }
  unsigned int v4 = *(const char **)(v2 + 48);
  size_t v3 = *(void *)(v2 + 56);
  if (v3 == 1 || v4[1] == 35) {
    return *(unsigned __int8 *)v4 == *(unsigned __int8 *)__s1;
  }
  else {
    return strncmp(__s1, v4, v3) == 0;
  }
}

uint64_t llvm::AsmLexer::peekTokens(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 144);
  char v9 = *(unsigned char *)(a1 + 168);
  char v10 = *(unsigned char *)(a1 + 169);
  char v20 = *(unsigned char *)(a1 + 104);
  *(unsigned char *)(a1 + 104) = a4;
  char v11 = *(unsigned char *)(a1 + 170);
  *(unsigned char *)(a1 + 170) = 1;
  uint64_t v12 = (std::string *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = *(void *)(a1 + 88);
  }
  uint64_t v13 = *(void *)(a1 + 64);
  char v21 = v11;
  if (a3)
  {
    char v19 = v9;
    uint64_t v14 = 0;
    std::string::pointer v15 = (llvm::APInt *)(a2 + 24);
    while (1)
    {
      (**(void (***)(long long *__return_ptr, uint64_t))a1)(&v22, a1);
      long long v16 = v22;
      *((void *)v15 - 1) = v23;
      *(_OWORD *)((char *)v15 - 24) = v16;
      llvm::APInt::operator=(v15, (const llvm::APInt *)&v24);
      int v17 = v22;
      if (v25 >= 0x41 && v24) {
        MEMORY[0x263E50080](v24, 0x1000C8000313F17);
      }
      if (!v17) {
        break;
      }
      ++v14;
      std::string::pointer v15 = (llvm::APInt *)((char *)v15 + 40);
      if (a3 == v14)
      {
        uint64_t v14 = a3;
        break;
      }
    }
    char v9 = v19;
  }
  else
  {
    uint64_t v14 = 0;
  }
  *(void *)(a1 + 64) = v13;
  std::string::operator=(v12, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(a1 + 170) = v21;
  *(unsigned char *)(a1 + 104) = v20;
  *(unsigned char *)(a1 + 169) = v10;
  *(unsigned char *)(a1 + 168) = v9;
  *(void *)(a1 + 144) = v8;
  *(void *)(a1 + 96) = v7;
  return v14;
}

void llvm::AsmLexer::LexToken(std::string *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  std::string::pointer data = this[6].__r_.__value_.__l.__data_;
  std::string::size_type size = this[6].__r_.__value_.__l.__size_;
  this[4].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
  if (data == (const char *)(size + this[6].__r_.__value_.__r.__words[2]))
  {
    unsigned int v6 = -1;
    goto LABEL_37;
  }
  this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
  unsigned int v6 = *(unsigned __int8 *)data;
  if (this[7].__r_.__value_.__s.__data_[2] || v6 != 35)
  {
LABEL_37:
    if (llvm::AsmLexer::isAtStartOfComment((llvm::AsmLexer *)this, data))
    {
      llvm::AsmLexer::LexLineComment((llvm::AsmLexer *)a2, (uint64_t)this);
      return;
    }
    std::string::size_type v20 = this[5].__r_.__value_.__r.__words[2];
    char v21 = *(const char **)(v20 + 40);
    size_t v22 = strlen(v21);
    if (!strncmp(data, v21, v22))
    {
      this[6].__r_.__value_.__r.__words[0] = v22 + this[6].__r_.__value_.__r.__words[0] - 1;
      LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
      size_t v24 = strlen(v21);
      *(_DWORD *)a2 = 9;
      *(void *)(a2 + 8) = data;
      *(void *)(a2 + 16) = v24;
LABEL_44:
      *(_DWORD *)(a2 + 32) = 64;
      goto LABEL_53;
    }
    if (v6 != -1)
    {
      std::string::value_type v23 = this[7].__r_.__value_.__s.__data_[1];
      LOWORD(this[7].__r_.__value_.__l.__data_) = 0;
      switch(v6)
      {
        case 0u:
        case 9u:
        case 0x20u:
          this[7].__r_.__value_.__s.__data_[1] = v23;
          uint64_t v28 = (unsigned __int8 *)this[6].__r_.__value_.__l.__data_;
          for (int64_t i = v28 - (unsigned __int8 *)data; ; ++i)
          {
            int v30 = *v28++;
            if (v30 != 32 && v30 != 9) {
              break;
            }
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
          }
          if (!this[4].__r_.__value_.__s.__data_[8])
          {
            int v33 = 11;
            goto LABEL_73;
          }
          (*(void (**)(std::string *))this->__r_.__value_.__l.__data_)(this);
          return;
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 0xBu:
        case 0xCu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x2Eu:
        case 0x3Bu:
        case 0x3Fu:
        case 0x41u:
        case 0x42u:
        case 0x43u:
        case 0x44u:
        case 0x45u:
        case 0x46u:
        case 0x47u:
        case 0x48u:
        case 0x49u:
        case 0x4Au:
        case 0x4Bu:
        case 0x4Cu:
        case 0x4Du:
        case 0x4Eu:
        case 0x4Fu:
        case 0x50u:
        case 0x51u:
        case 0x52u:
        case 0x53u:
        case 0x54u:
        case 0x55u:
        case 0x56u:
        case 0x57u:
        case 0x58u:
        case 0x59u:
        case 0x5Au:
LABEL_65:
          if (v6 <= 0x7F) {
            int v32 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v6 + 60) & 0x100;
          }
          else {
            int v32 = __maskrune(v6, 0x100uLL);
          }
          if (v32 || v6 == 46 || v6 == 95 || *(unsigned char *)(this[5].__r_.__value_.__r.__words[2] + 181) && v6 == 63) {
            goto LABEL_124;
          }
          std::string::size_type v47 = this[4].__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:nn180100]<0>(&__p, "invalid character in input");
          llvm::AsmLexer::ReturnError(a2, this, v47, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          return;
        case 0xAu:
          LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
          int v27 = 9;
          goto LABEL_183;
        case 0xDu:
          LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
          std::string::pointer v34 = this[6].__r_.__value_.__l.__data_;
          if (v34 != (std::string::pointer)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2])
            && *v34 == 10)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)++v34;
          }
          int64_t i = v34 - data;
          int v33 = 9;
LABEL_73:
          *(_DWORD *)a2 = v33;
          *(void *)(a2 + 8) = data;
          *(void *)(a2 + 16) = i;
          goto LABEL_44;
        case 0x21u:
          std::string::pointer v35 = this[6].__r_.__value_.__l.__data_;
          if (*v35 == 61)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v35 + 1);
            int v36 = 35;
            goto LABEL_140;
          }
          int v27 = 34;
          goto LABEL_183;
        case 0x22u:
          llvm::AsmLexer::LexQuote((llvm::AsmLexer *)a2, this);
          return;
        case 0x23u:
          if (*(unsigned char *)(v20 + 184)) {
            goto LABEL_124;
          }
          int v27 = 37;
          goto LABEL_183;
        case 0x24u:
          if (this[4].__r_.__value_.__s.__data_[15]
            && llvm::hexDigitValue(char)::LUT[*(unsigned __int8 *)this[6].__r_.__value_.__l.__data_] != -1)
          {
            goto LABEL_42;
          }
          if (*(unsigned char *)(v20 + 182)) {
            goto LABEL_124;
          }
          int v27 = 26;
          goto LABEL_183;
        case 0x25u:
          if (this[4].__r_.__value_.__s.__data_[15] && (*this[6].__r_.__value_.__l.__data_ & 0xFE) == 0x30) {
            goto LABEL_42;
          }
          if (!*(unsigned char *)(v20 + 490)) {
            goto LABEL_182;
          }
          std::string::pointer v37 = this[6].__r_.__value_.__l.__data_;
          if (!v37) {
            goto LABEL_182;
          }
          size_t v38 = strlen(this[6].__r_.__value_.__l.__data_);
          if (v38 < 6)
          {
            if (v38 < 3)
            {
              if (v38 != 2) {
                goto LABEL_182;
              }
              goto LABEL_179;
            }
            if (*(_WORD *)v37 != 28519 || v37[2] != 116) {
              goto LABEL_179;
            }
            goto LABEL_198;
          }
          unint64_t v49 = 0x70000002FLL;
          if (*(_DWORD *)v37 == 1819042147 && *((_WORD *)v37 + 2) == 13873) {
            goto LABEL_253;
          }
          if (v38 < 7) {
            goto LABEL_147;
          }
          if (*(_DWORD *)v37 == 1819042147 && *(_DWORD *)(v37 + 3) == 1768447852)
          {
            unint64_t v49 = 0x800000030;
            goto LABEL_253;
          }
          if (*(_DWORD *)v37 == 1819042147 && *(_DWORD *)(v37 + 3) == 1869373292)
          {
            unint64_t v49 = 0x800000031;
            goto LABEL_253;
          }
          if (v38 < 9)
          {
            if (v38 != 8) {
              goto LABEL_147;
            }
            goto LABEL_224;
          }
          if (*(void *)v37 == 0x685F6C6572707464 && v37[8] == 105)
          {
            LODWORD(v49) = 50;
          }
          else
          {
            if (*(void *)v37 != 0x6C5F6C6572707464 || v37[8] != 111)
            {
LABEL_224:
              if (*(void *)v37 == 0x707369645F746F67)
              {
                unint64_t v49 = 0x900000035;
                goto LABEL_253;
              }
LABEL_147:
              if (*(_DWORD *)v37 == 1601466215 && *((_WORD *)v37 + 2) == 26984)
              {
                unint64_t v49 = 0x700000036;
                goto LABEL_253;
              }
              if (*(_DWORD *)v37 == 1601466215 && *((_WORD *)v37 + 2) == 28524)
              {
                unint64_t v49 = 0x700000037;
                goto LABEL_253;
              }
              if (v38 >= 8)
              {
                switch(*(void *)v37)
                {
                  case 0x7473666F5F746F67:
                    unint64_t v49 = 0x900000038;
                    goto LABEL_253;
                  case 0x656761705F746F67:
                    unint64_t v49 = 0x900000039;
                    goto LABEL_253;
                  case 0x6C65727074746F67:
                    unint64_t v49 = 0x90000003ALL;
                    goto LABEL_199;
                }
              }
              if (*(_WORD *)v37 != 28519 || v37[2] != 116)
              {
                if (*(_DWORD *)v37 != 1918857319 || *((_WORD *)v37 + 2) != 27749)
                {
                  if (*(_DWORD *)v37 == 1751607656 && *((_WORD *)v37 + 2) == 29285)
                  {
                    unint64_t v49 = 0x70000003DLL;
                    goto LABEL_253;
                  }
                  if (v38 >= 7 && *(_DWORD *)v37 == 1751607656 && *(_DWORD *)(v37 + 3) == 1953719656)
                  {
                    unint64_t v49 = 0x80000003ELL;
                    goto LABEL_253;
                  }
LABEL_179:
                  unint64_t v49 = 0x30000003CLL;
                  if (*(_WORD *)v37 == 26984) {
                    goto LABEL_253;
                  }
                  if (*(_WORD *)v37 == 28524)
                  {
                    unint64_t v49 = 0x30000003FLL;
                    goto LABEL_253;
                  }
                  if (v38 < 3)
                  {
LABEL_182:
                    int v27 = 36;
                    goto LABEL_183;
                  }
                  if (*(_WORD *)v37 == 25966 && v37[2] == 103)
                  {
                    uint64_t v64 = 0x400000034;
                  }
                  else
                  {
                    if (v38 < 8)
                    {
                      if (v38 < 5) {
                        goto LABEL_182;
                      }
LABEL_229:
                      if (*(_DWORD *)v37 == 1735617652 && v37[4] == 100)
                      {
                        unint64_t v49 = 0x600000043;
                      }
                      else
                      {
                        if (v38 < 6) {
                          goto LABEL_182;
                        }
                        if (*(_DWORD *)v37 != 1819503732 || *((_WORD *)v37 + 2) != 28004)
                        {
                          if (v38 < 8) {
                            goto LABEL_182;
                          }
                          if (*(void *)v37 == 0x69685F6C65727074)
                          {
                            LODWORD(v49) = 69;
                          }
                          else
                          {
                            if (*(void *)v37 != 0x6F6C5F6C65727074) {
                              goto LABEL_182;
                            }
                            LODWORD(v49) = 70;
                          }
                          LODWORD(v60) = 9;
                          goto LABEL_254;
                        }
                        unint64_t v49 = 0x700000044;
                      }
                      goto LABEL_253;
                    }
                    uint64_t v64 = 0x900000035;
                    if (*(void *)v37 != 0x69685F6C65726370)
                    {
                      if (*(void *)v37 != 0x6F6C5F6C65726370) {
                        goto LABEL_229;
                      }
                      unint64_t v49 = 0x900000042;
LABEL_253:
                      unint64_t v60 = HIDWORD(v49);
                      goto LABEL_254;
                    }
                  }
                  unint64_t v49 = v64 + 12;
                  goto LABEL_253;
                }
                unint64_t v49 = 0x70000003BLL;
LABEL_199:
                unint64_t v60 = HIDWORD(v49);
                goto LABEL_254;
              }
LABEL_198:
              unint64_t v49 = 0x400000034;
              goto LABEL_199;
            }
            LODWORD(v49) = 51;
          }
          LODWORD(v60) = 10;
LABEL_254:
          this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&v37[(v60 - 1)];
          *(_DWORD *)a2 = v49;
          *(void *)(a2 + 8) = data;
          *(void *)(a2 + 16) = v60;
          goto LABEL_44;
        case 0x26u:
          std::string::pointer v39 = this[6].__r_.__value_.__l.__data_;
          if (*v39 == 38)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v39 + 1);
            int v36 = 33;
            goto LABEL_140;
          }
          int v27 = 32;
          goto LABEL_183;
        case 0x27u:
          llvm::AsmLexer::LexSingleQuote((llvm::AsmLexer *)a2, this);
          return;
        case 0x28u:
          int v27 = 17;
          goto LABEL_183;
        case 0x29u:
          int v27 = 18;
          goto LABEL_183;
        case 0x2Au:
          int v27 = 23;
          goto LABEL_183;
        case 0x2Bu:
          int v27 = 12;
          goto LABEL_183;
        case 0x2Cu:
          int v27 = 25;
          goto LABEL_183;
        case 0x2Du:
          std::string::pointer v40 = this[6].__r_.__value_.__l.__data_;
          if (*v40 == 62)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v40 + 1);
            int v36 = 46;
            goto LABEL_140;
          }
          int v27 = 13;
          goto LABEL_183;
        case 0x2Fu:
          this[7].__r_.__value_.__s.__data_[1] = v23;
          llvm::AsmLexer::LexSlash((llvm::AsmLexer *)a2, this);
          return;
        case 0x30u:
        case 0x31u:
        case 0x32u:
        case 0x33u:
        case 0x34u:
        case 0x35u:
        case 0x36u:
        case 0x37u:
        case 0x38u:
        case 0x39u:
LABEL_42:
          llvm::AsmLexer::LexDigit((llvm::AsmLexer *)a2, (uint64_t)this);
          return;
        case 0x3Au:
          int v27 = 10;
          goto LABEL_183;
        case 0x3Cu:
          std::string::pointer v41 = this[6].__r_.__value_.__l.__data_;
          int v42 = *v41;
          switch(v42)
          {
            case '>':
              this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v41 + 1);
              int v36 = 41;
              goto LABEL_140;
            case '=':
              this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v41 + 1);
              int v36 = 39;
              goto LABEL_140;
            case '<':
              this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v41 + 1);
              int v36 = 40;
              goto LABEL_140;
          }
          int v27 = 38;
          goto LABEL_183;
        case 0x3Du:
          std::string::pointer v43 = this[6].__r_.__value_.__l.__data_;
          if (*v43 == 61)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v43 + 1);
            int v36 = 28;
            goto LABEL_140;
          }
          int v27 = 27;
          goto LABEL_183;
        case 0x3Eu:
          std::string::pointer v44 = this[6].__r_.__value_.__l.__data_;
          int v45 = *v44;
          if (v45 == 61)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v44 + 1);
            int v36 = 43;
          }
          else
          {
            if (v45 != 62)
            {
              int v27 = 42;
              goto LABEL_183;
            }
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v44 + 1);
            int v36 = 44;
          }
LABEL_140:
          *(_DWORD *)a2 = v36;
          *(void *)(a2 + 8) = data;
          uint64_t v26 = a2 + 24;
          *(_DWORD *)(a2 + 32) = 64;
          long long v48 = xmmword_261E912D0;
          goto LABEL_184;
        case 0x40u:
          if (*(unsigned char *)(v20 + 183))
          {
LABEL_124:
            llvm::AsmLexer::LexIdentifier((llvm::AsmLexer *)a2, this);
            return;
          }
          int v27 = 45;
LABEL_183:
          *(_DWORD *)a2 = v27;
          *(void *)(a2 + 8) = data;
          uint64_t v26 = a2 + 24;
          *(_DWORD *)(a2 + 32) = 64;
          long long v48 = xmmword_261E8D700;
LABEL_184:
          *(_OWORD *)(a2 + 16) = v48;
          goto LABEL_185;
        case 0x5Bu:
          int v27 = 19;
          goto LABEL_183;
        case 0x5Cu:
          int v27 = 16;
          goto LABEL_183;
        case 0x5Du:
          int v27 = 20;
          goto LABEL_183;
        case 0x5Eu:
          int v27 = 31;
          goto LABEL_183;
        default:
          switch(v6)
          {
            case '{':
              int v27 = 21;
              goto LABEL_183;
            case '|':
              std::string::pointer v46 = this[6].__r_.__value_.__l.__data_;
              if (*v46 == 124)
              {
                this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v46 + 1);
                int v36 = 30;
                goto LABEL_140;
              }
              int v27 = 29;
              break;
            case '}':
              int v27 = 22;
              goto LABEL_183;
            case '~':
              int v27 = 14;
              goto LABEL_183;
            default:
              goto LABEL_65;
          }
          goto LABEL_183;
      }
    }
    int v25 = this[7].__r_.__value_.__s.__data_[3];
    if (this[7].__r_.__value_.__s.__data_[1])
    {
      LOWORD(this[7].__r_.__value_.__l.__data_) = 0;
      if (!v25)
      {
LABEL_51:
        *(_DWORD *)a2 = 0;
        goto LABEL_52;
      }
      LOBYTE(v25) = 1;
    }
    else if (this[7].__r_.__value_.__s.__data_[3])
    {
      LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
      *(_DWORD *)a2 = 9;
LABEL_52:
      *(_DWORD *)(a2 + 32) = 64;
      *(void *)(a2 + 8) = data;
      *(void *)(a2 + 16) = 0;
LABEL_53:
      *(void *)(a2 + 24) = 0;
      uint64_t v26 = a2 + 24;
LABEL_185:
      llvm::APInt::clearUnusedBits(v26);
      return;
    }
    this[7].__r_.__value_.__s.__data_[0] = v25;
    this[7].__r_.__value_.__s.__data_[1] = v25;
    goto LABEL_51;
  }
  if (!this[7].__r_.__value_.__s.__data_[1])
  {
    unsigned int v6 = 35;
    goto LABEL_37;
  }
  for (uint64_t j = 0; j != 80; j += 40)
  {
    uint64_t v8 = (char *)&__p + j;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *((_DWORD *)v8 + 8) = 1;
    *((void *)v8 + 3) = 0;
  }
  uint64_t v9 = (*(uint64_t (**)(std::string *, std::string *, uint64_t, uint64_t))(this->__r_.__value_.__r.__words[0]
                                                                                 + 32))(this, &__p, 2, 1);
  if (this[7].__r_.__value_.__s.__data_[0]) {
    BOOL v10 = v9 == 2;
  }
  else {
    BOOL v10 = 0;
  }
  BOOL v11 = v10 && LODWORD(__p.__r_.__value_.__l.__data_) == 4;
  if (v11 && v68[0] == 3)
  {
    uint64_t v12 = 0;
    std::string::pointer v13 = this[4].__r_.__value_.__l.__data_;
    while (1)
    {
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&v13[v12];
      int v14 = v13[v12];
      BOOL v15 = v14 == 10 || v14 == 13;
      if (v15
        || &v13[v12] == (std::string::pointer)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2]))
      {
        break;
      }
      ++v12;
    }
    uint64_t v17 = this->__r_.__value_.__l.__size_;
    this[4].__r_.__value_.__s.__data_[11] = 0;
    llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>((uint64_t)&this->__r_.__value_.__l.__size_, v17, (unint64_t)v68);
    this[4].__r_.__value_.__s.__data_[11] = 0;
    llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>((uint64_t)&this->__r_.__value_.__l.__size_, this->__r_.__value_.__l.__size_, (unint64_t)&__p);
    *(_DWORD *)a2 = 8;
    *(void *)(a2 + 8) = v13;
    *(void *)(a2 + 16) = v12;
    *(_DWORD *)(a2 + 32) = 64;
    *(void *)(a2 + 24) = 0;
    llvm::APInt::clearUnusedBits(a2 + 24);
    goto LABEL_29;
  }
  if (*(unsigned char *)(this[5].__r_.__value_.__r.__words[2] + 65))
  {
    llvm::AsmLexer::LexLineComment((llvm::AsmLexer *)a2, (uint64_t)this);
LABEL_29:
    int v16 = 0;
    goto LABEL_30;
  }
  int v16 = 1;
LABEL_30:
  for (uint64_t k = 0; k != -20; k -= 10)
  {
    if (v68[k + 8] >= 0x41u)
    {
      uint64_t v19 = *(void *)&v68[k + 6];
      if (v19) {
        MEMORY[0x263E50080](v19, 0x1000C8000313F17);
      }
    }
  }
  if (v16)
  {
    std::string::pointer data = this[4].__r_.__value_.__l.__data_;
    goto LABEL_37;
  }
}

uint64_t llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)a1 + 40 * *(unsigned int *)(a1 + 8) == a2)
  {
    llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::push_back(a1, a3);
    return *(void *)a1 + 40 * *(unsigned int *)(a1 + 8) - 40;
  }
  else
  {
    uint64_t v4 = a2 - *(void *)a1;
    unint64_t v5 = llvm::SmallVectorTemplateCommon<llvm::AsmToken,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmToken,false>>(a1, a3, 1);
    unint64_t v6 = *(void *)a1 + v4;
    uint64_t v7 = *(void *)a1 + 40 * *(unsigned int *)(a1 + 8);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)(v7 - 40);
    *(_DWORD *)(v7 + 32) = *(_DWORD *)(v7 - 8);
    uint64_t v8 = *(void *)(v7 - 16);
    *(void *)(v7 + 16) = *(void *)(v7 - 24);
    *(void *)(v7 + 24) = v8;
    *(_DWORD *)(v7 - 8) = 0;
    uint64_t v9 = *(void *)a1 + 40 * *(unsigned int *)(a1 + 8);
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,llvm::AsmToken *,llvm::AsmToken *,llvm::AsmToken *,0>(v6, v9 - 40, v9);
    unsigned int v10 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v10;
    unint64_t v11 = *(void *)a1 + 40 * v10;
    BOOL v13 = v5 >= v6 && v5 < v11;
    unint64_t v14 = v5 + 40 * v13;
    uint64_t v15 = *(void *)(v14 + 16);
    *(_OWORD *)unint64_t v6 = *(_OWORD *)v14;
    *(void *)(v6 + 16) = v15;
    llvm::APInt::operator=((llvm::APInt *)(v6 + 24), (const llvm::APInt *)(v14 + 24));
  }
  return v6;
}

unint64_t llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t result = llvm::SmallVectorTemplateCommon<llvm::AsmToken,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmToken,false>>(a1, a2, 1);
  uint64_t v4 = *(void *)a1 + 40 * *(unsigned int *)(a1 + 8);
  uint64_t v5 = *(void *)(result + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)result;
  *(void *)(v4 + 16) = v5;
  LODWORD(v5) = *(_DWORD *)(result + 32);
  *(_DWORD *)(v4 + 32) = v5;
  if (v5 > 0x40) {
    operator new[]();
  }
  *(void *)(v4 + 24) = *(void *)(result + 24);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<llvm::AsmToken,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmToken,false>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v7 = *(void *)a1 + 40 * v4;
    if (*(void *)a1 <= a2 && v7 > a2)
    {
      unint64_t v9 = a2 - *(void *)a1;
      llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::grow(a1, v5);
      return *(void *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::grow(a1, v5);
    }
  }
  return a2;
}

void llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 40, &v6);
  llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::moveElementsForGrow(a1, (uint64_t)v4);
  int v5 = v6;
  if (*(void *)a1 != v3) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::moveElementsForGrow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3 + 40 * v4;
    do
    {
      long long v6 = *(_OWORD *)v3;
      *(void *)(a2 + 16) = *(void *)(v3 + 16);
      *(_OWORD *)a2 = v6;
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(v3 + 32);
      *(void *)(a2 + 24) = *(void *)(v3 + 24);
      *(_DWORD *)(v3 + 32) = 0;
      v3 += 40;
      a2 += 40;
    }
    while (v3 != v5);
    uint64_t v3 = *(void *)a1;
    unsigned int v7 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    unsigned int v7 = 0;
  }
  return llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::destroy_range(v3, v3 + 40 * v7);
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::destroy_range(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      if (*(_DWORD *)(v2 - 8) >= 0x41u)
      {
        unint64_t result = *(void *)(v2 - 16);
        if (result) {
          unint64_t result = MEMORY[0x263E50080](result, 0x1000C8000313F17);
        }
      }
      v2 -= 40;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,llvm::AsmToken *,llvm::AsmToken *,llvm::AsmToken *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v5 = a3 - 16;
    uint64_t v6 = a2 - 16;
    do
    {
      uint64_t v7 = v6 - 24;
      long long v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v5 - 8) = *(void *)(v6 - 8);
      *(_OWORD *)(v5 - 24) = v8;
      llvm::APInt::operator=(v5, v6);
      v5 -= 40;
      v6 -= 40;
    }
    while (v7 != a1);
  }
  return a2;
}

BOOL llvm::MCParserUtils::isSymbolUsedInExpression(llvm::MCParserUtils *a1, uint64_t a2, const llvm::MCExpr *a3)
{
  while (2)
  {
    BOOL result = 0;
    switch(*(unsigned char *)a2)
    {
      case 1:
      case 4:
        return result;
      case 2:
        uint64_t v7 = *(llvm::MCParserUtils **)(a2 + 16);
        if ((*((_DWORD *)v7 + 2) & 0x3840) == 0x1000)
        {
          *((_DWORD *)v7 + 2) |= 4u;
          uint64_t v6 = (uint64_t *)((char *)v7 + 24);
          goto LABEL_7;
        }
        return v7 == a1;
      case 3:
        uint64_t v6 = (uint64_t *)(a2 + 16);
        goto LABEL_7;
      default:
        if ((llvm::MCParserUtils::isSymbolUsedInExpression(a1, *(const llvm::MCSymbol **)(a2 + 16), a3) & 1) == 0)
        {
          uint64_t v6 = (uint64_t *)(a2 + 24);
LABEL_7:
          a2 = *v6;
          continue;
        }
        return 1;
    }
  }
}

void llvm::createMCAsmParser(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 48) != 32 || *(_DWORD *)(a2 + 60) != 16) {
    operator new();
  }
  operator new();
}

unint64_t llvm::MCSymbol::getFragment(llvm::MCSymbol *this, int a2)
{
  unint64_t result = *(void *)this & 0xFFFFFFFFFFFFFFF8;
  if (!result)
  {
    int v4 = *((_DWORD *)this + 2);
    if ((v4 & 0x3800) == 0x1000)
    {
      if (a2 | ((v4 & 4) >> 2)) {
        int v5 = 4;
      }
      else {
        int v5 = 0;
      }
      *((_DWORD *)this + 2) = v5 | v4 & 0xFFFFFFFB;
      unint64_t result = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)this + 3));
      *(void *)this = *(void *)this & 7 | result;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t anonymous namespace'::AsmParser::AsmParser(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  *(_WORD *)(a1 + 32) = 0;
  uint64_t v12 = (unsigned char *)(a1 + 32);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_270DC1B68;
  llvm::AsmLexer::AsmLexer((llvm::MCAsmLexer *)(a1 + 40), a5);
  *(void *)(a1 + 216) = a3;
  *(void *)(a1 + 224) = a4;
  *(void *)(a1 + 232) = a5;
  *(void *)(a1 + 240) = a2;
  if (a6 <= 1) {
    int v13 = 1;
  }
  else {
    int v13 = a6;
  }
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = v13;
  *(_DWORD *)(a1 + 284) = 0;
  *(_WORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_DWORD *)(a1 + 340) = 24;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(void *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 416) |= 1u;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 480) = a1 + 496;
  *(void *)(a1 + 488) = 0x400000000;
  *(void *)(a1 + 720) = a1 + 736;
  *(void *)(a1 + 728) = 0x200000000;
  *(_OWORD *)(a1 + 776) = 0u;
  *(void *)(a1 + 768) = a1 + 776;
  *(_DWORD *)(a1 + 792) = -1;
  *(_OWORD *)(a1 + 796) = 0u;
  *(void *)(a1 + 812) = 0;
  *(_DWORD *)(a1 + 820) = 16;
  *(void *)(a1 + 840) = 0x1000000000;
  *(_OWORD *)(a1 + 824) = 0u;
  unsigned char *v12 = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 56) = a1;
  uint64_t v14 = *(void *)(*(void *)a2 + 24 * (v13 - 1));
  uint64_t v15 = *(void *)(v14 + 8);
  uint64_t v16 = *(void *)(v14 + 16) - v15;
  *(void *)(a1 + 192) = v15;
  *(void *)(a1 + 200) = v16;
  *(void *)(a1 + 184) = v15;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 211) = 1;
  *(void *)(a4 + 288) = a1 + 272;
  switch(*a3)
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      llvm::report_fatal_error((llvm *)"Need to implement createSPIRVAsmParser for SPIRV format.", (const llvm::Twine *)1);
    case 5:
      operator new();
    case 6:
      operator new();
    default:
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 264) + 16))(*(void *)(a1 + 264), a1);
      *(_DWORD *)(a1 + 420) = 0;
      return a1;
  }
}

uint64_t anonymous namespace'::AsmParser::getLexer(_anonymous_namespace_::AsmParser *this)
{
  return (uint64_t)this + 40;
}

void anonymous namespace'::HLASMAsmParser::~HLASMAsmParser(_anonymous_namespace_::HLASMAsmParser *this)
{
  *(unsigned char *)(*((void *)this + 106) + 104) = 1;
}

{
  uint64_t vars8;

  *(unsigned char *)(*((void *)this + 106) + 104) = 1;
  JUMPOUT(0x263E500B0);
}

uint64_t anonymous namespace'::AsmParser::addDirectiveHandler(_DWORD *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10 = (llvm::StringMapImpl *)(a1 + 80);
  uint64_t result = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)(a1 + 80), a2, a3);
  uint64_t v12 = *((void *)a1 + 40);
  uint64_t v13 = result;
  uint64_t v14 = *(void *)(v12 + 8 * result);
  if (v14 == -8)
  {
    --a1[84];
  }
  else if (v14)
  {
    goto LABEL_14;
  }
  uint64_t v15 = operator new(a3 + 25, (std::align_val_t)8uLL);
  uint64_t v16 = v15;
  uint64_t v17 = (char *)(v15 + 3);
  if (a3) {
    memcpy(v15 + 3, a2, a3);
  }
  v17[a3] = 0;
  v16[1] = 0;
  _OWORD v16[2] = 0;
  unint64_t *v16 = a3;
  *(void *)(v12 + 8 * v13) = v16;
  ++a1[83];
  uint64_t result = llvm::StringMapImpl::RehashTable(v10, v13);
  for (int64_t i = (uint64_t *)(*((void *)a1 + 40) + 8 * result); ; ++i)
  {
    uint64_t v14 = *i;
    if (*i && v14 != -8) {
      break;
    }
  }
LABEL_14:
  *(void *)(v14 + 8) = a4;
  *(void *)(v14 + 16) = a5;
  return result;
}

void anonymous namespace'::AsmParser::addAliasForDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v16[0] = a2;
  v16[1] = a3;
  v15[0] = a4;
  v15[1] = a5;
  int v5 = (llvm::StringMapImpl *)(a1 + 800);
  llvm::StringRef::lower((llvm::StringRef *)v15, v13);
  if ((v14 & 0x80u) == 0) {
    uint64_t v6 = (uint64_t *)v13;
  }
  else {
    uint64_t v6 = (uint64_t *)v13[0];
  }
  if ((v14 & 0x80u) == 0) {
    unint64_t v7 = v14;
  }
  else {
    unint64_t v7 = (unint64_t)v13[1];
  }
  llvm::StringRef::lower((llvm::StringRef *)v16, __p);
  if ((v12 & 0x80u) == 0) {
    unint64_t v9 = (uint64_t *)__p;
  }
  else {
    unint64_t v9 = (uint64_t *)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    unint64_t v10 = v12;
  }
  else {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v14 < 0) {
    operator delete(v13[0]);
  }
}

uint64_t anonymous namespace'::AsmParser::getSourceManager(_anonymous_namespace_::AsmParser *this)
{
  return *((void *)this + 30);
}

uint64_t anonymous namespace'::AsmParser::getContext(_anonymous_namespace_::AsmParser *this)
{
  return *((void *)this + 27);
}

uint64_t anonymous namespace'::AsmParser::getStreamer(_anonymous_namespace_::AsmParser *this)
{
  return *((void *)this + 28);
}

uint64_t anonymous namespace'::AsmParser::getAssemblerDialect(_anonymous_namespace_::AsmParser *this)
{
  uint64_t result = *((unsigned int *)this + 198);
  if (result == -1) {
    return *(unsigned int *)(*((void *)this + 29) + 176);
  }
  return result;
}

uint64_t anonymous namespace'::AsmParser::setAssemblerDialect(uint64_t this, int a2)
{
  *(_DWORD *)(this + 792) = a2;
  return this;
}

BOOL anonymous namespace'::AsmParser::Run(_anonymous_namespace_::AsmParser *this, char a2, char a3)
{
  v63[64] = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 182) = 0;
  unint64_t v5 = (unint64_t)this + 776;
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)this + 768, *((void **)this + 97));
  *((void *)this + 96) = v5;
  *((void *)this + 98) = 0;
  *((void *)this + 97) = 0;
  if ((a2 & 1) == 0) {
    (*(void (**)(void, void, void))(**((void **)this + 28) + 176))(*((void *)this + 28), 0, *(void *)(*((void *)this + 1) + 288));
  }
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
  *((unsigned char *)this + 32) = 0;
  int v6 = *((_DWORD *)this + 71);
  char v7 = *((unsigned char *)this + 289);
  v62[0] = v63;
  v62[1] = (void *)0x400000000;
  if (*(unsigned char *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this) + 1601))
  {
    uint64_t v8 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
    uint64_t v9 = *(unsigned int *)(v8 + 152);
    if (v9) {
      unint64_t v5 = *(void *)(*(void *)(v8 + 144) + 32 * v9 - 32);
    }
    else {
      unint64_t v5 = 0;
    }
    if (!*(void *)(v5 + 8))
    {
      unint64_t v10 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
      v56[0] = "tmp";
      __int16 v58 = 259;
      unint64_t TempSymbol = llvm::MCContext::createTempSymbol(v10, (const llvm::Twine *)v56, 1);
      uint64_t v12 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
      (*(void (**)(uint64_t, unint64_t, void))(*(void *)v12 + 192))(v12, TempSymbol, 0);
      *(void *)(v5 + 8) = TempSymbol;
    }
    uint64_t v13 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
    v56[0] = (char *)v5;
    llvm::SetVector<llvm::MCSection *,std::vector<llvm::MCSection *>,llvm::DenseSet<llvm::MCSection *,llvm::DenseMapInfo<llvm::MCSection *,void>>>::insert((void *)(v13 + 1608), v56);
  }
  (*(void (**)(void))(**((void **)this + 1) + 192))(*((void *)this + 1));
  while (**((_DWORD **)this + 6))
  {
    v56[0] = (char *)&v57;
    v56[1] = (char *)0x800000000;
    int v59 = -1;
    char v60 = 0;
    unint64_t v61 = v62;
    if ((*(unsigned int (**)(_anonymous_namespace_::AsmParser *, char **, void))(*(void *)this + 280))(this, v56, 0))
    {
      if (!*((_DWORD *)this + 6) && **((_DWORD **)this + 6) == 1) {
        (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
      }
      llvm::MCAsmParser::printPendingErrors(this);
      if (!*(unsigned char *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                     + 107))
        (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 224))(this);
    }
    else
    {
      llvm::MCAsmParser::printPendingErrors(this);
    }
    llvm::SmallVector<std::unique_ptr<llvm::MCParsedAsmOperand>,8u>::~SmallVector(v56);
  }
  (*(void (**)(void))(**((void **)this + 1) + 200))(*((void *)this + 1));
  llvm::MCAsmParser::printPendingErrors(this);
  uint64_t v14 = *((void *)this + 1);
  uint64_t v15 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 176))(v14, v15);
  if (*((_DWORD *)this + 71) != v6 || *((unsigned char *)this + 289) != (v7 & 1))
  {
    uint64_t v16 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                                + 8)
                    + 8);
    v56[0] = "unmatched .ifs or .elses";
    __int16 v58 = 259;
    (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, char **, void, void))(*(void *)this
                                                                                                 + 176))(this, v16, v56, 0, 0);
  }
  uint64_t v17 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
  if (*(void *)(v17 + 1576))
  {
    uint64_t v18 = *(void *)(v17 + 1560);
    uint64_t v19 = *(unsigned int *)(v18 + 144);
    if (v19)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 72 * v19;
      size_t v22 = (char *)(*(void *)(v18 + 136) + 23);
      do
      {
        if (*v22 < 0) {
          uint64_t v23 = *(void *)(v22 - 15);
        }
        else {
          uint64_t v23 = *v22;
        }
        if (v23) {
          BOOL v24 = 1;
        }
        else {
          BOOL v24 = v20 == 0;
        }
        if (!v24)
        {
          uint64_t v25 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                                      + 8)
                          + 8);
          unint64_t v5 = v5 & 0xFFFFFFFF00000000 | v20;
          v52[0] = "unassigned file number: ";
          unint64_t v53 = v5;
          __int16 v55 = 2051;
          v56[0] = (char *)v52;
          unsigned int v57 = " for .file directives";
          __int16 v58 = 770;
          (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, char **, void, void))(*(void *)this + 176))(this, v25, v56, 0, 0);
        }
        ++v20;
        v22 += 72;
        v21 -= 72;
      }
      while (v21);
    }
  }
  if ((a3 & 1) == 0)
  {
    if (*(unsigned char *)(*((void *)this + 29) + 18))
    {
      uint64_t v26 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
      uint64_t v27 = *(unsigned int *)(v26 + 1152);
      if (v27)
      {
        for (int64_t i = *(uint64_t **)(v26 + 1144); !*i || *i == -8; ++i)
          ;
      }
      else
      {
        int64_t i = *(uint64_t **)(v26 + 1144);
      }
      uint64_t v30 = *(void *)(v26 + 1144) + 8 * v27;
      if (i != (uint64_t *)v30)
      {
        uint64_t v31 = *i;
        do
        {
          int v32 = *(_DWORD **)(v31 + 8);
          if ((v32[2] & 1) != 0
            && (v32[2] & 0x3800) != 0x1000
            && !llvm::MCSymbol::getFragment((llvm::MCSymbol *)v32, 1))
          {
            uint64_t v33 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this);
            if ((*(unsigned char *)v32 & 4) != 0)
            {
              int v36 = (uint64_t *)*((void *)v32 - 1);
              uint64_t v37 = *v36;
              std::string::pointer v34 = v36 + 2;
              uint64_t v35 = v37;
            }
            else
            {
              std::string::pointer v34 = 0;
              uint64_t v35 = 0;
            }
            uint64_t v38 = *(void *)(*(void *)(v33 + 8) + 8);
            __int16 v55 = 1283;
            v52[0] = "assembler local symbol '";
            unint64_t v53 = (unint64_t)v34;
            uint64_t v54 = v35;
            v56[0] = (char *)v52;
            unsigned int v57 = "' not defined";
            __int16 v58 = 770;
            (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, char **, void, void))(*(void *)this + 176))(this, v38, v56, 0, 0);
          }
          do
          {
            uint64_t v39 = i[1];
            ++i;
            uint64_t v31 = v39;
            if (v39) {
              BOOL v40 = v31 == -8;
            }
            else {
              BOOL v40 = 1;
            }
          }
          while (v40);
        }
        while (i != (uint64_t *)v30);
      }
    }
    uint64_t v41 = *((unsigned int *)this + 122);
    if (v41)
    {
      int v42 = (uint64_t *)*((void *)this + 60);
      uint64_t v43 = 56 * v41;
      do
      {
        if (!llvm::MCSymbol::getFragment((llvm::MCSymbol *)v42[6], 1))
        {
          long long v44 = *(_OWORD *)(v42 + 1);
          long long v45 = *(_OWORD *)(v42 + 3);
          *((_DWORD *)this + 114) = *((_DWORD *)v42 + 10);
          *(_OWORD *)((char *)this + 424) = v44;
          *(_OWORD *)((char *)this + 440) = v45;
          uint64_t v46 = *v42;
          v56[0] = "directional label undefined";
          __int16 v58 = 259;
          (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, char **, void, void))(*(void *)this + 176))(this, v46, v56, 0, 0);
        }
        v42 += 7;
        v43 -= 56;
      }
      while (v43);
    }
    if (*((unsigned char *)this + 32)) {
      goto LABEL_69;
    }
    std::string::size_type v47 = (void *)*((void *)this + 28);
    uint64_t v48 = v47[2];
    if (v48)
    {
      (*(void (**)(void))(*(void *)v48 + 72))(v47[2]);
      std::string::size_type v47 = (void *)*((void *)this + 28);
    }
    llvm::MCStreamer::finish(v47, *((void *)this + 17));
  }
  if (*((unsigned char *)this + 32))
  {
LABEL_69:
    BOOL v49 = 1;
    goto LABEL_71;
  }
  BOOL v49 = *(unsigned char *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this) + 2056) != 0;
LABEL_71:
  if (v62[0] != v63) {
    free(v62[0]);
  }
  return v49;
}

uint64_t anonymous namespace'::AsmParser::setParsingMSInlineAsm(uint64_t this, char a2)
{
  *(unsigned char *)(this + 797) = a2;
  *(unsigned char *)(this + 149) = a2;
  return this;
}

uint64_t anonymous namespace'::AsmParser::isParsingMSInlineAsm(_anonymous_namespace_::AsmParser *this)
{
  return *((unsigned __int8 *)this + 797);
}

BOOL anonymous namespace'::AsmParser::discardLTOSymbol(uint64_t a1, void *a2, size_t a3)
{
  if (*(void *)(a1 + 784))
  {
    uint64_t v5 = a1 + 776;
    uint64_t v6 = *(void *)(a1 + 776);
    if (!v6) {
      goto LABEL_9;
    }
    uint64_t v7 = a1 + 776;
    do
    {
      long long v16 = *(_OWORD *)(v6 + 32);
      int v8 = llvm::StringRef::compare((uint64_t)&v16, a2, a3);
      uint64_t v9 = (uint64_t *)(v6 + 8);
      if (v8 >= 0)
      {
        uint64_t v9 = (uint64_t *)v6;
        uint64_t v7 = v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 == v7
      || (unint64_t v10 = *(const void **)(v7 + 32),
          size_t v11 = *(void *)(v7 + 40),
          *(void *)&long long v16 = a2,
          *((void *)&v16 + 1) = a3,
          (llvm::StringRef::compare((uint64_t)&v16, v10, v11) & 0x80000000) != 0))
    {
LABEL_9:
      uint64_t v7 = v5;
    }
    BOOL v12 = v5 == v7;
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 720);
    uint64_t v14 = *(unsigned int *)(a1 + 728);
    BOOL v12 = llvm::SmallSet<llvm::StringRef,2u,std::less<llvm::StringRef>>::vfind(v13, v14, a2, a3) == v13 + 16 * v14;
  }
  return !v12;
}

uint64_t llvm::MCAsmParser::isParsingMasm(llvm::MCAsmParser *this)
{
  return 0;
}

uint64_t llvm::MCAsmParser::defineMacro()
{
  return 1;
}

uint64_t llvm::MCAsmParser::lookUpField()
{
  return 1;
}

{
  return 1;
}

uint64_t llvm::MCAsmParser::lookUpType()
{
  return 1;
}

uint64_t anonymous namespace'::AsmParser::parseMSInlineAsm(uint64_t a1, std::string *a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  v223[4] = *MEMORY[0x263EF8340];
  uint64_t v221 = v223;
  uint64_t v222 = 0x400000000;
  char v218 = v220;
  uint64_t v219 = 0x400000000;
  unsigned int v193 = &v195;
  long long v194 = xmmword_261E8D150;
  int v190 = &v192;
  long long v191 = xmmword_261E8D150;
  uint64_t v215 = (char *)&v217;
  uint64_t v216 = 0x400000000;
  unint64_t v212 = (char *)&v214;
  uint64_t v213 = 0x400000000;
  __base = v211;
  size_t __nel = 0x400000000;
  uint64_t v206 = v208;
  size_t v207 = 0x400000000;
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  unint64_t v180 = a3;
  int v181 = a4;
  uint64_t v177 = a5;
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8))
  {
    unsigned int v183 = 0;
    while (1)
    {
      if ((**(_DWORD **)(a1 + 48) - 21) > 1)
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__r.__words[2];
        __str.__r_.__value_.__l.__size_ = 0x800000000;
        unsigned int v203 = -1;
        char v204 = 0;
        uint64_t v205 = &v206;
        if (((*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(void *)a1 + 280))(a1, &__str, a10) & 1) != 0
          || v204)
        {
          llvm::MCAsmParser::printPendingErrors((llvm::MCAsmParser *)a1);
          llvm::SmallVector<std::unique_ptr<llvm::MCParsedAsmOperand>,8u>::~SmallVector(&__str.__r_.__value_.__l.__data_);
          uint64_t v166 = 1;
          goto LABEL_314;
        }
        if (v203 != -1)
        {
          uint64_t v171 = a7;
          uint64_t v172 = a6;
          int v20 = __str.__r_.__value_.__r.__words[1];
          unsigned int v176 = (unsigned __int16 *)(*a8 - 32 * v203);
          uint64_t v169 = *a8;
          unint64_t v170 = a8;
          uint64_t v168 = -(uint64_t)v203;
          if (LODWORD(__str.__r_.__value_.__r.__words[1]) != 1)
          {
            uint64_t v21 = *a8 - 32 * v203;
            uint64_t v175 = v21 + 16;
            int v173 = (unsigned char *)(v21 + 4);
            uint64_t v174 = (unsigned __int16 *)(v21 + 12);
            uint64_t v22 = v21 + 34;
            uint64_t v23 = 1;
            int v179 = __str.__r_.__value_.__r.__words[1];
            do
            {
              uint64_t v24 = *(void *)(__str.__r_.__value_.__r.__words[0] + 8 * v23);
              if (!(*(unsigned int (**)(uint64_t))(*(void *)v24 + 48))(v24)
                || ((*(uint64_t (**)(uint64_t))(*(void *)v24 + 96))(v24) & 1) != 0
                || (uint64_t v25 = *(void *)(a1 + 8),
                    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 56))(v24),
                    ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v25 + 80))(v25, v26) & 1) != 0))
              {
                uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 16))(v24);
                if (v28)
                {
                  uint64_t v29 = v27;
                  int v30 = v28;
                  uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 24))(v24);
                  if (v31)
                  {
                    uint64_t v32 = v31;
                    int v33 = *(char *)(v24 + 39);
                    if (v33 >= 0) {
                      std::string::pointer v34 = (char *)(v24 + 16);
                    }
                    else {
                      std::string::pointer v34 = *(char **)(v24 + 16);
                    }
                    if (v33 >= 0) {
                      size_t v35 = *(unsigned __int8 *)(v24 + 39);
                    }
                    else {
                      size_t v35 = *(void *)(v24 + 24);
                    }
                    if ((*(unsigned int (**)(uint64_t))(*(void *)v24 + 40))(v24))
                    {
                      if ((*(unsigned int (**)(uint64_t))(*(void *)v24 + 104))(v24)) {
                        std::string::pointer v34 = "r";
                      }
                      else {
                        std::string::pointer v34 = "i";
                      }
                      size_t v35 = 1;
                    }
                    if (v23 == 1) {
                      int v36 = (*(unsigned __int8 *)(v175 + 2) >> 4) & 1;
                    }
                    else {
                      int v36 = 0;
                    }
                    char v182 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 72))(v24);
                    if (v36)
                    {
                      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v218, v32);
                      char v37 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 96))(v24);
                      llvm::SmallVectorTemplateBase<char,true>::push_back(&v190, v37);
                      __int16 v188 = 1283;
                      long long __dst = "=";
                      int v186 = v34;
                      size_t v187 = v35;
                      llvm::Twine::str((llvm::Twine *)&__dst, &__p);
                      unint64_t v38 = llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>((uint64_t)&v212, (unint64_t)&__p, 1);
                      uint64_t v39 = &v212[24 * v213];
                      long long v40 = *(_OWORD *)v38;
                      *((void *)v39 + 2) = *(void *)(v38 + 16);
                      *(_OWORD *)uint64_t v39 = v40;
                      *(void *)(v38 + 8) = 0;
                      *(void *)(v38 + 16) = 0;
                      *(void *)unint64_t v38 = 0;
                      LODWORD(v213) = v213 + 1;
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      ++v183;
                      llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,int,BOOL &>((uint64_t)&v206, 5, v29, v30, 0, v182);
                      int v20 = v179;
                    }
                    else
                    {
                      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v221, v32);
                      char v41 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 96))(v24);
                      llvm::SmallVectorTemplateBase<char,true>::push_back(&v193, v41);
                      if (v34)
                      {
                        std::string::basic_string[abi:nn180100](&__dst, v34, v35);
                      }
                      else
                      {
                        long long __dst = 0;
                        uint64_t v185 = 0;
                        int v186 = 0;
                      }
                      int v20 = v179;
                      unint64_t v43 = llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>((uint64_t)&v215, (unint64_t)&__dst, 1);
                      long long v44 = &v215[24 * v216];
                      long long v45 = *(_OWORD *)v43;
                      *((void *)v44 + 2) = *(void *)(v43 + 16);
                      *(_OWORD *)long long v44 = v45;
                      *(void *)(v43 + 8) = 0;
                      *(void *)(v43 + 16) = 0;
                      *(void *)unint64_t v43 = 0;
                      LODWORD(v216) = v216 + 1;
                      if (SHIBYTE(v186) < 0) {
                        operator delete(__dst);
                      }
                      if ((*(unsigned char *)(v22 + 32 * *v176 + 6 * *v174) & 8) != 0) {
                        int v46 = 3;
                      }
                      else {
                        int v46 = 4;
                      }
                      llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,int,BOOL &>((uint64_t)&v206, v46, v29, v30, 0, v182);
                    }
                  }
                }
              }
              else if (*v173 && *(_DWORD *)(v24 + 8) < *v173)
              {
                int v42 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 56))(v24);
                llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__base, v42);
              }
              ++v23;
              v22 += 6;
            }
            while (v20 != v23);
          }
          uint64_t v47 = *v176;
          uint64_t v48 = v169 + 32 * v168;
          uint64_t v49 = *(unsigned __int16 *)(v48 + 10);
          uint64_t v50 = *(unsigned __int8 *)(v48 + 8);
          uint64_t v51 = *(unsigned __int8 *)(v48 + 9);
          uint64_t v52 = __nel;
          unint64_t v53 = __nel + v51;
          a3 = v180;
          a4 = v181;
          a7 = v171;
          if (v53 > HIDWORD(__nel))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, v211, v53, 4);
            uint64_t v52 = __nel;
          }
          a6 = v172;
          if (v51)
          {
            uint64_t v54 = &v176[16 * v47 + 16 + v49 + v50];
            __int16 v55 = (char *)__base + 4 * v52;
            uint64_t v56 = 2 * v51;
            do
            {
              int v57 = *v54++;
              *v55++ = v57;
              v56 -= 2;
            }
            while (v56);
            LODWORD(v52) = __nel;
          }
          LODWORD(__nel) = v52 + v51;
          a8 = v170;
        }
        llvm::SmallVector<std::unique_ptr<llvm::MCParsedAsmOperand>,8u>::~SmallVector(&__str.__r_.__value_.__l.__data_);
      }
      else
      {
        uint64_t v17 = *(void *)(a1 + 136);
        (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
        if (**(_DWORD **)(a1 + 48) == 9) {
          (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
        }
        uint64_t v18 = *(void *)(a1 + 136) - v17;
        if (v207 >= HIDWORD(v207))
        {
          llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long &>((uint64_t)&v206, 9, v17, v18);
        }
        else
        {
          uint64_t v19 = (char *)v206 + 128 * (unint64_t)v207;
          *(_DWORD *)uint64_t v19 = 9;
          *((void *)v19 + 1) = v17;
          *((_DWORD *)v19 + 4) = v18;
          v19[20] = 0;
          *(_OWORD *)(v19 + 56) = 0u;
          *(_OWORD *)(v19 + 72) = 0u;
          *(_OWORD *)(v19 + 88) = 0u;
          *((void *)v19 + 13) = 0;
          *((void *)v19 + 4) = 0;
          *((void *)v19 + 5) = 0;
          *((void *)v19 + 3) = 0;
          v19[48] = 0;
          *((_DWORD *)v19 + 28) = 1;
          v19[120] = 0;
          LODWORD(v207) = v207 + 1;
        }
      }
      if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8)) {
        goto LABEL_61;
      }
    }
  }
  unsigned int v183 = 0;
LABEL_61:
  *a3 = v219;
  *a4 = v222;
  unsigned int v58 = __nel;
  if (__nel >= 2)
  {
    qsort(__base, __nel, 4uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<unsigned int>);
    unsigned int v58 = __nel;
  }
  int v59 = __base;
  if (v58)
  {
    char v60 = (char *)__base + 4 * v58;
    uint64_t v61 = 4 * v58 - 8;
    uint64_t v62 = (char *)__base;
    while (1)
    {
      unint64_t v63 = v62;
      v62 += 4;
      if (v62 == v60) {
        break;
      }
      uint64_t v64 = v61;
      int v65 = *v63;
      v61 -= 4;
      if (*v63 == v63[1])
      {
        if (v63 + 2 != (_DWORD *)v60)
        {
          uint64_t v66 = 4;
          do
          {
            int v67 = v65;
            int v65 = *(_DWORD *)&v62[v66];
            if (v67 != v65)
            {
              v63[1] = v65;
              ++v63;
            }
            v66 += 4;
            v64 -= 4;
          }
          while (v64);
        }
        char v60 = (char *)(v63 + 1);
        break;
      }
    }
  }
  else
  {
    char v60 = (char *)__base;
  }
  unint64_t v68 = (unint64_t)(v60 - v59) >> 2;
  LODWORD(__nel) = v68;
  memset(&__str, 0, sizeof(__str));
  if (v68 <= (unint64_t)*(unsigned int *)(a7 + 12))
  {
    unint64_t v77 = *(unsigned int *)(a7 + 8);
    if (v77 >= v68) {
      uint64_t v78 = v68;
    }
    else {
      uint64_t v78 = *(unsigned int *)(a7 + 8);
    }
    if (v78)
    {
      uint64_t v79 = *(std::string **)a7;
      uint64_t v80 = -v78;
      do
      {
        std::string::operator=(v79++, &__str);
        BOOL v81 = __CFADD__(v80++, 1);
      }
      while (!v81);
      unint64_t v77 = *(unsigned int *)(a7 + 8);
    }
    unint64_t v82 = v77 - v68;
    if (v77 >= v68)
    {
      if (v77 > v68)
      {
        uint64_t v85 = 3 * v77;
        uint64_t v86 = *(void *)a7 + 24 * v77 - 1;
        uint64_t v87 = 24 * v68 - 8 * v85;
        uint64_t v88 = (char *)v86;
        do
        {
          int v89 = *v88;
          v88 -= 24;
          if (v89 < 0) {
            operator delete(*(void **)(v86 - 23));
          }
          uint64_t v86 = (uint64_t)v88;
          v87 += 24;
        }
        while (v87);
      }
    }
    else
    {
      unint64_t v83 = (std::string *)(*(void *)a7 + 24 * v77);
      do
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v83, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v84 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v83->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v83->__r_.__value_.__l.__data_ = v84;
        }
        ++v83;
        BOOL v81 = __CFADD__(v82++, 1);
      }
      while (!v81);
    }
  }
  else
  {
    long long __dst = 0;
    uint64_t v69 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a7, (void *)(a7 + 16), v68, 24, (uint64_t *)&__dst);
    uint64_t v70 = 0;
    do
    {
      int v71 = (std::string *)&v69[v70];
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v71, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v72 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v71->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
      }
      v70 += 24;
    }
    while (24 * v68 != v70);
    int v73 = *(std::string **)a7;
    uint64_t v74 = *(unsigned int *)(a7 + 8);
    if (v74)
    {
      uint64_t v75 = v74;
      do
      {
        if (SHIBYTE(v73[v75 - 1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73[v75 - 1].__r_.__value_.__l.__data_);
        }
        --v75;
      }
      while (v75 * 24);
      int v73 = *(std::string **)a7;
    }
    int v76 = (int)__dst;
    if (v73 != (std::string *)(a7 + 16)) {
      free(v73);
    }
    *(void *)a7 = v69;
    *(_DWORD *)(a7 + 12) = v76;
  }
  *(_DWORD *)(a7 + 8) = v68;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (__nel)
  {
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    uint64_t v92 = 24 * __nel;
    do
    {
      unint64_t v93 = (std::string *)(*(void *)a7 + v91);
      LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
      char v199 = 0;
      uint64_t v200 = 0;
      int v201 = 1;
      std::__split_buffer<std::string>::pointer v197 = 0;
      unint64_t v198 = 0;
      __str.__r_.__value_.__r.__words[2] = 0;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_270DBD6E0;
      p_dst = v93;
      llvm::raw_ostream::SetUnbuffered(&__str);
      (*(void (**)(uint64_t, std::string *, void))(*(void *)a9 + 40))(a9, &__str, *(unsigned int *)((char *)__base + v90));
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__str);
      v91 += 24;
      v90 += 4;
    }
    while (v92 != v91);
  }
  if (*v180 | *v181)
  {
    unint64_t v94 = (*v181 + *v180);
    unsigned int v95 = *(_DWORD *)(v177 + 8);
    if (v95 != v94)
    {
      if (v95 <= v94)
      {
        if (*(_DWORD *)(v177 + 12) < v94)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v177, (void *)(v177 + 16), v94, 16);
          unsigned int v95 = *(_DWORD *)(v177 + 8);
        }
        if (v95 != v94)
        {
          uint64_t v96 = *(void *)v177 + 16 * v94;
          uint64_t v97 = *(void *)v177 + 16 * v95;
          do
          {
            *(void *)uint64_t v97 = 0;
            *(unsigned char *)(v97 + 8) = 0;
            v97 += 16;
          }
          while (v97 != v96);
        }
      }
      *(_DWORD *)(v177 + 8) = v94;
    }
    uint64_t v98 = *(unsigned int *)(a6 + 8);
    if (v98 != v94)
    {
      if (v98 <= v94)
      {
        if (*(_DWORD *)(a6 + 12) < v94)
        {
          llvm::SmallVectorTemplateBase<std::string,false>::grow(a6, v94);
          uint64_t v98 = *(unsigned int *)(a6 + 8);
        }
        if (v94 != v98) {
          bzero((void *)(*(void *)a6 + 24 * v98), 24 * ((24 * (v94 - v98) - 24) / 0x18) + 24);
        }
      }
      else
      {
        uint64_t v99 = 3 * v98;
        uint64_t v100 = *(void *)a6 + 24 * v98 - 1;
        uint64_t v101 = 24 * v94 - 8 * v99;
        uint64_t v102 = (char *)v100;
        do
        {
          int v103 = *v102;
          v102 -= 24;
          if (v103 < 0) {
            operator delete(*(void **)(v100 - 23));
          }
          uint64_t v100 = (uint64_t)v102;
          v101 += 24;
        }
        while (v101);
      }
      *(_DWORD *)(a6 + 8) = v94;
    }
    LODWORD(v104) = *v180;
    if (*v180)
    {
      uint64_t v105 = 0;
      uint64_t v106 = 0;
      unint64_t v107 = 0;
      do
      {
        char v108 = *((unsigned char *)v190 + v107);
        uint64_t v109 = *(void *)v177 + v105;
        *(void *)uint64_t v109 = v218[v107];
        *(unsigned char *)(v109 + 8) = v108;
        std::string::operator=((std::string *)(*(void *)a6 + v106), (const std::string *)&v212[v106]);
        ++v107;
        unint64_t v104 = *v180;
        v106 += 24;
        v105 += 16;
      }
      while (v107 < v104);
    }
    if (*v181)
    {
      uint64_t v110 = 0;
      unint64_t v111 = 0;
      int v112 = v104;
      do
      {
        char v113 = *((unsigned char *)v193 + v111);
        uint64_t v114 = *(void *)v177 + 16 * (v112 + v111);
        *(void *)uint64_t v114 = v221[v111];
        *(unsigned char *)(v114 + 8) = v113;
        std::string::operator=((std::string *)(*(void *)a6 + 24 * (v112 + v111++)), (const std::string *)&v215[v110]);
        v110 += 24;
      }
      while (v111 < *v181);
    }
  }
  long long __dst = 0;
  uint64_t v185 = 0;
  int v186 = 0;
  LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
  char v199 = 0;
  uint64_t v200 = 0;
  int v201 = 1;
  std::__split_buffer<std::string>::pointer v197 = 0;
  unint64_t v198 = 0;
  __str.__r_.__value_.__r.__words[2] = 0;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_270DBD6E0;
  p_dst = (std::string *)&__dst;
  llvm::raw_ostream::SetUnbuffered(&__str);
  uint64_t v115 = ***(void ***)(a1 + 240);
  unsigned int v116 = *(unsigned char **)(v115 + 8);
  uint64_t v117 = *(unsigned char **)(v115 + 16);
  int v118 = v207;
  if (v207 >= 2)
  {
    qsort(v206, v207, 0x80uLL, (int (__cdecl *)(const void *, const void *))rewritesSort);
    int v118 = v207;
  }
  if (v118)
  {
    unsigned int v119 = 0;
    std::string::value_type v120 = (char *)v206;
    int v121 = ".align";
    while (v120[20])
    {
LABEL_308:
      v120 += 128;
      if (v120 == (char *)v206 + 128 * (unint64_t)v207) {
        goto LABEL_309;
      }
    }
    int v122 = *(_DWORD *)v120;
    uint64_t v123 = *((void *)v120 + 1);
    if (v123 != v116) {
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, v116, (v123 - v116));
    }
    switch(v122)
    {
      case 0:
        uint64_t v124 = v198;
        if ((unint64_t)(v197 - v198) > 5)
        {
          *((_WORD *)v198 + 2) = 28263;
          *uint64_t v124 = 1768710446;
          v198 += 6;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__str, v121, 6uLL);
        }
        if (*(unsigned char *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) + 144) + 339)) {
          goto LABEL_306;
        }
        uint64_t v134 = *((void *)v120 + 3);
        int v135 = v198;
        if (v198 >= v197)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__str, 32);
        }
        else
        {
          ++v198;
          *int v135 = 32;
        }
        write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, v134, 0, 0, 0);
        uint64_t v128 = 3;
        if (v134 >= 7) {
          uint64_t v128 = 4;
        }
        if (v134 < 4) {
          uint64_t v128 = 2;
        }
        goto LABEL_307;
      case 1:
        int v125 = (int *)v198;
        if ((unint64_t)(v197 - v198) <= 4)
        {
          int v126 = ".even";
          goto LABEL_156;
        }
        uint64_t v128 = 0;
        v198[4] = 110;
        int v136 = 1702257966;
        goto LABEL_186;
      case 2:
        int v125 = (int *)v198;
        if ((unint64_t)(v197 - v198) <= 4)
        {
          int v126 = ".byte";
LABEL_156:
          size_t v127 = 5;
          goto LABEL_305;
        }
        uint64_t v128 = 0;
        v198[4] = 101;
        int v136 = 1954112046;
LABEL_186:
        *int v125 = v136;
        std::string::size_type v137 = v198 + 5;
        goto LABEL_303;
      case 3:
        goto LABEL_158;
      case 4:
        if (v120[120])
        {
LABEL_158:
          if ((unint64_t)(v197 - v198) > 1)
          {
            *(_WORD *)unint64_t v198 = 31524;
            v198 += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, "${", 2uLL);
          }
          unsigned int v132 = v183 + 1;
          write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, v183, 0, 0, 0);
          unint64_t v133 = v198;
          if ((unint64_t)(v197 - v198) > 2)
          {
            uint64_t v128 = 0;
            v198[2] = 125;
            *unint64_t v133 = 20538;
            v198 += 3;
            goto LABEL_252;
          }
          llvm::raw_ostream::write((llvm::raw_ostream *)&__str, ":P}", 3uLL);
        }
        else
        {
          uint64_t v138 = v198;
          if (v198 >= v197)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, 36);
          }
          else
          {
            ++v198;
            *uint64_t v138 = 36;
          }
          unsigned int v132 = v183 + 1;
          write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, v183, 0, 0, 0);
        }
        uint64_t v128 = 0;
LABEL_252:
        unsigned int v183 = v132;
        goto LABEL_307;
      case 5:
        if (v120[120])
        {
          if ((unint64_t)(v197 - v198) > 1)
          {
            *(_WORD *)unint64_t v198 = 31524;
            v198 += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, "${", 2uLL);
          }
          unsigned int v140 = v119 + 1;
          write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, v119, 0, 0, 0);
          BOOL v141 = v198;
          if ((unint64_t)(v197 - v198) > 2)
          {
            uint64_t v128 = 0;
            v198[2] = 125;
            *BOOL v141 = 20538;
            v198 += 3;
            goto LABEL_256;
          }
          llvm::raw_ostream::write((llvm::raw_ostream *)&__str, ":P}", 3uLL);
        }
        else
        {
          int v139 = v198;
          if (v198 >= v197)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, 36);
          }
          else
          {
            ++v198;
            *int v139 = 36;
          }
          unsigned int v140 = v119 + 1;
          write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, v119, 0, 0, 0);
        }
        uint64_t v128 = 0;
LABEL_256:
        unsigned int v119 = v140;
        goto LABEL_307;
      case 6:
        uint64_t v128 = 0;
        uint64_t v129 = *((void *)v120 + 3);
        if (v129 > 63)
        {
          if (v129 <= 127)
          {
            if (v129 == 64)
            {
              uint64_t v130 = v198;
              if ((unint64_t)(v197 - v198) <= 9)
              {
                int v126 = "qword ptr ";
                goto LABEL_259;
              }
              uint64_t v128 = 0;
              *((_WORD *)v198 + 4) = 8306;
              BOOL v157 = "qword ptr ";
            }
            else
            {
              if (v129 != 80) {
                goto LABEL_307;
              }
              uint64_t v130 = v198;
              if ((unint64_t)(v197 - v198) <= 9)
              {
                int v126 = "xword ptr ";
LABEL_259:
                size_t v127 = 10;
                goto LABEL_305;
              }
              uint64_t v128 = 0;
              *((_WORD *)v198 + 4) = 8306;
              BOOL v157 = "xword ptr ";
            }
LABEL_275:
            *uint64_t v130 = *(void *)v157;
            std::string::size_type v137 = v198 + 10;
LABEL_303:
            unint64_t v198 = v137;
LABEL_307:
            unsigned int v116 = (unsigned char *)(v123 + *((unsigned int *)v120 + 4) + v128);
            goto LABEL_308;
          }
          if (v129 == 128)
          {
            BOOL v142 = v198;
            if ((unint64_t)(v197 - v198) <= 0xB)
            {
              int v126 = "xmmword ptr ";
              goto LABEL_267;
            }
            uint64_t v128 = 0;
            *((_DWORD *)v198 + 2) = 544371824;
            uint64_t v158 = "xmmword ptr ";
          }
          else
          {
            if (v129 != 256) {
              goto LABEL_307;
            }
            BOOL v142 = v198;
            if ((unint64_t)(v197 - v198) <= 0xB)
            {
              int v126 = "ymmword ptr ";
LABEL_267:
              size_t v127 = 12;
LABEL_305:
              llvm::raw_ostream::write((llvm::raw_ostream *)&__str, v126, v127);
LABEL_306:
              uint64_t v128 = 0;
              goto LABEL_307;
            }
            uint64_t v128 = 0;
            *((_DWORD *)v198 + 2) = 544371824;
            uint64_t v158 = "ymmword ptr ";
          }
          *BOOL v142 = *(void *)v158;
          std::string::size_type v137 = v198 + 12;
          goto LABEL_303;
        }
        switch(v129)
        {
          case 8:
            unsigned int v155 = v198;
            if ((unint64_t)(v197 - v198) <= 8)
            {
              int v126 = "byte ptr ";
LABEL_264:
              size_t v127 = 9;
              goto LABEL_305;
            }
            uint64_t v128 = 0;
            v198[8] = 32;
            int v159 = "byte ptr ";
            break;
          case 16:
            unsigned int v155 = v198;
            if ((unint64_t)(v197 - v198) <= 8)
            {
              int v126 = "word ptr ";
              goto LABEL_264;
            }
            uint64_t v128 = 0;
            v198[8] = 32;
            int v159 = "word ptr ";
            break;
          case 32:
            uint64_t v130 = v198;
            if ((unint64_t)(v197 - v198) <= 9)
            {
              int v126 = "dword ptr ";
              goto LABEL_259;
            }
            uint64_t v128 = 0;
            *((_WORD *)v198 + 4) = 8306;
            BOOL v157 = "dword ptr ";
            goto LABEL_275;
          default:
            goto LABEL_307;
        }
        *unsigned int v155 = *(void *)v159;
        std::string::size_type v137 = v198 + 9;
        goto LABEL_303;
      case 7:
        unint64_t v131 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, *(const void **)(*(void *)(*(void *)(a1 + 216) + 144) + 104), *(void *)(*(void *)(*(void *)(a1 + 216) + 144) + 112));
        llvm::raw_ostream::operator<<(v131, *((const void **)v120 + 4), *((void *)v120 + 5));
        goto LABEL_306;
      case 8:
        if ((unint64_t)(v197 - v198) <= 1)
        {
          int v126 = "\n\t";
          size_t v127 = 2;
          goto LABEL_305;
        }
        uint64_t v128 = 0;
        *(_WORD *)unint64_t v198 = 2314;
        std::string::size_type v137 = v198 + 2;
        goto LABEL_303;
      case 9:
        unsigned int v116 = (unsigned char *)(v123 + *((unsigned int *)v120 + 4));
        goto LABEL_308;
      case 10:
        if (v120[48])
        {
          if (v197 == v198) {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, "[", 1uLL);
          }
          else {
            *v198++ = 91;
          }
        }
        size_t v143 = *((void *)v120 + 9);
        if (v143) {
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, *((const void **)v120 + 8), v143);
        }
        if (*((void *)v120 + 11))
        {
          if (*((void *)v120 + 9)) {
            size_t v144 = 3;
          }
          else {
            size_t v144 = 0;
          }
          if (*((void *)v120 + 9)) {
            uint64_t v145 = " + ";
          }
          else {
            uint64_t v145 = "";
          }
          uint64_t v146 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, v145, v144);
          llvm::raw_ostream::operator<<(v146, *((const void **)v120 + 10), *((void *)v120 + 11));
        }
        if (*((_DWORD *)v120 + 28) >= 2u)
        {
          unint64_t v147 = v198;
          if ((unint64_t)(v197 - v198) > 4)
          {
            v198[4] = 36;
            *unint64_t v147 = 606087712;
            v198 += 5;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, " * $$", 5uLL);
          }
          write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, *((unsigned int *)v120 + 28), 0, 0, 0);
        }
        size_t v148 = *((void *)v120 + 13);
        if (!v148) {
          goto LABEL_289;
        }
        if (*((void *)v120 + 9) || *((void *)v120 + 11))
        {
          uint64_t v149 = v198;
          if ((unint64_t)(v197 - v198) > 2)
          {
            v198[2] = 32;
            *uint64_t v149 = 11040;
            v198 += 3;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, " + ", 3uLL);
          }
          uint64_t v150 = v121;
          size_t v148 = *((void *)v120 + 13);
        }
        else
        {
          uint64_t v150 = v121;
        }
        int v151 = (const void *)*((void *)v120 + 12);
        unint64_t v152 = (char *)v206 + 128 * (unint64_t)v207;
        unsigned int v153 = v120;
        if (v120 == v152) {
          goto LABEL_235;
        }
        unsigned int v153 = v120;
        while (*((const void **)v153 + 1) != v151
             || v148 != *((_DWORD *)v153 + 4)
             || (*(_DWORD *)v153 - 3) >= 2)
        {
          v153 += 128;
          if (v153 == v152) {
            goto LABEL_239;
          }
        }
LABEL_235:
        if (v153 == v152)
        {
LABEL_239:
          unint64_t v154 = v198;
          if ((unint64_t)(v197 - v198) > 6)
          {
            *(_DWORD *)(v198 + 3) = 544499059;
            *unint64_t v154 = 1936090735;
            v198 += 7;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, "offset ", 7uLL);
          }
          int v121 = v150;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, v151, v148);
          goto LABEL_289;
        }
        if (*(_DWORD *)v153 == 3)
        {
          if ((unint64_t)(v197 - v198) > 1)
          {
            *(_WORD *)unint64_t v198 = 31524;
            v198 += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, "${", 2uLL);
          }
          write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, v183, 0, 0, 0);
          long long v160 = v198;
          if ((unint64_t)(v197 - v198) > 2)
          {
            v198[2] = 125;
            *long long v160 = 20538;
            v198 += 3;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, ":P}", 3uLL);
          }
          ++v183;
          v153[20] = 1;
        }
        else
        {
          unsigned int v156 = v198;
          if (v198 >= v197)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, 36);
          }
          else
          {
            ++v198;
            *unsigned int v156 = 36;
          }
          write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, v183, 0, 0, 0);
          v153[20] = 1;
          ++v183;
        }
        int v121 = v150;
LABEL_289:
        uint64_t v161 = *((void *)v120 + 9);
        if (*((void *)v120 + 7))
        {
          uint64_t v162 = " + $$";
          if (!v161 && !*((void *)v120 + 11))
          {
            uint64_t v163 = *((void *)v120 + 13);
LABEL_293:
            if (v163) {
              uint64_t v162 = " + $$";
            }
            else {
              uint64_t v162 = "$$";
            }
          }
          size_t v164 = strlen(v162);
          unsigned int v165 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, v162, v164);
          llvm::write_integer(v165, *((void *)v120 + 7), 0, 0);
          goto LABEL_300;
        }
        if (!v161 && !*((void *)v120 + 11))
        {
          uint64_t v163 = *((void *)v120 + 13);
          if (!v163) {
            goto LABEL_293;
          }
        }
LABEL_300:
        if (!v120[48]) {
          goto LABEL_306;
        }
        if (v197 != v198)
        {
          uint64_t v128 = 0;
          unsigned char *v198 = 93;
          std::string::size_type v137 = v198 + 1;
          goto LABEL_303;
        }
        int v126 = "]";
        size_t v127 = 1;
        goto LABEL_305;
      default:
        goto LABEL_306;
    }
  }
LABEL_309:
  if (v116 != v117) {
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, v116, v117 - v116);
  }
  std::string::operator=(a2, p_dst);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__str);
  if (SHIBYTE(v186) < 0) {
    operator delete(__dst);
  }
  uint64_t v166 = 0;
LABEL_314:
  if (v206 != v208) {
    free(v206);
  }
  if (__base != v211) {
    free(__base);
  }
  llvm::SmallVector<std::string,2u>::~SmallVector(&v212);
  llvm::SmallVector<std::string,2u>::~SmallVector(&v215);
  if (v190 != &v192) {
    free(v190);
  }
  if (v193 != &v195) {
    free(v193);
  }
  if (v218 != (void *)v220) {
    free(v218);
  }
  if (v221 != v223) {
    free(v221);
  }
  return v166;
}

void anonymous namespace'::AsmParser::Note(llvm::MCAsmParser *a1, char *a2, llvm::Twine *a3, unint64_t a4, unint64_t a5)
{
  llvm::MCAsmParser::printPendingErrors(a1);
  v14[0] = a4;
  v14[1] = a5;
  unint64_t v10 = (uint64_t *)*((void *)a1 + 30);
  BOOL v12 = (llvm::raw_ostream *)llvm::errs(v11);
  llvm::SourceMgr::PrintMessage(v10, v12, a2, 3, a3, v14, 1, v13, 0, 0, 1u);
}

uint64_t anonymous namespace'::AsmParser::Warning(_anonymous_namespace_::AsmParser *a1, char *a2, llvm::Twine *a3, uint64_t a4, uint64_t a5)
{
  llvm::MCTargetOptions::MCTargetOptions((uint64_t)v17, *((void *)a1 + 1) + 128);
  char v10 = v17[0];
  uint64_t v27 = (void **)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v27);
  if (v25 < 0) {
    operator delete(__p);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  if (v19 < 0)
  {
    operator delete(v18);
    if ((v10 & 8) != 0) {
      return 0;
    }
  }
  else if ((v10 & 8) != 0)
  {
    return 0;
  }
  llvm::MCTargetOptions::MCTargetOptions((uint64_t)v17, *((void *)a1 + 1) + 128);
  char v11 = v17[0];
  uint64_t v27 = (void **)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v27);
  if (v25 < 0) {
    operator delete(__p);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  if (v19 < 0)
  {
    operator delete(v18);
    if ((v11 & 4) == 0) {
      goto LABEL_19;
    }
  }
  else if ((v11 & 4) == 0)
  {
LABEL_19:
    v17[0] = a4;
    v17[1] = a5;
    uint64_t v13 = (uint64_t *)*((void *)a1 + 30);
    uint64_t v14 = (llvm::raw_ostream *)llvm::errs(v12);
    llvm::SourceMgr::PrintMessage(v13, v14, a2, 1, a3, v17, 1, v15, 0, 0, 1u);
    return 0;
  }
  return llvm::MCAsmParser::Error((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
}

uint64_t anonymous namespace'::AsmParser::printError(uint64_t a1, char *a2, llvm::Twine *a3, unint64_t a4, unint64_t a5)
{
  *(unsigned char *)(a1 + 32) = 1;
  v12[0] = a4;
  v12[1] = a5;
  int v8 = *(uint64_t **)(a1 + 240);
  uint64_t v9 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  llvm::SourceMgr::PrintMessage(v8, v9, a2, 0, a3, v12, 1, v10, 0, 0, 1u);
  return 1;
}

uint64_t anonymous namespace'::AsmParser::Lex(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2 = (_anonymous_namespace_::AsmParser *)((char *)this + 40);
  if (**((_DWORD **)this + 6) == 1)
  {
    uint64_t v3 = *((void *)this + 13);
    __int16 v15 = 260;
    uint64_t v13 = (char *)this + 112;
    llvm::MCAsmParser::Error((uint64_t)this, v3, (llvm::Twine *)&v13, 0, 0);
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 9
    && *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                             + 8)
                 + 16)
    && **(unsigned char **)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                              + 8)
                  + 8) != 10
    && **(unsigned char **)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                              + 8)
                  + 8) != 13
    && *(unsigned char *)(*((void *)this + 29) + 482))
  {
    uint64_t v4 = *((void *)this + 28);
    uint64_t v5 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8);
    uint64_t v7 = *(char **)(v5 + 8);
    uint64_t v6 = *(void *)(v5 + 16);
    __int16 v15 = 261;
    uint64_t v13 = v7;
    uint64_t v14 = v6;
    (*(void (**)(uint64_t, char **))(*(void *)v4 + 136))(v4, &v13);
  }
  while (1)
  {
    uint64_t result = llvm::MCAsmLexer::Lex(v2);
    if (*(_DWORD *)result != 7) {
      break;
    }
    if (*(unsigned char *)(*((void *)this + 29) + 482))
    {
      uint64_t v9 = *((void *)this + 28);
      uint64_t v10 = *(char **)(result + 8);
      uint64_t v11 = *(void *)(result + 16);
      __int16 v15 = 261;
      uint64_t v13 = v10;
      uint64_t v14 = v11;
      (*(void (**)(uint64_t, char **))(*(void *)v9 + 136))(v9, &v13);
    }
  }
  if (!*(_DWORD *)result)
  {
    unint64_t v12 = *(void *)(**((void **)this + 30) + 24 * (*((_DWORD *)this + 70) - 1) + 16);
    if (v12)
    {
      return (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
    }
  }
  return result;
}

uint64_t anonymous namespace'::AsmParser::parseIdentifier(_anonymous_namespace_::AsmParser *this, llvm::StringRef *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v4 = **((_DWORD **)this + 6);
  if ((v4 - 2) < 2)
  {
    uint64_t v7 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8);
    if (*(_DWORD *)v7 == 2)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      unint64_t v9 = *(void *)(v7 + 16);
    }
    else
    {
      uint64_t v8 = *(void *)(v7 + 8);
      unint64_t v11 = *(void *)(v7 + 16);
      unint64_t v12 = v11 - 1;
      unint64_t v13 = v11 != 0;
      if (v11) {
        ++v8;
      }
      if (v12 < v13) {
        unint64_t v12 = 1;
      }
      if (v12 >= v11) {
        unint64_t v12 = v11;
      }
      unint64_t v9 = v12 - v13;
    }
    *(void *)a2 = v8;
    *((void *)a2 + 1) = v9;
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
    return 0;
  }
  else if (v4 == 45 || v4 == 26)
  {
    uint64_t v6 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 96);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v10 = 1;
    unsigned int v20 = 1;
    uint64_t v19 = 0;
    llvm::AsmLexer::peekTokens((uint64_t)this + 40, (uint64_t)&v16, 1, 0);
    if (v16 == 4 || v16 == 2)
    {
      if (v6 + 1 == v17)
      {
        llvm::MCAsmLexer::Lex((_anonymous_namespace_::AsmParser *)((char *)this + 40));
        uint64_t v14 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                                    + 8)
                        + 16)
            + 1;
        *(void *)a2 = v6;
        *((void *)a2 + 1) = v14;
        (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
        uint64_t v10 = 0;
      }
      else
      {
        uint64_t v10 = 1;
      }
    }
    if (v20 >= 0x41 && v19) {
      MEMORY[0x263E50080](v19, 0x1000C8000313F17);
    }
  }
  else
  {
    return 1;
  }
  return v10;
}

uint64_t anonymous namespace'::AsmParser::parseStringToEndOfStatement(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2 = (_anonymous_namespace_::AsmParser *)((char *)this + 40);
  uint64_t v3 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                             + 8)
                 + 8);
  while (1)
  {
    int v4 = **((_DWORD **)this + 6);
    if (!v4 || v4 == 9) {
      break;
    }
    llvm::MCAsmLexer::Lex(v2);
  }
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this);
  return v3;
}

uint64_t anonymous namespace'::AsmParser::parseEscapedString(llvm::MCAsmParser *a1, std::string *a2)
{
  int v4 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8);
  v23[0] = "expected string";
  __int16 v24 = 259;
  llvm::MCAsmParser::check(a1, v4 != 3, (const llvm::Twine *)v23);
  if (v4 != 3) {
    return 1;
  }
  MEMORY[0x263E4FD30](a2, "");
  uint64_t v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1);
  unint64_t v6 = *(void *)(*(void *)(v5 + 8) + 16);
  unint64_t v7 = v6 != 0;
  if (v6) {
    uint64_t v8 = *(void *)(*(void *)(v5 + 8) + 8) + 1;
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(v5 + 8) + 8);
  }
  if (v6 - 1 < v7) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = v6 - 1;
  }
  if (v9 >= v6) {
    unint64_t v9 = *(void *)(*(void *)(v5 + 8) + 16);
  }
  unint64_t v10 = v9 - v7;
  if (v9 == v7)
  {
LABEL_45:
    (*(void (**)(llvm::MCAsmParser *))(*(void *)a1 + 184))(a1);
    return 0;
  }
  unsigned int v11 = 0;
  while (1)
  {
    unsigned int v12 = *(unsigned __int8 *)(v8 + v11);
    if (v12 != 92) {
      goto LABEL_44;
    }
    unsigned int v13 = v11 + 1;
    if (v11 + 1 == v10)
    {
      unsigned int v20 = "unexpected backslash at end of string";
      goto LABEL_48;
    }
    unsigned int v12 = *(unsigned __int8 *)(v8 + v13);
    if ((v12 | 0x20) == 0x78)
    {
      unint64_t v14 = v11 + 2;
      if (v10 <= v14
        || (int v15 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*(unsigned __int8 *)(v8 + v14)], v15 == 0xFFFF))
      {
        unsigned int v20 = "invalid hexadecimal escape sequence";
LABEL_48:
        v23[0] = v20;
        __int16 v24 = 259;
        uint64_t v21 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1);
        llvm::MCAsmParser::Error((uint64_t)a1, *(void *)(v21 + 96), (llvm::Twine *)v23, 0, 0);
        return 1;
      }
      LOBYTE(v12) = 0;
      do
      {
        unsigned int v11 = v14;
        LOBYTE(v12) = v15 + 16 * v12;
        unint64_t v14 = (v14 + 1);
        if (v10 <= v14) {
          break;
        }
        int v15 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*(unsigned __int8 *)(v8 + v14)];
      }
      while (v15 != 0xFFFF);
      goto LABEL_44;
    }
    if ((v12 & 0xF8) != 0x30) {
      break;
    }
    v12 -= 48;
    unsigned int v16 = v11 + 2;
    if (v11 + 2 == v10) {
      goto LABEL_43;
    }
    int v17 = *(unsigned __int8 *)(v8 + v16);
    if ((v17 & 0xF8) != 0x30) {
      goto LABEL_43;
    }
    unsigned int v12 = v17 + 8 * v12 - 48;
    v11 += 3;
    if (v11 == v10)
    {
      unsigned int v13 = v16;
LABEL_43:
      unsigned int v11 = v13;
      goto LABEL_44;
    }
    int v18 = *(unsigned __int8 *)(v8 + v11);
    unsigned int v13 = v16;
    if ((v18 & 0xF8) != 0x30) {
      goto LABEL_43;
    }
    unsigned int v12 = v18 + 8 * v12 - 48;
    if (v12 > 0xFF)
    {
      uint64_t v22 = "invalid octal escape sequence (out of range)";
      goto LABEL_51;
    }
LABEL_44:
    std::string::push_back(a2, v12);
    if (++v11 == v10) {
      goto LABEL_45;
    }
  }
  if ((char)v12 <= 101)
  {
    if ((char)v12 != 34 && (char)v12 != 92)
    {
      if ((char)v12 != 98) {
        goto LABEL_50;
      }
      LOBYTE(v12) = 8;
    }
    goto LABEL_43;
  }
  if ((char)v12 <= 113)
  {
    if ((char)v12 == 102)
    {
      LOBYTE(v12) = 12;
    }
    else
    {
      if ((char)v12 != 110) {
        goto LABEL_50;
      }
      LOBYTE(v12) = 10;
    }
    goto LABEL_43;
  }
  if ((char)v12 == 114)
  {
    LOBYTE(v12) = 13;
    goto LABEL_43;
  }
  if ((char)v12 == 116)
  {
    LOBYTE(v12) = 9;
    goto LABEL_43;
  }
LABEL_50:
  uint64_t v22 = "invalid escape sequence (unrecognized character)";
LABEL_51:
  v23[0] = v22;
  __int16 v24 = 259;
  return llvm::MCAsmParser::TokError((uint64_t)a1, (llvm::Twine *)v23, 0, 0);
}

BOOL anonymous namespace'::AsmParser::parseAngleBracketString(int *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 **)(*(void *)((*(uint64_t (**)(int *))(*(void *)a1 + 40))(a1) + 8) + 8);
  for (int64_t i = v4; ; ++i)
  {
    uint64_t v6 = *i;
    if (v6 > 0x3E) {
      continue;
    }
    if (v6 == 33)
    {
      ++i;
      continue;
    }
    if (((1 << v6) & 0x4000000000002401) != 0) {
      break;
    }
  }
  if (v6 == 62)
  {
    uint64_t v7 = (uint64_t)(v4 + 1);
    (*(void (**)(int *))(*(void *)a1 + 184))(a1);
    angleBracketString(&v9, v7, (unint64_t)&i[-v7]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v9;
  }
  return v6 != 62;
}

uint64_t anonymous namespace'::AsmParser::eatToEndOfStatement(uint64_t this)
{
  uint64_t v1 = this;
  for (int64_t i = (llvm::MCAsmLexer *)(this + 40); ; this = llvm::MCAsmLexer::Lex(i))
  {
    int v3 = **(_DWORD **)(v1 + 48);
    if (!v3) {
      break;
    }
    if (v3 == 9)
    {
      return llvm::MCAsmLexer::Lex(i);
    }
  }
  return this;
}

uint64_t anonymous namespace'::AsmParser::parseExpression(_DWORD **a1, unint64_t *a2, uint64_t a3)
{
  *a2 = 0;
  uint64_t v6 = 1;
  if (((*(uint64_t (**)(_DWORD *))(*(void *)a1[1] + 24))(a1[1]) & 1) != 0
  {
    return v6;
  }
  if (*a1[6] != 45) {
    goto LABEL_22;
  }
  (*((void (**)(_DWORD **))*a1 + 23))(a1);
  if (*a1[6] != 2)
  {
    v41[0] = "unexpected symbol modifier following '@'";
    __int16 v10 = 259;
LABEL_33:
    __int16 v42 = v10;
    uint64_t v27 = (*((uint64_t (**)(_DWORD **))*a1 + 5))(a1);
    llvm::MCAsmParser::Error((uint64_t)a1, *(void *)(v27 + 96), (llvm::Twine *)v41, 0, 0);
    return v6;
  }
  uint64_t v7 = *(void *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
  if (*(_DWORD *)v7 == 2)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v9 = *(void *)(v7 + 16);
  }
  else
  {
    uint64_t v13 = v7 + 8;
    uint64_t v11 = *(void *)(v7 + 8);
    unint64_t v12 = *(void *)(v13 + 8);
    unint64_t v14 = v12 != 0;
    if (v12) {
      uint64_t v8 = v11 + 1;
    }
    else {
      uint64_t v8 = v11;
    }
    if (v12 - 1 < v14) {
      unint64_t v15 = 1;
    }
    else {
      unint64_t v15 = v12 - 1;
    }
    if (v15 >= v12) {
      unint64_t v15 = v12;
    }
    uint64_t v9 = v15 - v14;
  }
  uint64_t VariantKindForName = llvm::MCSymbolRefExpr::getVariantKindForName(v8, v9);
  if (VariantKindForName == 1)
  {
    uint64_t v17 = *(void *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
    if (*(_DWORD *)v17 == 2)
    {
      uint64_t v18 = *(void *)(v17 + 8);
      unint64_t v19 = *(void *)(v17 + 16);
    }
    else
    {
      uint64_t v18 = *(void *)(v17 + 8);
      unint64_t v24 = *(void *)(v17 + 16);
      unint64_t v25 = v24 - 1;
      unint64_t v26 = v24 != 0;
      if (v24) {
        ++v18;
      }
      if (v25 < v26) {
        unint64_t v25 = 1;
      }
      if (v25 >= v24) {
        unint64_t v25 = v24;
      }
      unint64_t v19 = v25 - v26;
    }
    __int16 v40 = 1283;
    v37[0] = (uint64_t)"invalid variant '";
    uint64_t v38 = v18;
    unint64_t v39 = v19;
    v41[0] = v37;
    _OWORD v41[2] = "'";
    __int16 v10 = 770;
    goto LABEL_33;
  }
  if (v20)
  {
    *a2 = v20;
    (*((void (**)(_DWORD **))*a1 + 23))(a1);
LABEL_22:
    v41[0] = 0;
    if (llvm::MCExpr::evaluateAsAbsolute(*a2, v41, 0, 0, 0, 0))
    {
      uint64_t v21 = v41[0];
      uint64_t v22 = (*((uint64_t (**)(_DWORD **))*a1 + 6))(a1);
      unint64_t v23 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v22 + 184, 24, 3);
      *(unsigned char *)unint64_t v23 = 1;
      *(_DWORD *)(v23 + 1) = *(unsigned __int8 *)(v23 + 4) << 24;
      *(void *)(v23 + 8) = 0;
      *(void *)(v23 + 16) = v21;
      *a2 = v23;
    }
    return 0;
  }
  uint64_t v29 = *(void *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
  if (*(_DWORD *)v29 == 2)
  {
    uint64_t v30 = *(void *)(v29 + 8);
    unint64_t v31 = *(void *)(v29 + 16);
  }
  else
  {
    uint64_t v30 = *(void *)(v29 + 8);
    unint64_t v32 = *(void *)(v29 + 16);
    unint64_t v33 = v32 - 1;
    unint64_t v34 = v32 != 0;
    if (v32) {
      ++v30;
    }
    if (v33 < v34) {
      unint64_t v33 = 1;
    }
    if (v33 >= v32) {
      unint64_t v33 = v32;
    }
    unint64_t v31 = v33 - v34;
  }
  __int16 v40 = 1283;
  v37[0] = (uint64_t)"invalid modifier '";
  uint64_t v38 = v30;
  unint64_t v39 = v31;
  size_t v35 = "' (no symbols present)";
  __int16 v36 = 259;
  llvm::operator+(v37, (uint64_t *)&v35, (uint64_t)v41);
  return llvm::MCAsmParser::TokError((uint64_t)a1, (llvm::Twine *)v41, 0, 0);
}

uint64_t anonymous namespace'::AsmParser::parsePrimaryExpr(unsigned int **a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  uint64_t v8 = (*((uint64_t (**)(unsigned int **))*a1 + 5))(a1);
  uint64_t v9 = *a1[6];
  uint64_t v10 = *(void *)(v8 + 96);
  uint64_t v11 = 1;
  switch((int)v9)
  {
    case 1:
      return v11;
    case 2:
    case 3:
    case 23:
    case 26:
    case 45:
      long long v76 = 0uLL;
      if (!(*((unsigned int (**)(unsigned int **, long long *))*a1 + 24))(a1, &v76)
        || **(_DWORD **)((*((uint64_t (**)(unsigned int **))*a1 + 5))(a1) + 8) != 26
        && **(_DWORD **)((*((uint64_t (**)(unsigned int **))*a1 + 5))(a1) + 8) != 23)
      {
        long long v87 = 0uLL;
        if (*((unsigned char *)a1[29] + 438))
        {
          if (*a1[6] == 17)
          {
            (*((void (**)(unsigned int **))*a1 + 23))(a1);
            std::string __p = 0;
            unint64_t v82 = 0;
            (*((void (**)(unsigned int **, void **))*a1 + 24))(a1, &__p);
            *(void *)uint64_t v88 = "expected ')'";
            WORD4(v89) = 259;
            if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)v88)) {
              return v11;
            }
LABEL_55:
            long long v87 = v76;
            unint64_t v24 = __p;
            uint64_t v23 = v82;
            goto LABEL_57;
          }
        }
        else
        {
          if (v9 != 3)
          {
            LOBYTE(__p) = 64;
            llvm::StringRef::split((uint64_t *)&v76, (char *)&__p, 1uLL, (uint64_t)v88);
            long long v87 = *(_OWORD *)v88;
            unint64_t v24 = *(void **)&v88[16];
            uint64_t v23 = v89;
LABEL_57:
            *a3 = v76 + *((void *)&v76 + 1);
            long long v86 = v76;
            unint64_t v51 = *((void *)&v76 + 1);
            if (!*((void *)&v76 + 1))
            {
              uint64_t v22 = *(void *)((*((uint64_t (**)(unsigned int **))*a1 + 5))(a1) + 96);
              uint64_t v54 = "expected a symbol reference";
LABEL_64:
              *(void *)uint64_t v88 = v54;
              WORD4(v89) = 259;
              uint64_t v21 = (uint64_t)a1;
              return llvm::MCAsmParser::Error(v21, v22, (llvm::Twine *)v88, 0, 0);
            }
            if (v23)
            {
              int VariantKindForName = llvm::MCSymbolRefExpr::getVariantKindForName((uint64_t)v24, v23);
              if (VariantKindForName != 1)
              {
                int v56 = VariantKindForName;
                long long v86 = v87;
                unint64_t v51 = *((void *)&v87 + 1);
                goto LABEL_71;
              }
              unint64_t v53 = a1[29];
              if (!*((unsigned char *)v53 + 180) || *((unsigned char *)v53 + 438))
              {
                __int16 v85 = 1283;
                std::string __p = "invalid variant '";
                uint64_t v83 = (uint64_t)v24;
                uint64_t v84 = v23;
                v79[0] = (uint64_t)"'";
                __int16 v80 = 259;
                llvm::operator+((uint64_t *)&__p, v79, (uint64_t)v88);
                uint64_t v21 = (uint64_t)a1;
                uint64_t v22 = (uint64_t)v24;
                return llvm::MCAsmParser::Error(v21, v22, (llvm::Twine *)v88, 0, 0);
              }
            }
            int v56 = 0;
LABEL_71:
            uint64_t v59 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
            p_p = (void *)v86;
            int Key = llvm::StringMapImpl::FindKey((uint64_t *)(v59 + 1232), (uint64_t *)v86, v51);
            if (Key == -1
              || Key == (unint64_t)*(unsigned int *)(v59 + 1240)
              || (unint64_t Symbol = *(void *)(*(void *)(*(void *)(v59 + 1232) + 8 * Key) + 8)) == 0)
            {
              unint64_t v63 = (llvm::MCContext *)(*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
              uint64_t v64 = a1[29];
              int v65 = *((unsigned __int8 *)v64 + 80);
              if (*((unsigned char *)v64 + 80))
              {
                llvm::StringRef::upper((llvm::StringRef *)&v86, &__p);
                if (v83 >= 0) {
                  p_p = &__p;
                }
                else {
                  p_p = __p;
                }
                if (v83 >= 0) {
                  unint64_t v51 = HIBYTE(v83);
                }
                else {
                  unint64_t v51 = v82;
                }
              }
              WORD4(v89) = 261;
              *(void *)uint64_t v88 = p_p;
              *(void *)&v88[8] = v51;
              unint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v63, (const llvm::Twine *)v88);
              if (v65 && SHIBYTE(v83) < 0) {
                operator delete(__p);
              }
            }
            if ((*(_DWORD *)(Symbol + 8) & 0x3800) == 0x1000)
            {
              unint64_t v39 = *(unsigned __int8 **)(Symbol + 24);
              int v66 = *v39;
              if (v66 == 4)
              {
                if ((*(uint64_t (**)(void))(*((void *)v39 - 1) + 48))())
                {
                  if (v56)
                  {
                    uint64_t v22 = *a3;
                    uint64_t v54 = "unexpected modifier on variable reference";
                    goto LABEL_64;
                  }
                  unint64_t v39 = *(unsigned __int8 **)(Symbol + 24);
                  goto LABEL_109;
                }
              }
              else if (!v56 && v66 == 1)
              {
LABEL_109:
                uint64_t v11 = 0;
                goto LABEL_97;
              }
            }
            uint64_t v68 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
            unint64_t v39 = (unsigned __int8 *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v68 + 184, 24, 3);
            uint64_t v11 = 0;
            int v69 = v56 | (*(unsigned __int8 *)(*(void *)(v68 + 144) + 18) << 16);
            *unint64_t v39 = 2;
            *(_DWORD *)(v39 + 1) = v69 | (v39[4] << 24);
            *((void *)v39 + 1) = v10;
            *((void *)v39 + 2) = Symbol;
LABEL_97:
            *a2 = v39;
            return v11;
          }
          if (*a1[6] == 45)
          {
            (*((void (**)(unsigned int **))*a1 + 23))(a1);
            uint64_t v20 = *(void *)((*((uint64_t (**)(unsigned int **))*a1 + 5))(a1) + 96);
            std::string __p = 0;
            unint64_t v82 = 0;
            if ((*((unsigned int (**)(unsigned int **, void **))*a1 + 24))(a1, &__p))
            {
              *(void *)uint64_t v88 = "expected symbol variant after '@'";
              WORD4(v89) = 259;
              uint64_t v21 = (uint64_t)a1;
              uint64_t v22 = v20;
              return llvm::MCAsmParser::Error(v21, v22, (llvm::Twine *)v88, 0, 0);
            }
            goto LABEL_55;
          }
        }
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        goto LABEL_57;
      }
      if (**(_DWORD **)((*((uint64_t (**)(unsigned int **))*a1 + 5))(a1) + 8) == 26
        && *((unsigned char *)a1[29] + 32)
        || **(_DWORD **)((*((uint64_t (**)(unsigned int **))*a1 + 5))(a1) + 8) == 23
        && *((unsigned char *)a1[29] + 34))
      {
        (*((void (**)(unsigned int **))*a1 + 23))(a1);
        unint64_t v15 = (llvm::MCContext *)a1[27];
        *(void *)uint64_t v88 = "tmp";
        WORD4(v89) = 259;
        unint64_t TempSymbol = llvm::MCContext::createTempSymbol(v15, (const llvm::Twine *)v88, 1);
        (*(void (**)(unsigned int *, unint64_t, void))(*(void *)a1[28] + 192))(a1[28], TempSymbol, 0);
        uint64_t v17 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
        unint64_t v18 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v17 + 184, 24, 3);
        uint64_t v11 = 0;
        int v19 = *(unsigned __int8 *)(*(void *)(v17 + 144) + 18) << 16;
        *(unsigned char *)unint64_t v18 = 2;
        *(_DWORD *)(v18 + 1) = v19 | (*(unsigned __int8 *)(v18 + 4) << 24);
        *(void *)(v18 + 8) = 0;
        *(void *)(v18 + 16) = TempSymbol;
        *a2 = v18;
        *a3 = v10;
        return v11;
      }
      uint64_t v50 = "invalid token in expression";
LABEL_54:
      *(void *)uint64_t v88 = v50;
      WORD4(v89) = 259;
      uint64_t v21 = (uint64_t)a1;
      uint64_t v22 = v10;
      return llvm::MCAsmParser::Error(v21, v22, (llvm::Twine *)v88, 0, 0);
    case 4:
      uint64_t v10 = *(void *)(*(void *)((*((uint64_t (**)(unsigned int **))*a1 + 5))(a1) + 8) + 8);
      uint64_t v25 = *(void *)((*((uint64_t (**)(unsigned int **))*a1 + 5))(a1) + 8);
      uint64_t v28 = *(uint64_t **)(v25 + 24);
      unint64_t v26 = (uint64_t *)(v25 + 24);
      uint64_t v27 = v28;
      if (*((_DWORD *)v26 + 2) >= 0x41u) {
        unint64_t v26 = v27;
      }
      uint64_t v29 = *v26;
      uint64_t v30 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      unint64_t v31 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v30 + 184, 24, 3);
      *(unsigned char *)unint64_t v31 = 1;
      *(_DWORD *)(v31 + 1) = *(unsigned __int8 *)(v31 + 4) << 24;
      *(void *)(v31 + 8) = 0;
      *(void *)(v31 + 16) = v29;
      *a2 = v31;
      *a3 = *((void *)a1[6] + 1) + *((void *)a1[6] + 2);
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
      if (*a1[6] != 2) {
        return 0;
      }
      long long v87 = *(_OWORD *)(*(void *)((*((uint64_t (**)(unsigned int **))*a1 + 5))(a1) + 8) + 8);
      v88[0] = 64;
      llvm::StringRef::split((uint64_t *)&v87, v88, 1uLL, (uint64_t)&v76);
      uint64_t v32 = *((void *)&v76 + 1);
      if (*((void *)&v76 + 1) == *((void *)&v87 + 1))
      {
        int v33 = 0;
      }
      else
      {
        int v70 = llvm::MCSymbolRefExpr::getVariantKindForName(v77, v78);
        if (v70 == 1)
        {
          __int16 v85 = 1283;
          std::string __p = "invalid variant '";
          uint64_t v83 = v77;
          uint64_t v84 = v78;
          v79[0] = (uint64_t)"'";
          __int16 v80 = 259;
          llvm::operator+((uint64_t *)&__p, v79, (uint64_t)v88);
          return llvm::MCAsmParser::TokError((uint64_t)a1, (llvm::Twine *)v88, 0, 0);
        }
        int v33 = v70;
        long long v87 = v76;
        uint64_t v32 = *((void *)&v76 + 1);
      }
      if (v32 != 1) {
        return 0;
      }
      int v71 = *(unsigned __int8 *)v87;
      if ((v71 | 4) != 0x66) {
        return 0;
      }
      DirectionalLocalunint64_t Symbol = (llvm::MCSymbol *)llvm::MCContext::getDirectionalLocalSymbol((llvm::MCContext *)a1[27], v29, v71 == 98);
      uint64_t v73 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      *a2 = llvm::MCSymbolRefExpr::create((uint64_t)DirectionalLocalSymbol, v33, v73, 0);
      if (*((void *)&v87 + 1) != 1 || *(unsigned char *)v87 != 98 || llvm::MCSymbol::getFragment(DirectionalLocalSymbol, 1))
      {
        uint64_t v74 = a1[57];
        *(void *)uint64_t v88 = v10;
        uint64_t v90 = v74;
        uint64_t v91 = DirectionalLocalSymbol;
        long long v75 = *(_OWORD *)(a1 + 55);
        *(_OWORD *)&v88[8] = *(_OWORD *)(a1 + 53);
        long long v89 = v75;
        goto LABEL_49;
      }
      uint64_t v50 = "directional label undefined";
      goto LABEL_54;
    case 5:
      uint64_t v13 = "literal value out of range for directive";
      goto LABEL_7;
    case 6:
      uint64_t v34 = (*((uint64_t (**)(unsigned int **))*a1 + 5))(a1);
      llvm::APFloat::APFloat((uint64_t)v88, &llvm::semIEEEdouble, *(char **)(*(void *)(v34 + 8) + 8), *(void *)(*(void *)(v34 + 8) + 16));
      llvm::APFloat::bitcastToAPInt((llvm::APInt *)&__p, (llvm::APFloat *)v88);
      if (v82 > 0x40)
      {
        size_t v35 = *(void **)__p;
        MEMORY[0x263E50080]();
      }
      else
      {
        size_t v35 = __p;
      }
      uint64_t v57 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      unint64_t v58 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v57 + 184, 24, 3);
      *(unsigned char *)unint64_t v58 = 1;
      *(_DWORD *)(v58 + 1) = *(unsigned __int8 *)(v58 + 4) << 24;
      *(void *)(v58 + 8) = 0;
      *(void *)(v58 + 16) = v35;
      *a2 = v58;
      *a3 = *((void *)a1[6] + 1) + *((void *)a1[6] + 2);
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v88[8]);
      return 0;
    case 12:
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
      if ((*((uint64_t (**)(unsigned int **, void *, uint64_t *, uint64_t))*a1 + 30))(a1, a2, a3, a4)) {
        return v11;
      }
      uint64_t v37 = *a2;
      uint64_t v38 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      unint64_t v39 = (unsigned __int8 *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v38 + 184, 24, 3);
      uint64_t v11 = 0;
      *unint64_t v39 = 3;
      int v40 = (v39[4] << 24) | 3;
      goto LABEL_52;
    case 13:
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
      if ((*((uint64_t (**)(unsigned int **, void *, uint64_t *, uint64_t))*a1 + 30))(a1, a2, a3, a4)) {
        return v11;
      }
      uint64_t v41 = *a2;
      uint64_t v42 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      unint64_t v43 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v42 + 184, 24, 3);
      *(unsigned char *)unint64_t v43 = 3;
      *(_DWORD *)(v43 + 1) = (*(unsigned __int8 *)(v43 + 4) << 24) | 1;
      *(void *)(v43 + 8) = v10;
      *(void *)(v43 + 16) = v41;
      *a2 = v43;
      return 0;
    case 14:
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
      if ((*((uint64_t (**)(unsigned int **, void *, uint64_t *, uint64_t))*a1 + 30))(a1, a2, a3, a4)) {
        return v11;
      }
      uint64_t v37 = *a2;
      uint64_t v44 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      unint64_t v39 = (unsigned __int8 *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v44 + 184, 24, 3);
      uint64_t v11 = 0;
      *unint64_t v39 = 3;
      int v40 = (v39[4] << 24) | 2;
      goto LABEL_52;
    case 17:
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
    case 19:
      if (!*((unsigned char *)a1[33] + 16))
      {
        int v67 = "brackets expression not supported on this target";
        goto LABEL_91;
      }
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
    case 24:
      if (*((unsigned char *)a1[29] + 33))
      {
        int v46 = (llvm::MCContext *)a1[27];
        *(void *)uint64_t v88 = "tmp";
        WORD4(v89) = 259;
        unint64_t v47 = llvm::MCContext::createTempSymbol(v46, (const llvm::Twine *)v88, 1);
        (*(void (**)(unsigned int *, unint64_t, void))(*(void *)a1[28] + 192))(a1[28], v47, 0);
        uint64_t v48 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
        *a2 = llvm::MCSymbolRefExpr::create(v47, 0, v48, 0);
LABEL_49:
        *a3 = *((void *)a1[6] + 1) + *((void *)a1[6] + 2);
        (*((void (**)(unsigned int **))*a1 + 23))(a1);
        return 0;
      }
      int v67 = "cannot use . as current PC";
LABEL_91:
      *(void *)uint64_t v88 = v67;
      WORD4(v89) = 259;
      return llvm::MCAsmParser::TokError((uint64_t)a1, (llvm::Twine *)v88, 0, 0);
    case 34:
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
      if ((*((uint64_t (**)(unsigned int **, void *, uint64_t *, uint64_t))*a1 + 30))(a1, a2, a3, a4)) {
        return v11;
      }
      uint64_t v37 = *a2;
      uint64_t v49 = (*((uint64_t (**)(unsigned int **))*a1 + 6))(a1);
      unint64_t v39 = (unsigned __int8 *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v49 + 184, 24, 3);
      uint64_t v11 = 0;
      *unint64_t v39 = 3;
      int v40 = v39[4] << 24;
LABEL_52:
      *(_DWORD *)(v39 + 1) = v40;
      *((void *)v39 + 1) = v10;
      *((void *)v39 + 2) = v37;
      goto LABEL_97;
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
      (*((void (**)(unsigned int **))*a1 + 23))(a1);
      if (*a1[6] == 17)
      {
        (*((void (**)(unsigned int **))*a1 + 23))(a1);
        if (((*((uint64_t (**)(unsigned int **, void *, uint64_t *))*a1 + 29))(a1, a2, a3) & 1) == 0)
        {
          *(void *)uint64_t v88 = "expected ')'";
          WORD4(v89) = 259;
          if (!llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)v88))
          {
            uint64_t v12 = (*(uint64_t (**)(unsigned int *, void, uint64_t, unsigned int *))(*(void *)a1[1] + 184))(a1[1], *a2, v9, a1[27]);
            *a2 = v12;
            return v12 == 0;
          }
        }
      }
      else
      {
        uint64_t v13 = "expected '(' after operator";
LABEL_7:
        *(void *)uint64_t v88 = v13;
        WORD4(v89) = 259;
        uint64_t v14 = (*((uint64_t (**)(unsigned int **))*a1 + 5))(a1);
        llvm::MCAsmParser::Error((uint64_t)a1, *(void *)(v14 + 96), (llvm::Twine *)v88, 0, 0);
      }
      return v11;
    default:
      *(void *)uint64_t v88 = "unknown token in expression";
      WORD4(v89) = 259;
      uint64_t v36 = (*((uint64_t (**)(unsigned int **))*a1 + 5))(a1);
      llvm::MCAsmParser::Error((uint64_t)a1, *(void *)(v36 + 96), (llvm::Twine *)v88, 0, 0);
      return 1;
  }
}

uint64_t anonymous namespace'::AsmParser::parseParenExpression(llvm::MCAsmParser *a1, unint64_t *a2, void *a3)
{
  *a2 = 0;
    return 1;
}

uint64_t anonymous namespace'::AsmParser::parseAbsoluteExpression(_anonymous_namespace_::AsmParser *this, uint64_t *a2)
{
  uint64_t v12 = 0;
  uint64_t v4 = *((void *)this + 17);
  v10[0] = 0;
  if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *, void *))(*(void *)this + 232))(this, &v12, v10))return 1; {
  uint64_t v6 = v12;
  }
  uint64_t v7 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  uint64_t v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 72))(v7);
  BOOL v9 = llvm::MCExpr::evaluateAsAbsolute(v6, a2, v8, 0, 0, 0);
  uint64_t result = 0;
  if (!v9)
  {
    v10[0] = "expected absolute expression";
    __int16 v11 = 259;
    return llvm::MCAsmParser::Error((uint64_t)this, v4, (llvm::Twine *)v10, 0, 0);
  }
  return result;
}

uint64_t anonymous namespace'::AsmParser::checkForValidSection(_anonymous_namespace_::AsmParser *this)
{
  if (*((unsigned char *)this + 797)) {
    return 0;
  }
  uint64_t v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  uint64_t v4 = *(unsigned int *)(v3 + 152);
  if (v4)
  {
    if (*(void *)(*(void *)(v3 + 144) + 32 * v4 - 32)) {
      return 0;
    }
  }
  (*(void (**)(void, void, void))(**((void **)this + 28) + 176))(*((void *)this + 28), 0, *(void *)(*((void *)this + 1) + 288));
  uint64_t v5 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                             + 8)
                 + 8);
  uint64_t v6 = "expected section directive before assembly directive";
  __int16 v7 = 259;
  return llvm::MCAsmParser::Error((uint64_t)this, v5, (llvm::Twine *)&v6, 0, 0);
}

uint64_t anonymous namespace'::AsmParser::parseParenExprOfDepth(llvm::MCAsmParser *a1, int a2, unint64_t *a3, void *a4)
{
    return 1;
  if (!a2) {
    return 0;
  }
  BOOL v8 = 1;
  {
    BOOL v8 = --a2 != 0;
    if (!a2) {
      break;
    }
    uint64_t v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1);
    *a4 = *(void *)(*(void *)(v9 + 8) + 8) + *(void *)(*(void *)(v9 + 8) + 16);
    __int16 v11 = "expected ')'";
    __int16 v12 = 259;
    if (llvm::MCAsmParser::parseToken(a1, 18, (llvm::Twine *)&v11)) {
      break;
    }
  }
  return v8;
}

uint64_t anonymous namespace'::HLASMAsmParser::parseStatement(_anonymous_namespace_::HLASMAsmParser *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(void *)a1 + 40))(a1);
  if (**(_DWORD **)(*((void *)a1 + 106) + 8) == 9)
  {
    if (*(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(void *)a1 + 40))(a1)
                               + 8)
                   + 16)
      && **(unsigned char **)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(void *)a1 + 40))(a1)
                                + 8)
                    + 8) != 13
      && **(unsigned char **)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(void *)a1 + 40))(a1)
                                + 8)
                    + 8) != 10)
    {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  int v5 = **(_DWORD **)(v4 + 8);
  if (**(_DWORD **)(*((void *)a1 + 106) + 8) == 9
    && (**(unsigned char **)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(void *)a1 + 40))(a1)
                               + 8)
                   + 8) == 10
     || **(unsigned char **)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(void *)a1 + 40))(a1)
                               + 8)
                   + 8) == 13))
  {
LABEL_9:
    (*(void (**)(void))(**((void **)a1 + 107) + 152))(*((void *)a1 + 107));
LABEL_10:
    return 0;
  }
  if (v5 != 11)
  {
    uint64_t v8 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(void *)a1 + 40))(a1) + 8);
    long long v9 = *(_OWORD *)v8;
    uint64_t v36 = *(void *)(v8 + 16);
    long long v35 = v9;
    unsigned int v38 = *(_DWORD *)(v8 + 32);
    if (v38 > 0x40) {
      operator new[]();
    }
    uint64_t v37 = *(void *)(v8 + 24);
    uint64_t v10 = *((void *)&v35 + 1);
    uint64_t v33 = 0;
    uint64_t v34 = (char *)*((void *)&v35 + 1);
    uint64_t v32 = 0;
    {
      __int16 v12 = "The HLASM Label has to be an Identifier";
    }
    else
    {
      {
        int v13 = 1;
        goto LABEL_22;
      }
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(void *)a1 + 40))(a1)
                       + 8) != 9)
      {
        uint64_t v21 = (llvm::MCContext *)*((void *)a1 + 27);
        uint64_t v22 = *((void *)v21 + 18);
        int v23 = *(unsigned __int8 *)(v22 + 80);
        if (*(unsigned char *)(v22 + 80))
        {
          llvm::StringRef::upper((llvm::StringRef *)&v32, __p);
          unint64_t v24 = (void **)__p[0];
          if ((v28 & 0x80u) == 0) {
            unint64_t v24 = __p;
          }
          uint64_t v25 = v28;
          if ((v28 & 0x80u) != 0) {
            uint64_t v25 = (uint64_t)__p[1];
          }
        }
        else
        {
          unint64_t v24 = v32;
          uint64_t v25 = v33;
        }
        __int16 v31 = 261;
        uint64_t v29 = v24;
        uint64_t v30 = v25;
        unint64_t Symbol = (unsigned char *)llvm::MCContext::getOrCreateSymbol(v21, (const llvm::Twine *)&v29);
        if (v23 && (char)v28 < 0) {
          operator delete(__p[0]);
        }
        (*(void (**)(void, unsigned char *, uint64_t))(**((void **)a1 + 1) + 160))(*((void *)a1 + 1), Symbol, v10);
        (*(void (**)(void, unsigned char *, uint64_t))(**((void **)a1 + 107) + 192))(*((void *)a1 + 107), Symbol, v10);
          llvm::MCGenDwarfLabelEntry::Make(Symbol, *((void *)a1 + 28), *((uint64_t **)a1 + 30), &v34);
        (*(void (**)(void, unsigned char *))(**((void **)a1 + 1) + 168))(*((void *)a1 + 1), Symbol);
        int v13 = 0;
LABEL_22:
        if (v38 >= 0x41 && v37) {
          MEMORY[0x263E50080](v37, 0x1000C8000313F17);
        }
        if (v13)
        {
          return 1;
        }
        goto LABEL_27;
      }
      __int16 v12 = "Cannot have just a label for an HLASM inline asm statement";
    }
    uint64_t v29 = (void *)v12;
    __int16 v31 = 259;
    int v13 = llvm::MCAsmParser::Error((uint64_t)a1, v10, (llvm::Twine *)&v29, 0, 0);
    goto LABEL_22;
  }
LABEL_27:
  uint64_t v14 = *(uint64_t **)(*((void *)a1 + 106) + 8);
  uint64_t v16 = *v14;
  unint64_t v15 = (char *)v14[1];
  uint64_t v17 = v14[2];
  unsigned int v18 = *((_DWORD *)v14 + 8);
  if (v18 > 0x40) {
    operator new[]();
  }
  uint64_t v19 = v14[3];
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  if (v20)
  {
    *(void *)&long long v35 = "unexpected token at start of statement";
    LOWORD(v38) = 259;
    return llvm::MCAsmParser::Error((uint64_t)a1, (uint64_t)v15, (llvm::Twine *)&v35, 0, 0);
  }
  else
  {
    *(void *)&long long v35 = v16;
    *((void *)&v35 + 1) = v15;
    uint64_t v36 = v17;
    unsigned int v38 = v18;
    uint64_t v37 = v19;
  }
}

void anonymous namespace'::AsmParser::DiagHandler(_anonymous_namespace_::AsmParser *this, const llvm::SMDiagnostic *a2, void *a3)
{
  v47[22] = *(char **)MEMORY[0x263EF8340];
  int v5 = (llvm::raw_ostream *)llvm::errs(this);
  uint64_t v6 = *(llvm::raw_ostream **)this;
  __int16 v7 = (char *)*((void *)this + 1);
  unsigned int BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)this, (unint64_t)v7);
  int v9 = llvm::SourceMgr::FindBufferContainingLoc(*((uint64_t **)a2 + 30), *((void *)a2 + 56));
  if (*((void *)a2 + 31)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = BufferContainingLoc >= 2;
  }
  if (v10) {
    llvm::SourceMgr::PrintIncludeStack(v6, *(char **)(*(void *)v6 + 24 * (BufferContainingLoc - 1) + 16), v5);
  }
  if (*((void *)a2 + 55) && BufferContainingLoc == v9)
  {
    size_t v11 = *((void *)a2 + 54);
    if (v11 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    __int16 v12 = (const void *)*((void *)a2 + 53);
    if (v11 >= 0x17)
    {
      uint64_t v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v16 = v11 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (void **)operator new(v16 + 1);
      size_t v36 = v11;
      int64_t v37 = v17 | 0x8000000000000000;
      long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v37) = *((void *)a2 + 54);
      p_dst = (void **)&__dst;
      if (!v11) {
        goto LABEL_21;
      }
    }
    memmove(p_dst, v12, v11);
LABEL_21:
    *((unsigned char *)p_dst + v11) = 0;
    int LineAndColumn = llvm::SourceMgr::getLineAndColumn((uint64_t *)v6, v7, BufferContainingLoc);
    int v19 = ~llvm::SourceMgr::getLineAndColumn(*((uint64_t **)a2 + 30), *((char **)a2 + 56), BufferContainingLoc)+ LineAndColumn+ *((_DWORD *)a2 + 110);
    if (v37 >= 0) {
      char v20 = (void **)&__dst;
    }
    else {
      char v20 = __dst;
    }
    if (v37 >= 0) {
      size_t v21 = HIBYTE(v37);
    }
    else {
      size_t v21 = v36;
    }
    int v22 = *((char *)this + 79);
    int v23 = (char *)this + 56;
    BOOL v24 = v22 < 0;
    if (v22 < 0) {
      int v23 = (char *)*((void *)this + 7);
    }
    size_t v25 = *((unsigned __int8 *)this + 79);
    if (v24) {
      size_t v25 = *((void *)this + 8);
    }
    int v26 = *((char *)this + 103);
    uint64_t v27 = (char *)this + 80;
    BOOL v28 = v26 < 0;
    if (v26 < 0) {
      uint64_t v27 = (char *)*((void *)this + 10);
    }
    size_t v29 = *((unsigned __int8 *)this + 103);
    if (v28) {
      size_t v29 = *((void *)this + 11);
    }
    llvm::SMDiagnostic::SMDiagnostic((uint64_t)v38, *(void *)this, *((void *)this + 1), v20, v21, v19, *((_DWORD *)this + 11), *((_DWORD *)this + 12), v23, v25, v27, v29, *((const void **)this + 13), (uint64_t)(*((void *)this + 14) - *((void *)this + 13)) >> 3, 0, 0);
    uint64_t v30 = (void (*)(_anonymous_namespace_::AsmParser *, void))*((void *)a2 + 31);
    if (v30)
    {
      v30(this, *((void *)a2 + 32));
    }
    else
    {
      uint64_t v34 = (*(uint64_t (**)(const llvm::SMDiagnostic *))(*(void *)a2 + 48))(a2);
      std::function<void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::operator()(v34 + 112, (uint64_t)v38, *(void *)(v34 + 72) == 0);
    }
    llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v47);
    if (__p)
    {
      int v46 = __p;
      operator delete(__p);
    }
    if (v44 < 0) {
      operator delete(v43);
    }
    if (v42 < 0) {
      operator delete(v41);
    }
    if (v40 < 0) {
      operator delete(v39);
    }
    if (SHIBYTE(v37) < 0) {
      operator delete(__dst);
    }
    return;
  }
  uint64_t v14 = (void (*)(_anonymous_namespace_::AsmParser *, uint64_t))*((void *)a2 + 31);
  if (v14)
  {
    uint64_t v15 = *((void *)a2 + 32);
    v14(this, v15);
  }
  else
  {
    uint64_t v31 = (*(uint64_t (**)(const llvm::SMDiagnostic *))(*(void *)a2 + 48))(a2);
    char v32 = *(void *)(v31 + 72) == 0;
    uint64_t v33 = v31 + 112;
    std::function<void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::operator()(v33, (uint64_t)this, v32);
  }
}

void anonymous namespace'::AsmParser::~AsmParser(_anonymous_namespace_::AsmParser *this)
{
  JUMPOUT(0x263E500B0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  char *v13;
  void **v14;
  void **v15;
  unint64_t v16;
  void **v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v35;
  uint64_t v36;
  void **v37;

  *(void *)this = &unk_270DC1B68;
  *(void *)(*((void *)this + 28) + 288) = 0;
  *(_OWORD *)(*((void *)this + 30) + 48) = *(_OWORD *)((char *)this + 248);
  if (*((_DWORD *)this + 209))
  {
    uint64_t v2 = *((unsigned int *)this + 208);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        int v5 = *(void *)(*((void *)this + 103) + v3);
        if (v5 != -8 && v5 != 0) {
          MEMORY[0x263E500A0]();
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*((void **)this + 103));
  if (*((_DWORD *)this + 203))
  {
    __int16 v7 = *((unsigned int *)this + 202);
    if (v7)
    {
      uint64_t v8 = 0;
      int v9 = 8 * v7;
      do
      {
        BOOL v10 = *(void *)(*((void *)this + 100) + v8);
        if (v10 != -8 && v10 != 0) {
          MEMORY[0x263E500A0]();
        }
        v8 += 8;
      }
      while (v9 != v8);
    }
  }
  free(*((void **)this + 100));
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)this + 768, *((void **)this + 97));
  __int16 v12 = (char *)*((void *)this + 90);
  if (v12 != (char *)this + 736) {
    free(v12);
  }
  int v13 = (char *)*((void *)this + 60);
  if (v13 != (char *)this + 496) {
    free(v13);
  }
  uint64_t v14 = (void **)*((void *)this + 47);
  uint64_t v15 = (void **)*((void *)this + 48);
  if (v15 == v14)
  {
    int v19 = (void *)((char *)this + 408);
    uint64_t v15 = (void **)*((void *)this + 47);
  }
  else
  {
    uint64_t v16 = *((void *)this + 50);
    uint64_t v17 = &v14[v16 / 0x2E];
    unsigned int v18 = (unint64_t)*v17 + 88 * (v16 % 0x2E);
    int v19 = (void *)((char *)this + 408);
    char v20 = (unint64_t)v14[(*((void *)this + 51) + v16) / 0x2E] + 88 * ((*((void *)this + 51) + v16) % 0x2E);
    if (v18 != v20)
    {
      do
      {
        int64_t v37 = (void **)(v18 + 56);
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v37);
        int64_t v37 = (void **)(v18 + 32);
        std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100](&v37);
        v18 += 88;
        if (v18 - (void)*v17 == 4048)
        {
          size_t v21 = (unint64_t)v17[1];
          ++v17;
          unsigned int v18 = v21;
        }
      }
      while (v18 != v20);
      uint64_t v14 = (void **)*((void *)this + 47);
      uint64_t v15 = (void **)*((void *)this + 48);
    }
  }
  *int v19 = 0;
  int v22 = (char *)v15 - (char *)v14;
  if ((unint64_t)((char *)v15 - (char *)v14) >= 0x11)
  {
    do
    {
      operator delete(*v14);
      uint64_t v15 = (void **)*((void *)this + 48);
      uint64_t v14 = (void **)(*((void *)this + 47) + 8);
      *((void *)this + 47) = v14;
      int v22 = (char *)v15 - (char *)v14;
    }
    while ((unint64_t)((char *)v15 - (char *)v14) > 0x10);
  }
  int v23 = v22 >> 3;
  if (v23 == 1)
  {
    BOOL v24 = 23;
    goto LABEL_36;
  }
  if (v23 == 2)
  {
    BOOL v24 = 46;
LABEL_36:
    *((void *)this + 50) = v24;
  }
  if (v14 != v15)
  {
    do
    {
      size_t v25 = *v14++;
      operator delete(v25);
    }
    while (v14 != v15);
    uint64_t v27 = *((void *)this + 47);
    int v26 = *((void *)this + 48);
    if (v26 != v27) {
      *((void *)this + 48) = v26 + ((v27 - v26 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  BOOL v28 = (void *)*((void *)this + 46);
  if (v28) {
    operator delete(v28);
  }
  size_t v29 = (void *)*((void *)this + 43);
  if (v29)
  {
    *((void *)this + 44) = v29;
    operator delete(v29);
  }
  if (*((_DWORD *)this + 83))
  {
    uint64_t v30 = *((unsigned int *)this + 82);
    if (v30)
    {
      uint64_t v31 = 0;
      char v32 = 8 * v30;
      do
      {
        uint64_t v33 = *(void *)(*((void *)this + 40) + v31);
        if (v33 != -8 && v33 != 0) {
          MEMORY[0x263E500A0]();
        }
        v31 += 8;
      }
      while (v32 != v31);
    }
  }
  free(*((void **)this + 40));
  long long v35 = (void *)*((void *)this + 37);
  if (v35)
  {
    *((void *)this + 38) = v35;
    operator delete(v35);
  }
  size_t v36 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  llvm::MCAsmLexer::~MCAsmLexer((void **)this + 5);
  *(void *)this = &unk_270DC1D70;
  llvm::SmallVector<llvm::MCAsmParser::MCPendingError,0u>::~SmallVector((char **)this + 2);
}

uint64_t anonymous namespace'::AsmParser::parseStatement(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (int **)(a1 + 6);
  while (1)
  {
    int v7 = **v6;
    if (v7 != 11) {
      break;
    }
    ((void (*)(void **))(*a1)[23])(a1);
  }
  if (v7 == 9)
  {
    if (!*(void *)(*(void *)(((uint64_t (*)(void **))(*a1)[5])(a1) + 8) + 16)
      || **(unsigned char **)(*(void *)(((uint64_t (*)(void **))(*a1)[5])(a1) + 8) + 8) == 13
      || **(unsigned char **)(*(void *)(((uint64_t (*)(void **))(*a1)[5])(a1) + 8) + 8) == 10)
    {
      (*(void (**)(void *))(*a1[28] + 152))(a1[28]);
    }
    ((void (*)(void **))(*a1)[23])(a1);
    return 0;
  }
  uint64_t v9 = *(void *)(((uint64_t (*)(void **))(*a1)[5])(a1) + 8);
  long long v10 = *(_OWORD *)v9;
  uint64_t v136 = *(void *)(v9 + 16);
  long long v135 = v10;
  unsigned int v138 = *(_DWORD *)(v9 + 32);
  if (v138 > 0x40) {
    operator new[]();
  }
  uint64_t v137 = *(void *)(v9 + 24);
  size_t v11 = (char *)*((void *)&v135 + 1);
  uint64_t v134 = (char *)*((void *)&v135 + 1);
  long long v133 = 0uLL;
  a1[34] = (void *)*((void *)&v135 + 1);
  int v12 = *(_DWORD *)a1[6];
  switch(v12)
  {
    case 21:
      ((void (*)(void **))(*a1)[23])(a1);
      int v13 = "{";
      goto LABEL_25;
    case 22:
      ((void (*)(void **))(*a1)[23])(a1);
      int v13 = "}";
      goto LABEL_25;
    case 23:
      if (!(*(unsigned int (**)(void *))(*a1[1] + 144))(a1[1])) {
        goto LABEL_21;
      }
      ((void (*)(void **))(*a1)[23])(a1);
      int v13 = "*";
LABEL_25:
      *(void *)&long long v133 = v13;
      uint64_t v15 = -1;
      uint64_t v14 = 1;
      goto LABEL_26;
    case 24:
      ((void (*)(void **))(*a1)[23])(a1);
      int v13 = ".";
      goto LABEL_25;
    default:
      if (v12 == 4)
      {
        uint64_t v30 = *(void *)(((uint64_t (*)(void **))(*a1)[5])(a1) + 8);
        uint64_t v33 = *(void *)(v30 + 24);
        uint64_t v31 = v30 + 24;
        uint64_t v32 = v33;
        if (*(_DWORD *)(v31 + 8) >= 0x41u) {
          uint64_t v31 = v32;
        }
        uint64_t v15 = *(void *)v31;
        if ((*(void *)v31 & 0x8000000000000000) != 0)
        {
          if (*((unsigned char *)a1 + 289))
          {
            uint64_t v14 = 0;
            *(void *)&long long v133 = "";
            goto LABEL_26;
          }
        }
        else
        {
          long long v133 = *(_OWORD *)(*(void *)(((uint64_t (*)(void **))(*a1)[5])(a1) + 8) + 8);
          ((void (*)(void **))(*a1)[23])(a1);
          if (*(_DWORD *)a1[6] == 10 || *((unsigned char *)a1 + 289)) {
            goto LABEL_27;
          }
        }
      }
      else
      {
        if (v12 == 8)
        {
LABEL_78:
          uint64_t v8 = 0;
          goto LABEL_164;
        }
LABEL_21:
        if (!((unsigned int (*)(void **, long long *))(*a1)[24])(a1, &v133))
        {
          uint64_t v15 = -1;
LABEL_27:
          llvm::StringRef::lower((llvm::StringRef *)&v133, &v139);
          if (v140 >= 0) {
            uint64_t v16 = (uint64_t *)&v139;
          }
          else {
            uint64_t v16 = (uint64_t *)v139;
          }
          if (v140 >= 0) {
            unint64_t v17 = HIBYTE(v140);
          }
          else {
            unint64_t v17 = *((void *)&v139 + 1);
          }
          int Key = llvm::StringMapImpl::FindKey((uint64_t *)a1 + 100, v16, v17);
          int v19 = a1[100];
          if (Key == -1) {
            uint64_t v20 = *((unsigned int *)a1 + 202);
          }
          else {
            uint64_t v20 = Key;
          }
          size_t v21 = &v19[v20];
          if (SHIBYTE(v140) < 0)
          {
            operator delete((void *)v139);
            int v19 = a1[100];
          }
          if (v21 != &v19[*((unsigned int *)a1 + 202)])
          {
            int v22 = *(_DWORD *)(*v21 + 8);
            switch(v22)
            {
              case 'R':
              case 'S':
              case 'T':
              case 'U':
              case 'V':
              case 'W':
              case 'X':
                int v23 = (void **)((char *)a1 + 284);
                size_t v25 = (char *)a1[38];
                BOOL v24 = (char *)a1[39];
                if (v25 >= v24)
                {
                  uint64_t v34 = (char *)a1[37];
                  uint64_t v35 = (v25 - v34) >> 3;
                  if ((unint64_t)(v35 + 1) >> 61) {
                    abort();
                  }
                  uint64_t v36 = v24 - v34;
                  uint64_t v37 = v36 >> 2;
                  if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
                    uint64_t v37 = v35 + 1;
                  }
                  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v38 = v37;
                  }
                  if (v38) {
                    unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v38);
                  }
                  else {
                    uint64_t v39 = 0;
                  }
                  unint64_t v43 = v38 + 8 * v35;
                  char v44 = (void *)(v38 + 8 * v39);
                  *(void *)unint64_t v43 = *v23;
                  int v26 = (void *)(v43 + 8);
                  int v46 = a1[37];
                  long long v45 = a1[38];
                  if (v45 != v46)
                  {
                    do
                    {
                      int v47 = *((_DWORD *)v45 - 2);
                      v45 -= 4;
                      __int16 v48 = v45[2];
                      *(_DWORD *)(v43 - 8) = v47;
                      v43 -= 8;
                      *(_WORD *)(v43 + 4) = v48;
                    }
                    while (v45 != v46);
                    long long v45 = a1[37];
                  }
                  a1[37] = (void *)v43;
                  a1[38] = v26;
                  a1[39] = v44;
                  if (v45) {
                    operator delete(v45);
                  }
                }
                else
                {
                  *(void *)size_t v25 = *v23;
                  int v26 = v25 + 8;
                }
                a1[38] = v26;
                *((_DWORD *)a1 + 71) = 1;
                if (*((unsigned char *)a1 + 289)) {
                  goto LABEL_77;
                }
                *(void *)&long long v139 = 0;
                if ((((uint64_t (*)(void **, long long *))(*a1)[32])(a1, &v139) & 1) != 0
                  || llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
                {
                  goto LABEL_155;
                }
                switch(v22)
                {
                  case 'S':
                    BOOL v49 = v139 == 0;
                    goto LABEL_189;
                  case 'T':
                    unint64_t v88 = ~(void)v139;
                    goto LABEL_188;
                  case 'U':
                    BOOL v49 = (uint64_t)v139 > 0;
                    goto LABEL_189;
                  case 'V':
                    BOOL v49 = (uint64_t)v139 < 1;
                    goto LABEL_189;
                  case 'W':
                    unint64_t v88 = v139;
LABEL_188:
                    BOOL v49 = v88 >> 63;
LABEL_189:
                    *(void *)&long long v139 = v49;
                    break;
                  default:
                    break;
                }
                uint64_t v8 = 0;
                BOOL v89 = (void)v139 == 0;
                *((unsigned char *)a1 + 288) = (void)v139 != 0;
                *((unsigned char *)a1 + 289) = v89;
                goto LABEL_164;
              case 'Y':
                char v60 = (uint64_t *)a1;
                char v61 = 1;
                goto LABEL_118;
              case 'Z':
                char v60 = (uint64_t *)a1;
                char v61 = 0;
LABEL_118:
                goto LABEL_163;
              case '[':
                uint64_t v62 = a1;
                char v63 = 1;
                goto LABEL_122;
              case '\\':
                uint64_t v64 = (uint64_t)a1;
                int v65 = 1;
                goto LABEL_124;
              case ']':
                uint64_t v62 = a1;
                char v63 = 0;
LABEL_122:
                goto LABEL_163;
              case '^':
                uint64_t v64 = (uint64_t)a1;
                int v65 = 0;
LABEL_124:
                goto LABEL_163;
              case '_':
                uint64_t v41 = (uint64_t *)a1;
                int v42 = 1;
                goto LABEL_126;
              case 'a':
                uint64_t v41 = (uint64_t *)a1;
                int v42 = 0;
LABEL_126:
                break;
              case 'b':
                goto LABEL_163;
              case 'c':
                goto LABEL_163;
              case 'd':
                goto LABEL_163;
              default:
                goto LABEL_43;
            }
            goto LABEL_163;
          }
          int v22 = 0;
LABEL_43:
          if (*((unsigned char *)a1 + 289))
          {
LABEL_77:
            ((void (*)(void **))(*a1)[28])(a1);
            goto LABEL_78;
          }
          int v27 = **v6;
          if (v27 == 10)
          {
            if ((*(uint64_t (**)(void *, long long *))(*a1[1] + 136))(a1[1], &v135))
            {
              if ((((uint64_t (*)(void **))(*a1)[33])(a1) & 1) == 0)
              {
                ((void (*)(void **))(*a1)[23])(a1);
                long long v28 = v133;
                if (*((void *)&v133 + 1) != 1 || *(unsigned char *)v133 != 46)
                {
                  if (v15 == -1)
                  {
                    if (a3 && *((unsigned char *)a1 + 797))
                    {
                      uint64_t v77 = ((uint64_t (*)(void **))(*a1)[4])(a1);
                      uint64_t v78 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, char *, uint64_t))(*(void *)a3 + 24))(a3, v28, *((void *)&v28 + 1), v77, v11, 1);
                      uint64_t v80 = v79;
                      llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,llvm::StringRef &>(*(void *)(a2 + 88), 7, (uint64_t)v11, SDWORD2(v133), v78, v79);
                      *(void *)&long long v133 = v78;
                      *((void *)&v133 + 1) = v80;
                    }
                    BOOL v81 = (llvm::MCContext *)((uint64_t (*)(void **))(*a1)[6])(a1);
                    LOWORD(v142) = 261;
                    long long v139 = v133;
                    unint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v81, (const llvm::Twine *)&v139);
                  }
                  else
                  {
                    unint64_t Symbol = llvm::MCContext::createDirectionalLocalSymbol((llvm::MCContext *)a1[27], v15);
                  }
                  unint64_t v82 = (unsigned char *)Symbol;
                  if (**(_DWORD **)(((uint64_t (*)(void **))(*a1)[5])(a1) + 8) == 37)
                  {
                    uint64_t v83 = ((uint64_t (*)(void **))(*a1)[25])(a1);
                    uint64_t v85 = v84;
                    llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 5));
                    LODWORD(v139) = 9;
                    *((void *)&v139 + 1) = v83;
                    uint64_t v140 = v85;
                    unsigned int v142 = 64;
                    uint64_t v141 = 0;
                    *((unsigned char *)a1 + 147) = 0;
                    llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>((uint64_t)v6, (uint64_t)a1[6], (unint64_t)&v139);
                    if (v142 >= 0x41)
                    {
                      if (v141) {
                        MEMORY[0x263E50080](v141, 0x1000C8000313F17);
                      }
                    }
                  }
                  if (**(_DWORD **)(((uint64_t (*)(void **))(*a1)[5])(a1) + 8) == 9) {
                    ((void (*)(void **))(*a1)[23])(a1);
                  }
                  if ((((uint64_t (*)(void **, void, void))(*a1)[13])(a1, v133, *((void *)&v133 + 1)) & 1) == 0)
                  {
                    (*(void (**)(void *, unsigned char *, char *))(*a1[1] + 160))(a1[1], v82, v11);
                    if (!*((unsigned char *)a1[1] + 112)) {
                      (*(void (**)(void *, unsigned char *, char *))(*a1[28] + 192))(a1[28], v82, v11);
                    }
                    {
                      uint64_t v86 = ((uint64_t (*)(void **))(*a1)[7])(a1);
                      long long v87 = (uint64_t *)((uint64_t (*)(void **))(*a1)[4])(a1);
                      llvm::MCGenDwarfLabelEntry::Make(v82, v86, v87, &v134);
                    }
                    (*(void (**)(void *, unsigned char *))(*a1[1] + 168))(a1[1], v82);
                  }
                  goto LABEL_78;
                }
                size_t v29 = "invalid use of pseudo-symbol '.' as a label";
                goto LABEL_68;
              }
LABEL_155:
              uint64_t v8 = 1;
              goto LABEL_164;
            }
            int v27 = **v6;
          }
          if (v27 == 27 && (*(unsigned int (**)(void *))(*a1[1] + 128))(a1[1]))
          {
            ((void (*)(void **))(*a1)[23])(a1);
            goto LABEL_163;
          }
          if ((_BYTE)a1[52])
          {
            uint64_t v50 = ((uint64_t (*)(void **))(*a1)[6])(a1);
            int v51 = llvm::StringMapImpl::FindKey((uint64_t *)(v50 + 2064), (uint64_t *)v133, *((unint64_t *)&v133 + 1));
            if (v51 != -1 && v51 != (unint64_t)*(unsigned int *)(v50 + 2072))
            {
              goto LABEL_163;
            }
          }
          if (*((void *)&v133 + 1) >= 2uLL && *(unsigned char *)v133 == 46)
          {
            uint64_t v52 = a1[1];
            uint64_t v53 = ((uint64_t (*)(void **))(*a1)[7])(a1);
            (*(void (**)(void *, uint64_t))(*v52 + 176))(v52, v53);
            uint64_t v54 = *(void *)(*(void *)(((uint64_t (*)(void **))(*a1)[5])(a1) + 8) + 8);
            __int16 v55 = a1[1];
            uint64_t v130 = v136;
            long long v129 = v135;
            unsigned int v132 = v138;
            if (v138 > 0x40) {
              operator new[]();
            }
            uint64_t v131 = v137;
            int v67 = (*(uint64_t (**)(void *, long long *))(*v55 + 64))(v55, &v129);
            int v68 = v67;
            if (v132 >= 0x41 && v131) {
              MEMORY[0x263E50080](v131, 0x1000C8000313F17);
            }
            int v69 = *((_DWORD *)a1 + 6);
            uint64_t v8 = v69 != 0;
            if (v69 || ((v68 ^ 1) & 1) != 0) {
              goto LABEL_164;
            }
            if (*(void *)(*(void *)(((uint64_t (*)(void **))(*a1)[5])(a1) + 8) + 8) == v54)
            {
              if (*(void *)(*(void *)(((uint64_t (*)(void **))(*a1)[5])(a1) + 8) + 8) != v54) {
                goto LABEL_78;
              }
              uint64_t v70 = llvm::StringMap<std::pair<llvm::MCAsmParserExtension *,BOOL (*)(llvm::MCAsmParserExtension *,llvm::StringRef,llvm::SMLoc)>,llvm::MallocAllocator>::lookup((uint64_t)(a1 + 40), (uint64_t *)v133, *((unint64_t *)&v133 + 1));
              if (v70)
              {
                uint64_t v40 = v71(v70, v133, *((void *)&v133 + 1), v11);
              }
              else
              {
                switch(v22)
                {
                  case 1:
                  case 2:
                    uint64_t v92 = (llvm::MCAsmParser *)a1;
                    unsigned int v93 = 0;
                    goto LABEL_321;
                  case 3:
                    uint64_t v92 = (llvm::MCAsmParser *)a1;
                    unsigned int v93 = 1;
                    goto LABEL_321;
                  case 4:
                    LOBYTE(v127[0]) = 0;
                    goto LABEL_214;
                  case 5:
                  case 6:
                    LOBYTE(v127[0]) = 1;
LABEL_214:
                    *(void *)&long long v139 = a1;
                    *((void *)&v139 + 1) = v127;
                    goto LABEL_324;
                  case 7:
                  case 20:
                    int v90 = 1;
                    goto LABEL_218;
                  case 8:
                  case 10:
                  case 11:
                  case 18:
                  case 24:
                    int v90 = 2;
                    goto LABEL_218;
                  case 9:
                    goto LABEL_163;
                  case 12:
                  case 13:
                  case 14:
                  case 22:
                    int v90 = 4;
                    goto LABEL_218;
                  case 15:
                  case 16:
                    int v90 = 8;
                    goto LABEL_218;
                  case 17:
                    *(void *)&long long v139 = a1;
                    goto LABEL_324;
                  case 19:
                    int v90 = *(_DWORD *)(*(void *)(((uint64_t (*)(void **))(*a1)[6])(a1) + 144) + 8);
LABEL_218:
                    LODWORD(v127[0]) = v90;
                    *(void *)&long long v139 = a1;
                    *((void *)&v139 + 1) = v127;
                    goto LABEL_324;
                  case 21:
                  case 43:
                    uint64_t v91 = &llvm::semIEEEdouble;
                    goto LABEL_201;
                  case 23:
                  case 41:
                  case 42:
                    uint64_t v91 = &llvm::semIEEEsingle;
LABEL_201:
                    *(void *)&long long v139 = a1;
                    *((void *)&v139 + 1) = v91;
                    goto LABEL_324;
                  case 25:
                  case 32:
                  case 77:
                  case 78:
                    __int16 v128 = 261;
                    *(_OWORD *)size_t v127 = v133;
                    int v125 = " not currently supported for this target";
                    __int16 v126 = 259;
                    llvm::operator+(v127, (uint64_t *)&v125, (uint64_t)&v139);
                    goto LABEL_269;
                  case 26:
                  case 31:
                    uint64_t v96 = *((void *)&v133 + 1);
                    uint64_t v95 = v133;
                    uint64_t v97 = (llvm::MCAsmParser *)a1;
                    uint64_t v98 = 2;
                    goto LABEL_222;
                  case 27:
                    uint64_t v96 = *((void *)&v133 + 1);
                    uint64_t v95 = v133;
                    uint64_t v97 = (llvm::MCAsmParser *)a1;
                    uint64_t v98 = 1;
                    goto LABEL_222;
                  case 28:
                    uint64_t v107 = *((void *)&v133 + 1);
                    uint64_t v106 = v133;
                    char v108 = &llvm::semIEEEdouble;
                    goto LABEL_224;
                  case 29:
                    uint64_t v96 = *((void *)&v133 + 1);
                    uint64_t v95 = v133;
                    uint64_t v97 = (llvm::MCAsmParser *)a1;
                    uint64_t v98 = 4;
LABEL_222:
                    goto LABEL_163;
                  case 30:
                    uint64_t v107 = *((void *)&v133 + 1);
                    uint64_t v106 = v133;
                    char v108 = &llvm::semIEEEsingle;
LABEL_224:
                    goto LABEL_163;
                  case 33:
                  case 39:
                    uint64_t v100 = *((void *)&v133 + 1);
                    uint64_t v99 = v133;
                    uint64_t v101 = (llvm::MCAsmParser *)a1;
                    unsigned int v102 = 2;
                    goto LABEL_227;
                  case 34:
                    uint64_t v100 = *((void *)&v133 + 1);
                    uint64_t v99 = v133;
                    uint64_t v101 = (llvm::MCAsmParser *)a1;
                    unsigned int v102 = 1;
                    goto LABEL_227;
                  case 35:
                    uint64_t v100 = *((void *)&v133 + 1);
                    uint64_t v99 = v133;
                    uint64_t v101 = (llvm::MCAsmParser *)a1;
                    unsigned int v102 = 8;
                    goto LABEL_227;
                  case 36:
                  case 38:
                    uint64_t v100 = *((void *)&v133 + 1);
                    uint64_t v99 = v133;
                    uint64_t v101 = (llvm::MCAsmParser *)a1;
                    unsigned int v102 = 4;
                    goto LABEL_227;
                  case 37:
                  case 40:
                    uint64_t v100 = *((void *)&v133 + 1);
                    uint64_t v99 = v133;
                    uint64_t v101 = (llvm::MCAsmParser *)a1;
                    unsigned int v102 = 12;
LABEL_227:
                    goto LABEL_163;
                  case 44:
                    BOOL v109 = *(unsigned char *)(*(void *)(((uint64_t (*)(void **))(*a1)[6])(a1) + 144) + 339) == 0;
                    uint64_t v110 = (_anonymous_namespace_::AsmParser *)a1;
                    goto LABEL_234;
                  case 45:
                    BOOL v109 = *(unsigned char *)(*(void *)(((uint64_t (*)(void **))(*a1)[6])(a1) + 144) + 339) == 0;
                    uint64_t v110 = (_anonymous_namespace_::AsmParser *)a1;
                    goto LABEL_238;
                  case 46:
                    uint64_t v110 = (_anonymous_namespace_::AsmParser *)a1;
                    BOOL v109 = 0;
                    goto LABEL_234;
                  case 47:
                    uint64_t v110 = (_anonymous_namespace_::AsmParser *)a1;
                    BOOL v109 = 0;
                    goto LABEL_236;
                  case 48:
                    uint64_t v110 = (_anonymous_namespace_::AsmParser *)a1;
                    BOOL v109 = 0;
                    goto LABEL_238;
                  case 49:
                    uint64_t v110 = (_anonymous_namespace_::AsmParser *)a1;
                    BOOL v109 = 1;
LABEL_234:
                    uint64_t v111 = 1;
                    goto LABEL_239;
                  case 50:
                    uint64_t v110 = (_anonymous_namespace_::AsmParser *)a1;
                    BOOL v109 = 1;
LABEL_236:
                    uint64_t v111 = 2;
                    goto LABEL_239;
                  case 51:
                    uint64_t v110 = (_anonymous_namespace_::AsmParser *)a1;
                    BOOL v109 = 1;
LABEL_238:
                    uint64_t v111 = 4;
LABEL_239:
                    goto LABEL_163;
                  case 52:
                    goto LABEL_163;
                  case 53:
                    goto LABEL_163;
                  case 54:
                    goto LABEL_163;
                  case 55:
                    goto LABEL_163;
                  case 56:
                    goto LABEL_163;
                  case 57:
                    goto LABEL_163;
                  case 58:
                    goto LABEL_163;
                  case 59:
                    goto LABEL_77;
                  case 60:
                  case 61:
                    int v103 = 9;
                    goto LABEL_323;
                  case 62:
                    int v103 = 16;
                    goto LABEL_323;
                  case 63:
                    int v103 = 18;
                    goto LABEL_323;
                  case 64:
                    int v103 = 19;
                    goto LABEL_323;
                  case 65:
                    int v103 = 21;
                    goto LABEL_323;
                  case 66:
                    int v103 = 23;
                    goto LABEL_323;
                  case 67:
                    int v103 = 25;
                    goto LABEL_323;
                  case 68:
                    int v103 = 26;
                    goto LABEL_323;
                  case 69:
                    int v103 = 27;
                    goto LABEL_323;
                  case 70:
                    int v103 = 1;
                    goto LABEL_323;
                  case 71:
                  case 72:
                    unint64_t v104 = (_anonymous_namespace_::AsmParser *)a1;
                    int v105 = 0;
                    goto LABEL_257;
                  case 73:
                    unint64_t v104 = (_anonymous_namespace_::AsmParser *)a1;
                    int v105 = 1;
LABEL_257:
                    goto LABEL_163;
                  case 74:
                    goto LABEL_163;
                  case 75:
                    goto LABEL_163;
                  case 76:
                    goto LABEL_163;
                  case 79:
                    goto LABEL_163;
                  case 80:
                    goto LABEL_163;
                  case 81:
                    goto LABEL_163;
                  case 101:
                  case 102:
                    goto LABEL_163;
                  case 103:
                    goto LABEL_163;
                  case 104:
                    goto LABEL_163;
                  case 105:
                    goto LABEL_163;
                  case 106:
                    *(void *)&long long v139 = "unsupported directive '.stabs'";
                    LOWORD(v142) = 259;
LABEL_269:
                    uint64_t v40 = llvm::MCAsmParser::TokError((uint64_t)a1, (llvm::Twine *)&v139, 0, 0);
                    goto LABEL_163;
                  case 107:
                    goto LABEL_163;
                  case 108:
                    goto LABEL_163;
                  case 109:
                    goto LABEL_163;
                  case 110:
                    goto LABEL_163;
                  case 111:
                    goto LABEL_163;
                  case 112:
                    goto LABEL_163;
                  case 113:
                    goto LABEL_163;
                  case 114:
                    uint64_t v112 = ((uint64_t (*)(void **))(*a1)[7])(a1);
                    (*(void (**)(uint64_t))(*(void *)v112 + 808))(v112);
                    goto LABEL_78;
                  case 115:
                    goto LABEL_163;
                  case 116:
                    uint64_t v113 = ((uint64_t (*)(void **))(*a1)[7])(a1);
                    (*(void (**)(uint64_t))(*(void *)v113 + 816))(v113);
                    goto LABEL_78;
                  case 117:
                    goto LABEL_163;
                  case 118:
                    goto LABEL_163;
                  case 119:
                    goto LABEL_163;
                  case 120:
                    goto LABEL_163;
                  case 121:
                    goto LABEL_163;
                  case 122:
                    goto LABEL_163;
                  case 123:
                    goto LABEL_163;
                  case 124:
                    goto LABEL_163;
                  case 125:
                    goto LABEL_163;
                  case 126:
                    goto LABEL_163;
                  case 127:
                    goto LABEL_163;
                  case 128:
                    goto LABEL_163;
                  case 129:
                    uint64_t v114 = (_anonymous_namespace_::AsmParser *)a1;
                    int v115 = 1;
                    goto LABEL_294;
                  case 130:
                    uint64_t v114 = (_anonymous_namespace_::AsmParser *)a1;
                    int v115 = 0;
LABEL_294:
                    goto LABEL_163;
                  case 131:
                    goto LABEL_163;
                  case 132:
                    goto LABEL_163;
                  case 133:
                    goto LABEL_163;
                  case 134:
                    goto LABEL_163;
                  case 135:
                    goto LABEL_163;
                  case 136:
                    goto LABEL_163;
                  case 137:
                    goto LABEL_163;
                  case 138:
                    goto LABEL_163;
                  case 139:
                    goto LABEL_163;
                  case 140:
                    goto LABEL_163;
                  case 142:
                  case 143:
                    goto LABEL_163;
                  case 144:
                  case 145:
                    goto LABEL_163;
                  case 146:
                    goto LABEL_163;
                  case 147:
                    goto LABEL_163;
                  case 148:
                  case 149:
                    goto LABEL_163;
                  case 150:
                    goto LABEL_163;
                  case 151:
                    unsigned int v116 = (_anonymous_namespace_::AsmParser *)a1;
                    char v117 = 1;
                    goto LABEL_310;
                  case 152:
                    unsigned int v116 = (_anonymous_namespace_::AsmParser *)a1;
                    char v117 = 0;
LABEL_310:
                    goto LABEL_163;
                  case 153:
                    uint64_t v118 = (uint64_t)a1;
                    uint64_t v119 = (uint64_t)v11;
                    char v120 = 0;
                    goto LABEL_313;
                  case 154:
                    uint64_t v118 = (uint64_t)a1;
                    uint64_t v119 = (uint64_t)v11;
                    char v120 = 1;
LABEL_313:
                    break;
                  case 155:
                    goto LABEL_163;
                  case 156:
                    goto LABEL_163;
                  case 157:
                    goto LABEL_163;
                  case 158:
                    goto LABEL_163;
                  case 159:
                    goto LABEL_163;
                  case 160:
                    goto LABEL_163;
                  case 161:
                    uint64_t v92 = (llvm::MCAsmParser *)a1;
                    unsigned int v93 = 3;
LABEL_321:
                    break;
                  case 163:
                    int v103 = 28;
LABEL_323:
                    LODWORD(v127[0]) = v103;
                    *(void *)&long long v139 = a1;
                    *((void *)&v139 + 1) = v127;
LABEL_324:
                    uint64_t v40 = llvm::MCAsmParser::parseMany((llvm::MCAsmParser *)a1, v94, (uint64_t)&v139, 1);
                    break;
                  case 164:
                    goto LABEL_163;
                  default:
                    size_t v29 = "unknown directive";
                    goto LABEL_68;
                }
              }
              goto LABEL_163;
            }
            goto LABEL_155;
          }
          if (*((unsigned char *)a1 + 797))
          {
            switch(*((void *)&v133 + 1))
            {
              case 4:
                if (*(_DWORD *)v133 == 1852143205 || *(_DWORD *)v133 == 1313166917) {
                  llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,int>(*(void *)(a2 + 88), 1, (uint64_t)v11, 4);
                }
                break;
              case 6:
                if (*(_DWORD *)v133 == 1835360095 && *(_WORD *)(v133 + 4) == 29801) {
                  goto LABEL_162;
                }
                if (*(_DWORD *)v133 == 1296392031 && *(_WORD *)(v133 + 4) == 21577) {
                  goto LABEL_162;
                }
                break;
              case 5:
                if ((*(_DWORD *)v133 != 1768777055 || *(unsigned char *)(v133 + 4) != 116)
                  && (*(_DWORD *)v133 != 1229800799 || *(unsigned char *)(v133 + 4) != 84))
                {
                  BOOL v58 = *(_DWORD *)v133 == 1734962273 && *(unsigned char *)(v133 + 4) == 110;
                  if (v58 || (*(_DWORD *)v133 == 1195985985 ? (BOOL v59 = *(unsigned char *)(v133 + 4) == 78) : (BOOL v59 = 0), v59))
                  {
                    goto LABEL_163;
                  }
                  break;
                }
LABEL_162:
                goto LABEL_163;
            }
          }
          if ((((uint64_t (*)(void **))(*a1)[33])(a1) & 1) == 0)
          {
            long long v121 = v135;
            uint64_t v122 = v136;
            unsigned int v74 = v138;
            unsigned int v124 = v138;
            if (v138 > 0x40) {
              operator new[]();
            }
            uint64_t v75 = v137;
            uint64_t v123 = v137;
            if (v74 >= 0x41 && v75) {
              MEMORY[0x263E50080](v75, 0x1000C8000313F17);
            }
            goto LABEL_164;
          }
          goto LABEL_155;
        }
        if (*((unsigned char *)a1 + 289))
        {
          uint64_t v14 = 0;
          *(void *)&long long v133 = "";
          uint64_t v15 = -1;
LABEL_26:
          *((void *)&v133 + 1) = v14;
          goto LABEL_27;
        }
      }
      ((void (*)(void **))(*a1)[23])(a1);
      size_t v29 = "unexpected token at start of statement";
LABEL_68:
      *(void *)&long long v139 = v29;
      LOWORD(v142) = 259;
      uint64_t v40 = llvm::MCAsmParser::Error((uint64_t)a1, (uint64_t)v11, (llvm::Twine *)&v139, 0, 0);
LABEL_163:
      uint64_t v8 = v40;
LABEL_164:
      if (v138 >= 0x41 && v137) {
        MEMORY[0x263E50080](v137, 0x1000C8000313F17);
      }
      return v8;
  }
}