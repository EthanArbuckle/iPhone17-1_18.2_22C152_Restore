uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::find(uint64_t a1, void *a2)
{
  uint64_t v4;

  v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v4))return v4; {
  else
  }
    return *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
}

void std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::push_back(void *a1, void *a2)
{
  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      uint64_t v24 = v6 >> 3;
      v25 = (char *)a1[3];
      v26 = (char *)*a1;
      uint64_t v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        uint64_t v30 = v27 >> 2;
        if (v25 == v26) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v30;
        }
        v81 = a1 + 3;
        *(void *)&long long v79 = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v31);
        *((void *)&v79 + 1) = v79 + 8 * v24;
        *(void *)&long long v80 = *((void *)&v79 + 1);
        *((void *)&v80 + 1) = v79 + 8 * v32;
        v78 = operator new(0x1000uLL);
        std::__split_buffer<llvm::orc::JITDylib::EmissionDepUnit **>::push_back(&v79, &v78);
        for (i = (void *)a1[2];
              i != (void *)a1[1];
              std::__split_buffer<llvm::orc::JITDylib::EmissionDepUnit **>::push_front((uint64_t)&v79, i))
        {
          --i;
        }
        v34 = (char *)*a1;
        long long v35 = v80;
        *(_OWORD *)a1 = v79;
        *((_OWORD *)a1 + 1) = v35;
        if (v34) {
          operator delete(v34);
        }
        goto LABEL_35;
      }
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v46 = 1;
          }
          else {
            unint64_t v46 = (v25 - v4) >> 2;
          }
          uint64_t v47 = 2 * v46;
          v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v46);
          v4 = &v48[(v47 + 6) & 0xFFFFFFFFFFFFFFF8];
          v50 = (uint64_t *)a1[1];
          v51 = v4;
          uint64_t v52 = a1[2] - (void)v50;
          if (v52)
          {
            v51 = &v4[v52 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v53 = 8 * (v52 >> 3);
            v54 = v4;
            do
            {
              uint64_t v55 = *v50++;
              *(void *)v54 = v55;
              v54 += 8;
              v53 -= 8;
            }
            while (v53);
          }
          v56 = (char *)*a1;
          *a1 = v48;
          a1[1] = v4;
          a1[2] = v51;
          a1[3] = &v48[8 * v49];
          if (v56)
          {
            operator delete(v56);
            v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        v57 = (char *)a1[1];
        v58 = (char *)a1[2];
        a1[1] = v57 - 8;
        uint64_t v59 = *((void *)v57 - 1);
        a1[1] = v57;
        if (v58 == (char *)a1[3])
        {
          uint64_t v60 = (uint64_t)&v57[-*a1];
          if ((unint64_t)v57 <= *a1)
          {
            if (v58 == (char *)*a1) {
              unint64_t v68 = 1;
            }
            else {
              unint64_t v68 = (uint64_t)&v58[-*a1] >> 2;
            }
            v69 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v68);
            v71 = &v69[8 * (v68 >> 2)];
            v72 = (uint64_t *)a1[1];
            v58 = v71;
            uint64_t v73 = a1[2] - (void)v72;
            if (v73)
            {
              v58 = &v71[v73 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v74 = 8 * (v73 >> 3);
              v75 = &v69[8 * (v68 >> 2)];
              do
              {
                uint64_t v76 = *v72++;
                *(void *)v75 = v76;
                v75 += 8;
                v74 -= 8;
              }
              while (v74);
            }
            v77 = (char *)*a1;
            *a1 = v69;
            a1[1] = v71;
            a1[2] = v58;
            a1[3] = &v69[8 * v70];
            if (v77)
            {
              operator delete(v77);
              v58 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v61 = v60 >> 3;
            BOOL v16 = v60 >> 3 < -1;
            uint64_t v62 = (v60 >> 3) + 2;
            if (v16) {
              uint64_t v63 = v62;
            }
            else {
              uint64_t v63 = v61 + 1;
            }
            uint64_t v64 = -(v63 >> 1);
            uint64_t v65 = v63 >> 1;
            v66 = &v57[-8 * v65];
            int64_t v67 = v58 - v57;
            if (v58 != v57)
            {
              memmove(&v57[-8 * v65], v57, v58 - v57);
              v57 = (char *)a1[1];
            }
            v58 = &v66[v67];
            a1[1] = &v57[8 * v64];
            a1[2] = &v66[v67];
          }
        }
        *(void *)v58 = v59;
      }
      else
      {
        *(void *)v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v4;
      v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v36 = 1;
          }
          else {
            unint64_t v36 = (uint64_t)&v5[-*a1] >> 2;
          }
          v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v36);
          v39 = &v37[8 * (v36 >> 2)];
          v40 = (uint64_t *)a1[1];
          v5 = v39;
          uint64_t v41 = a1[2] - (void)v40;
          if (v41)
          {
            v5 = &v39[v41 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v42 = 8 * (v41 >> 3);
            v43 = &v37[8 * (v36 >> 2)];
            do
            {
              uint64_t v44 = *v40++;
              *(void *)v43 = v44;
              v43 += 8;
              v42 -= 8;
            }
            while (v42);
          }
          v45 = (char *)*a1;
          *a1 = v37;
          a1[1] = v39;
          a1[2] = v5;
          a1[3] = &v37[8 * v38];
          if (v45)
          {
            operator delete(v45);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)v5 = v12;
    }
    a1[2] += 8;
LABEL_35:
    v4 = (char *)a1[1];
    uint64_t v8 = a1[5];
    unint64_t v10 = a1[4] + v8;
  }
  *(void *)(*(void *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::erase(uint64_t a1, uint64_t a2)
{
  v5 = 0;
  {
    v4 = v5;
    MEMORY[0x263E500A0](v5[1], 8);
    void *v4 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void llvm::orc::ExecutionSession::makeJDClosedError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v29[0] = 0;
  v29[1] = 0;
  int v30 = 0;
  if (*(_DWORD *)(a2 + 16))
  {
    uint64_t v5 = *(unsigned int *)(a2 + 24);
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      uint64_t v7 = *(uint64_t **)(a2 + 8);
      while ((*v7 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      uint64_t v7 = *(uint64_t **)(a2 + 8);
    }
    uint64_t v8 = *(void *)(a2 + 8) + 16 * v5;
    if (v7 != (uint64_t *)v8)
    {
      uint64_t v9 = *v7;
      do
      {
        uint64_t v31 = v9;
        if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 1uLL);
        }
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v29, &v31, (uint64_t)&v32);
        if ((unint64_t)(v31 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v31 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        do
        {
          v7 += 2;
          if (v7 == (uint64_t *)v8) {
            goto LABEL_17;
          }
          uint64_t v9 = *v7;
        }
        while ((*v7 | 8) == 0xFFFFFFFFFFFFFFF8);
      }
      while (v7 != (uint64_t *)v8);
    }
  }
LABEL_17:
  v27[0] = 0;
  v27[1] = 0;
  int v28 = 0;
  uint64_t v32 = a3;
  unint64_t v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(a2 + 32, &v32);
  v11 = (atomic_ullong **)llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin((uint64_t)(v10 + 1));
  uint64_t v13 = v10[1] + 8 * *((unsigned int *)v10 + 6);
  if ((atomic_ullong **)v13 != v11)
  {
    uint64_t v14 = v11;
    uint64_t v15 = v12;
    do
    {
      uint64_t v31 = a3;
      BOOL v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v27, &v31);
      uint64_t v17 = *v14;
      __p = v17;
      if ((unint64_t)v17 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add(v17 + 1, 1uLL);
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v16 + 1), &__p, (uint64_t)&v32);
      if ((char *)__p - 1 <= (char *)0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)__p + 1, 0xFFFFFFFFFFFFFFFFLL);
      }
      while (++v14 != v15)
      {
        if (((unint64_t)*v14 | 8) != 0xFFFFFFFFFFFFFFF8) {
          goto LABEL_27;
        }
      }
      uint64_t v14 = v15;
LABEL_27:
      ;
    }
    while (v14 != (atomic_ullong **)v13);
  }
  uint64_t v18 = *(void *)(*(void *)(*(void *)(a3 + 32) + 72) + 16);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a3 + 31) >= 0) {
    size_t v19 = *(unsigned __int8 *)(a3 + 31);
  }
  else {
    size_t v19 = *(void *)(a3 + 16);
  }
  p_p = &__p;
  std::string::basic_string[abi:nn180100]((uint64_t)&__p, v19 + 10);
  if (v26 < 0) {
    p_p = __p;
  }
  if (v19)
  {
    v23 = *(char **)(a3 + 8);
    int64_t v22 = (char *)(a3 + 8);
    v21 = v23;
    if (v22[23] >= 0) {
      uint64_t v24 = v22;
    }
    else {
      uint64_t v24 = v21;
    }
    memmove(p_p, v24, v19);
  }
  strcpy((char *)p_p + v19, " is closed");
  operator new();
}

uint64_t llvm::orc::ExecutionSession::IL_emit@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v254 = *MEMORY[0x263EF8340];
  char v4 = atomic_load((unint64_t *)(a1[1] + 8));
  if (v4) {
    operator new();
  }
  uint64_t v5 = *a1;
  if (*(_DWORD *)(*a1 + 40))
  {
    std::operator+<char>();
    uint64_t v6 = std::string::append((std::string *)v240, " is defunct");
    std::string::size_type v7 = v6->__r_.__value_.__r.__words[2];
    long long v249 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v250[0] = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    getErrorErrorCat();
    operator new();
  }
  uint64_t v8 = a2;
  long long v241 = 0u;
  memset(v240, 0, sizeof(v240));
  if (!*(_DWORD *)(a2 + 8)) {
    goto LABEL_193;
  }
  uint64_t v9 = *(unsigned int *)(a2 + 16);
  if (v9)
  {
    uint64_t v10 = 72 * v9;
    v11 = *(void **)a2;
    while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v11 += 9;
      v10 -= 72;
      if (!v10) {
        goto LABEL_193;
      }
    }
  }
  else
  {
    v11 = *(void **)a2;
  }
  uint64_t v12 = *(void *)a2 + 72 * v9;
  if (v11 == (void *)v12)
  {
LABEL_193:
    uint64_t v13 = 0;
LABEL_194:
    uint64_t v14 = v13;
    goto LABEL_195;
  }
LABEL_13:
  std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::push_back(v240, v11);
  while (1)
  {
    v11 += 9;
    if (v11 == (void *)v12) {
      break;
    }
    if ((*v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (v11 != (void *)v12) {
        goto LABEL_13;
      }
      break;
    }
  }
  uint64_t v14 = *(void ***)&v240[16];
  uint64_t v13 = *(void ***)&v240[8];
  if (*(void *)&v240[16] == *(void *)&v240[8]) {
    goto LABEL_194;
  }
  uint64_t v15 = (void *)(*(void *)&v240[8] + 8 * ((unint64_t)v241 >> 9));
  BOOL v16 = (uint64_t *)(*v15 + 8 * (v241 & 0x1FF));
  uint64_t v219 = *(void *)(*(void *)&v240[8] + (((*((void *)&v241 + 1) + (void)v241) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*((void *)&v241 + 1) + v241) & 0x1FF);
  if (v16 != (uint64_t *)v219)
  {
    v213 = a1 + 2;
    v207 = (uint64_t *)(v5 + 160);
    uint64_t v210 = v5;
    do
    {
      uint64_t v239 = 0;
      v220 = v16;
      uint64_t v239 = *v16;
      uint64_t v17 = v239;
      v222 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(v8, &v239)+ 1;
      v251 = (atomic_ullong *)v253;
      uint64_t v252 = 0x600000000;
      if (*(_DWORD *)(v17 + 40))
      {
        uint64_t v18 = *(unsigned int *)(v17 + 48);
        if (v18)
        {
          uint64_t v19 = 32 * v18;
          uint64_t v20 = *(void *)(v17 + 32);
          while ((*(void *)v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v20 += 32;
            v19 -= 32;
            if (!v19) {
              goto LABEL_133;
            }
          }
        }
        else
        {
          uint64_t v20 = *(void *)(v17 + 32);
        }
        uint64_t v21 = *(void *)(v17 + 32) + 32 * v18;
        if (v20 != v21)
        {
          uint64_t v22 = *(void *)v20;
          v216 = v15;
LABEL_29:
          if (*(_DWORD *)(v22 + 40)) {
            llvm::orc::ExecutionSession::makeJDClosedError((uint64_t)&v238, v239, v22);
          }
          uint64_t v236 = 0;
          memset(v237, 0, 12);
          *(void *)&long long v249 = v250;
          uint64_t v23 = v20 + 8;
          *((void *)&v249 + 1) = 0x600000000;
          uint64_t v24 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v20 + 8);
          uint64_t v224 = *(void *)(v20 + 8) + 8 * *(unsigned int *)(v20 + 24);
          if ((uint64_t *)v224 != v24)
          {
            char v26 = v24;
            uint64_t v27 = v25;
            uint64_t v209 = v21;
            while (1)
            {
              uint64_t v28 = v23;
              uint64_t v29 = *(void *)v20;
              uint64_t v30 = *v26;
              unint64_t v31 = *v26 - 1;
              if (v31 <= 0xFFFFFFFFFFFFFFDFLL) {
                atomic_fetch_add((atomic_ullong *volatile)(v30 + 8), 1uLL);
              }
              v248 = 0;
              if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(v29 + 112), *(_DWORD *)(v29 + 128), v30, &v248))uint64_t v32 = (void **)v248; {
              else
              }
                uint64_t v32 = (void **)(*(void *)(v29 + 112) + 24 * *(unsigned int *)(v29 + 128));
              if (v31 <= 0xFFFFFFFFFFFFFFDFLL) {
                atomic_fetch_add((atomic_ullong *volatile)(v30 + 8), 0xFFFFFFFFFFFFFFFFLL);
              }
              uint64_t v23 = v28;
              if (v32 == (void **)(*(void *)(*(void *)v20 + 112)
                                  + 24 * *(unsigned int *)(*(void *)v20 + 128))
                || ((_WORD)v32[2] & 0x100) != 0)
              {
                uint64_t v48 = *v26;
                uint64_t v247 = v48;
                if ((unint64_t)(v48 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                  atomic_fetch_add((atomic_ullong *volatile)(v48 + 8), 1uLL);
                }
                llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v236, &v247, (uint64_t)&v248);
                if ((unint64_t)(v247 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                  atomic_fetch_add((atomic_ullong *volatile)(v247 + 8), 0xFFFFFFFFFFFFFFFFLL);
                }
                goto LABEL_94;
              }
              if ((*((unsigned char *)v32 + 18) & 0x7C) == 0)
              {
                uint64_t v49 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct((uint64_t)(v222 + 5), (uint64_t *)v20);
                llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v248, (uint64_t)(v49 + 1), v26);
                goto LABEL_94;
              }
              uint64_t v33 = *v26;
              uint64_t v34 = DWORD2(v249);
              if (DWORD2(v249) >= (unint64_t)HIDWORD(v249))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v249, v250, DWORD2(v249) + 1, 8);
                uint64_t v34 = DWORD2(v249);
              }
              *(void *)(v249 + 8 * v34) = v33;
              ++DWORD2(v249);
              if ((*((unsigned char *)v32 + 18) & 0x7F) != 0x3F) {
                break;
              }
LABEL_94:
              while (++v26 != v27)
              {
                if ((*v26 | 8) != 0xFFFFFFFFFFFFFFF8) {
                  goto LABEL_98;
                }
              }
              char v26 = v27;
LABEL_98:
              if (v26 == (uint64_t *)v224)
              {
                if (LODWORD(v237[0]))
                {
                  uint64_t v61 = *(void *)v20;
                  uint64_t v233 = v236;
                  int v234 = v237[0];
                  uint64_t v62 = *(void *)((char *)v237 + 4);
                  uint64_t v236 = 0;
                  memset(v237, 0, 12);
                  uint64_t v235 = v62;
                  int v245 = 0;
                  v244[0] = 0;
                  v244[1] = 0;
                  if (*(_DWORD *)(v239 + 16))
                  {
                    uint64_t v63 = *(unsigned int *)(v239 + 24);
                    if (v63)
                    {
                      uint64_t v64 = 16 * v63;
                      uint64_t v65 = *(uint64_t **)(v239 + 8);
                      while ((*v65 | 8) == 0xFFFFFFFFFFFFFFF8)
                      {
                        v65 += 2;
                        v64 -= 16;
                        if (!v64) {
                          goto LABEL_124;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v65 = *(uint64_t **)(v239 + 8);
                    }
                    uint64_t v69 = *(void *)(v239 + 8) + 16 * v63;
                    if (v65 != (uint64_t *)v69)
                    {
                      uint64_t v70 = *v65;
                      do
                      {
                        uint64_t v247 = v70;
                        if ((unint64_t)(v70 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                          atomic_fetch_add((atomic_ullong *volatile)(v70 + 8), 1uLL);
                        }
                        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v244, &v247, (uint64_t)&v248);
                        if ((unint64_t)(v247 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                          atomic_fetch_add((atomic_ullong *volatile)(v247 + 8), 0xFFFFFFFFFFFFFFFFLL);
                        }
                        do
                        {
                          v65 += 2;
                          if (v65 == (uint64_t *)v69) {
                            goto LABEL_124;
                          }
                          uint64_t v70 = *v65;
                        }
                        while ((*v65 | 8) == 0xFFFFFFFFFFFFFFF8);
                      }
                      while (v65 != (uint64_t *)v69);
                    }
                  }
LABEL_124:
                  v242[0] = 0;
                  v242[1] = 0;
                  int v243 = 0;
                  v248 = (atomic_ullong *)v61;
                  v71 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v242, (uint64_t *)&v248);
                  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::operator=(v71 + 1, &v233);
                  uint64_t v72 = *(void *)(*(void *)(*(void *)(v61 + 32) + 72) + 16);
                  if (v72) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v72 + 8), 1uLL, memory_order_relaxed);
                  }
                  operator new();
                }
                uint64_t v8 = a2;
                uint64_t v15 = v216;
                uint64_t v21 = v209;
                goto LABEL_108;
              }
            }
            uint64_t v35 = *(void *)v20;
            uint64_t v36 = *v26;
            v248 = (atomic_ullong *)v36;
            if ((unint64_t)(v36 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add((atomic_ullong *volatile)(v36 + 8), 1uLL);
            }
            v37 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct((uint64_t *)(v35 + 160), &v248);
            uint64_t v38 = v37;
            if ((unint64_t)v248 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add(v248 + 1, 0xFFFFFFFFFFFFFFFFLL);
            }
            v248 = (atomic_ullong *)v37[1];
            v39 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(a2, (uint64_t *)&v248);
            if (!v39[1])
            {
              v40 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(a2, &v239);
              uint64_t v42 = v38[1];
              uint64_t v41 = v38[2];
              if (v41) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
              }
              v43 = (std::__shared_weak_count *)v39[2];
              v39[1] = v42;
              v39[2] = v41;
              if (v43)
              {
                std::__shared_weak_count::__release_shared[abi:nn180100](v43);
                uint64_t v42 = v39[1];
              }
              v222 = v40 + 1;
              if (!*(_DWORD *)(v42 + 40)) {
                goto LABEL_92;
              }
              uint64_t v44 = *(void *)(v42 + 32);
              uint64_t v45 = *(unsigned int *)(v42 + 48);
              if (v45)
              {
                uint64_t v46 = 32 * v45;
                uint64_t v47 = v44;
                uint64_t v23 = v28;
                while ((*(void *)v47 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v47 += 32;
                  v46 -= 32;
                  if (!v46) {
                    goto LABEL_90;
                  }
                }
              }
              else
              {
                uint64_t v47 = v44;
                uint64_t v23 = v28;
              }
              uint64_t v50 = v44 + 32 * v45;
              if (v47 == v50)
              {
LABEL_90:
                uint64_t v5 = v210;
              }
              else
              {
                uint64_t v208 = (uint64_t)(v39 + 6);
                uint64_t v51 = *(void *)v47;
                while (1)
                {
                  if (v51 == v210)
                  {
                    uint64_t v53 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v47 + 8);
                    if ((uint64_t *)(*(void *)(v47 + 8) + 8 * *(unsigned int *)(v47 + 24)) != v53)
                    {
                      uint64_t v55 = v53;
                      v56 = v54;
                      uint64_t v57 = *(void *)(v47 + 8) + 8 * *(unsigned int *)(v47 + 24);
                      do
                      {
                        uint64_t v58 = *v55;
                        uint64_t v247 = v58;
                        if ((unint64_t)(v58 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                          atomic_fetch_add((atomic_ullong *volatile)(v58 + 8), 1uLL);
                        }
                        v248 = 0;
                        char v59 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v213, &v247, &v248);
                        if ((unint64_t)(v247 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                          atomic_fetch_add((atomic_ullong *volatile)(v247 + 8), 0xFFFFFFFFFFFFFFFFLL);
                        }
                        if ((v59 & 1) == 0)
                        {
                          uint64_t v60 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(v208, (uint64_t *)v47);
                          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v248, (uint64_t)(v60 + 1), v55);
                        }
                        while (++v55 != v56)
                        {
                          if ((*v55 | 8) != 0xFFFFFFFFFFFFFFF8) {
                            goto LABEL_83;
                          }
                        }
                        uint64_t v55 = v56;
LABEL_83:
                        ;
                      }
                      while (v55 != (uint64_t *)v57);
                    }
                  }
                  else
                  {
                    uint64_t v52 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(v208, (uint64_t *)v47);
                    if ((void *)v47 != v52) {
                      llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::copyFrom((uint64_t)(v52 + 1), v47 + 8);
                    }
                  }
                  v47 += 32;
                  if (v47 == v50) {
                    break;
                  }
                  uint64_t v23 = v28;
                  while (1)
                  {
                    uint64_t v51 = *(void *)v47;
                    if ((*(void *)v47 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                      break;
                    }
                    v47 += 32;
                    if (v47 == v50) {
                      goto LABEL_90;
                    }
                  }
                  if (v47 == v50) {
                    goto LABEL_90;
                  }
                }
                uint64_t v5 = v210;
LABEL_92:
                uint64_t v23 = v28;
              }
            }
            llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v248, (uint64_t)(v39 + 3), &v239);
            goto LABEL_94;
          }
          uint64_t v8 = a2;
          uint64_t v15 = v216;
LABEL_108:
          if (DWORD2(v249))
          {
            v66 = (uint64_t *)v249;
            uint64_t v67 = 8 * DWORD2(v249);
            do
            {
              uint64_t v68 = *v66++;
              llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::erase(v23, v68);
              v67 -= 8;
            }
            while (v67);
          }
          if (!*(_DWORD *)(v20 + 16)) {
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v251, *(void *)v20);
          }
          if ((void *)v249 != v250) {
            free((void *)v249);
          }
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(&v236);
          while (1)
          {
            v20 += 32;
            if (v20 == v21) {
              break;
            }
            uint64_t v22 = *(void *)v20;
            if ((*(void *)v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              if (v20 != v21) {
                goto LABEL_29;
              }
              break;
            }
          }
        }
      }
LABEL_133:
      uint64_t v73 = v239;
      if (v252)
      {
        uint64_t v74 = v251;
        uint64_t v75 = 8 * v252;
        do
        {
          uint64_t v76 = *v74++;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::erase(v73 + 32, v76);
          v75 -= 8;
        }
        while (v75);
      }
      if (*(_DWORD *)(v73 + 16))
      {
        uint64_t v77 = *(void *)(v73 + 8);
        uint64_t v78 = *(unsigned int *)(v73 + 24);
        if (v78)
        {
          uint64_t v79 = 16 * v78;
          long long v80 = *(uint64_t **)(v73 + 8);
          while ((*v80 | 8) == 0xFFFFFFFFFFFFFFF8)
          {
            v80 += 2;
            v79 -= 16;
            if (!v79) {
              goto LABEL_187;
            }
          }
        }
        else
        {
          long long v80 = *(uint64_t **)(v73 + 8);
        }
        v81 = (uint64_t *)(v77 + 16 * v78);
        if (v80 != v81)
        {
          v82 = (atomic_ullong *)*v80;
LABEL_145:
          v248 = v82;
          if ((unint64_t)v82 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add(v82 + 1, 1uLL);
          }
          *(void *)&long long v249 = 0;
          int v83 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v207, &v248, &v249);
          uint64_t v84 = *(void *)(v5 + 160);
          unsigned int v85 = *(_DWORD *)(v5 + 176);
          if (v83) {
            v86 = (_DWORD *)v249;
          }
          else {
            v86 = (_DWORD *)(v84 + 72 * v85);
          }
          if ((unint64_t)v248 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
          {
            atomic_fetch_add(v248 + 1, 0xFFFFFFFFFFFFFFFFLL);
            uint64_t v84 = *(void *)(v5 + 160);
            unsigned int v85 = *(_DWORD *)(v5 + 176);
          }
          if (v86 != (_DWORD *)(v84 + 72 * v85) && v86[8])
          {
            v217 = v15;
            v225 = v86 + 6;
            v87 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v86 + 6));
            uint64_t v89 = *((void *)v86 + 3) + 8 * v86[10];
            if ((uint64_t *)v89 != v87)
            {
              v90 = v87;
              v91 = v88;
              do
              {
                uint64_t v92 = *v90;
                uint64_t v93 = *v80;
                uint64_t v94 = *v90 + 32;
                *(void *)&long long v249 = v5;
                uint64_t v95 = v5;
                v96 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(v94, (uint64_t *)&v249);
                llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::erase((uint64_t)(v96 + 1), v93);
                if (*((_DWORD *)v96 + 4))
                {
                  uint64_t v5 = v95;
                }
                else
                {
                  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::erase(v94, v95);
                  uint64_t v5 = v95;
                  if (!*(_DWORD *)(v92 + 40))
                  {
                    *(void *)&long long v249 = v92;
                    v97 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(a2, (uint64_t *)&v249);
                    if (!v97[1])
                    {
                      v98 = v97;
                      v99 = *(void **)(v92 + 8);
                      uint64_t v100 = *(unsigned int *)(v92 + 24);
                      v101 = &v99[2 * v100];
                      if (*(_DWORD *)(v92 + 16))
                      {
                        if (v100)
                        {
                          uint64_t v102 = 16 * v100;
                          while ((*v99 | 8) == 0xFFFFFFFFFFFFFFF8)
                          {
                            v99 += 2;
                            v102 -= 16;
                            if (!v102) {
                              goto LABEL_165;
                            }
                          }
                        }
                      }
                      else
                      {
LABEL_165:
                        v99 = v101;
                      }
                      uint64_t v103 = *(void *)v92;
                      v104 = (atomic_ullong *)*v99;
                      v248 = v104;
                      if ((unint64_t)v104 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
                        atomic_fetch_add(v104 + 1, 1uLL);
                      }
                      *(void *)&long long v249 = 0;
                      int v105 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(v103 + 160), &v248, &v249);
                      uint64_t v106 = v249;
                      if (!v105) {
                        uint64_t v106 = *(void *)(v103 + 160) + 72 * *(unsigned int *)(v103 + 176);
                      }
                      if ((unint64_t)v248 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
                        atomic_fetch_add(v248 + 1, 0xFFFFFFFFFFFFFFFFLL);
                      }
                      uint64_t v108 = *(void *)(v106 + 8);
                      uint64_t v107 = *(void *)(v106 + 16);
                      if (v107) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v107 + 8), 1uLL, memory_order_relaxed);
                      }
                      v109 = (std::__shared_weak_count *)v98[2];
                      v98[1] = v108;
                      v98[2] = v107;
                      if (v109) {
                        std::__shared_weak_count::__release_shared[abi:nn180100](v109);
                      }
                      v222 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(a2, &v239)+ 1;
                    }
                  }
                }
                llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v249, (uint64_t)(v222 + 2), v90);
                while (++v90 != v91)
                {
                  if ((*v90 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                    goto LABEL_182;
                  }
                }
                v90 = v91;
LABEL_182:
                ;
              }
              while (v90 != (uint64_t *)v89);
            }
            llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::clear(v225);
            uint64_t v8 = a2;
            uint64_t v15 = v217;
          }
          while (1)
          {
            v80 += 2;
            if (v80 == v81) {
              break;
            }
            v82 = (atomic_ullong *)*v80;
            if ((*v80 | 8) != 0xFFFFFFFFFFFFFFF8)
            {
              if (v80 != v81) {
                goto LABEL_145;
              }
              break;
            }
          }
        }
      }
LABEL_187:
      if (v251 != (atomic_ullong *)v253) {
        free(v251);
      }
      BOOL v16 = v220 + 1;
      if ((uint64_t *)((char *)v220 - *v15 + 8) == (uint64_t *)4096)
      {
        v110 = (uint64_t *)v15[1];
        ++v15;
        BOOL v16 = v110;
      }
    }
    while (v16 != (uint64_t *)v219);
    uint64_t v14 = *(void ***)&v240[16];
    uint64_t v13 = *(void ***)&v240[8];
  }
LABEL_195:
  *((void *)&v241 + 1) = 0;
  unint64_t v111 = (char *)v14 - (char *)v13;
  if (v111 >= 0x11)
  {
    do
    {
      operator delete(*v13);
      uint64_t v13 = (void **)(*(void *)&v240[8] + 8);
      *(void *)&v240[8] = v13;
      unint64_t v111 = *(void *)&v240[16] - (void)v13;
    }
    while (*(void *)&v240[16] - (void)v13 > 0x10uLL);
  }
  if (v111 >> 3 == 1)
  {
    uint64_t v112 = 256;
  }
  else
  {
    if (v111 >> 3 != 2) {
      goto LABEL_202;
    }
    uint64_t v112 = 512;
  }
  *(void *)&long long v241 = v112;
LABEL_202:
  if (*(_DWORD *)(v8 + 8))
  {
    uint64_t v113 = *(unsigned int *)(v8 + 16);
    if (v113)
    {
      uint64_t v114 = 72 * v113;
      uint64_t v115 = *(void *)v8;
      while ((*(void *)v115 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v115 += 72;
        v114 -= 72;
        if (!v114) {
          goto LABEL_207;
        }
      }
    }
    else
    {
      uint64_t v115 = *(void *)v8;
    }
    uint64_t v146 = *(void *)v8 + 72 * v113;
LABEL_263:
    if (v115 != v146)
    {
      if (*(_DWORD *)(v115 + 32))
      {
        uint64_t v147 = *(void *)v115;
        if (*(_DWORD *)(*(void *)v115 + 40))
        {
          if (v147 + 32 != v115 + 48 && *(_DWORD *)(v115 + 56) == 0) {
            llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::copyFrom(v115 + 48, v147 + 32);
          }
          std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::push_back(v240, (void *)v115);
        }
      }
      while (1)
      {
        v115 += 72;
        if (v115 == v146) {
          break;
        }
        if ((*(void *)v115 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_263;
        }
      }
    }
  }
LABEL_207:
  std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::deque((uint64_t)&v229, v240);
  for (uint64_t i = v232; v232; uint64_t i = v232)
  {
    v117 = (char *)(*(void **)((char *)v230 + ((v231 >> 6) & 0x3FFFFFFFFFFFFF8)))[v231 & 0x1FF];
    ++v231;
    uint64_t v232 = i - 1;
    if (v231 >= 0x400)
    {
      operator delete(*v230++);
      v231 -= 512;
    }
    v251 = (atomic_ullong *)v117;
    v118 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(v8, (uint64_t *)&v251);
    v119 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v118 + 3));
    uint64_t v121 = v118[3];
    v122 = (uint64_t *)(v121 + 8 * *((unsigned int *)v118 + 10));
    if (v122 != v119)
    {
      v123 = v119;
      v124 = v120;
      v214 = (uint64_t *)(v121 + 8 * *((unsigned int *)v118 + 10));
      v215 = v118;
      do
      {
        uint64_t v247 = 0;
        uint64_t v247 = *v123;
        v251 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)v8, *(_DWORD *)(v8 + 16), v247, &v251))v125 = (char *)v251; {
        else
        }
          v125 = (char *)(*(void *)v8 + 72 * *(unsigned int *)(v8 + 16));
        v126 = v125 + 8;
        v223 = v125;
        uint64_t v226 = *(void *)v8 + 72 * *(unsigned int *)(v8 + 16);
        if (v125 == (char *)v226) {
          v126 = 0;
        }
        v221 = v126;
        if (*((_DWORD *)v118 + 14))
        {
          uint64_t v127 = *((unsigned int *)v118 + 16);
          if (v127)
          {
            uint64_t v128 = 32 * v127;
            uint64_t v129 = v118[6];
            while ((*(void *)v129 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v129 += 32;
              v128 -= 32;
              if (!v128) {
                goto LABEL_249;
              }
            }
          }
          else
          {
            uint64_t v129 = v118[6];
          }
          uint64_t v130 = v118[6] + 32 * v127;
          if (v129 == v130) {
            goto LABEL_249;
          }
          uint64_t v218 = v130;
          do
          {
            v131 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(v247 + 32, (uint64_t *)v129);
            v132 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v129 + 8);
            uint64_t v134 = *(void *)(v129 + 8) + 8 * *(unsigned int *)(v129 + 24);
            if ((uint64_t *)v134 != v132)
            {
              v135 = v132;
              v136 = v133;
              v137 = 0;
              uint64_t v138 = (uint64_t)(v131 + 1);
              do
              {
                uint64_t v139 = *v135;
                uint64_t v246 = *v135;
                llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v251, v138, &v246);
                if (v253[0])
                {
                  v140 = (void **)v247;
                  uint64_t v141 = *(void *)v129;
                  *(void *)&long long v249 = v139;
                  if ((unint64_t)(v139 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                    atomic_fetch_add((atomic_ullong *volatile)(v139 + 8), 1uLL);
                  }
                  v142 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct((uint64_t *)(v141 + 160), &v249);
                  v248 = (atomic_ullong *)v140;
                  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v251, (uint64_t)(v142 + 3), (uint64_t *)&v248);
                  if ((unint64_t)(v249 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                    atomic_fetch_add((atomic_ullong *volatile)(v249 + 8), 0xFFFFFFFFFFFFFFFFLL);
                  }
                  if (v223 != (char *)v226)
                  {
                    if (!v137)
                    {
                      if (!*((_DWORD *)v221 + 12)) {
                        std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::push_back(&v229, &v247);
                      }
                      v137 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct((uint64_t)(v221 + 40), (uint64_t *)v129)+ 1;
                    }
                    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v251, (uint64_t)v137, &v246);
                  }
                }
                while (++v135 != v136)
                {
                  if ((*v135 | 8) != 0xFFFFFFFFFFFFFFF8) {
                    goto LABEL_243;
                  }
                }
                v135 = v136;
LABEL_243:
                ;
              }
              while (v135 != (uint64_t *)v134);
            }
            v129 += 32;
            v118 = v215;
            uint64_t v8 = a2;
            v122 = v214;
            if (v129 == v218) {
              break;
            }
            while ((*(void *)v129 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v129 += 32;
              if (v129 == v218) {
                goto LABEL_249;
              }
            }
          }
          while (v129 != v218);
        }
LABEL_249:
        while (++v123 != v124)
        {
          if ((*v123 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_253;
          }
        }
        v123 = v124;
LABEL_253:
        ;
      }
      while (v123 != v122);
    }
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::clear((uint64_t)(v118 + 6));
  }
  std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::~deque[abi:nn180100]((uint64_t)&v229);
  *((void *)&v249 + 1) = 0;
  v250[0] = 0;
  *(void *)&long long v249 = (char *)&v249 + 8;
  if (!*(_DWORD *)(v8 + 8)) {
    goto LABEL_390;
  }
  uint64_t v143 = *(unsigned int *)(v8 + 16);
  if (v143)
  {
    uint64_t v144 = 72 * v143;
    v145 = *(uint64_t **)v8;
    while ((*v145 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v145 += 9;
      v144 -= 72;
      if (!v144) {
        goto LABEL_390;
      }
    }
  }
  else
  {
    v145 = *(uint64_t **)v8;
  }
  uint64_t v149 = *(void *)v8 + 72 * v143;
  if (v145 == (uint64_t *)v149)
  {
LABEL_390:
    v202 = 0;
    uint64_t v204 = 0;
    v203 = (char *)&v249 + 8;
  }
  else
  {
    uint64_t v150 = *v145;
LABEL_279:
    int v151 = *(_DWORD *)(v150 + 40);
    uint64_t v153 = v145[1];
    v152 = (std::__shared_weak_count *)v145[2];
    v145[1] = 0;
    v145[2] = 0;
    int v154 = *(_DWORD *)(v153 + 16);
    uint64_t v155 = *(void *)v153;
    v156 = *(void **)(v153 + 8);
    uint64_t v157 = *(unsigned int *)(v153 + 24);
    v158 = &v156[2 * v157];
    if (v151)
    {
      if (v154)
      {
        if (v157)
        {
          uint64_t v159 = 16 * v157;
          while ((*v156 | 8) == 0xFFFFFFFFFFFFFFF8)
          {
            v156 += 2;
            v159 -= 16;
            if (!v159) {
              goto LABEL_325;
            }
          }
        }
        if (v156 != v158)
        {
          v161 = (atomic_ullong *)*v156;
          v227 = v152;
          do
          {
            v251 = v161;
            if ((unint64_t)v161 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add(v161 + 1, 1uLL);
            }
            v162 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::FindAndConstruct(v155 + 112, (uint64_t *)&v251);
            v163 = v162;
            if ((unint64_t)v251 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add(v251 + 1, 0xFFFFFFFFFFFFFFFFLL);
            }
            char v164 = *((unsigned char *)v162 + 18);
            if ((v164 & 0x7F) == 4) {
              break;
            }
            *((unsigned char *)v162 + 18) = v164 & 0x80 | 4;
            v251 = (atomic_ullong *)*v156;
            if ((unint64_t)v251 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add(v251 + 1, 1uLL);
            }
            v165 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct((uint64_t *)(v155 + 160), &v251);
            v166 = v165;
            if ((unint64_t)v251 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add(v251 + 1, 0xFFFFFFFFFFFFFFFFLL);
            }
            if (v227) {
              atomic_fetch_add_explicit(&v227->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v167 = (std::__shared_weak_count *)v165[2];
            v166[1] = v153;
            v166[2] = v227;
            if (v167) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v167);
            }
            llvm::orc::JITDylib::MaterializingInfo::takeQueriesMeeting((char **)&v251, (uint64_t)(v166 + 1), 4u);
            v168 = v251;
            v169 = (uint64_t *)v252;
            while (v168 != v169)
            {
              uint64_t v170 = *v168;
              v171 = (atomic_ullong *)*v156;
              v248 = v171;
              if ((unint64_t)v171 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
                atomic_fetch_add(v171 + 1, 1uLL);
              }
              llvm::orc::AsynchronousSymbolQuery::notifySymbolMetRequiredState(v170, &v248, v163[1], *((_WORD *)v163 + 8));
              if ((unint64_t)v248 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
                atomic_fetch_add(v248 + 1, 0xFFFFFFFFFFFFFFFFLL);
              }
              unint64_t v172 = *v168;
              if (!*(void *)(*v168 + 80))
              {
                std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::__emplace_unique_key_args<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> const&>((uint64_t *)&v249, v172, *v168, v168[1]);
                unint64_t v172 = *v168;
              }
              v173 = (atomic_ullong *)*v156;
              v248 = v173;
              if ((unint64_t)v173 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
                atomic_fetch_add(v173 + 1, 1uLL);
              }
              llvm::orc::AsynchronousSymbolQuery::removeQueryDependence(v172, v155, &v248);
              if ((unint64_t)v248 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
                atomic_fetch_add(v248 + 1, 0xFFFFFFFFFFFFFFFFLL);
              }
              v168 += 2;
            }
            v248 = (atomic_ullong *)&v251;
            std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v248);
            v156 += 2;
            v152 = v227;
            if (v156 == v158) {
              break;
            }
            while (1)
            {
              v161 = (atomic_ullong *)*v156;
              if ((*v156 | 8) != 0xFFFFFFFFFFFFFFF8) {
                break;
              }
              v156 += 2;
              if (v156 == v158) {
                goto LABEL_325;
              }
            }
          }
          while (v156 != v158);
        }
      }
LABEL_325:
      if (*(_DWORD *)(v153 + 40))
      {
        uint64_t v174 = *(unsigned int *)(v153 + 48);
        if (v174)
        {
          uint64_t v175 = 32 * v174;
          v176 = *(uint64_t **)(v153 + 32);
          while ((*v176 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v176 += 4;
            v175 -= 32;
            if (!v175) {
              goto LABEL_384;
            }
          }
        }
        else
        {
          v176 = *(uint64_t **)(v153 + 32);
        }
        uint64_t v177 = *(void *)(v153 + 32) + 32 * v174;
        while (v176 != (uint64_t *)v177)
        {
          v178 = v152;
          v179 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin((uint64_t)(v176 + 1));
          uint64_t v181 = v176[1] + 8 * *((unsigned int *)v176 + 6);
          if ((void *)v181 != v179)
          {
            v182 = v179;
            v183 = v180;
            do
            {
              uint64_t v184 = *v176;
              v185 = (atomic_ullong *)*v182;
              v248 = v185;
              if ((unint64_t)v185 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
                atomic_fetch_add(v185 + 1, 1uLL);
              }
              v186 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct((uint64_t *)(v184 + 160), &v248);
              uint64_t v247 = v153;
              llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v251, (uint64_t)(v186 + 3), &v247);
              if ((unint64_t)v248 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
                atomic_fetch_add(v248 + 1, 0xFFFFFFFFFFFFFFFFLL);
              }
              while (++v182 != v183)
              {
                if ((*v182 | 8) != 0xFFFFFFFFFFFFFFF8) {
                  goto LABEL_344;
                }
              }
              v182 = v183;
LABEL_344:
              ;
            }
            while (v182 != (void *)v181);
          }
          v176 += 4;
          v152 = v178;
          if (v176 == (uint64_t *)v177) {
            break;
          }
          while ((*v176 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v176 += 4;
            if (v176 == (uint64_t *)v177) {
              goto LABEL_384;
            }
          }
        }
      }
    }
    else if (v154)
    {
      if (v157)
      {
        uint64_t v160 = 16 * v157;
        while ((*v156 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v156 += 2;
          v160 -= 16;
          if (!v160) {
            goto LABEL_384;
          }
        }
      }
      if (v156 != v158)
      {
        v187 = (atomic_ullong *)*v156;
LABEL_351:
        v251 = v187;
        if ((unint64_t)v187 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add(v187 + 1, 1uLL);
        }
        v188 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::FindAndConstruct(v155 + 112, (uint64_t *)&v251);
        v189 = v188;
        if ((unint64_t)v251 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add(v251 + 1, 0xFFFFFFFFFFFFFFFFLL);
        }
        *((unsigned char *)v188 + 18) = *((unsigned char *)v188 + 18) & 0x80 | 0x3F;
        v190 = (atomic_ullong *)*v156;
        v248 = v190;
        if ((unint64_t)v190 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add(v190 + 1, 1uLL);
        }
        v251 = 0;
        int v191 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(v155 + 160), &v248, &v251);
        uint64_t v192 = *(void *)(v155 + 160);
        unsigned int v193 = *(_DWORD *)(v155 + 176);
        if (v191) {
          v194 = (char *)v251;
        }
        else {
          v194 = (char *)(v192 + 72 * v193);
        }
        if ((unint64_t)v248 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
        {
          atomic_fetch_add(v248 + 1, 0xFFFFFFFFFFFFFFFFLL);
          uint64_t v192 = *(void *)(v155 + 160);
          unsigned int v193 = *(_DWORD *)(v155 + 176);
        }
        if ((char *)(v192 + 72 * v193) != v194)
        {
          v228 = v152;
          llvm::orc::JITDylib::MaterializingInfo::takeQueriesMeeting((char **)&v251, (uint64_t)(v194 + 8), 0x3Fu);
          v196 = v251;
          v195 = (uint64_t *)v252;
          while (v196 != v195)
          {
            uint64_t v197 = *v196;
            v198 = (atomic_ullong *)*v156;
            v248 = v198;
            if ((unint64_t)v198 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add(v198 + 1, 1uLL);
            }
            llvm::orc::AsynchronousSymbolQuery::notifySymbolMetRequiredState(v197, &v248, v189[1], *((_WORD *)v189 + 8));
            if ((unint64_t)v248 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add(v248 + 1, 0xFFFFFFFFFFFFFFFFLL);
            }
            unint64_t v199 = *v196;
            if (!*(void *)(*v196 + 80))
            {
              std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::__emplace_unique_key_args<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> const&>((uint64_t *)&v249, v199, *v196, v196[1]);
              unint64_t v199 = *v196;
            }
            v200 = (atomic_ullong *)*v156;
            v248 = v200;
            if ((unint64_t)v200 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add(v200 + 1, 1uLL);
            }
            llvm::orc::AsynchronousSymbolQuery::removeQueryDependence(v199, v155, &v248);
            if ((unint64_t)v248 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add(v248 + 1, 0xFFFFFFFFFFFFFFFFLL);
            }
            v196 += 2;
          }
          v248 = (atomic_ullong *)&v251;
          std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v248);
          v251 = (atomic_ullong *)(v194 + 48);
          std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v251);
          MEMORY[0x263E500A0](*((void *)v194 + 3), 8);
          v201 = (std::__shared_weak_count *)*((void *)v194 + 2);
          if (v201) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v201);
          }
          v152 = v228;
          if ((unint64_t)(*(void *)v194 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(*(void *)v194 + 8), 0xFFFFFFFFFFFFFFFFLL);
          }
          *(void *)v194 = -16;
          *(int32x2_t *)(v155 + 168) = vadd_s32(*(int32x2_t *)(v155 + 168), (int32x2_t)0x1FFFFFFFFLL);
        }
        while (1)
        {
          v156 += 2;
          if (v156 == v158) {
            break;
          }
          v187 = (atomic_ullong *)*v156;
          if ((*v156 | 8) != 0xFFFFFFFFFFFFFFF8)
          {
            if (v156 != v158) {
              goto LABEL_351;
            }
            break;
          }
        }
      }
    }
LABEL_384:
    if (v152) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v152);
    }
    while (1)
    {
      v145 += 9;
      if (v145 == (uint64_t *)v149) {
        break;
      }
      uint64_t v150 = *v145;
      if ((*v145 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (v145 != (uint64_t *)v149) {
          goto LABEL_279;
        }
        break;
      }
    }
    v202 = (void *)*((void *)&v249 + 1);
    v203 = (char *)v249;
    uint64_t v204 = v250[0];
  }
  *(unsigned char *)(a3 + 24) &= ~1u;
  *(void *)a3 = v203;
  *(void *)(a3 + 8) = v202;
  uint64_t v205 = a3 + 8;
  *(void *)(a3 + 16) = v204;
  if (v204)
  {
    v202[2] = v205;
    *(void *)&long long v249 = (char *)&v249 + 8;
    *((void *)&v249 + 1) = 0;
    v250[0] = 0;
    v202 = 0;
  }
  else
  {
    *(void *)a3 = v205;
  }
  std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v249, v202);
  return std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::~deque[abi:nn180100]((uint64_t)v240);
}

uint64_t llvm::orc::ExecutionSession::OL_notifyEmitted@<X0>(std::recursive_mutex *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  llvm::orc::ExecutionSession::simplifyDepGroups((void *)a2, a3, a4, (uint64_t)v10);
  std::recursive_mutex::lock(a1);
  v11[0] = 0;
  v11[1] = 0;
  int v12 = 0;
  llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::copyFrom((unsigned int *)v11, (uint64_t)v10);
  llvm::orc::ExecutionSession::IL_emit((uint64_t *)a2, (uint64_t)v11, (uint64_t)&v13);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::destroyAll((unsigned int *)v11);
  MEMORY[0x263E500A0](v11[0], 8);
  std::recursive_mutex::unlock(a1);
  if (v14[16])
  {
    uint64_t v8 = v13;
    uint64_t v13 = 0;
  }
  else
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::clear((_DWORD *)(a2 + 16));
    if (v13 != v14) {
      llvm::orc::AsynchronousSymbolQuery::handleComplete();
    }
    uint64_t v8 = 0;
  }
  *a5 = v8;
  llvm::Expected<std::set<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>>::~Expected((uint64_t)&v13);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::destroyAll(v10);
  return MEMORY[0x263E500A0](*(void *)v10, 8);
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::clear(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if (v1)
      {
        uint64_t v2 = *(void *)result;
        uint64_t v3 = 16 * v1;
        do
        {
          if ((unint64_t)(*(void *)v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(*(void *)v2 + 8), 0xFFFFFFFFFFFFFFFFLL);
          }
          *(void *)uint64_t v2 = -8;
          v2 += 16;
          v3 -= 16;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
    else
    {
      return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::shrink_and_clear(result);
    }
  }
  return result;
}

uint64_t llvm::orc::ExecutionSession::OL_defineMaterializing@<X0>(uint64_t *a1@<X1>, int32x2_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  v13[0] = *a2;
  v13[1] = a2[1];
  *a2 = 0;
  a2[1] = 0;
  __int32 v14 = a2[2].i32[0];
  a2[2].i32[0] = 0;
  llvm::orc::JITDylib::defineMaterializing(v5, (uint64_t)a1, v13, (uint64_t)&v15);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)v13);
  if (v18)
  {
    uint64_t v8 = v15;
    uint64_t v15 = 0;
  }
  else
  {
    if (v16)
    {
      if (v17)
      {
        uint64_t v6 = 16 * v17;
        uint64_t v7 = v15;
        while ((*(void *)v7 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v7 += 16;
          v6 -= 16;
          if (!v6) {
            goto LABEL_17;
          }
        }
      }
      else
      {
        uint64_t v7 = v15;
      }
      uint64_t v9 = v15 + 16 * v17;
      if (v7 != v9)
      {
        uint64_t v10 = (uint64_t)(a1 + 2);
LABEL_12:
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::try_emplace<llvm::JITSymbolFlags const&>(v10, (uint64_t *)v7, (_WORD *)(v7 + 8), (uint64_t)v12);
        while (1)
        {
          v7 += 16;
          if (v7 == v9) {
            break;
          }
          if ((*(void *)v7 | 8) != 0xFFFFFFFFFFFFFFF8)
          {
            uint64_t v8 = 0;
            if (v7 != v9) {
              goto LABEL_12;
            }
            goto LABEL_18;
          }
        }
      }
    }
LABEL_17:
    uint64_t v8 = 0;
  }
LABEL_18:
  *a3 = v8;
  return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>>::~Expected((uint64_t)&v15);
}

void llvm::orc::ExecutionSession::IL_failSymbols(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v117 = 0;
  uint64_t v118 = 0;
  v116 = &v117;
  uint64_t v8 = operator new(0x30uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_270DBDCC0;
  v8[3] = 0;
  uint64_t v9 = v8 + 3;
  v8[4] = 0;
  *((_DWORD *)v8 + 10) = 0;
  if (a3 == a4)
  {
    v104 = 0;
    a1[1] = 0;
    a1[2] = 0;
    uint64_t v106 = a1 + 1;
LABEL_159:
    *a1 = v106;
    goto LABEL_160;
  }
  uint64_t v107 = v8;
  uint64_t v108 = a1;
  uint64_t v112 = (uint64_t *)(a2 + 160);
  unint64_t v111 = v8 + 3;
  v109 = a4;
  do
  {
    v119.i64[0] = a2;
    uint64_t v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v9, v119.i64);
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v10 + 1), a3, (uint64_t)&v121);
    uint64_t v121 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(a2 + 112), *(_DWORD *)(a2 + 128), *a3, &v121))BOOL v11 = v121 == (void **)(*(void *)(a2 + 112) + 24 * *(unsigned int *)(a2 + 128)); {
    else
    }
      BOOL v11 = 1;
    if (!v11 && ((unsigned __int16)v121[2] & 0x100) == 0)
    {
      *((_WORD *)v121 + 8) = *((_WORD *)v121 + 8) | (HIBYTE(*((_WORD *)v121 + 8)) << 8) | 0x100;
      uint64_t v121 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v112, a3, &v121))
      {
        int v12 = v121;
        if (v121 != (void **)(*(void *)(a2 + 160) + 72 * *(unsigned int *)(a2 + 176)))
        {
          int64x2_t v119 = 0uLL;
          v120[0] = 0;
          uint64_t v13 = (char *)v121[6];
          __int32 v14 = (char *)v121[7];
          if (v13 != v14)
          {
            do
            {
              std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::__emplace_unique_key_args<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> const&>((uint64_t *)&v116, *(void *)v13, *(void *)v13, *((void *)v13 + 1));
              uint64_t v15 = v119.i64[1];
              if (v119.i64[1] >= v120[0])
              {
                uint64_t v18 = (v119.i64[1] - v119.i64[0]) >> 4;
                unint64_t v19 = v18 + 1;
                if ((unint64_t)(v18 + 1) >> 60) {
LABEL_161:
                }
                  abort();
                uint64_t v20 = v120[0] - v119.i64[0];
                if ((v120[0] - v119.i64[0]) >> 3 > v19) {
                  unint64_t v19 = v20 >> 3;
                }
                if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v21 = v19;
                }
                v124 = v120;
                uint64_t v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v21);
                uint64_t v24 = &v22[16 * v18];
                long long v25 = *(_OWORD *)v13;
                *(_OWORD *)uint64_t v24 = *(_OWORD *)v13;
                if (*((void *)&v25 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                char v26 = (void *)v119.i64[1];
                uint64_t v27 = (void *)v119.i64[0];
                if (v119.i64[1] == v119.i64[0])
                {
                  int64x2_t v30 = vdupq_n_s64(v119.u64[1]);
                  uint64_t v28 = &v22[16 * v18];
                }
                else
                {
                  uint64_t v28 = &v22[16 * v18];
                  do
                  {
                    long long v29 = *((_OWORD *)v26 - 1);
                    v26 -= 2;
                    *((_OWORD *)v28 - 1) = v29;
                    v28 -= 16;
                    void *v26 = 0;
                    v26[1] = 0;
                  }
                  while (v26 != v27);
                  int64x2_t v30 = v119;
                }
                unsigned int v17 = (llvm::orc::AsynchronousSymbolQuery **)(v24 + 16);
                v119.i64[0] = (uint64_t)v28;
                v119.i64[1] = (uint64_t)(v24 + 16);
                int64x2_t v122 = v30;
                uint64_t v31 = v120[0];
                v120[0] = &v22[16 * v23];
                uint64_t v123 = v31;
                uint64_t v121 = (void **)v30.i64[0];
                std::__split_buffer<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::~__split_buffer((uint64_t)&v121);
              }
              else
              {
                *(void *)v119.i64[1] = *(void *)v13;
                uint64_t v16 = *((void *)v13 + 1);
                *(void *)(v15 + 8) = v16;
                if (v16) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
                }
                unsigned int v17 = (llvm::orc::AsynchronousSymbolQuery **)(v15 + 16);
              }
              v119.i64[1] = (uint64_t)v17;
              v13 += 16;
            }
            while (v13 != v14);
            for (uint64_t i = (llvm::orc::AsynchronousSymbolQuery **)v119.i64[0]; i != v17; i += 2)
            {
              uint64_t v33 = *i;
              llvm::orc::AsynchronousSymbolQuery::detach(v33);
            }
          }
          uint64_t v121 = (void **)&v119;
          std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v121);
          uint64_t v34 = (char *)v12[1];
          if (v34)
          {
            uint64_t v35 = *a3;
            uint64_t v121 = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*((void *)v34 + 1), *((_DWORD *)v34 + 6), v35, &v121))
            {
              *uint64_t v121 = (void *)-16;
              *((int32x2_t *)v34 + 2) = vadd_s32(*(int32x2_t *)(v34 + 16), (int32x2_t)0x1FFFFFFFFLL);
            }
            uint64_t v36 = v12[1];
            if (*((_DWORD *)v36 + 10))
            {
              v37 = (uint64_t *)v36[4];
              uint64_t v38 = *((unsigned int *)v36 + 12);
              if (v38)
              {
                uint64_t v39 = 32 * v38;
                v40 = v37;
                while ((*v40 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v40 += 4;
                  v39 -= 32;
                  if (!v39) {
                    goto LABEL_41;
                  }
                }
              }
              else
              {
                v40 = v37;
              }
              v96 = &v37[4 * v38];
LABEL_139:
              if (v40 != v96)
              {
                v97 = (void ***)llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin((uint64_t)(v40 + 1));
                uint64_t v99 = v40[1] + 8 * *((unsigned int *)v40 + 6);
                if ((void ***)v99 == v97) {
                  goto LABEL_152;
                }
                uint64_t v100 = v97;
                v101 = v98;
                do
                {
                  uint64_t v102 = *v40;
                  uint64_t v121 = *v100;
                  if ((unint64_t)v121 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
                    atomic_fetch_add((atomic_ullong *volatile)v121 + 1, 1uLL);
                  }
                  uint64_t v103 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct((uint64_t *)(v102 + 160), &v121);
                  if ((unint64_t)v121 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
                    atomic_fetch_add((atomic_ullong *volatile)v121 + 1, 0xFFFFFFFFFFFFFFFFLL);
                  }
                  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::erase((uint64_t)(v103 + 3), (uint64_t)v12[1]);
                  while (++v100 != v101)
                  {
                    if (((unint64_t)*v100 | 8) != 0xFFFFFFFFFFFFFFF8) {
                      goto LABEL_151;
                    }
                  }
                  uint64_t v100 = v101;
LABEL_151:
                  ;
                }
                while (v100 != (void ***)v99);
LABEL_152:
                while (1)
                {
                  v40 += 4;
                  if (v40 == v96) {
                    break;
                  }
                  if ((*v40 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                    goto LABEL_139;
                  }
                }
              }
            }
LABEL_41:
            uint64_t v41 = (std::__shared_weak_count *)v12[2];
            v12[1] = 0;
            v12[2] = 0;
            if (v41) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v41);
            }
          }
          else
          {
            v110 = v12 + 3;
            uint64_t v42 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v12 + 3));
            uint64_t v114 = (uint64_t)v12[3] + 8 * *((unsigned int *)v12 + 10);
            if ((uint64_t *)v114 != v42)
            {
              uint64_t v44 = v42;
              uint64_t v45 = v43;
              do
              {
                uint64_t v46 = *v44;
                if (*(_DWORD *)(*v44 + 40))
                {
                  uint64_t v47 = *(unsigned int *)(v46 + 48);
                  if (v47)
                  {
                    uint64_t v48 = 32 * v47;
                    uint64_t v49 = *(uint64_t **)(v46 + 32);
                    while ((*v49 | 0x1000) == 0xFFFFFFFFFFFFF000)
                    {
                      v49 += 4;
                      v48 -= 32;
                      if (!v48) {
                        goto LABEL_71;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v49 = *(uint64_t **)(v46 + 32);
                  }
                  uint64_t v50 = *(void *)(v46 + 32) + 32 * v47;
                  if (v49 != (uint64_t *)v50)
                  {
LABEL_53:
                    uint64_t v51 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin((uint64_t)(v49 + 1));
                    uint64_t v53 = v49[1] + 8 * *((unsigned int *)v49 + 6);
                    if ((void *)v53 == v51) {
                      goto LABEL_67;
                    }
                    v54 = v51;
                    uint64_t v55 = v52;
                    do
                    {
                      v56 = (void **)*v54;
                      uint64_t v57 = *v49;
                      if (*v49 != a2 || v56 != (void **)*a3)
                      {
                        uint64_t v121 = (void **)*v54;
                        if ((unint64_t)v56 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
                          atomic_fetch_add((atomic_ullong *volatile)v56 + 1, 1uLL);
                        }
                        uint64_t v58 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct((uint64_t *)(v57 + 160), &v121);
                        if ((unint64_t)v121 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
                          atomic_fetch_add((atomic_ullong *volatile)v121 + 1, 0xFFFFFFFFFFFFFFFFLL);
                        }
                        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::erase((uint64_t)(v58 + 3), *v44);
                      }
                      while (++v54 != v55)
                      {
                        if ((*v54 | 8) != 0xFFFFFFFFFFFFFFF8) {
                          goto LABEL_66;
                        }
                      }
                      v54 = v55;
LABEL_66:
                      ;
                    }
                    while (v54 != (void *)v53);
LABEL_67:
                    while (1)
                    {
                      v49 += 4;
                      if (v49 == (uint64_t *)v50) {
                        break;
                      }
                      if ((*v49 | 0x1000) != 0xFFFFFFFFFFFFF000)
                      {
                        if (v49 != (uint64_t *)v50) {
                          goto LABEL_53;
                        }
                        break;
                      }
                    }
                    uint64_t v46 = *v44;
                  }
                }
LABEL_71:
                uint64_t v60 = *(void *)v46;
                char v59 = *(uint64_t **)(v46 + 8);
                int v61 = *(_DWORD *)(v46 + 16);
                *(void *)(v46 + 8) = 0;
                *(void *)(v46 + 16) = 0;
                uint64_t v62 = *(unsigned int *)(v46 + 24);
                *(_DWORD *)(v46 + 24) = 0;
                if (v61)
                {
                  uint64_t v63 = v59;
                  if (v62)
                  {
                    uint64_t v64 = 16 * v62;
                    uint64_t v63 = v59;
                    while ((*v63 | 8) == 0xFFFFFFFFFFFFFFF8)
                    {
                      v63 += 2;
                      v64 -= 16;
                      if (!v64) {
                        goto LABEL_127;
                      }
                    }
                  }
                  uint64_t v65 = &v59[2 * v62];
                  if (v63 != v65)
                  {
                    v66 = (uint64_t *)(v60 + 160);
                    uint64_t v67 = *v63;
                    uint64_t v113 = v59;
                    do
                    {
                      if ((unint64_t)(v67 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                        atomic_fetch_add((atomic_ullong *volatile)(v67 + 8), 1uLL);
                      }
                      uint64_t v121 = 0;
                      int v68 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(v60 + 112), *(_DWORD *)(v60 + 128), v67, &v121);
                      uint64_t v69 = v121;
                      if (!v68) {
                        uint64_t v69 = (void **)(*(void *)(v60 + 112) + 24 * *(unsigned int *)(v60 + 128));
                      }
                      if ((unint64_t)(v67 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                        atomic_fetch_add((atomic_ullong *volatile)(v67 + 8), 0xFFFFFFFFFFFFFFFFLL);
                      }
                      *((unsigned char *)v69 + 17) |= 1u;
                      v119.i64[0] = v60;
                      uint64_t v70 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v111, v119.i64);
                      uint64_t v71 = *v63;
                      uint64_t v115 = v71;
                      if ((unint64_t)(v71 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                        atomic_fetch_add((atomic_ullong *volatile)(v71 + 8), 1uLL);
                      }
                      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v70 + 1), &v115, (uint64_t)&v121);
                      if ((unint64_t)(v115 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                        atomic_fetch_add((atomic_ullong *volatile)(v115 + 8), 0xFFFFFFFFFFFFFFFFLL);
                      }
                      uint64_t v72 = *v63;
                      v119.i64[0] = v72;
                      if ((unint64_t)(v72 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                        atomic_fetch_add((atomic_ullong *volatile)(v72 + 8), 1uLL);
                      }
                      uint64_t v121 = 0;
                      int v73 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v66, &v119, &v121);
                      uint64_t v74 = v121;
                      if (!v73) {
                        uint64_t v74 = (void **)(*(void *)(v60 + 160) + 72 * *(unsigned int *)(v60 + 176));
                      }
                      if ((unint64_t)(v119.i64[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                        atomic_fetch_add((atomic_ullong *volatile)(v119.i64[0] + 8), 0xFFFFFFFFFFFFFFFFLL);
                      }
                      int64x2_t v119 = 0uLL;
                      v120[0] = 0;
                      uint64_t v76 = (char *)v74[6];
                      uint64_t v75 = (char *)v74[7];
                      if (v76 != v75)
                      {
                        do
                        {
                          std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::__emplace_unique_key_args<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> const&>((uint64_t *)&v116, *(void *)v76, *(void *)v76, *((void *)v76 + 1));
                          uint64_t v77 = v119.i64[1];
                          if (v119.i64[1] >= v120[0])
                          {
                            uint64_t v80 = (v119.i64[1] - v119.i64[0]) >> 4;
                            unint64_t v81 = v80 + 1;
                            if ((unint64_t)(v80 + 1) >> 60) {
                              goto LABEL_161;
                            }
                            uint64_t v82 = v120[0] - v119.i64[0];
                            if ((v120[0] - v119.i64[0]) >> 3 > v81) {
                              unint64_t v81 = v82 >> 3;
                            }
                            if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0) {
                              unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v83 = v81;
                            }
                            v124 = v120;
                            uint64_t v84 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v83);
                            v86 = &v84[16 * v80];
                            long long v87 = *(_OWORD *)v76;
                            *(_OWORD *)v86 = *(_OWORD *)v76;
                            if (*((void *)&v87 + 1)) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v87 + 1) + 8), 1uLL, memory_order_relaxed);
                            }
                            v88 = (void *)v119.i64[1];
                            uint64_t v89 = (void *)v119.i64[0];
                            if (v119.i64[1] == v119.i64[0])
                            {
                              int64x2_t v92 = vdupq_n_s64(v119.u64[1]);
                              v90 = &v84[16 * v80];
                            }
                            else
                            {
                              v90 = &v84[16 * v80];
                              do
                              {
                                long long v91 = *((_OWORD *)v88 - 1);
                                v88 -= 2;
                                *((_OWORD *)v90 - 1) = v91;
                                v90 -= 16;
                                void *v88 = 0;
                                v88[1] = 0;
                              }
                              while (v88 != v89);
                              int64x2_t v92 = v119;
                            }
                            uint64_t v79 = (llvm::orc::AsynchronousSymbolQuery **)(v86 + 16);
                            v119.i64[0] = (uint64_t)v90;
                            v119.i64[1] = (uint64_t)(v86 + 16);
                            int64x2_t v122 = v92;
                            uint64_t v93 = v120[0];
                            v120[0] = &v84[16 * v85];
                            uint64_t v123 = v93;
                            uint64_t v121 = (void **)v92.i64[0];
                            std::__split_buffer<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::~__split_buffer((uint64_t)&v121);
                          }
                          else
                          {
                            *(void *)v119.i64[1] = *(void *)v76;
                            uint64_t v78 = *((void *)v76 + 1);
                            *(void *)(v77 + 8) = v78;
                            if (v78) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v78 + 8), 1uLL, memory_order_relaxed);
                            }
                            uint64_t v79 = (llvm::orc::AsynchronousSymbolQuery **)(v77 + 16);
                          }
                          v119.i64[1] = (uint64_t)v79;
                          v76 += 16;
                        }
                        while (v76 != v75);
                        for (j = (llvm::orc::AsynchronousSymbolQuery **)v119.i64[0]; j != v79; j += 2)
                        {
                          uint64_t v95 = *j;
                          llvm::orc::AsynchronousSymbolQuery::detach(v95);
                        }
                      }
                      uint64_t v121 = (void **)&v119;
                      std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v121);
                      uint64_t v121 = (void **)*v63;
                      if ((unint64_t)v121 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
                        atomic_fetch_add((atomic_ullong *volatile)v121 + 1, 1uLL);
                      }
                      v66 = (uint64_t *)(v60 + 160);
                      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::erase(v60 + 160, &v121);
                      if ((unint64_t)v121 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
                        atomic_fetch_add((atomic_ullong *volatile)v121 + 1, 0xFFFFFFFFFFFFFFFFLL);
                      }
                      v63 += 2;
                      char v59 = v113;
                      if (v63 == v65) {
                        break;
                      }
                      while (1)
                      {
                        uint64_t v67 = *v63;
                        if ((*v63 | 8) != 0xFFFFFFFFFFFFFFF8) {
                          break;
                        }
                        v63 += 2;
                        if (v63 == v65) {
                          goto LABEL_127;
                        }
                      }
                    }
                    while (v63 != v65);
                  }
                }
LABEL_127:
                MEMORY[0x263E500A0](v59, 8);
                while (++v44 != v45)
                {
                  if ((*v44 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                    goto LABEL_132;
                  }
                }
                uint64_t v44 = v45;
LABEL_132:
                ;
              }
              while (v44 != (uint64_t *)v114);
            }
            llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::clear(v110);
            uint64_t v9 = v111;
            a4 = v109;
          }
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::erase((uint64_t)v112, a3);
        }
      }
    }
    ++a3;
  }
  while (a3 != a4);
  v104 = v117;
  uint64_t v105 = v118;
  a1 = v108;
  *uint64_t v108 = v116;
  v108[1] = v104;
  uint64_t v106 = v108 + 1;
  v108[2] = v105;
  if (!v105)
  {
    uint64_t v8 = v107;
    goto LABEL_159;
  }
  v104[2] = v106;
  uint64_t v8 = v107;
  v116 = &v117;
  v117 = 0;
  uint64_t v118 = 0;
  v104 = 0;
LABEL_160:
  a1[3] = v9;
  a1[4] = v8;
  std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v116, v104);
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::erase(uint64_t a1, void *a2)
{
  uint64_t v6 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v6))
  {
    char v4 = v6;
    v6 += 6;
    std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v6);
    MEMORY[0x263E500A0](v4[3], 8);
    uint64_t v5 = (std::__shared_weak_count *)v4[2];
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v5);
    }
    if ((char *)*v4 - 1 <= (char *)0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)*v4 + 1, 0xFFFFFFFFFFFFFFFFLL);
    }
    void *v4 = (void *)-16;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void llvm::orc::ExecutionSession::OL_notifyFailed(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 24))
  {
    char v4 = (_DWORD *)(a2 + 16);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    uint64_t v5 = *(unsigned int *)(a2 + 32);
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      uint64_t v7 = *(uint64_t **)(a2 + 16);
      while ((*v7 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      uint64_t v7 = *(uint64_t **)(a2 + 16);
    }
    uint64_t v8 = *(void *)(a2 + 16) + 16 * v5;
    if (v7 != (uint64_t *)v8)
    {
      uint64_t v9 = 0;
LABEL_10:
      if ((unint64_t)v9 >= v25)
      {
        uint64_t v9 = (uint64_t *)std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>(&v23, v7);
      }
      else
      {
        uint64_t v10 = *v7;
        *uint64_t v9 = *v7;
        if ((unint64_t)(v10 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 1uLL);
        }
        ++v9;
      }
      uint64_t v24 = v9;
      while (1)
      {
        v7 += 2;
        if (v7 == (uint64_t *)v8) {
          break;
        }
        if ((*v7 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v7 != (uint64_t *)v8) {
            goto LABEL_10;
          }
          break;
        }
      }
    }
LABEL_19:
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::clear(v4);
    v22[0] = 0;
    v22[1] = 0;
    uint64_t v20 = 0;
    unint64_t v21 = v22;
    uint64_t v19 = 0;
    std::recursive_mutex::lock((std::recursive_mutex *)a1);
    char v11 = atomic_load((unint64_t *)(*(void *)(a2 + 8) + 8));
    if (v11)
    {
      uint64_t v16 = (char **)v17;
      memset(v17, 0, sizeof(v17));
      uint64_t v18 = 0;
    }
    else
    {
      llvm::orc::ExecutionSession::IL_failSymbols(&v16, *(void *)a2, (uint64_t *)v23, v24);
    }
    std::recursive_mutex::unlock((std::recursive_mutex *)a1);
    v15[0] = (uint64_t)&v21;
    v15[1] = (uint64_t)&v19;
    std::tuple<std::set<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>> &,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>> &>::operator=[abi:nn180100]<std::set<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>,0>(v15, (uint64_t)&v16);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v18);
    }
    std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v16, v17[0]);
    if (v21 != v22)
    {
      uint64_t v12 = *(void *)(a1 + 72);
      __int32 v14 = *(void ***)(v12 + 8);
      uint64_t v13 = *(void **)(v12 + 16);
      uint64_t v16 = (char **)v14;
      v17[0] = v13;
      if (v13) {
        atomic_fetch_add_explicit(v13 + 1, 1uLL, memory_order_relaxed);
      }
      llvm::make_error<llvm::orc::FailedToMaterialize,std::shared_ptr<llvm::orc::SymbolStringPool>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>> &>();
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v20);
    }
    std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v21, v22[0]);
    uint64_t v16 = &v23;
    std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)&v16);
  }
}

uint64_t *std::tuple<std::set<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>> &,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>> &>::operator=[abi:nn180100]<std::set<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>,0>(uint64_t *a1, uint64_t a2)
{
  char v4 = (void *)*a1;
  uint64_t v5 = (void **)(*a1 + 8);
  std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy(*a1, *v5);
  void *v4 = *(void *)a2;
  uint64_t v6 = (void *)(a2 + 8);
  uint64_t v7 = *(void **)(a2 + 8);
  std::__shared_weak_count *v5 = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  v4[2] = v8;
  if (v8)
  {
    v7[2] = v5;
    *(void *)a2 = v6;
    *uint64_t v6 = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    void *v4 = v5;
  }
  uint64_t v9 = a1[1];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  char v11 = *(std::__shared_weak_count **)(v9 + 8);
  *(_OWORD *)uint64_t v9 = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v11);
  }
  return a1;
}

std::__shared_weak_count_vtbl *llvm::orc::ExecutionSession::OL_replace@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = *a2;
  if (*(_DWORD *)(*a2 + 16))
  {
    uint64_t v7 = *(unsigned int *)(v6 + 24);
    if (v7)
    {
      uint64_t v8 = 16 * v7;
      uint64_t v9 = *(void **)(v6 + 8);
      while ((*v9 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v9 += 2;
        v8 -= 16;
        if (!v8) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      uint64_t v9 = *(void **)(v6 + 8);
    }
    uint64_t v10 = *(void *)(v6 + 8) + 16 * v7;
    if (v9 != (void *)v10)
    {
LABEL_9:
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::erase((uint64_t)(a1 + 2), v9);
      while (1)
      {
        v9 += 2;
        if (v9 == (void *)v10) {
          break;
        }
        if ((*v9 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v9 != (void *)v10) {
            goto LABEL_9;
          }
          break;
        }
      }
      uint64_t v6 = *a2;
    }
  }
LABEL_14:
  uint64_t v11 = *(void *)(v6 + 32);
  if (v11 == a1[5])
  {
    if ((unint64_t)(v11 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v11 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    a1[5] = 0;
    uint64_t v6 = *a2;
  }
  uint64_t v12 = *a1;
  *a2 = 0;
  uint64_t v15 = (std::__shared_weak_count_vtbl *)v6;
  llvm::orc::JITDylib::replace(v12, (uint64_t)a1, &v15, a3);
  int32x2_t result = v15;
  if (v15)
  {
    __int32 v14 = (uint64_t (*)(void))*((void *)v15->~__shared_weak_count + 1);
    return (std::__shared_weak_count_vtbl *)v14();
  }
  return result;
}

void llvm::orc::ExecutionSession::OL_delegate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v24 = 0;
  uint64_t v5 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(a3);
  uint64_t v7 = *(void *)a3 + 8 * *(unsigned int *)(a3 + 16);
  if ((uint64_t *)v7 == v5)
  {
    int v15 = 0;
    uint64_t v13 = 0;
    uint64_t v10 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v8 = v5;
    uint64_t v9 = v6;
    uint64_t v10 = 0;
    do
    {
      v26[0] = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a2 + 2, v8, v26))uint64_t v11 = (_WORD *)v26[0]; {
      else
      }
        uint64_t v11 = (_WORD *)(a2[2] + 16 * *((unsigned int *)a2 + 8));
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v22, v8)[4] = v11[4];
      uint64_t v12 = *v8;
      if (*v8 == a2[5])
      {
        a2[5] = v10;
        uint64_t v10 = v12;
      }
      if ((unint64_t)(*(void *)v11 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(*(void *)v11 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      *(void *)uint64_t v11 = -16;
      a2[3] = (uint64_t)vadd_s32((int32x2_t)a2[3], (int32x2_t)0x1FFFFFFFFLL);
      while (++v8 != v9)
      {
        if ((*v8 | 8) != 0xFFFFFFFFFFFFFFF8) {
          goto LABEL_15;
        }
      }
      uint64_t v8 = v9;
LABEL_15:
      ;
    }
    while (v8 != (uint64_t *)v7);
    uint64_t v13 = v22;
    uint64_t v14 = v23;
    int v15 = v24;
  }
  uint64_t v16 = *a2;
  uint64_t v19 = v13;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v20 = v14;
  int v21 = v15;
  int v24 = 0;
  std::recursive_mutex::lock(*(std::recursive_mutex **)(v16 + 32));
  char v17 = atomic_load((unint64_t *)(a2[1] + 8));
  if ((v17 & 1) == 0)
  {
    uint64_t v18 = a2[1];
    uint64_t v25 = v10;
    v26[0] = v19;
    v26[1] = v20;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v27 = v21;
    int v21 = 0;
    llvm::orc::ExecutionSession::createMaterializationResponsibility((uint64_t)&v28, v18);
  }
  operator new();
}

void llvm::orc::MissingSymbolDefinitions::~MissingSymbolDefinitions(void **this)
{
  *this = &unk_270DBDA50;
  uint64_t v3 = this + 6;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v3);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  void **v3;

  *this = &unk_270DBDA50;
  uint64_t v3 = this + 6;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v3);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  MEMORY[0x263E500B0](this, 0x10B3C40D2FB38E6);
}

void *llvm::ErrorInfo<llvm::orc::MissingSymbolDefinitions,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::orc::MissingSymbolDefinitions::ID;
}

BOOL llvm::ErrorInfo<llvm::orc::MissingSymbolDefinitions,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::MissingSymbolDefinitions::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::orc::UnexpectedSymbolDefinitions::~UnexpectedSymbolDefinitions(void **this)
{
  *this = &unk_270DBDAA0;
  uint64_t v3 = this + 6;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v3);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  void **v3;

  *this = &unk_270DBDAA0;
  uint64_t v3 = this + 6;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v3);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  MEMORY[0x263E500B0](this, 0x10B3C40D2FB38E6);
}

void *llvm::ErrorInfo<llvm::orc::UnexpectedSymbolDefinitions,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::orc::UnexpectedSymbolDefinitions::ID;
}

BOOL llvm::ErrorInfo<llvm::orc::UnexpectedSymbolDefinitions,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::UnexpectedSymbolDefinitions::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::orc::MaterializationTask::~MaterializationTask(llvm::orc::MaterializationTask *this)
{
  *(void *)this = &unk_270DBDB30;
  char v4 = (uint64_t *)*((void *)this + 2);
  uint64_t v2 = (void *)((char *)this + 16);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)v2, v3);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
}

{
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_270DBDB30;
  char v4 = (uint64_t *)*((void *)this + 2);
  uint64_t v2 = (void *)((char *)this + 16);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)v2, v3);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  JUMPOUT(0x263E500B0);
}

void *llvm::RTTIExtends<llvm::orc::MaterializationTask,llvm::orc::Task>::dynamicClassID()
{
  return &llvm::orc::MaterializationTask::ID;
}

uint64_t llvm::RTTIExtends<llvm::orc::MaterializationTask,llvm::orc::Task>::isA(uint64_t a1, void *a2)
{
  BOOL v3 = a2 == &llvm::orc::Task::ID || a2 == &llvm::RTTIRoot::ID;
  return a2 == &llvm::orc::MaterializationTask::ID || v3;
}

void llvm::orc::LookupTask::~LookupTask(llvm::orc::LookupTask *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270DBDB78;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270DBDB78;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x263E500B0);
}

void *llvm::RTTIExtends<llvm::orc::LookupTask,llvm::orc::Task>::dynamicClassID()
{
  return &llvm::orc::LookupTask::ID;
}

uint64_t llvm::RTTIExtends<llvm::orc::LookupTask,llvm::orc::Task>::isA(uint64_t a1, void *a2)
{
  BOOL v3 = a2 == &llvm::orc::Task::ID || a2 == &llvm::RTTIRoot::ID;
  return a2 == &llvm::orc::LookupTask::ID || v3;
}

void llvm::orc::ResourceTrackerDefunct::~ResourceTrackerDefunct(llvm::orc::ResourceTrackerDefunct *this)
{
  *(void *)this = &unk_270DBD868;
  uint64_t v1 = (atomic_uint *)*((void *)this + 1);
  if (v1) {
    llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v1);
  }
}

{
  atomic_uint *v1;
  uint64_t vars8;

  *(void *)this = &unk_270DBD868;
  uint64_t v1 = (atomic_uint *)*((void *)this + 1);
  if (v1) {
    llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v1);
  }
  JUMPOUT(0x263E500B0);
}

void *llvm::ErrorInfo<llvm::orc::ResourceTrackerDefunct,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::orc::ResourceTrackerDefunct::ID;
}

BOOL llvm::ErrorInfo<llvm::orc::ResourceTrackerDefunct,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::ResourceTrackerDefunct::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void *llvm::ErrorInfo<llvm::orc::FailedToMaterialize,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::orc::FailedToMaterialize::ID;
}

BOOL llvm::ErrorInfo<llvm::orc::FailedToMaterialize,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::FailedToMaterialize::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::orc::UnsatisfiedSymbolDependencies::~UnsatisfiedSymbolDependencies(llvm::orc::UnsatisfiedSymbolDependencies *this)
{
  *(void *)this = &unk_270DBD908;
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t *)this + 7);
  MEMORY[0x263E500A0](*((void *)this + 7), 8);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t *)this + 4);
  uint64_t v2 = (atomic_uint *)*((void *)this + 3);
  if (v2) {
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v2);
  }
  BOOL v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
}

{
  atomic_uint *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_270DBD908;
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t *)this + 7);
  MEMORY[0x263E500A0](*((void *)this + 7), 8);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t *)this + 4);
  uint64_t v2 = (atomic_uint *)*((void *)this + 3);
  if (v2) {
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v2);
  }
  BOOL v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  JUMPOUT(0x263E500B0);
}

void *llvm::ErrorInfo<llvm::orc::UnsatisfiedSymbolDependencies,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::orc::UnsatisfiedSymbolDependencies::ID;
}

BOOL llvm::ErrorInfo<llvm::orc::UnsatisfiedSymbolDependencies,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::UnsatisfiedSymbolDependencies::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::orc::SymbolsNotFound::~SymbolsNotFound(llvm::orc::SymbolsNotFound *this)
{
  *(void *)this = &unk_270DBD958;
  BOOL v3 = (void **)((char *)this + 24);
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  void **v3;

  *(void *)this = &unk_270DBD958;
  BOOL v3 = (void **)((char *)this + 24);
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  MEMORY[0x263E500B0](this, 0xA1C4084DA3AFDLL);
}

void *llvm::ErrorInfo<llvm::orc::SymbolsNotFound,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::orc::SymbolsNotFound::ID;
}

BOOL llvm::ErrorInfo<llvm::orc::SymbolsNotFound,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::SymbolsNotFound::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::orc::AbsoluteSymbolsMaterializationUnit::~AbsoluteSymbolsMaterializationUnit(llvm::orc::AbsoluteSymbolsMaterializationUnit *this)
{
  *(void *)this = &unk_270DBD9A8;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t *)this + 5);
  *(void *)this = &unk_270DBDAF0;
  uint64_t v2 = *((void *)this + 4);
  if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)this + 1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_270DBD9A8;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t *)this + 5);
  *(void *)this = &unk_270DBDAF0;
  uint64_t v2 = *((void *)this + 4);
  if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)this + 1);
  JUMPOUT(0x263E500B0);
}

void llvm::orc::ReExportsMaterializationUnit::~ReExportsMaterializationUnit(llvm::orc::ReExportsMaterializationUnit *this)
{
  *(void *)this = &unk_270DBD9E8;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll((uint64_t)this + 56);
  MEMORY[0x263E500A0](*((void *)this + 7), 8);
  *(void *)this = &unk_270DBDAF0;
  uint64_t v2 = *((void *)this + 4);
  if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)this + 1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_270DBD9E8;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll((uint64_t)this + 56);
  MEMORY[0x263E500A0](*((void *)this + 7), 8);
  *(void *)this = &unk_270DBDAF0;
  uint64_t v2 = *((void *)this + 4);
  if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)this + 1);
  JUMPOUT(0x263E500B0);
}

uint64_t std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(8 * a1);
}

uint64_t std::__split_buffer<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v5 = *(atomic_uint **)(v2 - 8);
    v2 -= 8;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v2;
    if (v5)
    {
      llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 24 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -8)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -16;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 24 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -8) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        *uint64_t result = -8;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if ((*(void *)v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          uint64_t v15 = v18;
          if ((unint64_t)(*(void *)v18 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(*(void *)v18 + 8), 0xFFFFFFFFFFFFFFFFLL);
          }
          *(void *)uint64_t v15 = 0;
          *(void *)uint64_t v15 = *(void *)v13;
          *(void *)uint64_t v13 = 0;
          *(_OWORD *)(v15 + 8) = *(_OWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
          uint64_t v14 = *(void *)v13;
        }
        if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 24 * v16;
    do
    {
      *uint64_t result = -8;
      result += 3;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

_DWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::init(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      do
      {
        *(void *)uint64_t result = -8;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void llvm::orc::ExecutionSession::createMaterializationResponsibility(uint64_t a1, uint64_t a2)
{
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseSetPair<llvm::orc::MaterializationResponsibility *>>,llvm::orc::MaterializationResponsibility *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseSetPair<llvm::orc::MaterializationResponsibility *>>::InsertIntoBucketImpl<llvm::orc::MaterializationResponsibility *>(uint64_t a1, void *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseSetPair<llvm::orc::MaterializationResponsibility *>>::grow(a1, v6);
  unsigned int v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseSetPair<llvm::orc::MaterializationResponsibility *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 8 * v3;
      uint64_t v13 = (void *)v4;
      do
      {
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v16 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, v13, &v16);
          *uint64_t v16 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v14 = *(unsigned int *)(a1 + 16);
  if (v14)
  {
    uint64_t v15 = 8 * v14;
    do
    {
      *result++ = -4096;
      v15 -= 8;
    }
    while (v15);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::find(uint64_t a1, void *a2)
{
  uint64_t v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v4))return v4; {
  else
  }
    return *(void *)a1 + 72 * *(unsigned int *)(a1 + 16);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    int v7 = (void *)(*a1 + 72 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -8)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -16;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        int v7 = (void *)(v4 + 72 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v7 = v10;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void llvm::make_error<llvm::orc::FailedToMaterialize,std::shared_ptr<llvm::orc::SymbolStringPool>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>>()
{
}

uint64_t std::__split_buffer<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    int v5 = *(atomic_uint **)(v2 - 8);
    v2 -= 8;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v2;
    if (v5)
    {
      llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
  }
  a1[1] = v2;
}

uint64_t llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void *)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)a1);
  }
  return a1;
}

uint64_t *llvm::orc::SymbolLookupSet::SymbolLookupSet(uint64_t *a1, uint64_t *a2, unint64_t a3, int a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::reserve(a1, a3);
  if (a3)
  {
    uint64_t v8 = 8 * a3;
    do
    {
      uint64_t v9 = *a2;
      uint64_t v11 = v9;
      if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 1uLL);
      }
      llvm::orc::SymbolLookupSet::add(a1, &v11, a4);
      if ((unint64_t)(v11 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v11 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      ++a2;
      v8 -= 8;
    }
    while (v8);
  }
  return a1;
}

uint64_t *std::__optional_destruct_base<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>,false>::~__optional_destruct_base[abi:nn180100](uint64_t *a1)
{
  if (*((unsigned char *)a1 + 16))
  {
    uint64_t v2 = (uint64_t)(a1 + 1);
    uint64_t v3 = (uint64_t *)a1[1];
    a1[1] = 0;
    if (v3) {
      std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100](v2, v3);
    }
    uint64_t v4 = *a1;
    *a1 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(16 * a1);
}

uint64_t std::__split_buffer<std::weak_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *llvm::orc::SymbolLookupSet::remove(void *this, uint64_t a2)
{
  uint64_t v2 = this[1];
  uint64_t v3 = *this + 16 * a2;
  uint64_t v4 = *(void *)v3;
  *(void *)uint64_t v3 = 0;
  *(void *)uint64_t v3 = *(void *)(v2 - 16);
  *(void *)(v2 - 16) = v4;
  LODWORD(v4) = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(v2 - 8);
  *(_DWORD *)(v2 - 8) = v4;
  uint64_t v5 = this[1];
  uint64_t v8 = *(void *)(v5 - 16);
  uint64_t v6 = v5 - 16;
  uint64_t v7 = v8;
  if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  this[1] = v6;
  return this;
}

uint64_t llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::DenseSetImpl(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (a3)
  {
    unint64_t v6 = (a3 - 1) | ((unint64_t)(a3 - 1) >> 1) | (((a3 - 1) | ((unint64_t)(a3 - 1) >> 1)) >> 2);
    unint64_t v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    LODWORD(v7) = ((v7 | (v7 >> 16)) >> 32) | v7 | (v7 >> 16);
    BOOL v8 = __CFADD__(v7, 1);
    int v9 = v7 + 1;
    if (v8)
    {
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
    else
    {
      unint64_t v10 = (4 * v9 / 3u + 1) | ((unint64_t)(4 * v9 / 3u + 1) >> 1);
      unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
      LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v11;
      BOOL v12 = operator new(8 * v11, (std::align_val_t)8uLL);
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = 0;
      uint64_t v13 = *(unsigned int *)(a1 + 16);
      if (v13)
      {
        uint64_t v14 = 8 * v13;
        do
        {
          *v12++ = -8;
          v14 -= 8;
        }
        while (v14);
      }
    }
    uint64_t v15 = 8 * a3;
    do
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1, a2++, (uint64_t)&v17);
      v15 -= 8;
    }
    while (v15);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  return a1;
}

void *llvm::DenseMap<llvm::orc::JITDylib *,std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 32 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void **)v13;
        if ((*(void *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v18 = 0;
          uint64_t v15 = v18;
          *uint64_t v18 = *(void **)v13;
          v15[1] = 0;
          uint64_t v15[2] = 0;
          v15[3] = 0;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          v15[3] = *(void **)(v13 + 24);
          *(void *)(v13 + 8) = 0;
          *(void *)(v13 + 16) = 0;
          *(void *)(v13 + 24) = 0;
          ++*(_DWORD *)(a1 + 8);
          uint64_t v18 = (void **)(v13 + 8);
          std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v18);
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 32 * v16;
    do
    {
      *uint64_t result = -4096;
      result += 4;
      v17 -= 32;
    }
    while (v17);
  }
  return result;
}

void std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>>::destroy[abi:nn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (uint64_t *)a2[1];
  *uint64_t v3 = 0;
  if (v4) {
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)v3, v4);
  }
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    unint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v6();
  }
  return result;
}

uint64_t *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *((unsigned int *)a1 + 4);
  uint64_t v5 = *a1;
  if (v4)
  {
    uint64_t v6 = 8 * v4;
    do
    {
      if ((unint64_t)(*(void *)v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(*(void *)v5 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
    uint64_t v5 = *a1;
  }
  MEMORY[0x263E500A0](v5, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *a2;
  *a2 = 0;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  int v7 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v7;
  int v8 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return a1;
}

void *llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::copyFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)MEMORY[0x263E500A0](*(void *)a1, 8);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if (v5)
  {
    uint64_t v6 = operator new(8 * v5, (std::align_val_t)8uLL);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    int v7 = *(const void **)a2;
    size_t v8 = 8 * *(unsigned int *)(a1 + 16);
    return memcpy(v6, v7, v8);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t *llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::copyFrom(unsigned int *a1, uint64_t a2)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::destroyAll(a1);
  uint64_t result = (uint64_t *)MEMORY[0x263E500A0](*(void *)a1, 8);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  a1[4] = v5;
  if (v5)
  {
    *(void *)a1 = operator new(72 * v5, (std::align_val_t)8uLL);
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::copyFrom<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>>((uint64_t *)a1, (uint64_t *)a2);
  }
  else
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::destroyAll(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 72 * v1;
    uint64_t v3 = (void *)(*(void *)a1 + 48);
    do
    {
      if ((*(v3 - 6) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::destroyAll((uint64_t)v3);
        MEMORY[0x263E500A0](*v3, 8);
        MEMORY[0x263E500A0](*(v3 - 3), 8);
        uint64_t v4 = (std::__shared_weak_count *)*(v3 - 4);
        if (v4) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v4);
        }
      }
      v3 += 9;
      v2 -= 72;
    }
    while (v2);
  }
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::copyFrom<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>>(uint64_t *result, uint64_t *a2)
{
  result[1] = a2[1];
  unint64_t v2 = *((unsigned int *)result + 4);
  if (v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    uint64_t v6 = 48;
    do
    {
      *(void *)(*v4 + v6 - 48) = *(void *)(*a2 + v6 - 48);
      uint64_t v7 = *v4;
      uint64_t v8 = *v4 + v6;
      if ((*(void *)(v8 - 48) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v9 = *a2;
        uint64_t v10 = *a2 + v6;
        uint64_t v11 = *(void *)(v10 - 32);
        *(void *)(v8 - 40) = *(void *)(v10 - 40);
        *(void *)(v8 - 32) = v11;
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = v7 + v6;
        *(void *)(v7 + v6 - 24) = 0;
        uint64_t v13 = (void *)(v7 + v6 - 24);
        *(void *)(v12 - 16) = 0;
        *(_DWORD *)(v12 - 8) = 0;
        MEMORY[0x263E500A0](0, 8);
        uint64_t v14 = *(unsigned int *)(v10 - 8);
        *(_DWORD *)(v12 - 8) = v14;
        if (v14)
        {
          uint64_t v15 = operator new(8 * v14, (std::align_val_t)8uLL);
          *uint64_t v13 = v15;
          *(void *)(v12 - 16) = *(void *)(v9 + v6 - 16);
          memcpy(v15, *(const void **)(v10 - 24), 8 * *(unsigned int *)(v12 - 8));
        }
        else
        {
          *uint64_t v13 = 0;
          *(void *)(v7 + v6 - 16) = 0;
        }
        uint64_t v16 = v7 + v6;
        *(void *)uint64_t v16 = 0;
        *(void *)(v16 + 8) = 0;
        *(_DWORD *)(v16 + 16) = 0;
        uint64_t result = (uint64_t *)llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::copyFrom(v7 + v6, v9 + v6);
        unint64_t v2 = *((unsigned int *)v4 + 4);
      }
      ++v5;
      v6 += 72;
    }
    while (v5 < v2);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::destroyAll(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 32 * v1;
    uint64_t v3 = (void *)(*(void *)result + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        uint64_t result = MEMORY[0x263E500A0](*v3, 8);
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

void *llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::copyFrom(uint64_t a1, uint64_t a2)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::destroyAll(a1);
  uint64_t result = (void *)MEMORY[0x263E500A0](*(void *)a1, 8);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if (v5)
  {
    uint64_t result = operator new(32 * v5, (std::align_val_t)8uLL);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    unint64_t v6 = *(unsigned int *)(a1 + 16);
    if (v6)
    {
      uint64_t v7 = 0;
      for (unint64_t i = 0; i < v6; ++i)
      {
        *(void *)(*(void *)a1 + v7) = *(void *)(*(void *)a2 + v7);
        uint64_t v9 = *(void *)a1;
        if ((*(void *)(*(void *)a1 + v7) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v10 = v9 + v7;
          uint64_t v11 = *(void *)a2 + v7;
          *(void *)(v10 + 8) = 0;
          *(void *)(v10 + 16) = 0;
          uint64_t v12 = v9 + v7 + 8;
          *(_DWORD *)(v12 + 16) = 0;
          uint64_t result = llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::copyFrom(v12, v11 + 8);
          unint64_t v6 = *(unsigned int *)(a1 + 16);
        }
        v7 += 32;
      }
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t std::__split_buffer<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>(char **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 3;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 61) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 2 > v4) {
    unint64_t v4 = v9 >> 2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v25 = v7;
  if (v10) {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = &v11[8 * v3];
  uint64_t v22 = v11;
  v23.i64[0] = (uint64_t)v12;
  v23.i64[1] = (uint64_t)v12;
  int v24 = &v11[8 * v10];
  uint64_t v13 = *a2;
  *(void *)uint64_t v12 = *a2;
  uint64_t v14 = v12;
  if ((unint64_t)(v13 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 1uLL);
    uint64_t v14 = (char *)v23.i64[1];
    uint64_t v12 = (char *)v23.i64[0];
  }
  uint64_t v15 = v14 + 8;
  v23.i64[1] = (uint64_t)(v14 + 8);
  uint64_t v17 = *a1;
  uint64_t v16 = a1[1];
  if (v16 == *a1)
  {
    int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
  }
  else
  {
    do
    {
      *((void *)v12 - 1) = 0;
      v12 -= 8;
      uint64_t v18 = *((void *)v16 - 1);
      v16 -= 8;
      *(void *)uint64_t v12 = v18;
      *(void *)uint64_t v16 = 0;
    }
    while (v16 != v17);
    int64x2_t v19 = *(int64x2_t *)a1;
    uint64_t v15 = (char *)v23.i64[1];
  }
  *a1 = v12;
  a1[1] = v15;
  int64x2_t v23 = v19;
  uint64_t v20 = a1[2];
  a1[2] = v24;
  int v24 = v20;
  uint64_t v22 = (char *)v19.i64[0];
  std::__split_buffer<llvm::orc::SymbolStringPtr>::~__split_buffer((uint64_t)&v22);
  return v15;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>,llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>::FindAndConstruct(uint64_t a1, void *a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>::grow(a1, v7);
    uint64_t v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t result = *a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *llvm::DenseMap<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 32 * v3;
      uint64_t v13 = v4;
      do
      {
        if ((*(void *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, (void *)v13, &v18);
          uint64_t v14 = v18;
          uint64_t v15 = *(void *)v13;
          *(_DWORD *)(v18 + 24) = 0;
          *(void *)(v14 + 8) = 0;
          *(void *)(v14 + 16) = 0;
          *(void *)uint64_t v14 = v15;
          *(void *)(v14 + 8) = *(void *)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          *(_DWORD *)(v14 + 16) = *(_DWORD *)(v13 + 16);
          *(_DWORD *)(v13 + 16) = 0;
          LODWORD(v15) = *(_DWORD *)(v14 + 20);
          *(_DWORD *)(v14 + 20) = *(_DWORD *)(v13 + 20);
          *(_DWORD *)(v13 + 20) = v15;
          LODWORD(v15) = *(_DWORD *)(v14 + 24);
          *(_DWORD *)(v14 + 24) = *(_DWORD *)(v13 + 24);
          *(_DWORD *)(v13 + 24) = v15;
          ++*(_DWORD *)(a1 + 8);
          MEMORY[0x263E500A0](0, 8);
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 32 * v16;
    do
    {
      *uint64_t result = -4096;
      result += 4;
      v17 -= 32;
    }
    while (v17);
  }
  return result;
}

uint64_t llvm::Expected<std::unique_ptr<llvm::orc::MaterializationResponsibility>>::~Expected(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (v3) {
      (*(void (**)(uint64_t *))(*v3 + 8))(v3);
    }
  }
  else if (v3)
  {
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100](a1, v3);
  }
  return a1;
}

_DWORD *llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::init(_DWORD *result, int a2)
{
  char v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(32 * v4, (std::align_val_t)8uLL);
    *(void *)char v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 32 * v5;
      do
      {
        *(void *)uint64_t result = -4096;
        result += 8;
        v6 -= 32;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll(uint64_t *result)
{
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = 32 * v1;
    uint64_t result = (uint64_t *)(*result + 8);
    do
    {
      if ((*(result - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        uint64_t result = llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(result);
      }
      result += 4;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

void *llvm::orc::AsynchronousSymbolQuery::handleComplete(llvm::orc::ExecutionSession &)::RunQueryCompleteTask::~RunQueryCompleteTask(void *a1)
{
  *a1 = &unk_270DBDBC0;
  uint64_t v2 = a1 + 1;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(a1 + 4);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap(v2);
  return a1;
}

void llvm::orc::AsynchronousSymbolQuery::handleComplete(llvm::orc::ExecutionSession &)::RunQueryCompleteTask::~RunQueryCompleteTask(void *a1)
{
  *a1 = &unk_270DBDBC0;
  uint64_t v1 = a1 + 1;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(a1 + 4);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap(v1);
  JUMPOUT(0x263E500B0);
}

void *llvm::RTTIExtends<llvm::orc::Task,llvm::RTTIRoot>::dynamicClassID()
{
  return &llvm::orc::Task::ID;
}

BOOL llvm::RTTIExtends<llvm::orc::Task,llvm::RTTIRoot>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::Task::ID || a2 == &llvm::RTTIRoot::ID;
}

llvm::raw_ostream *llvm::orc::AsynchronousSymbolQuery::handleComplete(llvm::orc::ExecutionSession &)::RunQueryCompleteTask::printDescription(uint64_t a1, llvm::raw_ostream *this)
{
  unint64_t v4 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v4 > 0x23uLL)
  {
    qmemcpy(v4, "Execute query complete callback for ", 36);
    *((void *)this + 4) += 36;
  }
  else
  {
    llvm::raw_ostream::write(this, "Execute query complete callback for ", 0x24uLL);
  }
  return llvm::orc::operator<<(this, a1 + 8);
}

uint64_t llvm::orc::AsynchronousSymbolQuery::handleComplete(llvm::orc::ExecutionSession &)::RunQueryCompleteTask::run(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)(a1 + 32);
  char v7 = 0;
  v5[0] = *(void *)(a1 + 8);
  v5[1] = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v6 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *(void *)(a1 + 56);
  if ((v3 & 2) == 0) {
    uint64_t v2 = (void *)*v2;
  }
  (*(void (**)(void *, void *))(v3 & 0xFFFFFFFFFFFFFFF8))(v2, v5);
  return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v5);
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(a1, a2, &v8);
  uint64_t v5 = v8;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>((uint64_t)a1, (uint64_t)a2, a2, v8);
    uint64_t v6 = *a2;
    void v5[2] = 0;
    v5[3] = 0;
    void *v5 = v6;
    v5[1] = 0;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::moveFromOldBuckets((uint64_t *)a1, v4, &v4[4 * v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::moveFromOldBuckets(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v5 = result;
  result[1] = 0;
  uint64_t v6 = *((unsigned int *)result + 4);
  if (v6)
  {
    int v7 = (void *)*result;
    uint64_t v8 = 32 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(v5, a2, &v11);
      uint64_t v9 = v11;
      uint64_t v10 = *a2;
      *(_DWORD *)(v11 + 24) = 0;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)uint64_t v9 = v10;
      *(void *)(v9 + 8) = a2[1];
      a2[1] = 0;
      *(_DWORD *)(v9 + 16) = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = 0;
      LODWORD(v10) = *(_DWORD *)(v9 + 20);
      *(_DWORD *)(v9 + 20) = *((_DWORD *)a2 + 5);
      *((_DWORD *)a2 + 5) = v10;
      LODWORD(v10) = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v9 + 24) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v10;
      ++*((_DWORD *)v5 + 2);
      uint64_t result = llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(a2 + 1);
    }
    a2 += 4;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    if ((unint64_t)(*(void *)result - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(*(void *)result + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    *(void *)uint64_t result = 0;
    *(void *)uint64_t result = *a2;
    *a2 = 0;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

void std::allocator_traits<std::allocator<std::pair<llvm::orc::SymbolLookupSet,std::shared_ptr<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo>>>>::destroy[abi:nn180100]<std::pair<llvm::orc::SymbolLookupSet,std::shared_ptr<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo>>,void>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  uint64_t v3 = (void **)a1;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v3);
}

void std::__shared_ptr_emplace<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDC08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDC08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

void std::__shared_ptr_emplace<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo>>::__on_zero_shared(uint64_t a1)
{
  unint64_t v5 = (void **)(a1 + 56);
  std::vector<llvm::orc::SymbolDependenceGroup>::__destroy_vector::operator()[abi:nn180100](&v5);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll(a1 + 32);
  MEMORY[0x263E500A0](*(void *)(a1 + 32), 8);
  char v4 = *(uint64_t **)(a1 + 24);
  uint64_t v3 = (void *)(a1 + 24);
  uint64_t v2 = v4;
  *uint64_t v3 = 0;
  if (v4) {
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)v3, v2);
  }
}

void std::vector<llvm::orc::SymbolDependenceGroup>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    char v4 = (uint64_t *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 6;
        std::allocator<llvm::orc::SymbolDependenceGroup>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::allocator<llvm::orc::SymbolDependenceGroup>::destroy[abi:nn180100](uint64_t a1, uint64_t *a2)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll(a2 + 3);
  MEMORY[0x263E500A0](a2[3], 8);
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallImpl<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_1>(uint64_t **a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  char v26 = *(unsigned char *)(a2 + 24) & 1;
  uint64_t v3 = *(void *)a2;
  if (v26)
  {
    *(void *)a2 = 0;
    v24[0] = v3;
    uint64_t v12 = *(void *)(*(void *)**a1 + 32);
    v24[0] = 0;
    uint64_t v18 = v3;
    llvm::orc::ExecutionSession::reportError(v12, &v18);
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    llvm::orc::ExecutionSession::OL_notifyFailed(*(void *)(*(void *)**a1 + 32), **a1);
  }
  else
  {
    v24[0] = *(void *)a2;
    v24[1] = *(void *)(a2 + 8);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    int v25 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    char v4 = *a1;
    uint64_t v5 = **a1;
    uint64_t v6 = *(void *)v5;
    uint64_t v7 = *(void *)(*(void *)v5 + 32);
    int v23 = 0;
    v22[0] = 0;
    v22[1] = 0;
    if (*((_DWORD *)v4 + 4))
    {
      uint64_t v8 = v4[1];
      uint64_t v9 = *((unsigned int *)v4 + 6);
      if (v9)
      {
        uint64_t v10 = 24 * v9;
        uint64_t v11 = v8;
        while ((*(void *)v11 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v11 += 24;
          v10 -= 24;
          if (!v10) {
            goto LABEL_19;
          }
        }
      }
      else
      {
        uint64_t v11 = v8;
      }
      uint64_t v13 = v8 + 24 * v9;
      if (v11 != v13)
      {
LABEL_13:
        if ((*(unsigned char *)(v11 + 17) & 0x40) == 0)
        {
          uint64_t v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct(v24, (uint64_t *)(v11 + 8))[1];
          __int16 v15 = *(_WORD *)(v11 + 16);
          uint64_t v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct(v22, (uint64_t *)v11);
          v16[1] = v14;
          *((_WORD *)v16 + 8) = v15;
        }
        while (1)
        {
          v11 += 24;
          if (v11 == v13) {
            break;
          }
          if ((*(void *)v11 | 8) != 0xFFFFFFFFFFFFFFF8)
          {
            if (v11 != v13) {
              goto LABEL_13;
            }
            break;
          }
        }
        uint64_t v5 = **a1;
        uint64_t v6 = *(void *)v5;
      }
    }
LABEL_19:
    llvm::orc::JITDylib::resolve(v6, v5, (uint64_t)v22, &v21);
    if (v21)
    {
      uint64_t v20 = v21;
      uint64_t v21 = 0;
      llvm::orc::ExecutionSession::reportError(v7, &v20);
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
      llvm::orc::ExecutionSession::OL_notifyFailed(*(void *)(*(void *)**a1 + 32), **a1);
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
    }
    else
    {
      llvm::orc::ExecutionSession::OL_notifyEmitted(*(std::recursive_mutex **)(*(void *)**a1 + 32), **a1, (*a1)[4], 0xAAAAAAAAAAAAAAABLL * (((*a1)[5] - (*a1)[4]) >> 4), &v21);
      if (v21)
      {
        uint64_t v19 = v21;
        llvm::orc::ExecutionSession::reportError(v7, &v19);
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
        llvm::orc::ExecutionSession::OL_notifyFailed(*(void *)(*(void *)**a1 + 32), **a1);
      }
    }
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap(v22);
  }
  return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v24);
}

__n128 llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::MoveImpl<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_1>(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::DestroyImpl<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_1>(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

void *std::__function::__func<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::~__func(void *a1)
{
  *a1 = &unk_270DBDC40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  return a1;
}

void std::__function::__func<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::~__func(void *a1)
{
  *a1 = &unk_270DBDC40;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
  JUMPOUT(0x263E500B0);
}

void *std::__function::__func<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__clone(void *a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *__n128 result = &unk_270DBDC40;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void *std::__function::__func<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_270DBDC40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

void std::__function::__func<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::operator()(uint64_t result, uint64_t a2)
{
  v28[1] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 24);
    v20[0] = 0;
    uint64_t v5 = v20[0];
    if (!result) {
      uint64_t v5 = *(void *)a2 + 32 * *(unsigned int *)(a2 + 16);
    }
    uint64_t v6 = *(void *)(v3 + 8);
    if (*(_DWORD *)(v6 + 16))
    {
      uint64_t v7 = *(uint64_t **)(v6 + 8);
      uint64_t v8 = *(unsigned int *)(v6 + 24);
      if (v8)
      {
        uint64_t v9 = 24 * v8;
        for (unint64_t i = v7; (*i | 8) == 0xFFFFFFFFFFFFFFF8; i += 3)
        {
          v9 -= 24;
          if (!v9) {
            return result;
          }
        }
      }
      else
      {
        unint64_t i = v7;
      }
      uint64_t v11 = &v7[3 * v8];
      if (i != v11)
      {
        uint64_t v12 = (uint64_t *)(v5 + 8);
LABEL_13:
        v20[0] = 0;
        __n128 result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v12, i + 1, v20);
        if (result)
        {
          uint64_t v13 = *(void *)(v3 + 8);
          v28[0] = *i;
          if ((unint64_t)(v28[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(v28[0] + 8), 1uLL);
          }
          llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::DenseSetImpl((uint64_t)v20, v28, 1);
          uint64_t v14 = *(void *)(v3 + 24);
          uint64_t v15 = i[1];
          uint64_t v24 = v15;
          if ((unint64_t)(v15 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 1uLL);
          }
          llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::DenseSetImpl((uint64_t)v19, &v24, 1);
          uint64_t v25 = v14;
          v26[0] = 0;
          v26[1] = 0;
          int v27 = 0;
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::copyFrom((uint64_t)v26, (uint64_t)v19);
          unsigned int v22 = 4;
          uint64_t v16 = operator new(0x80uLL, (std::align_val_t)8uLL);
          v21[0] = (uint64_t)v16;
          v21[1] = 0;
          if (v22)
          {
            uint64_t v17 = 32 * v22;
            do
            {
              *uint64_t v16 = -4096;
              v16 += 4;
              v17 -= 32;
            }
            while (v17);
          }
          int v23 = 0;
          if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(v21, &v25, &v23) & 1) == 0)
          {
            uint64_t v18 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>((uint64_t)v21, (uint64_t)&v25, &v25, v23);
            *uint64_t v18 = v25;
            v18[2] = 0;
            *((_DWORD *)v18 + 6) = 0;
            v18[1] = 0;
            llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::copyFrom((uint64_t)(v18 + 1), (uint64_t)v26);
          }
          std::vector<llvm::orc::SymbolDependenceGroup>::push_back[abi:nn180100]((uint64_t *)(v13 + 32), (uint64_t)v20);
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll(v21);
          MEMORY[0x263E500A0](v21[0], 8);
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(v20);
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(v26);
          __n128 result = (uint64_t)llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(v19);
          if ((unint64_t)(v24 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(v24 + 8), 0xFFFFFFFFFFFFFFFFLL);
          }
          if ((unint64_t)(v28[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(v28[0] + 8), 0xFFFFFFFFFFFFFFFFLL);
          }
        }
        while (1)
        {
          i += 3;
          if (i == v11) {
            break;
          }
          if ((*i | 8) != 0xFFFFFFFFFFFFFFF8)
          {
            if (i != v11) {
              goto LABEL_13;
            }
            return result;
          }
        }
      }
    }
  }
  return result;
}

void std::vector<llvm::orc::SymbolDependenceGroup>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 4);
    if (v8 + 1 > 0x555555555555555) {
      abort();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a1) >> 4);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v17 = a1 + 2;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::SymbolDependenceGroup>>((uint64_t)(a1 + 2), v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = v12;
    uint64_t v14 = &v12[48 * v8];
    uint64_t v16 = &v12[48 * v11];
    std::allocator<llvm::orc::SymbolDependenceGroup>::construct[abi:nn180100]<llvm::orc::SymbolDependenceGroup,llvm::orc::SymbolDependenceGroup>(v5, (uint64_t)v14, a2);
    uint64_t v15 = v14 + 48;
    std::vector<llvm::orc::SymbolDependenceGroup>::__swap_out_circular_buffer(a1, &v13);
    unint64_t v7 = a1[1];
    std::__split_buffer<llvm::orc::SymbolDependenceGroup>::~__split_buffer((uint64_t *)&v13);
  }
  else
  {
    std::allocator<llvm::orc::SymbolDependenceGroup>::construct[abi:nn180100]<llvm::orc::SymbolDependenceGroup,llvm::orc::SymbolDependenceGroup>((uint64_t)(a1 + 2), v6, a2);
    unint64_t v7 = v6 + 48;
  }
  a1[1] = v7;
}

void std::allocator<llvm::orc::SymbolDependenceGroup>::construct[abi:nn180100]<llvm::orc::SymbolDependenceGroup,llvm::orc::SymbolDependenceGroup>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)a2 = *(void *)a3;
  *(void *)a3 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = v3;
  int v4 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = v4;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 32) = 0;
  int v5 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a3 + 36);
  *(_DWORD *)(a3 + 36) = v5;
  int v6 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a3 + 40) = v6;
}

void std::vector<llvm::orc::SymbolDependenceGroup>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 48;
      v4 -= 48;
      std::allocator<llvm::orc::SymbolDependenceGroup>::construct[abi:nn180100]<llvm::orc::SymbolDependenceGroup,llvm::orc::SymbolDependenceGroup>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::SymbolDependenceGroup>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(48 * a2);
}

uint64_t *std::__split_buffer<llvm::orc::SymbolDependenceGroup>::~__split_buffer(uint64_t *a1)
{
  if (*a1) {
    operator delete((void *)*a1);
  }
  return a1;
}

uint64_t *std::__split_buffer<llvm::orc::SymbolDependenceGroup>::clear[abi:nn180100](uint64_t *result)
{
  uint64_t v2 = result[1];
  uint64_t v1 = result[2];
  if (v1 != v2)
  {
    int v3 = result;
    do
    {
      uint64_t v4 = v3[4];
      v3[2] = v1 - 48;
      __n128 result = std::allocator<llvm::orc::SymbolDependenceGroup>::destroy[abi:nn180100](v4, (uint64_t *)(v1 - 48));
      uint64_t v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::copyFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  uint64_t v5 = *(void *)a1;
  if (v4)
  {
    uint64_t v6 = 8 * v4;
    do
    {
      if ((unint64_t)(*(void *)v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(*(void *)v5 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
    uint64_t v5 = *(void *)a1;
  }
  uint64_t result = MEMORY[0x263E500A0](v5, 8);
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v8;
  if (v8)
  {
    *(void *)a1 = operator new(8 * v8, (std::align_val_t)8uLL);
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::copyFrom<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>>(a1, (void *)a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::copyFrom<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>>(uint64_t result, void *a2)
{
  *(void *)(result + 8) = a2[1];
  unint64_t v2 = *(unsigned int *)(result + 16);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*a2 + 8 * i);
      *(void *)(*(void *)result + 8 * i) = v4;
      if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 1uLL);
        unint64_t v2 = *(unsigned int *)(result + 16);
      }
    }
  }
  return result;
}

uint64_t std::deque<llvm::orc::LookupState>::~deque[abi:nn180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  int v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    int v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 >> 9];
    uint64_t v7 = (uint64_t *)((char *)*v6 + 8 * (v5 & 0x1FF));
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(void *)(a1 + 40) + v5) & 0x1FF);
    if (v7 != (uint64_t *)v8)
    {
      do
      {
        uint64_t v9 = *v7;
        *uint64_t v7 = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
        if ((char *)++v7 - (unsigned char *)*v6 == 4096)
        {
          uint64_t v10 = (uint64_t *)v6[1];
          ++v6;
          uint64_t v7 = v10;
        }
      }
      while (v7 != (uint64_t *)v8);
      unint64_t v2 = *(void ***)(a1 + 8);
      int v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 256;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 512;
LABEL_16:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::destroyAll(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = *(uint64_t **)a1;
    uint64_t v3 = 24 * v1;
    do
    {
      uint64_t v4 = *v2;
      if ((*v2 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        unint64_t v5 = (std::__shared_weak_count *)v2[2];
        if (v5)
        {
          std::__shared_weak_count::__release_shared[abi:nn180100](v5);
          uint64_t v4 = *v2;
        }
      }
      if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v2 += 3;
      v3 -= 24;
    }
    while (v3);
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::destroyAll(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 72 * v1;
    uint64_t v3 = (void **)(*(void *)a1 + 48);
    do
    {
      if (((unint64_t)*(v3 - 6) | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        uint64_t v6 = v3;
        std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v6);
        MEMORY[0x263E500A0](*(v3 - 3), 8);
        uint64_t v4 = (std::__shared_weak_count *)*(v3 - 4);
        if (v4) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v4);
        }
      }
      uint64_t v5 = (uint64_t)*(v3 - 6);
      if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v3 += 9;
      v2 -= 72;
    }
    while (v2);
  }
}

void std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>,llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::destroyAll(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 32 * v1;
    uint64_t v3 = (void **)(*(void *)a1 + 8);
    do
    {
      if (((unint64_t)*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v4 = v3;
        std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v4);
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

void std::__shared_ptr_emplace<llvm::orc::JITDylib::UnmaterializedInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDC88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::orc::JITDylib::UnmaterializedInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDC88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t std::__shared_ptr_emplace<llvm::orc::JITDylib::UnmaterializedInfo>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
  uint64_t result = v10;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_13;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_13:
    llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::grow(a1, v7);
    uint64_t v10 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
    uint64_t result = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  uint64_t v8 = *result;
  if (*result != -8) {
    --*(_DWORD *)(a1 + 12);
  }
  if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v9 = *a2;
  *uint64_t result = *a2;
  if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 1uLL);
  }
  result[1] = 0;
  result[2] = 0;
  return result;
}

void *llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        *uint64_t result = -8;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if ((*(void *)v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          uint64_t v15 = v18;
          if ((unint64_t)(*(void *)v18 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(*(void *)v18 + 8), 0xFFFFFFFFFFFFFFFFLL);
          }
          uint64_t v14 = 0;
          *(void *)uint64_t v15 = 0;
          *(void *)uint64_t v15 = *(void *)v13;
          *(void *)uint64_t v13 = 0;
          *(_OWORD *)(v15 + 8) = *(_OWORD *)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          *(void *)(v13 + 16) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 24 * v16;
    do
    {
      *uint64_t result = -8;
      result += 3;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

void std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy(a1, *a2);
    std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[5];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDCC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDCC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

void std::__shared_ptr_emplace<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>::__on_zero_shared(uint64_t a1)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t *)(a1 + 24));
  JUMPOUT(0x263E500A0);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> *,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> *,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> *>(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unint64_t v5 = a1;
    do
    {
      long long v6 = *v5;
      *(void *)unint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      int v7 = *(std::__shared_weak_count **)(a3 + 8);
      *(_OWORD *)a3 = v6;
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v7);
      }
      ++v5;
      a3 += 16;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<llvm::orc::SymbolStringPtr>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 1);
        v3 -= 8;
        uint64_t v5 = v6;
        if ((unint64_t)(v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>,llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  unsigned int v8 = 0;
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::grow(a1, v7);
    unsigned int v8 = 0;
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t result = *a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 32 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void **)v13;
        if ((*(void *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v18 = 0;
          uint64_t v15 = v18;
          *uint64_t v18 = *(void **)v13;
          v15[1] = 0;
          uint64_t v15[2] = 0;
          v15[3] = 0;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          v15[3] = *(void **)(v13 + 24);
          *(void *)(v13 + 8) = 0;
          *(void *)(v13 + 16) = 0;
          *(void *)(v13 + 24) = 0;
          ++*(_DWORD *)(a1 + 8);
          uint64_t v18 = (void **)(v13 + 8);
          std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v18);
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 32 * v16;
    do
    {
      *uint64_t result = -4096;
      result += 4;
      v17 -= 32;
    }
    while (v17);
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v9);
  unint64_t v5 = v9;
  if ((v4 & 1) == 0)
  {
    unint64_t v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>((uint64_t)a1, a2, v9);
    unint64_t v5 = v6;
    if ((unint64_t)(*v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(*v6 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    uint64_t v7 = *a2;
    *unint64_t v6 = *a2;
    if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 1uLL);
    }
    *(_OWORD *)(v6 + 7) = 0u;
    *(_OWORD *)(v6 + 5) = 0u;
    *(_OWORD *)(v6 + 3) = 0u;
    *(_OWORD *)(v6 + 1) = 0u;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, void *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::grow(a1, v6);
  unsigned int v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -8) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 72 * v10;
      do
      {
        *uint64_t result = -8;
        result += 9;
        v11 -= 72;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 72 * v3;
      uint64_t v13 = v4;
      do
      {
        if ((*(void *)v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          uint64_t v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, (void *)v13, &v20);
          uint64_t v14 = v20;
          if ((char *)*v20 - 1 <= (char *)0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)*v20 + 1, 0xFFFFFFFFFFFFFFFFLL);
          }
          *uint64_t v14 = 0;
          *uint64_t v14 = *(void **)v13;
          *(void *)uint64_t v13 = 0;
          *(_OWORD *)(v14 + 1) = *(_OWORD *)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          *(void *)(v13 + 16) = 0;
          v14[3] = 0;
          v14[4] = 0;
          *((_DWORD *)v14 + 10) = 0;
          v14[3] = *(void **)(v13 + 24);
          *(void *)(v13 + 24) = 0;
          *((_DWORD *)v14 + 8) = *(_DWORD *)(v13 + 32);
          *(_DWORD *)(v13 + 32) = 0;
          int v15 = *((_DWORD *)v14 + 9);
          *((_DWORD *)v14 + 9) = *(_DWORD *)(v13 + 36);
          *(_DWORD *)(v13 + 36) = v15;
          int v16 = *((_DWORD *)v14 + 10);
          *((_DWORD *)v14 + 10) = *(_DWORD *)(v13 + 40);
          *(_DWORD *)(v13 + 40) = v16;
          v14[6] = 0;
          v14[7] = 0;
          v14[8] = 0;
          *((_OWORD *)v14 + 3) = *(_OWORD *)(v13 + 48);
          v14[8] = *(void **)(v13 + 64);
          *(void *)(v13 + 48) = 0;
          *(void *)(v13 + 56) = 0;
          *(void *)(v13 + 64) = 0;
          ++*(_DWORD *)(a1 + 8);
          uint64_t v20 = (void **)(v13 + 48);
          std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v20);
          MEMORY[0x263E500A0](*(void *)(v13 + 24), 8);
          uint64_t v17 = *(std::__shared_weak_count **)(v13 + 16);
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v17);
          }
        }
        if ((unint64_t)(*(void *)v13 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(*(void *)v13 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        v13 += 72;
        v12 -= 72;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    uint64_t v19 = 72 * v18;
    do
    {
      *uint64_t result = -8;
      result += 9;
      v19 -= 72;
    }
    while (v19);
  }
  return result;
}

void std::__shared_ptr_emplace<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::TriggerOnComplete,std::allocator<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::TriggerOnComplete>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDCF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::TriggerOnComplete,std::allocator<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::TriggerOnComplete>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDCF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

void std::__shared_ptr_emplace<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::TriggerOnComplete,std::allocator<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::TriggerOnComplete>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = a1 + 96;
  if ((v3 & 2) == 0) {
    uint64_t v4 = *v2;
  }
  (*(void (**)(uint64_t, uint64_t *))(v3 & 0xFFFFFFFFFFFFFFF8))(v4, &v6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v2);
  uint64_t v5 = *(void *)(a1 + 88);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallImpl<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::$_0>(std::mutex **a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  char v2 = *(unsigned char *)(a2 + 24);
  char v13 = v2 & 1;
  uint64_t v3 = *(void ***)a2;
  *(void *)a2 = 0;
  if (v2)
  {
    uint64_t v4 = 0;
  }
  else
  {
    v11[1] = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    int v12 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    uint64_t v4 = v3;
    uint64_t v3 = 0;
  }
  uint64_t v5 = *a1;
  v11[0] = v4;
  std::mutex::lock(v5);
  sig = (void **)v5[1].__m_.__sig;
  v5[1].__m_.__sig = 0;
  uint64_t v9 = v3;
  uint64_t v10 = sig;
  llvm::ErrorList::join(&v10, &v9, &v8);
  if (v9) {
    (*((void (**)(void **))*v9 + 1))(v9);
  }
  if (v10) {
    (*((void (**)(void **))*v10 + 1))(v10);
  }
  v5[1].__m_.__sig = (uint64_t)v8;
  std::mutex::unlock(v5);
  return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v11);
}

__n128 llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::MoveImpl<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::$_0>(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::DestroyImpl<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::$_0>(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<void (*)(llvm::Error)>(void (**a1)(uint64_t *), uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v4 = *a2;
  *a2 = 0;
  v2(&v4);
  uint64_t result = v4;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return result;
}

void std::vector<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        std::allocator<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::destroyAll(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 24 * v1;
    uint64_t v3 = (std::__shared_weak_count **)(*(void *)a1 + 16);
    do
    {
      if ((unint64_t)*(v3 - 2) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        if (*v3) {
          std::__shared_weak_count::__release_shared[abi:nn180100](*v3);
        }
      }
      v3 += 3;
      v2 -= 24;
    }
    while (v2);
  }
}

uint64_t llvm::orc::InProgressLookupState::InProgressLookupState(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_270DBDD30;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(void *)(a1 + 32) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a4;
  *(void *)(a1 + 56) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  uint64_t v6 = (void *)(a1 + 88);
  *(unsigned char *)(a1 + 64) = a5;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 1;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  int v7 = *(uint64_t **)(a1 + 40);
  unsigned int v8 = *(uint64_t **)(a1 + 48);
  uint64_t v9 = (char *)v8 - (char *)v7;
  if (v8 == v7)
  {
    uint64_t v17 = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags> *,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags> *,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags> *,0>(*(uint64_t **)(a1 + 40), v8, 0);
    for (unint64_t i = *(_DWORD **)(a1 + 96); i != v17; i -= 4)
    {
      uint64_t v20 = *((void *)i - 2);
      uint64_t v19 = v20;
      if ((unint64_t)(v20 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v19 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
    }
    *(void *)(a1 + 96) = v17;
  }
  else
  {
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vdeallocate((void **)(a1 + 88));
    if (v9 < 0) {
      abort();
    }
    uint64_t v10 = v9 >> 4;
    uint64_t v11 = *(void *)(a1 + 104) - *(void *)(a1 + 88);
    if (v11 >> 3 > (unint64_t)(v9 >> 4)) {
      uint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vallocate[abi:nn180100](v6, v12);
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(a1 + 96);
    do
    {
      int v15 = &v7[v13];
      uint64_t v16 = v7[v13];
      *(void *)(v14 + v13 * 8) = v16;
      if ((unint64_t)(v16 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v16 + 8), 1uLL);
      }
      *(_DWORD *)(v14 + v13 * 8 + 8) = *((_DWORD *)v15 + 2);
      v13 += 2;
    }
    while (v15 + 2 != v8);
    *(void *)(a1 + 96) = v14 + v13 * 8;
  }
  return a1;
}

_DWORD *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags> *,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags> *,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags> *,0>(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  for (; a1 != a2; a1 += 2)
  {
    if ((unint64_t)(*(void *)a3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(*(void *)a3 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    uint64_t v3 = *a1;
    *(void *)a3 = *a1;
    if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 1uLL);
    }
    a3[2] = *((_DWORD *)a1 + 2);
    a3 += 4;
  }
  return a3;
}

void llvm::orc::InProgressLookupState::~InProgressLookupState(llvm::orc::InProgressLookupState *this)
{
  *(void *)this = &unk_270DBDD30;
  uint64_t v2 = *((void *)this + 18);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 19);
    uint64_t v4 = (void *)*((void *)this + 18);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 18);
    }
    *((void *)this + 19) = v2;
    operator delete(v4);
  }
  int v7 = (void **)((char *)this + 112);
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v7);
  int v7 = (void **)((char *)this + 88);
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v7);
  int v7 = (void **)((char *)this + 40);
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v7);
  uint64_t v6 = (void *)*((void *)this + 2);
  if (v6)
  {
    *((void *)this + 3) = v6;
    operator delete(v6);
  }
}

void std::__shared_ptr_emplace<llvm::orc::AsynchronousSymbolQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDD60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::orc::AsynchronousSymbolQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDD60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

void *std::__shared_ptr_emplace<llvm::orc::AsynchronousSymbolQuery>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1 + 3;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap(a1 + 10);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll(a1 + 7);
  MEMORY[0x263E500A0](a1[7], 8);
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v2);
}

void llvm::orc::InProgressFullLookupState::~InProgressFullLookupState(llvm::orc::InProgressFullLookupState *this)
{
  *(void *)this = &unk_270DBDD98;
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::~__value_func[abi:nn180100]((void *)this + 23);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  llvm::orc::InProgressLookupState::~InProgressLookupState(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_270DBDD98;
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::~__value_func[abi:nn180100]((void *)this + 23);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  llvm::orc::InProgressLookupState::~InProgressLookupState(this);
  JUMPOUT(0x263E500B0);
}

void llvm::orc::InProgressFullLookupState::complete(uint64_t a1, uint64_t ***a2)
{
  v167[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(std::recursive_mutex **)(**(void **)(a1 + 16) + 32);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)(a1 + 168);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 176);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v165, a1 + 184);
  uint64_t v146 = 0;
  uint64_t v147 = 0;
  unsigned int v148 = 0;
  uint64_t v130 = v2;
  std::recursive_mutex::lock(v2);
  v142 = v3[2];
  v132 = v3[3];
  v137 = v3;
  uint64_t v138 = v4;
  uint64_t v145 = v5;
  if (v142 != v132)
  {
    uint64_t v144 = (llvm::orc::SymbolLookupSet *)(v3 + 5);
    v136 = (uint64_t *)(v5 + 32);
    while (1)
    {
      uint64_t v6 = v3[5];
      if (v3[6] != v6) {
        break;
      }
LABEL_135:
      v142 += 2;
      if (v142 == v132) {
        goto LABEL_144;
      }
    }
    uint64_t v7 = 0;
    uint64_t v8 = *v142;
    int v9 = *((_DWORD *)v142 + 2);
    uint64_t v131 = *v142 + 136;
    uint64_t v141 = (uint64_t *)(*v142 + 160);
    int v139 = v9;
    while (1)
    {
      uint64_t v10 = &v6[2 * v7];
      int v11 = *((_DWORD *)v10 + 2);
      uint64_t v160 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(v8 + 112), *(_DWORD *)(v8 + 128), *v10, &v160)&& v160 != (void **)(*(void *)(v8 + 112) + 24 * *(unsigned int *)(v8 + 128)))
      {
        unsigned int v13 = *((unsigned __int16 *)v160 + 8);
        if ((v13 >> 8) & 0x10 | v9) {
          break;
        }
      }
      ++v7;
LABEL_111:
      uint64_t v6 = v3[5];
      if (v7 == ((char *)v3[6] - (char *)v6) >> 4) {
        goto LABEL_135;
      }
    }
    if (v11 != 1 && (v13 & 0x4000) != 0)
    {
      uint64_t v96 = *(void *)v130[1].__m_.__opaque;
      uint64_t v98 = *(void *)(v96 + 8);
      uint64_t v97 = *(void *)(v96 + 16);
      uint64_t v155 = (uint64_t *)v98;
      v156 = (long long *)v97;
      if (v97) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v97 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v99 = *v10;
      unint64_t v100 = *v10 - 1;
      if (v100 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v99 + 8), 1uLL);
      }
      v101 = (void **)operator new(8uLL);
      uint64_t v160 = v101;
      v161 = v101;
      void *v101 = (void *)v99;
      uint64_t v102 = v101 + 1;
      v162 = (long long *)v102;
      if (v100 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v99 + 8), 1uLL);
      }
      v161 = v102;
      llvm::make_error<llvm::orc::SymbolsNotFound,std::shared_ptr<llvm::orc::SymbolStringPool>,std::vector<llvm::orc::SymbolStringPtr>>();
    }
    if ((v13 & 0x100) != 0)
    {
      uint64_t v103 = operator new(0x30uLL);
      v103[1] = 0;
      v103[2] = 0;
      *uint64_t v103 = &unk_270DBDCC0;
      v103[4] = 0;
      *((_DWORD *)v103 + 10) = 0;
      v103[3] = 0;
      v104 = v103 + 3;
      uint64_t v155 = v103 + 3;
      v156 = (long long *)v103;
      v167[0] = *v10;
      if ((unint64_t)(v167[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        atomic_fetch_add((atomic_ullong *volatile)(v167[0] + 8), 1uLL);
        v104 = v155;
      }
      llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::DenseSetImpl((uint64_t)&v160, v167, 1);
      uint64_t v154 = v8;
      uint64_t v105 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v104, &v154);
      llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::operator=(v105 + 1, (uint64_t *)&v160);
      llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t *)&v160);
      if ((unint64_t)(v167[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v167[0] + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      uint64_t v106 = *(void *)v130[1].__m_.__opaque;
      uint64_t v108 = *(void ***)(v106 + 8);
      uint64_t v107 = *(atomic_ullong **)(v106 + 16);
      uint64_t v160 = v108;
      v161 = v107;
      if (v107) {
        atomic_fetch_add_explicit(v107 + 1, 1uLL, memory_order_relaxed);
      }
      llvm::make_error<llvm::orc::FailedToMaterialize,std::shared_ptr<llvm::orc::SymbolStringPool>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>>();
    }
    if ((*((unsigned char *)v160 + 18) & 0x7Fu) >= *(unsigned __int8 *)(v5 + 88))
    {
      llvm::orc::AsynchronousSymbolQuery::notifySymbolMetRequiredState(v5, v10, (uint64_t)v160[1], v13);
LABEL_110:
      llvm::orc::SymbolLookupSet::remove(v144, v7);
      goto LABEL_111;
    }
    if ((*((unsigned char *)v160 + 18) & 0x80) == 0)
    {
LABEL_55:
      uint64_t v44 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct(v141, v10);
      uint64_t v45 = v44;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v47 = (char *)v44[6];
      uint64_t v46 = (char *)v44[7];
      uint64_t v48 = v46 - v47;
      if (v46 == v47)
      {
        uint64_t v50 = (char *)v44[7];
      }
      else
      {
        unint64_t v49 = v48 >> 4;
        uint64_t v50 = (char *)v44[7];
        do
        {
          unint64_t v51 = v49 >> 1;
          uint64_t v52 = &v50[-16 * (v49 >> 1)];
          uint64_t v54 = *((void *)v52 - 2);
          uint64_t v53 = v52 - 16;
          v49 += ~(v49 >> 1);
          if (*(unsigned __int8 *)(v54 + 88) <= *(unsigned __int8 *)(v145 + 88)) {
            uint64_t v50 = v53;
          }
          else {
            unint64_t v49 = v51;
          }
        }
        while (v49);
      }
      uint64_t v55 = v50 - v47;
      v56 = (uint64_t *)&v47[(v50 - v47) & 0xFFFFFFFFFFFFFFF0];
      unint64_t v57 = v44[8];
      if ((unint64_t)v46 >= v57)
      {
        unint64_t v60 = (v48 >> 4) + 1;
        if (v60 >> 60) {
LABEL_190:
        }
          abort();
        unint64_t v61 = v57 - (void)v47;
        unint64_t v62 = (uint64_t)(v57 - (void)v47) >> 3;
        if (v62 > v60) {
          unint64_t v60 = v62;
        }
        if (v61 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v63 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v63 = v60;
        }
        uint64_t v159 = v45 + 8;
        if (v63) {
          unint64_t v63 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v63);
        }
        else {
          uint64_t v64 = 0;
        }
        uint64_t v73 = (v50 - v47) >> 4;
        uint64_t v74 = (long long *)(v63 + 16 * v73);
        v158 = (char *)(v63 + 16 * v64);
        if (v73 == v64)
        {
          if (v55 < 1)
          {
            unint64_t v135 = v63 + 16 * v64;
            if (v50 == v47) {
              unint64_t v78 = 1;
            }
            else {
              unint64_t v78 = v55 >> 3;
            }
            char v164 = v45 + 8;
            uint64_t v79 = (void **)v63;
            uint64_t v80 = (uint64_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v78);
            uint64_t v77 = (long long *)&v80[2 * (v78 >> 2)];
            uint64_t v155 = v80;
            v156 = v77;
            uint64_t v160 = v79;
            v161 = v74;
            uint64_t v157 = v77;
            v158 = (char *)&v80[2 * v81];
            v162 = v74;
            unint64_t v163 = v135;
            std::__split_buffer<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::~__split_buffer((uint64_t)&v160);
            uint64_t v74 = v77;
          }
          else
          {
            unint64_t v75 = v73 + 2;
            if (v73 >= -1) {
              unint64_t v75 = v73 + 1;
            }
            uint64_t v76 = (uint64_t)&v74[-(v75 >> 1)];
            uint64_t v77 = (long long *)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> *,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> *,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> *>(v74, v74, v76);
            uint64_t v74 = (long long *)v76;
          }
        }
        else
        {
          uint64_t v77 = (long long *)(v63 + 16 * ((v50 - v47) >> 4));
        }
        uint64_t v4 = v138;
        *(void *)uint64_t v77 = v145;
        *((void *)v77 + 1) = v138;
        uint64_t v82 = (uint64_t *)v45[6];
        if (v82 != v56)
        {
          unint64_t v83 = v56;
          do
          {
            long long v84 = *((_OWORD *)v83 - 1);
            v83 -= 2;
            *--uint64_t v74 = v84;
            *unint64_t v83 = 0;
            v83[1] = 0;
          }
          while (v83 != v82);
        }
        uint64_t v85 = v77 + 1;
        v156 = v74;
        v86 = (uint64_t *)v45[7];
        if (v86 == v56)
        {
          int v9 = v139;
        }
        else
        {
          int v9 = v139;
          do
          {
            *v85++ = *(_OWORD *)v56;
            uint64_t *v56 = 0;
            v56[1] = 0;
            v56 += 2;
          }
          while (v56 != v86);
          uint64_t v74 = v156;
          v56 = (uint64_t *)v45[7];
        }
        uint64_t v87 = v45[6];
        v45[6] = v74;
        v45[7] = v85;
        v88 = (char *)v45[8];
        v45[8] = v158;
        uint64_t v157 = (long long *)v56;
        v158 = v88;
        uint64_t v155 = (uint64_t *)v87;
        v156 = (long long *)v87;
        std::__split_buffer<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::~__split_buffer((uint64_t)&v155);
        uint64_t v3 = v137;
        uint64_t v5 = v145;
      }
      else if (v56 == (uint64_t *)v46)
      {
        *(void *)uint64_t v46 = v145;
        uint64_t v3 = v137;
        uint64_t v4 = v138;
        *(void *)&v47[16 * ((v50 - v47) >> 4) + 8] = v138;
        v44[7] = v46 + 16;
        uint64_t v5 = v145;
        int v9 = v139;
      }
      else
      {
        uint64_t v134 = (v50 - v47) >> 4;
        uint64_t v58 = v46 - 16;
        char v59 = (_OWORD *)v44[7];
        while (v58 < v46)
        {
          *v59++ = *(_OWORD *)v58;
          *(void *)uint64_t v58 = 0;
          *((void *)v58 + 1) = 0;
          v58 += 16;
        }
        v44[7] = v59;
        uint64_t v3 = v137;
        uint64_t v5 = v145;
        if (v46 != (char *)(v56 + 2))
        {
          uint64_t v65 = (std::__shared_weak_count **)(v46 - 8);
          uint64_t v66 = (uint64_t)&v47[16 * v134 - 16];
          uint64_t v67 = 16 * ((v46 - (char *)(v56 + 2)) >> 4);
          do
          {
            int v68 = (void *)(v66 + v67);
            long long v69 = *(_OWORD *)(v66 + v67);
            *int v68 = 0;
            v68[1] = 0;
            uint64_t v70 = *v65;
            *(_OWORD *)(v65 - 1) = v69;
            if (v70) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v70);
            }
            v65 -= 2;
            v67 -= 16;
          }
          while (v67);
        }
        uint64_t *v56 = v145;
        uint64_t v71 = &v47[16 * v134];
        uint64_t v72 = (std::__shared_weak_count *)*((void *)v71 + 1);
        uint64_t v4 = v138;
        *((void *)v71 + 1) = v138;
        int v9 = v139;
        if (v72) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v72);
        }
      }
      uint64_t v89 = *v10;
      uint64_t v153 = v89;
      if ((unint64_t)(v89 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v89 + 8), 1uLL);
      }
      uint64_t v155 = (uint64_t *)v8;
      v90 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v136, (uint64_t *)&v155);
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v90 + 1), &v153, (uint64_t)&v160);
      if ((unint64_t)(v153 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v153 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      goto LABEL_110;
    }
    uint64_t v160 = 0;
    int v15 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(v8 + 136), *(_DWORD *)(v8 + 152), *v10, &v160);
    uint64_t v16 = v160;
    if (!v15) {
      uint64_t v16 = (void **)(*(void *)(v8 + 136) + 24 * *(unsigned int *)(v8 + 152));
    }
    long long v17 = *(_OWORD *)(v16 + 1);
    uint64_t v18 = (atomic_ullong *)v16[2];
    if (v18) {
      atomic_fetch_add_explicit(v18 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = v17;
    uint64_t v20 = *(void *)v17;
    long long v133 = v17;
    if (*(_DWORD *)(*(void *)v17 + 16))
    {
      uint64_t v21 = *(uint64_t **)(v20 + 8);
      uint64_t v22 = *(unsigned int *)(v20 + 24);
      if (v22)
      {
        uint64_t v23 = 16 * v22;
        uint64_t v24 = v21;
        while ((*v24 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v24 += 2;
          v23 -= 16;
          if (!v23) {
            goto LABEL_28;
          }
        }
      }
      else
      {
        uint64_t v24 = v21;
      }
      long long v91 = &v21[2 * v22];
LABEL_115:
      if (v24 != v91)
      {
        uint64_t v160 = 0;
        int v92 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(v8 + 112), *(_DWORD *)(v8 + 128), *v24, &v160);
        uint64_t v93 = v160;
        if (!v92) {
          uint64_t v93 = (void **)(*(void *)(v8 + 112) + 24 * *(unsigned int *)(v8 + 128));
        }
        *((unsigned char *)v93 + 18) = 2;
        uint64_t v94 = *v24;
        v24 += 2;
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::erase(v131, v94);
        while (v24 != v91)
        {
          if ((*v24 | 8) != 0xFFFFFFFFFFFFFFF8) {
            goto LABEL_115;
          }
          v24 += 2;
        }
      }
    }
LABEL_28:
    uint64_t v160 = 0;
    unsigned int v25 = v148;
    int v27 = v160;
    if (v26)
    {
LABEL_34:
      long long v29 = v27[2];
      uint64_t v28 = v27[3];
      if (v29 >= (void *)v28)
      {
        uint64_t v31 = v27[1];
        uint64_t v32 = ((char *)v29 - v31) >> 4;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 60) {
          goto LABEL_190;
        }
        uint64_t v34 = v28 - v31;
        if (v34 >> 3 > v33) {
          unint64_t v33 = v34 >> 3;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v36 = (char *)operator new(16 * v35);
        v37 = &v36[16 * v32];
        *(_OWORD *)v37 = v133;
        uint64_t v38 = v27[1];
        uint64_t v39 = v27[2];
        if (v39 == v38)
        {
          int64x2_t v30 = v37 + 16;
          v27[1] = v37;
          uint64_t v27[2] = v37 + 16;
          v27[3] = &v36[16 * v35];
          if (!v39) {
            goto LABEL_54;
          }
        }
        else
        {
          v40 = &v36[16 * v32];
          do
          {
            long long v41 = *((_OWORD *)v39 - 1);
            v39 -= 2;
            *((_OWORD *)v40 - 1) = v41;
            v40 -= 16;
            void *v39 = 0;
            v39[1] = 0;
          }
          while (v39 != v38);
          uint64_t v39 = v27[1];
          uint64_t v42 = v27[2];
          int64x2_t v30 = v37 + 16;
          v27[1] = v40;
          uint64_t v27[2] = v37 + 16;
          v27[3] = &v36[16 * v35];
          while (v42 != v39)
          {
            v43 = (std::__shared_weak_count *)*(v42 - 1);
            if (v43) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v43);
            }
            v42 -= 2;
          }
          uint64_t v4 = v138;
          if (!v39) {
            goto LABEL_54;
          }
        }
        operator delete(v39);
      }
      else
      {
        void *v29 = v19;
        v29[1] = v18;
        int64x2_t v30 = v29 + 2;
      }
LABEL_54:
      uint64_t v27[2] = v30;
      goto LABEL_55;
    }
    if (4 * (int)v147 + 4 >= 3 * v25)
    {
      int v95 = 2 * v25;
    }
    else
    {
      if (v25 + ~v147 - HIDWORD(v147) > v25 >> 3)
      {
LABEL_31:
        LODWORD(v147) = v147 + 1;
        if (*v27 != (void *)-4096) {
          --HIDWORD(v147);
        }
        *int v27 = (void *)v8;
        v27[1] = 0;
        uint64_t v27[2] = 0;
        v27[3] = 0;
        goto LABEL_34;
      }
      int v95 = v25;
    }
    llvm::DenseMap<llvm::orc::JITDylib *,std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>>::grow((uint64_t)&v146, v95);
    uint64_t v160 = 0;
    int v27 = v160;
    goto LABEL_31;
  }
LABEL_144:
  v110 = v3[5];
  v109 = v3[6];
  if (v109 != v110)
  {
    uint64_t v111 = 0;
    do
    {
      uint64_t v112 = &v110[2 * v111];
      if (*((_DWORD *)v112 + 2) == 1)
      {
        uint64_t v160 = 0;
        int v113 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(v5 + 56), v112, &v160);
        uint64_t v114 = v160;
        if (!v113) {
          uint64_t v114 = (void **)(*(void *)(v5 + 56) + 24 * *(unsigned int *)(v5 + 72));
        }
        if ((char *)*v114 - 1 <= (char *)0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)*v114 + 1, 0xFFFFFFFFFFFFFFFFLL);
        }
        *uint64_t v114 = (void *)-16;
        *(int32x2_t *)(v5 + 64) = vadd_s32(*(int32x2_t *)(v5 + 64), (int32x2_t)0x1FFFFFFFFLL);
        --*(void *)(v5 + 80);
        llvm::orc::SymbolLookupSet::remove(v3 + 5, v111);
        v110 = v3[5];
        v109 = v3[6];
      }
      else
      {
        ++v111;
      }
    }
    while (v111 != ((char *)v109 - (char *)v110) >> 4);
    if (v110 != v109)
    {
      uint64_t v115 = *(void *)v130[1].__m_.__opaque;
      uint64_t v117 = *(void *)(v115 + 8);
      uint64_t v116 = *(void *)(v115 + 16);
      uint64_t v155 = (uint64_t *)v117;
      v156 = (long long *)v116;
      if (v116) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v116 + 8), 1uLL, memory_order_relaxed);
      }
      llvm::orc::SymbolLookupSet::getSymbolNames((llvm::orc::SymbolLookupSet *)&v160, v3 + 5);
      llvm::make_error<llvm::orc::SymbolsNotFound,std::shared_ptr<llvm::orc::SymbolStringPool>,std::vector<llvm::orc::SymbolStringPtr>>();
    }
  }
  uint64_t v118 = *(void *)(v5 + 80);
  if (v147)
  {
    int64x2_t v119 = (std::recursive_mutex *)((char *)v130 + 168);
    std::recursive_mutex::lock((std::recursive_mutex *)((char *)v130 + 168));
    if (v148)
    {
      uint64_t v120 = 32 * v148;
      uint64_t v121 = (void *)v146;
      while ((*v121 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v121 += 4;
        v120 -= 32;
        if (!v120) {
          goto LABEL_174;
        }
      }
    }
    else
    {
      uint64_t v121 = (void *)v146;
    }
    if (v121 != (void *)(v146 + 32 * v148))
    {
      uint64_t v143 = v118;
      v140 = (void *)(v146 + 32 * v148);
      do
      {
        int64x2_t v122 = (uint64_t **)v121[1];
        if (v122 != (uint64_t **)v121[2])
        {
          uint64_t v124 = **v122;
          uint64_t v123 = (*v122)[1];
          int v152 = 0;
          uint64_t v151 = 0;
          uint64_t v150 = *(void *)(v124 + 8);
          *(void *)(v124 + 8) = 0;
          uint64_t v151 = *(void *)(v124 + 16);
          *(void *)(v124 + 16) = 0;
          int v125 = v152;
          int v152 = *(_DWORD *)(v124 + 24);
          *(_DWORD *)(v124 + 24) = v125;
          uint64_t v126 = **v122;
          uint64_t v149 = *(void *)(v126 + 32);
          *(void *)(v126 + 32) = 0;
          llvm::orc::ExecutionSession::createMaterializationResponsibility((uint64_t)&v155, v123);
        }
        v121 += 4;
        int64x2_t v119 = (std::recursive_mutex *)((char *)v130 + 168);
        uint64_t v3 = v137;
        uint64_t v5 = v145;
        uint64_t v118 = v143;
        if (v121 == v140) {
          break;
        }
        while ((*v121 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v121 += 4;
          if (v121 == v140) {
            goto LABEL_174;
          }
        }
      }
      while (v121 != v140);
    }
LABEL_174:
    std::recursive_mutex::unlock(v119);
  }
  if (v166 && *(_DWORD *)(v5 + 40)) {
    (*(void (**)(void))(*(void *)v166 + 48))();
  }
  std::recursive_mutex::unlock(v130);
  if (!v118) {
    llvm::orc::AsynchronousSymbolQuery::handleComplete();
  }
  llvm::orc::ExecutionSession::dispatchOutstandingMUs((llvm::orc::ExecutionSession *)v130);
  uint64_t v127 = v146;
  if (v148)
  {
    uint64_t v128 = (void **)(v146 + 8);
    uint64_t v129 = 32 * v148;
    do
    {
      if (((unint64_t)*(v128 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v160 = v128;
        std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v160);
      }
      v128 += 4;
      v129 -= 32;
    }
    while (v129);
  }
  MEMORY[0x263E500A0](v127, 8);
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::~__value_func[abi:nn180100](v165);
  if (v138) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v138);
  }
  if (v3) {
    ((void (*)(uint64_t **))(*v3)[1])(v3);
  }
}

uint64_t llvm::orc::InProgressFullLookupState::fail(uint64_t a1, uint64_t *a2)
{
  llvm::orc::AsynchronousSymbolQuery::detach(*(llvm::orc::AsynchronousSymbolQuery **)(a1 + 168));
  uint64_t v4 = *(long long **)(a1 + 168);
  uint64_t v7 = *a2;
  *a2 = 0;
  llvm::orc::AsynchronousSymbolQuery::handleFailed(v4, &v7);
  uint64_t result = v7;
  if (v7)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)v7 + 8);
    return v6();
  }
  return result;
}

void std::__assoc_state<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~__assoc_state(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;
  uint64_t vars8;

  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x263E500B0);
}

uint64_t std::__assoc_state<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::__on_zero_shared(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136)) {
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t *)(a1 + 144));
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 8);
  return v2(a1);
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallImpl<llvm::orc::ExecutionSession::lookup(std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>> const&,llvm::orc::SymbolLookupSet,llvm::orc::LookupKind,llvm::orc::SymbolState,std::function<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v10 = a2[3] & 1;
  uint64_t v2 = *a2;
  if (v10)
  {
    *a2 = 0;
    uint64_t v3 = *(void **)(a1 + 8);
    v8[0] = 0;
    *uint64_t v3 = v2;
    uint64_t v4 = *(uint64_t **)a1;
    v6[0] = 0;
    v6[1] = 0;
    int v7 = 0;
    std::promise<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::set_value(*v4, (uint64_t)v6);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap(v6);
    if (!*v3) {
      *uint64_t v3 = 0;
    }
  }
  else
  {
    v8[0] = *a2;
    v8[1] = a2[1];
    *a2 = 0;
    a2[1] = 0;
    int v9 = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    std::promise<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::set_value(**(void **)a1, (uint64_t)v8);
  }
  return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v8);
}

void std::promise<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::set_value(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = (std::mutex *)(a1 + 24);
    std::mutex::lock((std::mutex *)(a1 + 24));
    if ((*(unsigned char *)(a1 + 136) & 1) == 0)
    {
      v12.__ptr_ = 0;
      uint64_t v5 = *(void *)(a1 + 16);
      std::exception_ptr::~exception_ptr(&v12);
      if (!v5)
      {
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        *(_DWORD *)(a1 + 160) = 0;
        *(void *)(a1 + 144) = *(void *)a2;
        *(void *)a2 = 0;
        *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = 0;
        int v6 = *(_DWORD *)(a1 + 156);
        *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a2 + 12) = v6;
        int v7 = *(_DWORD *)(a1 + 160);
        *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a1 + 136) |= 5u;
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
        std::mutex::unlock(v4);
        return;
      }
    }
    std::__throw_future_error[abi:nn180100]();
  }
  uint64_t v8 = std::__throw_future_error[abi:nn180100]();
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(v8, v9, v10, v11);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    int v6 = (void *)(a1 + 24 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -2;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        int v6 = (void *)(a1 + 24 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        int v6 = v10;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        *uint64_t result = -1;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = v4 + 8;
      do
      {
        unint64_t v14 = *(void *)(v13 - 8);
        if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          int v15 = v18;
          *uint64_t v18 = *(void *)(v13 - 8);
          *(_OWORD *)(v15 + 1) = *(_OWORD *)v13;
          *(void *)uint64_t v13 = 0;
          *(void *)(v13 + 8) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 24 * v16;
    do
    {
      *uint64_t result = -1;
      result += 3;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

void std::__shared_ptr_emplace<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDDF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDDF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

void *std::__shared_ptr_emplace<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>::__on_zero_shared(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 24));
}

void *llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 72 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 9;
        v11 -= 72;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 72 * v3;
      uint64_t v13 = v4 + 32;
      do
      {
        uint64_t v14 = *(void *)(v13 - 32);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v23 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v23);
          int v15 = v23;
          void *v23 = *(void *)(v13 - 32);
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 - 24);
          *(void *)(v13 - 24) = 0;
          *(void *)(v13 - 16) = 0;
          v15[3] = 0;
          v15[4] = 0;
          *((_DWORD *)v15 + 10) = 0;
          v15[3] = *(void *)(v13 - 8);
          *(void *)(v13 - 8) = 0;
          *((_DWORD *)v15 + 8) = *(_DWORD *)v13;
          *(_DWORD *)uint64_t v13 = 0;
          int v16 = *((_DWORD *)v15 + 9);
          *((_DWORD *)v15 + 9) = *(_DWORD *)(v13 + 4);
          *(_DWORD *)(v13 + 4) = v16;
          int v17 = *((_DWORD *)v15 + 10);
          *((_DWORD *)v15 + 10) = *(_DWORD *)(v13 + 8);
          *(_DWORD *)(v13 + 8) = v17;
          v15[6] = 0;
          v15[7] = 0;
          *((_DWORD *)v15 + 16) = 0;
          v15[6] = *(void *)(v13 + 16);
          *(void *)(v13 + 16) = 0;
          *((_DWORD *)v15 + 14) = *(_DWORD *)(v13 + 24);
          *(_DWORD *)(v13 + 24) = 0;
          int v18 = *((_DWORD *)v15 + 15);
          *((_DWORD *)v15 + 15) = *(_DWORD *)(v13 + 28);
          *(_DWORD *)(v13 + 28) = v18;
          int v19 = *((_DWORD *)v15 + 16);
          *((_DWORD *)v15 + 16) = *(_DWORD *)(v13 + 32);
          *(_DWORD *)(v13 + 32) = v19;
          ++*(_DWORD *)(a1 + 8);
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::destroyAll(v13 + 16);
          MEMORY[0x263E500A0](*(void *)(v13 + 16), 8);
          MEMORY[0x263E500A0](*(void *)(v13 - 8), 8);
          uint64_t v20 = *(std::__shared_weak_count **)(v13 - 16);
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v20);
          }
        }
        v13 += 72;
        v12 -= 72;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v21 = *(unsigned int *)(a1 + 16);
  if (v21)
  {
    uint64_t v22 = 72 * v21;
    do
    {
      *uint64_t result = -4096;
      result += 9;
      v22 -= 72;
    }
    while (v22);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 72 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        unint64_t v6 = (void *)(a1 + 72 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        unint64_t v6 = v10;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void std::__shared_ptr_emplace<llvm::orc::JITDylib::EmissionDepUnit>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDE30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::orc::JITDylib::EmissionDepUnit>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDE30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

void std::__shared_ptr_emplace<llvm::orc::JITDylib::EmissionDepUnit>::__on_zero_shared(uint64_t a1)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::destroyAll(a1 + 56);
  MEMORY[0x263E500A0](*(void *)(a1 + 56), 8);
  JUMPOUT(0x263E500A0);
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  unsigned int v5 = v7;
  if ((v4 & 1) == 0)
  {
    unsigned int v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::InsertIntoBucketImpl<llvm::orc::JITDylib::EmissionDepUnit *>(a1, a2, v7);
    void *v5 = *a2;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::InsertIntoBucketImpl<llvm::orc::JITDylib::EmissionDepUnit *>(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucketImpl<llvm::orc::NonOwningSymbolStringPtr>(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -8) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -8;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if ((*(void *)v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          int v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          int v15 = v18;
          *int v18 = *(void *)v13;
          *((_WORD *)v15 + 4) = *(_WORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      *uint64_t result = -8;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  unsigned int v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>::grow(a1, v7);
    unsigned int v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -8) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t result = *a2;
  result[1] = 0;
  return result;
}

void *llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -8;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = (uint64_t *)v4;
      do
      {
        uint64_t v14 = *v13;
        if ((*v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          int v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          int v15 = v18;
          *int v18 = *v13;
          v15[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      *uint64_t result = -8;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::LookupBucketFor<llvm::orc::NonOwningSymbolStringPtr>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 8 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -8)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -16;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        unint64_t v6 = (void *)(a1 + 8 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        unint64_t v6 = v10;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::NonOwningSymbolStringPtr>(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::LookupBucketFor<llvm::orc::NonOwningSymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -8) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 8 * v10;
      do
      {
        *result++ = -8;
        v11 -= 8;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 8 * v3;
      unsigned int v13 = (uint64_t *)v4;
      do
      {
        uint64_t v14 = *v13;
        if ((*v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          uint64_t v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::LookupBucketFor<llvm::orc::NonOwningSymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v17);
          *uint64_t v17 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = 8 * v15;
    do
    {
      *result++ = -8;
      v16 -= 8;
    }
    while (v16);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::LookupBucketFor<llvm::orc::NonOwningSymbolStringPtr>(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::NonOwningSymbolStringPtr>(a2, a3, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a3;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::try_emplace<llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::InsertIntoBucketImpl<llvm::orc::JITDylib::EmissionDepUnit *>(a2, a3, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a3;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 8 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        unint64_t v6 = (void *)(a1 + 8 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        unint64_t v6 = v10;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::InsertIntoBucketImpl<llvm::orc::JITDylib::EmissionDepUnit *>(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 8 * v3;
      unsigned int v13 = (uint64_t *)v4;
      do
      {
        uint64_t v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v17);
          *uint64_t v17 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = 8 * v15;
    do
    {
      *result++ = -4096;
      v16 -= 8;
    }
    while (v16);
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  unsigned int v8 = 0;
  unint64_t v5 = v8;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>(a1, a2, v8);
    uint64_t v6 = *a2;
    void v5[2] = 0;
    v5[3] = 0;
    void *v5 = v6;
    v5[1] = 0;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::grow(a1, v6);
  unsigned int v8 = 0;
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = (_DWORD *)(v4 + 24);
      uint64_t v13 = 32 * v3;
      do
      {
        uint64_t v14 = *((void *)v12 - 3);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v19 = 0;
          uint64_t v15 = v19;
          uint64_t v16 = *((void *)v12 - 3);
          *(_DWORD *)(v19 + 24) = 0;
          *(void *)(v15 + 8) = 0;
          *(void *)(v15 + 16) = 0;
          *(void *)uint64_t v15 = v16;
          *(void *)(v15 + 8) = *((void *)v12 - 2);
          *((void *)v12 - 2) = 0;
          *(_DWORD *)(v15 + 16) = *(v12 - 2);
          *(v12 - 2) = 0;
          LODWORD(v16) = *(_DWORD *)(v15 + 20);
          *(_DWORD *)(v15 + 20) = *(v12 - 1);
          *(v12 - 1) = v16;
          LODWORD(v16) = *(_DWORD *)(v15 + 24);
          *(_DWORD *)(v15 + 24) = *v12;
          *uint64_t v12 = v16;
          ++*(_DWORD *)(a1 + 8);
          MEMORY[0x263E500A0](0, 8);
        }
        v12 += 8;
        v13 -= 32;
      }
      while (v13);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    uint64_t v18 = 32 * v17;
    do
    {
      *uint64_t result = -4096;
      result += 4;
      v18 -= 32;
    }
    while (v18);
  }
  return result;
}

uint64_t std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::~deque[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      int v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<llvm::orc::JITDylib::EmissionDepUnit **>::push_back(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      unint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unsigned int v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        unint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        unint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      unint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<llvm::orc::JITDylib::EmissionDepUnit **>::push_front(uint64_t a1, void *a2)
{
  unint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v11);
      unint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        unint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      unint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        unint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    unint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::clear(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 8);
  if (!v2 && !*(_DWORD *)(result + 12)) {
    return result;
  }
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3 <= 4 * v2 || v3 < 0x41)
  {
    if (!v3)
    {
LABEL_20:
      *(void *)(v1 + 8) = 0;
      return result;
    }
    uint64_t v8 = *(void **)result;
    uint64_t v9 = 32 * v3;
    while (1)
    {
      if (*v8 == -8192) {
        goto LABEL_18;
      }
      if (*v8 != -4096) {
        break;
      }
LABEL_19:
      v8 += 4;
      v9 -= 32;
      if (!v9) {
        goto LABEL_20;
      }
    }
    uint64_t result = MEMORY[0x263E500A0](v8[1], 8);
LABEL_18:
    *uint64_t v8 = -4096;
    goto LABEL_19;
  }
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::destroyAll(result);
  if (!v2)
  {
    if (*(_DWORD *)(v1 + 16))
    {
      uint64_t result = MEMORY[0x263E500A0](*(void *)v1, 8);
      *(void *)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
      *(_DWORD *)(v1 + 16) = 0;
      return result;
    }
    goto LABEL_20;
  }
  int v4 = 1 << (33 - __clz(v2 - 1));
  if (v4 <= 64) {
    unsigned int v5 = 64;
  }
  else {
    unsigned int v5 = v4;
  }
  if (v5 == *(_DWORD *)(v1 + 16))
  {
    *(void *)(v1 + 8) = 0;
    uint64_t v6 = 32 * v5;
    uint64_t v7 = *(void **)v1;
    do
    {
      *uint64_t v7 = -4096;
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  else
  {
    MEMORY[0x263E500A0](*(void *)v1, 8);
    unint64_t v10 = (4 * v5 / 3 + 1) | ((unint64_t)(4 * v5 / 3 + 1) >> 1);
    unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
    LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
    *(_DWORD *)(v1 + 16) = v11;
    uint64_t result = (uint64_t)operator new(32 * v11, (std::align_val_t)8uLL);
    *(void *)uint64_t v1 = result;
    *(void *)(v1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(v1 + 16);
    if (v12)
    {
      uint64_t v13 = 32 * v12;
      do
      {
        *(void *)uint64_t result = -4096;
        result += 32;
        v13 -= 32;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::deque(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v3 = a2[4];
  uint64_t v4 = a2[1];
  unsigned int v5 = (char *)(v4 + 8 * (v3 >> 9));
  if (a2[2] == v4)
  {
    uint64_t v6 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = (char *)(v4 + 8 * ((a2[5] + v3) >> 9));
  }
  else
  {
    uint64_t v6 = (uint64_t *)(*(void *)v5 + 8 * (a2[4] & 0x1FFLL));
    unint64_t v7 = a2[5] + v3;
    uint64_t v8 = (char *)(v4 + 8 * (v7 >> 9));
    uint64_t v9 = *(void *)v8 + 8 * (v7 & 0x1FF);
  }
  if ((uint64_t *)v9 != v6)
  {
    uint64_t v10 = ((v9 - *(void *)v8) >> 3) + ((v8 - v5) << 6);
    uint64_t v11 = (uint64_t)v6 - *(void *)v5;
    uint64_t v12 = v10 - (v11 >> 3);
    if (v10 != v11 >> 3)
    {
      unint64_t v13 = ((v12 + 1) & 0x1FF) != 0 ? ((unint64_t)(v12 + 1) >> 9) + 1 : (unint64_t)(v12 + 1) >> 9;
      if (v13)
      {
        uint64_t v41 = a1 + 24;
        uint64_t v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v13);
        uint64_t v39 = v38;
        *(void *)&long long v40 = v38;
        *((void *)&v40 + 1) = &v38[8 * v14];
        uint64_t v15 = -(uint64_t)v13;
        do
        {
          v37 = operator new(0x1000uLL);
          std::__split_buffer<llvm::orc::JITDylib::EmissionDepUnit **>::push_back(&v38, &v37);
        }
        while (!__CFADD__(v15++, 1));
        uint64_t v17 = *(void **)(a1 + 8);
        uint64_t v18 = *(void **)(a1 + 16);
        while (v18 != v17)
        {
          std::__split_buffer<llvm::orc::JITDylib::EmissionDepUnit **>::push_front((uint64_t)&v38, --v18);
          uint64_t v17 = *(void **)(a1 + 8);
        }
        uint64_t v19 = *(void **)a1;
        uint64_t v20 = v39;
        *(void *)a1 = v38;
        *(void *)(a1 + 8) = v20;
        uint64_t v21 = (char *)v40;
        *(_OWORD *)(a1 + 16) = v40;
        if (v19)
        {
          operator delete(v19);
          uint64_t v20 = *(char **)(a1 + 8);
          uint64_t v22 = *(char **)(a1 + 16);
        }
        else
        {
          uint64_t v22 = v21;
        }
        uint64_t v24 = *(void *)(a1 + 40);
        unint64_t v26 = *(void *)(a1 + 32) + v24;
        unsigned int v25 = &v20[8 * (v26 >> 9)];
        uint64_t v23 = v22 == v20 ? 0 : *(void *)v25 + 8 * (v26 & 0x1FF);
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        unsigned int v25 = 0;
      }
      uint64_t v27 = v12 + ((v23 - *(void *)v25) >> 3);
      if (v27 < 1)
      {
        unint64_t v29 = 511 - v27;
        LOWORD(v27) = ~(511 - v27);
        uint64_t v28 = &v25[-8 * (v29 >> 9)];
      }
      else
      {
        uint64_t v28 = &v25[8 * ((unint64_t)v27 >> 9)];
      }
      uint64_t v30 = *(void *)v28 + 8 * (v27 & 0x1FF);
      if (v23 != v30)
      {
        do
        {
          uint64_t v31 = v30;
          if (v25 != v28) {
            uint64_t v31 = *(void *)v25 + 4096;
          }
          if (v23 == v31)
          {
            uint64_t v31 = v23;
          }
          else
          {
            uint64_t v32 = (void *)v23;
            do
            {
              uint64_t v33 = *v6++;
              *v32++ = v33;
              if ((uint64_t *)((char *)v6 - *(void *)v5) == (uint64_t *)4096)
              {
                uint64_t v34 = (uint64_t *)*((void *)v5 + 1);
                v5 += 8;
                uint64_t v6 = v34;
              }
            }
            while (v32 != (void *)v31);
          }
          v24 += (v31 - v23) >> 3;
          if (v25 == v28) {
            break;
          }
          uint64_t v35 = *((void *)v25 + 1);
          v25 += 8;
          uint64_t v23 = v35;
        }
        while (v35 != v30);
        *(void *)(a1 + 40) = v24;
      }
    }
  }
  return a1;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  unsigned int v5 = v8;
  if ((v4 & 1) == 0)
  {
    uint64_t v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, a2, v8);
    unsigned int v5 = v6;
    if ((unint64_t)(*v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(*v6 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    *uint64_t v6 = 0;
    *uint64_t v6 = *a2;
    *a2 = 0;
    v6[1] = 0;
    uint64_t v6[2] = 0;
  }
  return v5;
}

uint64_t *std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::__emplace_unique_key_args<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> const&>(uint64_t *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)result;
  uint64_t v8 = (uint64_t **)(result + 1);
  unint64_t v7 = (uint64_t *)result[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v7;
        unint64_t v10 = v7[4];
        if (v10 <= a2) {
          break;
        }
        unint64_t v7 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v10 >= a2) {
        break;
      }
      unint64_t v7 = v9[1];
      if (!v7)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v9 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = a3;
    v11[5] = a4;
    if (a4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
    }
    return std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(v6, (uint64_t)v9, v8, v11);
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v8);
  unsigned int v5 = v8;
  if ((v4 & 1) == 0)
  {
    uint64_t v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>((uint64_t)a1, a2, v8);
    unsigned int v5 = v6;
    if ((unint64_t)(*v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(*v6 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    *uint64_t v6 = 0;
    *uint64_t v6 = *a2;
    *a2 = 0;
    *(_OWORD *)(v6 + 7) = 0u;
    *(_OWORD *)(v6 + 5) = 0u;
    *(_OWORD *)(v6 + 3) = 0u;
    *(_OWORD *)(v6 + 1) = 0u;
  }
  return v5;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::erase(uint64_t a1, uint64_t a2)
{
  char v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::LookupBucketFor<llvm::orc::NonOwningSymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v4))
  {
    void *v4 = -16;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::clear(_DWORD *result)
{
  uint64_t v1 = result;
  int v2 = result[2];
  if (v2)
  {
    unsigned int v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      int v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64) {
        int v5 = 64;
      }
      else {
        int v5 = v4;
      }
LABEL_10:
      if (v5 == v3)
      {
        *((void *)result + 1) = 0;
        uint64_t v6 = 8 * v3;
        unint64_t v7 = *(void **)result;
        do
        {
          *v7++ = -4096;
          v6 -= 8;
        }
        while (v6);
      }
      else
      {
        int32x2_t result = (_DWORD *)MEMORY[0x263E500A0](*(void *)result, 8);
        if (v5)
        {
          unint64_t v10 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
          unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
          LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
          v1[4] = v11;
          int32x2_t result = operator new(8 * v11, (std::align_val_t)8uLL);
          *(void *)uint64_t v1 = result;
          *((void *)v1 + 1) = 0;
          uint64_t v12 = v1[4];
          if (v12)
          {
            uint64_t v13 = 8 * v12;
            do
            {
              *(void *)int32x2_t result = -4096;
              result += 2;
              v13 -= 8;
            }
            while (v13);
          }
        }
        else
        {
          *(void *)uint64_t v1 = 0;
          *((void *)v1 + 1) = 0;
          v1[4] = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (!result[3]) {
      return result;
    }
    unsigned int v3 = result[4];
    if (v3 > 0x40)
    {
      int v5 = 0;
      goto LABEL_10;
    }
  }
  if (v3)
  {
    uint64_t v8 = *(void **)result;
    uint64_t v9 = 8 * v3;
    do
    {
      *v8++ = -4096;
      v9 -= 8;
    }
    while (v9);
  }
  *((void *)result + 1) = 0;
  return result;
}

uint64_t llvm::Expected<std::set<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void *)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy(a1, *(void **)(a1 + 8));
  }
  return a1;
}

_DWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::shrink_and_clear(_DWORD *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[4];
  int v3 = result[2];
  if (v2)
  {
    uint64_t v4 = *(void *)result;
    uint64_t v5 = 16 * v2;
    do
    {
      if ((unint64_t)(*(void *)v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(*(void *)v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v4 += 16;
      v5 -= 16;
    }
    while (v5);
  }
  if (v3)
  {
    int v6 = 1 << (33 - __clz(v3 - 1));
    if (v6 <= 64) {
      unsigned int v7 = 64;
    }
    else {
      unsigned int v7 = v6;
    }
    int v8 = result[4];
    int32x2_t result = *(_DWORD **)result;
    if (v7 == v8)
    {
      *((void *)v1 + 1) = 0;
      uint64_t v9 = 16 * v7;
      do
      {
        *(void *)int32x2_t result = -8;
        result += 4;
        v9 -= 16;
      }
      while (v9);
      return result;
    }
  }
  else
  {
    if (!result[4])
    {
      *((void *)result + 1) = 0;
      return result;
    }
    unsigned int v7 = 0;
    int32x2_t result = *(_DWORD **)result;
  }
  MEMORY[0x263E500A0](result, 8);
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::init(v1, v7);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::try_emplace<llvm::JITSymbolFlags const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&,llvm::JITSymbolFlags const&>(a1, v12, a2, a3);
    uint64_t v9 = (void *)result;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

_WORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&,llvm::JITSymbolFlags const&>(uint64_t a1, void *a2, uint64_t *a3, _WORD *a4)
{
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*(void *)result - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(*(void *)result + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v7 = *a3;
  *(void *)uint64_t result = *a3;
  if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 1uLL);
  }
  result[4] = *a4;
  return result;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v4))
  {
    void *v4 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t _GLOBAL__sub_I_Core_cpp()
{
  qword_26A956E78 = 0;
  return __cxa_atexit((void (*)(void *))std::function<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::~function, &llvm::orc::NoDependenciesToRegister, &dword_261C2B000);
}

void llvm::orc::GDBJITDebugInfoRegistrationPlugin::Create(llvm::orc::GDBJITDebugInfoRegistrationPlugin *this, llvm::orc::ExecutionSession *a2, llvm::orc::JITDylib *a3, const llvm::Triple *a4)
{
  v12[4] = *MEMORY[0x263EF8340];
  int v6 = *((_DWORD *)a3 + 11);
  uint64_t v7 = *((void *)this + 9);
  if (v6 == 5) {
    int v8 = "_llvm_orc_registerJITLoaderGDBAllocAction";
  }
  else {
    int v8 = "llvm_orc_registerJITLoaderGDBAllocAction";
  }
  if (v6 == 5) {
    unint64_t v9 = 41;
  }
  else {
    unint64_t v9 = 40;
  }
  llvm::orc::ExecutorProcessControl::intern(v7, (uint64_t *)v8, v9, (unint64_t **)&v11);
  v12[0] = (uint64_t)a2;
  char v10 = v11;
  if ((unint64_t)v11 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add(v11 + 1, 1uLL);
  }
  llvm::orc::ExecutionSession::lookup((uint64_t)this, v12, 1uLL, (uint64_t *)&v10);
}

void llvm::orc::GDBJITDebugInfoRegistrationPlugin::notifyFailed(void *a1@<X8>)
{
  *a1 = 0;
}

void llvm::orc::GDBJITDebugInfoRegistrationPlugin::notifyRemovingResources(void *a1@<X8>)
{
  *a1 = 0;
}

void llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a3 + 164) == 5)
  {
    int v5 = *(_DWORD *)(a3 + 144);
    BOOL v6 = v5 == 38 || v5 == 3;
    if (v6 && *(_DWORD *)(a3 + 192))
    {
      uint64_t v9 = *(unsigned int *)(a3 + 200);
      if (v9)
      {
        uint64_t v10 = 24 * v9;
        for (unint64_t i = *(void **)(a3 + 184); *i >= 0xFFFFFFFFFFFFFFFELL; i += 3)
        {
          v10 -= 24;
          if (!v10) {
            return;
          }
        }
      }
      else
      {
        unint64_t i = *(void **)(a3 + 184);
      }
      uint64_t v12 = *(void *)(a3 + 184) + 24 * v9;
      if (i != (void *)v12)
      {
        while (1)
        {
          uint64_t v13 = i[2];
          if (*(void *)(v13 + 8) >= 8uLL && **(void **)v13 == 0x2C46524157445F5FLL) {
            break;
          }
          do
          {
            i += 3;
            if (i == (void *)v12) {
              return;
            }
          }
          while (*i >= 0xFFFFFFFFFFFFFFFELL);
          if (i == (void *)v12) {
            return;
          }
        }
        uint64_t v14 = *(void *)(*(void *)a2 + 32);
        uint64_t v15 = (char *)operator new(0x320uLL);
        *((void *)v15 + 1) = 0;
        *(void *)uint64_t v15 = &unk_270DBDEC0;
        uint64_t v16 = *(void *)(a1 + 8);
        *((void *)v15 + 4) = a3;
        *((void *)v15 + 5) = v16;
        *((void *)v15 + 2) = 0;
        *((void *)v15 + 3) = &unk_270DBDEF8;
        *((void *)v15 + 6) = 0;
        *((void *)v15 + 11) = *(unsigned int *)(*(void *)(v14 + 72) + 88);
        *((void *)v15 + 12) = v15 + 96;
        *((void *)v15 + 13) = v15 + 96;
        *((void *)v15 + 23) = 0;
        *((void *)v15 + 24) = 0;
        *((void *)v15 + 25) = 0;
        *((_OWORD *)v15 + 7) = 0u;
        *((_OWORD *)v15 + 8) = 0u;
        *((_OWORD *)v15 + 9) = 0u;
        *((_OWORD *)v15 + 10) = 0u;
        *((void *)v15 + 22) = v15 + 184;
        *((void *)v15 + 26) = 0;
        *((void *)v15 + 27) = 0;
        *(_OWORD *)(v15 + 56) = 0u;
        *(_OWORD *)(v15 + 72) = 0u;
        *((_DWORD *)v15 + 14) = -17958193;
        *((_OWORD *)v15 + 14) = 0u;
        *((_OWORD *)v15 + 15) = 0u;
        *((void *)v15 + 32) = v15 + 272;
        *((void *)v15 + 33) = 0x1000000000;
        *((void *)v15 + 66) = v15 + 544;
        *((void *)v15 + 67) = 0x1000000000;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
        *(void *)&long long v50 = v15 + 24;
        *((void *)&v50 + 1) = v15;
        unint64_t v51 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_0,llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_0,void>::Callbacks
            + 6;
        unint64_t v17 = a4[2];
        unint64_t v18 = a4[1];
        if (v18 >= v17)
        {
          uint64_t v20 = (uint64_t)(v18 - *a4) >> 5;
          if ((unint64_t)(v20 + 1) >> 59) {
            goto LABEL_59;
          }
          uint64_t v21 = v17 - *a4;
          uint64_t v22 = v21 >> 4;
          if (v21 >> 4 <= (unint64_t)(v20 + 1)) {
            uint64_t v22 = v20 + 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          unint64_t v49 = a4 + 2;
          if (v23) {
            uint64_t v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 2), v23);
          }
          else {
            uint64_t v24 = 0;
          }
          uint64_t v45 = v24;
          uint64_t v46 = &v24[32 * v20];
          uint64_t v48 = &v24[32 * v23];
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v46, &v50);
          uint64_t v47 = (uint64_t)(v46 + 32);
          std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4, &v45);
          uint64_t v19 = a4[1];
          std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v45);
        }
        else
        {
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[1], &v50);
          uint64_t v19 = v18 + 32;
        }
        a4[1] = v19;
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v50);
        atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
        unint64_t v25 = a4[5];
        *(void *)&long long v50 = v15 + 24;
        *((void *)&v50 + 1) = v15;
        unint64_t v51 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_1,llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_1,void>::Callbacks
            + 6;
        unint64_t v26 = a4[4];
        if (v26 >= v25)
        {
          uint64_t v28 = a4[3];
          uint64_t v29 = (uint64_t)(v26 - v28) >> 5;
          if ((unint64_t)(v29 + 1) >> 59) {
            goto LABEL_59;
          }
          uint64_t v30 = v25 - v28;
          uint64_t v31 = v30 >> 4;
          if (v30 >> 4 <= (unint64_t)(v29 + 1)) {
            uint64_t v31 = v29 + 1;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v32 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v31;
          }
          unint64_t v49 = a4 + 5;
          if (v32) {
            uint64_t v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 5), v32);
          }
          else {
            uint64_t v33 = 0;
          }
          uint64_t v34 = (uint64_t)&v33[32 * v29];
          uint64_t v45 = v33;
          uint64_t v46 = (char *)v34;
          uint64_t v48 = &v33[32 * v32];
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v34, &v50);
          uint64_t v47 = v34 + 32;
          std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 3, &v45);
          uint64_t v27 = a4[4];
          std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v45);
        }
        else
        {
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[4], &v50);
          uint64_t v27 = v26 + 32;
        }
        a4[4] = v27;
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v50);
        atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
        unint64_t v35 = a4[14];
        *(void *)&long long v50 = v15 + 24;
        *((void *)&v50 + 1) = v15;
        unint64_t v51 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_2,llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_2,void>::Callbacks
            + 6;
        unint64_t v36 = a4[13];
        if (v36 < v35)
        {
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[13], &v50);
          uint64_t v37 = v36 + 32;
LABEL_57:
          a4[13] = v37;
          llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v50);
          std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v15);
          return;
        }
        uint64_t v38 = a4[12];
        uint64_t v39 = (uint64_t)(v36 - v38) >> 5;
        if (!((unint64_t)(v39 + 1) >> 59))
        {
          uint64_t v40 = v35 - v38;
          uint64_t v41 = v40 >> 4;
          if (v40 >> 4 <= (unint64_t)(v39 + 1)) {
            uint64_t v41 = v39 + 1;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v42 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v41;
          }
          unint64_t v49 = a4 + 14;
          if (v42) {
            v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 14), v42);
          }
          else {
            v43 = 0;
          }
          uint64_t v44 = (uint64_t)&v43[32 * v39];
          uint64_t v45 = v43;
          uint64_t v46 = (char *)v44;
          uint64_t v48 = &v43[32 * v42];
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v44, &v50);
          uint64_t v47 = v44 + 32;
          std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 12, &v45);
          uint64_t v37 = a4[13];
          std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v45);
          goto LABEL_57;
        }
LABEL_59:
        abort();
      }
    }
  }
}

void llvm::orc::GDBJITDebugInfoRegistrationPlugin::~GDBJITDebugInfoRegistrationPlugin(llvm::orc::GDBJITDebugInfoRegistrationPlugin *this)
{
}

void std::__shared_ptr_emplace<anonymous namespace'::MachODebugObjectSynthesizer<llvm::orc::MachO64LE>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDEC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::MachODebugObjectSynthesizer<llvm::orc::MachO64LE>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDEC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::MachODebugObjectSynthesizer<llvm::orc::MachO64LE>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t anonymous namespace'::MachODebugObjectSynthesizer<llvm::orc::MachO64LE>::~MachODebugObjectSynthesizer(uint64_t a1)
{
  *(void *)a1 = &unk_270DBDEF8;
  uint64_t v2 = *(void **)(a1 + 504);
  if (v2 != (void *)(a1 + 520)) {
    free(v2);
  }
  int v3 = *(void **)(a1 + 232);
  if (v3 != (void *)(a1 + 248)) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 208);
  if (v4)
  {
    *(void *)(a1 + 216) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(void *)(a1 + 184) = v5;
    operator delete(v5);
  }
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy(a1 + 152, *(void **)(a1 + 160));
  BOOL v6 = *(void **)(a1 + 128);
  if (v6)
  {
    *(void *)(a1 + 136) = v6;
    operator delete(v6);
  }
  int v8 = (void **)(a1 + 96);
  std::vector<std::unique_ptr<llvm::orc::MachOBuilderLoadCommandBase>>::__destroy_vector::operator()[abi:nn180100](&v8);
  std::__list_imp<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment,std::allocator<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment>>::clear((uint64_t *)(a1 + 72));
  return a1;
}

void anonymous namespace'::MachODebugObjectSynthesizer<llvm::orc::MachO64LE>::~MachODebugObjectSynthesizer(uint64_t a1)
{
  JUMPOUT(0x263E500B0);
}

void anonymous namespace'::MachODebugObjectSynthesizer<llvm::orc::MachO64LE>::startSynthesis()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  llvm::jitlink::LinkGraph::createSection();
}

uint64_t *anonymous namespace'::MachODebugObjectSynthesizer<llvm::orc::MachO64LE>::completeSynthesisAndRegister@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  v45[3] = *MEMORY[0x263EF8340];
  if (result[3])
  {
    int v3 = result;
    uint64_t v4 = *((unsigned int *)result + 128);
    if (v4)
    {
      int v5 = (uint64_t *)result[63];
      BOOL v6 = &v5[2 * v4];
      do
      {
        llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v30, *v5);
        uint64_t v7 = (unint64_t *)v30;
        if (v30) {
          uint64_t v8 = *(void *)v30;
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v9 = v5[1];
        *(void *)(v9 + 32) = v8;
        uint64_t v10 = (char *)v31;
        if (v31) {
          uint64_t v10 = (char *)(*((void *)v31 + 4) + *(void *)v31);
        }
        if (v7)
        {
          *(void *)(v9 + 40) = &v10[-*v7];
          uint64_t v7 = (unint64_t *)*v7;
        }
        else
        {
          *(void *)(v9 + 40) = v10;
        }
        *(_DWORD *)(v9 + 48) = v7;
        v5 += 2;
      }
      while (v5 != v6);
    }
    uint64_t v11 = *((unsigned int *)v3 + 60);
    if (v11)
    {
      uint64_t v12 = (void *)v3[29];
      uint64_t v13 = &v12[2 * v11];
      do
      {
        if (*(_DWORD *)(*v12 + 40) != 1)
        {
          getErrorErrorCat();
          operator new();
        }
        uint64_t v14 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(*v12 + 32);
        uint64_t v15 = *(void *)(*v14 + 32);
        uint64_t v16 = v12[1];
        *(void *)(v16 + 104) = *(void *)(*v14 + 24);
        *(void *)(v16 + 112) = v15;
        *(_DWORD *)(v16 + 64) |= 0x2000000u;
        v12 += 2;
      }
      while (v12 != v13);
    }
    unint64_t v17 = (void *)v3[26];
    unint64_t v18 = (void *)v3[27];
    while (v17 != v18)
    {
      uint64_t v19 = *v17;
      *(void *)(*(void *)(v17[1] + 8) + 16 * v17[2] + 8) = (*(void *)(*v17 + 24) & 0x1FFFFFFFFFFFFFFLL)
                                                                 + **(void **)(*v17 + 16);
      *(void *)(*(void *)(v17[3] + 8) + 16 * v17[4] + 8) = *(void *)(v19 + 32);
      v17 += 5;
    }
    llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::write((uint64_t)(v3 + 4), *(_OWORD **)(v3[3] + 24), *(void *)(v3[3] + 32));
    llvm::jitlink::SectionRange::SectionRange(&v26, *(void *)(v3[3] + 16));
    if (v26) {
      uint64_t v20 = *v26;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v27) {
      uint64_t v21 = v27[4] + *v27;
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = v3[1];
    unint64_t v23 = (unint64_t *)v3[2];
    v43 = v45;
    long long v44 = xmmword_261E8A770;
    llvm::SmallVectorImpl<char>::resizeImpl<false>(&v43, 0x11uLL);
    uint64_t v24 = v44;
    if ((unint64_t)v44 < 8
      || (v25 = v43, void *v43 = v20, (v24 & 0xFFFFFFFFFFFFFFF8) == 8)
      || (v25[1] = v21, v24 == 16))
    {
      getErrorErrorCat();
      uint64_t v30 = 3;
      uint64_t v31 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
    }
    *((unsigned char *)v25 + 16) = 1;
    uint64_t v40 = v42;
    long long v41 = xmmword_261E8A770;
    if ((void)v44)
    {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v40, (const void **)&v43);
      uint64_t v30 = (uint64_t)v23;
      uint64_t v31 = v33;
      long long v32 = xmmword_261E8A770;
      if ((void)v41) {
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v31, (const void **)&v40);
      }
    }
    else
    {
      uint64_t v30 = (uint64_t)v23;
      uint64_t v31 = v33;
      long long v32 = xmmword_261E8A770;
    }
    llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>((uint64_t)&v28, (uint64_t)&v30);
    if (v31 != v33) {
      free(v31);
    }
    if (v40 != v42) {
      free(v40);
    }
    if (v43 != v45) {
      free(v43);
    }
    uint64_t v30 = (uint64_t)v28;
    uint64_t v31 = v33;
    long long v32 = xmmword_261E8A770;
    if (v29[1]) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v31, v29);
    }
    uint64_t v34 = 0;
    uint64_t v36 = 0;
    uint64_t v39 = 0;
    long long v38 = 0u;
    unint64_t v35 = &v38;
    uint64_t v37 = 24;
    std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100]((uint64_t *)(v22 + 256), (uint64_t)&v30);
    if (v35 != &v38) {
      free(v35);
    }
    if (v31 != v33) {
      free(v31);
    }
    int32x2_t result = llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected((uint64_t *)&v28);
  }
  *a2 = 0;
  return result;
}

void std::vector<std::unique_ptr<llvm::orc::MachOBuilderLoadCommandBase>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<llvm::orc::MachOBuilderLoadCommandBase>>::__clear[abi:nn180100](v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<llvm::orc::MachOBuilderLoadCommandBase>>::__clear[abi:nn180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  int v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    int32x2_t result = v4;
    *int v3 = 0;
    if (v4) {
      int32x2_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void std::__list_imp<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment,std::allocator<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    int v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        int v5 = (uint64_t *)v3[1];
        (*(void (**)(void))v3[2])();
        operator delete(v3);
        int v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment::addSection()
{
}

uint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::addSymbol(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v10 = *(void *)(a1 + 136);
  if (v10) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = a3 == 0;
  }
  if (!v11)
  {
    *((void *)&v24 + 1) = 0;
    uint64_t v25 = 0;
    *(void *)&long long v24 = "";
    std::__tree<std::__value_type<llvm::StringRef,unsigned long>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,unsigned long>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,unsigned long>>>::__emplace_unique_key_args<llvm::StringRef,std::pair<llvm::StringRef,unsigned long>>((uint64_t **)(a1 + 120), &v24, (uint64_t)&v24);
    uint64_t v10 = *(void *)(a1 + 136);
  }
  *(void *)&long long v24 = a2;
  *((void *)&v24 + 1) = a3;
  uint64_t v25 = v10;
  int v12 = *((_DWORD *)std::__tree<std::__value_type<llvm::StringRef,unsigned long>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,unsigned long>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,unsigned long>>>::__emplace_unique_key_args<llvm::StringRef,std::pair<llvm::StringRef,unsigned long>>((uint64_t **)(a1 + 120), &v24, (uint64_t)&v24)+ 12);
  uint64_t v14 = *(char **)(a1 + 104);
  unint64_t v13 = *(void *)(a1 + 112);
  if ((unint64_t)v14 >= v13)
  {
    uint64_t v16 = *(char **)(a1 + 96);
    uint64_t v17 = (v14 - v16) >> 4;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60) {
      abort();
    }
    uint64_t v19 = v13 - (void)v16;
    if (v19 >> 3 > v18) {
      unint64_t v18 = v19 >> 3;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v21 = (char *)operator new(16 * v20);
    }
    else
    {
      uint64_t v21 = 0;
    }
    uint64_t v22 = &v21[16 * v17];
    *(_DWORD *)uint64_t v22 = v12;
    v22[4] = a4;
    v22[5] = a5;
    *((_WORD *)v22 + 3) = 0;
    *((void *)v22 + 1) = 0;
    uint64_t v15 = v22 + 16;
    if (v14 != v16)
    {
      do
      {
        *((_OWORD *)v22 - 1) = *((_OWORD *)v14 - 1);
        v22 -= 16;
        v14 -= 16;
      }
      while (v14 != v16);
      uint64_t v14 = *(char **)(a1 + 96);
    }
    *(void *)(a1 + 96) = v22;
    *(void *)(a1 + 104) = v15;
    *(void *)(a1 + 112) = &v21[16 * v20];
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v14 = v12;
    v14[4] = a4;
    v14[5] = a5;
    *((_WORD *)v14 + 3) = 0;
    uint64_t v15 = v14 + 16;
    *((void *)v14 + 1) = 0;
  }
  uint64_t result = a1 + 88;
  *(void *)(a1 + 104) = v15;
  return result;
}

unint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::layout(uint64_t a1)
{
  llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::makeStringTable((void *)a1);
  if (*(void *)(a1 + 144) != *(void *)(a1 + 152)) {
    llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::addLoadCommand<(llvm::MachO::LoadCommandType)2>();
  }
  uint64_t v2 = (void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = 32;
  if (v3 != a1 + 40)
  {
    do
    {
      uint64_t v5 = (*(void *)(v3 + 112) - *(void *)(v3 + 104)) >> 3;
      uint64_t v6 = (*(_DWORD *)(v3 + 28) + 80 * v5);
      *(_DWORD *)(v3 + 28) = v6;
      *(_DWORD *)(v3 + 88) = v5;
      v4 += v6;
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while ((void *)v3 != v2);
  }
  uint64_t v7 = *(uint64_t **)(a1 + 64);
  uint64_t v8 = *(uint64_t **)(a1 + 72);
  while (v7 != v8)
  {
    uint64_t v9 = *v7++;
    v4 += (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  *(_DWORD *)(a1 + 20) = v4 - 32;
  uint64_t v10 = *(void **)(a1 + 48);
  if (v10 == v2)
  {
    unint64_t result = v4;
  }
  else
  {
    uint64_t v11 = 0;
    int v12 = *(_DWORD *)(a1 + 12);
    unint64_t v13 = *(void **)(a1 + 48);
    unint64_t result = v4;
    do
    {
      v13[6] = v11;
      v13[8] = v4;
      uint64_t v15 = (uint64_t *)v13[13];
      uint64_t v16 = (uint64_t *)v13[14];
      if (v15 != v16)
      {
        unint64_t result = v4;
        do
        {
          uint64_t v17 = *v15;
          uint64_t v18 = 1 << *(_DWORD *)(*v15 + 52);
          uint64_t v19 = (result + v18 - 1) & -v18;
          uint64_t v20 = *(void *)(*v15 + 112);
          if (v20)
          {
            uint64_t v21 = v19;
            *(_DWORD *)(v17 + 48) = v19;
          }
          else
          {
            uint64_t v21 = *(unsigned int *)(v17 + 48);
          }
          *(void *)(v17 + 32) = v11 - v4 + v21;
          *(void *)(v17 + 40) = v20;
          unint64_t result = v19 + v20;
          ++v15;
        }
        while (v15 != v16);
      }
      unint64_t v22 = result - v4;
      v13[9] = result - v4;
      if (v12 != 1) {
        unint64_t v22 = (v22 + *(void *)(a1 + 32) - 1) / *(void *)(a1 + 32) * *(void *)(a1 + 32);
      }
      v13[7] = v22;
      v11 += v22;
      unint64_t v13 = (void *)v13[1];
      uint64_t v4 = result;
    }
    while (v13 != v2);
  }
  unint64_t v23 = *(char **)(a1 + 96);
  long long v24 = *(char **)(a1 + 104);
  if (v23 != v24)
  {
    uint64_t v25 = *(void *)(a1 + 144);
    unint64_t v26 = *(char **)(a1 + 96);
    do
    {
      *(_DWORD *)unint64_t v26 = *(void *)(v25 + 24 * *(unsigned int *)v26 + 16);
      v26 += 16;
    }
    while (v26 != v24);
  }
  uint64_t v27 = (v24 - v23) >> 4;
  if (v10 != v2)
  {
    uint64_t v28 = 0;
    uint64_t v29 = v10;
    do
    {
      uint64_t v30 = (void *)v29[13];
      uint64_t v31 = (void *)v29[14];
      while (v30 != v31)
      {
        ++v28;
        long long v32 = (void *)*v30;
        v32[15] = v28;
        v32[16] = v27;
        uint64_t v34 = (unsigned int *)v32[17];
        uint64_t v33 = (unsigned int *)v32[18];
        uint64_t v35 = (char *)v33 - (char *)v34;
        if (v33 != v34)
        {
          uint64_t v36 = *(void *)(a1 + 144);
          uint64_t v37 = v32[4];
          do
          {
            *((unsigned char *)v34 + 5) = v28;
            unsigned int *v34 = *(void *)(v36 + 24 * *v34 + 16);
            *((void *)v34 + 1) += v37;
            v34 += 4;
          }
          while (v34 != v33);
        }
        v27 += v35 >> 4;
        ++v30;
      }
      uint64_t v29 = (void *)v29[1];
    }
    while (v29 != v2);
    char v38 = 0;
    do
    {
      uint64_t v39 = (uint64_t *)v10[13];
      uint64_t v40 = (uint64_t *)v10[14];
      while (v39 != v40)
      {
        uint64_t v41 = *v39;
        uint64_t v42 = *(void *)(*v39 + 160);
        uint64_t v43 = *(void *)(*v39 + 168);
        if (v42 != v43)
        {
          if (v38) {
            unint64_t v44 = result;
          }
          else {
            unint64_t v44 = (result + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 3);
          *(_DWORD *)(v41 + 56) = v44;
          *(_DWORD *)(v41 + 60) = v45;
          do
          {
            uint64_t v47 = *(void **)(v42 + 8);
            uint64_t v46 = *(void *)(v42 + 16);
            if (v46 == 0xFFFFFFFFLL) {
              uint64_t v48 = v47[15];
            }
            else {
              uint64_t v48 = *v47 + v46;
            }
            *(_DWORD *)(v42 + 4) = v48 & 0xFFFFFF | (*(unsigned __int8 *)(v42 + 7) << 24);
            v42 += 24;
          }
          while (v42 != v43);
          unint64_t result = v44 + 8 * v45;
          char v38 = 1;
        }
        ++v39;
      }
      uint64_t v10 = (void *)v10[1];
    }
    while (v10 != v2);
  }
  if (v27)
  {
    unint64_t result = (result + 15) & 0xFFFFFFFFFFFFFFF0;
    MEMORY[0x10] = result;
    MEMORY[0x14] = v27;
    uint64_t v49 = *(void *)(a1 + 152);
    if (*(void *)(a1 + 144) != v49)
    {
      unint64_t v50 = result + 16 * v27;
      uint64_t v51 = *(void *)(v49 - 8) + *(void *)(v49 - 16) + 1;
      MEMORY[0x18] = v50;
      MEMORY[0x1C] = v51;
      return v51 + v50;
    }
  }
  return result;
}

uint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment::~Segment(uint64_t a1)
{
  *(void *)a1 = &unk_270DBDF28;
  uint64_t v3 = (void **)(a1 + 88);
  std::vector<std::unique_ptr<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section,std::default_delete<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section>>>::__destroy_vector::operator()[abi:nn180100](&v3);
  return a1;
}

void llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment::~Segment(uint64_t a1)
{
  *(void *)a1 = &unk_270DBDF28;
  uint64_t v1 = (void **)(a1 + 88);
  std::vector<std::unique_ptr<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section,std::default_delete<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section>>>::__destroy_vector::operator()[abi:nn180100](&v1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)25>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment::write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int8x8_t v5 = *(int8x8_t *)(a1 + 8);
  int8x16_t v6 = *(int8x16_t *)(a1 + 32);
  long long v21 = *(_OWORD *)(a1 + 16);
  int8x16_t v7 = *(int8x16_t *)(a1 + 48);
  int8x16_t v8 = *(int8x16_t *)(a1 + 64);
  if (a5)
  {
    int8x8_t v5 = vrev32_s8(v5);
    int8x16_t v6 = vrev64q_s8(v6);
    int8x16_t v7 = vrev64q_s8(v7);
    int8x16_t v8 = vrev32q_s8(v8);
  }
  uint64_t v9 = a2 + a4;
  *(int8x8_t *)uint64_t v9 = v5;
  *(_OWORD *)(v9 + 8) = v21;
  *(int8x16_t *)(v9 + 24) = v6;
  *(int8x16_t *)(v9 + 40) = v7;
  *(int8x16_t *)(v9 + 56) = v8;
  uint64_t v10 = *(int8x16_t ***)(a1 + 88);
  uint64_t v11 = *(int8x16_t ***)(a1 + 96);
  while (v10 != v11)
  {
    int v12 = *v10;
    int8x16_t v14 = (*v10)[2];
    int8x16_t v13 = (*v10)[3];
    int8x8_t v15 = *(int8x8_t *)(*v10)[4].i8;
    unsigned int v16 = (*v10)[4].u32[2];
    if (a5)
    {
      int8x16_t v14 = vrev64q_s8(v14);
      int8x16_t v13 = vrev32q_s8(v13);
      int8x8_t v15 = vrev32_s8(v15);
      unsigned int v16 = bswap32(v16);
    }
    __int32 v17 = v12[4].i32[3];
    uint64_t v18 = a2 + a4;
    int8x16_t v19 = *v12;
    *(int8x16_t *)(v18 + 88) = v12[1];
    *(int8x16_t *)(v18 + 72) = v19;
    *(int8x16_t *)(v18 + 104) = v14;
    *(int8x16_t *)(v18 + 120) = v13;
    *(int8x8_t *)(v18 + 136) = v15;
    *(_DWORD *)(v18 + 144) = v16;
    *(_DWORD *)(v18 + 148) = v17;
    ++v10;
    a4 += 80;
  }
  return a4 + 72;
}

void std::vector<std::unique_ptr<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section,std::default_delete<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    int8x8_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int8x16_t v7 = (void *)*--v4;
        int8x16_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          std::default_delete<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section>::operator()[abi:nn180100](v6);
        }
      }
      while (v4 != v2);
      int8x8_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section>::operator()[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x263E500B0);
}

uint64_t *std::__tree<std::__value_type<llvm::StringRef,unsigned long>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,unsigned long>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,unsigned long>>>::__emplace_unique_key_args<llvm::StringRef,std::pair<llvm::StringRef,unsigned long>>(uint64_t **a1, long long *a2, uint64_t a3)
{
  int8x16_t v6 = a1 + 1;
  int8x8_t v5 = a1[1];
  if (!v5)
  {
    uint64_t v8 = (uint64_t)(a1 + 1);
LABEL_9:
    int8x16_t v13 = (uint64_t *)operator new(0x38uLL);
    *((_OWORD *)v13 + 2) = *(_OWORD *)a3;
    v13[6] = *(void *)(a3 + 16);
    *int8x16_t v13 = 0;
    v13[1] = 0;
    int32x2_t v13[2] = v8;
    *int8x16_t v6 = v13;
    int8x16_t v14 = (uint64_t *)**a1;
    int8x8_t v15 = v13;
    if (v14)
    {
      *a1 = v14;
      int8x8_t v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v13;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t)v5;
      uint64_t v9 = (const void *)v5[4];
      size_t v10 = v5[5];
      long long v17 = *a2;
      if ((llvm::StringRef::compare((uint64_t)&v17, v9, v10) & 0x80000000) == 0) {
        break;
      }
      int8x8_t v5 = *(uint64_t **)v8;
      int8x16_t v6 = (uint64_t **)v8;
      if (!*(void *)v8) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(const void **)a2;
    size_t v12 = *((void *)a2 + 1);
    long long v17 = *(_OWORD *)(v8 + 32);
    if ((llvm::StringRef::compare((uint64_t)&v17, v11, v12) & 0x80000000) == 0) {
      break;
    }
    int8x16_t v6 = (uint64_t **)(v8 + 8);
    int8x8_t v5 = *(uint64_t **)(v8 + 8);
    if (!v5) {
      goto LABEL_9;
    }
  }
  int8x16_t v13 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v13;
}

void llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::makeStringTable(void *a1)
{
  unint64_t v1 = a1[17];
  if (v1)
  {
    uint64_t v3 = a1 + 18;
    std::vector<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry,std::allocator<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry>>::resize((uint64_t)(a1 + 18), v1);
    uint64_t v4 = (void *)a1[15];
    if (v4 != a1 + 16)
    {
      do
      {
        uint64_t v5 = *v3 + 24 * v4[6];
        *(_OWORD *)uint64_t v5 = *((_OWORD *)v4 + 2);
        *(void *)(v5 + 16) = 0;
        int8x16_t v6 = (void *)v4[1];
        if (v6)
        {
          do
          {
            int8x16_t v7 = v6;
            int8x16_t v6 = (void *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            int8x16_t v7 = (void *)v4[2];
            BOOL v8 = *v7 == (void)v4;
            uint64_t v4 = v7;
          }
          while (!v8);
        }
        uint64_t v4 = v7;
      }
      while (v7 != a1 + 16);
    }
    uint64_t v9 = a1[18];
    uint64_t v10 = a1[19];
    if (v9 != v10)
    {
      uint64_t v11 = 0;
      do
      {
        *(void *)(v9 + 16) = v11;
        v11 += *(void *)(v9 + 8) + 1;
        v9 += 24;
      }
      while (v9 != v10);
    }
  }
}

void llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::addLoadCommand<(llvm::MachO::LoadCommandType)2>()
{
}

void std::vector<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry,std::allocator<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry,std::allocator<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void std::vector<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry,std::allocator<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry>>::__append(void **a1, unint64_t a2)
{
  int8x16_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  int8x16_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      size_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v4, v11);
    }
    else {
      size_t v12 = 0;
    }
    int8x16_t v14 = &v12[24 * v8];
    int8x8_t v15 = &v12[24 * v11];
    size_t v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    long long v17 = &v14[v16];
    int8x16_t v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)2>::~MachOBuilderLoadCommand()
{
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)2>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)2>::write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int8x16_t v5 = *(int8x16_t *)(a1 + 8);
  int8x8_t v6 = *(int8x8_t *)(a1 + 24);
  int8x16_t v7 = vrev32q_s8(v5);
  int8x8_t v8 = vrev32_s8(v6);
  if (a5) {
    unsigned int v9 = -1;
  }
  else {
    unsigned int v9 = 0;
  }
  int8x16_t v10 = (int8x16_t)vdupq_n_s32(v9);
  uint64_t v11 = a2 + a4;
  *(int8x16_t *)uint64_t v11 = vbslq_s8(v10, v7, v5);
  *(int8x8_t *)(v11 + 16) = vbsl_s8(*(int8x8_t *)v10.i8, v8, v6);
  return a4 + 24;
}

void **std::__split_buffer<std::unique_ptr<llvm::orc::MachOBuilderLoadCommandBase>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<llvm::orc::MachOBuilderLoadCommandBase>>::__destruct_at_end[abi:nn180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      unint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        unint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::write(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 40;
  *(_DWORD *)(a1 + 16) = ((*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3) + *(_DWORD *)(a1 + 56);
  long long v7 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v7;
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = 32;
  while (v8 != v6)
  {
    uint64_t v11 = *(void *)(v8 + 16);
    uint64_t v10 = v8 + 16;
    uint64_t v9 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, void))(v11 + 24))(v10, a2, a3, v9, 0);
    uint64_t v8 = *(void *)(v10 - 8);
  }
  size_t v12 = *(uint64_t **)(a1 + 64);
  size_t v13 = *(uint64_t **)(a1 + 72);
  while (v12 != v13)
  {
    uint64_t v14 = *v12++;
    uint64_t v9 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)v14 + 24))(v14, a2, a3, v9, 0);
  }
  uint64_t v15 = llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::writeSectionContent(a1, (uint64_t)a2, a3, v9);
  uint64_t v16 = llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::writeRelocations(a1, (uint64_t)a2, a3, v15);
  uint64_t result = llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::writeSymbols((void *)a1, (uint64_t)a2, a3, v16);
  uint64_t v19 = *(void *)(a1 + 144);
  uint64_t v18 = *(void *)(a1 + 152);
  if (v19 != v18)
  {
    uint64_t v20 = result;
    do
    {
      uint64_t result = (uint64_t)memcpy((char *)a2 + v20, *(const void **)v19, *(void *)(v19 + 8));
      uint64_t v21 = *(void *)(v19 + 8) + v20;
      uint64_t v20 = v21 + 1;
      *((unsigned char *)a2 + v21) = 0;
      v19 += 24;
    }
    while (v19 != v18);
  }
  return result;
}

uint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::writeSectionContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int8x16_t v5 = (void *)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6 != (void *)(a1 + 40))
  {
    do
    {
      uint64_t v8 = (uint64_t *)v6[13];
      uint64_t v9 = (uint64_t *)v6[14];
      while (v8 != v9)
      {
        uint64_t v10 = *v8;
        uint64_t v11 = *(const void **)(*v8 + 104);
        if (v11)
        {
          if (a4 != *(_DWORD *)(v10 + 48))
          {
            do
            {
              *(unsigned char *)(a2 + a4++) = 0;
              uint64_t v10 = *v8;
            }
            while (a4 != *(_DWORD *)(*v8 + 48));
            uint64_t v11 = *(const void **)(v10 + 104);
          }
          memcpy((void *)(a2 + a4), v11, *(void *)(v10 + 112));
          a4 += *(void *)(*v8 + 112);
        }
        ++v8;
      }
      uint64_t v6 = (void *)v6[1];
    }
    while (v6 != v5);
  }
  return a4;
}

uint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::writeRelocations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int8x16_t v5 = (void *)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6 != (void *)(a1 + 40))
  {
    do
    {
      uint64_t v8 = v6[13];
      uint64_t v9 = v6[14];
      while (v8 != v9)
      {
        uint64_t v10 = *(uint64_t **)(*(void *)v8 + 160);
        uint64_t v11 = *(uint64_t **)(*(void *)v8 + 168);
        uint64_t v12 = a4 & 7;
        if (v10 != v11 && v12 != 0)
        {
          bzero((void *)(a2 + a4), 8 - v12);
          a4 -= a4 | 0xFFFFFFFFFFFFFFF8;
          uint64_t v10 = *(uint64_t **)(*(void *)v8 + 160);
          uint64_t v11 = *(uint64_t **)(*(void *)v8 + 168);
        }
        while (v10 != v11)
        {
          uint64_t v14 = *v10;
          v10 += 3;
          *(void *)(a2 + a4) = v14;
          a4 += 8;
        }
        v8 += 8;
      }
      uint64_t v6 = (void *)v6[1];
    }
    while (v6 != v5);
  }
  return a4;
}

uint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::writeSymbols(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  long long v7 = (long long *)a1[12];
  uint64_t v8 = (long long *)a1[13];
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1 + 5;
  for (unint64_t i = (void *)a1[6]; i != v10; unint64_t i = (void *)i[1])
  {
    for (j = (uint64_t *)i[13]; j != (uint64_t *)i[14]; ++j)
    {
      uint64_t v13 = *j;
      v9 += (uint64_t)(*(void *)(v13 + 144) - *(void *)(v13 + 136)) >> 4;
    }
  }
  if (v9)
  {
    if ((a4 & 0xF) != 0)
    {
      bzero((void *)(a2 + a4), 16 - (a4 & 0xF));
      uint64_t v4 = (v4 | 0xF) + 1;
      long long v7 = (long long *)a1[12];
      uint64_t v8 = (long long *)a1[13];
    }
    while (v7 != v8)
    {
      long long v14 = *v7++;
      *(_OWORD *)(a2 + v4) = v14;
      v4 += 16;
    }
    for (k = (void *)a1[6]; k != v10; k = (void *)k[1])
    {
      uint64_t v16 = k[13];
      uint64_t v17 = k[14];
      while (v16 != v17)
      {
        uint64_t v18 = *(long long **)(*(void *)v16 + 136);
        uint64_t v19 = *(long long **)(*(void *)v16 + 144);
        while (v18 != v19)
        {
          long long v20 = *v18++;
          *(_OWORD *)(a2 + v4) = v20;
          v4 += 16;
        }
        v16 += 8;
      }
    }
  }
  return v4;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_0>(uint64_t *a1@<X0>, unint64_t *a2@<X3>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  if (!llvm::jitlink::LinkGraph::findSectionByName(*(void *)(*a1 + 8), (uint64_t)"__jitlink_synth_debug_object", 28, a2))
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (*(_DWORD *)(v5 + 192))
    {
      uint64_t v6 = *(void **)(v5 + 184);
      uint64_t v7 = *(unsigned int *)(v5 + 200);
      if (v7)
      {
        uint64_t v8 = 24 * v7;
        uint64_t v9 = v6;
        while (*v9 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v9 += 3;
          v8 -= 24;
          if (!v8) {
            goto LABEL_2;
          }
        }
      }
      else
      {
        uint64_t v9 = v6;
      }
      uint64_t v10 = &v6[3 * v7];
      if (v9 != v10)
      {
        uint64_t v11 = &v33;
LABEL_12:
        uint64_t v12 = v9[2];
        if (*(void *)(v12 + 8) < 8uLL || **(void **)v12 != 0x2C46524157445F5FLL) {
          goto LABEL_38;
        }
        uint64_t v28 = v11;
        uint64_t v29 = (char *)v11;
        uint64_t v30 = (char *)v11;
        uint64_t v31 = 8;
        int v32 = 0;
        uint64_t v13 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v12 + 56);
        uint64_t v15 = *(void *)(v12 + 56) + 8 * *(unsigned int *)(v12 + 72);
        if ((void *)v15 != v13)
        {
          uint64_t v16 = v13;
          uint64_t v17 = v14;
          do
          {
            uint64_t v18 = *v16;
            llvm::SmallPtrSetImplBase::insert_imp((llvm::SmallPtrSetImplBase *)&v29, *(const void **)(*v16 + 16));
            if (v19) {
              *(void *)(v18 + 24) |= 0x1000000000000000uLL;
            }
            while (++v16 != v17)
            {
              if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                goto LABEL_22;
              }
            }
            uint64_t v16 = v17;
LABEL_22:
            ;
          }
          while (v16 != (void *)v15);
        }
        long long v20 = (const void **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v12 + 32);
        uint64_t v22 = *(void *)(v12 + 32) + 8 * *(unsigned int *)(v12 + 48);
        if ((const void **)v22 != v20)
        {
          unint64_t v23 = v20;
          long long v24 = v21;
          do
          {
            uint64_t v25 = *v23;
            imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)&v29, *v23);
            if (v30 == v29) {
              uint64_t v27 = (uint64_t *)((char *)&v31 + 4);
            }
            else {
              uint64_t v27 = &v31;
            }
            if (imp == (const void **)&v30[8 * *(unsigned int *)v27]) {
              llvm::jitlink::LinkGraph::addAnonymousSymbol(*(void *)(v4 + 8), (uint64_t)v25, 0, 0, 0, 1);
            }
            while (++v23 != v24)
            {
              if (((unint64_t)*v23 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                goto LABEL_34;
              }
            }
            unint64_t v23 = v24;
LABEL_34:
            ;
          }
          while (v23 != (const void **)v22);
        }
        if (v30 != v29) {
          free(v30);
        }
        uint64_t v11 = v28;
LABEL_38:
        while (1)
        {
          v9 += 3;
          if (v9 == v10) {
            break;
          }
          if (*v9 < 0xFFFFFFFFFFFFFFFELL)
          {
            if (v9 != v10) {
              goto LABEL_12;
            }
            break;
          }
        }
      }
    }
  }
LABEL_2:
  *a3 = 0;
}

__n128 llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::MoveImpl<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_0>(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::DestroyImpl<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_0>(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_1>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 16))();
}

__n128 llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::MoveImpl<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_1>(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::DestroyImpl<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_1>(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_2>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 24))();
}

__n128 llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::MoveImpl<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_2>(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::DestroyImpl<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_2>(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

llvm::raw_ostream *llvm::orc::operator<<(llvm::raw_ostream *this, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v4 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 123);
  }
  else
  {
    *((void *)this + 4) = v4 + 1;
    unsigned char *v4 = 123;
  }
  uint64_t v5 = (size_t **)llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(a2);
  uint64_t v7 = *(void *)a2 + 8 * *(unsigned int *)(a2 + 16);
  if ((size_t **)v7 != v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = v6;
    char v10 = 0;
    do
    {
      if (v10)
      {
        uint64_t v11 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v11 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 44);
        }
        else
        {
          *((void *)this + 4) = v11 + 1;
          unsigned char *v11 = 44;
        }
      }
      uint64_t v12 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v12 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 32);
      }
      else
      {
        *((void *)this + 4) = v12 + 1;
        *uint64_t v12 = 32;
      }
      uint64_t v13 = *v8++;
      llvm::raw_ostream::operator<<(this, v13 + 2, *v13);
      while (v8 != v9)
      {
        if (((unint64_t)*v8 | 8) != 0xFFFFFFFFFFFFFFF8) {
          goto LABEL_18;
        }
        ++v8;
      }
      uint64_t v8 = v9;
LABEL_18:
      char v10 = 1;
    }
    while (v8 != (size_t **)v7);
  }
  long long v14 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v14 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 32);
  }
  else
  {
    *((void *)this + 4) = v14 + 1;
    *long long v14 = 32;
  }
  uint64_t v15 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v15 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 125);
  }
  else
  {
    *((void *)this + 4) = v15 + 1;
    *uint64_t v15 = 125;
  }
  return this;
}

llvm::raw_ostream *llvm::orc::operator<<(llvm::raw_ostream *this, size_t ***a2)
{
  uint64_t v4 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v4 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 91);
  }
  else
  {
    *((void *)this + 4) = v4 + 1;
    unsigned char *v4 = 91;
  }
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v6 != v5)
  {
    char v7 = 0;
    do
    {
      if (v7)
      {
        uint64_t v8 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v8 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 44);
        }
        else
        {
          *((void *)this + 4) = v8 + 1;
          *uint64_t v8 = 44;
        }
      }
      uint64_t v9 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v9 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 32);
      }
      else
      {
        *((void *)this + 4) = v9 + 1;
        *uint64_t v9 = 32;
      }
      char v10 = *v6++;
      llvm::raw_ostream::operator<<(this, v10 + 2, *v10);
      char v7 = 1;
    }
    while (v6 != v5);
  }
  uint64_t v11 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v11 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 32);
  }
  else
  {
    *((void *)this + 4) = v11 + 1;
    unsigned char *v11 = 32;
  }
  uint64_t v12 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v12 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 93);
  }
  else
  {
    *((void *)this + 4) = v12 + 1;
    *uint64_t v12 = 93;
  }
  return this;
}

llvm::raw_ostream *llvm::orc::operator<<(llvm::raw_ostream *result, uint64_t a2)
{
  BOOL v3 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v3 >= *((void *)result + 3))
  {
    __n128 result = llvm::raw_ostream::write(result, 123);
  }
  else
  {
    *((void *)result + 4) = v3 + 1;
    *BOOL v3 = 123;
  }
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v4 = *(unsigned int *)(a2 + 16);
    if (v4)
    {
      uint64_t v5 = 24 * v4;
      uint64_t v6 = *(void **)a2;
      while ((*v6 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v6 += 3;
        v5 -= 24;
        if (!v5) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      uint64_t v6 = *(void **)a2;
    }
    uint64_t v9 = *(void *)a2 + 24 * v4;
LABEL_17:
    if (v6 != (void *)v9)
    {
      while (1)
      {
        v6 += 3;
        if (v6 == (void *)v9) {
          break;
        }
        if ((*v6 | 8) != 0xFFFFFFFFFFFFFFF8) {
          goto LABEL_17;
        }
      }
    }
  }
LABEL_9:
  char v7 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v7 >= *((void *)result + 3))
  {
    __n128 result = llvm::raw_ostream::write(result, 32);
  }
  else
  {
    *((void *)result + 4) = v7 + 1;
    *char v7 = 32;
  }
  uint64_t v8 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v8 >= *((void *)result + 3)) {
    return llvm::raw_ostream::write(result, 125);
  }
  *((void *)result + 4) = v8 + 1;
  *uint64_t v8 = 125;
  return result;
}

{
  unsigned char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char v9;
  unsigned char *v10;
  unsigned char *v11;
  unsigned char *v12;
  unsigned char *v13;

  BOOL v3 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v3 >= *((void *)result + 3))
  {
    __n128 result = llvm::raw_ostream::write(result, 123);
  }
  else
  {
    *((void *)result + 4) = v3 + 1;
    *BOOL v3 = 123;
  }
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v4 = *(void **)a2;
    uint64_t v5 = *(unsigned int *)(a2 + 16);
    if (v5)
    {
      uint64_t v6 = 32 * v5;
      char v7 = *(void **)a2;
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 4;
        v6 -= 32;
        if (!v6) {
          goto LABEL_24;
        }
      }
    }
    else
    {
      char v7 = *(void **)a2;
    }
    uint64_t v8 = &v4[4 * v5];
    if (v7 != v8)
    {
      uint64_t v9 = 0;
LABEL_13:
      if (v9)
      {
        char v10 = (unsigned char *)*((void *)result + 4);
        if ((unint64_t)v10 >= *((void *)result + 3))
        {
          __n128 result = llvm::raw_ostream::write(result, 44);
        }
        else
        {
          *((void *)result + 4) = v10 + 1;
          *char v10 = 44;
        }
      }
      uint64_t v11 = (unsigned char *)*((void *)result + 4);
      if ((unint64_t)v11 >= *((void *)result + 3))
      {
        __n128 result = llvm::raw_ostream::write(result, 32);
      }
      else
      {
        *((void *)result + 4) = v11 + 1;
        unsigned char *v11 = 32;
      }
      __n128 result = llvm::orc::operator<<(result, (uint64_t)v7);
      while (1)
      {
        v7 += 4;
        if (v7 == v8) {
          break;
        }
        if ((*v7 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v9 = 1;
          if (v7 != v8) {
            goto LABEL_13;
          }
          break;
        }
      }
    }
  }
LABEL_24:
  uint64_t v12 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v12 >= *((void *)result + 3))
  {
    __n128 result = llvm::raw_ostream::write(result, 32);
  }
  else
  {
    *((void *)result + 4) = v12 + 1;
    *uint64_t v12 = 32;
  }
  uint64_t v13 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v13 >= *((void *)result + 3)) {
    return llvm::raw_ostream::write(result, 125);
  }
  *((void *)result + 4) = v13 + 1;
  *uint64_t v13 = 125;
  return result;
}

llvm::raw_ostream *llvm::orc::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  BOOL v3 = (unsigned char *)*((void *)a1 + 4);
  if (*((unsigned char **)a1 + 3) == v3)
  {
    a1 = llvm::raw_ostream::write(a1, "(", 1uLL);
  }
  else
  {
    *BOOL v3 = 40;
    ++*((void *)a1 + 4);
  }
  int v4 = *(char *)(*(void *)a2 + 31);
  if (v4 >= 0) {
    uint64_t v5 = (const char *)(*(void *)a2 + 8);
  }
  else {
    uint64_t v5 = *(const char **)(*(void *)a2 + 8);
  }
  if (v4 >= 0) {
    size_t v6 = *(unsigned __int8 *)(*(void *)a2 + 31);
  }
  else {
    size_t v6 = *(void *)(*(void *)a2 + 16);
  }
  char v7 = llvm::raw_ostream::write(a1, v5, v6);
  uint64_t v8 = (_WORD *)*((void *)v7 + 4);
  if (*((void *)v7 + 3) - (void)v8 > 1uLL)
  {
    *uint64_t v8 = 8236;
    *((void *)v7 + 4) += 2;
  }
  else
  {
    char v7 = llvm::raw_ostream::write(v7, ", ", 2uLL);
  }
  __n128 result = llvm::orc::operator<<(v7, a2 + 8);
  char v10 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v10) {
    return llvm::raw_ostream::write(result, ")", 1uLL);
  }
  *char v10 = 41;
  ++*((void *)result + 4);
  return result;
}

void *llvm::orc::EPCDynamicLibrarySearchGenerator::Load@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  __n128 result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)(a1 + 72) + 16))(&v5);
  if ((v6 & 1) == 0) {
    operator new();
  }
  uint64_t v4 = v5;
  *(unsigned char *)(a2 + 8) |= 1u;
  *(void *)a2 = v4;
  return result;
}

void llvm::orc::EPCDynamicLibrarySearchGenerator::tryToGenerate(void *a1@<X0>, unint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t **a5@<X5>, void *a6@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (a3 == 1 || (uint64_t v7 = *a5, v8 = a5[1], *a5 == v8))
  {
    *a6 = 0;
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v12 = a1 + 18;
    uint64_t v29 = 0;
    do
    {
      unint64_t v13 = a1[21];
      if (v13 < 8) {
        goto LABEL_8;
      }
      long long v14 = v12;
      if ((v13 & 2) == 0) {
        long long v14 = (void *)*v12;
      }
      if ((*(unsigned int (**)(void *, uint64_t *))(v13 & 0xFFFFFFFFFFFFFFF8))(v14, v7))
      {
LABEL_8:
        uint64_t v15 = *v7;
        uint64_t v26 = v15;
        if ((unint64_t)(v15 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 1uLL);
        }
        llvm::orc::SymbolLookupSet::add((uint64_t *)&v27, &v26, 1);
        if ((unint64_t)(v26 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v26 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
      }
      v7 += 2;
    }
    while (v7 != v8);
    uint64_t v16 = a1[16];
    v25[0] = a1[17];
    v25[1] = &v27;
    *(void *)&long long v22 = a1;
    *((void *)&v22 + 1) = a4;
    unint64_t v17 = *a2;
    *a2 = 0;
    long long v23 = v17;
    long long v24 = 0uLL;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__init_with_size[abi:nn180100]<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*>((char *)&v23 + 8, v27, v28, ((char *)v28 - (char *)v27) >> 4);
    long long v30 = v22;
    long long v20 = v24;
    long long v21 = v23;
    long long v23 = 0uLL;
    long long v24 = 0uLL;
    uint64_t v18 = operator new(0x30uLL, (std::align_val_t)8uLL);
    uint64_t v33 = (void **)v32;
    uint64_t v34 = v18;
    long long v35 = xmmword_261E8D3D0;
    uint64_t v31 = 0;
    v32[0] = 0;
    *uint64_t v18 = v30;
    v18[1] = v21;
    v18[2] = v20;
    v32[1] = 0;
    v32[2] = 0;
    uint64_t v36 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>>::CallbacksHolder<llvm::orc::EPCDynamicLibrarySearchGenerator::tryToGenerate(llvm::orc::LookupState &,llvm::orc::LookupKind,llvm::orc::JITDylib &,llvm::orc::JITDylibLookupFlags,llvm::orc::SymbolLookupSet const&)::$_0,llvm::orc::EPCDynamicLibrarySearchGenerator::tryToGenerate(llvm::orc::LookupState &,llvm::orc::LookupKind,llvm::orc::JITDylib &,llvm::orc::JITDylibLookupFlags,llvm::orc::SymbolLookupSet const&)::$_0,void>::Callbacks
        + 4;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v33);
    uint64_t v19 = v31;
    uint64_t v31 = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    (*(void (**)(uint64_t, void *, uint64_t, _OWORD **))(*(void *)v16 + 24))(v16, v25, 1, &v34);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v34);
    *(void *)&long long v30 = (char *)&v23 + 8;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v30);
    if ((void)v23) {
      (*(void (**)(void))(*(void *)v23 + 8))(v23);
    }
    *a6 = 0;
    *(void *)&long long v30 = &v27;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v30);
  }
}

void llvm::orc::EPCDynamicLibrarySearchGenerator::~EPCDynamicLibrarySearchGenerator(llvm::orc::EPCDynamicLibrarySearchGenerator *this)
{
  *(void *)this = &unk_270DBDF88;
  uint64_t v2 = (void *)((char *)this + 144);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)this + 22);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v2);
  llvm::orc::DefinitionGenerator::~DefinitionGenerator(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_270DBDF88;
  uint64_t v2 = (void *)((char *)this + 144);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)this + 22);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v2);
  llvm::orc::DefinitionGenerator::~DefinitionGenerator(this);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>>::CallImpl<llvm::orc::EPCDynamicLibrarySearchGenerator::tryToGenerate(llvm::orc::LookupState &,llvm::orc::LookupKind,llvm::orc::JITDylib &,llvm::orc::JITDylibLookupFlags,llvm::orc::SymbolLookupSet const&)::$_0>(llvm::orc::InProgressLookupState **a1, long long *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (!(*((unsigned char *)a2 + 24) & 1))
  {
    long long v3 = *a2;
    long long v26 = *a2;
    uint64_t v27 = *((void *)a2 + 2);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    uint64_t v4 = *a1;
    uint64_t v22 = 0;
    memset(v23, 0, 12);
    uint64_t v5 = (uint64_t *)a1[3];
    char v6 = (uint64_t *)a1[4];
    if (v5 == v6) {
      goto LABEL_14;
    }
    uint64_t v7 = *(void *)v3;
    do
    {
      if (*(void *)v7)
      {
        uint64_t v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct(&v22, v5);
        __int16 v9 = *(_WORD *)(v7 + 8);
        v8[1] = *(void *)v7;
        *((_WORD *)v8 + 8) = v9;
      }
      v7 += 16;
      v5 += 2;
    }
    while (v5 != v6);
    if (!LODWORD(v23[0]))
    {
LABEL_14:
      uint64_t v21 = 0;
      llvm::orc::LookupState::continueLookup(a1 + 2, &v21);
      uint64_t v15 = v21;
      if (!v21)
      {
LABEL_16:
        llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap(&v22);
        return llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v26);
      }
    }
    else
    {
      unint64_t v10 = *((void *)v4 + 25);
      uint64_t v11 = a1[1];
      if (v10 < 8)
      {
        uint64_t v22 = 0;
        memset(v23, 0, 12);
        operator new();
      }
      uint64_t v12 = (void *)((char *)v4 + 176);
      uint64_t v18 = v22;
      int v19 = v23[0];
      uint64_t v13 = *(void *)((char *)v23 + 4);
      uint64_t v22 = 0;
      memset(v23, 0, 12);
      uint64_t v20 = v13;
      if ((v10 & 2) == 0) {
        uint64_t v12 = (void *)*v12;
      }
      (*(void (**)(uint64_t *__return_ptr, void *, llvm::orc::InProgressLookupState *, uint64_t *))(v10 & 0xFFFFFFFFFFFFFFF8))(&v25, v12, v11, &v18);
      llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap(&v18);
      uint64_t v17 = v25;
      uint64_t v25 = 0;
      llvm::orc::LookupState::continueLookup(a1 + 2, &v17);
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
      uint64_t v15 = v25;
      if (!v25) {
        goto LABEL_16;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    goto LABEL_16;
  }
  uint64_t v14 = *(void *)a2;
  *(void *)a2 = 0;
  *(void *)&long long v26 = 0;
  uint64_t v24 = v14;
  llvm::orc::LookupState::continueLookup(a1 + 2, &v24);
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  return llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v26);
}

__n128 llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>>::MoveImpl<llvm::orc::EPCDynamicLibrarySearchGenerator::tryToGenerate(llvm::orc::LookupState &,llvm::orc::LookupKind,llvm::orc::JITDylib &,llvm::orc::JITDylibLookupFlags,llvm::orc::SymbolLookupSet const&)::$_0>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>>::DestroyImpl<llvm::orc::EPCDynamicLibrarySearchGenerator::tryToGenerate(llvm::orc::LookupState &,llvm::orc::LookupKind,llvm::orc::JITDylib &,llvm::orc::JITDylibLookupFlags,llvm::orc::SymbolLookupSet const&)::$_0>(uint64_t a1)
{
  long long v3 = (void **)(a1 + 24);
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v3);
  uint64_t result = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void **)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(void *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    uint64_t v4 = (void **)a1;
    std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100](&v4);
  }
  return a1;
}

void std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__clear[abi:nn180100]((uint64_t *)v2);
    long long v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      char v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t llvm::orc::EPCGenericDylibManager::CreateWithDefaultBootstrapSymbols@<X0>(llvm::orc::EPCGenericDylibManager *this@<X0>, uint64_t a2@<X8>)
{
  v13[9] = *MEMORY[0x263EF8340];
  long long v11 = 0uLL;
  size_t v5 = llvm::orc::rt::SimpleExecutorDylibManagerInstanceName;
  uint64_t v12 = 0;
  v13[0] = &v11;
  v13[1] = llvm::orc::rt::SimpleExecutorDylibManagerInstanceName;
  if (llvm::orc::rt::SimpleExecutorDylibManagerInstanceName) {
    size_t v5 = strlen((const char *)llvm::orc::rt::SimpleExecutorDylibManagerInstanceName);
  }
  int32x2_t v13[2] = v5;
  v13[3] = (char *)&v11 + 8;
  size_t v6 = llvm::orc::rt::SimpleExecutorDylibManagerOpenWrapperName;
  v13[4] = llvm::orc::rt::SimpleExecutorDylibManagerOpenWrapperName;
  if (llvm::orc::rt::SimpleExecutorDylibManagerOpenWrapperName) {
    size_t v6 = strlen((const char *)llvm::orc::rt::SimpleExecutorDylibManagerOpenWrapperName);
  }
  v13[5] = v6;
  v13[6] = &v12;
  size_t v7 = llvm::orc::rt::SimpleExecutorDylibManagerLookupWrapperName;
  v13[7] = llvm::orc::rt::SimpleExecutorDylibManagerLookupWrapperName;
  if (llvm::orc::rt::SimpleExecutorDylibManagerLookupWrapperName) {
    size_t v7 = strlen((const char *)llvm::orc::rt::SimpleExecutorDylibManagerLookupWrapperName);
  }
  v13[8] = v7;
  uint64_t result = llvm::orc::ExecutorProcessControl::getBootstrapSymbols((uint64_t)this, (uint64_t)v13, 3, &v10);
  __int16 v9 = v10;
  if (v10)
  {
    *(unsigned char *)(a2 + 32) |= 1u;
    this = v9;
  }
  else
  {
    *(_OWORD *)(a2 + 8) = v11;
    *(void *)(a2 + 24) = v12;
    *(unsigned char *)(a2 + 32) &= ~1u;
  }
  *(void *)a2 = this;
  return result;
}

void llvm::orc::EPCGenericDylibManager::open(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v5 = a4;
  char v9 = 0;
  uint64_t v8 = 0;
  uint64_t v4 = a1[2];
  v7[0] = *a1;
  v7[1] = v4;
  llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr> ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>,unsigned long long)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr> ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>,unsigned long long),llvm::Expected<llvm::orc::ExecutorAddr> &,llvm::orc::ExecutorAddr&,llvm::StringRef &,unsigned long long &>(llvm::orc::ExecutorAddr,llvm::Expected<llvm::orc::ExecutorAddr> &,llvm::orc::ExecutorAddr&,llvm::StringRef &,unsigned long long &)::{lambda(char const*,unsigned long)#1},llvm::Expected<llvm::orc::ExecutorAddr>,llvm::orc::ExecutorAddr,llvm::StringRef,unsigned long long>((uint64_t)v7, (uint64_t)&v8, a1 + 1, (uint64_t)v6, &v5);
}

void *llvm::orc::EPCGenericDylibManager::lookupAsync(uint64_t a1, uint64_t a2, size_t ***a3, long long *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  size_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 24);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v36, a4);
  uint64_t v9 = v7[3];
  long long v11 = *a3;
  uint64_t v10 = a3[1];
  if (*a3 == v10)
  {
    size_t v15 = 24;
    *((void *)&v45 + 1) = 24;
LABEL_7:
    uint64_t v14 = (long long *)malloc_type_malloc(v15, 0xBCDE199DuLL);
    *(void *)&long long v45 = v14;
    size_t v15 = *((void *)&v45 + 1);
    goto LABEL_8;
  }
  uint64_t v12 = 8;
  do
  {
    uint64_t v13 = *v11;
    v11 += 2;
    v12 += *v13 + 9;
  }
  while (v11 != v10);
  uint64_t v14 = 0;
  size_t v15 = v12 + 16;
  *(void *)&long long v45 = 0;
  *((void *)&v45 + 1) = v12 + 16;
  if ((unint64_t)(v12 + 16) >= 9) {
    goto LABEL_7;
  }
LABEL_8:
  if (v15 < 8) {
    goto LABEL_16;
  }
  uint64_t v16 = &v45;
  uint64_t v17 = v15 == 8 ? &v45 : v14;
  *(void *)uint64_t v17 = *(void *)(a1 + 8);
  if ((v15 & 0xFFFFFFFFFFFFFFF8) == 8) {
    goto LABEL_16;
  }
  if (v15 != 8) {
    uint64_t v16 = v14;
  }
  *((void *)v16 + 1) = a2;
  if ((v15 & 0xFFFFFFFFFFFFFFF8) == 0x10)
  {
LABEL_16:
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v35);
    goto LABEL_17;
  }
  if (v15 == 8) {
    uint64_t v24 = &v45;
  }
  else {
    uint64_t v24 = v14;
  }
  *((void *)v24 + 2) = ((char *)a3[1] - (char *)*a3) >> 4;
  uint64_t v25 = *a3;
  long long v26 = a3[1];
  if (*a3 != v26)
  {
    unint64_t v27 = v15 - 24;
    if (v15 == 8) {
      uint64_t v14 = &v45;
    }
    uint64_t v28 = (size_t *)v14 + 3;
    do
    {
      size_t v29 = v27 - 8;
      if (v27 < 8) {
        goto LABEL_16;
      }
      long long v30 = *v25 + 2;
      size_t v31 = **v25;
      int v32 = *((_DWORD *)v25 + 2);
      size_t *v28 = v31;
      uint64_t v33 = (BOOL *)(v28 + 1);
      if (v31)
      {
        BOOL v34 = v29 >= v31;
        v29 -= v31;
        if (!v34) {
          goto LABEL_16;
        }
        memcpy(v33, v30, v31);
        v33 += v31;
      }
      if (!v29) {
        goto LABEL_16;
      }
      *uint64_t v33 = v32 == 0;
      uint64_t v28 = (size_t *)(v33 + 1);
      unint64_t v27 = v29 - 1;
      v25 += 2;
    }
    while (v25 != v26);
  }
  *(_OWORD *)long long v35 = v45;
  long long v45 = 0uLL;
LABEL_17:
  if (*((void *)&v45 + 1) >= 9uLL)
  {
    uint64_t v18 = (void *)v45;
LABEL_21:
    free(v18);
    goto LABEL_22;
  }
  if (!*((void *)&v45 + 1))
  {
    uint64_t v18 = (void *)v45;
    if ((void)v45) {
      goto LABEL_21;
    }
  }
LABEL_22:
  if (!v35[1])
  {
    char v38 = v35[0];
    if (v35[0])
    {
      getErrorErrorCat();
      uint64_t v41 = 3;
      *(void *)&v42[0] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
  }
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v37, &v36);
  int v19 = v35[1];
  if (v35[1] <= (void *)8) {
    uint64_t v20 = v35;
  }
  else {
    uint64_t v20 = (void **)v35[0];
  }
  uint64_t v41 = v9;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v42, v37);
  uint64_t v43 = v41;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v44, v42);
  *(void *)&long long v45 = v43;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v45 + 8, &v44);
  uint64_t v21 = operator new(0x28uLL, (std::align_val_t)8uLL);
  char v38 = v21;
  long long v39 = xmmword_261E8A730;
  void *v21 = v45;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v21 + 1), (long long *)((char *)&v45 + 8));
  uint64_t v40 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSD_IJhhEEEEEEEEEESE_SE_NSC_INSD_IJNSC_IcEEbEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISM_S8_ZNS2_22EPCGenericDylibManager11lookupAsyncENS2_12ExecutorAddrERKNS2_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS2_17ExecutorSymbolDefENSX_9allocatorISZ_EEEEEEEEEE3__0JSR_SR_SS_EEEvOT0_SR_OT1_DpRKT2_EUlOT_PKcmE_S16_JSR_SR_SS_EEEvS1G_S18_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1G_EUlS4_E_S1Q_vE9CallbacksE
      + 4;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)&v45 + 1);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v44);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v42);
  (*(void (**)(void *, uint64_t, void **, void **, void *))(*v7 + 56))(v7, v8, &v38, v20, v19);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v38);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v37);
  if (v35[1] >= (void *)9)
  {
    uint64_t v22 = v35[0];
LABEL_30:
    free(v22);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v36);
  }
  if (!v35[1])
  {
    uint64_t v22 = v35[0];
    if (v35[0]) {
      goto LABEL_30;
    }
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v36);
}

void llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr> ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>,unsigned long long)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr> ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>,unsigned long long),llvm::Expected<llvm::orc::ExecutorAddr> &,llvm::orc::ExecutorAddr&,llvm::StringRef &,unsigned long long &>(llvm::orc::ExecutorAddr,llvm::Expected<llvm::orc::ExecutorAddr> &,llvm::orc::ExecutorAddr&,llvm::StringRef &,unsigned long long &)::{lambda(char const*,unsigned long)#1},llvm::Expected<llvm::orc::ExecutorAddr>,llvm::orc::ExecutorAddr,llvm::StringRef,unsigned long long>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  if (*(unsigned char *)(a2 + 8)) {
    *(void *)a2 = 0;
  }
  uint64_t v8 = *(void *)(a4 + 8);
  uint64_t v9 = v8 + 24;
  if ((unint64_t)(v8 + 24) < 9)
  {
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v17);
    goto LABEL_13;
  }
  uint64_t v10 = malloc_type_malloc(v8 + 24, 0xBCDE199DuLL);
  long long v11 = v10;
  *uint64_t v10 = *a3;
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0xFFFFFFFFFFFFFFF0)
  {
    uint64_t v12 = *(const void **)a4;
    size_t v13 = *(void *)(a4 + 8);
    v10[1] = v13;
    uint64_t v14 = v10 + 2;
    unint64_t v15 = v8 + 8;
    if (v13)
    {
      BOOL v16 = v15 >= v13;
      v15 -= v13;
      if (!v16) {
        goto LABEL_12;
      }
      memcpy(v10 + 2, v12, v13);
      uint64_t v14 = (void *)((char *)v14 + v13);
    }
    if (v15 >= 8)
    {
      *uint64_t v14 = *a5;
      uint64_t v17 = v11;
      uint64_t v18 = v9;
      goto LABEL_13;
    }
  }
LABEL_12:
  llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v17);
  free(v11);
LABEL_13:
  if (!v18)
  {
    if (v17)
    {
      getErrorErrorCat();
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
  }
  llvm::orc::ExecutorProcessControl::callWrapper();
}

uint64_t llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 24);
  uint64_t v3 = *(void **)a1;
  if (v2)
  {
    *(void *)a1 = 0;
    if (v3) {
      (*(void (**)(void *))(*(void *)v3 + 8))(v3);
    }
  }
  else if (v3)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSD_IJhhEEEEEEEEEESE_SE_NSC_INSD_IJNSC_IcEEbEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISM_S8_ZNS2_22EPCGenericDylibManager11lookupAsyncENS2_12ExecutorAddrERKNS2_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS2_17ExecutorSymbolDefENSX_9allocatorISZ_EEEEEEEEEE3__0JSR_SR_SS_EEEvOT0_SR_OT1_DpRKT2_EUlOT_PKcmE_S16_JSR_SR_SS_EEEvS1G_S18_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1G_EUlS4_E_EEvPvRS4_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  char v2 = *(void **)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v4, (long long *)(a1 + 8));
  v5[0] = v2;
  v5[1] = v3;
  operator new();
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSD_IJhhEEEEEEEEEESE_SE_NSC_INSD_IJNSC_IcEEbEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISM_S8_ZNS2_22EPCGenericDylibManager11lookupAsyncENS2_12ExecutorAddrERKNS2_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS2_17ExecutorSymbolDefENSX_9allocatorISZ_EEEEEEEEEE3__0JSR_SR_SS_EEEvOT0_SR_OT1_DpRKT2_EUlOT_PKcmE_S16_JSR_SR_SS_EEEvS1G_S18_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1G_EUlS4_E_EEvPvS1R_(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (long long *)(a2 + 8));
}

void *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSD_IJhhEEEEEEEEEESE_SE_NSC_INSD_IJNSC_IcEEbEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISM_S8_ZNS2_22EPCGenericDylibManager11lookupAsyncENS2_12ExecutorAddrERKNS2_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS2_17ExecutorSymbolDefENSX_9allocatorISZ_EEEEEEEEEE3__0JSR_SR_SS_EEEvOT0_SR_OT1_DpRKT2_EUlOT_PKcmE_S16_JSR_SR_SS_EEEvS1G_S18_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1G_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS9_IJhhEEEEEEEEEESA_SA_NS8_INS9_IJNS8_IcEEbEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISI_S3_ZNS0_22EPCGenericDylibManager11lookupAsyncENS0_12ExecutorAddrERKNS0_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS0_17ExecutorSymbolDefENST_9allocatorISV_EEEEEEEEEE3__0JSN_SN_SO_EEEvOT0_SN_OT1_DpRKT2_EUlOT_PKcmE_S12_JSN_SN_SO_EEEvS1C_S14_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1C_ENUlS1K_E_clES1K_EUlvE_ED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBDFB0;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 9)
  {
    uint64_t v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    if (v3) {
      goto LABEL_5;
    }
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS9_IJhhEEEEEEEEEESA_SA_NS8_INS9_IJNS8_IcEEbEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISI_S3_ZNS0_22EPCGenericDylibManager11lookupAsyncENS0_12ExecutorAddrERKNS0_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS0_17ExecutorSymbolDefENST_9allocatorISV_EEEEEEEEEE3__0JSN_SN_SO_EEEvOT0_SN_OT1_DpRKT2_EUlOT_PKcmE_S12_JSN_SN_SO_EEEvS1C_S14_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1C_ENUlS1K_E_clES1K_EUlvE_ED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBDFB0;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2) {
      goto LABEL_8;
    }
    uint64_t v3 = *(void **)(a1 + 40);
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = *(void **)(a1 + 40);
  }
  free(v3);
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS9_IJhhEEEEEEEEEESA_SA_NS8_INS9_IJNS8_IcEEbEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISI_S3_ZNS0_22EPCGenericDylibManager11lookupAsyncENS0_12ExecutorAddrERKNS0_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS0_17ExecutorSymbolDefENST_9allocatorISV_EEEEEEEEEE3__0JSN_SN_SO_EEEvOT0_SN_OT1_DpRKT2_EUlOT_PKcmE_S12_JSN_SN_SO_EEEvS1C_S14_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1C_ENUlS1K_E_clES1K_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS9_IJhhEEEEEEEEEESA_SA_NS8_INS9_IJNS8_IcEEbEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISI_S3_ZNS0_22EPCGenericDylibManager11lookupAsyncENS0_12ExecutorAddrERKNS0_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS0_17ExecutorSymbolDefENST_9allocatorISV_EEEEEEEEEE3__0JSN_SN_SO_EEEvOT0_SN_OT1_DpRKT2_EUlOT_PKcmE_S12_JSN_SN_SO_EEEvS1C_S14_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1C_ENUlS1K_E_clES1K_EUlvE_E3runEv(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unint64_t v2 = (void *)(a1 + 8);
  *(_OWORD *)long long v11 = *(_OWORD *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v16 = 0;
  long long v17 = 0uLL;
  char v18 = 0;
  if (v11[1])
  {
    if (v11[1] <= (void *)8) {
      uint64_t v3 = (unsigned __int8 *)v11;
    }
    else {
      uint64_t v3 = (unsigned __int8 *)v11[0];
    }
  }
  else
  {
    uint64_t v14 = v11[0];
    if (v11[0])
    {
      getErrorErrorCat();
      uint64_t v12 = 3;
      size_t v13 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    uint64_t v3 = (unsigned __int8 *)v11;
  }
  llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSTuple<unsigned char,unsigned char>>>>,llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>>::deserialize(&v15, (uint64_t)&v16, v3, (unint64_t)v11[1]);
  uint64_t v4 = v15;
  if (v15)
  {
    uint64_t v15 = 0;
    char v21 = v18 & 1;
    if (v18)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = v16;
      long long v20 = v17;
      long long v17 = 0uLL;
    }
    uint64_t v16 = 0;
    uint64_t v19 = v5;
    char v24 = -1;
    uint64_t v22 = v4;
    uint64_t v8 = *(void *)(a1 + 32);
    if ((v8 & 2) == 0) {
      unint64_t v2 = (void *)*v2;
    }
    (*(void (**)(void *, uint64_t *))(v8 & 0xFFFFFFFFFFFFFFF8))(v2, &v22);
    llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v22);
    llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v19);
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  else
  {
    char v21 = v18 & 1;
    uint64_t v6 = v16;
    if (v18)
    {
      uint64_t v16 = 0;
    }
    else
    {
      long long v7 = v17;
      uint64_t v16 = 0;
      long long v17 = 0uLL;
      long long v23 = v7;
      long long v20 = 0uLL;
    }
    uint64_t v19 = 0;
    char v24 = v18 & 1;
    uint64_t v22 = v6;
    uint64_t v9 = *(void *)(a1 + 32);
    if ((v9 & 2) == 0) {
      unint64_t v2 = (void *)*v2;
    }
    (*(void (**)(void *, uint64_t *))(v9 & 0xFFFFFFFFFFFFFFF8))(v2, &v22);
    llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v22);
    llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v19);
  }
  llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v16);
  if (v11[1] >= (void *)9)
  {
    uint64_t v10 = v11[0];
LABEL_27:
    free(v10);
    return;
  }
  if (!v11[1])
  {
    uint64_t v10 = v11[0];
    if (v11[0]) {
      goto LABEL_27;
    }
  }
}

void llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSTuple<unsigned char,unsigned char>>>>,llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>>::deserialize(void *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  long long v39 = (uint64_t *)a3;
  unint64_t v40 = a4;
  *(_OWORD *)long long v36 = 0u;
  *(_OWORD *)uint64_t v37 = 0u;
  long long v38 = 0u;
  if (!a4) {
    goto LABEL_30;
  }
  int v7 = *a3;
  long long v39 = (uint64_t *)(a3 + 1);
  unint64_t v40 = a4 - 1;
  char v35 = v7;
  if (v7)
  {
    if (a4 - 1 < 8) {
      goto LABEL_30;
    }
    unint64_t v8 = *(void *)(a3 + 1);
    long long v39 = (uint64_t *)(a3 + 9);
    unint64_t v40 = a4 - 9;
    std::vector<llvm::orc::ExecutorSymbolDef>::reserve((char **)v36, v8);
    if (v8)
    {
      uint64_t v9 = 0;
      while (1)
      {
        unint64_t v10 = v40;
        if (v40 < 8) {
          break;
        }
        long long v11 = v39;
        uint64_t v12 = *v39++;
        v40 -= 8;
        if (v10 == 8) {
          break;
        }
        uint64_t v13 = *((unsigned __int8 *)v11 + 8);
        long long v39 = (uint64_t *)((char *)v11 + 9);
        unint64_t v40 = v10 - 9;
        if (v10 == 9) {
          break;
        }
        uint64_t v14 = *((unsigned __int8 *)v11 + 9);
        long long v39 = (uint64_t *)((char *)v11 + 10);
        unint64_t v40 = v10 - 10;
        unint64_t v4 = v4 & 0xFFFFFFFFFFFF0000 | (v13 << 8) | v14;
        uint64_t v15 = v36[1];
        if (v36[1] >= v37[0])
        {
          int64_t v17 = ((char *)v36[1] - (char *)v36[0]) >> 4;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60) {
            abort();
          }
          int64_t v19 = (char *)v37[0] - (char *)v36[0];
          if (((char *)v37[0] - (char *)v36[0]) >> 3 > v18) {
            unint64_t v18 = v19 >> 3;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20) {
            char v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)v37, v20);
          }
          else {
            char v21 = 0;
          }
          uint64_t v22 = &v21[16 * v17];
          *(void *)uint64_t v22 = v12;
          *((void *)v22 + 1) = v4;
          char v24 = v36[0];
          long long v23 = v36[1];
          uint64_t v25 = v22;
          if (v36[1] != v36[0])
          {
            do
            {
              uint64_t v26 = *((void *)v23 - 2);
              v23 -= 8;
              __int16 v27 = v23[4];
              *((void *)v25 - 2) = v26;
              v25 -= 16;
              *((_WORD *)v25 + 4) = v27;
            }
            while (v23 != v24);
            long long v23 = v36[0];
          }
          uint64_t v16 = v22 + 16;
          v36[0] = v25;
          v36[1] = v22 + 16;
          v37[0] = &v21[16 * v20];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *(void *)v36[1] = v12;
          v15[1] = v4;
          uint64_t v16 = v15 + 2;
        }
        v36[1] = v16;
        if (++v9 == v8) {
          goto LABEL_28;
        }
      }
LABEL_30:
      getErrorErrorCat();
      *(void *)&long long v41 = 3;
      *((void *)&v41 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
    }
  }
  else if (!llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::deserialize((uint64_t)&v39, (std::string *)&v37[1]))
  {
    goto LABEL_30;
  }
LABEL_28:
  size_t v29 = v36[0];
  uint64_t v28 = v36[1];
  long long v30 = v37[0];
  v36[1] = 0;
  v37[0] = 0;
  v36[0] = 0;
  __p = v37[1];
  char v34 = HIBYTE(v38);
  v37[1] = 0;
  long long v38 = 0uLL;
  if (!v35)
  {
    getErrorErrorCat();
    operator new();
  }
  v43 &= ~1u;
  *((void *)&v41 + 1) = v28;
  uint64_t v42 = v30;
  *(void *)&long long v41 = v29;
  if (&v41 != (long long *)a2)
  {
    llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected(a2);
    char v31 = v43;
    *(unsigned char *)(a2 + 24) = *(unsigned char *)(a2 + 24) & 0xFE | v43 & 1;
    if (v31)
    {
      uint64_t v32 = v41;
      *(void *)&long long v41 = 0;
      *(void *)a2 = v32;
    }
    else
    {
      *(_OWORD *)a2 = v41;
      *(void *)(a2 + 16) = v42;
      uint64_t v42 = 0;
      long long v41 = 0uLL;
    }
  }
  llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v41);
  if (v34 < 0) {
    operator delete(__p);
  }
  *a1 = 0;
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[1]);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
}

void std::vector<llvm::orc::ExecutorSymbolDef>::reserve(char **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v3, a2);
    int v7 = &v6[v5];
    uint64_t v9 = &v6[16 * v8];
    long long v11 = *a1;
    unint64_t v10 = a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 2);
        v10 -= 16;
        __int16 v14 = *((_WORD *)v10 + 4);
        *((void *)v12 - 2) = v13;
        v12 -= 16;
        *((_WORD *)v12 + 4) = v14;
      }
      while (v10 != v11);
      unint64_t v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t llvm::orc::EPCGenericJITLinkMemoryManager::allocate(void *a1, uint64_t a2, llvm::jitlink::LinkGraph *a3, long long *a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  llvm::jitlink::BasicLayout::BasicLayout((llvm::jitlink::BasicLayout *)&v23, a3);
  llvm::jitlink::BasicLayout::getContiguousPageBasedLayoutSizes((uint64_t)&v23, *(unsigned int *)(a1[1] + 88), (uint64_t)v21);
  if (v22)
  {
    char v20 = -1;
    uint64_t v19 = v21[0];
    uint64_t v11 = *((void *)a4 + 3);
    if ((v11 & 2) == 0) {
      a4 = *(long long **)a4;
    }
    (*(void (**)(long long *, uint64_t *))(v11 & 0xFFFFFFFFFFFFFFF8))(a4, &v19);
    llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>::~Expected(&v19);
  }
  else
  {
    uint64_t v6 = (void *)a1[1];
    uint64_t v13 = a1[3];
    *(void *)&long long v14 = a1;
    *((void *)&v14 + 1) = v23;
    uint64_t v15 = &v17;
    uint64_t v16 = 0x400000000;
    if (v24[2]) {
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v15, (uint64_t)v24);
    }
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v18, a4);
    uint64_t v7 = v21[1] + v21[0];
    uint64_t v8 = v6[3];
    uint64_t v9 = malloc_type_malloc(0x10uLL, 0xBCDE199DuLL);
    *uint64_t v9 = a1[2];
    v9[1] = v7;
    long long v25 = v14;
    uint64_t v26 = &v28;
    uint64_t v27 = 0x400000000;
    if (v16) {
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v26, (uint64_t)&v15);
    }
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v29, v18);
    *(_OWORD *)&v33[8] = v25;
    *(void *)uint64_t v33 = v8;
    char v34 = &v36;
    uint64_t v35 = 0x400000000;
    if (v27) {
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v34, (uint64_t)&v26);
    }
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v37, v29);
    long long v38 = *(_OWORD *)v33;
    uint64_t v39 = *(void *)&v33[16];
    unint64_t v40 = &v42;
    uint64_t v41 = 0x400000000;
    if (v35) {
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v40, (uint64_t)&v34);
    }
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v43, v37);
    long long v44 = v38;
    uint64_t v45 = v39;
    uint64_t v46 = &v48;
    uint64_t v47 = 0x400000000;
    if (v41) {
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v46, (uint64_t)&v40);
    }
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v49, v43);
    unint64_t v10 = operator new(0x1E8uLL, (std::align_val_t)8uLL);
    long long v30 = v10;
    long long v31 = xmmword_261E8D410;
    *(_OWORD *)unint64_t v10 = v44;
    v10[2] = v45;
    v10[3] = v10 + 5;
    v10[4] = 0x400000000;
    if (v47) {
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)(v10 + 3), (uint64_t)&v46);
    }
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v10 + 57), v49);
    uint64_t v32 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_15SPSExecutorAddrEEESC_yEE9callAsyncIZNS7_19callSPSWrapperAsyncISE_S8_ZNS2_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSJ_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSJ_20JITLinkMemoryManager13InFlightAllocENSR_14default_deleteISU_EEEEEEEEEE3__0JNS2_12ExecutorAddrEyEEEvOT0_S12_OT1_DpRKT2_EUlOT_PKcmE_S11_JS12_yEEEvS1C_S14_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1C_EUlS4_E_S1M_vE9CallbacksE
        + 4;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v49);
    llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v46);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v43);
    llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v40);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v37);
    llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v34);
    (*(void (**)(void *, uint64_t, void **, void *, uint64_t))(*v6 + 56))(v6, v13, &v30, v9, 16);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v30);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v29);
    llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v26);
    free(v9);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v18);
    llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v15);
  }
  return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)v24);
}

void *llvm::orc::EPCGenericJITLinkMemoryManager::deallocate(void *a1, void **a2, long long *a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)a1[1];
  uint64_t v6 = a1[5];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v27, a3);
  uint64_t v7 = (void *)v5[3];
  uint64_t v8 = a2[1];
  unint64_t v9 = ((v8 - (unsigned char *)*a2 - 8) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (*a2 == v8) {
    size_t v10 = 16;
  }
  else {
    size_t v10 = ((v8 - (unsigned char *)*a2 - 8) & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  *(void *)&v36[0] = 0;
  *((void *)&v36[0] + 1) = v10;
  if (v10 < 9)
  {
    if (!v9)
    {
      llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v26);
      goto LABEL_24;
    }
    uint64_t v11 = v36;
  }
  else
  {
    uint64_t v11 = malloc_type_malloc(v10, 0xBCDE199DuLL);
    *(void *)&v36[0] = v11;
    unint64_t v9 = v10;
  }
  void *v11 = a1[2];
  if ((v9 & 0xFFFFFFFFFFFFFFF8) != 8)
  {
    v11[1] = ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 3;
    uint64_t v13 = (char *)*a2;
    uint64_t v12 = (char *)a2[1];
    BOOL v14 = *a2 == v12;
    if (v9 - 16 >= 8 && v13 != v12)
    {
      uint64_t v16 = v11 + 2;
      unint64_t v17 = v9 - 24;
      unint64_t v18 = v13 + 8;
      do
      {
        *v16++ = *((void *)v18 - 1);
        BOOL v14 = v18 == v12;
        if (v18 == v12) {
          break;
        }
        v18 += 8;
        BOOL v19 = v17 > 7;
        v17 -= 8;
      }
      while (v19);
    }
    if (v14)
    {
      *(_OWORD *)uint64_t v26 = v36[0];
      goto LABEL_24;
    }
    size_t v10 = *((void *)&v36[0] + 1);
  }
  llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v26);
  if (v10 > 8 || !v10 && *(void *)&v36[0]) {
    free(*(void **)&v36[0]);
  }
LABEL_24:
  if (!v26[1])
  {
    uint64_t v32 = v26[0];
    if (v26[0])
    {
      getErrorErrorCat();
      *(void *)&v36[0] = 3;
      *((void *)&v36[0] + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
  }
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v28, &v27);
  char v20 = v26[1];
  if (v26[1] <= (void *)8) {
    char v21 = v26;
  }
  else {
    char v21 = (void **)v26[0];
  }
  uint64_t v32 = v7;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v33, v28);
  char v34 = v32;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v35, v33);
  *(void *)&v36[0] = v34;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v36 + 8, v35);
  char v22 = operator new(0x28uLL, (std::align_val_t)8uLL);
  size_t v29 = v22;
  long long v30 = xmmword_261E8A730;
  *char v22 = *(void *)&v36[0];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v22 + 1), (_OWORD *)((char *)v36 + 8));
  long long v31 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSK_9allocatorISO_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrESR_EEEvOT0_SX_OT1_DpRKT2_EUlOT_PKcmE_SW_JSX_SR_EEEvS17_SZ_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES17_EUlS4_E_S1H_vE9CallbacksE
      + 4;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)v36 + 1);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v35);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v33);
  (*(void (**)(void *, uint64_t, void **, void **, void *))(*v5 + 56))(v5, v6, &v29, v21, v20);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v29);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v28);
  if (v26[1] < (void *)9)
  {
    if (v26[1]) {
      goto LABEL_33;
    }
    uint64_t v23 = v26[0];
    if (!v26[0]) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v23 = v26[0];
  }
  free(v23);
LABEL_33:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v27);
  uint64_t result = *a2;
  long long v25 = a2[1];
  if (*a2 != v25) {
    return memset(result, 255, (v25 - (unsigned char *)result) & 0xFFFFFFFFFFFFFFF8);
  }
  return result;
}

void llvm::orc::EPCGenericJITLinkMemoryManager::~EPCGenericJITLinkMemoryManager(llvm::orc::EPCGenericJITLinkMemoryManager *this)
{
}

uint64_t *llvm::orc::EPCGenericJITLinkMemoryManager::allocate(llvm::jitlink::JITLinkDylib const*,llvm::jitlink::LinkGraph &,llvm::unique_function<void ()(llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)>)::$_0::operator()(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  if (*a2)
  {
    if (a3[1])
    {
      *a3 = 0;
      uint64_t v4 = *a2;
    }
    uint64_t v5 = a1 + 56;
    *a2 = 0;
    char v65 = -1;
    uint64_t v64 = v4;
    uint64_t v6 = a1[59];
    if ((v6 & 2) == 0) {
      uint64_t v5 = (void *)*v5;
    }
    (*(void (**)(void *, uint64_t *))(v6 & 0xFFFFFFFFFFFFFFF8))(v5, &v64);
    uint64_t v7 = &v64;
    return llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>::~Expected(v7);
  }
  if (a3[1])
  {
    uint64_t v49 = a1 + 56;
    uint64_t v50 = *a3;
    *a3 = 0;
    char v63 = -1;
    uint64_t v62 = v50;
    uint64_t v51 = a1[59];
    if ((v51 & 2) == 0) {
      uint64_t v49 = (void *)*v49;
    }
    (*(void (**)(void *, uint64_t *))(v51 & 0xFFFFFFFFFFFFFFF8))(v49, &v62);
    uint64_t v7 = &v62;
    return llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>::~Expected(v7);
  }
  uint64_t v53 = *a3;
  uint64_t v8 = *a1;
  uint64_t v58 = a1[1];
  char v59 = &v61;
  uint64_t v60 = 0x400000000;
  if (*((_DWORD *)a1 + 6)) {
    llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v59, (uint64_t)(a1 + 2));
  }
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v56, (long long *)a1 + 28);
  uint64_t v66 = v68;
  uint64_t v67 = 0x400000000;
  if (v60)
  {
    unint64_t v9 = v59;
    size_t v10 = &v59[13 * v60];
    uint64_t v11 = v53;
    uint64_t v54 = v8;
    while (1)
    {
      v9[4] = v11;
      unint64_t v12 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v58, v9[2], 0);
      v9[5] = v12;
      uint64_t v13 = v9[2];
      uint64_t v14 = v9[3];
      unint64_t v15 = *(unsigned int *)(*(void *)(v8 + 8) + 88);
      unsigned int v16 = *(unsigned __int8 *)v9;
      unint64_t v17 = v67;
      if (!v67) {
        break;
      }
      uint64_t v18 = v9[2];
      uint64_t v19 = v9[3];
      char v20 = (char *)v66;
      do
      {
        unint64_t v21 = v17 >> 1;
        char v22 = &v20[40 * (v17 >> 1)];
        unsigned int v24 = *v22;
        uint64_t v23 = (unsigned __int8 *)(v22 + 40);
        v17 += ~(v17 >> 1);
        if (v24 < v16) {
          char v20 = (char *)v23;
        }
        else {
          unint64_t v17 = v21;
        }
      }
      while (v17);
      if (v20 == (char *)v66 + 40 * v67) {
        break;
      }
      if (*v20 != v16)
      {
        long long v70 = 0u;
        long long v71 = 0u;
        uint64_t v25 = v20 - (unsigned char *)v66;
        LOBYTE(v69) = v16;
        unint64_t v26 = llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>,true>>((uint64_t)&v66, (unint64_t)&v69);
        long long v27 = (char *)v66;
        char v20 = (char *)v66 + v25;
        uint64_t v28 = (char *)v66 + 40 * v67;
        *((void *)v28 + 4) = *((void *)v28 - 1);
        long long v29 = *(_OWORD *)(v28 - 24);
        *(_OWORD *)uint64_t v28 = *(_OWORD *)(v28 - 40);
        *((_OWORD *)v28 + 1) = v29;
        long long v30 = (char *)v66;
        int v31 = v67;
        uint64_t v32 = (char *)v66 + 40 * v67 - 40;
        if (v32 != v20)
        {
          uint64_t v33 = (char *)v66 + 40 * v67 - 40;
          do
          {
            char v34 = *(v33 - 40);
            v33 -= 40;
            *uint64_t v32 = v34;
            long long v35 = *((_OWORD *)v32 - 1);
            *(_OWORD *)(v32 + 8) = *((_OWORD *)v32 - 2);
            *(_OWORD *)(v32 + 24) = v35;
            uint64_t v32 = v33;
          }
          while (v33 != v20);
          int v31 = v67;
          long long v30 = (char *)v66;
        }
        LODWORD(v67) = v31 + 1;
        uint64_t v36 = &v30[40 * (v31 + 1)];
        BOOL v38 = v26 >= (unint64_t)v20 && v26 < (unint64_t)v36;
        unint64_t v39 = v26 + 40 * v38;
        *char v20 = *(unsigned char *)v39;
        long long v40 = *(_OWORD *)(v39 + 8);
        uint64_t v41 = &v27[8 * (v25 >> 3)];
        *(_OWORD *)(v41 + 24) = *(_OWORD *)(v39 + 24);
        *(_OWORD *)(v41 + 8) = v40;
        uint64_t v8 = v54;
        goto LABEL_32;
      }
LABEL_33:
      v11 += (v13 + v14 + v15 - 1) / v15 * v15;
      *((void *)v20 + 3) = v18;
      *((void *)v20 + 4) = v19;
      uint64_t v46 = v9[4];
      *((void *)v20 + 1) = v12;
      *((void *)v20 + 2) = v46;
      v9 += 13;
      if (v9 == v10) {
        goto LABEL_34;
      }
    }
    long long v70 = 0u;
    long long v71 = 0u;
    LOBYTE(v69) = v16;
    unint64_t v42 = llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>,true>>((uint64_t)&v66, (unint64_t)&v69);
    char v43 = (char *)v66 + 40 * v67;
    uint64_t v44 = *(void *)(v42 + 32);
    long long v45 = *(_OWORD *)(v42 + 16);
    *(_OWORD *)char v43 = *(_OWORD *)v42;
    *((_OWORD *)v43 + 1) = v45;
    *((void *)v43 + 4) = v44;
    LODWORD(v67) = v67 + 1;
    char v20 = (char *)v66 + 40 * v67 - 40;
LABEL_32:
    uint64_t v18 = v9[2];
    uint64_t v19 = v9[3];
    unint64_t v12 = v9[5];
    goto LABEL_33;
  }
LABEL_34:
  llvm::jitlink::BasicLayout::apply(&v58, &v55);
  uint64_t v47 = v55;
  if (!v55) {
    operator new();
  }
  uint64_t v55 = 0;
  LOBYTE(v70) = -1;
  long long v69 = v47;
  if ((v57 & 2) != 0) {
    uint64_t v48 = v56;
  }
  else {
    uint64_t v48 = (void *)v56[0];
  }
  (*(void (**)(void *, void **))(v57 & 0xFFFFFFFFFFFFFFF8))(v48, &v69);
  llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>::~Expected((uint64_t *)&v69);
  if (v55) {
    (*(void (**)(void *))(*(void *)v55 + 8))(v55);
  }
  if (v66 != v68) {
    free(v66);
  }
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v56);
  return (uint64_t *)llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v59);
}

void _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_15SPSExecutorAddrEEESC_yEE9callAsyncIZNS7_19callSPSWrapperAsyncISE_S8_ZNS2_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSJ_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSJ_20JITLinkMemoryManager13InFlightAllocENSR_14default_deleteISU_EEEEEEEEEE3__0JNS2_12ExecutorAddrEyEEEvOT0_S12_OT1_DpRKT2_EUlOT_PKcmE_S11_JS12_yEEEvS1C_S14_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1C_EUlS4_E_EEvPvRS4_(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v5 = *(_OWORD *)(a1 + 8);
  v6[0] = &v7;
  v6[1] = 0x400000000;
  if (*(_DWORD *)(a1 + 32)) {
    llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)v6, a1 + 24);
  }
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v8, (long long *)(a1 + 456));
  unint64_t v9 = v3;
  uint64_t v10 = v4;
  operator new();
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_15SPSExecutorAddrEEESC_yEE9callAsyncIZNS7_19callSPSWrapperAsyncISE_S8_ZNS2_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSJ_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSJ_20JITLinkMemoryManager13InFlightAllocENSR_14default_deleteISU_EEEEEEEEEE3__0JNS2_12ExecutorAddrEyEEEvOT0_S12_OT1_DpRKT2_EUlOT_PKcmE_S11_JS12_yEEEvS1C_S14_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1C_EUlS4_E_EEvPvS1N_(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  a1[3] = a1 + 5;
  uint64_t v5 = (uint64_t)(a1 + 3);
  *(_OWORD *)(v5 - 16) = v4;
  *(void *)(v5 + 8) = 0x400000000;
  if (*(_DWORD *)(a2 + 32)) {
    llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=(v5, a2 + 24);
  }
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 57), (long long *)(a2 + 456));
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_15SPSExecutorAddrEEESC_yEE9callAsyncIZNS7_19callSPSWrapperAsyncISE_S8_ZNS2_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSJ_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSJ_20JITLinkMemoryManager13InFlightAllocENSR_14default_deleteISU_EEEEEEEEEE3__0JNS2_12ExecutorAddrEyEEEvOT0_S12_OT1_DpRKT2_EUlOT_PKcmE_S11_JS12_yEEEvS1C_S14_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1C_EUlS4_E_EEvPv(uint64_t a1)
{
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 456));
  return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector(a1 + 24);
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZNS0_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSF_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSF_20JITLinkMemoryManager13InFlightAllocENSN_14default_deleteISQ_EEEEEEEEEE3__0JNS0_12ExecutorAddrEyEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_yEEEvS18_S10_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES18_ENUlS1G_E_clES1G_EUlvE_ED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE028;
  if (*(char *)(a1 + 535) < 0) {
    operator delete(*(void **)(a1 + 512));
  }
  unint64_t v2 = *(void *)(a1 + 496);
  if (v2 >= 9)
  {
    uint64_t v3 = *(void **)(a1 + 488);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    uint64_t v3 = *(void **)(a1 + 488);
    if (v3) {
      goto LABEL_5;
    }
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 456));
  llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector(a1 + 24);
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZNS0_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSF_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSF_20JITLinkMemoryManager13InFlightAllocENSN_14default_deleteISQ_EEEEEEEEEE3__0JNS0_12ExecutorAddrEyEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_yEEEvS18_S10_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES18_ENUlS1G_E_clES1G_EUlvE_ED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE028;
  if (*(char *)(a1 + 535) < 0) {
    operator delete(*(void **)(a1 + 512));
  }
  unint64_t v2 = *(void *)(a1 + 496);
  if (v2 < 9)
  {
    if (v2) {
      goto LABEL_8;
    }
    uint64_t v3 = *(void **)(a1 + 488);
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = *(void **)(a1 + 488);
  }
  free(v3);
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 456));
  llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector(a1 + 24);
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZNS0_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSF_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSF_20JITLinkMemoryManager13InFlightAllocENSN_14default_deleteISQ_EEEEEEEEEE3__0JNS0_12ExecutorAddrEyEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_yEEEvS18_S10_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES18_ENUlS1G_E_clES1G_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 504));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZNS0_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSF_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSF_20JITLinkMemoryManager13InFlightAllocENSN_14default_deleteISQ_EEEEEEEEEE3__0JNS0_12ExecutorAddrEyEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_yEEEvS18_S10_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES18_ENUlS1G_E_clES1G_EUlvE_E3runEv(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v1 = (uint64_t *)(a1 + 8);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)(a1 + 488);
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 488) = 0;
  char v14 = 0;
  uint64_t v13 = 0;
  if (v8[1])
  {
    if (v8[1] <= (void *)8) {
      unint64_t v2 = v8;
    }
    else {
      unint64_t v2 = (void **)v8[0];
    }
  }
  else
  {
    unint64_t v9 = v8[0];
    if (v8[0])
    {
      getErrorErrorCat();
      uint64_t v11 = 3;
      unint64_t v12 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    unint64_t v2 = v8;
  }
  llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr>,llvm::Expected<llvm::orc::ExecutorAddr>>::deserialize(&v13, (uint64_t)v2, (uint64_t)v8[1], &v10);
  if (v10)
  {
    unint64_t v9 = v10;
    uint64_t v10 = 0;
    LOBYTE(v12) = v14 & 1;
    uint64_t v3 = v13;
    if (v14) {
      uint64_t v13 = 0;
    }
    uint64_t v11 = v3;
    llvm::orc::EPCGenericJITLinkMemoryManager::allocate(llvm::jitlink::JITLinkDylib const*,llvm::jitlink::LinkGraph &,llvm::unique_function<void ()(llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)>)::$_0::operator()(v1, (uint64_t *)&v9, &v11);
    if ((v12 & 1) != 0 && v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v5 = (uint64_t)v9;
    if (!v9) {
      goto LABEL_22;
    }
LABEL_21:
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    goto LABEL_22;
  }
  uint64_t v10 = 0;
  LOBYTE(v12) = v14 & 1;
  uint64_t v4 = v13;
  if (v14) {
    uint64_t v13 = 0;
  }
  uint64_t v11 = v4;
  llvm::orc::EPCGenericJITLinkMemoryManager::allocate(llvm::jitlink::JITLinkDylib const*,llvm::jitlink::LinkGraph &,llvm::unique_function<void ()(llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)>)::$_0::operator()(v1, (uint64_t *)&v10, &v11);
  if (v12)
  {
    uint64_t v5 = v11;
    if (v11) {
      goto LABEL_21;
    }
  }
LABEL_22:
  if (v10) {
    (*(void (**)(void *))(*(void *)v10 + 8))(v10);
  }
  if (v14)
  {
    uint64_t v6 = v13;
    uint64_t v13 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  if (v8[1] >= (void *)9)
  {
    uint64_t v7 = v8[0];
LABEL_31:
    free(v7);
    return;
  }
  if (!v8[1])
  {
    uint64_t v7 = v8[0];
    if (v8[0]) {
      goto LABEL_31;
    }
  }
}

void _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSK_9allocatorISO_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrESR_EEEvOT0_SX_OT1_DpRKT2_EUlOT_PKcmE_SW_JSX_SR_EEEvS17_SZ_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES17_EUlS4_E_EEvPvRS4_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void **)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v4, (long long *)(a1 + 8));
  v5[0] = v2;
  v5[1] = v3;
  operator new();
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSK_9allocatorISO_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrESR_EEEvOT0_SX_OT1_DpRKT2_EUlOT_PKcmE_SW_JSX_SR_EEEvS17_SZ_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES17_EUlS4_E_EEvPvS1I_(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (long long *)(a2 + 8));
}

void *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSK_9allocatorISO_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrESR_EEEvOT0_SX_OT1_DpRKT2_EUlOT_PKcmE_SW_JSX_SR_EEEvS17_SZ_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES17_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSG_9allocatorISK_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrESN_EEEvOT0_ST_OT1_DpRKT2_EUlOT_PKcmE_SS_JST_SN_EEEvS13_SV_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES13_ENUlS1B_E_clES1B_EUlvE_ED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE070;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 9)
  {
    uint64_t v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    if (v3) {
      goto LABEL_5;
    }
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSG_9allocatorISK_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrESN_EEEvOT0_ST_OT1_DpRKT2_EUlOT_PKcmE_SS_JST_SN_EEEvS13_SV_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES13_ENUlS1B_E_clES1B_EUlvE_ED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE070;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2) {
      goto LABEL_8;
    }
    uint64_t v3 = *(void **)(a1 + 40);
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = *(void **)(a1 + 40);
  }
  free(v3);
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSG_9allocatorISK_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrESN_EEEvOT0_ST_OT1_DpRKT2_EUlOT_PKcmE_SS_JST_SN_EEEvS13_SV_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES13_ENUlS1B_E_clES1B_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSG_9allocatorISK_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrESN_EEEvOT0_ST_OT1_DpRKT2_EUlOT_PKcmE_SS_JST_SN_EEEvS13_SV_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES13_ENUlS1B_E_clES1B_EUlvE_E3runEv(uint64_t a1)
{
  unint64_t v2 = (void *)(a1 + 8);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v12 = 0;
  if (v10[1])
  {
    if (v10[1] <= (void *)8) {
      uint64_t v3 = v10;
    }
    else {
      uint64_t v3 = (void **)v10[0];
    }
  }
  else
  {
    v11[3] = v10[0];
    if (v10[0])
    {
      getErrorErrorCat();
      v11[0] = 3;
      v11[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    uint64_t v3 = v10;
  }
  llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSError,llvm::Error>::deserialize(&v12, (uint64_t)v3, (uint64_t)v10[1], &v13);
  uint64_t v4 = v13;
  if (v13)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    v11[0] = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    if ((v5 & 2) == 0) {
      unint64_t v2 = (void *)*v2;
    }
    (*(void (**)(void *, void *))(v5 & 0xFFFFFFFFFFFFFFF8))(v2, v11);
    if (v11[0]) {
      (*(void (**)(void))(*(void *)v11[0] + 8))(v11[0]);
    }
    uint64_t v6 = v13;
    if (v13) {
LABEL_11:
    }
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  else
  {
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    v11[0] = v8;
    uint64_t v9 = *(void *)(a1 + 32);
    if ((v9 & 2) == 0) {
      unint64_t v2 = (void *)*v2;
    }
    (*(void (**)(void *, void *))(v9 & 0xFFFFFFFFFFFFFFF8))(v2, v11);
    uint64_t v6 = v11[0];
    if (v11[0]) {
      goto LABEL_11;
    }
  }
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  if (v10[1] >= (void *)9)
  {
    uint64_t v7 = v10[0];
LABEL_18:
    free(v7);
    return;
  }
  if (!v10[1])
  {
    uint64_t v7 = v10[0];
    if (v10[0]) {
      goto LABEL_18;
    }
  }
}

unint64_t llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>,true>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v5 = v3 + 1;
    unint64_t v6 = *(void *)a1 + 40 * v3;
    if (*(void *)a1 <= a2 && v6 > a2)
    {
      unint64_t v8 = a2 - *(void *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 40);
      return *(void *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 40);
    }
  }
  return v2;
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>>::operator=(uint64_t a1, char **a2)
{
  if ((char **)a1 != a2)
  {
    unint64_t v5 = a2 + 2;
    uint64_t v4 = *a2;
    if (*a2 != (char *)(a2 + 2))
    {
      unint64_t v6 = *(char **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = a2 + 1;
      *(void *)(a1 + 8) = a2[1];
      *a2 = (char *)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_21;
    }
    uint64_t v7 = a2 + 1;
    unint64_t v8 = *((unsigned int *)a2 + 2);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if (v8)
      {
        uint64_t v10 = *(char **)a1;
        uint64_t v11 = &v4[40 * v8];
        do
        {
          *uint64_t v10 = *v4;
          long long v12 = *(_OWORD *)(v4 + 8);
          *(_OWORD *)(v10 + 24) = *(_OWORD *)(v4 + 24);
          *(_OWORD *)(v10 + 8) = v12;
          v4 += 40;
          v10 += 40;
        }
        while (v4 != v11);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if (v9)
      {
        uint64_t v13 = &v4[40 * v9];
        char v14 = *(char **)a1;
        do
        {
          *char v14 = *v4;
          long long v15 = *(_OWORD *)(v4 + 8);
          *(_OWORD *)(v14 + 24) = *(_OWORD *)(v4 + 24);
          *(_OWORD *)(v14 + 8) = v15;
          v4 += 40;
          v14 += 40;
        }
        while (v4 != v13);
LABEL_18:
        uint64_t v16 = *v7;
        if (v9 != v16) {
          memcpy((void *)(*(void *)a1 + 40 * v9), &(*a2)[40 * v9], &(*a2)[40 * v16] - &(*a2)[40 * v9]);
        }
LABEL_20:
        *(_DWORD *)(a1 + 8) = v8;
LABEL_21:
        *uint64_t v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 40);
    }
    uint64_t v9 = 0;
    goto LABEL_18;
  }
  return a1;
}

void llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::~InFlightAlloc(llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc *this)
{
  *(void *)this = &unk_270DBE0B8;
  unint64_t v2 = (char *)*((void *)this + 4);
  if (v2 != (char *)this + 48) {
    free(v2);
  }
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_270DBE0B8;
  unint64_t v2 = (char *)*((void *)this + 4);
  if (v2 != (char *)this + 48) {
    free(v2);
  }
  JUMPOUT(0x263E500B0);
}

void *llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::abandon(uint64_t a1, long long *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)(v3 + 8);
  uint64_t v5 = *(void *)(v3 + 40);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v15, a2);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = v4[3];
  unint64_t v8 = malloc_type_malloc(0x18uLL, 0xBCDE199DuLL);
  *unint64_t v8 = *(void *)(v6 + 16);
  v8[1] = 1;
  void v8[2] = *(void *)(a1 + 24);
  uint64_t v13 = v8;
  unint64_t v14 = 24;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v16, v15);
  uint64_t v9 = v13;
  uint64_t v20 = v7;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v21, v16);
  uint64_t v22 = v20;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v23, v21);
  uint64_t v24 = v22;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v25, v23);
  uint64_t v10 = operator new(0x28uLL, (std::align_val_t)8uLL);
  unint64_t v17 = v10;
  long long v18 = xmmword_261E8A730;
  *uint64_t v10 = v24;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v10 + 1), v25);
  uint64_t v19 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSM_SM_E_JNS2_12ExecutorAddrENS_8ArrayRefISQ_EEEEEvOT0_SQ_OT1_DpRKT2_EUlOT_PKcmE_SP_JSQ_SS_EEEvS12_SU_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES12_EUlS4_E_S1C_vE9CallbacksE
      + 4;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v25);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v23);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v21);
  (*(void (**)(void *, uint64_t, void **, void *, uint64_t))(*v4 + 56))(v4, v5, &v17, v9, 24);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v17);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v16);
  if (v14 >= 9)
  {
    uint64_t v11 = v13;
LABEL_5:
    free(v11);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v15);
  }
  if (!v14)
  {
    uint64_t v11 = v13;
    if (v13) {
      goto LABEL_5;
    }
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v15);
}

void llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::finalize(uint64_t a1, long long *a2)
{
  unint64_t v2 = (void *)a1;
  uint64_t v78 = *MEMORY[0x263EF8340];
  long long v3 = 0uLL;
  memset(v61, 0, sizeof(v61));
  *(_OWORD *)__p = 0u;
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  if (v4)
  {
    v56 = a2;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = v8 + 40 * v4;
    uint64_t v10 = 0;
    uint64_t v58 = v9;
    do
    {
      int v11 = *(unsigned char *)v8 & 7;
      BOOL v12 = (*(unsigned char *)v8 & 0xF8) == 8;
      uint64_t v13 = *(void *)(v8 + 24);
      unint64_t v14 = *(unsigned int *)(*(void *)(v2[1] + 8) + 88);
      unint64_t v15 = (v13 + *(void *)(v8 + 32) + v14 - 1) / v14 * v14;
      uint64_t v16 = *(void *)(v8 + 8);
      uint64_t v17 = *(void *)(v8 + 16);
      if (v7 >= v6)
      {
        unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v7 - (char *)v5) >> 3);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0x666666666666666) {
          abort();
        }
        unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - (char *)v5) >> 3);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x333333333333333) {
          unint64_t v22 = 0x666666666666666;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          if (v22 > 0x666666666666666) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v23 = (v13 + *(void *)(v8 + 32) + v14 - 1) / v14 * v14;
          int v24 = *(unsigned char *)v8 & 7;
          unint64_t v59 = v22;
          uint64_t v25 = (char *)operator new(40 * v22);
          unint64_t v22 = v59;
          int v11 = v24;
          unint64_t v15 = v23;
        }
        else
        {
          uint64_t v25 = 0;
        }
        uint64_t v26 = &v25[40 * v19];
        *(_DWORD *)uint64_t v26 = v11;
        v26[4] = v12;
        *((void *)v26 + 1) = v17;
        *((void *)v26 + 2) = v15;
        *((void *)v26 + 3) = v16;
        *((void *)v26 + 4) = v13;
        if (v7 == v10)
        {
          uint64_t v10 = (int *)&v25[40 * v19];
          unint64_t v2 = (void *)a1;
        }
        else
        {
          long long v27 = &v25[40 * v19];
          unint64_t v2 = (void *)a1;
          do
          {
            long long v28 = *(_OWORD *)(v7 - 10);
            long long v29 = *(_OWORD *)(v7 - 6);
            *((void *)v27 - 1) = *((void *)v7 - 1);
            *(_OWORD *)(v27 - 24) = v29;
            *(_OWORD *)(v27 - 40) = v28;
            v27 -= 40;
            v7 -= 10;
          }
          while (v7 != v10);
          uint64_t v7 = v10;
          uint64_t v10 = (int *)v27;
        }
        uint64_t v6 = (int *)&v25[40 * v22];
        long long v18 = (int *)(v26 + 40);
        if (v7) {
          operator delete(v7);
        }
        uint64_t v5 = v10;
        uint64_t v9 = v58;
      }
      else
      {
        *uint64_t v7 = v11;
        *((unsigned char *)v7 + 4) = v12;
        *((void *)v7 + 1) = v17;
        *((void *)v7 + 2) = v15;
        long long v18 = v7 + 10;
        *((void *)v7 + 3) = v16;
        *((void *)v7 + 4) = v13;
      }
      v8 += 40;
      uint64_t v7 = v18;
    }
    while (v8 != v9);
    __p[0] = v10;
    __p[1] = v18;
    long long v3 = *(_OWORD *)((char *)v61 + 8);
    uint64_t v30 = *((void *)&v61[1] + 1);
    a2 = v56;
  }
  else
  {
    uint64_t v30 = 0;
  }
  uint64_t v31 = v2[2];
  *(_OWORD *)((char *)v61 + 8) = *(_OWORD *)(v31 + 256);
  *(_OWORD *)(v31 + 256) = v3;
  *((void *)&v61[1] + 1) = *(void *)(v31 + 272);
  *(void *)(v31 + 272) = v30;
  uint64_t v32 = v2[1];
  uint64_t v33 = *(void **)(v32 + 8);
  uint64_t v34 = *(void *)(v32 + 32);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v63, a2);
  uint64_t v64 = v2[3];
  long long v35 = __p[0];
  uint64_t v36 = *((void *)&v61[0] + 1);
  uint64_t v37 = 8;
  while (v35 != __p[1])
  {
    v37 += v35[4] + 25;
    v35 += 5;
  }
  uint64_t v38 = v2[1];
  uint64_t v39 = 8;
  while (v36 != *(void *)&v61[1])
  {
    v39 += *(void *)(v36 + 16) + *(void *)(v36 + 72) + 32;
    v36 += 112;
  }
  long long v40 = (void *)v33[3];
  unint64_t v41 = v39 + v37;
  size_t v42 = v39 + v37 + 8;
  *(void *)&v76[0] = 0;
  *((void *)&v76[0] + 1) = v42;
  if (v42 != 8 && (unint64_t)(v39 + v37) < 0xFFFFFFFFFFFFFFF8)
  {
    char v43 = malloc_type_malloc(v42, 0xBCDE199DuLL);
    *(void *)&v76[0] = v43;
    void *v43 = *(void *)(v38 + 16);
    uint64_t v73 = (uint64_t)(v43 + 1);
    *(void *)&v74[0] = v41;
    unint64_t v44 = v41 - 8;
    if (v41 >= 8)
    {
      long long v45 = (char *)__p[0];
      v43[1] = 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
      uint64_t v46 = v43 + 2;
      uint64_t v73 = (uint64_t)(v43 + 2);
      *(void *)&v74[0] = v41 - 8;
      while (v45 != __p[1])
      {
        if (!v44) {
          goto LABEL_53;
        }
        char v47 = v45[4] ? *v45 & 7 | 8 : *v45 & 7;
        *uint64_t v46 = v47;
        uint64_t v48 = v73;
        uint64_t v49 = *(void *)&v74[0];
        ++v73;
        --*(void *)&v74[0];
        if ((unint64_t)(v49 - 1) < 8) {
          goto LABEL_53;
        }
        *(void *)(v48 + 1) = *((void *)v45 + 1);
        uint64_t v73 = v48 + 9;
        *(void *)&v74[0] = v49 - 9;
        if ((unint64_t)(v49 - 9) < 8) {
          goto LABEL_53;
        }
        *(void *)(v48 + 9) = *((void *)v45 + 2);
        uint64_t v73 = v48 + 17;
        *(void *)&v74[0] = v49 - 17;
        if ((unint64_t)(v49 - 17) < 8) {
          goto LABEL_53;
        }
        *(void *)(v48 + 17) = *((void *)v45 + 4);
        uint64_t v46 = (unsigned char *)(v48 + 25);
        unint64_t v44 = v49 - 25;
        uint64_t v73 = v48 + 25;
        *(void *)&v74[0] = v49 - 25;
        unint64_t v50 = *((void *)v45 + 4);
        if (v50)
        {
          BOOL v51 = v44 >= v50;
          v44 -= v50;
          if (!v51) {
            goto LABEL_53;
          }
          memcpy((void *)(v48 + 25), *((const void **)v45 + 3), *((void *)v45 + 4));
          v46 += v50;
          uint64_t v73 = (uint64_t)v46;
          *(void *)&v74[0] = v44;
        }
        v45 += 40;
      }
      if (llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>>>,std::vector<llvm::orc::shared::AllocActionCallPair>,void>::serialize(&v73, (void *)v61 + 1))
      {
        *(_OWORD *)uint64_t v62 = v76[0];
        goto LABEL_57;
      }
    }
  }
  else
  {
    uint64_t v73 = (uint64_t)v76;
    *(void *)&v74[0] = v39 + v37 + 8;
    if (!v41)
    {
      *(void *)&v76[0] = *(void *)(v38 + 16);
      uint64_t v73 = (uint64_t)v76 + 8;
      *(void *)&v74[0] = 0;
    }
  }
LABEL_53:
  llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v62);
  if (*((void *)&v76[0] + 1) > 8uLL || !*((void *)&v76[0] + 1) && *(void *)&v76[0]) {
    free(*(void **)&v76[0]);
  }
LABEL_57:
  if (!v62[1])
  {
    long long v70 = v62[0];
    if (v62[0])
    {
      getErrorErrorCat();
      uint64_t v73 = 3;
      *(void *)&v74[0] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
  }
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v65, &v63);
  uint64_t v66 = v64;
  uint64_t v52 = v62[1];
  if (v62[1] <= (void *)8) {
    uint64_t v53 = v62;
  }
  else {
    uint64_t v53 = (void **)v62[0];
  }
  long long v70 = v40;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v71, v65);
  uint64_t v72 = v66;
  uint64_t v73 = (uint64_t)v70;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v74, v71);
  uint64_t v75 = v72;
  *(void *)&v76[0] = v73;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v76 + 8, v74);
  uint64_t v77 = v75;
  uint64_t v54 = operator new(0x30uLL, (std::align_val_t)8uLL);
  uint64_t v67 = v54;
  long long v68 = xmmword_261E8D3D0;
  void *v54 = *(void *)&v76[0];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v54 + 1), (_OWORD *)((char *)v76 + 8));
  v54[5] = v77;
  long long v69 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_8SPSTupleIJNS3_11SPSSequenceINSD_IJNS3_19SPSRemoteAllocGroupESC_yNSE_IcEEEEEEENSE_INSD_IJNSD_IJSC_SG_EEESJ_EEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISN_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorES11_E_JNS2_12ExecutorAddrENS2_8tpctypes15FinalizeRequestEEEEvOT0_S13_OT1_DpRKT2_EUlOT_PKcmE_S12_JS13_S15_EEEvS1F_S17_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1F_EUlS4_E_S1P_vE9CallbacksE
      + 4;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)v76 + 1);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v74);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v71);
  (*(void (**)(void *, uint64_t, void **, void **, void *))(*v33 + 56))(v33, v34, &v67, v53, v52);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v67);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v65);
  if (v62[1] < (void *)9)
  {
    if (v62[1]) {
      goto LABEL_66;
    }
    uint64_t v55 = v62[0];
    if (!v62[0]) {
      goto LABEL_66;
    }
  }
  else
  {
    uint64_t v55 = v62[0];
  }
  free(v55);
LABEL_66:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v63);
  *(void *)&v76[0] = (char *)v61 + 8;
  std::vector<llvm::orc::shared::AllocActionCallPair>::__destroy_vector::operator()[abi:nn180100]((void ***)v76);
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSM_SM_E_JNS2_12ExecutorAddrENS_8ArrayRefISQ_EEEEEvOT0_SQ_OT1_DpRKT2_EUlOT_PKcmE_SP_JSQ_SS_EEEvS12_SU_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES12_EUlS4_E_EEvPvRS4_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void **)a2;
  long long v3 = *(void **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v4, (long long *)(a1 + 8));
  v5[0] = v2;
  v5[1] = v3;
  operator new();
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSM_SM_E_JNS2_12ExecutorAddrENS_8ArrayRefISQ_EEEEEvOT0_SQ_OT1_DpRKT2_EUlOT_PKcmE_SP_JSQ_SS_EEEvS12_SU_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES12_EUlS4_E_EEvPvS1D_(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (long long *)(a2 + 8));
}

void *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSM_SM_E_JNS2_12ExecutorAddrENS_8ArrayRefISQ_EEEEEvOT0_SQ_OT1_DpRKT2_EUlOT_PKcmE_SP_JSQ_SS_EEEvS12_SU_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES12_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSI_SI_E_JNS0_12ExecutorAddrENS_8ArrayRefISM_EEEEEvOT0_SM_OT1_DpRKT2_EUlOT_PKcmE_SL_JSM_SO_EEEvSY_SQ_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESY_ENUlS16_E_clES16_EUlvE_ED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE0E8;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 9)
  {
    long long v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    long long v3 = *(void **)(a1 + 40);
    if (v3) {
      goto LABEL_5;
    }
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSI_SI_E_JNS0_12ExecutorAddrENS_8ArrayRefISM_EEEEEvOT0_SM_OT1_DpRKT2_EUlOT_PKcmE_SL_JSM_SO_EEEvSY_SQ_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESY_ENUlS16_E_clES16_EUlvE_ED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE0E8;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2) {
      goto LABEL_8;
    }
    long long v3 = *(void **)(a1 + 40);
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    long long v3 = *(void **)(a1 + 40);
  }
  free(v3);
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSI_SI_E_JNS0_12ExecutorAddrENS_8ArrayRefISM_EEEEEvOT0_SM_OT1_DpRKT2_EUlOT_PKcmE_SL_JSM_SO_EEEvSY_SQ_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESY_ENUlS16_E_clES16_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSI_SI_E_JNS0_12ExecutorAddrENS_8ArrayRefISM_EEEEEvOT0_SM_OT1_DpRKT2_EUlOT_PKcmE_SL_JSM_SO_EEEvSY_SQ_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESY_ENUlS16_E_clES16_EUlvE_E3runEv(uint64_t a1)
{
  unint64_t v2 = (void *)(a1 + 8);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v12 = 0;
  if (v10[1])
  {
    if (v10[1] <= (void *)8) {
      long long v3 = v10;
    }
    else {
      long long v3 = (void **)v10[0];
    }
  }
  else
  {
    v11[3] = v10[0];
    if (v10[0])
    {
      getErrorErrorCat();
      v11[0] = 3;
      v11[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    long long v3 = v10;
  }
  llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSError,llvm::Error>::deserialize(&v12, (uint64_t)v3, (uint64_t)v10[1], &v13);
  uint64_t v4 = v13;
  if (v13)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    v11[0] = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    if ((v5 & 2) == 0) {
      unint64_t v2 = (void *)*v2;
    }
    (*(void (**)(void *, void *))(v5 & 0xFFFFFFFFFFFFFFF8))(v2, v11);
    if (v11[0]) {
      (*(void (**)(void))(*(void *)v11[0] + 8))(v11[0]);
    }
    uint64_t v6 = v13;
    if (v13) {
LABEL_11:
    }
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  else
  {
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    v11[0] = v8;
    uint64_t v9 = *(void *)(a1 + 32);
    if ((v9 & 2) == 0) {
      unint64_t v2 = (void *)*v2;
    }
    (*(void (**)(void *, void *))(v9 & 0xFFFFFFFFFFFFFFF8))(v2, v11);
    uint64_t v6 = v11[0];
    if (v11[0]) {
      goto LABEL_11;
    }
  }
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  if (v10[1] >= (void *)9)
  {
    uint64_t v7 = v10[0];
LABEL_18:
    free(v7);
    return;
  }
  if (!v10[1])
  {
    uint64_t v7 = v10[0];
    if (v10[0]) {
      goto LABEL_18;
    }
  }
}

uint64_t llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::finalize(llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>)::{lambda(llvm::Error,llvm::Error)#1}::operator()(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*a2)
  {
    *a3 = 0;
    uint64_t v3 = *a2;
    *a2 = 0;
    char v14 = -1;
    uint64_t v13 = v3;
    uint64_t v4 = a1[3];
    if ((v4 & 2) == 0) {
      a1 = (void *)*a1;
    }
    uint64_t result = (*(uint64_t (**)(void *, uint64_t *))(v4 & 0xFFFFFFFFFFFFFFF8))(a1, &v13);
    if ((v14 & 1) == 0) {
      return result;
    }
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  uint64_t v6 = *a3;
  if (*a3)
  {
    *a3 = 0;
    char v12 = -1;
    uint64_t v11 = v6;
    uint64_t v7 = a1[3];
    if ((v7 & 2) == 0) {
      a1 = (void *)*a1;
    }
    uint64_t result = (*(uint64_t (**)(void *, uint64_t *))(v7 & 0xFFFFFFFFFFFFFFF8))(a1, &v11);
    if (v12)
    {
      uint64_t result = v11;
      uint64_t v11 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  else
  {
    char v10 = 0;
    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
    if ((v8 & 2) == 0) {
      a1 = (void *)*a1;
    }
    uint64_t result = (*(uint64_t (**)(void *, uint64_t *))(v8 & 0xFFFFFFFFFFFFFFF8))(a1, &v9);
    if (v10)
    {
      uint64_t result = v9;
      uint64_t v9 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_8SPSTupleIJNS3_11SPSSequenceINSD_IJNS3_19SPSRemoteAllocGroupESC_yNSE_IcEEEEEEENSE_INSD_IJNSD_IJSC_SG_EEESJ_EEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISN_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorES11_E_JNS2_12ExecutorAddrENS2_8tpctypes15FinalizeRequestEEEEvOT0_S13_OT1_DpRKT2_EUlOT_PKcmE_S12_JS13_S15_EEEvS1F_S17_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1F_EUlS4_E_EEvPvRS4_(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v5, (long long *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 40);
  v7[0] = v3;
  v7[1] = v4;
  operator new();
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_8SPSTupleIJNS3_11SPSSequenceINSD_IJNS3_19SPSRemoteAllocGroupESC_yNSE_IcEEEEEEENSE_INSD_IJNSD_IJSC_SG_EEESJ_EEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISN_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorES11_E_JNS2_12ExecutorAddrENS2_8tpctypes15FinalizeRequestEEEEvOT0_S13_OT1_DpRKT2_EUlOT_PKcmE_S12_JS13_S15_EEEvS1F_S17_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1F_EUlS4_E_EEvPvS1Q_(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  uint64_t result = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (long long *)(a2 + 8));
  a1[5] = *(void *)(a2 + 40);
  return result;
}

void *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_8SPSTupleIJNS3_11SPSSequenceINSD_IJNS3_19SPSRemoteAllocGroupESC_yNSE_IcEEEEEEENSE_INSD_IJNSD_IJSC_SG_EEESJ_EEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISN_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorES11_E_JNS2_12ExecutorAddrENS2_8tpctypes15FinalizeRequestEEEEvOT0_S13_OT1_DpRKT2_EUlOT_PKcmE_S12_JS13_S15_EEEvS1F_S17_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1F_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_8SPSTupleIJNS5_11SPSSequenceINS9_IJNS5_19SPSRemoteAllocGroupES8_yNSA_IcEEEEEEENSA_INS9_IJNS9_IJS8_SC_EEESF_EEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISJ_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorESX_E_JNS0_12ExecutorAddrENS0_8tpctypes15FinalizeRequestEEEEvOT0_SZ_OT1_DpRKT2_EUlOT_PKcmE_SY_JSZ_S11_EEEvS1B_S13_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1B_ENUlS1J_E_clES1J_EUlvE_ED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE130;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 9)
  {
    uint64_t v3 = *(void **)(a1 + 48);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    uint64_t v3 = *(void **)(a1 + 48);
    if (v3) {
      goto LABEL_5;
    }
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_8SPSTupleIJNS5_11SPSSequenceINS9_IJNS5_19SPSRemoteAllocGroupES8_yNSA_IcEEEEEEENSA_INS9_IJNS9_IJS8_SC_EEESF_EEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISJ_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorESX_E_JNS0_12ExecutorAddrENS0_8tpctypes15FinalizeRequestEEEEvOT0_SZ_OT1_DpRKT2_EUlOT_PKcmE_SY_JSZ_S11_EEEvS1B_S13_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1B_ENUlS1J_E_clES1J_EUlvE_ED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE130;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 < 9)
  {
    if (v2) {
      goto LABEL_8;
    }
    uint64_t v3 = *(void **)(a1 + 48);
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = *(void **)(a1 + 48);
  }
  free(v3);
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_8SPSTupleIJNS5_11SPSSequenceINS9_IJNS5_19SPSRemoteAllocGroupES8_yNSA_IcEEEEEEENSA_INS9_IJNS9_IJS8_SC_EEESF_EEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISJ_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorESX_E_JNS0_12ExecutorAddrENS0_8tpctypes15FinalizeRequestEEEEvOT0_SZ_OT1_DpRKT2_EUlOT_PKcmE_SY_JSZ_S11_EEEvS1B_S13_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1B_ENUlS1J_E_clES1J_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 64));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_8SPSTupleIJNS5_11SPSSequenceINS9_IJNS5_19SPSRemoteAllocGroupES8_yNSA_IcEEEEEEENSA_INS9_IJNS9_IJS8_SC_EEESF_EEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISJ_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorESX_E_JNS0_12ExecutorAddrENS0_8tpctypes15FinalizeRequestEEEEvOT0_SZ_OT1_DpRKT2_EUlOT_PKcmE_SY_JSZ_S11_EEEvS1B_S13_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1B_ENUlS1J_E_clES1J_EUlvE_E3runEv(uint64_t a1)
{
  unint64_t v1 = (void *)(a1 + 8);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v8 = 0;
  if (v4[1])
  {
    if (v4[1] <= (void *)8) {
      unint64_t v2 = v4;
    }
    else {
      unint64_t v2 = (void **)v4[0];
    }
  }
  else
  {
    uint64_t v7 = v4[0];
    if (v4[0])
    {
      getErrorErrorCat();
      v5[0] = 3;
      v5[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    unint64_t v2 = v4;
  }
  llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSError,llvm::Error>::deserialize(&v8, (uint64_t)v2, (uint64_t)v4[1], v5);
  if (v5[0])
  {
    uint64_t v7 = (void *)v5[0];
    v5[0] = 0;
    uint64_t v6 = v8;
    uint64_t v8 = 0;
    llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::finalize(llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>)::{lambda(llvm::Error,llvm::Error)#1}::operator()(v1, (uint64_t *)&v7, (uint64_t *)&v6);
    if (v6) {
      (*(void (**)(void *))(*(void *)v6 + 8))(v6);
    }
  }
  else
  {
    v5[0] = 0;
    uint64_t v7 = v8;
    uint64_t v8 = 0;
    llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::finalize(llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>)::{lambda(llvm::Error,llvm::Error)#1}::operator()(v1, v5, (uint64_t *)&v7);
  }
  if (v7) {
    (*(void (**)(void *))(*(void *)v7 + 8))(v7);
  }
  if (v5[0]) {
    (*(void (**)(uint64_t))(*(void *)v5[0] + 8))(v5[0]);
  }
  if (v8) {
    (*(void (**)(void *))(*(void *)v8 + 8))(v8);
  }
  if (v4[1] >= (void *)9)
  {
    uint64_t v3 = v4[0];
LABEL_21:
    free(v3);
    return;
  }
  if (!v4[1])
  {
    uint64_t v3 = v4[0];
    if (v4[0]) {
      goto LABEL_21;
    }
  }
}

uint64_t llvm::GlobalValue::setVisibility(uint64_t result, char a2)
{
  uint64_t v2 = result;
  int v3 = *(_DWORD *)(result + 32) & 0xF;
  unsigned int v4 = *(_DWORD *)(result + 32) & 0xFFFFFFCF | (16 * (a2 & 3));
  *(_DWORD *)(result + 32) = v4;
  if ((v3 - 7) < 2) {
    goto LABEL_5;
  }
  if (16 * (a2 & 3))
  {
    uint64_t result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)result);
    if ((result & 1) == 0)
    {
      unsigned int v4 = *(_DWORD *)(v2 + 32);
LABEL_5:
      *(_DWORD *)(v2 + 32) = v4 | 0x4000;
    }
  }
  return result;
}

uint64_t *llvm::orc::StaticLibraryDefinitionGenerator::Create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)(*a2 + 8);
  uint64_t v11 = *(void *)(*a2 + 16) - v10;
  uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  v28[0] = v10;
  v28[1] = v11;
  long long v28[2] = v12;
  v28[3] = v13;
  llvm::object::createBinary((uint64_t)v28, 0, 1, (uint64_t)&v35);
  char v14 = v35;
  if (v36)
  {
    long long v35 = 0;
    *(unsigned char *)(a5 + 8) |= 1u;
    *(void *)a5 = v14;
  }
  else
  {
    int v15 = *((_DWORD *)v35 + 2);
    if (v15 == 1)
    {
      llvm::orc::getMachOSliceRangeForTriple(v35, (llvm::object::MachOUniversalBinary *)(*(void *)(*(void *)(a1 + 8) + 72) + 40), &v29);
      if ((v30 & 1) == 0)
      {
        uint64_t v17 = v29.i64[1];
        uint64_t v18 = *(void *)(*a2 + 8) + v29.i64[0];
        uint64_t v19 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
        v25[0] = v18;
        v25[1] = v17;
        long long v25[2] = v19;
        v25[3] = v20;
        llvm::object::Archive::create((uint64_t)v25);
      }
      uint64_t v23 = v29.i64[0];
      *(unsigned char *)(a5 + 8) |= 1u;
      *(void *)a5 = v23;
    }
    else
    {
      if (v15)
      {
        uint64_t v21 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
        v29.i64[0] = (uint64_t)"Unrecognized file type for ";
        uint64_t v30 = v21;
        uint64_t v31 = v22;
        __int16 v32 = 1283;
        getErrorErrorCat();
        operator new();
      }
      uint64_t v16 = *a2;
      *a2 = 0;
      uint64_t v26 = v14;
      uint64_t v27 = v16;
      long long v35 = 0;
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v34, a3);
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v33, a4);
      llvm::orc::StaticLibraryDefinitionGenerator::Create(&v26, v34, a5);
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v33);
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v34);
      if (v26) {
        (*(void (**)(llvm::object::Archive *))(*(void *)v26 + 8))(v26);
      }
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
  }
  return llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected((uint64_t *)&v35);
}

uint64_t llvm::orc::StaticLibraryDefinitionGenerator::Create@<X0>(llvm::object::Archive **a1@<X2>, void *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  if (a2[3] < 8uLL) {
    goto LABEL_26;
  }
  llvm::object::Archive::children(*a1, (llvm::Error *)&v21, 1, (uint64_t)&v36);
  llvm::object::Archive::Child::Child((uint64_t)&__dst, (uint64_t)&v36);
  unint64_t v35 = v38;
  llvm::object::Archive::Child::Child((uint64_t)&v28, (uint64_t)&v39);
  unint64_t v31 = v41;
  while (1)
  {
    if (v35 <= 7 && v31 < 8 || v34 == v30)
    {
      uint64_t v9 = v29;
      uint64_t v29 = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
      }
      uint64_t v10 = v33;
      uint64_t v33 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
      }
      uint64_t v11 = v40;
      uint64_t v40 = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
      }
      uint64_t v12 = v37;
      uint64_t v37 = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
      }
      uint64_t v13 = v21;
      if (v21)
      {
        uint64_t v21 = 0;
        *(unsigned char *)(a3 + 8) |= 1u;
        *(void *)a3 = v13;
        goto LABEL_37;
      }
LABEL_26:
      operator new();
    }
    llvm::object::Archive::Child::Child((uint64_t)&v22, (uint64_t)&__dst);
    llvm::object::Archive::Child::getMemoryBufferRef((llvm::object::Archive::Child *)&v22, (uint64_t)__p);
    if ((v27 & 1) == 0) {
      break;
    }
    int v24 = __p[0];
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v24);
    if (v24) {
      (*(void (**)(void *))(*(void *)v24 + 8))(v24);
    }
LABEL_13:
    uint64_t v8 = v23;
    uint64_t v23 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    }
    llvm::fallible_iterator<llvm::object::Archive::ChildFallibleIterator>::operator++((llvm::object::Archive::ChildFallibleIterator *)&__dst);
  }
  v20[0] = *(_OWORD *)__p;
  v20[1] = v26;
  uint64_t v5 = a2[3];
  uint64_t v6 = a2;
  if ((v5 & 2) == 0) {
    uint64_t v6 = (void *)*a2;
  }
  (*(void (**)(void **__return_ptr, void *, _OWORD *))(v5 & 0xFFFFFFFFFFFFFFF8))(&v24, v6, v20);
  uint64_t v7 = v24;
  if (!v24) {
    goto LABEL_13;
  }
  *(unsigned char *)(a3 + 8) |= 1u;
  *(void *)a3 = v7;
  uint64_t v14 = v23;
  uint64_t v23 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
  }
  uint64_t v15 = v29;
  uint64_t v29 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
  }
  uint64_t v16 = v33;
  uint64_t v33 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  uint64_t v17 = v40;
  uint64_t v40 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
  }
  uint64_t v18 = v37;
  uint64_t v37 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
  }
LABEL_37:
  uint64_t result = v21;
  if (v21) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  return result;
}

double llvm::object::Archive::children@<D0>(llvm::object::Archive *this@<X0>, llvm::Error *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  llvm::object::Archive::child_begin(this, a2, a3, (uint64_t)v15);
  llvm::object::Archive::child_end((uint64_t)v12);
  __int16 v5 = v16;
  uint64_t v6 = v17;
  __int16 v7 = v13;
  uint64_t v8 = v14;
  long long v9 = v15[1];
  *(_OWORD *)a4 = v15[0];
  *(_OWORD *)(a4 + 16) = v9;
  *(_WORD *)(a4 + 32) = v5;
  *(void *)(a4 + 40) = v6;
  double result = *(double *)v12;
  long long v11 = v12[1];
  *(_OWORD *)(a4 + 48) = v12[0];
  *(_OWORD *)(a4 + 64) = v11;
  *(_WORD *)(a4 + 80) = v7;
  *(void *)(a4 + 88) = v8;
  return result;
}

llvm::object::Archive::ChildFallibleIterator *llvm::fallible_iterator<llvm::object::Archive::ChildFallibleIterator>::operator++(llvm::object::Archive::ChildFallibleIterator *a1)
{
  llvm::object::Archive::ChildFallibleIterator::inc(a1, &v4);
  uint64_t v2 = v4;
  if (v4)
  {
    uint64_t v4 = 0;
    *(void *)(*((void *)a1 + 5) & 0xFFFFFFFFFFFFFFF8) = v2;
    *((void *)a1 + 5) = *((void *)a1 + 5) & 3 | 4;
  }
  else
  {
    *(void *)(*((void *)a1 + 5) & 0xFFFFFFFFFFFFFFF8) = 0;
  }
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t llvm::orc::StaticLibraryDefinitionGenerator::tryToGenerate@<X0>(uint64_t result@<X0>, int a2@<W2>, llvm::orc::JITDylib *a3@<X3>, uint64_t **a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (a2 || (uint64_t v6 = result, !*(void *)(result + 200)))
  {
    *a5 = 0;
    return result;
  }
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  unsigned int v48 = 0;
  uint64_t v8 = *a4;
  long long v9 = a4[1];
  if (*a4 == v9)
  {
    unint64_t v21 = 0;
    uint64_t v20 = 0;
    goto LABEL_28;
  }
  uint64_t v10 = 0;
  do
  {
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(v6 + 208), *(_DWORD *)(v6 + 224), *v8, &v49))
    {
      *(void *)&long long v49 = 0;
      int v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(v6 + 208), *(_DWORD *)(v6 + 224), *v8, &v49);
      uint64_t v12 = (void *)v49;
      if (v11)
      {
        uint64_t v13 = *(void *)(v49 + 8);
      }
      else
      {
        uint64_t v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(v6 + 208, v8, (void *)v49);
        uint64_t v12 = v14;
        if ((unint64_t)(*v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(*v14 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        uint64_t v15 = *v8;
        *uint64_t v14 = *v8;
        if ((unint64_t)(v15 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 1uLL);
        }
        uint64_t v13 = 0;
        *(_OWORD *)(v14 + 3) = 0u;
        *(_OWORD *)(v14 + 1) = 0u;
        uint64_t v10 = v46;
      }
      uint64_t v16 = v12[4];
      *(_OWORD *)&v53[8] = *((_OWORD *)v12 + 1);
      *(void *)uint64_t v53 = v13;
      *(void *)&v53[24] = v16;
      *(void *)&long long v49 = 0;
      unsigned int v17 = v48;
      if ((llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>,std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>::LookupBucketFor<std::pair<llvm::StringRef,llvm::StringRef>>(v10, v48, (uint64_t)v53, (unint64_t *)&v49) & 1) == 0)
      {
        if (4 * (int)v47 + 4 >= 3 * v17)
        {
          int v19 = 2 * v17;
        }
        else
        {
          if (v17 + ~v47 - HIDWORD(v47) > v17 >> 3)
          {
LABEL_17:
            uint64_t v18 = (_OWORD *)v49;
            LODWORD(v47) = v47 + 1;
            long long v49 = xmmword_261E8A6B0;
            long long v50 = xmmword_261E8A6B0;
            if (!llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual((uint64_t)v18, (uint64_t)&v49))--HIDWORD(v47); {
            *uint64_t v18 = *(_OWORD *)v53;
            }
            v18[1] = *(_OWORD *)&v53[16];
            goto LABEL_20;
          }
          int v19 = v17;
        }
        llvm::DenseMap<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>::grow((uint64_t)&v46, v19);
        *(void *)&long long v49 = 0;
        uint64_t v10 = v46;
        llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>,std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>::LookupBucketFor<std::pair<llvm::StringRef,llvm::StringRef>>(v46, v48, (uint64_t)v53, (unint64_t *)&v49);
        goto LABEL_17;
      }
    }
LABEL_20:
    v8 += 2;
  }
  while (v8 != v9);
  uint64_t v20 = v46;
  unint64_t v21 = v46 + 32 * v48;
  if (v47)
  {
    *(void *)&long long v49 = v46;
    *((void *)&v49 + 1) = v46 + 32 * v48;
    llvm::DenseMapIterator<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>,false>::AdvancePastEmptyBuckets((uint64_t *)&v49);
    int64x2_t v22 = (int64x2_t)v49;
    goto LABEL_29;
  }
LABEL_28:
  int64x2_t v22 = vdupq_n_s64(v21);
LABEL_29:
  int64x2_t v45 = v22;
  uint64_t v23 = v20 + 32 * v48;
  int v24 = (uint64_t *)v22.i64[0];
  if (v23 == v22.i64[0])
  {
LABEL_39:
    *a5 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v26 = *v24;
      uint64_t v25 = v24[1];
      uint64_t v28 = v24[2];
      uint64_t v27 = v24[3];
      uint64_t v29 = *(void *)(*(void *)(v6 + 128) + 8);
      v44[0] = *v24;
      v44[1] = v25;
      v44[2] = v28;
      v44[3] = v27;
      uint64_t v30 = v6 + 136;
      uint64_t v31 = *(void *)(v6 + 160);
      if ((v31 & 2) == 0) {
        uint64_t v30 = *(void *)(v6 + 136);
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, void *))(v31 & 0xFFFFFFFFFFFFFFF8))(v53, v30, v29, v44);
      if (v54) {
        break;
      }
      uint64_t v32 = *(void *)(v6 + 128);
      __int16 v51 = 261;
      *(void *)&long long v49 = v28;
      *((void *)&v49 + 1) = v27;
      uint64_t v52 = &v49;
      uint64_t v33 = operator new(24, (uint64_t *)&v52);
      *(void *)uint64_t v33 = &unk_270DBCE88;
      *((void *)v33 + 1) = v26;
      *((void *)v33 + 2) = v26 + v25;
      v40[0] = *(void *)v53;
      v40[1] = *(void *)&v53[8];
      memset(v53, 0, 20);
      int v41 = *(_DWORD *)&v53[16];
      uint64_t v42 = *(void *)&v53[24];
      char v43 = v33;
      *(void *)&v53[24] = 0;
      llvm::orc::ObjectLayer::add(v32, a3, (uint64_t *)&v43, (uint64_t)v40);
      if ((unint64_t)(v42 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v42 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(v40);
      uint64_t v34 = (uint64_t)v43;
      char v43 = 0;
      if (v34) {
        (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
      }
      uint64_t v35 = *a5;
      llvm::Expected<llvm::orc::MaterializationUnit::Interface>::~Expected((uint64_t)v53);
      if (v35) {
        goto LABEL_41;
      }
      v45.i64[0] += 32;
      llvm::DenseMapIterator<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>,false>::AdvancePastEmptyBuckets(v45.i64);
      int v24 = (uint64_t *)v45.i64[0];
      if (v45.i64[0] == v23) {
        goto LABEL_39;
      }
    }
    uint64_t v36 = *(void *)v53;
    *(void *)uint64_t v53 = 0;
    *a5 = v36;
    llvm::Expected<llvm::orc::MaterializationUnit::Interface>::~Expected((uint64_t)v53);
  }
LABEL_41:
  uint64_t v37 = v46;
  if (v48)
  {
    long long v49 = xmmword_261E8A6B0;
    long long v50 = xmmword_261E8A6B0;
    *(_OWORD *)uint64_t v53 = xmmword_261E8D420;
    *(_OWORD *)&v53[16] = xmmword_261E8D420;
    uint64_t v38 = 32 * v48;
    uint64_t v39 = v46;
    do
    {
      if (!llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(v39, (uint64_t)&v49)) {
        llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(v39, (uint64_t)v53);
      }
      v39 += 32;
      v38 -= 32;
    }
    while (v38);
  }
  return MEMORY[0x263E500A0](v37, 8);
}

void *llvm::jitlink::LinkGraph::addAbsoluteSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, int a8)
{
  uint64_t v16 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 16, 3);
  unint64_t v17 = v16[1] & 0xFFFFFFFFFFFFFFFCLL | 2;
  *uint64_t v16 = a4;
  v16[1] = v17;
  uint64_t v18 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 40, 3);
  int v19 = v18;
  *uint64_t v18 = a2;
  v18[1] = a3;
  uint64_t v20 = 0x1000000000000000;
  if (!a8) {
    uint64_t v20 = 0;
  }
  long long v18[2] = v16;
  v18[3] = ((unint64_t)(a6 & 1) << 57) | ((unint64_t)(a7 & 3) << 58) | v20;
  v18[4] = a5;
  int64x2_t v22 = v18;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1 + 232, &v22, (uint64_t)v23);
  return v19;
}

void *llvm::jitlink::LinkGraph::allocateContent(uint64_t a1, uint64_t a2)
{
  v11[32] = *MEMORY[0x263EF8340];
  long long v9 = v11;
  long long v10 = xmmword_261E8A780;
  int v3 = llvm::Twine::toStringRef(a2, (uint64_t)&v9);
  size_t v5 = v4;
  uint64_t v6 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, v4, 0);
  __int16 v7 = v6;
  if (v5) {
    memmove(v6, v3, v5);
  }
  if (v9 != v11) {
    free(v9);
  }
  return v7;
}

void llvm::orc::StaticLibraryDefinitionGenerator::~StaticLibraryDefinitionGenerator(llvm::orc::StaticLibraryDefinitionGenerator *this)
{
  *(void *)this = &unk_270DBE178;
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 232);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::~DenseMap((uint64_t *)this + 26);
  uint64_t v2 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)this + 168, *((char **)this + 22));
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)this + 17);
  llvm::orc::DefinitionGenerator::~DefinitionGenerator(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_270DBE178;
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 232);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::~DenseMap((uint64_t *)this + 26);
  uint64_t v2 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)this + 168, *((char **)this + 22));
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)this + 17);
  llvm::orc::DefinitionGenerator::~DefinitionGenerator(this);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::object::Archive::Child::Child(uint64_t a1, uint64_t a2)
{
  void (***v3)(uint64_t *__return_ptr);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v3 = *(void (****)(uint64_t *__return_ptr))(a2 + 8);
  if (v3)
  {
    (**v3)(&v8);
    uint64_t v4 = v8;
    uint64_t v8 = 0;
    size_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
      uint64_t v6 = v8;
      uint64_t v8 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
      }
    }
  }
  return a1;
}

BOOL llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(uint64_t a1, uint64_t a2)
{
  BOOL result = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a1, *(void *)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
  if (result)
  {
    size_t v5 = *(char **)(a1 + 16);
    size_t v6 = *(void *)(a1 + 24);
    __int16 v7 = *(void **)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 24);
    return llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(v5, v6, v7, v8);
  }
  return result;
}

uint64_t *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::~DenseMap(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = 40 * v2;
    do
    {
      if ((unint64_t)(*(void *)v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(*(void *)v3 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x263E500A0](v3, 8);
  return a1;
}

llvm::jitlink::LinkGraph *std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100](llvm::jitlink::LinkGraph **a1, llvm::jitlink::LinkGraph *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::jitlink::LinkGraph::~LinkGraph(result);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

uint64_t *llvm::Expected<llvm::object::Archive::Child>::~Expected(uint64_t *a1)
{
  if (a1[5])
  {
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    uint64_t v2 = a1[1];
    a1[1] = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
  }
  return a1;
}

uint64_t *llvm::object::Archive::ChildFallibleIterator::inc@<X0>(llvm::object::Archive::ChildFallibleIterator *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  llvm::object::Archive::Child::getNext(this, (uint64_t)v6);
  if (v7)
  {
    uint64_t v4 = v6[0];
    v6[0] = 0;
  }
  else
  {
    llvm::object::Archive::Child::operator=((uint64_t)this, (uint64_t)v6);
    uint64_t v4 = 0;
  }
  *a2 = v4;
  return llvm::Expected<llvm::object::Archive::Child>::~Expected(v6);
}

uint64_t llvm::object::Archive::Child::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    size_t v6 = (void *)(a1 + 40 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      long long v10 = 0;
      int v11 = 1;
      while (v7 != -8)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -16;
        }
        if (v12) {
          long long v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        size_t v6 = (void *)(a1 + 40 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        size_t v6 = v10;
      }
    }
  }
  else
  {
    size_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -8) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 40 * v10;
      do
      {
        *BOOL result = -8;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 40 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if ((*(void *)v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          uint64_t v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          uint64_t v15 = v19;
          if ((unint64_t)(*(void *)v19 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(*(void *)v19 + 8), 0xFFFFFFFFFFFFFFFFLL);
          }
          *(void *)uint64_t v15 = 0;
          *(void *)uint64_t v15 = *(void *)v13;
          *(void *)uint64_t v13 = 0;
          long long v16 = *(_OWORD *)(v13 + 8);
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(v13 + 24);
          *(_OWORD *)(v15 + 8) = v16;
          ++*(_DWORD *)(a1 + 8);
          uint64_t v14 = *(void *)v13;
        }
        if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        v13 += 40;
        v12 -= 40;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    uint64_t v18 = 40 * v17;
    do
    {
      *BOOL result = -8;
      result += 5;
      v18 -= 40;
    }
    while (v18);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>,std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>::LookupBucketFor<std::pair<llvm::StringRef,llvm::StringRef>>(uint64_t a1, int a2, uint64_t a3, unint64_t *a4)
{
  if (a2)
  {
    v23[0] = xmmword_261E8A6B0;
    v23[1] = xmmword_261E8A6B0;
    v22[0] = xmmword_261E8D420;
    v22[1] = xmmword_261E8D420;
    unsigned int v8 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a3, *(void *)a3 + *(void *)(a3 + 8), a3, a4);
    unint64_t v11 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(a3 + 16), *(void *)(a3 + 16) + *(void *)(a3 + 24), v9, v10);
    unint64_t v12 = (v11 | ((unint64_t)v8 << 32)) + ~(v11 << 32);
    unint64_t v13 = 9
        * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
    unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    unsigned int v15 = a2 - 1;
    uint64_t v16 = (a2 - 1) & ((v14 >> 31) ^ v14);
    uint64_t v17 = a1 + 32 * v16;
    if (llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(a3, v17))
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v19 = 0;
      int v20 = 1;
      while (!llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(v17, (uint64_t)v23))
      {
        if (llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(v17, (uint64_t)v22) && v19 == 0) {
          uint64_t v19 = v17;
        }
        uint64_t v16 = (v16 + v20) & v15;
        uint64_t v17 = a1 + 32 * v16;
        BOOL isEqual = llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(a3, v17);
        uint64_t result = 1;
        ++v20;
        if (isEqual) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v19) {
        uint64_t v17 = v19;
      }
    }
LABEL_4:
    *a4 = v17;
  }
  else
  {
    uint64_t result = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t llvm::DenseMapIterator<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>,false>::AdvancePastEmptyBuckets(uint64_t *a1)
{
  v5[0] = xmmword_261E8A6B0;
  v5[1] = xmmword_261E8A6B0;
  v4[0] = xmmword_261E8D420;
  v4[1] = xmmword_261E8D420;
  uint64_t result = *a1;
  if (result != a1[1])
  {
    do
    {
      if (!llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(result, (uint64_t)v5))
      {
        uint64_t result = llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(*a1, (uint64_t)v4);
        if (!result) {
          break;
        }
      }
      uint64_t v3 = a1[1];
      uint64_t result = *a1 + 32;
      *a1 = result;
    }
    while (result != v3);
  }
  return result;
}

_OWORD *llvm::DenseMap<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      unint64_t v11 = &result[2 * v10];
      do
      {
        *uint64_t result = xmmword_261E8A6B0;
        result[1] = xmmword_261E8A6B0;
        result += 2;
      }
      while (result != v11);
    }
    v18[0] = xmmword_261E8A6B0;
    v18[1] = xmmword_261E8A6B0;
    v17[0] = xmmword_261E8D420;
    v17[1] = xmmword_261E8D420;
    if (v3)
    {
      uint64_t v12 = 32 * v3;
      unint64_t v13 = (_OWORD *)v4;
      do
      {
        if (!llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual((uint64_t)v13, (uint64_t)v18)
          && !llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual((uint64_t)v13, (uint64_t)v17))
        {
          uint64_t v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>,std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>::LookupBucketFor<std::pair<llvm::StringRef,llvm::StringRef>>(*(void *)a1, *(_DWORD *)(a1 + 16), (uint64_t)v13, (unint64_t *)&v19);
          unint64_t v14 = v19;
          *uint64_t v19 = *v13;
          v14[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = &result[2 * v15];
    do
    {
      *uint64_t result = xmmword_261E8A6B0;
      result[1] = xmmword_261E8A6B0;
      result += 2;
    }
    while (result != v16);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::LookupBucketFor<unsigned long long>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = (37 * *a2) & (v3 - 1);
    int v7 = (void *)(*a1 + 8 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -2;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        int v7 = (void *)(v4 + 8 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v7 = v10;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::LookupBucketFor<unsigned long long>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::InsertIntoBucketImpl<unsigned long long>(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::InsertIntoBucketImpl<unsigned long long>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::LookupBucketFor<unsigned long long>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    return memset(result, 255, 8 * v10);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::moveFromOldBuckets(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6) {
    uint64_t result = (uint64_t)memset(*(void **)result, 255, 8 * v6);
  }
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int v7 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::LookupBucketFor<unsigned long long>((uint64_t *)v5, a2, &v7);
      *int v7 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    void v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

double llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::MemoryBufferRef,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::MemoryBufferRef>>,unsigned long long,llvm::MemoryBufferRef,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::MemoryBufferRef>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  uint64_t v6 = v9;
  if (v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    llvm::DenseMap<unsigned long long,llvm::MemoryBufferRef,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::MemoryBufferRef>>::grow(a1, v8);
    uint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    uint64_t v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)v6 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)uint64_t v6 = *a2;
  double result = 0.0;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  return result;
}

void *llvm::DenseMap<unsigned long long,llvm::MemoryBufferRef,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::MemoryBufferRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 40 * v10;
      do
      {
        *double result = -1;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 40 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if (*(void *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          uint64_t v15 = v19;
          *uint64_t v19 = *(void *)v13;
          long long v16 = *(_OWORD *)(v13 + 8);
          *(_OWORD *)(v15 + 3) = *(_OWORD *)(v13 + 24);
          *(_OWORD *)(v15 + 1) = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 40;
        v12 -= 40;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    uint64_t v18 = 40 * v17;
    do
    {
      *double result = -1;
      result += 5;
      v18 -= 40;
    }
    while (v18);
  }
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Expected<llvm::orc::MaterializationUnit::Interface>,llvm::orc::ExecutionSession &,llvm::MemoryBufferRef>::CallImpl<llvm::Expected<llvm::orc::MaterializationUnit::Interface> (*)(llvm::orc::ExecutionSession &,llvm::MemoryBufferRef)>(uint64_t (**a1)(uint64_t, _OWORD *), uint64_t a2, _OWORD *a3)
{
  uint64_t v3 = *a1;
  long long v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  return v3(a2, v6);
}

uint64_t llvm::Expected<std::unique_ptr<llvm::jitlink::LinkGraph>>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(llvm::jitlink::LinkGraph **)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(llvm::jitlink::LinkGraph *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)a1, 0);
  }
  return a1;
}

_WORD *llvm::orc::addInitSymbol(uint64_t *a1, uint64_t a2, const void *a3, size_t a4)
{
  unint64_t v8 = 0;
  uint64_t v9 = a1 + 3;
  do
  {
    __p = 0;
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    int v15 = 0;
    char v19 = 0;
    uint64_t v20 = 0;
    int v21 = 1;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = (unint64_t *)&unk_270DBD6E0;
    p_p = &__p;
    llvm::raw_ostream::SetUnbuffered(&v14);
    if ((unint64_t)(v17 - v18) > 1)
    {
      *(_WORD *)uint64_t v18 = 11812;
      v18 += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v14, "$.", 2uLL);
    }
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v14, a3, a4);
    uint64_t v10 = (void *)v18;
    if ((unint64_t)(v17 - v18) > 8)
    {
      *(unsigned char *)(v18 + 8) = 46;
      *uint64_t v10 = *(void *)".__inits.";
      v18 += 9;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v14, ".__inits.", 9uLL);
    }
    write_unsigned<unsigned long>((llvm::raw_ostream *)&v14, v8, 0, 0, 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v14);
    if (v25 >= 0) {
      uint64_t v11 = (uint64_t *)&__p;
    }
    else {
      uint64_t v11 = (uint64_t *)__p;
    }
    if (v25 >= 0) {
      unint64_t v12 = HIBYTE(v25);
    }
    else {
      unint64_t v12 = v24;
    }
    llvm::orc::ExecutorProcessControl::intern(*(void *)(a2 + 72), v11, v12, &v14);
    if ((unint64_t)(*v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(*v9 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    *uint64_t v9 = (uint64_t)v14;
    if (SHIBYTE(v25) < 0) {
      operator delete(__p);
    }
    uint64_t v14 = 0;
    ++v8;
  }
  while ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, v9, &v14) & 1) != 0);
  double result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(a1, v9);
  result[4] = 0x4000;
  return result;
}

uint64_t *llvm::orc::getObjectFileInterface@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  long long v5 = a2[1];
  long long v122 = *a2;
  long long v123 = v5;
  llvm::object::ObjectFile::createObjectFile((uint64_t)&v122, 0, 1, (uint64_t)&v124);
  uint64_t v6 = v124;
  if ((v125 & 1) == 0)
  {
    int v7 = *(_DWORD *)(v124 + 8);
    if (v124) {
      BOOL v8 = (v7 - 21) >= 0xFFFFFFFC;
    }
    else {
      BOOL v8 = 0;
    }
    if (!v8)
    {
      if (v124 && (v7 - 17) >= 0xFFFFFFFC)
      {
        long long v122 = 0uLL;
        LODWORD(v123) = 0;
        *((void *)&v123 + 1) = 0;
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v124 + 48))(v124);
        uint64_t v11 = v10;
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
        uint64_t v120 = v9;
        uint64_t v121 = v11;
        if (v9 == v12)
        {
LABEL_9:
          uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 352))(v6);
          uint64_t v15 = v14;
          uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 360))(v6);
          uint64_t v120 = v13;
          uint64_t v121 = v15;
          if (v15 != v17 || v13 != v16)
          {
            uint64_t v19 = v16;
            uint64_t v20 = v17;
            while (1)
            {
              (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t))(*(void *)v15 + 144))(&v128, v15, v13);
              if (v130)
              {
                int v21 = v128;
                uint64_t v128 = 0;
                if (v21) {
                  (*(void (**)(uint64_t *))(*v21 + 8))(v21);
                }
              }
              else if (llvm::orc::isELFInitializerSection((uint64_t)v128, v129))
              {
                llvm::orc::addInitSymbol((uint64_t *)&v122, a1, *(const void **)(v6 + 32), *(void *)(v6 + 40));
                if (v130)
                {
                  uint64_t v116 = v128;
                  uint64_t v128 = 0;
                  if (v116) {
                    (*(void (**)(uint64_t *))(*v116 + 8))(v116);
                  }
                }
                goto LABEL_78;
              }
              (*(void (**)(uint64_t, uint64_t *))(*(void *)v121 + 136))(v121, &v120);
              uint64_t v13 = v120;
              uint64_t v15 = v121;
              if (v121 == v20 && v120 == v19) {
                goto LABEL_78;
              }
            }
          }
          goto LABEL_78;
        }
        uint64_t v57 = v12;
        while (1)
        {
          (*(void (**)(uint64_t **__return_ptr))(*(void *)v121 + 40))(&v131);
          if (v132) {
            break;
          }
          if ((v131 & 3) != 2) {
            goto LABEL_86;
          }
          (*(void (**)(uint64_t **__return_ptr))(*(void *)v121 + 120))(&v128);
          if (v129) {
            goto LABEL_97;
          }
          if (v128 != 4)
          {
            (*(void (**)(uint64_t **__return_ptr))(*(void *)v121 + 80))(&v128);
            if (v130)
            {
LABEL_97:
              unint64_t v59 = v128;
              goto LABEL_98;
            }
            llvm::JITSymbolFlags::fromObjectSymbol((uint64_t)&v120, (uint64_t)&v126);
            if (v127)
            {
              uint64_t v62 = v126;
              *(unsigned char *)(a3 + 32) |= 1u;
              *(void *)a3 = v62;
              int v58 = 1;
            }
            else
            {
              if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v121 + 456))(v121, v120) == 10) {
                BYTE1(v126) |= 2u;
              }
              llvm::orc::ExecutorProcessControl::intern(*(void *)(a1 + 72), v128, v129, (unint64_t **)&v119);
              uint64_t v60 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct((uint64_t *)&v122, &v119);
              v60[4] = v126;
              if ((unint64_t)v119 - 1 < 0xFFFFFFFFFFFFFFE0)
              {
                atomic_fetch_add(v119 + 1, 0xFFFFFFFFFFFFFFFFLL);
                if (v127)
                {
                  if (v126) {
                    (*(void (**)(uint64_t))(*(void *)v126 + 8))(v126);
                  }
                }
              }
              int v58 = 0;
            }
            if (v130)
            {
              long long v63 = v128;
              uint64_t v128 = 0;
              if (v63) {
                (*(void (**)(uint64_t *))(*v63 + 8))(v63);
              }
            }
          }
          else
          {
LABEL_86:
            int v58 = 3;
          }
LABEL_99:
          if (v132)
          {
            uint64_t v61 = v131;
            uint64_t v131 = 0;
            if (v61) {
              (*(void (**)(uint64_t *))(*v61 + 8))(v61);
            }
          }
          if (v58 != 3 && v58) {
            goto LABEL_228;
          }
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v121 + 24))(v121, &v120);
          if (v120 == v57) {
            goto LABEL_9;
          }
        }
        unint64_t v59 = v131;
        uint64_t v131 = 0;
LABEL_98:
        *(unsigned char *)(a3 + 32) |= 1u;
        *(void *)a3 = v59;
        int v58 = 1;
        goto LABEL_99;
      }
      if (v124 && v7 == 10)
      {
        long long v122 = 0uLL;
        LODWORD(v123) = 0;
        *((void *)&v123 + 1) = 0;
        uint64_t v38 = *(void *)(v124 + 48);
        if (v38)
        {
          int v39 = *(unsigned __int16 *)(v38 + 2);
          if (v39 == 0xFFFF) {
            int v39 = 0;
          }
        }
        else
        {
          int v39 = *(_DWORD *)(*(void *)(v124 + 56) + 44);
        }
        unsigned int v71 = v39 + 1;
        if (v39 == -1)
        {
          uint64_t v72 = 0;
        }
        else
        {
          uint64_t v72 = operator new(19 * v71);
          uint64_t v73 = v72;
          do
          {
            *uint64_t v73 = 0;
            v73[18] = 0;
            v73 += 19;
          }
          while (v73 != &v72[19 * v71]);
        }
        uint64_t v74 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
        uint64_t v76 = v75;
        uint64_t v77 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
        uint64_t v120 = v74;
        uint64_t v121 = v76;
        if (v74 == v77)
        {
LABEL_210:
          uint64_t v103 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 352))(v6);
          uint64_t v105 = v104;
          uint64_t v106 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 360))(v6);
          uint64_t v120 = v103;
          uint64_t v121 = v105;
          if (v105 == v107 && v103 == v106)
          {
            char v111 = *(unsigned char *)(a3 + 32);
LABEL_225:
            *(unsigned char *)(a3 + 32) = v111 & 0xFE;
            *(_OWORD *)a3 = v122;
            long long v122 = 0uLL;
            *(_DWORD *)(a3 + 16) = v123;
            LODWORD(v123) = 0;
            *(void *)(a3 + 24) = *((void *)&v123 + 1);
            *((void *)&v123 + 1) = 0;
LABEL_226:
            if (v72) {
LABEL_227:
            }
              operator delete(v72);
          }
          else
          {
            uint64_t v109 = v106;
            uint64_t v110 = v107;
            char v111 = *(unsigned char *)(a3 + 32);
            while (1)
            {
              (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t))(*(void *)v105 + 144))(&v128, v105, v103);
              if (v130) {
                break;
              }
              if (v129 >= 4 && *(_DWORD *)v128 == *(_DWORD *)".CRT")
              {
                llvm::orc::addInitSymbol((uint64_t *)&v122, a1, *(const void **)(v6 + 32), *(void *)(v6 + 40));
                if (v130)
                {
                  uint64_t v118 = v128;
                  uint64_t v128 = 0;
                  if (v118) {
                    (*(void (**)(uint64_t *))(*v118 + 8))(v118);
                  }
                }
                goto LABEL_225;
              }
              (*(void (**)(uint64_t, uint64_t *))(*(void *)v121 + 136))(v121, &v120);
              uint64_t v103 = v120;
              uint64_t v105 = v121;
              if (v121 == v110 && v120 == v109) {
                goto LABEL_225;
              }
            }
            uint64_t v117 = v128;
            *(unsigned char *)(a3 + 32) = v111 | 1;
            *(void *)a3 = v117;
            if (v72) {
              goto LABEL_227;
            }
          }
LABEL_228:
          uint64_t v48 = *((void *)&v123 + 1);
          goto LABEL_229;
        }
        uint64_t v78 = v77;
        while (1)
        {
          (*(void (**)(uint64_t **__return_ptr))(*(void *)v121 + 40))(&v131);
          if (v132)
          {
            uint64_t v85 = v131;
            uint64_t v131 = 0;
LABEL_158:
            *(unsigned char *)(a3 + 32) |= 1u;
            *(void *)a3 = v85;
            int v86 = 1;
            goto LABEL_204;
          }
          uint64_t v79 = *(void *)(v6 + 96);
          if (v79) {
            uint64_t v80 = v120;
          }
          else {
            uint64_t v80 = 0;
          }
          if (v79) {
            uint64_t v81 = 0;
          }
          else {
            uint64_t v81 = v120;
          }
          if (v80)
          {
            if (!*(unsigned char *)(v80 + 17) || *(unsigned char *)(v80 + 16) != 3) {
              goto LABEL_166;
            }
            uint64_t v82 = v80 + 18;
            unsigned int v83 = *(unsigned __int16 *)(v80 + 12);
            if (v83 >> 8 <= 0xFE) {
              int v84 = *(unsigned __int16 *)(v80 + 12);
            }
            else {
              int v84 = (__int16)v83;
            }
          }
          else
          {
            if (!*(unsigned char *)(v81 + 19) || *(unsigned char *)(v81 + 18) != 3) {
              goto LABEL_168;
            }
            uint64_t v82 = v81 + 20;
            int v84 = *(_DWORD *)(v81 + 12);
          }
          llvm::object::COFFObjectFile::getSection((llvm::object *)v6, v84, (uint64_t)&v128);
          uint64_t v85 = v128;
          if (v129) {
            goto LABEL_158;
          }
          if ((*((unsigned char *)v128 + 37) & 0x10) != 0 && *(unsigned char *)(v82 + 14) != 5)
          {
            if (v80)
            {
              unsigned int v96 = *(unsigned __int16 *)(v80 + 12);
              if (v96 >> 8 > 0xFE) {
                unsigned int v96 = (__int16)v96;
              }
            }
            else
            {
              unsigned int v96 = *(_DWORD *)(v81 + 12);
            }
            uint64_t v99 = &v72[19 * v96];
            int v100 = v99[18];
            __int16 v101 = *(_WORD *)(v82 + 16);
            *(_OWORD *)uint64_t v99 = *(_OWORD *)v82;
            *((_WORD *)v99 + 8) = v101;
            if (!v100) {
              v99[18] = 1;
            }
LABEL_203:
            int v86 = 3;
            goto LABEL_204;
          }
          if (!v80)
          {
LABEL_168:
            int v87 = *(_DWORD *)(v81 + 12);
            if (v87 < 1) {
              goto LABEL_172;
            }
            goto LABEL_169;
          }
LABEL_166:
          int v87 = *(unsigned __int16 *)(v80 + 12);
          if ((unsigned __int16)(v87 + 256) < 0x101u) {
            goto LABEL_172;
          }
LABEL_169:
          if (v72[19 * v87 + 18])
          {
            v88 = &v72[19 * v87];
            int v89 = v88[14] != 1;
            v88[18] = 0;
            if ((v131 & 2) == 0) {
              goto LABEL_203;
            }
            goto LABEL_174;
          }
LABEL_172:
          if (v131) {
            goto LABEL_203;
          }
          int v89 = 0;
          if ((v131 & 2) == 0) {
            goto LABEL_203;
          }
LABEL_174:
          (*(void (**)(uint64_t **__return_ptr))(*(void *)v121 + 120))(&v128);
          if (v129) {
            goto LABEL_191;
          }
          if (v128 == 4) {
            goto LABEL_203;
          }
          (*(void (**)(uint64_t **__return_ptr))(*(void *)v121 + 80))(&v128);
          if (v130)
          {
LABEL_191:
            uint64_t v85 = v128;
            goto LABEL_158;
          }
          llvm::JITSymbolFlags::fromObjectSymbol((uint64_t)&v120, (uint64_t)&v126);
          if (v127)
          {
            uint64_t v97 = v126;
            *(unsigned char *)(a3 + 32) |= 1u;
            *(void *)a3 = v97;
            int v86 = 1;
          }
          else
          {
            char v90 = BYTE1(v126);
            char v91 = BYTE1(v126) | 0x10;
            BYTE1(v126) |= 0x10u;
            int v92 = (unsigned __int8 *)(v80 + 16);
            if (!v80) {
              int v92 = (unsigned __int8 *)(v81 + 18);
            }
            int v93 = *v92;
            if (((v93 != 105) & ~v89) == 0)
            {
              char v94 = v90 | 0x30;
              if (v93 == 105) {
                char v91 = v94;
              }
              if (v89) {
                v91 |= 2u;
              }
              BYTE1(v126) = v91;
            }
            llvm::orc::ExecutorProcessControl::intern(*(void *)(a1 + 72), v128, v129, (unint64_t **)&v119);
            int v95 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct((uint64_t *)&v122, &v119);
            v95[4] = v126;
            if ((unint64_t)v119 - 1 < 0xFFFFFFFFFFFFFFE0)
            {
              atomic_fetch_add(v119 + 1, 0xFFFFFFFFFFFFFFFFLL);
              if (v127)
              {
                if (v126) {
                  (*(void (**)(uint64_t))(*(void *)v126 + 8))(v126);
                }
              }
            }
            int v86 = 0;
          }
          if (v130)
          {
            uint64_t v98 = v128;
            uint64_t v128 = 0;
            if (v98) {
              (*(void (**)(uint64_t *))(*v98 + 8))(v98);
            }
          }
LABEL_204:
          if (v132)
          {
            uint64_t v102 = v131;
            uint64_t v131 = 0;
            if (v102) {
              (*(void (**)(uint64_t *))(*v102 + 8))(v102);
            }
          }
          if (v86 != 3 && v86) {
            goto LABEL_226;
          }
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v121 + 24))(v121, &v120);
          if (v120 == v78) {
            goto LABEL_210;
          }
        }
      }
      long long v122 = 0uLL;
      LODWORD(v123) = 0;
      *((void *)&v123 + 1) = 0;
      uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v124 + 48))(v124);
      uint64_t v51 = v50;
      uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
      uint64_t v120 = v49;
      uint64_t v121 = v51;
      if (v49 == v52)
      {
        uint64_t v53 = 0;
        int v54 = 0;
        uint64_t v55 = 0;
        uint64_t v56 = 0;
LABEL_234:
        uint64_t v115 = 0;
        *(unsigned char *)(a3 + 32) &= ~1u;
        *(void *)a3 = v55;
        long long v122 = 0uLL;
        *(void *)(a3 + 8) = v56;
        *(_DWORD *)(a3 + 16) = v54;
        LODWORD(v123) = 0;
        *(void *)(a3 + 24) = v53;
        *((void *)&v123 + 1) = 0;
LABEL_235:
        if ((unint64_t)(v115 - 1) > 0xFFFFFFFFFFFFFFDFLL) {
          goto LABEL_232;
        }
        int v113 = (atomic_ullong *)(v115 + 8);
        goto LABEL_231;
      }
      uint64_t v64 = v52;
      while (1)
      {
        (*(void (**)(uint64_t **__return_ptr))(*(void *)v121 + 40))(&v131);
        if (v132) {
          break;
        }
        if ((v131 & 3) != 2) {
          goto LABEL_115;
        }
        (*(void (**)(uint64_t **__return_ptr))(*(void *)v121 + 120))(&v128);
        if (v129) {
          goto LABEL_124;
        }
        if (v128 != 4)
        {
          (*(void (**)(uint64_t **__return_ptr))(*(void *)v121 + 80))(&v128);
          if (v130)
          {
LABEL_124:
            uint64_t v66 = v128;
            goto LABEL_125;
          }
          llvm::JITSymbolFlags::fromObjectSymbol((uint64_t)&v120, (uint64_t)&v126);
          if (v127)
          {
            uint64_t v69 = v126;
            *(unsigned char *)(a3 + 32) |= 1u;
            *(void *)a3 = v69;
            int v65 = 1;
          }
          else
          {
            llvm::orc::ExecutorProcessControl::intern(*(void *)(a1 + 72), v128, v129, (unint64_t **)&v119);
            uint64_t v67 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct((uint64_t *)&v122, &v119);
            v67[4] = v126;
            if ((unint64_t)v119 - 1 < 0xFFFFFFFFFFFFFFE0)
            {
              atomic_fetch_add(v119 + 1, 0xFFFFFFFFFFFFFFFFLL);
              if (v127)
              {
                if (v126) {
                  (*(void (**)(uint64_t))(*(void *)v126 + 8))(v126);
                }
              }
            }
            int v65 = 0;
          }
          if (v130)
          {
            long long v70 = v128;
            uint64_t v128 = 0;
            if (v70) {
              (*(void (**)(uint64_t *))(*v70 + 8))(v70);
            }
          }
        }
        else
        {
LABEL_115:
          int v65 = 3;
        }
LABEL_126:
        if (v132)
        {
          long long v68 = v131;
          uint64_t v131 = 0;
          if (v68) {
            (*(void (**)(uint64_t *))(*v68 + 8))(v68);
          }
        }
        if (v65 != 3 && v65)
        {
          uint64_t v115 = *((void *)&v123 + 1);
          goto LABEL_235;
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v121 + 24))(v121, &v120);
        if (v120 == v64)
        {
          uint64_t v56 = *((void *)&v122 + 1);
          uint64_t v55 = v122;
          int v54 = v123;
          uint64_t v53 = *((void *)&v123 + 1);
          goto LABEL_234;
        }
      }
      uint64_t v66 = v131;
      uint64_t v131 = 0;
LABEL_125:
      *(unsigned char *)(a3 + 32) |= 1u;
      *(void *)a3 = v66;
      int v65 = 1;
      goto LABEL_126;
    }
    long long v122 = 0uLL;
    LODWORD(v123) = 0;
    *((void *)&v123 + 1) = 0;
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v124 + 48))(v124);
    uint64_t v25 = v24;
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
    uint64_t v120 = v23;
    uint64_t v121 = v25;
    if (v23 == v26)
    {
LABEL_27:
      uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 352))(v6);
      uint64_t v29 = v28;
      uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 360))(v6);
      uint64_t v120 = v27;
      uint64_t v121 = v29;
      if (v29 != v31 || v27 != v30)
      {
        uint64_t v33 = v30;
        uint64_t v34 = v31;
        do
        {
          if (getSectionFlags((void *)v6, v27) == 9
            || ((uint64_t v35 = *(void *)(*(void *)(v6 + 80) + 8 * v120),
                 uint64_t v36 = (char *)(v35 + 16),
                 !*(unsigned char *)(v35 + 31))
              ? (size_t v37 = strlen(v36))
              : (size_t v37 = 16),
                (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t))(*(void *)v6 + 144))(&v128, v6, v120), (llvm::orc::isMachOInitializerSection(v36, v37, v128, v129) & 1) != 0))
          {
            llvm::orc::addInitSymbol((uint64_t *)&v122, a1, *(const void **)(v6 + 32), *(void *)(v6 + 40));
            break;
          }
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v121 + 136))(v121, &v120);
          LODWORD(v27) = v120;
        }
        while (v121 != v34 || v120 != v33);
      }
LABEL_78:
      uint64_t v48 = 0;
      *(unsigned char *)(a3 + 32) &= ~1u;
      *(void *)a3 = v122;
      *(_DWORD *)(a3 + 16) = v123;
      *(void *)(a3 + 24) = *((void *)&v123 + 1);
      *(void *)(a3 + 8) = *((void *)&v122 + 1);
      long long v122 = 0uLL;
      LODWORD(v123) = 0;
      *((void *)&v123 + 1) = 0;
LABEL_229:
      if ((unint64_t)(v48 - 1) > 0xFFFFFFFFFFFFFFDFLL)
      {
LABEL_232:
        llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)&v122);
        return llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected(&v124);
      }
      int v113 = (atomic_ullong *)(v48 + 8);
LABEL_231:
      atomic_fetch_add(v113, 0xFFFFFFFFFFFFFFFFLL);
      goto LABEL_232;
    }
    uint64_t v40 = v26;
    while (1)
    {
      (*(void (**)(uint64_t **__return_ptr))(*(void *)v121 + 40))(&v131);
      if (v132) {
        break;
      }
      if ((v131 & 3) != 2) {
        goto LABEL_51;
      }
      (*(void (**)(uint64_t **__return_ptr))(*(void *)v121 + 120))(&v128);
      if (v129) {
        goto LABEL_58;
      }
      if (v128 != 4)
      {
        (*(void (**)(uint64_t **__return_ptr))(*(void *)v121 + 80))(&v128);
        if (v130)
        {
LABEL_58:
          uint64_t v42 = v128;
          goto LABEL_59;
        }
        llvm::JITSymbolFlags::fromObjectSymbol((uint64_t)&v120, (uint64_t)&v126);
        if (v127)
        {
          uint64_t v45 = v126;
          *(unsigned char *)(a3 + 32) |= 1u;
          *(void *)a3 = v45;
          int v41 = 1;
        }
        else
        {
          if (v129)
          {
            char v43 = v128;
            if (*(unsigned char *)v128 == 108) {
              BYTE1(v126) &= 0x6Fu;
            }
          }
          else
          {
            char v43 = v128;
          }
          llvm::orc::ExecutorProcessControl::intern(*(void *)(a1 + 72), v43, v129, (unint64_t **)&v119);
          uint64_t v46 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct((uint64_t *)&v122, &v119);
          v46[4] = v126;
          if ((unint64_t)v119 - 1 < 0xFFFFFFFFFFFFFFE0)
          {
            atomic_fetch_add(v119 + 1, 0xFFFFFFFFFFFFFFFFLL);
            if (v127)
            {
              if (v126) {
                (*(void (**)(uint64_t))(*(void *)v126 + 8))(v126);
              }
            }
          }
          int v41 = 0;
        }
        if (v130)
        {
          uint64_t v47 = v128;
          uint64_t v128 = 0;
          if (v47) {
            (*(void (**)(uint64_t *))(*v47 + 8))(v47);
          }
        }
      }
      else
      {
LABEL_51:
        int v41 = 3;
      }
LABEL_60:
      if (v132)
      {
        unint64_t v44 = v131;
        uint64_t v131 = 0;
        if (v44) {
          (*(void (**)(uint64_t *))(*v44 + 8))(v44);
        }
      }
      if (v41 != 3 && v41) {
        goto LABEL_228;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v121 + 24))(v121, &v120);
      if (v120 == v40) {
        goto LABEL_27;
      }
    }
    uint64_t v42 = v131;
    uint64_t v131 = 0;
LABEL_59:
    *(unsigned char *)(a3 + 32) |= 1u;
    *(void *)a3 = v42;
    int v41 = 1;
    goto LABEL_60;
  }
  uint64_t v124 = 0;
  *(unsigned char *)(a3 + 32) |= 1u;
  *(void *)a3 = v6;
  return llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected(&v124);
}

_WORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v7);
  long long v5 = v7;
  if ((v4 & 1) == 0) {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucket<llvm::orc::SymbolStringPtr>((uint64_t)a1, v7, a2);
  }
  return v5;
}

_WORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucket<llvm::orc::SymbolStringPtr>(uint64_t a1, void *a2, void *a3)
{
  double result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*(void *)result - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(*(void *)result + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  *(void *)double result = 0;
  *(void *)double result = *a3;
  *a3 = 0;
  result[4] = 0;
  return result;
}

uint64_t llvm::Function::args(llvm::Function *this)
{
  if ((*((_WORD *)this + 9) & 1) == 0) {
    return *((void *)this + 11);
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v2 = *((void *)this + 11);
  if (*((_WORD *)this + 9)) {
    llvm::Function::BuildLazyArguments(this);
  }
  return v2;
}

uint64_t *llvm::IRBuilderBase::CreateCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, llvm::MDNode *a7)
{
  uint64_t v11 = *(void *)(a1 + 104);
  uint64_t v12 = *(void *)(a1 + 112);
  __int16 v18 = 257;
  uint64_t v13 = llvm::CallInst::Create(a2, a3, a4, a5, v11, v12, (const llvm::Twine *)v17, 0);
  uint64_t v14 = (uint64_t)v13;
  if (*(unsigned char *)(a1 + 100)) {
    *((void *)v13 + 8) = llvm::AttributeList::addAttributeAtIndex((uint64_t **)v13 + 8, **(uint64_t ***)v13, -1, 62);
  }
  if (llvm::FPMathOperator::classof(v14))
  {
    int v15 = *(_DWORD *)(a1 + 96);
    if (a7 || (a7 = *(llvm::MDNode **)(a1 + 88)) != 0) {
      llvm::Value::setMetadata(v14, 3, a7);
    }
    *(unsigned char *)(v14 + 17) |= 2 * (_BYTE)v15;
  }
  return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, (uint64_t *)v14, a6);
}

void llvm::orc::addFunctionPointerRelocationsToCurrentSymbol(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v57[0] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 144) == 38)
  {
    int v41 = 0;
    char v45 = 0;
    uint64_t v46 = 0;
    int v47 = 1;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v42 = 0;
    uint64_t v40 = &unk_270DBD660;
    uint64_t v33 = a3[2];
    int v7 = (void *)a1[2];
    uint64_t v8 = *v7;
    uint64_t v9 = a1[3] & 0x1FFFFFFFFFFFFFFLL;
    uint64_t v10 = v7[3];
    if (a1[4]) {
      unint64_t v11 = a1[4];
    }
    else {
      unint64_t v11 = v7[4] - v9;
    }
    uint64_t v52 = 1;
    *(void *)&long long v12 = -1;
    *((void *)&v12 + 1) = -1;
    long long v56 = v12;
    long long v55 = v12;
    long long v53 = v12;
    long long v54 = v12;
    uint64_t v13 = v7[5];
    uint64_t v14 = v7[6];
    uint64_t v31 = v7;
    if (v13 != v14)
    {
      while (1)
      {
        if (*(unsigned __int8 *)(v13 + 24) >= 2u)
        {
          uint64_t v15 = *(unsigned int *)(v13 + 8);
          v48[0] = 0;
          if ((llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::LookupBucketFor<unsigned long>((uint64_t)&v52, v15, v48) & 1) == 0)break; {
        }
          }
LABEL_16:
        v13 += 32;
        if (v13 == v14) {
          goto LABEL_21;
        }
      }
      unsigned int v16 = v52 >> 1;
      if (v52) {
        unsigned int v17 = 8;
      }
      else {
        unsigned int v17 = DWORD2(v53);
      }
      if (4 * v16 + 4 >= 3 * v17)
      {
        v17 *= 2;
      }
      else if (v17 + ~v16 - HIDWORD(v52) > v17 >> 3)
      {
LABEL_13:
        LODWORD(v52) = v52 + 2;
        if (*(void *)v48[0] != -1) {
          --HIDWORD(v52);
        }
        *(void *)v48[0] = v15;
        goto LABEL_16;
      }
      llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::grow((uint64_t)&v52, v17);
      v48[0] = 0;
      llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::LookupBucketFor<unsigned long>((uint64_t)&v52, v15, v48);
      goto LABEL_13;
    }
LABEL_21:
    if (v11)
    {
      unint64_t v18 = 0;
      uint64_t v19 = v9 + v8;
      do
      {
        v48[0] = 0;
        v48[1] = 0;
        uint64_t v49 = v51;
        uint64_t v50 = 0xA00000000;
        uint64_t v38 = v18 + v19;
        uint64_t v39 = 0;
        if ((*(unsigned int (**)(void *, void *, uint64_t *, unint64_t, unint64_t))(*a3 + 16))(a3, v48, &v39, v10 + v9 + v18, v11 - v18) != 3)
        {
          v35[0] = "failed to disassemble at address {0:x16}";
          v35[1] = 40;
          long long v35[2] = &v37;
          v35[3] = 1;
          v36[0] = &unk_270DBE1A0;
          v36[1] = &v38;
          size_t v37 = v36;
          getErrorErrorCat();
          operator new();
        }
        v18 += v39;
        uint64_t v20 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a4 + 112))(a4, v48, v33, v38);
        if (v21) {
          BOOL v22 = v20 == v19;
        }
        else {
          BOOL v22 = 0;
        }
        if (v22)
        {
          uint64_t v23 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a4 + 120))(a4, v48, v39);
          if (v24)
          {
            if (v39 - v23 == 4)
            {
              uint64_t v25 = v23 - v19 + v38 + (a1[3] & 0x1FFFFFFFFFFFFFFLL);
              v35[0] = 0;
              if (llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::LookupBucketFor<unsigned long>((uint64_t)&v52, v25, v35))
              {
                uint64_t v26 = (void *)v35[0];
                uint64_t v27 = v53;
                uint64_t v28 = DWORD2(v53);
                int v29 = v52 & 1;
              }
              else
              {
                int v29 = v52 & 1;
                uint64_t v27 = v53;
                uint64_t v28 = DWORD2(v53);
                uint64_t v26 = (void *)(v53 + 8 * DWORD2(v53));
                if (v52) {
                  uint64_t v26 = v57;
                }
              }
              uint64_t v30 = (void *)(v27 + 8 * v28);
              if (v29) {
                uint64_t v30 = v57;
              }
              if (v30 == v26) {
                llvm::jitlink::Block::addEdge(v31, 7, v25, (uint64_t)a1, -4);
              }
            }
          }
        }
        if (v49 != v51) {
          free(v49);
        }
      }
      while (v18 < v11);
    }
    *a5 = 0;
    if ((v52 & 1) == 0) {
      MEMORY[0x263E500A0](v53, 8);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v40);
  }
  else
  {
    *a5 = 0;
  }
}

uint64_t *llvm::IRBuilderBase::CreateAlignedLoad(uint64_t *a1, llvm::Type *a2, llvm::Value *a3, __int16 a4, __int16 a5, uint64_t a6)
{
  char Alignment = a4;
  if ((a4 & 0xFF00) == 0) {
    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(a1[6] + 56) + 40) + 256), a2, 1);
  }
  long long v12 = (char *)operator new(0x60uLL);
  *((_DWORD *)v12 + 13) = *((_DWORD *)v12 + 13) & 0x38000000 | 1;
  uint64_t v13 = (uint64_t *)(v12 + 32);
  *(void *)long long v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = v12 + 32;
  __int16 v16 = 257;
  llvm::LoadInst::LoadInst((llvm::UnaryInstruction *)(v12 + 32), a2, a3, (const llvm::Twine *)v15, a5, Alignment, 0);
  return llvm::IRBuilderBase::Insert<llvm::LoadInst>(a1, v13, a6);
}

uint64_t *llvm::IRBuilderBase::Insert<llvm::LoadInst>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], a2, a3, a1[6], a1[7]);
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v6 + 16 * v5;
    do
    {
      llvm::Instruction::setMetadata(a2, *(_DWORD *)v6, *(llvm::MDNode **)(v6 + 8));
      v6 += 16;
    }
    while (v6 != v7);
  }
  return a2;
}

char *llvm::CallInst::Create(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, const llvm::Twine *a7, uint64_t *a8)
{
  int v16 = 0;
  if (a6)
  {
    uint64_t v17 = 48 * a6;
    unint64_t v18 = (void *)(a5 + 32);
    do
    {
      v16 += (*v18 - *(v18 - 1)) >> 3;
      v18 += 6;
      v17 -= 48;
    }
    while (v17);
  }
  int v19 = a4 + 1;
  uint64_t v20 = llvm::User::operator new((llvm::User *)0x50, v16 + (int)a4 + 1, 16 * (int)a6);
  char v21 = v20;
  if (a6)
  {
    unsigned int v22 = 0;
    uint64_t v23 = 48 * a6;
    char v24 = (void *)(a5 + 32);
    do
    {
      v22 += (*v24 - *(v24 - 1)) >> 3;
      v24 += 6;
      v23 -= 48;
    }
    while (v23);
    uint64_t v25 = 48 * a6;
    uint64_t v26 = (void *)(a5 + 32);
    do
    {
      LODWORD(v23) = v23 + ((*v26 - *(v26 - 1)) >> 3);
      v26 += 6;
      v25 -= 48;
    }
    while (v25);
    uint64_t v27 = a4 + v22;
  }
  else
  {
    LODWORD(v23) = 0;
    uint64_t v27 = a4;
  }
  uint64_t v28 = llvm::Instruction::Instruction((uint64_t)v20, **(void **)(a1 + 16), 56, (uint64_t)&v20[32 * ~v27], (int)v23 + v19, a8);
  *((void *)v21 + 8) = 0;
  llvm::CallInst::init(v28, a1, a2, a3, a4, a5, a6, a7);
  return v21;
}

BOOL llvm::FPMathOperator::classof(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1)
  {
    unsigned int v2 = v1 - 28;
    if (v1 >= 0x1C)
    {
LABEL_6:
      if (v2 <= 0x39)
      {
        if (((1 << v2) & 0x40000001255000) != 0) {
          return 1;
        }
        if (((1 << v2) & 0x380000000000000) != 0)
        {
          do
          {
            uint64_t v4 = *(void *)a1;
            int v5 = *(unsigned __int8 *)(*(void *)a1 + 8);
            a1 = *(void *)a1 + 24;
            if (v4) {
              BOOL v6 = v5 == 17;
            }
            else {
              BOOL v6 = 0;
            }
          }
          while (v6);
          if ((v5 & 0xFE) == 0x12) {
            int v5 = *(_DWORD *)(**(void **)(v4 + 16) + 8);
          }
          if (v5 >= 6u || ((0x2Fu >> v5) & 1) == 0) {
            return (v5 & 0xFD) == 4;
          }
          return 1;
        }
      }
      return 0;
    }
  }
  uint64_t v3 = 0;
  if (a1 && v1 == 5)
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 18);
    goto LABEL_6;
  }
  return v3;
}

uint64_t llvm::ValueHandleBase::operator=(llvm::ValueHandleBase *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3 != a2)
  {
    if (v3 != -8192 && v3 != -4096 && v3 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList(this);
    }
    *((void *)this + 2) = a2;
    if (a2 != -8192 && a2 != -4096 && a2) {
      llvm::ValueHandleBase::AddToUseList(this);
    }
  }
  return a2;
}

_DWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::DenseMap(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::init(a1, a3);
  if (a3)
  {
    uint64_t v6 = a2 + 16 * a3;
    do
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::try_emplace<llvm::JITSymbolFlags const&>((uint64_t)a1, (uint64_t *)a2, (_WORD *)(a2 + 8), (uint64_t)v8);
      a2 += 16;
    }
    while (a2 != v6);
  }
  return a1;
}

unint64_t *llvm::ValueHandleBase::ValueHandleBase(unint64_t *result, unsigned int a2, uint64_t *a3)
{
  *double result = 2 * a2;
  result[1] = 0;
  unint64_t v3 = a3[2];
  result[2] = v3;
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = (unint64_t *)(*a3 & 0xFFFFFFFFFFFFFFF8);
    result[1] = *v6;
    *uint64_t v6 = (unint64_t)result;
    uint64_t v7 = (unint64_t *)result[1];
    *double result = v5 & 0xFFFFFFFFFFFFFFF8 | *result & 7;
    if (v7) {
      *uint64_t v7 = *v7 & 7 | (unint64_t)(result + 1);
    }
  }
  return result;
}

uint64_t llvm::ValueHandleBase::operator=(llvm::ValueHandleBase *this, uint64_t *a2)
{
  uint64_t v3 = *((void *)this + 2);
  uint64_t result = a2[2];
  if (v3 == result) {
    return v3;
  }
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
  {
    llvm::ValueHandleBase::RemoveFromUseList(this);
    uint64_t result = a2[2];
  }
  *((void *)this + 2) = result;
  if (result != -8192 && result != -4096 && result != 0)
  {
    uint64_t v8 = *a2;
    uint64_t v9 = (void *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    *((void *)this + 1) = *v9;
    *uint64_t v9 = this;
    *(void *)this = v8 & 0xFFFFFFFFFFFFFFF8 | *(void *)this & 7;
    uint64_t v10 = (unint64_t *)*((void *)this + 1);
    if (v10) {
      *uint64_t v10 = *v10 & 7 | ((unint64_t)this + 8);
    }
    return *((void *)this + 2);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::LookupBucketFor<unsigned long>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -1)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::grow(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x263EF8340];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::moveFromOldBuckets(a1, v6, &v6[v7]);
    JUMPOUT(0x263E500A0);
  }
  uint64_t v8 = v14;
  for (uint64_t i = 8; i != 72; i += 8)
  {
    unint64_t v10 = *(void *)(a1 + i);
    if (v10 <= 0xFFFFFFFFFFFFFFFDLL) {
      *v8++ = v10;
    }
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::moveFromOldBuckets(a1, v14, v8);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v7 = 8;
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
  }
  uint64_t result = (uint64_t)memset(v8, 255, 8 * v7);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((unint64_t)*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v10 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::LookupBucketFor<unsigned long>((uint64_t)v5, v9, &v10);
      *unint64_t v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void llvm::detail::provider_format_adapter<unsigned long long &>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned long long &>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned long long,void>::format(*(unint64_t **)(a1 + 8), a2, a3, a4);
}

uint64_t *llvm::Expected<std::unique_ptr<llvm::MemoryBuffer>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v3) {
LABEL_5:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else if (v3)
  {
    goto LABEL_5;
  }
  return a1;
}

void llvm::orc::ObjectLayer::add(uint64_t a1, uint64_t a2)
{
}

uint64_t llvm::orc::ObjectLayer::add@<X0>(uint64_t a1@<X0>, llvm::orc::JITDylib *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(*a3 + 8);
  uint64_t v10 = *(void *)(*a3 + 16) - v9;
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)*a3 + 16))();
  *(void *)&long long v21 = v9;
  *((void *)&v21 + 1) = v10;
  uint64_t v22 = v11;
  uint64_t v23 = v12;
  llvm::orc::getObjectFileInterface(v8, &v21, (uint64_t)&v24);
  if (v28)
  {
    uint64_t v15 = v24;
    uint64_t v24 = 0;
    *a4 = v15;
  }
  else
  {
    uint64_t v13 = *a3;
    *a3 = 0;
    v17[0] = v24;
    v17[1] = v25;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v18 = v26;
    int v26 = 0;
    uint64_t v19 = v27;
    uint64_t v20 = v13;
    uint64_t v27 = 0;
    llvm::orc::ObjectLayer::add(a1, a2, &v20, (uint64_t)v17);
    if ((unint64_t)(v19 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v19 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(v17);
    uint64_t v14 = v20;
    uint64_t v20 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  return llvm::Expected<llvm::orc::MaterializationUnit::Interface>::~Expected((uint64_t)&v24);
}

uint64_t llvm::orc::BasicObjectLayerMaterializationUnit::BasicObjectLayerMaterializationUnit(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = *a4;
  *a4 = 0;
  int v8 = *((_DWORD *)a4 + 4);
  *((_DWORD *)a4 + 4) = 0;
  uint64_t v9 = a4[3];
  a4[3] = 0;
  *(void *)a1 = &unk_270DBDAF0;
  *(void *)(a1 + 8) = v7;
  v13[0] = 0;
  uint64_t v10 = a4[1];
  a4[1] = 0;
  *(void *)(a1 + 16) = v10;
  v13[1] = 0;
  *(_DWORD *)(a1 + 24) = v8;
  int v14 = 0;
  *(void *)(a1 + 32) = v9;
  uint64_t v15 = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(v13);
  *(void *)a1 = &unk_270DBE1D0;
  *(void *)(a1 + 40) = a2;
  uint64_t v11 = *a3;
  *a3 = 0;
  *(void *)(a1 + 48) = v11;
  return a1;
}

const char *llvm::orc::BasicObjectLayerMaterializationUnit::getName(llvm::orc::BasicObjectLayerMaterializationUnit *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    return (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 16))(v1);
  }
  else {
    return "<null object>";
  }
}

void llvm::orc::BasicObjectLayerMaterializationUnit::materialize(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = v4;
  int v8 = v3;
  (*(void (**)(uint64_t, uint64_t **, uint64_t *))(*(void *)v2 + 48))(v2, &v8, &v7);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  int v6 = v8;
  int v8 = 0;
  if (v6) {
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)&v8, v6);
  }
}

void llvm::orc::BasicObjectLayerMaterializationUnit::~BasicObjectLayerMaterializationUnit(llvm::orc::BasicObjectLayerMaterializationUnit *this)
{
  *(void *)this = &unk_270DBE1D0;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_270DBDAF0;
  uint64_t v3 = *((void *)this + 4);
  if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)this + 1);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_270DBE1D0;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_270DBDAF0;
  uint64_t v3 = *((void *)this + 4);
  if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)this + 1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::orc::loadLinkableFile@<X0>(uint64_t a1@<X0>, void (**a2)(_anonymous_namespace_::ErrorErrorCategory *__hidden this)@<X1>, llvm::Triple *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a5 + 16))
  {
    *(void *)a5 = a1;
    *(void *)(a5 + 8) = a2;
    *(unsigned char *)(a5 + 16) = 1;
  }
  __int16 v38 = 261;
  uint64_t v34 = (uint64_t *)a1;
  uint64_t v35 = (uint64_t)a2;
  llvm::sys::fs::openNativeFileForRead((uint64_t)&v34, 0, 0, (uint64_t)&v39);
  if (v40)
  {
    __int16 v38 = 261;
    uint64_t v34 = (uint64_t *)a1;
    uint64_t v35 = (uint64_t)a2;
    uint64_t v16 = v39;
    uint64_t v39 = 0;
    uint64_t v26 = v16;
    llvm::FileError::build((uint64_t)&v34, 0, 0, &v26);
  }
  uint64_t v12 = v39;
  __int16 v38 = 261;
  uint64_t v13 = *(void *)(a5 + 8);
  uint64_t v34 = *(uint64_t **)a5;
  uint64_t v35 = v13;
  getOpenFileImpl<llvm::MemoryBuffer>(v39, (const llvm::Twine *)&v34, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 1, 0, 0, (uint64_t)&v32);
  if (v33)
  {
    uint64_t v34 = (uint64_t *)"Could not load object at path ";
    uint64_t v35 = 30;
    uint64_t v36 = (const char *)a1;
    size_t v37 = a2;
    __int16 v38 = 1285;
    operator new();
  }
  unsigned int v14 = *((_DWORD *)a3 + 11);
  int v15 = llvm::identify_magic(*(unsigned __int8 **)(v32 + 8), *(void *)(v32 + 16) - *(void *)(v32 + 8));
  if (v15 > 8)
  {
    switch(v15)
    {
      case 9:
        if (a4 != 2)
        {
          if (v14 != 5 && v14) {
            goto LABEL_33;
          }
          uint64_t v20 = (void *)v32;
          uint64_t v32 = 0;
          uint64_t v31 = v20;
          llvm::orc::checkMachORelocatableObject(&v31, a3, 0, (uint64_t)&v34);
          if (v31) {
            (*(void (**)(void *))(*v31 + 8))(v31);
          }
          uint64_t v21 = (uint64_t)v34;
          uint64_t v34 = 0;
          char v22 = *(unsigned char *)(a6 + 16);
          if (v35)
          {
            char v23 = v22 | 1;
          }
          else
          {
            char v23 = v22 & 0xFE;
            *(_DWORD *)(a6 + 8) = 1;
          }
          *(unsigned char *)(a6 + 16) = v23;
          *(void *)a6 = v21;
          goto LABEL_42;
        }
        goto LABEL_21;
      case 20:
        if (v14 == 5 || !v14)
        {
          uint64_t v18 = v32;
          uint64_t v32 = 0;
          uint64_t v30 = v18;
          llvm::orc::loadLinkableSliceFromMachOUniversalBinary(v12, (uint64_t)&v30);
        }
        goto LABEL_33;
      case 24:
        if (a4 != 2)
        {
          if (v14 > 1) {
            goto LABEL_33;
          }
          goto LABEL_19;
        }
        goto LABEL_21;
    }
    goto LABEL_33;
  }
  if (v15 != 2)
  {
    if (v15 == 4)
    {
      if (a4 != 2)
      {
        if (v14 != 3 && v14) {
          goto LABEL_33;
        }
LABEL_19:
        uint64_t v17 = v32;
        uint64_t v32 = 0;
        LOBYTE(v35) = 0;
        uint64_t v34 = 0;
        *(unsigned char *)(a6 + 16) &= ~1u;
        *(void *)a6 = v17;
        *(_DWORD *)(a6 + 8) = 1;
LABEL_42:
        llvm::Expected<std::unique_ptr<llvm::MemoryBuffer>>::~Expected((uint64_t *)&v34);
        goto LABEL_35;
      }
LABEL_21:
      __int16 v38 = 773;
      uint64_t v34 = (uint64_t *)a1;
      uint64_t v35 = (uint64_t)a2;
      uint64_t v36 = " does not contain an archive";
      goto LABEL_34;
    }
LABEL_33:
    __int16 v29 = 773;
    uint64_t v26 = a1;
    uint64_t v27 = a2;
    char v28 = " does not contain a relocatable object file or archive compatible with ";
    uint64_t v34 = &v26;
    uint64_t v36 = (const char *)a3;
    __int16 v38 = 1026;
LABEL_34:
    getErrorErrorCat();
    operator new();
  }
  if (!a4)
  {
    __int16 v38 = 773;
    uint64_t v34 = (uint64_t *)a1;
    uint64_t v35 = (uint64_t)a2;
    uint64_t v36 = " does not contain a relocatable object file";
    getErrorErrorCat();
    uint64_t v26 = 3;
    uint64_t v27 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,llvm::Twine,std::error_code>();
  }
  uint64_t v19 = v32;
  uint64_t v32 = 0;
  *(unsigned char *)(a6 + 16) &= ~1u;
  *(void *)a6 = v19;
  *(_DWORD *)(a6 + 8) = 0;
LABEL_35:
  if ((v33 & 1) == 0)
  {
    uint64_t v24 = v32;
    uint64_t v32 = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
  }
  return llvm::sys::Process::SafelyCloseFileDescriptor((llvm::sys::Process *)v12);
}

uint64_t llvm::DataLayout::operator=(uint64_t a1, uint64_t a2)
{
  llvm::DataLayout::clear(a1);
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  llvm::SmallVectorImpl<char>::operator=(a1 + 32, a2 + 32);
  llvm::SmallVectorImpl<llvm::LayoutAlignElem>::operator=(a1 + 64, a2 + 64);
  llvm::SmallVectorImpl<llvm::LayoutAlignElem>::operator=(a1 + 112, a2 + 112);
  llvm::SmallVectorImpl<llvm::LayoutAlignElem>::operator=(a1 + 160, a2 + 160);
  __int16 v4 = *(_WORD *)(a2 + 212);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_WORD *)(a1 + 212) = v4;
  llvm::SmallVectorImpl<llvm::PointerAlignElem>::operator=(a1 + 240, a2 + 240);
  llvm::SmallVectorImpl<unsigned int>::operator=(a1 + 392, a2 + 392);
  return a1;
}

llvm::raw_ostream *llvm::orc::linkComponents(llvm::orc *this)
{
  uint64_t v1 = (llvm::raw_ostream *)llvm::errs(this);
  llvm::write_hex(v1, (unint64_t)llvm_orc_registerEHFrameSectionWrapper, 3, 0, 0);
  return llvm::write_hex(v1, (unint64_t)llvm_orc_deregisterEHFrameSectionWrapper, 3, 0, 0);
}

uint64_t llvm::DataLayout::DataLayout(uint64_t a1, void *a2, unint64_t a3)
{
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 20) = 0;
  *(void *)(a1 + 32) = a1 + 56;
  *(_OWORD *)(a1 + 40) = xmmword_261E8A740;
  *(void *)(a1 + 64) = a1 + 80;
  *(void *)(a1 + 72) = 0x400000000;
  *(void *)(a1 + 112) = a1 + 128;
  *(void *)(a1 + 120) = 0x400000000;
  *(void *)(a1 + 160) = a1 + 176;
  *(void *)(a1 + 168) = 0x400000000;
  *(_WORD *)(a1 + 212) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = a1 + 256;
  *(void *)(a1 + 248) = 0x800000000;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = a1 + 408;
  *(void *)(a1 + 400) = 0x800000000;
  llvm::DataLayout::reset(a1, a2, a3);
  return a1;
}

uint64_t llvm::SmallVectorImpl<llvm::LayoutAlignElem>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v4 - 2);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if (v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5 - 2);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4, 8);
    }
    uint64_t v5 = 0;
LABEL_10:
    uint64_t v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6) {
      memcpy((void *)(*(void *)a1 + 8 * v5), (const void *)(*(void *)a2 + 8 * v5), *(void *)a2 + 8 * v6 - (*(void *)a2 + 8 * v5));
    }
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<llvm::PointerAlignElem>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 16 * v4);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if (v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 16 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4, 16);
    }
    uint64_t v5 = 0;
LABEL_10:
    uint64_t v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6) {
      memcpy((void *)(*(void *)a1 + 16 * v5), (const void *)(*(void *)a2 + 16 * v5), *(void *)a2 + 16 * v6 - (*(void *)a2 + 16 * v5));
    }
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

llvm::DataLayout *llvm::DataLayout::DataLayout(llvm::DataLayout *this, const llvm::DataLayout *a2)
{
  *((_WORD *)this + 4) = 0;
  *((_WORD *)this + 10) = 0;
  *((void *)this + 4) = (char *)this + 56;
  *(_OWORD *)((char *)this + 40) = xmmword_261E8A740;
  *((void *)this + 8) = (char *)this + 80;
  *((void *)this + 9) = 0x400000000;
  *((void *)this + 14) = (char *)this + 128;
  *((void *)this + 15) = 0x400000000;
  *((void *)this + 20) = (char *)this + 176;
  *((void *)this + 21) = 0x400000000;
  *((_WORD *)this + 106) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = (char *)this + 256;
  *((void *)this + 31) = 0x800000000;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = (char *)this + 408;
  *((void *)this + 50) = 0x800000000;
  llvm::DataLayout::operator=((uint64_t)this, (uint64_t)a2);
  return this;
}

void llvm::orc::shared::WrapperFunction<int ()(llvm::orc::shared::SPSExecutorAddr)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<int ()(llvm::orc::shared::SPSExecutorAddr),int &,llvm::orc::ExecutorAddr &>(llvm::orc::ExecutorAddr,int &,llvm::orc::ExecutorAddr &)::{lambda(char const*,unsigned long)#1},int,llvm::orc::ExecutorAddr>(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = 8;
  llvm::orc::ExecutorProcessControl::callWrapper();
}

_DWORD *llvm::orc::shared::detail::ResultDeserializer<int,int>::deserialize@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (a3 <= 3)
  {
    getErrorErrorCat();
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
  }
  *uint64_t result = *a2;
  *a4 = 0;
  return result;
}

llvm::DataLayout *llvm::Expected<llvm::DataLayout>::~Expected(llvm::DataLayout *this)
{
  if (*((unsigned char *)this + 440))
  {
    uint64_t v2 = *(void *)this;
    *(void *)this = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    llvm::DataLayout::~DataLayout(this);
  }
  return this;
}

uint64_t llvm::orc::checkMachORelocatableObject@<X0>(uint64_t a1@<X0>, llvm::Triple *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  if (*(void *)(a1 + 8) <= 3uLL)
  {
    llvm::orc::objDesc(&v37, a1, a2, a3);
    uint64_t v7 = " is not a valid MachO relocatable object file (truncated header)";
    goto LABEL_29;
  }
  int v8 = **(_DWORD **)a1;
  if (v8 > -17958195)
  {
    if (v8 == -17958193)
    {
LABEL_17:
      long long v19 = *(_OWORD *)(a1 + 16);
      v30[0] = *(_OWORD *)a1;
      v30[1] = v19;
      unsigned int v20 = *(_DWORD *)(*(void *)&v30[0] + 12);
      unsigned int v21 = bswap32(v20);
      if (v8 == -805638658) {
        unsigned int v20 = v21;
      }
      if (v20 == 1)
      {
        unsigned int v22 = *(_DWORD *)(*(void *)&v30[0] + 4);
        unsigned int v23 = bswap32(v22);
        if (v8 == -805638658) {
          uint64_t v24 = (llvm::object::MachOObjectFile *)v23;
        }
        else {
          uint64_t v24 = (llvm::object::MachOObjectFile *)v22;
        }
        uint64_t result = llvm::object::MachOObjectFile::getArch(v24);
        if (result == *((_DWORD *)a2 + 6)) {
          goto LABEL_24;
        }
        int v17 = result;
        uint64_t v18 = v30;
LABEL_31:
        llvm::orc::objDesc(&v32, (uint64_t)v18, a2, a3);
        ArchTypeName = llvm::Triple::getArchTypeName(v17);
        v33[0] = &v32;
        long long v33[2] = ArchTypeName;
        v33[3] = v29;
        __int16 v34 = 1284;
        v35[0] = v33;
        long long v35[2] = ", cannot be loaded into ";
        __int16 v36 = 770;
        v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
        v37.__r_.__value_.__r.__words[2] = (std::string::size_type)a2;
        __int16 v38 = 1026;
        *(void *)&long long v39 = &v37;
        char v40 = " process";
        __int16 v41 = 770;
        getErrorErrorCat();
        operator new();
      }
      uint64_t v25 = v30;
LABEL_28:
      llvm::orc::objDesc(&v37, (uint64_t)v25, a2, a3);
      uint64_t v7 = " is not a MachO relocatable object";
LABEL_29:
      uint64_t v26 = std::string::append(&v37, v7);
      uint64_t v27 = (const char *)v26->__r_.__value_.__r.__words[2];
      long long v39 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      char v40 = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      getErrorErrorCat();
      v35[0] = 3;
      v35[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,std::string,std::error_code>();
    }
    if (v8 != -17958194)
    {
LABEL_25:
      llvm::orc::objDesc(&v37, a1, a2, a3);
      uint64_t v7 = " is not a valid MachO relocatable object (bad magic value)";
      goto LABEL_29;
    }
  }
  else if (v8 != -822415874)
  {
    if (v8 != -805638658) {
      goto LABEL_25;
    }
    goto LABEL_17;
  }
  long long v9 = *(_OWORD *)(a1 + 16);
  v31[0] = *(_OWORD *)a1;
  v31[1] = v9;
  unsigned int v10 = *(_DWORD *)(*(void *)&v31[0] + 12);
  unsigned int v11 = bswap32(v10);
  if (v8 == -822415874) {
    unsigned int v10 = v11;
  }
  if (v10 != 1)
  {
    uint64_t v25 = v31;
    goto LABEL_28;
  }
  unsigned int v12 = *(_DWORD *)(*(void *)&v31[0] + 4);
  BOOL v13 = v8 == -822415874;
  unsigned int v14 = bswap32(v12);
  if (v13) {
    int v15 = (llvm::object::MachOObjectFile *)v14;
  }
  else {
    int v15 = (llvm::object::MachOObjectFile *)v12;
  }
  uint64_t result = llvm::object::MachOObjectFile::getArch(v15);
  if (result != *((_DWORD *)a2 + 6))
  {
    int v17 = result;
    uint64_t v18 = v31;
    goto LABEL_31;
  }
LABEL_24:
  *a4 = 0;
  return result;
}

std::string *llvm::orc::objDesc(std::string *this, uint64_t a2, llvm::Triple *a3, int a4)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a4)
  {
    __int16 v11 = 773;
    v10[0] = llvm::Triple::getArchName(a3);
    v10[1] = v6;
    v10[2] = " slice of universal binary";
    llvm::Twine::str((llvm::Twine *)v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(this, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return std::string::append(this, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t llvm::orc::checkMachORelocatableObject@<X0>(void **a1@<X0>, llvm::Triple *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8 = *a1;
  uint64_t v9 = v8[1];
  uint64_t v10 = v8[2] - v9;
  uint64_t v11 = (*(uint64_t (**)(void *))(*v8 + 16))(v8);
  v15[0] = v9;
  v15[1] = v10;
  _OWORD v15[2] = v11;
  v15[3] = v12;
  uint64_t result = llvm::orc::checkMachORelocatableObject((uint64_t)v15, a2, a3, &v16);
  unsigned int v14 = v16;
  if (v16)
  {
    *(unsigned char *)(a4 + 8) |= 1u;
  }
  else
  {
    *(unsigned char *)(a4 + 8) &= ~1u;
    unsigned int v14 = *a1;
    *a1 = 0;
  }
  *(void *)a4 = v14;
  return result;
}

void llvm::orc::loadLinkableSliceFromMachOUniversalBinary(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*(void *)a2 + 8);
  uint64_t v3 = *(void *)(*(void *)a2 + 16) - v2;
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)a2 + 16))();
  uint64_t v6 = v2;
  uint64_t v7 = v3;
  uint64_t v8 = v4;
  uint64_t v9 = v5;
  llvm::object::MachOUniversalBinary::create();
}

void llvm::orc::getMachOSliceRangeForTriple(llvm::orc *this@<X0>, llvm::object::MachOUniversalBinary *a2@<X1>, int8x16_t *a3@<X8>)
{
  llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v34, (uint64_t)this, 0);
  llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v32, 0, 0);
  long long v29 = v34;
  long long v30 = v35;
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v36;
  *(_OWORD *)&v31[16] = *(_OWORD *)&v36[16];
  uint64_t v7 = v34;
  int v8 = DWORD2(v34);
  uint64_t v9 = v32;
  int v10 = v33;
  if ((void)v34 == v32 && DWORD2(v34) == v33)
  {
LABEL_17:
    uint64_t v26 = "Universal binary ";
    long long v27 = *((_OWORD *)this + 2);
    __int16 v28 = 1283;
    *(void *)&long long v34 = &v26;
    *(void *)&long long v35 = " does not contain a slice for ";
    *(_WORD *)__int16 v36 = 770;
    *(void *)&long long v29 = &v34;
    *(void *)&long long v30 = a2;
    *(_WORD *)uint64_t v31 = 1026;
    getErrorErrorCat();
    operator new();
  }
  unsigned int v12 = *(_DWORD *)v31;
  int v11 = *(_DWORD *)&v31[4];
  int8x16_t v13 = *(int8x16_t *)&v31[8];
  uint64_t v14 = *(void *)((char *)&v30 + 4);
  unsigned int v16 = HIDWORD(v29);
  int v15 = v30;
  while (1)
  {
    int8x16_t v25 = v13;
    int v17 = *(_DWORD *)(v7 + 48);
    uint64_t v18 = v17 == -889275714 ? (std::string *)v16 : (std::string *)v12;
    int v19 = v17 == -889275714 ? v15 : v11;
    llvm::object::MachOObjectFile::getArchTriple(v18, 0, v19, 0, (uint64_t)&v34);
    if (*((void *)&v35 + 1) == *((void *)a2 + 3))
    {
      int v20 = *((_DWORD *)a2 + 8);
      if (!v20 || *(_DWORD *)v36 == v20) {
        break;
      }
    }
    if (SBYTE7(v35) < 0) {
      operator delete((void *)v34);
    }
    llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v34, v7, v8 + 1);
    uint64_t v7 = v34;
    int v8 = DWORD2(v34);
    unsigned int v16 = HIDWORD(v34);
    int v15 = v35;
    unsigned int v12 = *(_DWORD *)v36;
    int v11 = *(_DWORD *)&v36[4];
    uint64_t v14 = *(void *)((char *)&v35 + 4);
    int8x16_t v13 = *(int8x16_t *)&v36[8];
    if ((void)v34 == v9 && DWORD2(v34) == v10) {
      goto LABEL_17;
    }
  }
  unsigned int v21 = *(_DWORD *)(v7 + 48) == -889275714;
  v22.i64[0] = v14;
  v22.i64[1] = HIDWORD(v14);
  int8x16_t v23 = (int8x16_t)v22;
  a3[1].i8[0] &= ~1u;
  int32x2_t v24 = vdup_n_s32(v21);
  v22.i64[0] = v24.u32[0];
  v22.i64[1] = v24.u32[1];
  *a3 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v22, 0x3FuLL)), v23, v25);
  if (SBYTE7(v35) < 0) {
    operator delete((void *)v34);
  }
}

uint64_t *llvm::orc::ForceLoadMachOArchiveMembers::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v30 = *(void *)a1;
    long long v29 = *(llvm::orc::JITDylib **)(a1 + 8);
    uint64_t v31 = *a2;
    uint64_t v32 = a2[1];
    uint64_t v33 = a2[2];
    uint64_t v34 = a2[3];
    __int16 v51 = 261;
    *(void *)&v50[0] = v33;
    *((void *)&v50[0] + 1) = v34;
    long long v53 = v50;
    long long v35 = operator new(24, (uint64_t *)&v53);
    *(void *)long long v35 = &unk_270DBCE88;
    *((void *)v35 + 1) = v31;
    *((void *)v35 + 2) = v31 + v32;
    uint64_t v49 = (uint64_t *)v35;
    llvm::orc::ObjectLayer::add(v30, v29, (uint64_t *)&v49, a3);
    uint64_t result = v49;
    if (v49) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v49 + 8))(v49);
    }
    return result;
  }
  long long v6 = *((_OWORD *)a2 + 1);
  v50[0] = *(_OWORD *)a2;
  v50[1] = v6;
  llvm::object::ObjectFile::createObjectFile((uint64_t)v50, 0, 1, (uint64_t)&v56);
  uint64_t v7 = v56;
  if (v57)
  {
    long long v56 = 0;
    *(void *)&v50[0] = v7;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)v50);
    if (*(void *)&v50[0]) {
      (*(void (**)(void))(**(void **)&v50[0] + 8))(*(void *)&v50[0]);
    }
    goto LABEL_62;
  }
  if (!v56
    || (v56[2] - 21) < 0xFFFFFFFC
    || ((uint64_t v8 = (*(uint64_t (**)(_DWORD *))(*(void *)v56 + 352))(v56),
         uint64_t v10 = v9,
         uint64_t v11 = (*(uint64_t (**)(void *))(*v7 + 360))(v7),
         uint64_t v47 = v8,
         uint64_t v48 = v10,
         v10 == v12)
      ? (BOOL v13 = v8 == v11)
      : (BOOL v13 = 0),
        v13))
  {
LABEL_62:
    *a3 = 0;
    return llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected((uint64_t *)&v56);
  }
  uint64_t v14 = v11;
  uint64_t v15 = v12;
  while (1)
  {
    uint64_t v16 = *(void *)(v7[10] + 8 * v8);
    uint64_t v17 = v16 + 16;
    if (*(unsigned char *)(v16 + 31)) {
      size_t v18 = 16;
    }
    else {
      size_t v18 = strlen((const char *)v17);
    }
    (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(void *)v10 + 144))(&v53, v10, v8);
    if (v55)
    {
      uint64_t v44 = (uint64_t)v53;
      long long v53 = 0;
      *a3 = v44;
      goto LABEL_68;
    }
    if (v54 == 14)
    {
      uint64_t v23 = *(void *)((char *)v53 + 6);
      BOOL v24 = *(void *)v53 == 0x635F636A626F5F5FLL;
      uint64_t v25 = 0x7473696C7461635FLL;
      goto LABEL_37;
    }
    if (v54 == 15) {
      break;
    }
    if (v54 == 16)
    {
      if (*(void *)v53 == 0x635F636A626F5F5FLL && *((void *)v53 + 1) == 0x7473696C7373616CLL) {
        goto LABEL_65;
      }
      if (*(void *)v53 == 0x705F636A626F5F5FLL && *((void *)v53 + 1) == 0x7473696C6F746F72) {
        goto LABEL_65;
      }
      if (*(void *)v53 == 0x635F636A626F5F5FLL && *((void *)v53 + 1) == 0x7473696C6F72736CLL) {
        goto LABEL_65;
      }
      if (*(void *)v53 == 0x6E5F636A626F5F5FLL && *((void *)v53 + 1) == 0x7473696C7461636CLL) {
        goto LABEL_65;
      }
    }
LABEL_41:
    if (v18 == 6
      && v54 >= 7
      && !(*(_DWORD *)v17 ^ 0x45545F5F | *(unsigned __int16 *)(v17 + 4) ^ 0x5458)
      && *(_DWORD *)v53 == 2004049759
      && *(_DWORD *)((char *)v53 + 3) == 1952868727)
    {
      if (v54 != 15) {
        goto LABEL_65;
      }
      if (*(void *)v53 != 0x5F74666977735F5FLL || *(void *)((char *)v53 + 7) != 0x68736168646F6D5FLL) {
        goto LABEL_65;
      }
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v48 + 136))(v48, &v47);
    uint64_t v8 = v47;
    uint64_t v10 = v48;
    if (v48 == v15 && v47 == v14) {
      goto LABEL_62;
    }
  }
  uint64_t v23 = *(void *)((char *)v53 + 7);
  BOOL v24 = *(void *)v53 == 0x635F636A626F5F5FLL;
  uint64_t v25 = 0x327473696C746163;
LABEL_37:
  if (!v24 || v23 != v25) {
    goto LABEL_41;
  }
LABEL_65:
  uint64_t v38 = *(void *)a1;
  std::string v37 = *(llvm::orc::JITDylib **)(a1 + 8);
  uint64_t v39 = *a2;
  uint64_t v40 = a2[1];
  uint64_t v41 = a2[2];
  uint64_t v42 = a2[3];
  __int16 v51 = 261;
  *(void *)&v50[0] = v41;
  *((void *)&v50[0] + 1) = v42;
  uint64_t v52 = v50;
  uint64_t v43 = operator new(24, (uint64_t *)&v52);
  *(void *)uint64_t v43 = &unk_270DBCE88;
  *((void *)v43 + 1) = v39;
  *((void *)v43 + 2) = v39 + v40;
  uint64_t v46 = v43;
  llvm::orc::ObjectLayer::add(v38, v37, (uint64_t *)&v46, a3);
  if (v46) {
    (*(void (**)(char *))(*(void *)v46 + 8))(v46);
  }
LABEL_68:
  if (v55)
  {
    uint64_t v45 = (uint64_t)v53;
    long long v53 = 0;
    if (v45) {
      (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
    }
  }
  return llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected((uint64_t *)&v56);
}

uint64_t llvm::orc::MachOPlatform::HeaderOptions::BuildVersionOpts::fromTriple(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 36);
  if (v2 <= 27)
  {
    if (v2 != 7)
    {
      uint64_t v3 = v2 == 11;
      return v3 | (a2 << 32);
    }
    BOOL v4 = *(_DWORD *)(a1 + 40) == 23;
    uint64_t v5 = 2;
    uint64_t v3 = 7;
  }
  else if (v2 == 28)
  {
    BOOL v4 = *(_DWORD *)(a1 + 40) == 23;
    uint64_t v5 = 3;
    uint64_t v3 = 8;
  }
  else
  {
    if (v2 != 29)
    {
      uint64_t v3 = 0;
      if (v2 == 32)
      {
        if (*(_DWORD *)(a1 + 40) == 23) {
          uint64_t v3 = 12;
        }
        else {
          uint64_t v3 = 11;
        }
      }
      return v3 | (a2 << 32);
    }
    BOOL v4 = *(_DWORD *)(a1 + 40) == 23;
    uint64_t v5 = 4;
    uint64_t v3 = 9;
  }
  if (!v4) {
    uint64_t v3 = v5;
  }
  return v3 | (a2 << 32);
}

void llvm::orc::MachOPlatform::Create(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v9 = *(_DWORD *)(a1[9] + 64);
  if (v9 == 3 || v9 == 38)
  {
    if (!*(unsigned char *)(a7 + 24))
    {
      memset(&v10, 0, 20);
      llvm::orc::addAliases(a1, &v10.__m_.__sig, (const char **)&llvm::orc::MachOPlatform::requiredCXXAliases(void)::RequiredCXXAliases, 1);
      llvm::orc::addAliases(a1, &v10.__m_.__sig, (const char **)&llvm::orc::MachOPlatform::standardRuntimeUtilityAliases(void)::StandardRuntimeUtilityAliases, 6);
      std::optional<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>>::operator=[abi:nn180100]<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,void>(a7, (uint64_t)&v10);
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll((uint64_t)&v10);
      MEMORY[0x263E500A0](v10.__m_.__sig, 8);
    }
    *(void *)a7 = 0;
    *(void *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = 0;
    operator new();
  }
  std::operator+<char>();
  getErrorErrorCat();
  operator new();
}

void llvm::orc::MachOPlatform::setupJITDylib(llvm::orc::MachOPlatform *this@<X0>, llvm::orc::JITDylib *a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v6, 0, sizeof(v6));
  long long v4 = 0u;
  long long v5 = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  llvm::orc::MachOPlatform::setupJITDylib(this, a2, (uint64_t)v3, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  int v9 = (void **)&v6[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v9);
  int v9 = (void **)v6;
  std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](&v9);
  if (BYTE8(v5))
  {
    if (SBYTE7(v4) < 0) {
      operator delete(v3[0]);
    }
  }
}

void llvm::orc::MachOPlatform::setupJITDylib(void *a1@<X0>, llvm::orc::JITDylib *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v28[1] = *(llvm::orc::MaterializationUnit **)MEMORY[0x263EF8340];
  LOBYTE(v16[0]) = 0;
  char v20 = 0;
  if (*(unsigned char *)(a3 + 40))
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)a3;
    uint64_t v7 = *(void *)(a3 + 16);
    uint64_t v8 = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    uint64_t v17 = v7;
    uint64_t v18 = v8;
    int v19 = *(_DWORD *)(a3 + 32);
    char v20 = 1;
  }
  int v9 = a1 + 4;
  long long v21 = *(_OWORD *)(a3 + 48);
  uint64_t v22 = *(void *)(a3 + 64);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  long long v23 = *(_OWORD *)(a3 + 72);
  uint64_t v24 = *(void *)(a3 + 88);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)(a3 + 96);
  uint64_t v26 = *(void *)(a3 + 112);
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 96) = 0;
  uint64_t v10 = a1[7];
  if ((v10 & 2) == 0) {
    int v9 = (void *)*v9;
  }
  (*(void (**)(llvm::orc::MaterializationUnit **__return_ptr, void *, void *, void **))(v10 & 0xFFFFFFFFFFFFFFF8))(v28, v9, a1, v16);
  uint64_t v15 = 0;
  llvm::orc::JITDylib::define<llvm::orc::MaterializationUnit>(a4, a2, v28, (uint64_t *)&v15);
  if (v15) {
    llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v15);
  }
  uint64_t v11 = v28[0];
  v28[0] = 0;
  if (v11) {
    (*(void (**)(llvm::orc::MaterializationUnit *))(*(void *)v11 + 8))(v11);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v27[0] = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v27);
  v27[0] = (void **)&v21;
  std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](v27);
  if (v20 && SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  if (!*a4)
  {
    uint64_t v12 = a1[1];
    v28[0] = a2;
    uint64_t v13 = a1[8];
    uint64_t v14 = v13;
    if ((unint64_t)(v13 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 1uLL);
    }
    llvm::orc::ExecutionSession::lookup(v12, (uint64_t *)v28, 1uLL, &v14);
  }
}

void llvm::orc::JITDylib::define<llvm::orc::MaterializationUnit>(void *a1, llvm::orc::JITDylib *a2, llvm::orc::MaterializationUnit **a3, uint64_t *a4)
{
  if (*((_DWORD *)*a3 + 4))
  {
    uint64_t v8 = (std::recursive_mutex *)*((void *)a2 + 4);
    std::recursive_mutex::lock(v8);
    llvm::orc::JITDylib::defineImpl(a2, *a3, a1);
    if (!*a1)
    {
      if (!*a4)
      {
        llvm::orc::JITDylib::getDefaultResourceTracker(a2, &v14);
        int v9 = (atomic_uint *)*a4;
        *a4 = (uint64_t)v14;
        if (v9) {
          llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v9);
        }
      }
      uint64_t v10 = *(void *)(*((void *)a2 + 4) + 80);
      if (!v10
        || ((*(void (**)(uint64_t, uint64_t, llvm::orc::MaterializationUnit *))(*(void *)v10 + 32))(v10, *a4, *a3), !*a1))
      {
        uint64_t v11 = *a3;
        *a3 = 0;
        uint64_t v13 = (std::__shared_weak_count_vtbl *)v11;
        llvm::orc::JITDylib::installMaterializationUnit((uint64_t)a2, &v13, *a4);
        uint64_t v12 = v13;
        uint64_t v13 = 0;
        if (v12) {
          (*((void (**)(std::__shared_weak_count_vtbl *))v12->~__shared_weak_count + 1))(v12);
        }
        *a1 = 0;
      }
    }
    std::recursive_mutex::unlock(v8);
  }
  else
  {
    *a1 = 0;
  }
}

void llvm::orc::MachOPlatform::teardownJITDylib(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  long long v6 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  uint64_t v16 = a2;
  uint64_t v17 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(a1 + 384), &v16, &v17))
  {
    uint64_t v7 = v17;
    if (v17 != (void *)(*(void *)(a1 + 384) + 16 * *(unsigned int *)(a1 + 400)))
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::erase(a1 + 408, v17 + 1);
      *uint64_t v7 = -8192;
      *(int32x2_t *)(a1 + 392) = vadd_s32(*(int32x2_t *)(a1 + 392), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  int v8 = *(_DWORD *)(a1 + 448);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 432);
    unsigned int v10 = v8 - 1;
    LODWORD(v11) = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v12 = (uint64_t *)(v9 + 16 * v11);
    uint64_t v13 = *v12;
    if (*v12 == a2)
    {
LABEL_6:
      *uint64_t v12 = -8192;
      *(int32x2_t *)(a1 + 440) = vadd_s32(*(int32x2_t *)(a1 + 440), (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v14 = 1;
      while (v13 != -4096)
      {
        int v15 = v11 + v14++;
        uint64_t v11 = v15 & v10;
        uint64_t v13 = *(void *)(v9 + 16 * v11);
        if (v13 == a2)
        {
          uint64_t v12 = (uint64_t *)(v9 + 16 * v11);
          goto LABEL_6;
        }
      }
    }
  }
  *a3 = 0;
  std::mutex::unlock(v6);
}

uint64_t *llvm::orc::MachOPlatform::notifyAdding@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v5 = atomic_load((unint64_t *)(a2 + 8));
  if (*(void *)(a3 + 32))
  {
    unint64_t v10 = v5 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::FindAndConstruct(result + 37, (uint64_t *)&v10)+ 1;
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = v8;
    if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 1uLL);
    }
    uint64_t result = llvm::orc::SymbolLookupSet::add(v7, &v9, 1);
    if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
  }
  *a4 = 0;
  return result;
}

void *llvm::orc::addAliases(void *result, uint64_t *a2, const char **a3, uint64_t a4)
{
  if (a4)
  {
    long long v4 = a3;
    long long v6 = result;
    uint64_t v7 = &a3[2 * a4];
    do
    {
      if (*v4) {
        size_t v8 = strlen(*v4);
      }
      else {
        size_t v8 = 0;
      }
      llvm::orc::ExecutorProcessControl::intern(v6[9], (uint64_t *)*v4, v8, (unint64_t **)&v14);
      uint64_t v9 = (uint64_t *)v4[1];
      if (v9) {
        size_t v10 = strlen(v4[1]);
      }
      else {
        size_t v10 = 0;
      }
      llvm::orc::ExecutorProcessControl::intern(v6[9], v9, v10, (unint64_t **)&v13);
      uint64_t v11 = v13;
      uint64_t v13 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::FindAndConstruct(a2, &v14);
      uint64_t v12 = result[1];
      if ((unint64_t)(v12 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      result[1] = v11;
      *((_WORD *)result + 8) = 4096;
      if ((unint64_t)v13 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add(v13 + 1, 0xFFFFFFFFFFFFFFFFLL);
      }
      if ((unint64_t)v14 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add(v14 + 1, 0xFFFFFFFFFFFFFFFFLL);
      }
      v4 += 2;
    }
    while (v4 != v7);
  }
  return result;
}

void llvm::orc::MachOPlatform::setLoadableAtPathRegexMatcher(uint64_t a1, void *a2, const void *a3, size_t a4, void *a5, size_t a6)
{
  uint64_t v12 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  v26[0] = a2;
  long long v27 = 0;
  int v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(a1 + 384), v26, &v27);
  int v14 = v27;
  if (!v13) {
    int v14 = (void *)(*(void *)(a1 + 384) + 16 * *(unsigned int *)(a1 + 400));
  }
  size_t v15 = v14[1];
  std::mutex::unlock(v12);
  uint64_t v24 = 0;
  unint64_t v16 = a4 + a6 + 24;
  if (v16 < 9)
  {
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v27);
  }
  else
  {
    __src = a5;
    uint64_t v17 = (size_t *)malloc_type_malloc(a4 + a6 + 24, 0xBCDE199DuLL);
    uint64_t v18 = v17;
    *uint64_t v17 = v15;
    if ((v16 & 0xFFFFFFFFFFFFFFF8) == 8) {
      goto LABEL_12;
    }
    v17[1] = a4;
    int v19 = v17 + 2;
    unint64_t v20 = a4 + a6 + 8;
    if (a4)
    {
      BOOL v21 = v20 >= a4;
      unint64_t v20 = a6 + 8;
      if (!v21) {
        goto LABEL_12;
      }
      memcpy(v17 + 2, a3, a4);
      int v19 = (size_t *)((char *)v19 + a4);
    }
    if (v20 < 8)
    {
LABEL_12:
      llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v27);
      free(v18);
      goto LABEL_14;
    }
    *int v19 = a6;
    uint64_t v22 = v19 + 1;
    if (a6)
    {
      if (v20 - 8 < a6) {
        goto LABEL_12;
      }
      memcpy(v22, __src, a6);
    }
    long long v27 = v18;
    uint64_t v28 = a4 + a6 + 24;
  }
LABEL_14:
  if (!v28)
  {
    uint64_t v25 = v27;
    if (v27)
    {
      getErrorErrorCat();
      v26[0] = (void *)3;
      v26[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
  }
  llvm::orc::ExecutorProcessControl::callWrapper();
}

uint64_t llvm::orc::JITDylib::addGenerator<llvm::orc::DefinitionGenerator>(void *a1, void *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (std::recursive_mutex *)a1[4];
  v5[0] = a1;
  v5[1] = a2;
  std::recursive_mutex::lock(v3);
  llvm::orc::JITDylib::addGenerator<llvm::orc::DefinitionGenerator>(std::unique_ptr<llvm::orc::DefinitionGenerator>)::{lambda(void)#1}::operator()(v5);
  std::recursive_mutex::unlock(v3);
  return v2;
}

atomic_uint *llvm::orc::MachOPlatform::rt_pushInitializers(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v13 = a3;
  unint64_t v5 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  v9[0] = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::LookupBucketFor<llvm::orc::ExecutorAddr>((uint64_t *)(a1 + 408), &v13, v9)|| v9[0] == *(void *)(a1 + 408) + 16 * *(unsigned int *)(a1 + 424)|| (long long v6 = *(atomic_uint **)(v9[0] + 8)) == 0)
  {
    std::mutex::unlock(v5);
    v9[0] = "{0:x}";
    v9[1] = 5;
    v9[2] = v11;
    v9[3] = 1;
    v10[0] = &unk_270DBD808;
    v10[1] = &v13;
    v11[0] = v10;
    v11[1] = "No JITDylib with header addr ";
    v11[3] = v9;
    __int16 v12 = 1539;
    getErrorErrorCat();
    operator new();
  }
  atomic_fetch_add_explicit(v6, 1u, memory_order_relaxed);
  std::mutex::unlock(v5);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v14, a2);
  size_t v8 = v6;
  atomic_fetch_add_explicit(v6, 1u, memory_order_relaxed);
  llvm::orc::MachOPlatform::pushInitializersLoop(a1, v14, (void ***)&v8);
  llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v6);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v14);
  return llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v6);
}

void llvm::orc::MachOPlatform::rt_pushSymbols(uint64_t a1, long long *a2, uint64_t a3, uint64_t *a4, int a5)
{
  v37[4] = *MEMORY[0x263EF8340];
  uint64_t v26 = a3;
  uint64_t v9 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  *(void *)&long long v33 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::LookupBucketFor<llvm::orc::ExecutorAddr>((uint64_t *)(a1 + 408), &v26, &v33)|| (void)v33 == *(void *)(a1 + 408) + 16 * *(unsigned int *)(a1 + 424))
  {
    std::mutex::unlock(v9);
  }
  else
  {
    uint64_t v10 = *(void *)(v33 + 8);
    std::mutex::unlock(v9);
    if (v10)
    {
      uint64_t v24 = 0;
      long long v23 = 0u;
      uint64_t v12 = *a4;
      uint64_t v11 = a4[1];
      if (v12 == v11)
      {
        uint64_t v13 = 0;
        long long v18 = 0uLL;
      }
      else
      {
        do
        {
          llvm::orc::ExecutorProcessControl::intern(*(void *)(*(void *)(a1 + 8) + 72), *(uint64_t **)v12, *(void *)(v12 + 8), (unint64_t **)&v22);
          llvm::orc::SymbolLookupSet::add((uint64_t *)&v23, (uint64_t *)&v22, *(unsigned char *)(v12 + 16) == 0);
          if ((unint64_t)v22 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add(v22 + 1, 0xFFFFFFFFFFFFFFFFLL);
          }
          v12 += 24;
        }
        while (v12 != v11);
        long long v18 = v23;
        uint64_t v13 = v24;
      }
      int v14 = *(llvm::orc::ExecutionSession **)(a1 + 8);
      uint64_t v15 = operator new(0x10uLL);
      __p[1] = v15 + 4;
      __p[2] = v15 + 4;
      *(void *)uint64_t v15 = v10;
      _OWORD v15[2] = 0;
      __p[0] = v15;
      long long v19 = v18;
      unint64_t v20 = v13;
      uint64_t v24 = 0;
      long long v23 = 0uLL;
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v28, a2);
      char v29 = a5;
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v33, v28);
      LOBYTE(v36[0]) = v29;
      uint64_t v30 = operator new(0x28uLL, (std::align_val_t)8uLL);
      long long v31 = xmmword_261E8A730;
      uint64_t v16 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v30, &v33);
      *(unsigned char *)(v16 + 32) = v36[0];
      uint64_t v32 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallbacksHolder<llvm::orc::MachOPlatform::rt_pushSymbols(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL)::$_0,llvm::orc::MachOPlatform::rt_pushSymbols(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL)::$_0,void>::Callbacks
          + 4;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v33);
      std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v27, (uint64_t)&llvm::orc::NoDependenciesToRegister);
      if (a5) {
        char v17 = 63;
      }
      else {
        char v17 = 3;
      }
      llvm::orc::ExecutionSession::lookup(v14, 1, (uint64_t)__p, (uint64_t **)&v19, v17, (long long *)&v30);
    }
  }
  *(void *)&long long v33 = "{0:x}";
  *((void *)&v33 + 1) = 5;
  uint64_t v34 = v37;
  uint64_t v35 = 1;
  v36[0] = &unk_270DBD808;
  v36[1] = &v26;
  v37[0] = v36;
  *(void *)&long long v23 = "No JITDylib associated with handle ";
  uint64_t v24 = &v33;
  __int16 v25 = 1539;
  getErrorErrorCat();
  operator new();
}

uint64_t llvm::orc::MachOPlatform::pushInitializersLoop(uint64_t a1, long long *a2, void ***a3)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  unsigned int v96 = 0;
  uint64_t v97 = 0;
  int v98 = 0;
  int v93 = 0;
  uint64_t v94 = 0;
  unsigned int v95 = 0;
  __src = *a3;
  uint64_t v110 = v112;
  uint64_t v111 = 0x1000000000;
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v110, &__src, &v114);
  long long v6 = *(std::recursive_mutex **)(a1 + 8);
  std::recursive_mutex::lock(v6);
  for (unsigned int i = v111; v111; unsigned int i = v111)
  {
    v91[0] = 0;
    v91[0] = *((void *)v110 + i - 1);
    LODWORD(v111) = i - 1;
    __src = (void **)v91[0];
    uint64_t v85 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::LookupBucketFor<llvm::orc::JITDylib *>((uint64_t *)&v93, &__src, &v85) & 1) == 0)
    {
      size_t v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::FindAndConstruct((uint64_t *)&v93, v91);
      uint64_t v9 = v91[0];
      uint64_t v10 = *(std::recursive_mutex **)(v91[0] + 32);
      std::recursive_mutex::lock(v10);
      uint64_t v12 = *(uint64_t **)(v9 + 208);
      uint64_t v11 = *(uint64_t **)(v9 + 216);
      if (v12 != v11)
      {
        uint64_t v13 = (unsigned int *)(v8 + 1);
        do
        {
          if (*v12 != v91[0])
          {
            llvm::SmallVectorTemplateBase<void *,true>::push_back(v13, *v12);
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v110, *v12);
          }
          v12 += 2;
        }
        while (v12 != v11);
      }
      std::recursive_mutex::unlock(v10);
      uint64_t v85 = v91[0];
      __src = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)(a1 + 296), &v85, &__src))
      {
        int v14 = __src;
        if (__src != (void **)(*(void *)(a1 + 296) + 32 * *(unsigned int *)(a1 + 312)))
        {
          uint64_t v15 = (void **)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::FindAndConstruct((uint64_t *)&v96, v91);
          std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vdeallocate(v15 + 1);
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v14 + 1);
          v15[3] = v14[3];
          v14[1] = 0;
          long long v14[2] = 0;
          v14[3] = 0;
          __src = v14 + 1;
          std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&__src);
          *int v14 = (void *)-8192;
          *(int32x2_t *)(a1 + 304) = vadd_s32(*(int32x2_t *)(a1 + 304), (int32x2_t)0x1FFFFFFFFLL);
        }
      }
    }
  }
  std::recursive_mutex::unlock(v6);
  if (v97)
  {
    int v100 = (void **)a1;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v101, a2);
    uint64_t v16 = *a3;
    uint64_t v102 = (atomic_uint *)v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_uint *volatile)v16, 1u, memory_order_relaxed);
    }
    __src = v100;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v114, v101);
    uint64_t v117 = v102;
    uint64_t v102 = 0;
    char v17 = operator new(0x30uLL, (std::align_val_t)8uLL);
    uint64_t v103 = v17;
    long long v104 = xmmword_261E8D3D0;
    *char v17 = __src;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v17 + 1), (long long *)v114.i8);
    v17[5] = v117;
    uint64_t v117 = 0;
    uint64_t v105 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<llvm::orc::MachOPlatform::pushInitializersLoop(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>)::$_1,llvm::orc::MachOPlatform::pushInitializersLoop(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>)::$_1,void>::Callbacks
         + 4;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v114);
    llvm::orc::Platform::lookupInitSymbolsAsync((long long *)&v103, *(llvm::orc::ExecutionSession **)(a1 + 8), &v96);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v103);
    if (v102) {
      llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v102);
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v101);
  }
  else
  {
    v91[0] = 0;
    v91[1] = 0;
    unsigned int v92 = 0;
    if (v94)
    {
      unint64_t v18 = (4 * (int)v94 / 3u + 1) | ((unint64_t)(4 * (int)v94 / 3u + 1) >> 1);
      unint64_t v19 = v18 | (v18 >> 2) | ((v18 | (v18 >> 2)) >> 4);
      llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::grow((uint64_t)v91, (((v19 | (v19 >> 8)) >> 16) | v19 | (v19 >> 8)) + 1);
    }
    std::mutex::lock((std::mutex *)(a1 + 320));
    if (v94)
    {
      if (v95)
      {
        uint64_t v20 = 72 * v95;
        BOOL v21 = v93;
        while ((*v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v21 += 9;
          v20 -= 72;
          if (!v20) {
            goto LABEL_35;
          }
        }
      }
      else
      {
        BOOL v21 = v93;
      }
      uint64_t v22 = &v93[9 * v95];
      if (v21 != v22)
      {
        uint64_t v23 = *v21;
LABEL_29:
        uint64_t v85 = v23;
        __src = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(a1 + 384), &v85, &__src))
        {
          uint64_t v24 = __src;
          if (__src != (void **)(*(void *)(a1 + 384) + 16 * *(unsigned int *)(a1 + 400))) {
            llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::FindAndConstruct(v91, v21)[1] = v24[1];
          }
        }
        while (1)
        {
          v21 += 9;
          if (v21 == v22) {
            break;
          }
          uint64_t v23 = *v21;
          if ((*v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            if (v21 != v22) {
              goto LABEL_29;
            }
            break;
          }
        }
      }
    }
LABEL_35:
    std::mutex::unlock((std::mutex *)(a1 + 320));
    int64x2_t v89 = 0uLL;
    char v90 = 0;
    if (v94)
    {
      __int16 v25 = &v90;
      uint64_t v116 = &v90;
      uint64_t v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v94);
      uint64_t v28 = (void **)&v26[40 * v27];
      v114.i64[1] = (uint64_t)v26;
      uint64_t v115 = v28;
      int64x2_t v29 = v89;
      if (v89.i64[1] == v89.i64[0])
      {
        int64x2_t v33 = vdupq_n_s64(v89.u64[1]);
        uint64_t v34 = v26;
      }
      else
      {
        uint64_t v30 = 0;
        do
        {
          long long v31 = &v26[v30];
          uint64_t v32 = v29.i64[1] + v30;
          *((void *)v31 - 5) = *(void *)(v29.i64[1] + v30 - 40);
          *(v31 - 32) = *(unsigned char *)(v29.i64[1] + v30 - 32);
          *((void *)v31 - 2) = 0;
          *((void *)v31 - 1) = 0;
          *((void *)v31 - 3) = 0;
          *(_OWORD *)(v31 - 24) = *(_OWORD *)(v29.i64[1] + v30 - 24);
          *((void *)v31 - 1) = *(void *)(v29.i64[1] + v30 - 8);
          *(void *)(v32 - 24) = 0;
          *(void *)(v32 - 16) = 0;
          *(void *)(v32 - 8) = 0;
          v30 -= 40;
        }
        while (v29.i64[1] + v30 != v29.i64[0]);
        int64x2_t v33 = v89;
        uint64_t v34 = &v26[v30];
        uint64_t v26 = (char *)v114.i64[1];
        uint64_t v28 = v115;
      }
      v89.i64[0] = (uint64_t)v34;
      v89.i64[1] = (uint64_t)v26;
      int64x2_t v114 = v33;
      uint64_t v35 = v90;
      char v90 = v28;
      uint64_t v115 = v35;
      __src = (void **)v33.i64[0];
      std::__split_buffer<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>::~__split_buffer((uint64_t)&__src);
      if (v94)
      {
        if (v95)
        {
          uint64_t v36 = 72 * v95;
          uint64_t v37 = (uint64_t)v93;
          while ((*(void *)v37 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v37 += 72;
            v36 -= 72;
            if (!v36) {
              goto LABEL_95;
            }
          }
        }
        else
        {
          uint64_t v37 = (uint64_t)v93;
        }
        uint64_t v38 = &v93[9 * v95];
        if ((uint64_t *)v37 != v38)
        {
          p_p = &__p;
          uint64_t v40 = *(void *)v37;
          do
          {
            uint64_t v85 = v40;
            __src = 0;
            if (!llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v91, &v85, &__src)|| __src == (void **)(v91[0] + 16 * v92))
            {
              goto LABEL_92;
            }
            unsigned int v83 = __src[1];
            int v84 = v25;
            LOBYTE(v85) = 0;
            p_p[1] = 0;
            p_p[2] = 0;
            std::string *p_p = 0;
            uint64_t v41 = *(unsigned int *)(v37 + 16);
            if (v41)
            {
              uint64_t v42 = *(uint64_t **)(v37 + 8);
              uint64_t v43 = &v42[v41];
              do
              {
                uint64_t v99 = *v42;
                __src = 0;
                if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v91, &v99, &__src))
                {
                  uint64_t v44 = __src;
                  if (__src != (void **)(v91[0] + 16 * v92))
                  {
                    uint64_t v45 = v87;
                    if (v87 >= v88)
                    {
                      uint64_t v47 = (char *)__p;
                      uint64_t v48 = (v87 - (unsigned char *)__p) >> 3;
                      unint64_t v49 = v48 + 1;
                      if ((unint64_t)(v48 + 1) >> 61) {
                        goto LABEL_106;
                      }
                      uint64_t v50 = v88 - (unsigned char *)__p;
                      if ((v88 - (unsigned char *)__p) >> 2 > v49) {
                        unint64_t v49 = v50 >> 2;
                      }
                      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v51 = v49;
                      }
                      if (v51)
                      {
                        uint64_t v52 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v88, v51);
                        uint64_t v47 = (char *)__p;
                        uint64_t v45 = v87;
                      }
                      else
                      {
                        uint64_t v52 = 0;
                      }
                      long long v53 = &v52[8 * v48];
                      *(void *)long long v53 = v44[1];
                      uint64_t v46 = v53 + 8;
                      while (v45 != v47)
                      {
                        uint64_t v54 = *((void *)v45 - 1);
                        v45 -= 8;
                        *((void *)v53 - 1) = v54;
                        v53 -= 8;
                      }
                      std::string __p = v53;
                      int v87 = v46;
                      v88 = &v52[8 * v51];
                      if (v47) {
                        operator delete(v47);
                      }
                    }
                    else
                    {
                      *(void *)int v87 = __src[1];
                      uint64_t v46 = v45 + 8;
                    }
                    int v87 = v46;
                  }
                }
                ++v42;
              }
              while (v42 != v43);
              char v55 = v85;
              char v57 = __p;
              long long v56 = v87;
              uint64_t v58 = v88;
            }
            else
            {
              uint64_t v58 = 0;
              long long v56 = 0;
              char v57 = 0;
              char v55 = 0;
            }
            std::string *p_p = 0;
            p_p[1] = 0;
            p_p[2] = 0;
            uint64_t v59 = v89.i64[1];
            if (v89.i64[1] >= (unint64_t)v90)
            {
              uint64_t v61 = p_p;
              unint64_t v62 = 0xCCCCCCCCCCCCCCCDLL * ((v89.i64[1] - v89.i64[0]) >> 3);
              unint64_t v63 = v62 + 1;
              if (v62 + 1 > 0x666666666666666) {
                goto LABEL_106;
              }
              if (0x999999999999999ALL * (((uint64_t)v90 - v89.i64[0]) >> 3) > v63) {
                unint64_t v63 = 0x999999999999999ALL * (((uint64_t)v90 - v89.i64[0]) >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v90 - v89.i64[0]) >> 3) >= 0x333333333333333) {
                unint64_t v64 = 0x666666666666666;
              }
              else {
                unint64_t v64 = v63;
              }
              uint64_t v116 = v84;
              int v65 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v64);
              uint64_t v66 = &v65[5 * v62];
              __src = v65;
              v114.i64[0] = (uint64_t)v66;
              uint64_t v115 = &v65[5 * v67];
              uint64_t *v66 = v83;
              *((unsigned char *)v66 + 8) = v55;
              v66[2] = v57;
              v66[3] = 0;
              v66[3] = v56;
              v66[4] = v58;
              uint64_t v60 = v66 + 5;
              v114.i64[1] = (uint64_t)(v66 + 5);
              int64x2_t v68 = v89;
              uint64_t v69 = v114.i64[0];
              if (v89.i64[1] == v89.i64[0])
              {
                int64x2_t v73 = vdupq_n_s64(v89.u64[1]);
                p_p = v61;
              }
              else
              {
                uint64_t v70 = 0;
                p_p = v61;
                do
                {
                  uint64_t v71 = v69 + v70;
                  uint64_t v72 = v68.i64[1] + v70;
                  *(void *)(v71 - 40) = *(void *)(v68.i64[1] + v70 - 40);
                  *(unsigned char *)(v71 - 32) = *(unsigned char *)(v68.i64[1] + v70 - 32);
                  *(void *)(v71 - 16) = 0;
                  *(void *)(v71 - 8) = 0;
                  *(void *)(v71 - 24) = 0;
                  *(_OWORD *)(v71 - 24) = *(_OWORD *)(v68.i64[1] + v70 - 24);
                  *(void *)(v71 - 8) = *(void *)(v68.i64[1] + v70 - 8);
                  *(void *)(v72 - 24) = 0;
                  *(void *)(v72 - 16) = 0;
                  *(void *)(v72 - 8) = 0;
                  v70 -= 40;
                }
                while (v68.i64[1] + v70 != v68.i64[0]);
                int64x2_t v73 = v89;
                uint64_t v60 = (void **)v114.i64[1];
                v69 += v70;
              }
              __int16 v25 = v84;
              v89.i64[0] = v69;
              v89.i64[1] = (uint64_t)v60;
              int64x2_t v114 = v73;
              uint64_t v74 = v90;
              char v90 = v115;
              uint64_t v115 = v74;
              __src = (void **)v73.i64[0];
              std::__split_buffer<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>::~__split_buffer((uint64_t)&__src);
            }
            else
            {
              *(void *)v89.i64[1] = v83;
              *(unsigned char *)(v59 + 8) = v55;
              *(void *)(v59 + 16) = v57;
              *(void *)(v59 + 24) = v56;
              uint64_t v60 = (void **)(v59 + 40);
              *(void *)(v59 + 32) = v58;
              __int16 v25 = v84;
            }
            v89.i64[1] = (uint64_t)v60;
            if (__p)
            {
              int v87 = (char *)__p;
              operator delete(__p);
            }
            do
            {
LABEL_92:
              v37 += 72;
              if ((uint64_t *)v37 == v38) {
                goto LABEL_95;
              }
              uint64_t v40 = *(void *)v37;
            }
            while ((*(void *)v37 | 0x1000) == 0xFFFFFFFFFFFFF000);
          }
          while ((uint64_t *)v37 != v38);
        }
      }
    }
LABEL_95:
    v109 &= ~1u;
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    uint64_t v106 = 0;
    int64x2_t v75 = v89;
    if (v89.i64[1] != v89.i64[0])
    {
      unint64_t v76 = 0xCCCCCCCCCCCCCCCDLL * ((v89.i64[1] - v89.i64[0]) >> 3);
      if (v76 > 0x666666666666666) {
LABEL_106:
      }
        abort();
      uint64_t v77 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v76);
      uint64_t v78 = 0;
      uint64_t v106 = v77;
      uint64_t v107 = v77;
      uint64_t v108 = &v77[40 * v79];
      uint64_t v80 = v77 + 16;
      do
      {
        *(v80 - 2) = *(void *)(v75.i64[0] - 16);
        *((unsigned char *)v80 - 8) = *(unsigned char *)(v75.i64[0] - 8);
        v78 += 40;
        uint64_t v80 = std::vector<llvm::orc::ExecutorAddr>::vector(v80, v75.i64[0]) + 5;
      }
      while (v75.i64[0] + 24 != v75.i64[1]);
      uint64_t v107 = &v77[v78];
    }
    uint64_t v81 = *((void *)a2 + 3);
    if ((v81 & 2) == 0) {
      a2 = *(long long **)a2;
    }
    (*(void (**)(long long *, char **))(v81 & 0xFFFFFFFFFFFFFFF8))(a2, &v106);
    llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>::~Expected((uint64_t)&v106);
    __src = (void **)&v89;
    std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>::__destroy_vector::operator()[abi:nn180100](&__src);
    MEMORY[0x263E500A0](v91[0], 8);
  }
  if (v110 != v112) {
    free(v110);
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::destroyAll((uint64_t)&v93);
  MEMORY[0x263E500A0](v93, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::destroyAll((unsigned int *)&v96);
  return MEMORY[0x263E500A0](v96, 8);
}

void llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(void *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v131 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1[9];
  if (*a2 == *(void *)(v7 + 16) && (unint64_t v9 = atomic_load((unint64_t *)(v7 + 456))) != 0)
  {
    uint64_t v124 = a1;
    uint64_t v126 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_0,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_0,void>::Callbacks
         + 2;
    unint64_t v10 = a4[2];
    unint64_t v11 = a4[1];
    if (v11 >= v10)
    {
      uint64_t v13 = (uint64_t)(v11 - *a4) >> 5;
      if ((unint64_t)(v13 + 1) >> 59) {
        goto LABEL_153;
      }
      uint64_t v14 = v10 - *a4;
      uint64_t v15 = v14 >> 4;
      if (v14 >> 4 <= (unint64_t)(v13 + 1)) {
        uint64_t v15 = v13 + 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      char v130 = a4 + 2;
      if (v16) {
        char v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 2), v16);
      }
      else {
        char v17 = 0;
      }
      uint64_t v18 = (uint64_t)&v17[32 * v13];
      *(void *)&long long v127 = v17;
      *((void *)&v127 + 1) = v18;
      unint64_t v129 = &v17[32 * v16];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v18, (long long *)&v124);
      uint64_t v128 = v18 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4, &v127);
      uint64_t v12 = a4[1];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v127);
    }
    else
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[1], (long long *)&v124);
      uint64_t v12 = v11 + 32;
    }
    a4[1] = v12;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v124);
    unint64_t v19 = a4[8];
    uint64_t v124 = a1;
    uint64_t v126 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_1,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_1,void>::Callbacks
         + 2;
    unint64_t v20 = a4[7];
    if (v20 >= v19)
    {
      uint64_t v22 = a4[6];
      uint64_t v23 = (uint64_t)(v20 - v22) >> 5;
      if ((unint64_t)(v23 + 1) >> 59) {
        goto LABEL_153;
      }
      uint64_t v24 = v19 - v22;
      uint64_t v25 = v24 >> 4;
      if (v24 >> 4 <= (unint64_t)(v23 + 1)) {
        uint64_t v25 = v23 + 1;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      char v130 = a4 + 8;
      if (v26) {
        uint64_t v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 8), v26);
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = (uint64_t)&v27[32 * v23];
      *(void *)&long long v127 = v27;
      *((void *)&v127 + 1) = v28;
      unint64_t v129 = &v27[32 * v26];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v28, (long long *)&v124);
      uint64_t v128 = v28 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 6, &v127);
      uint64_t v21 = a4[7];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v127);
    }
    else
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[7], (long long *)&v124);
      uint64_t v21 = v20 + 32;
    }
    a4[7] = v21;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v124);
    int v8 = 1;
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v29 = a2[5];
  unint64_t v30 = v29 - 1;
  if ((unint64_t)(v29 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v29 + 8), 1uLL);
  }
  if (!v29) {
    goto LABEL_87;
  }
  if (v29 == *(void *)(a1[9] + 64)) {
    char v31 = v8;
  }
  else {
    char v31 = 1;
  }
  if (v31)
  {
    uint64_t v124 = a1;
    *(void *)&long long v125 = a2;
    uint64_t v126 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_3,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_3,void>::Callbacks
         + 2;
    unint64_t v32 = a4[2];
    unint64_t v33 = a4[1];
    if (v33 >= v32)
    {
      uint64_t v38 = (uint64_t)(v33 - *a4) >> 5;
      if ((unint64_t)(v38 + 1) >> 59) {
        goto LABEL_153;
      }
      uint64_t v39 = v32 - *a4;
      uint64_t v40 = v39 >> 4;
      if (v39 >> 4 <= (unint64_t)(v38 + 1)) {
        uint64_t v40 = v38 + 1;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v41 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v40;
      }
      char v130 = a4 + 2;
      if (v41) {
        uint64_t v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 2), v41);
      }
      else {
        uint64_t v42 = 0;
      }
      uint64_t v49 = (uint64_t)&v42[32 * v38];
      *(void *)&long long v127 = v42;
      *((void *)&v127 + 1) = v49;
      unint64_t v129 = &v42[32 * v41];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v49, (long long *)&v124);
      uint64_t v128 = v49 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4, &v127);
      uint64_t v34 = a4[1];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v127);
    }
    else
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[1], (long long *)&v124);
      uint64_t v34 = v33 + 32;
    }
    a4[1] = v34;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v124);
    unint64_t v50 = a4[5];
    uint64_t v124 = a1;
    uint64_t v126 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_4,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_4,void>::Callbacks
         + 2;
    unint64_t v51 = a4[4];
    if (v51 >= v50)
    {
      uint64_t v53 = a4[3];
      uint64_t v54 = (uint64_t)(v51 - v53) >> 5;
      if ((unint64_t)(v54 + 1) >> 59) {
        goto LABEL_153;
      }
      uint64_t v55 = v50 - v53;
      uint64_t v56 = v55 >> 4;
      if (v55 >> 4 <= (unint64_t)(v54 + 1)) {
        uint64_t v56 = v54 + 1;
      }
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v57 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v57 = v56;
      }
      char v130 = a4 + 5;
      if (v57) {
        uint64_t v58 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 5), v57);
      }
      else {
        uint64_t v58 = 0;
      }
      uint64_t v60 = (uint64_t)&v58[32 * v54];
      *(void *)&long long v127 = v58;
      *((void *)&v127 + 1) = v60;
      unint64_t v129 = &v58[32 * v57];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v60, (long long *)&v124);
      uint64_t v128 = v60 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 3, &v127);
      uint64_t v52 = a4[4];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v127);
    }
    else
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[4], (long long *)&v124);
      uint64_t v52 = v51 + 32;
    }
    a4[4] = v52;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v124);
    unint64_t v61 = a4[8];
    uint64_t v124 = a1;
    *(void *)&long long v125 = a2;
    uint64_t v126 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_5,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_5,void>::Callbacks
         + 2;
    unint64_t v62 = a4[7];
    if (v62 >= v61)
    {
      uint64_t v64 = a4[6];
      uint64_t v65 = (uint64_t)(v62 - v64) >> 5;
      if ((unint64_t)(v65 + 1) >> 59) {
        goto LABEL_153;
      }
      uint64_t v66 = v61 - v64;
      uint64_t v67 = v66 >> 4;
      if (v66 >> 4 <= (unint64_t)(v65 + 1)) {
        uint64_t v67 = v65 + 1;
      }
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v68 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v68 = v67;
      }
      char v130 = a4 + 8;
      if (v68) {
        uint64_t v69 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 8), v68);
      }
      else {
        uint64_t v69 = 0;
      }
      uint64_t v70 = (uint64_t)&v69[32 * v65];
      *(void *)&long long v127 = v69;
      *((void *)&v127 + 1) = v70;
      unint64_t v129 = &v69[32 * v68];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v70, (long long *)&v124);
      uint64_t v128 = v70 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 6, &v127);
      uint64_t v63 = a4[7];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v127);
    }
    else
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[7], (long long *)&v124);
      uint64_t v63 = v62 + 32;
    }
    a4[7] = v63;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v124);
LABEL_87:
    if (v30 <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v29 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    uint64_t v72 = a4 + 3;
    uint64_t v71 = (long long *)a4[3];
    uint64_t v73 = *a2;
    *(void *)&long long v127 = a1;
    *((void *)&v127 + 1) = v73;
    unint64_t v129 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_6,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_6,void>::Callbacks
         + 2;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::insert(a4 + 3, v71, &v127);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v127);
    uint64_t v74 = (std::__shared_weak_count *)operator new(0x58uLL);
    v74->__shared_owners_ = 0;
    v74->__shared_weak_owners_ = 0;
    v74[1].__vftable = (std::__shared_weak_count_vtbl *)&v74[1].__shared_weak_owners_;
    v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBE368;
    v74[1].__shared_owners_ = 0x300000000;
    atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v124 = a1;
    *(void *)&long long v125 = v74 + 1;
    *((void *)&v125 + 1) = v74;
    uint64_t v126 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_7,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_7,void>::Callbacks
         + 6;
    unint64_t v75 = a4[5];
    unint64_t v76 = a4[4];
    if (v76 >= v75)
    {
      uint64_t v78 = (uint64_t)(v76 - *v72) >> 5;
      if ((unint64_t)(v78 + 1) >> 59) {
        goto LABEL_153;
      }
      uint64_t v79 = v75 - *v72;
      uint64_t v80 = v79 >> 4;
      if (v79 >> 4 <= (unint64_t)(v78 + 1)) {
        uint64_t v80 = v78 + 1;
      }
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v81 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v81 = v80;
      }
      char v130 = a4 + 5;
      if (v81) {
        uint64_t v82 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 5), v81);
      }
      else {
        uint64_t v82 = 0;
      }
      uint64_t v83 = (uint64_t)&v82[32 * v78];
      *(void *)&long long v127 = v82;
      *((void *)&v127 + 1) = v83;
      unint64_t v129 = &v82[32 * v81];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v83, (long long *)&v124);
      uint64_t v128 = v83 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 3, &v127);
      uint64_t v77 = a4[4];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v127);
    }
    else
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[4], (long long *)&v124);
      uint64_t v77 = v76 + 32;
    }
    a4[4] = v77;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v124);
    atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
    int v84 = operator new(0x28uLL, (std::align_val_t)8uLL);
    unint64_t v85 = a4[14];
    int v86 = a4 + 12;
    uint64_t v124 = v84;
    long long v125 = xmmword_261E8A730;
    *int v84 = a1;
    v84[1] = a2;
    v84[2] = v74 + 1;
    v84[3] = v74;
    *((unsigned char *)v84 + 32) = v8;
    uint64_t v126 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_8,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_8,void>::Callbacks
         + 4;
    unint64_t v87 = a4[13];
    if (v87 >= v85)
    {
      uint64_t v89 = (uint64_t)(v87 - *v86) >> 5;
      if ((unint64_t)(v89 + 1) >> 59) {
        goto LABEL_153;
      }
      uint64_t v90 = v85 - *v86;
      uint64_t v91 = v90 >> 4;
      if (v90 >> 4 <= (unint64_t)(v89 + 1)) {
        uint64_t v91 = v89 + 1;
      }
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v92 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v92 = v91;
      }
      char v130 = a4 + 14;
      if (v92) {
        int v93 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 14), v92);
      }
      else {
        int v93 = 0;
      }
      uint64_t v94 = (uint64_t)&v93[32 * v89];
      *(void *)&long long v127 = v93;
      *((void *)&v127 + 1) = v94;
      unint64_t v129 = &v93[32 * v92];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v94, (long long *)&v124);
      uint64_t v128 = v94 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 12, &v127);
      uint64_t v88 = a4[13];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v127);
    }
    else
    {
      uint64_t v88 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v87, (long long *)&v124)+ 32;
    }
    a4[13] = v88;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v124);
    unint64_t v95 = a4[8];
    unsigned int v96 = a4 + 6;
    uint64_t v97 = *a2;
    uint64_t v124 = a1;
    *(void *)&long long v125 = v97;
    BYTE8(v125) = v8;
    uint64_t v126 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_9,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_9,void>::Callbacks
         + 2;
    unint64_t v98 = a4[7];
    if (v98 >= v95)
    {
      uint64_t v100 = (uint64_t)(v98 - *v96) >> 5;
      if ((unint64_t)(v100 + 1) >> 59) {
        goto LABEL_153;
      }
      uint64_t v101 = v95 - *v96;
      uint64_t v102 = v101 >> 4;
      if (v101 >> 4 <= (unint64_t)(v100 + 1)) {
        uint64_t v102 = v100 + 1;
      }
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v103 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v103 = v102;
      }
      char v130 = a4 + 8;
      if (v103) {
        long long v104 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 8), v103);
      }
      else {
        long long v104 = 0;
      }
      uint64_t v105 = (uint64_t)&v104[32 * v100];
      *(void *)&long long v127 = v104;
      *((void *)&v127 + 1) = v105;
      unint64_t v129 = &v104[32 * v103];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v105, (long long *)&v124);
      uint64_t v128 = v105 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 6, &v127);
      uint64_t v99 = a4[7];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v127);
    }
    else
    {
      uint64_t v99 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v98, (long long *)&v124)+ 32;
    }
    a4[7] = v99;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v124);
    uint64_t v126 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_10,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_10,void>::Callbacks
         + 2;
    unint64_t v106 = a4[7];
    unint64_t v107 = a4[8];
    if (v106 >= v107)
    {
      uint64_t v109 = (uint64_t)(v106 - *v96) >> 5;
      if ((unint64_t)(v109 + 1) >> 59) {
        goto LABEL_153;
      }
      uint64_t v110 = v107 - *v96;
      uint64_t v111 = v110 >> 4;
      if (v110 >> 4 <= (unint64_t)(v109 + 1)) {
        uint64_t v111 = v109 + 1;
      }
      if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v112 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v112 = v111;
      }
      char v130 = a4 + 8;
      if (v112) {
        int v113 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 8), v112);
      }
      else {
        int v113 = 0;
      }
      uint64_t v114 = (uint64_t)&v113[32 * v109];
      *(void *)&long long v127 = v113;
      *((void *)&v127 + 1) = v114;
      unint64_t v129 = &v113[32 * v112];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v114, (long long *)&v124);
      uint64_t v128 = v114 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 6, &v127);
      uint64_t v108 = a4[7];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v127);
    }
    else
    {
      uint64_t v108 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v106, (long long *)&v124)+ 32;
    }
    a4[7] = v108;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v124);
    if (!v8)
    {
LABEL_151:
      std::__shared_weak_count::__release_shared[abi:nn180100](v74);
      return;
    }
    uint64_t v124 = a1;
    uint64_t v126 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_11,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_11,void>::Callbacks
         + 2;
    unint64_t v115 = a4[13];
    unint64_t v116 = a4[14];
    if (v115 < v116)
    {
      uint64_t v117 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v115, (long long *)&v124)+ 32;
LABEL_150:
      a4[13] = v117;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v124);
      goto LABEL_151;
    }
    uint64_t v118 = (uint64_t)(v115 - *v86) >> 5;
    if (!((unint64_t)(v118 + 1) >> 59))
    {
      uint64_t v119 = v116 - *v86;
      uint64_t v120 = v119 >> 4;
      if (v119 >> 4 <= (unint64_t)(v118 + 1)) {
        uint64_t v120 = v118 + 1;
      }
      if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v121 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v121 = v120;
      }
      char v130 = a4 + 14;
      if (v121) {
        long long v122 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 14), v121);
      }
      else {
        long long v122 = 0;
      }
      uint64_t v123 = (uint64_t)&v122[32 * v118];
      *(void *)&long long v127 = v122;
      *((void *)&v127 + 1) = v123;
      unint64_t v129 = &v122[32 * v121];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v123, (long long *)&v124);
      uint64_t v128 = v123 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 12, &v127);
      uint64_t v117 = a4[13];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v127);
      goto LABEL_150;
    }
LABEL_153:
    abort();
  }
  unint64_t v35 = a4[8];
  uint64_t v124 = a1;
  *(void *)&long long v125 = a2;
  uint64_t v126 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_2,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_2,void>::Callbacks
       + 2;
  unint64_t v36 = a4[7];
  if (v36 >= v35)
  {
    uint64_t v43 = a4[6];
    uint64_t v44 = (uint64_t)(v36 - v43) >> 5;
    if ((unint64_t)(v44 + 1) >> 59) {
      goto LABEL_153;
    }
    uint64_t v45 = v35 - v43;
    uint64_t v46 = v45 >> 4;
    if (v45 >> 4 <= (unint64_t)(v44 + 1)) {
      uint64_t v46 = v44 + 1;
    }
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v47 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v47 = v46;
    }
    char v130 = a4 + 8;
    if (v47) {
      uint64_t v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 8), v47);
    }
    else {
      uint64_t v48 = 0;
    }
    uint64_t v59 = (uint64_t)&v48[32 * v44];
    *(void *)&long long v127 = v48;
    *((void *)&v127 + 1) = v59;
    unint64_t v129 = &v48[32 * v47];
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v59, (long long *)&v124);
    uint64_t v128 = v59 + 32;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 6, &v127);
    uint64_t v37 = a4[7];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v127);
  }
  else
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[7], (long long *)&v124);
    uint64_t v37 = v36 + 32;
  }
  a4[7] = v37;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v124);
  if (v30 <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v29 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
}

double llvm::jitlink::LinkGraph::blocks@<D0>(llvm::jitlink::LinkGraph *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (void *)*((void *)this + 23);
  uint64_t v4 = *((unsigned int *)this + 50);
  unint64_t v5 = &v3[3 * v4];
  if (*((_DWORD *)this + 48))
  {
    if (v4)
    {
      uint64_t v6 = 24 * v4;
      while (*v3 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v3 += 3;
        v6 -= 24;
        if (!v6) {
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v3 = v5;
  }
  v16[0] = v3;
  v16[1] = v5;
  char v17 = 1;
  *(void *)&long long v14 = v5;
  *((void *)&v14 + 1) = v5;
  char v15 = 1;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::nested_collection_iterator((uint64_t)v18, v16, &v14);
  v12[0] = v5;
  v12[1] = v5;
  char v13 = 1;
  *(void *)&long long v10 = v5;
  *((void *)&v10 + 1) = v5;
  char v11 = 1;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::nested_collection_iterator((uint64_t)(a2 + 4), v12, &v10);
  long long v7 = v18[1];
  *a2 = v18[0];
  a2[1] = v7;
  double result = *(double *)&v19;
  long long v9 = v20;
  a2[2] = v19;
  a2[3] = v9;
  return result;
}

__n128 llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 56);
  unint64_t v5 = (void *)(*(void *)(a1 + 48) + 8);
  *(void *)(a1 + 48) = v5;
  while (v5 != v4 && (*v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
    *(void *)(a1 + 48) = ++v5;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::moveToNonEmptyInnerOrEnd((void *)a1);
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v6;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v8;
  return result;
}

void **llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_0::operator()(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6 = a2 + 32;
  __n128 result = (void **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 32);
  if ((void **)(*(void *)(a2 + 32) + 8 * *(unsigned int *)(a2 + 48)) != result)
  {
    long long v8 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v6);
    unint64_t v9 = **v8;
    unint64_t v10 = (*v8)[4] + v9;
    *a3 = v9;
    a3[1] = v10;
    __n128 result = (void **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v6);
    uint64_t v12 = *(void *)(a2 + 32) + 8 * *(unsigned int *)(a2 + 48);
    if ((void **)v12 != result)
    {
      char v13 = result;
      long long v14 = v11;
      do
      {
        char v15 = *v13;
        unint64_t v16 = **v13;
        uint64_t v17 = (*v13)[5];
        unint64_t v18 = (*v13)[4] + v16;
        if (v16 >= *a3) {
          unint64_t v16 = *a3;
        }
        if (a3[1] > v18) {
          unint64_t v18 = a3[1];
        }
        *a3 = v16;
        a3[1] = v18;
        unint64_t v19 = v15[6];
        while (v17 != v19)
        {
          uint64_t v20 = *(void *)(*(void *)v17 + 16);
          if ((*(unsigned char *)(v20 + 8) & 1) != 0 && (*(unsigned char *)(*(void *)(v20 + 16) + 16) & 4) != 0)
          {
            uint64_t v21 = *a1;
            unint64_t v22 = *(unsigned int *)(*a1 + 8);
            if (v22 >= *(unsigned int *)(*a1 + 12))
            {
              __n128 result = (void **)llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, (void *)(v21 + 16), v22 + 1, 8);
              unint64_t v22 = *(unsigned int *)(v21 + 8);
            }
            *(void *)(*(void *)v21 + 8 * v22) = v20;
            ++*(_DWORD *)(v21 + 8);
          }
          v17 += 32;
        }
        while (++v13 != v14)
        {
          if (((unint64_t)*v13 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_20;
          }
        }
        char v13 = v14;
LABEL_20:
        ;
      }
      while (v13 != (void **)v12);
    }
  }
  return result;
}

llvm::jitlink::Section *llvm::jitlink::LinkGraph::mergeSections(llvm::jitlink::Section *this, llvm::jitlink::Section *a2, llvm::jitlink::Section *a3, char a4)
{
  if (a2 != a3)
  {
    uint64_t v17 = v4;
    uint64_t v18 = v5;
    unint64_t v9 = this;
    unint64_t v10 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)a3 + 32);
    uint64_t v12 = *((void *)a3 + 4) + 8 * *((unsigned int *)a3 + 12);
    if ((uint64_t *)v12 != v10)
    {
      do
      {
        uint64_t v13 = *v10++;
        *(void *)(v13 + 16) = a2;
        while (v10 != v11)
        {
          if ((*v10 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_8;
          }
          ++v10;
        }
        unint64_t v10 = v11;
LABEL_8:
        ;
      }
      while (v10 != (uint64_t *)v12);
    }
    this = llvm::jitlink::Section::transferContentTo(a3, a2);
    if ((a4 & 1) == 0)
    {
      long long v16 = *(_OWORD *)a3;
      return (llvm::jitlink::Section *)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::erase((uint64_t)v9 + 184, (uint64_t)&v16, v14, v15);
    }
  }
  return this;
}

void llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSOptional<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>>,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>>>,llvm::orc::ExecutorAddr,std::optional<std::tuple<llvm::SmallVector<llvm::orc::ExecutorAddrRange,3u>,llvm::orc::ExecutorAddrRange,llvm::orc::ExecutorAddrRange>>,llvm::SmallVector<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,8u>>(uint64_t a1, uint64_t a2, size_t *a3, uint64_t a4, unsigned int *a5)
{
  v54[3] = *MEMORY[0x263EF8340];
  uint64_t v52 = v54;
  long long v53 = xmmword_261E8A770;
  uint64_t v10 = *(unsigned int *)(a4 + 8);
  uint64_t v11 = a5[2];
  if (v11)
  {
    uint64_t v12 = 32 * v11;
    uint64_t v13 = (uint64_t *)(*(void *)a5 + 8);
    uint64_t v14 = 8;
    do
    {
      uint64_t v15 = *v13;
      v13 += 4;
      v14 += v15 + 24;
      v12 -= 32;
    }
    while (v12);
  }
  else
  {
    uint64_t v14 = 8;
  }
  uint64_t v16 = 16 * v10 + 49;
  BOOL v17 = v10 == 0;
  uint64_t v18 = 49;
  if (!v17) {
    uint64_t v18 = v16;
  }
  uint64_t v19 = 9;
  if (*(unsigned char *)(a4 + 96)) {
    uint64_t v19 = v18;
  }
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v52, v19 + v14);
  uint64_t v20 = v52;
  uint64_t v21 = v53;
  if (!(void)v53) {
    uint64_t v20 = 0;
  }
  uint64_t v43 = v20;
  unint64_t v44 = v53;
  long long v22 = xmmword_261E8A770;
  if ((unint64_t)v53 < 8) {
    goto LABEL_38;
  }
  *uint64_t v20 = *a3;
  uint64_t v43 = v20 + 1;
  unint64_t v44 = v21 - 8;
  if (v21 == 8) {
    goto LABEL_38;
  }
  *((unsigned char *)v20 + 8) = *(unsigned char *)(a4 + 96);
  unint64_t v23 = v21 - 9;
  uint64_t v43 = (size_t *)((char *)v20 + 9);
  unint64_t v44 = v21 - 9;
  if (*(unsigned char *)(a4 + 96))
  {
    if (v23 < 8) {
      goto LABEL_38;
    }
    *(size_t *)((char *)v20 + 9) = *(unsigned int *)(a4 + 8);
    uint64_t v24 = (size_t *)((char *)v20 + 17);
    unint64_t v25 = v21 - 17;
    uint64_t v43 = v24;
    unint64_t v44 = v21 - 17;
    uint64_t v26 = *(unsigned int *)(a4 + 8);
    if (v26)
    {
      uint64_t v27 = *(size_t **)a4;
      uint64_t v28 = *(void *)a4 + 16 * v26;
      while (1)
      {
        BOOL v29 = v25 >= 8;
        unint64_t v30 = v25 - 8;
        if (!v29) {
          break;
        }
        *uint64_t v24 = *v27;
        char v31 = v24 + 1;
        uint64_t v43 = v31;
        unint64_t v44 = v30;
        if (v30 <= 7) {
          break;
        }
        *char v31 = v27[1];
        uint64_t v24 = v31 + 1;
        unint64_t v25 = v44 - 8;
        uint64_t v43 = v24;
        v44 -= 8;
        v27 += 2;
        if (v27 == (size_t *)v28) {
          goto LABEL_22;
        }
      }
LABEL_38:
      getErrorErrorCat();
      uint64_t v48 = 3;
      uint64_t v49 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
    }
LABEL_22:
    int v32 = llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>::serialize<llvm::orc::ExecutorAddrRange,llvm::orc::ExecutorAddrRange>(&v43, (void *)(a4 + 64), (void *)(a4 + 80));
    long long v22 = xmmword_261E8A770;
    if (!v32) {
      goto LABEL_38;
    }
    unint64_t v23 = v44;
  }
  if (v23 < 8) {
    goto LABEL_38;
  }
  size_t *v43 = a5[2];
  unint64_t v33 = v43 + 1;
  unint64_t v34 = v44 - 8;
  ++v43;
  v44 -= 8;
  uint64_t v35 = a5[2];
  if (v35)
  {
    uint64_t v36 = *(void *)a5;
    uint64_t v37 = *(void *)a5 + 32 * v35;
    while (v34 >= 8)
    {
      uint64_t v38 = *(const void **)v36;
      size_t v39 = *(void *)(v36 + 8);
      *unint64_t v33 = v39;
      uint64_t v40 = v33 + 1;
      unint64_t v41 = v44 - 8;
      uint64_t v43 = v40;
      v44 -= 8;
      if (v39)
      {
        BOOL v29 = v41 >= v39;
        v41 -= v39;
        if (!v29) {
          goto LABEL_38;
        }
        memcpy(v40, v38, v39);
        long long v22 = xmmword_261E8A770;
        uint64_t v40 = (size_t *)((char *)v40 + v39);
        uint64_t v43 = v40;
        unint64_t v44 = v41;
      }
      if (v41 < 8) {
        break;
      }
      size_t *v40 = *(void *)(v36 + 16);
      uint64_t v42 = v43++;
      v44 -= 8;
      if (v44 <= 7) {
        break;
      }
      v42[1] = *(void *)(v36 + 24);
      unint64_t v33 = v42 + 2;
      unint64_t v34 = v44 - 8;
      uint64_t v43 = v33;
      v44 -= 8;
      v36 += 32;
      if (v36 == v37) {
        goto LABEL_35;
      }
    }
    goto LABEL_38;
  }
LABEL_35:
  uint64_t v45 = v47;
  long long v46 = v22;
  if ((void)v53)
  {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v45, (const void **)&v52);
    uint64_t v48 = a2;
    uint64_t v49 = v51;
    long long v50 = xmmword_261E8A770;
    if ((void)v46) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v49, (const void **)&v45);
    }
  }
  else
  {
    uint64_t v48 = a2;
    uint64_t v49 = v51;
    long long v50 = v22;
  }
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>(a1, (uint64_t)&v48);
  if (v49 != v51) {
    free(v49);
  }
  if (v45 != v47) {
    free(v45);
  }
  if (v52 != v54) {
    free(v52);
  }
}

void std::vector<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc,std::allocator<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc>>::push_back[abi:nn180100](void **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    _OWORD *v5 = *a2;
    long long v6 = a2[1];
    long long v7 = a2[2];
    long long v8 = a2[4];
    v5[3] = a2[3];
    v5[4] = v8;
    v5[1] = v6;
    _OWORD v5[2] = v7;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v5 + 5), a2 + 5);
    unint64_t v9 = v5 + 7;
    goto LABEL_19;
  }
  uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (((char *)v5 - (unsigned char *)*a1) >> 4);
  if ((unint64_t)(v10 + 1) > 0x249249249249249) {
    abort();
  }
  unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (void)*a1) >> 4);
  uint64_t v12 = 2 * v11;
  if (2 * v11 <= v10 + 1) {
    uint64_t v12 = v10 + 1;
  }
  if (v11 >= 0x124924924924924) {
    unint64_t v13 = 0x249249249249249;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v13)
  {
    if (v13 > 0x249249249249249) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = (char *)operator new(112 * v13);
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v15 = &v14[112 * v10];
  uint64_t v16 = &v14[112 * v13];
  long long v17 = a2[3];
  *((_OWORD *)v15 + 2) = a2[2];
  *((_OWORD *)v15 + 3) = v17;
  *((_OWORD *)v15 + 4) = a2[4];
  long long v18 = a2[1];
  *(_OWORD *)uint64_t v15 = *a2;
  *((_OWORD *)v15 + 1) = v18;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v15 + 80), a2 + 5);
  unint64_t v9 = v15 + 112;
  uint64_t v20 = (char *)*a1;
  uint64_t v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (!v19) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  do
  {
    *((_OWORD *)v15 - 7) = *((_OWORD *)v19 - 7);
    long long v21 = *((_OWORD *)v19 - 6);
    long long v22 = *((_OWORD *)v19 - 5);
    long long v23 = *((_OWORD *)v19 - 3);
    *((_OWORD *)v15 - 4) = *((_OWORD *)v19 - 4);
    *((_OWORD *)v15 - 3) = v23;
    *((_OWORD *)v15 - 6) = v21;
    *((_OWORD *)v15 - 5) = v22;
    uint64_t v24 = (uint64_t)(v15 - 32);
    v15 -= 112;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v24, (long long *)v19 - 2);
    v19 -= 112;
  }
  while (v19 != v20);
  uint64_t v19 = (char *)*a1;
  unint64_t v25 = (char *)a1[1];
  *a1 = v15;
  a1[1] = v9;
  a1[2] = v16;
  if (v25 != v19)
  {
    do
    {
      uint64_t v26 = v25 - 112;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)v25 - 4);
      unint64_t v25 = v26;
    }
    while (v26 != v19);
  }
  if (v19) {
LABEL_18:
  }
    operator delete(v19);
LABEL_19:
  a1[1] = v9;
}

void *llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::$_3::operator()(void **a1, const void *a2, size_t a3, long long **a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (a3 <= 0x3F) {
    size_t v8 = 64 - a3;
  }
  else {
    size_t v8 = 0;
  }
  bzero((char *)&__dst + a3, v8);
  __n128 result = memcpy(&__dst, a2, a3);
  unint64_t v10 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 4;
  unsigned int v11 = -1227133513 * v10;
  unsigned int v12 = 613566768 * v10 + 72;
  uint64_t v13 = (uint64_t)*a1;
  int8x16_t v14 = v34;
  int8x16_t v15 = v35;
  int8x8_t v16 = v36;
  unsigned int v17 = v37;
  if (*(_DWORD *)(**a1 + 172) == 1)
  {
    int v18 = 25;
  }
  else
  {
    unsigned int v12 = bswap32(v12);
    int8x16_t v14 = vrev64q_s8(v34);
    int8x16_t v15 = vrev64q_s8(v35);
    int8x8_t v16 = vrev32_s8(v36);
    unsigned int v11 = bswap32(v11);
    unsigned int v17 = bswap32(v37);
    int v18 = 419430400;
  }
  uint64_t v19 = **(void **)(v13 + 8);
  *(_DWORD *)uint64_t v19 = v18;
  *(_DWORD *)(v19 + 4) = v12;
  *(_OWORD *)(v19 + 8) = __dst;
  *(int8x16_t *)(v19 + 24) = v14;
  *(int8x16_t *)(v19 + 40) = v15;
  *(int8x8_t *)(v19 + 56) = v16;
  *(_DWORD *)(v19 + 64) = v11;
  *(_DWORD *)(v19 + 68) = v17;
  **(void **)(v13 + 8) += 72;
  long long v21 = *a4;
  uint64_t v20 = a4[1];
  while (v21 != v20)
  {
    unint64_t v22 = *((void *)v21 + 13);
    if (v22 >= 8)
    {
      long long v23 = v21 + 5;
      if ((v22 & 2) == 0) {
        long long v23 = (void *)*v23;
      }
      __n128 result = (void *)(*(uint64_t (**)(void *, void))(v22 & 0xFFFFFFFFFFFFFFF8))(v23, *a1[1] - *a1[2]);
    }
    uint64_t v24 = (uint64_t)*a1;
    int8x16_t v26 = (int8x16_t)v21[2];
    int8x16_t v25 = (int8x16_t)v21[3];
    int8x8_t v27 = (int8x8_t)v21[4];
    unsigned int v29 = *((_DWORD *)v21 + 18);
    int v28 = *((_DWORD *)v21 + 19);
    if (*(_DWORD *)(**a1 + 172) != 1)
    {
      int8x16_t v26 = vrev64q_s8(v26);
      int8x16_t v25 = vrev32q_s8(v25);
      int8x8_t v27 = vrev32_s8(v27);
      unsigned int v29 = bswap32(v29);
    }
    uint64_t v30 = **(void **)(v24 + 8);
    long long v31 = *v21;
    long long v32 = v21[1];
    v21 += 7;
    *(_OWORD *)uint64_t v30 = v31;
    *(_OWORD *)(v30 + 16) = v32;
    *(int8x16_t *)(v30 + 32) = v26;
    *(int8x16_t *)(v30 + 48) = v25;
    *(int8x8_t *)(v30 + 64) = v27;
    *(_DWORD *)(v30 + 72) = v29;
    *(_DWORD *)(v30 + 76) = v28;
    **(void **)(v24 + 8) += 80;
  }
  return result;
}

void **std::vector<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc,std::allocator<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc>>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 112;
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)v3 - 4);
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::ExecutorAddr,llvm::SmallVector<std::tuple<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>,2u>>(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  v26[3] = *MEMORY[0x263EF8340];
  uint64_t v24 = v26;
  long long v25 = xmmword_261E8A770;
  unsigned int v8 = *((_DWORD *)a4 + 2);
  if (v8) {
    unint64_t v9 = 17 * ((24 * (unint64_t)v8 - 24) / 0x18) + 33;
  }
  else {
    unint64_t v9 = 16;
  }
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v24, v9);
  uint64_t v10 = v25;
  if ((unint64_t)v25 < 8) {
    goto LABEL_6;
  }
  unsigned int v11 = v24;
  *uint64_t v24 = *a3;
  if ((v10 & 0xFFFFFFFFFFFFFFF8) == 8) {
    goto LABEL_6;
  }
  v11[1] = *((unsigned int *)a4 + 2);
  unsigned int v12 = *((_DWORD *)a4 + 2);
  if (v12)
  {
    uint64_t v13 = *a4;
    uint64_t v14 = *a4 + 24 * v12;
    unint64_t v15 = v10 - 16;
    int8x8_t v16 = (char *)(v11 + 2);
    while (v15 >= 8)
    {
      *(void *)int8x8_t v16 = *(void *)v13;
      if ((v15 & 0xFFFFFFFFFFFFFFF8) == 8) {
        break;
      }
      *((void *)v16 + 1) = *(void *)(v13 + 8);
      if (v15 == 16) {
        break;
      }
      v16[16] = *(unsigned char *)(v13 + 16);
      v16 += 17;
      v15 -= 17;
      v13 += 24;
      if (v13 == v14) {
        goto LABEL_16;
      }
    }
LABEL_6:
    getErrorErrorCat();
    uint64_t v20 = 3;
    long long v21 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
  }
LABEL_16:
  unsigned int v17 = v19;
  long long v18 = xmmword_261E8A770;
  if ((void)v25)
  {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v17, (const void **)&v24);
    uint64_t v20 = a2;
    long long v21 = v23;
    long long v22 = xmmword_261E8A770;
    if ((void)v18) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v21, (const void **)&v17);
    }
  }
  else
  {
    uint64_t v20 = a2;
    long long v21 = v23;
    long long v22 = xmmword_261E8A770;
  }
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>(a1, (uint64_t)&v20);
  if (v21 != v23) {
    free(v21);
  }
  if (v17 != v19) {
    free(v17);
  }
  if (v24 != v26) {
    free(v24);
  }
}

uint64_t llvm::orc::SimpleMachOHeaderMU::SimpleMachOHeaderMU(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4)
{
  long long v22 = 0;
  uint64_t v23 = 0;
  int v24 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct((uint64_t *)&v22, a3)[4] = 4096;
  llvm::orc::ExecutorProcessControl::intern(*(void *)(*(void *)(a2 + 8) + 72), (uint64_t *)"___mh_executable_header", 0x17uLL, (unint64_t **)&v19);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct((uint64_t *)&v22, &v19)[4] = 4096;
  if ((unint64_t)v19 - 1 < 0xFFFFFFFFFFFFFFE0) {
    atomic_fetch_add(v19 + 1, 0xFFFFFFFFFFFFFFFFLL);
  }
  unsigned int v8 = v22;
  uint64_t v19 = (atomic_ullong *)v22;
  int v9 = v23;
  int v10 = HIDWORD(v23);
  uint64_t v20 = v23;
  long long v22 = 0;
  uint64_t v23 = 0;
  int v11 = v24;
  int v21 = v24;
  uint64_t v12 = *a3;
  int v24 = 0;
  if ((unint64_t)(v12 - 1) < 0xFFFFFFFFFFFFFFE0)
  {
    atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 1uLL);
    unsigned int v8 = (unint64_t *)v19;
    int v9 = v20;
    int v10 = HIDWORD(v20);
    int v11 = v21;
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)&v19);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)&v22);
  *(void *)a1 = &unk_270DBDAF0;
  *(void *)(a1 + 8) = v8;
  v16[0] = 0;
  *(_DWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 20) = v10;
  v16[1] = 0;
  *(_DWORD *)(a1 + 24) = v11;
  int v17 = 0;
  *(void *)(a1 + 32) = v12;
  uint64_t v18 = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(v16);
  *(void *)a1 = &unk_270DBE250;
  *(void *)(a1 + 40) = a2;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (*((unsigned char *)a4 + 40))
  {
    long long v13 = *a4;
    *(void *)(a1 + 64) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 48) = v13;
    *((void *)a4 + 1) = 0;
    *((void *)a4 + 2) = 0;
    *(void *)a4 = 0;
    uint64_t v14 = *((void *)a4 + 3);
    *(_DWORD *)(a1 + 80) = *((_DWORD *)a4 + 8);
    *(void *)(a1 + 72) = v14;
    *(unsigned char *)(a1 + 88) = 1;
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = a4[3];
  *(void *)(a1 + 112) = *((void *)a4 + 8);
  *((void *)a4 + 6) = 0;
  *((void *)a4 + 7) = 0;
  *((void *)a4 + 8) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(long long *)((char *)a4 + 72);
  *(void *)(a1 + 136) = *((void *)a4 + 11);
  *((void *)a4 + 9) = 0;
  *((void *)a4 + 10) = 0;
  *((void *)a4 + 11) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = a4[6];
  *(void *)(a1 + 160) = *((void *)a4 + 14);
  *((void *)a4 + 12) = 0;
  *((void *)a4 + 13) = 0;
  *((void *)a4 + 14) = 0;
  return a1;
}

void llvm::orc::SimpleMachOHeaderMU::materialize()
{
  std::string::basic_string[abi:nn180100]<0>(&__p, "<MachOHeaderMU>");
}

void anonymous namespace'::createPlatformGraph()
{
}

void llvm::orc::SimpleMachOHeaderMU::createHeaderBlock(llvm::orc::SimpleMachOHeaderMU *this, llvm::orc::JITDylib *a2, llvm::jitlink::LinkGraph *a3, llvm::jitlink::Section *a4)
{
  v4[0] = v4;
  v4[1] = v4;
  long long v5 = 0u;
  long long v6 = 0u;
  *(_OWORD *)long long v7 = 0u;
  long long v8 = 0u;
  int v9 = v10;
  memset(v10, 0, sizeof(v10));
  if (*((unsigned char *)this + 88)) {
    operator new();
  }
  operator new();
}

void llvm::orc::MachOPlatform::MachOPlatformPlugin::~MachOPlatformPlugin(llvm::orc::MachOPlatform::MachOPlatformPlugin *this)
{
  *(void *)this = &unk_270DBE298;
  MEMORY[0x263E500A0](*((void *)this + 13), 8);
  MEMORY[0x263E500A0](*((void *)this + 10), 8);
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_270DBE298;
  MEMORY[0x263E500A0](*((void *)this + 13), 8);
  MEMORY[0x263E500A0](*((void *)this + 10), 8);
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x263E500B0);
}

void llvm::orc::MachOPlatform::MachOPlatformPlugin::notifyFailed(void *a1@<X8>)
{
  *a1 = 0;
}

void llvm::orc::MachOPlatform::MachOPlatformPlugin::notifyRemovingResources(void *a1@<X8>)
{
  *a1 = 0;
}

void llvm::orc::MachOPlatform::~MachOPlatform(llvm::orc::MachOPlatform *this)
{
  llvm::orc::MachOPlatform::~MachOPlatform(this);
  JUMPOUT(0x263E500B0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(void *)this = &unk_270DBE210;
  MEMORY[0x263E500A0](*((void *)this + 54), 8);
  MEMORY[0x263E500A0](*((void *)this + 51), 8);
  MEMORY[0x263E500A0](*((void *)this + 48), 8);
  std::mutex::~mutex((std::mutex *)this + 5);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::destroyAll((unsigned int *)this + 74);
  MEMORY[0x263E500A0](*((void *)this + 37), 8);
  uint64_t v2 = *((void *)this + 35);
  if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v3 = *((void *)this + 33);
  if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  unint64_t v4 = *((void *)this + 31);
  if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  long long v5 = *((void *)this + 29);
  if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  long long v6 = *((void *)this + 27);
  if ((unint64_t)(v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v6 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  long long v7 = *((void *)this + 25);
  if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  long long v8 = *((void *)this + 23);
  if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  int v9 = *((void *)this + 21);
  if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  int v10 = *((void *)this + 19);
  if ((unint64_t)(v10 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  int v11 = *((void *)this + 17);
  if ((unint64_t)(v11 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v11 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v12 = *((void *)this + 15);
  if ((unint64_t)(v12 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  long long v13 = *((void *)this + 13);
  if ((unint64_t)(v13 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v14 = *((void *)this + 11);
  if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  unint64_t v15 = *((void *)this + 9);
  if ((unint64_t)(v15 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  int8x8_t v16 = *((void *)this + 8);
  if ((unint64_t)(v16 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v16 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)this + 4);
}

void llvm::orc::SimpleMachOHeaderMU::~SimpleMachOHeaderMU(llvm::orc::SimpleMachOHeaderMU *this)
{
  *(void *)this = &unk_270DBE250;
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  unint64_t v4 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v4);
  unint64_t v4 = (void **)((char *)this + 96);
  std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](&v4);
  if (*((unsigned char *)this + 88) && *((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  *(void *)this = &unk_270DBDAF0;
  uint64_t v3 = *((void *)this + 4);
  if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)this + 1);
}

{
  void *v2;
  uint64_t v3;
  void **v4;

  *(void *)this = &unk_270DBE250;
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  unint64_t v4 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v4);
  unint64_t v4 = (void **)((char *)this + 96);
  std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](&v4);
  if (*((unsigned char *)this + 88) && *((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  *(void *)this = &unk_270DBDAF0;
  uint64_t v3 = *((void *)this + 4);
  if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)this + 1);
  MEMORY[0x263E500B0](this, 0x10B3C402DB37A05);
}

const char *llvm::orc::SimpleMachOHeaderMU::getName(llvm::orc::SimpleMachOHeaderMU *this)
{
  return "MachOHeaderMU";
}

uint64_t llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::nested_collection_iterator(uint64_t a1, void *a2, long long *a3)
{
  long long v4 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = a2[2];
  *(_OWORD *)a1 = v4;
  long long v5 = *a3;
  *(void *)(a1 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 24) = v5;
  if (*a2 == *(void *)a3)
  {
    uint64_t v7 = 0;
    long long v6 = 0;
  }
  else
  {
    long long v6 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(*(void *)(*a2 + 16) + 32);
  }
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::moveToNonEmptyInnerOrEnd((void *)a1);
  return a1;
}

void *llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::moveToNonEmptyInnerOrEnd(void *result)
{
  uint64_t v1 = *result;
  if (*result != result[3])
  {
    uint64_t v2 = result;
    uint64_t v3 = result + 6;
    do
    {
      uint64_t v4 = *(void *)(v1 + 16);
      __n128 result = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v4 + 32);
      if (*v3 != *(void *)(v4 + 32) + 8 * *(unsigned int *)(v4 + 48)) {
        break;
      }
      long long v5 = (void *)v2[1];
      long long v6 = (void *)(*v2 + 24);
      *uint64_t v2 = v6;
      if (v6 != v5)
      {
        while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v6 += 3;
          *uint64_t v2 = v6;
          if (v6 == v5)
          {
            long long v6 = v5;
            break;
          }
        }
      }
      if (v6 == (void *)v2[3])
      {
        *uint64_t v3 = 0;
        v3[1] = 0;
        return result;
      }
      __n128 result = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v6[2] + 32);
      uint64_t v1 = *v2;
      uint64_t v7 = v2[3];
      v2[6] = result;
      v2[7] = v8;
    }
    while (v1 != v7);
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::orc::ExecutorAddrRange>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 != v5)
    {
      long long v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    uint64_t v7 = (_DWORD *)(a2 + 8);
    unint64_t v8 = *(unsigned int *)(a2 + 8);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if (v8) {
        memmove(*(void **)a1, v4, 16 * v8);
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if (v9)
      {
        memmove(*(void **)a1, v4, 16 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 16);
    }
    uint64_t v9 = 0;
LABEL_14:
    uint64_t v10 = *v7;
    if (v9 != v10) {
      memcpy((void *)(*(void *)a1 + 16 * v9), (const void *)(*(void *)a2 + 16 * v9), *(void *)a2 + 16 * v10 - (*(void *)a2 + 16 * v9));
    }
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *uint64_t v7 = 0;
  }
  return a1;
}

llvm::jitlink::Section *llvm::jitlink::Section::transferContentTo(llvm::jitlink::Section *this, llvm::jitlink::Section *a2)
{
  if (a2 != this)
  {
    uint64_t v23 = v2;
    uint64_t v24 = v3;
    long long v5 = this;
    long long v6 = (_DWORD *)((char *)this + 56);
    uint64_t v7 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)this + 56);
    uint64_t v9 = *((void *)v5 + 7) + 8 * *((unsigned int *)v5 + 18);
    if ((uint64_t *)v9 != v7)
    {
      uint64_t v10 = v7;
      int v11 = v8;
      do
      {
        uint64_t v12 = *v10++;
        uint64_t v21 = v12;
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)a2 + 56, &v21, (uint64_t)v22);
        while (v10 != v11)
        {
          if ((*v10 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_9;
          }
          ++v10;
        }
        uint64_t v10 = v11;
LABEL_9:
        ;
      }
      while (v10 != (uint64_t *)v9);
    }
    long long v13 = (_DWORD *)((char *)v5 + 32);
    uint64_t v14 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)v5 + 32);
    uint64_t v16 = *((void *)v5 + 4) + 8 * *((unsigned int *)v5 + 12);
    if ((uint64_t *)v16 != v14)
    {
      int v17 = v14;
      uint64_t v18 = v15;
      uint64_t v19 = (char *)a2 + 32;
      do
      {
        uint64_t v20 = *v17++;
        uint64_t v21 = v20;
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v19, &v21, (uint64_t)v22);
        while (v17 != v18)
        {
          if ((*v17 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_17;
          }
          ++v17;
        }
        int v17 = v18;
LABEL_17:
        ;
      }
      while (v17 != (uint64_t *)v16);
    }
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::clear(v6);
    return (llvm::jitlink::Section *)llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::clear(v13);
  }
  return this;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::clear(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if (v1)
      {
        uint64_t v2 = *(void **)result;
        uint64_t v3 = 8 * v1;
        do
        {
          *v2++ = -4096;
          v3 -= 8;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
    else
    {
      return llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::shrink_and_clear(result);
    }
  }
  return result;
}

_DWORD *llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::shrink_and_clear(_DWORD *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[4];
  int v3 = result[2];
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *((void *)result + 1) = 0;
    if (v2)
    {
      long long v6 = *(void **)result;
      uint64_t v7 = 8 * v2;
      do
      {
        *v6++ = -4096;
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x263E500A0](*(void *)result, 8);
    return llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::init(v1, v5);
  }
  return result;
}

_DWORD *llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::init(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    __n128 result = operator new(8 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 8 * v5;
      do
      {
        *(void *)__n128 result = -4096;
        result += 2;
        v6 -= 8;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)__n128 result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::erase(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v8 = 0;
  uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a2, &v8, a4);
  if (v5)
  {
    uint64_t v6 = (_OWORD *)v8;
    std::unique_ptr<llvm::jitlink::Section>::reset[abi:nn180100]((llvm::jitlink::Section **)(v8 + 16), 0);
    *uint64_t v6 = xmmword_261E8D420;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v5;
}

void llvm::orc::JITDylib::addGenerator<llvm::orc::DefinitionGenerator>(std::unique_ptr<llvm::orc::DefinitionGenerator>)::{lambda(void)#1}::operator()(void **a1)
{
  uint64_t v1 = *a1;
  std::shared_ptr<llvm::orc::DefinitionGenerator>::shared_ptr[abi:nn180100]<llvm::orc::DefinitionGenerator,std::default_delete<llvm::orc::DefinitionGenerator>,void>((uint64_t *)&v20, a1[1]);
  uint64_t v2 = (_OWORD *)v1[24];
  unint64_t v3 = v1[25];
  if ((unint64_t)v2 >= v3)
  {
    uint64_t v4 = v1[23];
    uint64_t v5 = ((uint64_t)v2 - v4) >> 4;
    unint64_t v6 = v5 + 1;
    if ((unint64_t)(v5 + 1) >> 60) {
      abort();
    }
    uint64_t v7 = v3 - v4;
    if (v7 >> 3 > v6) {
      unint64_t v6 = v7 >> 3;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v8 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v8 = v6;
    }
    uint64_t v24 = v1 + 25;
    uint64_t v9 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(v1 + 25), v8);
    int v11 = &v9[16 * v5];
    *(_OWORD *)int v11 = v20;
    long long v20 = 0uLL;
    long long v13 = (void *)v1[23];
    uint64_t v12 = (void *)v1[24];
    if (v12 == v13)
    {
      int64x2_t v16 = vdupq_n_s64((unint64_t)v12);
      uint64_t v14 = &v9[16 * v5];
    }
    else
    {
      uint64_t v14 = &v9[16 * v5];
      do
      {
        long long v15 = *((_OWORD *)v12 - 1);
        v12 -= 2;
        *((_OWORD *)v14 - 1) = v15;
        v14 -= 16;
        *uint64_t v12 = 0;
        v12[1] = 0;
      }
      while (v12 != v13);
      int64x2_t v16 = *(int64x2_t *)(v1 + 23);
    }
    int v17 = v11 + 16;
    v1[23] = v14;
    v1[24] = v11 + 16;
    int64x2_t v22 = v16;
    uint64_t v18 = v1[25];
    v1[25] = &v9[16 * v10];
    uint64_t v23 = v18;
    uint64_t v21 = v16.i64[0];
    std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((void **)&v21);
    uint64_t v19 = (std::__shared_weak_count *)*((void *)&v20 + 1);
    v1[24] = v17;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v19);
    }
  }
  else
  {
    *uint64_t v2 = v20;
    v1[24] = v2 + 1;
  }
}

uint64_t *std::shared_ptr<llvm::orc::DefinitionGenerator>::shared_ptr[abi:nn180100]<llvm::orc::DefinitionGenerator,std::default_delete<llvm::orc::DefinitionGenerator>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *__n128 result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<llvm::orc::DefinitionGenerator  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t std::__shared_ptr_pointer<llvm::orc::DefinitionGenerator  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<std::tuple<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v5 = a2 + 2;
    uint64_t v4 = *a2;
    if ((uint64_t *)*a2 == a2 + 2)
    {
      uint64_t v7 = a2 + 1;
      unint64_t v8 = *((unsigned int *)a2 + 2);
      uint64_t v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if (v8)
        {
          int v11 = *(void **)a1;
          uint64_t v12 = v4 + 24 * v8;
          do
          {
            void *v11 = *(void *)v4;
            v11[1] = *(void *)(v4 + 8);
            *((unsigned char *)v11 + 16) = *(unsigned char *)(v4 + 16);
            v4 += 24;
            v11 += 3;
          }
          while (v4 != v12);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v8)
        {
          if (v9)
          {
            uint64_t v13 = v4 + 24 * v9;
            uint64_t v14 = *(void **)a1;
            do
            {
              *uint64_t v14 = *(void *)v4;
              v14[1] = *(void *)(v4 + 8);
              *((unsigned char *)v14 + 16) = *(unsigned char *)(v4 + 16);
              v4 += 24;
              v14 += 3;
            }
            while (v4 != v13);
          }
          else
          {
            uint64_t v9 = 0;
          }
          unint64_t v10 = v8;
        }
        else
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 24);
          uint64_t v9 = 0;
          unint64_t v10 = *v7;
        }
        if (v9 != v10) {
          memcpy((void *)(*(void *)a1 + 24 * v9), (const void *)(*a2 + 24 * v9), *a2 + 24 * v10 - (*a2 + 24 * v9));
        }
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      unint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = a2 + 1;
      *(void *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
    }
    *uint64_t v7 = 0;
  }
  return a1;
}

void anonymous namespace'::MachOPlatformCompleteBootstrapMaterializationUnit::~MachOPlatformCompleteBootstrapMaterializationUnit(_anonymous_namespace_::MachOPlatformCompleteBootstrapMaterializationUnit *this)
{
  *(void *)this = &unk_270DBE328;
  uint64_t v5 = (void **)((char *)this + 136);
  std::vector<llvm::orc::shared::AllocActionCallPair>::__destroy_vector::operator()[abi:nn180100](&v5);
  uint64_t v2 = (char *)*((void *)this + 9);
  if (v2 != (char *)this + 88) {
    free(v2);
  }
  uint64_t v3 = *((void *)this + 8);
  if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  *(void *)this = &unk_270DBDAF0;
  uint64_t v4 = *((void *)this + 4);
  if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)this + 1);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  *(void *)this = &unk_270DBE328;
  uint64_t v5 = (void **)((char *)this + 136);
  std::vector<llvm::orc::shared::AllocActionCallPair>::__destroy_vector::operator()[abi:nn180100](&v5);
  uint64_t v2 = (char *)*((void *)this + 9);
  if (v2 != (char *)this + 88) {
    free(v2);
  }
  uint64_t v3 = *((void *)this + 8);
  if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  *(void *)this = &unk_270DBDAF0;
  uint64_t v4 = *((void *)this + 4);
  if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)this + 1);
  MEMORY[0x263E500B0](this, 0x10F1C407EA5DECDLL);
}

const char *anonymous namespace'::MachOPlatformCompleteBootstrapMaterializationUnit::getName(_anonymous_namespace_::MachOPlatformCompleteBootstrapMaterializationUnit *this)
{
  return "MachOPlatformCompleteBootstrap";
}

void anonymous namespace'::MachOPlatformCompleteBootstrapMaterializationUnit::materialize()
{
  __p[79] = *(void **)MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(__p, "<OrcRTCompleteBootstrap>");
}

void llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<>>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[3] = *MEMORY[0x263EF8340];
  int v11 = v13;
  long long v12 = xmmword_261E8A770;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v11, 0);
  uint64_t v4 = v6;
  long long v5 = xmmword_261E8A770;
  if ((void)v12)
  {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v4, (const void **)&v11);
    uint64_t v7 = a1;
    unint64_t v8 = v10;
    long long v9 = xmmword_261E8A770;
    if ((void)v5) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v8, (const void **)&v4);
    }
  }
  else
  {
    uint64_t v7 = a1;
    unint64_t v8 = v10;
    long long v9 = xmmword_261E8A770;
  }
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>(a2, (uint64_t)&v7);
  if (v8 != v10) {
    free(v8);
  }
  if (v4 != v6) {
    free(v4);
  }
  if (v11 != v13) {
    free(v11);
  }
}

void *llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t *a6)
{
  int v11 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 64, 3);
  long long v12 = v11;
  unint64_t v13 = *a5;
  unint64_t v14 = (8 * (__clz(__rbit64(*a5)) & 0x1F)) | 1;
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  uint64_t v17 = *a6;
  void v11[2] = a2;
  v11[3] = 0;
  void v11[4] = v15;
  void v11[5] = 0;
  v11[6] = 0;
  v11[7] = 0;
  if (v13) {
    uint64_t v18 = v14;
  }
  else {
    uint64_t v18 = 1;
  }
  void *v11 = v16;
  v11[1] = v18 | (v17 << 8);
  long long v20 = v11;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a2 + 32, &v20, (uint64_t)v21);
  return v12;
}

void *llvm::detail::UniqueFunctionBase<void,llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long>::CallImpl<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSTuple<BOOL,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSExecutorAddr>>>>> ()(llvm::orc::shared::SPSExecutorAddr),llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSTuple<BOOL,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSExecutorAddr>>>>> ()(llvm::orc::shared::SPSExecutorAddr),llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (llvm::orc::MachOPlatform::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>&&,llvm::orc::ExecutorAddr&&)#1}>(llvm::orc::MachOPlatform&&)::{lambda(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)#1}>(void *a1, long long *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v15, a2);
  if (a4 <= 7)
  {
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Could not deserialize arguments for wrapper function call", (char **)v22);
    if ((v16 & 2) != 0) {
      long long v12 = &v15;
    }
    else {
      long long v12 = (long long *)v15;
    }
    (*(void (**)(long long *, long long *))(v16 & 0xFFFFFFFFFFFFFFF8))(v12, v22);
    if (*((void *)&v22[0] + 1) < 9uLL)
    {
      if (*((void *)&v22[0] + 1)) {
        return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v15);
      }
      unint64_t v13 = *(void **)&v22[0];
      if (!*(void *)&v22[0]) {
        return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v15);
      }
    }
    else
    {
      unint64_t v13 = *(void **)&v22[0];
    }
    free(v13);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v15);
  }
  uint64_t v7 = *a3;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v17, &v15);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v18, v17);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v22, v18);
  uint64_t v19 = operator new(0x20uLL, (std::align_val_t)8uLL);
  long long v20 = xmmword_261E8A760;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v19, v22);
  uint64_t v21 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>>::CallbacksHolder<void llvm::orc::shared::detail::WrapperFunctionAsyncHandlerHelper<void ()(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&,llvm::orc::ExecutorAddr&&),llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>> ()(llvm::orc::shared::SPSSequence)>::ResultSerializer,llvm::orc::shared::SPSSequence>::applyAsync<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&)#1} &,llvm::orc::shared::WrapperFunctionResult>(llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&)#1} &,void (&&)(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long),llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,unsigned long)::{lambda(llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&)#1})#1},void (&)(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long),void>::Callbacks
      + 4;
  unint64_t v8 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v22);
  long long v9 = (void (*)(void *, long long *, uint64_t))a1[1];
  uint64_t v10 = a1[2];
  int v11 = (void *)(*a1 + (v10 >> 1));
  if (v10) {
    long long v9 = *(void (**)(void *, long long *, uint64_t))(*v11 + v9);
  }
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v8, (long long *)&v19);
  v9(v11, v22, v7);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v22);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v19);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v18);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v17);
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v15);
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>>::CallImpl<void llvm::orc::shared::detail::WrapperFunctionAsyncHandlerHelper<void ()(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&,llvm::orc::ExecutorAddr&&),llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>> ()(llvm::orc::shared::SPSSequence)>::ResultSerializer,llvm::orc::shared::SPSSequence>::applyAsync<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&)#1} &,llvm::orc::shared::WrapperFunctionResult>(llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&)#1} &,void (&&)(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long),llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,unsigned long)::{lambda(llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&)#1})#1}>(void *a1, uint64_t *a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  char v3 = *((unsigned char *)a2 + 24);
  char v34 = v3 & 1;
  uint64_t v4 = *a2;
  if (v3)
  {
    *a2 = 0;
    v33[0] = 0;
    char v36 = v3 & 1;
    unint64_t v6 = (char *)&v32 + 1;
    char v38 = v3 & 1;
    v35[0] = 0;
    char v26 = 0;
    long long v28 = 0uLL;
    uint64_t v27 = 0;
    v37[0] = 0;
    *(void *)&long long v32 = v4;
    llvm::toString((uint64_t *)&v32, &__p);
    if ((void)v32) {
      (*(void (**)(void))(*(void *)v32 + 8))(v32);
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 1);
    unint64_t v6 = (char *)&v32 + 1;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    memset(v33, 0, sizeof(v33));
    char v36 = 0;
    char v38 = 0;
    memset(v35, 0, sizeof(v35));
    char v26 = 1;
    uint64_t v27 = v4;
    long long v28 = v5;
    memset(v37, 0, sizeof(v37));
    memset(&__p, 0, sizeof(__p));
  }
  char v7 = v26;
  if (v26)
  {
    uint64_t v8 = v27;
    if (v27 == (void)v28)
    {
      size_t v14 = 9;
      *((void *)&v32 + 1) = 9;
      goto LABEL_20;
    }
    uint64_t v9 = 8;
    do
    {
      uint64_t v11 = *(void *)(v8 + 16);
      uint64_t v10 = *(void *)(v8 + 24);
      if (v11 == v10) {
        unint64_t v12 = 17;
      }
      else {
        unint64_t v12 = ((v10 - v11 - 8) & 0xFFFFFFFFFFFFFFF8) + 25;
      }
      v9 += v12;
      v8 += 40;
    }
    while (v8 != (void)v28);
  }
  else
  {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v9 = size + 8;
  }
  size_t v14 = v9 + 1;
  *(void *)&long long v32 = 0;
  *((void *)&v32 + 1) = v9 + 1;
  if ((unint64_t)(v9 + 1) >= 9)
  {
LABEL_20:
    long long v15 = (long long *)malloc_type_malloc(v14, 0xBCDE199DuLL);
    unint64_t v6 = (char *)v15 + 1;
    *(void *)&long long v32 = v15;
    char v7 = v26;
    goto LABEL_21;
  }
  long long v15 = &v32;
  uint64_t v30 = &v32;
  unint64_t v31 = v9 + 1;
  if (v9 == -1) {
    goto LABEL_31;
  }
LABEL_21:
  *(unsigned char *)long long v15 = v7;
  uint64_t v30 = (long long *)v6;
  unint64_t v31 = v14 - 1;
  if (v26)
  {
    if (v14 - 1 >= 8)
    {
      *(void *)((char *)v15 + 1) = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v28 - v27) >> 3);
      unint64_t v16 = v14 - 9;
      uint64_t v30 = (long long *)((char *)v15 + 9);
      unint64_t v31 = v14 - 9;
      uint64_t v17 = v27;
      uint64_t v18 = v28;
      if (v27 != (void)v28)
      {
        while (v16 >= 8)
        {
          *(void *)uint64_t v30 = *(void *)v17;
          uint64_t v19 = v30;
          BOOL v20 = v31 == 8;
          uint64_t v30 = (long long *)((char *)v30 + 8);
          v31 -= 8;
          if (v20) {
            break;
          }
          *((unsigned char *)v19 + 8) = *(unsigned char *)(v17 + 8);
          uint64_t v30 = (long long *)((char *)v19 + 9);
          --v31;
          uint64_t v21 = v17 + 16;
          if (!llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSExecutorAddr>,std::vector<llvm::orc::ExecutorAddr>,void>::serialize(&v30, (void *)(v17 + 16)))break; {
          uint64_t v17 = v21 + 24;
          }
          if (v21 + 24 == v18) {
            goto LABEL_30;
          }
          unint64_t v16 = v31;
        }
        goto LABEL_31;
      }
LABEL_30:
      *(_OWORD *)long long v25 = v32;
      goto LABEL_35;
    }
  }
  else if (llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::serialize(&v30, (uint64_t)&__p))
  {
    goto LABEL_30;
  }
LABEL_31:
  llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v25);
  if (*((void *)&v32 + 1) > 8uLL || !*((void *)&v32 + 1) && (void)v32) {
    free((void *)v32);
  }
LABEL_35:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v32 = &v27;
  std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v32);
  llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>::~Expected((uint64_t)v37);
  uint64_t v22 = a1[3];
  if ((v22 & 2) == 0) {
    a1 = (void *)*a1;
  }
  (*(void (**)(void *, void **))(v22 & 0xFFFFFFFFFFFFFFF8))(a1, v25);
  if (v25[1] >= (void *)9)
  {
    uint64_t v23 = v25[0];
LABEL_43:
    free(v23);
    goto LABEL_44;
  }
  if (!v25[1])
  {
    uint64_t v23 = v25[0];
    if (v25[0]) {
      goto LABEL_43;
    }
  }
LABEL_44:
  llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>::~Expected((uint64_t)v35);
  return llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>::~Expected((uint64_t)v33);
}

void *llvm::detail::UniqueFunctionBase<void,llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long>::CallImpl<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>> ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,BOOL>>,BOOL),llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>> ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,BOOL>>,BOOL),llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL>(llvm::orc::MachOPlatform *,void (llvm::orc::MachOPlatform::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL))::{lambda(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>&&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)#1}>(llvm::orc::MachOPlatform&&)::{lambda(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)#1}>(void *a1, long long *a2, void *a3, unint64_t a4)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v47, a2);
  if (a4 < 8 || (a4 & 0xFFFFFFFFFFFFFFF8) == 8)
  {
    char v7 = 0;
    goto LABEL_4;
  }
  uint64_t v11 = (void *)*a3;
  unint64_t v12 = a3[1];
  unint64_t v13 = (unsigned __int8 *)(a3 + 2);
  unint64_t v14 = a4 - 16;
  uint64_t v40 = a1;
  unint64_t v41 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_54:
    }
      abort();
    char v7 = (uint64_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v12);
    uint64_t v15 = 0;
    uint64_t v17 = (char *)&v7[3 * v16];
    uint64_t v18 = v7;
    while (1)
    {
      BOOL v19 = v14 >= 8;
      unint64_t v20 = v14 - 8;
      if (!v19) {
        break;
      }
      uint64_t v21 = *(void *)v13;
      if (v20 < *(void *)v13) {
        break;
      }
      uint64_t v22 = v13 + 8;
      uint64_t v23 = v21 ? (uint64_t)(v13 + 8) : 0;
      if (v20 == v21) {
        break;
      }
      unint64_t v13 = &v22[v21 + 1];
      unsigned __int8 v24 = v22[v21];
      if (v18 >= (uint64_t *)v17)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (v18 - v7) + 1;
        if (v25 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_54;
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v17 - (char *)v7) >> 3);
        if (2 * v26 > v25) {
          unint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x555555555555555) {
          unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27) {
          unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v27);
        }
        else {
          uint64_t v28 = 0;
        }
        unint64_t v29 = v27 + 8 * (v18 - v7);
        *(void *)unint64_t v29 = v23;
        *(void *)(v29 + 8) = v21;
        *(unsigned char *)(v29 + 16) = v24;
        if (v18 == v7)
        {
          unint64_t v31 = (uint64_t *)(v27 + 8 * (v18 - v7));
        }
        else
        {
          unint64_t v30 = v27 + 8 * (v18 - v7);
          do
          {
            unint64_t v31 = (uint64_t *)(v30 - 24);
            long long v32 = *(_OWORD *)(v18 - 3);
            *(void *)(v30 - 8) = *(v18 - 1);
            *(_OWORD *)(v30 - 24) = v32;
            v18 -= 3;
            v30 -= 24;
          }
          while (v18 != v7);
        }
        uint64_t v17 = (char *)(v27 + 24 * v28);
        uint64_t v18 = (uint64_t *)(v29 + 24);
        if (v7)
        {
          unint64_t v33 = v27 + 24 * v28;
          operator delete(v7);
          uint64_t v17 = (char *)v33;
        }
        char v7 = v31;
      }
      else
      {
        *uint64_t v18 = v23;
        v18[1] = v21;
        *((unsigned char *)v18 + 16) = v24;
        v18 += 3;
      }
      unint64_t v14 = v20 + ~v21;
      if (++v15 == v12)
      {
        if (!v14) {
          break;
        }
        goto LABEL_46;
      }
    }
LABEL_4:
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Could not deserialize arguments for wrapper function call", (char **)&v42);
    if ((v48 & 2) != 0) {
      uint64_t v8 = &v47;
    }
    else {
      uint64_t v8 = (long long *)v47;
    }
    (*(void (**)(long long *, void **))(v48 & 0xFFFFFFFFFFFFFFF8))(v8, &v42);
    if ((unint64_t)__p < 9)
    {
      if (__p || (uint64_t v9 = v42) == 0)
      {
LABEL_12:
        if (v7) {
          operator delete(v7);
        }
        return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v47);
      }
    }
    else
    {
      uint64_t v9 = v42;
    }
    free(v9);
    goto LABEL_12;
  }
  char v7 = 0;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  if (!v14) {
    goto LABEL_4;
  }
LABEL_46:
  int v34 = *v13;
  int8x16_t v35 = v17;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v49, &v47);
  uint64_t v42 = v41;
  std::string __p = v7;
  unint64_t v44 = v18;
  uint64_t v45 = v35;
  char v46 = v34;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v50, v49);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v54, v50);
  unint64_t v51 = operator new(0x20uLL, (std::align_val_t)8uLL);
  long long v52 = xmmword_261E8A760;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v51, v54);
  long long v53 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>>::CallbacksHolder<void llvm::orc::shared::detail::WrapperFunctionAsyncHandlerHelper<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&),llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>> ()(llvm::orc::shared::SPSSequence,void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected,BOOL>>,BOOL)>::ResultSerializer,llvm::orc::shared::SPSSequence,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>,BOOL>::applyAsync<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL>(llvm::orc::MachOPlatform *,void (char const*::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL))::{lambda(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,std::vector<std::pair<llvm::StringRef,BOOL>>,std::vector<std::pair<llvm::StringRef,BOOL>> const)#1} &,llvm::orc::ExecutionSession::wrapAsyncWithSPS>(llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL>(llvm::orc::MachOPlatform *,void (char const*::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL))::{lambda(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,std::vector<std::pair<llvm::StringRef,BOOL>>,std::vector<std::pair<llvm::StringRef,BOOL>> const)#1} &,char const*&&,void ()(llvm::orc::shared::WrapperFunctionResult),unsigned long)::{lambda(void (char const*::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL))#1},llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL>(llvm::orc::MachOPlatform *,void (char const*::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL))::{lambda(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,std::vector<std::pair<llvm::StringRef,BOOL>>,std::vector<std::pair<llvm::StringRef,BOOL>> const)#1} &,void>::Callbacks
      + 4;
  char v36 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v54);
  unsigned int v37 = (void (*)(void *, long long *, void *, void **, BOOL))v40[1];
  uint64_t v38 = v40[2];
  uint64_t v39 = (void *)(*v40 + (v38 >> 1));
  if (v38) {
    unsigned int v37 = *(void (**)(void *, long long *, void *, void **, BOOL))(*v39 + v37);
  }
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v36, (long long *)&v51);
  v37(v39, v54, v41, &__p, v34 != 0);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v54);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v51);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v50);
  if (__p)
  {
    unint64_t v44 = __p;
    operator delete(__p);
  }
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v49);
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v47);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(24 * a1);
}

void llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>>::CallImpl<void llvm::orc::shared::detail::WrapperFunctionAsyncHandlerHelper<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&),llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>> ()(llvm::orc::shared::SPSSequence,void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected,BOOL>>,BOOL)>::ResultSerializer,llvm::orc::shared::SPSSequence,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>,BOOL>::applyAsync<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL>(llvm::orc::MachOPlatform *,void (char const*::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL))::{lambda(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,std::vector<std::pair<llvm::StringRef,BOOL>>,std::vector<std::pair<llvm::StringRef,BOOL>> const)#1} &,llvm::orc::ExecutionSession::wrapAsyncWithSPS>(llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL>(llvm::orc::MachOPlatform *,void (char const*::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL))::{lambda(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,std::vector<std::pair<llvm::StringRef,BOOL>>,std::vector<std::pair<llvm::StringRef,BOOL>> const)#1} &,char const*&&,void ()(llvm::orc::shared::WrapperFunctionResult),unsigned long)::{lambda(void (char const*::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL))#1}>(void *a1, uint64_t *a2)
{
  char v3 = *((unsigned char *)a2 + 16);
  uint64_t v4 = *a2;
  if (v3)
  {
    *a2 = 0;
    unint64_t v6 = (size_t *)((char *)&v36 + 1);
    char v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    *(void *)&long long v36 = v4;
    llvm::toString((uint64_t *)&v36, &__p);
    if ((void)v36) {
      (*(void (**)(void))(*(void *)v36 + 8))(v36);
    }
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = a2[1];
    unint64_t v6 = (size_t *)((char *)&v36 + 1);
    char v30 = 1;
    uint64_t v31 = v4;
    uint64_t v32 = v5;
    memset(&__p, 0, sizeof(__p));
  }
  char v7 = v30;
  if (v30)
  {
    if (!v32)
    {
      size_t v13 = 9;
      *((void *)&v36 + 1) = 9;
      goto LABEL_18;
    }
    uint64_t v8 = 32 * v32;
    uint64_t v9 = (uint64_t *)(v31 + 8);
    uint64_t v10 = 8;
    do
    {
      uint64_t v11 = *v9;
      v9 += 4;
      v10 += v11 + 17;
      v8 -= 32;
    }
    while (v8);
  }
  else
  {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v10 = size + 8;
  }
  size_t v13 = v10 + 1;
  *(void *)&long long v36 = 0;
  *((void *)&v36 + 1) = v10 + 1;
  if ((unint64_t)(v10 + 1) >= 9)
  {
LABEL_18:
    unint64_t v14 = (long long *)malloc_type_malloc(v13, 0xBCDE199DuLL);
    unint64_t v6 = (size_t *)((char *)v14 + 1);
    *(void *)&long long v36 = v14;
    char v7 = v30;
    goto LABEL_19;
  }
  unint64_t v14 = &v36;
  int v34 = (size_t *)&v36;
  unint64_t v35 = v10 + 1;
  if (v10 == -1) {
    goto LABEL_35;
  }
LABEL_19:
  *(unsigned char *)unint64_t v14 = v7;
  int v34 = v6;
  unint64_t v35 = v13 - 1;
  if (v30)
  {
    if (v13 - 1 >= 8)
    {
      *(void *)((char *)v14 + 1) = v32;
      uint64_t v15 = (size_t *)((char *)v14 + 9);
      unint64_t v16 = v13 - 9;
      int v34 = (size_t *)((char *)v14 + 9);
      unint64_t v35 = v13 - 9;
      if (v32)
      {
        if (v16 >= 8)
        {
          uint64_t v17 = 32 * v32 - 32;
          uint64_t v18 = v31 + 16;
          do
          {
            BOOL v19 = *(const void **)(v18 - 16);
            size_t v20 = *(void *)(v18 - 8);
            *uint64_t v15 = v20;
            uint64_t v21 = v15 + 1;
            unint64_t v22 = v16 - 8;
            int v34 = v21;
            unint64_t v35 = v16 - 8;
            if (v20)
            {
              BOOL v23 = v22 >= v20;
              v22 -= v20;
              if (!v23) {
                goto LABEL_35;
              }
              memcpy(v21, v19, v20);
              uint64_t v21 = (size_t *)((char *)v21 + v20);
              int v34 = v21;
              unint64_t v35 = v22;
            }
            if (v22 < 8) {
              break;
            }
            size_t *v21 = *(void *)v18;
            unsigned __int8 v24 = v34++;
            unint64_t v35 = v22 - 8;
            if (v22 == 8) {
              break;
            }
            *((unsigned char *)v24 + 8) = *(unsigned char *)(v18 + 8);
            uint64_t v15 = (size_t *)((char *)v24 + 9);
            unint64_t v16 = v22 - 9;
            int v34 = v15;
            unint64_t v35 = v22 - 9;
            if (!v17) {
              goto LABEL_34;
            }
            v17 -= 32;
            v18 += 32;
          }
          while (v16 >= 8);
        }
        goto LABEL_35;
      }
LABEL_34:
      *(_OWORD *)unint64_t v29 = v36;
      goto LABEL_39;
    }
  }
  else if (llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::serialize(&v34, (uint64_t)&__p))
  {
    goto LABEL_34;
  }
LABEL_35:
  llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v29);
  if (*((void *)&v36 + 1) > 8uLL || !*((void *)&v36 + 1) && (void)v36) {
    free((void *)v36);
  }
LABEL_39:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  BOOL v25 = (v3 & 1) == 0 || v4 == 0;
  int v26 = v25;
  if (!v25) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v27 = a1[3];
  if ((v27 & 2) == 0) {
    a1 = (void *)*a1;
  }
  (*(void (**)(void *, void **))(v27 & 0xFFFFFFFFFFFFFFF8))(a1, v29);
  if (v29[1] < (void *)9)
  {
    if (v29[1]) {
      goto LABEL_56;
    }
    uint64_t v28 = v29[0];
    if (!v29[0]) {
      goto LABEL_56;
    }
  }
  else
  {
    uint64_t v28 = v29[0];
  }
  free(v28);
LABEL_56:
  if (!v26)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

void std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 40;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void **)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(void *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    uint64_t v4 = (void **)a1;
    std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>::__destroy_vector::operator()[abi:nn180100](&v4);
  }
  return a1;
}

void *llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<llvm::orc::MachOPlatform::pushInitializersLoop(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>)::$_1>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (long long *)(a1 + 1);
  uint64_t v5 = *a1;
  if (v3)
  {
    char v11 = -1;
    *(void *)&long long v10 = v3;
    uint64_t v6 = a1[4];
    if ((v6 & 2) == 0) {
      uint64_t v4 = *(long long **)v4;
    }
    (*(void (**)(long long *, long long *))(v6 & 0xFFFFFFFFFFFFFFF8))(v4, &v10);
    return (void *)llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>::~Expected((uint64_t)&v10);
  }
  else
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v10, v4);
    uint64_t v8 = (void **)a1[5];
    uint64_t v9 = v8;
    if (v8)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)v8, 1u, memory_order_relaxed);
      llvm::orc::MachOPlatform::pushInitializersLoop(v5, &v10, &v9);
      llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release((atomic_uint *)v8);
    }
    else
    {
      llvm::orc::MachOPlatform::pushInitializersLoop(v5, &v10, &v9);
    }
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v10);
  }
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::MoveImpl<llvm::orc::MachOPlatform::pushInitializersLoop(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>)::$_1>(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  uint64_t result = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (long long *)(a2 + 8));
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *llvm::detail::UniqueFunctionBase<void,llvm::Error>::DestroyImpl<llvm::orc::MachOPlatform::pushInitializersLoop(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>)::$_1>(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 40);
  if (v2) {
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v2);
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallImpl<llvm::orc::MachOPlatform::rt_pushSymbols(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)a1;
  uint64_t v45 = *MEMORY[0x263EF8340];
  char v38 = a2[3] & 1;
  uint64_t v3 = *a2;
  if (!v38)
  {
    v36[0] = *a2;
    uint64_t v4 = a2[1];
    v36[1] = v4;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v5 = *((unsigned int *)a2 + 4);
    int v37 = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    if (!*(unsigned char *)(a1 + 32))
    {
      if (!v4) {
        goto LABEL_46;
      }
      if (v5)
      {
        uint64_t v10 = 24 * v5;
        uint64_t v11 = v3;
        while ((*(void *)v11 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v11 += 24;
          v10 -= 24;
          if (!v10) {
            goto LABEL_46;
          }
        }
      }
      else
      {
        uint64_t v11 = v3;
      }
      uint64_t v12 = v3 + 24 * v5;
      if (v11 == v12)
      {
LABEL_46:
        uint64_t v9 = 0;
        size_t v13 = 0;
        char v33 = 0;
      }
      else
      {
        uint64_t v9 = 0;
        size_t v13 = 0;
        unint64_t v14 = 0;
        uint64_t v15 = *(uint64_t **)v11;
LABEL_23:
        int v16 = (*(unsigned __int8 *)(v11 + 17) >> 4) & 2 | (*(unsigned __int8 *)(v11 + 17) >> 1) & 1;
        uint64_t v19 = *v15;
        uint64_t v18 = v15 + 2;
        uint64_t v17 = v19;
        uint64_t v20 = *(void *)(v11 + 8);
        if ((unint64_t)v13 >= v14)
        {
          uint64_t v21 = (v13 - v9) >> 5;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 59) {
            abort();
          }
          unint64_t v23 = v14 - (void)v9;
          unint64_t v24 = (uint64_t)(v14 - (void)v9) >> 4;
          if (v24 > v22) {
            unint64_t v22 = v24;
          }
          if (v23 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v25 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v22;
          }
          if (v25) {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>(v25);
          }
          else {
            uint64_t v26 = 0;
          }
          unint64_t v27 = v25 + 32 * v21;
          *(void *)unint64_t v27 = v18;
          *(void *)(v27 + 8) = v17;
          *(void *)(v27 + 16) = v20;
          *(unsigned char *)(v27 + 24) = v16;
          if (v13 == v9)
          {
            unint64_t v29 = (char *)(v25 + 32 * v21);
          }
          else
          {
            unint64_t v28 = v25 + 32 * v21;
            do
            {
              unint64_t v29 = (char *)(v28 - 32);
              long long v30 = *((_OWORD *)v13 - 1);
              *(_OWORD *)(v28 - 32) = *((_OWORD *)v13 - 2);
              *(_OWORD *)(v28 - 16) = v30;
              v13 -= 32;
              v28 -= 32;
            }
            while (v13 != v9);
          }
          unint64_t v14 = v25 + 32 * v26;
          size_t v13 = (char *)(v27 + 32);
          if (v9)
          {
            uint64_t v31 = v9;
            unint64_t v32 = v14;
            operator delete(v31);
            unint64_t v14 = v32;
          }
          uint64_t v9 = v29;
        }
        else
        {
          *(void *)size_t v13 = v18;
          *((void *)v13 + 1) = v17;
          *((void *)v13 + 2) = v20;
          v13[24] = v16;
          v13 += 32;
        }
        while (1)
        {
          v11 += 24;
          if (v11 == v12) {
            break;
          }
          uint64_t v15 = *(uint64_t **)v11;
          if ((*(void *)v11 | 8) != 0xFFFFFFFFFFFFFFF8)
          {
            if (v11 != v12) {
              goto LABEL_23;
            }
            break;
          }
        }
        char v33 = v40 & 0xFE;
      }
      char v40 = v33;
      v39[0] = v9;
      v39[1] = (v13 - v9) >> 5;
      uint64_t v34 = v2[3];
      if ((v34 & 2) == 0) {
        uint64_t v2 = (void *)*v2;
      }
      (*(void (**)(void *, void *))(v34 & 0xFFFFFFFFFFFFFFF8))(v2, v39);
      if ((v40 & 1) == 0) {
        goto LABEL_51;
      }
      uint64_t v7 = v39[0];
      v39[0] = 0;
      if (!v7) {
        goto LABEL_51;
      }
      goto LABEL_13;
    }
    v41[0] = 0;
    v41[1] = 0;
    char v42 = 0;
    uint64_t v6 = *(void *)(a1 + 24);
    if ((v6 & 2) == 0) {
      uint64_t v2 = *(void **)a1;
    }
    (*(void (**)(void *, void *))(v6 & 0xFFFFFFFFFFFFFFF8))(v2, v41);
    if ((v42 & 1) == 0) {
      return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v36);
    }
    uint64_t v7 = v41[0];
    v41[0] = 0;
    if (!v7) {
      return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v36);
    }
LABEL_12:
    uint64_t v9 = 0;
LABEL_13:
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
LABEL_51:
    if (v9) {
      operator delete(v9);
    }
    return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v36);
  }
  *a2 = 0;
  v36[0] = 0;
  char v44 = -1;
  uint64_t v43 = v3;
  uint64_t v8 = *(void *)(a1 + 24);
  if ((v8 & 2) == 0) {
    uint64_t v2 = *(void **)a1;
  }
  (*(void (**)(void *, uint64_t *))(v8 & 0xFFFFFFFFFFFFFFF8))(v2, &v43);
  if (v44)
  {
    uint64_t v7 = v43;
    uint64_t v43 = 0;
    if (v7) {
      goto LABEL_12;
    }
  }
  return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v36);
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::MoveImpl<llvm::orc::MachOPlatform::rt_pushSymbols(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t result = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a1, (long long *)a2);
  *(unsigned char *)(result + 32) = *(unsigned char *)(a2 + 32);
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(32 * a1);
}

void llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<unsigned long long> ()(void)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<llvm::orc::shared::SPSExpected<unsigned long long> ()(void),llvm::Expected<unsigned long long> &>(llvm::orc::ExecutorAddr,llvm::Expected<unsigned long long> &)::{lambda(char const*,unsigned long)#1},llvm::Expected<unsigned long long>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8)) {
    *(void *)a2 = 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  llvm::orc::ExecutorProcessControl::callWrapper();
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (std::mutex *)atomic_load((unint64_t *)(*(void *)(*a1 + 72) + 456));
  std::mutex::lock(v4);
  unint64_t v5 = atomic_load((unint64_t *)(*(void *)(v3 + 72) + 456));
  ++*(void *)(v5 + 112);
  *a2 = 0;
  std::mutex::unlock(v4);
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_1>(llvm::jitlink::LinkGraph *this@<X1>, uint64_t *a2@<X0>, void *a3@<X8>)
{
  v67[39] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 72);
  uint64_t v6 = *(uint64_t **)(v5 + 64);
  uint64_t v7 = *v6;
  unint64_t v8 = atomic_load((unint64_t *)(v5 + 456));
  unint64_t v9 = v8 + 144;
  v67[0] = v6 + 2;
  v67[1] = v7;
  uint64_t v10 = *(void **)(v4 + 72);
  uint64_t v11 = (uint64_t *)v10[9];
  uint64_t v12 = *v11;
  v67[2] = v9;
  v67[3] = v11 + 2;
  v67[4] = v12;
  v67[5] = v10 + 10;
  size_t v13 = (uint64_t *)v10[11];
  uint64_t v14 = *v13;
  v67[6] = v13 + 2;
  v67[7] = v14;
  uint64_t v15 = (uint64_t *)v10[17];
  uint64_t v16 = *v15;
  v67[8] = v10 + 12;
  v67[9] = v15 + 2;
  v67[10] = v16;
  v67[11] = v10 + 18;
  uint64_t v17 = (uint64_t *)v10[19];
  uint64_t v18 = *v17;
  v67[12] = v17 + 2;
  v67[13] = v18;
  uint64_t v19 = (uint64_t *)v10[21];
  uint64_t v20 = *v19;
  v67[14] = v10 + 20;
  v67[15] = v19 + 2;
  v67[16] = v20;
  v67[17] = v10 + 22;
  uint64_t v21 = (uint64_t *)v10[23];
  uint64_t v22 = *v21;
  v67[18] = v21 + 2;
  v67[19] = v22;
  unint64_t v23 = (uint64_t *)v10[25];
  uint64_t v24 = *v23;
  v67[20] = v10 + 24;
  v67[21] = v23 + 2;
  v67[22] = v24;
  v67[23] = v10 + 26;
  unint64_t v25 = (uint64_t *)v10[27];
  uint64_t v26 = *v25;
  v67[24] = v25 + 2;
  v67[25] = v26;
  unint64_t v27 = (uint64_t *)v10[29];
  uint64_t v28 = *v27;
  v67[26] = v10 + 28;
  v67[27] = v27 + 2;
  v67[28] = v28;
  v67[29] = v10 + 30;
  unint64_t v29 = (uint64_t *)v10[31];
  uint64_t v30 = *v29;
  v67[30] = v29 + 2;
  v67[31] = v30;
  uint64_t v31 = (uint64_t *)v10[33];
  uint64_t v32 = *v31;
  v67[32] = v10 + 32;
  v67[33] = v31 + 2;
  v67[34] = v32;
  v67[35] = v10 + 34;
  char v33 = (uint64_t *)v10[35];
  uint64_t v34 = *v33;
  v67[36] = v33 + 2;
  v67[37] = v34;
  v67[38] = v10 + 36;
  llvm::jitlink::LinkGraph::defined_symbols(this, v63);
  v61[0] = v63[0];
  v61[1] = v63[1];
  _OWORD v61[2] = v63[2];
  long long v62 = v64;
  uint64_t v35 = v66;
  long long v36 = (uint64_t *)v64;
  uint64_t v56 = v65;
  if (*(void *)&v63[0] != v65 || (void)v62 != v66)
  {
    uint64_t v55 = a3;
    char v37 = 0;
    do
    {
      uint64_t v38 = 0;
      uint64_t v39 = *v36;
      size_t v40 = *(void *)(*v36 + 8);
      do
      {
        if (v40)
        {
          unint64_t v41 = (const void **)&v67[v38];
          if (v40 == v67[v38 + 1])
          {
            char v42 = *(const void **)v39;
            uint64_t v43 = *v41;
            if (!memcmp(*(const void **)v39, *v41, v40))
            {
              char v44 = (void *)v67[v38 + 2];
              if (*v44)
              {
                __int16 v60 = 1283;
                v59[0] = "Duplicate ";
                v59[2] = v43;
                v59[3] = v40;
                v57[0] = v59;
                void v57[2] = " detected during MachOPlatform bootstrap";
                __int16 v58 = 770;
                getErrorErrorCat();
                operator new();
              }
              uint64_t v45 = *(void **)(*(void *)(v4 + 72) + 64);
              BOOL v46 = v40 == *v45 && memcmp(v42, v45 + 2, v40) == 0;
              v37 |= v46;
              *char v44 = (*(void *)(v39 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(v39 + 16);
            }
          }
        }
        v38 += 3;
      }
      while (v38 != 39);
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v61, (uint64_t)v57);
      long long v36 = (uint64_t *)v62;
    }
    while (*(void *)&v61[0] != v56 || (void)v62 != v35);
    a3 = v55;
    if (v37)
    {
      uint64_t v48 = (std::mutex *)(*(void *)(v4 + 72) + 320);
      std::mutex::lock(v48);
      unint64_t v49 = atomic_load((unint64_t *)(*(void *)(v4 + 72) + 456));
      uint64_t v50 = *(void *)(v4 + 72);
      *(void *)&v63[0] = *(void *)(v50 + 16);
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::FindAndConstruct((uint64_t *)(v50 + 384), v63)[1] = *(void *)(v49 + 144);
      unint64_t v51 = *(void **)(v4 + 72);
      uint64_t v52 = v51[2];
      long long v53 = v51 + 51;
      unint64_t v54 = atomic_load(v51 + 57);
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::FindAndConstruct(v53, (void *)(v54 + 144))[1] = v52;
      std::mutex::unlock(v48);
    }
  }
  *a3 = 0;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_2>(llvm::jitlink::LinkGraph *this@<X1>, uint64_t *a2@<X0>, void *a3@<X8>)
{
  v32[7] = *(const void **)MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  uint64_t v5 = (void **)a2[1];
  llvm::jitlink::LinkGraph::defined_symbols(this, v19);
  long long v27 = *(_OWORD *)v19;
  long long v28 = v20;
  long long v29 = v21;
  long long v30 = v22;
  uint64_t v7 = v23;
  unint64_t v8 = v26;
  unint64_t v9 = (const void ***)v22;
  if (v19[0] == v23 && (const void ***)v30 == v26)
  {
LABEL_11:
    unint64_t v9 = v8;
  }
  else
  {
    while (1)
    {
      size_t v10 = (size_t)(*v9)[1];
      uint64_t v11 = *(uint64_t **)(*(void *)(v6 + 72) + 64);
      uint64_t v13 = *v11;
      uint64_t v12 = v11 + 2;
      if (v10 == v13 && (!v10 || !memcmp(**v9, v12, v10))) {
        break;
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)&v27, (uint64_t)&v31);
      unint64_t v9 = (const void ***)v30;
      if ((void *)v27 == v7 && (void)v30 == (void)v8) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v15 = *v5;
  uint64_t v16 = (std::mutex *)(*(void *)(v6 + 72) + 320);
  std::mutex::lock(v16);
  uint64_t v18 = ((unint64_t)(*v9)[3] & 0x1FFFFFFFFFFFFFFLL) + *(void *)(*v9)[2];
  v19[0] = v15;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::FindAndConstruct((uint64_t *)(*(void *)(v6 + 72) + 384), v19)[1] = v18;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::FindAndConstruct((uint64_t *)(*(void *)(v6 + 72) + 408), &v18)[1] = v15;
  uint64_t v17 = (uint64_t *)((char *)this + 256);
  llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSExecutorAddr>,std::string,llvm::orc::ExecutorAddr>(*(void *)(*(void *)(v6 + 72) + 144), (uint64_t)v15 + 8, &v18, (uint64_t)&v31);
  v19[0] = v31;
  v19[1] = &v21;
  long long v20 = xmmword_261E8A770;
  if (v32[1]) {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v19[1], v32);
  }
  llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr>,llvm::orc::ExecutorAddr>(*(void *)(*(void *)(v6 + 72) + 160), &v18, (uint64_t)&v27);
  *((void *)&v22 + 1) = v27;
  unint64_t v23 = v25;
  long long v24 = xmmword_261E8A770;
  if ((void)v28) {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v23, (const void **)&v27 + 1);
  }
  std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100](v17, (uint64_t)v19);
  if (v23 != v25) {
    free(v23);
  }
  if (v19[1] != &v21) {
    free(v19[1]);
  }
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected((uint64_t *)&v27);
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected((uint64_t *)&v31);
  *a3 = 0;
  std::mutex::unlock(v16);
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_3>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, std::mutex *a4@<X8>)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  unint64_t v9 = &llvm::orc::MachOObjCImageInfoSectionName;
  uint64_t SectionByName = llvm::jitlink::LinkGraph::findSectionByName(a2, llvm::orc::MachOObjCImageInfoSectionName, *((uint64_t *)&llvm::orc::MachOObjCImageInfoSectionName + 1), a3);
  uint64_t v105 = v7;
  if (SectionByName)
  {
    uint64_t v12 = SectionByName;
    if (*(_DWORD *)(SectionByName + 40) != 1)
    {
      std::operator+<char>();
      char v37 = std::string::append((std::string *)v109, "__DATA,__objc_imageinfo contains multiple blocks");
      uint64_t v38 = (const char *)v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      unint64_t v112 = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      getErrorErrorCat();
      v114[0] = (void *)3;
      v114[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,std::string,std::error_code>();
    }
    uint64_t v13 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(SectionByName + 32);
    llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, *v13, 0, 0, 0, 1);
    uint64_t v14 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v12 + 32);
    uint64_t v16 = *(void *)(v12 + 32) + 8 * *(unsigned int *)(v12 + 48);
    if ((void *)v16 != v14)
    {
      do
      {
        if (*(void *)(*v14 + 40) != *(void *)(*v14 + 48))
        {
          std::operator+<char>();
          uint64_t v39 = std::string::append(&v108, ", ");
          size_t v40 = (const void *)v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v114 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          unint64_t v115 = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          *(void *)uint64_t v109 = v114;
          *(_OWORD *)&v109[16] = llvm::orc::MachOObjCImageInfoSectionName;
          __int16 v110 = 1284;
          __p[0] = v109;
          unint64_t v112 = " contains references to symbols";
          __int16 v113 = 770;
          getErrorErrorCat();
          operator new();
        }
        while (++v14 != v15)
        {
          if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_9;
          }
        }
        uint64_t v14 = v15;
LABEL_9:
        ;
      }
      while (v14 != (void *)v16);
    }
  }
  unint64_t v106 = a1;
  unint64_t v107 = a4;
  if (*(void *)(v8 + 40))
  {
    uint64_t v17 = 0;
    uint64_t v18 = llvm::orc::MachOInitSectionNames;
    do
    {
      long long v20 = *(const void **)v18;
      uint64_t v19 = *((void *)v18 + 1);
      if (v19 != *((void *)v9 + 1) || v19 && memcmp(*(const void **)v18, *(const void **)v9, *((void *)v18 + 1)))
      {
        uint64_t v21 = llvm::jitlink::LinkGraph::findSectionByName(a2, (uint64_t)v20, v19, v11);
        if (v21)
        {
          uint64_t v22 = v21;
          if (*(_DWORD *)(v21 + 40))
          {
            if (!v17)
            {
              unint64_t v23 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v21 + 32);
              uint64_t v24 = *v23;
              unint64_t v25 = *(uint64_t **)(v8 + 40);
              uint64_t v26 = *v25;
              long long v27 = v9;
              uint64_t v28 = v8;
              uint64_t v29 = *(void *)(*v23 + 32);
              uint64_t v17 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, 40, 3);
              *uint64_t v17 = v25 + 2;
              v17[1] = v26;
              v17[4] = v29;
              uint64_t v8 = v28;
              unint64_t v9 = v27;
              long long v17[2] = v24;
              v17[3] = 0x1000000000000000;
              uint64_t v30 = *(void *)(v24 + 16) + 56;
              *(void *)uint64_t v109 = v17;
              llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v30, v109, (uint64_t)__p);
            }
            uint64_t v31 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v22 + 32);
            uint64_t v33 = *(void *)(v22 + 32) + 8 * *(unsigned int *)(v22 + 48);
            if ((uint64_t *)v33 != v31)
            {
              uint64_t v34 = v31;
              uint64_t v35 = v32;
              do
              {
                if (*v34 != v17[2])
                {
                  long long v36 = llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, *v34, 0, *(void *)(*v34 + 32), 0, 1);
                  llvm::jitlink::Block::addEdge((void *)v17[2], 1, 0, (uint64_t)v36, 0);
                }
                while (++v34 != v35)
                {
                  if ((*v34 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                    goto LABEL_27;
                  }
                }
                uint64_t v34 = v35;
LABEL_27:
                ;
              }
              while (v34 != (uint64_t *)v33);
            }
          }
        }
      }
      ++v18;
    }
    while (v18 != (long long *)&llvm::ProfileSummaryHugeWorkingSetSizeThreshold);
  }
  v107->__m_.__sig = 0;
  unint64_t v41 = (uint64_t *)v106[1];
  uint64_t v42 = llvm::jitlink::LinkGraph::findSectionByName(a2, *(void *)v9, *((void *)v9 + 1), v11);
  if (!v42)
  {
    v107->__m_.__sig = 0;
    return;
  }
  uint64_t v43 = v42;
  char v44 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v42 + 32);
  uint64_t v46 = *(void *)(v43 + 32) + 8 * *(unsigned int *)(v43 + 48);
  if ((void *)v46 == v44)
  {
    __int16 v117 = 1283;
    unint64_t v49 = "Empty ";
    goto LABEL_43;
  }
  long long v47 = v44;
  for (unsigned int i = v44 + 1; i != v45; ++i)
  {
    if ((*i | 0x1000) != 0xFFFFFFFFFFFFF000) {
      goto LABEL_40;
    }
  }
  unsigned int i = v45;
LABEL_40:
  if (i != (void *)v46)
  {
    __int16 v117 = 1283;
    unint64_t v49 = "Multiple blocks in ";
LABEL_43:
    uint64_t v50 = *(const void **)v9;
    uint64_t v51 = *((void *)v9 + 1);
    v114[0] = (void *)v49;
    unint64_t v115 = v50;
    uint64_t v116 = v51;
    *(void *)uint64_t v109 = v114;
    *(void *)&v109[16] = " section in ";
    __int16 v110 = 770;
    goto LABEL_44;
  }
  if (*(_DWORD *)(a2 + 192))
  {
    uint64_t v52 = *(unsigned int *)(a2 + 200);
    if (v52)
    {
      uint64_t v53 = 24 * v52;
      unint64_t v54 = *(void **)(a2 + 184);
      while (*v54 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v54 += 3;
        v53 -= 24;
        if (!v53) {
          goto LABEL_50;
        }
      }
    }
    else
    {
      unint64_t v54 = *(void **)(a2 + 184);
    }
    uint64_t v78 = *(void *)(a2 + 184) + 24 * v52;
LABEL_78:
    if (v54 != (void *)v78)
    {
      uint64_t v79 = v54[2];
      if (v79 != v43)
      {
        uint64_t v80 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v79 + 32);
        uint64_t v82 = *(void *)(v79 + 32) + 8 * *(unsigned int *)(v79 + 48);
        if ((void *)v82 != v80)
        {
          do
          {
            for (uint64_t j = *(void *)(*v80 + 40); j != *(void *)(*v80 + 48); j += 32)
            {
              uint64_t v84 = *(void *)(*(void *)j + 16);
              if ((*(unsigned char *)(v84 + 8) & 1) != 0 && *(void *)(v84 + 16) == v43)
              {
                __int16 v110 = 773;
                uint64_t v87 = *((void *)v9 + 1);
                *(void *)uint64_t v109 = *(void *)v9;
                *(void *)&v109[8] = v87;
                *(void *)&v109[16] = " is referenced within file ";
LABEL_44:
                __p[0] = v109;
                unint64_t v112 = (const char *)(a2 + 96);
                __int16 v113 = 1026;
                getErrorErrorCat();
                operator new();
              }
            }
            while (++v80 != v81)
            {
              if ((*v80 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                goto LABEL_90;
              }
            }
            uint64_t v80 = v81;
LABEL_90:
            ;
          }
          while (v80 != (void *)v82);
        }
      }
      while (1)
      {
        v54 += 3;
        if (v54 == (void *)v78) {
          break;
        }
        if (*v54 < 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_78;
        }
      }
    }
  }
LABEL_50:
  uint64_t v55 = (void *)*v47;
  uint64_t v56 = *(unsigned int **)(*v47 + 24);
  unsigned int v57 = *(_DWORD *)(a2 + 172) - 1;
  unsigned int v59 = *v56;
  unsigned int v58 = v56[1];
  unsigned int v60 = bswap32(v59);
  BOOL v61 = v57 >= 2;
  if (v57 >= 2) {
    unsigned int v62 = v60;
  }
  else {
    unsigned int v62 = v59;
  }
  unsigned int v63 = bswap32(v58);
  if (v61) {
    unsigned int v64 = v63;
  }
  else {
    unsigned int v64 = v58;
  }
  unsigned int v65 = v64 & 0xFFFFFFEF;
  std::mutex::lock((std::mutex *)(v105 + 8));
  uint64_t v66 = *v41;
  uint64_t v67 = *(void *)(v105 + 80);
  __p[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(v67, *(_DWORD *)(v105 + 96), v66, __p)&& __p[0] != (void *)(*(void *)(v105 + 80) + 24 * *(unsigned int *)(v105 + 96)))
  {
    if (*((_DWORD *)__p[0] + 2) != v62)
    {
      std::operator+<char>();
      unint64_t v85 = std::string::append((std::string *)v109, " does not match first registered version");
      int v86 = (const char *)v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      unint64_t v112 = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      getErrorErrorCat();
      v114[0] = (void *)3;
      v114[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,std::string,std::error_code>();
    }
    unsigned int v68 = *((_DWORD *)__p[0] + 3);
    if (v68 != v65)
    {
      int v69 = BYTE1(v68);
      if ((v64 & 0xFFEF) >= 0x100 && (unsigned __int16)*((_DWORD *)__p[0] + 3) >= 0x100u && BYTE1(v68) != BYTE1(v65)
        || ((v88 = (v68 >> 6) & 1, (int v89 = (v64 >> 6) & 1) == 0) ? (v90 = v88 == 0) : (v90 = 1),
            !v90 ? (BOOL v91 = *((unsigned char *)__p[0] + 16) == 0) : (BOOL v91 = 1),
            !v91 || (v68 & 0x10) != 0 && *((unsigned char *)__p[0] + 16)))
      {
        std::operator+<char>();
        unint64_t v92 = std::string::append((std::string *)v109, " does not match first registered flags");
        int v93 = (const char *)v92->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
        unint64_t v112 = v93;
        v92->__r_.__value_.__l.__size_ = 0;
        v92->__r_.__value_.__r.__words[2] = 0;
        v92->__r_.__value_.__r.__words[0] = 0;
        getErrorErrorCat();
        v114[0] = (void *)3;
        v114[1] = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,std::string,std::error_code>();
      }
      if (!*((unsigned char *)__p[0] + 16))
      {
        unsigned int v94 = HIWORD(v68);
        if (HIWORD(v64) >= HIWORD(v68)) {
          unsigned int v95 = HIWORD(v68);
        }
        else {
          unsigned int v95 = HIWORD(v64);
        }
        if (!HIWORD(v64)) {
          unsigned int v95 = v94;
        }
        if (!v94) {
          unsigned int v95 = HIWORD(v64);
        }
        if ((v64 & 0xFFEF) >= 0x100) {
          int v69 = BYTE1(v65);
        }
        if (v88 != v89 || v89 == 0) {
          int v97 = 0;
        }
        else {
          int v97 = 64;
        }
        *((_DWORD *)__p[0] + 3) = (v69 << 8) | (v95 << 16) | v97;
      }
      v107->__m_.__sig = 0;
    }
    unint64_t v98 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v43 + 56);
    uint64_t v100 = *(void *)(v43 + 56) + 8 * *(unsigned int *)(v43 + 72);
    if ((unint64_t *)v100 != v98)
    {
      uint64_t v101 = v98;
      uint64_t v102 = v99;
      do
      {
        unint64_t v103 = (void *)*v101++;
        uint64_t v104 = *(void *)(v103[2] + 16) + 56;
        __p[0] = v103;
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v104, __p);
        while (v101 != v102)
        {
          if ((*v101 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_132;
          }
          ++v101;
        }
        uint64_t v101 = v102;
LABEL_132:
        ;
      }
      while (v101 != (unint64_t *)v100);
    }
    llvm::jitlink::LinkGraph::removeBlock(a2, v55);
    goto LABEL_134;
  }
  uint64_t v70 = v55[4];
  uint64_t v71 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, 40, 3);
  void *v71 = "__llvm_jitlink_macho_objc_imageinfo";
  v71[1] = 35;
  long long v71[2] = v55;
  v71[3] = 0x1400000000000000;
  v71[4] = v70;
  uint64_t v72 = v55[2] + 56;
  *(void *)uint64_t v109 = v71;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v72, v109, (uint64_t)__p);
  llvm::orc::ExecutorProcessControl::intern(*(void *)(*(void *)(*v41 + 32) + 72), (uint64_t *)"__llvm_jitlink_macho_objc_imageinfo", 0x23uLL, (unint64_t **)&v108);
  v114[0] = v108.__r_.__value_.__l.__data_;
  v108.__r_.__value_.__r.__words[0] = 0;
  LOWORD(v114[1]) = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::DenseMap(v109, (uint64_t)v114, 1);
  __p[0] = *(void **)v109;
  __p[1] = *(void **)&v109[8];
  memset(v109, 0, 20);
  LODWORD(v112) = *(_DWORD *)&v109[16];
  llvm::orc::ExecutionSession::OL_defineMaterializing(v41, (int32x2_t *)__p, v107);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)__p);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)v109);
  if ((unint64_t)v114[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)v114[0] + 1, 0xFFFFFFFFFFFFFFFFLL);
  }
  if (v108.__r_.__value_.__r.__words[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v108.__r_.__value_.__r.__words[0] + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  if (v107->__m_.__sig) {
    goto LABEL_135;
  }
  uint64_t v73 = *v41;
  __p[0] = 0;
  char v74 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(*(void *)(v105 + 80), *(_DWORD *)(v105 + 96), v73, __p);
  unint64_t v75 = (uint64_t *)__p[0];
  if ((v74 & 1) == 0)
  {
    int v76 = *(_DWORD *)(v105 + 88);
    unsigned int v77 = *(_DWORD *)(v105 + 96);
    if (4 * v76 + 4 >= 3 * v77)
    {
      v77 *= 2;
    }
    else if (v77 + ~v76 - *(_DWORD *)(v105 + 92) > v77 >> 3)
    {
LABEL_72:
      ++*(_DWORD *)(v105 + 88);
      if (*v75 != -4096) {
        --*(_DWORD *)(v105 + 92);
      }
      uint64_t *v75 = v73;
      v75[1] = 0;
      *((_DWORD *)v75 + 4) = 0;
      goto LABEL_75;
    }
    llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::grow(v105 + 80, v77);
    __p[0] = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(*(void *)(v105 + 80), *(_DWORD *)(v105 + 96), v73, __p);
    unint64_t v75 = (uint64_t *)__p[0];
    goto LABEL_72;
  }
LABEL_75:
  *((_DWORD *)v75 + 2) = v62;
  *((_DWORD *)v75 + 3) = v65;
  *((unsigned char *)v75 + 16) = 0;
LABEL_134:
  v107->__m_.__sig = 0;
LABEL_135:
  std::mutex::unlock((std::mutex *)(v105 + 8));
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_4>@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X3>, void *a3@<X8>)
{
  uint64_t v5 = 0;
  uint64_t v6 = &qword_26B417B18;
  do
  {
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    v6 += 2;
    if (llvm::jitlink::LinkGraph::findSectionByName(a1, v7, v8, a2)) {
      ++v5;
    }
  }
  while (v6 != (uint64_t *)&_MergedGlobals_8);
  char v9 = 0;
  size_t v10 = (uint64_t *)&_MergedGlobals_7;
  do
  {
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    v10 += 2;
    uint64_t result = llvm::jitlink::LinkGraph::findSectionByName(a1, v11, v12, a2);
    if (result) {
      ++v5;
    }
    v9 |= result != 0;
  }
  while (v10 != &qword_26B417B18);
  if (v5) {
    llvm::jitlink::LinkGraph::createSection();
  }
  *a3 = 0;
  return result;
}

void **llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_5>@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  long long v53 = *a1;
  uint64_t result = (void **)llvm::jitlink::LinkGraph::findSectionByName(a2, (uint64_t)"__llvm_jitlink_ObjCRuntimeRegistrationObject", 44, a3);
  if (result)
  {
    int v7 = *(_DWORD *)(a2 + 144);
    if (v7 != 3 && v7 != 38)
    {
      std::operator+<char>();
      getErrorErrorCat();
      uint64_t v60 = 3;
      BOOL v61 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,std::string,std::error_code>();
    }
    uint64_t v52 = a4;
    uint64_t v8 = (void *)*llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(result + 4));
    uint64_t v60 = 0;
    BOOL v61 = 0;
    uint64_t v62 = 0;
    unsigned int v57 = 0;
    unsigned int v58 = 0;
    uint64_t v59 = 0;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v64 = 0u;
    memset(__p, 0, sizeof(__p));
    std::vector<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc,std::allocator<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc>>::push_back[abi:nn180100]((void **)&v57, __p);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v67);
    char v9 = v58;
    size_t v10 = v58 - 112;
    *(_OWORD *)(v58 - 73) = 0u;
    *(_OWORD *)(v9 - 57) = 0u;
    *((_OWORD *)v9 - 3) = 0u;
    *(_OWORD *)(v9 - 89) = 0u;
    strcpy(v9 - 112, "__objc_imageinfo__DATA");
    *((void *)v9 - 9) = 8;
    uint64_t v11 = operator new(0x28uLL, (std::align_val_t)8uLL);
    __p[0] = v11;
    *(_OWORD *)&__p[1] = xmmword_261E8A730;
    void *v11 = a2;
    *(_OWORD *)(v11 + 1) = v53;
    v11[3] = v8;
    void v11[4] = v10;
    __p[3] = llvm::detail::UniqueFunctionBase<void,unsigned long>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::$_2,llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::$_2,void>::Callbacks;
    if (v9 - 32 != (char *)__p)
    {
      uint64_t v12 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)v9 - 4);
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v12, (long long *)__p);
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(__p);
    uint64_t v14 = &qword_26B417B18;
    do
    {
      uint64_t SectionByName = llvm::jitlink::LinkGraph::findSectionByName(a2, *v14, v14[1], v13);
      if (SectionByName)
      {
        uint64_t v16 = (int **)SectionByName;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v64 = 0u;
        memset(__p, 0, sizeof(__p));
        std::vector<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc,std::allocator<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc>>::push_back[abi:nn180100]((void **)&v57, __p);
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v67);
        char v9 = v58;
        llvm::jitlink::SectionRange::SectionRange((unint64_t **)__p, (uint64_t)v16);
        uint64_t v18 = *v16;
        unint64_t v17 = (unint64_t)v16[1];
        *((_OWORD *)v9 - 4) = 0u;
        *((_OWORD *)v9 - 3) = 0u;
        *((_OWORD *)v9 - 6) = 0u;
        *((_OWORD *)v9 - 5) = 0u;
        *((_OWORD *)v9 - 7) = 0u;
        size_t v19 = v17 - 7;
        if (v17 >= 7) {
          unint64_t v17 = 7;
        }
        memcpy(v9 - 112, (char *)v18 + v17, v19);
        int v20 = *v18;
        *((_WORD *)v9 - 46) = *((_WORD *)v18 + 2);
        *((_DWORD *)v9 - 24) = v20;
        uint64_t v21 = __p[0];
        if (__p[0]) {
          uint64_t v22 = *(void *)__p[0];
        }
        else {
          uint64_t v22 = 0;
        }
        *((void *)v9 - 10) = v22 - *v8;
        unint64_t v23 = __p[1];
        if (__p[1]) {
          unint64_t v23 = (unsigned char *)(*((void *)__p[1] + 4) + *(void *)__p[1]);
        }
        if (v21) {
          uint64_t v21 = (void *)*v21;
        }
        *((void *)v9 - 9) = v23 - (unsigned char *)v21;
        *((_DWORD *)v9 - 12) = 0;
      }
      v14 += 2;
    }
    while (v14 != (uint64_t *)&_MergedGlobals_8);
    uint64_t v24 = 0;
    unint64_t v25 = (uint64_t *)&_MergedGlobals_7;
    do
    {
      uint64_t v26 = llvm::jitlink::LinkGraph::findSectionByName(a2, *v25, v25[1], v13);
      if (v26)
      {
        long long v27 = (int **)v26;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v64 = 0u;
        memset(__p, 0, sizeof(__p));
        std::vector<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc,std::allocator<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc>>::push_back[abi:nn180100]((void **)&v60, __p);
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v67);
        uint64_t v24 = v61;
        llvm::jitlink::SectionRange::SectionRange((unint64_t **)__p, (uint64_t)v27);
        uint64_t v29 = *v27;
        unint64_t v28 = (unint64_t)v27[1];
        *((_OWORD *)v24 - 4) = 0u;
        *((_OWORD *)v24 - 3) = 0u;
        *((_OWORD *)v24 - 6) = 0u;
        *((_OWORD *)v24 - 5) = 0u;
        *((_OWORD *)v24 - 7) = 0u;
        size_t v30 = v28 - 7;
        if (v28 >= 7) {
          unint64_t v28 = 7;
        }
        memcpy(v24 - 14, (char *)v29 + v28, v30);
        int v31 = *v29;
        *((_WORD *)v24 - 46) = *((_WORD *)v29 + 2);
        *((_DWORD *)v24 - 24) = v31;
        uint64_t v32 = __p[0];
        if (__p[0]) {
          uint64_t v33 = *(void *)__p[0];
        }
        else {
          uint64_t v33 = 0;
        }
        *(v24 - 10) = (void (*)(_anonymous_namespace_::ErrorErrorCategory *__hidden))(v33 - *v8);
        uint64_t v34 = __p[1];
        if (__p[1]) {
          uint64_t v34 = (unsigned char *)(*((void *)__p[1] + 4) + *(void *)__p[1]);
        }
        if (v32) {
          uint64_t v32 = (void *)*v32;
        }
        *(v24 - 9) = (void (*)(_anonymous_namespace_::ErrorErrorCategory *__hidden))(v34 - (unsigned char *)v32);
        *((_DWORD *)v24 - 12) = 0;
      }
      v25 += 2;
    }
    while (v25 != &qword_26B417B18);
    if (*(_DWORD *)(a2 + 144) == 3) {
      unsigned int v35 = 0;
    }
    else {
      unsigned int v35 = 3;
    }
    if (*(_DWORD *)(a2 + 144) == 3) {
      unsigned int v36 = 16777228;
    }
    else {
      unsigned int v36 = 16777223;
    }
    uint64_t v37 = v60;
    if (v24 == (void (**)(_anonymous_namespace_::ErrorErrorCategory *__hidden))v60) {
      int v38 = 1;
    }
    else {
      int v38 = 2;
    }
    int v39 = 72 << (v24 != (void (**)(_anonymous_namespace_::ErrorErrorCategory *__hidden))v60);
    size_t v40 = v57;
    int v41 = -1227133513 * (((unint64_t)v24 - v60) >> 4) - 1227133513 * ((unint64_t)(v9 - v57) >> 4);
    uint64_t v42 = v8[3];
    uint64_t v43 = v8[4];
    v56[0] = v42;
    v56[1] = v43;
    v54[0] = a2;
    v54[1] = &v55;
    __p[0] = v54;
    __p[1] = &v55;
    __p[2] = v56;
    *(void *)&double v44 = v35 | 0x600000000;
    BOOL v45 = *(_DWORD *)(a2 + 172) == 1;
    unsigned int v46 = bswap32(v36);
    HIDWORD(v47) = 100663296;
    LODWORD(v47) = v35 << 24;
    if (*(_DWORD *)(a2 + 172) == 1)
    {
      int v48 = -17958193;
    }
    else
    {
      unsigned int v36 = v46;
      int v48 = -805638658;
    }
    *(_DWORD *)uint64_t v42 = v48;
    *(_DWORD *)(v42 + 4) = v36;
    unsigned int v49 = v39 + 80 * v41;
    int v50 = v38 << 24;
    if (!v45) {
      double v44 = v47;
    }
    *(double *)(v42 + 8) = v44;
    unsigned int v51 = bswap32(v49);
    if (v45) {
      int v50 = v38;
    }
    else {
      unsigned int v49 = v51;
    }
    *(_DWORD *)(v42 + 16) = v50;
    *(_DWORD *)(v42 + 20) = v49;
    *(void *)(v42 + 24) = 0;
    uint64_t v55 = v42 + 32;
    if ((void (**)(_anonymous_namespace_::ErrorErrorCategory *__hidden))v37 != v24) {
      llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::$_3::operator()((void **)__p, "__TEXT", 6uLL, (long long **)&v60);
    }
    if (v40 != v9) {
      llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::$_3::operator()((void **)__p, "__DATA", 6uLL, (long long **)&v57);
    }
    *uint64_t v52 = 0;
    std::vector<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc,std::allocator<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc>>::~vector[abi:nn180100]((void **)&v57);
    return std::vector<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc,std::allocator<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc>>::~vector[abi:nn180100]((void **)&v60);
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_6>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  int v7 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 208);
  uint64_t v10 = *(void *)(a2 + 208) + 8 * *(unsigned int *)(a2 + 224);
  if ((void *)v10 != v7)
  {
    while (1)
    {
      uint64_t v11 = (void *)*v7;
      if (*(void *)(*v7 + 8) == 15
        && *(void *)*v11 == 0x6F625F766C745F5FLL
        && *(void *)(*v11 + 7) == 0x7061727473746F6FLL)
      {
        break;
      }
      while (++v7 != v8)
      {
        if ((*v7 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_11;
        }
      }
      int v7 = v8;
LABEL_11:
      if (v7 == (void *)v10) {
        goto LABEL_14;
      }
    }
    void *v11 = "___orc_rt_macho_tlv_get_addr";
    v11[1] = 28;
  }
LABEL_14:
  uint64_t SectionByName = llvm::jitlink::LinkGraph::findSectionByName(a2, (uint64_t)llvm::orc::MachOThreadVarsSectionName, unk_26A955C70, v9);
  if (SectionByName)
  {
    uint64_t v14 = SectionByName;
    uint64_t v15 = (std::mutex *)(*(void *)(v5 + 72) + 320);
    std::mutex::lock(v15);
    uint64_t v16 = *(void *)(v5 + 72);
    *(void *)&long long v51 = v6;
    *(void *)&long long v44 = 0;
    int v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v16 + 432), &v51, &v44);
    uint64_t v18 = v44;
    if (!v17) {
      uint64_t v18 = *(void *)(v16 + 432) + 16 * *(unsigned int *)(v16 + 448);
    }
    if (v18 == *(void *)(*(void *)(v5 + 72) + 432) + 16 * *(unsigned int *)(*(void *)(v5 + 72) + 448))
    {
      std::mutex::unlock(v15);
      uint64_t v39 = *(void *)(v5 + 72);
      uint64_t v40 = *(void *)(v39 + 256);
      if (v40)
      {
        BYTE8(v51) = 0;
        *(void *)&long long v51 = 0;
        *(void *)&long long v44 = *(void *)(*(void *)(v39 + 8) + 72);
        *((void *)&v44 + 1) = v40;
        llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<unsigned long long> ()(void)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<llvm::orc::shared::SPSExpected<unsigned long long> ()(void),llvm::Expected<unsigned long long> &>(llvm::orc::ExecutorAddr,llvm::Expected<unsigned long long> &)::{lambda(char const*,unsigned long)#1},llvm::Expected<unsigned long long>>((uint64_t)&v44, (uint64_t)&v51);
      }
      getErrorErrorCat();
      *(void *)&long long v44 = 3;
      *((void *)&v44 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
    }
    unint64_t v19 = *(void *)(v18 + 8);
    std::mutex::unlock(v15);
    unint64_t v20 = bswap64(v19);
    unint64_t v21 = (*(_DWORD *)(a2 + 172) - 1) >= 2 ? v20 : v19;
    unint64_t __src = v21;
    uint64_t v22 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v14 + 32);
    uint64_t v24 = *(void *)(v14 + 32) + 8 * *(unsigned int *)(v14 + 48);
    if ((void *)v24 != v22)
    {
      unint64_t v25 = v22;
      uint64_t v26 = v23;
      do
      {
        long long v27 = (uint64_t *)*v25;
        uint64_t v28 = *(void *)(*v25 + 32);
        if (v28 != 3 * *(_DWORD *)(a2 + 168))
        {
          uint64_t v41 = *v27;
          *(void *)&long long v44 = "{0:x}";
          *((void *)&v44 + 1) = 5;
          *(void *)&long long v45 = &v47;
          *((void *)&v45 + 1) = 1;
          *(void *)&long long v46 = &unk_270DBE460;
          *((void *)&v46 + 1) = v41;
          *(void *)&long long v47 = &v46;
          v42[0] = "__thread_vars block at ";
          long long v42[2] = &v44;
          __int16 v43 = 1539;
          *(void *)&long long v51 = v42;
          *(void *)&long long v52 = " has unexpected size";
          LOWORD(v53) = 770;
          getErrorErrorCat();
          operator new();
        }
        uint64_t v29 = (char *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, *(void *)(*v25 + 32), 0);
        size_t v30 = v29;
        size_t v31 = v27[4];
        if (v31) {
          memmove(v29, (const void *)v27[3], v31);
        }
        memcpy(&v30[*(unsigned int *)(a2 + 168)], &__src, *(unsigned int *)(a2 + 168));
        v27[3] = (uint64_t)v30;
        v27[4] = v28;
        v27[1] &= ~4uLL;
        while (++v25 != v26)
        {
          if ((*v25 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_31;
          }
        }
        unint64_t v25 = v26;
LABEL_31:
        ;
      }
      while (v25 != (void *)v24);
    }
  }
  llvm::jitlink::LinkGraph::blocks((llvm::jitlink::LinkGraph *)a2, &v44);
  long long v51 = v44;
  long long v52 = v45;
  long long v53 = v46;
  long long v54 = v47;
  uint64_t v32 = v48;
  uint64_t v33 = v49;
  uint64_t v34 = (uint64_t *)v47;
  if ((void)v44 != v48 || (void)v47 != v49)
  {
    do
    {
      uint64_t v35 = *v34;
      uint64_t v36 = *(void *)(*v34 + 40);
      for (uint64_t i = *(void *)(v35 + 48); v36 != i; v36 += 32)
      {
        if (*(unsigned char *)(v36 + 24) == 24) {
          *(unsigned char *)(v36 + 24) = 20;
        }
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)&v51, (uint64_t)v42);
      uint64_t v34 = (uint64_t *)v54;
    }
    while ((void)v51 != v32 || (void)v54 != v33);
  }
  *a3 = 0;
}

void std::__shared_ptr_emplace<llvm::SmallVector<llvm::orc::MachOPlatform::MachOPlatformPlugin::SymbolTablePair,3u>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBE368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::SmallVector<llvm::orc::MachOPlatform::MachOPlatformPlugin::SymbolTablePair,3u>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBE368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

void std::__shared_ptr_emplace<llvm::SmallVector<llvm::orc::MachOPlatform::MachOPlatformPlugin::SymbolTablePair,3u>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40)) {
    free(v2);
  }
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_7>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, void *a4@<X8>)
{
  v55[6] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t SectionByName = llvm::jitlink::LinkGraph::findSectionByName(a2, (uint64_t)llvm::orc::MachOCStringSectionName, unk_26A955AE0, a3);
  if (!SectionByName) {
    llvm::jitlink::LinkGraph::createSection();
  }
  v50[0] = 0;
  v50[1] = 0;
  unsigned int v51 = 0;
  int v7 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(SectionByName + 56);
  uint64_t v10 = *(void *)(SectionByName + 56) + 8 * *(unsigned int *)(SectionByName + 72);
  if ((uint64_t *)v10 != v7)
  {
    uint64_t v11 = v7;
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      uint64_t v14 = *(void *)(v13 + 16);
      uint64_t v16 = *(void *)(v14 + 24);
      uint64_t v15 = *(void *)(v14 + 32);
      *(void *)&long long v45 = v16;
      *((void *)&v45 + 1) = v15;
      *(void *)&v46[0] = v13;
      llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)v50, &v45, v46, v9, (uint64_t)&v53);
      while (v11 != v12)
      {
        if ((*v11 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_10;
        }
        ++v11;
      }
      uint64_t v11 = v12;
LABEL_10:
      ;
    }
    while (v11 != (uint64_t *)v10);
  }
  long long v53 = (char *)v55;
  uint64_t v54 = 0x600000000;
  llvm::jitlink::LinkGraph::defined_symbols((llvm::jitlink::LinkGraph *)a2, &v45);
  v43[0] = v45;
  v43[1] = v46[0];
  long long v43[2] = v46[1];
  long long v44 = v47;
  uint64_t v17 = v48;
  uint64_t v18 = v49;
  unint64_t v19 = (uint64_t *)v47;
  if ((void)v45 != v48 || (void)v47 != v49)
  {
    do
    {
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v53, *v19);
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v43, (uint64_t)v42);
      unint64_t v19 = (uint64_t *)v44;
    }
    while (*(void *)&v43[0] != v17 || (void)v44 != v18);
  }
  unint64_t v21 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 232);
  uint64_t v24 = *(void *)(a2 + 232) + 8 * *(unsigned int *)(a2 + 248);
  if ((uint64_t *)v24 != v21)
  {
    unint64_t v25 = v21;
    uint64_t v26 = v22;
    do
    {
      uint64_t v27 = *v25++;
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v53, v27);
      while (v25 != v26)
      {
        if ((*v25 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_25;
        }
        ++v25;
      }
      unint64_t v25 = v26;
LABEL_25:
      ;
    }
    while (v25 != (uint64_t *)v24);
  }
  uint64_t v28 = v53;
  if (v54)
  {
    uint64_t v29 = 8 * v54;
    do
    {
      size_t v30 = *(void **)v28;
      uint64_t v31 = *(void *)(*(void *)v28 + 8);
      if (v31)
      {
        *(void *)&long long v45 = *v30;
        *((void *)&v45 + 1) = v31;
        *(void *)&v43[0] = 0;
        if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v50, (uint64_t)&v45, v43, v23)|| *(void *)&v43[0] == v50[0] + 24 * v51)
        {
          uint64_t v34 = (const void *)*v30;
          size_t v33 = v30[1];
          uint64_t v35 = (unsigned char *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, v33 + 1, 0);
          uint64_t v36 = v35;
          if (v33) {
            memmove(v35, v34, v33);
          }
          v36[v33] = 0;
          *(void *)&long long v45 = v36;
          *((void *)&v45 + 1) = v33 + 1;
          *(void *)&v43[0] = 0;
          v42[0] = 1;
          uint64_t v52 = 0;
          uint64_t v37 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::MutableArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, SectionByName, (uint64_t *)&v45, (uint64_t *)v43, v42, &v52);
          uint64_t v32 = llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v37, 0, v37[4], 0, 1);
        }
        else
        {
          uint64_t v32 = *(void **)(*(void *)&v43[0] + 16);
        }
        unint64_t v38 = *(unsigned int *)(v5 + 8);
        if (v38 >= *(unsigned int *)(v5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v38 + 1, 16);
          unint64_t v38 = *(unsigned int *)(v5 + 8);
        }
        uint64_t v39 = (void *)(*(void *)v5 + 16 * v38);
        void *v39 = v30;
        v39[1] = v32;
        ++*(_DWORD *)(v5 + 8);
      }
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    uint64_t v28 = v53;
  }
  if (v28 != (char *)v55) {
    free(v28);
  }
  *a4 = 0;
  return MEMORY[0x263E500A0](v50[0], 8);
}

__n128 llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::MoveImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_7>(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::DestroyImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_7>(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_8>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v51[6] = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  uint64_t v6 = (void **)a1[1];
  int v7 = (uint64_t *)a1[2];
  int v8 = *((unsigned __int8 *)a1 + 32);
  char v9 = (std::mutex *)(*(void *)(*a1 + 72) + 320);
  std::mutex::lock(v9);
  uint64_t v10 = *(void *)(v5 + 72);
  uint64_t v49 = (char *)*v6;
  uint64_t v42 = 0;
  int v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v10 + 384), &v49, &v42);
  uint64_t v12 = v42;
  if (!v11) {
    uint64_t v12 = *(void *)(v10 + 384) + 16 * *(unsigned int *)(v10 + 400);
  }
  uint64_t v37 = *(void *)(v12 + 8);
  std::mutex::unlock(v9);
  if (v8)
  {
    unint64_t v25 = (std::mutex *)atomic_load((unint64_t *)(*(void *)(v5 + 72) + 456));
    std::mutex::lock(v25);
    unint64_t v26 = atomic_load((unint64_t *)(*(void *)(v5 + 72) + 456));
    uint64_t v27 = *((unsigned int *)v7 + 2);
    if (v27)
    {
      uint64_t v28 = 16 * v27;
      uint64_t v29 = *v7 + 8;
      do
      {
        uint64_t v30 = *(void *)(v29 - 8);
        uint64_t v32 = *(void **)(v30 + 16);
        unint64_t v31 = *(void *)(v30 + 24);
        size_t v33 = (void *)((v31 & 0x1FFFFFFFFFFFFFFLL) + *v32);
        uint64_t v42 = (*(void *)(*(void *)v29 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(*(void *)v29 + 16);
        __int16 v43 = v33;
        LOBYTE(v44) = (v31 >> 60) & 2 | ((v31 & 0x200000000000000) != 0);
        unint64_t v34 = llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,true>>(v26 + 152, (unint64_t)&v42);
        uint64_t v35 = *(void *)(v26 + 152) + 24 * *(unsigned int *)(v26 + 160);
        long long v36 = *(_OWORD *)v34;
        *(void *)(v35 + 16) = *(void *)(v34 + 16);
        *(_OWORD *)uint64_t v35 = v36;
        ++*(_DWORD *)(v26 + 160);
        v29 += 16;
        v28 -= 16;
      }
      while (v28);
    }
    *a3 = 0;
    std::mutex::unlock(v25);
  }
  else
  {
    uint64_t v49 = (char *)v51;
    uint64_t v50 = 0x200000000;
    uint64_t v13 = *((unsigned int *)v7 + 2);
    if (v13)
    {
      uint64_t v14 = *v7;
      uint64_t v15 = 16 * v13;
      uint64_t v16 = v14 + 8;
      do
      {
        uint64_t v17 = *(void *)(v16 - 8);
        unint64_t v19 = *(void **)(v17 + 16);
        unint64_t v18 = *(void *)(v17 + 24);
        unint64_t v20 = (void *)((v18 & 0x1FFFFFFFFFFFFFFLL) + *v19);
        uint64_t v42 = (*(void *)(*(void *)v16 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(*(void *)v16 + 16);
        __int16 v43 = v20;
        LOBYTE(v44) = (v18 >> 60) & 2 | ((v18 & 0x200000000000000) != 0);
        unint64_t v21 = llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,true>>((uint64_t)&v49, (unint64_t)&v42);
        uint64_t v22 = &v49[24 * v50];
        long long v23 = *(_OWORD *)v21;
        *((void *)v22 + 2) = *(void *)(v21 + 16);
        *(_OWORD *)uint64_t v22 = v23;
        LODWORD(v50) = v50 + 1;
        v16 += 16;
        v15 -= 16;
      }
      while (v15);
    }
    uint64_t v24 = (uint64_t *)(a2 + 256);
    llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::ExecutorAddr,llvm::SmallVector<std::tuple<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>,2u>>((uint64_t)&v40, *(void *)(*(void *)(v5 + 72) + 176), &v37, (uint64_t *)&v49);
    uint64_t v42 = v40;
    __int16 v43 = v45;
    long long v44 = xmmword_261E8A770;
    if (v41[1]) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v43, v41);
    }
    llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::ExecutorAddr,llvm::SmallVector<std::tuple<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>,2u>>((uint64_t)&v38, *(void *)(*(void *)(v5 + 72) + 192), &v37, (uint64_t *)&v49);
    v45[3] = v38;
    long long v46 = v48;
    long long v47 = xmmword_261E8A770;
    if (v39[1]) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v46, v39);
    }
    std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100](v24, (uint64_t)&v42);
    if (v46 != v48) {
      free(v46);
    }
    if (v43 != v45) {
      free(v43);
    }
    llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected(&v38);
    llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected(&v40);
    *a3 = 0;
    if (v49 != (char *)v51) {
      free(v49);
    }
  }
}

__n128 llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::MoveImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_8>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 16) = result;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::DestroyImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_8>(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_9>(uint64_t *a1@<X0>, llvm::jitlink::Section *a2@<X1>, unint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  uint64_t v52 = (char *)a1[1];
  int v51 = *((unsigned __int8 *)a1 + 16);
  uint64_t SectionByName = (llvm::jitlink::Section *)llvm::jitlink::LinkGraph::findSectionByName((uint64_t)a2, llvm::orc::MachOThreadDataSectionName, *((uint64_t *)&llvm::orc::MachOThreadDataSectionName + 1), a3);
  int v8 = (llvm::jitlink::Section *)llvm::jitlink::LinkGraph::findSectionByName((uint64_t)a2, (uint64_t)llvm::orc::MachOThreadBSSSectionName, unk_26A955C50, v7);
  if (v8)
  {
    if (SectionByName) {
      llvm::jitlink::LinkGraph::mergeSections(a2, SectionByName, v8, 0);
    }
    else {
      uint64_t SectionByName = v8;
    }
  }
  uint64_t v10 = 0;
  long long v68 = v70;
  uint64_t v69 = 0x800000000;
  v67[0] = llvm::orc::MachODataDataSectionName;
  v67[1] = llvm::orc::MachODataCommonSectionName;
  v67[2] = llvm::orc::MachOEHFrameSectionName;
  do
  {
    uint64_t v11 = llvm::jitlink::LinkGraph::findSectionByName((uint64_t)a2, *(void *)&v67[v10], *((void *)&v67[v10] + 1), v9);
    if (v11)
    {
      llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v60, v11);
      if (v60)
      {
        uint64_t v12 = v61;
        if (v61) {
          uint64_t v12 = *(void *)(v61 + 32) + *(void *)v61;
        }
        uint64_t v13 = *(void *)v60;
        *(_OWORD *)uint64_t v55 = v67[v10];
        *(void *)&long long v56 = v13;
        *((void *)&v56 + 1) = v12;
        uint64_t v14 = (_OWORD *)llvm::SmallVectorTemplateCommon<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,true>>((uint64_t)&v68, (unint64_t)v55);
        uint64_t v15 = (char *)v68 + 32 * v69;
        long long v16 = v14[1];
        *uint64_t v15 = *v14;
        v15[1] = v16;
        LODWORD(v69) = v69 + 1;
      }
    }
    ++v10;
  }
  while (v10 != 3);
  if (SectionByName)
  {
    llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v60, (uint64_t)SectionByName);
    if (v60)
    {
      uint64_t v17 = *(void *)v60;
      uint64_t v18 = v61;
      if (v61) {
        uint64_t v18 = *(void *)(v61 + 32) + *(void *)v61;
      }
      *(_OWORD *)uint64_t v55 = llvm::orc::MachOThreadDataSectionName;
      *(void *)&long long v56 = v17;
      *((void *)&v56 + 1) = v18;
      unint64_t v19 = (_OWORD *)llvm::SmallVectorTemplateCommon<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,true>>((uint64_t)&v68, (unint64_t)v55);
      unint64_t v20 = (char *)v68 + 32 * v69;
      long long v21 = v19[1];
      *unint64_t v20 = *v19;
      v20[1] = v21;
      LODWORD(v69) = v69 + 1;
    }
  }
  char v22 = 0;
  v66[0] = llvm::orc::MachOModInitFuncSectionName;
  uint64_t v23 = 1;
  uint64_t v24 = (uint64_t *)v66;
  do
  {
    char v25 = v22;
    uint64_t v26 = llvm::jitlink::LinkGraph::findSectionByName((uint64_t)a2, *v24, v24[1], v9);
    if (v26)
    {
      llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v60, v26);
      if (v60)
      {
        uint64_t v27 = v61;
        if (v61) {
          uint64_t v27 = *(void *)(v61 + 32) + *(void *)v61;
        }
        uint64_t v28 = *(void *)v60;
        *(_OWORD *)uint64_t v55 = *(_OWORD *)v24;
        *(void *)&long long v56 = v28;
        *((void *)&v56 + 1) = v27;
        uint64_t v29 = (_OWORD *)llvm::SmallVectorTemplateCommon<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,true>>((uint64_t)&v68, (unint64_t)v55);
        uint64_t v30 = (char *)v68 + 32 * v69;
        long long v31 = v29[1];
        *uint64_t v30 = *v29;
        v30[1] = v31;
        LODWORD(v69) = v69 + 1;
      }
    }
    uint64_t v24 = (uint64_t *)&v66[v23];
    char v22 = 1;
    uint64_t v23 = 2;
  }
  while ((v25 & 1) == 0);
  LOBYTE(v60) = 0;
  unsigned __int8 v65 = 0;
  char v74 = (char *)v76;
  uint64_t v75 = 0x300000000;
  long long v77 = 0u;
  long long v78 = 0u;
  uint64_t v71 = v73;
  uint64_t v72 = 0x600000000;
  uint64_t v54 = &v71;
  uint64_t v32 = llvm::jitlink::LinkGraph::findSectionByName((uint64_t)a2, llvm::orc::MachOEHFrameSectionName, *((uint64_t *)&llvm::orc::MachOEHFrameSectionName + 1), v9);
  if (v32) {
    llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_0::operator()((uint64_t *)&v54, v32, (unint64_t *)&v77);
  }
  uint64_t v34 = llvm::jitlink::LinkGraph::findSectionByName((uint64_t)a2, (uint64_t)llvm::orc::MachOCompactUnwindInfoSectionName, unk_26A955AD0, v33);
  if (v34) {
    llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_0::operator()((uint64_t *)&v54, v34, (unint64_t *)&v78);
  }
  char v35 = v72;
  if (v72)
  {
    std::__introsort<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **,false>((unint64_t **)v71, (unint64_t **)v71 + v72, 126 - 2 * __clz(v72), 1);
    unsigned int v36 = v75;
    if (v72)
    {
      uint64_t v37 = (uint64_t **)v71;
      uint64_t v38 = 8 * v72;
      do
      {
        uint64_t v39 = *v37;
        uint64_t v40 = **v37;
        if (v36 && (uint64_t v41 = &v74[16 * v36], *((void *)v41 - 1) == v40))
        {
          *((void *)v41 - 1) = v39[4] + v40;
        }
        else
        {
          uint64_t v42 = v39[4];
          if (v36 >= HIDWORD(v75))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, v36 + 1, 16);
            unsigned int v36 = v75;
          }
          __int16 v43 = &v74[16 * v36];
          *(void *)__int16 v43 = v40;
          *((void *)v43 + 1) = v42 + v40;
          unsigned int v36 = v75 + 1;
          LODWORD(v75) = v75 + 1;
        }
        ++v37;
        v38 -= 8;
      }
      while (v38);
    }
    v55[0] = &v56;
    v55[1] = (void *)0x300000000;
    if (v36) {
      llvm::SmallVectorImpl<llvm::orc::ExecutorAddrRange>::operator=((uint64_t)v55, (uint64_t)&v74);
    }
    *(_OWORD *)unsigned int v58 = v77;
    *(_OWORD *)&v58[16] = v78;
    char v35 = 1;
  }
  else
  {
    LOBYTE(v55[0]) = 0;
  }
  char v59 = v35;
  if (v71 != v73) {
    free(v71);
  }
  if (v74 != (char *)v76) {
    free(v74);
  }
  if (v59)
  {
    char v74 = (char *)v76;
    uint64_t v75 = 0x300000000;
    if (LODWORD(v55[1])) {
      llvm::SmallVectorImpl<llvm::orc::ExecutorAddrRange>::operator=((uint64_t)&v74, (uint64_t)v55);
    }
    long long v77 = *(_OWORD *)v58;
    long long v78 = *(_OWORD *)&v58[16];
    if (v65)
    {
      llvm::SmallVectorImpl<llvm::orc::ExecutorAddrRange>::operator=((uint64_t)&v60, (uint64_t)&v74);
      long long v63 = v77;
      long long v64 = v78;
    }
    else
    {
      uint64_t v60 = v62;
      uint64_t v61 = 0x300000000;
      if (v75) {
        llvm::SmallVectorImpl<llvm::orc::ExecutorAddrRange>::operator=((uint64_t)&v60, (uint64_t)&v74);
      }
      long long v63 = v77;
      long long v64 = v78;
      unsigned __int8 v65 = 1;
    }
    if (v74 != (char *)v76) {
      free(v74);
    }
    if (v59 && v55[0] != &v56) {
      free(v55[0]);
    }
  }
  if (v69 || v65)
  {
    if (v51)
    {
      unint64_t v50 = atomic_load((unint64_t *)(*(void *)(v5 + 72) + 456));
      long long v44 = (uint64_t *)(v50 + 120);
    }
    else
    {
      long long v44 = (uint64_t *)((char *)a2 + 256);
    }
    long long v45 = (std::mutex *)(*(void *)(v5 + 72) + 320);
    std::mutex::lock(v45);
    uint64_t v46 = *(void *)(v5 + 72);
    char v74 = v52;
    v55[0] = 0;
    int v47 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v46 + 384), &v74, v55);
    uint64_t v48 = v55[0];
    if (!v47) {
      uint64_t v48 = (void *)(*(void *)(v46 + 384) + 16 * *(unsigned int *)(v46 + 400));
    }
    uint64_t v54 = (void **)*((void *)v48 + 1);
    std::mutex::unlock(v45);
    llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSOptional<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>>,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>>>,llvm::orc::ExecutorAddr,std::optional<std::tuple<llvm::SmallVector<llvm::orc::ExecutorAddrRange,3u>,llvm::orc::ExecutorAddrRange,llvm::orc::ExecutorAddrRange>>,llvm::SmallVector<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,8u>>((uint64_t)&v74, *(void *)(*(void *)(v5 + 72) + 208), (size_t *)&v54, (uint64_t)&v60, (unsigned int *)&v68);
    v55[0] = v74;
    v55[1] = v57;
    long long v56 = xmmword_261E8A770;
    if (v76[0]) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v55[1], (const void **)&v75);
    }
    llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSOptional<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>>,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>>>,llvm::orc::ExecutorAddr,std::optional<std::tuple<llvm::SmallVector<llvm::orc::ExecutorAddrRange,3u>,llvm::orc::ExecutorAddrRange,llvm::orc::ExecutorAddrRange>>,llvm::SmallVector<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,8u>>((uint64_t)&v71, *(void *)(*(void *)(v5 + 72) + 224), (size_t *)&v54, (uint64_t)&v60, (unsigned int *)&v68);
    v57[3] = v71;
    *(void *)unsigned int v58 = &v58[24];
    *(_OWORD *)&v58[8] = xmmword_261E8A770;
    if (v73[0]) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)v58, (const void **)&v72);
    }
    std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100](v44, (uint64_t)v55);
    if (*(unsigned char **)v58 != &v58[24]) {
      free(*(void **)v58);
    }
    if (v55[1] != v57) {
      free(v55[1]);
    }
    llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected((uint64_t *)&v71);
    llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected((uint64_t *)&v74);
    int v49 = v65;
    *a4 = 0;
    if (v49 && v60 != v62) {
      free(v60);
    }
  }
  else
  {
    *a4 = 0;
  }
  if (v68 != v70) {
    free(v68);
  }
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_10>(llvm::jitlink::LinkGraph *this@<X1>, void *a2@<X8>)
{
  v21[6] = *MEMORY[0x263EF8340];
  unint64_t v19 = v21;
  uint64_t v20 = 0x600000000;
  llvm::jitlink::LinkGraph::defined_symbols(this, v15);
  if (*(void *)&v15[0] != v17 || v16 != v18)
  {
    uint64_t v5 = *v16;
    if (*v16)
    {
      uint64_t v6 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)this + 208);
      uint64_t v8 = *((void *)this + 26) + 8 * *((unsigned int *)this + 56);
      if ((void *)v8 != v6)
      {
        char v9 = v6;
        uint64_t v10 = v7;
        do
        {
          uint64_t v11 = (void **)*v9;
          if (*(void *)(*v9 + 8) >= 8uLL && **v11 == 0x246E6F6974636573) {
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v19, (uint64_t)v11);
          }
          while (++v9 != v10)
          {
            if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000) {
              goto LABEL_15;
            }
          }
          char v9 = v10;
LABEL_15:
          ;
        }
        while (v9 != (void *)v8);
      }
      if (v20)
      {
        uint64_t v12 = (void **)v19;
        uint64_t v13 = 8 * v20;
        do
        {
          uint64_t v14 = *v12++;
          llvm::jitlink::LinkGraph::makeDefined((uint64_t)this, v14, *(void *)(v5 + 16), 0, 0, 1, 2, 1);
          v13 -= 8;
        }
        while (v13);
      }
    }
  }
  if (v19 != v21) {
    free(v19);
  }
  *a2 = 0;
}

uint64_t llvm::jitlink::LinkGraph::makeDefined(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, int a8)
{
  if ((*(unsigned char *)(a2[2] + 8) & 2) != 0) {
    uint64_t v15 = a1 + 232;
  }
  else {
    uint64_t v15 = a1 + 208;
  }
  v21[0] = a2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v15, v21);
  unint64_t v16 = a2[3] & 0xE000000000000000 | a4 & 0x1FFFFFFFFFFFFFFLL | ((unint64_t)(a6 & 1) << 57) | ((unint64_t)(a7 & 3) << 58);
  uint64_t v17 = 0x1000000000000000;
  if (!a8) {
    uint64_t v17 = 0;
  }
  a2[2] = a3;
  a2[3] = v16 | v17;
  a2[4] = a5;
  uint64_t v18 = *(void *)(a3 + 16) + 56;
  uint64_t v20 = a2;
  return llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v18, &v20, (uint64_t)v21);
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_11>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (std::mutex *)atomic_load((unint64_t *)(*(void *)(*a1 + 72) + 456));
  std::mutex::lock(v4);
  unint64_t v5 = atomic_load((unint64_t *)(*(void *)(v3 + 72) + 456));
  --*(void *)(v5 + 112);
  unint64_t v6 = atomic_load((unint64_t *)(*(void *)(v3 + 72) + 456));
  if (!*(void *)(v6 + 112))
  {
    unint64_t v7 = atomic_load((unint64_t *)(*(void *)(v3 + 72) + 456));
    std::condition_variable::notify_all((std::condition_variable *)(v7 + 64));
  }
  *a2 = 0;
  std::mutex::unlock(v4);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 24 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        unint64_t v6 = (void *)(a1 + 24 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        unint64_t v6 = v10;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        *__n128 result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if ((*(void *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unint64_t v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          uint64_t v15 = v19;
          *unint64_t v19 = *(void *)v13;
          uint64_t v16 = *(void *)(v13 + 8);
          *((_DWORD *)v15 + 4) = *(_DWORD *)(v13 + 16);
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    uint64_t v18 = 24 * v17;
    do
    {
      *__n128 result = -4096;
      result += 3;
      v18 -= 24;
    }
    while (v18);
  }
  return result;
}

void llvm::detail::stream_operator_format_adapter<llvm::orc::ExecutorAddr>::~stream_operator_format_adapter()
{
}

void llvm::detail::stream_operator_format_adapter<llvm::orc::ExecutorAddr>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v3[0] = "{0:x}";
  v3[1] = 5;
  v3[2] = &v5;
  v3[3] = 1;
  v4[0] = &unk_270DBD7D8;
  v4[1] = v2;
  unint64_t v5 = v4;
  llvm::formatv_object_base::format((llvm::formatv_object_base *)v3, a2);
}

unint64_t **std::__introsort<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **,false>(unint64_t **result, unint64_t **a2, uint64_t a3, char a4)
{
  char v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          char v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v40 = *(a2 - 1);
                uint64_t v41 = *v10;
                if (*v40 < **v10)
                {
                  *uint64_t v10 = v40;
                  *(a2 - 1) = v41;
                }
                break;
              case 3uLL:
                __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v10, v10 + 1, a2 - 1);
                break;
              case 4uLL:
                __n128 result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5uLL:
                uint64_t v42 = v10 + 1;
                __int16 v43 = v10 + 2;
                long long v44 = v10 + 3;
                __n128 result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v10, v10 + 1, v10 + 2, v10 + 3);
                long long v45 = *(a2 - 1);
                uint64_t v46 = v10[3];
                if (*v45 < *v46)
                {
                  *long long v44 = v45;
                  *(a2 - 1) = v46;
                  int v47 = *v44;
                  uint64_t v48 = *v43;
                  unint64_t v49 = **v44;
                  if (v49 < **v43)
                  {
                    char *v43 = v47;
                    *long long v44 = v48;
                    unint64_t v50 = *v42;
                    if (v49 < **v42)
                    {
                      v10[1] = v47;
                      void v10[2] = v50;
                      int v51 = *v10;
                      if (v49 < **v10)
                      {
                        *uint64_t v10 = v47;
                        v10[1] = v51;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v52 = v10 + 1;
            BOOL v54 = v10 == a2 || v52 == a2;
            if (a4)
            {
              if (!v54)
              {
                uint64_t v55 = 8;
                long long v56 = v10;
                do
                {
                  unsigned int v58 = *v56;
                  unsigned int v57 = v56[1];
                  long long v56 = v52;
                  unint64_t v59 = *v57;
                  if (*v57 < *v58)
                  {
                    uint64_t v60 = v55;
                    do
                    {
                      *(unint64_t **)((char *)v10 + v60) = v58;
                      uint64_t v61 = v60 - 8;
                      if (v60 == 8)
                      {
                        uint64_t v62 = v10;
                        goto LABEL_84;
                      }
                      unsigned int v58 = *(unint64_t **)((char *)v10 + v60 - 16);
                      v60 -= 8;
                    }
                    while (v59 < *v58);
                    uint64_t v62 = (unint64_t **)((char *)v10 + v61);
LABEL_84:
                    *uint64_t v62 = v57;
                  }
                  uint64_t v52 = v56 + 1;
                  v55 += 8;
                }
                while (v56 + 1 != a2);
              }
            }
            else if (!v54)
            {
              do
              {
                unint64_t v98 = *v9;
                int v97 = v9[1];
                char v9 = v52;
                unint64_t v99 = *v97;
                if (*v97 < *v98)
                {
                  do
                  {
                    *uint64_t v52 = v98;
                    unint64_t v98 = *(v52 - 2);
                    --v52;
                  }
                  while (v99 < *v98);
                  *uint64_t v52 = v97;
                }
                uint64_t v52 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v63 = (v12 - 2) >> 1;
              int64_t v64 = v63;
              do
              {
                int64_t v65 = v64;
                if (v63 >= v64)
                {
                  uint64_t v66 = (2 * v64) | 1;
                  long long v67 = &v10[v66];
                  long long v68 = *v67;
                  if (2 * v65 + 2 < (uint64_t)v12)
                  {
                    uint64_t v69 = v67[1];
                    unint64_t v71 = *v68;
                    BOOL v70 = *v68 >= *v69;
                    if (*v68 <= *v69) {
                      unint64_t v71 = *v69;
                    }
                    if (*v68 < *v69) {
                      long long v68 = v67[1];
                    }
                    if (!v70)
                    {
                      ++v67;
                      uint64_t v66 = 2 * v65 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v71 = *v68;
                  }
                  __n128 result = &v10[v65];
                  uint64_t v72 = *result;
                  unint64_t v73 = **result;
                  if (v71 >= v73)
                  {
                    do
                    {
                      char v74 = v67;
                      *__n128 result = v68;
                      if (v63 < v66) {
                        break;
                      }
                      uint64_t v75 = (2 * v66) | 1;
                      long long v67 = &v10[v75];
                      uint64_t v66 = 2 * v66 + 2;
                      long long v68 = *v67;
                      if (v66 < (uint64_t)v12)
                      {
                        int v76 = v67[1];
                        unint64_t v78 = *v68;
                        BOOL v77 = *v68 >= *v76;
                        if (*v68 <= *v76) {
                          unint64_t v78 = *v76;
                        }
                        if (*v68 < *v76) {
                          long long v68 = v67[1];
                        }
                        if (v77) {
                          uint64_t v66 = v75;
                        }
                        else {
                          ++v67;
                        }
                      }
                      else
                      {
                        unint64_t v78 = *v68;
                        uint64_t v66 = v75;
                      }
                      __n128 result = v74;
                    }
                    while (v78 >= v73);
                    *char v74 = v72;
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              uint64_t v79 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v80 = 0;
                unint64_t v81 = *v10;
                uint64_t v82 = v10;
                do
                {
                  uint64_t v83 = &v82[v80];
                  int v86 = (unint64_t ***)v83[1];
                  uint64_t v84 = (unint64_t **)(v83 + 1);
                  unint64_t v85 = v86;
                  uint64_t v87 = (2 * v80) | 1;
                  uint64_t v88 = 2 * v80 + 2;
                  if (v88 < v79)
                  {
                    __n128 result = *v85;
                    if ((unint64_t)*v85 < *v84[1])
                    {
                      unint64_t v85 = (unint64_t ***)v84[1];
                      ++v84;
                      uint64_t v87 = v88;
                    }
                  }
                  void *v82 = v85;
                  uint64_t v82 = v84;
                  uint64_t v80 = v87;
                }
                while (v87 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                if (v84 == --a2)
                {
                  *uint64_t v84 = v81;
                }
                else
                {
                  *uint64_t v84 = *a2;
                  *a2 = v81;
                  uint64_t v89 = (char *)v84 - (char *)v10 + 8;
                  if (v89 >= 9)
                  {
                    unint64_t v90 = (((unint64_t)v89 >> 3) - 2) >> 1;
                    BOOL v91 = &v10[v90];
                    unint64_t v92 = *v91;
                    int v93 = *v84;
                    unint64_t v94 = **v84;
                    if (**v91 < v94)
                    {
                      do
                      {
                        unsigned int v95 = v91;
                        *uint64_t v84 = v92;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        BOOL v91 = &v10[v90];
                        unint64_t v92 = *v91;
                        uint64_t v84 = v95;
                      }
                      while (**v91 < v94);
                      *unsigned int v95 = v93;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v9, &v9[v12 >> 1], a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v9 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v9 + 2, &v9[v13 + 1], a2 - 3);
            __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *char v9 = *v14;
            *uint64_t v14 = v15;
          }
          else
          {
            __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          unint64_t v17 = **v9;
          if ((a4 & 1) != 0 || **(v9 - 1) < v17) {
            break;
          }
          if (v17 >= **(a2 - 1))
          {
            uint64_t v32 = v9 + 1;
            do
            {
              uint64_t v10 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 >= **v10);
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              long long v31 = v10[1];
              ++v10;
            }
            while (v17 >= *v31);
          }
          size_t v33 = a2;
          if (v10 < a2)
          {
            size_t v33 = a2;
            do
              uint64_t v34 = *--v33;
            while (v17 < *v34);
          }
          if (v10 < v33)
          {
            char v35 = *v10;
            unsigned int v36 = *v33;
            do
            {
              *uint64_t v10 = v36;
              *size_t v33 = v35;
              do
              {
                uint64_t v37 = v10[1];
                ++v10;
                char v35 = v37;
              }
              while (v17 >= *v37);
              do
              {
                uint64_t v38 = *--v33;
                unsigned int v36 = v38;
              }
              while (v17 < *v38);
            }
            while (v10 < v33);
          }
          uint64_t v39 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *char v9 = *v39;
          }
          a4 = 0;
          uint64_t *v39 = v16;
        }
        uint64_t v18 = 0;
        do
          unint64_t v19 = v9[++v18];
        while (*v19 < v17);
        uint64_t v20 = &v9[v18];
        long long v21 = a2;
        if (v18 == 1)
        {
          long long v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*v23 >= v17);
        }
        else
        {
          do
            char v22 = *--v21;
          while (*v22 >= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v29 = v20 - 1;
        }
        else
        {
          uint64_t v24 = *v21;
          char v25 = &v9[v18];
          uint64_t v26 = v21;
          do
          {
            std::mutex *v25 = v24;
            uint64_t *v26 = v19;
            do
            {
              uint64_t v27 = v25[1];
              ++v25;
              unint64_t v19 = v27;
            }
            while (*v27 < v17);
            do
            {
              uint64_t v28 = *--v26;
              uint64_t v24 = v28;
            }
            while (*v28 >= v17);
          }
          while (v25 < v26);
          uint64_t v29 = v25 - 1;
        }
        if (v29 != v9) {
          *char v9 = *v29;
        }
        _OWORD *v29 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_33:
        __n128 result = (unint64_t **)std::__introsort<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **,false>(v9, v29, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v29 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v9, v29);
      uint64_t v10 = v29 + 1;
      __n128 result = (unint64_t **)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v29 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_33;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

unint64_t **std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(unint64_t **result, unint64_t **a2, unint64_t **a3)
{
  uint64_t v3 = *a2;
  BOOL v4 = *result;
  unint64_t v5 = **a2;
  unint64_t v6 = **result;
  int v7 = *a3;
  unint64_t v8 = **a3;
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      char v9 = *result;
      if (**a2 < **result)
      {
        *__n128 result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *__n128 result = v3;
      *a2 = v4;
      if (**a3 >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *__n128 result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(unint64_t **a1, unint64_t **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      int v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      unint64_t v19 = a1 + 2;
      uint64_t v20 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a1 + 2, a1 + 3);
      long long v21 = *(a2 - 1);
      char v22 = a1[3];
      if (*v21 < *v22)
      {
        *uint64_t v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        unint64_t v25 = **v20;
        if (v25 < **v19)
        {
          *unint64_t v19 = v23;
          *uint64_t v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < **v18)
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < **a1)
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a1 + 2);
      char v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    unint64_t v13 = *v8;
    unint64_t v14 = **v9;
    if (v14 < **v8)
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(unint64_t **)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        unint64_t v13 = *(unint64_t **)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *v13)
        {
          unint64_t v17 = (unint64_t **)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      unint64_t v17 = a1;
LABEL_13:
      *unint64_t v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

unint64_t **std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4)
{
  BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a2, a3);
  char v9 = *a3;
  if (**a4 < **a3)
  {
    *a3 = *a4;
    *a4 = v9;
    int v10 = *a2;
    if (**a3 < **a2)
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (**a2 < **a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,true>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v5 = v3 + 1;
    unint64_t v6 = *(void *)a1 + 32 * v3;
    if (*(void *)a1 <= a2 && v6 > a2)
    {
      unint64_t v8 = a2 - *(void *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 32);
      return *(void *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 32);
    }
  }
  return v2;
}

uint64_t llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>::serialize<llvm::orc::ExecutorAddrRange,llvm::orc::ExecutorAddrRange>(void *a1, void *a2, void *a3)
{
  uint64_t result = llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>::serialize<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr>(a1, a2, a2 + 1);
  if (result)
  {
    return llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>::serialize<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr>(a1, a3, a3 + 1);
  }
  return result;
}

void llvm::detail::UniqueFunctionBase<void,unsigned long>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::$_2>(uint64_t a1, int a2)
{
  uint64_t v4 = *(llvm::jitlink::LinkGraph **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(*(void *)a1 + 208);
  uint64_t v8 = *((void *)v4 + 26) + 8 * *((unsigned int *)v4 + 56);
  if ((void *)v8 == v6)
  {
LABEL_10:
    unint64_t v12 = *(llvm::jitlink::LinkGraph **)a1;
    unint64_t v13 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(*(void *)a1 + 232);
    uint64_t v15 = *((void *)v12 + 29) + 8 * *((unsigned int *)v12 + 62);
    if ((void *)v15 == v13)
    {
LABEL_19:
      llvm::jitlink::LinkGraph::defined_symbols(*(llvm::jitlink::LinkGraph **)a1, v38);
      v36[0] = v38[0];
      v36[1] = v38[1];
      void v36[2] = v38[2];
      long long v37 = v39;
      uint64_t v18 = v40;
      uint64_t v19 = v41;
      uint64_t v20 = (const void ***)v39;
      if (*(void *)&v38[0] == v40 && (void)v39 == v41)
      {
LABEL_28:
        uint64_t v11 = (const void **)llvm::jitlink::LinkGraph::addExternalSymbol(*(void *)a1, (uint64_t)"__llvm_jitlink_macho_objc_imageinfo", 35, 8, 0);
      }
      else
      {
        while (1)
        {
          uint64_t v11 = *v20;
          if ((*v20)[1] == (const void *)35 && !memcmp(*v11, "__llvm_jitlink_macho_objc_imageinfo", 0x23uLL)) {
            break;
          }
          llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v36, (uint64_t)v35);
          uint64_t v20 = (const void ***)v37;
          if (*(void *)&v36[0] == v18 && (void)v37 == v19) {
            goto LABEL_28;
          }
        }
        char v22 = (std::mutex *)(v5 + 8);
        std::mutex::lock((std::mutex *)(v5 + 8));
        uint64_t v23 = **(void **)(a1 + 16);
        v35[0] = 0;
        int v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(*(void *)(v5 + 80), *(_DWORD *)(v5 + 96), v23, v35);
        uint64_t v25 = v35[0];
        if (v24) {
          BOOL v26 = v35[0] == *(void *)(v5 + 80) + 24 * *(unsigned int *)(v5 + 96);
        }
        else {
          BOOL v26 = 1;
        }
        if (v26)
        {
          std::mutex::unlock((std::mutex *)(v5 + 8));
        }
        else
        {
          *(unsigned char *)(v35[0] + 16) = 1;
          unsigned int v27 = *(_DWORD *)(v25 + 12);
          std::mutex::unlock(v22);
          uint64_t v28 = v11[2];
          uint64_t v29 = (const void *)v28[3];
          if ((v28[1] & 4) != 0)
          {
            uint64_t v32 = (_DWORD *)v28[3];
          }
          else
          {
            size_t v30 = v28[4];
            long long v31 = (_DWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*(void *)a1, v30, 0);
            uint64_t v32 = v31;
            if (v30) {
              memmove(v31, v29, v30);
            }
            v28[3] = v32;
            void v28[4] = v30;
            v28[1] |= 4uLL;
          }
          unsigned int v33 = bswap32(v27);
          if ((*(_DWORD *)(*(void *)a1 + 172) - 1) >= 2) {
            unsigned int v34 = v33;
          }
          else {
            unsigned int v34 = v27;
          }
          v32[1] = v34;
        }
      }
    }
    else
    {
      uint64_t v16 = v13;
      unint64_t v17 = v14;
      while (1)
      {
        uint64_t v11 = (const void **)*v16;
        if (*(void *)(*v16 + 8) == 35 && !memcmp(*v11, "__llvm_jitlink_macho_objc_imageinfo", 0x23uLL)) {
          break;
        }
        while (++v16 != v17)
        {
          if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_18;
          }
        }
        uint64_t v16 = v17;
LABEL_18:
        if (v16 == (void *)v15) {
          goto LABEL_19;
        }
      }
    }
  }
  else
  {
    char v9 = v6;
    int v10 = v7;
    while (1)
    {
      uint64_t v11 = (const void **)*v9;
      if (*(void *)(*v9 + 8) == 35 && !memcmp(*v11, "__llvm_jitlink_macho_objc_imageinfo", 0x23uLL)) {
        break;
      }
      while (++v9 != v10)
      {
        if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_9;
        }
      }
      char v9 = v10;
LABEL_9:
      if (v9 == (void *)v8) {
        goto LABEL_10;
      }
    }
  }
  llvm::jitlink::Block::addEdge(*(void **)(a1 + 24), 2, a2 + 32, (uint64_t)v11, -**(void **)(a1 + 24));
}

void *llvm::jitlink::LinkGraph::addExternalSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 16, 3);
  unint64_t v11 = v10[1] & 0xFFFFFFFFFFFFFFFCLL;
  *int v10 = 0;
  v10[1] = v11;
  unint64_t v12 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 40, 3);
  unint64_t v13 = v12;
  *unint64_t v12 = a2;
  v12[1] = a3;
  uint64_t v14 = 0x4000000000000000;
  if (!a5) {
    uint64_t v14 = 0;
  }
  void v12[2] = v10;
  v12[3] = v14;
  v12[4] = a4;
  uint64_t v16 = v12;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1 + 208, &v16, (uint64_t)v17);
  return v13;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v13 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)a2, &v13, a4);
  int v10 = v13;
  if (result)
  {
    char v11 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::StringRef>(a1, (uint64_t)a2, (uint64_t)a2, v13);
    int v10 = (void *)result;
    *(_OWORD *)uint64_t result = *a2;
    *(void *)(result + 16) = *a3;
    char v11 = 1;
  }
  uint64_t v12 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v12;
  *(unsigned char *)(a5 + 16) = v11;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::grow(a1, v7);
  int v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::grow(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::moveFromOldBuckets(a1, v4, v4 + 24 * v3, v10);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = 24 * v11;
    do
    {
      *uint64_t result = xmmword_261E8A6B0;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v12 -= 24;
    }
    while (v12);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6 = result;
  *(void *)(result + 8) = 0;
  uint64_t v7 = *(unsigned int *)(result + 16);
  if (v7)
  {
    unsigned int v8 = *(_OWORD **)result;
    uint64_t v9 = 24 * v7;
    do
    {
      *unsigned int v8 = xmmword_261E8A6B0;
      unsigned int v8 = (_OWORD *)((char *)v8 + 24);
      v9 -= 24;
    }
    while (v9);
  }
  while (a2 != a3)
  {
    if (*(void *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v11 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v6, a2, &v11, a4);
      int v10 = v11;
      _OWORD *v11 = *(_OWORD *)a2;
      *((void *)v10 + 2) = *(void *)(a2 + 16);
      ++*(_DWORD *)(v6 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)13>::~MachOBuilderLoadCommand(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE3A0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)13>::~MachOBuilderLoadCommand(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE3A0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)13>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

unint64_t llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)13>::write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int8x16_t v7 = *(int8x16_t *)(a1 + 8);
  int8x8_t v8 = *(int8x8_t *)(a1 + 24);
  int8x16_t v9 = vrev32q_s8(v7);
  int8x8_t v10 = vrev32_s8(v8);
  if (a5) {
    unsigned int v11 = -1;
  }
  else {
    unsigned int v11 = 0;
  }
  int8x16_t v12 = (int8x16_t)vdupq_n_s32(v11);
  uint64_t v13 = a2 + a4;
  *(int8x16_t *)uint64_t v13 = vbslq_s8(v12, v9, v7);
  *(int8x8_t *)(v13 + 16) = vbsl_s8(*(int8x8_t *)v12.i8, v10, v8);
  uint64_t v14 = (char *)(a2 + a4 + 24);
  uint64_t v15 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v15 = *(const char **)v15;
  }
  strcpy(v14, v15);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v16 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 55);
  }
  return a4 + (v16 & 0xFFFFFFFFFFFFFFFCLL) + 28;
}

void llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)50>::~MachOBuilderLoadCommand()
{
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)50>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)50>::write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int8x16_t v5 = *(int8x16_t *)(a1 + 8);
  int8x8_t v6 = *(int8x8_t *)(a1 + 24);
  int8x16_t v7 = vrev32q_s8(v5);
  int8x8_t v8 = vrev32_s8(v6);
  if (a5) {
    unsigned int v9 = -1;
  }
  else {
    unsigned int v9 = 0;
  }
  int8x16_t v10 = (int8x16_t)vdupq_n_s32(v9);
  uint64_t v11 = a2 + a4;
  *(int8x16_t *)uint64_t v11 = vbslq_s8(v10, v7, v5);
  *(int8x8_t *)(v11 + 16) = vbsl_s8(*(int8x8_t *)v10.i8, v8, v6);
  return a4 + 24;
}

uint64_t llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)12>::~MachOBuilderLoadCommand(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE400;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)12>::~MachOBuilderLoadCommand(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE400;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)12>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

unint64_t llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)12>::write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int8x16_t v7 = *(int8x16_t *)(a1 + 8);
  int8x8_t v8 = *(int8x8_t *)(a1 + 24);
  int8x16_t v9 = vrev32q_s8(v7);
  int8x8_t v10 = vrev32_s8(v8);
  if (a5) {
    unsigned int v11 = -1;
  }
  else {
    unsigned int v11 = 0;
  }
  int8x16_t v12 = (int8x16_t)vdupq_n_s32(v11);
  uint64_t v13 = a2 + a4;
  *(int8x16_t *)uint64_t v13 = vbslq_s8(v12, v9, v7);
  *(int8x8_t *)(v13 + 16) = vbsl_s8(*(int8x8_t *)v12.i8, v10, v8);
  uint64_t v14 = (char *)(a2 + a4 + 24);
  uint64_t v15 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v15 = *(const char **)v15;
  }
  strcpy(v14, v15);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v16 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 55);
  }
  return a4 + (v16 & 0xFFFFFFFFFFFFFFFCLL) + 28;
}

uint64_t llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)2147483676>::~MachOBuilderLoadCommand(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE430;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)2147483676>::~MachOBuilderLoadCommand(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE430;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)2147483676>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

unint64_t llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)2147483676>::write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  LODWORD(v8) = *(_DWORD *)(a1 + 8);
  LODWORD(v7) = *(_DWORD *)(a1 + 12);
  unsigned int v9 = *(_DWORD *)(a1 + 16);
  unsigned int v10 = bswap32(v8);
  unsigned int v11 = bswap32(v7);
  unsigned int v12 = bswap32(v9);
  if (a5) {
    uint64_t v7 = v11;
  }
  else {
    uint64_t v7 = v7;
  }
  if (a5) {
    uint64_t v8 = v10;
  }
  else {
    uint64_t v8 = v8;
  }
  if (a5) {
    unsigned int v9 = v12;
  }
  uint64_t v13 = a2 + a4;
  *(void *)uint64_t v13 = v8 | (v7 << 32);
  *(_DWORD *)(v13 + 8) = v9;
  uint64_t v14 = (char *)(a2 + a4 + 12);
  uint64_t v15 = (const char *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v15 = *(const char **)v15;
  }
  strcpy(v14, v15);
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v16 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
  }
  return a4 + (v16 & 0xFFFFFFFFFFFFFFFCLL) + 16;
}

double _GLOBAL__sub_I_MachOPlatform_cpp()
{
  double result = *(double *)&llvm::orc::MachOObjCCatListSectionName;
  xmmword_26B417B28 = llvm::orc::MachOObjCCatList2SectionName;
  unk_26B417B38 = llvm::orc::MachOObjCClassListSectionName;
  xmmword_26B417B48 = llvm::orc::MachOObjCClassRefsSectionName;
  unk_26B417B58 = llvm::orc::MachOObjCConstSectionName;
  xmmword_26B417B68 = llvm::orc::MachOObjCDataSectionName;
  unk_26B417B78 = llvm::orc::MachOObjCProtoListSectionName;
  xmmword_26B417B88 = llvm::orc::MachOObjCProtoRefsSectionName;
  unk_26B417B98 = llvm::orc::MachOObjCNLCatListSectionName;
  xmmword_26B417BA8 = llvm::orc::MachOObjCNLClassListSectionName;
  unk_26B417BB8 = llvm::orc::MachOObjCSelRefsSectionName;
  _MergedGlobals_7 = llvm::orc::MachOObjCClassNameSectionName;
  unk_26B417A98 = llvm::orc::MachOObjCMethNameSectionName;
  xmmword_26B417AA8 = llvm::orc::MachOObjCMethTypeSectionName;
  unk_26B417AB8 = llvm::orc::MachOSwift5TypesSectionName;
  xmmword_26B417AC8 = llvm::orc::MachOSwift5TypeRefSectionName;
  unk_26B417AD8 = llvm::orc::MachOSwift5FieldMetadataSectionName;
  xmmword_26B417AE8 = llvm::orc::MachOSwift5EntrySectionName;
  unk_26B417AF8 = llvm::orc::MachOSwift5ProtoSectionName;
  xmmword_26B417B08 = llvm::orc::MachOSwift5ProtosSectionName;
  *(_OWORD *)&qword_26B417B18 = llvm::orc::MachOObjCCatListSectionName;
  return result;
}

llvm::orc::ObjectLinkingLayer *llvm::orc::ObjectLinkingLayer::ObjectLinkingLayer(llvm::orc::ObjectLinkingLayer *this, llvm::orc::ExecutionSession *a2)
{
  *((void *)this + 1) = a2;
  *(void *)this = &unk_270DBE490;
  *((void *)this + 2) = &unk_270DBE4E8;
  *((void *)this + 3) = 850045863;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = *(void *)(*((void *)a2 + 9) + 120);
  *((void *)this + 12) = 0;
  *((_WORD *)this + 52) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *((_DWORD *)this + 40) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 17) = 0;
  llvm::orc::ExecutionSession::registerResourceManager((uint64_t)a2, (uint64_t)this + 16);
  return this;
}

void llvm::orc::ObjectLinkingLayer::~ObjectLinkingLayer(llvm::orc::ObjectLinkingLayer *this)
{
  *(void *)this = &unk_270DBE490;
  *((void *)this + 2) = &unk_270DBE4E8;
  llvm::orc::ExecutionSession::deregisterResourceManager(*((void *)this + 1), (uint64_t)this + 16);
  unsigned int v3 = (void **)((char *)this + 168);
  std::vector<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::__destroy_vector::operator()[abi:nn180100](&v3);
  llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::destroyAll((unsigned int *)this + 36);
  MEMORY[0x263E500A0](*((void *)this + 18), 8);
  std::__function::__value_func<void ()(std::unique_ptr<llvm::MemoryBuffer>)>::~__value_func[abi:nn180100]((void *)this + 14);
  uint64_t v2 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
}

{
  uint64_t vars8;

  llvm::orc::ObjectLinkingLayer::~ObjectLinkingLayer(this);
  JUMPOUT(0x263E500B0);
}

void non-virtual thunk to'llvm::orc::ObjectLinkingLayer::~ObjectLinkingLayer(llvm::orc::ObjectLinkingLayer *this)
{
}

{
  uint64_t vars8;

  llvm::orc::ObjectLinkingLayer::~ObjectLinkingLayer((llvm::orc::ObjectLinkingLayer *)((char *)this - 16));
  JUMPOUT(0x263E500B0);
}

void llvm::orc::ObjectLinkingLayer::add(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v37[0] = 0;
  atomic_load((unint64_t *)(*(void *)a2 + 8));
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  v37[1] = 0;
  int v38 = 0;
  uint64_t v39 = 0;
  llvm::jitlink::LinkGraph::defined_symbols((llvm::jitlink::LinkGraph *)v3, &v45);
  *(_OWORD *)std::string __p = v45;
  long long v42 = v46;
  long long v43 = v47;
  long long v44 = v48;
  int8x16_t v5 = v49;
  uint64_t v6 = v50;
  uint64_t v7 = (uint64_t *)v48;
  if ((void **)v45 != v49 || (void)v48 != v50)
  {
    do
    {
      uint64_t v8 = *v7;
      unint64_t v9 = *(void *)(v8 + 24);
      uint64_t v10 = v9 & 0xC00000000000000;
      if ((v9 & 0xC00000000000000) != 0x800000000000000)
      {
        unint64_t v11 = HIBYTE(v9);
        if (v10) {
          LOWORD(v12) = v11 & 2;
        }
        else {
          uint64_t v12 = v11 & 2 | 0x10;
        }
        __int16 v13 = ((unsigned __int16)v12 | v11 & 0x20) << 8;
        llvm::orc::ExecutorProcessControl::intern(*(void *)(v4 + 72), *(uint64_t **)v8, *(void *)(v8 + 8), v40);
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(v37, v40)[4] = v13;
        if ((unint64_t)v40[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)v40[0] + 1, 0xFFFFFFFFFFFFFFFFLL);
        }
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)__p, (uint64_t)v40);
      uint64_t v7 = (uint64_t *)v44;
    }
    while (__p[0] != v5 || (void)v44 != v6);
  }
  uint64_t v15 = (uint64_t ***)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v3 + 232);
  uint64_t v17 = *(void *)(v3 + 232) + 8 * *(unsigned int *)(v3 + 248);
  if ((uint64_t ***)v17 != v15)
  {
    uint64_t v18 = v15;
    uint64_t v19 = v16;
    do
    {
      unint64_t v20 = (unint64_t)(*v18)[3];
      uint64_t v21 = v20 & 0xC00000000000000;
      if ((v20 & 0xC00000000000000) != 0x800000000000000)
      {
        unint64_t v22 = HIBYTE(v20);
        if (v21) {
          LOWORD(v23) = v22 & 2;
        }
        else {
          unint64_t v23 = v22 & 2 | 0x10;
        }
        __int16 v24 = ((unsigned __int16)v23 | v22 & 0x20) << 8;
        llvm::orc::ExecutorProcessControl::intern(*(void *)(v4 + 72), **v18, (unint64_t)(*v18)[1], (unint64_t **)&v45);
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(v37, &v45)[4] = v24;
        if ((unint64_t)(v45 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v45 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
      }
      while (++v18 != v19)
      {
        if (((unint64_t)*v18 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_26;
        }
      }
      uint64_t v18 = v19;
LABEL_26:
      ;
    }
    while (v18 != (uint64_t ***)v17);
  }
  int v25 = *(_DWORD *)(v3 + 164);
  BOOL v26 = v25 == 5 || v25 == 3;
  if (v26 && *(_DWORD *)(v3 + 192))
  {
    uint64_t v27 = *(unsigned int *)(v3 + 200);
    if (v27)
    {
      uint64_t v28 = 24 * v27;
      uint64_t v29 = *(void **)(v3 + 184);
      while (*v29 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v29 += 3;
        v28 -= 24;
        if (!v28) {
          goto LABEL_37;
        }
      }
    }
    else
    {
      uint64_t v29 = *(void **)(v3 + 184);
    }
    uint64_t v30 = *(void *)(v3 + 184) + 24 * v27;
LABEL_40:
    if (v29 != (void *)v30)
    {
      uint64_t v31 = v29[2];
      if (v25 == 3)
      {
        if (!llvm::orc::isELFInitializerSection(*(void *)v31, *(void *)(v31 + 8))) {
          goto LABEL_46;
        }
        goto LABEL_49;
      }
      if (v25 == 5 && (llvm::orc::isMachOInitializerSection(*(void **)v31, *(void *)(v31 + 8)) & 1) != 0)
      {
LABEL_49:
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v42 = 0;
        DWORD2(v45) = 0;
        BYTE8(v47) = 0;
        *(void *)&long long v48 = 0;
        DWORD2(v48) = 1;
        *(void *)&long long v47 = 0;
        long long v46 = 0uLL;
        *(void *)&long long v45 = &unk_270DBD6E0;
        unint64_t v49 = __p;
        llvm::raw_ostream::SetUnbuffered(&v45);
        if (*((void *)&v46 + 1) - (void)v47 > 1uLL)
        {
          *(_WORD *)long long v47 = 11812;
          *(void *)&long long v47 = v47 + 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v45, "$.", 2uLL);
        }
        int v32 = *(char *)(v3 + 119);
        if (v32 >= 0) {
          unsigned int v33 = (const char *)(v3 + 96);
        }
        else {
          unsigned int v33 = *(const char **)(v3 + 96);
        }
        if (v32 >= 0) {
          size_t v34 = *(unsigned __int8 *)(v3 + 119);
        }
        else {
          size_t v34 = *(void *)(v3 + 104);
        }
        llvm::raw_ostream::write((llvm::raw_ostream *)&v45, v33, v34);
        if (*((void *)&v46 + 1) - (void)v47 > 7uLL)
        {
          *(void *)long long v47 = 0x7374696E695F5F2ELL;
          *(void *)&long long v47 = v47 + 8;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v45, ".__inits", 8uLL);
        }
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v45);
        if ((SBYTE7(v42) & 0x80u) == 0) {
          char v35 = (uint64_t *)__p;
        }
        else {
          char v35 = (uint64_t *)__p[0];
        }
        if ((SBYTE7(v42) & 0x80u) == 0) {
          unint64_t v36 = BYTE7(v42);
        }
        else {
          unint64_t v36 = (unint64_t)__p[1];
        }
        llvm::orc::ExecutorProcessControl::intern(*(void *)(v4 + 72), v35, v36, (unint64_t **)&v45);
        if (SBYTE7(v42) < 0) {
          operator delete(__p[0]);
        }
        if ((unint64_t)(v39 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v39 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        uint64_t v39 = v45;
        goto LABEL_37;
      }
LABEL_46:
      while (1)
      {
        v29 += 3;
        if (v29 == (void *)v30) {
          break;
        }
        if (*v29 < 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_40;
        }
      }
    }
  }
LABEL_37:
  operator new();
}

void llvm::orc::ObjectLinkingLayer::emit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  (*(void (**)(void))(**(void **)a3 + 16))();
  operator new();
}

uint64_t llvm::orc::ObjectLinkingLayerJITLinkContext::notifyMaterializing(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *(uint64_t **)(v2 + 168);
  uint64_t v4 = *(uint64_t **)(v2 + 176);
  if (v3 != v4)
  {
    uint64_t v6 = result;
    do
    {
      uint64_t v7 = *v3;
      uint64_t v9 = *(void *)(v6 + 24);
      uint64_t v8 = *(void **)(v6 + 32);
      if (v8)
      {
        uint64_t v10 = v8[1];
        uint64_t v11 = v8[2] - v10;
        uint64_t v12 = (*(uint64_t (**)(void *))(*v8 + 16))(v8);
        *(void *)&long long v14 = v10;
        *((void *)&v14 + 1) = v11;
        *(void *)&long long v15 = v12;
        *((void *)&v15 + 1) = v13;
      }
      else
      {
        long long v14 = 0u;
        long long v15 = 0u;
      }
      double result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, long long *))(*(void *)v7 + 24))(v7, v9, a2, v6, &v14);
      ++v3;
    }
    while (v3 != v4);
  }
  return result;
}

void llvm::orc::ObjectLinkingLayerJITLinkContext::notifyFailed(uint64_t a1, void ***a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = v4[21];
  uint64_t v6 = v4[22];
  if (v5 != v6)
  {
    do
    {
      uint64_t v7 = *a2;
      *a2 = 0;
      (*(void (**)(void ***__return_ptr))(**(void **)v5 + 48))(&v11);
      uint64_t v13 = v11;
      long long v14 = v7;
      uint64_t v11 = 0;
      llvm::ErrorList::join(&v14, &v13, &v12);
      if (v13) {
        (*((void (**)(void **))*v13 + 1))(v13);
      }
      if (v14) {
        (*((void (**)(void **))*v14 + 1))(v14);
      }
      uint64_t v8 = v11;
      *a2 = v12;
      uint64_t v12 = 0;
      if (v8) {
        (*((void (**)(void **))*v8 + 1))(v8);
      }
      v5 += 8;
    }
    while (v5 != v6);
    uint64_t v4 = *(void **)(a1 + 16);
  }
  uint64_t v9 = v4[1];
  uint64_t v10 = *a2;
  *a2 = 0;
  llvm::orc::ExecutionSession::reportError(v9, (uint64_t *)&v10);
  if (v10) {
    (*((void (**)(void **))*v10 + 1))(v10);
  }
  llvm::orc::ExecutionSession::OL_notifyFailed(*(void *)(**(void **)(a1 + 24) + 32), *(void *)(a1 + 24));
}

void llvm::orc::ObjectLinkingLayer::emit()
{
}

void llvm::jitlink::JITLinkMemoryManager::deallocate(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)operator new(8uLL) = *a3;
  *a3 = -1;
  llvm::jitlink::JITLinkMemoryManager::deallocate();
}

void llvm::orc::ObjectLinkingLayer::handleRemoveResources(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  *a3 = 0;
  uint64_t v6 = *(void *)(a1 + 168);
  uint64_t v7 = *(void *)(a1 + 176);
  if (v6 == v7) {
    goto LABEL_11;
  }
  uint64_t v8 = 0;
  do
  {
    (*(void (**)(void ***__return_ptr))(**(void **)v6 + 56))(&v16);
    uint64_t v18 = v16;
    uint64_t v19 = v8;
    uint64_t v16 = 0;
    llvm::ErrorList::join(&v19, &v18, &v17);
    if (v18) {
      (*((void (**)(void **))*v18 + 1))(v18);
    }
    if (v19) {
      (*((void (**)(void **))*v19 + 1))(v19);
    }
    uint64_t v9 = v16;
    uint64_t v8 = v17;
    *a3 = v17;
    uint64_t v17 = 0;
    if (v9) {
      (*((void (**)(void **))*v9 + 1))(v9);
    }
    v6 += 8;
  }
  while (v6 != v7);
  if (!v8)
  {
LABEL_11:
    uint64_t v10 = *(std::recursive_mutex **)(a1 + 8);
    std::recursive_mutex::lock(v10);
    uint64_t v19 = 0;
    int v11 = llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::LookupBucketFor<unsigned long>(*(void *)(a1 + 144), *(_DWORD *)(a1 + 160), a2, &v19);
    uint64_t v12 = v19;
    if (v11) {
      BOOL v13 = v19 == (void **)(*(void *)(a1 + 144) + 32 * *(unsigned int *)(a1 + 160));
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      std::recursive_mutex::unlock(v10);
      *a3 = 0;
    }
    else
    {
      long long v14 = v19[1];
      long long v15 = *((_OWORD *)v19 + 1);
      v19[2] = 0;
      v12[3] = 0;
      *uint64_t v12 = (void *)-2;
      v12[1] = 0;
      *(int32x2_t *)(a1 + 152) = vadd_s32(*(int32x2_t *)(a1 + 152), (int32x2_t)0x1FFFFFFFFLL);
      std::recursive_mutex::unlock(v10);
      if (v14 != (void *)v15) {
        llvm::jitlink::JITLinkMemoryManager::deallocate();
      }
      *a3 = 0;
      if (v14) {
        operator delete(v14);
      }
    }
  }
}

void llvm::jitlink::JITLinkMemoryManager::deallocate()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void non-virtual thunk to'llvm::orc::ObjectLinkingLayer::handleRemoveResources(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
}

void llvm::orc::ObjectLinkingLayer::handleTransferResources(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a3;
  long long v44 = 0;
  uint64_t v8 = a1 + 144;
  int v9 = llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::LookupBucketFor<unsigned long>(*(void *)(a1 + 144), *(_DWORD *)(a1 + 160), a4, &v44);
  uint64_t v10 = v44;
  if (v9) {
    BOOL v11 = v44 == (void *)(*(void *)v8 + 32 * *(unsigned int *)(v8 + 16));
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t v12 = llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::FindAndConstruct(v8, &v43);
    uint64_t v13 = v12[1];
    uint64_t v14 = v12[2] - v13;
    unint64_t v15 = ((uint64_t)(v10[2] - v10[1]) >> 3) + (v14 >> 3);
    if (v15 > (v12[3] - v13) >> 3)
    {
      if (v15 >> 61) {
LABEL_39:
      }
        abort();
      uint64_t v16 = v14 >> 3;
      uint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v15);
      uint64_t v18 = &v17[8 * v16];
      unint64_t v20 = &v17[8 * v19];
      uint64_t v21 = (void *)v12[1];
      unint64_t v22 = (void *)v12[2];
      uint64_t v23 = (uint64_t)v18;
      if (v22 != v21)
      {
        uint64_t v23 = (uint64_t)v18;
        do
        {
          uint64_t v24 = *--v22;
          *(void *)(v23 - 8) = v24;
          v23 -= 8;
          *unint64_t v22 = -1;
        }
        while (v22 != v21);
      }
      v12[1] = v23;
      void v12[2] = (uint64_t)v18;
      v12[3] = (uint64_t)v20;
      if (v21) {
        operator delete(v21);
      }
    }
    int v25 = (void *)v10[1];
    BOOL v26 = (void *)v10[2];
    if (v25 != v26)
    {
      uint64_t v27 = (char *)v12[2];
      do
      {
        unint64_t v28 = v12[3];
        if ((unint64_t)v27 >= v28)
        {
          uint64_t v30 = (char *)v12[1];
          uint64_t v31 = (v27 - v30) >> 3;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61) {
            goto LABEL_39;
          }
          uint64_t v33 = v28 - (void)v30;
          if (v33 >> 2 > v32) {
            unint64_t v32 = v33 >> 2;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v32;
          }
          if (v34)
          {
            unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v34);
            uint64_t v30 = (char *)v12[1];
            uint64_t v27 = (char *)v12[2];
          }
          else
          {
            uint64_t v35 = 0;
          }
          unint64_t v36 = (void *)(v34 + 8 * v31);
          *unint64_t v36 = *v25;
          uint64_t v29 = (char *)(v36 + 1);
          void *v25 = -1;
          while (v27 != v30)
          {
            uint64_t v37 = *((void *)v27 - 1);
            v27 -= 8;
            *--unint64_t v36 = v37;
            *(void *)uint64_t v27 = -1;
          }
          v12[1] = (uint64_t)v36;
          void v12[2] = (uint64_t)v29;
          v12[3] = v34 + 8 * v35;
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          *(void *)uint64_t v27 = *v25;
          void *v25 = -1;
          uint64_t v29 = v27 + 8;
        }
        void v12[2] = (uint64_t)v29;
        ++v25;
        uint64_t v27 = v29;
      }
      while (v25 != v26);
    }
    long long v44 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::LookupBucketFor<unsigned long>(*(void *)(a1 + 144), *(_DWORD *)(a1 + 160), a4, &v44))
    {
      int v38 = v44;
      uint64_t v39 = (void *)v44[1];
      if (v39)
      {
        v44[2] = v39;
        operator delete(v39);
      }
      *int v38 = -2;
      *(int32x2_t *)(a1 + 152) = vadd_s32(*(int32x2_t *)(a1 + 152), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  uint64_t v41 = *(uint64_t **)(a1 + 168);
  uint64_t v40 = *(uint64_t **)(a1 + 176);
  while (v41 != v40)
  {
    uint64_t v42 = *v41++;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v42 + 64))(v42, a2, a3, a4);
  }
}

void non-virtual thunk to'llvm::orc::ObjectLinkingLayer::handleTransferResources(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void *llvm::RTTIExtends<llvm::orc::ObjectLinkingLayer,llvm::orc::ObjectLayer>::dynamicClassID()
{
  return &llvm::orc::ObjectLinkingLayer::ID;
}

uint64_t llvm::RTTIExtends<llvm::orc::ObjectLinkingLayer,llvm::orc::ObjectLayer>::isA(uint64_t a1, void *a2)
{
  BOOL v3 = a2 == &llvm::orc::ObjectLayer::ID || a2 == &llvm::RTTIRoot::ID;
  return a2 == &llvm::orc::ObjectLinkingLayer::ID || v3;
}

void anonymous namespace'::LinkGraphMaterializationUnit::~LinkGraphMaterializationUnit(_anonymous_namespace_::LinkGraphMaterializationUnit *this)
{
  *(void *)this = &unk_270DBE518;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)this + 6, 0);
  *(void *)this = &unk_270DBDAF0;
  uint64_t v2 = *((void *)this + 4);
  if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)this + 1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_270DBE518;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)this + 6, 0);
  *(void *)this = &unk_270DBDAF0;
  uint64_t v2 = *((void *)this + 4);
  if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)this + 1);
  JUMPOUT(0x263E500B0);
}

uint64_t anonymous namespace'::LinkGraphMaterializationUnit::getName(_anonymous_namespace_::LinkGraphMaterializationUnit *this)
{
  uint64_t v1 = *((void *)this + 6);
  uint64_t v4 = *(void *)(v1 + 96);
  uint64_t v2 = v1 + 96;
  uint64_t v3 = v4;
  if (*(char *)(v2 + 23) >= 0) {
    return v2;
  }
  else {
    return v3;
  }
}

void anonymous namespace'::LinkGraphMaterializationUnit::materialize(uint64_t a1, void *a2)
{
  *a2 = 0;
  *(void *)(a1 + 48) = 0;
  llvm::orc::ObjectLinkingLayer::emit();
}

void anonymous namespace'::LinkGraphMaterializationUnit::discard(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::jitlink::LinkGraph::defined_symbols(*(llvm::jitlink::LinkGraph **)(a1 + 48), v14);
  v12[0] = v14[0];
  v12[1] = v14[1];
  void v12[2] = v14[2];
  long long v13 = v15;
  uint64_t v5 = v16;
  uint64_t v6 = v17;
  uint64_t v7 = (const void ***)v15;
  if (*(void *)&v14[0] != v16 || (void)v15 != v17)
  {
    while (1)
    {
      uint64_t v8 = *v7;
      size_t v9 = (size_t)(*v7)[1];
      if (v9 == **(void **)a3 && (!v9 || !memcmp(*v8, (const void *)(*(void *)a3 + 16), v9))) {
        break;
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v12, (uint64_t)&v11);
      uint64_t v7 = (const void ***)v13;
      if (*(void *)&v12[0] == v5 && (void)v13 == v6) {
        return;
      }
    }
    llvm::jitlink::LinkGraph::makeExternal(*(void *)(a1 + 48), (uint64_t)v8);
  }
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<llvm::jitlink::JITLinkMemoryManager::deallocate(std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)::{lambda(llvm::Error)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *a1;
  uint64_t v5 = v2;
  std::promise<llvm::MSVCPError>::set_value(v3, &v5);
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

void *std::__function::__value_func<void ()(std::unique_ptr<llvm::MemoryBuffer>)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::destroyAll(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 32 * v1;
    uint64_t v3 = (void *)(*(void *)a1 + 16);
    do
    {
      if (*(v3 - 2) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v4 = (void *)*(v3 - 1);
        if (v4)
        {
          *uint64_t v3 = v4;
          operator delete(v4);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

void std::vector<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::__clear[abi:nn180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::__clear[abi:nn180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void llvm::orc::ObjectLinkingLayerJITLinkContext::~ObjectLinkingLayerJITLinkContext(llvm::orc::ObjectLinkingLayerJITLinkContext *this)
{
  llvm::orc::ObjectLinkingLayerJITLinkContext::~ObjectLinkingLayerJITLinkContext(this);
  JUMPOUT(0x263E500B0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  uint64_t v2 = *((void *)this + 2);
  if (*(void *)(v2 + 136))
  {
    uint64_t v3 = *((void *)this + 4);
    if (v3)
    {
      *((void *)this + 4) = 0;
      size_t v9 = v3;
      uint64_t v4 = *(void *)(v2 + 136);
      if (!v4)
      {
        uint64_t v8 = std::__throw_bad_function_call[abi:nn180100]();
        llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallImpl<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>)#1}>(v8);
        return;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 48))(v4, &v9);
      uint64_t v5 = v9;
      size_t v9 = 0;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  uint64_t v10 = (void **)((char *)this + 64);
  std::vector<llvm::orc::SymbolDependenceGroup>::__destroy_vector::operator()[abi:nn180100](&v10);
  MEMORY[0x263E500A0](*((void *)this + 5), 8);
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (uint64_t *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7) {
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)this + 24, v7);
  }
}

uint64_t llvm::orc::ObjectLinkingLayerJITLinkContext::getMemoryManager(llvm::orc::ObjectLinkingLayerJITLinkContext *this)
{
  return *(void *)(*((void *)this + 2) + 88);
}

void llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  memset(__p, 0, sizeof(__p));
  uint64_t v6 = *(uint64_t **)(a1 + 24);
  uint64_t v7 = *v6;
  uint64_t v8 = *(std::recursive_mutex **)(*v6 + 32);
  std::recursive_mutex::lock(v8);
  if (__p != (void **)(v7 + 208)) {
    std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>::__assign_with_size[abi:nn180100]<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>*,std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>*>(__p, *(long long **)(v7 + 208), *(long long **)(v7 + 216), (uint64_t)(*(void *)(v7 + 216) - *(void *)(v7 + 208)) >> 4);
  }
  std::recursive_mutex::unlock(v8);
  size_t v9 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
  uint64_t v23 = 0;
  long long v10 = 0uLL;
  long long v22 = 0u;
  if (!*((_DWORD *)a2 + 2)) {
    goto LABEL_18;
  }
  uint64_t v11 = *((unsigned int *)a2 + 4);
  if (v11)
  {
    uint64_t v12 = 24 * v11;
    uint64_t v13 = *a2;
    while (*(void *)v13 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v13 += 24;
      v12 -= 24;
      if (!v12) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    uint64_t v13 = *a2;
  }
  uint64_t v14 = *a2 + 24 * v11;
  if (v13 == v14)
  {
LABEL_18:
    uint64_t v17 = 0;
  }
  else
  {
    long long v15 = *(uint64_t **)v13;
    do
    {
      BOOL v16 = *(_DWORD *)(v13 + 16) == 1;
      llvm::orc::ExecutorProcessControl::intern(v9[9], v15, *(void *)(v13 + 8), (unint64_t **)&v21);
      llvm::orc::SymbolLookupSet::add((uint64_t *)&v22, (uint64_t *)&v21, v16);
      if ((unint64_t)v21 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add(v21 + 1, 0xFFFFFFFFFFFFFFFFLL);
      }
      do
      {
        v13 += 24;
        if (v13 == v14) {
          goto LABEL_17;
        }
        long long v15 = *(uint64_t **)v13;
      }
      while (*(void *)v13 >= 0xFFFFFFFFFFFFFFFELL);
    }
    while (v13 != v14);
LABEL_17:
    long long v10 = v22;
    uint64_t v17 = v23;
  }
  uint64_t v18 = *a3;
  *a3 = 0;
  long long v19 = v10;
  uint64_t v20 = v17;
  uint64_t v23 = 0;
  long long v22 = 0uLL;
  *(void *)&long long v26 = v18;
  uint64_t v27 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallbacksHolder<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>)#1},llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>)#1},void>::Callbacks
      + 6;
  v25[0] = &unk_270DBE5B8;
  v25[1] = a1;
  v25[3] = v25;
  llvm::orc::ExecutionSession::lookup((llvm::orc::ExecutionSession *)v9, 0, (uint64_t)__p, (uint64_t **)&v19, 3, &v26);
}

uint64_t *llvm::orc::ObjectLinkingLayerJITLinkContext::notifyResolved@<X0>(llvm::orc::ObjectLinkingLayerJITLinkContext *this@<X0>, llvm::jitlink::LinkGraph *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v6 = *((void *)this + 2);
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  int v93 = 0;
  int v8 = *(unsigned __int8 *)(v6 + 105);
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  unsigned int v90 = 0;
  llvm::jitlink::LinkGraph::defined_symbols(a2, v84);
  v82[0] = v84[0];
  v82[1] = v84[1];
  v82[2] = v84[2];
  long long v83 = v85;
  uint64_t v9 = v86;
  uint64_t v10 = v87;
  uint64_t v11 = (uint64_t *)v85;
  if (*(void *)&v84[0] != v86 || (void)v85 != v87)
  {
    do
    {
      uint64_t v12 = *v11;
      unint64_t v13 = *(void *)(*v11 + 8);
      if (v13 && (*(void *)(v12 + 24) & 0xC00000000000000) != 0x800000000000000)
      {
        llvm::orc::ExecutorProcessControl::intern(*(void *)(v7 + 72), *(uint64_t **)v12, v13, (unint64_t **)&v76);
        long long v15 = *(void **)(v12 + 16);
        unint64_t v14 = *(void *)(v12 + 24);
        unsigned int v16 = *((_DWORD *)v3 + 36);
        BOOL v17 = v16 > 0x24;
        uint64_t v18 = (1 << v16) & 0x1800000006;
        if (v17 || v18 == 0) {
          uint64_t v20 = *v15 + (v14 & 0x1FFFFFFFFFFFFFFLL);
        }
        else {
          uint64_t v20 = (v14 & 0x1FFFFFFFFFFFFFFLL) + (v14 >> 63) + *v15;
        }
        unint64_t v21 = HIBYTE(v14);
        if ((v14 & 0xC00000000000000) != 0) {
          unsigned __int16 v22 = HIBYTE(v14) & 2;
        }
        else {
          unsigned __int16 v22 = HIBYTE(v14) & 2 | 0x10;
        }
        __int16 v23 = (v22 | v21 & 0x20) << 8;
        uint64_t v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct((uint64_t *)&v88, (uint64_t *)&v76);
        v24[1] = v20;
        *((_WORD *)v24 + 8) = v23;
        if (v8)
        {
          int v25 = (uint64_t *)(*((void *)this + 3) + 16);
          *(void *)&long long v80 = 0;
          if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v25, &v76, &v80) & 1) == 0)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v91, (uint64_t *)&v76)[4] = v23; {
        }
          }
        if ((unint64_t)(v76 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v76 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v82, (uint64_t)&v80);
      uint64_t v11 = (uint64_t *)v83;
    }
    while (*(void *)&v82[0] != v9 || (void)v83 != v10);
  }
  uint64_t v75 = a3;
  uint64_t v27 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)v3 + 232);
  uint64_t v29 = *((void *)v3 + 29) + 8 * *((unsigned int *)v3 + 62);
  if ((void *)v29 != v27)
  {
    uint64_t v30 = v27;
    uint64_t v31 = v28;
    unint64_t v32 = v3;
    do
    {
      uint64_t v33 = *v30;
      unint64_t v34 = *(void *)(*v30 + 8);
      if (v34 && (*(void *)(v33 + 24) & 0xC00000000000000) != 0x800000000000000)
      {
        llvm::orc::ExecutorProcessControl::intern(*(void *)(v7 + 72), *(uint64_t **)v33, v34, (unint64_t **)v82);
        unint64_t v36 = *(void **)(v33 + 16);
        unint64_t v35 = *(void *)(v33 + 24);
        unsigned int v37 = *((_DWORD *)v3 + 36);
        BOOL v17 = v37 > 0x24;
        uint64_t v38 = (1 << v37) & 0x1800000006;
        if (v17 || v38 == 0) {
          uint64_t v40 = *v36 + (v35 & 0x1FFFFFFFFFFFFFFLL);
        }
        else {
          uint64_t v40 = (v35 & 0x1FFFFFFFFFFFFFFLL) + (v35 >> 63) + *v36;
        }
        unint64_t v41 = HIBYTE(v35);
        if ((v35 & 0xC00000000000000) != 0) {
          unsigned __int16 v42 = HIBYTE(v35) & 2;
        }
        else {
          unsigned __int16 v42 = HIBYTE(v35) & 2 | 0x10;
        }
        __int16 v43 = (v42 | v41 & 0x20) << 8;
        long long v44 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct((uint64_t *)&v88, (uint64_t *)v82);
        v44[1] = v40;
        *((_WORD *)v44 + 8) = v43;
        if (v8)
        {
          long long v45 = (uint64_t *)(*((void *)this + 3) + 16);
          *(void *)&v84[0] = 0;
          if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v45, v82, v84) & 1) == 0)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v91, (uint64_t *)v82)[4] = v43; {
        }
          }
        uint64_t v3 = v32;
        if ((unint64_t)(*(void *)&v82[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v82[0] + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
      }
      while (++v30 != v31)
      {
        if ((*v30 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_45;
        }
      }
      uint64_t v30 = v31;
LABEL_45:
      ;
    }
    while (v30 != (void *)v29);
  }
  if (!v92) {
    goto LABEL_50;
  }
  long long v46 = (uint64_t *)*((void *)this + 3);
  long long v78 = 0uLL;
  int v79 = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::copyFrom((uint64_t)&v78, (uint64_t)&v91);
  v84[0] = v78;
  long long v78 = 0uLL;
  LODWORD(v84[1]) = v79;
  int v79 = 0;
  llvm::orc::ExecutionSession::OL_defineMaterializing(v46, (int32x2_t *)v84, v75);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)v84);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)&v78);
  if (!*v75)
  {
LABEL_50:
    unint64_t v81 = 0;
    long long v80 = 0uLL;
    uint64_t v47 = *((void *)this + 3);
    unsigned int v48 = *(_DWORD *)(v47 + 24);
    if (!v48) {
      goto LABEL_79;
    }
    unint64_t v49 = *(uint64_t **)(v47 + 16);
    uint64_t v50 = *(unsigned int *)(v47 + 32);
    if (v50)
    {
      uint64_t v51 = 16 * v50;
      uint64_t v52 = v49;
      while ((*v52 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v52 += 2;
        v51 -= 16;
        if (!v51) {
          goto LABEL_79;
        }
      }
    }
    else
    {
      uint64_t v52 = v49;
    }
    long long v53 = &v49[2 * v50];
    if (v52 == v53)
    {
LABEL_79:
      uint64_t v54 = 0;
    }
    else
    {
      uint64_t v54 = 0;
LABEL_59:
      *(void *)&v84[0] = 0;
      int v55 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)&v88, v52, v84);
      long long v56 = *(uint64_t **)&v84[0];
      if (!v55) {
        long long v56 = &v88[3 * v90];
      }
      if ((*((unsigned char *)v52 + 9) & 0x40) != 0)
      {
        ++v54;
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::erase((uint64_t)&v88, v52);
      }
      else if (v56 == &v88[3 * v90])
      {
        uint64_t v57 = *((void *)&v80 + 1);
        if (*((void *)&v80 + 1) >= v81)
        {
          unint64_t v59 = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>((char **)&v80, v52);
        }
        else
        {
          uint64_t v58 = *v52;
          **((void **)&v80 + 1) = *v52;
          if ((unint64_t)(v58 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(v58 + 8), 1uLL);
          }
          unint64_t v59 = (char *)(v57 + 8);
        }
        *((void *)&v80 + 1) = v59;
      }
      else if (*(unsigned char *)(*((void *)this + 2) + 104))
      {
        *((_WORD *)v56 + 8) = *((_WORD *)v52 + 4);
      }
      while (1)
      {
        v52 += 2;
        if (v52 == v53) {
          break;
        }
        if ((*v52 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v52 != v53) {
            goto LABEL_59;
          }
          break;
        }
      }
      if ((void)v80 != *((void *)&v80 + 1))
      {
        uint64_t v60 = *(void *)(*(void *)(*(void *)(*((void *)this + 2) + 8) + 72) + 16);
        if (v60) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
        }
        operator new();
      }
      unsigned int v48 = *(_DWORD *)(*((void *)this + 3) + 24);
    }
    long long v76 = 0uLL;
    unint64_t v77 = 0;
    if ((unint64_t)v48 - v54 < v89 && v89)
    {
      if (v90)
      {
        uint64_t v61 = 24 * v90;
        uint64_t v62 = v88;
        while ((*v62 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v62 += 3;
          v61 -= 24;
          if (!v61) {
            goto LABEL_103;
          }
        }
      }
      else
      {
        uint64_t v62 = v88;
      }
      int64_t v63 = &v88[3 * v90];
      if (v62 != v63)
      {
LABEL_89:
        int64_t v64 = (uint64_t *)(*((void *)this + 3) + 16);
        *(void *)&v84[0] = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v64, v62, v84) & 1) == 0)
        {
          uint64_t v65 = *((void *)&v76 + 1);
          if (*((void *)&v76 + 1) >= v77)
          {
            long long v67 = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>((char **)&v76, v62);
          }
          else
          {
            uint64_t v66 = *v62;
            **((void **)&v76 + 1) = *v62;
            if ((unint64_t)(v66 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add((atomic_ullong *volatile)(v66 + 8), 1uLL);
            }
            long long v67 = (char *)(v65 + 8);
          }
          *((void *)&v76 + 1) = v67;
        }
        while (1)
        {
          v62 += 3;
          if (v62 == v63) {
            break;
          }
          if ((*v62 | 8) != 0xFFFFFFFFFFFFFFF8)
          {
            if (v62 != v63) {
              goto LABEL_89;
            }
            break;
          }
        }
        if ((void)v76 != *((void *)&v76 + 1))
        {
          uint64_t v68 = *(void *)(*(void *)(*(void *)(*((void *)this + 2) + 8) + 72) + 16);
          if (v68) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
          }
          operator new();
        }
      }
    }
LABEL_103:
    *(void *)&v84[0] = &v76;
    std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)v84);
    *(void *)&v84[0] = &v80;
    std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)v84);
    llvm::orc::JITDylib::resolve(**((void **)this + 3), *((void *)this + 3), (uint64_t)&v88, v75);
    if (!*v75)
    {
      uint64_t v69 = *((void *)this + 2);
      BOOL v70 = *(uint64_t **)(v69 + 168);
      unint64_t v71 = *(uint64_t **)(v69 + 176);
      if (v70 != v71)
      {
        uint64_t v72 = *((void *)this + 3);
        do
        {
          uint64_t v73 = *v70++;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v73 + 32))(v73, v72);
        }
        while (v70 != v71);
      }
      void *v75 = 0;
    }
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t *)&v88);
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(&v91);
}

void llvm::orc::ObjectLinkingLayerJITLinkContext::notifyFinalized(void *a1, uint64_t *a2)
{
  uint64_t v4 = (void *)a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = *a2;
  *a2 = -1;
  uint64_t v6 = v4[21];
  uint64_t v7 = v4[22];
  if (v6 != v7)
  {
    int v8 = 0;
    do
    {
      (*(void (**)(void ***__return_ptr))(**(void **)v6 + 40))(&v35);
      unsigned int v37 = v35;
      uint64_t v38 = v8;
      unint64_t v35 = 0;
      llvm::ErrorList::join(&v38, &v37, &v36);
      if (v37) {
        (*((void (**)(void **))*v37 + 1))(v37);
      }
      if (v38) {
        (*((void (**)(void **))*v38 + 1))(v38);
      }
      int v8 = v36;
      unint64_t v36 = 0;
      if (v35) {
        (*((void (**)(void **))*v35 + 1))(v35);
      }
      v6 += 8;
    }
    while (v6 != v7);
    if (v8)
    {
      if (v5 != -1)
      {
        uint64_t v9 = v4[11];
        uint64_t v34 = v5;
        llvm::jitlink::JITLinkMemoryManager::deallocate((uint64_t)&v37, v9, &v34);
      }
      uint64_t v19 = *(void *)(a1[2] + 8);
      uint64_t v33 = v8;
      llvm::orc::ExecutionSession::reportError(v19, (uint64_t *)&v33);
      uint64_t v20 = (uint64_t)v33;
      if (!v33) {
        goto LABEL_20;
      }
LABEL_19:
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
LABEL_20:
      llvm::orc::ExecutionSession::OL_notifyFailed(*(void *)(*(void *)a1[3] + 32), a1[3]);
      return;
    }
  }
  if (v5 != -1)
  {
    uint64_t v10 = *(void *)(v3 + 8);
    unint64_t v11 = atomic_load((unint64_t *)(v10 + 8));
    uint64_t v12 = *(std::recursive_mutex **)((v11 & 0xFFFFFFFFFFFFFFFELL) + 32);
    std::recursive_mutex::lock(v12);
    char v13 = atomic_load((unint64_t *)(v10 + 8));
    if (v13) {
      operator new();
    }
    uint64_t v38 = (void **)v10;
    unint64_t v14 = llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::FindAndConstruct((uint64_t)(v4 + 18), (uint64_t *)&v38);
    long long v15 = v14;
    BOOL v17 = (char *)v14[2];
    unint64_t v16 = v14[3];
    if ((unint64_t)v17 >= v16)
    {
      unint64_t v21 = (char *)v14[1];
      uint64_t v22 = (v17 - v21) >> 3;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61) {
        abort();
      }
      uint64_t v24 = v16 - (void)v21;
      if (v24 >> 2 > v23) {
        unint64_t v23 = v24 >> 2;
      }
      BOOL v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v25) {
        unint64_t v26 = v23;
      }
      if (v26)
      {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v26);
        unint64_t v21 = (char *)v15[1];
        BOOL v17 = (char *)v15[2];
      }
      else
      {
        uint64_t v27 = 0;
      }
      uint64_t v28 = (void *)(v26 + 8 * v22);
      unint64_t v29 = v26 + 8 * v27;
      void *v28 = v5;
      for (i = v28 + 1; v17 != v21; *(void *)BOOL v17 = -1)
      {
        uint64_t v30 = *((void *)v17 - 1);
        v17 -= 8;
        *--uint64_t v28 = v30;
      }
      v15[1] = (uint64_t)v28;
      _OWORD v15[2] = (uint64_t)i;
      long long v15[3] = v29;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(void *)BOOL v17 = v5;
      uint64_t i = v17 + 8;
    }
    _OWORD v15[2] = (uint64_t)i;
    std::recursive_mutex::unlock(v12);
  }
  llvm::orc::ExecutionSession::OL_notifyEmitted(*(std::recursive_mutex **)(*(void *)a1[3] + 32), a1[3], a1[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[9] - a1[8]) >> 4), &v38);
  if (v38)
  {
    uint64_t v31 = *(void *)(a1[2] + 8);
    unint64_t v32 = v38;
    llvm::orc::ExecutionSession::reportError(v31, (uint64_t *)&v32);
    uint64_t v20 = (uint64_t)v32;
    if (!v32) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
}

uint64_t llvm::orc::ObjectLinkingLayerJITLinkContext::getMarkLivePass@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  a2[3] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::ObjectLinkingLayerJITLinkContext::getMarkLivePass(llvm::Triple const&)::{lambda(llvm::jitlink::LinkGraph &)#1},llvm::orc::ObjectLinkingLayerJITLinkContext::getMarkLivePass(llvm::Triple const&)::{lambda(llvm::jitlink::LinkGraph &)#1},void>::Callbacks
        + 2;
  return result;
}

void *llvm::orc::ObjectLinkingLayerJITLinkContext::modifyPassConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  *(void *)&long long v37 = a1;
  uint64_t v38 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::ObjectLinkingLayerJITLinkContext::modifyPassConfig(llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1},llvm::orc::ObjectLinkingLayerJITLinkContext::modifyPassConfig(llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1},void>::Callbacks
      + 2;
  unint64_t v8 = a3[2];
  unint64_t v9 = a3[1];
  if (v9 >= v8)
  {
    uint64_t v11 = (uint64_t)(v9 - *a3) >> 5;
    if ((unint64_t)(v11 + 1) >> 59) {
      goto LABEL_29;
    }
    uint64_t v12 = v8 - *a3;
    uint64_t v13 = v12 >> 4;
    if (v12 >> 4 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    unint64_t v36 = a3 + 2;
    if (v14) {
      long long v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a3 + 2), v14);
    }
    else {
      long long v15 = 0;
    }
    unint64_t v32 = v15;
    uint64_t v33 = &v15[32 * v11];
    unint64_t v35 = &v15[32 * v14];
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v33, &v37);
    uint64_t v34 = (uint64_t)(v33 + 32);
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a3, &v32);
    uint64_t v10 = a3[1];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v32);
  }
  else
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a3[1], &v37);
    uint64_t v10 = v9 + 32;
  }
  a3[1] = v10;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v37);
  uint64_t v16 = *(void *)(a1 + 16);
  BOOL v17 = *(uint64_t **)(v16 + 168);
  uint64_t v18 = *(uint64_t **)(v16 + 176);
  if (v17 != v18)
  {
    uint64_t v19 = *(void *)(a1 + 24);
    do
    {
      uint64_t v20 = *v17++;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v20 + 16))(v20, v19, a2, a3);
    }
    while (v17 != v18);
  }
  unint64_t v21 = a3[11];
  *(void *)&long long v37 = a1;
  uint64_t v38 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::ObjectLinkingLayerJITLinkContext::modifyPassConfig(llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#2},llvm::orc::ObjectLinkingLayerJITLinkContext::modifyPassConfig(llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#2},void>::Callbacks
      + 2;
  unint64_t v22 = a3[10];
  if (v22 < v21)
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a3[10], &v37);
    uint64_t v23 = v22 + 32;
    goto LABEL_28;
  }
  uint64_t v24 = a3[9];
  uint64_t v25 = (uint64_t)(v22 - v24) >> 5;
  if ((unint64_t)(v25 + 1) >> 59) {
LABEL_29:
  }
    abort();
  uint64_t v26 = v21 - v24;
  uint64_t v27 = v26 >> 4;
  if (v26 >> 4 <= (unint64_t)(v25 + 1)) {
    uint64_t v27 = v25 + 1;
  }
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v28 = v27;
  }
  unint64_t v36 = a3 + 11;
  if (v28) {
    unint64_t v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a3 + 11), v28);
  }
  else {
    unint64_t v29 = 0;
  }
  uint64_t v30 = (uint64_t)&v29[32 * v25];
  unint64_t v32 = v29;
  uint64_t v33 = (char *)v30;
  unint64_t v35 = &v29[32 * v28];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v30, &v37);
  uint64_t v34 = v30 + 32;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a3 + 9, &v32);
  uint64_t v23 = a3[10];
  std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v32);
LABEL_28:
  a3[10] = v23;
  uint64_t result = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v37);
  *a4 = 0;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallImpl<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  char v32 = *(unsigned char *)(a2 + 24) & 1;
  uint64_t v5 = *(void *)a2;
  if (!v32)
  {
    uint64_t v30 = *(void *)(a2 + 8);
    int v6 = v30;
    uint64_t v7 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v8 = *(unsigned int *)(a2 + 16);
    int v31 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    uint64_t v29 = v5;
    *(void *)a2 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    unsigned int v27 = 0;
    if (v6)
    {
      if (v8)
      {
        uint64_t v9 = 24 * v8;
        uint64_t v10 = v5;
        while ((*(void *)v10 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v10 += 24;
          v9 -= 24;
          if (!v9) {
            goto LABEL_26;
          }
        }
      }
      else
      {
        uint64_t v10 = v5;
      }
      uint64_t v14 = v5 + 24 * v8;
      if (v10 != v14)
      {
        long long v15 = *(uint64_t **)v10;
LABEL_13:
        uint64_t v16 = *v15;
        *(void *)&long long v24 = v15 + 2;
        *((void *)&v24 + 1) = v16;
        uint64_t v28 = 0;
        char v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>,llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::StringRef>(&v25, (uint64_t)&v24, &v28, a4);
        uint64_t v18 = v28;
        if (v17)
        {
LABEL_19:
          uint64_t v20 = *(void *)(v10 + 8);
          *(_WORD *)(v18 + 24) = *(_WORD *)(v10 + 16);
          *(void *)(v18 + 16) = v20;
          while (1)
          {
            v10 += 24;
            if (v10 == v14) {
              break;
            }
            long long v15 = *(uint64_t **)v10;
            if ((*(void *)v10 | 8) != 0xFFFFFFFFFFFFFFF8)
            {
              if (v10 != v14) {
                goto LABEL_13;
              }
              break;
            }
          }
          uint64_t v13 = v25;
          uint64_t v7 = v26;
          unsigned int v12 = v27;
          goto LABEL_28;
        }
        int v19 = v27;
        if (4 * (int)v26 + 4 >= 3 * v27)
        {
          int v19 = 2 * v27;
        }
        else if (v27 + ~v26 - HIDWORD(v26) > v27 >> 3)
        {
LABEL_16:
          LODWORD(v26) = v26 + 1;
          if (*(void *)v18 != -1) {
            --HIDWORD(v26);
          }
          *(_OWORD *)uint64_t v18 = v24;
          *(void *)(v18 + 16) = 0;
          *(void *)(v18 + 24) = 0;
          goto LABEL_19;
        }
        llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>::grow((uint64_t)&v25, v19);
        uint64_t v28 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>,llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::StringRef>(&v25, (uint64_t)&v24, &v28, v21);
        uint64_t v18 = v28;
        goto LABEL_16;
      }
LABEL_26:
      unsigned int v12 = 0;
      uint64_t v13 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      unsigned int v12 = 0;
      uint64_t v13 = 0;
    }
LABEL_28:
    uint64_t v22 = *a1;
    char v35 = 0;
    v33[0] = v13;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    v33[1] = v7;
    unsigned int v34 = v12;
    unsigned int v27 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v22 + 16))(v22, v33);
    llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>::~Expected(v33);
    MEMORY[0x263E500A0](v25, 8);
    return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v29);
  }
  *(void *)a2 = 0;
  uint64_t v11 = *a1;
  uint64_t v29 = 0;
  char v37 = -1;
  v36[0] = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 16))(v11, v36);
  llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>::~Expected(v36);
  return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v29);
}

void *llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::MoveImpl<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>)#1}>(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::DestroyImpl<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>)#1}>(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 24);
  uint64_t v3 = *a1;
  if (v2)
  {
    *a1 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    MEMORY[0x263E500A0](v3, 8);
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>,llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, void *a3, unint64_t *a4)
{
  int v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    uint64_t v7 = *a1;
    unsigned int v8 = v5 - 1;
    uint64_t v9 = (v5 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a2, *(void *)a2 + *(void *)(a2 + 8), (uint64_t)a3, a4);
    uint64_t v10 = v7 + 32 * v9;
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(void *)(a2 + 8), *(void **)v10, *(void *)(v10 + 8)))
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      int v14 = v9;
      while (*(void *)v10 != -1)
      {
        if (v12) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = *(void *)v10 == -2;
        }
        if (v15) {
          uint64_t v16 = v10;
        }
        else {
          uint64_t v16 = v12;
        }
        int v17 = v13 + 1;
        uint64_t v18 = (v14 + v13) & v8;
        uint64_t v10 = v7 + 32 * v18;
        BOOL isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(void *)(a2 + 8), *(void **)v10, *(void *)(v10 + 8));
        int v14 = v18;
        uint64_t v12 = v16;
        BOOL v20 = isEqual;
        uint64_t result = 1;
        int v13 = v17;
        if (v20) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v12) {
        uint64_t v10 = v12;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      uint64_t v12 = 32 * v11;
      do
      {
        *uint64_t result = xmmword_261E8A6B0;
        result += 2;
        v12 -= 32;
      }
      while (v12);
    }
    if (v3)
    {
      uint64_t v13 = 32 * v3;
      int v14 = (_OWORD *)v4;
      do
      {
        if (*(void *)v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>,llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v14, &v18, v10);
          BOOL v15 = v18;
          *uint64_t v18 = *v14;
          v15[1] = v14[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v14 += 2;
        v13 -= 32;
      }
      while (v13);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 32 * v16;
    do
    {
      *uint64_t result = xmmword_261E8A6B0;
      result += 2;
      v17 -= 32;
    }
    while (v17);
  }
  return result;
}

void std::__function::__func<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1},std::allocator<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1}>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::~__func()
{
}

void *std::__function::__func<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1},std::allocator<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1}>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270DBE5B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1},std::allocator<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1}>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270DBE5B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1},std::allocator<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1}>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::operator()(uint64_t result, uint64_t *a2)
{
  if (!*((_DWORD *)a2 + 2)) {
    return result;
  }
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *((unsigned int *)a2 + 4);
  if (v3)
  {
    uint64_t v4 = 32 * v3;
    for (uint64_t i = *a2; (*(void *)i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 32)
    {
      v4 -= 32;
      if (!v4) {
        return result;
      }
    }
  }
  else
  {
    uint64_t i = *a2;
  }
  uint64_t v6 = *a2 + 32 * v3;
  if (i == v6) {
    return result;
  }
LABEL_9:
  uint64_t result = (uint64_t)llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(i + 8);
  uint64_t v8 = *(void *)(i + 8) + 8 * *(unsigned int *)(i + 24);
  if (v8 == result) {
    goto LABEL_26;
  }
  uint64_t v9 = (uint64_t *)result;
  uint64_t v10 = v7;
  do
  {
    uint64_t v11 = *(void *)i;
    uint64_t v12 = *v9;
    uint64_t v16 = 0;
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(v2 + 40), *(_DWORD *)(v2 + 56), v12, &v16);
    uint64_t v13 = v16;
    if ((result & 1) == 0)
    {
      int v14 = *(_DWORD *)(v2 + 48);
      unsigned int v15 = *(_DWORD *)(v2 + 56);
      if (4 * v14 + 4 >= 3 * v15)
      {
        v15 *= 2;
      }
      else if (v15 + ~v14 - *(_DWORD *)(v2 + 52) > v15 >> 3)
      {
LABEL_14:
        ++*(_DWORD *)(v2 + 48);
        if (*v13 != -8) {
          --*(_DWORD *)(v2 + 52);
        }
        *uint64_t v13 = v12;
        v13[1] = 0;
        goto LABEL_17;
      }
      llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>::grow(v2 + 40, v15);
      uint64_t v16 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(v2 + 40), *(_DWORD *)(v2 + 56), v12, &v16);
      uint64_t v13 = v16;
      goto LABEL_14;
    }
LABEL_17:
    v13[1] = v11;
    while (++v9 != v10)
    {
      if ((*v9 | 8) != 0xFFFFFFFFFFFFFFF8) {
        goto LABEL_22;
      }
    }
    uint64_t v9 = v10;
LABEL_22:
    ;
  }
  while (v9 != (uint64_t *)v8);
LABEL_26:
  while (1)
  {
    i += 32;
    if (i == v6) {
      return result;
    }
    if ((*(void *)i | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (i != v6) {
        goto LABEL_9;
      }
      return result;
    }
  }
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::ObjectLinkingLayerJITLinkContext::getMarkLivePass(llvm::Triple const&)::{lambda(llvm::jitlink::LinkGraph &)#1}>(llvm::jitlink::LinkGraph *this@<X1>, uint64_t *a2@<X0>, void *a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*(void *)(*a2 + 16) + 8);
  llvm::jitlink::LinkGraph::defined_symbols(this, v18);
  v16[0] = v18[0];
  v16[1] = v18[1];
  uint64_t v16[2] = v18[2];
  long long v17 = v19;
  uint64_t v6 = v20;
  uint64_t v7 = v21;
  uint64_t v8 = (uint64_t *)v19;
  if (*(void *)&v18[0] != v20 || (void)v19 != v21)
  {
    do
    {
      uint64_t v9 = *v8;
      unint64_t v10 = *(void *)(*v8 + 8);
      if (v10)
      {
        uint64_t v11 = (uint64_t *)(*(void *)(v4 + 24) + 16);
        llvm::orc::ExecutorProcessControl::intern(*(void *)(v5 + 72), *(uint64_t **)v9, v10, (unint64_t **)&v15);
        v14[0] = 0;
        int v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v11, &v15, v14);
        if ((unint64_t)v15 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add(v15 + 1, 0xFFFFFFFFFFFFFFFFLL);
        }
        if (v12) {
          *(void *)(v9 + 24) |= 0x1000000000000000uLL;
        }
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v16, (uint64_t)v14);
      uint64_t v8 = (uint64_t *)v17;
    }
    while (*(void *)&v16[0] != v6 || (void)v17 != v7);
  }
  *a3 = 0;
}

uint64_t *llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::ObjectLinkingLayerJITLinkContext::modifyPassConfig(llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1}>@<X0>(llvm::jitlink::LinkGraph *this@<X1>, uint64_t *a2@<X0>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(*(void *)(*a2 + 16) + 8);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  int v48 = 0;
  __int16 v43 = 0;
  long long v44 = 0;
  uint64_t v45 = 0;
  v42[0] = v6;
  v42[1] = v5;
  long long v42[2] = &v46;
  v42[3] = &v43;
  llvm::jitlink::LinkGraph::defined_symbols(this, &v36);
  long long v32 = v36;
  long long v33 = v37;
  long long v34 = v38;
  long long v35 = v39;
  uint64_t v7 = v40;
  uint64_t v8 = v41;
  uint64_t v9 = (uint64_t *)v39;
  if ((void)v36 != v40 || (void)v39 != v41)
  {
    do
    {
      llvm::orc::ObjectLinkingLayerJITLinkContext::claimOrExternalizeWeakAndCommonSymbols(llvm::jitlink::LinkGraph &)::{lambda(llvm::jitlink::Symbol *)#1}::operator()((uint64_t)v42, *v9);
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)&v32, (uint64_t)&v31);
      uint64_t v9 = (uint64_t *)v35;
    }
    while ((void)v32 != v7 || (void)v35 != v8);
  }
  uint64_t v11 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)this + 232);
  uint64_t v13 = *((void *)this + 29) + 8 * *((unsigned int *)this + 62);
  if ((uint64_t *)v13 != v11)
  {
    int v14 = v11;
    unsigned int v15 = v12;
    do
    {
      uint64_t v16 = *v14++;
      llvm::orc::ObjectLinkingLayerJITLinkContext::claimOrExternalizeWeakAndCommonSymbols(llvm::jitlink::LinkGraph &)::{lambda(llvm::jitlink::Symbol *)#1}::operator()((uint64_t)v42, v16);
      while (v14 != v15)
      {
        if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_15;
        }
        ++v14;
      }
      int v14 = v15;
LABEL_15:
      ;
    }
    while (v14 != (uint64_t *)v13);
  }
  long long v17 = *(uint64_t **)(v5 + 24);
  uint64_t v18 = v46;
  uint64_t v46 = 0;
  int v19 = v48;
  int v48 = 0;
  *(void *)&long long v36 = v18;
  long long v32 = 0uLL;
  uint64_t v20 = v47;
  uint64_t v47 = 0;
  *((void *)&v36 + 1) = v20;
  LODWORD(v37) = v19;
  LODWORD(v33) = 0;
  llvm::orc::ExecutionSession::OL_defineMaterializing(v17, (int32x2_t *)&v36, a3);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)&v36);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)&v32);
  uint64_t v21 = v43;
  if (*a3)
  {
    if (!v43) {
      return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(&v46);
    }
    goto LABEL_26;
  }
  uint64_t v22 = v44;
  if (v43 != v44)
  {
    do
    {
      uint64_t v23 = (uint64_t *)(*(void *)(v5 + 24) + 16);
      *(void *)&long long v36 = 0;
      int v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v23, v21, &v36);
      uint64_t v25 = v21[1];
      if (v24) {
        *(void *)(v25 + 24) |= 0x1000000000000000uLL;
      }
      else {
        llvm::jitlink::LinkGraph::makeExternal((uint64_t)this, v25);
      }
      v21 += 2;
    }
    while (v21 != v22);
    uint64_t v21 = v43;
  }
  *a3 = 0;
  if (v21)
  {
LABEL_26:
    uint64_t v26 = v44;
    unsigned int v27 = v21;
    if (v44 != v21)
    {
      do
      {
        uint64_t v29 = *(v26 - 2);
        v26 -= 2;
        uint64_t v28 = v29;
        if ((unint64_t)(v29 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v28 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
      }
      while (v26 != v21);
      unsigned int v27 = v43;
    }
    long long v44 = v21;
    operator delete(v27);
  }
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(&v46);
}

void llvm::orc::ObjectLinkingLayerJITLinkContext::claimOrExternalizeWeakAndCommonSymbols(llvm::jitlink::LinkGraph &)::{lambda(llvm::jitlink::Symbol *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if ((v4 & 0x200000000000000) != 0 && (v4 & 0xC00000000000000) != 0x800000000000000)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      llvm::orc::ExecutorProcessControl::intern(*(void *)(*(void *)a1 + 72), *(uint64_t **)a2, v2, (unint64_t **)&v30);
      uint64_t v7 = (uint64_t *)(*(void *)(v6 + 24) + 16);
      llvm::orc::ExecutorProcessControl::intern(*(void *)(*(void *)a1 + 72), *(uint64_t **)a2, *(void *)(a2 + 8), (unint64_t **)&v29);
      uint64_t v31 = 0;
      char v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v7, &v29, &v31);
      if ((unint64_t)v29 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add(v29 + 1, 0xFFFFFFFFFFFFFFFFLL);
      }
      if ((v8 & 1) == 0)
      {
        unint64_t v9 = *(void *)(a2 + 24);
        uint64_t v10 = HIBYTE(v9) & 0x20;
        if ((v9 & 0xC00000000000000) != 0) {
          __int16 v11 = 2;
        }
        else {
          __int16 v11 = 18;
        }
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(*(uint64_t **)(a1 + 16), (uint64_t *)&v30)[4] = ((unsigned __int16)v11 | (unsigned __int16)v10) << 8;
        int v12 = *(atomic_ullong ****)(a1 + 24);
        uint64_t v13 = v30;
        uint64_t v30 = 0;
        unsigned int v15 = v12[1];
        unint64_t v14 = (unint64_t)v12[2];
        if ((unint64_t)v15 >= v14)
        {
          long long v17 = *v12;
          uint64_t v18 = ((char *)v15 - (char *)*v12) >> 4;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60) {
            abort();
          }
          uint64_t v20 = v14 - (void)v17;
          if (v20 >> 3 > v19) {
            unint64_t v19 = v20 >> 3;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v22 = (char *)operator new(16 * v21);
          uint64_t v23 = (atomic_ullong **)&v22[16 * v18];
          int v24 = (atomic_ullong **)&v22[16 * v21];
          uint64_t *v23 = v13;
          v23[1] = (atomic_ullong *)a2;
          uint64_t v16 = v23 + 2;
          if (v15 == v17)
          {
            *int v12 = v23;
            v12[1] = v16;
            void v12[2] = v24;
          }
          else
          {
            do
            {
              uint64_t v25 = *(v15 - 2);
              v15 -= 2;
              *(v23 - 2) = v25;
              v23 -= 2;
              *unsigned int v15 = 0;
              v23[1] = v15[1];
            }
            while (v15 != v17);
            unsigned int v15 = *v12;
            uint64_t v26 = v12[1];
            *int v12 = v23;
            v12[1] = v16;
            void v12[2] = v24;
            while (v26 != v15)
            {
              uint64_t v28 = (uint64_t)*(v26 - 2);
              v26 -= 2;
              uint64_t v27 = v28;
              if ((unint64_t)(v28 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                atomic_fetch_add((atomic_ullong *volatile)(v27 + 8), 0xFFFFFFFFFFFFFFFFLL);
              }
            }
          }
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *unsigned int v15 = v13;
          v15[1] = (atomic_ullong *)a2;
          uint64_t v16 = v15 + 2;
        }
        v12[1] = v16;
      }
      if ((unint64_t)v30 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add(v30 + 1, 0xFFFFFFFFFFFFFFFFLL);
      }
    }
  }
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::ObjectLinkingLayerJITLinkContext::modifyPassConfig(llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#2}>@<X0>(llvm::jitlink::LinkGraph *this@<X1>, uint64_t *a2@<X0>, void *a3@<X8>)
{
  uint64_t v153 = *a2;
  uint64_t v170 = 0;
  int32x2_t v171 = 0;
  unsigned int v172 = 0;
  if (*((_DWORD *)this + 48))
  {
    uint64_t v4 = *((unsigned int *)this + 50);
    if (v4)
    {
      uint64_t v5 = 24 * v4;
      uint64_t v6 = (void *)*((void *)this + 23);
      while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v6 += 3;
        v5 -= 24;
        if (!v5) {
          goto LABEL_16;
        }
      }
    }
    else
    {
      uint64_t v6 = (void *)*((void *)this + 23);
    }
    uint64_t v7 = *((void *)this + 23) + 24 * v4;
    if (v6 != (void *)v7)
    {
      int v8 = 0;
LABEL_10:
      v8 += *(_DWORD *)(v6[2] + 40);
      while (1)
      {
        v6 += 3;
        if (v6 == (void *)v7) {
          break;
        }
        if (*v6 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v6 != (void *)v7) {
            goto LABEL_10;
          }
          break;
        }
      }
      if (v8)
      {
        unint64_t v9 = (4 * v8 / 3u + 1) | ((unint64_t)(4 * v8 / 3u + 1) >> 1);
        unint64_t v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
        llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::grow((uint64_t)&v170, (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1);
      }
    }
  }
LABEL_16:
  llvm::jitlink::LinkGraph::defined_symbols(this, &__p);
  long long v160 = __p;
  long long v161 = v165;
  long long v162 = v166;
  long long v163 = v167;
  uint64_t v11 = v168;
  uint64_t v12 = v169;
  uint64_t v13 = (unint64_t **)v167;
  if ((void)__p != v168 || (void)v167 != v169)
  {
    do
    {
      v173 = 0;
      unint64_t v14 = *v13;
      v173 = (atomic_ullong *)v14;
      if ((v14[3] & 0xC00000000000000) != 0x800000000000000)
      {
        uint64_t v159 = v14[2];
        unsigned int v15 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::FindAndConstruct((uint64_t)&v170, &v159);
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v15 + 2), &v173, (uint64_t)&v156);
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)&v160, (uint64_t)&v156);
      uint64_t v13 = (unint64_t **)v163;
    }
    while ((void)v160 != v11 || (void)v163 != v12);
  }
  llvm::jitlink::LinkGraph::blocks(this, &__p);
  long long v160 = __p;
  long long v161 = v165;
  long long v162 = v166;
  long long v163 = v167;
  uint64_t v17 = v168;
  uint64_t v18 = v169;
  unint64_t v19 = (atomic_ullong **)v167;
  if ((void)__p != v168 || (void)v167 != v169)
  {
    do
    {
      v173 = 0;
      v173 = *v19;
      uint64_t v20 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::FindAndConstruct((uint64_t)&v170, (uint64_t *)&v173);
      unint64_t v21 = v173[5];
      unint64_t v22 = v173[6];
      if (v21 != v22)
      {
        uint64_t v23 = (uint64_t)(v20 + 5);
        uint64_t v24 = (uint64_t)(v20 + 8);
        do
        {
          uint64_t v25 = *(void *)(*(void *)(*(void *)v21 + 16) + 8);
          if ((v25 & 3) != 0)
          {
            if ((v25 & 2) == 0)
            {
              uint64_t v156 = *(void *)(*(void *)v21 + 16);
              uint64_t v26 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::FindAndConstruct((uint64_t)&v170, &v156);
              uint64_t v27 = v26;
              if (*((_DWORD *)v26 + 6))
              {
                uint64_t v28 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v26 + 2));
                llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v23, v28, (uint64_t)&v156);
              }
              else
              {
                uint64_t v159 = *(void *)(*(void *)v21 + 16);
                llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v24, &v159, (uint64_t)&v156);
                llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v27 + 11), &v173, (uint64_t)&v156);
              }
            }
          }
          else
          {
            uint64_t v159 = *(void *)v21;
            llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v23, &v159, (uint64_t)&v156);
          }
          v21 += 32;
        }
        while (v21 != v22);
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)&v160, (uint64_t)&v156);
      unint64_t v19 = (atomic_ullong **)v163;
    }
    while ((void)v160 != v17 || (void)v163 != v18);
  }
  long long v160 = 0uLL;
  *(void *)&long long v161 = 0;
  if (!v171.i32[0])
  {
    long long v165 = 0u;
    long long v166 = 0u;
    long long __p = 0u;
    goto LABEL_228;
  }
  if (v172)
  {
    uint64_t v30 = 112 * v172;
    uint64_t v31 = v170;
    while ((*(void *)v31 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v31 += 112;
      v30 -= 112;
      if (!v30) {
        goto LABEL_135;
      }
    }
  }
  else
  {
    uint64_t v31 = v170;
  }
  if (v31 != v170 + 112 * v172)
  {
    uint64_t v150 = v170 + 112 * v172;
    do
    {
      if (!*(_DWORD *)(v31 + 24))
      {
        uint64_t v32 = *((void *)&v160 + 1);
        if (*((void *)&v160 + 1) >= (unint64_t)v161)
        {
          uint64_t v34 = (uint64_t)(*((void *)&v160 + 1) - v160) >> 3;
          if ((unint64_t)(v34 + 1) >> 61) {
            abort();
          }
          unint64_t v35 = (uint64_t)(v161 - v160) >> 2;
          if (v35 <= v34 + 1) {
            unint64_t v35 = v34 + 1;
          }
          if ((void)v161 - (void)v160 >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36) {
            long long v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v161, v36);
          }
          else {
            long long v37 = 0;
          }
          long long v38 = &v37[8 * v34];
          *(void *)long long v38 = *(void *)v31;
          long long v33 = v38 + 8;
          long long v39 = (char *)*((void *)&v160 + 1);
          uint64_t v40 = (char *)v160;
          if (*((void *)&v160 + 1) != (void)v160)
          {
            do
            {
              uint64_t v41 = *((void *)v39 - 1);
              v39 -= 8;
              *((void *)v38 - 1) = v41;
              v38 -= 8;
            }
            while (v39 != v40);
            long long v39 = (char *)v160;
          }
          *(void *)&long long v160 = v38;
          *((void *)&v160 + 1) = v33;
          *(void *)&long long v161 = &v37[8 * v36];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          **((void **)&v160 + 1) = *(void *)v31;
          long long v33 = (void *)(v32 + 8);
        }
        *((void *)&v160 + 1) = v33;
        uint64_t v154 = v31 + 64;
        unsigned __int16 v42 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v31 + 64);
        uint64_t v44 = *(void *)(v31 + 64) + 8 * *(unsigned int *)(v31 + 80);
        if ((uint64_t *)v44 != v42)
        {
          uint64_t v45 = v42;
          uint64_t v46 = v43;
          do
          {
            *(void *)&long long __p = 0;
            uint64_t v47 = *v45++;
            *(void *)&long long __p = v47;
            int v48 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::FindAndConstruct((uint64_t)&v170, (uint64_t *)&__p);
            llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase((uint64_t)(v48 + 11), (void *)v31);
            while (v45 != v46)
            {
              if ((*v45 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                goto LABEL_75;
              }
              ++v45;
            }
            uint64_t v45 = v46;
LABEL_75:
            ;
          }
          while (v45 != (uint64_t *)v44);
        }
        unint64_t v49 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v31 + 88);
        uint64_t v51 = *(void *)(v31 + 88) + 8 * *(unsigned int *)(v31 + 104);
        if ((uint64_t *)v51 != v49)
        {
          uint64_t v52 = v49;
          long long v53 = v50;
          do
          {
            *(void *)&long long __p = 0;
            uint64_t v54 = *v52++;
            *(void *)&long long __p = v54;
            int v55 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::FindAndConstruct((uint64_t)&v170, (uint64_t *)&__p);
            llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase((uint64_t)(v55 + 8), (void *)v31);
            while (v52 != v53)
            {
              if ((*v52 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                goto LABEL_83;
              }
              ++v52;
            }
            uint64_t v52 = v53;
LABEL_83:
            ;
          }
          while (v52 != (uint64_t *)v51);
        }
        long long v56 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v154);
        uint64_t v58 = *(void *)(v31 + 64) + 8 * *(unsigned int *)(v31 + 80);
        if ((uint64_t *)v58 != v56)
        {
          unint64_t v59 = v56;
          uint64_t v60 = v57;
          do
          {
            uint64_t v156 = 0;
            uint64_t v156 = *v59;
            uint64_t v61 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::FindAndConstruct((uint64_t)&v170, &v156);
            uint64_t v62 = (unint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v31 + 88);
            uint64_t v64 = *(void *)(v31 + 88) + 8 * *(unsigned int *)(v31 + 104);
            if ((unint64_t **)v64 == v62) {
              goto LABEL_94;
            }
            uint64_t v65 = v62;
            uint64_t v66 = v63;
            do
            {
              v173 = 0;
              long long v67 = *v65++;
              v173 = (atomic_ullong *)v67;
              llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v61 + 11), &v173, (uint64_t)&__p);
              while (v65 != v66)
              {
                if (((unint64_t)*v65 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                  goto LABEL_93;
                }
                ++v65;
              }
              uint64_t v65 = v66;
LABEL_93:
              ;
            }
            while (v65 != (unint64_t **)v64);
LABEL_94:
            while (++v59 != v60)
            {
              if ((*v59 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                goto LABEL_98;
              }
            }
            unint64_t v59 = v60;
LABEL_98:
            ;
          }
          while (v59 != (uint64_t *)v58);
        }
        uint64_t v68 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v31 + 88);
        uint64_t v70 = *(void *)(v31 + 88) + 8 * *(unsigned int *)(v31 + 104);
        if ((uint64_t *)v70 != v68)
        {
          unint64_t v71 = v68;
          uint64_t v72 = v69;
          do
          {
            uint64_t v156 = 0;
            uint64_t v156 = *v71;
            uint64_t v73 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::FindAndConstruct((uint64_t)&v170, &v156);
            char v74 = (unint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v31 + 40);
            uint64_t v76 = *(void *)(v31 + 40) + 8 * *(unsigned int *)(v31 + 56);
            if ((unint64_t **)v76 != v74)
            {
              unint64_t v77 = v74;
              long long v78 = v75;
              do
              {
                v173 = 0;
                int v79 = *v77++;
                v173 = (atomic_ullong *)v79;
                llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v73 + 5), &v173, (uint64_t)&__p);
                while (v77 != v78)
                {
                  if (((unint64_t)*v77 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                    goto LABEL_108;
                  }
                  ++v77;
                }
                unint64_t v77 = v78;
LABEL_108:
                ;
              }
              while (v77 != (unint64_t **)v76);
            }
            long long v80 = (unint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v154);
            uint64_t v82 = *(void *)(v31 + 64) + 8 * *(unsigned int *)(v31 + 80);
            if ((unint64_t **)v82 == v80) {
              goto LABEL_117;
            }
            long long v83 = v80;
            uint64_t v84 = v81;
            do
            {
              v173 = 0;
              long long v85 = *v83++;
              v173 = (atomic_ullong *)v85;
              llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v73 + 8), &v173, (uint64_t)&__p);
              while (v83 != v84)
              {
                if (((unint64_t)*v83 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                  goto LABEL_116;
                }
                ++v83;
              }
              long long v83 = v84;
LABEL_116:
              ;
            }
            while (v83 != (unint64_t **)v82);
LABEL_117:
            while (++v71 != v72)
            {
              if ((*v71 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                goto LABEL_121;
              }
            }
            unint64_t v71 = v72;
LABEL_121:
            ;
          }
          while (v71 != (uint64_t *)v70);
        }
      }
      v31 += 112;
      if (v31 == v150) {
        break;
      }
      while ((*(void *)v31 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v31 += 112;
        if (v31 == v150) {
          goto LABEL_127;
        }
      }
    }
    while (v31 != v150);
LABEL_127:
    uint64_t v86 = (uint64_t *)*((void *)&v160 + 1);
    uint64_t v87 = (uint64_t *)v160;
    if ((void)v160 != *((void *)&v160 + 1))
    {
      uint64_t v88 = v170;
      int v89 = v172;
      int32x2_t v90 = v171;
      do
      {
        uint64_t v91 = *v87;
        *(void *)&long long __p = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::LookupBucketFor<llvm::jitlink::Block *>(v88, v89, v91, &__p))
        {
          uint64_t v92 = (void *)__p;
          MEMORY[0x263E500A0](*(void *)(__p + 88), 8);
          MEMORY[0x263E500A0](v92[8], 8);
          MEMORY[0x263E500A0](v92[5], 8);
          MEMORY[0x263E500A0](v92[2], 8);
          *uint64_t v92 = -8192;
          int32x2_t v90 = vadd_s32(v90, (int32x2_t)0x1FFFFFFFFLL);
        }
        ++v87;
      }
      while (v87 != v86);
      int32x2_t v171 = v90;
      uint64_t v87 = (uint64_t *)v160;
    }
    if (v87)
    {
      *((void *)&v160 + 1) = v87;
      operator delete(v87);
    }
  }
LABEL_135:
  int v93 = v172;
  uint64_t v94 = v170;
  long long v165 = 0u;
  long long v166 = 0u;
  long long __p = 0u;
  if (!v171.i32[0])
  {
LABEL_228:
    uint64_t v138 = 0;
    *a3 = 0;
    goto LABEL_229;
  }
  uint64_t v95 = v170 + 112 * v172;
  uint64_t v96 = v170;
  if (v172)
  {
    uint64_t v97 = 112 * v172;
    uint64_t v96 = v170;
    do
    {
      if ((*(void *)v96 | 0x1000) != 0xFFFFFFFFFFFFF000) {
        goto LABEL_141;
      }
      v96 += 112;
      v97 -= 112;
    }
    while (v97);
    int v93 = 1;
    goto LABEL_176;
  }
LABEL_141:
  if (v96 != v95)
  {
LABEL_142:
    if (*(_DWORD *)(v96 + 48) && *(_DWORD *)(v96 + 96))
    {
      std::deque<llvm::jitlink::Block *>::push_back(&__p, (void *)v96);
      *(unsigned char *)(v96 + 8) = 1;
    }
    while (1)
    {
      v96 += 112;
      if (v96 == v95) {
        break;
      }
      if ((*(void *)v96 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (v96 != v95) {
          goto LABEL_142;
        }
        break;
      }
    }
    uint64_t v98 = *((void *)&v166 + 1);
    if (*((void *)&v166 + 1))
    {
      do
      {
        uint64_t v99 = *((void *)&__p + 1);
        uint64_t v100 = v166;
        uint64_t v156 = *(void *)(*(void *)(*((void *)&__p + 1) + (((unint64_t)v166 >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * (v166 & 0x1FF));
        --v98;
        *(void *)&long long v166 = v166 + 1;
        *((void *)&v166 + 1) = v98;
        if ((unint64_t)v166 >= 0x400)
        {
          operator delete(**((void ***)&__p + 1));
          *((void *)&__p + 1) = v99 + 8;
          *(void *)&long long v166 = v100 - 511;
        }
        uint64_t v101 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::FindAndConstruct((uint64_t)&v170, &v156);
        *((unsigned char *)v101 + 8) = 0;
        uint64_t v102 = (atomic_ullong **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v101 + 11));
        uint64_t v104 = v101[11] + 8 * *((unsigned int *)v101 + 26);
        if ((atomic_ullong **)v104 != v102)
        {
          uint64_t v105 = v102;
          unint64_t v106 = v103;
          do
          {
            v173 = 0;
            v173 = *v105;
            unint64_t v107 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::FindAndConstruct((uint64_t)&v170, (uint64_t *)&v173);
            std::string v108 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v101 + 5));
            uint64_t v110 = v101[5] + 8 * *((unsigned int *)v101 + 14);
            if ((uint64_t *)v110 == v108) {
              goto LABEL_166;
            }
            uint64_t v111 = v108;
            unint64_t v112 = v109;
            do
            {
              uint64_t v159 = 0;
              uint64_t v159 = *v111;
              llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v107 + 5), &v159, (uint64_t)&v160);
              if ((_BYTE)v161) {
                BOOL v113 = *((unsigned char *)v107 + 8) == 0;
              }
              else {
                BOOL v113 = 0;
              }
              if (v113)
              {
                std::deque<llvm::jitlink::Block *>::push_back(&__p, &v173);
                *((unsigned char *)v107 + 8) = 1;
              }
              while (++v111 != v112)
              {
                if ((*v111 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                  goto LABEL_165;
                }
              }
              uint64_t v111 = v112;
LABEL_165:
              ;
            }
            while (v111 != (uint64_t *)v110);
LABEL_166:
            while (++v105 != v106)
            {
              if (((unint64_t)*v105 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                goto LABEL_170;
              }
            }
            uint64_t v105 = v106;
LABEL_170:
            ;
          }
          while (v105 != (atomic_ullong **)v104);
          uint64_t v98 = *((void *)&v166 + 1);
        }
      }
      while (v98);
      uint64_t v94 = v170;
      uint64_t v155 = **(void **)(v153 + 24);
      uint64_t v156 = 0;
      uint64_t v114 = *(void *)(v155 + 32);
      uint64_t v157 = 0;
      unsigned int v158 = 0;
      if (v171.i32[0])
      {
        uint64_t v95 = v170 + 112 * v172;
        if (v172) {
          goto LABEL_177;
        }
        goto LABEL_180;
      }
      goto LABEL_228;
    }
  }
LABEL_176:
  uint64_t v155 = **(void **)(v153 + 24);
  uint64_t v156 = 0;
  uint64_t v114 = *(void *)(v155 + 32);
  uint64_t v157 = 0;
  unsigned int v158 = 0;
  if (v93)
  {
LABEL_177:
    while ((*(void *)v94 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v94 += 112;
      if (v94 == v95) {
        goto LABEL_228;
      }
    }
  }
LABEL_180:
  if (v94 == v95) {
    goto LABEL_228;
  }
LABEL_181:
  if (!*(_DWORD *)(v94 + 24)) {
    goto LABEL_218;
  }
  long long v161 = 0u;
  long long v162 = 0u;
  long long v160 = 0u;
  std::vector<llvm::orc::SymbolDependenceGroup>::push_back[abi:nn180100]((uint64_t *)(v153 + 64), (uint64_t)&v160);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t *)&v161 + 1);
  MEMORY[0x263E500A0](*((void *)&v161 + 1), 8);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t *)&v160);
  uint64_t v151 = *(void *)(v153 + 72);
  unint64_t v115 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v94 + 16);
  uint64_t v117 = *(void *)(v94 + 16) + 8 * *(unsigned int *)(v94 + 32);
  if ((uint64_t *)v117 != v115)
  {
    uint64_t v118 = v115;
    uint64_t v119 = v116;
    do
    {
      uint64_t v120 = *v118;
      *(void *)&long long v160 = *v118;
      unint64_t v121 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr>>,llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr>>::FindAndConstruct((uint64_t)&v156, (uint64_t *)&v160);
      long long v122 = (atomic_ullong *)v121[1];
      if (!v122)
      {
        uint64_t v123 = v121;
        llvm::orc::ExecutorProcessControl::intern(*(void *)(v114 + 72), *(uint64_t **)v120, *(void *)(v120 + 8), (unint64_t **)&v173);
        uint64_t v124 = v123[1];
        if ((unint64_t)(v124 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v124 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        long long v122 = v173;
        v123[1] = (uint64_t)v173;
      }
      v173 = v122;
      if ((unint64_t)v122 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add(v122 + 1, 1uLL);
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>(v151 - 48, &v173, (uint64_t)&v160);
      if ((unint64_t)v173 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add(v173 + 1, 0xFFFFFFFFFFFFFFFFLL);
      }
      while (++v118 != v119)
      {
        if ((*v118 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_196;
        }
      }
      uint64_t v118 = v119;
LABEL_196:
      ;
    }
    while (v118 != (uint64_t *)v117);
  }
  long long v125 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v94 + 40);
  uint64_t v127 = *(void *)(v94 + 40) + 8 * *(unsigned int *)(v94 + 56);
  if ((uint64_t *)v127 == v125) {
    goto LABEL_218;
  }
  uint64_t v128 = v125;
  unint64_t v129 = v126;
  char v130 = (uint64_t *)(v151 - 24);
  do
  {
    uint64_t v131 = *v128;
    *(void *)&long long v160 = *v128;
    char v132 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr>>,llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr>>::FindAndConstruct((uint64_t)&v156, (uint64_t *)&v160);
    uint64_t v133 = (atomic_ullong *)v132[1];
    if (!v133)
    {
      uint64_t v134 = v132;
      llvm::orc::ExecutorProcessControl::intern(*(void *)(v114 + 72), *(uint64_t **)v131, *(void *)(v131 + 8), (unint64_t **)&v173);
      uint64_t v135 = v134[1];
      if ((unint64_t)(v135 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v135 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      uint64_t v133 = v173;
      v134[1] = (uint64_t)v173;
    }
    v173 = v133;
    if ((unint64_t)v133 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add(v133 + 1, 1uLL);
    }
    if (*(unsigned char *)(*(void *)(v131 + 16) + 8))
    {
      uint64_t v159 = v155;
      v136 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v130, &v159)+ 1;
      goto LABEL_210;
    }
    *(void *)&long long v160 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(v153 + 40), *(_DWORD *)(v153 + 56), (uint64_t)v173, &v160)&& (void)v160 != *(void *)(v153 + 40) + 16 * *(unsigned int *)(v153 + 56))
    {
      v136 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v130, (uint64_t *)(v160 + 8))+ 1;
LABEL_210:
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v136, &v173, (uint64_t)&v160);
    }
    if ((unint64_t)v173 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add(v173 + 1, 0xFFFFFFFFFFFFFFFFLL);
    }
    while (++v128 != v129)
    {
      if ((*v128 | 0x1000) != 0xFFFFFFFFFFFFF000) {
        goto LABEL_217;
      }
    }
    uint64_t v128 = v129;
LABEL_217:
    ;
  }
  while (v128 != (uint64_t *)v127);
LABEL_218:
  while (1)
  {
    v94 += 112;
    if (v94 == v95) {
      break;
    }
    if ((*(void *)v94 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (v94 != v95) {
        goto LABEL_181;
      }
      break;
    }
  }
  uint64_t v137 = v158;
  uint64_t v138 = v156;
  *a3 = 0;
  if (v137)
  {
    uint64_t v139 = v138 + 8;
    uint64_t v140 = 16 * v137;
    do
    {
      if ((*(void *)(v139 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000
        && (unint64_t)(*(void *)v139 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        atomic_fetch_add((atomic_ullong *volatile)(*(void *)v139 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v139 += 16;
      v140 -= 16;
    }
    while (v140);
    uint64_t v138 = v156;
  }
LABEL_229:
  MEMORY[0x263E500A0](v138, 8);
  uint64_t v141 = (void **)*((void *)&__p + 1);
  v142 = (void **)v165;
  unint64_t v143 = v165 - *((void *)&__p + 1);
  if ((void)v165 - *((void *)&__p + 1) >= 0x11uLL)
  {
    do
    {
      uint64_t v144 = *v141++;
      operator delete(v144);
      v143 -= 8;
    }
    while (v143 > 0x10);
  }
  while (v141 != v142)
  {
    uint64_t v145 = *v141++;
    operator delete(v145);
  }
  if ((void)__p) {
    operator delete((void *)__p);
  }
  uint64_t v146 = v170;
  if (v172)
  {
    uint64_t v147 = (void *)(v170 + 64);
    uint64_t v148 = 112 * v172;
    do
    {
      if ((*(v147 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        MEMORY[0x263E500A0](v147[3], 8);
        MEMORY[0x263E500A0](*v147, 8);
        MEMORY[0x263E500A0](*(v147 - 3), 8);
        MEMORY[0x263E500A0](*(v147 - 6), 8);
      }
      v147 += 14;
      v148 -= 112;
    }
    while (v148);
  }
  return MEMORY[0x263E500A0](v146, 8);
}

void std::deque<llvm::jitlink::Block *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[1];
  uint64_t v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v4;
      uint64_t v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          unsigned __int16 v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v41);
          uint64_t v44 = &v42[8 * (v41 >> 2)];
          uint64_t v45 = (uint64_t *)a1[1];
          uint64_t v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            uint64_t v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            int v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)int v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          uint64_t v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            uint64_t v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          unint64_t v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            uint64_t v5 = (char *)a1[1];
          }
          uint64_t v23 = &v5[8 * v19];
          uint64_t v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)uint64_t v5 = v12;
LABEL_35:
      a1[2] += 8;
LABEL_36:
      uint64_t v4 = (char *)a1[1];
      uint64_t v8 = a1[5];
      unint64_t v10 = a1[4] + v8;
      goto LABEL_37;
    }
    uint64_t v24 = v6 >> 3;
    uint64_t v25 = (char *)a1[3];
    uint64_t v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      uint64_t v28 = operator new(0x1000uLL);
      uint64_t v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = (v25 - v4) >> 2;
          }
          uint64_t v52 = 2 * v51;
          long long v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v51);
          uint64_t v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          int v55 = (uint64_t *)a1[1];
          long long v56 = v4;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            long long v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            unint64_t v59 = v4;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)unint64_t v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          uint64_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            uint64_t v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        uint64_t v62 = (char *)a1[1];
        int64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            uint64_t v97 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v96);
            uint64_t v99 = &v97[8 * (v96 >> 2)];
            uint64_t v100 = (uint64_t *)a1[1];
            int64_t v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              int64_t v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              unint64_t v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)unint64_t v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            uint64_t v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              int64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v16 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v16) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            unint64_t v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              uint64_t v62 = (char *)a1[1];
            }
            int64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)int64_t v63 = v64;
      }
      else
      {
        *(void *)uint64_t v5 = v28;
      }
      goto LABEL_35;
    }
    uint64_t v30 = v27 >> 2;
    if (v25 == v26) {
      unint64_t v31 = 1;
    }
    else {
      unint64_t v31 = v30;
    }
    uint64_t v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v31);
    uint64_t v34 = v33;
    unint64_t v35 = &v32[8 * v24];
    unint64_t v36 = &v32[8 * v33];
    long long v37 = operator new(0x1000uLL);
    if (v24 == v34)
    {
      uint64_t v38 = 8 * v24;
      if (v6 < 1)
      {
        uint64_t v73 = v37;
        uint64_t v74 = v38 >> 2;
        if (v5 == v4) {
          unint64_t v75 = 1;
        }
        else {
          unint64_t v75 = v74;
        }
        uint64_t v76 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v75);
        unint64_t v35 = &v76[8 * (v75 >> 2)];
        unint64_t v36 = &v76[8 * v77];
        if (v32) {
          operator delete(v32);
        }
        uint64_t v32 = v76;
        long long v37 = v73;
      }
      else
      {
        uint64_t v39 = v38 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v35 -= 8 * (v40 >> 1);
      }
    }
    *(void *)unint64_t v35 = v37;
    long long v78 = v35 + 8;
    uint64_t v79 = a1[2];
    if (v79 == a1[1])
    {
      uint64_t v94 = v35;
      long long v80 = v35 + 8;
LABEL_82:
      uint64_t v95 = (char *)*a1;
      *a1 = v32;
      a1[1] = v94;
      a1[2] = v80;
      a1[3] = v36;
      if (v95) {
        operator delete(v95);
      }
      goto LABEL_36;
    }
    while (1)
    {
      if (v35 == v32)
      {
        if (v78 < v36)
        {
          uint64_t v82 = (v36 - v78) >> 3;
          if (v82 >= -1) {
            unint64_t v83 = v82 + 1;
          }
          else {
            unint64_t v83 = v82 + 2;
          }
          long long v80 = &v78[8 * (v83 >> 1)];
          unint64_t v81 = &v35[8 * (v83 >> 1)];
          if (v78 == v35) {
            unint64_t v35 = v78;
          }
          else {
            memmove(&v35[8 * (v83 >> 1)], v35, v78 - v35);
          }
          goto LABEL_78;
        }
        if (v36 == v35) {
          unint64_t v84 = 1;
        }
        else {
          unint64_t v84 = (v36 - v35) >> 2;
        }
        uint64_t v85 = 2 * v84;
        uint64_t v86 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v84);
        uint64_t v32 = v86;
        unint64_t v81 = &v86[(v85 + 6) & 0xFFFFFFFFFFFFFFF8];
        long long v80 = v81;
        uint64_t v88 = v78 - v35;
        if (v78 != v35)
        {
          long long v80 = &v81[v88 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v89 = 8 * (v88 >> 3);
          int32x2_t v90 = v81;
          uint64_t v91 = v35;
          do
          {
            uint64_t v92 = *(void *)v91;
            v91 += 8;
            *(void *)int32x2_t v90 = v92;
            v90 += 8;
            v89 -= 8;
          }
          while (v89);
        }
        unint64_t v36 = &v86[8 * v87];
        operator delete(v35);
      }
      else
      {
        long long v80 = v78;
        unint64_t v81 = v35;
      }
      unint64_t v35 = v32;
LABEL_78:
      uint64_t v32 = v35;
      uint64_t v93 = *(void *)(v79 - 8);
      v79 -= 8;
      *((void *)v81 - 1) = v93;
      uint64_t v94 = v81 - 8;
      long long v78 = v80;
      unint64_t v35 = v94;
      if (v79 == a1[1]) {
        goto LABEL_82;
      }
    }
  }
LABEL_37:
  *(void *)(*(void *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void *llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(112 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 112 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 14;
        v11 -= 112;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 112 * v3;
      uint64_t v13 = v4 + 52;
      do
      {
        uint64_t v14 = *(void *)(v13 - 52);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v26 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v26);
          uint64_t v15 = v26;
          void *v26 = *(void *)(v13 - 52);
          *((unsigned char *)v15 + 8) = *(unsigned char *)(v13 - 44);
          *((_DWORD *)v15 + 8) = 0;
          _OWORD v15[2] = 0;
          long long v15[3] = 0;
          _OWORD v15[2] = *(void *)(v13 - 36);
          *(void *)(v13 - 36) = 0;
          *((_DWORD *)v15 + 6) = *(_DWORD *)(v13 - 28);
          *(_DWORD *)(v13 - 28) = 0;
          int v16 = *((_DWORD *)v15 + 7);
          *((_DWORD *)v15 + 7) = *(_DWORD *)(v13 - 24);
          *(_DWORD *)(v13 - 24) = v16;
          int v17 = *((_DWORD *)v15 + 8);
          *((_DWORD *)v15 + 8) = *(_DWORD *)(v13 - 20);
          *(_DWORD *)(v13 - 20) = v17;
          *((_DWORD *)v15 + 14) = 0;
          v15[5] = 0;
          v15[6] = 0;
          v15[5] = *(void *)(v13 - 12);
          *(void *)(v13 - 12) = 0;
          *((_DWORD *)v15 + 12) = *(_DWORD *)(v13 - 4);
          *(_DWORD *)(v13 - 4) = 0;
          int v18 = *((_DWORD *)v15 + 13);
          *((_DWORD *)v15 + 13) = *(_DWORD *)v13;
          *(_DWORD *)uint64_t v13 = v18;
          int v19 = *((_DWORD *)v15 + 14);
          *((_DWORD *)v15 + 14) = *(_DWORD *)(v13 + 4);
          *(_DWORD *)(v13 + 4) = v19;
          v15[8] = 0;
          v15[9] = 0;
          *((_DWORD *)v15 + 20) = 0;
          v15[8] = *(void *)(v13 + 12);
          *(void *)(v13 + 12) = 0;
          *((_DWORD *)v15 + 18) = *(_DWORD *)(v13 + 20);
          *(_DWORD *)(v13 + 20) = 0;
          int v20 = *((_DWORD *)v15 + 19);
          *((_DWORD *)v15 + 19) = *(_DWORD *)(v13 + 24);
          *(_DWORD *)(v13 + 24) = v20;
          int v21 = *((_DWORD *)v15 + 20);
          *((_DWORD *)v15 + 20) = *(_DWORD *)(v13 + 28);
          *(_DWORD *)(v13 + 28) = v21;
          v15[11] = 0;
          v15[12] = 0;
          *((_DWORD *)v15 + 26) = 0;
          v15[11] = *(void *)(v13 + 36);
          *(void *)(v13 + 36) = 0;
          *((_DWORD *)v15 + 24) = *(_DWORD *)(v13 + 44);
          *(_DWORD *)(v13 + 44) = 0;
          int v22 = *((_DWORD *)v15 + 25);
          *((_DWORD *)v15 + 25) = *(_DWORD *)(v13 + 48);
          *(_DWORD *)(v13 + 48) = v22;
          int v23 = *((_DWORD *)v15 + 26);
          *((_DWORD *)v15 + 26) = *(_DWORD *)(v13 + 52);
          *(_DWORD *)(v13 + 52) = v23;
          ++*(_DWORD *)(a1 + 8);
          MEMORY[0x263E500A0](0, 8);
          MEMORY[0x263E500A0](*(void *)(v13 + 12), 8);
          MEMORY[0x263E500A0](*(void *)(v13 - 12), 8);
          MEMORY[0x263E500A0](*(void *)(v13 - 36), 8);
        }
        v13 += 112;
        v12 -= 112;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v24 = *(unsigned int *)(a1 + 16);
  if (v24)
  {
    uint64_t v25 = 112 * v24;
    do
    {
      *uint64_t result = -4096;
      result += 14;
      v25 -= 112;
    }
    while (v25);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::LookupBucketFor<llvm::jitlink::Block *>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 112 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        unint64_t v6 = (void *)(a1 + 112 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        unint64_t v6 = v10;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  unsigned int v5 = v7;
  if ((v4 & 1) == 0)
  {
    unsigned int v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::InsertIntoBucketImpl<llvm::jitlink::Block *>(a1, a2, v7);
    void *v5 = *a2;
    v5[13] = 0;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::InsertIntoBucketImpl<llvm::jitlink::Block *>(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::registerDependencies(llvm::jitlink::LinkGraph &)::BlockInfo>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr>>,llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr>>::grow(a1, v7);
    uint64_t v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t result = *a2;
  result[1] = 0;
  return result;
}

void *llvm::DenseMap<llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::orc::SymbolStringPtr>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      BOOL v12 = (void *)(v4 + 8);
      uint64_t v13 = 16 * v3;
      do
      {
        uint64_t v14 = *(v12 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          uint64_t v15 = v18;
          *int v18 = *(v12 - 1);
          v15[1] = 0;
          v15[1] = *v12;
          *BOOL v12 = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v12 += 2;
        v13 -= 16;
      }
      while (v13);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  unsigned int v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::LookupBucketFor<unsigned long>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::grow(a1, v7);
    unsigned int v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::LookupBucketFor<unsigned long>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t result = *a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::LookupBucketFor<unsigned long>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = (37 * a3) & (a2 - 1);
    unint64_t v5 = (void *)(a1 + 32 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a3)
    {
      uint64_t v7 = 1;
    }
    else
    {
      unint64_t v9 = 0;
      int v10 = 1;
      while (v6 != -1)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -2;
        }
        if (v11) {
          unint64_t v9 = v5;
        }
        int v12 = v4 + v10++;
        uint64_t v4 = v12 & (a2 - 1);
        unint64_t v5 = (void *)(a1 + 32 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = 1;
        if (*v5 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v7 = 0;
      if (v9) {
        unint64_t v5 = v9;
      }
    }
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

void *llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        *uint64_t result = -1;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 32 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if (*(void *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          int v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::LookupBucketFor<unsigned long>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          uint64_t v15 = v18;
          *int v18 = *(void *)v13;
          v15[1] = 0;
          _OWORD v15[2] = 0;
          long long v15[3] = 0;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          long long v15[3] = *(void *)(v13 + 24);
          *(void *)(v13 + 8) = 0;
          *(void *)(v13 + 16) = 0;
          *(void *)(v13 + 24) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 32 * v16;
    do
    {
      *uint64_t result = -1;
      result += 4;
      v17 -= 32;
    }
    while (v17);
  }
  return result;
}

void LLVMOrcExecutionSessionCreateBareJITDylib(std::recursive_mutex *a1, char *a2)
{
  std::string::basic_string[abi:nn180100]<0>(&__p, a2);
  llvm::orc::ExecutionSession::createBareJITDylib(a1);
}

void LLVMOrcExecutionSessionCreateJITDylib(std::recursive_mutex *a1, int a2, char *__s)
{
  __p[5] = *(void **)MEMORY[0x263EF8340];
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  llvm::orc::ExecutionSession::createJITDylib(a1, (uint64_t)__p);
}

uint64_t LLVMOrcObjectLayerAddObjectFile(uint64_t a1, llvm::orc::JITDylib *a2, uint64_t a3)
{
  uint64_t v5 = a3;
  llvm::orc::ObjectLayer::add(a1, a2, &v5, &v6);
  uint64_t v3 = v6;
  uint64_t v6 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return v3;
}

uint64_t llvm::MCTargetOptions::MCTargetOptions(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = (std::string *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 32);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  unsigned int v8 = (std::string *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  uint64_t v10 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  long long v12 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v12;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>((std::string *)(a1 + 136), *(long long **)(a2 + 136), *(long long **)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3));
  return a1;
}

std::string *std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:nn180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((int)v6 + 16, a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void *llvm::object::COFFObjectFile::getSymbol@<X0>(void *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = this[12];
  if (*((_OWORD *)this + 6) == 0) {
    goto LABEL_11;
  }
  uint64_t v5 = this[6];
  if (v5)
  {
    if (*(__int16 *)(v5 + 2) == -1) {
      goto LABEL_11;
    }
    uint64_t v6 = (unsigned int *)(v5 + 12);
  }
  else
  {
    uint64_t v6 = (unsigned int *)(this[7] + 52);
  }
  if (*v6 > a2)
  {
    if (v4)
    {
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)a3 = v4 + 18 * a2;
      *(void *)(a3 + 8) = 0;
      return this;
    }
    uint64_t v7 = this[13];
    if (v7)
    {
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = v7 + 20 * a2;
      return this;
    }
  }
LABEL_11:
  *(void *)&v8.__val_ = llvm::object::object_category((llvm::object *)this);
  this = (void *)llvm::errorCodeToError((llvm *)3, v8, (void *)a3);
  *(unsigned char *)(a3 + 16) |= 1u;
  return this;
}

uint64_t *std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(uint64_t **a1, long long *a2, _OWORD *a3)
{
  uint64_t v5 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__find_equal<llvm::StringRef>((uint64_t)a1, &v9, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

void llvm::orc::SimpleRemoteEPC::~SimpleRemoteEPC(llvm::orc::SimpleRemoteEPC *this)
{
  *(void *)this = &unk_270DBE678;
  *((void *)this + 22) = &unk_270DBE6E0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>,unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::destroyAll((void *)this + 47);
  MEMORY[0x263E500A0](*((void *)this + 47), 8);
  uint64_t v2 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v2) {
    MEMORY[0x263E500B0](v2, 0x1020C40B07D1DCCLL);
  }
  uint64_t v3 = *((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 38);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 248));
  std::mutex::~mutex((std::mutex *)((char *)this + 184));
  llvm::orc::ExecutorProcessControl::~ExecutorProcessControl((void **)this);
}

{
  uint64_t vars8;

  llvm::orc::SimpleRemoteEPC::~SimpleRemoteEPC(this);
  JUMPOUT(0x263E500B0);
}

void non-virtual thunk to'llvm::orc::SimpleRemoteEPC::~SimpleRemoteEPC(llvm::orc::SimpleRemoteEPC *this)
{
}

{
  uint64_t vars8;

  llvm::orc::SimpleRemoteEPC::~SimpleRemoteEPC((llvm::orc::SimpleRemoteEPC *)((char *)this - 176));
  JUMPOUT(0x263E500B0);
}

void llvm::orc::SimpleRemoteEPC::loadDylib(llvm::orc::SimpleRemoteEPC *this, const char *__s)
{
  uint64_t v3 = (void *)*((void *)this + 42);
  if (__s) {
    size_t v4 = strlen(__s);
  }
  else {
    size_t v4 = 0;
  }
  llvm::orc::EPCGenericDylibManager::open(v3, (uint64_t)__s, v4, 0);
}

void llvm::orc::SimpleRemoteEPC::lookupSymbolsAsync(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 336);
  uint64_t v8 = 0;
  long long v7 = 0uLL;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v10, a4);
  llvm::orc::lookupSymbolsAsyncHelper(v6, a2, a3, &v7, v10);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
  uint64_t v9 = (void **)&v7;
  std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100](&v9);
}

void *llvm::orc::lookupSymbolsAsyncHelper(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4, long long *a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = (size_t ***)a2[1];
    *(void *)&long long v13 = a1;
    *((void *)&v13 + 1) = a2;
    uint64_t v14 = a3;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v15, a5);
    long long v16 = *a4;
    uint64_t v17 = *((void *)a4 + 2);
    *((void *)a4 + 1) = 0;
    *((void *)a4 + 2) = 0;
    *(void *)a4 = 0;
    long long v24 = v13;
    uint64_t v25 = v14;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v26, v15);
    long long v27 = v16;
    uint64_t v28 = v17;
    uint64_t v17 = 0;
    long long v16 = 0uLL;
    uint64_t v9 = (char *)operator new(0x50uLL, (std::align_val_t)8uLL);
    int v18 = v9;
    long long v19 = xmmword_261E8D480;
    *(_OWORD *)uint64_t v9 = v24;
    *((void *)v9 + 2) = v25;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v9 + 24), v26);
    *(_OWORD *)(v9 + 56) = v27;
    *((void *)v9 + 9) = v28;
    uint64_t v28 = 0;
    long long v27 = 0uLL;
    int v20 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>>::CallbacksHolder<llvm::orc::lookupSymbolsAsyncHelper(llvm::orc::EPCGenericDylibManager &,llvm::ArrayRef<llvm::orc::ExecutorProcessControl::LookupRequest>,std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>,llvm::unique_function<void ()(llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>)>)::$_0,llvm::orc::lookupSymbolsAsyncHelper(llvm::orc::EPCGenericDylibManager &,llvm::ArrayRef<llvm::orc::ExecutorProcessControl::LookupRequest>,std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>,llvm::unique_function<void ()(llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>)>)::$_0,void>::Callbacks
        + 4;
    long long v12 = (void **)&v27;
    std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100](&v12);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v26);
    llvm::orc::EPCGenericDylibManager::lookupAsync(a1, v7, v8, (long long *)&v18);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v18);
    *(void *)&long long v24 = &v16;
    std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v24);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v15);
  }
  else
  {
    char v23 = 0;
    long long v21 = *a4;
    uint64_t v22 = *((void *)a4 + 2);
    *(void *)a4 = 0;
    *((void *)a4 + 1) = 0;
    *((void *)a4 + 2) = 0;
    uint64_t v11 = *((void *)a5 + 3);
    if ((v11 & 2) == 0) {
      a5 = *(long long **)a5;
    }
    (*(void (**)(long long *, long long *))(v11 & 0xFFFFFFFFFFFFFFF8))(a5, &v21);
    return (void *)llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v21);
  }
}

void llvm::orc::SimpleRemoteEPC::runAsMain(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v17 = 0;
  if (a4)
  {
    uint64_t v7 = 24 * (void)a4;
    uint64_t v8 = (unsigned __int8 *)(a3 + 23);
    uint64_t v9 = 8;
    do
    {
      uint64_t v10 = *v8;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(v8 - 15);
      }
      v9 += v10 + 8;
      v8 += 24;
      v7 -= 24;
    }
    while (v7);
    size_t v11 = v9 + 8;
    v21[0] = 0;
    v21[1] = (void *)(v9 + 8);
    if ((unint64_t)(v9 + 8) < 9)
    {
LABEL_10:
      long long v12 = v21;
      if (v11 <= 8) {
        long long v13 = v21;
      }
      else {
        long long v13 = (void **)v7;
      }
      long long v19 = v13;
      size_t v20 = v11;
      if (v11 >= 8)
      {
        *long long v13 = a2;
        if (v11 > 8) {
          long long v12 = (void **)v7;
        }
        uint64_t v14 = v12 + 1;
        long long v19 = v14;
        size_t v20 = v11 - 8;
        if (v11 - 8 >= 8)
        {
          *uint64_t v14 = a4;
          long long v19 = (void **)(v7 + 16);
          size_t v20 = v11 - 16;
          if (!a4)
          {
LABEL_21:
            *(_OWORD *)int v18 = *(_OWORD *)v21;
            v21[0] = 0;
            v21[1] = 0;
            goto LABEL_23;
          }
          uint64_t v15 = 24 * (void)a4;
          while (llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::serialize(&v19, v5))
          {
            v5 += 24;
            v15 -= 24;
            if (!v15) {
              goto LABEL_21;
            }
          }
        }
      }
      llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v18);
LABEL_23:
      if (v21[1] < (void *)9)
      {
        if (v21[1] || (long long v16 = v21[0]) == 0)
        {
LABEL_28:
          if (!v18[1])
          {
            long long v19 = (void **)v18[0];
            if (v18[0])
            {
              getErrorErrorCat();
              v21[0] = (void *)3;
              v21[1] = &getErrorErrorCat(void)::ErrorErrorCat;
              llvm::make_error<llvm::StringError,char const*&,std::error_code>();
            }
          }
          llvm::orc::ExecutorProcessControl::callWrapper();
        }
      }
      else
      {
        long long v16 = v21[0];
      }
      free(v16);
      goto LABEL_28;
    }
  }
  else
  {
    size_t v11 = 16;
    v21[1] = (void *)16;
  }
  uint64_t v7 = (uint64_t)malloc_type_malloc(v11, 0xBCDE199DuLL);
  v21[0] = (void *)v7;
  size_t v11 = (size_t)v21[1];
  goto LABEL_10;
}

void llvm::orc::SimpleRemoteEPC::runAsVoidFunction(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  v4[0] = a1;
  int v2 = 0;
  v4[1] = *(void *)(a1 + 352);
  llvm::orc::shared::WrapperFunction<int ()(llvm::orc::shared::SPSExecutorAddr)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<int ()(llvm::orc::shared::SPSExecutorAddr),int &,llvm::orc::ExecutorAddr &>(llvm::orc::ExecutorAddr,int &,llvm::orc::ExecutorAddr &)::{lambda(char const*,unsigned long)#1},int,llvm::orc::ExecutorAddr>((uint64_t)v4, (uint64_t)&v2, &v3);
}

void llvm::orc::SimpleRemoteEPC::runAsIntFunction(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = 0;
  uint64_t v5 = malloc_type_malloc(0xCuLL, 0xBCDE199DuLL);
  *(void *)uint64_t v5 = a2;
  _OWORD v5[2] = a3;
  llvm::orc::ExecutorProcessControl::callWrapper();
}

void *llvm::orc::SimpleRemoteEPC::callWrapperAsync(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = (std::mutex *)(a1 + 184);
  std::mutex::lock((std::mutex *)(a1 + 184));
  uint64_t v7 = *(void *)(a1 + 368);
  uint64_t v6 = *(void *)(a1 + 376);
  *(void *)(a1 + 368) = v7 + 1;
  uint64_t v19 = v7;
  v21[0] = 0;
  char v8 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(v6, *(_DWORD *)(a1 + 392), v7, v21);
  inserted = v21[0];
  if ((v8 & 1) == 0)
  {
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>,unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::InsertIntoBucketImpl<unsigned long long>(a1 + 376, &v19, v21[0]);
    void *inserted = v7;
    *(_OWORD *)(inserted + 1) = 0u;
    *(_OWORD *)(inserted + 3) = 0u;
  }
  if (inserted + 1 != (void *)a3)
  {
    uint64_t v10 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(inserted + 1);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v10, a3);
  }
  std::mutex::unlock(v5);
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)(a1 + 312) + 24))(&v18);
  if (v18)
  {
    unint64_t v22 = 0;
    std::mutex::lock(v5);
    uint64_t v20 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(void *)(a1 + 376), *(_DWORD *)(a1 + 392), v7, &v20))
    {
      uint64_t v12 = v20;
      if (v20 != *(void *)(a1 + 376) + 40 * *(unsigned int *)(a1 + 392))
      {
        if (v21 != (void **)(v20 + 8))
        {
          llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v21);
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v21, (long long *)(v12 + 8));
        }
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(v12 + 8));
        *(void *)uint64_t v12 = -2;
        *(int32x2_t *)(a1 + 384) = vadd_s32(*(int32x2_t *)(a1 + 384), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    std::mutex::unlock(v5);
    if (v22 < 8) {
      goto LABEL_17;
    }
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"disconnecting", (char **)&v16);
    llvm::orc::ExecutorProcessControl::IncomingWFRHandler::operator()(v21, (uint64_t)&v16);
    if (v17 < 9)
    {
      if (v17) {
        goto LABEL_17;
      }
      long long v13 = v16;
      if (!v16) {
        goto LABEL_17;
      }
    }
    else
    {
      long long v13 = v16;
    }
    free(v13);
LABEL_17:
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = v18;
    uint64_t v18 = 0;
    llvm::orc::ExecutionSession::reportError(v14, &v15);
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v21);
    uint64_t result = (void *)v18;
    if (v18) {
      return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  return result;
}

void llvm::orc::ExecutorProcessControl::IncomingWFRHandler::operator()(void *a1, uint64_t a2)
{
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = a1[3];
  if ((v2 & 2) == 0) {
    a1 = (void *)*a1;
  }
  (*(void (**)(void *, void **))(v2 & 0xFFFFFFFFFFFFFFF8))(a1, v5);
  if (v5[1] >= (void *)9)
  {
    uint64_t v3 = v5[0];
LABEL_9:
    free(v3);
    return;
  }
  uint64_t v3 = v5[0];
  if (v5[1]) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v5[0] == 0;
  }
  if (!v4) {
    goto LABEL_9;
  }
}

void llvm::orc::SimpleRemoteEPC::disconnect(llvm::orc::SimpleRemoteEPC *this@<X0>, void *a2@<X8>)
{
  (*(void (**)(void))(**((void **)this + 39) + 32))(*((void *)this + 39));
  (*(void (**)(void))(**((void **)this + 3) + 24))(*((void *)this + 3));
  m = (std::mutex *)((char *)this + 184);
  v6.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 184);
  v6.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 184));
  if (*((unsigned char *)this + 296))
  {
    *a2 = *((void *)this + 38);
    *((void *)this + 38) = 0;
LABEL_6:
    std::mutex::unlock(m);
    return;
  }
  do
    std::condition_variable::wait((std::condition_variable *)((char *)this + 248), &v6);
  while (!*((unsigned char *)this + 296));
  BOOL owns = v6.__owns_;
  *a2 = *((void *)this + 38);
  *((void *)this + 38) = 0;
  if (owns)
  {
    m = v6.__m_;
    goto LABEL_6;
  }
}

void llvm::orc::SimpleRemoteEPC::handleMessage(uint64_t a1@<X0>, unsigned int a2@<W1>, void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v48[16] = *MEMORY[0x263EF8340];
  if (a2 >= 4)
  {
    getErrorErrorCat();
    *(void *)uint64_t v45 = 3;
    *(void *)&v45[8] = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
  }
  switch(a2)
  {
    case 0u:
      unint64_t v40 = v42;
      long long size = xmmword_261E8A720;
      if (*(void *)(a5 + 8)) {
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v40, (const void **)a5);
      }
      if (a3)
      {
        getErrorErrorCat();
        operator new();
      }
      if (a4)
      {
        getErrorErrorCat();
        *(void *)uint64_t v45 = 3;
        *(void *)&v45[8] = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
      }
      uint64_t v20 = (std::mutex *)(a1 + 184);
      std::mutex::lock((std::mutex *)(a1 + 184));
      *(void *)uint64_t v45 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(void *)(a1 + 376), *(_DWORD *)(a1 + 392), 0, v45))uint64_t v21 = *(void *)v45; {
      else
      }
        uint64_t v21 = *(void *)(a1 + 376) + 40 * *(unsigned int *)(a1 + 392);
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v45, (long long *)(v21 + 8));
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(v21 + 8));
      *(void *)uint64_t v21 = -2;
      *(int32x2_t *)(a1 + 384) = vadd_s32(*(int32x2_t *)(a1 + 384), (int32x2_t)0x1FFFFFFFFLL);
      unint64_t v22 = v40;
      size_t v23 = size;
      *(void *)uint64_t v43 = 0;
      *(void *)&v43[8] = size;
      if ((unint64_t)size < 9)
      {
        long long v24 = v43;
      }
      else
      {
        long long v24 = malloc_type_malloc(size, 0xBCDE199DuLL);
        *(void *)uint64_t v43 = v24;
      }
      memcpy(v24, v22, v23);
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v43;
      llvm::orc::ExecutorProcessControl::IncomingWFRHandler::operator()(v45, (uint64_t)v30);
      if (v30[1] >= (void *)9)
      {
        uint64_t v26 = v30[0];
LABEL_72:
        free(v26);
        goto LABEL_73;
      }
      if (!v30[1])
      {
        uint64_t v26 = v30[0];
        if (v30[0]) {
          goto LABEL_72;
        }
      }
LABEL_73:
      long long __dst = 0;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v45);
      std::mutex::unlock(v20);
      if (v40 != v42) {
        free(v40);
      }
      goto LABEL_75;
    case 1u:
      (*(void (**)(void))(**(void **)(a1 + 312) + 32))(*(void *)(a1 + 312));
      long long v37 = v39;
      long long v38 = xmmword_261E8A720;
      if (*(void *)(a5 + 8))
      {
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v37, (const void **)a5);
        uint64_t v12 = v37;
        size_t v11 = v38;
        long long __dst = 0;
        unint64_t v29 = v38;
        if ((unint64_t)v38 < 9)
        {
          p_dst = (void **)&__dst;
        }
        else
        {
          p_dst = (void **)malloc_type_malloc(v38, 0xBCDE199DuLL);
          long long __dst = p_dst;
        }
      }
      else
      {
        size_t v11 = 0;
        long long __dst = 0;
        unint64_t v29 = 0;
        p_dst = (void **)&__dst;
        uint64_t v12 = v39;
      }
      memcpy(p_dst, v12, v11);
      if (v29)
      {
        v45[0] = 0;
        uint64_t v46 = 0;
        *(void *)&v45[8] = 0;
        *(void *)&v45[16] = 0;
        uint64_t v19 = __dst;
        if (v29 <= 8) {
          uint64_t v19 = (void **)&__dst;
        }
      }
      else
      {
        v30[0] = __dst;
        if (__dst)
        {
          getErrorErrorCat();
          *(void *)uint64_t v45 = 3;
          *(void *)&v45[8] = &getErrorErrorCat(void)::ErrorErrorCat;
          llvm::make_error<llvm::StringError,char const*&,std::error_code>();
        }
        v45[0] = 0;
        uint64_t v46 = 0;
        *(void *)&v45[8] = 0;
        *(void *)&v45[16] = 0;
        uint64_t v19 = (void **)&__dst;
      }
      v27[0] = v19;
      v27[1] = v29;
      if (!llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSError,llvm::orc::shared::detail::SPSSerializableError,void>::deserialize(v27, (uint64_t)v45))
      {
        getErrorErrorCat();
        v30[0] = (void *)3;
        v30[1] = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
      }
      v43[0] = v45[0];
      *(_OWORD *)&v43[8] = *(_OWORD *)&v45[8];
      uint64_t v44 = v46;
      *(void *)&v45[8] = 0;
      *(void *)&v45[16] = 0;
      uint64_t v46 = 0;
      if (v45[0])
      {
        getErrorErrorCat();
        v30[0] = (void *)3;
        v30[1] = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,std::string,std::error_code>();
      }
      if (SHIBYTE(v44) < 0) {
        operator delete(*(void **)&v43[8]);
      }
      if (SHIBYTE(v46) < 0) {
        operator delete(*(void **)&v45[8]);
      }
      if (v29 > 8 || !v29 && __dst) {
        free(__dst);
      }
      if (v37 != v39) {
        free(v37);
      }
      *(unsigned char *)(a6 + 8) &= ~1u;
      *(_DWORD *)a6 = 1;
      return;
    case 2u:
      uint64_t v34 = v36;
      long long v35 = xmmword_261E8A720;
      if (*(void *)(a5 + 8)) {
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v34, (const void **)a5);
      }
      long long __dst = a3;
      uint64_t v44 = 0;
      if (a4)
      {
        getErrorErrorCat();
        *(void *)uint64_t v45 = 3;
        *(void *)&v45[8] = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
      }
      std::mutex::lock((std::mutex *)(a1 + 184));
      *(void *)uint64_t v45 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(void *)(a1 + 376), *(_DWORD *)(a1 + 392), (uint64_t)a3, v45)|| (uint64_t v15 = *(void *)v45, *(void *)v45 == *(void *)(a1 + 376) + 40 * *(unsigned int *)(a1 + 392)))
      {
        *(void *)uint64_t v45 = "No call for sequence number ";
        *(void *)&v45[16] = &__dst;
        LOWORD(v47) = 3075;
        getErrorErrorCat();
        operator new();
      }
      if (v43 != (unsigned char *)(*(void *)v45 + 8))
      {
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v43);
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v43, (long long *)(v15 + 8));
      }
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(v15 + 8));
      *(void *)uint64_t v15 = -2;
      *(int32x2_t *)(a1 + 384) = vadd_s32(*(int32x2_t *)(a1 + 384), (int32x2_t)0x1FFFFFFFFLL);
      std::mutex::unlock((std::mutex *)(a1 + 184));
      long long v16 = v34;
      size_t v17 = v35;
      *(void *)uint64_t v45 = 0;
      *(void *)&v45[8] = v35;
      if ((unint64_t)v35 < 9)
      {
        uint64_t v18 = v45;
      }
      else
      {
        uint64_t v18 = malloc_type_malloc(v35, 0xBCDE199DuLL);
        *(void *)uint64_t v45 = v18;
      }
      memcpy(v18, v16, v17);
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v45;
      llvm::orc::ExecutorProcessControl::IncomingWFRHandler::operator()(v43, (uint64_t)v30);
      if (v30[1] >= (void *)9)
      {
        uint64_t v25 = v30[0];
LABEL_63:
        free(v25);
        goto LABEL_64;
      }
      if (!v30[1])
      {
        uint64_t v25 = v30[0];
        if (v30[0]) {
          goto LABEL_63;
        }
      }
LABEL_64:
      v27[0] = 0;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v43);
      if (v34 != v36) {
        free(v34);
      }
LABEL_75:
      *(unsigned char *)(a6 + 8) &= ~1u;
      *(_DWORD *)a6 = 0;
      return;
    case 3u:
      unint64_t v31 = &v33;
      long long v32 = xmmword_261E8A720;
      if (*(void *)(a5 + 8))
      {
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v31, (const void **)a5);
        BOOL v14 = (void)v32 == 0;
      }
      else
      {
        BOOL v14 = 1;
      }
      *(void *)uint64_t v45 = a1;
      *(void *)&v45[8] = a3;
      *(void *)&v45[16] = a4;
      uint64_t v46 = v48;
      long long v47 = xmmword_261E8A720;
      if (!v14) {
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v46, (const void **)&v31);
      }
      operator new();
    default:
      goto LABEL_75;
  }
}

void non-virtual thunk to'llvm::orc::SimpleRemoteEPC::handleMessage(uint64_t a1@<X0>, unsigned int a2@<W1>, void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
}

uint64_t llvm::orc::SimpleRemoteEPC::handleDisconnect(uint64_t a1, void ***a2)
{
  BOOL v4 = (std::mutex *)(a1 + 184);
  std::mutex::lock((std::mutex *)(a1 + 184));
  v25[0] = 0;
  unint64_t v22 = 0;
  v25[1] = 0;
  uint64_t v23 = 0;
  unsigned int v26 = 0;
  unsigned int v24 = 0;
  llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::operator=(&v22, a1 + 376);
  llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::operator=((void *)(a1 + 376), (uint64_t)v25);
  uint64_t v5 = v25[0];
  if (v26)
  {
    uint64_t v6 = 40 * v26;
    uint64_t v7 = v25[0] + 1;
    do
    {
      if ((unint64_t)*(v7 - 1) <= 0xFFFFFFFFFFFFFFFDLL) {
        uint64_t v7 = (void **)llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v7);
      }
      v7 += 5;
      v6 -= 40;
    }
    while (v6);
    uint64_t v5 = v25[0];
  }
  MEMORY[0x263E500A0](v5, 8);
  std::mutex::unlock(v4);
  if (v23)
  {
    if (v24)
    {
      uint64_t v8 = 40 * v24;
      uint64_t v9 = v22;
      while (*v9 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v9 += 5;
        v8 -= 40;
        if (!v8) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      uint64_t v9 = v22;
    }
    uint64_t v10 = &v22[5 * v24];
    while (v9 != v10)
    {
      llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"disconnecting", (char **)&v20);
      llvm::orc::ExecutorProcessControl::IncomingWFRHandler::operator()(v9 + 1, (uint64_t)&v20);
      if (v21 >= 9)
      {
        size_t v11 = v20;
LABEL_21:
        free(v11);
        goto LABEL_22;
      }
      size_t v11 = v20;
      if (v21) {
        BOOL v12 = 1;
      }
      else {
        BOOL v12 = v20 == 0;
      }
      if (!v12) {
        goto LABEL_21;
      }
      do
      {
LABEL_22:
        v9 += 5;
        if (v9 == v10) {
          goto LABEL_25;
        }
      }
      while (*v9 >= 0xFFFFFFFFFFFFFFFELL);
    }
  }
LABEL_25:
  std::mutex::lock(v4);
  long long v13 = *(void ***)(a1 + 304);
  *(void *)(a1 + 304) = 0;
  BOOL v14 = *a2;
  *a2 = 0;
  v25[0] = v13;
  long long v27 = v14;
  llvm::ErrorList::join(v25, &v27, &v19);
  if (v27) {
    (*((void (**)(void **))*v27 + 1))(v27);
  }
  if (v25[0]) {
    (*((void (**)(void **))*v25[0] + 1))(v25[0]);
  }
  *(void *)(a1 + 304) = v19;
  *(unsigned char *)(a1 + 296) = 1;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 248));
  std::mutex::unlock(v4);
  uint64_t v15 = v22;
  if (v24)
  {
    uint64_t v16 = 40 * v24;
    size_t v17 = v22 + 1;
    do
    {
      if (*(v17 - 1) <= 0xFFFFFFFFFFFFFFFDLL) {
        size_t v17 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v17);
      }
      v17 += 5;
      v16 -= 40;
    }
    while (v16);
    uint64_t v15 = v22;
  }
  return MEMORY[0x263E500A0](v15, 8);
}

uint64_t non-virtual thunk to'llvm::orc::SimpleRemoteEPC::handleDisconnect(uint64_t a1, void ***a2)
{
  return llvm::orc::SimpleRemoteEPC::handleDisconnect(a1 - 176, a2);
}

uint64_t llvm::orc::SimpleRemoteEPC::createDefaultMemoryManager@<X0>(llvm::orc::SimpleRemoteEPC *this@<X0>, uint64_t a2@<X8>)
{
  v13[12] = *MEMORY[0x263EF8340];
  long long v11 = 0u;
  long long v12 = 0u;
  size_t v5 = llvm::orc::rt::SimpleExecutorMemoryManagerInstanceName;
  v13[0] = &v11;
  v13[1] = llvm::orc::rt::SimpleExecutorMemoryManagerInstanceName;
  if (llvm::orc::rt::SimpleExecutorMemoryManagerInstanceName) {
    size_t v5 = strlen((const char *)llvm::orc::rt::SimpleExecutorMemoryManagerInstanceName);
  }
  uint64_t v13[2] = v5;
  v13[3] = (char *)&v11 + 8;
  size_t v6 = llvm::orc::rt::SimpleExecutorMemoryManagerReserveWrapperName;
  void v13[4] = llvm::orc::rt::SimpleExecutorMemoryManagerReserveWrapperName;
  if (llvm::orc::rt::SimpleExecutorMemoryManagerReserveWrapperName) {
    size_t v6 = strlen((const char *)llvm::orc::rt::SimpleExecutorMemoryManagerReserveWrapperName);
  }
  v13[5] = v6;
  v13[6] = &v12;
  size_t v7 = llvm::orc::rt::SimpleExecutorMemoryManagerFinalizeWrapperName;
  v13[7] = llvm::orc::rt::SimpleExecutorMemoryManagerFinalizeWrapperName;
  if (llvm::orc::rt::SimpleExecutorMemoryManagerFinalizeWrapperName) {
    size_t v7 = strlen((const char *)llvm::orc::rt::SimpleExecutorMemoryManagerFinalizeWrapperName);
  }
  v13[8] = v7;
  v13[9] = (char *)&v12 + 8;
  size_t v8 = llvm::orc::rt::SimpleExecutorMemoryManagerDeallocateWrapperName;
  void v13[10] = llvm::orc::rt::SimpleExecutorMemoryManagerDeallocateWrapperName;
  if (llvm::orc::rt::SimpleExecutorMemoryManagerDeallocateWrapperName) {
    size_t v8 = strlen((const char *)llvm::orc::rt::SimpleExecutorMemoryManagerDeallocateWrapperName);
  }
  v13[11] = v8;
  llvm::orc::ExecutorProcessControl::getBootstrapSymbols((uint64_t)this, (uint64_t)v13, 4, &v10);
  uint64_t result = v10;
  if (!v10) {
    operator new();
  }
  *(unsigned char *)(a2 + 8) |= 1u;
  *(void *)a2 = result;
  return result;
}

void llvm::orc::SimpleRemoteEPC::createDefaultMemoryAccess(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 8) &= ~1u;
  *(void *)a1 = 0;
}

void llvm::orc::SimpleRemoteEPC::setup()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

long long *llvm::unique_function<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>> ()(llvm::orc::SimpleRemoteEPC &)>::operator=(long long *result, long long *a2)
{
  if (result != a2)
  {
    uint64_t v3 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(result);
    return (long long *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v3, a2);
  }
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>>::CallImpl<llvm::orc::lookupSymbolsAsyncHelper(llvm::orc::EPCGenericDylibManager &,llvm::ArrayRef<llvm::orc::ExecutorProcessControl::LookupRequest>,std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>,llvm::unique_function<void ()(llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>)>)::$_0>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  if (a2[3] & 1)
  {
    uint64_t v10 = (_OWORD *)*a2;
    *a2 = 0;
    long long v11 = a1 + 3;
    long long v53 = 0;
    char v58 = -1;
    v57[0] = v10;
    uint64_t v12 = a1[6];
    if ((v12 & 2) == 0) {
      long long v11 = (void *)*v11;
    }
    (*(void (**)(void *, void *))(v12 & 0xFFFFFFFFFFFFFFF8))(v11, v57);
    llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v57);
  }
  else
  {
    uint64_t v3 = (_OWORD *)*a2;
    long long v53 = (_OWORD *)*a2;
    long long v4 = *(_OWORD *)(a2 + 1);
    long long v54 = v4;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    uint64_t v5 = (uint64_t)(a1 + 9);
    unint64_t v6 = a1[9];
    size_t v7 = (int64x2_t *)(a1 + 7);
    size_t v8 = (void *)a1[8];
    if ((unint64_t)v8 >= v6)
    {
      uint64_t v47 = v4;
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v7->i64[0]) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_38:
      }
        abort();
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7->i64[0]) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v16 = v14;
      }
      uint64_t v52 = a1 + 9;
      size_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v5, v16);
      uint64_t v19 = &v17[24 * v13];
      uint64_t v9 = (char **)(v19 + 24);
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = 0;
      *(void *)uint64_t v19 = 0;
      unint64_t v21 = (void *)a1[7];
      uint64_t v20 = (void *)a1[8];
      if (v20 == v21)
      {
        int64x2_t v23 = vdupq_n_s64((unint64_t)v20);
      }
      else
      {
        do
        {
          *((void *)v19 - 3) = 0;
          *((void *)v19 - 2) = 0;
          v19 -= 24;
          *((void *)v19 + 2) = 0;
          long long v22 = *(_OWORD *)(v20 - 3);
          v20 -= 3;
          *(_OWORD *)uint64_t v19 = v22;
          *((void *)v19 + 2) = v20[2];
          *uint64_t v20 = 0;
          v20[1] = 0;
          _OWORD v20[2] = 0;
        }
        while (v20 != v21);
        int64x2_t v23 = *v7;
      }
      a1[7] = (uint64_t)v19;
      a1[8] = (uint64_t)v9;
      *(int64x2_t *)&v50[8] = v23;
      uint64_t v24 = a1[9];
      a1[9] = (uint64_t)&v17[24 * v18];
      uint64_t v51 = v24;
      *(void *)uint64_t v50 = v23.i64[0];
      std::__split_buffer<std::vector<llvm::orc::ExecutorSymbolDef>>::~__split_buffer((uint64_t)v50);
      *(void *)&long long v4 = v47;
    }
    else
    {
      uint64_t v9 = (char **)(v8 + 3);
      *size_t v8 = 0;
      v8[1] = 0;
      void v8[2] = 0;
    }
    a1[8] = (uint64_t)v9;
    std::vector<llvm::orc::ExecutorSymbolDef>::reserve(v9 - 3, (uint64_t)(v4 - (void)v3) >> 4);
    uint64_t v25 = v53;
    for (uint64_t i = (_OWORD *)v54; v25 != i; ++v25)
    {
      *(_OWORD *)uint64_t v50 = *v25;
      uint64_t v27 = a1[8];
      uint64_t v28 = *(_OWORD **)(v27 - 16);
      unint64_t v29 = *(void *)(v27 - 8);
      if ((unint64_t)v28 >= v29)
      {
        uint64_t v31 = *(void *)(v27 - 24);
        uint64_t v32 = ((uint64_t)v28 - v31) >> 4;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 60) {
          goto LABEL_38;
        }
        uint64_t v34 = v29 - v31;
        if (v34 >> 3 > v33) {
          unint64_t v33 = v34 >> 3;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35) {
          unint64_t v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v27 - 8, v35);
        }
        else {
          unint64_t v36 = 0;
        }
        long long v37 = &v36[16 * v32];
        *(_OWORD *)long long v37 = *(_OWORD *)v50;
        uint64_t v39 = *(_WORD **)(v27 - 24);
        long long v38 = *(_WORD **)(v27 - 16);
        unint64_t v40 = v37;
        if (v38 != v39)
        {
          do
          {
            uint64_t v41 = *((void *)v38 - 2);
            v38 -= 8;
            __int16 v42 = v38[4];
            *((void *)v40 - 2) = v41;
            v40 -= 16;
            *((_WORD *)v40 + 4) = v42;
          }
          while (v38 != v39);
          long long v38 = *(_WORD **)(v27 - 24);
        }
        uint64_t v30 = v37 + 16;
        *(void *)(v27 - 24) = v40;
        *(void *)(v27 - 16) = v37 + 16;
        *(void *)(v27 - 8) = &v36[16 * v35];
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        _OWORD *v28 = *v25;
        uint64_t v30 = v28 + 1;
      }
      *(void *)(v27 - 16) = v30;
    }
    uint64_t v43 = a1[2] - 1;
    uint64_t v44 = *a1;
    uint64_t v45 = (uint64_t *)(a1[1] + 16);
    long long v48 = *(_OWORD *)(a1 + 7);
    uint64_t v49 = a1[9];
    a1[8] = 0;
    a1[9] = 0;
    v7->i64[0] = 0;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v56, (long long *)(a1 + 3));
    llvm::orc::lookupSymbolsAsyncHelper(v44, v45, v43, &v48, v56);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v56);
    *(void *)uint64_t v50 = &v48;
    std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100]((void ***)v50);
  }
  return llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v53);
}

__n128 llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>>::MoveImpl<llvm::orc::lookupSymbolsAsyncHelper(llvm::orc::EPCGenericDylibManager &,llvm::ArrayRef<llvm::orc::ExecutorProcessControl::LookupRequest>,std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>,llvm::unique_function<void ()(llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>)>)::$_0>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a1 + 24, (long long *)((char *)a2 + 24));
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 56);
  *(__n128 *)(a1 + 56) = result;
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  return result;
}

void *llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>>::DestroyImpl<llvm::orc::lookupSymbolsAsyncHelper(llvm::orc::EPCGenericDylibManager &,llvm::ArrayRef<llvm::orc::ExecutorProcessControl::LookupRequest>,std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>,llvm::unique_function<void ()(llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>)>)::$_0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 56);
  std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100](&v3);
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 24));
}

uint64_t std::__split_buffer<std::vector<llvm::orc::ExecutorSymbolDef>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<llvm::orc::ExecutorSymbolDef>>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v2 = *(void **)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(void *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap(a1 + 56);
    llvm::StringMap<std::vector<char>,llvm::MallocAllocator>::~StringMap(a1 + 32);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

uint64_t llvm::StringMap<std::vector<char>,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)a1 + v3);
        if (v5 != -8 && v5 != 0) {
          llvm::StringMapEntry<std::vector<char>>::Destroy<llvm::MallocAllocator>(v5);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void llvm::StringMapEntry<std::vector<char>>::Destroy<llvm::MallocAllocator>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x263E500A0);
}

void *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>,unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::destroyAll(void *result)
{
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = 40 * v1;
    __n128 result = (void *)(*result + 8);
    do
    {
      if (*(result - 1) <= 0xFFFFFFFFFFFFFFFDLL) {
        __n128 result = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(result);
      }
      result += 5;
      v2 -= 40;
    }
    while (v2);
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>,unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::InsertIntoBucketImpl<unsigned long long>(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::grow(a1, v6);
  size_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::operator=(void *a1, uint64_t a2)
{
  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>,unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::destroyAll(a1);
  MEMORY[0x263E500A0](*a1, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *(void *)a2;
  *(void *)a2 = 0;
  *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v4 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  int v5 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  return a1;
}

void std::__assoc_state<llvm::MSVCPExpected<llvm::orc::SimpleRemoteEPCExecutorInfo>>::~__assoc_state(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;
  uint64_t vars8;

  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x263E500B0);
}

uint64_t std::__assoc_state<llvm::MSVCPExpected<llvm::orc::SimpleRemoteEPCExecutorInfo>>::__on_zero_shared(unsigned char *a1)
{
  if (a1[136]) {
    llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::~Expected((uint64_t)(a1 + 144));
  }
  uint64_t v2 = *(uint64_t (**)(unsigned char *))(*(void *)a1 + 8);
  return v2(a1);
}

void llvm::detail::UniqueFunctionBase<void,llvm::orc::shared::WrapperFunctionResult>::CallImpl<llvm::orc::SimpleRemoteEPC::setup(llvm::orc::SimpleRemoteEPC::Setup)::$_0>(uint64_t **a1, uint64_t a2)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  *(_OWORD *)uint64_t v60 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (v60[1])
  {
    uint64_t v3 = (void **)v60[0];
    if (v60[1] <= (void *)8) {
      uint64_t v3 = v60;
    }
  }
  else
  {
    uint64_t v69 = (void **)v60[0];
    if (v60[0])
    {
      getErrorErrorCat();
      __p[0] = (void *)3;
      __p[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    uint64_t v3 = v60;
  }
  uint64_t v69 = v3;
  uint64_t v70 = (char *)v60[1];
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v64 = 0;
  uint64_t v65 = 0;
  *(void *)&long long v66 = 0;
  *((void *)&v66 + 1) = 0x2000000000;
  uint64_t v67 = 0;
  *(void *)&long long v68 = 0;
  *((void *)&v68 + 1) = 0x1000000000;
  if (!llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::deserialize((uint64_t)&v69, (std::string *)__p))goto LABEL_81; {
  int v4 = v70;
  }
  unint64_t v5 = (unint64_t)(v70 - 8);
  if ((unint64_t)v70 < 8) {
    goto LABEL_81;
  }
  unsigned int v6 = v69;
  uint64_t v7 = (uint64_t)*v69++;
  v70 -= 8;
  *((void *)&v64 + 1) = v7;
  if (v5 < 8) {
    goto LABEL_81;
  }
  size_t v8 = (char *)v6[1];
  unint64_t v9 = (unint64_t)(v4 - 16);
  uint64_t v69 = v6 + 2;
  uint64_t v70 = (char *)v9;
  BOOL v10 = v9 > 7;
  if (!v8) {
    goto LABEL_58;
  }
  char v58 = a1;
  do
  {
    if (!v10) {
      goto LABEL_81;
    }
    uint64_t v12 = (uint64_t *)(v69 + 1);
    unint64_t v11 = (unint64_t)*v69++;
    uint64_t v70 = (char *)(v9 - 8);
    unint64_t v13 = v9 - 8 - v11;
    if (v9 - 8 < v11) {
      goto LABEL_81;
    }
    unint64_t v14 = (size_t *)((char *)v12 + v11);
    uint64_t v69 = (void **)((char *)v12 + v11);
    uint64_t v70 = (char *)v13;
    BOOL v15 = v13 >= 8;
    unint64_t v16 = (char *)(v13 - 8);
    if (!v15) {
      goto LABEL_81;
    }
    size_t v17 = *v14;
    uint64_t v69 = (void **)(v14 + 1);
    uint64_t v70 = v16;
    uint64_t v57 = v8;
    if (!v17)
    {
      unint64_t v18 = 0;
      size_t v32 = 0;
      goto LABEL_42;
    }
    if ((v17 & 0x8000000000000000) != 0) {
      goto LABEL_91;
    }
    unint64_t v18 = (unint64_t)operator new(v17);
    uint64_t v19 = 0;
    uint64_t v20 = (char *)(v18 + v17);
    unint64_t v21 = (char *)v18;
    do
    {
      if (!v70)
      {
        if (v18) {
          operator delete((void *)v18);
        }
        goto LABEL_81;
      }
      char v22 = *(unsigned char *)v69;
      uint64_t v69 = (void **)((char *)v69 + 1);
      --v70;
      if (v21 < v20)
      {
        *v21++ = v22;
        goto LABEL_36;
      }
      int64x2_t v23 = &v21[-v18];
      uint64_t v24 = (uint64_t)&v21[-v18 + 1];
      if (v24 < 0) {
        goto LABEL_91;
      }
      if (2 * (uint64_t)&v20[-v18] > (unint64_t)v24) {
        uint64_t v24 = 2 * (void)&v20[-v18];
      }
      if ((unint64_t)&v20[-v18] >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v25 = v24;
      }
      if (v25) {
        unint64_t v26 = (unint64_t)operator new(v25);
      }
      else {
        unint64_t v26 = 0;
      }
      uint64_t v27 = &v23[v26];
      uint64_t v20 = (char *)(v26 + v25);
      uint64_t v28 = &v23[v26];
      char *v28 = v22;
      unint64_t v29 = v28 + 1;
      if (v21 == (char *)v18)
      {
        unint64_t v26 = (unint64_t)v27;
      }
      else
      {
        uint64_t v30 = &v21[~v18];
        do
        {
          char v31 = *--v21;
          (v30--)[v26] = v31;
        }
        while (v21 != (char *)v18);
        if (!v18) {
          goto LABEL_35;
        }
      }
      operator delete((void *)v18);
LABEL_35:
      unint64_t v18 = v26;
      unint64_t v21 = v29;
LABEL_36:
      ++v19;
    }
    while (v19 != v17);
    if (v21 != (char *)v18)
    {
      if ((uint64_t)&v21[-v18] >= 0)
      {
        size_t v17 = (size_t)operator new((size_t)&v21[-v18]);
        size_t v32 = (size_t)&v21[v17 - v18];
        memmove((void *)v17, (const void *)v18, (size_t)&v21[-v18]);
        goto LABEL_42;
      }
LABEL_91:
      abort();
    }
    size_t v17 = 0;
    size_t v32 = 0;
LABEL_42:
    if (v11) {
      unint64_t v33 = v12;
    }
    else {
      unint64_t v33 = 0;
    }
    unsigned int v34 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)&v65, v33, v11);
    uint64_t v35 = v65;
    uint64_t v36 = *(void *)(v65 + 8 * v34);
    if (v36 == -8)
    {
      --DWORD2(v66);
    }
    else if (v36)
    {
      if (v17) {
        operator delete((void *)v17);
      }
      char v37 = 1;
      goto LABEL_54;
    }
    long long v38 = operator new(v11 + 33, (std::align_val_t)8uLL);
    uint64_t v39 = v38;
    unint64_t v40 = (char *)(v38 + 4);
    if (v11) {
      memcpy(v38 + 4, v12, v11);
    }
    v40[v11] = 0;
    unint64_t *v39 = v11;
    v39[1] = v17;
    void v39[2] = v32;
    v39[3] = v32;
    *(void *)(v35 + 8 * v34) = v39;
    ++DWORD1(v66);
    llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v65, v34);
    char v37 = 0;
LABEL_54:
    a1 = v58;
    if (v18) {
      operator delete((void *)v18);
    }
    if (v37)
    {
LABEL_81:
      getErrorErrorCat();
      uint64_t v61 = 3;
      uint64_t v62 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
    }
    unint64_t v9 = (unint64_t)v70;
    BOOL v10 = (unint64_t)v70 > 7;
    size_t v8 = v57 - 1;
  }
  while (v57 != (char *)1);
LABEL_58:
  if (!v10) {
    goto LABEL_81;
  }
  uint64_t v41 = (char *)*v69;
  unint64_t v42 = v9 - 8;
  ++v69;
  uint64_t v70 = (char *)v42;
  if (v41)
  {
    if (v42 >= 8)
    {
      uint64_t v59 = a1;
      while (1)
      {
        uint64_t v44 = (uint64_t *)(v69 + 1);
        unint64_t v43 = (unint64_t)*v69++;
        uint64_t v70 = (char *)(v42 - 8);
        unint64_t v45 = v42 - 8 - v43;
        if (v42 - 8 < v43) {
          break;
        }
        uint64_t v69 = (void **)((char *)v44 + v43);
        uint64_t v70 = (char *)(v42 - 8 - v43);
        BOOL v15 = v45 >= 8;
        uint64_t v46 = (char *)(v45 - 8);
        if (!v15) {
          break;
        }
        unint64_t v47 = *(uint64_t *)((char *)v44 + v43);
        uint64_t v69 = (void **)((char *)v44 + v43 + 8);
        uint64_t v70 = v46;
        if (v43) {
          long long v48 = v44;
        }
        else {
          long long v48 = 0;
        }
        unsigned int v49 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)&v67, v48, v43);
        uint64_t v50 = v67;
        uint64_t v51 = *(void *)(v67 + 8 * v49);
        if (v51)
        {
          if (v51 != -8) {
            goto LABEL_81;
          }
          --DWORD2(v68);
        }
        uint64_t v52 = operator new(v43 + 17, (std::align_val_t)8uLL);
        long long v53 = v52;
        long long v54 = (char *)(v52 + 2);
        if (v43) {
          memcpy(v52 + 2, v44, v43);
        }
        --v41;
        v54[v43] = 0;
        *long long v53 = v43;
        v53[1] = v47;
        *(void *)(v50 + 8 * v49) = v53;
        ++DWORD1(v68);
        llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v67, v49);
        a1 = v59;
        if (!v41) {
          goto LABEL_90;
        }
        unint64_t v42 = (unint64_t)v70;
        if ((unint64_t)v70 < 8) {
          goto LABEL_81;
        }
      }
    }
    goto LABEL_81;
  }
LABEL_90:
  long long v56 = *a1;
  char v76 = 0;
  v71[0] = *(_OWORD *)__p;
  v71[1] = v64;
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v64 = 0;
  uint64_t v72 = v65;
  long long v73 = v66;
  DWORD2(v66) = 0;
  uint64_t v65 = 0;
  *(void *)&long long v66 = 0;
  uint64_t v74 = v67;
  long long v75 = v68;
  uint64_t v67 = 0;
  *(void *)&long long v68 = 0;
  DWORD2(v68) = 0;
  std::promise<llvm::MSVCPExpected<llvm::orc::SimpleRemoteEPCExecutorInfo>>::set_value(*v56, (uint64_t *)v71);
  llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::~Expected((uint64_t)v71);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)&v67);
  llvm::StringMap<std::vector<char>,llvm::MallocAllocator>::~StringMap((uint64_t)&v65);
  if (SBYTE7(v64) < 0) {
    operator delete(__p[0]);
  }
  if (v60[1] >= (void *)9)
  {
    int v55 = v60[0];
    goto LABEL_88;
  }
  if (!v60[1])
  {
    int v55 = v60[0];
    if (v60[0]) {
LABEL_88:
    }
      free(v55);
  }
}

void std::promise<llvm::MSVCPExpected<llvm::orc::SimpleRemoteEPCExecutorInfo>>::set_value(uint64_t a1, uint64_t *a2)
{
  if (a1)
  {
    int v4 = (std::mutex *)(a1 + 24);
    std::mutex::lock((std::mutex *)(a1 + 24));
    if ((*(unsigned char *)(a1 + 136) & 1) == 0)
    {
      v8.__ptr_ = 0;
      uint64_t v5 = *(void *)(a1 + 16);
      std::exception_ptr::~exception_ptr(&v8);
      if (!v5)
      {
        llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::moveConstruct<llvm::orc::SimpleRemoteEPCExecutorInfo>(a1 + 144, a2);
        *(_DWORD *)(a1 + 136) |= 5u;
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
        std::mutex::unlock(v4);
        return;
      }
    }
    std::__throw_future_error[abi:nn180100]();
  }
  uint64_t v6 = std::__throw_future_error[abi:nn180100]();
  llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::moveConstruct<llvm::orc::SimpleRemoteEPCExecutorInfo>(v6, v7);
}

uint64_t llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::moveConstruct<llvm::orc::SimpleRemoteEPCExecutorInfo>(uint64_t result, uint64_t *a2)
{
  char v2 = *((unsigned char *)a2 + 80);
  *(unsigned char *)(result + 80) = *(unsigned char *)(result + 80) & 0xFE | v2 & 1;
  if (v2)
  {
    uint64_t v5 = *a2;
    *a2 = 0;
    *(void *)__n128 result = v5;
  }
  else
  {
    long long v3 = *(_OWORD *)a2;
    *(void *)(result + 16) = a2[2];
    *(_OWORD *)__n128 result = v3;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    uint64_t v4 = a2[4];
    *(void *)(result + 24) = a2[3];
    *(void *)(result + 32) = v4;
    *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 5);
    *((_DWORD *)a2 + 12) = 0;
    a2[4] = 0;
    a2[5] = 0;
    *(void *)(result + 56) = a2[7];
    *(_OWORD *)(result + 64) = *((_OWORD *)a2 + 4);
    a2[7] = 0;
    a2[8] = 0;
    *((_DWORD *)a2 + 18) = 0;
  }
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager>>,llvm::orc::SimpleRemoteEPC &>::CallImpl<llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager>> (*)(llvm::orc::SimpleRemoteEPC &)>(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

uint64_t *llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v3) {
LABEL_5:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else if (v3)
  {
    goto LABEL_5;
  }
  return a1;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>>,llvm::orc::SimpleRemoteEPC &>::CallImpl<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>> (*)(llvm::orc::SimpleRemoteEPC &)>(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

uint64_t *llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v3) {
LABEL_5:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else if (v3)
  {
    goto LABEL_5;
  }
  return a1;
}

uint64_t llvm::orc::GenericNamedTaskImpl<llvm::orc::SimpleRemoteEPC::handleCallWrapper(unsigned long long,llvm::orc::ExecutorAddr,llvm::SmallVector<char,128u>)::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE630;
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  char v2 = *(void **)(a1 + 32);
  if (v2 != (void *)(a1 + 56)) {
    free(v2);
  }
  return a1;
}

void llvm::orc::GenericNamedTaskImpl<llvm::orc::SimpleRemoteEPC::handleCallWrapper(unsigned long long,llvm::orc::ExecutorAddr,llvm::SmallVector<char,128u>)::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(void *)a1 = &unk_270DBE630;
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  char v2 = *(void **)(a1 + 32);
  if (v2 != (void *)(a1 + 56)) {
    free(v2);
  }
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *llvm::orc::GenericNamedTaskImpl<llvm::orc::SimpleRemoteEPC::handleCallWrapper(unsigned long long,llvm::orc::ExecutorAddr,llvm::SmallVector<char,128u>)::$_0>::printDescription(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 184));
}

void *llvm::orc::GenericNamedTaskImpl<llvm::orc::SimpleRemoteEPC::handleCallWrapper(unsigned long long,llvm::orc::ExecutorAddr,llvm::SmallVector<char,128u>)::$_0>::run(void *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v1 = a1[2];
  uint64_t v2 = *(void *)(a1[1] + 32);
  *(void *)&long long v4 = a1[1];
  *((void *)&v4 + 1) = v1;
  uint64_t v5 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::orc::shared::WrapperFunctionResult>::CallbacksHolder<llvm::orc::SimpleRemoteEPC::handleCallWrapper(unsigned long long,llvm::orc::ExecutorAddr,llvm::SmallVector<char,128u>)::$_0::operator() const(void)::{lambda(llvm::orc::shared::WrapperFunctionResult)#1},llvm::orc::SimpleRemoteEPC::handleCallWrapper(unsigned long long,llvm::orc::ExecutorAddr,llvm::SmallVector<char,128u>)::$_0::operator() const(void)::{lambda(llvm::orc::shared::WrapperFunctionResult)#1},void>::Callbacks
     + 2;
  llvm::orc::ExecutionSession::runJITDispatchHandler(v2, &v4, a1[3], a1[4], a1[5]);
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v4);
}

void llvm::detail::UniqueFunctionBase<void,llvm::orc::shared::WrapperFunctionResult>::CallImpl<llvm::orc::SimpleRemoteEPC::handleCallWrapper(unsigned long long,llvm::orc::ExecutorAddr,llvm::SmallVector<char,128u>)::$_0::operator() const(void)::{lambda(llvm::orc::shared::WrapperFunctionResult)#1}>(uint64_t *a1, uint64_t a2)
{
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = *a1;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(*a1 + 312) + 24))(&v7);
  if (v7)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    uint64_t v6 = v7;
    uint64_t v7 = 0;
    llvm::orc::ExecutionSession::reportError(v3, &v6);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  if (v5[1] >= (void *)9)
  {
    long long v4 = v5[0];
LABEL_10:
    free(v4);
    return;
  }
  if (!v5[1])
  {
    long long v4 = v5[0];
    if (v5[0]) {
      goto LABEL_10;
    }
  }
}

uint64_t *llvm::IRBuilderBase::CreateICmp(uint64_t a1, __int16 a2, llvm::CmpInst **a3, uint64_t a4, uint64_t a5)
{
  __n128 result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72));
  if (!result)
  {
    unint64_t v11 = (char *)operator new(0x80uLL);
    *((_DWORD *)v11 + 21) = *((_DWORD *)v11 + 21) & 0x38000000 | 2;
    uint64_t v12 = (uint64_t *)(v11 + 64);
    *(void *)unint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    *((void *)v11 + 3) = v11 + 64;
    *((void *)v11 + 4) = 0;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = v11 + 64;
    __int16 v16 = 257;
    llvm::CmpInst::makeCmpResultType(*a3, v13);
    llvm::CmpInst::CmpInst(v12, v14, 53, a2, (uint64_t)a3, a4, (const llvm::Twine *)v15, 0, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, v12, a5);
  }
  return result;
}

double llvm::CmpInst::makeCmpResultType(llvm::CmpInst *this, llvm::Type *a2)
{
  uint64_t v3 = (uint64_t **)(**(void **)this + 1920);
  if (this)
  {
    if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
      return llvm::VectorType::get(v3, (llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)));
    }
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateCast(uint64_t a1, int a2, unsigned __int8 *a3, llvm::Type *a4, uint64_t a5)
{
  if (*(llvm::Type **)a3 == a4) {
    return (uint64_t *)a3;
  }
  if (a3[16] > 0x14u)
  {
    __int16 v11 = 257;
    unint64_t v9 = (uint64_t *)llvm::CastInst::Create(a2, (llvm::Value *)a3, a4, (const llvm::Twine *)v10, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, v9, a5);
  }
  a3 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 120))(*(void *)(a1 + 72));
  if (a3) {
    BOOL v7 = a3[16] >= 0x1Cu;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    return (uint64_t *)a3;
  }
  return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, (uint64_t *)a3, a5);
}

uint64_t *llvm::IRBuilderBase::CreateAlignedStore(uint64_t *a1, llvm::Type **a2, uint64_t a3, __int16 a4, __int16 a5)
{
  char Alignment = a4;
  if ((a4 & 0xFF00) == 0) {
    char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(a1[6] + 56) + 40) + 256), *a2, 1);
  }
  BOOL v10 = (char *)operator new(0x80uLL);
  *((_DWORD *)v10 + 21) = *((_DWORD *)v10 + 21) & 0x38000000 | 2;
  __int16 v11 = (uint64_t *)(v10 + 64);
  *(void *)BOOL v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = v10 + 64;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 6) = 0;
  *((void *)v10 + 7) = v10 + 64;
  llvm::StoreInst::StoreInst((uint64_t)(v10 + 64), (uint64_t)a2, a3, a5, Alignment, 0, 1, 0);
  __int16 v14 = 257;
  return llvm::IRBuilderBase::Insert<llvm::LoadInst>(a1, v11, (uint64_t)v13);
}

void llvm::orc::ExecutorProcessControl::~ExecutorProcessControl(void **this)
{
  *this = &unk_270DBE710;
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)(this + 19));
  llvm::StringMap<std::vector<char>,llvm::MallocAllocator>::~StringMap((uint64_t)(this + 16));
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  uint64_t v2 = this[3];
  this[3] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
}

void llvm::orc::SelfExecutorProcessControl::jitDispatchViaWrapperFunctionManager(llvm::orc::SelfExecutorProcessControl *this, void *a2, const void *a3, const char *a4)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  operator new();
}

void llvm::orc::SelfExecutorProcessControl::Create(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!*a1)
  {
    uint64_t v6 = (char *)operator new(0x70uLL);
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
    *(void *)uint64_t v6 = &unk_270DBBB98;
    *((_OWORD *)v6 + 2) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *(_OWORD *)(v6 + 92) = 0u;
    *((_DWORD *)v6 + 27) = 16;
    BOOL v7 = (std::__shared_weak_count *)a1[1];
    a1[1] = v6;
    *((void *)v6 + 3) = 850045863;
    *a1 = v6 + 24;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v7);
    }
  }
  if (!*a2) {
    operator new();
  }
  llvm::sys::Process::getPageSize((uint64_t)&v13);
  if ((v14 & 1) == 0)
  {
    llvm::sys::getProcessTriple(&__p);
    __int16 v10 = 260;
    *(void *)&long long v9 = &__p;
    llvm::Triple::Triple(&v11, (const llvm::Twine *)&v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    operator new();
  }
  uint64_t v8 = v13;
  *(unsigned char *)(a3 + 8) |= 1u;
  *(void *)a3 = v8;
}

void llvm::orc::SelfExecutorProcessControl::loadDylib(_anonymous_namespace_ *a1@<X1>, uint64_t a2@<X8>)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v6 = 0;
  PermanentLibrary = llvm::sys::DynamicLibrary::getPermanentLibrary(a1, (uint64_t)__p);
  if (PermanentLibrary == &llvm::sys::DynamicLibrary::Invalid)
  {
    getErrorErrorCat();
    operator new();
  }
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(void *)a2 = PermanentLibrary;
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void llvm::orc::SelfExecutorProcessControl::lookupSymbolsAsync(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  v60[0] = 0;
  int64x2_t v5 = 0uLL;
  int64x2_t v59 = 0u;
  if (a3)
  {
    uint64_t v6 = a2;
    uint64_t v53 = a2 + 16 * a3;
    uint64_t v8 = &llvm::sys::DynamicLibrary::Invalid;
    do
    {
      long long v9 = *(void **)v6;
      uint64_t v10 = v59.i64[1];
      if (v59.i64[1] >= v60[0])
      {
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v59.i64[1] - v59.i64[0]) >> 3);
        unint64_t v13 = v12 + 1;
        if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_62:
        }
          abort();
        if (0x5555555555555556 * ((v60[0] - v59.i64[0]) >> 3) > v13) {
          unint64_t v13 = 0x5555555555555556 * ((v60[0] - v59.i64[0]) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v60[0] - v59.i64[0]) >> 3) >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v13;
        }
        long long v64 = v60;
        uint64_t v15 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v60, v14);
        __int16 v16 = &v15[3 * v12];
        uint64_t v61 = v15;
        v62.i64[0] = (uint64_t)v16;
        int64_t v63 = &v15[3 * v17];
        uint64_t v11 = (uint64_t)(v16 + 3);
        v16[1] = 0;
        uint64_t v16[2] = 0;
        *__int16 v16 = 0;
        v62.i64[1] = (uint64_t)(v16 + 3);
        unint64_t v18 = (void *)v59.i64[1];
        uint64_t v19 = (void *)v59.i64[0];
        uint64_t v20 = v62.i64[0];
        if (v59.i64[1] == v59.i64[0])
        {
          int64x2_t v22 = vdupq_n_s64(v59.u64[1]);
        }
        else
        {
          do
          {
            *(void *)(v20 - 24) = 0;
            *(void *)(v20 - 16) = 0;
            v20 -= 24;
            *(void *)(v20 + 16) = 0;
            long long v21 = *(_OWORD *)(v18 - 3);
            v18 -= 3;
            *(_OWORD *)uint64_t v20 = v21;
            *(void *)(v20 + 16) = v18[2];
            *unint64_t v18 = 0;
            v18[1] = 0;
            long long v18[2] = 0;
          }
          while (v18 != v19);
          int64x2_t v22 = v59;
          uint64_t v11 = v62.i64[1];
        }
        v59.i64[0] = v20;
        v59.i64[1] = v11;
        int64x2_t v62 = v22;
        int64x2_t v23 = (void **)v60[0];
        v60[0] = v63;
        int64_t v63 = v23;
        uint64_t v61 = (void **)v22.i64[0];
        std::__split_buffer<std::vector<llvm::orc::ExecutorSymbolDef>>::~__split_buffer((uint64_t)&v61);
      }
      else
      {
        uint64_t v11 = v59.i64[1] + 24;
        *(void *)v59.i64[1] = 0;
        *(void *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 0;
      }
      v59.i64[1] = v11;
      uint64_t v54 = v6;
      uint64_t v24 = *(uint64_t ***)(v6 + 8);
      size_t v25 = *v24;
      unint64_t v26 = v24[1];
      while (v25 != v26)
      {
        uint64_t v27 = (void *)*v25;
        if (*(unsigned char *)(a1 + 192))
        {
          uint64_t v27 = (void *)(*v25 + 1);
          uint64_t v28 = 1;
        }
        else
        {
          uint64_t v28 = 0;
        }
        std::string::basic_string[abi:nn180100](__p, v27 + 2, *(void *)*v25 - v28);
        if (v9 == v8)
        {
          uint64_t v30 = 0;
        }
        else
        {
          if (v58 >= 0) {
            unint64_t v29 = __p;
          }
          else {
            unint64_t v29 = (void **)__p[0];
          }
          uint64_t v30 = dlsym(v9, (const char *)v29);
        }
        if (v30) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = *((_DWORD *)v25 + 2) == 0;
        }
        char v32 = !v31;
        if (v31)
        {
          long long v55 = 0uLL;
          uint64_t v56 = 0;
          *((void *)&v55 + 1) = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>((char **)&v55, v25);
          operator new();
        }
        unint64_t v33 = v8;
        uint64_t v34 = v59.i64[1];
        unint64_t v35 = *(void *)(v59.i64[1] - 16);
        unint64_t v36 = *(void *)(v59.i64[1] - 8);
        if (v35 >= v36)
        {
          uint64_t v38 = *(void *)(v59.i64[1] - 24);
          uint64_t v39 = (uint64_t)(v35 - v38) >> 4;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 60) {
            goto LABEL_62;
          }
          uint64_t v41 = v36 - v38;
          if (v41 >> 3 > v40) {
            unint64_t v40 = v41 >> 3;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          if (v42) {
            unint64_t v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v59.i64[1] - 8, v42);
          }
          else {
            unint64_t v43 = 0;
          }
          uint64_t v44 = &v43[16 * v39];
          *(void *)uint64_t v44 = v30;
          *((_WORD *)v44 + 4) = 4096;
          uint64_t v46 = *(_WORD **)(v34 - 24);
          unint64_t v45 = *(_WORD **)(v34 - 16);
          unint64_t v47 = v44;
          if (v45 != v46)
          {
            do
            {
              uint64_t v48 = *((void *)v45 - 2);
              v45 -= 8;
              __int16 v49 = v45[4];
              *((void *)v47 - 2) = v48;
              v47 -= 16;
              *((_WORD *)v47 + 4) = v49;
            }
            while (v45 != v46);
            unint64_t v45 = *(_WORD **)(v34 - 24);
          }
          char v37 = v44 + 16;
          *(void *)(v34 - 24) = v47;
          *(void *)(v34 - 16) = v44 + 16;
          *(void *)(v34 - 8) = &v43[16 * v42];
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          *(void *)unint64_t v35 = v30;
          *(_WORD *)(v35 + 8) = 4096;
          char v37 = (char *)(v35 + 16);
        }
        *(void *)(v34 - 16) = v37;
        uint64_t v8 = v33;
        if (v58 < 0) {
          operator delete(__p[0]);
        }
        if ((v32 & 1) == 0) {
          goto LABEL_61;
        }
        v25 += 2;
      }
      uint64_t v6 = v54 + 16;
    }
    while (v54 + 16 != v53);
    int64x2_t v5 = v59;
    uint64_t v50 = v60[0];
    char v51 = v67 & 0xFE;
  }
  else
  {
    uint64_t v50 = 0;
    char v51 = 0;
  }
  char v67 = v51;
  int64x2_t v65 = v5;
  uint64_t v66 = v50;
  v60[0] = 0;
  int64x2_t v59 = 0uLL;
  uint64_t v52 = a4[3];
  if ((v52 & 2) == 0) {
    a4 = (void *)*a4;
  }
  (*(void (**)(void *, int64x2_t *))(v52 & 0xFFFFFFFFFFFFFFF8))(a4, &v65);
  llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v65);
LABEL_61:
  uint64_t v61 = (void **)&v59;
  std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100](&v61);
}

uint64_t llvm::orc::SelfExecutorProcessControl::runAsMain@<X0>(uint64_t (*a1)(void, char *)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v6[0] = 0;
  v6[16] = 0;
  uint64_t result = llvm::orc::runAsMain(a1, a2, a3, (uint64_t)v6);
  *(unsigned char *)(a4 + 8) &= ~1u;
  *(_DWORD *)a4 = result;
  return result;
}

uint64_t llvm::orc::SelfExecutorProcessControl::runAsVoidFunction@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(_DWORD *)a2 = result;
  return result;
}

uint64_t llvm::orc::SelfExecutorProcessControl::runAsIntFunction@<X0>(uint64_t (*a1)(uint64_t)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = a1(a2);
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = result;
  return result;
}

void llvm::orc::SelfExecutorProcessControl::callWrapperAsync(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), void *a3, uint64_t a4, uint64_t a5)
{
  long long v9 = (void *)a2(a4, a5);
  unint64_t v10 = v6;
  llvm::orc::ExecutorProcessControl::IncomingWFRHandler::operator()(a3, (uint64_t)&v9);
  if (v10 >= 9)
  {
    BOOL v7 = v9;
LABEL_7:
    free(v7);
    return;
  }
  BOOL v7 = v9;
  if (v10) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v9 == 0;
  }
  if (!v8) {
    goto LABEL_7;
  }
}

uint64_t llvm::orc::SelfExecutorProcessControl::disconnect@<X0>(llvm::orc::SelfExecutorProcessControl *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 3) + 24))(*((void *)this + 3));
  *a2 = 0;
  return result;
}

uint64_t llvm::orc::SelfExecutorProcessControl::writeUInt8sAsync(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    unint64_t v6 = (unsigned char *)(a2 + 8);
    do
    {
      **((unsigned char **)v6 - 1) = *v6;
      v6 += 16;
      v5 -= 16;
    }
    while (v5);
  }
  uint64_t v9 = 0;
  uint64_t v7 = a4[3];
  if ((v7 & 2) == 0) {
    uint64_t v4 = (void *)*a4;
  }
  (*(void (**)(void *, uint64_t *))(v7 & 0xFFFFFFFFFFFFFFF8))(v4, &v9);
  uint64_t result = v9;
  if (v9) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return result;
}

uint64_t llvm::orc::SelfExecutorProcessControl::writeUInt16sAsync(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    unint64_t v6 = (_WORD *)(a2 + 8);
    do
    {
      **((_WORD **)v6 - 1) = *v6;
      v6 += 8;
      v5 -= 16;
    }
    while (v5);
  }
  uint64_t v9 = 0;
  uint64_t v7 = a4[3];
  if ((v7 & 2) == 0) {
    uint64_t v4 = (void *)*a4;
  }
  (*(void (**)(void *, uint64_t *))(v7 & 0xFFFFFFFFFFFFFFF8))(v4, &v9);
  uint64_t result = v9;
  if (v9) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return result;
}

uint64_t llvm::orc::SelfExecutorProcessControl::writeUInt32sAsync(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    unint64_t v6 = (_DWORD *)(a2 + 8);
    do
    {
      **((_DWORD **)v6 - 1) = *v6;
      v6 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  uint64_t v9 = 0;
  uint64_t v7 = a4[3];
  if ((v7 & 2) == 0) {
    uint64_t v4 = (void *)*a4;
  }
  (*(void (**)(void *, uint64_t *))(v7 & 0xFFFFFFFFFFFFFFF8))(v4, &v9);
  uint64_t result = v9;
  if (v9) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return result;
}

uint64_t llvm::orc::SelfExecutorProcessControl::writeUInt64sAsync(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    unint64_t v6 = (void *)(a2 + 8);
    do
    {
      *(void *)*(v6 - 1) = *v6;
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  uint64_t v9 = 0;
  uint64_t v7 = a4[3];
  if ((v7 & 2) == 0) {
    uint64_t v4 = (void *)*a4;
  }
  (*(void (**)(void *, uint64_t *))(v7 & 0xFFFFFFFFFFFFFFF8))(v4, &v9);
  uint64_t result = v9;
  if (v9) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return result;
}

uint64_t llvm::orc::SelfExecutorProcessControl::writeBuffersAsync(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = a2 + 24 * a3;
    do
    {
      memcpy(*(void **)v5, *(const void **)(v5 + 8), *(void *)(v5 + 16));
      v5 += 24;
    }
    while (v5 != v6);
  }
  uint64_t v9 = 0;
  uint64_t v7 = a4[3];
  if ((v7 & 2) == 0) {
    a4 = (void *)*a4;
  }
  (*(void (**)(void *, uint64_t *))(v7 & 0xFFFFFFFFFFFFFFF8))(a4, &v9);
  uint64_t result = v9;
  if (v9) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return result;
}

void llvm::orc::SelfExecutorProcessControl::~SelfExecutorProcessControl(llvm::orc::SelfExecutorProcessControl *this)
{
  *(void *)this = &unk_270DBE768;
  uint64_t v2 = *((void *)this + 23);
  *((void *)this + 22) = &unk_270DBE7E8;
  *((void *)this + 23) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  llvm::orc::ExecutorProcessControl::~ExecutorProcessControl((void **)this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_270DBE768;
  uint64_t v2 = *((void *)this + 23);
  *((void *)this + 22) = &unk_270DBE7E8;
  *((void *)this + 23) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  llvm::orc::ExecutorProcessControl::~ExecutorProcessControl((void **)this);
  JUMPOUT(0x263E500B0);
}

void non-virtual thunk to'llvm::orc::SelfExecutorProcessControl::~SelfExecutorProcessControl(llvm::orc::SelfExecutorProcessControl *this)
{
  uint64_t v2 = (void **)((char *)this - 176);
  *((void *)this - 22) = &unk_270DBE768;
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_270DBE7E8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  llvm::orc::ExecutorProcessControl::~ExecutorProcessControl(v2);
}

{
  void **v2;
  uint64_t v3;
  uint64_t vars8;

  uint64_t v2 = (void **)((char *)this - 176);
  *((void *)this - 22) = &unk_270DBE768;
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_270DBE7E8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  llvm::orc::ExecutorProcessControl::~ExecutorProcessControl(v2);
  JUMPOUT(0x263E500B0);
}

void llvm::detail::UniqueFunctionBase<void,llvm::orc::shared::WrapperFunctionResult>::CallImpl<llvm::orc::SelfExecutorProcessControl::jitDispatchViaWrapperFunctionManager(void *,void const*,char const*,unsigned long)::$_0>(uint64_t *a1, uint64_t a2)
{
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  std::promise<llvm::orc::shared::WrapperFunctionResult>::set_value(a1, (uint64_t)v4);
  if (v4[1] >= (void *)9)
  {
    uint64_t v2 = v4[0];
LABEL_7:
    free(v2);
    return;
  }
  uint64_t v2 = v4[0];
  if (v4[1]) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v4[0] == 0;
  }
  if (!v3) {
    goto LABEL_7;
  }
}

void *llvm::detail::UniqueFunctionBase<void,llvm::orc::shared::WrapperFunctionResult>::MoveImpl<llvm::orc::SelfExecutorProcessControl::jitDispatchViaWrapperFunctionManager(void *,void const*,char const*,unsigned long)::$_0>(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

uint64_t llvm::orc::InPlaceTaskDispatcher::dispatch(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 48))();
}

void llvm::orc::DynamicThreadPoolTaskDispatcher::dispatch(uint64_t a1, uint64_t *a2)
{
  int v4 = (*(uint64_t (**)(uint64_t, void *))(*(void *)*a2 + 24))(*a2, &llvm::orc::MaterializationTask::ID);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (!v4)
  {
LABEL_9:
    ++*(void *)(a1 + 80);
    std::mutex::unlock((std::mutex *)(a1 + 8));
    *a2 = 0;
    operator new();
  }
  if (!*(unsigned char *)(a1 + 144))
  {
    uint64_t v5 = *(void *)(a1 + 152);
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(a1 + 152);
  if (v5 != *(void *)(a1 + 136))
  {
LABEL_8:
    *(void *)(a1 + 152) = v5 + 1;
    goto LABEL_9;
  }
  std::deque<std::unique_ptr<llvm::orc::Task>>::push_back((void *)(a1 + 160), a2);
  std::mutex::unlock((std::mutex *)(a1 + 8));
}

void llvm::orc::DynamicThreadPoolTaskDispatcher::shutdown(llvm::orc::DynamicThreadPoolTaskDispatcher *this)
{
  m = (std::mutex *)((char *)this + 8);
  v3.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 8);
  v3.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((unsigned char *)this + 72) = 0;
  if (!*((void *)this + 10)) {
    goto LABEL_5;
  }
  do
    std::condition_variable::wait((std::condition_variable *)((char *)this + 88), &v3);
  while (*((void *)this + 10));
  if (v3.__owns_)
  {
    m = v3.__m_;
LABEL_5:
    std::mutex::unlock(m);
  }
}

void llvm::orc::DynamicThreadPoolTaskDispatcher::~DynamicThreadPoolTaskDispatcher(llvm::orc::DynamicThreadPoolTaskDispatcher *this)
{
  *(void *)this = &unk_270DBE830;
  uint64_t v2 = (std::mutex *)((char *)this + 8);
  std::deque<std::unique_ptr<llvm::orc::Task>>::~deque[abi:nn180100]((void *)this + 20);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 88));
  std::mutex::~mutex(v2);
}

{
  std::mutex *v2;
  uint64_t vars8;

  *(void *)this = &unk_270DBE830;
  uint64_t v2 = (std::mutex *)((char *)this + 8);
  std::deque<std::unique_ptr<llvm::orc::Task>>::~deque[abi:nn180100]((void *)this + 20);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 88));
  std::mutex::~mutex(v2);
  JUMPOUT(0x263E500B0);
}

void llvm::orc::InPlaceTaskDispatcher::~InPlaceTaskDispatcher(llvm::orc::InPlaceTaskDispatcher *this)
{
}

uint64_t std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,llvm::orc::DynamicThreadPoolTaskDispatcher::dispatch(std::unique_ptr<llvm::orc::Task>)::$_0>>(uint64_t a1)
{
  unint64_t v10 = (uint64_t *)a1;
  uint64_t v2 = std::__thread_local_data();
  std::unique_lock<std::mutex> v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = *(void *)(a1 + 8);
  (*(void (**)(void))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16));
  std::mutex::lock((std::mutex *)(v4 + 8));
  while (*(void *)(v4 + 200))
  {
    uint64_t v5 = *(void *)(*(void *)(v4 + 168) + ((*(void *)(v4 + 192) >> 6) & 0x3FFFFFFFFFFFFF8));
    uint64_t v6 = *(void *)(v4 + 192) & 0x1FFLL;
    uint64_t v7 = *(void *)(v5 + 8 * v6);
    *(void *)(v5 + 8 * v6) = 0;
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v7;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    std::deque<std::unique_ptr<llvm::orc::Task>>::pop_front((void *)(v4 + 160));
    if (!*(unsigned char *)(a1 + 24))
    {
      ++*(void *)(v4 + 152);
      *(unsigned char *)(a1 + 24) = 1;
    }
    std::mutex::unlock((std::mutex *)(v4 + 8));
    (*(void (**)(void))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16));
    std::mutex::lock((std::mutex *)(v4 + 8));
  }
  if (*(unsigned char *)(a1 + 24)) {
    --*(void *)(v4 + 152);
  }
  --*(void *)(v4 + 80);
  std::condition_variable::notify_all((std::condition_variable *)(v4 + 88));
  std::mutex::unlock((std::mutex *)(v4 + 8));
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,llvm::orc::DynamicThreadPoolTaskDispatcher::dispatch(std::unique_ptr<llvm::orc::Task>)::$_0>>::~unique_ptr[abi:nn180100](&v10);
  return 0;
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,llvm::orc::DynamicThreadPoolTaskDispatcher::dispatch(std::unique_ptr<llvm::orc::Task>)::$_0>>::~unique_ptr[abi:nn180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = v2[2];
    v2[2] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    std::unique_ptr<std::__thread_struct>::reset[abi:nn180100](v2, 0);
    MEMORY[0x263E500B0](v2, 0x1020C4034AC6F07);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x263E4FE50]();
    JUMPOUT(0x263E500B0);
  }
  return result;
}

uint64_t llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(llvm::Module **)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(llvm::Module *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    std::unique_ptr<llvm::Module>::reset[abi:nn180100]((llvm::Module **)a1, 0);
  }
  return a1;
}

void *std::__function::__value_func<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()(unsigned int)>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()(unsigned int)>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::optional<std::string> ()(llvm::StringRef,llvm::StringRef)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *llvm::anonymous namespace'::DefaultMMapper::allocateMappedMemory@<X0>(uint64_t a1@<X2>, void *a2@<X3>, int a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  return llvm::sys::Memory::allocateMappedMemory(a1, a2, a3, a4, a5);
}

uint64_t llvm::anonymous namespace'::DefaultMMapper::protectMappedMemory(uint64_t a1, uint64_t a2, int a3)
{
  return llvm::sys::Memory::protectMappedMemory(a2, a3);
}

uint64_t llvm::anonymous namespace'::DefaultMMapper::releaseMappedMemory(uint64_t a1, uint64_t a2)
{
  return llvm::sys::Memory::releaseMappedMemory(a2);
}

void llvm::anonymous namespace'::DefaultMMapper::~DefaultMMapper(llvm::_anonymous_namespace_::DefaultMMapper *this)
{
}

uint64_t _GLOBAL__sub_I_SectionMemoryManager_cpp()
{
}

uint64_t llvm::jitlink::DWARFRecordSectionSplitter::operator()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v134 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::jitlink::LinkGraph::findSectionByName(a2, *a1, a1[1], a3);
  if (result)
  {
    uint64_t v8 = result;
    unint64_t v106 = 0;
    uint64_t v107 = 0;
    uint64_t v9 = result + 32;
    unsigned int v108 = 0;
    unint64_t v10 = (void **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(result + 32);
    uint64_t v12 = *(void *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
    if ((void **)v12 != v10)
    {
      unint64_t v13 = v10;
      unint64_t v14 = v11;
      do
      {
        unint64_t v115 = 0;
        unint64_t v115 = *v13;
        uint64_t v126 = &v128;
        uint64_t v127 = 0x800000000;
        uint64_t v15 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::FindAndConstruct((uint64_t)&v106, (uint64_t *)&v115);
        std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>::operator=[abi:nn180100]<llvm::SmallVector<llvm::jitlink::Symbol *,8u>,void>((uint64_t)(v15 + 1), (uint64_t)&v126);
        if (v126 != &v128) {
          free(v126);
        }
        while (++v13 != v14)
        {
          if (((unint64_t)*v13 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_10;
          }
        }
        unint64_t v13 = v14;
LABEL_10:
        ;
      }
      while (v13 != (void **)v12);
    }
    __int16 v16 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 56);
    uint64_t v18 = *(void *)(v8 + 56) + 8 * *(unsigned int *)(v8 + 72);
    if ((uint64_t *)v18 != v16)
    {
      uint64_t v19 = v16;
      uint64_t v20 = v17;
      do
      {
        uint64_t v21 = *v19;
        unint64_t v115 = *(void **)(*v19 + 16);
        int64x2_t v22 = v115;
        uint64_t v126 = 0;
        char v23 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::LookupBucketFor<llvm::jitlink::Block *>((uint64_t)v106, v108, (uint64_t)v115, &v126);
        uint64_t v24 = v126;
        if ((v23 & 1) == 0)
        {
          uint64_t v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::InsertIntoBucketImpl<llvm::jitlink::Block *>((uint64_t)&v106, (uint64_t *)&v115, v126);
          *uint64_t v24 = v22;
          *((unsigned char *)v24 + 8) = 0;
          *((unsigned char *)v24 + 88) = 0;
        }
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)v24 + 2, v21);
        while (++v19 != v20)
        {
          if ((*v19 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_20;
          }
        }
        uint64_t v19 = v20;
LABEL_20:
        ;
      }
      while (v19 != (uint64_t *)v18);
    }
    size_t v25 = (void **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v9);
    uint64_t v27 = *(void *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
    if ((void **)v27 != v25)
    {
      uint64_t v28 = v25;
      unint64_t v29 = v26;
      do
      {
        uint64_t v126 = 0;
        uint64_t v30 = (std::__shared_weak_count **)*v28++;
        uint64_t v126 = v30;
        BOOL v31 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::FindAndConstruct((uint64_t)&v106, (uint64_t *)&v126);
        unint64_t v32 = *((unsigned int *)v31 + 4);
        unint64_t v33 = 126 - 2 * __clz(v32);
        if (v32) {
          uint64_t v34 = v33;
        }
        else {
          uint64_t v34 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **,false>(v31[1], (uint64_t *)(v31[1] + 8 * v32), v34, 1);
        while (v28 != v29)
        {
          if (((unint64_t)*v28 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_31;
          }
          ++v28;
        }
        uint64_t v28 = v29;
LABEL_31:
        ;
      }
      while (v28 != (void **)v27);
    }
    if (!v107) {
      goto LABEL_131;
    }
    if (v108)
    {
      uint64_t v35 = 96 * v108;
      unint64_t v36 = v106;
      while ((*v36 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v36 += 12;
        v35 -= 96;
        if (!v35) {
          goto LABEL_131;
        }
      }
    }
    else
    {
      unint64_t v36 = v106;
    }
    char v37 = &v106[12 * v108];
    if (v36 == v37)
    {
LABEL_131:
      *a4 = 0;
    }
    else
    {
      uint64_t v38 = &v127;
      uint64_t v39 = (uint64_t *)*v36;
      while (1)
      {
        unint64_t v40 = (std::__shared_weak_count_vtbl *)v39[3];
        if (!v40)
        {
          __int16 v118 = 1283;
          uint64_t v102 = *a1;
          uint64_t v103 = a1[1];
          unint64_t v115 = "Unexpected zero-fill block in ";
          v117[0] = v102;
          v117[1] = v103;
          operator new();
        }
        uint64_t v41 = v39[4];
        if (!v41)
        {
          *a4 = 0;
          goto LABEL_80;
        }
        int v42 = *(_DWORD *)(a2 + 172);
        uint64_t v105 = v38;
        uint64_t v126 = (std::__shared_weak_count **)&unk_270DBC3C0;
        llvm::BinaryStreamRef::BinaryStreamRef(v38, v40, v41, v42);
        uint64_t v133 = 0;
        std::string __p = 0;
        BOOL v113 = 0;
        uint64_t v114 = 0;
        while (1)
        {
          LODWORD(v119) = 0;
          llvm::BinaryStreamReader::readInteger<unsigned int>((uint64_t)&v126, (unsigned int *)&v119, a4);
          if (*a4) {
            break;
          }
          unint64_t v43 = v119;
          if (v119 == -1)
          {
            unint64_t v115 = 0;
            llvm::BinaryStreamReader::readInteger<unsigned long long>((uint64_t)&v126, (unint64_t *)&v115, a4);
            if (*a4) {
              break;
            }
            unint64_t v43 = (unint64_t)v115;
          }
          llvm::BinaryStreamReader::skip((llvm::BinaryStreamReader *)&v126, v43, a4);
          if (*a4) {
            break;
          }
          if (v132)
          {
            uint64_t v44 = v131;
          }
          else if (v129)
          {
            uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v129 + 40))(v129);
            uint64_t v44 = v45 - v130;
          }
          else
          {
            uint64_t v44 = 0;
          }
          int v46 = v133;
          if (v44 == v133)
          {
            uint64_t v57 = (uint64_t *)operator new(8uLL);
            uint64_t *v57 = (uint64_t)v39;
            char v58 = v57 + 1;
            uint64_t v116 = (char *)(v57 + 1);
            v117[0] = v57 + 1;
            int64x2_t v59 = (unsigned int *)__p;
            uint64_t v60 = (unsigned int *)v113;
            unint64_t v115 = v57;
            if (__p != v113)
            {
              if (v39[3])
              {
                do
                {
                  uint64_t v61 = *v59;
                  unint64_t v63 = v39[1];
                  uint64_t v62 = v39[2];
                  uint64_t v64 = *v39 + v61;
                  v125[0] = 0;
                  v125[1] = 0;
                  uint64_t v123 = 1 << (v63 >> 3);
                  uint64_t v124 = v64;
                  unint64_t v122 = (v123 - 1) & (v61 + (v63 >> 8));
                  int64x2_t v65 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, v62, v125, &v124, (unint64_t *)&v123, (uint64_t *)&v122);
                  char v67 = v65;
                  uint64_t v68 = v116;
                  if ((unint64_t)v116 >= v117[0])
                  {
                    uint64_t v70 = (v116 - (unsigned char *)v115) >> 3;
                    if ((unint64_t)(v70 + 1) >> 61) {
                      goto LABEL_142;
                    }
                    unint64_t v71 = (uint64_t)(v117[0] - (void)v115) >> 2;
                    if (v71 <= v70 + 1) {
                      unint64_t v71 = v70 + 1;
                    }
                    if (v117[0] - (void)v115 >= 0x7FFFFFFFFFFFFFF8uLL) {
                      unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v72 = v71;
                    }
                    if (v72) {
                      long long v73 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)v117, v72);
                    }
                    else {
                      long long v73 = 0;
                    }
                    uint64_t v74 = &v73[8 * v70];
                    *(void *)uint64_t v74 = v67;
                    uint64_t v69 = v74 + 8;
                    char v76 = (char *)v115;
                    long long v75 = v116;
                    if (v116 != v115)
                    {
                      do
                      {
                        uint64_t v77 = *((void *)v75 - 1);
                        v75 -= 8;
                        *((void *)v74 - 1) = v77;
                        v74 -= 8;
                      }
                      while (v75 != v76);
                      long long v75 = (char *)v115;
                    }
                    unint64_t v115 = v74;
                    uint64_t v116 = v69;
                    v117[0] = &v73[8 * v72];
                    if (v75) {
                      operator delete(v75);
                    }
                  }
                  else
                  {
                    *(void *)uint64_t v116 = v65;
                    uint64_t v69 = v68 + 8;
                  }
                  uint64_t v116 = v69;
                  ++v59;
                }
                while (v59 != v60);
                uint64_t v119 = v115;
                uint64_t v120 = v69;
                uint64_t v121 = v117[0];
                uint64_t v116 = 0;
                v117[0] = 0;
                unint64_t v115 = 0;
                llvm::jitlink::LinkGraph::splitBlockImpl((uint64_t **)&v119, 0, &v109, v66);
                if (v119)
                {
                  uint64_t v120 = v119;
                  operator delete(v119);
                }
                if (v115)
                {
                  uint64_t v116 = (char *)v115;
                  operator delete(v115);
                }
                uint64_t v57 = v109;
              }
              else
              {
                uint64_t v104 = v39[4];
                do
                {
                  uint64_t v78 = *v59;
                  uint64_t v79 = (void *)*(v58 - 1);
                  uint64_t v80 = *v39;
                  uint64_t v81 = v78 - *v79 + *v39;
                  v79[3] = 0;
                  v79[4] = v81;
                  uint64_t v82 = v80 + v78;
                  unint64_t v84 = v39[1];
                  uint64_t v83 = v39[2];
                  uint64_t v124 = v39[4];
                  v125[0] = v82;
                  unint64_t v122 = ((1 << (v84 >> 3)) - 1) & (v78 + (v84 >> 8));
                  uint64_t v123 = 1 << (v84 >> 3);
                  uint64_t v85 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, v83, &v124, v125, (unint64_t *)&v123, (uint64_t *)&v122);
                  uint64_t v86 = v85;
                  uint64_t v87 = v116;
                  if ((unint64_t)v116 >= v117[0])
                  {
                    uint64_t v88 = (v116 - (unsigned char *)v115) >> 3;
                    if ((unint64_t)(v88 + 1) >> 61) {
                      goto LABEL_142;
                    }
                    unint64_t v89 = (uint64_t)(v117[0] - (void)v115) >> 2;
                    if (v89 <= v88 + 1) {
                      unint64_t v89 = v88 + 1;
                    }
                    if (v117[0] - (void)v115 >= 0x7FFFFFFFFFFFFFF8uLL) {
                      unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v90 = v89;
                    }
                    if (v90) {
                      uint64_t v91 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)v117, v90);
                    }
                    else {
                      uint64_t v91 = 0;
                    }
                    uint64_t v92 = (uint64_t *)&v91[8 * v88];
                    *uint64_t v92 = (uint64_t)v86;
                    char v58 = v92 + 1;
                    uint64_t v94 = (char *)v115;
                    uint64_t v93 = v116;
                    if (v116 != v115)
                    {
                      do
                      {
                        uint64_t v95 = *((void *)v93 - 1);
                        v93 -= 8;
                        *--uint64_t v92 = v95;
                      }
                      while (v93 != v94);
                      uint64_t v93 = (char *)v115;
                    }
                    unint64_t v115 = v92;
                    uint64_t v116 = (char *)v58;
                    v117[0] = &v91[8 * v90];
                    if (v93) {
                      operator delete(v93);
                    }
                  }
                  else
                  {
                    *(void *)uint64_t v116 = v85;
                    char v58 = (uint64_t *)(v87 + 8);
                  }
                  uint64_t v116 = (char *)v58;
                  ++v59;
                }
                while (v59 != v60);
                unint64_t v96 = (void *)*(v58 - 1);
                uint64_t v97 = v104 - *v96 + *v39;
                v96[3] = 0;
                v96[4] = v97;
                uint64_t v57 = (uint64_t *)v115;
                uint64_t v109 = (uint64_t *)v115;
                uint64_t v110 = v58;
                uint64_t v111 = (uint64_t *)v117[0];
              }
              if (v57)
              {
LABEL_129:
                uint64_t v110 = v57;
                operator delete(v57);
              }
              *a4 = 0;
              break;
            }
            uint64_t v109 = v57;
            uint64_t v111 = v57 + 1;
            goto LABEL_129;
          }
          unint64_t v47 = v113;
          if (v113 >= v114)
          {
            __int16 v49 = (char *)__p;
            uint64_t v50 = (v113 - (unsigned char *)__p) >> 2;
            unint64_t v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 62) {
LABEL_142:
            }
              abort();
            uint64_t v52 = v114 - (unsigned char *)__p;
            if ((v114 - (unsigned char *)__p) >> 1 > v51) {
              unint64_t v51 = v52 >> 1;
            }
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v51;
            }
            if (v53)
            {
              uint64_t v54 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v114, v53);
              __int16 v49 = (char *)__p;
              unint64_t v47 = v113;
            }
            else
            {
              uint64_t v54 = 0;
            }
            long long v55 = &v54[4 * v50];
            *(_DWORD *)long long v55 = v46;
            uint64_t v48 = v55 + 4;
            while (v47 != v49)
            {
              int v56 = *((_DWORD *)v47 - 1);
              v47 -= 4;
              *((_DWORD *)v55 - 1) = v56;
              v55 -= 4;
            }
            std::string __p = v55;
            BOOL v113 = v48;
            uint64_t v114 = &v54[4 * v53];
            if (v49) {
              operator delete(v49);
            }
          }
          else
          {
            *(_DWORD *)BOOL v113 = v133;
            uint64_t v48 = v47 + 4;
          }
          BOOL v113 = v48;
        }
        if (__p)
        {
          BOOL v113 = (char *)__p;
          operator delete(__p);
        }
        uint64_t v126 = (std::__shared_weak_count **)&unk_270DBC3C0;
        if (v128) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v128);
        }
        uint64_t v38 = v105;
        if (*a4) {
          break;
        }
        do
        {
LABEL_80:
          v36 += 12;
          if (v36 == v37) {
            goto LABEL_131;
          }
          uint64_t v39 = (uint64_t *)*v36;
        }
        while ((*v36 | 0x1000) == 0xFFFFFFFFFFFFF000);
        if (v36 == v37) {
          goto LABEL_131;
        }
      }
    }
    uint64_t v98 = (uint64_t)v106;
    if (v108)
    {
      uint64_t v99 = 96 * v108;
      uint64_t v100 = (uint64_t)v106;
      do
      {
        if ((*(void *)v100 | 0x1000) != 0xFFFFFFFFFFFFF000 && *(unsigned char *)(v100 + 88))
        {
          uint64_t v101 = *(void **)(v100 + 8);
          if ((void *)(v100 + 24) != v101) {
            free(v101);
          }
        }
        v100 += 96;
        v99 -= 96;
      }
      while (v99);
    }
    return MEMORY[0x263E500A0](v98, 8);
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>::operator=[abi:nn180100]<llvm::SmallVector<llvm::jitlink::Symbol *,8u>,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(a1, a2);
  }
  else
  {
    *(void *)a1 = a1 + 16;
    *(void *)(a1 + 8) = 0x800000000;
    if (*(_DWORD *)(a2 + 8)) {
      llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(a1, a2);
    }
    *(unsigned char *)(a1 + 80) = 1;
  }
  return a1;
}

uint64_t llvm::BinaryStreamReader::readInteger<unsigned int>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = llvm::BinaryStreamRef::readBytes(a1 + 8, *(void *)(a1 + 56), 4, a3);
  if (!*a3)
  {
    *(void *)(a1 + 56) += 4;
    *a3 = 0;
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
    unsigned int v7 = MEMORY[0];
    unsigned int v8 = bswap32(MEMORY[0]);
    if ((result - 1) >= 2) {
      unsigned int v7 = v8;
    }
    *a2 = v7;
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::BinaryStreamReader::readInteger<unsigned long long>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = llvm::BinaryStreamRef::readBytes(a1 + 8, *(void *)(a1 + 56), 8, a3);
  if (!*a3)
  {
    *(void *)(a1 + 56) += 8;
    *a3 = 0;
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
    unint64_t v7 = MEMORY[0];
    unint64_t v8 = bswap64(MEMORY[0]);
    if ((result - 1) >= 2) {
      unint64_t v7 = v8;
    }
    *a2 = v7;
    *a3 = 0;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  unint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::InsertIntoBucketImpl<llvm::jitlink::Block *>(a1, a2, v7);
    void *v5 = *a2;
    *((unsigned char *)v5 + 8) = 0;
    *((unsigned char *)v5 + 88) = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::LookupBucketFor<llvm::jitlink::Block *>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 96 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      unint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          unint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 96 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::InsertIntoBucketImpl<llvm::jitlink::Block *>(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(96 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 96 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 12;
        v11 -= 96;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 96 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if ((*(void *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v20);
          uint64_t v15 = v20;
          *uint64_t v20 = *(void *)v13;
          *((unsigned char *)v15 + 8) = 0;
          *((unsigned char *)v15 + 88) = 0;
          if (*(unsigned char *)(v13 + 88))
          {
            v15[1] = v15 + 3;
            long long v15[2] = 0x800000000;
            if (*(_DWORD *)(v13 + 16)) {
              llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=((uint64_t)(v15 + 1), v13 + 8);
            }
            *((unsigned char *)v15 + 88) = 1;
            int v16 = *(unsigned __int8 *)(v13 + 88);
            ++*(_DWORD *)(a1 + 8);
            if (v16)
            {
              uint64_t v17 = *(void **)(v13 + 8);
              if ((void *)(v13 + 24) != v17) {
                free(v17);
              }
            }
          }
          else
          {
            ++*(_DWORD *)(a1 + 8);
          }
        }
        v13 += 96;
        v12 -= 96;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    uint64_t v19 = 96 * v18;
    do
    {
      *uint64_t result = -4096;
      result += 12;
      v19 -= 96;
    }
    while (v19);
  }
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v42 = *(a2 - 1);
                uint64_t v43 = *v10;
                if ((*(void *)(v42 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(*v10 + 24) & 0x1FFFFFFFFFFFFFFuLL))
                {
                  *uint64_t v10 = v42;
                  *(a2 - 1) = v43;
                }
                break;
              case 3uLL:
                uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v10, v10 + 1, a2 - 1);
                break;
              case 4uLL:
                uint64_t result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5uLL:
                uint64_t v44 = v10 + 1;
                uint64_t v45 = v10 + 2;
                int v46 = v10 + 3;
                uint64_t result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v47 = *(a2 - 1);
                uint64_t v48 = v10[3];
                if ((*(void *)(v47 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(v48 + 24) & 0x1FFFFFFFFFFFFFFuLL))
                {
                  *int v46 = v47;
                  *(a2 - 1) = v48;
                  uint64_t v49 = *v46;
                  uint64_t v50 = *v45;
                  if ((*(void *)(*v46 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(*v45 + 24) & 0x1FFFFFFFFFFFFFFuLL))
                  {
                    uint64_t *v45 = v49;
                    *int v46 = v50;
                    uint64_t v51 = *v44;
                    if ((*(void *)(v49 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(*v44 + 24) & 0x1FFFFFFFFFFFFFFuLL))
                    {
                      v10[1] = v49;
                      long long v10[2] = v51;
                      uint64_t v52 = *v10;
                      if ((*(void *)(v49 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(*v10 + 24) & 0x1FFFFFFFFFFFFFFuLL))
                      {
                        *uint64_t v10 = v49;
                        v10[1] = v52;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unint64_t v53 = v10 + 1;
            BOOL v55 = v10 == a2 || v53 == a2;
            if (a4)
            {
              if (!v55)
              {
                uint64_t v56 = 8;
                uint64_t v57 = v10;
                do
                {
                  uint64_t v59 = *v57;
                  uint64_t v58 = v57[1];
                  uint64_t v57 = v53;
                  if ((*(void *)(v58 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(v59 + 24) & 0x1FFFFFFFFFFFFFFuLL))
                  {
                    uint64_t v60 = v56;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v60) = v59;
                      uint64_t v61 = v60 - 8;
                      if (v60 == 8)
                      {
                        uint64_t v62 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v59 = *(uint64_t *)((char *)v10 + v60 - 16);
                      v60 -= 8;
                    }
                    while ((*(void *)(v58 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(v59 + 24) & 0x1FFFFFFFFFFFFFFuLL));
                    uint64_t v62 = (uint64_t *)((char *)v10 + v61);
LABEL_85:
                    *uint64_t v62 = v58;
                  }
                  unint64_t v53 = v57 + 1;
                  v56 += 8;
                }
                while (v57 + 1 != a2);
              }
            }
            else if (!v55)
            {
              do
              {
                uint64_t v91 = *v9;
                uint64_t v90 = v9[1];
                uint64_t v9 = v53;
                if ((*(void *)(v90 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(v91 + 24) & 0x1FFFFFFFFFFFFFFuLL))
                {
                  do
                  {
                    *unint64_t v53 = v91;
                    uint64_t v91 = *(v53 - 2);
                    --v53;
                  }
                  while ((*(void *)(v90 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(v91 + 24) & 0x1FFFFFFFFFFFFFFuLL));
                  *unint64_t v53 = v90;
                }
                unint64_t v53 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v63 = (v12 - 2) >> 1;
              int64_t v64 = v63;
              do
              {
                int64_t v65 = v64;
                if (v63 >= v64)
                {
                  uint64_t v66 = (2 * v64) | 1;
                  char v67 = &v10[v66];
                  uint64_t v68 = *v67;
                  if (2 * v65 + 2 < (uint64_t)v12
                    && (*(void *)(v68 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(v67[1] + 24) & 0x1FFFFFFFFFFFFFFuLL))
                  {
                    uint64_t v68 = v67[1];
                    ++v67;
                    uint64_t v66 = 2 * v65 + 2;
                  }
                  uint64_t result = (unint64_t)&v10[v65];
                  uint64_t v69 = *(void *)result;
                  if ((*(void *)(v68 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= (*(void *)(*(void *)result + 24) & 0x1FFFFFFFFFFFFFFuLL))
                  {
                    do
                    {
                      uint64_t v70 = v67;
                      *(void *)uint64_t result = v68;
                      if (v63 < v66) {
                        break;
                      }
                      uint64_t v71 = (2 * v66) | 1;
                      char v67 = &v10[v71];
                      uint64_t v72 = 2 * v66 + 2;
                      uint64_t v68 = *v67;
                      if (v72 < (uint64_t)v12
                        && (*(void *)(v68 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(v67[1] + 24) & 0x1FFFFFFFFFFFFFFuLL))
                      {
                        uint64_t v68 = v67[1];
                        ++v67;
                        uint64_t v71 = v72;
                      }
                      uint64_t result = (unint64_t)v70;
                      uint64_t v66 = v71;
                    }
                    while ((*(void *)(v68 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= (*(void *)(v69 + 24) & 0x1FFFFFFFFFFFFFFuLL));
                    *uint64_t v70 = v69;
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              uint64_t v73 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v74 = 0;
                uint64_t v75 = *v10;
                char v76 = v10;
                do
                {
                  uint64_t v77 = &v76[v74];
                  uint64_t v80 = v77[1];
                  uint64_t v78 = v77 + 1;
                  uint64_t v79 = v80;
                  uint64_t v81 = (2 * v74) | 1;
                  uint64_t v82 = 2 * v74 + 2;
                  if (v82 < v73)
                  {
                    uint64_t result = *(void *)(v79 + 24) & 0x1FFFFFFFFFFFFFFLL;
                    if (result > (*(void *)(v78[1] + 24) & 0x1FFFFFFFFFFFFFFuLL))
                    {
                      uint64_t v79 = v78[1];
                      ++v78;
                      uint64_t v81 = v82;
                    }
                  }
                  *char v76 = v79;
                  char v76 = v78;
                  uint64_t v74 = v81;
                }
                while (v81 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
                if (v78 == --a2)
                {
                  uint64_t *v78 = v75;
                }
                else
                {
                  uint64_t *v78 = *a2;
                  *a2 = v75;
                  uint64_t v83 = (char *)v78 - (char *)v10 + 8;
                  if (v83 >= 9)
                  {
                    unint64_t v84 = (((unint64_t)v83 >> 3) - 2) >> 1;
                    uint64_t v85 = &v10[v84];
                    uint64_t v86 = *v85;
                    uint64_t v87 = *v78;
                    if ((*(void *)(*v85 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(*v78 + 24) & 0x1FFFFFFFFFFFFFFuLL))
                    {
                      do
                      {
                        uint64_t v88 = v85;
                        uint64_t *v78 = v86;
                        if (!v84) {
                          break;
                        }
                        unint64_t v84 = (v84 - 1) >> 1;
                        uint64_t v85 = &v10[v84];
                        uint64_t v86 = *v85;
                        uint64_t v78 = v88;
                      }
                      while ((*(void *)(*v85 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(v87 + 24) & 0x1FFFFFFFFFFFFFFuLL));
                      uint64_t *v88 = v87;
                    }
                  }
                }
              }
              while (v73-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v9, &v9[v12 >> 1], a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v9 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *uint64_t v9 = *v14;
            *uint64_t v14 = v15;
          }
          else
          {
            uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          unint64_t v17 = *(void *)(v16 + 24) & 0x1FFFFFFFFFFFFFFLL;
          if ((*(void *)(*(v9 - 1) + 24) & 0x1FFFFFFFFFFFFFFuLL) > v17) {
            goto LABEL_13;
          }
          if (v17 <= (*(void *)(*(a2 - 1) + 24) & 0x1FFFFFFFFFFFFFFuLL))
          {
            unint64_t v33 = v9 + 1;
            do
            {
              uint64_t v10 = v33;
              if (v33 >= a2) {
                break;
              }
              ++v33;
            }
            while (v17 <= (*(void *)(*v10 + 24) & 0x1FFFFFFFFFFFFFFuLL));
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              uint64_t v32 = v10[1];
              ++v10;
            }
            while (v17 <= (*(void *)(v32 + 24) & 0x1FFFFFFFFFFFFFFuLL));
          }
          uint64_t v34 = a2;
          if (v10 < a2)
          {
            uint64_t v34 = a2;
            do
              uint64_t v35 = *--v34;
            while (v17 > (*(void *)(v35 + 24) & 0x1FFFFFFFFFFFFFFuLL));
          }
          if (v10 < v34)
          {
            uint64_t v36 = *v10;
            uint64_t v37 = *v34;
            do
            {
              *uint64_t v10 = v37;
              uint64_t *v34 = v36;
              unint64_t v38 = *(void *)(v16 + 24) & 0x1FFFFFFFFFFFFFFLL;
              do
              {
                uint64_t v39 = v10[1];
                ++v10;
                uint64_t v36 = v39;
              }
              while (v38 <= (*(void *)(v39 + 24) & 0x1FFFFFFFFFFFFFFuLL));
              do
              {
                uint64_t v40 = *--v34;
                uint64_t v37 = v40;
              }
              while (v38 > (*(void *)(v40 + 24) & 0x1FFFFFFFFFFFFFFuLL));
            }
            while (v10 < v34);
          }
          uint64_t v41 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *uint64_t v9 = *v41;
          }
          a4 = 0;
          *uint64_t v41 = v16;
        }
        unint64_t v17 = *(void *)(v16 + 24) & 0x1FFFFFFFFFFFFFFLL;
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while ((*(void *)(v19 + 24) & 0x1FFFFFFFFFFFFFFuLL) > v17);
        uint64_t v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while ((*(void *)(v23 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while ((*(void *)(v22 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v30 = v20 - 1;
        }
        else
        {
          uint64_t v24 = *v21;
          size_t v25 = &v9[v18];
          unint64_t v26 = v21;
          do
          {
            uint64_t *v25 = v24;
            uint64_t *v26 = v19;
            unint64_t v27 = *(void *)(v16 + 24) & 0x1FFFFFFFFFFFFFFLL;
            do
            {
              uint64_t v28 = v25[1];
              ++v25;
              uint64_t v19 = v28;
            }
            while ((*(void *)(v28 + 24) & 0x1FFFFFFFFFFFFFFuLL) > v27);
            do
            {
              uint64_t v29 = *--v26;
              uint64_t v24 = v29;
            }
            while ((*(void *)(v29 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= v27);
          }
          while (v25 < v26);
          uint64_t v30 = v25 - 1;
        }
        if (v30 != v9) {
          *uint64_t v9 = *v30;
        }
        *uint64_t v30 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **,false>(v9, v30, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v30 + 1;
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v9, v30);
      uint64_t v10 = v30 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v30 + 1, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_34;
      }
    }
    a2 = v30;
    if (!v31) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unint64_t v5 = *(void *)(*a2 + 24) & 0x1FFFFFFFFFFFFFFLL;
  uint64_t v6 = *a3;
  unint64_t v7 = *(void *)(*a3 + 24) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 <= (*(void *)(*result + 24) & 0x1FFFFFFFFFFFFFFuLL))
  {
    if (v7 > v5)
    {
      *a2 = v6;
      *a3 = v3;
      uint64_t v8 = *result;
      if ((*(void *)(*a2 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(*result + 24) & 0x1FFFFFFFFFFFFFFuLL))
      {
        *uint64_t result = *a2;
        *a2 = v8;
      }
    }
  }
  else
  {
    if (v7 <= v5)
    {
      *uint64_t result = v3;
      *a2 = v4;
      if ((*(void *)(*a3 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= (*(void *)(v4 + 24) & 0x1FFFFFFFFFFFFFFuLL)) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v6;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if ((*(void *)(v6 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(*a1 + 24) & 0x1FFFFFFFFFFFFFFuLL))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      unint64_t v17 = a1 + 1;
      uint64_t v18 = a1 + 2;
      uint64_t v19 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v20 = *(a2 - 1);
      uint64_t v21 = a1[3];
      if ((*(void *)(v20 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(v21 + 24) & 0x1FFFFFFFFFFFFFFuLL))
      {
        *uint64_t v19 = v20;
        *(a2 - 1) = v21;
        uint64_t v22 = *v19;
        uint64_t v23 = *v18;
        if ((*(void *)(*v19 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFuLL))
        {
          *uint64_t v18 = v22;
          *uint64_t v19 = v23;
          uint64_t v24 = *v17;
          if ((*(void *)(v22 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(*v17 + 24) & 0x1FFFFFFFFFFFFFFuLL))
          {
            a1[1] = v22;
            a1[2] = v24;
            uint64_t v25 = *a1;
            if ((*(void *)(v22 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(*a1 + 24) & 0x1FFFFFFFFFFFFFFuLL))
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    if ((*(void *)(*v9 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(*v8 + 24) & 0x1FFFFFFFFFFFFFFuLL))
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if ((*(void *)(v12 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= (*(void *)(v13 + 24) & 0x1FFFFFFFFFFFFFFuLL))
        {
          uint64_t v16 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      *uint64_t v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(a1, a2, a3);
  uint64_t v9 = *a3;
  if ((*(void *)(*a4 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(*a3 + 24) & 0x1FFFFFFFFFFFFFFuLL))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if ((*(void *)(*a3 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(*a2 + 24) & 0x1FFFFFFFFFFFFFFuLL))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if ((*(void *)(*a2 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(void *)(*a1 + 24) & 0x1FFFFFFFFFFFFFFuLL))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t llvm::jitlink::EHFrameEdgeFixer::operator()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, llvm::jitlink::EHFrameEdgeFixer *a4@<X8>)
{
  uint64_t v209 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::jitlink::LinkGraph::findSectionByName(a2, *a1, a1[1], a3);
  if (!result)
  {
    *(void *)a4 = 0;
    return result;
  }
  int v8 = *(_DWORD *)(a2 + 168);
  BOOL v9 = v8 == 4 || v8 == 8;
  if (!v9)
  {
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
  }
  uint64_t v10 = result;
  uint64_t v149 = (uint64_t)a1;
  v157[0] = 0;
  v157[1] = 0;
  uint64_t v156 = a2;
  int v158 = 0;
  uint64_t v159 = &v160;
  long long v160 = 0;
  v162[0] = 0;
  v162[1] = 0;
  uint64_t v161 = 0;
  int v163 = 0;
  if (*(_DWORD *)(a2 + 192))
  {
    uint64_t v11 = *(unsigned int *)(a2 + 200);
    if (v11)
    {
      uint64_t v12 = 24 * v11;
      uint64_t v13 = *(void **)(a2 + 184);
      while (*v13 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v13 += 3;
        v12 -= 24;
        if (!v12) {
          goto LABEL_119;
        }
      }
    }
    else
    {
      uint64_t v13 = *(void **)(a2 + 184);
    }
    uint64_t v14 = *(void *)(a2 + 184) + 24 * v11;
    if (v13 != (void *)v14)
    {
      uint64_t v151 = result;
      uint64_t v150 = (void *)v14;
      while (1)
      {
        uint64_t v15 = v13[2];
        uint64_t v16 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v15 + 56);
        uint64_t v18 = *(void *)(v15 + 56) + 8 * *(unsigned int *)(v15 + 72);
        if ((void *)v18 != v16)
        {
          uint64_t v19 = v16;
          uint64_t v20 = v17;
          while (1)
          {
            uint64_t v21 = (const char **)*v19;
            uint64_t v184 = (const char *)((*(void *)(*v19 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(*v19 + 16));
            uint64_t v22 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>,llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::FindAndConstruct((uint64_t)v162, (uint64_t *)&v184);
            uint64_t v23 = v22[1];
            if (!v23) {
              goto LABEL_24;
            }
            uint64_t v24 = v21[3];
            uint64_t v25 = ((unint64_t)v24 >> 57) & 1;
            unint64_t v26 = *(void *)(v23 + 24);
            uint64_t v27 = (v26 >> 57) & 1;
            if (v25 < v27) {
              goto LABEL_24;
            }
            if (v27 < v25) {
              goto LABEL_25;
            }
            uint64_t v28 = ((unint64_t)v24 >> 58) & 3;
            uint64_t v29 = (v26 >> 58) & 3;
            if (v28 < v29) {
              goto LABEL_24;
            }
            if (v29 < v28) {
              goto LABEL_25;
            }
            size_t v30 = (size_t)v21[1];
            size_t v31 = *(void *)(v23 + 8);
            if (v30 && v31 == 0) {
              goto LABEL_24;
            }
            unint64_t v33 = *v21;
            uint64_t v34 = *(const char **)v23;
            if (v30 || !v31) {
              break;
            }
LABEL_25:
            while (++v19 != v20)
            {
              if ((*v19 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                goto LABEL_29;
              }
            }
            uint64_t v19 = v20;
LABEL_29:
            if (v19 == (void *)v18) {
              goto LABEL_42;
            }
          }
          uint64_t v184 = *v21;
          uint64_t v185 = v30;
          uint64_t v146 = v34;
          uint64_t v147 = v33;
          size_t v148 = v30;
          if ((llvm::StringRef::compare((uint64_t)&v184, v34, v31) & 0x80000000) == 0)
          {
            uint64_t v184 = v146;
            uint64_t v185 = v31;
            llvm::StringRef::compare((uint64_t)&v184, v147, v148);
            goto LABEL_25;
          }
LABEL_24:
          v22[1] = (uint64_t)v21;
          goto LABEL_25;
        }
LABEL_42:
        uint64_t v35 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v15 + 32);
        uint64_t v37 = *(void *)(v15 + 32) + 8 * *(unsigned int *)(v15 + 48);
        if ((uint64_t **)v37 != v35) {
          break;
        }
LABEL_114:
        *(void *)a4 = 0;
        v13 += 3;
        uint64_t v10 = v151;
        if (v13 != v150)
        {
          while (*v13 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v13 += 3;
            if (v13 == v150) {
              goto LABEL_119;
            }
          }
          if (v13 != v150) {
            continue;
          }
        }
        goto LABEL_119;
      }
      unint64_t v38 = v35;
      uint64_t v39 = v36;
      while (1)
      {
        uint64_t v40 = *v38;
        unint64_t v41 = **v38;
        if (!v41) {
          goto LABEL_108;
        }
        uint64_t v42 = v160;
        uint64_t v43 = &v160;
        if (v160)
        {
          uint64_t v44 = &v160;
          uint64_t v45 = v160;
          do
          {
            int v46 = v45;
            uint64_t v47 = v44;
            unint64_t v48 = v45[4];
            if (v41 < v48) {
              uint64_t v44 = (uint64_t **)v45;
            }
            else {
              ++v45;
            }
            uint64_t v45 = (uint64_t *)*v45;
          }
          while (v45);
          uint64_t v43 = &v160;
          if (v44 != &v160)
          {
            uint64_t v49 = v40[4];
            if (v41 >= v48) {
              int v46 = (uint64_t *)v47;
            }
            uint64_t v50 = (uint64_t *)v46[5];
            uint64_t v51 = *v50;
            uint64_t v43 = v44;
            if (v49 + v41 > *v50)
            {
              uint64_t v52 = v50[4];
              goto LABEL_63;
            }
          }
        }
        if (v43 != v159)
        {
          unint64_t v53 = *v43;
          uint64_t v54 = v43;
          if (*v43)
          {
            do
            {
              BOOL v55 = v53;
              unint64_t v53 = (uint64_t *)v53[1];
            }
            while (v53);
          }
          else
          {
            do
            {
              BOOL v55 = v54[2];
              BOOL v9 = *v55 == (void)v54;
              uint64_t v54 = (uint64_t **)v55;
            }
            while (v9);
          }
          uint64_t v56 = (uint64_t *)v55[5];
          uint64_t v51 = *v56;
          uint64_t v52 = v56[4];
          if (v52 + *v56 > v41)
          {
            uint64_t v49 = v40[4];
LABEL_63:
            llvm::jitlink::BlockAddressMap::overlapError((uint64_t)a4, **v38, v49, v51, v52);
          }
        }
        if (&v160 != v43)
        {
          uint64_t v57 = v43[4];
          if ((unint64_t)v57 <= v41)
          {
            if ((unint64_t)v57 >= v41) {
              goto LABEL_108;
            }
            int64_t v63 = v43 + 1;
            int64_t v64 = v43[1];
            if (v64)
            {
              do
              {
                int64_t v63 = (uint64_t **)v64;
                int64_t v64 = (uint64_t *)*v64;
                uint64_t v43 = v63;
                int64_t v65 = v63;
              }
              while (v64);
            }
            else
            {
              int64_t v65 = v43;
              do
              {
                char v67 = (uint64_t *)v65;
                int64_t v65 = (uint64_t **)v65[2];
              }
              while (*v65 != v67);
            }
            if (v65 != &v160)
            {
              uint64_t v68 = v65[4];
              if ((unint64_t)v68 <= v41)
              {
                int64_t v63 = &v160;
                uint64_t v43 = &v160;
              }
              if (v160 && (unint64_t)v68 <= v41)
              {
                while (1)
                {
                  while (1)
                  {
                    uint64_t v43 = (uint64_t **)v42;
                    unint64_t v69 = v42[4];
                    if (v69 <= v41) {
                      break;
                    }
                    uint64_t v42 = *v43;
                    int64_t v63 = v43;
                    if (!*v43) {
                      goto LABEL_104;
                    }
                  }
                  if (v69 >= v41) {
                    goto LABEL_108;
                  }
                  uint64_t v42 = v43[1];
                  if (!v42)
                  {
LABEL_103:
                    int64_t v63 = v43 + 1;
                    goto LABEL_104;
                  }
                }
              }
            }
            goto LABEL_104;
          }
        }
        uint64_t v58 = *v43;
        uint64_t v59 = v43;
        if (v43 != v159)
        {
          uint64_t v60 = *v43;
          uint64_t v61 = v43;
          if (v58)
          {
            do
            {
              uint64_t v59 = (uint64_t **)v60;
              uint64_t v60 = (uint64_t *)v60[1];
            }
            while (v60);
          }
          else
          {
            do
            {
              uint64_t v59 = (uint64_t **)v61[2];
              BOOL v9 = *v59 == (uint64_t *)v61;
              uint64_t v61 = v59;
            }
            while (v9);
          }
          if ((unint64_t)v59[4] >= v41) {
            break;
          }
        }
        if (v58) {
          uint64_t v62 = v59;
        }
        else {
          uint64_t v62 = v43;
        }
        if (v58) {
          int64_t v63 = v59 + 1;
        }
        else {
          int64_t v63 = v43;
        }
        if (!*v63)
        {
          uint64_t v43 = v62;
LABEL_104:
          uint64_t v70 = (uint64_t *)operator new(0x30uLL);
          v70[4] = v41;
          v70[5] = (uint64_t)v40;
          *uint64_t v70 = 0;
          v70[1] = 0;
          v70[2] = (uint64_t)v43;
          *int64_t v63 = v70;
          if (*v159)
          {
            uint64_t v159 = (uint64_t **)*v159;
            uint64_t v71 = *v63;
          }
          else
          {
            uint64_t v71 = v70;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v160, v71);
          ++v161;
        }
LABEL_108:
        *(void *)a4 = 0;
        while (++v38 != v39)
        {
          if (((unint64_t)*v38 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_113;
          }
        }
        unint64_t v38 = v39;
LABEL_113:
        if (v38 == (uint64_t **)v37) {
          goto LABEL_114;
        }
      }
      int64_t v63 = &v160;
      uint64_t v43 = &v160;
      if (v160)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v43 = (uint64_t **)v42;
            unint64_t v66 = v42[4];
            if (v66 <= v41) {
              break;
            }
            uint64_t v42 = *v43;
            int64_t v63 = v43;
            if (!*v43) {
              goto LABEL_104;
            }
          }
          if (v66 >= v41) {
            goto LABEL_108;
          }
          uint64_t v42 = v43[1];
          if (!v42) {
            goto LABEL_103;
          }
        }
      }
      goto LABEL_104;
    }
  }
LABEL_119:
  std::string __p = 0;
  uint64_t v154 = 0;
  uint64_t v155 = 0;
  uint64_t v72 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v10 + 32);
  uint64_t v74 = *(void *)(v10 + 32) + 8 * *(unsigned int *)(v10 + 48);
  if ((void *)v74 == v72)
  {
    uint64_t v77 = 0;
    uint64_t v86 = 0;
  }
  else
  {
    uint64_t v75 = v72;
    char v76 = v73;
    uint64_t v77 = 0;
    do
    {
      uint64_t v78 = (unint64_t *)*v75;
      if (v77 >= v155)
      {
        uint64_t v79 = v77 - __p;
        if ((unint64_t)(v79 + 1) >> 61) {
          abort();
        }
        unint64_t v80 = ((char *)v155 - (char *)__p) >> 2;
        if (v80 <= v79 + 1) {
          unint64_t v80 = v79 + 1;
        }
        if ((unint64_t)((char *)v155 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v81 = v80;
        }
        if (v81) {
          uint64_t v82 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v155, v81);
        }
        else {
          uint64_t v82 = 0;
        }
        uint64_t v83 = (unint64_t **)&v82[8 * v79];
        *uint64_t v83 = v78;
        uint64_t v77 = v83 + 1;
        unint64_t v84 = v154;
        if (v154 != __p)
        {
          do
          {
            uint64_t v85 = *--v84;
            *--uint64_t v83 = v85;
          }
          while (v84 != __p);
          unint64_t v84 = __p;
        }
        std::string __p = v83;
        uint64_t v155 = (unint64_t **)&v82[8 * v81];
        if (v84) {
          operator delete(v84);
        }
      }
      else
      {
        *v77++ = v78;
      }
      uint64_t v154 = v77;
      while (++v75 != v76)
      {
        if ((*v75 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_142;
        }
      }
      uint64_t v75 = v76;
LABEL_142:
      ;
    }
    while (v75 != (void *)v74);
    uint64_t v86 = __p;
  }
  unint64_t v87 = 126 - 2 * __clz(v77 - v86);
  if (v77 == v86) {
    uint64_t v88 = 0;
  }
  else {
    uint64_t v88 = v87;
  }
  std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::EHFrameEdgeFixer::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,false>(v86, v77, v88, 1);
  unint64_t v89 = (uint64_t **)__p;
  if (__p == v154)
  {
LABEL_273:
    *(void *)a4 = 0;
    goto LABEL_275;
  }
  while (2)
  {
    uint64_t v90 = *v89;
    uint64_t v91 = (std::__shared_weak_count_vtbl *)(*v89)[3];
    if (!v91)
    {
      LOWORD(v169) = 1283;
      uint64_t v144 = *(std::__shared_weak_count **)v149;
      uint64_t v145 = *(void *)(v149 + 8);
      long long v165 = "Unexpected zero-fill block in ";
      long long v167 = v144;
      uint64_t v168 = v145;
      operator new();
    }
    uint64_t v92 = v90[4];
    int v152 = v89;
    if (!v92)
    {
      *(void *)a4 = 0;
      goto LABEL_272;
    }
    uint64_t v173 = 0;
    uint64_t v174 = 0;
    unsigned int v175 = 0;
    uint64_t v93 = v90[5];
    uint64_t v94 = v90[6];
    if (v93 != v94)
    {
      uint64_t v95 = 0;
      while (*(unsigned __int8 *)(v93 + 24) < 2u)
      {
LABEL_162:
        v93 += 32;
        if (v93 == v94)
        {
          uint64_t v91 = (std::__shared_weak_count_vtbl *)v90[3];
          uint64_t v92 = v90[4];
          goto LABEL_168;
        }
      }
      int v96 = *(_DWORD *)(v93 + 8);
      uint64_t v184 = 0;
      unsigned int v97 = v175;
      if (llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::LookupBucketFor<unsigned int>(v95, v175, v96, &v184))
      {
        int v139 = *(_DWORD *)(v93 + 8);
        uint64_t v184 = "{0:x16}";
        uint64_t v185 = 7;
        v186 = (std::__shared_weak_count *)&v190;
        uint64_t v187 = 1;
        v188 = &unk_270DBE8C8;
        LODWORD(v189) = v139;
        v190 = &v188;
        uint64_t v192 = "Multiple relocations at offset ";
        v194 = &v184;
        __int16 v195 = 1539;
        v176[0] = (uint64_t)&v192;
        v176[2] = (uint64_t)" in ";
        __int16 v177 = 770;
        uint64_t v141 = *(std::__shared_weak_count **)v149;
        uint64_t v140 = *(void *)(v149 + 8);
        v180[0] = (uint64_t)v176;
        uint64_t v181 = (unint64_t *)v141;
        uint64_t v182 = v140;
        __int16 v183 = 1282;
        unint64_t v205 = (unint64_t)v180;
        unint64_t v207 = (unint64_t)" block at address ";
        __int16 v208 = 770;
        uint64_t v142 = *v90;
        long long v165 = "{0:x16}";
        uint64_t v166 = 7;
        long long v167 = (std::__shared_weak_count *)&v171;
        uint64_t v168 = 1;
        uint64_t v169 = &unk_270DBE460;
        uint64_t v170 = v142;
        int32x2_t v171 = &v169;
        operator new();
      }
      uint64_t v98 = *(void *)v93;
      uint64_t v99 = *(void *)(v93 + 16);
      int v100 = *(_DWORD *)(v93 + 8);
      uint64_t v184 = 0;
      char v101 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::LookupBucketFor<unsigned int>(v95, v97, v100, &v184);
      uint64_t v102 = (char *)v184;
      if (v101)
      {
LABEL_161:
        *((void *)v102 + 1) = v98;
        *((void *)v102 + 2) = v99;
        goto LABEL_162;
      }
      if (4 * (int)v174 + 4 >= 3 * v97)
      {
        int v103 = 2 * v97;
      }
      else
      {
        if (v97 + ~v174 - HIDWORD(v174) > v97 >> 3)
        {
LABEL_158:
          LODWORD(v174) = v174 + 1;
          if (*(_DWORD *)v102 != -1) {
            --HIDWORD(v174);
          }
          *(_DWORD *)uint64_t v102 = v100;
          *((void *)v102 + 1) = 0;
          *((void *)v102 + 2) = 0;
          goto LABEL_161;
        }
        int v103 = v97;
      }
      llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::grow((uint64_t)&v173, v103);
      uint64_t v184 = 0;
      uint64_t v95 = v173;
      llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::LookupBucketFor<unsigned int>(v173, v175, v100, &v184);
      uint64_t v102 = (char *)v184;
      goto LABEL_158;
    }
LABEL_168:
    int v104 = *(_DWORD *)(v156 + 172);
    long long v165 = (const char *)&unk_270DBC3C0;
    llvm::BinaryStreamRef::BinaryStreamRef(&v166, v91, v92, v104);
    uint64_t v105 = 0;
    unsigned int v172 = 0;
    while (2)
    {
      if ((_BYTE)v171)
      {
        uint64_t v106 = v170;
      }
      else if (v168)
      {
        uint64_t v107 = (*(uint64_t (**)(uint64_t))(*(void *)v168 + 40))(v168);
        uint64_t v105 = (uint64_t)v172;
        uint64_t v106 = v107 - (void)v169;
      }
      else
      {
        uint64_t v106 = 0;
      }
      if (v106 == v105)
      {
        *(void *)a4 = 0;
        goto LABEL_269;
      }
      LODWORD(v205) = 0;
      llvm::BinaryStreamReader::readInteger<unsigned int>((uint64_t)&v165, (unsigned int *)&v205, &v184);
      unsigned int v108 = v184;
      if (v184) {
        goto LABEL_266;
      }
      unint64_t v109 = v205;
      if (v205 == -1)
      {
        uint64_t v184 = 0;
        llvm::BinaryStreamReader::readInteger<unsigned long long>((uint64_t)&v165, (unint64_t *)&v184, &v198);
        unsigned int v108 = (const char *)v198;
        if (v198)
        {
LABEL_266:
          *(void *)a4 = v108;
          goto LABEL_269;
        }
        unint64_t v109 = (unint64_t)v184;
      }
      if ((_BYTE)v171)
      {
        uint64_t v110 = v170;
      }
      else if (v168)
      {
        uint64_t v111 = (*(uint64_t (**)(uint64_t))(*(void *)v168 + 40))(v168);
        uint64_t v110 = v111 - (void)v169;
      }
      else
      {
        uint64_t v110 = 0;
      }
      unint64_t v112 = v172;
      if (v110 - (uint64_t)v172 < v109)
      {
        uint64_t v143 = *v90 + v105;
        uint64_t v184 = "{0:x16}";
        uint64_t v185 = 7;
        v186 = (std::__shared_weak_count *)&v190;
        uint64_t v187 = 1;
        v188 = &unk_270DBE460;
        uint64_t v189 = v143;
        v190 = &v188;
        operator new();
      }
      unsigned int v164 = 0;
      llvm::BinaryStreamReader::readInteger<unsigned int>((uint64_t)&v165, &v164, a4);
      if (*(void *)a4) {
        goto LABEL_269;
      }
      BOOL v113 = &v112[-v105];
      uint64_t v114 = v164;
      if (!v164)
      {
        uint64_t v120 = (std::__shared_weak_count_vtbl *)(v90[3] + v105);
        int v121 = *(_DWORD *)(v156 + 172);
        uint64_t v184 = (const char *)&unk_270DBC3C0;
        llvm::BinaryStreamRef::BinaryStreamRef(&v185, v120, (uint64_t)&v112[v109 - v105], v121);
        int v191 = v113 + 4;
        unint64_t v122 = llvm::jitlink::LinkGraph::addAnonymousSymbol(v156, (uint64_t)v90, v105, (uint64_t)&v112[v109 - v105], 0, 0);
        unsigned __int8 v179 = 0;
        llvm::BinaryStreamReader::readInteger<unsigned char>(a4, (uint64_t)&v184, &v179);
        if (*(void *)a4) {
          goto LABEL_253;
        }
        if (v179 != 1)
        {
          unint64_t v205 = (unint64_t)"Bad CIE version ";
          unint64_t v207 = v179;
          __int16 v208 = 1795;
          operator new();
        }
        WORD2(v180[0]) = 0;
        LODWORD(v180[0]) = 0;
        LOBYTE(v176[0]) = 0;
        llvm::BinaryStreamReader::readInteger<unsigned char>(&v198, (uint64_t)&v184, v176);
        unint64_t v123 = v198;
        if (v198)
        {
LABEL_252:
          uint64_t v192 = (const char *)v123;
          *(void *)a4 = v123;
          goto LABEL_253;
        }
        uint64_t v124 = (char *)v180 + 2;
        while (1)
        {
          long long v125 = (const char *)LOBYTE(v176[0]);
          if (LOBYTE(v176[0]) <= 0x51u) {
            break;
          }
          switch(LOBYTE(v176[0]))
          {
            case 'R':
              goto LABEL_201;
            case 'e':
              llvm::BinaryStreamReader::readInteger<unsigned char>(&v198, (uint64_t)&v184, v176);
              unint64_t v123 = v198;
              if (v198) {
                goto LABEL_252;
              }
              long long v125 = (const char *)LOBYTE(v176[0]);
              if (LOBYTE(v176[0]) != 104)
              {
                uint64_t v135 = "Unrecognized substring e";
LABEL_251:
                unint64_t v205 = (unint64_t)v135;
                unint64_t v207 = (unint64_t)v125;
                __int16 v208 = 1795;
                operator new();
              }
              BYTE1(v180[0]) = 1;
              break;
            case 'z':
              LOBYTE(v180[0]) = 1;
              break;
            default:
              goto LABEL_249;
          }
LABEL_205:
          llvm::BinaryStreamReader::readInteger<unsigned char>(&v198, (uint64_t)&v184, v176);
          unint64_t v123 = v198;
          if (v198) {
            goto LABEL_252;
          }
        }
        if (LOBYTE(v176[0]) != 76 && LOBYTE(v176[0]) != 80)
        {
          if (LOBYTE(v176[0]))
          {
LABEL_249:
            uint64_t v135 = "Unrecognized character ";
            goto LABEL_251;
          }
          char v193 = 0;
          LODWORD(v192) = v180[0];
          WORD2(v192) = WORD2(v180[0]);
          if (!BYTE1(v180[0])
            || (llvm::BinaryStreamReader::skip((llvm::BinaryStreamReader *)&v184, *(unsigned int *)(v156 + 168), a4),
                !*(void *)a4))
          {
            llvm::BinaryStreamReader::readULEB128((llvm::BinaryStreamReader *)&v184, &v198, a4);
            if (!*(void *)a4)
            {
              llvm::BinaryStreamReader::readSLEB128((llvm::BinaryStreamReader *)&v184, (uint64_t *)&v198, a4);
              if (!*(void *)a4)
              {
                llvm::BinaryStreamReader::skip((llvm::BinaryStreamReader *)&v184, 1uLL, a4);
                if (!*(void *)a4)
                {
                  if (!(_BYTE)v192)
                  {
                    unsigned int v131 = 0;
                    goto LABEL_258;
                  }
                  unint64_t v178 = 0;
                  llvm::BinaryStreamReader::readULEB128((llvm::BinaryStreamReader *)&v184, &v178, a4);
                  if (!*(void *)a4)
                  {
                    uint64_t v130 = v191;
                    unsigned int v131 = 1;
                    char v132 = (unsigned __int8 *)&v192 + 2;
                    while (1)
                    {
                      while (1)
                      {
                        int v133 = *v132++;
                        if (v133 != 80) {
                          break;
                        }
                        llvm::jitlink::EHFrameEdgeFixer::readPointerEncoding((uint64_t)&v198, (uint64_t)&v184, v90, "personality");
                        if (v199) {
                          goto LABEL_261;
                        }
                        llvm::jitlink::EHFrameEdgeFixer::getOrCreateEncodedPointerEdge((uint64_t)&v205, v149, (uint64_t)&v156, (uint64_t)&v173, (llvm::BinaryStreamReader *)v198, (llvm::BinaryStreamReader *)&v184, v90, (uint64_t)&v191[v105]);
                        if (v206)
                        {
                          unint64_t v134 = v205;
                          *(void *)a4 = v205;
                          if (v134) {
                            goto LABEL_253;
                          }
                        }
                        else
                        {
                          *(void *)a4 = 0;
                        }
                      }
                      if (!*(v132 - 1)) {
                        break;
                      }
                      if (v133 == 82)
                      {
                        llvm::jitlink::EHFrameEdgeFixer::readPointerEncoding((uint64_t)&v196, (uint64_t)&v184, v90, "address");
                        if (v197)
                        {
                          unint64_t v137 = v196;
                          goto LABEL_262;
                        }
                        if (v196 == 255)
                        {
                          v180[0] = (uint64_t)"Invalid address encoding DW_EH_PE_omit in CIE at ";
                          __int16 v183 = 259;
                          uint64_t v138 = *v90 + v105;
                          unint64_t v198 = (unint64_t)"{0:x}";
                          uint64_t v199 = 5;
                          v200 = &v204;
                          uint64_t v201 = 1;
                          v202 = &unk_270DBD7D8;
                          uint64_t v203 = v138;
                          uint64_t v204 = &v202;
                          __int16 v177 = 262;
                          v176[0] = (uint64_t)&v198;
                          llvm::operator+(v180, v176, (uint64_t)&v205);
                          llvm::make_error<llvm::jitlink::JITLinkError,llvm::Twine>();
                        }
                        unsigned int v131 = v131 & 0xFFFFFF | (v196 << 24);
                      }
                      else
                      {
                        llvm::jitlink::EHFrameEdgeFixer::readPointerEncoding((uint64_t)&v198, (uint64_t)&v184, v90, "LSDA");
                        if (v199)
                        {
LABEL_261:
                          unint64_t v137 = v198;
LABEL_262:
                          *(void *)a4 = v137;
                          goto LABEL_253;
                        }
                        unsigned int v131 = v131 & 0xFF0000FF | (v198 << 16) | 0x100;
                      }
                    }
                    if ((unint64_t)&v191[-v130] > v178) {
                      llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
                    }
LABEL_258:
                    unint64_t v198 = (v122[3] & 0x1FFFFFFFFFFFFFFLL) + *(void *)v122[2];
                    v136 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation>>,llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation>>::FindAndConstruct((uint64_t)v157, (uint64_t *)&v198);
                    v136[1] = (uint64_t)v122;
                    *((_DWORD *)v136 + 4) = v131;
                    *(void *)a4 = 0;
                  }
                }
              }
            }
          }
LABEL_253:
          uint64_t v184 = (const char *)&unk_270DBC3C0;
          if (v186) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v186);
          }
          if (*(void *)a4) {
            goto LABEL_269;
          }
LABEL_256:
          uint64_t v105 = (uint64_t)&v112[v109];
          unsigned int v172 = &v112[v109];
          continue;
        }
LABEL_201:
        *v124++ = v176[0];
        goto LABEL_205;
      }
      break;
    }
    uint64_t v115 = *v90;
    uint64_t v116 = (std::__shared_weak_count_vtbl *)(v90[3] + v105);
    int v117 = *(_DWORD *)(v156 + 172);
    uint64_t v184 = (const char *)&unk_270DBC3C0;
    llvm::BinaryStreamRef::BinaryStreamRef(&v185, v116, (uint64_t)&v112[v109 - v105], v117);
    int v191 = v113 + 4;
    __int16 v118 = llvm::jitlink::LinkGraph::addAnonymousSymbol(v156, (uint64_t)v90, v105, (uint64_t)&v112[v109 - v105], 0, 0);
    uint64_t v119 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::find((uint64_t)&v173, (int)v112);
    if (v173 + 24 * v175 == v119)
    {
      llvm::jitlink::EHFrameEdgeFixer::ParseContext::findCIEInfo((uint64_t)&v198, (uint64_t)&v156, (uint64_t)&v112[v115 - v114]);
      if ((v199 & 1) == 0)
      {
        uint64_t v126 = (unsigned char *)v198;
        uint64_t v127 = v149;
        llvm::jitlink::Block::addEdge(v90, *(unsigned char *)(v149 + 24), (int)v112, *(void *)v198, 0);
        goto LABEL_211;
      }
      goto LABEL_221;
    }
    if (*(void *)(v119 + 16))
    {
      unint64_t v198 = (unint64_t)"{0:x16}";
      uint64_t v199 = 7;
      v200 = &v204;
      uint64_t v201 = 1;
      v202 = &unk_270DBE460;
      uint64_t v203 = (uint64_t)&v112[v115];
      uint64_t v204 = &v202;
      v180[0] = (uint64_t)"CIE edge at ";
      uint64_t v181 = &v198;
      __int16 v183 = 1539;
      operator new();
    }
    llvm::jitlink::EHFrameEdgeFixer::ParseContext::findCIEInfo((uint64_t)&v198, (uint64_t)&v156, (*(void *)(*(void *)(v119 + 8) + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(*(void *)(v119 + 8) + 16));
    if (v199) {
      goto LABEL_221;
    }
    uint64_t v126 = (unsigned char *)v198;
    uint64_t v127 = v149;
LABEL_211:
    llvm::jitlink::EHFrameEdgeFixer::getOrCreateEncodedPointerEdge((uint64_t)&v198, v127, (uint64_t)&v156, (uint64_t)&v173, (llvm::BinaryStreamReader *)v126[11], (llvm::BinaryStreamReader *)&v184, v90, (uint64_t)v191);
    if (v199)
    {
LABEL_221:
      unint64_t v129 = v198;
      *(void *)a4 = v198;
      goto LABEL_222;
    }
    uint64_t v128 = *(void *)(v198 + 16);
    if (*(unsigned char *)(v128 + 8)) {
      llvm::jitlink::Block::addEdge((void *)v128, 1, 0, (uint64_t)v118, 0);
    }
    llvm::jitlink::EHFrameEdgeFixer::skipEncodedPointer(a4, v149, (llvm::BinaryStreamReader *)v126[11], (llvm::BinaryStreamReader *)&v184);
    unint64_t v129 = *(void *)a4;
    if (!*(void *)a4)
    {
      if (!v126[8]
        || (llvm::BinaryStreamReader::readULEB128((llvm::BinaryStreamReader *)&v184, &v205, a4),
            (unint64_t v129 = *(void *)a4) == 0)
        && (!v126[9]
         || (llvm::jitlink::EHFrameEdgeFixer::getOrCreateEncodedPointerEdge((uint64_t)&v198, v149, (uint64_t)&v156, (uint64_t)&v173, (llvm::BinaryStreamReader *)v126[10], (llvm::BinaryStreamReader *)&v184, v90, (uint64_t)v191), (v199 & 1) == 0)|| (unint64_t v129 = v198, *(void *)a4 = v198, !v129)))
      {
        unint64_t v129 = 0;
        *(void *)a4 = 0;
      }
    }
LABEL_222:
    uint64_t v184 = (const char *)&unk_270DBC3C0;
    if (v186)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v186);
      unint64_t v129 = *(void *)a4;
    }
    if (!v129) {
      goto LABEL_256;
    }
LABEL_269:
    long long v165 = (const char *)&unk_270DBC3C0;
    if (v167) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v167);
    }
    MEMORY[0x263E500A0](0, 8);
    MEMORY[0x263E500A0](v173, 8);
    if (!*(void *)a4)
    {
LABEL_272:
      unint64_t v89 = v152 + 1;
      if (v152 + 1 == (uint64_t **)v154) {
        goto LABEL_273;
      }
      continue;
    }
    break;
  }
LABEL_275:
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x263E500A0](v162[0], 8);
  std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(v160);
  return MEMORY[0x263E500A0](v157[0], 8);
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>()
{
}

void llvm::make_error<llvm::jitlink::JITLinkError,llvm::Twine>()
{
}

uint64_t llvm::BinaryStreamReader::readInteger<unsigned char>(void *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t result = llvm::BinaryStreamRef::readBytes(a2 + 8, *(void *)(a2 + 56), 1, a1);
  if (!*a1)
  {
    ++*(void *)(a2 + 56);
    *a1 = 0;
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24));
    *a3 = MEMORY[0];
    *a1 = 0;
  }
  return result;
}

uint64_t llvm::jitlink::EHFrameEdgeFixer::readPointerEncoding(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  char v33 = 0;
  uint64_t result = llvm::BinaryStreamReader::readInteger<unsigned char>(v18, a2, &v33);
  uint64_t v8 = v18[0];
  if (v18[0])
  {
    *(unsigned char *)(a1 + 8) |= 1u;
    *(void *)a1 = v8;
    return result;
  }
  char v9 = v33;
  if ((((v33 & 0xF) - 1) & 0xFFFFFFF6) == 0 || (v33 & 0x60u) - 96 > 0xFFFFFFBF)
  {
    v18[0] = "{0:x2}";
    v18[1] = 6;
    long long v18[2] = &v20;
    _OWORD v18[3] = 1;
    v19[0] = &unk_270DBE8F8;
    v19[1] = &v33;
    uint64_t v20 = v19;
    v21[0] = "Unsupported pointer encoding ";
    long long v21[2] = v18;
    __int16 v22 = 1539;
    *(void *)&long long v23 = v21;
    *(void *)&long long v24 = " for ";
    uint64_t v10 = 770;
    LOWORD(v25) = 770;
    if (*a4)
    {
      *(void *)&long long v26 = &v23;
      *(void *)&long long v27 = a4;
      LOWORD(v28) = 770;
      char v11 = 2;
      uint64_t v12 = (const char *)&v26;
    }
    else
    {
      long long v26 = v23;
      long long v27 = v24;
      uint64_t v28 = v25;
      char v11 = v25;
      if (v25 == 1)
      {
        uint64_t v29 = "in CFI record at ";
        __int16 v32 = 259;
        uint64_t v14 = *a3;
        uint64_t v15 = &unk_270DBE460;
        uint64_t v16 = v14;
        unint64_t v17 = &v15;
LABEL_9:
        operator new();
      }
      uint64_t v10 = *((void *)&v26 + 1);
      uint64_t v12 = (const char *)&v26;
      if (BYTE1(v28) == 1) {
        uint64_t v12 = (const char *)v26;
      }
      else {
        char v11 = 2;
      }
    }
    uint64_t v29 = v12;
    uint64_t v30 = v10;
    size_t v31 = "in CFI record at ";
    LOBYTE(v32) = v11;
    HIBYTE(v32) = 3;
    uint64_t v13 = *a3;
    uint64_t v15 = &unk_270DBE460;
    uint64_t v16 = v13;
    unint64_t v17 = &v15;
    goto LABEL_9;
  }
  *(unsigned char *)(a1 + 8) &= ~1u;
  *(unsigned char *)a1 = v9;
  return result;
}

void llvm::jitlink::EHFrameEdgeFixer::getOrCreateEncodedPointerEdge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::BinaryStreamReader *a5, llvm::BinaryStreamReader *a6, void *a7, uint64_t a8)
{
  if (a5 == 255)
  {
    *(unsigned char *)(a1 + 8) &= ~1u;
    *(void *)a1 = 0;
  }
  else
  {
    uint64_t v12 = a5;
    uint64_t v16 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::find(a4, a8);
    if (*(void *)a4 + 24 * *(unsigned int *)(a4 + 16) == v16)
    {
      if ((v12 & 0xF) == 0)
      {
        if (*(_DWORD *)(a2 + 16) == 8) {
          char v19 = 4;
        }
        else {
          char v19 = 3;
        }
        LOBYTE(v12) = v19 | v12;
      }
      unint64_t v38 = 0;
      switch(v12 & 0xF)
      {
        case 4:
        case 0xC:
          llvm::BinaryStreamReader::readInteger<unsigned long long>((uint64_t)a6, &v38, v39);
          uint64_t v18 = v39[0];
          if (v39[0]) {
            goto LABEL_15;
          }
          unint64_t v20 = v38;
          uint64_t v21 = (char *)(a2 + 23);
          __int16 v22 = (char *)(a2 + 21);
          break;
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
          __break(1u);
          JUMPOUT(0x261CD5228);
        default:
          v43[0] = 0;
          llvm::BinaryStreamReader::readInteger<unsigned int>((uint64_t)a6, v43, v39);
          uint64_t v18 = v39[0];
          if (v39[0]) {
            goto LABEL_15;
          }
          unint64_t v20 = v43[0];
          unint64_t v38 = v43[0];
          uint64_t v21 = (char *)(a2 + 22);
          __int16 v22 = (char *)(a2 + 20);
          break;
      }
      uint64_t v23 = *a7 + a8;
      if ((v12 & 0x70) != 0x10)
      {
        uint64_t v23 = 0;
        uint64_t v21 = v22;
      }
      char v24 = *v21;
      unint64_t v25 = v23 + v20;
      uint64_t v42 = v23 + v20;
      uint64_t v27 = a3 + 56;
      uint64_t v26 = *(void *)(a3 + 56);
      v39[0] = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>,llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::orc::ExecutorAddr>(v26, *(_DWORD *)(a3 + 72), v23 + v20, v39)|| v39[0] == *(void *)(a3 + 56) + 16 * *(unsigned int *)(a3 + 72))
      {
        uint64_t v29 = (void *)(a3 + 40);
        uint64_t v30 = *(void **)(a3 + 40);
        if (v30)
        {
          do
          {
            unint64_t v31 = v30[4];
            BOOL v32 = v31 > v25;
            if (v31 <= v25) {
              char v33 = v30 + 1;
            }
            else {
              char v33 = v30;
            }
            if (v32) {
              uint64_t v29 = v30;
            }
            uint64_t v30 = (void *)*v33;
          }
          while (*v33);
        }
        if (v29 == *(void **)(a3 + 32)) {
          goto LABEL_38;
        }
        uint64_t v34 = (void *)*v29;
        if (*v29)
        {
          do
          {
            uint64_t v35 = v34;
            uint64_t v34 = (void *)v34[1];
          }
          while (v34);
        }
        else
        {
          do
          {
            uint64_t v35 = (void *)v29[2];
            BOOL v36 = *v35 == (void)v29;
            uint64_t v29 = v35;
          }
          while (v36);
        }
        uint64_t v37 = (void *)v35[5];
        if (v37[4] + *v37 <= v25)
        {
LABEL_38:
          v39[0] = (uint64_t)"{0:x16}";
          v39[1] = 7;
          void v39[2] = (uint64_t)&v41;
          v39[3] = 1;
          v40[0] = &unk_270DBD808;
          v40[1] = &v42;
          unint64_t v41 = v40;
          operator new();
        }
        uint64_t v28 = llvm::jitlink::LinkGraph::addAnonymousSymbol(*(void *)a3, (uint64_t)v37, v25 - *v37, 0, 0, 0);
        v39[0] = (v28[3] & 0x1FFFFFFFFFFFFFFLL) + *(void *)v28[2];
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>,llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::FindAndConstruct(v27, v39)[1] = (uint64_t)v28;
      }
      else
      {
        uint64_t v28 = *(void **)(v39[0] + 8);
      }
      llvm::jitlink::Block::addEdge(a7, v24, a8, (uint64_t)v28, 0);
      *(unsigned char *)(a1 + 8) &= ~1u;
      *(void *)a1 = v28;
    }
    else
    {
      uint64_t v17 = v16;
      llvm::jitlink::EHFrameEdgeFixer::skipEncodedPointer((llvm::jitlink::EHFrameEdgeFixer *)v39, a2, v12, a6);
      uint64_t v18 = v39[0];
      if (v39[0])
      {
LABEL_15:
        *(unsigned char *)(a1 + 8) |= 1u;
      }
      else
      {
        *(unsigned char *)(a1 + 8) &= ~1u;
        uint64_t v18 = *(void *)(v17 + 8);
      }
      *(void *)a1 = v18;
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::find(uint64_t a1, int a2)
{
  uint64_t v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::LookupBucketFor<unsigned int>(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v4))return v4; {
  else
  }
    return *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
}

uint64_t llvm::jitlink::EHFrameEdgeFixer::ParseContext::findCIEInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = a3;
  v8[0] = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(void *)(a2 + 8), *(_DWORD *)(a2 + 24), a3, v8);
  if (result) {
    BOOL v6 = v8[0] == *(void *)(a2 + 8) + 24 * *(unsigned int *)(a2 + 24);
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    v8[0] = "{0:x16}";
    v8[1] = 7;
    void v8[2] = &v10;
    v8[3] = 1;
    v9[0] = &unk_270DBD808;
    v9[1] = &v11;
    uint64_t v10 = v9;
    operator new();
  }
  uint64_t v7 = v8[0] + 8;
  *(unsigned char *)(a1 + 8) &= ~1u;
  *(void *)a1 = v7;
  return result;
}

unint64_t llvm::jitlink::EHFrameEdgeFixer::skipEncodedPointer(llvm::jitlink::EHFrameEdgeFixer *this, uint64_t a2, llvm::BinaryStreamReader *a3, llvm::BinaryStreamReader *a4)
{
  switch(a3 & 0xF)
  {
    case 3:
    case 0xB:
      goto LABEL_2;
    case 4:
    case 0xC:
      goto LABEL_4;
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
      __break(1u);
      JUMPOUT(0x261CD5468);
    default:
      if (*(_DWORD *)(a2 + 16) == 8)
      {
LABEL_4:
        unint64_t v5 = this;
        BOOL v6 = a4;
        unint64_t v7 = 8;
      }
      else
      {
LABEL_2:
        unint64_t v5 = this;
        BOOL v6 = a4;
        unint64_t v7 = 4;
      }
      unint64_t result = llvm::BinaryStreamReader::skip(v6, v7, v5);
      if (!*(void *)this) {
        *(void *)this = 0;
      }
      return result;
  }
}

uint64_t llvm::jitlink::EHFrameNullTerminator::operator()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t result = llvm::jitlink::LinkGraph::findSectionByName(a2, *a1, a1[1], a3);
  if (result)
  {
    v11[0] = (uint64_t)&llvm::jitlink::EHFrameNullTerminator::NullTerminatorBlockContent;
    v11[1] = 4;
    unint64_t v9 = 1;
    uint64_t v10 = -5;
    uint64_t v8 = 0;
    unint64_t v7 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, result, v11, &v10, &v9, &v8);
    uint64_t result = (uint64_t)llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v7, 0, 4, 0, 1);
  }
  *a4 = 0;
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>,llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>,llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::grow(a1, v7);
    uint64_t v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>,llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t result = *a2;
  result[1] = 0;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>,llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::orc::ExecutorAddr>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    int v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -2;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        int v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        int v6 = v10;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      unsigned int v13 = (uint64_t *)v4;
      do
      {
        uint64_t v14 = *v13;
        if ((unint64_t)*v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          char v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>,llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          uint64_t v15 = v19;
          uint64_t v16 = v13[1];
          *char v19 = *v13;
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    uint64_t v18 = 16 * v17;
    do
    {
      *uint64_t result = -1;
      result += 2;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

void llvm::jitlink::BlockAddressMap::overlapError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = "{0:x16} -- {1:x16}";
  v12[1] = 18;
  void v12[2] = v15;
  _OWORD v12[3] = 2;
  v13[0] = &unk_270DBD7D8;
  v13[1] = a2;
  v14[0] = &unk_270DBD7D8;
  v14[1] = a3 + a2;
  v15[0] = v13;
  v15[1] = v14;
  v16[0] = "Block at ";
  uint64_t v16[2] = v12;
  __int16 v17 = 1539;
  uint64_t v18 = v16;
  char v19 = " overlaps ";
  __int16 v20 = 770;
  unint64_t v5 = "{0:x16} -- {1:x16}";
  uint64_t v6 = 18;
  int v7 = v11;
  uint64_t v8 = 2;
  v9[0] = &unk_270DBD7D8;
  v9[1] = a4;
  v10[0] = &unk_270DBD7D8;
  v10[1] = a5 + a4;
  v11[0] = v9;
  v11[1] = v10;
  operator new();
}

unint64_t **std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::EHFrameEdgeFixer::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,false>(unint64_t **result, unint64_t **a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v40 = *(a2 - 1);
                unint64_t v41 = *v10;
                if (*v40 < **v10)
                {
                  *uint64_t v10 = v40;
                  *(a2 - 1) = v41;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v10, v10 + 1, a2 - 1);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5uLL:
                uint64_t v42 = v10 + 1;
                uint64_t v43 = v10 + 2;
                uint64_t v44 = v10 + 3;
                uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v45 = *(a2 - 1);
                int v46 = v10[3];
                if (*v45 < *v46)
                {
                  *uint64_t v44 = v45;
                  *(a2 - 1) = v46;
                  uint64_t v47 = *v44;
                  unint64_t v48 = *v43;
                  unint64_t v49 = **v44;
                  if (v49 < **v43)
                  {
                    char *v43 = v47;
                    *uint64_t v44 = v48;
                    uint64_t v50 = *v42;
                    if (v49 < **v42)
                    {
                      v10[1] = v47;
                      void v10[2] = v50;
                      uint64_t v51 = *v10;
                      if (v49 < **v10)
                      {
                        *uint64_t v10 = v47;
                        v10[1] = v51;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v52 = v10 + 1;
            BOOL v54 = v10 == a2 || v52 == a2;
            if (a4)
            {
              if (!v54)
              {
                uint64_t v55 = 8;
                uint64_t v56 = v10;
                do
                {
                  uint64_t v58 = *v56;
                  uint64_t v57 = v56[1];
                  uint64_t v56 = v52;
                  unint64_t v59 = *v57;
                  if (*v57 < *v58)
                  {
                    uint64_t v60 = v55;
                    do
                    {
                      *(unint64_t **)((char *)v10 + v60) = v58;
                      uint64_t v61 = v60 - 8;
                      if (v60 == 8)
                      {
                        uint64_t v62 = v10;
                        goto LABEL_84;
                      }
                      uint64_t v58 = *(unint64_t **)((char *)v10 + v60 - 16);
                      v60 -= 8;
                    }
                    while (v59 < *v58);
                    uint64_t v62 = (unint64_t **)((char *)v10 + v61);
LABEL_84:
                    *uint64_t v62 = v57;
                  }
                  uint64_t v52 = v56 + 1;
                  v55 += 8;
                }
                while (v56 + 1 != a2);
              }
            }
            else if (!v54)
            {
              do
              {
                uint64_t v98 = *v9;
                unsigned int v97 = v9[1];
                unint64_t v9 = v52;
                unint64_t v99 = *v97;
                if (*v97 < *v98)
                {
                  do
                  {
                    *uint64_t v52 = v98;
                    uint64_t v98 = *(v52 - 2);
                    --v52;
                  }
                  while (v99 < *v98);
                  *uint64_t v52 = v97;
                }
                uint64_t v52 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v63 = (v12 - 2) >> 1;
              int64_t v64 = v63;
              do
              {
                int64_t v65 = v64;
                if (v63 >= v64)
                {
                  uint64_t v66 = (2 * v64) | 1;
                  char v67 = &v10[v66];
                  uint64_t v68 = *v67;
                  if (2 * v65 + 2 < (uint64_t)v12)
                  {
                    unint64_t v69 = v67[1];
                    unint64_t v71 = *v68;
                    BOOL v70 = *v68 >= *v69;
                    if (*v68 <= *v69) {
                      unint64_t v71 = *v69;
                    }
                    if (*v68 < *v69) {
                      uint64_t v68 = v67[1];
                    }
                    if (!v70)
                    {
                      ++v67;
                      uint64_t v66 = 2 * v65 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v71 = *v68;
                  }
                  uint64_t result = &v10[v65];
                  uint64_t v72 = *result;
                  unint64_t v73 = **result;
                  if (v71 >= v73)
                  {
                    do
                    {
                      uint64_t v74 = v67;
                      *uint64_t result = v68;
                      if (v63 < v66) {
                        break;
                      }
                      uint64_t v75 = (2 * v66) | 1;
                      char v67 = &v10[v75];
                      uint64_t v66 = 2 * v66 + 2;
                      uint64_t v68 = *v67;
                      if (v66 < (uint64_t)v12)
                      {
                        char v76 = v67[1];
                        unint64_t v78 = *v68;
                        BOOL v77 = *v68 >= *v76;
                        if (*v68 <= *v76) {
                          unint64_t v78 = *v76;
                        }
                        if (*v68 < *v76) {
                          uint64_t v68 = v67[1];
                        }
                        if (v77) {
                          uint64_t v66 = v75;
                        }
                        else {
                          ++v67;
                        }
                      }
                      else
                      {
                        unint64_t v78 = *v68;
                        uint64_t v66 = v75;
                      }
                      uint64_t result = v74;
                    }
                    while (v78 >= v73);
                    *uint64_t v74 = v72;
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              uint64_t v79 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v80 = 0;
                unint64_t v81 = *v10;
                uint64_t v82 = v10;
                do
                {
                  uint64_t v83 = &v82[v80];
                  uint64_t v86 = (unint64_t ***)v83[1];
                  unint64_t v84 = (unint64_t **)(v83 + 1);
                  uint64_t v85 = v86;
                  uint64_t v87 = (2 * v80) | 1;
                  uint64_t v88 = 2 * v80 + 2;
                  if (v88 < v79)
                  {
                    uint64_t result = *v85;
                    if ((unint64_t)*v85 < *v84[1])
                    {
                      uint64_t v85 = (unint64_t ***)v84[1];
                      ++v84;
                      uint64_t v87 = v88;
                    }
                  }
                  void *v82 = v85;
                  uint64_t v82 = v84;
                  uint64_t v80 = v87;
                }
                while (v87 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                if (v84 == --a2)
                {
                  *unint64_t v84 = v81;
                }
                else
                {
                  *unint64_t v84 = *a2;
                  *a2 = v81;
                  uint64_t v89 = (char *)v84 - (char *)v10 + 8;
                  if (v89 >= 9)
                  {
                    unint64_t v90 = (((unint64_t)v89 >> 3) - 2) >> 1;
                    uint64_t v91 = &v10[v90];
                    uint64_t v92 = *v91;
                    uint64_t v93 = *v84;
                    unint64_t v94 = **v84;
                    if (**v91 < v94)
                    {
                      do
                      {
                        uint64_t v95 = v91;
                        *unint64_t v84 = v92;
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                        uint64_t v91 = &v10[v90];
                        uint64_t v92 = *v91;
                        unint64_t v84 = v95;
                      }
                      while (**v91 < v94);
                      *uint64_t v95 = v93;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v9, &v9[v12 >> 1], a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v9 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *unint64_t v9 = *v14;
            *uint64_t v14 = v15;
          }
          else
          {
            uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          unint64_t v17 = **v9;
          if ((a4 & 1) != 0 || **(v9 - 1) < v17) {
            break;
          }
          if (v17 >= **(a2 - 1))
          {
            BOOL v32 = v9 + 1;
            do
            {
              uint64_t v10 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 >= **v10);
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              unint64_t v31 = v10[1];
              ++v10;
            }
            while (v17 >= *v31);
          }
          char v33 = a2;
          if (v10 < a2)
          {
            char v33 = a2;
            do
              uint64_t v34 = *--v33;
            while (v17 < *v34);
          }
          if (v10 < v33)
          {
            uint64_t v35 = *v10;
            BOOL v36 = *v33;
            do
            {
              *uint64_t v10 = v36;
              *char v33 = v35;
              do
              {
                uint64_t v37 = v10[1];
                ++v10;
                uint64_t v35 = v37;
              }
              while (v17 >= *v37);
              do
              {
                unint64_t v38 = *--v33;
                BOOL v36 = v38;
              }
              while (v17 < *v38);
            }
            while (v10 < v33);
          }
          uint64_t v39 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *unint64_t v9 = *v39;
          }
          a4 = 0;
          uint64_t *v39 = v16;
        }
        uint64_t v18 = 0;
        do
          char v19 = v9[++v18];
        while (*v19 < v17);
        __int16 v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*v23 >= v17);
        }
        else
        {
          do
            __int16 v22 = *--v21;
          while (*v22 >= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v29 = v20 - 1;
        }
        else
        {
          char v24 = *v21;
          unint64_t v25 = &v9[v18];
          uint64_t v26 = v21;
          do
          {
            uint64_t *v25 = v24;
            uint64_t *v26 = v19;
            do
            {
              uint64_t v27 = v25[1];
              ++v25;
              char v19 = v27;
            }
            while (*v27 < v17);
            do
            {
              uint64_t v28 = *--v26;
              char v24 = v28;
            }
            while (*v28 >= v17);
          }
          while (v25 < v26);
          uint64_t v29 = v25 - 1;
        }
        if (v29 != v9) {
          *unint64_t v9 = *v29;
        }
        void *v29 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_33:
        uint64_t result = (unint64_t **)std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::EHFrameEdgeFixer::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,false>(v9, v29, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v29 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::EHFrameEdgeFixer::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(v9, v29);
      uint64_t v10 = v29 + 1;
      uint64_t result = (unint64_t **)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::EHFrameEdgeFixer::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(v29 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_33;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::EHFrameEdgeFixer::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(unint64_t **a1, unint64_t **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      int v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      char v19 = a1 + 2;
      __int16 v20 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      __int16 v22 = a1[3];
      if (*v21 < *v22)
      {
        *__int16 v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        char v24 = *v19;
        unint64_t v25 = **v20;
        if (v25 < **v19)
        {
          *char v19 = v23;
          *__int16 v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < **v18)
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < **a1)
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a1 + 2);
      unint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    unint64_t v13 = *v8;
    unint64_t v14 = **v9;
    if (v14 < **v8)
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(unint64_t **)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        unint64_t v13 = *(unint64_t **)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *v13)
        {
          unint64_t v17 = (unint64_t **)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      unint64_t v17 = a1;
LABEL_13:
      *unint64_t v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::LookupBucketFor<unsigned int>(uint64_t a1, int a2, int a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    uint64_t v6 = (_DWORD *)(a1 + 24 * v5);
    int v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 1;
      while (v7 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -2;
        }
        if (v12) {
          int v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (_DWORD *)(a1 + 24 * (v13 & v4));
        int v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void llvm::detail::provider_format_adapter<unsigned int>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned int>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned int,void>::format((unsigned int *)(a1 + 8), a2, a3, a4);
}

_DWORD *llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        *BOOL result = -1;
        result += 6;
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = v4;
      do
      {
        int v14 = *(_DWORD *)v13;
        if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        {
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::LookupBucketFor<unsigned int>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          uint64_t v15 = v18;
          *uint64_t v18 = *(_DWORD *)v13;
          *(_OWORD *)(v15 + 2) = *(_OWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 24 * v16;
    do
    {
      *BOOL result = -1;
      result += 6;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation>>,llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  unint64_t v9 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  BOOL result = v9;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation>>::grow(a1, v7);
    unint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    BOOL result = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  uint64_t v8 = *a2;
  result[1] = 0;
  result[2] = 0;
  *BOOL result = v8;
  return result;
}

void *llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        *BOOL result = -1;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if (*(void *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          uint64_t v15 = v18;
          *uint64_t v18 = *(void *)v13;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 24 * v16;
    do
    {
      *BOOL result = -1;
      result += 3;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

void llvm::detail::provider_format_adapter<unsigned char &>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned char &>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned char,void>::format(*(unsigned __int8 **)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *llvm::format_provider<unsigned char,void>::format(unsigned __int8 *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  int v15 = 0;
  if (!llvm::detail::HelperFunctions::consumeHexStyle((const void **)&v16, &v15))
  {
    if (v17)
    {
      int v12 = 0;
      unsigned int v13 = *v16;
      if (v13 <= 0x63)
      {
        if (v13 != 68)
        {
          if (v13 != 78) {
            goto LABEL_19;
          }
          goto LABEL_16;
        }
LABEL_17:
        int v12 = 0;
        ++v16;
        goto LABEL_18;
      }
      if (v13 == 100) {
        goto LABEL_17;
      }
      if (v13 == 110)
      {
LABEL_16:
        ++v16;
        int v12 = 1;
LABEL_18:
        --v17;
      }
    }
    else
    {
      int v12 = 0;
    }
LABEL_19:
    size_t v18 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6)) {
      size_t v14 = 0;
    }
    else {
      size_t v14 = v18;
    }
    return llvm::write_integer(a2, *a1, v14, v12);
  }
  int v7 = v15;
  size_t v18 = 0;
  int v8 = llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6);
  unint64_t v9 = v18;
  if (v8) {
    unint64_t v9 = 0;
  }
  if ((v7 & 0xFFFFFFFE) == 2) {
    unint64_t v10 = v9 + 2;
  }
  else {
    unint64_t v10 = v9;
  }
  return llvm::write_hex(a2, *a1, v7, v10, 1);
}

llvm::raw_ostream *llvm::jitlink::JITLinkError::log(llvm::jitlink::JITLinkError *this, llvm::raw_ostream *a2)
{
  unint64_t v5 = (const char *)*((void *)this + 1);
  uint64_t v3 = (char *)this + 8;
  uint64_t v4 = v5;
  int v6 = v3[23];
  if (v6 >= 0) {
    int v7 = v3;
  }
  else {
    int v7 = v4;
  }
  if (v6 >= 0) {
    size_t v8 = v3[23];
  }
  else {
    size_t v8 = *((void *)v3 + 1);
  }
  return llvm::raw_ostream::write(a2, v7, v8);
}

uint64_t llvm::jitlink::JITLinkError::convertToErrorCode(llvm::jitlink::JITLinkError *this)
{
  {
  }
  return 1;
}

const char *llvm::jitlink::getGenericEdgeKindName(llvm::jitlink *this)
{
  uint64_t v1 = "<Unrecognized edge kind>";
  if (this == 1) {
    uint64_t v1 = "Keep-Alive";
  }
  if (this) {
    return v1;
  }
  else {
    return "INVALID RELOCATION";
  }
}

void llvm::jitlink::Section::~Section(llvm::jitlink::Section *this)
{
  uint64_t v2 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)this + 56);
  uint64_t v4 = *((void *)this + 7) + 8 * *((unsigned int *)this + 18);
  if ((void *)v4 != v2)
  {
    while (1)
    {
      if (++v2 == v3)
      {
        uint64_t v2 = v3;
LABEL_6:
        if (v2 == (void *)v4) {
          break;
        }
      }
      else if ((*v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        goto LABEL_6;
      }
    }
  }
  unint64_t v5 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)this + 32);
  uint64_t v7 = *((void *)this + 4) + 8 * *((unsigned int *)this + 12);
  if ((void *)v7 != v5)
  {
    size_t v8 = v5;
    unint64_t v9 = v6;
    do
    {
      unint64_t v10 = *(void **)(*v8 + 40);
      if (v10)
      {
        *(void *)(*v8 + 48) = v10;
        operator delete(v10);
      }
      while (++v8 != v9)
      {
        if ((*v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_15;
        }
      }
      size_t v8 = v9;
LABEL_15:
      ;
    }
    while (v8 != (void *)v7);
  }
  MEMORY[0x263E500A0](*((void *)this + 7), 8);
  MEMORY[0x263E500A0](*((void *)this + 4), 8);
}

void llvm::jitlink::LinkGraph::splitBlockImpl(uint64_t **a1@<X1>, void **a2@<X2>, uint64_t **a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  int v6 = *a1;
  uint64_t v7 = (char *)a1[1];
  size_t v8 = (void *)**a1;
  uint64_t v9 = v8[3];
  uint64_t v10 = v8[4];
  if (v7 - (char *)*a1 != 8)
  {
    uint64_t v11 = 0;
    do
    {
      int v12 = &v6[v11];
      unsigned int v13 = (void *)*v12;
      uint64_t v14 = *(void *)(*v12 + 8);
      uint64_t v15 = *(void *)v12[1] - *(void *)*v12;
      v13[3] = v9 + *v13 - *(void *)*v6;
      void v13[4] = v15;
      v13[1] = v14 & 0xFFFFFFFFFFFFFFFBLL;
      int v6 = *a1;
      uint64_t v7 = (char *)a1[1];
    }
    while (v11++ != ((v7 - (char *)*a1) >> 3) - 2);
    size_t v8 = (void *)*v6;
  }
  uint64_t v17 = (void *)*((void *)v7 - 1);
  uint64_t v18 = v17[1];
  uint64_t v19 = *v17 - *v8;
  v17[3] = v9 + v19;
  v17[4] = v10 - v19;
  v17[1] = v18 & 0xFFFFFFFFFFFFFFFBLL;
  __int16 v20 = *a1;
  uint64_t v21 = a1[1];
  if (*a1 != v21)
  {
    uint64_t v22 = *(void *)(*v20 + 8) & 4;
    do
    {
      uint64_t v23 = *v20++;
      *(void *)(v23 + 8) = *(void *)(v23 + 8) & 0xFFFFFFFFFFFFFFFBLL | v22;
    }
    while (v20 != v21);
  }
  LOBYTE(v93[0]) = 0;
  char v95 = 0;
  if (a2) {
    char v24 = a2;
  }
  else {
    char v24 = v93;
  }
  if (!*((unsigned char *)v24 + 80))
  {
    v91[0] = v92;
    v91[1] = (void *)0x800000000;
    std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>::operator=[abi:nn180100]<llvm::SmallVector<llvm::jitlink::Symbol *,8u>,void>((uint64_t)v24, (uint64_t)v91);
    if (v91[0] != v92) {
      free(v91[0]);
    }
    uint64_t v25 = *(void *)(**a1 + 16);
    uint64_t v26 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v25 + 56);
    uint64_t v28 = *(void *)(v25 + 56) + 8 * *(unsigned int *)(v25 + 72);
    if ((uint64_t *)v28 != v26)
    {
      uint64_t v29 = v26;
      BOOL v30 = v27;
      do
      {
        if (*(void *)(*v29 + 16) == **a1) {
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)v24, *v29);
        }
        while (++v29 != v30)
        {
          if ((*v29 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_23;
          }
        }
        uint64_t v29 = v30;
LABEL_23:
        ;
      }
      while (v29 != (uint64_t *)v28);
    }
    unint64_t v31 = v93;
    if (a2) {
      unint64_t v31 = a2;
    }
    unint64_t v32 = *((unsigned int *)v31 + 2);
    unint64_t v33 = 126 - 2 * __clz(v32);
    if (v32) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **,false>((unint64_t)*v24, (uint64_t *)*v24 + v32, v34, 1);
  }
  if (a2) {
    uint64_t v35 = a2;
  }
  else {
    uint64_t v35 = v93;
  }
  BOOL v36 = *a1;
  unsigned int v37 = *((_DWORD *)v35 + 2);
  if ((char *)a1[1] - (char *)*a1 != 8)
  {
    uint64_t v38 = 0;
    do
    {
      if (!v37) {
        break;
      }
      uint64_t v39 = v38++;
      uint64_t v40 = (void *)*((void *)*v24 + v37 - 1);
      unint64_t v41 = v40 + 2;
      uint64_t v42 = *(void *)v40[2];
      uint64_t v43 = v40[3];
      unint64_t v44 = (v43 & 0x1FFFFFFFFFFFFFFLL) + v42;
      while (v44 < *(void *)v36[v38])
      {
        uint64_t v45 = (void *)v36[v39];
        uint64_t v46 = v43 + v42 - *v45;
        v40[3] = v43 & 0xFE00000000000000 | v46 & 0x1FFFFFFFFFFFFFFLL;
        unint64_t v47 = v45[4];
        if (v40[4] > v47) {
          v40[4] = v47 - (v46 & 0x1FFFFFFFFFFFFFFLL);
        }
        *unint64_t v41 = v45;
        unsigned int v37 = *((_DWORD *)v35 + 2) - 1;
        *((_DWORD *)v35 + 2) = v37;
        if (!v37)
        {
          BOOL v36 = *a1;
          break;
        }
        uint64_t v40 = (void *)*((void *)*v24 + v37 - 1);
        unint64_t v41 = v40 + 2;
        uint64_t v42 = *(void *)v40[2];
        uint64_t v43 = v40[3];
        unint64_t v44 = (v43 & 0x1FFFFFFFFFFFFFFLL) + v42;
        BOOL v36 = *a1;
      }
    }
    while (v39 != a1[1] - v36 - 2);
  }
  for (; v37; unsigned int v37 = *((_DWORD *)v35 + 2))
  {
    uint64_t v48 = *((void *)*v24 + v37 - 1);
    *((_DWORD *)v35 + 2) = v37 - 1;
    unint64_t v49 = (void *)*(a1[1] - 1);
    uint64_t v50 = *(void *)(v48 + 24);
    uint64_t v51 = v50 + **(void **)(v48 + 16) - *v49;
    *(void *)(v48 + 24) = v50 & 0xFE00000000000000 | v51 & 0x1FFFFFFFFFFFFFFLL;
    unint64_t v52 = v49[4];
    if (*(void *)(v48 + 32) > v52) {
      *(void *)(v48 + 32) = v52 - (v51 & 0x1FFFFFFFFFFFFFFLL);
    }
    *(void *)(v48 + 16) = v49;
  }
  if (v95 && v93[0] != &v94) {
    free(v93[0]);
  }
  uint64_t v53 = **a1;
  unint64_t v54 = *(void *)(v53 + 40);
  uint64_t v55 = *(_OWORD **)(v53 + 48);
  unint64_t v56 = 126 - 2 * __clz((uint64_t)((uint64_t)v55 - v54) >> 5);
  if (v55 == (_OWORD *)v54) {
    uint64_t v57 = 0;
  }
  else {
    uint64_t v57 = v56;
  }
  std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *,false>(v54, v55, v57, 1, a4);
  uint64_t v58 = *a1;
  unint64_t v59 = a1[1];
  uint64_t v60 = v59 - *a1;
  uint64_t v61 = v60 - 1;
  if (v60 != 1)
  {
    uint64_t v62 = *(void *)(v53 + 40);
    uint64_t v63 = *(void *)(v53 + 48);
    do
    {
      if (v62 == v63) {
        break;
      }
      int64_t v64 = (_DWORD *)v58[v61];
      unsigned int v65 = *v64 - *(_DWORD *)*v58;
      if (*(_DWORD *)(v63 - 24) >= v65)
      {
        uint64_t v66 = (unsigned int *)(v62 + ((v63 - v62) & 0xFFFFFFFFFFFFFFE0) - 56);
        uint64_t v67 = ((v63 - v62) >> 5) - 1;
        do
        {
          unint64_t v68 = v67;
          if (!v67) {
            break;
          }
          unsigned int v69 = *v66;
          v66 -= 8;
          --v67;
        }
        while (v69 >= v65);
        if (v68 == (v63 - v62) >> 5)
        {
          unint64_t v70 = (v63 - v62) >> 5;
        }
        else
        {
          unint64_t v71 = (_OWORD *)*((void *)v64 + 6);
          unint64_t v70 = v68;
          do
          {
            uint64_t v72 = (_OWORD *)(v62 + 32 * v70);
            unint64_t v73 = *((void *)v64 + 7);
            if ((unint64_t)v71 >= v73)
            {
              uint64_t v76 = *((void *)v64 + 5);
              uint64_t v77 = ((uint64_t)v71 - v76) >> 5;
              if ((unint64_t)(v77 + 1) >> 59) {
                abort();
              }
              uint64_t v78 = v73 - v76;
              uint64_t v79 = v78 >> 4;
              if (v78 >> 4 <= (unint64_t)(v77 + 1)) {
                uint64_t v79 = v77 + 1;
              }
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v80 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v79;
              }
              if (v80) {
                unint64_t v81 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(v64 + 14), v80);
              }
              else {
                unint64_t v81 = 0;
              }
              uint64_t v82 = &v81[32 * v77];
              long long v83 = v72[1];
              *(_OWORD *)uint64_t v82 = *v72;
              *((_OWORD *)v82 + 1) = v83;
              uint64_t v85 = (char *)*((void *)v64 + 5);
              unint64_t v84 = (char *)*((void *)v64 + 6);
              uint64_t v86 = v82;
              if (v84 != v85)
              {
                do
                {
                  long long v87 = *((_OWORD *)v84 - 2);
                  *(_OWORD *)((char *)v86 - 23) = *(_OWORD *)(v84 - 23);
                  *(v86 - 2) = v87;
                  v86 -= 2;
                  v84 -= 32;
                }
                while (v84 != v85);
                unint64_t v84 = (char *)*((void *)v64 + 5);
              }
              uint64_t v75 = v82 + 32;
              *((void *)v64 + 5) = v86;
              *((void *)v64 + 6) = v82 + 32;
              *((void *)v64 + 7) = &v81[32 * v80];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              long long v74 = v72[1];
              _OWORD *v71 = *v72;
              v71[1] = v74;
              uint64_t v75 = v71 + 2;
            }
            *((void *)v64 + 6) = v75;
            uint64_t v58 = *a1;
            int64_t v64 = (_DWORD *)(*a1)[v61];
            unint64_t v71 = (_OWORD *)*((void *)v64 + 6);
            *((_DWORD *)v71 - 6) -= v65;
            ++v70;
            uint64_t v62 = *(void *)(v53 + 40);
            uint64_t v63 = *(void *)(v53 + 48);
          }
          while (v70 != (v63 - v62) >> 5);
        }
        if (v70 > v68)
        {
          uint64_t v88 = v63 - v62 - 32;
          do
          {
            v63 -= 32;
            BOOL v89 = v68 >= v88 >> 5;
            v88 -= 32;
          }
          while (!v89);
          *(void *)(v53 + 48) = v63;
        }
      }
      --v61;
    }
    while (v61);
    unint64_t v59 = a1[1];
  }
  *a3 = v58;
  a3[1] = v59;
  a3[2] = a1[2];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t llvm::jitlink::JITLinkContext::shouldAddDefaultTargetPasses()
{
  return 1;
}

void llvm::jitlink::markAllSymbolsLive(llvm::jitlink *this@<X0>, void *a2@<X8>)
{
  llvm::jitlink::LinkGraph::defined_symbols(this, v11);
  v9[0] = v11[0];
  v9[1] = v11[1];
  void v9[2] = v11[2];
  long long v10 = v12;
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  uint64_t v6 = v12;
  if (*(void *)&v11[0] != v13 || (void)v12 != v14)
  {
    do
    {
      *(void *)(*(void *)v6 + 24) |= 0x1000000000000000uLL;
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v9, (uint64_t)&v8);
      uint64_t v6 = v10;
    }
    while (*(void *)&v9[0] != v4 || (void)v10 != v5);
  }
  *a2 = 0;
}

void llvm::jitlink::makeTargetOutOfRangeError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  memset(v70, 0, sizeof(v70));
  int v62 = 0;
  char v66 = 0;
  uint64_t v67 = 0;
  int v68 = 1;
  int64_t v64 = 0;
  unsigned int v65 = 0;
  uint64_t v63 = 0;
  uint64_t v61 = &unk_270DBD6E0;
  unsigned int v69 = v70;
  llvm::raw_ostream::SetUnbuffered(&v61);
  uint64_t v6 = a2[2];
  uint64_t v7 = v65;
  if ((unint64_t)(v64 - v65) > 8)
  {
    v65[8] = 32;
    *uint64_t v7 = *(void *)"In graph ";
    v65 += 9;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v61, "In graph ", 9uLL);
  }
  int v8 = *(char *)(a1 + 119);
  if (v8 >= 0) {
    uint64_t v9 = (const char *)(a1 + 96);
  }
  else {
    uint64_t v9 = *(const char **)(a1 + 96);
  }
  if (v8 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a1 + 119);
  }
  else {
    size_t v10 = *(void *)(a1 + 104);
  }
  llvm::raw_ostream::write((llvm::raw_ostream *)&v61, v9, v10);
  uint64_t v11 = v65;
  if ((unint64_t)(v64 - v65) > 9)
  {
    *((_WORD *)v65 + 4) = 8302;
    void *v11 = *(void *)", section ";
    v65 += 10;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v61, ", section ", 0xAuLL);
  }
  long long v12 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v61, *(const void **)v6, *(void *)(v6 + 8));
  uint64_t v13 = *((void *)v12 + 4);
  if ((unint64_t)(*((void *)v12 + 3) - v13) > 0x13)
  {
    *(_DWORD *)(v13 + 16) = 544499047;
    *(_OWORD *)uint64_t v13 = *(_OWORD *)": relocation target ";
    *((void *)v12 + 4) += 20;
  }
  else
  {
    llvm::raw_ostream::write(v12, ": relocation target ", 0x14uLL);
  }
  if (*(void *)(*(void *)a3 + 8))
  {
    if (v64 == v65) {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v61, "\"", 1uLL);
    }
    else {
      *v65++ = 34;
    }
    uint64_t v18 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v61, **(const void ***)a3, *(void *)(*(void *)a3 + 8));
    uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
    if (*((unsigned char **)v18 + 3) == v19)
    {
      llvm::raw_ostream::write(v18, "\"", 1uLL);
    }
    else
    {
      *uint64_t v19 = 34;
      ++*((void *)v18 + 4);
    }
  }
  else
  {
    uint64_t v14 = *(void *)(*(void *)(*(void *)a3 + 16) + 16);
    uint64_t v15 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v61, *(const void **)v14, *(void *)(v14 + 8));
    uint64_t v16 = v15;
    uint64_t v17 = *((void *)v15 + 4);
    if ((unint64_t)(*((void *)v15 + 3) - v17) > 2)
    {
      *(unsigned char *)(v17 + 2) = 32;
      *(_WORD *)uint64_t v17 = 11040;
      *((void *)v15 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v15, " + ", 3uLL);
    }
    int v20 = *(_DWORD *)(a3 + 8);
    unint64_t v54 = "{0:x}";
    uint64_t v55 = 5;
    unint64_t v56 = &v60;
    uint64_t v57 = 1;
    uint64_t v58 = &unk_270DBE8C8;
    LODWORD(v59) = v20;
    uint64_t v60 = &v58;
    llvm::formatv_object_base::format((llvm::formatv_object_base *)&v54, v16);
  }
  uint64_t v21 = v65;
  if ((unint64_t)(v64 - v65) > 0xB)
  {
    *((_DWORD *)v65 + 2) = 544437093;
    void *v21 = *(void *)" at address ";
    v65 += 12;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v61, " at address ", 0xCuLL);
  }
  uint64_t v22 = (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(*(void *)a3 + 16);
  unint64_t v54 = "{0:x}";
  uint64_t v55 = 5;
  unint64_t v56 = &v60;
  uint64_t v57 = 1;
  uint64_t v58 = &unk_270DBE460;
  uint64_t v59 = v22;
  uint64_t v60 = &v58;
  llvm::formatv_object_base::format((llvm::formatv_object_base *)&v54, (llvm::raw_ostream *)&v61);
  uint64_t v23 = v65;
  if ((unint64_t)(v64 - v65) > 0x13)
  {
    *((_DWORD *)v65 + 4) = 543584032;
    _OWORD *v23 = *(_OWORD *)" is out of range of ";
    v65 += 20;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v61, " is out of range of ", 0x14uLL);
  }
  char v24 = (char *)(*(uint64_t (**)(void))(a1 + 176))(*(unsigned __int8 *)(a3 + 24));
  uint64_t v25 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v61, v24);
  uint64_t v26 = v25;
  uint64_t v27 = *((void *)v25 + 4);
  if ((unint64_t)(*((void *)v25 + 3) - v27) > 9)
  {
    *(_WORD *)(v27 + 8) = 8308;
    *(void *)uint64_t v27 = *(void *)" fixup at ";
    *((void *)v25 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v25, " fixup at ", 0xAuLL);
  }
  uint64_t v28 = *a2 + *(unsigned int *)(a3 + 8);
  unint64_t v47 = "{0:x}";
  uint64_t v48 = 5;
  unint64_t v49 = &v53;
  uint64_t v50 = 1;
  uint64_t v51 = &unk_270DBE460;
  uint64_t v52 = v28;
  uint64_t v53 = &v51;
  llvm::formatv_object_base::format((llvm::formatv_object_base *)&v47, v26);
  uint64_t v29 = (_WORD *)*((void *)v26 + 4);
  if (*((void *)v26 + 3) - (void)v29 > 1uLL)
  {
    _WORD *v29 = 10272;
    *((void *)v26 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v26, " (", 2uLL);
  }
  BOOL v30 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v6 + 56);
  uint64_t v32 = *(void *)(v6 + 56) + 8 * *(unsigned int *)(v6 + 72);
  if ((void *)v32 == v30) {
    goto LABEL_59;
  }
  uint64_t v33 = 0;
  do
  {
    uint64_t v34 = *v30;
    if (*(uint64_t **)(*v30 + 16) == a2)
    {
      if (*(void *)(v34 + 8))
      {
        unint64_t v35 = *(void *)(v34 + 24);
        if ((v35 & 0x1FFFFFFFFFFFFFFLL) == 0)
        {
          if (!v33
            || ((unint64_t v36 = *(void *)(v33 + 24), v38 = ((v35 >> 58) & 3) >= ((v36 >> 58) & 3), v37 = (v35 >> 57) & 1, v38)
              ? (BOOL v38 = v37 >= ((v36 & 0x200000000000000) != 0))
              : (BOOL v38 = 0),
                !v38))
          {
            uint64_t v33 = *v30;
          }
        }
      }
    }
    while (++v30 != v31)
    {
      if ((*v30 | 0x1000) != 0xFFFFFFFFFFFFF000) {
        goto LABEL_46;
      }
    }
    BOOL v30 = v31;
LABEL_46:
    ;
  }
  while (v30 != (void *)v32);
  if (!v33)
  {
LABEL_59:
    uint64_t v43 = v65;
    if ((unint64_t)(v64 - v65) <= 0x13)
    {
      unint64_t v41 = "<anonymous block> @ ";
      uint64_t v39 = (llvm::raw_ostream *)&v61;
      size_t v42 = 20;
      goto LABEL_61;
    }
    *((_DWORD *)v65 + 4) = 541073470;
    _OWORD *v43 = *(_OWORD *)"<anonymous block> @ ";
    v65 += 20;
  }
  else
  {
    uint64_t v39 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v61, *(const void **)v33, *(void *)(v33 + 8));
    uint64_t v40 = (_WORD *)*((void *)v39 + 4);
    if (*((void *)v39 + 3) - (void)v40 <= 1uLL)
    {
      unint64_t v41 = ", ";
      size_t v42 = 2;
LABEL_61:
      llvm::raw_ostream::write(v39, v41, v42);
      goto LABEL_64;
    }
    _WORD *v40 = 8236;
    *((void *)v39 + 4) += 2;
  }
LABEL_64:
  uint64_t v44 = *a2;
  unint64_t v54 = "{0:x}";
  uint64_t v55 = 5;
  unint64_t v56 = &v60;
  uint64_t v57 = 1;
  uint64_t v58 = &unk_270DBE460;
  uint64_t v59 = v44;
  uint64_t v60 = &v58;
  llvm::formatv_object_base::format((llvm::formatv_object_base *)&v54, (llvm::raw_ostream *)&v61);
  uint64_t v45 = v65;
  if ((unint64_t)(v64 - v65) > 2)
  {
    long long v65[2] = 32;
    _WORD *v45 = 11040;
    v65 += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v61, " + ", 3uLL);
  }
  int v46 = *(_DWORD *)(a3 + 8);
  unint64_t v47 = "{0:x}";
  uint64_t v48 = 5;
  unint64_t v49 = &v53;
  uint64_t v50 = 1;
  uint64_t v51 = &unk_270DBE8C8;
  LODWORD(v52) = v46;
  uint64_t v53 = &v51;
  llvm::formatv_object_base::format((llvm::formatv_object_base *)&v47, (llvm::raw_ostream *)&v61);
  if (v64 == v65) {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v61, ")", 1uLL);
  }
  else {
    *v65++ = 41;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v61);
  llvm::make_error<llvm::jitlink::JITLinkError,std::string>();
}

void llvm::make_error<llvm::jitlink::JITLinkError,std::string>()
{
}

void llvm::jitlink::makeAlignmentError(unint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v7 = (char *)v43 + 1;
    do
    {
      *--uint64_t v7 = llvm::hexdigit(unsigned int,BOOL)::LUT[a1 & 0xF];
      BOOL v8 = a1 > 0xF;
      a1 >>= 4;
    }
    while (v8);
  }
  else
  {
    uint64_t v7 = (char *)v43;
    LOBYTE(v43[0]) = 48;
  }
  std::string::__init_with_size[abi:nn180100]<char *,char *>(&v23, v7, (char *)v43 + 1, (char *)v43 + 1 - v7);
  uint64_t v9 = std::string::insert(&v23, 0, "0x");
  std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v24, " improper alignment for relocation ");
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v25 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string::size_type v26 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  LOBYTE(v12) = *(unsigned char *)(a4 + 24);
  v42[0] = "{0:d}";
  v42[1] = 5;
  v43[0] = &v46;
  v43[1] = 1;
  uint64_t v44 = &unk_270DBE9A0;
  char v45 = v12;
  int v46 = &v44;
  v27[0] = v25;
  void v27[2] = v42;
  __int16 v28 = 1540;
  v29[0] = v27;
  long long v29[2] = ": 0x";
  __int16 v30 = 770;
  if (a2)
  {
    uint64_t v13 = v48;
    do
    {
      *--uint64_t v13 = llvm::hexdigit(unsigned int,BOOL)::LUT[a2 & 0xF];
      BOOL v8 = a2 > 0xF;
      a2 >>= 4;
    }
    while (v8);
  }
  else
  {
    uint64_t v13 = &v47;
    char v47 = 48;
  }
  uint64_t v14 = __p;
  std::string::__init_with_size[abi:nn180100]<char *,char *>(__p, v13, v48, v48 - v13);
  char v15 = v30;
  if (v30 == 1)
  {
    unint64_t v31 = __p;
    long long v33 = v22;
    __int16 v34 = 260;
    int v35 = v20;
    __int16 v36 = v21;
    char v16 = 4;
    uint64_t v17 = v32;
  }
  else
  {
    if (!(_BYTE)v30)
    {
      __int16 v34 = 256;
      __int16 v38 = 256;
      __int16 v41 = 256;
      goto LABEL_19;
    }
    uint64_t v18 = (void **)v29[0];
    char v16 = 2;
    if (HIBYTE(v30) != 1)
    {
      char v15 = 2;
      uint64_t v18 = (void **)v29;
    }
    unint64_t v31 = v18;
    uint64_t v32 = v29[1];
    *(void *)&long long v33 = __p;
    LOBYTE(v34) = v15;
    uint64_t v17 = 4;
    HIBYTE(v34) = 4;
    uint64_t v14 = (void **)&v31;
  }
  v37[0] = v14;
  v37[1] = v17;
  uint64_t v37[2] = " is not aligned to ";
  LOBYTE(v38) = v16;
  HIBYTE(v38) = 3;
  uint64_t v39 = v37;
  uint64_t v40 = a3;
  __int16 v41 = 2306;
LABEL_19:
  operator new();
}

uint64_t *llvm::jitlink::createLinkGraphFromObject@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = llvm::identify_magic(*(unsigned __int8 **)a1, *(void *)(a1 + 8));
  if (v4 != 4)
  {
    if (v4 != 24)
    {
      if (v4 == 9)
      {
        long long v5 = *(_OWORD *)(a1 + 16);
        v11[0] = *(_OWORD *)a1;
        v11[1] = v5;
        llvm::jitlink::createLinkGraphFromMachOObject((int **)v11);
      }
      llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
    }
    long long v8 = *(_OWORD *)(a1 + 16);
    v9[0] = *(_OWORD *)a1;
    v9[1] = v8;
    llvm::jitlink::createLinkGraphFromCOFFObject((uint64_t)v9);
  }
  long long v6 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v6;
  return llvm::jitlink::createLinkGraphFromELFObject((uint64_t)v10, a2);
}

void llvm::jitlink::absoluteSymbolsLinkGraph(uint64_t a1)
{
  void v7[2] = *MEMORY[0x263EF8340];
  unsigned int v1 = *(_DWORD *)(a1 + 24);
  if (v1 <= 0x26 && (((1 << v1) & 0x2008000002) != 0 || ((1 << v1) & 0x4010000008) != 0))
  {
    std::to_string(&v5, atomic_fetch_add_explicit(&llvm::jitlink::absoluteSymbolsLinkGraph(llvm::Triple const&,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>)::Counter, 1uLL, memory_order_relaxed));
    uint64_t v2 = std::string::insert(&v5, 0, "<Absolute Symbols ");
    std::string::size_type v3 = v2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v6.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    v6.__r_.__value_.__r.__words[2] = v3;
    v2->__r_.__value_.__l.__size_ = 0;
    v2->__r_.__value_.__r.__words[2] = 0;
    v2->__r_.__value_.__r.__words[0] = 0;
    int v4 = std::string::append(&v6, ">");
    v7[0] = v4->__r_.__value_.__l.__size_;
    *(void *)((char *)v7 + 7) = *(std::string::size_type *)((char *)&v4->__r_.__value_.__r.__words[1] + 7);
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    operator new();
  }
  llvm::report_fatal_error((llvm *)"unhandled target architecture", (const llvm::Twine *)1);
}

llvm::jitlink::LinkGraph *llvm::jitlink::link(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)*a1 + 41);
  switch(v3)
  {
    case 1:
      *a1 = 0;
      std::string::size_type v10 = v2;
      uint64_t v6 = *a2;
      *a2 = 0;
      uint64_t v9 = v6;
      llvm::jitlink::link_COFF(&v10, &v9);
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      BOOL result = v10;
      if (v10) {
        goto LABEL_11;
      }
      break;
    case 3:
      *a1 = 0;
      std::string::size_type v12 = v2;
      uint64_t v7 = *a2;
      *a2 = 0;
      uint64_t v11 = v7;
      llvm::jitlink::link_ELF(&v12, &v11);
      uint64_t v8 = v11;
      uint64_t v11 = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      BOOL result = v12;
      std::string::size_type v12 = 0;
      if (result)
      {
        llvm::jitlink::LinkGraph::~LinkGraph(result);
        return (llvm::jitlink::LinkGraph *)MEMORY[0x263E500B0]();
      }
      break;
    case 5:
      *a1 = 0;
      uint64_t v14 = v2;
      uint64_t v4 = *a2;
      *a2 = 0;
      uint64_t v13 = v4;
      llvm::jitlink::link_MachO(&v14, &v13);
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      BOOL result = v14;
      if (!v14) {
        return result;
      }
LABEL_11:
      llvm::jitlink::LinkGraph::~LinkGraph(result);
      JUMPOUT(0x263E500B0);
    default:
      operator new();
  }
  return result;
}

void llvm::jitlink::JITLinkError::~JITLinkError(void **this)
{
  *this = &unk_270DBE9D0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_270DBE9D0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x263E500B0);
}

void *llvm::ErrorInfo<llvm::jitlink::JITLinkError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::jitlink::JITLinkError::ID;
}

BOOL llvm::ErrorInfo<llvm::jitlink::JITLinkError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::jitlink::JITLinkError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void anonymous namespace'::JITLinkerErrorCategory::~JITLinkerErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x263E500B0);
}

const char *anonymous namespace'::JITLinkerErrorCategory::name(_anonymous_namespace_::JITLinkerErrorCategory *this)
{
  return "runtimedyld";
}

void *anonymous namespace'::JITLinkerErrorCategory::message@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "Generic JITLink error");
}

void llvm::detail::provider_format_adapter<char const*>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<char const*>::format(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, unint64_t *a4)
{
  return llvm::format_provider<char const*,void>::format((const char **)(a1 + 8), a2, a3, a4);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    std::string::size_type v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v42 = *(a2 - 1);
                uint64_t v43 = *v10;
                if ((*(void *)(v42 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v42 + 16) > (*(void *)(*v10 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                              + **(void **)(*v10 + 16))
                {
                  *std::string::size_type v10 = v42;
                  *(a2 - 1) = v43;
                }
                break;
              case 3uLL:
                BOOL result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(v10, v10 + 1, a2 - 1);
                break;
              case 4uLL:
                BOOL result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5uLL:
                uint64_t v44 = v10 + 1;
                char v45 = v10 + 2;
                int v46 = v10 + 3;
                BOOL result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v47 = *(a2 - 1);
                uint64_t v48 = v10[3];
                if ((*(void *)(v47 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v47 + 16) > (*(void *)(v48 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                              + **(void **)(v48 + 16))
                {
                  *int v46 = v47;
                  *(a2 - 1) = v48;
                  uint64_t v49 = *v46;
                  uint64_t v50 = *v45;
                  if ((*(void *)(*v46 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*v46 + 16) > (*(void *)(*v45 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*v45 + 16))
                  {
                    uint64_t *v45 = v49;
                    *int v46 = v50;
                    uint64_t v51 = *v44;
                    if ((*(void *)(v49 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v49 + 16) > (*(void *)(*v44 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*v44 + 16))
                    {
                      v10[1] = v49;
                      _OWORD v10[2] = v51;
                      uint64_t v52 = *v10;
                      if ((*(void *)(v49 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v49 + 16) > (*(void *)(*v10 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*v10 + 16))
                      {
                        *std::string::size_type v10 = v49;
                        v10[1] = v52;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v53 = v10 + 1;
            BOOL v55 = v10 == a2 || v53 == a2;
            if (a4)
            {
              if (!v55)
              {
                uint64_t v56 = 8;
                uint64_t v57 = v10;
                do
                {
                  uint64_t v59 = *v57;
                  uint64_t v58 = v57[1];
                  uint64_t v57 = v53;
                  if ((*(void *)(v58 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v58 + 16) > (*(void *)(v59 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                                + **(void **)(v59 + 16))
                  {
                    uint64_t v60 = v56;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v60) = v59;
                      uint64_t v61 = v60 - 8;
                      if (v60 == 8)
                      {
                        int v62 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v59 = *(uint64_t *)((char *)v10 + v60 - 16);
                      v60 -= 8;
                    }
                    while ((*(void *)(v58 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v58 + 16) > (*(void *)(v59 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v59 + 16));
                    int v62 = (uint64_t *)((char *)v10 + v61);
LABEL_85:
                    *int v62 = v58;
                  }
                  uint64_t v53 = v57 + 1;
                  v56 += 8;
                }
                while (v57 + 1 != a2);
              }
            }
            else if (!v55)
            {
              do
              {
                uint64_t v91 = *v9;
                uint64_t v90 = v9[1];
                uint64_t v9 = v53;
                if ((*(void *)(v90 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v90 + 16) > (*(void *)(v91 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                              + **(void **)(v91 + 16))
                {
                  uint64_t v92 = v53;
                  do
                  {
                    *uint64_t v92 = v91;
                    uint64_t v91 = *(v92 - 2);
                    --v92;
                  }
                  while ((*(void *)(v90 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v90 + 16) > (*(void *)(v91 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v91 + 16));
                  *uint64_t v92 = v90;
                }
                ++v53;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v63 = (v12 - 2) >> 1;
              int64_t v64 = v63;
              do
              {
                int64_t v65 = v64;
                if (v63 >= v64)
                {
                  uint64_t v66 = (2 * v64) | 1;
                  uint64_t v67 = &v10[v66];
                  uint64_t v68 = *v67;
                  if (2 * v65 + 2 < (uint64_t)v12
                    && (*(void *)(v68 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v68 + 16) > (*(void *)(v67[1] + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                                + **(void **)(v67[1] + 16))
                  {
                    uint64_t v68 = v67[1];
                    ++v67;
                    uint64_t v66 = 2 * v65 + 2;
                  }
                  BOOL result = (unint64_t)&v10[v65];
                  uint64_t v69 = *(void *)result;
                  if ((*(void *)(v68 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v68 + 16) <= (*(void *)(*(void *)result + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                                 + **(void **)(*(void *)result + 16))
                  {
                    do
                    {
                      unint64_t v70 = v67;
                      *(void *)BOOL result = v68;
                      if (v63 < v66) {
                        break;
                      }
                      uint64_t v71 = (2 * v66) | 1;
                      uint64_t v67 = &v10[v71];
                      uint64_t v72 = 2 * v66 + 2;
                      uint64_t v68 = *v67;
                      if (v72 < (uint64_t)v12
                        && (*(void *)(v68 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v68 + 16) > (*(void *)(v67[1] + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v67[1] + 16))
                      {
                        uint64_t v68 = v67[1];
                        ++v67;
                        uint64_t v71 = v72;
                      }
                      BOOL result = (unint64_t)v70;
                      uint64_t v66 = v71;
                    }
                    while ((*(void *)(v68 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v68 + 16) <= (*(void *)(v69 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v69 + 16));
                    *unint64_t v70 = v69;
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              uint64_t v73 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v74 = 0;
                uint64_t v75 = *v10;
                uint64_t v76 = v10;
                do
                {
                  uint64_t v77 = &v76[v74];
                  uint64_t v80 = v77[1];
                  uint64_t v78 = v77 + 1;
                  uint64_t v79 = v80;
                  uint64_t v81 = (2 * v74) | 1;
                  uint64_t v82 = 2 * v74 + 2;
                  if (v82 < v73)
                  {
                    BOOL result = (*(void *)(v79 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(v79 + 16);
                    if (result > (*(void *)(v78[1] + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v78[1] + 16))
                    {
                      uint64_t v79 = v78[1];
                      ++v78;
                      uint64_t v81 = v82;
                    }
                  }
                  *uint64_t v76 = v79;
                  uint64_t v76 = v78;
                  uint64_t v74 = v81;
                }
                while (v81 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
                if (v78 == --a2)
                {
                  uint64_t *v78 = v75;
                }
                else
                {
                  uint64_t *v78 = *a2;
                  *a2 = v75;
                  uint64_t v83 = (char *)v78 - (char *)v10 + 8;
                  if (v83 >= 9)
                  {
                    unint64_t v84 = (((unint64_t)v83 >> 3) - 2) >> 1;
                    uint64_t v85 = &v10[v84];
                    uint64_t v86 = *v85;
                    uint64_t v87 = *v78;
                    if ((*(void *)(*v85 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*v85 + 16) > (*(void *)(*v78 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*v78 + 16))
                    {
                      do
                      {
                        uint64_t v88 = v85;
                        uint64_t *v78 = v86;
                        if (!v84) {
                          break;
                        }
                        unint64_t v84 = (v84 - 1) >> 1;
                        uint64_t v85 = &v10[v84];
                        uint64_t v86 = *v85;
                        uint64_t v78 = v88;
                      }
                      while ((*(void *)(*v85 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*v85 + 16) > (*(void *)(v87 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v87 + 16));
                      uint64_t *v88 = v87;
                    }
                  }
                }
              }
              while (v73-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(v9, &v9[v12 >> 1], a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(v9 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(v9 + 2, &v9[v13 + 1], a2 - 3);
            BOOL result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *uint64_t v9 = *v14;
            *uint64_t v14 = v15;
          }
          else
          {
            BOOL result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          unint64_t v17 = (*(void *)(v16 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(v16 + 16);
          if ((*(void *)(*(v9 - 1) + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*(v9 - 1) + 16) > v17) {
            goto LABEL_13;
          }
          if (v17 <= (*(void *)(*(a2 - 1) + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*(a2 - 1) + 16))
          {
            long long v33 = v9 + 1;
            do
            {
              std::string::size_type v10 = v33;
              if (v33 >= a2) {
                break;
              }
              ++v33;
            }
            while (v17 <= (*(void *)(*v10 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*v10 + 16));
          }
          else
          {
            std::string::size_type v10 = v9;
            do
            {
              uint64_t v32 = v10[1];
              ++v10;
            }
            while (v17 <= (*(void *)(v32 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v32 + 16));
          }
          __int16 v34 = a2;
          if (v10 < a2)
          {
            __int16 v34 = a2;
            do
              uint64_t v35 = *--v34;
            while (v17 > (*(void *)(v35 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v35 + 16));
          }
          if (v10 < v34)
          {
            uint64_t v36 = *v10;
            uint64_t v37 = *v34;
            do
            {
              *std::string::size_type v10 = v37;
              uint64_t *v34 = v36;
              unint64_t v38 = (*(void *)(v16 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(v16 + 16);
              do
              {
                uint64_t v39 = v10[1];
                ++v10;
                uint64_t v36 = v39;
              }
              while (v38 <= (*(void *)(v39 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v39 + 16));
              do
              {
                uint64_t v40 = *--v34;
                uint64_t v37 = v40;
              }
              while (v38 > (*(void *)(v40 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v40 + 16));
            }
            while (v10 < v34);
          }
          __int16 v41 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *uint64_t v9 = *v41;
          }
          a4 = 0;
          *__int16 v41 = v16;
        }
        unint64_t v17 = (*(void *)(v16 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(v16 + 16);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while ((*(void *)(v19 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v19 + 16) > v17);
        int v20 = &v9[v18];
        __int16 v21 = a2;
        if (v18 == 1)
        {
          __int16 v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while ((*(void *)(v23 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v23 + 16) <= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while ((*(void *)(v22 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v22 + 16) <= v17);
        }
        if (v20 >= v21)
        {
          __int16 v30 = v20 - 1;
        }
        else
        {
          uint64_t v24 = *v21;
          uint64_t v25 = &v9[v18];
          std::string::size_type v26 = v21;
          do
          {
            uint64_t *v25 = v24;
            uint64_t *v26 = v19;
            unint64_t v27 = (*(void *)(v16 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(v16 + 16);
            do
            {
              uint64_t v28 = v25[1];
              ++v25;
              uint64_t v19 = v28;
            }
            while ((*(void *)(v28 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v28 + 16) > v27);
            do
            {
              uint64_t v29 = *--v26;
              uint64_t v24 = v29;
            }
            while ((*(void *)(v29 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v29 + 16) <= v27);
          }
          while (v25 < v26);
          __int16 v30 = v25 - 1;
        }
        if (v30 != v9) {
          *uint64_t v9 = *v30;
        }
        *__int16 v30 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        BOOL result = std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **,false>(v9, v30, a3, a4 & 1);
        a4 = 0;
        std::string::size_type v10 = v30 + 1;
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(v9, v30);
      std::string::size_type v10 = v30 + 1;
      BOOL result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(v30 + 1, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_34;
      }
    }
    a2 = v30;
    if (!v31) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unint64_t v5 = (*(void *)(*a2 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(*a2 + 16);
  uint64_t v6 = *a3;
  unint64_t v7 = (*(void *)(*a3 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(*a3 + 16);
  if (v5 <= (*(void *)(*result + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*result + 16))
  {
    if (v7 > v5)
    {
      *a2 = v6;
      *a3 = v3;
      uint64_t v8 = *result;
      if ((*(void *)(*a2 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*a2 + 16) > (*(void *)(*result + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                    + **(void **)(*result + 16))
      {
        *BOOL result = *a2;
        *a2 = v8;
      }
    }
  }
  else
  {
    if (v7 <= v5)
    {
      *BOOL result = v3;
      *a2 = v4;
      if ((*(void *)(*a3 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*a3 + 16) <= (*(void *)(v4 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                     + **(void **)(v4 + 16))
        return result;
      *a2 = *a3;
    }
    else
    {
      *BOOL result = v6;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if ((*(void *)(v6 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v6 + 16) > (*(void *)(*a1 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                  + **(void **)(*a1 + 16))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      unint64_t v17 = a1 + 1;
      uint64_t v18 = a1 + 2;
      uint64_t v19 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v20 = *(a2 - 1);
      uint64_t v21 = a1[3];
      if ((*(void *)(v20 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v20 + 16) > (*(void *)(v21 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                    + **(void **)(v21 + 16))
      {
        *uint64_t v19 = v20;
        *(a2 - 1) = v21;
        uint64_t v22 = *v19;
        uint64_t v23 = *v18;
        if ((*(void *)(*v19 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*v19 + 16) > (*(void *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                        + **(void **)(*v18 + 16))
        {
          *uint64_t v18 = v22;
          *uint64_t v19 = v23;
          uint64_t v24 = *v17;
          if ((*(void *)(v22 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v22 + 16) > (*(void *)(*v17 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                        + **(void **)(*v17 + 16))
          {
            a1[1] = v22;
            a1[2] = v24;
            uint64_t v25 = *a1;
            if ((*(void *)(v22 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v22 + 16) > (*(void *)(*a1 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                          + **(void **)(*a1 + 16))
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    if ((*(void *)(*v9 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*v9 + 16) > (*(void *)(*v8 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                  + **(void **)(*v8 + 16))
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if ((*(void *)(v12 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(v12 + 16) <= (*(void *)(v13 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                       + **(void **)(v13 + 16))
        {
          uint64_t v16 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      *uint64_t v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(a1, a2, a3);
  uint64_t v9 = *a3;
  if ((*(void *)(*a4 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*a4 + 16) > (*(void *)(*a3 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                + **(void **)(*a3 + 16))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if ((*(void *)(*a3 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*a3 + 16) > (*(void *)(*a2 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                  + **(void **)(*a2 + 16))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if ((*(void *)(*a2 + 24) & 0x1FFFFFFFFFFFFFFuLL) + **(void **)(*a2 + 16) > (*(void *)(*a1 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                                                                                    + **(void **)(*a1 + 16))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *,false>(unint64_t a1, _OWORD *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = (uint64_t)a2 - v11;
          unint64_t v13 = (uint64_t)((uint64_t)a2 - v11) >> 5;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*((_DWORD *)a2 - 6) < *(_DWORD *)(v11 + 8))
                {
                  *(_OWORD *)uint64_t v111 = *(_OWORD *)v11;
                  *(_OWORD *)&v111[16] = *(_OWORD *)(v11 + 16);
                  long long v48 = *(a2 - 2);
                  *(_OWORD *)(v11 + 9) = *(_OWORD *)((char *)a2 - 23);
                  *(_OWORD *)unint64_t v11 = v48;
                  *(_OWORD *)((char *)a2 - 23) = *(_OWORD *)&v111[9];
                  *(a2 - 2) = *(_OWORD *)v111;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>((long long *)v11, (long long *)(v11 + 32), a2 - 2, a5);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>(v11, v11 + 32, v11 + 64, (uint64_t)(a2 - 2), a5);
                break;
              case 5uLL:
                uint64_t v49 = (_OWORD *)(v11 + 32);
                uint64_t v50 = (_OWORD *)(v11 + 64);
                uint64_t v51 = (_OWORD *)(v11 + 96);
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>(v11, v11 + 32, v11 + 64, v11 + 96, a5);
                if (*((_DWORD *)a2 - 6) < *(_DWORD *)(v11 + 104))
                {
                  *(_OWORD *)unint64_t v112 = *v51;
                  long long v52 = *v51;
                  *(_OWORD *)&v112[16] = *(_OWORD *)(v11 + 112);
                  long long v53 = *(_OWORD *)((char *)a2 - 23);
                  _OWORD *v51 = *(a2 - 2);
                  *(_OWORD *)(v11 + 105) = v53;
                  *(_OWORD *)((char *)a2 - 23) = *(_OWORD *)&v112[9];
                  *(a2 - 2) = v52;
                  if (*(_DWORD *)(v11 + 104) < *(_DWORD *)(v11 + 72))
                  {
                    *(_OWORD *)BOOL v113 = *v50;
                    long long v54 = *v50;
                    *(_OWORD *)&v113[16] = *(_OWORD *)(v11 + 80);
                    _OWORD *v50 = *v51;
                    *(_OWORD *)(v11 + 73) = *(_OWORD *)(v11 + 105);
                    _OWORD *v51 = v54;
                    *(_OWORD *)(v11 + 105) = *(_OWORD *)&v113[9];
                    if (*(_DWORD *)(v11 + 72) < *(_DWORD *)(v11 + 40))
                    {
                      *(_OWORD *)uint64_t v114 = *v49;
                      long long v55 = *v49;
                      *(_OWORD *)&v114[16] = *(_OWORD *)(v11 + 48);
                      *uint64_t v49 = *v50;
                      *(_OWORD *)(v11 + 41) = *(_OWORD *)(v11 + 73);
                      _OWORD *v50 = v55;
                      *(_OWORD *)(v11 + 73) = *(_OWORD *)&v114[9];
                      if (*(_DWORD *)(v11 + 40) < *(_DWORD *)(v11 + 8))
                      {
                        *(_OWORD *)uint64_t v115 = *(_OWORD *)v11;
                        *(_OWORD *)&v115[16] = *(_OWORD *)(v11 + 16);
                        *(_OWORD *)unint64_t v11 = *v49;
                        *(_OWORD *)(v11 + 9) = *(_OWORD *)(v11 + 41);
                        *uint64_t v49 = *(_OWORD *)v115;
                        *(_OWORD *)(v11 + 41) = *(_OWORD *)&v115[9];
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 767)
          {
            uint64_t v56 = (void *)(v11 + 32);
            BOOL v58 = (_OWORD *)v11 == a2 || v56 == (void *)a2;
            if (a4)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                uint64_t v60 = (void *)v11;
                do
                {
                  uint64_t v61 = v56;
                  unsigned int v62 = *((_DWORD *)v60 + 10);
                  if (v62 < *((_DWORD *)v60 + 2))
                  {
                    uint64_t v63 = *v61;
                    long long v116 = *(_OWORD *)((char *)v60 + 44);
                    uint64_t v64 = v59;
                    while (1)
                    {
                      uint64_t v65 = v11 + v64;
                      *(_OWORD *)(v65 + 32) = *(_OWORD *)(v11 + v64);
                      *(_OWORD *)(v65 + 41) = *(_OWORD *)(v11 + v64 + 9);
                      if (!v64) {
                        break;
                      }
                      v64 -= 32;
                      if (v62 >= *(_DWORD *)(v65 - 24))
                      {
                        uint64_t v66 = v11 + v64 + 32;
                        goto LABEL_83;
                      }
                    }
                    uint64_t v66 = v11;
LABEL_83:
                    *(void *)uint64_t v66 = v63;
                    *(_DWORD *)(v66 + 8) = v62;
                    *(void *)(v66 + 12) = v116;
                    *(void *)(v66 + 17) = *(void *)((char *)&v116 + 5);
                  }
                  uint64_t v56 = v61 + 4;
                  v59 += 32;
                  uint64_t v60 = v61;
                }
                while (v61 + 4 != (void *)a2);
              }
            }
            else if (!v58)
            {
              do
              {
                int v100 = v56;
                unsigned int v101 = *(_DWORD *)(a1 + 40);
                if (v101 < *(_DWORD *)(a1 + 8))
                {
                  uint64_t v102 = *v56;
                  long long v119 = *(_OWORD *)(a1 + 44);
                  int v103 = v100;
                  do
                  {
                    *(_OWORD *)int v103 = *((_OWORD *)v103 - 2);
                    *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)((char *)v103 - 23);
                    unsigned int v104 = *((_DWORD *)v103 - 14);
                    v103 -= 4;
                  }
                  while (v101 < v104);
                  *int v103 = v102;
                  *((_DWORD *)v103 + 2) = v101;
                  *(void *)((char *)v103 + 17) = *(void *)((char *)&v119 + 5);
                  *(void *)((char *)v103 + 12) = v119;
                }
                uint64_t v56 = v100 + 4;
                a1 = (unint64_t)v100;
              }
              while (v100 + 4 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if ((_OWORD *)v11 != a2)
            {
              int64_t v67 = (v13 - 2) >> 1;
              int64_t v68 = v67;
              do
              {
                int64_t v69 = v68;
                if (v67 >= v68)
                {
                  uint64_t v70 = (2 * v68) | 1;
                  unint64_t v71 = v11 + 32 * v70;
                  if (2 * v69 + 2 < (uint64_t)v13)
                  {
                    unsigned int v72 = *(_DWORD *)(v71 + 8);
                    unsigned int v73 = *(_DWORD *)(v71 + 40);
                    v71 += 32 * (v72 < v73);
                    if (v72 < v73) {
                      uint64_t v70 = 2 * v69 + 2;
                    }
                  }
                  unsigned int v74 = *(_DWORD *)(v11 + 32 * v69 + 8);
                  if (*(_DWORD *)(v71 + 8) >= v74)
                  {
                    unint64_t v75 = v11 + 32 * v69;
                    uint64_t v76 = *(void *)v75;
                    long long v117 = *(_OWORD *)(v75 + 12);
                    do
                    {
                      uint64_t v77 = (_OWORD *)v75;
                      unint64_t v75 = v71;
                      long long v78 = *(_OWORD *)v71;
                      *(_OWORD *)((char *)v77 + 9) = *(_OWORD *)(v71 + 9);
                      _OWORD *v77 = v78;
                      if (v67 < v70) {
                        break;
                      }
                      uint64_t v79 = (2 * v70) | 1;
                      unint64_t v71 = v11 + 32 * v79;
                      uint64_t v80 = 2 * v70 + 2;
                      if (v80 < (uint64_t)v13)
                      {
                        unsigned int v81 = *(_DWORD *)(v71 + 8);
                        unsigned int v82 = *(_DWORD *)(v71 + 40);
                        v71 += 32 * (v81 < v82);
                        if (v81 < v82) {
                          uint64_t v79 = v80;
                        }
                      }
                      uint64_t v70 = v79;
                    }
                    while (*(_DWORD *)(v71 + 8) >= v74);
                    *(void *)unint64_t v75 = v76;
                    *(_DWORD *)(v75 + 8) = v74;
                    *(void *)(v75 + 12) = v117;
                    *(void *)(v75 + 17) = *(void *)((char *)&v117 + 5);
                  }
                }
                int64_t v68 = v69 - 1;
              }
              while (v69);
              uint64_t v83 = (unint64_t)v12 >> 5;
              do
              {
                uint64_t v84 = 0;
                *(_OWORD *)__int16 v118 = *(_OWORD *)v11;
                *(_OWORD *)&v118[16] = *(_OWORD *)(v11 + 16);
                uint64_t v85 = (_OWORD *)v11;
                do
                {
                  uint64_t v86 = &v85[2 * v84 + 2];
                  uint64_t v87 = (2 * v84) | 1;
                  uint64_t v88 = 2 * v84 + 2;
                  if (v88 < v83)
                  {
                    unsigned int v89 = *((_DWORD *)v86 + 2);
                    unsigned int v90 = *((_DWORD *)v86 + 10);
                    v86 += 2 * (v89 < v90);
                    if (v89 < v90) {
                      uint64_t v87 = v88;
                    }
                  }
                  long long v91 = *v86;
                  *(_OWORD *)((char *)v85 + 9) = *(_OWORD *)((char *)v86 + 9);
                  *uint64_t v85 = v91;
                  uint64_t v85 = v86;
                  uint64_t v84 = v87;
                }
                while (v87 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
                a2 -= 2;
                if (v86 == a2)
                {
                  *(_OWORD *)((char *)v86 + 9) = *(_OWORD *)&v118[9];
                  _OWORD *v86 = *(_OWORD *)v118;
                }
                else
                {
                  long long v92 = *a2;
                  *(_OWORD *)((char *)v86 + 9) = *(_OWORD *)((char *)a2 + 9);
                  _OWORD *v86 = v92;
                  *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v118[9];
                  *a2 = *(_OWORD *)v118;
                  uint64_t v93 = (uint64_t)v86 - v11 + 32;
                  if (v93 >= 33)
                  {
                    unint64_t v94 = (((unint64_t)v93 >> 5) - 2) >> 1;
                    unsigned int v95 = *((_DWORD *)v86 + 2);
                    if (*(_DWORD *)(v11 + 32 * v94 + 8) < v95)
                    {
                      uint64_t v96 = *(void *)v86;
                      long long v107 = *(_OWORD *)((char *)v86 + 12);
                      do
                      {
                        unsigned int v97 = v86;
                        uint64_t v86 = (_OWORD *)(v11 + 32 * v94);
                        long long v98 = *v86;
                        *(_OWORD *)((char *)v97 + 9) = *(_OWORD *)((char *)v86 + 9);
                        _OWORD *v97 = v98;
                        if (!v94) {
                          break;
                        }
                        unint64_t v94 = (v94 - 1) >> 1;
                      }
                      while (*(_DWORD *)(v11 + 32 * v94 + 8) < v95);
                      *(void *)uint64_t v86 = v96;
                      *((_DWORD *)v86 + 2) = v95;
                      *(void *)((char *)v86 + 17) = *(void *)((char *)&v107 + 5);
                      *(void *)((char *)v86 + 12) = v107;
                    }
                  }
                }
              }
              while (v83-- > 2);
            }
            return;
          }
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = (long long *)(v11 + 32 * (v13 >> 1));
          if ((unint64_t)v12 > 0x1000)
          {
            __n128 v16 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>((long long *)a1, (long long *)(a1 + 32 * (v13 >> 1)), a2 - 2, a5);
            __n128 v17 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>((long long *)(a1 + 32), v15 - 2, a2 - 4, v16);
            __n128 v18 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>((long long *)(a1 + 64), (long long *)(a1 + 32 + 32 * v14), a2 - 6, v17);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>(v15 - 2, v15, (long long *)(a1 + 32 + 32 * v14), v18);
            *(_OWORD *)unsigned int v108 = *(_OWORD *)a1;
            *(_OWORD *)&v108[16] = *(_OWORD *)(a1 + 16);
            long long v19 = *(long long *)((char *)v15 + 9);
            *(_OWORD *)a1 = *v15;
            *(_OWORD *)(a1 + 9) = v19;
            *(long long *)((char *)v15 + 9) = *(_OWORD *)&v108[9];
            *uint64_t v15 = *(_OWORD *)v108;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>((long long *)(a1 + 32 * (v13 >> 1)), (long long *)a1, a2 - 2, a5);
          }
          --a3;
          if (a4) {
            break;
          }
          unsigned int v20 = *(_DWORD *)(a1 + 8);
          if (*(_DWORD *)(a1 - 24) < v20) {
            goto LABEL_12;
          }
          uint64_t v37 = *(void *)a1;
          a5 = *(__n128 *)(a1 + 12);
          __n128 v106 = a5;
          if (v20 >= *((_DWORD *)a2 - 6))
          {
            unint64_t v40 = a1 + 32;
            do
            {
              unint64_t v11 = v40;
              if (v40 >= (unint64_t)a2) {
                break;
              }
              unsigned int v41 = *(_DWORD *)(v40 + 8);
              v40 += 32;
            }
            while (v20 >= v41);
          }
          else
          {
            unint64_t v38 = a1;
            do
            {
              unint64_t v11 = v38 + 32;
              unsigned int v39 = *(_DWORD *)(v38 + 40);
              v38 += 32;
            }
            while (v20 >= v39);
          }
          uint64_t v42 = a2;
          if (v11 < (unint64_t)a2)
          {
            uint64_t v43 = a2;
            do
            {
              uint64_t v42 = v43 - 2;
              unsigned int v44 = *((_DWORD *)v43 - 6);
              v43 -= 2;
            }
            while (v20 < v44);
          }
          while (v11 < (unint64_t)v42)
          {
            *(_OWORD *)uint64_t v110 = *(_OWORD *)v11;
            *(_OWORD *)&v110[16] = *(_OWORD *)(v11 + 16);
            long long v45 = *v42;
            *(_OWORD *)(v11 + 9) = *(_OWORD *)((char *)v42 + 9);
            *(_OWORD *)unint64_t v11 = v45;
            a5 = *(__n128 *)v110;
            *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)&v110[9];
            *uint64_t v42 = *(_OWORD *)v110;
            do
            {
              unsigned int v46 = *(_DWORD *)(v11 + 40);
              v11 += 32;
            }
            while (v20 >= v46);
            do
            {
              unsigned int v47 = *((_DWORD *)v42 - 6);
              v42 -= 2;
            }
            while (v20 < v47);
          }
          BOOL v5 = v11 - 32 >= a1;
          BOOL v6 = v11 - 32 == a1;
          if (v11 - 32 != a1)
          {
            a5 = *(__n128 *)(v11 - 32);
            *(_OWORD *)(a1 + 9) = *(_OWORD *)(v11 - 23);
            *(__n128 *)a1 = a5;
          }
          a4 = 0;
          *(void *)(v11 - 32) = v37;
          *(_DWORD *)(v11 - 24) = v20;
          *(void *)(v11 - 15) = *(unint64_t *)((char *)v106.n128_u64 + 5);
          *(void *)(v11 - 20) = v106.n128_u64[0];
        }
        unsigned int v20 = *(_DWORD *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        __n128 v23 = *(__n128 *)(a1 + 12);
        __n128 v105 = v23;
        do
        {
          unsigned int v24 = *(_DWORD *)(a1 + v21 + 40);
          v21 += 32;
        }
        while (v24 < v20);
        unint64_t v25 = a1 + v21;
        std::string::size_type v26 = a2;
        if (v21 == 32)
        {
          uint64_t v29 = a2;
          while (v25 < (unint64_t)v29)
          {
            unint64_t v27 = v29 - 2;
            unsigned int v30 = *((_DWORD *)v29 - 6);
            v29 -= 2;
            if (v30 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v27 = v29;
        }
        else
        {
          do
          {
            unint64_t v27 = v26 - 2;
            unsigned int v28 = *((_DWORD *)v26 - 6);
            v26 -= 2;
          }
          while (v28 >= v20);
        }
LABEL_22:
        unint64_t v11 = v25;
        if (v25 < (unint64_t)v27)
        {
          BOOL v31 = v27;
          do
          {
            *(_OWORD *)unint64_t v109 = *(_OWORD *)v11;
            *(_OWORD *)&v109[16] = *(_OWORD *)(v11 + 16);
            long long v32 = *v31;
            *(_OWORD *)(v11 + 9) = *(_OWORD *)((char *)v31 + 9);
            *(_OWORD *)unint64_t v11 = v32;
            __n128 v23 = *(__n128 *)v109;
            *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)&v109[9];
            *BOOL v31 = *(_OWORD *)v109;
            do
            {
              unsigned int v33 = *(_DWORD *)(v11 + 40);
              v11 += 32;
            }
            while (v33 < v20);
            do
            {
              unsigned int v34 = *((_DWORD *)v31 - 6);
              v31 -= 2;
            }
            while (v34 >= v20);
          }
          while (v11 < (unint64_t)v31);
        }
        if (v11 - 32 != a1)
        {
          __n128 v23 = *(__n128 *)(v11 - 32);
          *(_OWORD *)(a1 + 9) = *(_OWORD *)(v11 - 23);
          *(__n128 *)a1 = v23;
        }
        *(void *)(v11 - 32) = v22;
        *(_DWORD *)(v11 - 24) = v20;
        *(void *)(v11 - 15) = *(unint64_t *)((char *)v105.n128_u64 + 5);
        *(void *)(v11 - 20) = v105.n128_u64[0];
        if (v25 >= (unint64_t)v27) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *,false>(a1, v11 - 32, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v35 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>(a1, v11 - 32, v23);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>(v11, (uint64_t)a2, v36))
      {
        break;
      }
      if (!v35) {
        goto LABEL_33;
      }
    }
    a2 = (_OWORD *)(v11 - 32);
    if (!v35) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>(long long *a1, long long *a2, long long *a3, __n128 result)
{
  unsigned int v4 = *((_DWORD *)a2 + 2);
  unsigned int v5 = *((_DWORD *)a3 + 2);
  if (v4 >= *((_DWORD *)a1 + 2))
  {
    if (v5 < v4)
    {
      *(_OWORD *)__n128 v16 = *a2;
      long long v8 = *a2;
      *(_OWORD *)&v16[16] = a2[1];
      long long v9 = *(long long *)((char *)a3 + 9);
      *a2 = *a3;
      *(long long *)((char *)a2 + 9) = v9;
      *a3 = v8;
      BOOL result = *(__n128 *)&v16[9];
      *(long long *)((char *)a3 + 9) = *(_OWORD *)&v16[9];
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)a1 + 2))
      {
        *(_OWORD *)__n128 v17 = *a1;
        long long v10 = *a1;
        *(_OWORD *)&v17[16] = a1[1];
        long long v11 = *(long long *)((char *)a2 + 9);
        *a1 = *a2;
        *(long long *)((char *)a1 + 9) = v11;
        *a2 = v10;
        BOOL result = *(__n128 *)&v17[9];
        *(long long *)((char *)a2 + 9) = *(_OWORD *)&v17[9];
      }
    }
  }
  else
  {
    if (v5 >= v4)
    {
      *(_OWORD *)__n128 v18 = *a1;
      long long v12 = *a1;
      *(_OWORD *)&v18[16] = a1[1];
      long long v13 = *(long long *)((char *)a2 + 9);
      *a1 = *a2;
      *(long long *)((char *)a1 + 9) = v13;
      *a2 = v12;
      BOOL result = *(__n128 *)&v18[9];
      *(long long *)((char *)a2 + 9) = *(_OWORD *)&v18[9];
      if (*((_DWORD *)a3 + 2) >= *((_DWORD *)a2 + 2)) {
        return result;
      }
      long long v6 = *a2;
      *(_OWORD *)uint64_t v15 = *a2;
      *(_OWORD *)&v15[16] = a2[1];
      long long v14 = *(long long *)((char *)a3 + 9);
      *a2 = *a3;
      *(long long *)((char *)a2 + 9) = v14;
    }
    else
    {
      long long v6 = *a1;
      *(_OWORD *)uint64_t v15 = *a1;
      *(_OWORD *)&v15[16] = a1[1];
      long long v7 = *(long long *)((char *)a3 + 9);
      *a1 = *a3;
      *(long long *)((char *)a1 + 9) = v7;
    }
    *a3 = v6;
    BOOL result = *(__n128 *)&v15[9];
    *(long long *)((char *)a3 + 9) = *(_OWORD *)&v15[9];
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 24) < *(_DWORD *)(a1 + 8))
      {
        *(_OWORD *)std::string::size_type v26 = *(_OWORD *)a1;
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)&v26[16] = *(_OWORD *)(a1 + 16);
        long long v8 = *(_OWORD *)(a2 - 23);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 9) = v8;
        *(_OWORD *)(a2 - 32) = v7;
        *(_OWORD *)(a2 - 23) = *(_OWORD *)&v26[9];
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>((long long *)a1, (long long *)(a1 + 32), (long long *)(a2 - 32), a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>(a1, a1 + 32, a1 + 64, a2 - 32, a3);
      return 1;
    case 5:
      __n128 v18 = (long long *)(a1 + 32);
      long long v19 = (long long *)(a1 + 64);
      unsigned int v20 = (long long *)(a1 + 96);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>(a1, a1 + 32, a1 + 64, a1 + 96, a3);
      if (*(_DWORD *)(a2 - 24) < *(_DWORD *)(a1 + 104))
      {
        *(_OWORD *)unsigned int v28 = *v20;
        long long v21 = *v20;
        *(_OWORD *)&v28[16] = *(_OWORD *)(a1 + 112);
        long long v22 = *(_OWORD *)(a2 - 23);
        *unsigned int v20 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 105) = v22;
        *(_OWORD *)(a2 - 32) = v21;
        *(_OWORD *)(a2 - 23) = *(_OWORD *)&v28[9];
        if (*(_DWORD *)(a1 + 104) < *(_DWORD *)(a1 + 72))
        {
          *(_OWORD *)uint64_t v29 = *v19;
          long long v23 = *v19;
          *(_OWORD *)&v29[16] = *(_OWORD *)(a1 + 80);
          *long long v19 = *v20;
          *(_OWORD *)(a1 + 73) = *(_OWORD *)(a1 + 105);
          *unsigned int v20 = v23;
          *(_OWORD *)(a1 + 105) = *(_OWORD *)&v29[9];
          if (*(_DWORD *)(a1 + 72) < *(_DWORD *)(a1 + 40))
          {
            *(_OWORD *)unsigned int v30 = *v18;
            long long v24 = *v18;
            *(_OWORD *)&v30[16] = *(_OWORD *)(a1 + 48);
            *__n128 v18 = *v19;
            *(_OWORD *)(a1 + 41) = *(_OWORD *)(a1 + 73);
            *long long v19 = v24;
            *(_OWORD *)(a1 + 73) = *(_OWORD *)&v30[9];
            if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 8))
            {
              *(_OWORD *)BOOL v31 = *(_OWORD *)a1;
              long long v25 = *(_OWORD *)a1;
              *(_OWORD *)&v31[16] = *(_OWORD *)(a1 + 16);
              *(_OWORD *)a1 = *v18;
              *(_OWORD *)(a1 + 9) = *(_OWORD *)(a1 + 41);
              *__n128 v18 = v25;
              *(_OWORD *)(a1 + 41) = *(_OWORD *)&v31[9];
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64), a3);
      uint64_t v10 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unsigned int v13 = *(_DWORD *)(v10 + 8);
    if (v13 < *(_DWORD *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      long long v27 = *(_OWORD *)(v10 + 12);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 96) = *(_OWORD *)(a1 + v15 + 64);
        *(_OWORD *)(v16 + 105) = *(_OWORD *)(a1 + v15 + 73);
        if (v15 == -64) {
          break;
        }
        v15 -= 32;
        if (v13 >= *(_DWORD *)(v16 + 40))
        {
          uint64_t v17 = a1 + v15 + 96;
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *(void *)uint64_t v17 = v14;
      *(_DWORD *)(v17 + 8) = v13;
      *(void *)(v17 + 12) = v27;
      *(void *)(v17 + 17) = *(void *)((char *)&v27 + 5);
      if (++v12 == 8) {
        return v10 + 32 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 32;
    v10 += 32;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  result.n128_u64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlockImpl(std::vector<llvm::jitlink::Block *>,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_2 &,llvm::jitlink::Edge *>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  if (*(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)a3;
    long long v10 = *(_OWORD *)a3;
    *(_OWORD *)&v16[16] = *(_OWORD *)(a3 + 16);
    long long v11 = *(_OWORD *)(a4 + 9);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 9) = v11;
    *(_OWORD *)a4 = v10;
    __n128 result = *(__n128 *)&v16[9];
    *(_OWORD *)(a4 + 9) = *(_OWORD *)&v16[9];
    if (*(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
    {
      *(_OWORD *)uint64_t v17 = *(_OWORD *)a2;
      long long v12 = *(_OWORD *)a2;
      *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 16);
      long long v13 = *(_OWORD *)(a3 + 9);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 9) = v13;
      *(_OWORD *)a3 = v12;
      __n128 result = *(__n128 *)&v17[9];
      *(_OWORD *)(a3 + 9) = *(_OWORD *)&v17[9];
      if (*(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
      {
        *(_OWORD *)__n128 v18 = *(_OWORD *)a1;
        long long v14 = *(_OWORD *)a1;
        *(_OWORD *)&v18[16] = *(_OWORD *)(a1 + 16);
        long long v15 = *(_OWORD *)(a2 + 9);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 9) = v15;
        *(_OWORD *)a2 = v14;
        __n128 result = *(__n128 *)&v18[9];
        *(_OWORD *)(a2 + 9) = *(_OWORD *)&v18[9];
      }
    }
  }
  return result;
}

llvm::raw_ostream *llvm::format_provider<long long,void>::format(unint64_t *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  int v15 = 0;
  if (!llvm::detail::HelperFunctions::consumeHexStyle((const void **)&v16, &v15))
  {
    if (v17)
    {
      int v12 = 0;
      unsigned int v13 = *v16;
      if (v13 <= 0x63)
      {
        if (v13 != 68)
        {
          if (v13 != 78) {
            goto LABEL_19;
          }
          goto LABEL_16;
        }
LABEL_17:
        int v12 = 0;
        ++v16;
        goto LABEL_18;
      }
      if (v13 == 100) {
        goto LABEL_17;
      }
      if (v13 == 110)
      {
LABEL_16:
        ++v16;
        int v12 = 1;
LABEL_18:
        --v17;
      }
    }
    else
    {
      int v12 = 0;
    }
LABEL_19:
    size_t v18 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6)) {
      size_t v14 = 0;
    }
    else {
      size_t v14 = v18;
    }
    return llvm::write_integer(a2, *a1, v14, v12);
  }
  int v7 = v15;
  size_t v18 = 0;
  int v8 = llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6);
  unint64_t v9 = v18;
  if (v8) {
    unint64_t v9 = 0;
  }
  if ((v7 & 0xFFFFFFFE) == 2) {
    unint64_t v10 = v9 + 2;
  }
  else {
    unint64_t v10 = v9;
  }
  return llvm::write_hex(a2, *a1, v7, v10, 1);
}

void llvm::detail::provider_format_adapter<unsigned char>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned char>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned char,void>::format((unsigned __int8 *)(a1 + 8), a2, a3, a4);
}

void llvm::jitlink::JITLinkerBase::~JITLinkerBase(llvm::jitlink::JITLinkerBase *this)
{
  *(void *)this = &unk_270DBEA20;
  uint64_t v2 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unsigned int v4 = (void **)((char *)this + 120);
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v4);
  unsigned int v4 = (void **)((char *)this + 96);
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v4);
  unsigned int v4 = (void **)((char *)this + 72);
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v4);
  unsigned int v4 = (void **)((char *)this + 48);
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v4);
  unsigned int v4 = (void **)((char *)this + 24);
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v4);
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)this + 2, 0);
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

void *llvm::jitlink::JITLinkerBase::linkPhase1(uint64_t a1, uint64_t *a2)
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  llvm::jitlink::JITLinkerBase::runPasses((uint64_t)&v118, a1, *(void **)(a1 + 24), *(void **)(a1 + 32));
  if ((void)v118)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v109 = v118;
    *(void *)&long long v118 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 24))(v4, &v109);
    uint64_t v5 = v109;
    if (!v109) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  __n128 v106 = a2;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  v124[0] = 0;
  v124[1] = 0;
  int v125 = 0;
  llvm::jitlink::LinkGraph::defined_symbols((llvm::jitlink::LinkGraph *)v7, &v118);
  long long v114 = v118;
  long long v115 = v119;
  long long v116 = v120;
  long long v117 = v121;
  uint64_t v8 = v122;
  uint64_t v9 = v123;
  unint64_t v10 = (uint64_t *)v121;
  if ((void)v118 != v122 || (void)v121 != v123)
  {
    do
    {
      uint64_t v11 = *v10;
      if ((*(unsigned char *)(*v10 + 31) & 0x10) != 0)
      {
        int v12 = v127;
        if (v127 >= v128)
        {
          uint64_t v14 = (v127 - v126) >> 3;
          if ((unint64_t)(v14 + 1) >> 61) {
LABEL_169:
          }
            abort();
          unint64_t v15 = (v128 - v126) >> 2;
          if (v15 <= v14 + 1) {
            unint64_t v15 = v14 + 1;
          }
          if ((unint64_t)(v128 - v126) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            uint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v128, v16);
          }
          else {
            uint64_t v17 = 0;
          }
          size_t v18 = &v17[8 * v14];
          *(void *)size_t v18 = v11;
          unsigned int v13 = v18 + 8;
          unsigned int v20 = v126;
          long long v19 = v127;
          if (v127 != v126)
          {
            do
            {
              uint64_t v21 = *((void *)v19 - 1);
              v19 -= 8;
              *((void *)v18 - 1) = v21;
              v18 -= 8;
            }
            while (v19 != v20);
            long long v19 = v126;
          }
          uint64_t v126 = v18;
          uint64_t v127 = v13;
          uint64_t v128 = &v17[8 * v16];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(void *)uint64_t v127 = v11;
          unsigned int v13 = v12 + 8;
        }
        uint64_t v127 = v13;
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)&v114, (uint64_t)v113);
      unint64_t v10 = (uint64_t *)v117;
    }
    while ((void)v114 != v8 || (void)v117 != v9);
    for (uint64_t i = v127; v126 != v127; uint64_t i = v127)
    {
      uint64_t v24 = *((void *)i - 1);
      uint64_t v127 = i - 8;
      uint64_t v25 = *(void *)(v24 + 16);
      *(void *)&long long v118 = v25;
      *(void *)&long long v114 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v124, &v118, &v114) & 1) == 0)
      {
        *(void *)&long long v114 = v25;
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v124, &v114, (uint64_t)&v118);
        uint64_t v26 = *(void *)(v24 + 16);
        long long v27 = *(uint64_t **)(v26 + 40);
        unsigned int v28 = *(uint64_t **)(v26 + 48);
        while (v27 != v28)
        {
          uint64_t v29 = *v27;
          if ((*(unsigned char *)(*(void *)(*v27 + 16) + 8) & 1) != 0 && (*(unsigned char *)(v29 + 31) & 0x10) == 0)
          {
            unsigned int v30 = v127;
            if (v127 >= v128)
            {
              uint64_t v32 = (v127 - v126) >> 3;
              if ((unint64_t)(v32 + 1) >> 61) {
                goto LABEL_169;
              }
              unint64_t v33 = (v128 - v126) >> 2;
              if (v33 <= v32 + 1) {
                unint64_t v33 = v32 + 1;
              }
              if ((unint64_t)(v128 - v126) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v33;
              }
              if (v34) {
                BOOL v35 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v128, v34);
              }
              else {
                BOOL v35 = 0;
              }
              __n128 v36 = &v35[8 * v32];
              *(void *)__n128 v36 = v29;
              BOOL v31 = v36 + 8;
              unint64_t v38 = v126;
              uint64_t v37 = v127;
              if (v127 != v126)
              {
                do
                {
                  uint64_t v39 = *((void *)v37 - 1);
                  v37 -= 8;
                  *((void *)v36 - 1) = v39;
                  v36 -= 8;
                }
                while (v37 != v38);
                uint64_t v37 = v126;
              }
              uint64_t v126 = v36;
              uint64_t v127 = v31;
              uint64_t v128 = &v35[8 * v34];
              if (v37) {
                operator delete(v37);
              }
            }
            else
            {
              *(void *)uint64_t v127 = v29;
              BOOL v31 = v30 + 8;
            }
            uint64_t v127 = v31;
            uint64_t v29 = *v27;
          }
          *(void *)(v29 + 24) |= 0x1000000000000000uLL;
          v27 += 4;
        }
      }
    }
  }
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  unint64_t v112 = 0;
  llvm::jitlink::LinkGraph::defined_symbols((llvm::jitlink::LinkGraph *)v7, &v118);
  long long v114 = v118;
  long long v115 = v119;
  long long v116 = v120;
  long long v117 = v121;
  uint64_t v40 = v122;
  uint64_t v41 = v123;
  uint64_t v42 = (uint64_t *)v121;
  if ((void)v118 != v122 || (void)v121 != v123)
  {
    do
    {
      uint64_t v43 = *v42;
      if ((*(unsigned char *)(*v42 + 31) & 0x10) == 0)
      {
        unsigned int v44 = v111;
        if (v111 >= v112)
        {
          uint64_t v46 = (v111 - v110) >> 3;
          if ((unint64_t)(v46 + 1) >> 61) {
            goto LABEL_169;
          }
          unint64_t v47 = (v112 - v110) >> 2;
          if (v47 <= v46 + 1) {
            unint64_t v47 = v46 + 1;
          }
          if ((unint64_t)(v112 - v110) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v47;
          }
          if (v48) {
            uint64_t v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v112, v48);
          }
          else {
            uint64_t v49 = 0;
          }
          uint64_t v50 = &v49[8 * v46];
          *(void *)uint64_t v50 = v43;
          long long v45 = v50 + 8;
          long long v52 = v110;
          uint64_t v51 = v111;
          if (v111 != v110)
          {
            do
            {
              uint64_t v53 = *((void *)v51 - 1);
              v51 -= 8;
              *((void *)v50 - 1) = v53;
              v50 -= 8;
            }
            while (v51 != v52);
            uint64_t v51 = v110;
          }
          uint64_t v110 = v50;
          uint64_t v111 = v45;
          unint64_t v112 = &v49[8 * v48];
          if (v51) {
            operator delete(v51);
          }
        }
        else
        {
          *(void *)uint64_t v111 = v43;
          long long v45 = v44 + 8;
        }
        uint64_t v111 = v45;
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)&v114, (uint64_t)v113);
      uint64_t v42 = (uint64_t *)v117;
    }
    while ((void)v114 != v40 || (void)v117 != v41);
  }
  long long v55 = v110;
  if (v110 != v111)
  {
    do
    {
      uint64_t v56 = *(void *)v55;
      v55 += 8;
      uint64_t v57 = *(void *)(*(void *)(v56 + 16) + 16) + 56;
      *(void *)&long long v118 = v56;
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v57, &v118);
    }
    while (v55 != v111);
    long long v55 = v110;
  }
  if (v55)
  {
    uint64_t v111 = v55;
    operator delete(v55);
  }
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  unint64_t v112 = 0;
  llvm::jitlink::LinkGraph::blocks((llvm::jitlink::LinkGraph *)v7, &v118);
  long long v114 = v118;
  long long v115 = v119;
  long long v116 = v120;
  long long v117 = v121;
  uint64_t v58 = v122;
  uint64_t v59 = v123;
  uint64_t v60 = (uint64_t *)v121;
  if ((void)v118 != v122 || (void)v121 != v123)
  {
    do
    {
      uint64_t v61 = *v60;
      v113[0] = *v60;
      uint64_t v129 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v124, v113, &v129) & 1) == 0)
      {
        unsigned int v62 = v111;
        if (v111 >= v112)
        {
          uint64_t v64 = (v111 - v110) >> 3;
          if ((unint64_t)(v64 + 1) >> 61) {
            goto LABEL_169;
          }
          unint64_t v65 = (v112 - v110) >> 2;
          if (v65 <= v64 + 1) {
            unint64_t v65 = v64 + 1;
          }
          if ((unint64_t)(v112 - v110) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v66 = v65;
          }
          if (v66) {
            int64_t v67 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v112, v66);
          }
          else {
            int64_t v67 = 0;
          }
          int64_t v68 = &v67[8 * v64];
          *(void *)int64_t v68 = v61;
          uint64_t v63 = v68 + 8;
          uint64_t v70 = v110;
          int64_t v69 = v111;
          if (v111 != v110)
          {
            do
            {
              uint64_t v71 = *((void *)v69 - 1);
              v69 -= 8;
              *((void *)v68 - 1) = v71;
              v68 -= 8;
            }
            while (v69 != v70);
            int64_t v69 = v110;
          }
          uint64_t v110 = v68;
          uint64_t v111 = v63;
          unint64_t v112 = &v67[8 * v66];
          if (v69) {
            operator delete(v69);
          }
        }
        else
        {
          *(void *)uint64_t v111 = v61;
          uint64_t v63 = v62 + 8;
        }
        uint64_t v111 = v63;
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)&v114, (uint64_t)v113);
      uint64_t v60 = (uint64_t *)v117;
    }
    while ((void)v114 != v58 || (void)v117 != v59);
  }
  unsigned int v73 = v110;
  if (v110 != v111)
  {
    do
    {
      unsigned int v74 = *(void **)v73;
      v73 += 8;
      llvm::jitlink::LinkGraph::removeBlock(v7, v74);
    }
    while (v73 != v111);
    unsigned int v73 = v110;
  }
  if (v73)
  {
    uint64_t v111 = v73;
    operator delete(v73);
  }
  long long v118 = 0uLL;
  uint64_t v75 = v7 + 208;
  *(void *)&long long v119 = 0;
  uint64_t v76 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v7 + 208);
  uint64_t v79 = *(void *)(v7 + 208) + 8 * *(unsigned int *)(v7 + 224);
  if ((void *)v79 != v76)
  {
    uint64_t v80 = v76;
    unsigned int v81 = v77;
    unsigned int v82 = 0;
    do
    {
      uint64_t v83 = *v80;
      if ((*(unsigned char *)(*v80 + 31) & 0x10) != 0) {
        goto LABEL_138;
      }
      if ((unint64_t)v82 >= (unint64_t)v119)
      {
        uint64_t v84 = (uint64_t)((uint64_t)v82 - v118) >> 3;
        if ((unint64_t)(v84 + 1) >> 61) {
          goto LABEL_169;
        }
        unint64_t v85 = (uint64_t)(v119 - v118) >> 2;
        if (v85 <= v84 + 1) {
          unint64_t v85 = v84 + 1;
        }
        if ((void)v119 - (void)v118 >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v85;
        }
        if (v86) {
          uint64_t v87 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v119, v86);
        }
        else {
          uint64_t v87 = 0;
        }
        uint64_t v88 = &v87[8 * v84];
        *(void *)uint64_t v88 = v83;
        unsigned int v82 = (uint64_t *)(v88 + 8);
        unsigned int v89 = (char *)*((void *)&v118 + 1);
        unsigned int v90 = (char *)v118;
        if (*((void *)&v118 + 1) != (void)v118)
        {
          do
          {
            uint64_t v91 = *((void *)v89 - 1);
            v89 -= 8;
            *((void *)v88 - 1) = v91;
            v88 -= 8;
          }
          while (v89 != v90);
          unsigned int v89 = (char *)v118;
        }
        *(void *)&long long v118 = v88;
        *((void *)&v118 + 1) = v82;
        *(void *)&long long v119 = &v87[8 * v86];
        if (v89) {
          operator delete(v89);
        }
      }
      else
      {
        *v82++ = v83;
      }
      *((void *)&v118 + 1) = v82;
LABEL_138:
      while (++v80 != v81)
      {
        if ((*v80 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_142;
        }
      }
      uint64_t v80 = v81;
LABEL_142:
      ;
    }
    while (v80 != (void *)v79);
    long long v92 = (uint64_t *)v118;
    if ((uint64_t *)v118 != v82)
    {
      do
      {
        uint64_t v93 = *v92++;
        *(void *)&long long v114 = v93;
        v78.n128_u64[0] = (unint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v75, &v114);
      }
      while (v92 != v82);
      unsigned int v82 = (uint64_t *)v118;
    }
    if (v82)
    {
      *((void *)&v118 + 1) = v82;
      operator delete(v82);
    }
  }
  MEMORY[0x263E500A0](v124[0], 8, v78);
  if (v126)
  {
    uint64_t v127 = v126;
    operator delete(v126);
  }
  llvm::jitlink::JITLinkerBase::runPasses((uint64_t)&v118, a1, *(void **)(a1 + 48), *(void **)(a1 + 56));
  if ((void)v118)
  {
    uint64_t v94 = *(void *)(a1 + 8);
    uint64_t v108 = v118;
    *(void *)&long long v118 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v94 + 24))(v94, &v108);
    uint64_t v5 = v108;
    if (!v108)
    {
LABEL_4:
      __n128 result = (void *)v118;
      if ((void)v118) {
        return (void *)(*(uint64_t (**)(void))(*(void *)v118 + 8))(v118);
      }
      return result;
    }
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    goto LABEL_4;
  }
  uint64_t v95 = *(void *)(a1 + 16);
  if (*(void *)(v95 + 256) != *(void *)(v95 + 264))
  {
LABEL_154:
    uint64_t v96 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
    uint64_t v97 = *(void *)(a1 + 16);
    uint64_t v98 = *(void *)(*(void *)(a1 + 8) + 8);
    uint64_t v99 = *v106;
    *__n128 v106 = 0;
    v130[0] = v99;
    v130[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>>::CallbacksHolder<llvm::jitlink::JITLinkerBase::linkPhase1(std::unique_ptr<llvm::jitlink::JITLinkerBase>)::$_1,llvm::jitlink::JITLinkerBase::linkPhase1(std::unique_ptr<llvm::jitlink::JITLinkerBase>)::$_1,void>::Callbacks
            + 6;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v96 + 16))(v96, v98, v97, v130);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v130);
  }
  if (*(_DWORD *)(v95 + 192))
  {
    uint64_t v100 = *(void *)(v95 + 184);
    uint64_t v101 = *(unsigned int *)(v95 + 200);
    if (v101)
    {
      uint64_t v102 = 24 * v101;
      int v103 = *(void **)(v95 + 184);
      while (*v103 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v103 += 3;
        v102 -= 24;
        if (!v102) {
          goto LABEL_160;
        }
      }
    }
    else
    {
      int v103 = *(void **)(v95 + 184);
    }
    __n128 v105 = (void *)(v100 + 24 * v101);
LABEL_164:
    if (v103 != v105)
    {
      if (*(_DWORD *)(v103[2] + 20) != 2) {
        goto LABEL_154;
      }
      while (1)
      {
        v103 += 3;
        if (v103 == v105) {
          break;
        }
        if (*v103 < 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_164;
        }
      }
    }
  }
LABEL_160:
  uint64_t v104 = *v106;
  *__n128 v106 = 0;
  long long v107 = (void *)v104;
  char v132 = 0;
  uint64_t v131 = 0;
  llvm::jitlink::JITLinkerBase::linkPhase2(a1, (uint64_t *)&v107, &v131);
  llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>::~Expected(&v131);
  __n128 result = v107;
  if (v107) {
    return (void *)(*(uint64_t (**)(void *))(*v107 + 8))(v107);
  }
  return result;
}

uint64_t llvm::jitlink::JITLinkerBase::runPasses(uint64_t result, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4 = (void *)result;
  if (a3 == a4)
  {
LABEL_7:
    void *v4 = 0;
  }
  else
  {
    long long v6 = a3;
    while (1)
    {
      uint64_t v8 = v6[3];
      uint64_t v9 = v6;
      if ((v8 & 2) == 0) {
        uint64_t v9 = (void *)*v6;
      }
      __n128 result = (*(uint64_t (**)(void *, void))(v8 & 0xFFFFFFFFFFFFFFF8))(v9, *(void *)(a2 + 16));
      if (*v4) {
        break;
      }
      v6 += 4;
      if (v6 == a4) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t llvm::jitlink::JITLinkerBase::linkPhase2(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (a3[1])
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *a3;
    *a3 = 0;
    uint64_t v25 = v12;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 24))(v11, &v25);
    uint64_t result = v25;
    if (!v25) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  llvm::jitlink::JITLinkerBase::runPasses((uint64_t)&v26, a1, *(void **)(a1 + 72), *(void **)(a1 + 80));
  uint64_t v7 = v26;
  if ((void)v26
    || ((*(void (**)(long long *__return_ptr))(**(void **)(a1 + 8) + 40))(&v26), (uint64_t v7 = v26) != 0))
  {
    uint64_t v8 = *a2;
    *a2 = 0;
    *(void *)&long long v26 = 0;
    uint64_t v9 = *(void *)(a1 + 144);
    uint64_t v30 = v8;
    uint64_t v31 = v7;
    unint64_t v33 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0,llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0,void>::Callbacks
        + 6;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 16))(v9, &v30);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v30);
    uint64_t result = v26;
    if (!(void)v26) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int v32 = 0;
  uint64_t v14 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v13 + 208);
  uint64_t v18 = *(void *)(v13 + 208) + 8 * *(unsigned int *)(v13 + 224);
  if ((void *)v18 != v14)
  {
    long long v19 = v14;
    unsigned int v20 = v15;
    do
    {
      uint64_t v21 = (long long *)*v19++;
      uint64_t v22 = (*((void *)v21 + 3) >> 62) & 1;
      long long v26 = *v21;
      *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>,llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::FindAndConstruct(&v30, &v26, v16, v17)+ 4) = v22;
      while (v19 != v20)
      {
        if ((*v19 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_18;
        }
        ++v19;
      }
      long long v19 = v20;
LABEL_18:
      ;
    }
    while (v19 != (void *)v18);
    if (v31)
    {
      *a2 = 0;
      operator new();
    }
  }
  uint64_t v23 = *a2;
  *a2 = 0;
  uint64_t v24 = v23;
  char v29 = 0;
  v27[0] = 0;
  v27[1] = 0;
  int v28 = 0;
  llvm::jitlink::JITLinkerBase::linkPhase3(v23, &v24, (uint64_t)v27);
  llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>::~Expected(v27);
  MEMORY[0x263E500A0](0, 8);
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  return MEMORY[0x263E500A0](v30, 8);
}

void *llvm::jitlink::JITLinkerBase::linkPhase3(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a3 + 24))
  {
    uint64_t v9 = 0;
    uint64_t v10 = *a2;
    *a2 = 0;
    if (*(unsigned char *)(a3 + 24))
    {
      uint64_t v9 = *(const void **)a3;
      *(void *)a3 = 0;
    }
    uint64_t v11 = *(void *)(a1 + 144);
    *(void *)&long long v36 = v10;
    *((void *)&v36 + 1) = v9;
    uint64_t v37 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0,llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0,void>::Callbacks
        + 6;
    (*(void (**)(uint64_t, long long *))(*(void *)v11 + 16))(v11, &v36);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v36);
  }
  else
  {
    char v29 = 0;
    uint64_t v30 = 0;
    MEMORY[0x263E500A0](0, 8);
    uint64_t v6 = *(unsigned int *)(a3 + 16);
    int v31 = v6;
    if (v6)
    {
      size_t v7 = 32 * v6;
      uint64_t v8 = (char *)operator new(32 * v6, (std::align_val_t)8uLL);
      char v29 = v8;
      uint64_t v30 = *(void *)(a3 + 8);
      memcpy(v8, *(const void **)a3, v7);
    }
    else
    {
      uint64_t v8 = 0;
      char v29 = 0;
      uint64_t v30 = 0;
    }
    uint64_t v13 = *(void *)(a1 + 16);
    uint64_t v14 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v13 + 208);
    uint64_t v17 = *(void *)(v13 + 208) + 8 * *(unsigned int *)(v13 + 224);
    if ((void *)v17 != v14)
    {
      uint64_t v18 = (_OWORD **)v14;
      long long v19 = v15;
      do
      {
        unsigned int v20 = *v18;
        long long v36 = **v18;
        int v32 = 0;
        int v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>,llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v29, (uint64_t)&v36, &v32, v16);
        uint64_t v8 = v29;
        if (v21)
        {
          uint64_t v22 = v32;
          if (v32 != &v29[32 * v31])
          {
            **((void **)v20 + 2) = *((void *)v32 + 2);
            unint64_t v23 = *((void *)v20 + 3) & 0xFDFFFFFFFFFFFFFFLL | ((unint64_t)((v22[25] & 2) != 0) << 57);
            *((void *)v20 + 3) = v23;
            *((void *)v20 + 3) = v23 & 0xF3FFFFFFFFFFFFFFLL | ((unint64_t)(((v22[25] >> 4) & 1) == 0) << 58);
          }
        }
        while (++v18 != v19)
        {
          if (((unint64_t)*v18 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_17;
          }
        }
        uint64_t v18 = v19;
LABEL_17:
        ;
      }
      while (v18 != (_OWORD **)v17);
    }
    MEMORY[0x263E500A0](v8, 8);
    llvm::jitlink::JITLinkerBase::runPasses((uint64_t)&v32, a1, *(void **)(a1 + 96), *(void **)(a1 + 104));
    uint64_t v24 = v32;
    if (v32
      || ((*(void (**)(char **__return_ptr, uint64_t, void))(*(void *)a1 + 16))(&v32, a1, *(void *)(a1 + 16)), (uint64_t v24 = v32) != 0)|| (llvm::jitlink::JITLinkerBase::runPasses((uint64_t)&v32, a1, *(void **)(a1 + 120), *(void **)(a1 + 128)), (uint64_t v24 = v32) != 0))
    {
      uint64_t v25 = *a2;
      *a2 = 0;
      int v32 = 0;
      uint64_t v26 = *(void *)(a1 + 144);
      *(void *)&long long v36 = v25;
      *((void *)&v36 + 1) = v24;
      uint64_t v37 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0,llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0,void>::Callbacks
          + 6;
      (*(void (**)(uint64_t, long long *))(*(void *)v26 + 16))(v26, &v36);
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v36);
      uint64_t result = v32;
      if (v32) {
        return (void *)(*(uint64_t (**)(char *))(*(void *)v32 + 8))(v32);
      }
    }
    else
    {
      uint64_t v27 = *(void *)(a1 + 144);
      uint64_t v28 = *a2;
      *a2 = 0;
      if (v27)
      {
        v33[0] = v28;
        void v33[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>::CallbacksHolder<llvm::jitlink::JITLinkerBase::linkPhase3(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)::$_0,llvm::jitlink::JITLinkerBase::linkPhase3(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)::$_0,void>::Callbacks
               + 6;
        (*(void (**)(uint64_t, void *))(*(void *)v27 + 24))(v27, v33);
        return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v33);
      }
      else
      {
        char v35 = 0;
        uint64_t v34 = -1;
        uint64_t result = (void *)llvm::jitlink::JITLinkerBase::linkPhase4(*(void *)(a1 + 8), &v34);
        if (v35)
        {
          uint64_t result = (void *)v34;
          if (v34) {
            uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v34 + 8))(v34);
          }
        }
        if (v28) {
          return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
      }
    }
  }
  return result;
}

uint64_t llvm::jitlink::JITLinkerBase::linkPhase4(uint64_t a1, uint64_t *a2)
{
  if (a2[1])
  {
    uint64_t v3 = *a2;
    *a2 = 0;
    uint64_t v5 = v3;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, &v5);
    uint64_t result = v5;
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  else
  {
    uint64_t v4 = *a2;
    *a2 = -1;
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  return result;
}

void std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v4 - 4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>>::CallImpl<llvm::jitlink::JITLinkerBase::linkPhase1(std::unique_ptr<llvm::jitlink::JITLinkerBase>)::$_1>(uint64_t *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v8 = *(unsigned char *)(a2 + 8) & 1;
  char v2 = v8;
  uint64_t v3 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v4 = *a1;
  *a1 = 0;
  uint64_t v6 = v4;
  uint64_t v7 = 0;
  char v10 = v2;
  uint64_t v9 = v3;
  llvm::jitlink::JITLinkerBase::linkPhase2(v4, &v6, &v9);
  llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>::~Expected(&v9);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>::~Expected(&v7);
}

void *llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>>::MoveImpl<llvm::jitlink::JITLinkerBase::linkPhase1(std::unique_ptr<llvm::jitlink::JITLinkerBase>)::$_1>(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>>::DestroyImpl<llvm::jitlink::JITLinkerBase::linkPhase1(std::unique_ptr<llvm::jitlink::JITLinkerBase>)::$_1>(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t llvm::jitlink::createLookupContinuation<llvm::jitlink::JITLinkerBase::linkPhase2(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)::$_0>(llvm::jitlink::JITLinkerBase::linkPhase2(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)::$_0)::Impl::~Impl(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void llvm::jitlink::createLookupContinuation<llvm::jitlink::JITLinkerBase::linkPhase2(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)::$_0>(llvm::jitlink::JITLinkerBase::linkPhase2(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)::$_0)::Impl::~Impl(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x263E500B0);
}

uint64_t *llvm::jitlink::createLookupContinuation<llvm::jitlink::JITLinkerBase::linkPhase2(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)::$_0>(llvm::jitlink::JITLinkerBase::linkPhase2(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)::$_0)::Impl::run(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v11 = *(unsigned char *)(a2 + 24) & 1;
  char v2 = v11;
  uint64_t v3 = *(void *)a2;
  *(void *)a2 = 0;
  if (v2)
  {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  else
  {
    int v4 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    v12[1] = v6;
    v9[1] = 0;
    int v13 = v4;
    int v10 = 0;
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = v5;
  v9[0] = 0;
  char v14 = v2;
  v12[0] = v3;
  llvm::jitlink::JITLinkerBase::linkPhase3(v5, &v8, (uint64_t)v12);
  llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>::~Expected(v12);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>::~Expected(v9);
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>::CallImpl<llvm::jitlink::JITLinkerBase::linkPhase3(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)::$_0>(uint64_t **a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = *(void *)a2;
    *(void *)a2 = 0;
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
    uint64_t v3 = *(void *)a2;
    *(void *)a2 = -1;
  }
  int v4 = *a1;
  *a1 = 0;
  char v8 = v2;
  uint64_t v7 = v3;
  llvm::jitlink::JITLinkerBase::linkPhase4(v4[1], &v7);
  if ((v8 & 1) != 0 && v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t *))(*v4 + 8);
  return v5(v4);
}

void *llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>::MoveImpl<llvm::jitlink::JITLinkerBase::linkPhase3(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)::$_0>(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>::DestroyImpl<llvm::jitlink::JITLinkerBase::linkPhase3(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)::$_0>(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>,llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::FindAndConstruct(uint64_t *a1, _OWORD *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v9 = 0;
  char v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(a1, (uint64_t)a2, &v9, a4);
  uint64_t v7 = v9;
  if ((v6 & 1) == 0)
  {
    uint64_t v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>,llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, v9);
    *(_OWORD *)uint64_t v7 = *a2;
    *((_DWORD *)v7 + 4) = 0;
  }
  return v7;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>,llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::grow(a1, v7);
  int v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::grow(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>,llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::moveFromOldBuckets(a1, v4, v4 + 24 * v3, v10);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = 24 * v11;
    do
    {
      *uint64_t result = xmmword_261E8A6B0;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v12 -= 24;
    }
    while (v12);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>,llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6 = result;
  *(void *)(result + 8) = 0;
  uint64_t v7 = *(unsigned int *)(result + 16);
  if (v7)
  {
    unsigned int v8 = *(_OWORD **)result;
    uint64_t v9 = 24 * v7;
    do
    {
      *unsigned int v8 = xmmword_261E8A6B0;
      unsigned int v8 = (_OWORD *)((char *)v8 + 24);
      v9 -= 24;
    }
    while (v9);
  }
  while (a2 != a3)
  {
    if (*(void *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v11 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v6, a2, &v11, a4);
      int v10 = v11;
      _OWORD *v11 = *(_OWORD *)a2;
      *((_DWORD *)v10 + 4) = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v6 + 8);
    }
    a2 += 24;
  }
  return result;
}

void **llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0>(void *a1, void ***a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  unsigned int v3 = (void **)a1[1];
  uint64_t v4 = *(void *)(*a1 + 8);
  a1[1] = 0;
  uint64_t v7 = v2;
  unsigned int v8 = v3;
  llvm::ErrorList::join(&v8, &v7, &v6);
  if (v7) {
    (*((void (**)(void **))*v7 + 1))(v7);
  }
  if (v8) {
    (*((void (**)(void **))*v8 + 1))(v8);
  }
  (*(void (**)(uint64_t, void ***))(*(void *)v4 + 24))(v4, &v6);
  uint64_t result = v6;
  if (v6) {
    return (void **)(*((uint64_t (**)(void **))*v6 + 1))(v6);
  }
  return result;
}

void *llvm::detail::UniqueFunctionBase<void,llvm::Error>::MoveImpl<llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0>(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  result[1] = 0;
  result[1] = a2[1];
  a2[1] = 0;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::DestroyImpl<llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0>(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

llvm::jitlink::BasicLayout *llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::BasicLayout *this, llvm::jitlink::LinkGraph *a2)
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  *(void *)this = a2;
  *((void *)this + 1) = (char *)this + 24;
  unsigned int v3 = (char *)this + 8;
  *((void *)this + 2) = 0x400000000;
  if (*((_DWORD *)a2 + 48))
  {
    uint64_t v4 = *((unsigned int *)a2 + 50);
    if (v4)
    {
      uint64_t v5 = 24 * v4;
      for (uint64_t i = (void *)*((void *)a2 + 23); *i >= 0xFFFFFFFFFFFFFFFELL; i += 3)
      {
        v5 -= 24;
        if (!v5) {
          return this;
        }
      }
    }
    else
    {
      uint64_t i = (void *)*((void *)a2 + 23);
    }
    uint64_t v7 = *((void *)a2 + 23) + 24 * v4;
    if (i != (void *)v7)
    {
      while (1)
      {
        uint64_t v8 = i[2];
        if ((void *)(*(void *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48)) != llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 32)
          && *(_DWORD *)(v8 + 20) != 2)
        {
          break;
        }
        do
        {
LABEL_81:
          i += 3;
          if (i == (void *)v7) {
            goto LABEL_84;
          }
        }
        while (*i >= 0xFFFFFFFFFFFFFFFELL);
        if (i == (void *)v7)
        {
LABEL_84:
          unsigned int v75 = *((_DWORD *)this + 4);
          if (v75)
          {
            uint64_t v76 = *((void *)this + 1);
            uint64_t v77 = v76 + 104 * v75;
            do
            {
              unint64_t v78 = *(void *)(v76 + 56);
              uint64_t v79 = *(void **)(v76 + 64);
              unint64_t v80 = 126 - 2 * __clz((uint64_t)((uint64_t)v79 - v78) >> 3);
              if (v79 == (void *)v78) {
                uint64_t v81 = 0;
              }
              else {
                uint64_t v81 = v80;
              }
              std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,false>(v78, v79, v81, 1);
              unint64_t v82 = *(void *)(v76 + 80);
              uint64_t v83 = *(void **)(v76 + 88);
              unint64_t v84 = 126 - 2 * __clz((uint64_t)((uint64_t)v83 - v82) >> 3);
              if (v83 == (void *)v82) {
                uint64_t v85 = 0;
              }
              else {
                uint64_t v85 = v84;
              }
              std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,false>(v82, v83, v85, 1);
              unint64_t v86 = *(uint64_t **)(v76 + 56);
              uint64_t v87 = *(uint64_t **)(v76 + 64);
              uint64_t v88 = *(void *)(v76 + 16);
              if (v86 != v87)
              {
                unsigned __int8 v89 = *(unsigned char *)(v76 + 8);
                do
                {
                  uint64_t v90 = *v86++;
                  v88 += *(void *)(v90 + 32)
                       + (((*(void *)(v90 + 8) >> 8) - v88) & ~(-1 << (*(void *)(v90 + 8) >> 3)));
                  *(void *)(v76 + 16) = v88;
                  unsigned int v91 = __clz(1 << (*(void *)(v90 + 8) >> 3)) ^ 0x3F;
                  if (v89 <= v91) {
                    unsigned __int8 v89 = v91;
                  }
                  *(unsigned char *)(v76 + 8) = v89;
                }
                while (v86 != v87);
              }
              long long v92 = *(uint64_t **)(v76 + 80);
              uint64_t v93 = *(uint64_t **)(v76 + 88);
              uint64_t v94 = v88;
              if (v92 != v93)
              {
                unsigned __int8 v95 = *(unsigned char *)(v76 + 8);
                uint64_t v94 = v88;
                do
                {
                  uint64_t v96 = *v92++;
                  unint64_t v97 = *(void *)(v96 + 8);
                  uint64_t v98 = (v97 >> 8) - v94;
                  LOBYTE(v97) = v97 >> 3;
                  v94 += *(void *)(v96 + 32) + (v98 & ~(-1 << v97));
                  unsigned int v99 = __clz(1 << v97) ^ 0x3F;
                  if (v95 <= v99) {
                    unsigned __int8 v95 = v99;
                  }
                  *(unsigned char *)(v76 + 8) = v95;
                }
                while (v92 != v93);
              }
              *(void *)(v76 + 24) = v94 - v88;
              v76 += 104;
            }
            while (v76 != v77);
          }
          return this;
        }
      }
      unsigned int v9 = *(unsigned __int8 *)(v8 + 16) | (8 * (*(_DWORD *)(v8 + 20) & 0x1F));
      uint64_t v10 = *((void *)this + 1);
      unint64_t v11 = *((unsigned int *)this + 4);
      uint64_t v12 = (unsigned __int8 *)(v10 + 104 * v11);
      if (v11)
      {
        int v13 = (unsigned __int8 *)*((void *)this + 1);
        do
        {
          unint64_t v14 = v11 >> 1;
          uint64_t v15 = &v13[104 * (v11 >> 1)];
          unsigned int v17 = *v15;
          uint64_t v16 = v15 + 104;
          v11 += ~(v11 >> 1);
          if (v17 < v9) {
            int v13 = v16;
          }
          else {
            unint64_t v11 = v14;
          }
        }
        while (v11);
        uint64_t v18 = v12;
        if (v13 != v12)
        {
          uint64_t v18 = v13;
          if (*v13 == v9)
          {
LABEL_38:
            uint64_t v43 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 32);
            uint64_t v45 = *(void *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
            if ((void *)v45 == v43) {
              goto LABEL_81;
            }
            uint64_t v46 = v43;
            unint64_t v47 = v44;
            while (1)
            {
              uint64_t v48 = *v46;
              if (*(void *)(*v46 + 24)) {
                break;
              }
              uint64_t v63 = (void *)*((void *)v13 + 11);
              unint64_t v62 = *((void *)v13 + 12);
              if ((unint64_t)v63 >= v62)
              {
                uint64_t v65 = *((void *)v13 + 10);
                uint64_t v66 = ((uint64_t)v63 - v65) >> 3;
                if ((unint64_t)(v66 + 1) >> 61) {
                  goto LABEL_104;
                }
                uint64_t v67 = v62 - v65;
                uint64_t v68 = v67 >> 2;
                if (v67 >> 2 <= (unint64_t)(v66 + 1)) {
                  uint64_t v68 = v66 + 1;
                }
                if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v69 = v68;
                }
                if (v69) {
                  uint64_t v70 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(v13 + 96), v69);
                }
                else {
                  uint64_t v70 = 0;
                }
                uint64_t v71 = &v70[8 * v66];
                *(void *)uint64_t v71 = v48;
                uint64_t v64 = v71 + 8;
                unsigned int v73 = (char *)*((void *)v13 + 10);
                unsigned int v72 = (char *)*((void *)v13 + 11);
                if (v72 != v73)
                {
                  do
                  {
                    uint64_t v74 = *((void *)v72 - 1);
                    v72 -= 8;
                    *((void *)v71 - 1) = v74;
                    v71 -= 8;
                  }
                  while (v72 != v73);
                  unsigned int v72 = (char *)*((void *)v13 + 10);
                }
                *((void *)v13 + 10) = v71;
                *((void *)v13 + 11) = v64;
                *((void *)v13 + 12) = &v70[8 * v69];
                if (v72) {
                  operator delete(v72);
                }
              }
              else
              {
                *uint64_t v63 = v48;
                uint64_t v64 = v63 + 1;
              }
              *((void *)v13 + 11) = v64;
LABEL_58:
              while (++v46 != v47)
              {
                if ((*v46 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                  goto LABEL_62;
                }
              }
              uint64_t v46 = v47;
LABEL_62:
              if (v46 == (void *)v45) {
                goto LABEL_81;
              }
            }
            uint64_t v50 = (void *)*((void *)v13 + 8);
            unint64_t v49 = *((void *)v13 + 9);
            if ((unint64_t)v50 >= v49)
            {
              uint64_t v52 = *((void *)v13 + 7);
              uint64_t v53 = ((uint64_t)v50 - v52) >> 3;
              if ((unint64_t)(v53 + 1) >> 61) {
LABEL_104:
              }
                abort();
              uint64_t v54 = v49 - v52;
              uint64_t v55 = v54 >> 2;
              if (v54 >> 2 <= (unint64_t)(v53 + 1)) {
                uint64_t v55 = v53 + 1;
              }
              if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v56 = v55;
              }
              if (v56) {
                uint64_t v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(v13 + 72), v56);
              }
              else {
                uint64_t v57 = 0;
              }
              uint64_t v58 = &v57[8 * v53];
              *(void *)uint64_t v58 = v48;
              uint64_t v51 = v58 + 8;
              uint64_t v60 = (char *)*((void *)v13 + 7);
              uint64_t v59 = (char *)*((void *)v13 + 8);
              if (v59 != v60)
              {
                do
                {
                  uint64_t v61 = *((void *)v59 - 1);
                  v59 -= 8;
                  *((void *)v58 - 1) = v61;
                  v58 -= 8;
                }
                while (v59 != v60);
                uint64_t v59 = (char *)*((void *)v13 + 7);
              }
              *((void *)v13 + 7) = v58;
              *((void *)v13 + 8) = v51;
              *((void *)v13 + 9) = &v57[8 * v56];
              if (v59) {
                operator delete(v59);
              }
            }
            else
            {
              void *v50 = v48;
              uint64_t v51 = v50 + 1;
            }
            *((void *)v13 + 8) = v51;
            goto LABEL_58;
          }
        }
      }
      else
      {
        uint64_t v18 = (unsigned __int8 *)*((void *)this + 1);
      }
      memset(&v109[7], 0, 40);
      v103[0] = v9;
      v103[8] = 0;
      long long v104 = *(_OWORD *)v109;
      *(_OWORD *)__n128 v105 = *(_OWORD *)&v109[16];
      *(_OWORD *)&v105[15] = *(_OWORD *)&v109[31];
      long long v106 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      if (v12 == v18)
      {
        unint64_t v39 = llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>>((uint64_t)v3, (unint64_t)v103);
        uint64_t v40 = *((void *)this + 1) + 104 * *((unsigned int *)this + 4);
        *(unsigned char *)uint64_t v40 = *(unsigned char *)v39;
        long long v41 = *(_OWORD *)(v39 + 24);
        long long v42 = *(_OWORD *)(v39 + 8);
        *(_OWORD *)(v40 + 40) = *(_OWORD *)(v39 + 40);
        *(_OWORD *)(v40 + 8) = v42;
        *(_OWORD *)(v40 + 24) = v41;
        *(void *)(v40 + 64) = 0;
        *(void *)(v40 + 72) = 0;
        *(void *)(v40 + 56) = 0;
        *(_OWORD *)(v40 + 56) = *(_OWORD *)(v39 + 56);
        *(void *)(v40 + 72) = *(void *)(v39 + 72);
        *(void *)(v39 + 56) = 0;
        *(void *)(v39 + 64) = 0;
        *(void *)(v39 + 72) = 0;
        *(void *)(v40 + 88) = 0;
        *(void *)(v40 + 96) = 0;
        *(void *)(v40 + 80) = 0;
        *(_OWORD *)(v40 + 80) = *(_OWORD *)(v39 + 80);
        *(void *)(v40 + 96) = *(void *)(v39 + 96);
        *(void *)(v39 + 80) = 0;
        *(void *)(v39 + 88) = 0;
        *(void *)(v39 + 96) = 0;
        LODWORD(v40) = *((_DWORD *)this + 4) + 1;
        *((_DWORD *)this + 4) = v40;
        int v13 = (unsigned __int8 *)(*((void *)this + 1) + 104 * v40 - 104);
      }
      else
      {
        uint64_t v19 = (uint64_t)&v18[-v10];
        unint64_t v20 = llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>>((uint64_t)v3, (unint64_t)v103);
        uint64_t v21 = *((void *)this + 1);
        uint64_t v22 = v21 + 104 * *((unsigned int *)this + 4);
        long long v23 = *(_OWORD *)(v22 - 48);
        *(_OWORD *)(v22 + 40) = *(_OWORD *)(v22 - 64);
        long long v24 = *(_OWORD *)(v22 - 96);
        *(_OWORD *)(v22 + 24) = *(_OWORD *)(v22 - 80);
        *(_OWORD *)(v22 + 8) = v24;
        uint64_t v102 = v19;
        int v13 = (unsigned __int8 *)(v21 + v19);
        *(unsigned char *)uint64_t v22 = *(unsigned char *)(v22 - 104);
        *(_OWORD *)(v22 + 56) = v23;
        *(void *)(v22 + 72) = *(void *)(v22 - 32);
        *(void *)(v22 - 48) = 0;
        *(void *)(v22 - 40) = 0;
        *(void *)(v22 + 88) = 0;
        *(void *)(v22 + 96) = 0;
        *(_OWORD *)(v22 + 80) = *(_OWORD *)(v22 - 24);
        *(void *)(v22 + 96) = *(void *)(v22 - 8);
        *(void *)(v22 - 32) = 0;
        *(void *)(v22 - 24) = 0;
        *(void *)(v22 - 16) = 0;
        *(void *)(v22 - 8) = 0;
        uint64_t v25 = *((void *)this + 1);
        unsigned int v26 = *((_DWORD *)this + 4);
        uint64_t v27 = v25 + 104 * v26 - 104;
        if ((unsigned __int8 *)v27 != v13)
        {
          uint64_t v101 = v21;
          uint64_t v28 = v25 + 104 * v26 - 104;
          do
          {
            char v29 = *(unsigned char *)(v28 - 104);
            v28 -= 104;
            *(unsigned char *)uint64_t v27 = v29;
            long long v30 = *(_OWORD *)(v27 - 80);
            *(_OWORD *)(v27 + 8) = *(_OWORD *)(v27 - 96);
            *(_OWORD *)(v27 + 24) = v30;
            *(_OWORD *)(v27 + 40) = *(_OWORD *)(v27 - 64);
            std::vector<llvm::jitlink::Block *>::__move_assign(v27 + 56, (__n128 *)(v27 - 48));
            std::vector<llvm::jitlink::Block *>::__move_assign(v27 + 80, (__n128 *)(v27 - 24));
            uint64_t v27 = v28;
          }
          while ((unsigned __int8 *)v28 != v13);
          unsigned int v26 = *((_DWORD *)this + 4);
          uint64_t v25 = *((void *)this + 1);
          uint64_t v21 = v101;
        }
        unsigned int v31 = v26 + 1;
        *((_DWORD *)this + 4) = v31;
        unint64_t v32 = v25 + 104 * v31;
        BOOL v34 = v20 >= (unint64_t)v13 && v20 < v32;
        char v35 = (unsigned __int8 *)(v20 + 104 * v34);
        *int v13 = *v35;
        long long v36 = *(_OWORD *)(v35 + 8);
        long long v37 = *(_OWORD *)(v35 + 24);
        uint64_t v38 = v21 + 8 * (v102 >> 3);
        *(_OWORD *)(v38 + 40) = *(_OWORD *)(v35 + 40);
        *(_OWORD *)(v38 + 24) = v37;
        *(_OWORD *)(v38 + 8) = v36;
        std::vector<llvm::jitlink::Block *>::__move_assign(v38 + 56, (__n128 *)(v35 + 56));
        std::vector<llvm::jitlink::Block *>::__move_assign(v38 + 80, (__n128 *)v35 + 5);
      }
      if (*((void *)&v107 + 1))
      {
        *(void *)&long long v108 = *((void *)&v107 + 1);
        operator delete(*((void **)&v107 + 1));
      }
      if ((void)v106)
      {
        *((void *)&v106 + 1) = v106;
        operator delete((void *)v106);
      }
      goto LABEL_38;
    }
  }
  return this;
}

uint64_t llvm::jitlink::BasicLayout::getContiguousPageBasedLayoutSizes@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *(_DWORD *)(this + 16);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 104 * v4;
    uint64_t v8 = (void *)(*(void *)(this + 8) + 16);
    do
    {
      if (!(a2 >> *((unsigned char *)v8 - 8)))
      {
        getErrorErrorCat();
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
      }
      unint64_t v9 = (a2 - 1 + *v8 + v8[1]) / a2 * a2;
      unsigned int v10 = *((unsigned __int8 *)v8 - 16);
      BOOL v11 = v10 >= 8;
      if (v10 >= 8) {
        unint64_t v12 = (a2 - 1 + *v8 + v8[1]) / a2 * a2;
      }
      else {
        unint64_t v12 = 0;
      }
      v6 += v12;
      if (v11) {
        unint64_t v9 = 0;
      }
      v5 += v9;
      v8 += 13;
      v7 -= 104;
    }
    while (v7);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  return this;
}

_DWORD *llvm::jitlink::BasicLayout::apply@<X0>(_DWORD *this@<X0>, void *a2@<X8>)
{
  unsigned int v3 = this[4];
  if (v3)
  {
    unsigned int v4 = (void *)*((void *)this + 1);
    uint64_t v5 = &v4[13 * v3];
    do
    {
      uint64_t v6 = (uint64_t **)v4[7];
      uint64_t v7 = (uint64_t **)v4[8];
      if (v6 != v7)
      {
        uint64_t v8 = v4[6];
        do
        {
          unint64_t v9 = *v6++;
          uint64_t v10 = v4[5];
          uint64_t v11 = ((((unint64_t)v9[1] >> 8) - v4[4]) & ~(-1 << (v9[1] >> 3))) + v4[4];
          v4[4] = v11;
          unint64_t v12 = ((((unint64_t)v9[1] >> 8) - v8) & ~(-1 << (v9[1] >> 3))) + v8;
          *unint64_t v9 = v11;
          int v13 = (const void *)v9[3];
          size_t v14 = v9[4];
          v4[4] += v14;
          v4[6] = v12;
          this = memcpy((void *)(v10 + v12), v13, v14);
          uint64_t v15 = v9[4];
          _OWORD v9[3] = v4[5] + v4[6];
          v9[1] |= 4uLL;
          uint64_t v8 = v4[6] + v15;
          v4[6] = v8;
        }
        while (v6 != v7);
      }
      uint64_t v16 = (void **)v4[10];
      unsigned int v17 = (void **)v4[11];
      if (v16 != v17)
      {
        uint64_t v18 = v4[4];
        uint64_t v19 = (void **)v4[10];
        do
        {
          unint64_t v20 = *v19++;
          uint64_t v21 = (((v20[1] >> 8) - v18) & ~(-1 << (v20[1] >> 3))) + v18;
          v4[4] = v21;
          *unint64_t v20 = v21;
          uint64_t v18 = v4[4] + v20[4];
          v4[4] = v18;
        }
        while (v19 != v17);
      }
      v4[8] = v4[7];
      v4[11] = v16;
      v4 += 13;
    }
    while (v4 != v5);
  }
  *a2 = 0;
  return this;
}

uint64_t llvm::jitlink::InProcessMemoryManager::allocate(uint64_t a1, int a2, llvm::jitlink::LinkGraph *a3, void *a4)
{
  v37[55] = *(void **)MEMORY[0x263EF8340];
  llvm::jitlink::BasicLayout::BasicLayout((llvm::jitlink::BasicLayout *)&v34, a3);
  llvm::jitlink::BasicLayout::getContiguousPageBasedLayoutSizes((uint64_t)&v34, *(void *)(a1 + 8), (uint64_t)v32);
  if (v33)
  {
    char v31 = -1;
    uint64_t v30 = v32[0];
    uint64_t v11 = a4[3];
    if ((v11 & 2) == 0) {
      a4 = (void *)*a4;
    }
    (*(void (**)(void *, uint64_t *))(v11 & 0xFFFFFFFFFFFFFFF8))(a4, &v30);
    uint64_t v10 = &v30;
  }
  else
  {
    uint64_t v6 = v32[0];
    uint64_t v7 = v32[1] + v32[0];
    LODWORD(v24) = 0;
    uint64_t v25 = std::system_category();
    llvm::sys::Memory::allocateMappedMemory(v7, 0, 50331648, (uint64_t)&v24, (uint64_t)v37);
    if (v24)
    {
      *(void *)&v8.__val_ = v25;
      llvm::errorCodeToError(v24, v8, &v23);
      char v29 = -1;
      uint64_t v28 = v23;
      uint64_t v9 = a4[3];
      if ((v9 & 2) == 0) {
        a4 = (void *)*a4;
      }
      (*(void (**)(void *, uint64_t *))(v9 & 0xFFFFFFFFFFFFFFF8))(a4, &v28);
      uint64_t v10 = &v28;
    }
    else
    {
      int v13 = (char *)v37[0];
      bzero(v37[0], (size_t)v37[1]);
      if (v36)
      {
        size_t v14 = v35;
        uint64_t v15 = &v35[13 * v36];
        uint64_t v16 = &v13[v6];
        unsigned int v17 = v13;
        do
        {
          unsigned int v18 = *(unsigned __int8 *)v14;
          if (v18 >= 8) {
            uint64_t v19 = v16;
          }
          else {
            uint64_t v19 = v17;
          }
          v14[4] = v19;
          unint64_t v20 = *(void *)(a1 + 8);
          unint64_t v21 = v14[2] + v14[3] + v20 - 1;
          v14[5] = v19;
          if (v18 >= 8) {
            uint64_t v16 = &v19[v21 / v20 * v20];
          }
          else {
            unsigned int v17 = &v19[v21 / v20 * v20];
          }
          v14 += 13;
        }
        while (v14 != v15);
      }
      llvm::jitlink::BasicLayout::apply(&v34, v37);
      if (!v37[0]) {
        operator new();
      }
      char v27 = -1;
      unsigned int v26 = v37[0];
      uint64_t v22 = a4[3];
      if ((v22 & 2) == 0) {
        a4 = (void *)*a4;
      }
      (*(void (**)(void *, void **))(v22 & 0xFFFFFFFFFFFFFFF8))(a4, &v26);
      uint64_t v10 = (uint64_t *)&v26;
    }
  }
  llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>::~Expected(v10);
  return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v35);
}

void llvm::jitlink::InProcessMemoryManager::deallocate(uint64_t a1, long long ***a2, void *a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  uint64_t v7 = *a2;
  uint64_t v46 = a2[1];
  if (*a2 == v46)
  {
    std::mutex::unlock(v6);
    uint64_t v11 = 0;
    std::error_code v8 = 0;
    unint64_t v32 = 0;
  }
  else
  {
    long long v42 = v6;
    uint64_t v43 = a3;
    std::error_code v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v44 = v5;
    do
    {
      size_t v14 = *v7;
      *uint64_t v7 = (long long *)-1;
      if (v12 >= v13)
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v11) >> 3) + 1;
        if (v16 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_76;
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v11) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          if (v18 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_77;
          }
          uint64_t v19 = (char *)operator new(24 * v18);
        }
        else
        {
          uint64_t v19 = 0;
        }
        long long v20 = *v14;
        unint64_t v21 = &v19[8 * ((uint64_t)(v12 - (void)v11) >> 3)];
        *((void *)v21 + 2) = *((void *)v14 + 2);
        *(_OWORD *)unint64_t v21 = v20;
        if ((char *)v12 == v11)
        {
          long long v24 = &v19[8 * ((uint64_t)(v12 - (void)v11) >> 3)];
        }
        else
        {
          uint64_t v22 = &v19[8 * ((uint64_t)(v12 - (void)v11) >> 3)];
          do
          {
            long long v23 = *(_OWORD *)(v12 - 24);
            long long v24 = v22 - 24;
            *((_DWORD *)v22 - 2) = *(_DWORD *)(v12 - 8);
            *(_OWORD *)(v22 - 24) = v23;
            v12 -= 24;
            v22 -= 24;
          }
          while ((char *)v12 != v11);
        }
        unint64_t v47 = &v19[24 * v18];
        unint64_t v12 = (unint64_t)(v21 + 24);
        if (v11) {
          operator delete(v11);
        }
        uint64_t v11 = v24;
      }
      else
      {
        unint64_t v47 = (char *)v13;
        long long v15 = *v14;
        *(void *)(v12 + 16) = *((void *)v14 + 2);
        *(_OWORD *)unint64_t v12 = v15;
        v12 += 24;
      }
      uint64_t v25 = (void *)v14 + 3;
      if (*((void *)v14 + 3) != *((void *)v14 + 4))
      {
        if (v9 >= v10)
        {
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (v9 - v8) + 1;
          if (v26 > 0xAAAAAAAAAAAAAAALL) {
LABEL_76:
          }
            abort();
          if (0x5555555555555556 * (v10 - v8) > v26) {
            unint64_t v26 = 0x5555555555555556 * (v10 - v8);
          }
          if (0xAAAAAAAAAAAAAAABLL * (v10 - v8) >= 0x555555555555555) {
            unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
          }
          if (v26 > 0xAAAAAAAAAAAAAAALL) {
LABEL_77:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          uint64_t v45 = 3 * v26;
          char v27 = (char *)operator new(24 * v26);
          uint64_t v28 = &v27[8 * (v9 - v8)];
          *((void *)v28 + 1) = 0;
          *((void *)v28 + 2) = 0;
          *(_OWORD *)uint64_t v28 = *(long long *)((char *)v14 + 24);
          *((void *)v28 + 2) = *((void *)v14 + 5);
          void *v25 = 0;
          *((void *)v14 + 4) = 0;
          *((void *)v14 + 5) = 0;
          if (v9 == v8)
          {
            uint64_t v30 = &v27[8 * (v9 - v8)];
          }
          else
          {
            char v29 = v9;
            uint64_t v30 = &v27[8 * (v9 - v8)];
            do
            {
              *((void *)v30 - 3) = 0;
              *((void *)v30 - 2) = 0;
              v30 -= 24;
              *((void *)v30 + 2) = 0;
              long long v31 = *(_OWORD *)(v29 - 3);
              v29 -= 3;
              *(_OWORD *)uint64_t v30 = v31;
              *((void *)v30 + 2) = v29[2];
              char *v29 = 0;
              v29[1] = 0;
              long long v29[2] = 0;
            }
            while (v29 != v8);
            do
            {
              v9 -= 3;
              uint64_t v53 = v9;
              std::vector<llvm::orc::shared::WrapperFunctionCall>::__destroy_vector::operator()[abi:nn180100](&v53);
            }
            while (v9 != v8);
          }
          uint64_t v10 = (void **)&v27[8 * v45];
          uint64_t v9 = (void **)(v28 + 24);
          if (v8) {
            operator delete(v8);
          }
          std::error_code v8 = (void **)v30;
          uint64_t v5 = v44;
        }
        else
        {
          *uint64_t v9 = 0;
          v9[1] = 0;
          uint64_t v9[2] = 0;
          *(_OWORD *)uint64_t v9 = *(long long *)((char *)v14 + 24);
          uint64_t v9[2] = (void *)*((void *)v14 + 5);
          void *v25 = 0;
          *((void *)v14 + 4) = 0;
          *((void *)v14 + 5) = 0;
          v9 += 3;
        }
      }
      uint64_t v53 = (void **)v14 + 3;
      std::vector<llvm::orc::shared::WrapperFunctionCall>::__destroy_vector::operator()[abi:nn180100](&v53);
      *(void *)size_t v14 = *(void *)(v5 + 80);
      *(void *)(v5 + 80) = v14;
      ++v7;
      unint64_t v13 = (unint64_t)v47;
    }
    while (v7 != v46);
    std::mutex::unlock(v42);
    if (v8 == v9)
    {
      unint64_t v32 = 0;
    }
    else
    {
      unint64_t v32 = 0;
      char v33 = v9;
      do
      {
        uint64_t v35 = (uint64_t)*(v33 - 3);
        uint64_t v34 = (uint64_t)*(v33 - 2);
        v33 -= 3;
        while (v35 != v34)
        {
          llvm::orc::shared::WrapperFunctionCall::runWithSPSRetErrorMerged((llvm::orc::shared::WrapperFunctionCall *)(v34 - 56), &v51);
          unsigned int v36 = v51;
          if (v51)
          {
            uint64_t v51 = 0;
            uint64_t v52 = v36;
            uint64_t v53 = v32;
            llvm::ErrorList::join(&v53, &v52, &v50);
            if (v52) {
              (*((void (**)(void **))*v52 + 1))(v52);
            }
            if (v53) {
              (*((void (**)(void **))*v53 + 1))(v53);
            }
            unint64_t v32 = v50;
            if (v51) {
              (*((void (**)(void **))*v51 + 1))(v51);
            }
          }
          uint64_t v37 = (uint64_t)*(v9 - 2);
          uint64_t v38 = *(void **)(v37 - 48);
          if (v38 != (void *)(v37 - 24)) {
            free(v38);
          }
          uint64_t v34 = v37 - 56;
          *(v9 - 2) = (void *)(v37 - 56);
          uint64_t v35 = (uint64_t)*(v9 - 3);
        }
        v12 -= 24;
        unint64_t v39 = (llvm *)llvm::sys::Memory::releaseMappedMemory(v12);
        if (v39)
        {
          llvm::errorCodeToError(v39, v40, &v49);
          uint64_t v52 = v49;
          uint64_t v53 = v32;
          unint64_t v49 = 0;
          llvm::ErrorList::join(&v53, &v52, &v51);
          if (v52) {
            (*((void (**)(void **))*v52 + 1))(v52);
          }
          if (v53) {
            (*((void (**)(void **))*v53 + 1))(v53);
          }
          unint64_t v32 = v51;
        }
        uint64_t v53 = v33;
        std::vector<llvm::orc::shared::WrapperFunctionCall>::__destroy_vector::operator()[abi:nn180100](&v53);
        uint64_t v9 = v33;
      }
      while (v8 != v33);
    }
    a3 = v43;
  }
  uint64_t v48 = v32;
  uint64_t v41 = a3[3];
  if ((v41 & 2) == 0) {
    a3 = (void *)*a3;
  }
  (*(void (**)(void *, void ***))(v41 & 0xFFFFFFFFFFFFFFF8))(a3, &v48);
  if (v48) {
    (*((void (**)(void **))*v48 + 1))(v48);
  }
  if (v8) {
    operator delete(v8);
  }
  if (v11) {
    operator delete(v11);
  }
}

void llvm::orc::shared::WrapperFunctionCall::runWithSPSRetErrorMerged(llvm::orc::shared::WrapperFunctionCall *this@<X0>, void *a2@<X8>)
{
  v5[0] = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  llvm::orc::shared::WrapperFunctionCall::runWithSPSRet<llvm::orc::shared::SPSError,llvm::orc::shared::detail::SPSSerializableError>((uint64_t)this, (uint64_t)v5, a2);
  if (!*a2)
  {
    std::string __p = v6;
    char v4 = HIBYTE(v8);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    if (v5[0])
    {
      getErrorErrorCat();
      uint64_t v9 = 3;
      uint64_t v10 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,std::string,std::error_code>();
    }
    *a2 = 0;
    if (v4 < 0) {
      operator delete(__p);
    }
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v6);
  }
}

void llvm::jitlink::InProcessMemoryManager::~InProcessMemoryManager(llvm::jitlink::InProcessMemoryManager *this)
{
  *(void *)this = &unk_270DBEA78;
  *((void *)this + 10) = 0;
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 88);
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
}

{
  uint64_t vars8;

  *(void *)this = &unk_270DBEA78;
  *((void *)this + 10) = 0;
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 88);
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
  JUMPOUT(0x263E500B0);
}

void std::vector<llvm::orc::shared::WrapperFunctionCall>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<llvm::orc::shared::WrapperFunctionCall>::__clear[abi:nn180100]((char **)v2);
    unsigned int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<llvm::orc::shared::WrapperFunctionCall>::__clear[abi:nn180100](char **a1)
{
  unsigned int v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    char v4 = v2 - 24;
    do
    {
      uint64_t v5 = (char *)*((void *)v4 - 3);
      if (v4 != v5) {
        free(v5);
      }
      uint64_t v6 = v4 - 32;
      v4 -= 56;
    }
    while (v6 != v3);
  }
  a1[1] = v3;
}

void llvm::orc::shared::WrapperFunctionCall::runWithSPSRet<llvm::orc::shared::SPSError,llvm::orc::shared::detail::SPSSerializableError>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (void *)(*(uint64_t (**)(void, void))a1)(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v10 = v5;
  unint64_t v11 = v6;
  if (v6)
  {
    uint64_t v7 = &v10;
    if (v6 > 8) {
      uint64_t v7 = (void **)v5;
    }
  }
  else
  {
    if (v5)
    {
      getErrorErrorCat();
      uint64_t v8 = 3;
      uint64_t v9 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    uint64_t v7 = &v10;
  }
  uint64_t v8 = (uint64_t)v7;
  uint64_t v9 = (void (**)(_anonymous_namespace_::ErrorErrorCategory *__hidden))v6;
  if (!llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSError,llvm::orc::shared::detail::SPSSerializableError,void>::deserialize(&v8, a2))
  {
    getErrorErrorCat();
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
  }
  *a3 = 0;
  if (v11 > 8 || !v11 && v10) {
    free(v10);
  }
}

unint64_t llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v5 = v3 + 1;
    unint64_t v6 = *(void *)a1 + 104 * v3;
    if (*(void *)a1 <= a2 && v6 > a2)
    {
      unint64_t v8 = a2 - *(void *)a1;
      llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::grow(a1, v5);
      return *(void *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::grow(a1, v5);
    }
  }
  return a2;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,false>(unint64_t result, void *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (void *)result;
LABEL_2:
  uint64_t v10 = a2 - 1;
  unint64_t v11 = (unint64_t)v9;
  while (1)
  {
    uint64_t v9 = (void *)v11;
    uint64_t v12 = (uint64_t)a2 - v11;
    unint64_t v13 = (uint64_t)((uint64_t)a2 - v11) >> 3;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v65 = (void *)*(a2 - 1);
          uint64_t v66 = *(void **)v11;
          unsigned int v67 = *(_DWORD *)(v65[2] + 24);
          unsigned int v68 = *(_DWORD *)(*(void *)(*(void *)v11 + 16) + 24);
          BOOL v69 = v67 >= v68;
          if (v67 == v68)
          {
            BOOL v69 = *v65 >= *v66;
            if (*v65 == *v66) {
              BOOL v69 = v65[4] >= v66[4];
            }
          }
          if (!v69)
          {
            *(void *)unint64_t v11 = v65;
            *(a2 - 1) = v66;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(v11, v11 + 8, (uint64_t)(a2 - 1));
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(v11, v11 + 8, v11 + 16, (uint64_t)(a2 - 1));
          break;
        case 5uLL:
          uint64_t result = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,0>(v11, v11 + 8, v11 + 16, v11 + 24, (uint64_t)(a2 - 1));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if ((void *)v11 == a2) {
        return result;
      }
      int64_t v87 = (v13 - 2) >> 1;
      int64_t v88 = v87;
      do
      {
        int64_t v89 = v88;
        if (v87 >= v88)
        {
          uint64_t v90 = (2 * v88) | 1;
          unsigned int v91 = (unint64_t **)(v11 + 8 * v90);
          if (2 * v89 + 2 < (uint64_t)v13)
          {
            long long v92 = v91[1];
            uint64_t v93 = *v91;
            uint64_t result = *(unsigned int *)((*v91)[2] + 24);
            unsigned int v94 = *(_DWORD *)(v92[2] + 24);
            BOOL v95 = result >= v94;
            if (result == v94)
            {
              uint64_t result = *v93;
              BOOL v95 = *v93 >= *v92;
              if (*v93 == *v92) {
                BOOL v95 = v93[4] >= v92[4];
              }
            }
            if (!v95)
            {
              ++v91;
              uint64_t v90 = 2 * v89 + 2;
            }
          }
          uint64_t v96 = *(unint64_t **)(v11 + 8 * v89);
          unint64_t v97 = *v91;
          unsigned int v98 = *(_DWORD *)((*v91)[2] + 24);
          unsigned int v99 = *(_DWORD *)(v96[2] + 24);
          BOOL v100 = v98 >= v99;
          if (v98 == v99)
          {
            BOOL v100 = *v97 >= *v96;
            if (*v97 == *v96) {
              BOOL v100 = v97[4] >= v96[4];
            }
          }
          if (v100)
          {
            *(void *)(v11 + 8 * v89) = v97;
            while (1)
            {
              if (v87 < v90) {
                goto LABEL_176;
              }
              uint64_t v101 = v91;
              uint64_t v102 = 2 * v90;
              uint64_t v90 = (2 * v90) | 1;
              unsigned int v91 = (unint64_t **)(v11 + 8 * v90);
              uint64_t v103 = v102 + 2;
              if (v103 < (uint64_t)v13)
              {
                long long v104 = v91[1];
                __n128 v105 = *v91;
                unsigned int v106 = *(_DWORD *)((*v91)[2] + 24);
                unsigned int v107 = *(_DWORD *)(v104[2] + 24);
                BOOL v108 = v106 >= v107;
                if (v106 == v107)
                {
                  BOOL v108 = *v105 >= *v104;
                  if (*v105 == *v104) {
                    BOOL v108 = v105[4] >= v104[4];
                  }
                }
                if (!v108)
                {
                  ++v91;
                  uint64_t v90 = v103;
                }
              }
              uint64_t v109 = *v91;
              unsigned int v110 = *(_DWORD *)((*v91)[2] + 24);
              uint64_t result = *(unsigned int *)(v96[2] + 24);
              BOOL v111 = v110 >= result;
              if (v110 == result)
              {
                uint64_t result = *v96;
                BOOL v111 = *v109 >= *v96;
                if (*v109 == *v96)
                {
                  uint64_t result = v96[4];
                  BOOL v111 = v109[4] >= result;
                }
              }
              if (!v111) {
                break;
              }
              void *v101 = v109;
            }
            unsigned int v91 = v101;
LABEL_176:
            std::__shared_weak_count_vtbl *v91 = v96;
          }
        }
        int64_t v88 = v89 - 1;
      }
      while (v89);
      uint64_t v112 = (unint64_t)v12 >> 3;
      while (1)
      {
        uint64_t v113 = 0;
        long long v114 = *(void **)v11;
        long long v115 = (void *)v11;
        do
        {
          long long v116 = v115;
          v115 += v113 + 1;
          uint64_t v117 = 2 * v113;
          uint64_t v113 = (2 * v113) | 1;
          uint64_t v118 = v117 + 2;
          if (v118 < v112)
          {
            long long v119 = (unint64_t *)v115[1];
            long long v120 = (unint64_t *)*v115;
            uint64_t result = *(unsigned int *)(*(void *)(*v115 + 16) + 24);
            unsigned int v121 = *(_DWORD *)(v119[2] + 24);
            BOOL v122 = result >= v121;
            if (result == v121)
            {
              uint64_t result = *v120;
              BOOL v122 = *v120 >= *v119;
              if (*v120 == *v119) {
                BOOL v122 = v120[4] >= v119[4];
              }
            }
            if (!v122)
            {
              ++v115;
              uint64_t v113 = v118;
            }
          }
          void *v116 = *v115;
        }
        while (v113 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
        if (v115 != --a2)
        {
          *long long v115 = *a2;
          *a2 = v114;
          uint64_t v123 = (uint64_t)v115 - v11 + 8;
          if (v123 < 9) {
            goto LABEL_201;
          }
          unint64_t v124 = ((unint64_t)v123 >> 3) - 2;
          unint64_t v125 = v124 >> 1;
          uint64_t v126 = (void *)(v11 + 8 * (v124 >> 1));
          uint64_t v127 = (void *)*v126;
          long long v114 = (void *)*v115;
          unsigned int v128 = *(_DWORD *)(*(void *)(*v126 + 16) + 24);
          unsigned int v129 = *(_DWORD *)(*(void *)(*v115 + 16) + 24);
          BOOL v130 = v128 >= v129;
          if (v128 == v129)
          {
            BOOL v130 = *v127 >= *v114;
            if (*v127 == *v114) {
              BOOL v130 = v127[4] >= v114[4];
            }
          }
          if (v130) {
            goto LABEL_201;
          }
          *long long v115 = v127;
          if (v124 >= 2)
          {
            while (1)
            {
              unint64_t v131 = v125 - 1;
              unint64_t v125 = (v125 - 1) >> 1;
              long long v115 = (void *)(v11 + 8 * v125);
              char v132 = (void *)*v115;
              unsigned int v133 = *(_DWORD *)(*(void *)(*v115 + 16) + 24);
              unsigned int v134 = *(_DWORD *)(v114[2] + 24);
              BOOL v135 = v133 >= v134;
              if (v133 == v134)
              {
                BOOL v135 = *v132 >= *v114;
                if (*v132 == *v114) {
                  BOOL v135 = v132[4] >= v114[4];
                }
              }
              if (v135) {
                break;
              }
              void *v126 = v132;
              uint64_t v126 = (void *)(v11 + 8 * v125);
              if (v131 <= 1) {
                goto LABEL_200;
              }
            }
          }
          long long v115 = v126;
        }
LABEL_200:
        *long long v115 = v114;
LABEL_201:
        if (v112-- <= 2) {
          return result;
        }
      }
    }
    unint64_t v14 = v13 >> 1;
    long long v15 = (void *)(v11 + 8 * (v13 >> 1));
    if ((unint64_t)v12 >= 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>((uint64_t)v9, (uint64_t)&v9[v13 >> 1], (uint64_t)(a2 - 1));
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>((uint64_t)(v9 + 1), (uint64_t)(v15 - 1), (uint64_t)(a2 - 2));
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>((uint64_t)(v9 + 2), (uint64_t)&v9[v14 + 1], (uint64_t)(a2 - 3));
      uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>((uint64_t)(v15 - 1), (uint64_t)v15, (uint64_t)&v9[v14 + 1]);
      unint64_t v16 = (void *)*v9;
      *uint64_t v9 = *v15;
      *long long v15 = v16;
    }
    else
    {
      uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>((uint64_t)&v9[v13 >> 1], (uint64_t)v9, (uint64_t)(a2 - 1));
    }
    --a3;
    unint64_t v17 = (void *)*v9;
    if (a4)
    {
      unsigned int v18 = *(_DWORD *)(v17[2] + 24);
      goto LABEL_17;
    }
    uint64_t v19 = (void *)*(v9 - 1);
    unsigned int v18 = *(_DWORD *)(v19[2] + 24);
    unsigned int v20 = *(_DWORD *)(v17[2] + 24);
    BOOL v21 = v18 >= v20;
    if (v18 == v20)
    {
      BOOL v21 = *v19 >= *v17;
      if (*v19 == *v17) {
        BOOL v21 = v19[4] >= v17[4];
      }
    }
    else
    {
      unsigned int v18 = *(_DWORD *)(v17[2] + 24);
    }
    if (v21)
    {
      uint64_t v44 = (void *)*v10;
      unsigned int v45 = *(_DWORD *)(*(void *)(*v10 + 16) + 24);
      BOOL v46 = v20 >= v45;
      if (v20 == v45)
      {
        BOOL v46 = *v17 >= *v44;
        if (*v17 == *v44) {
          BOOL v46 = v17[4] >= v44[4];
        }
      }
      unint64_t v11 = (unint64_t)(v9 + 1);
      if (v46)
      {
        while (v11 < (unint64_t)a2)
        {
          uint64_t v50 = *(void **)v11;
          unsigned int v51 = *(_DWORD *)(*(void *)(*(void *)v11 + 16) + 24);
          BOOL v52 = v20 >= v51;
          if (v20 == v51)
          {
            BOOL v52 = *v17 >= *v50;
            if (*v17 == *v50) {
              BOOL v52 = v17[4] >= v50[4];
            }
          }
          if (!v52) {
            break;
          }
          v11 += 8;
        }
      }
      else
      {
        while (1)
        {
          unint64_t v47 = *(void **)v11;
          unsigned int v48 = *(_DWORD *)(*(void *)(*(void *)v11 + 16) + 24);
          BOOL v49 = v20 >= v48;
          if (v20 == v48)
          {
            BOOL v49 = *v17 >= *v47;
            if (*v17 == *v47) {
              BOOL v49 = v17[4] >= v47[4];
            }
          }
          if (!v49) {
            break;
          }
          v11 += 8;
        }
      }
      uint64_t i = (void **)a2;
      if (v11 < (unint64_t)a2)
      {
        for (uint64_t i = (void **)(a2 - 1); ; --i)
        {
          BOOL v54 = v20 >= v45;
          if (v20 == v45)
          {
            BOOL v54 = *v17 >= *v44;
            if (*v17 == *v44) {
              BOOL v54 = v17[4] >= v44[4];
            }
          }
          if (v54) {
            break;
          }
          uint64_t v55 = *(i - 1);
          uint64_t v44 = v55;
          unsigned int v45 = *(_DWORD *)(v55[2] + 24);
        }
      }
      if (v11 < (unint64_t)i)
      {
        unint64_t v56 = *(void **)v11;
        uint64_t v57 = *i;
        do
        {
          *(void *)unint64_t v11 = v57;
          v11 += 8;
          void *i = v56;
          unsigned int v58 = *(_DWORD *)(v17[2] + 24);
          while (1)
          {
            unint64_t v56 = *(void **)v11;
            unsigned int v59 = *(_DWORD *)(*(void *)(*(void *)v11 + 16) + 24);
            BOOL v60 = v58 >= v59;
            if (v58 == v59)
            {
              BOOL v60 = *v17 >= *v56;
              if (*v17 == *v56) {
                BOOL v60 = v17[4] >= v56[4];
              }
            }
            if (!v60) {
              break;
            }
            v11 += 8;
          }
          do
          {
            uint64_t v61 = *--i;
            uint64_t v57 = v61;
            unsigned int v62 = *(_DWORD *)(v61[2] + 24);
            BOOL v63 = v58 >= v62;
            if (v58 == v62)
            {
              BOOL v63 = *v17 >= *v57;
              if (*v17 == *v57) {
                BOOL v63 = v17[4] >= v57[4];
              }
            }
          }
          while (!v63);
        }
        while (v11 < (unint64_t)i);
      }
      uint64_t v64 = (void *)(v11 - 8);
      BOOL v4 = v11 - 8 >= (unint64_t)v9;
      BOOL v5 = v11 - 8 == (void)v9;
      if ((void *)(v11 - 8) != v9) {
        *uint64_t v9 = *v64;
      }
      a4 = 0;
      *uint64_t v64 = v17;
    }
    else
    {
LABEL_17:
      for (uint64_t j = 0; ; ++j)
      {
        long long v23 = (void *)v9[j + 1];
        unsigned int v24 = *(_DWORD *)(v23[2] + 24);
        BOOL v25 = v24 >= v18;
        if (v24 == v18)
        {
          BOOL v25 = *v23 >= *v17;
          if (*v23 == *v17) {
            BOOL v25 = v23[4] >= v17[4];
          }
        }
        if (v25) {
          break;
        }
      }
      unint64_t v26 = &v9[j];
      unint64_t v27 = (unint64_t)&v9[j + 1];
      k = a2 - 1;
      if (j * 8)
      {
        while (1)
        {
          char v29 = (void *)*k;
          unsigned int v30 = *(_DWORD *)(*(void *)(*k + 16) + 24);
          BOOL v31 = v30 >= v18;
          if (v30 == v18)
          {
            BOOL v31 = *v29 >= *v17;
            if (*v29 == *v17) {
              BOOL v31 = v29[4] >= v17[4];
            }
          }
          if (!v31) {
            break;
          }
          --k;
        }
      }
      else
      {
        k = a2;
        if (v27 < (unint64_t)a2)
        {
          for (k = a2 - 1; ; --k)
          {
            unint64_t v32 = (void *)*k;
            unsigned int v33 = *(_DWORD *)(*(void *)(*k + 16) + 24);
            if (v33 == v18)
            {
              if (*v32 == *v17)
              {
                if (v27 >= (unint64_t)k || v32[4] < v17[4]) {
                  break;
                }
              }
              else if (v27 >= (unint64_t)k || *v32 < *v17)
              {
                break;
              }
            }
            else if (v27 >= (unint64_t)k || v33 < v18)
            {
              break;
            }
          }
        }
      }
      if (v27 < (unint64_t)k)
      {
        uint64_t v34 = (void *)*k;
        unint64_t v35 = v27;
        unsigned int v36 = k;
        do
        {
          *(void *)unint64_t v35 = v34;
          v35 += 8;
          *unsigned int v36 = v23;
          unsigned int v37 = *(_DWORD *)(v17[2] + 24);
          while (1)
          {
            long long v23 = *(void **)v35;
            unsigned int v38 = *(_DWORD *)(*(void *)(*(void *)v35 + 16) + 24);
            BOOL v39 = v38 >= v37;
            if (v38 == v37)
            {
              BOOL v39 = *v23 >= *v17;
              if (*v23 == *v17) {
                BOOL v39 = v23[4] >= v17[4];
              }
            }
            if (v39) {
              break;
            }
            v35 += 8;
          }
          do
          {
            std::error_code v40 = (void *)*--v36;
            uint64_t v34 = v40;
            unsigned int v41 = *(_DWORD *)(v40[2] + 24);
            BOOL v42 = v41 >= v37;
            if (v41 == v37)
            {
              BOOL v42 = *v34 >= *v17;
              if (*v34 == *v17) {
                BOOL v42 = v34[4] >= v17[4];
              }
            }
          }
          while (v42);
        }
        while (v35 < (unint64_t)v36);
        unint64_t v26 = (void *)(v35 - 8);
      }
      if (v26 != v9) {
        *uint64_t v9 = *v26;
      }
      void *v26 = v17;
      if (v27 < (unint64_t)k)
      {
LABEL_62:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,false>(v9, v26, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = (unint64_t)(v26 + 1);
      }
      else
      {
        BOOL v43 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>((uint64_t)v9, (uint64_t)v26);
        unint64_t v11 = (unint64_t)(v26 + 1);
        uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>((uint64_t)(v26 + 1), (uint64_t)a2);
        if (result)
        {
          a2 = v26;
          if (v43) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v43) {
          goto LABEL_62;
        }
      }
    }
  }
  uint64_t v70 = (void *)(v11 + 8);
  BOOL v72 = (void *)v11 == a2 || v70 == a2;
  if ((a4 & 1) == 0)
  {
    if (!v72)
    {
      do
      {
        unint64_t v137 = v9;
        uint64_t v9 = v70;
        int v139 = (void *)*v137;
        uint64_t v138 = (void *)v137[1];
        unsigned int v140 = *(_DWORD *)(v138[2] + 24);
        unsigned int v141 = *(_DWORD *)(*(void *)(*v137 + 16) + 24);
        BOOL v142 = v140 >= v141;
        if (v140 == v141)
        {
          BOOL v142 = *v138 >= *v139;
          if (*v138 == *v139) {
            BOOL v142 = v138[4] >= v139[4];
          }
        }
        if (!v142)
        {
          do
          {
            uint64_t v143 = v137;
            uint64_t v144 = (void *)*--v137;
            v137[2] = v139;
            int v139 = v144;
            unsigned int v145 = *(_DWORD *)(v138[2] + 24);
            unsigned int v146 = *(_DWORD *)(v144[2] + 24);
            BOOL v147 = v145 >= v146;
            if (v145 == v146)
            {
              BOOL v147 = *v138 >= *v139;
              if (*v138 == *v139) {
                BOOL v147 = v138[4] >= v139[4];
              }
            }
          }
          while (!v147);
          *uint64_t v143 = v138;
        }
        uint64_t v70 = v9 + 1;
      }
      while (v9 + 1 != a2);
    }
    return result;
  }
  if (v72) {
    return result;
  }
  uint64_t v73 = 0;
  uint64_t v74 = (void *)v11;
  while (2)
  {
    unsigned int v75 = v74;
    uint64_t v74 = v70;
    uint64_t v77 = (void *)*v75;
    uint64_t v76 = (void *)v75[1];
    unsigned int v78 = *(_DWORD *)(v76[2] + 24);
    unsigned int v79 = *(_DWORD *)(*(void *)(*v75 + 16) + 24);
    BOOL v80 = v78 >= v79;
    if (v78 == v79)
    {
      BOOL v80 = *v76 >= *v77;
      if (*v76 == *v77) {
        BOOL v80 = v76[4] >= v77[4];
      }
    }
    if (v80) {
      goto LABEL_146;
    }
    v75[1] = v77;
    uint64_t v81 = (void *)v11;
    if (v75 == (void *)v11) {
      goto LABEL_145;
    }
    uint64_t v82 = v73;
    while (2)
    {
      uint64_t v83 = *(void **)(v11 + v82 - 8);
      unsigned int v84 = *(_DWORD *)(v76[2] + 24);
      unsigned int v85 = *(_DWORD *)(v83[2] + 24);
      BOOL v86 = v84 >= v85;
      if (v84 == v85)
      {
        BOOL v86 = *v76 >= *v83;
        if (*v76 == *v83)
        {
          if (v76[4] >= v83[4])
          {
            uint64_t v81 = (void *)(v11 + v82);
            goto LABEL_145;
          }
LABEL_142:
          --v75;
          *(void *)(v11 + v82) = v83;
          v82 -= 8;
          if (!v82)
          {
            uint64_t v81 = (void *)v11;
            goto LABEL_145;
          }
          continue;
        }
      }
      break;
    }
    if (!v86) {
      goto LABEL_142;
    }
    uint64_t v81 = v75;
LABEL_145:
    void *v81 = v76;
LABEL_146:
    uint64_t v70 = v74 + 1;
    v73 += 8;
    if (v74 + 1 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(a1, a2, a3, a4);
  unint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void **)a4;
  unsigned int v13 = *(_DWORD *)(*(void *)(*(void *)a5 + 16) + 24);
  unsigned int v14 = *(_DWORD *)(*(void *)(*(void *)a4 + 16) + 24);
  BOOL v15 = v13 >= v14;
  if (v13 == v14)
  {
    BOOL v15 = *v11 >= *v12;
    if (*v11 == *v12) {
      BOOL v15 = v11[4] >= v12[4];
    }
  }
  if (!v15)
  {
    *(void *)a4 = v11;
    *(void *)a5 = v12;
    unint64_t v16 = *(void **)a4;
    unint64_t v17 = *(void **)a3;
    unsigned int v18 = *(_DWORD *)(*(void *)(*(void *)a4 + 16) + 24);
    unsigned int v19 = *(_DWORD *)(*(void *)(*(void *)a3 + 16) + 24);
    BOOL v20 = v18 >= v19;
    if (v18 == v19)
    {
      BOOL v20 = *v16 >= *v17;
      if (*v16 == *v17) {
        BOOL v20 = v16[4] >= v17[4];
      }
    }
    if (!v20)
    {
      *(void *)a3 = v16;
      *(void *)a4 = v17;
      BOOL v21 = *(void **)a3;
      uint64_t v22 = *(void **)a2;
      unsigned int v23 = *(_DWORD *)(*(void *)(*(void *)a3 + 16) + 24);
      unsigned int v24 = *(_DWORD *)(*(void *)(*(void *)a2 + 16) + 24);
      BOOL v25 = v23 >= v24;
      if (v23 == v24)
      {
        BOOL v25 = *v21 >= *v22;
        if (*v21 == *v22) {
          BOOL v25 = v21[4] >= v22[4];
        }
      }
      if (!v25)
      {
        *(void *)a2 = v21;
        *(void *)a3 = v22;
        unint64_t v26 = *(void **)a2;
        unint64_t v27 = *(void **)a1;
        unsigned int v28 = *(_DWORD *)(*(void *)(*(void *)a2 + 16) + 24);
        unsigned int v29 = *(_DWORD *)(*(void *)(*(void *)a1 + 16) + 24);
        BOOL v30 = v28 >= v29;
        if (v28 == v29)
        {
          BOOL v30 = *v26 >= *v27;
          if (*v26 == *v27) {
            BOOL v30 = v26[4] >= v27[4];
          }
        }
        if (!v30)
        {
          *(void *)a1 = v26;
          *(void *)a2 = v27;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)a2;
  BOOL v4 = *(void **)result;
  unsigned int v5 = *(_DWORD *)(*(void *)(*(void *)a2 + 16) + 24);
  unsigned int v6 = *(_DWORD *)(*(void *)(*(void *)result + 16) + 24);
  BOOL v7 = v5 >= v6;
  if (v5 == v6)
  {
    BOOL v7 = *v3 >= *v4;
    if (*v3 == *v4) {
      BOOL v7 = v3[4] >= v4[4];
    }
  }
  if (v7)
  {
    unint64_t v11 = *(void **)a3;
    unsigned int v12 = *(_DWORD *)(*(void *)(*(void *)a3 + 16) + 24);
    BOOL v13 = v12 >= v5;
    if (v12 == v5)
    {
      BOOL v13 = *v11 >= *v3;
      if (*v11 == *v3) {
        BOOL v13 = v11[4] >= v3[4];
      }
    }
    if (!v13)
    {
      *(void *)a2 = v11;
      *(void *)a3 = v3;
      unsigned int v14 = *(void **)a2;
      BOOL v15 = *(void **)result;
      unsigned int v16 = *(_DWORD *)(*(void *)(*(void *)a2 + 16) + 24);
      unsigned int v17 = *(_DWORD *)(*(void *)(*(void *)result + 16) + 24);
      BOOL v18 = v16 >= v17;
      if (v16 == v17)
      {
        BOOL v18 = *v14 >= *v15;
        if (*v14 == *v15) {
          BOOL v18 = v14[4] >= v15[4];
        }
      }
      if (!v18)
      {
        *(void *)uint64_t result = v14;
        *(void *)a2 = v15;
      }
    }
  }
  else
  {
    unint64_t v8 = *(void **)a3;
    unsigned int v9 = *(_DWORD *)(*(void *)(*(void *)a3 + 16) + 24);
    BOOL v10 = v9 >= v5;
    if (v9 == v5)
    {
      BOOL v10 = *v8 >= *v3;
      if (*v8 == *v3) {
        BOOL v10 = v8[4] >= v3[4];
      }
    }
    if (!v10)
    {
      *(void *)uint64_t result = v8;
LABEL_25:
      *(void *)a3 = v4;
      return result;
    }
    *(void *)uint64_t result = v3;
    *(void *)a2 = v4;
    unsigned int v19 = *(void **)a3;
    unsigned int v20 = *(_DWORD *)(*(void *)(*(void *)a3 + 16) + 24);
    unsigned int v21 = *(_DWORD *)(v4[2] + 24);
    BOOL v22 = v20 >= v21;
    if (v20 == v21)
    {
      BOOL v22 = *v19 >= *v4;
      if (*v19 == *v4) {
        BOOL v22 = v19[4] >= v4[4];
      }
    }
    if (!v22)
    {
      *(void *)a2 = v19;
      goto LABEL_25;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(void **)(a2 - 8);
      BOOL v7 = *(void **)a1;
      unsigned int v8 = *(_DWORD *)(v6[2] + 24);
      unsigned int v9 = *(_DWORD *)(*(void *)(*(void *)a1 + 16) + 24);
      BOOL v10 = v8 >= v9;
      if (v8 == v9)
      {
        BOOL v10 = *v6 >= *v7;
        if (*v6 == *v7) {
          BOOL v10 = v6[4] >= v7[4];
        }
      }
      if (!v10)
      {
        *(void *)a1 = v6;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(a1, a1 + 8, a2 - 8);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,0>(a1, a1 + 8, a1 + 16, a1 + 24, a2 - 8);
      return 1;
    default:
      unint64_t v11 = (void *)(a1 + 16);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(a1, a1 + 8, a1 + 16);
      uint64_t v12 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  do
  {
    BOOL v15 = *(void **)v12;
    unsigned int v16 = (void *)*v11;
    unsigned int v17 = *(_DWORD *)(*(void *)(*(void *)v12 + 16) + 24);
    unsigned int v18 = *(_DWORD *)(*(void *)(*v11 + 16) + 24);
    BOOL v19 = v17 >= v18;
    if (v17 == v18)
    {
      BOOL v19 = *v15 >= *v16;
      if (*v15 == *v16) {
        BOOL v19 = v15[4] >= v16[4];
      }
    }
    if (v19) {
      goto LABEL_26;
    }
    *(void *)uint64_t v12 = v16;
    unsigned int v20 = (void *)a1;
    if (v11 == (void *)a1) {
      goto LABEL_25;
    }
    uint64_t v21 = v13;
    while (1)
    {
      BOOL v22 = *(void **)(a1 + v21 + 8);
      unsigned int v23 = *(_DWORD *)(v15[2] + 24);
      unsigned int v24 = *(_DWORD *)(v22[2] + 24);
      BOOL v25 = v23 >= v24;
      if (v23 != v24) {
        goto LABEL_18;
      }
      if (*v15 == *v22)
      {
        BOOL v25 = v15[4] >= v22[4];
LABEL_18:
        if (v25)
        {
          unsigned int v20 = v11;
          goto LABEL_25;
        }
        goto LABEL_22;
      }
      if (*v15 >= *v22) {
        break;
      }
LABEL_22:
      --v11;
      *(void *)(a1 + v21 + 16) = v22;
      v21 -= 8;
      if (v21 == -16)
      {
        unsigned int v20 = (void *)a1;
        goto LABEL_25;
      }
    }
    unsigned int v20 = (void *)(a1 + v21 + 16);
LABEL_25:
    *unsigned int v20 = v15;
    if (++v14 == 8) {
      return v12 + 8 == a2;
    }
LABEL_26:
    unint64_t v11 = (void *)v12;
    v13 += 8;
    v12 += 8;
  }
  while (v12 != a2);
  return 1;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(a1, a2, a3);
  unsigned int v9 = *(void **)a4;
  BOOL v10 = *(void **)a3;
  unsigned int v11 = *(_DWORD *)(*(void *)(*(void *)a4 + 16) + 24);
  unsigned int v12 = *(_DWORD *)(*(void *)(*(void *)a3 + 16) + 24);
  BOOL v13 = v11 >= v12;
  if (v11 == v12)
  {
    BOOL v13 = *v9 >= *v10;
    if (*v9 == *v10) {
      BOOL v13 = v9[4] >= v10[4];
    }
  }
  if (!v13)
  {
    *(void *)a3 = v9;
    *(void *)a4 = v10;
    int v14 = *(void **)a3;
    BOOL v15 = *(void **)a2;
    unsigned int v16 = *(_DWORD *)(*(void *)(*(void *)a3 + 16) + 24);
    unsigned int v17 = *(_DWORD *)(*(void *)(*(void *)a2 + 16) + 24);
    BOOL v18 = v16 >= v17;
    if (v16 == v17)
    {
      BOOL v18 = *v14 >= *v15;
      if (*v14 == *v15) {
        BOOL v18 = v14[4] >= v15[4];
      }
    }
    if (!v18)
    {
      *(void *)a2 = v14;
      *(void *)a3 = v15;
      BOOL v19 = *(void **)a2;
      unsigned int v20 = *(void **)a1;
      unsigned int v21 = *(_DWORD *)(*(void *)(*(void *)a2 + 16) + 24);
      unsigned int v22 = *(_DWORD *)(*(void *)(*(void *)a1 + 16) + 24);
      BOOL v23 = v21 >= v22;
      if (v21 == v22)
      {
        BOOL v23 = *v19 >= *v20;
        if (*v19 == *v20) {
          BOOL v23 = v19[4] >= v20[4];
        }
      }
      if (!v23)
      {
        *(void *)a1 = v19;
        *(void *)a2 = v20;
      }
    }
  }
  return result;
}

void llvm::jitlink::InProcessMemoryManager::IPInFlightAlloc::~IPInFlightAlloc(llvm::jitlink::InProcessMemoryManager::IPInFlightAlloc *this)
{
  *(void *)this = &unk_270DBEAA8;
  llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)this + 32);
}

{
  uint64_t vars8;

  *(void *)this = &unk_270DBEAA8;
  llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)this + 32);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::jitlink::InProcessMemoryManager::IPInFlightAlloc::abandon(uint64_t a1, void *a2)
{
  uint64_t v4 = (llvm *)llvm::sys::Memory::releaseMappedMemory(a1 + 488);
  if (v4)
  {
    llvm::errorCodeToError(v4, v5, &v13);
    BOOL v15 = v13;
    unsigned int v16 = 0;
    llvm::ErrorList::join(&v16, &v15, &v14);
    if (v15) {
      (*((void (**)(void **))*v15 + 1))(v15);
    }
    if (v16) {
      (*((void (**)(void **))*v16 + 1))(v16);
    }
    unsigned int v6 = v14;
  }
  else
  {
    unsigned int v6 = 0;
  }
  BOOL v7 = (llvm *)llvm::sys::Memory::releaseMappedMemory(a1 + 464);
  if (v7)
  {
    llvm::errorCodeToError(v7, v8, &v12);
    BOOL v15 = v12;
    unsigned int v16 = v6;
    llvm::ErrorList::join(&v16, &v15, &v14);
    if (v15) {
      (*((void (**)(void **))*v15 + 1))(v15);
    }
    if (v16) {
      (*((void (**)(void **))*v16 + 1))(v16);
    }
    unsigned int v6 = v14;
  }
  unsigned int v11 = v6;
  uint64_t v9 = a2[3];
  if ((v9 & 2) == 0) {
    a2 = (void *)*a2;
  }
  (*(void (**)(void *, void ***))(v9 & 0xFFFFFFFFFFFFFFF8))(a2, &v11);
  uint64_t result = (uint64_t)v11;
  if (v11) {
    return (*((uint64_t (**)(void **))*v11 + 1))(v11);
  }
  return result;
}

void llvm::jitlink::InProcessMemoryManager::IPInFlightAlloc::finalize(uint64_t a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = v5 + 104 * v4;
    while (1)
    {
      unsigned int v7 = *(unsigned char *)v5 & 7;
      unint64_t v8 = (unint64_t)(*(void *)(v5 + 16) + *(void *)(v5 + 24) + *(void *)(*(void *)(a1 + 8) + 8) - 1)
         / *(void *)(*(void *)(a1 + 8) + 8)
         * *(void *)(*(void *)(a1 + 8) + 8);
      *(void *)&long long v36 = *(void *)(v5 + 40);
      *((void *)&v36 + 1) = v8;
      LODWORD(v37) = 0;
      uint64_t v9 = (llvm *)llvm::sys::Memory::protectMappedMemory((uint64_t)&v36, v7 << 24);
      if (v9) {
        break;
      }
      if (v7 >= 4) {
        sys_icache_invalidate((void *)v36, *((size_t *)&v36 + 1));
      }
      v5 += 104;
      if (v5 == v6) {
        goto LABEL_14;
      }
    }
    llvm::errorCodeToError(v9, v10, &v29);
    if (v29)
    {
      char v40 = -1;
      BOOL v39 = v29;
      uint64_t v11 = a2[3];
      if ((v11 & 2) == 0) {
        a2 = (void *)*a2;
      }
      (*(void (**)(void *, void ***))(v11 & 0xFFFFFFFFFFFFFFF8))(a2, &v39);
      if ((v40 & 1) == 0) {
        return;
      }
      unsigned int v12 = v39;
      BOOL v39 = 0;
      if (!v12) {
        return;
      }
LABEL_38:
      (*((void (**)(void **))*v12 + 1))(v12);
      return;
    }
  }
LABEL_14:
  llvm::orc::shared::runFinalizeActions((void *)(*(void *)(a1 + 16) + 256), (uint64_t)&v36);
  if (v38)
  {
    uint64_t v17 = v36;
    *(void *)&long long v36 = 0;
    char v35 = -1;
    uint64_t v34 = v17;
    uint64_t v18 = a2[3];
    if ((v18 & 2) == 0) {
      a2 = (void *)*a2;
    }
    (*(void (**)(void *, uint64_t *))(v18 & 0xFFFFFFFFFFFFFFF8))(a2, &v34);
    if (v35)
    {
      uint64_t v16 = v34;
      uint64_t v34 = 0;
      if (v16) {
        goto LABEL_25;
      }
    }
  }
  else
  {
    BOOL v13 = (llvm *)llvm::sys::Memory::releaseMappedMemory(a1 + 488);
    if (v13)
    {
      llvm::errorCodeToError(v13, v14, &v28);
      char v33 = -1;
      uint64_t v32 = v28;
      uint64_t v15 = a2[3];
      if ((v15 & 2) == 0) {
        a2 = (void *)*a2;
      }
      (*(void (**)(void *, uint64_t *))(v15 & 0xFFFFFFFFFFFFFFF8))(a2, &v32);
      if ((v33 & 1) == 0) {
        goto LABEL_35;
      }
      uint64_t v16 = v32;
      uint64_t v32 = 0;
      if (!v16) {
        goto LABEL_35;
      }
LABEL_25:
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      goto LABEL_35;
    }
    uint64_t v19 = *(void *)(a1 + 8);
    long long v26 = *(_OWORD *)(a1 + 464);
    uint64_t v27 = *(void *)(a1 + 480);
    long long v24 = v36;
    uint64_t v20 = v37;
    long long v36 = 0uLL;
    uint64_t v37 = 0;
    std::mutex::lock((std::mutex *)(v19 + 16));
    unint64_t v21 = *(void *)(v19 + 80);
    if (v21) {
      *(void *)(v19 + 80) = *(void *)v21;
    }
    else {
      unint64_t v21 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v19 + 88, 48, 3);
    }
    *(_OWORD *)unint64_t v21 = v26;
    *(_DWORD *)(v21 + 16) = v27;
    *(_OWORD *)(v21 + 24) = v24;
    *(void *)(v21 + 40) = v20;
    memset(v25, 0, sizeof(v25));
    std::mutex::unlock((std::mutex *)(v19 + 16));
    char v31 = 0;
    unint64_t v30 = v21;
    uint64_t v22 = a2[3];
    if ((v22 & 2) == 0) {
      a2 = (void *)*a2;
    }
    (*(void (**)(void *, unint64_t *))(v22 & 0xFFFFFFFFFFFFFFF8))(a2, &v30);
    if (v31)
    {
      unint64_t v23 = v30;
      unint64_t v30 = 0;
      if (v23) {
        (*(void (**)(unint64_t))(*(void *)v23 + 8))(v23);
      }
    }
    unsigned int v29 = (void **)v25;
    std::vector<llvm::orc::shared::WrapperFunctionCall>::__destroy_vector::operator()[abi:nn180100](&v29);
  }
LABEL_35:
  if ((v38 & 1) == 0)
  {
    unsigned int v29 = (void **)&v36;
    std::vector<llvm::orc::shared::WrapperFunctionCall>::__destroy_vector::operator()[abi:nn180100](&v29);
    return;
  }
  unsigned int v12 = (void **)v36;
  *(void *)&long long v36 = 0;
  if (v12) {
    goto LABEL_38;
  }
}

uint64_t llvm::jitlink::ObjCStubsBuilderBase::initialize@<X0>(llvm::jitlink::ObjCStubsBuilderBase *this@<X0>, unint64_t *a2@<X3>, void *a3@<X8>)
{
  uint64_t v125 = *MEMORY[0x263EF8340];
  *((void *)this + 4) = llvm::jitlink::LinkGraph::findSectionByName(*((void *)this + 3), (uint64_t)"__TEXT,__objc_methname", 22, a2);
  v117[0] = 0;
  v117[1] = 0;
  unsigned int v118 = 0;
  uint64_t SectionByName = (llvm::jitlink::LinkGraph *)llvm::jitlink::LinkGraph::findSectionByName(*((void *)this + 3), (uint64_t)"__DATA,__objc_selrefs", 21, v5);
  *((void *)this + 5) = SectionByName;
  if (!SectionByName) {
    llvm::jitlink::LinkGraph::createSection();
  }
  llvm::jitlink::addBlockStartSymbols(*((llvm::jitlink **)this + 3), SectionByName, v7);
  uint64_t v8 = *((void *)this + 5);
  uint64_t v9 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 56);
  uint64_t v12 = *(void *)(v8 + 56) + 8 * *(unsigned int *)(v8 + 72);
  if ((uint64_t *)v12 != v9)
  {
    BOOL v13 = v9;
    std::error_code v14 = v10;
    do
    {
      uint64_t v116 = 0;
      uint64_t v15 = *v13;
      uint64_t v116 = v15;
      uint64_t v16 = *(uint64_t **)(v15 + 16);
      uint64_t v17 = v16[5];
      uint64_t v18 = v16[6];
      if (v17 != v18)
      {
        uint64_t v19 = *(void *)(v15 + 24) & 0x1FFFFFFFFFFFFFFLL;
        while (v19 != *(_DWORD *)(v17 + 8))
        {
          v17 += 32;
          if (v17 == v18) {
            goto LABEL_39;
          }
        }
      }
      if (v17 == v18)
      {
LABEL_39:
        std::operator+<char>();
        char v40 = std::string::append(&v101, ", ");
        std::string::size_type v41 = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v102 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        std::string::size_type v103 = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
        v104.__r_.__value_.__r.__words[2] = (std::string::size_type)"__DATA,__objc_selrefs";
        uint64_t v105 = 21;
        __int16 v106 = 1284;
        v107[0] = &v104;
        BOOL v108 = " selector symbol ";
        __int16 v109 = 770;
        uint64_t v42 = *(void *)(v116 + 8);
        if (v42)
        {
          BOOL v43 = *(const char **)v116;
        }
        else
        {
          BOOL v43 = "<unnamed>";
          uint64_t v42 = 9;
        }
        v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
        v110.__r_.__value_.__r.__words[2] = (std::string::size_type)v43;
        uint64_t v111 = v42;
        __int16 v112 = 1282;
        __p[0] = &v110;
        __p[1] = (void *)v42;
        long long v114 = " at ";
        __int16 v115 = 770;
        uint64_t v82 = (*(void *)(v116 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(v116 + 16);
        *(void *)&long long v119 = "{0:x}";
        *((void *)&v119 + 1) = 5;
        *(void *)&long long v120 = &v122;
        *((void *)&v120 + 1) = 1;
        *(void *)&long long v121 = &unk_270DBE460;
        *((void *)&v121 + 1) = v82;
        *(void *)&long long v122 = &v121;
        v96[0] = __p;
        v96[1] = v42;
        unint64_t v97 = &v119;
        __int16 v98 = 1538;
        operator new();
      }
      if (*(unsigned __int8 *)(v17 + 24) != *((unsigned __int8 *)this + 16))
      {
        std::operator+<char>();
        uint64_t v90 = std::string::append(&v104, ", edge for ");
        unsigned int v91 = (const char *)v90->__r_.__value_.__r.__words[2];
        *(_OWORD *)unsigned int v107 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        BOOL v108 = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
        v110.__r_.__value_.__r.__words[2] = (std::string::size_type)"__DATA,__objc_selrefs";
        uint64_t v111 = 21;
        __int16 v112 = 1284;
        __p[0] = &v110;
        long long v114 = " block at ";
        __int16 v115 = 770;
        uint64_t v92 = *v16;
        *(void *)&long long v119 = "{0:x}";
        *((void *)&v119 + 1) = 5;
        *(void *)&long long v120 = &v122;
        *((void *)&v120 + 1) = 1;
        *(void *)&long long v121 = &unk_270DBE460;
        *((void *)&v121 + 1) = v92;
        *(void *)&long long v122 = &v121;
        v96[0] = __p;
        unint64_t v97 = &v119;
        __int16 v98 = 1538;
        operator new();
      }
      if (*(void *)(v17 + 16))
      {
        std::operator+<char>();
        uint64_t v93 = std::string::append(&v104, ", edge for ");
        unsigned int v94 = (const char *)v93->__r_.__value_.__r.__words[2];
        *(_OWORD *)unsigned int v107 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
        BOOL v108 = v94;
        v93->__r_.__value_.__l.__size_ = 0;
        v93->__r_.__value_.__r.__words[2] = 0;
        v93->__r_.__value_.__r.__words[0] = 0;
        v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
        v110.__r_.__value_.__r.__words[2] = (std::string::size_type)"__DATA,__objc_selrefs";
        uint64_t v111 = 21;
        __int16 v112 = 1284;
        __p[0] = &v110;
        long long v114 = " block at ";
        __int16 v115 = 770;
        uint64_t v95 = *v16;
        *(void *)&long long v119 = "{0:x}";
        *((void *)&v119 + 1) = 5;
        *(void *)&long long v120 = &v122;
        *((void *)&v120 + 1) = 1;
        *(void *)&long long v121 = &unk_270DBE460;
        *((void *)&v121 + 1) = v95;
        *(void *)&long long v122 = &v121;
        v96[0] = __p;
        unint64_t v97 = &v119;
        __int16 v98 = 1538;
        operator new();
      }
      uint64_t v20 = *(void *)v17;
      uint64_t v21 = *(void *)(*(void *)v17 + 16);
      if ((*(unsigned char *)(v21 + 8) & 1) == 0 || *(void *)(v21 + 16) != *((void *)this + 4))
      {
        std::operator+<char>();
        unsigned int v84 = std::string::append(&v104, ", edge for ");
        unsigned int v85 = (const char *)v84->__r_.__value_.__r.__words[2];
        *(_OWORD *)unsigned int v107 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
        BOOL v108 = v85;
        v84->__r_.__value_.__l.__size_ = 0;
        v84->__r_.__value_.__r.__words[2] = 0;
        v84->__r_.__value_.__r.__words[0] = 0;
        v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
        v110.__r_.__value_.__r.__words[2] = (std::string::size_type)"__DATA,__objc_selrefs";
        uint64_t v111 = 21;
        __int16 v112 = 1284;
        __p[0] = &v110;
        long long v114 = " block at ";
        __int16 v115 = 770;
        uint64_t v86 = *v16;
        *(void *)&long long v119 = "{0:x}";
        *((void *)&v119 + 1) = 5;
        *(void *)&long long v120 = &v122;
        *((void *)&v120 + 1) = 1;
        *(void *)&long long v121 = &unk_270DBE460;
        *((void *)&v121 + 1) = v86;
        *(void *)&long long v122 = &v121;
        v96[0] = __p;
        unint64_t v97 = &v119;
        __int16 v98 = 1538;
        operator new();
      }
      v99[0] = 0uLL;
      llvm::jitlink::cStringFromSymbol((size_t)&v119, *((void *)this + 3), v20);
      if (v120)
      {
        uint64_t v22 = v119;
        *a3 = v119;
        if (v22) {
          return MEMORY[0x263E500A0](v117[0], 8);
        }
      }
      else
      {
        v99[0] = v119;
        *a3 = 0;
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::FindAndConstruct(v117, &v116)[1] = v20;
      llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct((uint64_t *)this + 8, v99, v23, v24)[2] = v20;
      uint64_t v25 = v116;
      llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct((uint64_t *)this + 11, v99, v26, v27)[2] = v25;
      while (++v13 != v14)
      {
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_22;
        }
      }
      BOOL v13 = v14;
LABEL_22:
      ;
    }
    while (v13 != (uint64_t *)v12);
  }
  uint64_t v28 = (llvm::jitlink::LinkGraph *)*((void *)this + 4);
  if (!v28) {
    llvm::jitlink::LinkGraph::createSection();
  }
  llvm::jitlink::addBlockStartSymbols(*((llvm::jitlink **)this + 3), v28, v11);
  uint64_t v29 = *((void *)this + 4);
  unint64_t v30 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v29 + 56);
  uint64_t v33 = *(void *)(v29 + 56) + 8 * *(unsigned int *)(v29 + 72);
  if ((uint64_t *)v33 != v30)
  {
    uint64_t v34 = v30;
    char v35 = v31;
    do
    {
      uint64_t v36 = *v34;
      v99[0] = 0uLL;
      llvm::jitlink::cStringFromSymbol((size_t)&v119, *((void *)this + 3), v36);
      if (v120)
      {
        uint64_t v38 = v119;
        *a3 = v119;
        if (v38) {
          return MEMORY[0x263E500A0](v117[0], 8);
        }
      }
      else
      {
        v99[0] = v119;
        *a3 = 0;
      }
      *(void *)&long long v119 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)this + 8, (uint64_t)v99, &v119, v37) & 1) == 0)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct((uint64_t *)this + 8, v99, v39, v32)[2] = v36; {
      while (++v34 != v35)
      }
      {
        if ((*v34 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_37;
        }
      }
      uint64_t v34 = v35;
LABEL_37:
      ;
    }
    while (v34 != (uint64_t *)v33);
  }
  uint64_t v44 = llvm::jitlink::LinkGraph::findSectionByName(*((void *)this + 3), (uint64_t)"__TEXT,__objc_stubs", 19, v32);
  *((void *)this + 6) = v44;
  if (!v44) {
    llvm::jitlink::LinkGraph::createSection();
  }
  uint64_t v45 = v44;
  BOOL v46 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v44 + 32);
  uint64_t v48 = *(void *)(v45 + 32) + 8 * *(unsigned int *)(v45 + 48);
  if ((void *)v48 != v46)
  {
    BOOL v49 = v46;
    uint64_t v50 = v47;
    while (1)
    {
      unsigned int v51 = (uint64_t *)*v49;
      BOOL v52 = *(void **)(*v49 + 40);
      uint64_t v53 = *(void **)(*v49 + 48);
      if (v52 == v53) {
        goto LABEL_112;
      }
      BOOL v54 = 0;
      do
      {
        *(void *)&v99[0] = *v52;
        *(void *)&long long v119 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v117, v99, &v119)&& (void)v119 != v117[0] + 16 * v118)
        {
          if (v54)
          {
            std::operator+<char>();
            unsigned int v79 = std::string::append(&v110, ", existing stub at ");
            BOOL v80 = (const char *)v79->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
            long long v114 = v80;
            v79->__r_.__value_.__l.__size_ = 0;
            v79->__r_.__value_.__r.__words[2] = 0;
            v79->__r_.__value_.__r.__words[0] = 0;
            uint64_t v81 = *v51;
            *(void *)&long long v119 = "{0:x}";
            *((void *)&v119 + 1) = 5;
            *(void *)&long long v120 = &v122;
            *((void *)&v120 + 1) = 1;
            *(void *)&long long v121 = &unk_270DBE460;
            *((void *)&v121 + 1) = v81;
            *(void *)&long long v122 = &v121;
            v96[0] = __p;
            unint64_t v97 = &v119;
            __int16 v98 = 1540;
            operator new();
          }
          BOOL v54 = *(void **)(v119 + 8);
        }
        v52 += 4;
      }
      while (v52 != v53);
      if (!v54)
      {
LABEL_112:
        std::operator+<char>();
        int64_t v87 = std::string::append(&v110, ", existing stub at ");
        int64_t v88 = (const char *)v87->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        long long v114 = v88;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        uint64_t v89 = *v51;
        *(void *)&long long v119 = "{0:x}";
        *((void *)&v119 + 1) = 5;
        *(void *)&long long v120 = &v122;
        *((void *)&v120 + 1) = 1;
        *(void *)&long long v121 = &unk_270DBE460;
        *((void *)&v121 + 1) = v89;
        *(void *)&long long v122 = &v121;
        v96[0] = __p;
        unint64_t v97 = &v119;
        __int16 v98 = 1540;
        operator new();
      }
      uint64_t v56 = v54[4] - 1;
      *(void *)&long long v119 = *(void *)(v54[2] + 24) + (v54[3] & 0x1FFFFFFFFFFFFFFLL);
      *((void *)&v119 + 1) = v56;
      *(void *)&v99[0] = 0;
      char v57 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)this + 14, (uint64_t)&v119, v99, v55);
      unsigned int v58 = *(void **)&v99[0];
      if ((v57 & 1) == 0) {
        break;
      }
LABEL_59:
      v58[2] = v51;
      while (++v49 != v50)
      {
        if ((*v49 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_64;
        }
      }
      BOOL v49 = v50;
LABEL_64:
      if (v49 == (void *)v48) {
        goto LABEL_69;
      }
    }
    int v59 = *((_DWORD *)this + 30);
    unsigned int v60 = *((_DWORD *)this + 32);
    if (4 * v59 + 4 >= 3 * v60)
    {
      v60 *= 2;
    }
    else if (v60 + ~v59 - *((_DWORD *)this + 31) > v60 >> 3)
    {
LABEL_56:
      ++*((_DWORD *)this + 30);
      if (*v58 != -1) {
        --*((_DWORD *)this + 31);
      }
      *(_OWORD *)unsigned int v58 = v119;
      v58[2] = 0;
      goto LABEL_59;
    }
    llvm::DenseMap<llvm::StringRef,llvm::jitlink::Block *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Block *>>::grow((uint64_t)this + 112, v60);
    *(void *)&v99[0] = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)this + 14, (uint64_t)&v119, v99, v61);
    unsigned int v58 = *(void **)&v99[0];
    goto LABEL_56;
  }
LABEL_69:
  uint64_t v62 = *((void *)this + 3);
  BOOL v63 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v62 + 208);
  uint64_t v65 = *(void *)(v62 + 208) + 8 * *(unsigned int *)(v62 + 224);
  if ((void *)v65 != v63)
  {
    do
    {
      uint64_t v66 = *v63;
      if (*(void *)(*v63 + 8) == 13
        && **(void **)v66 == 0x736D5F636A626F5FLL
        && *(void *)(*(void *)v66 + 5) == 0x646E655367736D5FLL)
      {
        goto LABEL_105;
      }
      while (++v63 != v64)
      {
        if ((*v63 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_79;
        }
      }
      BOOL v63 = v64;
LABEL_79:
      ;
    }
    while (v63 != (void *)v65);
  }
  llvm::jitlink::LinkGraph::defined_symbols(*((llvm::jitlink::LinkGraph **)this + 3), &v119);
  v99[0] = v119;
  v99[1] = v120;
  v99[2] = v121;
  long long v100 = v122;
  uint64_t v68 = v123;
  uint64_t v69 = v124;
  uint64_t v70 = (void **)v122;
  if ((void)v119 != v123 || (void)v122 != v124)
  {
    while (1)
    {
      uint64_t v71 = *v70;
      if (v71[1] == 13 && *(void *)*v71 == 0x736D5F636A626F5FLL && *(void *)(*v71 + 5) == 0x646E655367736D5FLL) {
        break;
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v99, (uint64_t)v96);
      uint64_t v70 = (void **)v100;
      if (*(void *)&v99[0] == v68 && (void)v100 == v69) {
        goto LABEL_92;
      }
    }
    *((void *)this + 7) = v71;
    goto LABEL_109;
  }
LABEL_92:
  uint64_t v74 = *((void *)this + 3);
  unsigned int v75 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v74 + 232);
  uint64_t v77 = *(void *)(v74 + 232) + 8 * *(unsigned int *)(v74 + 248);
  if ((void *)v77 != v75)
  {
    while (1)
    {
      uint64_t v66 = *v75;
      if (*(void *)(*v75 + 8) == 13
        && **(void **)v66 == 0x736D5F636A626F5FLL
        && *(void *)(*(void *)v66 + 5) == 0x646E655367736D5FLL)
      {
        break;
      }
      while (++v75 != v76)
      {
        if ((*v75 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_102;
        }
      }
      unsigned int v75 = v76;
LABEL_102:
      if (v75 == (void *)v77) {
        goto LABEL_103;
      }
    }
LABEL_105:
    *((void *)this + 7) = v66;
    goto LABEL_109;
  }
LABEL_103:
  *((void *)this + 7) = llvm::jitlink::LinkGraph::addExternalSymbol(*((void *)this + 3), (uint64_t)"_objc_msgSend", 13, 0, 0);
LABEL_109:
  *a3 = 0;
  return MEMORY[0x263E500A0](v117[0], 8);
}

uint64_t llvm::jitlink::addBlockStartSymbols(llvm::jitlink *this, llvm::jitlink::LinkGraph *a2, llvm::jitlink::Section *a3)
{
  uint64_t v5 = (char *)a2 + 32;
  uint64_t v6 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)a2 + 32);
  uint64_t v8 = v7;
  llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)v5);
  uint64_t v9 = *((void *)a2 + 4) + 8 * *((unsigned int *)a2 + 12);
  if ((void *)v9 == v6)
  {
    llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::init(&v26, 0);
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = v6;
    do
    {
      unint64_t v12 = v10;
      while (++v11 != v8)
      {
        if ((*v11 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_8;
        }
      }
      uint64_t v11 = v8;
LABEL_8:
      ++v10;
    }
    while (v11 != (void *)v9);
    unint64_t v13 = v12 | (v12 >> 1) | ((v12 | (v12 >> 1)) >> 2);
    unint64_t v14 = v13 | (v13 >> 4) | ((v13 | (v13 >> 4)) >> 8);
    llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::init(&v26, (((v14 | (v14 >> 16)) >> 32) | v14 | (v14 >> 16)) + 1);
    do
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v26, v6, (uint64_t)v29);
      while (++v6 != v8)
      {
        if ((*v6 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_15;
        }
      }
      uint64_t v6 = v8;
LABEL_15:
      ;
    }
    while (v6 != (void *)v9);
  }
  uint64_t v15 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)a2 + 56);
  uint64_t v17 = *((void *)a2 + 7) + 8 * *((unsigned int *)a2 + 18);
  if ((void *)v17 != v15)
  {
    uint64_t v18 = v15;
    uint64_t v19 = v16;
    do
    {
      if ((*(void *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFLL) == 0)
      {
        v29[0] = *(void *)(*v18 + 16);
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase((uint64_t)&v26, v29);
      }
      while (++v18 != v19)
      {
        if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_26;
        }
      }
      uint64_t v18 = v19;
LABEL_26:
      ;
    }
    while (v18 != (void *)v17);
  }
  uint64_t v20 = v26;
  if (v27)
  {
    uint64_t v21 = v26;
    if (v28)
    {
      uint64_t v22 = 0;
      while ((v26[v22] | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (v28 == ++v22) {
          return MEMORY[0x263E500A0](v20, 8);
        }
      }
      uint64_t v21 = &v26[v22];
    }
    uint64_t v23 = &v26[v28];
    if (v21 != v23)
    {
      uint64_t v24 = *v21;
LABEL_36:
      llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)this, v24, 0, *(void *)(v24 + 32), 0, 0);
      while (++v21 != v23)
      {
        uint64_t v24 = *v21;
        if ((*v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v21 != v23) {
            goto LABEL_36;
          }
          break;
        }
      }
      uint64_t v20 = v26;
    }
  }
  return MEMORY[0x263E500A0](v20, 8);
}

size_t llvm::jitlink::cStringFromSymbol(size_t result, uint64_t a2, uint64_t a3)
{
  size_t v3 = result;
  v13[0] = a2;
  v13[1] = a3;
  uint64_t v4 = *(void *)(a3 + 16);
  if ((*(unsigned char *)(v4 + 8) & 1) == 0) {
    llvm::jitlink::cStringFromSymbol(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)::$_0::operator()((uint64_t)&v12, (uint64_t)v13);
  }
  uint64_t v5 = *(void *)(v4 + 32);
  if (!v5) {
    llvm::jitlink::cStringFromSymbol(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)::$_0::operator()((uint64_t)&v11, (uint64_t)v13);
  }
  uint64_t v6 = *(void *)(v4 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a3 + 24) & 0x1FFFFFFFFFFFFFFLL;
    uint64_t v8 = v6 + v7;
    uint64_t v9 = v5 - v7;
    uint64_t result = strnlen((const char *)(v6 + v7), v5 - v7);
    if (result == v9) {
      llvm::jitlink::cStringFromSymbol(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)::$_0::operator()((uint64_t)&v10, (uint64_t)v13);
    }
    *(unsigned char *)(v3 + 16) &= ~1u;
    *(void *)size_t v3 = v8;
    *(void *)(v3 + 8) = result;
  }
  else
  {
    *(unsigned char *)(result + 16) &= ~1u;
    *(void *)uint64_t result = "";
    *(void *)(result + 8) = 0;
  }
  return result;
}

void *llvm::jitlink::ObjCStubsBuilderBase::getOrCreateMethName(uint64_t a1, const void *a2, size_t a3, unint64_t *a4)
{
  unint64_t v14 = a2;
  size_t v15 = a3;
  v19[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 64), (uint64_t)&v14, v19, a4)&& v19[0] != *(void *)(a1 + 64) + 24 * *(unsigned int *)(a1 + 80))
  {
    return *(void **)(v19[0] + 16);
  }
  uint64_t v7 = v14;
  size_t v6 = v15;
  uint64_t v8 = v15 + 1;
  uint64_t v9 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*(void *)(a1 + 24), v15 + 1, 0);
  uint64_t v10 = (uint64_t)v9;
  if (v6) {
    memmove(v9, v7, v6);
  }
  *(unsigned char *)(v10 + v6) = 0;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  v19[0] = v10;
  v19[1] = v8;
  unint64_t v17 = 1;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  unint64_t v13 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v11, v12, v19, &v18, &v17, &v16);
  return llvm::jitlink::LinkGraph::addAnonymousSymbol(*(void *)(a1 + 24), (uint64_t)v13, 0, v13[4], 0, 0);
}

void *llvm::jitlink::ObjCStubsBuilderBase::getOrCreateSelector(uint64_t a1, const void *a2, size_t a3, unint64_t *a4)
{
  uint64_t v12 = a2;
  size_t v13 = a3;
  v17[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 88), (uint64_t)&v12, v17, a4)&& v17[0] != *(void *)(a1 + 88) + 24 * *(unsigned int *)(a1 + 104))
  {
    return *(void **)(v17[0] + 16);
  }
  MethName = llvm::jitlink::ObjCStubsBuilderBase::getOrCreateMethName(a1, v12, v13, v5);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 8);
  v17[0] = *(void *)a1;
  v17[1] = v10;
  uint64_t v15 = v10;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  uint64_t v11 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v8, v9, v17, &v16, (unint64_t *)&v15, &v14);
  llvm::jitlink::Block::addEdge(v11, *(unsigned char *)(a1 + 16), 0, (uint64_t)MethName, 0);
  return llvm::jitlink::LinkGraph::addAnonymousSymbol(*(void *)(a1 + 24), (uint64_t)v11, 0, *(void *)(a1 + 8), 0, 0);
}

void llvm::jitlink::cStringFromSymbol(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  std::operator+<char>();
  size_t v3 = std::string::append(&v12, " string symbol ");
  std::string::size_type v4 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v14 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(v5 + 8);
  if (v6)
  {
    uint64_t v7 = *(const char **)v5;
  }
  else
  {
    uint64_t v7 = "<unnamed>";
    uint64_t v6 = 9;
  }
  v15[0] = __p;
  void v15[2] = v7;
  long long v15[3] = v6;
  __int16 v16 = 1284;
  v17[0] = v15;
  uint64_t v17[2] = " at ";
  __int16 v18 = 770;
  uint64_t v8 = (*(void *)(v5 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(v5 + 16);
  v9[0] = "{0:x}";
  v9[1] = 5;
  uint64_t v9[2] = &v11;
  _OWORD v9[3] = 1;
  v10[0] = &unk_270DBE460;
  v10[1] = v8;
  uint64_t v11 = v10;
  v19[0] = v17;
  uint64_t v19[2] = v9;
  __int16 v20 = 1538;
  uint64_t v21 = v19;
  uint64_t v22 = " ";
  __int16 v23 = 770;
  operator new();
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(uint64_t *a1, _OWORD *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v9 = 0;
  char v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(a1, (uint64_t)a2, &v9, a4);
  uint64_t v7 = v9;
  if ((v6 & 1) == 0)
  {
    uint64_t v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, v9);
    *(_OWORD *)uint64_t v7 = *a2;
    void v7[2] = 0;
  }
  return v7;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::jitlink::Block *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Block *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      uint64_t v12 = 24 * v11;
      do
      {
        *uint64_t result = xmmword_261E8A6B0;
        uint64_t result = (_OWORD *)((char *)result + 24);
        v12 -= 24;
      }
      while (v12);
    }
    if (v3)
    {
      uint64_t v13 = 24 * v3;
      uint64_t v14 = v4;
      do
      {
        if (*(void *)v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          __int16 v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, v14, &v18, v10);
          uint64_t v15 = v18;
          *__int16 v18 = *(_OWORD *)v14;
          *((void *)v15 + 2) = *(void *)(v14 + 16);
          ++*(_DWORD *)(a1 + 8);
        }
        v14 += 24;
        v13 -= 24;
      }
      while (v13);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 24 * v16;
    do
    {
      *uint64_t result = xmmword_261E8A6B0;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

void llvm::jitlink::createLinkGraphFromMachOObject(int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 > 3)
  {
    int v4 = **a1;
    if (v4 == -17958194 || v4 == -822415874) {
      llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
    }
    if (v4 != -17958193 && v4 != -805638658) {
      operator new();
    }
    if (v1 > 0x1F)
    {
      unsigned int v7 = (*a1)[1];
      unsigned int v8 = bswap32(v7);
      if (v4 == -805638658) {
        unsigned int v7 = v8;
      }
      if (v7 != 16777223)
      {
        if (v7 == 16777228)
        {
          long long v9 = *((_OWORD *)a1 + 1);
          v12[0] = *(_OWORD *)a1;
          v12[1] = v9;
          llvm::jitlink::createLinkGraphFromMachOObject_arm64(v12);
        }
        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
      }
      long long v10 = *((_OWORD *)a1 + 1);
      v11[0] = *(_OWORD *)a1;
      v11[1] = v10;
      llvm::jitlink::createLinkGraphFromMachOObject_x86_64(v11);
    }
  }
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  __int16 v16 = 1283;
  uint64_t v13 = "Truncated MachO buffer \"";
  uint64_t v14 = v2;
  uint64_t v15 = v3;
  operator new();
}

llvm::jitlink::LinkGraph *llvm::jitlink::link_MachO(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)*a1 + 36);
  if (v3 != 38)
  {
    if (v3 != 3) {
      llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
    }
    *a1 = 0;
    uint64_t v12 = v2;
    uint64_t v4 = *a2;
    *a2 = 0;
    uint64_t v11 = v4;
    llvm::jitlink::link_MachO_arm64((uint64_t)&v12, &v11);
    uint64_t v5 = v11;
    uint64_t v11 = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t result = v12;
    uint64_t v12 = 0;
    if (!result) {
      return result;
    }
LABEL_10:
    llvm::jitlink::LinkGraph::~LinkGraph(result);
    return (llvm::jitlink::LinkGraph *)MEMORY[0x263E500B0]();
  }
  *a1 = 0;
  long long v10 = v2;
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v9 = v7;
  llvm::jitlink::link_MachO_x86_64(&v10, &v9);
  uint64_t v8 = v9;
  uint64_t v9 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t result = v10;
  long long v10 = 0;
  if (result) {
    goto LABEL_10;
  }
  return result;
}

uint64_t llvm::jitlink::buildTables_MachO_arm64@<X0>(llvm::jitlink *this@<X0>, void *a2@<X8>)
{
  v16[0] = 0;
  v16[1] = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  v12[0] = 0;
  v12[1] = 0;
  int v13 = 0;
  uint64_t v14 = v16;
  uint64_t v15 = 0;
  llvm::jitlink::LinkGraph::blocks(this, v21);
  v22[0] = v21[0];
  v22[1] = v21[1];
  long long v22[2] = v21[2];
  v22[3] = v21[3];
  llvm::jitlink::LinkGraph::blocks(this, v19);
  v20[0] = v19[4];
  v20[1] = v19[5];
  _OWORD v20[2] = v19[6];
  uint64_t v20[3] = v19[7];
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v23, v22, (uint64_t *)v20);
  uint64_t v5 = v23;
  unint64_t v6 = v24;
  if (v23 != v24)
  {
    do
    {
      uint64_t v7 = *v5;
      uint64_t v8 = *(void *)(*v5 + 40);
      uint64_t v9 = *(void *)(*v5 + 48);
      while (v8 != v9)
      {
        if ((llvm::jitlink::aarch64::GOTTableManager::visitEdge((uint64_t)v16, (uint64_t)this, v7, v8) & 1) == 0
          && *(unsigned char *)(v8 + 24) == 9
          && (*(unsigned char *)(*(void *)(*(void *)v8 + 16) + 8) & 1) == 0)
        {
          *(void *)uint64_t v8 = llvm::jitlink::TableManager<llvm::jitlink::aarch64::PLTTableManager>::getEntryForTarget((uint64_t)v12, (uint64_t)this, *(_OWORD **)v8, v10);
        }
        v8 += 32;
      }
      ++v5;
    }
    while (v5 != v6);
    uint64_t v5 = v23;
  }
  if (v5)
  {
    uint64_t v24 = v5;
    operator delete(v5);
  }
  *a2 = 0;
  MEMORY[0x263E500A0](v12[0], 8);
  return MEMORY[0x263E500A0](v16[0], 8);
}

void llvm::jitlink::createLinkGraphFromMachOObject_arm64(_OWORD *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  long long v1 = a1[1];
  v2[0] = *a1;
  v2[1] = v1;
  llvm::object::ObjectFile::createMachOObjectFile((uint64_t)v2);
}

void llvm::jitlink::link_MachO_arm64(uint64_t a1, void *a2)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v106 = 0;
  long long v105 = 0u;
  memset(v104, 0, sizeof(v104));
  memset(v103, 0, sizeof(v103));
  int64x2_t v102 = 0u;
  if ((*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, *(void *)a1 + 120))
  {
    (*(void (**)(const char **__return_ptr))(*(void *)*a2 + 64))(&v114);
    if ((unint64_t)v116 < 8)
    {
      *(void *)&long long v112 = llvm::jitlink::markAllSymbolsLive;
      uint64_t v113 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
           + 2;
      if (v102.i64[1] >= *(void *)&v103[0])
      {
        uint64_t v10 = (v102.i64[1] - v102.i64[0]) >> 5;
        if ((unint64_t)(v10 + 1) >> 59) {
          goto LABEL_159;
        }
        unint64_t v11 = (*(void *)&v103[0] - v102.i64[0]) >> 4;
        if (v11 <= v10 + 1) {
          unint64_t v11 = v10 + 1;
        }
        unint64_t v12 = *(void *)&v103[0] - v102.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v11;
        std::string v110 = (char *)v103;
        int v13 = v12
            ? (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v103, v12): 0;
        uint64_t v18 = (uint64_t)&v13[4 * v10];
        unsigned int v107 = v13;
        v108.i64[0] = v18;
        __int16 v109 = &v13[4 * v12];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v18, &v112);
        uint64_t v5 = v18 + 32;
        v108.i64[1] = v18 + 32;
        uint64_t v19 = (long long *)v102.i64[1];
        uint64_t v20 = v108.i64[0];
        if (v102.i64[1] == v102.i64[0])
        {
          int64x2_t v21 = vdupq_n_s64(v102.u64[1]);
        }
        else
        {
          do
          {
            v19 -= 2;
            uint64_t v20 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v20 - 32, v19);
          }
          while (v19 != (long long *)v102.i64[0]);
          int64x2_t v21 = v102;
          uint64_t v5 = v108.i64[1];
        }
        v102.i64[0] = v20;
        v102.i64[1] = v5;
        int64x2_t v108 = v21;
        __int16 v23 = *(void ***)&v103[0];
        *(void *)&v103[0] = v109;
        __int16 v109 = v23;
        unsigned int v107 = (void **)v21.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v107);
      }
      else
      {
        uint64_t v5 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v102.i64[1], &v112)+ 32;
      }
      v102.i64[1] = v5;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v112);
    }
    else
    {
      if (v102.i64[1] >= *(void *)&v103[0])
      {
        uint64_t v6 = (v102.i64[1] - v102.i64[0]) >> 5;
        if ((unint64_t)(v6 + 1) >> 59) {
          goto LABEL_159;
        }
        unint64_t v7 = (*(void *)&v103[0] - v102.i64[0]) >> 4;
        if (v7 <= v6 + 1) {
          unint64_t v7 = v6 + 1;
        }
        unint64_t v8 = *(void *)&v103[0] - v102.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v7;
        std::string v110 = (char *)v103;
        uint64_t v9 = v8
           ? (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v103, v8): 0;
        uint64_t v14 = (uint64_t)&v9[4 * v6];
        unsigned int v107 = v9;
        v108.i64[0] = v14;
        __int16 v109 = &v9[4 * v8];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v14, (long long *)&v114);
        uint64_t v4 = v14 + 32;
        v108.i64[1] = v14 + 32;
        uint64_t v15 = (long long *)v102.i64[1];
        uint64_t v16 = v108.i64[0];
        if (v102.i64[1] == v102.i64[0])
        {
          int64x2_t v17 = vdupq_n_s64(v102.u64[1]);
        }
        else
        {
          do
          {
            v15 -= 2;
            uint64_t v16 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v16 - 32, v15);
          }
          while (v15 != (long long *)v102.i64[0]);
          int64x2_t v17 = v102;
          uint64_t v4 = v108.i64[1];
        }
        v102.i64[0] = v16;
        v102.i64[1] = v4;
        int64x2_t v108 = v17;
        uint64_t v22 = *(void ***)&v103[0];
        *(void *)&v103[0] = v109;
        __int16 v109 = v22;
        unsigned int v107 = (void **)v17.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v107);
      }
      else
      {
        uint64_t v4 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v102.i64[1], (long long *)&v114)+ 32;
      }
      v102.i64[1] = v4;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v114);
    long long v114 = "__LD,__compact_unwind";
    *(void *)&long long v115 = 21;
    uint64_t v116 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::CompactUnwindSplitter,llvm::jitlink::CompactUnwindSplitter,void>::Callbacks
                                     + 2);
    if (v102.i64[1] >= *(void *)&v103[0])
    {
      uint64_t v25 = (v102.i64[1] - v102.i64[0]) >> 5;
      if ((unint64_t)(v25 + 1) >> 59) {
        goto LABEL_159;
      }
      unint64_t v26 = (*(void *)&v103[0] - v102.i64[0]) >> 4;
      if (v26 <= v25 + 1) {
        unint64_t v26 = v25 + 1;
      }
      unint64_t v27 = *(void *)&v103[0] - v102.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v26;
      std::string v110 = (char *)v103;
      int v28 = v27
          ? (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v103, v27): 0;
      uint64_t v29 = (uint64_t)&v28[4 * v25];
      unsigned int v107 = v28;
      v108.i64[0] = v29;
      __int16 v109 = &v28[4 * v27];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v29, (long long *)&v114);
      unint64_t v24 = v29 + 32;
      v108.i64[1] = v29 + 32;
      unint64_t v30 = (long long *)v102.i64[1];
      uint64_t v31 = v108.i64[0];
      if (v102.i64[1] == v102.i64[0])
      {
        int64x2_t v32 = vdupq_n_s64(v102.u64[1]);
      }
      else
      {
        do
        {
          v30 -= 2;
          uint64_t v31 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v31 - 32, v30);
        }
        while (v30 != (long long *)v102.i64[0]);
        int64x2_t v32 = v102;
        unint64_t v24 = v108.u64[1];
      }
      v102.i64[0] = v31;
      v102.i64[1] = v24;
      int64x2_t v108 = v32;
      uint64_t v33 = *(void ***)&v103[0];
      *(void *)&v103[0] = v109;
      __int16 v109 = v33;
      unsigned int v107 = (void **)v32.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v107);
    }
    else
    {
      unint64_t v24 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v102.i64[1], (long long *)&v114)+ 32;
    }
    v102.i64[1] = v24;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v114);
    long long v114 = "__TEXT,__eh_frame";
    *(void *)&long long v115 = 17;
    uint64_t v116 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::DWARFRecordSectionSplitter,llvm::jitlink::DWARFRecordSectionSplitter,void>::Callbacks
                                     + 2);
    if (v24 >= *(void *)&v103[0])
    {
      uint64_t v35 = (v102.i64[1] - v102.i64[0]) >> 5;
      if ((unint64_t)(v35 + 1) >> 59) {
        goto LABEL_159;
      }
      unint64_t v36 = (*(void *)&v103[0] - v102.i64[0]) >> 4;
      if (v36 <= v35 + 1) {
        unint64_t v36 = v35 + 1;
      }
      unint64_t v37 = *(void *)&v103[0] - v102.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v36;
      std::string v110 = (char *)v103;
      uint64_t v38 = v37
          ? (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v103, v37): 0;
      uint64_t v39 = (uint64_t)&v38[4 * v35];
      unsigned int v107 = v38;
      v108.i64[0] = v39;
      __int16 v109 = &v38[4 * v37];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v39, (long long *)&v114);
      uint64_t v34 = v39 + 32;
      v108.i64[1] = v39 + 32;
      char v40 = (long long *)v102.i64[1];
      uint64_t v41 = v108.i64[0];
      if (v102.i64[1] == v102.i64[0])
      {
        int64x2_t v42 = vdupq_n_s64(v102.u64[1]);
      }
      else
      {
        do
        {
          v40 -= 2;
          uint64_t v41 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v41 - 32, v40);
        }
        while (v40 != (long long *)v102.i64[0]);
        int64x2_t v42 = v102;
        uint64_t v34 = v108.i64[1];
      }
      v102.i64[0] = v41;
      v102.i64[1] = v34;
      int64x2_t v108 = v42;
      BOOL v43 = *(void ***)&v103[0];
      *(void *)&v103[0] = v109;
      __int16 v109 = v43;
      unsigned int v107 = (void **)v42.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v107);
    }
    else
    {
      uint64_t v34 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v24, (long long *)&v114)+ 32;
    }
    v102.i64[1] = v34;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v114);
    uint64_t v44 = operator new(0x20uLL, (std::align_val_t)8uLL);
    long long v115 = xmmword_261E8A760;
    *uint64_t v44 = "__TEXT,__eh_frame";
    v44[1] = 17;
    *((_DWORD *)v44 + 4) = 8;
    *((_DWORD *)v44 + 5) = 84279812;
    *((unsigned char *)v44 + 24) = 8;
    long long v114 = (const char *)v44;
    uint64_t v116 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameEdgeFixer,llvm::jitlink::EHFrameEdgeFixer,void>::Callbacks;
    if (v102.i64[1] >= *(void *)&v103[0])
    {
      uint64_t v46 = (v102.i64[1] - v102.i64[0]) >> 5;
      if ((unint64_t)(v46 + 1) >> 59) {
        goto LABEL_159;
      }
      unint64_t v47 = (*(void *)&v103[0] - v102.i64[0]) >> 4;
      if (v47 <= v46 + 1) {
        unint64_t v47 = v46 + 1;
      }
      unint64_t v48 = *(void *)&v103[0] - v102.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v47;
      std::string v110 = (char *)v103;
      BOOL v49 = v48
          ? (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v103, v48): 0;
      uint64_t v50 = (uint64_t)&v49[4 * v46];
      unsigned int v107 = v49;
      v108.i64[0] = v50;
      __int16 v109 = &v49[4 * v48];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v50, (long long *)&v114);
      uint64_t v45 = v50 + 32;
      v108.i64[1] = v50 + 32;
      unsigned int v51 = (long long *)v102.i64[1];
      uint64_t v52 = v108.i64[0];
      if (v102.i64[1] == v102.i64[0])
      {
        int64x2_t v53 = vdupq_n_s64(v102.u64[1]);
      }
      else
      {
        do
        {
          v51 -= 2;
          uint64_t v52 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v52 - 32, v51);
        }
        while (v51 != (long long *)v102.i64[0]);
        int64x2_t v53 = v102;
        uint64_t v45 = v108.i64[1];
      }
      v102.i64[0] = v52;
      v102.i64[1] = v45;
      int64x2_t v108 = v53;
      BOOL v54 = *(void ***)&v103[0];
      *(void *)&v103[0] = v109;
      __int16 v109 = v54;
      unsigned int v107 = (void **)v53.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v107);
    }
    else
    {
      uint64_t v45 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v102.i64[1], (long long *)&v114)+ 32;
    }
    v102.i64[1] = v45;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v114);
    memset(&v111[7], 0, 40);
    uint64_t v116 = 0;
    uint64_t v55 = (char *)operator new(0x90uLL, (std::align_val_t)8uLL);
    long long v114 = v55;
    long long v115 = xmmword_261E8D580;
    *(void *)uint64_t v55 = &llvm::jitlink::aarch64::NullPointerContent;
    *((void *)v55 + 1) = 8;
    v55[16] = 2;
    *(_OWORD *)(v55 + 17) = *(_OWORD *)v111;
    *(_OWORD *)(v55 + 33) = *(_OWORD *)&v111[16];
    *((_OWORD *)v55 + 3) = *(_OWORD *)&v111[31];
    *((void *)v55 + 8) = 0;
    *((void *)v55 + 9) = 0;
    *((_DWORD *)v55 + 20) = 0;
    *((void *)v55 + 11) = 0;
    *((void *)v55 + 12) = 0;
    *((_DWORD *)v55 + 26) = 0;
    *((_DWORD *)v55 + 32) = 0;
    *((void *)v55 + 14) = 0;
    *((void *)v55 + 15) = 0;
    *((void *)v55 + 17) = llvm::jitlink::makeObjCMsgSendStub;
    uint64_t v116 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::ObjCStubsBuilder<llvm::jitlink::Block & (*)(llvm::jitlink::LinkGraph &,llvm::jitlink::Section &,llvm::jitlink::Symbol &,llvm::jitlink::Symbol &)>,llvm::jitlink::ObjCStubsBuilder<llvm::jitlink::Block & (*)(llvm::jitlink::LinkGraph &,llvm::jitlink::Section &,llvm::jitlink::Symbol &,llvm::jitlink::Symbol &)>,void>::Callbacks
                                     + 4);
    MEMORY[0x263E500A0](0, 8);
    MEMORY[0x263E500A0](0, 8);
    MEMORY[0x263E500A0](0, 8);
    if (*(void *)&v103[1] >= *((void *)&v103[1] + 1))
    {
      uint64_t v57 = (uint64_t)(*(void *)&v103[1] - *((void *)&v103[0] + 1)) >> 5;
      if ((unint64_t)(v57 + 1) >> 59) {
        goto LABEL_159;
      }
      unint64_t v58 = (uint64_t)(*((void *)&v103[1] + 1) - *((void *)&v103[0] + 1)) >> 4;
      if (v58 <= v57 + 1) {
        unint64_t v58 = v57 + 1;
      }
      unint64_t v59 = *((void *)&v103[1] + 1) - *((void *)&v103[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v58;
      std::string v110 = (char *)&v103[1] + 8;
      unsigned int v60 = v59
          ? (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v103[1] + 8, v59): 0;
      uint64_t v61 = (uint64_t)&v60[4 * v57];
      unsigned int v107 = v60;
      v108.i64[0] = v61;
      __int16 v109 = &v60[4 * v59];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v61, (long long *)&v114);
      uint64_t v56 = v61 + 32;
      v108.i64[1] = v61 + 32;
      BOOL v63 = (long long *)*((void *)&v103[0] + 1);
      uint64_t v62 = *(long long **)&v103[1];
      uint64_t v64 = v108.i64[0];
      if (*(void *)&v103[1] == *((void *)&v103[0] + 1))
      {
        int64x2_t v65 = vdupq_n_s64(*(unint64_t *)&v103[1]);
      }
      else
      {
        do
        {
          v62 -= 2;
          uint64_t v64 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v64 - 32, v62);
        }
        while (v62 != v63);
        int64x2_t v65 = *(int64x2_t *)((char *)v103 + 8);
        uint64_t v56 = v108.i64[1];
      }
      *((void *)&v103[0] + 1) = v64;
      *(void *)&v103[1] = v56;
      int64x2_t v108 = v65;
      uint64_t v66 = (void **)*((void *)&v103[1] + 1);
      *((void *)&v103[1] + 1) = v109;
      __int16 v109 = v66;
      unsigned int v107 = (void **)v65.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v107);
    }
    else
    {
      uint64_t v56 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v103[1], (long long *)&v114)+ 32;
    }
    *(void *)&v103[1] = v56;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v114);
    MEMORY[0x263E500A0](0, 8);
    MEMORY[0x263E500A0](0, 8);
    MEMORY[0x263E500A0](0, 8);
    long long v114 = (const char *)llvm::jitlink::buildTables_MachO_arm64;
    uint64_t v116 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
                                     + 2);
    if (*(void *)&v103[1] >= *((void *)&v103[1] + 1))
    {
      uint64_t v68 = (uint64_t)(*(void *)&v103[1] - *((void *)&v103[0] + 1)) >> 5;
      if ((unint64_t)(v68 + 1) >> 59) {
        goto LABEL_159;
      }
      unint64_t v69 = (uint64_t)(*((void *)&v103[1] + 1) - *((void *)&v103[0] + 1)) >> 4;
      if (v69 <= v68 + 1) {
        unint64_t v69 = v68 + 1;
      }
      unint64_t v70 = *((void *)&v103[1] + 1) - *((void *)&v103[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v69;
      std::string v110 = (char *)&v103[1] + 8;
      uint64_t v71 = v70
          ? (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v103[1] + 8, v70): 0;
      uint64_t v72 = (uint64_t)&v71[4 * v68];
      unsigned int v107 = v71;
      v108.i64[0] = v72;
      __int16 v109 = &v71[4 * v70];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v72, (long long *)&v114);
      uint64_t v67 = v72 + 32;
      v108.i64[1] = v72 + 32;
      uint64_t v74 = (long long *)*((void *)&v103[0] + 1);
      uint64_t v73 = *(long long **)&v103[1];
      uint64_t v75 = v108.i64[0];
      if (*(void *)&v103[1] == *((void *)&v103[0] + 1))
      {
        int64x2_t v76 = vdupq_n_s64(*(unint64_t *)&v103[1]);
      }
      else
      {
        do
        {
          v73 -= 2;
          uint64_t v75 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v75 - 32, v73);
        }
        while (v73 != v74);
        int64x2_t v76 = *(int64x2_t *)((char *)v103 + 8);
        uint64_t v67 = v108.i64[1];
      }
      *((void *)&v103[0] + 1) = v75;
      *(void *)&v103[1] = v67;
      int64x2_t v108 = v76;
      uint64_t v77 = (void **)*((void *)&v103[1] + 1);
      *((void *)&v103[1] + 1) = v109;
      __int16 v109 = v77;
      unsigned int v107 = (void **)v76.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v107);
    }
    else
    {
      uint64_t v67 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v103[1], (long long *)&v114)+ 32;
    }
    *(void *)&v103[1] = v67;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v114);
    if (*(_DWORD *)(*(void *)a1 + 144) == 3 && *(_DWORD *)(*(void *)a1 + 148) == 33)
    {
      long long v114 = (const char *)llvm::jitlink::aarch64::createEmptyPointerSigningFunction;
      uint64_t v116 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
                                       + 2);
      if (*(void *)&v103[1] >= *((void *)&v103[1] + 1))
      {
        uint64_t v79 = (uint64_t)(*(void *)&v103[1] - *((void *)&v103[0] + 1)) >> 5;
        if ((unint64_t)(v79 + 1) >> 59) {
          goto LABEL_159;
        }
        unint64_t v80 = (uint64_t)(*((void *)&v103[1] + 1) - *((void *)&v103[0] + 1)) >> 4;
        if (v80 <= v79 + 1) {
          unint64_t v80 = v79 + 1;
        }
        if (*((void *)&v103[1] + 1) - *((void *)&v103[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v81 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v81 = v80;
        }
        std::string v110 = (char *)&v103[1] + 8;
        if (v81) {
          uint64_t v82 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v103[1] + 8, v81);
        }
        else {
          uint64_t v82 = 0;
        }
        uint64_t v83 = (uint64_t)&v82[4 * v79];
        unsigned int v107 = v82;
        v108.i64[0] = v83;
        __int16 v109 = &v82[4 * v81];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v83, (long long *)&v114);
        uint64_t v78 = v83 + 32;
        v108.i64[1] = v83 + 32;
        unsigned int v85 = (long long *)*((void *)&v103[0] + 1);
        unsigned int v84 = *(long long **)&v103[1];
        uint64_t v86 = v108.i64[0];
        if (*(void *)&v103[1] == *((void *)&v103[0] + 1))
        {
          int64x2_t v87 = vdupq_n_s64(*(unint64_t *)&v103[1]);
        }
        else
        {
          do
          {
            v84 -= 2;
            uint64_t v86 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v86 - 32, v84);
          }
          while (v84 != v85);
          int64x2_t v87 = *(int64x2_t *)((char *)v103 + 8);
          uint64_t v78 = v108.i64[1];
        }
        *((void *)&v103[0] + 1) = v86;
        *(void *)&v103[1] = v78;
        int64x2_t v108 = v87;
        int64_t v88 = (void **)*((void *)&v103[1] + 1);
        *((void *)&v103[1] + 1) = v109;
        __int16 v109 = v88;
        unsigned int v107 = (void **)v87.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v107);
      }
      else
      {
        uint64_t v78 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v103[1], (long long *)&v114)+ 32;
      }
      *(void *)&v103[1] = v78;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v114);
      long long v114 = (const char *)llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction;
      uint64_t v116 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
                                       + 2);
      if (*(void *)&v104[2] < *((void *)&v104[2] + 1))
      {
        uint64_t v89 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v104[2], (long long *)&v114)+ 32;
LABEL_151:
        *(void *)&v104[2] = v89;
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v114);
        goto LABEL_152;
      }
      uint64_t v90 = (uint64_t)(*(void *)&v104[2] - *((void *)&v104[1] + 1)) >> 5;
      if (!((unint64_t)(v90 + 1) >> 59))
      {
        unint64_t v91 = (uint64_t)(*((void *)&v104[2] + 1) - *((void *)&v104[1] + 1)) >> 4;
        if (v91 <= v90 + 1) {
          unint64_t v91 = v90 + 1;
        }
        if (*((void *)&v104[2] + 1) - *((void *)&v104[1] + 1) >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v92 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v92 = v91;
        }
        std::string v110 = (char *)&v104[2] + 8;
        if (v92) {
          uint64_t v93 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v104[2] + 8, v92);
        }
        else {
          uint64_t v93 = 0;
        }
        uint64_t v94 = (uint64_t)&v93[4 * v90];
        unsigned int v107 = v93;
        v108.i64[0] = v94;
        __int16 v109 = &v93[4 * v92];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v94, (long long *)&v114);
        uint64_t v89 = v94 + 32;
        v108.i64[1] = v94 + 32;
        uint64_t v96 = (long long *)*((void *)&v104[1] + 1);
        uint64_t v95 = *(long long **)&v104[2];
        uint64_t v97 = v108.i64[0];
        if (*(void *)&v104[2] == *((void *)&v104[1] + 1))
        {
          int64x2_t v98 = vdupq_n_s64(*(unint64_t *)&v104[2]);
        }
        else
        {
          do
          {
            v95 -= 2;
            uint64_t v97 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v97 - 32, v95);
          }
          while (v95 != v96);
          int64x2_t v98 = *(int64x2_t *)((char *)&v104[1] + 8);
          uint64_t v89 = v108.i64[1];
        }
        *((void *)&v104[1] + 1) = v97;
        *(void *)&v104[2] = v89;
        int64x2_t v108 = v98;
        unsigned int v99 = (void **)*((void *)&v104[2] + 1);
        *((void *)&v104[2] + 1) = v109;
        __int16 v109 = v99;
        unsigned int v107 = (void **)v98.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v107);
        goto LABEL_151;
      }
LABEL_159:
      abort();
    }
  }
LABEL_152:
  (*(void (**)(void ***__return_ptr))(*(void *)*a2 + 72))(&v107);
  if (!v107) {
    operator new();
  }
  uint64_t v100 = *a2;
  std::string v101 = v107;
  unsigned int v107 = 0;
  (*(void (**)(uint64_t, void ***))(*(void *)v100 + 24))(v100, &v101);
  if (v101) {
    (*((void (**)(void **))*v101 + 1))(v101);
  }
  if (v107) {
    (*((void (**)(void **))*v107 + 1))(v107);
  }
  unsigned int v107 = (void **)&v105;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v107);
  unsigned int v107 = (void **)&v104[1] + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v107);
  unsigned int v107 = (void **)v104;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v107);
  unsigned int v107 = (void **)v103 + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v107);
  unsigned int v107 = (void **)&v102;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v107);
}

void *llvm::jitlink::makeObjCMsgSendStub(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = (uint64_t)&llvm::jitlink::makeObjCMsgSendStub(llvm::jitlink::LinkGraph &,llvm::jitlink::Section &,llvm::jitlink::Symbol &,llvm::jitlink::Symbol &)::StubBytes;
  v11[1] = 32;
  unint64_t v9 = 4;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a1, a2, v11, &v10, &v9, &v8);
  llvm::jitlink::Block::addEdge(v6, 12, 0, a3, 0);
  llvm::jitlink::Block::addEdge(v6, 13, 4, a3, 0);
  llvm::jitlink::Block::addEdge(v6, 14, 8, a4, 0);
  llvm::jitlink::Block::addEdge(v6, 15, 12, a4, 0);
  return v6;
}

void anonymous namespace'::MachOLinkGraphBuilder_arm64::~MachOLinkGraphBuilder_arm64(_anonymous_namespace_::MachOLinkGraphBuilder_arm64 *this)
{
  llvm::jitlink::MachOLinkGraphBuilder::~MachOLinkGraphBuilder(this);
  JUMPOUT(0x263E500B0);
}

void anonymous namespace'::MachOLinkGraphBuilder_arm64::addRelocations(_anonymous_namespace_::MachOLinkGraphBuilder_arm64 *this@<X0>, const char **a2@<X8>)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 13);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 352))(v4);
  uint64_t v7 = v6;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 360))(v4);
  uint64_t v74 = v5;
  uint64_t v75 = v7;
  if (v7 != v9 || v5 != v8)
  {
    uint64_t v11 = v8;
    uint64_t v12 = v9;
    uint64_t v67 = v8;
    uint64_t v68 = a2;
    uint64_t v66 = v9;
    do
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 152))(v7, v5);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v75 + 224))(v75, v74))
      {
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v75 + 272))(v75, v74);
        if (v14 != (*(uint64_t (**)(void))(*(void *)v75 + 280))()) {
          llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
        }
      }
      else
      {
        int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 160))(v4, v74);
        llvm::jitlink::MachOLinkGraphBuilder::findSectionByIndex(this, v15, (uint64_t)&v84);
        if (v85)
        {
          uint64_t v20 = v84;
          uint64_t v84 = 0;
          *a2 = (const char *)v20;
          int v19 = 1;
        }
        else if (*(void *)(v84 + 80))
        {
          unint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v75 + 272))(v75, v74);
          uint64_t v73 = v16;
          uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v75 + 280))();
          unint64_t v18 = v72;
          if (v72 == v17)
          {
LABEL_12:
            int v19 = 0;
          }
          else
          {
            uint64_t v21 = v17;
            uint64_t v69 = v13;
            while (1)
            {
              relocation_info Relocation = 0;
              relocation_info Relocation = (relocation_info)llvm::object::MachOObjectFile::getRelocation(*((void *)this + 13), v18);
              char v22 = v83;
              if (v83) {
                break;
              }
              unint64_t v70 = v13 + Relocation.r_address;
              llvm::jitlink::MachOLinkGraphBuilder::findSymbolByAddress((uint64_t)this, v84, v70, (uint64_t)&v76);
              if (v77)
              {
                *a2 = v76;
                int v19 = 1;
              }
              else
              {
                uint64_t v23 = v21;
                unint64_t v24 = (uint64_t *)*((void *)v76 + 2);
                uint64_t v25 = *((unsigned int *)&Relocation + 1);
                uint64_t v26 = *v24;
                if ((1 << (((unint64_t)*((unsigned int *)&Relocation + 1) >> 25) & 3)) + v70 > v24[4] + *v24) {
                  operator new();
                }
                uint64_t v27 = v24[3];
                int v28 = v82;
                if (v82 == 14)
                {
                  if (v72 == v23)
                  {
                    int64x2_t v76 = "{0:x16}";
                    uint64_t v77 = 7;
                    uint64_t v78 = &v81;
                    uint64_t v79 = 1;
                    v80[0] = &unk_270DBD808;
                    v80[1] = &v70;
                    unint64_t v81 = v80;
                    operator new();
                  }
                  (*(void (**)(uint64_t, unint64_t *))(*(void *)v73 + 296))(v73, &v72);
                  relocation_info Relocation = (relocation_info)llvm::object::MachOObjectFile::getRelocation(*((void *)this + 13), v72);
                  char v22 = v22 & 0xFE | v77 & 1;
                  char v83 = v22;
                  if ((v77 & 1) == 0)
                  {
                    uint64_t v63 = v27;
                    int v28 = v76;
                    LOBYTE(v82) = (_BYTE)v76;
                    unint64_t v37 = "MachOPointer64";
                    switch((char)v76)
                    {
                      case 2:
                      case 7:
                      case 8:
                        unint64_t v30 = v69 + Relocation.r_address;
                        if (v30 != v70) {
                          llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
                        }
                        uint64_t v29 = v25 << 40 >> 40;
                        goto LABEL_32;
                      case 4:
                        goto LABEL_114;
                      case 5:
                        unint64_t v37 = "MachOPointer64Anon";
                        goto LABEL_114;
                      case 6:
                        unint64_t v37 = "MachOPointer64Authenticated";
                        goto LABEL_114;
                      case 9:
                        unint64_t v37 = "MachOGOTPage21";
                        goto LABEL_114;
                      case 10:
                        unint64_t v37 = "MachOGOTPageOffset12";
                        goto LABEL_114;
                      case 11:
                        unint64_t v37 = "MachOTLVPage21";
                        goto LABEL_114;
                      case 12:
                        unint64_t v37 = "MachOTLVPageOffset12";
                        goto LABEL_114;
                      case 13:
                        unint64_t v37 = "MachOPointerToGOT";
                        goto LABEL_114;
                      case 14:
                        unint64_t v37 = "MachOPairedAddend";
                        goto LABEL_114;
                      case 15:
                        unint64_t v37 = "MachOLDRLiteral19";
                        goto LABEL_114;
                      case 16:
                        unint64_t v37 = "MachODelta32";
                        goto LABEL_114;
                      case 17:
                        unint64_t v37 = "MachODelta64";
                        goto LABEL_114;
                      case 18:
                        unint64_t v37 = "MachONegDelta32";
                        goto LABEL_114;
                      case 19:
                        unint64_t v37 = "MachONegDelta64";
                        goto LABEL_114;
                      default:
                        BOOL v49 = "<Unrecognized edge kind>";
                        if (v76 == 1) {
                          BOOL v49 = "Keep-Alive";
                        }
                        if ((_BYTE)v76) {
                          unint64_t v37 = v49;
                        }
                        else {
                          unint64_t v37 = "INVALID RELOCATION";
                        }
LABEL_114:
                        strlen(v37);
                        operator new();
                    }
                  }
                  uint64_t v82 = 0;
                  a2 = v68;
                  *uint64_t v68 = v76;
                  int v19 = 1;
                  uint64_t v21 = v23;
                }
                else
                {
                  uint64_t v63 = v24[3];
                  uint64_t v29 = 0;
                  unint64_t v30 = v70;
LABEL_32:
                  uint64_t v31 = v70 - v26;
                  uint64_t v21 = v23;
                  switch(v28)
                  {
                    case 3:
                      llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, *((_DWORD *)&Relocation + 1) & 0xFFFFFF, (uint64_t)&v76);
                      if (v77) {
                        goto LABEL_80;
                      }
                      uint64_t SymbolByAddress = *((void *)v76 + 5);
                      uint64_t v38 = *(unsigned int *)(v63 + v31);
                      char v39 = 4;
                      goto LABEL_72;
                    case 4:
                    case 6:
                      llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, *((_DWORD *)&Relocation + 1) & 0xFFFFFF, (uint64_t)&v76);
                      if (v77) {
                        goto LABEL_80;
                      }
                      uint64_t SymbolByAddress = *((void *)v76 + 5);
                      uint64_t v38 = *(void *)(v63 + v31);
                      if (v28 == 4) {
                        char v39 = 2;
                      }
                      else {
                        char v39 = 3;
                      }
LABEL_72:
                      a2 = v68;
                      goto LABEL_73;
                    case 5:
                      uint64_t v41 = v29;
                      unint64_t v42 = *(void *)(v63 + v31);
                      llvm::jitlink::MachOLinkGraphBuilder::findSectionByIndex(this, (*((_DWORD *)&Relocation + 1) & 0xFFFFFF) - 1, (uint64_t)&v76);
                      if (v77)
                      {
                        char v39 = 0;
                        uint64_t SymbolByAddress = 0;
                        char v43 = 0;
                        uint64_t v46 = v76;
                        int64x2_t v76 = 0;
                        a2 = v68;
                      }
                      else
                      {
                        llvm::jitlink::MachOLinkGraphBuilder::findSymbolByAddress((uint64_t)this, (uint64_t)v76, v42, (uint64_t)&v86);
                        a2 = v68;
                        if ((v87 & 1) == 0)
                        {
                          uint64_t SymbolByAddress = (uint64_t)v86;
                          uint64_t v38 = v42
                              - (**(void **)(SymbolByAddress + 16)
                               + (*(void *)(SymbolByAddress + 24) & 0x1FFFFFFFFFFFFFFLL));
                          int v19 = 15;
                          char v43 = 1;
                          char v39 = 2;
                          uint64_t v13 = v69;
                          goto LABEL_90;
                        }
                        char v39 = 0;
                        uint64_t SymbolByAddress = 0;
                        char v43 = 0;
                        uint64_t v46 = v86;
                      }
                      *a2 = v46;
                      int v19 = 1;
                      uint64_t v13 = v69;
                      uint64_t v38 = v41;
LABEL_90:
                      if (v77)
                      {
                        unint64_t v47 = v76;
                        int64x2_t v76 = 0;
                        if (v47)
                        {
                          char v61 = v43;
                          uint64_t v64 = v38;
                          uint64_t v48 = SymbolByAddress;
                          (*(void (**)(const char *))(*(void *)v47 + 8))(v47);
                          char v43 = v61;
                          uint64_t SymbolByAddress = v48;
                          uint64_t v38 = v64;
                        }
                      }
                      if (v43) {
                        goto LABEL_120;
                      }
                      goto LABEL_22;
                    case 7:
                    case 9:
                    case 11:
                      uint64_t v32 = v29;
                      llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, *((_DWORD *)&Relocation + 1) & 0xFFFFFF, (uint64_t)&v76);
                      if (v77) {
                        goto LABEL_80;
                      }
                      uint64_t v13 = v69;
                      if (*(_DWORD *)(v63 + v31) >> 5 != 75497472) {
                        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
                      }
                      uint64_t SymbolByAddress = *((void *)v76 + 5);
                      if (v28 == 11) {
                        char v34 = 17;
                      }
                      else {
                        char v34 = 0;
                      }
                      if (v28 == 9) {
                        char v34 = 14;
                      }
                      BOOL v35 = v28 == 7;
                      char v36 = 12;
                      goto LABEL_58;
                    case 8:
                      uint64_t v32 = v29;
                      llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, *((_DWORD *)&Relocation + 1) & 0xFFFFFF, (uint64_t)&v76);
                      if (v77) {
                        goto LABEL_80;
                      }
                      a2 = v68;
                      uint64_t v13 = v69;
                      if ((*(_DWORD *)(v63 + v31) & 0x3FFC00) != 0) {
                        operator new();
                      }
                      uint64_t SymbolByAddress = *((void *)v76 + 5);
                      char v39 = 13;
                      goto LABEL_119;
                    case 10:
                    case 12:
                      uint64_t v32 = v29;
                      llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, *((_DWORD *)&Relocation + 1) & 0xFFFFFF, (uint64_t)&v76);
                      if (v77) {
                        goto LABEL_80;
                      }
                      uint64_t v13 = v69;
                      if (*(_DWORD *)(v63 + v31) >> 10 != 4083712) {
                        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
                      }
                      uint64_t SymbolByAddress = *((void *)v76 + 5);
                      if (v28 == 12) {
                        char v34 = 18;
                      }
                      else {
                        char v34 = 0;
                      }
                      BOOL v35 = v28 == 10;
                      char v36 = 15;
LABEL_58:
                      if (v35) {
                        char v39 = v36;
                      }
                      else {
                        char v39 = v34;
                      }
                      a2 = v68;
                      goto LABEL_119;
                    case 13:
                      uint64_t v32 = v29;
                      llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, *((_DWORD *)&Relocation + 1) & 0xFFFFFF, (uint64_t)&v76);
                      if (v77) {
                        goto LABEL_80;
                      }
                      uint64_t SymbolByAddress = *((void *)v76 + 5);
                      char v39 = 16;
                      a2 = v68;
                      uint64_t v13 = v69;
                      goto LABEL_119;
                    case 14:
                    case 15:
                      __break(1u);
                      JUMPOUT(0x261CE2430);
                    case 16:
                    case 17:
                      unint64_t v40 = v30;
                      (*(void (**)(uint64_t, unint64_t *))(*(void *)v73 + 296))(v73, &v72);
                      if (v72 == v23) {
                        operator new();
                      }
                      unint64_t v44 = llvm::object::MachOObjectFile::getRelocation(*((void *)this + 13), v72);
                      a2 = v68;
                      if (Relocation.r_address != v44) {
                        operator new();
                      }
                      unint64_t v45 = HIDWORD(v44);
                      if (((*((_DWORD *)&Relocation + 1) ^ HIDWORD(v44)) & 0x6000000) != 0) {
                        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
                      }
                      unint64_t v62 = v44;
                      llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, *((_DWORD *)&Relocation + 1) & 0xFFFFFF, (uint64_t)&v76);
                      if (v77)
                      {
                        unsigned int v51 = v76;
                      }
                      else
                      {
                        if ((~*((_DWORD *)&Relocation + 1) & 0x6000000) != 0) {
                          uint64_t v50 = *(int *)(v63 + v31);
                        }
                        else {
                          uint64_t v50 = *(void *)(v63 + v31);
                        }
                        uint64_t v65 = *((void *)v76 + 5);
                        if ((v45 & 0x8000000) != 0)
                        {
                          llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, HIDWORD(v62) & 0xFFFFFF, (uint64_t)&v76);
                          unsigned int v51 = v76;
                          if ((v77 & 1) == 0)
                          {
                            uint64_t SymbolByAddress = *((void *)v76 + 5);
                            goto LABEL_130;
                          }
                        }
                        else
                        {
                          llvm::jitlink::MachOLinkGraphBuilder::findSectionByIndex(this, (v45 & 0xFFFFFF) - 1, (uint64_t)&v76);
                          unsigned int v51 = v76;
                          if ((v77 & 1) == 0)
                          {
                            uint64_t SymbolByAddress = llvm::jitlink::MachOLinkGraphBuilder::getSymbolByAddress((uint64_t)this, (uint64_t)v76, *((void *)v76 + 5));
                            uint64_t v50 = v50
                                - (*(void *)(SymbolByAddress + 24) & 0x1FFFFFFFFFFFFFFLL)
                                - **(void **)(SymbolByAddress + 16);
                            if (v77)
                            {
                              uint64_t v52 = v76;
                              int64x2_t v76 = 0;
                              if (v52)
                              {
                                uint64_t v53 = SymbolByAddress;
                                (*(void (**)(const char *))(*(void *)v52 + 8))(v52);
                                uint64_t SymbolByAddress = v53;
                              }
                            }
LABEL_130:
                            uint64_t v54 = v65;
                            uint64_t v55 = *(uint64_t **)(SymbolByAddress + 16);
                            if (*(uint64_t **)(v65 + 16) != v24)
                            {
                              if (v55 != v24) {
                                llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
                              }
                              uint64_t v56 = v50;
                              uint64_t v57 = *v24;
                              uint64_t v58 = *(void *)(SymbolByAddress + 24) & 0x1FFFFFFFFFFFFFFLL;
                              goto LABEL_139;
                            }
                            uint64_t v56 = v50;
                            uint64_t v57 = *v24;
                            if (v55 != v24) {
                              goto LABEL_134;
                            }
                            uint64_t v58 = *(void *)(SymbolByAddress + 24) & 0x1FFFFFFFFFFFFFFLL;
                            if (v58 + v57 > v40) {
                              goto LABEL_134;
                            }
                            unint64_t v59 = (*(void *)(v65 + 24) & 0x1FFFFFFFFFFFFFFLL) + v57;
                            if (v59 > v40)
                            {
                              a2 = v68;
                              uint64_t v21 = v23;
                              uint64_t v54 = v65;
                              goto LABEL_139;
                            }
                            a2 = v68;
                            uint64_t v21 = v23;
                            uint64_t v54 = v65;
                            if (v59 < v58 + v57)
                            {
LABEL_139:
                              if ((~*((_DWORD *)&Relocation + 1) & 0x6000000) != 0) {
                                char v39 = 8;
                              }
                              else {
                                char v39 = 7;
                              }
                              uint64_t v38 = v56 - v40 + v58 + v57;
                              uint64_t SymbolByAddress = v54;
                            }
                            else
                            {
LABEL_134:
                              if ((~*((_DWORD *)&Relocation + 1) & 0x6000000) != 0) {
                                char v39 = 6;
                              }
                              else {
                                char v39 = 5;
                              }
                              uint64_t v38 = v56 + v40 - (v57 + (*(void *)(v54 + 24) & 0x1FFFFFFFFFFFFFFLL));
                            }
LABEL_73:
                            uint64_t v13 = v69;
                            goto LABEL_120;
                          }
                        }
                      }
                      *uint64_t v68 = v51;
LABEL_85:
                      int v19 = 1;
                      break;
                    default:
                      uint64_t v32 = v29;
                      llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, *((_DWORD *)&Relocation + 1) & 0xFFFFFF, (uint64_t)&v76);
                      if (v77)
                      {
LABEL_80:
                        a2 = v68;
                        *uint64_t v68 = v76;
                        goto LABEL_85;
                      }
                      a2 = v68;
                      uint64_t v13 = v69;
                      if ((*(_DWORD *)(v63 + v31) & 0x7FFFFFFF) != 0x14000000) {
                        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
                      }
                      uint64_t SymbolByAddress = *((void *)v76 + 5);
                      char v39 = 9;
LABEL_119:
                      uint64_t v38 = v32;
LABEL_120:
                      llvm::jitlink::Block::addEdge(v24, v39, v70 - *(_DWORD *)v24, SymbolByAddress, v38);
                      int v19 = 0;
                      char v22 = v83;
                      goto LABEL_22;
                  }
                }
                uint64_t v13 = v69;
              }
LABEL_22:
              if ((v22 & 1) != 0 && v82) {
                (*(void (**)(const char *))(*(void *)v82 + 8))(v82);
              }
              if (v19) {
                goto LABEL_149;
              }
              (*(void (**)(uint64_t, unint64_t *))(*(void *)v73 + 296))(v73, &v72);
              unint64_t v18 = v72;
              if (v72 == v21) {
                goto LABEL_12;
              }
            }
            *a2 = v82;
            int v19 = 1;
          }
LABEL_149:
          uint64_t v12 = v66;
          uint64_t v11 = v67;
        }
        else
        {
          int v19 = 5;
        }
        if (v85)
        {
          uint64_t v60 = v84;
          uint64_t v84 = 0;
          if (v60) {
            (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
          }
        }
        if (v19 != 5 && v19) {
          return;
        }
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v75 + 136))(v75, &v74);
      uint64_t v5 = v74;
      uint64_t v7 = v75;
    }
    while (v75 != v12 || v74 != v11);
  }
  *a2 = 0;
}

uint64_t llvm::jitlink::MachOLinkGraphBuilder::findSectionByIndex@<X0>(llvm::jitlink::MachOLinkGraphBuilder *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v10 = a2;
  v7[0] = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::LookupBucketFor<unsigned int>((uint64_t *)this + 16, &v10, v7);
  if (!result || v7[0] == *((void *)this + 16) + 120 * *((unsigned int *)this + 36))
  {
    v7[0] = "{0:d}";
    v7[1] = 5;
    void v7[2] = &v9;
    void v7[3] = 1;
    v8[0] = &unk_270DBEB80;
    v8[1] = &v10;
    uint64_t v9 = v8;
    operator new();
  }
  uint64_t v6 = v7[0] + 8;
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v6;
  return result;
}

char *anonymous namespace'::MachOLinkGraphBuilder_arm64::getRelocationKind(char *this, const relocation_info *a2)
{
  unsigned int v2 = *((_DWORD *)a2 + 1);
  switch(v2 >> 28)
  {
    case 0u:
      if ((v2 & 0x1000000) != 0) {
        goto LABEL_33;
      }
      int v3 = (v2 >> 25) & 3;
      if (v3 == 2)
      {
        this[8] &= ~1u;
        char v4 = 3;
        goto LABEL_59;
      }
      if (v3 != 3)
      {
LABEL_33:
        v29[0] = "{0:x8}";
        v29[1] = 6;
        long long v29[2] = &v31;
        void v29[3] = 1;
        v30[0] = &unk_270DBEB00;
        v30[1] = a2;
        uint64_t v31 = v30;
        v32[0] = "Unsupported arm64 relocation: address=";
        void v32[2] = v29;
        __int16 v33 = 1539;
        v34[0] = v32;
        v34[2] = ", symbolnum=";
        __int16 v35 = 770;
        int v25 = v2 & 0xFFFFFF;
        v26[0] = "{0:x6}";
        v26[1] = 6;
        long long v26[2] = &v28;
        v26[3] = 1;
        v27[0] = &unk_270DBCE28;
        v27[1] = &v25;
        int v28 = v27;
        v36[0] = v34;
        void v36[2] = v26;
        __int16 v37 = 1538;
        v38[0] = v36;
        v38[2] = ", kind=";
        __int16 v39 = 770;
        unsigned int v21 = v2 >> 28;
        v22[0] = "{0:x1}";
        v22[1] = 6;
        long long v22[2] = &v24;
        v22[3] = 1;
        v23[0] = &unk_270DBCE28;
        v23[1] = &v21;
        unint64_t v24 = v23;
        v40[0] = v38;
        void v40[2] = v22;
        __int16 v41 = 1538;
        *(void *)&long long v42 = v40;
        *(void *)&long long v43 = ", pc_rel=";
        LOWORD(v44) = 770;
        uint64_t v6 = "false";
        if ((v2 & 0x1000000) != 0) {
          uint64_t v7 = "true";
        }
        else {
          uint64_t v7 = "false";
        }
        uint64_t v8 = *(unsigned __int8 *)v7;
        if (*v7)
        {
          *(void *)&long long v45 = &v42;
          *(void *)&long long v46 = v7;
          char v9 = 2;
          int v10 = &v45;
          LOWORD(v47) = 770;
        }
        else
        {
          long long v45 = v42;
          long long v46 = v43;
          uint64_t v47 = v44;
          if (v44 == 1)
          {
            uint64_t v12 = ", extern=";
            *(void *)&long long v48 = ", extern=";
            LOWORD(v50) = 259;
            if ((v2 & 0x8000000) != 0) {
              uint64_t v6 = "true";
            }
            if (*v6)
            {
              char v11 = 3;
              goto LABEL_42;
            }
LABEL_48:
            long long v51 = v48;
            long long v52 = v49;
            uint64_t v53 = v50;
            char v11 = v50;
LABEL_49:
            if (BYTE1(v53) != 1) {
              char v11 = 2;
            }
            uint64_t v55 = *((void *)&v51 + 1);
            uint64_t v56 = ", length=";
            uint64_t v13 = &v51;
            if (BYTE1(v53) == 1) {
              uint64_t v13 = (long long *)v51;
            }
            char v58 = 3;
            uint64_t v54 = v13;
            char v57 = v11;
            int v14 = (v2 >> 25) & 3;
            int v15 = "{0:d}";
            uint64_t v16 = 5;
            uint64_t v17 = &v20;
            uint64_t v18 = 1;
            v19[0] = &unk_270DBCE28;
            v19[1] = &v14;
            uint64_t v20 = v19;
            operator new();
          }
          uint64_t v8 = *((void *)&v45 + 1);
          int v10 = (long long *)v45;
          if (BYTE1(v47) == 1)
          {
            char v9 = v44;
          }
          else
          {
            int v10 = &v45;
            char v9 = 2;
          }
        }
        *(void *)&long long v48 = v10;
        *((void *)&v48 + 1) = v8;
        *(void *)&long long v49 = ", extern=";
        LOBYTE(v50) = v9;
        BYTE1(v50) = 3;
        if ((v2 & 0x8000000) != 0) {
          uint64_t v6 = "true";
        }
        if (*v6)
        {
          char v11 = 2;
          uint64_t v12 = (const char *)&v48;
LABEL_42:
          *(void *)&long long v51 = v12;
          *(void *)&long long v52 = v6;
          LOBYTE(v53) = v11;
          BYTE1(v53) = 3;
          goto LABEL_49;
        }
        goto LABEL_48;
      }
      if ((v2 & 0x8000000) != 0) {
        char v4 = 4;
      }
      else {
        char v4 = 5;
      }
      this[8] &= ~1u;
LABEL_59:
      *this = v4;
      return this;
    case 1u:
      if ((v2 & 0x9000000) != 0x8000000) {
        goto LABEL_33;
      }
      int v5 = (v2 >> 25) & 3;
      if (v5 == 3)
      {
        this[8] &= ~1u;
        char v4 = 17;
        goto LABEL_59;
      }
      if (v5 != 2) {
        goto LABEL_33;
      }
      this[8] &= ~1u;
      char v4 = 16;
      goto LABEL_59;
    case 2u:
      if ((v2 & 0xF000000) != 0xD000000) {
        goto LABEL_33;
      }
      this[8] &= ~1u;
      char v4 = 2;
      goto LABEL_59;
    case 3u:
      if ((v2 & 0xF000000) != 0xD000000) {
        goto LABEL_33;
      }
      this[8] &= ~1u;
      char v4 = 7;
      goto LABEL_59;
    case 4u:
      if ((v2 & 0xF000000) != 0xC000000) {
        goto LABEL_33;
      }
      this[8] &= ~1u;
      char v4 = 8;
      goto LABEL_59;
    case 5u:
      if ((v2 & 0xF000000) != 0xD000000) {
        goto LABEL_33;
      }
      this[8] &= ~1u;
      char v4 = 9;
      goto LABEL_59;
    case 6u:
      if ((v2 & 0xF000000) != 0xC000000) {
        goto LABEL_33;
      }
      this[8] &= ~1u;
      char v4 = 10;
      goto LABEL_59;
    case 7u:
      if ((v2 & 0xF000000) != 0xD000000) {
        goto LABEL_33;
      }
      this[8] &= ~1u;
      char v4 = 13;
      goto LABEL_59;
    case 8u:
      if ((v2 & 0xF000000) != 0xD000000) {
        goto LABEL_33;
      }
      this[8] &= ~1u;
      char v4 = 11;
      goto LABEL_59;
    case 9u:
      if ((v2 & 0xF000000) != 0xC000000) {
        goto LABEL_33;
      }
      this[8] &= ~1u;
      char v4 = 12;
      goto LABEL_59;
    case 0xAu:
      if ((v2 & 0xF000000) != 0x4000000) {
        goto LABEL_33;
      }
      this[8] &= ~1u;
      char v4 = 14;
      goto LABEL_59;
    case 0xBu:
      if ((v2 & 0xF000000) != 0xE000000) {
        goto LABEL_33;
      }
      this[8] &= ~1u;
      char v4 = 6;
      goto LABEL_59;
    default:
      goto LABEL_33;
  }
}

uint64_t llvm::jitlink::MachOLinkGraphBuilder::findSymbolByAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v13 = a3;
  uint64_t result = llvm::jitlink::MachOLinkGraphBuilder::getSymbolByAddress(a1, a2, a3);
  if (!result
    || (*(void *)(result + 24) & 0x1FFFFFFFFFFFFFFuLL) + *(void *)(result + 32) + **(void **)(result + 16) < a3)
  {
    uint64_t v7 = "{0:x16}";
    uint64_t v8 = 7;
    char v9 = &v12;
    uint64_t v10 = 1;
    v11[0] = &unk_270DBD808;
    v11[1] = &v13;
    uint64_t v12 = v11;
    operator new();
  }
  *(unsigned char *)(a4 + 8) &= ~1u;
  *(void *)a4 = result;
  return result;
}

uint64_t llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex@<X0>(llvm::jitlink::MachOLinkGraphBuilder *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = a2;
  LODWORD(v11) = a2;
  v7[0] = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)this + 20, &v11, v7);
  if (!result || v7[0] == *((void *)this + 20) + 16 * *((unsigned int *)this + 44))
  {
    v7[0] = "{0:d}";
    v7[1] = 5;
    void v7[2] = &v9;
    void v7[3] = 1;
    v8[0] = &unk_270DBE1A0;
    v8[1] = &v10;
    char v9 = v8;
    operator new();
  }
  uint64_t v6 = *(void *)(v7[0] + 8);
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v6;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::LookupBucketFor<unsigned int>(uint64_t *a1, _DWORD *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = (37 * *a2) & (v3 - 1);
    uint64_t v7 = (_DWORD *)(*a1 + 120 * v6);
    int v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -2;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (_DWORD *)(v4 + 120 * (v13 & v5));
        int v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void llvm::detail::provider_format_adapter<unsigned int &>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned int &>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned int,void>::format(*(unsigned int **)(a1 + 8), a2, a3, a4);
}

void llvm::detail::provider_format_adapter<int const&>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<int const&>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<int,void>::format(*(unsigned int **)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *llvm::format_provider<int,void>::format(unsigned int *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  int v15 = 0;
  if (!llvm::detail::HelperFunctions::consumeHexStyle((const void **)&v16, &v15))
  {
    if (v17)
    {
      int v12 = 0;
      unsigned int v13 = *v16;
      if (v13 <= 0x63)
      {
        if (v13 != 68)
        {
          if (v13 != 78) {
            goto LABEL_19;
          }
          goto LABEL_16;
        }
LABEL_17:
        int v12 = 0;
        ++v16;
        goto LABEL_18;
      }
      if (v13 == 100) {
        goto LABEL_17;
      }
      if (v13 == 110)
      {
LABEL_16:
        ++v16;
        int v12 = 1;
LABEL_18:
        --v17;
      }
    }
    else
    {
      int v12 = 0;
    }
LABEL_19:
    size_t v18 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6)) {
      size_t v14 = 0;
    }
    else {
      size_t v14 = v18;
    }
    return llvm::write_integer(a2, *a1, v14, v12);
  }
  int v7 = v15;
  size_t v18 = 0;
  int v8 = llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6);
  unint64_t v9 = v18;
  if (v8) {
    unint64_t v9 = 0;
  }
  if ((v7 & 0xFFFFFFFE) == 2) {
    unint64_t v10 = v9 + 2;
  }
  else {
    unint64_t v10 = v9;
  }
  return llvm::write_hex(a2, (int)*a1, v7, v10, 1);
}

uint64_t llvm::jitlink::MachOLinkGraphBuilder::getSymbolByAddress(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3 = (void *)(a2 + 96);
  uint64_t v4 = *(void **)(a2 + 96);
  if (v4)
  {
    do
    {
      unint64_t v5 = v4[4];
      BOOL v6 = v5 > a3;
      if (v5 <= a3) {
        int v7 = v4 + 1;
      }
      else {
        int v7 = v4;
      }
      if (v6) {
        int v3 = v4;
      }
      uint64_t v4 = (void *)*v7;
    }
    while (*v7);
  }
  if (v3 == *(void **)(a2 + 88)) {
    return 0;
  }
  int v8 = (void *)*v3;
  if (*v3)
  {
    do
    {
      unint64_t v9 = v8;
      int v8 = (void *)v8[1];
    }
    while (v8);
  }
  else
  {
    do
    {
      unint64_t v9 = (void *)v3[2];
      BOOL v10 = *v9 == (void)v3;
      int v3 = v9;
    }
    while (v10);
  }
  return v9[5];
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>(uint64_t *a1, _DWORD *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = (37 * *a2) & (v3 - 1);
    int v7 = (_DWORD *)(*a1 + 16 * v6);
    int v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      BOOL v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -2;
        }
        if (v12) {
          BOOL v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        int v7 = (_DWORD *)(v4 + 16 * (v13 & v5));
        int v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v7 = v10;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(void *a1, _OWORD *a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v6 = a2[1];
  v19[0] = *a2;
  v19[1] = v6;
  long long v7 = a2[3];
  void v19[2] = a2[2];
  long long v20 = v7;
  uint64_t v8 = *a3;
  uint64_t v9 = a3[6];
  if (*(void *)&v19[0] != *a3 || (unint64_t v10 = 0, (void)v20 != v9))
  {
    unint64_t v10 = 0;
    do
    {
      ++v10;
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)v19, (uint64_t)v21);
    }
    while (*(void *)&v19[0] != v8 || (void)v20 != v9);
  }
  long long v12 = a2[1];
  v18[0] = *a2;
  v18[1] = v12;
  long long v13 = a2[3];
  long long v18[2] = a2[2];
  _OWORD v18[3] = v13;
  long long v14 = *((_OWORD *)a3 + 1);
  v17[0] = *(_OWORD *)a3;
  v17[1] = v14;
  long long v15 = *((_OWORD *)a3 + 3);
  uint64_t v17[2] = *((_OWORD *)a3 + 2);
  v17[3] = v15;
  std::vector<llvm::jitlink::Block *>::__init_with_size[abi:nn180100]<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>>(a1, v18, v17, v10);
  return a1;
}

void *std::vector<llvm::jitlink::Block *>::__init_with_size[abi:nn180100]<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>>(void *result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](result, a4);
    long long v7 = a2[1];
    v12[0] = *a2;
    v12[1] = v7;
    long long v8 = a2[3];
    void v12[2] = a2[2];
    _OWORD v12[3] = v8;
    long long v9 = a3[1];
    v11[0] = *a3;
    v11[1] = v9;
    long long v10 = a3[3];
    void v11[2] = a3[2];
    _OWORD v11[3] = v10;
    uint64_t result = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<llvm::jitlink::Block *>,llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,llvm::jitlink::Block **>((uint64_t)(v6 + 2), v12, (uint64_t *)v11, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void *std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<llvm::jitlink::Block *>,llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,llvm::jitlink::Block **>(uint64_t a1, _OWORD *a2, uint64_t *a3, void *a4)
{
  long long v5 = a2[1];
  v12[0] = *a2;
  v12[1] = v5;
  long long v6 = a2[3];
  void v12[2] = a2[2];
  long long v13 = v6;
  uint64_t v7 = *a3;
  uint64_t v8 = a3[6];
  long long v9 = (void *)v6;
  if (*(void *)&v12[0] != *a3 || (void)v6 != v8)
  {
    do
    {
      *a4++ = *v9;
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)v12, (uint64_t)v14);
      long long v9 = (void *)v13;
    }
    while (*(void *)&v12[0] != v7 || (void)v13 != v8);
  }
  return a4;
}

uint64_t llvm::jitlink::aarch64::GOTTableManager::visitEdge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = 12;
  switch(*(unsigned char *)(a4 + 24))
  {
    case 0xE:
    case 0x11:
      goto LABEL_5;
    case 0xF:
    case 0x12:
      char v4 = 13;
      goto LABEL_5;
    case 0x10:
      char v4 = 6;
LABEL_5:
      *(unsigned char *)(a4 + 24) = v4;
      *(void *)a4 = llvm::jitlink::TableManager<llvm::jitlink::aarch64::GOTTableManager>::getEntryForTarget(a1, a2, *(_OWORD **)a4, (unint64_t *)a4);
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t llvm::jitlink::TableManager<llvm::jitlink::aarch64::GOTTableManager>::getEntryForTarget(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  v14[0] = *a3;
  *(void *)&long long v12 = 0;
  int v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v14, &v12, a4);
  uint64_t v8 = v12;
  if (!v7) {
    uint64_t v8 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  }
  if (v8 == *(void *)a1 + 24 * *(unsigned int *)(a1 + 16))
  {
    Entry = llvm::jitlink::aarch64::GOTTableManager::createEntry(a1, a2, (uint64_t)a3);
    long long v12 = *a3;
    long long v13 = Entry;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>(a1, &v12, &v13, v10, (uint64_t)v14);
    uint64_t v8 = *(void *)&v14[0];
  }
  return *(void *)(v8 + 16);
}

void *llvm::jitlink::aarch64::GOTTableManager::createEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    llvm::jitlink::LinkGraph::createSection();
  }
  v11[0] = (uint64_t)&llvm::jitlink::aarch64::NullPointerContent;
  v11[1] = 8;
  unint64_t v9 = 8;
  uint64_t v10 = -8;
  uint64_t v8 = 0;
  long long v6 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, v5, v11, &v10, &v9, &v8);
  llvm::jitlink::Block::addEdge(v6, 2, 0, a3, 0);
  return llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v6, 0, 8, 0, 0);
}

uint64_t llvm::jitlink::TableManager<llvm::jitlink::aarch64::PLTTableManager>::getEntryForTarget(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  v15[0] = *a3;
  *(void *)&long long v13 = 0;
  int v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v15, &v13, a4);
  uint64_t v9 = v13;
  if (!v7) {
    uint64_t v9 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  }
  if (v9 == *(void *)a1 + 24 * *(unsigned int *)(a1 + 16))
  {
    Entry = llvm::jitlink::aarch64::PLTTableManager::createEntry(a1, a2, a3, v8);
    long long v13 = *a3;
    long long v14 = Entry;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>(a1, &v13, &v14, v11, (uint64_t)v15);
    uint64_t v9 = *(void *)&v15[0];
  }
  return *(void *)(v9 + 16);
}

void *llvm::jitlink::aarch64::PLTTableManager::createEntry(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5) {
    llvm::jitlink::LinkGraph::createSection();
  }
  uint64_t EntryForTarget = llvm::jitlink::TableManager<llvm::jitlink::aarch64::GOTTableManager>::getEntryForTarget(*(void *)(a1 + 24), a2, a3, a4);
  v12[0] = (uint64_t)&llvm::jitlink::aarch64::PointerJumpStubContent;
  v12[1] = 12;
  unint64_t v10 = 4;
  uint64_t v11 = -12;
  uint64_t v9 = 0;
  int v7 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, v5, v12, &v11, &v10, &v9);
  llvm::jitlink::Block::addEdge(v7, 12, 0, EntryForTarget, 0);
  llvm::jitlink::Block::addEdge(v7, 13, 4, EntryForTarget, 0);
  return llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v7, 0, 12, 1, 0);
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::Error (*)(llvm::jitlink::LinkGraph &)>(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::jitlink::ObjCStubsBuilder<llvm::jitlink::Block & (*)(llvm::jitlink::LinkGraph &,llvm::jitlink::Section &,llvm::jitlink::Symbol &,llvm::jitlink::Symbol &)>>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v28[6] = *MEMORY[0x263EF8340];
  *(void *)(a1 + 24) = a2;
  uint64_t v26 = v28;
  uint64_t v27 = 0x600000000;
  long long v6 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 208);
  uint64_t v9 = *(void *)(a2 + 208) + 8 * *(unsigned int *)(a2 + 224);
  if ((uint64_t *)v9 != v6)
  {
    unint64_t v10 = v6;
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10;
      if (*(void *)(*v10 + 8) >= 0xEuLL
        && **(void **)v12 == 0x736D5F636A626F5FLL
        && *(void *)(*(void *)v12 + 6) == 0x24646E655367736DLL)
      {
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v26, v12);
      }
      while (++v10 != v11)
      {
        if ((*v10 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_14;
        }
      }
      unint64_t v10 = v11;
LABEL_14:
      ;
    }
    while (v10 != (uint64_t *)v9);
  }
  if (v27)
  {
    llvm::jitlink::ObjCStubsBuilderBase::initialize((llvm::jitlink::ObjCStubsBuilderBase *)a1, v8, a3);
    long long v15 = (char *)v26;
    if (*a3) {
      goto LABEL_28;
    }
    if (v27)
    {
      uint64_t v16 = 8 * v27;
      do
      {
        uint64_t v17 = *(void **)v15;
        unint64_t v18 = *(void *)(*(void *)v15 + 8);
        if (v18 >= 0xE) {
          uint64_t v19 = 14;
        }
        else {
          uint64_t v19 = *(void *)(*(void *)v15 + 8);
        }
        uint64_t v23 = (const void *)(**(void **)v15 + v19);
        size_t v24 = v18 - v19;
        uint64_t v25 = 0;
        if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 112), (uint64_t)&v23, &v25, v14)|| v25 == *(void *)(a1 + 112) + 24 * *(unsigned int *)(a1 + 128))
        {
          Selector = llvm::jitlink::ObjCStubsBuilderBase::getOrCreateSelector(a1, v23, v24, v20);
          uint64_t v21 = (*(uint64_t (**)(uint64_t, void, void *, void))(a1 + 136))(a2, *(void *)(a1 + 48), Selector, *(void *)(a1 + 56));
        }
        else
        {
          uint64_t v21 = *(void *)(v25 + 16);
        }
        llvm::jitlink::LinkGraph::makeDefined(a2, v17, v21, 0, *(void *)(v21 + 32), 0, 2, 0);
        v15 += 8;
        v16 -= 8;
      }
      while (v16);
    }
  }
  *a3 = 0;
  long long v15 = (char *)v26;
LABEL_28:
  if (v15 != (char *)v28) {
    free(v15);
  }
}

__n128 llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::MoveImpl<llvm::jitlink::ObjCStubsBuilder<llvm::jitlink::Block & (*)(llvm::jitlink::LinkGraph &,llvm::jitlink::Section &,llvm::jitlink::Symbol &,llvm::jitlink::Symbol &)>>(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  int v5 = *(_DWORD *)(a1 + 76);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = v5;
  int v6 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = v6;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  int v7 = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = v7;
  int v8 = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = v8;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  int v9 = *(_DWORD *)(a1 + 124);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = v9;
  int v10 = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = v10;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::DestroyImpl<llvm::jitlink::ObjCStubsBuilder<llvm::jitlink::Block & (*)(llvm::jitlink::LinkGraph &,llvm::jitlink::Section &,llvm::jitlink::Symbol &,llvm::jitlink::Symbol &)>>(uint64_t a1)
{
  MEMORY[0x263E500A0](*(void *)(a1 + 112), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 88), 8);
  JUMPOUT(0x263E500A0);
}

void llvm::jitlink::MachOJITLinker_arm64::~MachOJITLinker_arm64(llvm::jitlink::MachOJITLinker_arm64 *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x263E500B0);
}

void llvm::jitlink::JITLinker<llvm::jitlink::MachOJITLinker_arm64>::fixUpBlocks(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 192))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 200);
    if (v4)
    {
      uint64_t v5 = 24 * v4;
      int v6 = *(void **)(a1 + 184);
      while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v6 += 3;
        v5 -= 24;
        if (!v5) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      int v6 = *(void **)(a1 + 184);
    }
    uint64_t v7 = *(void *)(a1 + 184) + 24 * v4;
LABEL_10:
    if (v6 != (void *)v7)
    {
      uint64_t v8 = v6[2];
      int v21 = *(_DWORD *)(v8 + 20);
      int v9 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 32);
      uint64_t v11 = *(void *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
      if ((uint64_t **)v11 == v9) {
        goto LABEL_28;
      }
      uint64_t v12 = v9;
      long long v13 = v10;
      do
      {
        long long v14 = *v12;
        if (v21 == 2 && (v14[1] & 4) == 0)
        {
          size_t v15 = v14[4];
          unint64_t __src = (void *)v14[3];
          uint64_t v16 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, v15, 0);
          uint64_t v17 = (uint64_t)v16;
          if (v15) {
            memmove(v16, __src, v15);
          }
          _OWORD v14[3] = v17;
          v14[4] = v15;
          v14[1] |= 4uLL;
        }
        uint64_t v18 = v14[5];
        uint64_t v19 = v14[6];
        while (v18 != v19)
        {
          if (*(unsigned __int8 *)(v18 + 24) >= 2u)
          {
            llvm::jitlink::aarch64::applyFixup(a1, v14, v18, a2);
            if (*a2) {
              return;
            }
          }
          v18 += 32;
        }
        while (++v12 != v13)
        {
          if (((unint64_t)*v12 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_27;
          }
        }
        uint64_t v12 = v13;
LABEL_27:
        ;
      }
      while (v12 != (uint64_t **)v11);
LABEL_28:
      while (1)
      {
        v6 += 3;
        if (v6 == (void *)v7) {
          break;
        }
        if (*v6 < 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_10;
        }
      }
    }
  }
LABEL_6:
  *a2 = 0;
}

__n128 llvm::jitlink::JITLinkerBase::JITLinkerBase(void *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *a1 = &unk_270DBEA20;
  a1[1] = v4;
  uint64_t v5 = *a3;
  *a3 = 0;
  a1[2] = v5;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)a4;
  a1[5] = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a4 + 24);
  a1[8] = *(void *)(a4 + 40);
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a4 + 48);
  a1[11] = *(void *)(a4 + 64);
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a4 + 72);
  a1[14] = *(void *)(a4 + 88);
  *(void *)(a4 + 72) = 0;
  *(void *)(a4 + 80) = 0;
  *(void *)(a4 + 88) = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  __n128 result = *(__n128 *)(a4 + 96);
  *(__n128 *)(a1 + 15) = result;
  a1[17] = *(void *)(a4 + 112);
  *(void *)(a4 + 96) = 0;
  *(void *)(a4 + 104) = 0;
  *(void *)(a4 + 112) = 0;
  a1[18] = 0;
  return result;
}

void llvm::jitlink::JITLinker<llvm::jitlink::MachOJITLinker_arm64>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::jitlink::aarch64::applyFixup@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int v7 = *(unsigned __int8 *)(a3 + 24);
  uint64_t v8 = a2[3];
  uint64_t v9 = *(unsigned int *)(a3 + 8);
  uint64_t v10 = *a2 + v9;
  switch(*(unsigned char *)(a3 + 24))
  {
    case 2:
      unint64_t v11 = (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          + *(void *)(a3 + 16)
          + **(void **)(*(void *)a3 + 16);
      goto LABEL_9;
    case 4:
      unint64_t v11 = (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          + *(void *)(a3 + 16)
          + **(void **)(*(void *)a3 + 16);
      if (!HIDWORD(v11)) {
        goto LABEL_13;
      }
      goto LABEL_40;
    case 5:
    case 6:
    case 7:
    case 8:
      if ((v7 - 5) <= 1)
      {
        unint64_t v11 = **(void **)(*(void *)a3 + 16)
            - v10
            + (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
            + *(void *)(a3 + 16);
        if (v7 != 6) {
          goto LABEL_9;
        }
        goto LABEL_6;
      }
      unint64_t v11 = v10
          - (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          - **(void **)(*(void *)a3 + 16)
          + *(void *)(a3 + 16);
      if (v7 == 8)
      {
LABEL_6:
        if (v11 == (int)v11)
        {
LABEL_13:
          *(_DWORD *)(v8 + v9) = v11;
          goto LABEL_49;
        }
LABEL_40:
        llvm::jitlink::makeTargetOutOfRangeError(result, a2, a3);
      }
LABEL_9:
      *(void *)(v8 + v9) = v11;
LABEL_49:
      *a4 = 0;
      return result;
    case 9:
      uint64_t v15 = **(void **)(*(void *)a3 + 16)
          - v10
          + (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          + *(void *)(a3 + 16);
      if ((v15 & 3) != 0)
      {
        goto LABEL_17;
      }
      if ((unint64_t)(v15 - 0x8000000) <= 0xFFFFFFFFEFFFFFFFLL) {
        goto LABEL_40;
      }
      int v25 = *(_DWORD *)(v8 + v9) | (v15 >> 2) & 0x3FFFFFF;
      break;
    case 0xA:
      unsigned int v16 = *(_DWORD *)(v8 + v9);
      if ((v16 & 0x5F9FFFE0) == 0x52800000) {
        char v17 = (v16 >> 17) & 0x30;
      }
      else {
        char v17 = 0;
      }
      int v18 = 32
          * (unsigned __int16)(((*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                              + *(void *)(a3 + 16)
                              + **(void **)(*(void *)a3 + 16)) >> v17);
      goto LABEL_47;
    case 0xB:
      uint64_t v19 = (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(*(void *)a3 + 16) - v10;
      if ((v19 & 3) != 0)
      {
        goto LABEL_17;
      }
      if ((unint64_t)(v19 - 0x100000) <= 0xFFFFFFFFFFDFFFFFLL) {
        goto LABEL_40;
      }
      unsigned int v16 = *(_DWORD *)(v8 + v9);
      int v18 = (8 * v19) & 0xFFFFE0;
LABEL_47:
      int v25 = v18 | v16;
      break;
    case 0xC:
      unint64_t v20 = (((*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
            + *(void *)(a3 + 16)
            + **(void **)(*(void *)a3 + 16)) & 0xFFFFFFFFFFFFF000)
          - (v10 & 0xFFFFFFFFFFFFF000);
      if ((v20 + 0x100000000) >> 33) {
        goto LABEL_40;
      }
      unsigned int v16 = *(_DWORD *)(v8 + v9);
      int v18 = (v20 >> 9) & 0xFFFFE0 | (((v20 >> 12) & 3) << 29);
      goto LABEL_47;
    case 0xD:
      uint64_t v21 = *(void *)(*(void *)a3 + 24) + *(void *)(a3 + 16) + **(void **)(*(void *)a3 + 16);
      unsigned int v22 = *(_DWORD *)(v8 + v9);
      unsigned int v23 = v22 >> 30;
      if (!(v22 >> 30)) {
        unsigned int v23 = (4 * ((~v22 & 0x4800000) == 0));
      }
      if ((v22 & 0x3B000000) == 0x39000000) {
        char v24 = v23;
      }
      else {
        char v24 = 0;
      }
      if ((v21 & ~(-1 << v24)) != 0)
      {
LABEL_17:
        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
      }
      int v25 = v22 | ((unint64_t)(v21 & 0xFFF) >> v24 << 10);
      break;
    default:
      std::operator+<char>();
      uint64_t v12 = std::string::append(&v26, ", section ");
      std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      std::string::size_type v28 = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      long long v14 = *(_OWORD *)a2[2];
      uint64_t v29 = __p;
      long long v30 = v14;
      __int16 v31 = 1284;
      uint64_t v32 = &v29;
      __int16 v33 = " unsupported edge kind ";
      __int16 v34 = 770;
      if (!*llvm::jitlink::aarch64::getEdgeKindName((llvm::jitlink::aarch64 *)*(unsigned __int8 *)(a3 + 24)))
      {
        int v37 = v35;
        __int16 v38 = v36;
      }
      operator new();
  }
  *(_DWORD *)(v8 + v9) = v25;
  goto LABEL_49;
}

void llvm::jitlink::createLinkGraphFromMachOObject_x86_64(_OWORD *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  long long v1 = a1[1];
  v2[0] = *a1;
  v2[1] = v1;
  llvm::object::ObjectFile::createMachOObjectFile((uint64_t)v2);
}

void llvm::jitlink::link_MachO_x86_64(void *a1, void *a2)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  uint64_t v78 = 0;
  long long v77 = 0u;
  memset(v76, 0, sizeof(v76));
  memset(v75, 0, sizeof(v75));
  int64x2_t v74 = 0u;
  if ((*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, *a1 + 120))
  {
    char v85 = "__TEXT,__eh_frame";
    *(void *)&long long v86 = 17;
    char v87 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::DWARFRecordSectionSplitter,llvm::jitlink::DWARFRecordSectionSplitter,void>::Callbacks
                                    + 2);
    uint64_t v82 = (char *)v75;
    uint64_t v79 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v75, 1uLL);
    v80.i64[0] = (uint64_t)v79;
    unint64_t v81 = &v79[4 * v3];
    uint64_t v4 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v79, (long long *)&v85)+ 32;
    v80.i64[1] = v4;
    uint64_t v5 = (long long *)v74.i64[1];
    uint64_t v6 = v80.i64[0];
    if (v74.i64[1] == v74.i64[0])
    {
      int64x2_t v7 = vdupq_n_s64(v74.u64[1]);
    }
    else
    {
      do
      {
        v5 -= 2;
        uint64_t v6 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v6 - 32, v5);
      }
      while (v5 != (long long *)v74.i64[0]);
      int64x2_t v7 = v74;
      uint64_t v4 = v80.i64[1];
    }
    v74.i64[0] = v6;
    int64x2_t v80 = v7;
    uint64_t v8 = *(void ***)&v75[0];
    *(void *)&v75[0] = v81;
    unint64_t v81 = v8;
    uint64_t v79 = (void **)v7.i64[0];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v79);
    v74.i64[1] = v4;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v85);
    uint64_t v9 = operator new(0x20uLL, (std::align_val_t)8uLL);
    long long v86 = xmmword_261E8A760;
    *uint64_t v9 = "__TEXT,__eh_frame";
    v9[1] = 17;
    *((_DWORD *)v9 + 4) = 8;
    *((_DWORD *)v9 + 5) = 101122563;
    *((unsigned char *)v9 + 24) = 9;
    char v85 = (const char *)v9;
    char v87 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameEdgeFixer,llvm::jitlink::EHFrameEdgeFixer,void>::Callbacks;
    if (v74.i64[1] >= *(void *)&v75[0])
    {
      uint64_t v11 = (v74.i64[1] - v74.i64[0]) >> 5;
      if ((unint64_t)(v11 + 1) >> 59) {
        goto LABEL_113;
      }
      unint64_t v12 = (*(void *)&v75[0] - v74.i64[0]) >> 4;
      if (v12 <= v11 + 1) {
        unint64_t v12 = v11 + 1;
      }
      if (*(void *)&v75[0] - v74.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      uint64_t v82 = (char *)v75;
      if (v13) {
        long long v14 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v75, v13);
      }
      else {
        long long v14 = 0;
      }
      uint64_t v15 = (uint64_t)&v14[4 * v11];
      uint64_t v79 = v14;
      v80.i64[0] = v15;
      unint64_t v81 = &v14[4 * v13];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v15, (long long *)&v85);
      unint64_t v10 = v15 + 32;
      v80.i64[1] = v15 + 32;
      unsigned int v16 = (long long *)v74.i64[1];
      uint64_t v17 = v80.i64[0];
      if (v74.i64[1] == v74.i64[0])
      {
        int64x2_t v18 = vdupq_n_s64(v74.u64[1]);
      }
      else
      {
        do
        {
          v16 -= 2;
          uint64_t v17 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v17 - 32, v16);
        }
        while (v16 != (long long *)v74.i64[0]);
        int64x2_t v18 = v74;
        unint64_t v10 = v80.u64[1];
      }
      v74.i64[0] = v17;
      v74.i64[1] = v10;
      int64x2_t v80 = v18;
      uint64_t v19 = *(void ***)&v75[0];
      *(void *)&v75[0] = v81;
      unint64_t v81 = v19;
      uint64_t v79 = (void **)v18.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v79);
    }
    else
    {
      unint64_t v10 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v74.i64[1], (long long *)&v85)+ 32;
    }
    v74.i64[1] = v10;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v85);
    char v85 = "__LD,__compact_unwind";
    *(void *)&long long v86 = 21;
    char v87 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::CompactUnwindSplitter,llvm::jitlink::CompactUnwindSplitter,void>::Callbacks
                                    + 2);
    if (v10 >= *(void *)&v75[0])
    {
      uint64_t v21 = (v74.i64[1] - v74.i64[0]) >> 5;
      if ((unint64_t)(v21 + 1) >> 59) {
        goto LABEL_113;
      }
      unint64_t v22 = (*(void *)&v75[0] - v74.i64[0]) >> 4;
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      if (*(void *)&v75[0] - v74.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      uint64_t v82 = (char *)v75;
      if (v23) {
        char v24 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v75, v23);
      }
      else {
        char v24 = 0;
      }
      uint64_t v25 = (uint64_t)&v24[4 * v21];
      uint64_t v79 = v24;
      v80.i64[0] = v25;
      unint64_t v81 = &v24[4 * v23];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v25, (long long *)&v85);
      uint64_t v20 = v25 + 32;
      v80.i64[1] = v25 + 32;
      std::string v26 = (long long *)v74.i64[1];
      uint64_t v27 = v80.i64[0];
      if (v74.i64[1] == v74.i64[0])
      {
        int64x2_t v28 = vdupq_n_s64(v74.u64[1]);
      }
      else
      {
        do
        {
          v26 -= 2;
          uint64_t v27 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v27 - 32, v26);
        }
        while (v26 != (long long *)v74.i64[0]);
        int64x2_t v28 = v74;
        uint64_t v20 = v80.i64[1];
      }
      v74.i64[0] = v27;
      v74.i64[1] = v20;
      int64x2_t v80 = v28;
      uint64_t v29 = *(void ***)&v75[0];
      *(void *)&v75[0] = v81;
      unint64_t v81 = v29;
      uint64_t v79 = (void **)v28.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v79);
    }
    else
    {
      uint64_t v20 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v10, (long long *)&v85)+ 32;
    }
    v74.i64[1] = v20;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v85);
    (*(void (**)(const char **__return_ptr))(*(void *)*a2 + 64))(&v85);
    if ((unint64_t)v87 < 8)
    {
      *(void *)&long long v83 = llvm::jitlink::markAllSymbolsLive;
      uint64_t v84 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
          + 2;
      if (v74.i64[1] >= *(void *)&v75[0])
      {
        uint64_t v36 = (v74.i64[1] - v74.i64[0]) >> 5;
        if ((unint64_t)(v36 + 1) >> 59) {
          goto LABEL_113;
        }
        unint64_t v37 = (*(void *)&v75[0] - v74.i64[0]) >> 4;
        if (v37 <= v36 + 1) {
          unint64_t v37 = v36 + 1;
        }
        if (*(void *)&v75[0] - v74.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v38 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v37;
        }
        uint64_t v82 = (char *)v75;
        if (v38) {
          __int16 v39 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v75, v38);
        }
        else {
          __int16 v39 = 0;
        }
        uint64_t v44 = (uint64_t)&v39[4 * v36];
        uint64_t v79 = v39;
        v80.i64[0] = v44;
        unint64_t v81 = &v39[4 * v38];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v44, &v83);
        uint64_t v31 = v44 + 32;
        v80.i64[1] = v44 + 32;
        long long v45 = (long long *)v74.i64[1];
        uint64_t v46 = v80.i64[0];
        if (v74.i64[1] == v74.i64[0])
        {
          int64x2_t v47 = vdupq_n_s64(v74.u64[1]);
        }
        else
        {
          do
          {
            v45 -= 2;
            uint64_t v46 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v46 - 32, v45);
          }
          while (v45 != (long long *)v74.i64[0]);
          int64x2_t v47 = v74;
          uint64_t v31 = v80.i64[1];
        }
        v74.i64[0] = v46;
        v74.i64[1] = v31;
        int64x2_t v80 = v47;
        long long v49 = *(void ***)&v75[0];
        *(void *)&v75[0] = v81;
        unint64_t v81 = v49;
        uint64_t v79 = (void **)v47.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v79);
      }
      else
      {
        uint64_t v31 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v74.i64[1], &v83)+ 32;
      }
      v74.i64[1] = v31;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v83);
    }
    else
    {
      if (v74.i64[1] >= *(void *)&v75[0])
      {
        uint64_t v32 = (v74.i64[1] - v74.i64[0]) >> 5;
        if ((unint64_t)(v32 + 1) >> 59) {
          goto LABEL_113;
        }
        unint64_t v33 = (*(void *)&v75[0] - v74.i64[0]) >> 4;
        if (v33 <= v32 + 1) {
          unint64_t v33 = v32 + 1;
        }
        if (*(void *)&v75[0] - v74.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v33;
        }
        uint64_t v82 = (char *)v75;
        if (v34) {
          int v35 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v75, v34);
        }
        else {
          int v35 = 0;
        }
        uint64_t v40 = (uint64_t)&v35[4 * v32];
        uint64_t v79 = v35;
        v80.i64[0] = v40;
        unint64_t v81 = &v35[4 * v34];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v40, (long long *)&v85);
        uint64_t v30 = v40 + 32;
        v80.i64[1] = v40 + 32;
        __int16 v41 = (long long *)v74.i64[1];
        uint64_t v42 = v80.i64[0];
        if (v74.i64[1] == v74.i64[0])
        {
          int64x2_t v43 = vdupq_n_s64(v74.u64[1]);
        }
        else
        {
          do
          {
            v41 -= 2;
            uint64_t v42 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v42 - 32, v41);
          }
          while (v41 != (long long *)v74.i64[0]);
          int64x2_t v43 = v74;
          uint64_t v30 = v80.i64[1];
        }
        v74.i64[0] = v42;
        v74.i64[1] = v30;
        int64x2_t v80 = v43;
        long long v48 = *(void ***)&v75[0];
        *(void *)&v75[0] = v81;
        unint64_t v81 = v48;
        uint64_t v79 = (void **)v43.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v79);
      }
      else
      {
        uint64_t v30 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v74.i64[1], (long long *)&v85)+ 32;
      }
      v74.i64[1] = v30;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v85);
    char v87 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
                                    + 2);
    if (*(void *)&v75[1] >= *((void *)&v75[1] + 1))
    {
      uint64_t v51 = (uint64_t)(*(void *)&v75[1] - *((void *)&v75[0] + 1)) >> 5;
      if ((unint64_t)(v51 + 1) >> 59) {
        goto LABEL_113;
      }
      unint64_t v52 = (uint64_t)(*((void *)&v75[1] + 1) - *((void *)&v75[0] + 1)) >> 4;
      if (v52 <= v51 + 1) {
        unint64_t v52 = v51 + 1;
      }
      if (*((void *)&v75[1] + 1) - *((void *)&v75[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v53 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v53 = v52;
      }
      uint64_t v82 = (char *)&v75[1] + 8;
      if (v53) {
        uint64_t v54 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v75[1] + 8, v53);
      }
      else {
        uint64_t v54 = 0;
      }
      uint64_t v55 = (uint64_t)&v54[4 * v51];
      uint64_t v79 = v54;
      v80.i64[0] = v55;
      unint64_t v81 = &v54[4 * v53];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v55, (long long *)&v85);
      uint64_t v50 = v55 + 32;
      v80.i64[1] = v55 + 32;
      char v57 = (long long *)*((void *)&v75[0] + 1);
      uint64_t v56 = *(long long **)&v75[1];
      uint64_t v58 = v80.i64[0];
      if (*(void *)&v75[1] == *((void *)&v75[0] + 1))
      {
        int64x2_t v59 = vdupq_n_s64(*(unint64_t *)&v75[1]);
      }
      else
      {
        do
        {
          v56 -= 2;
          uint64_t v58 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v58 - 32, v56);
        }
        while (v56 != v57);
        int64x2_t v59 = *(int64x2_t *)((char *)v75 + 8);
        uint64_t v50 = v80.i64[1];
      }
      *((void *)&v75[0] + 1) = v58;
      *(void *)&v75[1] = v50;
      int64x2_t v80 = v59;
      uint64_t v60 = (void **)*((void *)&v75[1] + 1);
      *((void *)&v75[1] + 1) = v81;
      unint64_t v81 = v60;
      uint64_t v79 = (void **)v59.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v79);
    }
    else
    {
      uint64_t v50 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v75[1], (long long *)&v85)+ 32;
    }
    *(void *)&v75[1] = v50;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v85);
    char v85 = (const char *)llvm::jitlink::x86_64::optimizeGOTAndStubAccesses;
    char v87 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
                                    + 2);
    if (*(void *)&v76[2] < *((void *)&v76[2] + 1))
    {
      uint64_t v61 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v76[2], (long long *)&v85)+ 32;
LABEL_105:
      *(void *)&_OWORD v76[2] = v61;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v85);
      goto LABEL_106;
    }
    uint64_t v62 = (uint64_t)(*(void *)&v76[2] - *((void *)&v76[1] + 1)) >> 5;
    if (!((unint64_t)(v62 + 1) >> 59))
    {
      unint64_t v63 = (uint64_t)(*((void *)&v76[2] + 1) - *((void *)&v76[1] + 1)) >> 4;
      if (v63 <= v62 + 1) {
        unint64_t v63 = v62 + 1;
      }
      if (*((void *)&v76[2] + 1) - *((void *)&v76[1] + 1) >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v64 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v64 = v63;
      }
      uint64_t v82 = (char *)&v76[2] + 8;
      if (v64) {
        uint64_t v65 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v76[2] + 8, v64);
      }
      else {
        uint64_t v65 = 0;
      }
      uint64_t v66 = (uint64_t)&v65[4 * v62];
      uint64_t v79 = v65;
      v80.i64[0] = v66;
      unint64_t v81 = &v65[4 * v64];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v66, (long long *)&v85);
      uint64_t v61 = v66 + 32;
      v80.i64[1] = v66 + 32;
      uint64_t v68 = (long long *)*((void *)&v76[1] + 1);
      uint64_t v67 = *(long long **)&v76[2];
      uint64_t v69 = v80.i64[0];
      if (*(void *)&v76[2] == *((void *)&v76[1] + 1))
      {
        int64x2_t v70 = vdupq_n_s64(*(unint64_t *)&v76[2]);
      }
      else
      {
        do
        {
          v67 -= 2;
          uint64_t v69 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v69 - 32, v67);
        }
        while (v67 != v68);
        int64x2_t v70 = *(int64x2_t *)((char *)&v76[1] + 8);
        uint64_t v61 = v80.i64[1];
      }
      *((void *)&v76[1] + 1) = v69;
      *(void *)&_OWORD v76[2] = v61;
      int64x2_t v80 = v70;
      uint64_t v71 = (void **)*((void *)&v76[2] + 1);
      *((void *)&v76[2] + 1) = v81;
      unint64_t v81 = v71;
      uint64_t v79 = (void **)v70.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v79);
      goto LABEL_105;
    }
LABEL_113:
    abort();
  }
LABEL_106:
  (*(void (**)(void ***__return_ptr))(*(void *)*a2 + 72))(&v79);
  if (!v79) {
    operator new();
  }
  uint64_t v72 = *a2;
  uint64_t v73 = v79;
  uint64_t v79 = 0;
  (*(void (**)(uint64_t, void ***))(*(void *)v72 + 24))(v72, &v73);
  if (v73) {
    (*((void (**)(void **))*v73 + 1))(v73);
  }
  if (v79) {
    (*((void (**)(void **))*v79 + 1))(v79);
  }
  uint64_t v79 = (void **)&v77;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v79);
  uint64_t v79 = (void **)&v76[1] + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v79);
  uint64_t v79 = (void **)v76;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v79);
  uint64_t v79 = (void **)v75 + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v79);
  uint64_t v79 = (void **)&v74;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v79);
}

uint64_t anonymous namespace'::buildGOTAndStubs_MachO_x86_64@<X0>(_anonymous_namespace_ *this@<X0>, void *a2@<X8>)
{
  v15[0] = 0;
  v15[1] = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  v11[0] = 0;
  v11[1] = 0;
  int v12 = 0;
  unint64_t v13 = v15;
  uint64_t v14 = 0;
  llvm::jitlink::LinkGraph::blocks(this, v20);
  v21[0] = v20[0];
  v21[1] = v20[1];
  long long v21[2] = v20[2];
  void v21[3] = v20[3];
  llvm::jitlink::LinkGraph::blocks(this, v18);
  v19[0] = v18[4];
  v19[1] = v18[5];
  void v19[2] = v18[6];
  _OWORD v19[3] = v18[7];
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v22, v21, (uint64_t *)v19);
  uint64_t v5 = v22;
  uint64_t v6 = v23;
  if (v22 != v23)
  {
    do
    {
      uint64_t v7 = *v5;
      uint64_t v8 = *(unint64_t **)(*v5 + 40);
      uint64_t v9 = *(unint64_t **)(*v5 + 48);
      while (v8 != v9)
      {
        if ((llvm::jitlink::x86_64::GOTTableManager::visitEdge((uint64_t)v15, (uint64_t)this, v7, (uint64_t)v8) & 1) == 0) {
          llvm::jitlink::x86_64::PLTTableManager::visitEdge((uint64_t)v11, (uint64_t)this, v7, v8);
        }
        v8 += 4;
      }
      ++v5;
    }
    while (v5 != v6);
    uint64_t v5 = v22;
  }
  if (v5)
  {
    unint64_t v23 = v5;
    operator delete(v5);
  }
  *a2 = 0;
  MEMORY[0x263E500A0](v11[0], 8);
  return MEMORY[0x263E500A0](v15[0], 8);
}

void anonymous namespace'::MachOLinkGraphBuilder_x86_64::~MachOLinkGraphBuilder_x86_64(_anonymous_namespace_::MachOLinkGraphBuilder_x86_64 *this)
{
  llvm::jitlink::MachOLinkGraphBuilder::~MachOLinkGraphBuilder(this);
  JUMPOUT(0x263E500B0);
}

const char *anonymous namespace'::MachOLinkGraphBuilder_x86_64::addRelocations@<X0>(_anonymous_namespace_::MachOLinkGraphBuilder_x86_64 *this@<X0>, const char **a2@<X8>)
{
  v121[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 13);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 352))(v4);
  uint64_t v7 = v6;
  __n128 result = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 360))(v4);
  uint64_t v66 = (const char *)v5;
  uint64_t v67 = v7;
  uint64_t v60 = result;
  BOOL v10 = v7 == v9 && v5 == (void)result;
  if (!v10)
  {
    uint64_t v11 = v9;
    char v57 = a2;
    uint64_t v58 = v9;
    while (1)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 152))(v7, v5);
      if ((*(unsigned int (**)(uint64_t, const char *))(*(void *)v67 + 224))(v67, v66))
      {
        uint64_t v13 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)v67 + 272))(v67, v66);
        if (v13 != (*(uint64_t (**)(void))(*(void *)v67 + 280))()) {
          llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
        }
        goto LABEL_124;
      }
      int v14 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)v4 + 160))(v4, v66);
      __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSectionByIndex(this, v14, (uint64_t)&v107);
      if (v108)
      {
        long long v49 = (const char *)v107;
        uint64_t v107 = 0;
LABEL_117:
        *a2 = v49;
        int v17 = 1;
        goto LABEL_119;
      }
      if (!*(void *)(v107 + 80))
      {
        int v17 = 5;
        goto LABEL_119;
      }
      unint64_t v64 = (const char *)(*(uint64_t (**)(uint64_t, const char *))(*(void *)v67 + 272))(v67, v66);
      uint64_t v65 = v15;
      __n128 result = (const char *)(*(uint64_t (**)(void))(*(void *)v67 + 280))();
      unint64_t v16 = (unint64_t)v64;
      int64x2_t v59 = result;
      if (v64 == result)
      {
LABEL_12:
        int v17 = 0;
        a2 = v57;
        goto LABEL_119;
      }
      while (2)
      {
        uint64_t Relocation = 0;
        uint64_t Relocation = llvm::object::MachOObjectFile::getRelocation(*((void *)this + 13), v16);
        unint64_t v18 = v12 + Relocation;
        __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSymbolByAddress((uint64_t)this, v107, v18, (uint64_t)&v115);
        if (v116)
        {
          long long v49 = v115;
          a2 = v57;
          goto LABEL_117;
        }
        uint64_t v19 = (uint64_t *)*((void *)v115 + 2);
        unint64_t v20 = ((unint64_t)HIDWORD(Relocation) >> 25) & 3;
        uint64_t v21 = *v19;
        if ((1 << v20) + v18 > v19[4] + *v19) {
          llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
        }
        uint64_t v22 = v19[3];
        unint64_t v62 = 0;
        unint64_t v62 = v18 - *v19;
        switch(HIDWORD(Relocation) >> 28)
        {
          case 0u:
            if ((Relocation & 0x100000000000000) != 0) {
              goto LABEL_127;
            }
            if (v20 == 3)
            {
              uint64_t v23 = 2;
              if ((Relocation & 0x800000000000000) == 0) {
                uint64_t v23 = 3;
              }
LABEL_43:
              unint64_t v24 = v23 | v61 & 0xFFFFFFFF00000000;
            }
            else
            {
              if ((Relocation & 0x800000000000000) == 0 || v20 != 2)
              {
LABEL_127:
                long long v115 = "{0:x8}";
                uint64_t v116 = 6;
                uint64_t v117 = v121;
                uint64_t v118 = 1;
                long long v119 = &unk_270DBEB00;
                p_uint64_t Relocation = &Relocation;
                v121[0] = &v119;
                v80[0] = "Unsupported x86-64 relocation: address=";
                void v80[2] = &v115;
                __int16 v81 = 1539;
                v82[0] = v80;
                v82[2] = ", symbolnum=";
                __int16 v83 = 770;
                int v79 = HIDWORD(Relocation) & 0xFFFFFF;
                __int16 v109 = "{0:x6}";
                uint64_t v110 = 6;
                uint64_t v111 = &v114;
                uint64_t v112 = 1;
                v113[0] = &unk_270DBCE28;
                v113[1] = &v79;
                long long v114 = v113;
                v84[0] = v82;
                v84[2] = &v109;
                __int16 v85 = 1538;
                v86[0] = v84;
                v86[2] = ", kind=";
                __int16 v87 = 770;
                int v75 = HIDWORD(Relocation) >> 28;
                v76[0] = "{0:x1}";
                v76[1] = 6;
                _OWORD v76[2] = &v78;
                _OWORD v76[3] = 1;
                v77[0] = &unk_270DBCE28;
                v77[1] = &v75;
                uint64_t v78 = v77;
                v88[0] = v86;
                v88[2] = v76;
                __int16 v89 = 1538;
                *(void *)&long long v90 = v88;
                *(void *)&long long v91 = ", pc_rel=";
                LOWORD(v92) = 770;
                uint64_t v50 = "true";
                if ((Relocation & 0x100000000000000) == 0) {
                  uint64_t v50 = "false";
                }
                if (*v50)
                {
                  uint64_t v51 = &v90;
                  *(void *)&long long v93 = &v90;
                  *(void *)&long long v94 = v50;
                  LOWORD(v95) = 770;
                  char v52 = 2;
                  int v53 = 3;
                }
                else
                {
                  long long v93 = v90;
                  long long v94 = v91;
                  uint64_t v95 = v92;
                  char v52 = v92;
                  int v53 = BYTE1(v92);
                  uint64_t v51 = (long long *)v90;
                }
                BOOL v10 = v53 == 1;
                char v54 = 2;
                if (!v10)
                {
                  char v52 = 2;
                  uint64_t v51 = &v93;
                }
                *(void *)&long long v96 = v51;
                *((void *)&v96 + 1) = *((void *)&v93 + 1);
                *(void *)&long long v97 = ", extern=";
                LOBYTE(v98) = v52;
                BYTE1(v98) = 3;
                uint64_t v55 = "true";
                if ((Relocation & 0x800000000000000) == 0) {
                  uint64_t v55 = "false";
                }
                if (*v55)
                {
                  *(void *)&long long v99 = &v96;
                  *(void *)&long long v100 = v55;
                  LOWORD(v101) = 770;
                }
                else
                {
                  long long v99 = v96;
                  long long v100 = v97;
                  uint64_t v101 = v98;
                  char v54 = v98;
                }
                if (BYTE1(v101) != 1) {
                  char v54 = 2;
                }
                uint64_t v56 = &v99;
                if (BYTE1(v101) == 1) {
                  uint64_t v56 = (long long *)v99;
                }
                int64x2_t v102 = v56;
                uint64_t v103 = *((void *)&v99 + 1);
                std::string v104 = ", length=";
                char v105 = v54;
                char v106 = 3;
                int v68 = (HIDWORD(Relocation) >> 25) & 3;
                uint64_t v69 = "{0:d}";
                uint64_t v70 = 5;
                uint64_t v71 = &v74;
                uint64_t v72 = 1;
                v73[0] = &unk_270DBCE28;
                v73[1] = &v68;
                int64x2_t v74 = v73;
                operator new();
              }
              unint64_t v24 = v61 & 0xFFFFFFFF00000000 | 1;
            }
            break;
          case 1u:
            if ((HIDWORD(Relocation) & 0x7000000) != 0x5000000) {
              goto LABEL_127;
            }
            uint64_t v23 = 8;
            if ((Relocation & 0x800000000000000) != 0) {
              uint64_t v23 = 4;
            }
            goto LABEL_43;
          case 2u:
            if ((HIDWORD(Relocation) & 0xF000000) != 0xD000000) {
              goto LABEL_127;
            }
            unint64_t v24 = v61 & 0xFFFFFFFF00000000;
            break;
          case 3u:
            if ((HIDWORD(Relocation) & 0xF000000) != 0xD000000) {
              goto LABEL_127;
            }
            unint64_t v24 = v61 & 0xFFFFFFFF00000000 | 0xC;
            break;
          case 4u:
            if ((HIDWORD(Relocation) & 0xF000000) != 0xD000000) {
              goto LABEL_127;
            }
            unint64_t v24 = v61 & 0xFFFFFFFF00000000 | 0xD;
            break;
          case 5u:
            if ((HIDWORD(Relocation) & 0x9000000) != 0x8000000) {
              goto LABEL_127;
            }
            if (v20 == 3)
            {
              unint64_t v24 = v61 & 0xFFFFFFFF00000000 | 0x10;
            }
            else
            {
              if (v20 != 2) {
                goto LABEL_127;
              }
              unint64_t v24 = v61 & 0xFFFFFFFF00000000 | 0xF;
            }
            break;
          case 6u:
            if ((HIDWORD(Relocation) & 0x7000000) != 0x5000000) {
              goto LABEL_127;
            }
            BOOL v25 = (Relocation & 0x800000000000000) == 0;
            uint64_t v23 = 5;
            uint64_t v26 = 9;
            goto LABEL_41;
          case 7u:
            if ((HIDWORD(Relocation) & 0x7000000) != 0x5000000) {
              goto LABEL_127;
            }
            BOOL v25 = (Relocation & 0x800000000000000) == 0;
            uint64_t v23 = 6;
            uint64_t v26 = 10;
            goto LABEL_41;
          case 8u:
            if ((HIDWORD(Relocation) & 0x7000000) != 0x5000000) {
              goto LABEL_127;
            }
            BOOL v25 = (Relocation & 0x800000000000000) == 0;
            uint64_t v23 = 7;
            uint64_t v26 = 11;
LABEL_41:
            if (v25) {
              uint64_t v23 = v26;
            }
            goto LABEL_43;
          case 9u:
            if ((HIDWORD(Relocation) & 0xF000000) != 0xD000000) {
              goto LABEL_127;
            }
            unint64_t v24 = v61 & 0xFFFFFFFF00000000 | 0xE;
            break;
          default:
            goto LABEL_127;
        }
        uint64_t v27 = v18 - v21;
        unint64_t v61 = v24;
        switch((int)v24)
        {
          case 1:
            __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, HIDWORD(Relocation) & 0xFFFFFF, (uint64_t)&v115);
            if (v116) {
              goto LABEL_140;
            }
            uint64_t SymbolByAddress = *((void *)v115 + 5);
            uint64_t v29 = *(unsigned int *)(v22 + v27);
            char v30 = 3;
            goto LABEL_78;
          case 2:
            __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, HIDWORD(Relocation) & 0xFFFFFF, (uint64_t)&v115);
            if (v116) {
              goto LABEL_140;
            }
            uint64_t SymbolByAddress = *((void *)v115 + 5);
            uint64_t v29 = *(void *)(v22 + v27);
            char v30 = 2;
            goto LABEL_78;
          case 3:
            unint64_t v37 = *(void *)(v22 + v27);
            __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSectionByIndex(this, (HIDWORD(Relocation) & 0xFFFFFFu) - 1, (uint64_t)&v115);
            if (v116) {
              goto LABEL_71;
            }
            __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSymbolByAddress((uint64_t)this, (uint64_t)v115, v37, (uint64_t)&v109);
            if (v110) {
              goto LABEL_72;
            }
            uint64_t SymbolByAddress = (uint64_t)v109;
            uint64_t v29 = v37 - (**((void **)v109 + 2) + (*((void *)v109 + 3) & 0x1FFFFFFFFFFFFFFLL));
            int v17 = 13;
            char v38 = 1;
            char v30 = 2;
            goto LABEL_74;
          case 4:
          case 5:
          case 6:
          case 7:
            __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, HIDWORD(Relocation) & 0xFFFFFF, (uint64_t)&v115);
            if (v116) {
              goto LABEL_140;
            }
            uint64_t SymbolByAddress = *((void *)v115 + 5);
            uint64_t v29 = *(int *)(v22 + v27) - 4;
            char v30 = 7;
            goto LABEL_78;
          case 8:
            uint64_t v39 = *(int *)(v22 + v27);
            __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSectionByIndex(this, (HIDWORD(Relocation) & 0xFFFFFFu) - 1, (uint64_t)&v115);
            if (v116) {
              goto LABEL_71;
            }
            uint64_t v40 = v18 + v39;
            __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSymbolByAddress((uint64_t)this, (uint64_t)v115, v40 + 4, (uint64_t)&v109);
            if (v110) {
              goto LABEL_72;
            }
            uint64_t SymbolByAddress = (uint64_t)v109;
            uint64_t v29 = v40 - (**((void **)v109 + 2) + (*((void *)v109 + 3) & 0x1FFFFFFFFFFFFFFLL));
            goto LABEL_70;
          case 9:
          case 10:
          case 11:
            uint64_t v31 = *(int *)(v22 + v27);
            __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSectionByIndex(this, (HIDWORD(Relocation) & 0xFFFFFFu) - 1, (uint64_t)&v115);
            if (v116)
            {
LABEL_71:
              char v30 = 0;
              uint64_t SymbolByAddress = 0;
              uint64_t v29 = 0;
              char v38 = 0;
              __int16 v41 = v115;
              long long v115 = 0;
LABEL_73:
              long long *v57 = v41;
              int v17 = 1;
              goto LABEL_74;
            }
            __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSymbolByAddress((uint64_t)this, (uint64_t)v115, v18 + (1 << (v61 - 9)) + v31 + 4, (uint64_t)&v109);
            if (v110)
            {
LABEL_72:
              char v30 = 0;
              uint64_t SymbolByAddress = 0;
              uint64_t v29 = 0;
              char v38 = 0;
              __int16 v41 = v109;
              goto LABEL_73;
            }
            uint64_t SymbolByAddress = (uint64_t)v109;
            uint64_t v29 = v18 + v31 - (**((void **)v109 + 2) + (*((void *)v109 + 3) & 0x1FFFFFFFFFFFFFFLL));
LABEL_70:
            int v17 = 13;
            char v38 = 1;
            char v30 = 7;
LABEL_74:
            if (v116)
            {
              __n128 result = v115;
              long long v115 = 0;
              if (result) {
                __n128 result = (const char *)(*(uint64_t (**)(const char *))(*(void *)result + 8))(result);
              }
            }
            if ((v38 & 1) == 0) {
              goto LABEL_154;
            }
            goto LABEL_78;
          case 12:
            __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, HIDWORD(Relocation) & 0xFFFFFF, (uint64_t)&v115);
            if (v116) {
              goto LABEL_140;
            }
            if (v62 <= 2)
            {
              long long v115 = "{0}";
              uint64_t v116 = 3;
              uint64_t v117 = v121;
              uint64_t v118 = 1;
              long long v119 = &unk_270DBEBD8;
              p_uint64_t Relocation = (uint64_t *)&v62;
              v121[0] = &v119;
              operator new();
            }
            uint64_t SymbolByAddress = *((void *)v115 + 5);
            uint64_t v29 = *(int *)(v22 + v27);
            char v30 = 20;
            goto LABEL_78;
          case 13:
            __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, HIDWORD(Relocation) & 0xFFFFFF, (uint64_t)&v115);
            if (v116) {
              goto LABEL_140;
            }
            uint64_t SymbolByAddress = *((void *)v115 + 5);
            uint64_t v29 = *(int *)(v22 + v27) - 4;
            char v30 = 15;
            goto LABEL_78;
          case 14:
            __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, HIDWORD(Relocation) & 0xFFFFFF, (uint64_t)&v115);
            if (v116) {
              goto LABEL_140;
            }
            if (v62 <= 2)
            {
              long long v115 = "{0}";
              uint64_t v116 = 3;
              uint64_t v117 = v121;
              uint64_t v118 = 1;
              long long v119 = &unk_270DBEBD8;
              p_uint64_t Relocation = (uint64_t *)&v62;
              v121[0] = &v119;
              operator new();
            }
            uint64_t SymbolByAddress = *((void *)v115 + 5);
            uint64_t v29 = *(int *)(v22 + v27);
            char v30 = 24;
            goto LABEL_78;
          case 15:
          case 16:
            (*(void (**)(uint64_t, const char **))(*(void *)v65 + 296))(v65, &v64);
            if (v64 == v59) {
              llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
            }
            unint64_t v32 = llvm::object::MachOObjectFile::getRelocation(*((void *)this + 13), (unint64_t)v64);
            unint64_t v33 = v32;
            if (Relocation != v32) {
              llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[67]>();
            }
            unint64_t v34 = HIDWORD(v32);
            if (((HIDWORD(Relocation) ^ HIDWORD(v32)) & 0x6000000) != 0) {
              llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[65]>();
            }
            __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, HIDWORD(Relocation) & 0xFFFFFF, (uint64_t)&v115);
            int v35 = v115;
            if (v116) {
              goto LABEL_152;
            }
            if ((~HIDWORD(Relocation) & 0x6000000) != 0) {
              uint64_t v36 = *(int *)(v22 + v27);
            }
            else {
              uint64_t v36 = *(void *)(v22 + v27);
            }
            uint64_t v42 = *((void *)v115 + 5);
            if ((v34 & 0x8000000) != 0)
            {
              __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, HIDWORD(v33) & 0xFFFFFF, (uint64_t)&v115);
              int v35 = v115;
              if (v116)
              {
LABEL_152:
                long long *v57 = v35;
                goto LABEL_153;
              }
              uint64_t SymbolByAddress = *((void *)v115 + 5);
            }
            else
            {
              __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSectionByIndex(this, (v34 & 0xFFFFFF) - 1, (uint64_t)&v115);
              int v35 = v115;
              if (v116) {
                goto LABEL_152;
              }
              uint64_t SymbolByAddress = llvm::jitlink::MachOLinkGraphBuilder::getSymbolByAddress((uint64_t)this, (uint64_t)v115, *((void *)v115 + 5));
              uint64_t v36 = v36
                  - (*(void *)(SymbolByAddress + 24) & 0x1FFFFFFFFFFFFFFLL)
                  - **(void **)(SymbolByAddress + 16);
              if (v116)
              {
                int64x2_t v43 = v115;
                long long v115 = 0;
                if (v43) {
                  (*(void (**)(const char *))(*(void *)v43 + 8))(v43);
                }
              }
            }
            uint64_t v44 = *(uint64_t **)(SymbolByAddress + 16);
            if (*(uint64_t **)(v42 + 16) != v19)
            {
              if (v44 != v19) {
                llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
              }
              uint64_t v45 = v36;
              uint64_t v46 = *v19;
              uint64_t v47 = *(void *)(SymbolByAddress + 24) & 0x1FFFFFFFFFFFFFFLL;
LABEL_99:
              if ((~HIDWORD(Relocation) & 0x6000000) != 0) {
                char v30 = 9;
              }
              else {
                char v30 = 8;
              }
              uint64_t v29 = v45 - v18 + v47 + v46;
              uint64_t SymbolByAddress = v42;
              goto LABEL_78;
            }
            uint64_t v45 = v36;
            uint64_t v46 = *v19;
            if (v44 == v19)
            {
              uint64_t v47 = *(void *)(SymbolByAddress + 24) & 0x1FFFFFFFFFFFFFFLL;
              if (v47 + v46 <= v18)
              {
                unint64_t v48 = (*(void *)(v42 + 24) & 0x1FFFFFFFFFFFFFFLL) + v46;
                if (v48 > v18 || v48 < v47 + v46) {
                  goto LABEL_99;
                }
              }
            }
            if ((~HIDWORD(Relocation) & 0x6000000) != 0) {
              char v30 = 7;
            }
            else {
              char v30 = 6;
            }
            uint64_t v29 = v45 + v18 - (v46 + (*(void *)(v42 + 24) & 0x1FFFFFFFFFFFFFFLL));
            goto LABEL_78;
          default:
            __n128 result = (const char *)llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(this, HIDWORD(Relocation) & 0xFFFFFF, (uint64_t)&v115);
            if ((v116 & 1) == 0)
            {
              uint64_t SymbolByAddress = *((void *)v115 + 5);
              uint64_t v29 = *(int *)(v22 + v27);
              char v30 = 11;
LABEL_78:
              llvm::jitlink::Block::addEdge(v19, v30, v18 - *(_DWORD *)v19, SymbolByAddress, v29);
              __n128 result = (const char *)(*(uint64_t (**)(void))(*(void *)v65 + 296))();
              unint64_t v16 = (unint64_t)v64;
              uint64_t v11 = v58;
              if (v64 == v59) {
                goto LABEL_12;
              }
              continue;
            }
LABEL_140:
            long long *v57 = v115;
LABEL_153:
            int v17 = 1;
LABEL_154:
            a2 = v57;
            uint64_t v11 = v58;
LABEL_119:
            if (v108)
            {
              __n128 result = (const char *)v107;
              uint64_t v107 = 0;
              if (result) {
                __n128 result = (const char *)(*(uint64_t (**)(const char *))(*(void *)result + 8))(result);
              }
            }
            if (v17 != 5 && v17) {
              return result;
            }
LABEL_124:
            __n128 result = (const char *)(*(uint64_t (**)(uint64_t, const char **))(*(void *)v67 + 136))(v67, &v66);
            uint64_t v5 = (uint64_t)v66;
            uint64_t v7 = v67;
            if (v67 == v11 && v66 == v60) {
              goto LABEL_157;
            }
            break;
        }
        break;
      }
    }
  }
LABEL_157:
  *a2 = 0;
  return result;
}

void llvm::detail::provider_format_adapter<unsigned long &>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned long &>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned long long,void>::format(*(unint64_t **)(a1 + 8), a2, a3, a4);
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[67]>()
{
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[65]>()
{
}

uint64_t llvm::jitlink::x86_64::GOTTableManager::visitEdge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  char v6 = 19;
  switch(*(unsigned char *)(a4 + 24))
  {
    case 0xA:
      if (!*(void *)(a1 + 24)) {
        llvm::jitlink::LinkGraph::createSection();
      }
      return 0;
    case 0xF:
      char v6 = 7;
      goto LABEL_8;
    case 0x10:
      char v6 = 6;
      goto LABEL_8;
    case 0x11:
      char v6 = 10;
      goto LABEL_8;
    case 0x14:
      goto LABEL_8;
    case 0x15:
      char v6 = 18;
LABEL_8:
      *(unsigned char *)(a4 + 24) = v6;
      *(void *)a4 = llvm::jitlink::TableManager<llvm::jitlink::x86_64::GOTTableManager>::getEntryForTarget(a1, a2, *(_OWORD **)a4, (unint64_t *)a4);
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::jitlink::TableManager<llvm::jitlink::x86_64::GOTTableManager>::getEntryForTarget(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  v14[0] = *a3;
  *(void *)&long long v12 = 0;
  int v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v14, &v12, a4);
  uint64_t v8 = v12;
  if (!v7) {
    uint64_t v8 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  }
  if (v8 == *(void *)a1 + 24 * *(unsigned int *)(a1 + 16))
  {
    Entry = llvm::jitlink::x86_64::GOTTableManager::createEntry(a1, a2, (uint64_t)a3);
    long long v12 = *a3;
    uint64_t v13 = Entry;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>(a1, &v12, &v13, v10, (uint64_t)v14);
    uint64_t v8 = *(void *)&v14[0];
  }
  return *(void *)(v8 + 16);
}

void *llvm::jitlink::x86_64::GOTTableManager::createEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    llvm::jitlink::LinkGraph::createSection();
  }
  v11[0] = (uint64_t)&llvm::jitlink::x86_64::NullPointerContent;
  v11[1] = 8;
  unint64_t v9 = 8;
  uint64_t v10 = -8;
  uint64_t v8 = 0;
  char v6 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, v5, v11, &v10, &v9, &v8);
  llvm::jitlink::Block::addEdge(v6, 2, 0, a3, 0);
  return llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v6, 0, 8, 0, 0);
}

uint64_t llvm::jitlink::x86_64::PLTTableManager::visitEdge(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (*((unsigned char *)a4 + 24) != 11) {
    return 0;
  }
  uint64_t v4 = (_OWORD *)*a4;
  if (*(unsigned char *)(*(void *)(*a4 + 16) + 8)) {
    return 0;
  }
  *((unsigned char *)a4 + 24) = 14;
  *a4 = llvm::jitlink::TableManager<llvm::jitlink::x86_64::PLTTableManager>::getEntryForTarget(a1, a2, v4, a4);
  return 1;
}

uint64_t llvm::jitlink::TableManager<llvm::jitlink::x86_64::PLTTableManager>::getEntryForTarget(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  v15[0] = *a3;
  *(void *)&long long v13 = 0;
  int v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v15, &v13, a4);
  uint64_t v9 = v13;
  if (!v7) {
    uint64_t v9 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  }
  if (v9 == *(void *)a1 + 24 * *(unsigned int *)(a1 + 16))
  {
    Entry = llvm::jitlink::x86_64::PLTTableManager::createEntry(a1, a2, a3, v8);
    long long v13 = *a3;
    int v14 = Entry;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>(a1, &v13, &v14, v11, (uint64_t)v15);
    uint64_t v9 = *(void *)&v15[0];
  }
  return *(void *)(v9 + 16);
}

void *llvm::jitlink::x86_64::PLTTableManager::createEntry(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5) {
    llvm::jitlink::LinkGraph::createSection();
  }
  uint64_t EntryForTarget = llvm::jitlink::TableManager<llvm::jitlink::x86_64::GOTTableManager>::getEntryForTarget(*(void *)(a1 + 24), a2, a3, a4);
  v12[0] = (uint64_t)&llvm::jitlink::x86_64::PointerJumpStubContent;
  v12[1] = 6;
  unint64_t v10 = 1;
  uint64_t v11 = -6;
  uint64_t v9 = 0;
  int v7 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, v5, v12, &v11, &v10, &v9);
  llvm::jitlink::Block::addEdge(v7, 7, 2, EntryForTarget, -4);
  return llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v7, 0, 6, 1, 0);
}

void llvm::jitlink::MachOJITLinker_x86_64::~MachOJITLinker_x86_64(llvm::jitlink::MachOJITLinker_x86_64 *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x263E500B0);
}

void llvm::jitlink::JITLinker<llvm::jitlink::MachOJITLinker_x86_64>::fixUpBlocks(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 192))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 200);
    if (v4)
    {
      uint64_t v5 = 24 * v4;
      char v6 = *(void **)(a1 + 184);
      while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v6 += 3;
        v5 -= 24;
        if (!v5) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      char v6 = *(void **)(a1 + 184);
    }
    uint64_t v7 = *(void *)(a1 + 184) + 24 * v4;
LABEL_10:
    if (v6 != (void *)v7)
    {
      uint64_t v8 = v6[2];
      int v21 = *(_DWORD *)(v8 + 20);
      uint64_t v9 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 32);
      uint64_t v11 = *(void *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
      if ((uint64_t **)v11 == v9) {
        goto LABEL_28;
      }
      long long v12 = v9;
      long long v13 = v10;
      do
      {
        int v14 = *v12;
        if (v21 == 2 && (v14[1] & 4) == 0)
        {
          size_t v15 = v14[4];
          unint64_t __src = (void *)v14[3];
          unint64_t v16 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, v15, 0);
          uint64_t v17 = (uint64_t)v16;
          if (v15) {
            memmove(v16, __src, v15);
          }
          _OWORD v14[3] = v17;
          v14[4] = v15;
          v14[1] |= 4uLL;
        }
        uint64_t v18 = v14[5];
        uint64_t v19 = v14[6];
        while (v18 != v19)
        {
          if (*(unsigned __int8 *)(v18 + 24) >= 2u)
          {
            llvm::jitlink::x86_64::applyFixup(a1, v14, v18, 0, a2);
            if (*a2) {
              return;
            }
          }
          v18 += 32;
        }
        while (++v12 != v13)
        {
          if (((unint64_t)*v12 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_27;
          }
        }
        long long v12 = v13;
LABEL_27:
        ;
      }
      while (v12 != (uint64_t **)v11);
LABEL_28:
      while (1)
      {
        v6 += 3;
        if (v6 == (void *)v7) {
          break;
        }
        if (*v6 < 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_10;
        }
      }
    }
  }
LABEL_6:
  *a2 = 0;
}

void llvm::jitlink::JITLinker<llvm::jitlink::MachOJITLinker_x86_64>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::jitlink::x86_64::applyFixup@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v8 = a2[3];
  uint64_t v9 = *(unsigned int *)(a3 + 8);
  uint64_t v10 = *a2 + v9;
  switch(*(unsigned char *)(a3 + 24))
  {
    case 2:
      uint64_t v12 = **(void **)(*(void *)a3 + 16);
      uint64_t v13 = (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL) + *(void *)(a3 + 16);
      goto LABEL_10;
    case 3:
      unint64_t v11 = (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          + *(void *)(a3 + 16)
          + **(void **)(*(void *)a3 + 16);
      if (HIDWORD(v11)) {
        goto LABEL_23;
      }
      goto LABEL_16;
    case 4:
      uint64_t v14 = **(void **)(*(void *)a3 + 16);
      uint64_t v15 = (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL) + *(void *)(a3 + 16);
      goto LABEL_12;
    case 5:
      if (((*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFuLL)
          + *(void *)(a3 + 16)
          + **(void **)(*(void *)a3 + 16)) >> 16)
        goto LABEL_23;
      *(_WORD *)(v8 + v9) = *(_WORD *)(*(void *)a3 + 24) + *(_WORD *)(a3 + 16) + **(_WORD **)(*(void *)a3 + 16);
      break;
    case 6:
      uint64_t v13 = **(void **)(*(void *)a3 + 16) - v10;
      uint64_t v12 = (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL) + *(void *)(a3 + 16);
LABEL_10:
      uint64_t v16 = v13 + v12;
      goto LABEL_18;
    case 7:
      uint64_t v15 = **(void **)(*(void *)a3 + 16) - v10;
      uint64_t v14 = (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL) + *(void *)(a3 + 16);
LABEL_12:
      unint64_t v11 = v15 + v14;
      goto LABEL_15;
    case 8:
      uint64_t v16 = v10
          - (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          - **(void **)(*(void *)a3 + 16)
          + *(void *)(a3 + 16);
      goto LABEL_18;
    case 9:
      unint64_t v11 = v10
          - (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          - **(void **)(*(void *)a3 + 16)
          + *(void *)(a3 + 16);
      goto LABEL_15;
    case 0xA:
      uint64_t v16 = (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          + **(void **)(*(void *)a3 + 16)
          - (**(void **)(a4 + 16)
           + (*(void *)(a4 + 24) & 0x1FFFFFFFFFFFFFFLL))
          + *(void *)(a3 + 16);
LABEL_18:
      *(void *)(v8 + v9) = v16;
      break;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0x12:
    case 0x13:
    case 0x16:
      unint64_t v11 = **(void **)(*(void *)a3 + 16)
          - v10
          + (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          + *(void *)(a3 + 16)
          - 4;
LABEL_15:
      if (v11 != (int)v11)
      {
LABEL_23:
        llvm::jitlink::makeTargetOutOfRangeError(result, a2, a3);
      }
LABEL_16:
      *(_DWORD *)(v8 + v9) = v11;
      break;
    default:
      std::operator+<char>();
      uint64_t v17 = std::string::append(&v20, ", section ");
      std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      std::string::size_type v22 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      long long v19 = *(_OWORD *)a2[2];
      uint64_t v23 = __p;
      long long v24 = v19;
      __int16 v25 = 1284;
      uint64_t v26 = &v23;
      uint64_t v27 = " unsupported edge kind ";
      __int16 v28 = 770;
      if (!*llvm::jitlink::x86_64::getEdgeKindName((llvm::jitlink::x86_64 *)*(unsigned __int8 *)(a3 + 24)))
      {
        int v31 = v29;
        __int16 v32 = v30;
      }
      operator new();
  }
  *a5 = 0;
  return result;
}

void llvm::jitlink::MachOLinkGraphBuilder::~MachOLinkGraphBuilder(llvm::jitlink::MachOLinkGraphBuilder *this)
{
  *(void *)this = &unk_270DBEC58;
  llvm::StringMap<std::function<llvm::Error ()(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &)>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 184);
  MEMORY[0x263E500A0](*((void *)this + 20), 8);
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::destroyAll((uint64_t)this + 128);
  MEMORY[0x263E500A0](*((void *)this + 16), 8);
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)this + 14, 0);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 8);
}

void llvm::jitlink::MachOLinkGraphBuilder::MachOLinkGraphBuilder(void *a1, void *a2)
{
  *a1 = &unk_270DBEC58;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a1 + 5;
  a1[4] = 0x400000000;
  a1[11] = 0;
  a1[9] = a1 + 11;
  a1[10] = 0;
  a1[12] = 1;
  a1[13] = a2;
  size_t v2 = a2[5];
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v4 = (const void *)a2[4];
  if (v2 >= 0x17)
  {
    uint64_t v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v6 = v2 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = operator new(v6 + 1);
    __dst[1] = v2;
    unint64_t v9 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v9) = a2[5];
    uint64_t v5 = __dst;
    if (!v2)
    {
LABEL_9:
      *((unsigned char *)v5 + v2) = 0;
      (*(uint64_t (**)(void *))(*a2 + 64))(a2);
      operator new();
    }
  }
  memmove(v5, v4, v2);
  goto LABEL_9;
}

uint64_t **llvm::jitlink::MachOLinkGraphBuilder::addSectionStartSymAndBlock(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, unsigned int a7, int a8)
{
  int v17 = a2;
  uint64_t v11 = *(void *)(a1 + 112);
  if (a5)
  {
    v18[0] = a5;
    v18[1] = a6;
    unint64_t v20 = a7;
    int v21 = a4;
    uint64_t v19 = 0;
    uint64_t v12 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v11, a3, (uint64_t *)v18, (uint64_t *)&v21, &v20, &v19);
  }
  else
  {
    v18[0] = a4;
    unint64_t v20 = a7;
    int v21 = a6;
    uint64_t v19 = 0;
    uint64_t v12 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v11, a3, (uint64_t *)&v21, (uint64_t *)v18, &v20, &v19);
  }
  uint64_t v13 = llvm::jitlink::LinkGraph::addAnonymousSymbol(*(void *)(a1 + 112), (uint64_t)v12, 0, (uint64_t)a6, 0, a8);
  v18[0] = 0;
  int v14 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::LookupBucketFor<unsigned int>((uint64_t *)(a1 + 128), &v17, v18);
  uint64_t v15 = v18[0];
  if (!v14) {
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 128) + 120 * *(unsigned int *)(a1 + 144));
  }
  v18[0] = (uint64_t *)((v13[3] & 0x1FFFFFFFFFFFFFFLL) + *(void *)v13[2]);
  uint64_t result = std::__tree<std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>>::__emplace_unique_key_args<llvm::orc::ExecutorAddr,std::piecewise_construct_t const&,std::tuple<llvm::orc::ExecutorAddr&&>,std::tuple<>>((uint64_t **)v15 + 12, (unint64_t)v18[0], v18);
  result[5] = v13;
  return result;
}

uint64_t *llvm::jitlink::MachOLinkGraphBuilder::createStandardGraphSymbol(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5, char a6, int a7)
{
  uint64_t v11 = *(void *)(a2 + 24) - *a3;
  uint64_t v12 = *(void *)(a1 + 112);
  if (*(unsigned char *)(a2 + 16)) {
    uint64_t v13 = llvm::jitlink::LinkGraph::addDefinedSymbol(v12, (uint64_t)a3, v11, *(void *)a2, *(void *)(a2 + 8), a4, *(unsigned char *)(a2 + 36), *(unsigned char *)(a2 + 37), a5, a6);
  }
  else {
    uint64_t v13 = llvm::jitlink::LinkGraph::addAnonymousSymbol(v12, (uint64_t)a3, v11, a4, a5, a6);
  }
  int v14 = v13;
  *(void *)(a2 + 40) = v13;
  if (a7)
  {
    int v18 = *(unsigned __int8 *)(a2 + 33) - 1;
    uint64_t v19 = 0;
    int v15 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::LookupBucketFor<unsigned int>((uint64_t *)(a1 + 128), &v18, &v19);
    uint64_t v16 = v19;
    if (!v15) {
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 128) + 120 * *(unsigned int *)(a1 + 144));
    }
    uint64_t v19 = (uint64_t *)((v14[3] & 0x1FFFFFFFFFFFFFFLL) + *(void *)v14[2]);
    std::__tree<std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>>::__emplace_unique_key_args<llvm::orc::ExecutorAddr,std::piecewise_construct_t const&,std::tuple<llvm::orc::ExecutorAddr&&>,std::tuple<>>((uint64_t **)v16 + 12, (unint64_t)v19, &v19)[5] = v14;
  }
  return v14;
}

void llvm::jitlink::CompactUnwindSplitter::operator()(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t SectionByName = llvm::jitlink::LinkGraph::findSectionByName(a2, *a1, a1[1], a3);
  if (!SectionByName)
  {
    *a4 = 0;
    return;
  }
  if (*(_DWORD *)(a2 + 164) != 5)
  {
    std::operator+<char>();
    int64x2_t v80 = std::string::append((std::string *)v95, ": compact unwind splitting not supported on non-macho target ");
    std::string::size_type v81 = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    int v82 = *(char *)(a2 + 143);
    if (v82 >= 0) {
      __int16 v83 = (const std::string::value_type *)(a2 + 120);
    }
    else {
      __int16 v83 = *(const std::string::value_type **)(a2 + 120);
    }
    if (v82 >= 0) {
      std::string::size_type v84 = *(unsigned __int8 *)(a2 + 143);
    }
    else {
      std::string::size_type v84 = *(void *)(a2 + 128);
    }
    __int16 v85 = std::string::append(&__p, v83, v84);
    long long v86 = (void ***)v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v103 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    std::string v104 = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    llvm::make_error<llvm::jitlink::JITLinkError,std::string>();
  }
  int v7 = *(_DWORD *)(a2 + 144);
  if (v7 != 38 && v7 != 3)
  {
    std::operator+<char>();
    __int16 v87 = std::string::append((std::string *)v95, ": compact unwind splitting not supported on ");
    std::string::size_type v88 = v87->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v88;
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    llvm::Triple::getArchName((llvm::Triple *)(a2 + 120));
    operator new();
  }
  uint64_t v9 = SectionByName;
  int v128 = 32;
  uint64_t v10 = SectionByName + 32;
  uint64_t v11 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(SectionByName + 32);
  uint64_t v13 = v12;
  llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v10);
  uint64_t v14 = *(void *)(v9 + 32) + 8 * *(unsigned int *)(v9 + 48);
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  uint64_t v125 = 0;
  if ((uint64_t *)v14 == v11) {
    goto LABEL_105;
  }
  unint64_t v15 = 0;
  uint64_t v16 = v11;
  do
  {
    do
    {
      if (++v16 == v13)
      {
        uint64_t v16 = v13;
        break;
      }
    }
    while ((*v16 | 0x1000) == 0xFFFFFFFFFFFFF000);
    ++v15;
  }
  while (v16 != (uint64_t *)v14);
  std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](&v125, v15);
  int v17 = v126;
  do
  {
    uint64_t v18 = *v11++;
    *int v17 = v18;
    while (v11 != v13)
    {
      if ((*v11 | 0x1000) != 0xFFFFFFFFFFFFF000) {
        goto LABEL_21;
      }
      ++v11;
    }
    uint64_t v11 = v13;
LABEL_21:
    ++v17;
  }
  while (v11 != (uint64_t *)v14);
  uint64_t v126 = v17;
  uint64_t v19 = v125;
  if (v125 != v17)
  {
    long long v94 = a4;
    while (1)
    {
      int v21 = (uint64_t *)*--v17;
      unint64_t v20 = v21;
      uint64_t v126 = v17;
      unint64_t v22 = v21[4];
      if (v22) {
        break;
      }
LABEL_91:
      if (v19 == v17) {
        goto LABEL_105;
      }
    }
    if ((v22 & 0x1F) != 0)
    {
      std::operator+<char>();
      __int16 v89 = std::string::append(&v109, ": block at ");
      std::string::size_type v90 = v89->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v110 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      std::string::size_type v111 = v90;
      v89->__r_.__value_.__l.__size_ = 0;
      v89->__r_.__value_.__r.__words[2] = 0;
      v89->__r_.__value_.__r.__words[0] = 0;
      uint64_t v91 = *v20;
      v103[0] = "{0:x}";
      v103[1] = (void *)5;
      std::string v104 = &v108;
      uint64_t v105 = 1;
      char v106 = &unk_270DBE460;
      uint64_t v107 = v91;
      char v108 = &v106;
      v112[0] = v110;
      v112[2] = v103;
      __int16 v113 = 1540;
      v114[0] = v112;
      v114[2] = " has size ";
      __int16 v115 = 770;
      uint64_t v92 = v20[4];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0:x}";
      __p.__r_.__value_.__l.__size_ = 5;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v102;
      uint64_t v99 = 1;
      long long v100 = &unk_270DBD838;
      uint64_t v101 = v92;
      v102[0] = &v100;
      v116[0] = v114;
      v116[2] = &__p;
      __int16 v117 = 1538;
      uint64_t v118 = v116;
      long long v120 = " (not a multiple of CU record size of ";
      __int16 v121 = 770;
      *(void *)uint64_t v95 = "{0:x}";
      *(void *)&v95[8] = 5;
      *(void *)&v95[16] = &v97;
      *(void *)&v95[24] = 1;
      v96[0] = &unk_270DBEB80;
      v96[1] = &v128;
      long long v97 = v96;
      v122[0] = (uint64_t)&v118;
      uint64_t v123 = (void **)v95;
      __int16 v124 = 1538;
      operator new();
    }
    uint64_t v23 = (v22 >> 5);
    long long v24 = operator new(8uLL);
    *long long v24 = v20;
    __int16 v25 = v24 + 1;
    v103[1] = v24 + 1;
    std::string v104 = (void ***)(v24 + 1);
    v103[0] = v24;
    if (v23 == 1)
    {
      uint64_t v118 = v24;
      long long v119 = v24 + 1;
      long long v120 = (const char *)(v24 + 1);
    }
    else if (v20[3])
    {
      for (uint64_t i = 1; i != v23; ++i)
      {
        uint64_t v27 = (32 * i);
        unint64_t v29 = v20[1];
        uint64_t v28 = v20[2];
        uint64_t v30 = *v20 + v27;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        *(void *)uint64_t v95 = v30;
        v129[0] = 1 << (v29 >> 3);
        v122[0] = (v129[0] - 1) & (v27 + (v29 >> 8));
        int v31 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, v28, (uint64_t *)&__p, (uint64_t *)v95, v129, v122);
        unint64_t v33 = v31;
        unint64_t v34 = (char *)v103[1];
        if (v103[1] >= v104)
        {
          int64_t v36 = ((char *)v103[1] - (char *)v103[0]) >> 3;
          if ((unint64_t)(v36 + 1) >> 61) {
            goto LABEL_109;
          }
          unint64_t v37 = ((char *)v104 - (char *)v103[0]) >> 2;
          if (v37 <= v36 + 1) {
            unint64_t v37 = v36 + 1;
          }
          if ((unint64_t)((char *)v104 - (char *)v103[0]) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v37;
          }
          if (v38) {
            uint64_t v39 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v104, v38);
          }
          else {
            uint64_t v39 = 0;
          }
          uint64_t v40 = &v39[8 * v36];
          *(void *)uint64_t v40 = v33;
          int v35 = v40 + 8;
          uint64_t v42 = (char *)v103[0];
          __int16 v41 = (char *)v103[1];
          if (v103[1] != v103[0])
          {
            do
            {
              uint64_t v43 = *((void *)v41 - 1);
              v41 -= 8;
              *((void *)v40 - 1) = v43;
              v40 -= 8;
            }
            while (v41 != v42);
            __int16 v41 = (char *)v103[0];
          }
          v103[0] = v40;
          v103[1] = v35;
          std::string v104 = (void ***)&v39[8 * v38];
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *(void *)v103[1] = v31;
          int v35 = v34 + 8;
        }
        v103[1] = v35;
      }
      __p.__r_.__value_.__l.__data_ = (std::string::pointer)v103[0];
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v104;
      v103[1] = 0;
      std::string v104 = 0;
      v103[0] = 0;
      llvm::jitlink::LinkGraph::splitBlockImpl((uint64_t **)&__p, 0, &v118, v32);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v103[0])
      {
        v103[1] = v103[0];
        operator delete(v103[0]);
      }
    }
    else
    {
      uint64_t v93 = v20[4];
      for (uint64_t j = 1; j != v23; ++j)
      {
        uint64_t v45 = (32 * j);
        uint64_t v46 = (void *)*(v25 - 1);
        uint64_t v47 = *v20;
        uint64_t v48 = v45 - *v46 + *v20;
        v46[3] = 0;
        v46[4] = v48;
        uint64_t v49 = v20[4];
        std::string::size_type v50 = v47 + v45;
        unint64_t v52 = v20[1];
        uint64_t v51 = v20[2];
        __p.__r_.__value_.__r.__words[0] = v50;
        *(void *)uint64_t v95 = v49;
        v129[0] = 1 << (v52 >> 3);
        v122[0] = (v129[0] - 1) & (v45 + (v52 >> 8));
        int v53 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, v51, (uint64_t *)v95, (uint64_t *)&__p, v129, v122);
        char v54 = v53;
        uint64_t v55 = (char *)v103[1];
        if (v103[1] >= v104)
        {
          int64_t v56 = ((char *)v103[1] - (char *)v103[0]) >> 3;
          if ((unint64_t)(v56 + 1) >> 61) {
LABEL_109:
          }
            abort();
          unint64_t v57 = ((char *)v104 - (char *)v103[0]) >> 2;
          if (v57 <= v56 + 1) {
            unint64_t v57 = v56 + 1;
          }
          if ((unint64_t)((char *)v104 - (char *)v103[0]) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v58 = v57;
          }
          if (v58) {
            int64x2_t v59 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v104, v58);
          }
          else {
            int64x2_t v59 = 0;
          }
          uint64_t v60 = &v59[8 * v56];
          *(void *)uint64_t v60 = v54;
          __int16 v25 = v60 + 8;
          unint64_t v62 = (char *)v103[0];
          unint64_t v61 = (char *)v103[1];
          if (v103[1] != v103[0])
          {
            do
            {
              uint64_t v63 = *((void *)v61 - 1);
              v61 -= 8;
              *((void *)v60 - 1) = v63;
              v60 -= 8;
            }
            while (v61 != v62);
            unint64_t v61 = (char *)v103[0];
          }
          v103[0] = v60;
          v103[1] = v25;
          std::string v104 = (void ***)&v59[8 * v58];
          if (v61) {
            operator delete(v61);
          }
        }
        else
        {
          *(void *)v103[1] = v53;
          __int16 v25 = v55 + 8;
        }
        v103[1] = v25;
      }
      unint64_t v64 = (void *)*(v25 - 1);
      uint64_t v65 = v93 - *v64 + *v20;
      v64[3] = 0;
      v64[4] = v65;
      uint64_t v118 = (uint64_t *)v103[0];
      long long v119 = v25;
      long long v120 = (const char *)v104;
    }
    uint64_t v66 = v118;
    uint64_t v67 = v119;
    if (v118 == v119)
    {
      if (v118) {
        goto LABEL_89;
      }
    }
    else
    {
      do
      {
        int v68 = (uint64_t *)*v66;
        uint64_t v69 = *(_DWORD **)(*v66 + 40);
        uint64_t v70 = *(_DWORD **)(*v66 + 48);
        if (v69 == v70) {
          goto LABEL_95;
        }
        char v71 = 0;
        do
        {
          while (1)
          {
            int v72 = v69[2];
            if (v72 == 16 || v72 == 24) {
              break;
            }
            if (v72)
            {
              v103[0] = "{0:x}";
              v103[1] = (void *)5;
              std::string v104 = &v108;
              uint64_t v105 = 1;
              char v106 = &unk_270DBE8C8;
              LODWORD(v107) = v72;
              char v108 = &v106;
              v122[0] = (uint64_t)"Unexpected edge at offset ";
              uint64_t v123 = v103;
              __int16 v124 = 1539;
              v129[0] = (unint64_t)v122;
              BOOL v130 = " in compact unwind record at ";
              __int16 v131 = 770;
              uint64_t v76 = *v68;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0:x}";
              __p.__r_.__value_.__l.__size_ = 5;
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v102;
              uint64_t v99 = 1;
              long long v100 = &unk_270DBE460;
              uint64_t v101 = v76;
              v102[0] = &v100;
              operator new();
            }
            uint64_t v74 = *(void *)(*(void *)v69 + 16);
            if ((*(unsigned char *)(v74 + 8) & 3) == 0)
            {
              uint64_t v78 = *v68;
              v103[0] = "{0:x}";
              v103[1] = (void *)5;
              std::string v104 = &v108;
              uint64_t v105 = 1;
              char v106 = &unk_270DBE460;
              uint64_t v107 = v78;
              char v108 = &v106;
              v122[0] = (uint64_t)"Error adding keep-alive edge for compact unwind record at ";
              uint64_t v123 = v103;
              __int16 v124 = 1539;
              v129[0] = (unint64_t)v122;
              BOOL v130 = ": target ";
              __int16 v131 = 770;
              long long v79 = *(_OWORD *)*(void *)v69;
              *(void *)uint64_t v95 = v129;
              *(_OWORD *)&v95[16] = v79;
              LOWORD(v96[0]) = 1282;
              operator new();
            }
            int v75 = llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v68, 0, 32, 0, 0);
            char v71 = 1;
            llvm::jitlink::Block::addEdge((void *)v74, 1, 0, (uint64_t)v75, 0);
            v69 += 8;
            if (v69 == v70) {
              goto LABEL_85;
            }
          }
          v69 += 8;
        }
        while (v69 != v70);
        if ((v71 & 1) == 0)
        {
LABEL_95:
          uint64_t v77 = *v68;
          v103[0] = "{0:x}";
          v103[1] = (void *)5;
          std::string v104 = &v108;
          uint64_t v105 = 1;
          char v106 = &unk_270DBE460;
          uint64_t v107 = v77;
          char v108 = &v106;
          *(void *)uint64_t v95 = "Error adding keep-alive edge for compact unwind record at ";
          *(void *)&v95[16] = v103;
          LOWORD(v96[0]) = 1539;
          operator new();
        }
LABEL_85:
        ++v66;
      }
      while (v66 != v67);
      a4 = v94;
      uint64_t v66 = v118;
      if (v118)
      {
LABEL_89:
        long long v119 = v66;
        operator delete(v66);
      }
    }
    uint64_t v19 = v125;
    int v17 = v126;
    goto LABEL_91;
  }
LABEL_105:
  *a4 = 0;
  if (v125)
  {
    uint64_t v126 = v125;
    operator delete(v125);
  }
}

uint64_t **std::__tree<std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>>::__emplace_unique_key_args<llvm::orc::ExecutorAddr,std::piecewise_construct_t const&,std::tuple<llvm::orc::ExecutorAddr&&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    int v7 = (uint64_t **)operator new(0x30uLL);
    void v7[4] = *a3;
    void v7[5] = 0;
    *int v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::destroyAll(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 120 * v1;
    uint64_t v3 = *(void *)a1 + 96;
    do
    {
      if (*(_DWORD *)(v3 - 96) <= 0xFFFFFFFD) {
        std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy(v3, *(void **)(v3 + 8));
      }
      v3 += 120;
      v2 -= 120;
    }
    while (v2);
  }
}

uint64_t llvm::StringMap<std::function<llvm::Error ()(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &)>,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          std::__function::__value_func<llvm::Error ()(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &)>::~__value_func[abi:nn180100]((void *)(v5 + 8));
          MEMORY[0x263E500A0](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void *std::__function::__value_func<llvm::Error ()(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

_DWORD *llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(120 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 120 * v10;
      do
      {
        *uint64_t result = -1;
        result += 30;
        v11 -= 120;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 120 * v3;
      do
      {
        uint64_t v14 = v4 + v12;
        if (*(_DWORD *)(v4 + v12) <= 0xFFFFFFFD)
        {
          unint64_t v29 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::LookupBucketFor<unsigned int>((uint64_t *)a1, (_DWORD *)(v4 + v12), &v29);
          unint64_t v15 = v29;
          _DWORD *v29 = *(_DWORD *)v14;
          long long v16 = *(_OWORD *)(v14 + 8);
          *(_OWORD *)(v15 + 6) = *(_OWORD *)(v14 + 24);
          *(_OWORD *)(v15 + 2) = v16;
          long long v17 = *(_OWORD *)(v14 + 40);
          long long v18 = *(_OWORD *)(v14 + 56);
          long long v19 = *(_OWORD *)(v14 + 72);
          *((void *)v15 + 11) = *(void *)(v14 + 88);
          *(_OWORD *)(v15 + 18) = v19;
          *(_OWORD *)(v15 + 14) = v18;
          *(_OWORD *)(v15 + 10) = v17;
          unint64_t v20 = (void *)(v14 + 96);
          *((void *)v15 + 12) = *(void *)(v14 + 96);
          uint64_t v23 = *(void *)(v14 + 104);
          unint64_t v22 = (void *)(v14 + 104);
          uint64_t v21 = v23;
          *((void *)v15 + 13) = v23;
          long long v24 = v15 + 26;
          uint64_t v25 = v22[1];
          *((void *)v15 + 14) = v25;
          if (v25)
          {
            uint64_t v26 = 0;
            *(void *)(v21 + 16) = v24;
            *unint64_t v20 = v22;
            *unint64_t v22 = 0;
            v22[1] = 0;
          }
          else
          {
            *((void *)v15 + 12) = v24;
            uint64_t v26 = (void *)*v22;
          }
          ++*(_DWORD *)(a1 + 8);
          std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)v20, v26);
        }
        v12 += 120;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v27 = *(unsigned int *)(a1 + 16);
  if (v27)
  {
    uint64_t v28 = 120 * v27;
    do
    {
      *uint64_t result = -1;
      result += 30;
      v28 -= 120;
    }
    while (v28);
  }
  return result;
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **,false>(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
LABEL_2:
  uint64_t v10 = a2 - 1;
  k = v9;
  while (1)
  {
    uint64_t v9 = k;
    uint64_t v12 = (char *)a2 - (char *)k;
    unint64_t v13 = a2 - k;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v58 = *(a2 - 1);
          uint64_t v59 = *k;
          unint64_t v60 = *(void *)(v58 + 40);
          unint64_t v61 = *(void *)(*k + 40);
          BOOL v62 = v60 >= v61;
          if (v60 == v61) {
            BOOL v62 = *(void *)(v58 + 48) >= *(void *)(v59 + 48);
          }
          if (!v62)
          {
            uint64_t *k = v58;
            *(a2 - 1) = v59;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(k, k + 1, a2 - 1);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(k, k + 1, k + 2, a2 - 1);
          break;
        case 5uLL:
          uint64_t v63 = k + 1;
          unint64_t v64 = k + 2;
          uint64_t v65 = k + 3;
          uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(k, k + 1, k + 2, k + 3);
          uint64_t v66 = *(a2 - 1);
          uint64_t v67 = k[3];
          unint64_t v68 = *(void *)(v66 + 40);
          unint64_t v69 = *(void *)(v67 + 40);
          BOOL v70 = v68 >= v69;
          if (v68 == v69) {
            BOOL v70 = *(void *)(v66 + 48) >= *(void *)(v67 + 48);
          }
          if (!v70)
          {
            *uint64_t v65 = v66;
            *(a2 - 1) = v67;
            uint64_t v71 = *v65;
            uint64_t v72 = *v64;
            unint64_t v73 = *(void *)(*v65 + 40);
            unint64_t v74 = *(void *)(*v64 + 40);
            BOOL v75 = v73 >= v74;
            if (v73 == v74) {
              BOOL v75 = *(void *)(v71 + 48) >= *(void *)(v72 + 48);
            }
            if (!v75)
            {
              *unint64_t v64 = v71;
              *uint64_t v65 = v72;
              uint64_t v76 = *v63;
              unint64_t v77 = *(void *)(*v63 + 40);
              BOOL v78 = v73 >= v77;
              if (v73 == v77) {
                BOOL v78 = *(void *)(v71 + 48) >= *(void *)(v76 + 48);
              }
              if (!v78)
              {
                k[1] = v71;
                k[2] = v76;
                uint64_t v79 = *k;
                unint64_t v80 = *(void *)(*k + 40);
                BOOL v81 = v73 >= v80;
                if (v73 == v80) {
                  BOOL v81 = *(void *)(v71 + 48) >= *(void *)(v79 + 48);
                }
                if (!v81)
                {
                  uint64_t *k = v71;
                  k[1] = v79;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if (k == a2) {
        return result;
      }
      int64_t v97 = (v13 - 2) >> 1;
      int64_t v98 = v97;
      do
      {
        int64_t v99 = v98;
        if (v97 >= v98)
        {
          uint64_t v100 = (2 * v98) | 1;
          uint64_t v101 = &k[v100];
          if (2 * v99 + 2 < (uint64_t)v13)
          {
            uint64_t v102 = v101[1];
            uint64_t result = *(uint64_t **)(*v101 + 40);
            uint64_t v103 = *(uint64_t **)(v102 + 40);
            BOOL v104 = result >= v103;
            if (result == v103) {
              BOOL v104 = *(void *)(*v101 + 48) >= *(void *)(v102 + 48);
            }
            if (!v104)
            {
              ++v101;
              uint64_t v100 = 2 * v99 + 2;
            }
          }
          uint64_t v105 = *v101;
          uint64_t v106 = k[v99];
          uint64_t v107 = *(uint64_t **)(*v101 + 40);
          char v108 = *(uint64_t **)(v106 + 40);
          BOOL v109 = v107 >= v108;
          if (v107 == v108)
          {
            uint64_t result = *(uint64_t **)(v106 + 48);
            BOOL v109 = *(void *)(v105 + 48) >= (unint64_t)result;
          }
          if (v109)
          {
            k[v99] = v105;
            if (v97 >= v100)
            {
              while (1)
              {
                uint64_t v111 = 2 * v100;
                uint64_t v100 = (2 * v100) | 1;
                uint64_t v110 = &k[v100];
                uint64_t v112 = v111 + 2;
                if (v112 < (uint64_t)v13)
                {
                  uint64_t v113 = v110[1];
                  unint64_t v114 = *(void *)(*v110 + 40);
                  unint64_t v115 = *(void *)(v113 + 40);
                  BOOL v116 = v114 >= v115;
                  if (v114 == v115) {
                    BOOL v116 = *(void *)(*v110 + 48) >= *(void *)(v113 + 48);
                  }
                  if (!v116)
                  {
                    ++v110;
                    uint64_t v100 = v112;
                  }
                }
                uint64_t v117 = *v110;
                uint64_t result = *(uint64_t **)(*v110 + 40);
                BOOL v118 = result >= v108;
                if (result == v108)
                {
                  uint64_t result = *(uint64_t **)(v117 + 48);
                  BOOL v118 = (unint64_t)result >= *(void *)(v106 + 48);
                }
                if (!v118) {
                  break;
                }
                uint64_t *v101 = v117;
                uint64_t v101 = v110;
                if (v97 < v100) {
                  goto LABEL_164;
                }
              }
            }
            uint64_t v110 = v101;
LABEL_164:
            uint64_t *v110 = v106;
          }
        }
        int64_t v98 = v99 - 1;
      }
      while (v99);
      uint64_t v119 = (unint64_t)v12 >> 3;
      while (1)
      {
        uint64_t v120 = 0;
        uint64_t v121 = *k;
        long long v122 = k;
        do
        {
          uint64_t v123 = v122;
          v122 += v120 + 1;
          uint64_t v124 = 2 * v120;
          uint64_t v120 = (2 * v120) | 1;
          uint64_t v125 = v124 + 2;
          if (v125 < v119)
          {
            uint64_t v126 = v122[1];
            uint64_t result = *(uint64_t **)(*v122 + 40);
            uint64_t v127 = *(uint64_t **)(v126 + 40);
            BOOL v128 = result >= v127;
            if (result == v127) {
              BOOL v128 = *(void *)(*v122 + 48) >= *(void *)(v126 + 48);
            }
            if (!v128)
            {
              ++v122;
              uint64_t v120 = v125;
            }
          }
          uint64_t *v123 = *v122;
        }
        while (v120 <= (uint64_t)((unint64_t)(v119 - 2) >> 1));
        if (v122 != --a2)
        {
          uint64_t *v122 = *a2;
          *a2 = v121;
          uint64_t v129 = (char *)v122 - (char *)k + 8;
          if (v129 < 9) {
            goto LABEL_186;
          }
          unint64_t v130 = ((unint64_t)v129 >> 3) - 2;
          unint64_t v131 = v130 >> 1;
          char v132 = &k[v130 >> 1];
          uint64_t v133 = *v132;
          uint64_t v121 = *v122;
          unint64_t v134 = *(void *)(*v132 + 40);
          unint64_t v135 = *(void *)(*v122 + 40);
          BOOL v136 = v134 >= v135;
          if (v134 == v135) {
            BOOL v136 = *(void *)(v133 + 48) >= *(void *)(v121 + 48);
          }
          if (v136) {
            goto LABEL_186;
          }
          uint64_t *v122 = v133;
          if (v130 >= 2)
          {
            while (1)
            {
              unint64_t v137 = v131 - 1;
              unint64_t v131 = (v131 - 1) >> 1;
              long long v122 = &k[v131];
              uint64_t v138 = *v122;
              unint64_t v139 = *(void *)(*v122 + 40);
              BOOL v140 = v139 >= v135;
              if (v139 == v135) {
                BOOL v140 = *(void *)(v138 + 48) >= *(void *)(v121 + 48);
              }
              if (v140) {
                break;
              }
              uint64_t *v132 = v138;
              char v132 = &k[v131];
              if (v137 <= 1) {
                goto LABEL_185;
              }
            }
          }
          long long v122 = v132;
        }
LABEL_185:
        uint64_t *v122 = v121;
LABEL_186:
        if (v119-- <= 2) {
          return result;
        }
      }
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = &k[v13 >> 1];
    if ((unint64_t)v12 >= 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(v9, &v9[v13 >> 1], a2 - 1);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(v9 + 1, v15 - 1, a2 - 2);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(v9 + 2, &v9[v14 + 1], a2 - 3);
      uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(v15 - 1, v15, &v9[v14 + 1]);
      uint64_t v16 = *v9;
      *uint64_t v9 = *v15;
      *unint64_t v15 = v16;
    }
    else
    {
      uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(&v9[v13 >> 1], v9, a2 - 1);
    }
    --a3;
    uint64_t v17 = *v9;
    if (a4)
    {
      unint64_t v18 = *(void *)(v17 + 40);
LABEL_24:
      for (uint64_t i = 0; ; ++i)
      {
        uint64_t v27 = v9[i + 1];
        unint64_t v28 = *(void *)(v27 + 40);
        BOOL v29 = v28 >= v18;
        if (v28 == v18) {
          BOOL v29 = *(void *)(v27 + 48) >= *(void *)(v17 + 48);
        }
        if (v29) {
          break;
        }
      }
      uint64_t v30 = &v9[i];
      unint64_t v31 = (unint64_t)&v9[i + 1];
      uint64_t j = a2 - 1;
      if (i * 8)
      {
        while (1)
        {
          unint64_t v34 = *(void *)(*j + 40);
          BOOL v35 = v34 >= v18;
          if (v34 == v18) {
            BOOL v35 = *(void *)(*j + 48) >= *(void *)(v17 + 48);
          }
          if (!v35) {
            break;
          }
          --j;
        }
      }
      else
      {
        uint64_t j = a2;
        if (v31 < (unint64_t)a2)
        {
          for (uint64_t j = a2 - 1; ; --j)
          {
            unint64_t v33 = *(void *)(*j + 40);
            if (v33 == v18)
            {
              if (v31 >= (unint64_t)j || *(void *)(*j + 48) < *(void *)(v17 + 48)) {
                break;
              }
            }
            else if (v31 >= (unint64_t)j || v33 < v18)
            {
              break;
            }
          }
        }
      }
      if (v31 < (unint64_t)j)
      {
        uint64_t v36 = *j;
        unint64_t v37 = (unint64_t)&v9[i + 1];
        unint64_t v38 = j;
        do
        {
          *(void *)unint64_t v37 = v36;
          v37 += 8;
          *unint64_t v38 = v27;
          while (1)
          {
            uint64_t v27 = *(void *)v37;
            unint64_t v39 = *(void *)(*(void *)v37 + 40);
            BOOL v40 = v39 >= v18;
            if (v39 == v18) {
              BOOL v40 = *(void *)(v27 + 48) >= *(void *)(v17 + 48);
            }
            if (v40) {
              break;
            }
            v37 += 8;
          }
          do
          {
            uint64_t v41 = *--v38;
            uint64_t v36 = v41;
            unint64_t v42 = *(void *)(v41 + 40);
            BOOL v43 = v42 >= v18;
            if (v42 == v18) {
              BOOL v43 = *(void *)(v36 + 48) >= *(void *)(v17 + 48);
            }
          }
          while (v43);
        }
        while (v37 < (unint64_t)v38);
        uint64_t v30 = (uint64_t *)(v37 - 8);
      }
      if (v30 != v9) {
        *uint64_t v9 = *v30;
      }
      *uint64_t v30 = v17;
      if (v31 < (unint64_t)j)
      {
LABEL_60:
        uint64_t result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **,false>(v9, v30, a3, a4 & 1);
        a4 = 0;
        k = v30 + 1;
      }
      else
      {
        BOOL v44 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(v9, v30);
        k = v30 + 1;
        uint64_t result = (uint64_t *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(v30 + 1, a2);
        if (result)
        {
          a2 = v30;
          if (v44) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v44) {
          goto LABEL_60;
        }
      }
    }
    else
    {
      uint64_t v19 = *(v9 - 1);
      unint64_t v18 = *(void *)(v19 + 40);
      unint64_t v20 = *(void *)(v17 + 40);
      BOOL v21 = v18 >= v20;
      if (v18 == v20)
      {
        if (*(void *)(v19 + 48) < *(void *)(v17 + 48)) {
          goto LABEL_24;
        }
      }
      else
      {
        unint64_t v18 = *(void *)(v17 + 40);
        if (!v21) {
          goto LABEL_24;
        }
      }
      uint64_t v22 = *v10;
      unint64_t v23 = *(void *)(*v10 + 40);
      if (v20 == v23)
      {
        if (*(void *)(v17 + 48) >= *(void *)(v22 + 48)) {
          goto LABEL_16;
        }
      }
      else if (v20 >= v23)
      {
LABEL_16:
        for (k = v9 + 1; k < a2; ++k)
        {
          unint64_t v24 = *(void *)(*k + 40);
          BOOL v25 = v20 >= v24;
          if (v20 == v24) {
            BOOL v25 = *(void *)(v17 + 48) >= *(void *)(*k + 48);
          }
          if (!v25) {
            break;
          }
        }
        goto LABEL_68;
      }
      for (k = v9 + 1; ; ++k)
      {
        unint64_t v45 = *(void *)(*k + 40);
        BOOL v46 = v20 >= v45;
        if (v20 == v45) {
          BOOL v46 = *(void *)(v17 + 48) >= *(void *)(*k + 48);
        }
        if (!v46) {
          break;
        }
      }
LABEL_68:
      m = a2;
      if (k < a2)
      {
        for (m = a2 - 1; ; --m)
        {
          BOOL v48 = v20 >= v23;
          if (v20 == v23) {
            BOOL v48 = *(void *)(v17 + 48) >= *(void *)(v22 + 48);
          }
          if (v48) {
            break;
          }
          uint64_t v49 = *(m - 1);
          uint64_t v22 = v49;
          unint64_t v23 = *(void *)(v49 + 40);
        }
      }
      if (k < m)
      {
        uint64_t v50 = *k;
        uint64_t v51 = *m;
        do
        {
          *k++ = v51;
          uint64_t *m = v50;
          while (1)
          {
            uint64_t v50 = *k;
            unint64_t v52 = *(void *)(*k + 40);
            BOOL v53 = v20 >= v52;
            if (v20 == v52) {
              BOOL v53 = *(void *)(v17 + 48) >= *(void *)(v50 + 48);
            }
            if (!v53) {
              break;
            }
            ++k;
          }
          do
          {
            uint64_t v54 = *--m;
            uint64_t v51 = v54;
            unint64_t v55 = *(void *)(v54 + 40);
            BOOL v56 = v20 >= v55;
            if (v20 == v55) {
              BOOL v56 = *(void *)(v17 + 48) >= *(void *)(v51 + 48);
            }
          }
          while (!v56);
        }
        while (k < m);
      }
      unint64_t v57 = k - 1;
      BOOL v4 = k - 1 >= v9;
      BOOL v5 = k - 1 == v9;
      if (k - 1 != v9) {
        *uint64_t v9 = *v57;
      }
      a4 = 0;
      uint64_t *v57 = v17;
    }
  }
  int v82 = k + 1;
  BOOL v84 = k == a2 || v82 == a2;
  if ((a4 & 1) == 0)
  {
    if (!v84)
    {
      do
      {
        BOOL v142 = v9;
        uint64_t v9 = v82;
        uint64_t v144 = *v142;
        uint64_t v143 = v142[1];
        unint64_t v145 = *(void *)(v143 + 40);
        unint64_t v146 = *(void *)(*v142 + 40);
        BOOL v147 = v145 >= v146;
        if (v145 == v146) {
          BOOL v147 = *(void *)(v143 + 48) >= *(void *)(v144 + 48);
        }
        if (!v147)
        {
          do
          {
            size_t v148 = v142;
            uint64_t v149 = *--v142;
            v142[2] = v144;
            uint64_t v144 = v149;
            unint64_t v150 = *(void *)(v149 + 40);
            BOOL v151 = v145 >= v150;
            if (v145 == v150) {
              BOOL v151 = *(void *)(v143 + 48) >= *(void *)(v144 + 48);
            }
          }
          while (!v151);
          *size_t v148 = v143;
        }
        int v82 = v9 + 1;
      }
      while (v9 + 1 != a2);
    }
    return result;
  }
  if (v84) {
    return result;
  }
  uint64_t v85 = 0;
  long long v86 = k;
  while (2)
  {
    __int16 v87 = v86;
    long long v86 = v82;
    uint64_t v89 = *v87;
    uint64_t v88 = v87[1];
    unint64_t v90 = *(void *)(v88 + 40);
    unint64_t v91 = *(void *)(*v87 + 40);
    BOOL v92 = v90 >= v91;
    if (v90 == v91) {
      BOOL v92 = *(void *)(v88 + 48) >= *(void *)(v89 + 48);
    }
    if (v92) {
      goto LABEL_138;
    }
    v87[1] = v89;
    uint64_t v93 = k;
    if (v87 == k) {
      goto LABEL_137;
    }
    uint64_t v94 = v85;
    while (2)
    {
      uint64_t v95 = *(uint64_t *)((char *)k + v94 - 8);
      unint64_t v96 = *(void *)(v95 + 40);
      if (v90 == v96)
      {
        if (*(void *)(v88 + 48) >= *(void *)(v95 + 48))
        {
          uint64_t v93 = (uint64_t *)((char *)k + v94);
          goto LABEL_137;
        }
LABEL_134:
        --v87;
        *(uint64_t *)((char *)k + v94) = v95;
        v94 -= 8;
        if (!v94)
        {
          uint64_t v93 = k;
          goto LABEL_137;
        }
        continue;
      }
      break;
    }
    if (v90 < v96) {
      goto LABEL_134;
    }
    uint64_t v93 = v87;
LABEL_137:
    *uint64_t v93 = v88;
LABEL_138:
    int v82 = v86 + 1;
    v85 += 8;
    if (v86 + 1 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unint64_t v5 = *(void *)(*a2 + 40);
  unint64_t v6 = *(void *)(*result + 40);
  BOOL v7 = v5 >= v6;
  if (v5 == v6) {
    BOOL v7 = *(void *)(v3 + 48) >= *(void *)(v4 + 48);
  }
  if (v7)
  {
    uint64_t v11 = *a3;
    unint64_t v12 = *(void *)(*a3 + 40);
    BOOL v13 = v12 >= v5;
    if (v12 == v5) {
      BOOL v13 = *(void *)(v11 + 48) >= *(void *)(v3 + 48);
    }
    if (!v13)
    {
      *a2 = v11;
      *a3 = v3;
      uint64_t v14 = *a2;
      uint64_t v15 = *result;
      unint64_t v16 = *(void *)(*a2 + 40);
      unint64_t v17 = *(void *)(*result + 40);
      BOOL v18 = v16 >= v17;
      if (v16 == v17) {
        BOOL v18 = *(void *)(v14 + 48) >= *(void *)(v15 + 48);
      }
      if (!v18)
      {
        *uint64_t result = v14;
        *a2 = v15;
      }
    }
  }
  else
  {
    uint64_t v8 = *a3;
    unint64_t v9 = *(void *)(*a3 + 40);
    BOOL v10 = v9 >= v5;
    if (v9 == v5) {
      BOOL v10 = *(void *)(v8 + 48) >= *(void *)(v3 + 48);
    }
    if (!v10)
    {
      *uint64_t result = v8;
LABEL_19:
      *a3 = v4;
      return result;
    }
    *uint64_t result = v3;
    *a2 = v4;
    uint64_t v19 = *a3;
    unint64_t v20 = *(void *)(*a3 + 40);
    BOOL v21 = v20 >= v6;
    if (v20 == v6) {
      BOOL v21 = *(void *)(v19 + 48) >= *(void *)(v4 + 48);
    }
    if (!v21)
    {
      *a2 = v19;
      goto LABEL_19;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      unint64_t v8 = *(void *)(v6 + 40);
      unint64_t v9 = *(void *)(*a1 + 40);
      BOOL v10 = v8 >= v9;
      if (v8 == v9) {
        BOOL v10 = *(void *)(v6 + 48) >= *(void *)(v7 + 48);
      }
      if (!v10)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      unint64_t v24 = a1 + 1;
      BOOL v25 = a1 + 2;
      uint64_t v26 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v27 = *(a2 - 1);
      uint64_t v28 = a1[3];
      unint64_t v29 = *(void *)(v27 + 40);
      unint64_t v30 = *(void *)(v28 + 40);
      BOOL v31 = v29 >= v30;
      if (v29 == v30) {
        BOOL v31 = *(void *)(v27 + 48) >= *(void *)(v28 + 48);
      }
      if (!v31)
      {
        uint64_t *v26 = v27;
        *(a2 - 1) = v28;
        uint64_t v32 = *v26;
        uint64_t v33 = *v25;
        unint64_t v34 = *(void *)(*v26 + 40);
        unint64_t v35 = *(void *)(*v25 + 40);
        BOOL v36 = v34 >= v35;
        if (v34 == v35) {
          BOOL v36 = *(void *)(v32 + 48) >= *(void *)(v33 + 48);
        }
        if (!v36)
        {
          uint64_t *v25 = v32;
          uint64_t *v26 = v33;
          uint64_t v37 = *v24;
          unint64_t v38 = *(void *)(*v24 + 40);
          BOOL v39 = v34 >= v38;
          if (v34 == v38) {
            BOOL v39 = *(void *)(v32 + 48) >= *(void *)(v37 + 48);
          }
          if (!v39)
          {
            a1[1] = v32;
            a1[2] = v37;
            uint64_t v40 = *a1;
            unint64_t v41 = *(void *)(*a1 + 40);
            BOOL v42 = v34 >= v41;
            if (v34 == v41) {
              BOOL v42 = *(void *)(v32 + 48) >= *(void *)(v40 + 48);
            }
            if (!v42)
            {
              *a1 = v32;
              a1[1] = v40;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(a1, a1 + 1, a1 + 2);
      unint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  do
  {
    uint64_t v15 = *v12;
    uint64_t v16 = *v11;
    unint64_t v17 = *(void *)(*v12 + 40);
    unint64_t v18 = *(void *)(*v11 + 40);
    BOOL v19 = v17 >= v18;
    if (v17 == v18) {
      BOOL v19 = *(void *)(v15 + 48) >= *(void *)(v16 + 48);
    }
    if (v19) {
      goto LABEL_22;
    }
    *unint64_t v12 = v16;
    unint64_t v20 = a1;
    if (v11 == a1) {
      goto LABEL_21;
    }
    uint64_t v21 = v13;
    while (1)
    {
      uint64_t v22 = *(uint64_t *)((char *)a1 + v21 + 8);
      unint64_t v23 = *(void *)(v22 + 40);
      if (v17 == v23)
      {
        if (*(void *)(v15 + 48) >= *(void *)(v22 + 48))
        {
          unint64_t v20 = v11;
          goto LABEL_21;
        }
        goto LABEL_18;
      }
      if (v17 >= v23) {
        break;
      }
LABEL_18:
      --v11;
      *(uint64_t *)((char *)a1 + v21 + 16) = v22;
      v21 -= 8;
      if (v21 == -16)
      {
        unint64_t v20 = a1;
        goto LABEL_21;
      }
    }
    unint64_t v20 = (uint64_t *)((char *)a1 + v21 + 16);
LABEL_21:
    *unint64_t v20 = v15;
    if (++v14 == 8) {
      return v12 + 1 == a2;
    }
LABEL_22:
    uint64_t v11 = v12;
    v13 += 8;
    ++v12;
  }
  while (v12 != a2);
  return 1;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(a1, a2, a3);
  uint64_t v9 = *a4;
  uint64_t v10 = *a3;
  unint64_t v11 = *(void *)(*a4 + 40);
  unint64_t v12 = *(void *)(*a3 + 40);
  BOOL v13 = v11 >= v12;
  if (v11 == v12) {
    BOOL v13 = *(void *)(v9 + 48) >= *(void *)(v10 + 48);
  }
  if (!v13)
  {
    *a3 = v9;
    *a4 = v10;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    unint64_t v16 = *(void *)(*a3 + 40);
    unint64_t v17 = *(void *)(*a2 + 40);
    BOOL v18 = v16 >= v17;
    if (v16 == v17) {
      BOOL v18 = *(void *)(v14 + 48) >= *(void *)(v15 + 48);
    }
    if (!v18)
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v19 = *a2;
      uint64_t v20 = *a1;
      unint64_t v21 = *(void *)(*a2 + 40);
      unint64_t v22 = *(void *)(*a1 + 40);
      BOOL v23 = v21 >= v22;
      if (v21 == v22) {
        BOOL v23 = *(void *)(v19 + 48) >= *(void *)(v20 + 48);
      }
      if (!v23)
      {
        *a1 = v19;
        *a2 = v20;
      }
    }
  }
  return result;
}

void llvm::detail::provider_format_adapter<char (&)[17]>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<char (&)[17]>::format(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v5 = *(const char **)(a1 + 8);
  if (a4)
  {
    unint64_t v12 = 0;
    uint64_t v13 = a3;
    uint64_t v14 = a4;
    int v6 = llvm::consumeUnsignedInteger((llvm *)&v13, (llvm::StringRef *)0xA, &v12, a4);
    if (v14) {
      int v7 = 1;
    }
    else {
      int v7 = v6;
    }
    if (v7) {
      unint64_t v8 = -1;
    }
    else {
      unint64_t v8 = v12;
    }
    if (v5) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v8 = -1;
    if (v5)
    {
LABEL_9:
      size_t v9 = strlen(v5);
      goto LABEL_12;
    }
  }
  size_t v9 = 0;
LABEL_12:
  if (v9 >= v8) {
    size_t v10 = v8;
  }
  else {
    size_t v10 = v9;
  }
  return llvm::raw_ostream::operator<<(a2, v5, v10);
}

void *llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<char (&)[17]>,llvm::detail::provider_format_adapter<char (&)[17]>,llvm::detail::stream_operator_format_adapter<llvm::orc::ExecutorAddr &>,llvm::detail::stream_operator_format_adapter<llvm::orc::ExecutorAddr>>>::formatv_object(void *result, void *a2)
{
  *BOOL result = "\"{0}/{1}\" [ {2:x16} -- {3:x16} ] ";
  result[1] = 33;
  result[2] = result + 12;
  result[3] = 4;
  uint64_t v2 = a2[1];
  result[4] = &unk_270DBEC80;
  result[5] = v2;
  uint64_t v3 = a2[3];
  result[6] = &unk_270DBEC80;
  result[7] = v3;
  uint64_t v4 = a2[5];
  result[8] = &unk_270DBD808;
  result[9] = v4;
  uint64_t v5 = a2[7];
  result[10] = &unk_270DBE460;
  result[11] = v5;
  result[12] = result + 4;
  result[13] = result + 6;
  result[14] = result + 8;
  result[15] = result + 10;
  return result;
}

_DWORD *llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *BOOL result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = v4;
      do
      {
        if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        {
          unint64_t v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)a1, (_DWORD *)v13, &v17);
          uint64_t v14 = v17;
          *unint64_t v17 = *(_DWORD *)v13;
          *((void *)v14 + 1) = *(void *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = 16 * v15;
    do
    {
      *BOOL result = -1;
      result += 4;
      v16 -= 16;
    }
    while (v16);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unsigned int v8 = (uint64_t *)result;
LABEL_2:
  m = a2;
  uint64_t v10 = a2 - 1;
  k = v8;
  while (1)
  {
    unsigned int v8 = k;
    uint64_t v12 = (char *)m - (char *)k;
    uint64_t v13 = v12 >> 3;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          BOOL result = *(a2 - 1);
          uint64_t v101 = *v8;
          unint64_t v102 = *(void *)(result + 24);
          unint64_t v103 = *(void *)(*v8 + 24);
          if (v102 == v103)
          {
            int v104 = *(unsigned __int16 *)(v101 + 34);
            if (((*(unsigned __int16 *)(result + 34) ^ v104) & 0x200) != 0)
            {
              if ((v104 & 0x200) == 0) {
                return result;
              }
            }
            else
            {
              unsigned int v210 = *(unsigned __int8 *)(result + 37);
              unsigned int v211 = *(unsigned __int8 *)(v101 + 37);
              if (v210 == v211)
              {
                BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v101);
                if (!result) {
                  return result;
                }
                uint64_t v101 = *v8;
                BOOL result = *(a2 - 1);
              }
              else if (v210 >= v211)
              {
                return result;
              }
            }
          }
          else if (v102 <= v103)
          {
            return result;
          }
          *unsigned int v8 = result;
          *(a2 - 1) = v101;
          return result;
        case 3:
          return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v8, v8 + 1, v10);
        case 4:
          return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v8, v8 + 1, v8 + 2, v10);
        case 5:
          return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,0>(v8, v8 + 1, v8 + 2, v8 + 3, v10);
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v8 == m) {
        return result;
      }
      int64_t v127 = (unint64_t)(v13 - 2) >> 1;
      int64_t v128 = v127;
      while (1)
      {
        int64_t v129 = v128;
        if (v127 < v128) {
          goto LABEL_266;
        }
        uint64_t v130 = (2 * v128) | 1;
        unint64_t v131 = &v8[v130];
        if (2 * v128 + 2 >= v13) {
          goto LABEL_226;
        }
        uint64_t v132 = *v131;
        uint64_t v133 = v131[1];
        unint64_t v134 = *(void *)(*v131 + 24);
        unint64_t v135 = *(void *)(v133 + 24);
        if (v134 == v135) {
          break;
        }
        if (v134 > v135) {
          goto LABEL_225;
        }
LABEL_226:
        BOOL result = *v131;
        uint64_t v137 = v8[v129];
        unint64_t v138 = *(void *)(*v131 + 24);
        unint64_t v139 = *(void *)(v137 + 24);
        if (v138 == v139)
        {
          int v140 = *(unsigned __int16 *)(v137 + 34);
          if (((*(unsigned __int16 *)(result + 34) ^ v140) & 0x200) != 0)
          {
            if ((v140 & 0x200) != 0) {
              goto LABEL_266;
            }
          }
          else
          {
            unsigned int v157 = *(unsigned __int8 *)(result + 37);
            unsigned int v158 = *(unsigned __int8 *)(v137 + 37);
            if (v157 == v158)
            {
              BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v8[v129]);
              int64_t v127 = (unint64_t)(v13 - 2) >> 1;
              if (result) {
                goto LABEL_266;
              }
              uint64_t v137 = v8[v129];
              BOOL result = *v131;
            }
            else if (v157 < v158)
            {
              goto LABEL_266;
            }
          }
        }
        else if (v138 > v139)
        {
          goto LABEL_266;
        }
        v8[v129] = result;
        while (1)
        {
          if (v127 < v130) {
            goto LABEL_265;
          }
          unsigned int v141 = v131;
          uint64_t v142 = 2 * v130;
          uint64_t v130 = (2 * v130) | 1;
          unint64_t v131 = &v8[v130];
          uint64_t v143 = v142 + 2;
          if (v142 + 2 < v13)
          {
            uint64_t v144 = *v131;
            uint64_t v145 = v131[1];
            unint64_t v146 = *(void *)(*v131 + 24);
            unint64_t v147 = *(void *)(v145 + 24);
            if (v146 != v147)
            {
              if (v146 <= v147) {
                goto LABEL_240;
              }
LABEL_239:
              ++v131;
              uint64_t v130 = v143;
              goto LABEL_240;
            }
            int v148 = *(unsigned __int16 *)(v145 + 34);
            if (((*(unsigned __int16 *)(v144 + 34) ^ v148) & 0x200) != 0)
            {
              if ((v148 & 0x200) != 0) {
                goto LABEL_239;
              }
            }
            else
            {
              unsigned int v154 = *(unsigned __int8 *)(v144 + 37);
              unsigned int v155 = *(unsigned __int8 *)(v145 + 37);
              if (v154 == v155)
              {
                char v156 = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v144, v145);
                int64_t v127 = (unint64_t)(v13 - 2) >> 1;
                if (v156) {
                  goto LABEL_239;
                }
              }
              else if (v154 < v155)
              {
                goto LABEL_239;
              }
            }
          }
LABEL_240:
          BOOL result = *v131;
          unint64_t v149 = *(void *)(*v131 + 24);
          unint64_t v150 = *(void *)(v137 + 24);
          if (v149 != v150)
          {
            if (v149 > v150) {
              goto LABEL_264;
            }
            goto LABEL_245;
          }
          int v151 = *(unsigned __int16 *)(v137 + 34);
          if (((*(unsigned __int16 *)(result + 34) ^ v151) & 0x200) != 0)
          {
            if ((v151 & 0x200) != 0) {
              goto LABEL_264;
            }
            goto LABEL_245;
          }
          unsigned int v152 = *(unsigned __int8 *)(result + 37);
          unsigned int v153 = *(unsigned __int8 *)(v137 + 37);
          if (v152 == v153) {
            break;
          }
          if (v152 < v153)
          {
LABEL_264:
            unint64_t v131 = v141;
            goto LABEL_265;
          }
LABEL_245:
          *unsigned int v141 = result;
        }
        BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v137);
        if ((result & 1) == 0)
        {
          BOOL result = *v131;
          int64_t v127 = (unint64_t)(v13 - 2) >> 1;
          goto LABEL_245;
        }
        unint64_t v131 = v141;
        int64_t v127 = (unint64_t)(v13 - 2) >> 1;
LABEL_265:
        uint64_t *v131 = v137;
LABEL_266:
        int64_t v128 = v129 - 1;
        if (!v129)
        {
          uint64_t v162 = (unint64_t)v12 >> 3;
          while (1)
          {
            uint64_t v163 = 0;
            uint64_t v164 = *v8;
            long long v165 = v8;
            do
            {
              uint64_t v166 = v165;
              v165 += v163 + 1;
              uint64_t v167 = 2 * v163;
              uint64_t v163 = (2 * v163) | 1;
              uint64_t v168 = v167 + 2;
              if (v167 + 2 >= v162) {
                goto LABEL_279;
              }
              BOOL result = *v165;
              uint64_t v169 = v165[1];
              unint64_t v170 = *(void *)(*v165 + 24);
              unint64_t v171 = *(void *)(v169 + 24);
              if (v170 != v171)
              {
                if (v170 <= v171) {
                  goto LABEL_279;
                }
LABEL_278:
                ++v165;
                uint64_t v163 = v168;
                goto LABEL_279;
              }
              int v172 = *(unsigned __int16 *)(v169 + 34);
              if (((*(unsigned __int16 *)(result + 34) ^ v172) & 0x200) != 0)
              {
                if ((v172 & 0x200) != 0) {
                  goto LABEL_278;
                }
              }
              else
              {
                unsigned int v173 = *(unsigned __int8 *)(result + 37);
                unsigned int v174 = *(unsigned __int8 *)(v169 + 37);
                if (v173 == v174)
                {
                  BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v169);
                  if (result) {
                    goto LABEL_278;
                  }
                }
                else if (v173 < v174)
                {
                  goto LABEL_278;
                }
              }
LABEL_279:
              uint64_t *v166 = *v165;
            }
            while (v163 <= (uint64_t)((unint64_t)(v162 - 2) >> 1));
            unsigned int v175 = a2 - 1;
            BOOL v5 = v165 == --a2;
            if (v5)
            {
              uint64_t *v165 = v164;
              goto LABEL_312;
            }
            uint64_t *v165 = *v175;
            *unsigned int v175 = v164;
            uint64_t v176 = (char *)v165 - (char *)v8 + 8;
            if (v176 < 9) {
              goto LABEL_312;
            }
            unint64_t v177 = ((unint64_t)v176 >> 3) - 2;
            unint64_t v178 = v177 >> 1;
            unsigned __int8 v179 = &v8[v177 >> 1];
            BOOL result = *v179;
            uint64_t v180 = *v165;
            unint64_t v181 = *(void *)(*v179 + 24);
            unint64_t v182 = *(void *)(*v165 + 24);
            if (v181 == v182)
            {
              int v183 = *(unsigned __int16 *)(v180 + 34);
              if (((*(unsigned __int16 *)(result + 34) ^ v183) & 0x200) != 0)
              {
                if ((v183 & 0x200) == 0) {
                  goto LABEL_312;
                }
              }
              else
              {
                unsigned int v191 = *(unsigned __int8 *)(result + 37);
                unsigned int v192 = *(unsigned __int8 *)(v180 + 37);
                if (v191 == v192)
                {
                  BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, *v165);
                  if (!result) {
                    goto LABEL_312;
                  }
                  uint64_t v180 = *v165;
                  BOOL result = *v179;
                }
                else if (v191 >= v192)
                {
                  goto LABEL_312;
                }
              }
            }
            else if (v181 <= v182)
            {
              goto LABEL_312;
            }
            uint64_t *v165 = result;
            if (v177 < 2) {
              goto LABEL_311;
            }
            while (2)
            {
              uint64_t v184 = v179;
              unint64_t v185 = v178 - 1;
              unint64_t v178 = (v178 - 1) >> 1;
              unsigned __int8 v179 = &v8[v178];
              BOOL result = *v179;
              unint64_t v186 = *(void *)(*v179 + 24);
              unint64_t v187 = *(void *)(v180 + 24);
              if (v186 != v187)
              {
                if (v186 <= v187) {
                  break;
                }
                goto LABEL_305;
              }
              int v188 = *(unsigned __int16 *)(v180 + 34);
              if (((*(unsigned __int16 *)(result + 34) ^ v188) & 0x200) != 0)
              {
                if ((v188 & 0x200) == 0) {
                  break;
                }
                goto LABEL_305;
              }
              unsigned int v189 = *(unsigned __int8 *)(result + 37);
              unsigned int v190 = *(unsigned __int8 *)(v180 + 37);
              if (v189 == v190)
              {
                BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v180);
                if (!result) {
                  break;
                }
                BOOL result = *v179;
                goto LABEL_305;
              }
              if (v189 < v190)
              {
LABEL_305:
                *uint64_t v184 = result;
                if (v185 <= 1) {
                  goto LABEL_311;
                }
                continue;
              }
              break;
            }
            unsigned __int8 v179 = v184;
LABEL_311:
            uint64_t *v179 = v180;
LABEL_312:
            if (v162-- <= 2) {
              return result;
            }
          }
        }
      }
      int v136 = *(unsigned __int16 *)(v133 + 34);
      if (((*(unsigned __int16 *)(v132 + 34) ^ v136) & 0x200) != 0)
      {
        if ((v136 & 0x200) == 0) {
          goto LABEL_226;
        }
      }
      else
      {
        unsigned int v159 = *(unsigned __int8 *)(v132 + 37);
        unsigned int v160 = *(unsigned __int8 *)(v133 + 37);
        if (v159 == v160)
        {
          char v161 = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v132, v133);
          int64_t v127 = (unint64_t)(v13 - 2) >> 1;
          if ((v161 & 1) == 0) {
            goto LABEL_226;
          }
        }
        else if (v159 >= v160)
        {
          goto LABEL_226;
        }
      }
LABEL_225:
      ++v131;
      uint64_t v130 = 2 * v129 + 2;
      goto LABEL_226;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    uint64_t v15 = &v8[(unint64_t)v13 >> 1];
    if ((unint64_t)v12 < 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v15, v8, v10);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v8, v15, v10);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v8 + 1, v15 - 1, a2 - 2);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v8 + 2, &v8[v14 + 1], a2 - 3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v15 - 1, v15, &v8[v14 + 1]);
      uint64_t v16 = *v8;
      *unsigned int v8 = *v15;
      *uint64_t v15 = v16;
    }
    --a3;
    uint64_t v17 = *v8;
    if (a4) {
      goto LABEL_17;
    }
    BOOL result = *(v8 - 1);
    unint64_t v18 = *(void *)(result + 24);
    unint64_t v19 = *(void *)(v17 + 24);
    if (v18 == v19)
    {
      int v20 = *(unsigned __int16 *)(v17 + 34);
      if (((*(unsigned __int16 *)(result + 34) ^ v20) & 0x200) != 0)
      {
        if ((v20 & 0x200) == 0) {
          goto LABEL_91;
        }
        goto LABEL_17;
      }
      unsigned int v61 = *(unsigned __int8 *)(result + 37);
      unsigned int v62 = *(unsigned __int8 *)(v17 + 37);
      if (v61 == v62)
      {
        BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, *v8);
        uint64_t v17 = *v8;
        if ((result & 1) == 0)
        {
          unint64_t v18 = *(void *)(v17 + 24);
          goto LABEL_91;
        }
      }
      else if (v61 >= v62)
      {
        goto LABEL_91;
      }
LABEL_17:
      for (uint64_t i = 0; ; ++i)
      {
        uint64_t v22 = v8[i + 1];
        unint64_t v23 = *(void *)(v22 + 24);
        unint64_t v24 = *(void *)(v17 + 24);
        if (v23 != v24)
        {
          if (v23 <= v24) {
            goto LABEL_28;
          }
          continue;
        }
        int v25 = *(unsigned __int16 *)(v17 + 34);
        if (((*(unsigned __int16 *)(v22 + 34) ^ v25) & 0x200) != 0)
        {
          if ((v25 & 0x200) == 0) {
            goto LABEL_28;
          }
          continue;
        }
        unsigned int v26 = *(unsigned __int8 *)(v22 + 37);
        unsigned int v27 = *(unsigned __int8 *)(v17 + 37);
        if (v26 != v27) {
          break;
        }
        if ((std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v22, v17) & 1) == 0) {
          goto LABEL_28;
        }
LABEL_23:
        ;
      }
      if (v26 < v27) {
        goto LABEL_23;
      }
LABEL_28:
      uint64_t v28 = &v8[i];
      unint64_t v29 = (unint64_t)&v8[i + 1];
      uint64_t j = a2 - 1;
      if (i * 8)
      {
        while (1)
        {
          uint64_t v31 = *j;
          unint64_t v32 = *(void *)(*j + 24);
          unint64_t v33 = *(void *)(v17 + 24);
          if (v32 == v33)
          {
            int v34 = *(unsigned __int16 *)(v17 + 34);
            if (((*(unsigned __int16 *)(v31 + 34) ^ v34) & 0x200) != 0)
            {
              if ((v34 & 0x200) != 0) {
                goto LABEL_56;
              }
            }
            else
            {
              unsigned int v35 = *(unsigned __int8 *)(v31 + 37);
              unsigned int v36 = *(unsigned __int8 *)(v17 + 37);
              if (v35 == v36)
              {
                if (std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v31, v17)) {
                  goto LABEL_56;
                }
              }
              else if (v35 < v36)
              {
                goto LABEL_56;
              }
            }
          }
          else if (v32 > v33)
          {
            goto LABEL_56;
          }
          --j;
        }
      }
      uint64_t j = m;
      if (v29 < (unint64_t)m)
      {
        for (uint64_t j = a2 - 1; ; --j)
        {
          uint64_t v37 = *j;
          unint64_t v38 = *(void *)(*j + 24);
          unint64_t v39 = *(void *)(v17 + 24);
          if (v38 == v39)
          {
            int v40 = *(unsigned __int16 *)(v17 + 34);
            if (((*(unsigned __int16 *)(v37 + 34) ^ v40) & 0x200) != 0)
            {
              if (v29 >= (unint64_t)j || (v40 & 0x200) != 0) {
                break;
              }
            }
            else
            {
              unsigned int v41 = *(unsigned __int8 *)(v37 + 37);
              unsigned int v42 = *(unsigned __int8 *)(v17 + 37);
              if (v41 == v42)
              {
                char v43 = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v37, v17);
                if (v29 >= (unint64_t)j || (v43 & 1) != 0) {
                  break;
                }
              }
              else if (v29 >= (unint64_t)j || v41 < v42)
              {
                break;
              }
            }
          }
          else if (v29 >= (unint64_t)j || v38 > v39)
          {
            break;
          }
        }
      }
LABEL_56:
      if (v29 >= (unint64_t)j) {
        goto LABEL_81;
      }
      unint64_t v44 = (unint64_t)&v8[i + 1];
      unint64_t v45 = j;
      while (2)
      {
        uint64_t v46 = *(void *)v44;
        *(void *)unint64_t v44 = *v45;
        v44 += 8;
        uint64_t *v45 = v46;
        while (2)
        {
          uint64_t v47 = *(void *)v44;
          unint64_t v48 = *(void *)(*(void *)v44 + 24);
          unint64_t v49 = *(void *)(v17 + 24);
          if (v48 != v49)
          {
            if (v48 <= v49) {
              goto LABEL_69;
            }
LABEL_64:
            v44 += 8;
            continue;
          }
          break;
        }
        int v50 = *(unsigned __int16 *)(v17 + 34);
        if (((*(unsigned __int16 *)(v47 + 34) ^ v50) & 0x200) != 0)
        {
          if ((v50 & 0x200) == 0) {
            goto LABEL_69;
          }
          goto LABEL_64;
        }
        unsigned int v51 = *(unsigned __int8 *)(v47 + 37);
        unsigned int v52 = *(unsigned __int8 *)(v17 + 37);
        if (v51 != v52)
        {
          if (v51 >= v52) {
            goto LABEL_69;
          }
          goto LABEL_64;
        }
        if (std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v47, v17)) {
          goto LABEL_64;
        }
        do
        {
          while (1)
          {
            while (1)
            {
LABEL_69:
              while (1)
              {
                uint64_t v54 = *--v45;
                uint64_t v53 = v54;
                unint64_t v55 = *(void *)(v54 + 24);
                unint64_t v56 = *(void *)(v17 + 24);
                if (v55 == v56) {
                  break;
                }
                if (v55 > v56) {
                  goto LABEL_79;
                }
              }
              int v57 = *(unsigned __int16 *)(v17 + 34);
              if (((*(unsigned __int16 *)(v53 + 34) ^ v57) & 0x200) == 0) {
                break;
              }
              if ((v57 & 0x200) != 0) {
                goto LABEL_79;
              }
            }
            unsigned int v58 = *(unsigned __int8 *)(v53 + 37);
            unsigned int v59 = *(unsigned __int8 *)(v17 + 37);
            if (v58 != v59) {
              break;
            }
            if (std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v53, v17)) {
              goto LABEL_79;
            }
          }
        }
        while (v58 >= v59);
LABEL_79:
        if (v44 < (unint64_t)v45) {
          continue;
        }
        break;
      }
      uint64_t v28 = (uint64_t *)(v44 - 8);
      m = a2;
LABEL_81:
      if (v28 != v8) {
        *unsigned int v8 = *v28;
      }
      uint64_t *v28 = v17;
      if (v29 < (unint64_t)j)
      {
LABEL_86:
        BOOL result = std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,false>(v8, v28, a3, a4 & 1);
        a4 = 0;
        k = v28 + 1;
      }
      else
      {
        BOOL v60 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v8, v28);
        k = v28 + 1;
        BOOL result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v28 + 1, m);
        if (result)
        {
          a2 = v28;
          if (v60) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v60) {
          goto LABEL_86;
        }
      }
    }
    else
    {
      if (v18 > v19) {
        goto LABEL_17;
      }
      unint64_t v18 = *(void *)(v17 + 24);
LABEL_91:
      uint64_t v63 = *v10;
      unint64_t v64 = *(void *)(*v10 + 24);
      if (v18 == v64)
      {
        int v65 = *(unsigned __int16 *)(v63 + 34);
        if (((*(unsigned __int16 *)(v17 + 34) ^ v65) & 0x200) != 0)
        {
          if ((v65 & 0x200) != 0) {
            goto LABEL_108;
          }
        }
        else
        {
          unsigned int v99 = *(unsigned __int8 *)(v17 + 37);
          unsigned int v100 = *(unsigned __int8 *)(v63 + 37);
          if (v99 == v100)
          {
            BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v17, v63);
            if (result) {
              goto LABEL_108;
            }
          }
          else if (v99 < v100)
          {
LABEL_108:
            for (k = v8 + 1; ; ++k)
            {
              uint64_t v72 = *k;
              unint64_t v73 = *(void *)(v17 + 24);
              unint64_t v74 = *(void *)(*k + 24);
              if (v73 == v74)
              {
                int v75 = *(unsigned __int16 *)(v72 + 34);
                if (((*(unsigned __int16 *)(v17 + 34) ^ v75) & 0x200) != 0)
                {
                  if ((v75 & 0x200) != 0) {
                    goto LABEL_119;
                  }
                }
                else
                {
                  unsigned int v76 = *(unsigned __int8 *)(v17 + 37);
                  unsigned int v77 = *(unsigned __int8 *)(v72 + 37);
                  if (v76 == v77)
                  {
                    BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v17, v72);
                    if (result) {
                      goto LABEL_119;
                    }
                  }
                  else if (v76 < v77)
                  {
                    goto LABEL_119;
                  }
                }
              }
              else if (v73 > v74)
              {
                goto LABEL_119;
              }
            }
          }
        }
      }
      else if (v18 > v64)
      {
        goto LABEL_108;
      }
      for (k = v8 + 1; k < m; ++k)
      {
        uint64_t v66 = *k;
        unint64_t v67 = *(void *)(v17 + 24);
        unint64_t v68 = *(void *)(*k + 24);
        if (v67 == v68)
        {
          int v69 = *(unsigned __int16 *)(v66 + 34);
          if (((*(unsigned __int16 *)(v17 + 34) ^ v69) & 0x200) != 0)
          {
            if ((v69 & 0x200) != 0) {
              break;
            }
          }
          else
          {
            unsigned int v70 = *(unsigned __int8 *)(v17 + 37);
            unsigned int v71 = *(unsigned __int8 *)(v66 + 37);
            if (v70 == v71)
            {
              BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v17, v66);
              if (result) {
                break;
              }
            }
            else if (v70 < v71)
            {
              break;
            }
          }
        }
        else if (v67 > v68)
        {
          break;
        }
      }
LABEL_119:
      if (k >= m) {
        goto LABEL_153;
      }
      for (m = a2 - 1; ; --m)
      {
        uint64_t v78 = *m;
        unint64_t v79 = *(void *)(v17 + 24);
        unint64_t v80 = *(void *)(*m + 24);
        if (v79 != v80)
        {
          if (v79 <= v80) {
            goto LABEL_153;
          }
          continue;
        }
        int v81 = *(unsigned __int16 *)(v78 + 34);
        if (((*(unsigned __int16 *)(v17 + 34) ^ v81) & 0x200) != 0)
        {
          if ((v81 & 0x200) == 0) {
            goto LABEL_153;
          }
          continue;
        }
        unsigned int v82 = *(unsigned __int8 *)(v17 + 37);
        unsigned int v83 = *(unsigned __int8 *)(v78 + 37);
        if (v82 != v83) {
          break;
        }
        BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v17, v78);
        if ((result & 1) == 0) {
          goto LABEL_153;
        }
LABEL_126:
        ;
      }
      if (v82 < v83) {
        goto LABEL_126;
      }
LABEL_153:
      if (k < m)
      {
        uint64_t v84 = *k;
        *k++ = *m;
        uint64_t *m = v84;
        while (1)
        {
          uint64_t v85 = *k;
          unint64_t v86 = *(void *)(v17 + 24);
          unint64_t v87 = *(void *)(*k + 24);
          if (v86 == v87)
          {
            int v88 = *(unsigned __int16 *)(v85 + 34);
            if (((*(unsigned __int16 *)(v17 + 34) ^ v88) & 0x200) != 0)
            {
              if ((v88 & 0x200) != 0) {
                goto LABEL_143;
              }
            }
            else
            {
              unsigned int v89 = *(unsigned __int8 *)(v17 + 37);
              unsigned int v90 = *(unsigned __int8 *)(v85 + 37);
              if (v89 == v90)
              {
                BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v17, v85);
                if (result)
                {
                  do
                  {
                    while (1)
                    {
                      while (1)
                      {
LABEL_143:
                        while (1)
                        {
                          uint64_t v92 = *--m;
                          uint64_t v91 = v92;
                          unint64_t v93 = *(void *)(v17 + 24);
                          unint64_t v94 = *(void *)(v92 + 24);
                          if (v93 == v94) {
                            break;
                          }
                          if (v93 <= v94) {
                            goto LABEL_153;
                          }
                        }
                        int v95 = *(unsigned __int16 *)(v91 + 34);
                        if (((*(unsigned __int16 *)(v17 + 34) ^ v95) & 0x200) == 0) {
                          break;
                        }
                        if ((v95 & 0x200) == 0) {
                          goto LABEL_153;
                        }
                      }
                      unsigned int v96 = *(unsigned __int8 *)(v17 + 37);
                      unsigned int v97 = *(unsigned __int8 *)(v91 + 37);
                      if (v96 != v97) {
                        break;
                      }
                      BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v17, v91);
                      if ((result & 1) == 0) {
                        goto LABEL_153;
                      }
                    }
                  }
                  while (v96 < v97);
                  goto LABEL_153;
                }
              }
              else if (v89 < v90)
              {
                goto LABEL_143;
              }
            }
          }
          else if (v86 > v87)
          {
            goto LABEL_143;
          }
          ++k;
        }
      }
      int64_t v98 = k - 1;
      BOOL v4 = k - 1 >= v8;
      BOOL v5 = k - 1 == v8;
      if (k - 1 != v8) {
        *unsigned int v8 = *v98;
      }
      a4 = 0;
      uint64_t *v98 = v17;
      m = a2;
    }
  }
  uint64_t v105 = v8 + 1;
  BOOL v107 = v8 == m || v105 == m;
  if ((a4 & 1) == 0)
  {
    if (v107) {
      return result;
    }
    while (1)
    {
      v194 = (long long **)v8;
      unsigned int v8 = v105;
      uint64_t v195 = (uint64_t)*v194;
      uint64_t v196 = (uint64_t)v194[1];
      unint64_t v197 = *(void *)(v196 + 24);
      unint64_t v198 = *((void *)*v194 + 3);
      if (v197 == v198)
      {
        int v199 = *(unsigned __int16 *)(v195 + 34);
        if (((*(unsigned __int16 *)(v196 + 34) ^ v199) & 0x200) != 0)
        {
          if ((v199 & 0x200) != 0) {
            goto LABEL_330;
          }
        }
        else
        {
          unsigned int v200 = *(unsigned __int8 *)(v196 + 37);
          unsigned int v201 = *(unsigned __int8 *)(v195 + 37);
          if (v200 == v201)
          {
            BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>(v194[1], v195);
            if (result)
            {
              uint64_t v196 = *v8;
              goto LABEL_330;
            }
          }
          else if (v200 < v201)
          {
            do
            {
              while (1)
              {
                while (1)
                {
LABEL_330:
                  while (1)
                  {
                    v202 = v194;
                    v194[1] = *v194;
                    uint64_t v204 = (uint64_t)*--v194;
                    uint64_t v203 = v204;
                    unint64_t v205 = *(void *)(v196 + 24);
                    unint64_t v206 = *(void *)(v204 + 24);
                    if (v205 == v206) {
                      break;
                    }
                    if (v205 <= v206) {
                      goto LABEL_340;
                    }
                  }
                  int v207 = *(unsigned __int16 *)(v203 + 34);
                  if (((*(unsigned __int16 *)(v196 + 34) ^ v207) & 0x200) == 0) {
                    break;
                  }
                  if ((v207 & 0x200) == 0) {
                    goto LABEL_340;
                  }
                }
                unsigned int v208 = *(unsigned __int8 *)(v196 + 37);
                unsigned int v209 = *(unsigned __int8 *)(v203 + 37);
                if (v208 != v209) {
                  break;
                }
                BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v196, v203);
                if ((result & 1) == 0) {
                  goto LABEL_340;
                }
              }
            }
            while (v208 < v209);
LABEL_340:
            void *v202 = v196;
          }
        }
      }
      else if (v197 > v198)
      {
        goto LABEL_330;
      }
      uint64_t v105 = v8 + 1;
      if (v8 + 1 == a2) {
        return result;
      }
    }
  }
  if (v107) {
    return result;
  }
  uint64_t v108 = 0;
  BOOL v109 = v8;
  while (2)
  {
    uint64_t v110 = (long long **)v109;
    BOOL v109 = v105;
    uint64_t v111 = (uint64_t)*v110;
    uint64_t v112 = v110[1];
    unint64_t v113 = *((void *)v112 + 3);
    unint64_t v114 = *((void *)*v110 + 3);
    if (v113 == v114)
    {
      int v115 = *(unsigned __int16 *)(v111 + 34);
      if (((*((unsigned __int16 *)v112 + 17) ^ v115) & 0x200) != 0)
      {
        if ((v115 & 0x200) == 0) {
          goto LABEL_214;
        }
      }
      else
      {
        unsigned int v116 = *((unsigned __int8 *)v112 + 37);
        unsigned int v117 = *(unsigned __int8 *)(v111 + 37);
        if (v116 == v117)
        {
          BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>(v110[1], v111);
          if (!result) {
            goto LABEL_214;
          }
          uint64_t v112 = (long long *)*v109;
          uint64_t v111 = (uint64_t)*v110;
        }
        else if (v116 >= v117)
        {
          goto LABEL_214;
        }
      }
    }
    else if (v113 <= v114)
    {
      goto LABEL_214;
    }
    v110[1] = (long long *)v111;
    BOOL v118 = v8;
    if (v110 == (long long **)v8) {
      goto LABEL_213;
    }
    uint64_t v119 = v108;
    while (2)
    {
      uint64_t v120 = (uint64_t *)((char *)v8 + v119);
      uint64_t v121 = *(uint64_t *)((char *)v8 + v119 - 8);
      unint64_t v122 = *((void *)v112 + 3);
      unint64_t v123 = *(void *)(v121 + 24);
      if (v122 != v123)
      {
        if (v122 <= v123) {
          break;
        }
        goto LABEL_210;
      }
      int v124 = *(unsigned __int16 *)(v121 + 34);
      if (((*((unsigned __int16 *)v112 + 17) ^ v124) & 0x200) != 0)
      {
        if ((v124 & 0x200) == 0)
        {
          BOOL v118 = (uint64_t *)((char *)v8 + v119);
          goto LABEL_213;
        }
        goto LABEL_210;
      }
      unsigned int v125 = *((unsigned __int8 *)v112 + 37);
      unsigned int v126 = *(unsigned __int8 *)(v121 + 37);
      if (v125 == v126)
      {
        BOOL result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>(v112, v121);
        if (!result) {
          break;
        }
        uint64_t v121 = *(v120 - 1);
        goto LABEL_210;
      }
      if (v125 < v126)
      {
LABEL_210:
        --v110;
        uint64_t *v120 = v121;
        v119 -= 8;
        if (!v119)
        {
          BOOL v118 = v8;
          goto LABEL_213;
        }
        continue;
      }
      break;
    }
    BOOL v118 = v110;
LABEL_213:
    void *v118 = v112;
LABEL_214:
    uint64_t v105 = v109 + 1;
    v108 += 8;
    if (v109 + 1 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(a1, a2, a3, a4);
  uint64_t result = *a5;
  uint64_t v11 = *a4;
  unint64_t v12 = *(void *)(*a5 + 24);
  unint64_t v13 = *(void *)(*a4 + 24);
  if (v12 == v13)
  {
    int v14 = *(unsigned __int16 *)(v11 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v14) & 0x200) != 0)
    {
      if ((v14 & 0x200) == 0) {
        return result;
      }
    }
    else
    {
      unsigned int v19 = *(unsigned __int8 *)(result + 37);
      unsigned int v20 = *(unsigned __int8 *)(v11 + 37);
      if (v19 == v20)
      {
        uint64_t result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v11);
        if (!result) {
          return result;
        }
        uint64_t v11 = *a4;
        uint64_t result = *a5;
      }
      else if (v19 >= v20)
      {
        return result;
      }
    }
  }
  else if (v12 <= v13)
  {
    return result;
  }
  *a4 = result;
  *a5 = v11;
  uint64_t result = *a4;
  uint64_t v15 = *a3;
  unint64_t v16 = *(void *)(*a4 + 24);
  unint64_t v17 = *(void *)(*a3 + 24);
  if (v16 == v17)
  {
    int v18 = *(unsigned __int16 *)(v15 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v18) & 0x200) != 0)
    {
      if ((v18 & 0x200) == 0) {
        return result;
      }
    }
    else
    {
      unsigned int v25 = *(unsigned __int8 *)(result + 37);
      unsigned int v26 = *(unsigned __int8 *)(v15 + 37);
      if (v25 == v26)
      {
        uint64_t result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v15);
        if (!result) {
          return result;
        }
        uint64_t v15 = *a3;
        uint64_t result = *a4;
      }
      else if (v25 >= v26)
      {
        return result;
      }
    }
  }
  else if (v16 <= v17)
  {
    return result;
  }
  *a3 = result;
  *a4 = v15;
  uint64_t result = *a3;
  uint64_t v21 = *a2;
  unint64_t v22 = *(void *)(*a3 + 24);
  unint64_t v23 = *(void *)(*a2 + 24);
  if (v22 == v23)
  {
    int v24 = *(unsigned __int16 *)(v21 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v24) & 0x200) != 0)
    {
      if ((v24 & 0x200) == 0) {
        return result;
      }
    }
    else
    {
      unsigned int v31 = *(unsigned __int8 *)(result + 37);
      unsigned int v32 = *(unsigned __int8 *)(v21 + 37);
      if (v31 == v32)
      {
        uint64_t result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v21);
        if (!result) {
          return result;
        }
        uint64_t v21 = *a2;
        uint64_t result = *a3;
      }
      else if (v31 >= v32)
      {
        return result;
      }
    }
  }
  else if (v22 <= v23)
  {
    return result;
  }
  *a2 = result;
  *a3 = v21;
  uint64_t result = *a2;
  uint64_t v27 = *a1;
  unint64_t v28 = *(void *)(*a2 + 24);
  unint64_t v29 = *(void *)(*a1 + 24);
  if (v28 == v29)
  {
    int v30 = *(unsigned __int16 *)(v27 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v30) & 0x200) != 0)
    {
      if ((v30 & 0x200) == 0) {
        return result;
      }
    }
    else
    {
      unsigned int v33 = *(unsigned __int8 *)(result + 37);
      unsigned int v34 = *(unsigned __int8 *)(v27 + 37);
      if (v33 == v34)
      {
        uint64_t result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v27);
        if (!result) {
          return result;
        }
        uint64_t v27 = *a1;
        uint64_t result = *a2;
      }
      else if (v33 >= v34)
      {
        return result;
      }
    }
LABEL_41:
    *a1 = result;
    *a2 = v27;
    return result;
  }
  if (v28 > v29) {
    goto LABEL_41;
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  unint64_t v8 = *(void *)(v6 + 24);
  unint64_t v9 = *(void *)(*a1 + 24);
  if (v8 != v9)
  {
    if (v8 <= v9) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t result = *a3;
    unint64_t v14 = *(void *)(*a3 + 24);
    if (v14 == v8)
    {
      int v15 = *(unsigned __int16 *)(v6 + 34);
      if (((*(unsigned __int16 *)(result + 34) ^ v15) & 0x200) != 0)
      {
        if ((v15 & 0x200) == 0) {
          goto LABEL_41;
        }
      }
      else
      {
        unsigned int v26 = *(unsigned __int8 *)(result + 37);
        unsigned int v27 = *(unsigned __int8 *)(v6 + 37);
        if (v26 == v27)
        {
          if (!std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v6))
          {
            uint64_t v6 = *a2;
            goto LABEL_41;
          }
          uint64_t result = *a3;
        }
        else if (v26 >= v27)
        {
LABEL_41:
          uint64_t v30 = *a1;
          *a1 = v6;
          *a2 = v30;
          uint64_t result = *a3;
          unint64_t v31 = *(void *)(*a3 + 24);
          unint64_t v32 = *(void *)(v30 + 24);
          if (v31 == v32)
          {
            int v33 = *(unsigned __int16 *)(v30 + 34);
            if (((*(unsigned __int16 *)(result + 34) ^ v33) & 0x200) != 0)
            {
              if ((v33 & 0x200) == 0) {
                return result;
              }
            }
            else
            {
              unsigned int v34 = *(unsigned __int8 *)(result + 37);
              unsigned int v35 = *(unsigned __int8 *)(v30 + 37);
              if (v34 == v35)
              {
                uint64_t result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v30);
                if (!result) {
                  return result;
                }
                uint64_t v30 = *a2;
                uint64_t result = *a3;
              }
              else if (v34 >= v35)
              {
                return result;
              }
            }
          }
          else if (v31 <= v32)
          {
            return result;
          }
          *a2 = result;
          *a3 = v30;
          return result;
        }
      }
    }
    else if (v14 <= v8)
    {
      goto LABEL_41;
    }
    uint64_t v23 = *a1;
    *a1 = result;
    *a3 = v23;
    return result;
  }
  int v10 = *(unsigned __int16 *)(v7 + 34);
  if (((*(unsigned __int16 *)(v6 + 34) ^ v10) & 0x200) == 0)
  {
    unsigned int v16 = *(unsigned __int8 *)(v6 + 37);
    unsigned int v17 = *(unsigned __int8 *)(v7 + 37);
    if (v16 == v17)
    {
      char v18 = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v6, v7);
      uint64_t v6 = *a2;
      unint64_t v8 = *(void *)(*a2 + 24);
      if ((v18 & 1) == 0) {
        goto LABEL_4;
      }
    }
    else if (v16 >= v17)
    {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if ((v10 & 0x200) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t result = *a3;
  unint64_t v12 = *(void *)(*a3 + 24);
  if (v12 == v8)
  {
    int v13 = *(unsigned __int16 *)(v6 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v13) & 0x200) != 0)
    {
      if ((v13 & 0x200) == 0) {
        return result;
      }
    }
    else
    {
      unsigned int v24 = *(unsigned __int8 *)(result + 37);
      unsigned int v25 = *(unsigned __int8 *)(v6 + 37);
      if (v24 == v25)
      {
        uint64_t result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v6);
        if (!result) {
          return result;
        }
        uint64_t v6 = *a2;
        uint64_t result = *a3;
      }
      else if (v24 >= v25)
      {
        return result;
      }
    }
  }
  else if (v12 <= v8)
  {
    return result;
  }
  *a2 = result;
  *a3 = v6;
  uint64_t result = *a2;
  uint64_t v19 = *a1;
  unint64_t v20 = *(void *)(*a2 + 24);
  unint64_t v21 = *(void *)(*a1 + 24);
  if (v20 == v21)
  {
    int v22 = *(unsigned __int16 *)(v19 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v22) & 0x200) != 0)
    {
      if ((v22 & 0x200) == 0) {
        return result;
      }
    }
    else
    {
      unsigned int v28 = *(unsigned __int8 *)(result + 37);
      unsigned int v29 = *(unsigned __int8 *)(v19 + 37);
      if (v28 == v29)
      {
        uint64_t result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v19);
        if (!result) {
          return result;
        }
        uint64_t v19 = *a1;
        uint64_t result = *a2;
      }
      else if (v28 >= v29)
      {
        return result;
      }
    }
LABEL_51:
    *a1 = result;
    *a2 = v19;
    return result;
  }
  if (v20 > v21) {
    goto LABEL_51;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      unint64_t v8 = *(void *)(v6 + 24);
      unint64_t v9 = *(void *)(*a1 + 24);
      if (v8 == v9)
      {
        int v10 = *(unsigned __int16 *)(v7 + 34);
        if (((*(unsigned __int16 *)(v6 + 34) ^ v10) & 0x200) != 0)
        {
          if ((v10 & 0x200) == 0) {
            return 1;
          }
        }
        else
        {
          unsigned int v31 = *(unsigned __int8 *)(v6 + 37);
          unsigned int v32 = *(unsigned __int8 *)(v7 + 37);
          if (v31 == v32)
          {
            if (!std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)v6, v7)) {
              return 1;
            }
            uint64_t v7 = *a1;
            uint64_t v6 = *(a2 - 1);
          }
          else if (v31 >= v32)
          {
            return 1;
          }
        }
      }
      else if (v8 <= v9)
      {
        return 1;
      }
      *a1 = v6;
      *(a2 - 1) = v7;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(a1, a1 + 1, a1 + 2);
      unint64_t v12 = (long long **)(a1 + 3);
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  do
  {
    int v15 = *v12;
    uint64_t v16 = *v11;
    unint64_t v17 = *((void *)*v12 + 3);
    unint64_t v18 = *(void *)(*v11 + 24);
    if (v17 == v18)
    {
      int v19 = *(unsigned __int16 *)(v16 + 34);
      if (((*((unsigned __int16 *)v15 + 17) ^ v19) & 0x200) != 0)
      {
        if ((v19 & 0x200) == 0) {
          goto LABEL_32;
        }
      }
      else
      {
        unsigned int v29 = *((unsigned __int8 *)v15 + 37);
        unsigned int v30 = *(unsigned __int8 *)(v16 + 37);
        if (v29 == v30)
        {
          if (!std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>(*v12, v16)) {
            goto LABEL_32;
          }
          int v15 = *v12;
          uint64_t v16 = *v11;
        }
        else if (v29 >= v30)
        {
          goto LABEL_32;
        }
      }
    }
    else if (v17 <= v18)
    {
      goto LABEL_32;
    }
    *unint64_t v12 = (long long *)v16;
    unint64_t v20 = a1;
    if (v11 == a1) {
      goto LABEL_31;
    }
    uint64_t v21 = v13;
    while (1)
    {
      int v22 = (char *)a1 + v21;
      uint64_t v23 = *(uint64_t *)((char *)a1 + v21 + 8);
      unint64_t v24 = *((void *)v15 + 3);
      unint64_t v25 = *(void *)(v23 + 24);
      if (v24 != v25)
      {
        if (v24 <= v25) {
          goto LABEL_27;
        }
        goto LABEL_21;
      }
      int v26 = *(unsigned __int16 *)(v23 + 34);
      if (((*((unsigned __int16 *)v15 + 17) ^ v26) & 0x200) != 0)
      {
        if ((v26 & 0x200) == 0) {
          goto LABEL_27;
        }
        goto LABEL_21;
      }
      unsigned int v27 = *((unsigned __int8 *)v15 + 37);
      unsigned int v28 = *(unsigned __int8 *)(v23 + 37);
      if (v27 == v28) {
        break;
      }
      if (v27 >= v28)
      {
LABEL_27:
        unint64_t v20 = v11;
        goto LABEL_31;
      }
LABEL_21:
      --v11;
      *((void *)v22 + 2) = v23;
      v21 -= 8;
      if (v21 == -16)
      {
        unint64_t v20 = a1;
        goto LABEL_31;
      }
    }
    if (std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>(v15, v23))
    {
      uint64_t v23 = *((void *)v22 + 1);
      goto LABEL_21;
    }
    unint64_t v20 = (uint64_t *)((char *)a1 + v21 + 16);
LABEL_31:
    *unint64_t v20 = v15;
    if (++v14 == 8) {
      return v12 + 1 == (long long **)a2;
    }
LABEL_32:
    uint64_t v11 = (uint64_t *)v12;
    v13 += 8;
    ++v12;
  }
  while (v12 != (long long **)a2);
  return 1;
}

uint64_t std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>(long long *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 16)) {
    return 0;
  }
  if (!*((unsigned char *)a1 + 16)) {
    return 1;
  }
  uint64_t v3 = *(const void **)a2;
  size_t v2 = *(void *)(a2 + 8);
  long long v5 = *a1;
  return llvm::StringRef::compare((uint64_t)&v5, v3, v2) >> 31;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(a1, a2, a3);
  uint64_t result = *a4;
  uint64_t v9 = *a3;
  unint64_t v10 = *(void *)(*a4 + 24);
  unint64_t v11 = *(void *)(*a3 + 24);
  if (v10 == v11)
  {
    int v12 = *(unsigned __int16 *)(v9 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v12) & 0x200) != 0)
    {
      if ((v12 & 0x200) == 0) {
        return result;
      }
    }
    else
    {
      unsigned int v17 = *(unsigned __int8 *)(result + 37);
      unsigned int v18 = *(unsigned __int8 *)(v9 + 37);
      if (v17 == v18)
      {
        uint64_t result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v9);
        if (!result) {
          return result;
        }
        uint64_t v9 = *a3;
        uint64_t result = *a4;
      }
      else if (v17 >= v18)
      {
        return result;
      }
    }
  }
  else if (v10 <= v11)
  {
    return result;
  }
  *a3 = result;
  *a4 = v9;
  uint64_t result = *a3;
  uint64_t v13 = *a2;
  unint64_t v14 = *(void *)(*a3 + 24);
  unint64_t v15 = *(void *)(*a2 + 24);
  if (v14 == v15)
  {
    int v16 = *(unsigned __int16 *)(v13 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v16) & 0x200) != 0)
    {
      if ((v16 & 0x200) == 0) {
        return result;
      }
    }
    else
    {
      unsigned int v23 = *(unsigned __int8 *)(result + 37);
      unsigned int v24 = *(unsigned __int8 *)(v13 + 37);
      if (v23 == v24)
      {
        uint64_t result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v13);
        if (!result) {
          return result;
        }
        uint64_t v13 = *a2;
        uint64_t result = *a3;
      }
      else if (v23 >= v24)
      {
        return result;
      }
    }
  }
  else if (v14 <= v15)
  {
    return result;
  }
  *a2 = result;
  *a3 = v13;
  uint64_t result = *a2;
  uint64_t v19 = *a1;
  unint64_t v20 = *(void *)(*a2 + 24);
  unint64_t v21 = *(void *)(*a1 + 24);
  if (v20 == v21)
  {
    int v22 = *(unsigned __int16 *)(v19 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v22) & 0x200) != 0)
    {
      if ((v22 & 0x200) == 0) {
        return result;
      }
    }
    else
    {
      unsigned int v25 = *(unsigned __int8 *)(result + 37);
      unsigned int v26 = *(unsigned __int8 *)(v19 + 37);
      if (v25 == v26)
      {
        uint64_t result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((long long *)result, v19);
        if (!result) {
          return result;
        }
        uint64_t v19 = *a1;
        uint64_t result = *a2;
      }
      else if (v25 >= v26)
      {
        return result;
      }
    }
LABEL_31:
    *a1 = result;
    *a2 = v19;
    return result;
  }
  if (v20 > v21) {
    goto LABEL_31;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v8 = (uint64_t *)result;
LABEL_2:
  uint64_t j = a2;
  unint64_t v10 = a2 - 1;
  uint64_t i = v8;
  while (1)
  {
    unint64_t v8 = i;
    uint64_t v12 = (char *)j - (char *)i;
    uint64_t v13 = j - i;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v147 = *(a2 - 1);
          uint64_t v148 = *v8;
          unint64_t v149 = *(void *)(v147 + 24);
          unint64_t v150 = *(void *)(*v8 + 24);
          BOOL v151 = v149 > v150;
          if (v149 == v150
            && (unsigned int v152 = *(unsigned __int8 *)(v147 + 36),
                unsigned int v153 = *(unsigned __int8 *)(v148 + 36),
                BOOL v151 = v152 > v153,
                v152 == v153)
            && (unsigned int v154 = *(unsigned __int8 *)(v147 + 37),
                unsigned int v155 = *(unsigned __int8 *)(v148 + 37),
                BOOL v151 = v154 > v155,
                v154 == v155))
          {
            if (!*(unsigned char *)(v148 + 16)) {
              return result;
            }
            if (*(unsigned char *)(v147 + 16))
            {
              char v156 = *(const void **)v148;
              size_t v157 = *(void *)(v148 + 8);
              long long v310 = *(_OWORD *)v147;
              uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v156, v157);
              if ((int)result < 1) {
                return result;
              }
              uint64_t v148 = *v8;
              uint64_t v147 = *(a2 - 1);
            }
          }
          else if (!v151)
          {
            return result;
          }
          *unint64_t v8 = v147;
          *(a2 - 1) = v148;
          break;
        case 3:
          return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)v8, v8 + 1, v10);
        case 4:
          return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)v8, v8 + 1, v8 + 2, v10);
        case 5:
          return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,0>((uint64_t)v8, v8 + 1, v8 + 2, v8 + 3, v10);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v8 == j) {
        return result;
      }
      int64_t v188 = (unint64_t)(v13 - 2) >> 1;
      int64_t v189 = v188;
      while (1)
      {
        int64_t v190 = v189;
        if (v188 < v189) {
          goto LABEL_247;
        }
        uint64_t v191 = (2 * v189) | 1;
        unsigned int v192 = &v8[v191];
        if (2 * v189 + 2 >= v13) {
          goto LABEL_214;
        }
        uint64_t v193 = *v192;
        uint64_t v194 = v192[1];
        unint64_t v195 = *(void *)(*v192 + 24);
        unint64_t v196 = *(void *)(v194 + 24);
        BOOL v197 = v195 > v196;
        if (v195 == v196)
        {
          unsigned int v198 = *(unsigned __int8 *)(v193 + 36);
          unsigned int v199 = *(unsigned __int8 *)(v194 + 36);
          BOOL v197 = v198 > v199;
          if (v198 == v199)
          {
            unsigned int v200 = *(unsigned __int8 *)(v193 + 37);
            unsigned int v201 = *(unsigned __int8 *)(v194 + 37);
            BOOL v197 = v200 > v201;
            if (v200 == v201) {
              break;
            }
          }
        }
        if (v197) {
          goto LABEL_213;
        }
LABEL_214:
        uint64_t v204 = *v192;
        uint64_t v205 = v8[v190];
        unint64_t v206 = *(void *)(*v192 + 24);
        unint64_t v207 = *(void *)(v205 + 24);
        BOOL v208 = v206 > v207;
        if (v206 == v207
          && (unsigned int v209 = *(unsigned __int8 *)(v204 + 36),
              unsigned int v210 = *(unsigned __int8 *)(v205 + 36),
              BOOL v208 = v209 > v210,
              v209 == v210)
          && (unsigned int v211 = *(unsigned __int8 *)(v204 + 37),
              unsigned int v212 = *(unsigned __int8 *)(v205 + 37),
              BOOL v208 = v211 > v212,
              v211 == v212))
        {
          if (*(unsigned char *)(v205 + 16))
          {
            if (!*(unsigned char *)(v204 + 16)) {
              goto LABEL_247;
            }
            v213 = *(const void **)v205;
            size_t v214 = *(void *)(v205 + 8);
            long long v310 = *(_OWORD *)v204;
            uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v213, v214);
            int64_t v188 = (unint64_t)(v13 - 2) >> 1;
            if ((int)result > 0) {
              goto LABEL_247;
            }
            uint64_t v205 = v8[v190];
            uint64_t v204 = *v192;
          }
        }
        else if (v208)
        {
          goto LABEL_247;
        }
        v8[v190] = v204;
        while (1)
        {
          if (v188 < v191) {
            goto LABEL_246;
          }
          v215 = v192;
          uint64_t v216 = 2 * v191;
          uint64_t v191 = (2 * v191) | 1;
          unsigned int v192 = &v8[v191];
          uint64_t v217 = v216 + 2;
          if (v216 + 2 < v13)
          {
            uint64_t v218 = *v192;
            uint64_t v219 = v192[1];
            unint64_t v220 = *(void *)(*v192 + 24);
            unint64_t v221 = *(void *)(v219 + 24);
            BOOL v222 = v220 > v221;
            if (v220 != v221
              || (unsigned int v223 = *(unsigned __int8 *)(v218 + 36),
                  unsigned int v224 = *(unsigned __int8 *)(v219 + 36),
                  BOOL v222 = v223 > v224,
                  v223 != v224)
              || (unsigned int v225 = *(unsigned __int8 *)(v218 + 37),
                  unsigned int v226 = *(unsigned __int8 *)(v219 + 37),
                  BOOL v222 = v225 > v226,
                  v225 != v226))
            {
              if (!v222) {
                goto LABEL_235;
              }
LABEL_234:
              ++v192;
              uint64_t v191 = v217;
              goto LABEL_235;
            }
            if (*(unsigned char *)(v219 + 16))
            {
              if (!*(unsigned char *)(v218 + 16)) {
                goto LABEL_234;
              }
              v227 = *(const void **)v219;
              size_t v228 = *(void *)(v219 + 8);
              long long v310 = *(_OWORD *)v218;
              uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v227, v228);
              int64_t v188 = (unint64_t)(v13 - 2) >> 1;
              if ((int)result >= 1) {
                goto LABEL_234;
              }
            }
          }
LABEL_235:
          uint64_t v229 = *v192;
          unint64_t v230 = *(void *)(*v192 + 24);
          unint64_t v231 = *(void *)(v205 + 24);
          BOOL v232 = v230 > v231;
          if (v230 != v231) {
            break;
          }
          unsigned int v233 = *(unsigned __int8 *)(v229 + 36);
          unsigned int v234 = *(unsigned __int8 *)(v205 + 36);
          BOOL v232 = v233 > v234;
          if (v233 != v234) {
            break;
          }
          unsigned int v235 = *(unsigned __int8 *)(v229 + 37);
          unsigned int v236 = *(unsigned __int8 *)(v205 + 37);
          BOOL v232 = v235 > v236;
          if (v235 != v236) {
            break;
          }
          if (*(unsigned char *)(v205 + 16))
          {
            if (!*(unsigned char *)(v229 + 16)) {
              goto LABEL_245;
            }
            v237 = *(const void **)v205;
            size_t v238 = *(void *)(v205 + 8);
            long long v310 = *(_OWORD *)v229;
            uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v237, v238);
            if ((int)result > 0)
            {
              unsigned int v192 = v215;
              int64_t v188 = (unint64_t)(v13 - 2) >> 1;
              goto LABEL_246;
            }
            uint64_t v229 = *v192;
            int64_t v188 = (unint64_t)(v13 - 2) >> 1;
          }
LABEL_244:
          uint64_t *v215 = v229;
        }
        if (!v232) {
          goto LABEL_244;
        }
LABEL_245:
        unsigned int v192 = v215;
LABEL_246:
        *unsigned int v192 = v205;
LABEL_247:
        int64_t v189 = v190 - 1;
        if (!v190)
        {
          uint64_t v239 = (unint64_t)v12 >> 3;
          while (1)
          {
            uint64_t v240 = 0;
            uint64_t v241 = *v8;
            v242 = v8;
            do
            {
              int v243 = v242;
              v242 += v240 + 1;
              uint64_t v244 = 2 * v240;
              uint64_t v240 = (2 * v240) | 1;
              uint64_t v245 = v244 + 2;
              if (v244 + 2 >= v239) {
                goto LABEL_264;
              }
              uint64_t v246 = *v242;
              uint64_t v247 = v242[1];
              unint64_t v248 = *(void *)(*v242 + 24);
              unint64_t v249 = *(void *)(v247 + 24);
              BOOL v250 = v248 > v249;
              if (v248 == v249
                && (unsigned int v251 = *(unsigned __int8 *)(v246 + 36),
                    unsigned int v252 = *(unsigned __int8 *)(v247 + 36),
                    BOOL v250 = v251 > v252,
                    v251 == v252)
                && (unsigned int v253 = *(unsigned __int8 *)(v246 + 37),
                    unsigned int v254 = *(unsigned __int8 *)(v247 + 37),
                    BOOL v250 = v253 > v254,
                    v253 == v254))
              {
                if (*(unsigned char *)(v247 + 16))
                {
                  if (!*(unsigned char *)(v246 + 16)
                    || (v255 = *(const void **)v247,
                        size_t v256 = *(void *)(v247 + 8),
                        long long v310 = *(_OWORD *)v246,
                        uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v255, v256),
                        (int)result >= 1))
                  {
LABEL_263:
                    ++v242;
                    uint64_t v240 = v245;
                  }
                }
              }
              else if (v250)
              {
                goto LABEL_263;
              }
LABEL_264:
              *int v243 = *v242;
            }
            while (v240 <= (uint64_t)((unint64_t)(v239 - 2) >> 1));
            v257 = a2 - 1;
            BOOL v5 = v242 == --a2;
            if (v5)
            {
              uint64_t *v242 = v241;
              goto LABEL_291;
            }
            uint64_t *v242 = *v257;
            uint64_t *v257 = v241;
            uint64_t v258 = (char *)v242 - (char *)v8 + 8;
            if (v258 < 9) {
              goto LABEL_291;
            }
            unint64_t v259 = ((unint64_t)v258 >> 3) - 2;
            unint64_t v260 = v259 >> 1;
            v261 = &v8[v259 >> 1];
            uint64_t v262 = *v261;
            uint64_t v263 = *v242;
            unint64_t v264 = *(void *)(*v261 + 24);
            unint64_t v265 = *(void *)(*v242 + 24);
            BOOL v266 = v264 > v265;
            if (v264 == v265
              && (unsigned int v267 = *(unsigned __int8 *)(v262 + 36),
                  unsigned int v268 = *(unsigned __int8 *)(v263 + 36),
                  BOOL v266 = v267 > v268,
                  v267 == v268)
              && (unsigned int v269 = *(unsigned __int8 *)(v262 + 37),
                  unsigned int v270 = *(unsigned __int8 *)(v263 + 37),
                  BOOL v266 = v269 > v270,
                  v269 == v270))
            {
              if (!*(unsigned char *)(v263 + 16)) {
                goto LABEL_291;
              }
              if (*(unsigned char *)(v262 + 16))
              {
                v271 = *(const void **)v263;
                size_t v272 = *(void *)(v263 + 8);
                long long v310 = *(_OWORD *)v262;
                uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v271, v272);
                if ((int)result < 1) {
                  goto LABEL_291;
                }
                uint64_t v263 = *v242;
                uint64_t v262 = *v261;
              }
            }
            else if (!v266)
            {
              goto LABEL_291;
            }
            uint64_t *v242 = v262;
            if (v259 < 2) {
              goto LABEL_290;
            }
            while (2)
            {
              v273 = v261;
              unint64_t v274 = v260 - 1;
              unint64_t v260 = (v260 - 1) >> 1;
              v261 = &v8[v260];
              uint64_t v275 = *v261;
              unint64_t v276 = *(void *)(*v261 + 24);
              unint64_t v277 = *(void *)(v263 + 24);
              BOOL v278 = v276 > v277;
              if (v276 == v277)
              {
                unsigned int v279 = *(unsigned __int8 *)(v275 + 36);
                unsigned int v280 = *(unsigned __int8 *)(v263 + 36);
                BOOL v278 = v279 > v280;
                if (v279 == v280)
                {
                  unsigned int v281 = *(unsigned __int8 *)(v275 + 37);
                  unsigned int v282 = *(unsigned __int8 *)(v263 + 37);
                  BOOL v278 = v281 > v282;
                  if (v281 == v282)
                  {
                    if (!*(unsigned char *)(v263 + 16)) {
                      break;
                    }
                    if (*(unsigned char *)(v275 + 16))
                    {
                      v283 = *(const void **)v263;
                      size_t v284 = *(void *)(v263 + 8);
                      long long v310 = *(_OWORD *)v275;
                      uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v283, v284);
                      if ((int)result < 1) {
                        break;
                      }
                      uint64_t v275 = *v261;
                    }
                    goto LABEL_287;
                  }
                }
              }
              if (v278)
              {
LABEL_287:
                uint64_t *v273 = v275;
                if (v274 < 2) {
                  goto LABEL_290;
                }
                continue;
              }
              break;
            }
            v261 = v273;
LABEL_290:
            uint64_t *v261 = v263;
LABEL_291:
            BOOL v23 = v239-- <= 2;
            if (v23) {
              return result;
            }
          }
        }
      }
      if (!*(unsigned char *)(v194 + 16)) {
        goto LABEL_214;
      }
      if (*(unsigned char *)(v193 + 16))
      {
        v202 = *(const void **)v194;
        size_t v203 = *(void *)(v194 + 8);
        long long v310 = *(_OWORD *)v193;
        uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v202, v203);
        int64_t v188 = (unint64_t)(v13 - 2) >> 1;
        if ((int)result < 1) {
          goto LABEL_214;
        }
      }
LABEL_213:
      ++v192;
      uint64_t v191 = 2 * v190 + 2;
      goto LABEL_214;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    unint64_t v15 = &v8[(unint64_t)v13 >> 1];
    if ((unint64_t)v12 < 0x401)
    {
      uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)v15, v8, v10);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)v8, v15, v10);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)(v8 + 1), v15 - 1, a2 - 2);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)(v8 + 2), &v8[v14 + 1], a2 - 3);
      uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)(v15 - 1), v15, &v8[v14 + 1]);
      uint64_t v16 = *v8;
      *unint64_t v8 = *v15;
      *unint64_t v15 = v16;
    }
    --a3;
    uint64_t v17 = *v8;
    if (a4) {
      goto LABEL_22;
    }
    unsigned int v18 = (long long *)*(v8 - 1);
    unint64_t v19 = *((void *)v18 + 3);
    unint64_t v20 = *(void *)(v17 + 24);
    if (v19 == v20)
    {
      unsigned int v21 = *((unsigned __int8 *)v18 + 36);
      unsigned int v22 = *(unsigned __int8 *)(v17 + 36);
      BOOL v23 = v21 > v22;
      if (v21 == v22)
      {
        unsigned int v24 = *((unsigned __int8 *)v18 + 37);
        unsigned int v25 = *(unsigned __int8 *)(v17 + 37);
        BOOL v23 = v24 > v25;
        if (v24 == v25)
        {
          if (!*(unsigned char *)(v17 + 16)) {
            goto LABEL_88;
          }
          if (*((unsigned char *)v18 + 16))
          {
            unsigned int v26 = *(const void **)v17;
            size_t v27 = *(void *)(v17 + 8);
            long long v310 = *v18;
            uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v26, v27);
            uint64_t v17 = *v8;
            if ((int)result <= 0)
            {
              unint64_t v19 = *(void *)(v17 + 24);
              goto LABEL_88;
            }
          }
          goto LABEL_22;
        }
      }
      if (v23) {
        goto LABEL_22;
      }
LABEL_88:
      uint64_t v85 = *v10;
      unint64_t v86 = *(void *)(*v10 + 24);
      BOOL v87 = v19 > v86;
      if (v19 == v86
        && (v88 = *(unsigned __int8 *)(v17 + 36), unsigned int v89 = *(unsigned __int8 *)(v85 + 36), v87 = v88 > v89, v88 == v89)
        && (v90 = *(unsigned __int8 *)(v17 + 37), v91 = *(unsigned __int8 *)(v85 + 37), BOOL v87 = v90 > v91, v90 == v91))
      {
        if (*(unsigned char *)(v85 + 16))
        {
          if (!*(unsigned char *)(v17 + 16)
            || (uint64_t v92 = *(const void **)v85,
                size_t v93 = *(void *)(v85 + 8),
                long long v310 = *(_OWORD *)v17,
                uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v92, v93),
                (int)result >= 1))
          {
LABEL_94:
            for (uint64_t i = v8 + 1; ; ++i)
            {
              uint64_t v94 = *i;
              unint64_t v95 = *(void *)(v17 + 24);
              unint64_t v96 = *(void *)(*i + 24);
              BOOL v97 = v95 > v96;
              if (v95 == v96
                && (unsigned int v98 = *(unsigned __int8 *)(v17 + 36),
                    unsigned int v99 = *(unsigned __int8 *)(v94 + 36),
                    BOOL v97 = v98 > v99,
                    v98 == v99)
                && (unsigned int v100 = *(unsigned __int8 *)(v17 + 37),
                    unsigned int v101 = *(unsigned __int8 *)(v94 + 37),
                    BOOL v97 = v100 > v101,
                    v100 == v101))
              {
                if (*(unsigned char *)(v94 + 16))
                {
                  if (!*(unsigned char *)(v17 + 16)) {
                    goto LABEL_116;
                  }
                  unint64_t v102 = *(const void **)v94;
                  size_t v103 = *(void *)(v94 + 8);
                  long long v310 = *(_OWORD *)v17;
                  uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v102, v103);
                  if ((int)result > 0) {
                    goto LABEL_116;
                  }
                }
              }
              else if (v97)
              {
                goto LABEL_116;
              }
            }
          }
        }
      }
      else if (v87)
      {
        goto LABEL_94;
      }
      for (uint64_t i = v8 + 1; i < j; ++i)
      {
        uint64_t v104 = *i;
        unint64_t v105 = *(void *)(v17 + 24);
        unint64_t v106 = *(void *)(*i + 24);
        BOOL v107 = v105 > v106;
        if (v105 == v106
          && (unsigned int v108 = *(unsigned __int8 *)(v17 + 36),
              unsigned int v109 = *(unsigned __int8 *)(v104 + 36),
              BOOL v107 = v108 > v109,
              v108 == v109)
          && (unsigned int v110 = *(unsigned __int8 *)(v17 + 37),
              unsigned int v111 = *(unsigned __int8 *)(v104 + 37),
              BOOL v107 = v110 > v111,
              v110 == v111))
        {
          if (*(unsigned char *)(v104 + 16))
          {
            if (!*(unsigned char *)(v17 + 16)) {
              break;
            }
            uint64_t v112 = *(const void **)v104;
            size_t v113 = *(void *)(v104 + 8);
            long long v310 = *(_OWORD *)v17;
            uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v112, v113);
            if ((int)result >= 1) {
              break;
            }
          }
        }
        else if (v107)
        {
          break;
        }
      }
LABEL_116:
      if (i >= j) {
        goto LABEL_146;
      }
      for (uint64_t j = a2 - 1; ; --j)
      {
        uint64_t v114 = *j;
        unint64_t v115 = *(void *)(v17 + 24);
        unint64_t v116 = *(void *)(*j + 24);
        BOOL v117 = v115 > v116;
        if (v115 == v116)
        {
          unsigned int v118 = *(unsigned __int8 *)(v17 + 36);
          unsigned int v119 = *(unsigned __int8 *)(v114 + 36);
          BOOL v117 = v118 > v119;
          if (v118 == v119)
          {
            unsigned int v120 = *(unsigned __int8 *)(v17 + 37);
            unsigned int v121 = *(unsigned __int8 *)(v114 + 37);
            BOOL v117 = v120 > v121;
            if (v120 == v121) {
              break;
            }
          }
        }
        if (!v117) {
          goto LABEL_146;
        }
LABEL_127:
        ;
      }
      if (*(unsigned char *)(v114 + 16))
      {
        if (!*(unsigned char *)(v17 + 16)) {
          goto LABEL_127;
        }
        unint64_t v122 = *(const void **)v114;
        size_t v123 = *(void *)(v114 + 8);
        long long v310 = *(_OWORD *)v17;
        uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v122, v123);
        if ((int)result >= 1) {
          goto LABEL_127;
        }
      }
LABEL_146:
      while (i < j)
      {
        uint64_t v124 = *i;
        *i++ = *j;
        uint64_t *j = v124;
        while (1)
        {
          uint64_t v125 = *i;
          unint64_t v126 = *(void *)(v17 + 24);
          unint64_t v127 = *(void *)(*i + 24);
          BOOL v128 = v126 > v127;
          if (v126 == v127)
          {
            unsigned int v129 = *(unsigned __int8 *)(v17 + 36);
            unsigned int v130 = *(unsigned __int8 *)(v125 + 36);
            BOOL v128 = v129 > v130;
            if (v129 == v130)
            {
              unsigned int v131 = *(unsigned __int8 *)(v17 + 37);
              unsigned int v132 = *(unsigned __int8 *)(v125 + 37);
              BOOL v128 = v131 > v132;
              if (v131 == v132) {
                break;
              }
            }
          }
          if (v128) {
            goto LABEL_140;
          }
LABEL_137:
          ++i;
        }
        if (!*(unsigned char *)(v125 + 16)) {
          goto LABEL_137;
        }
        if (*(unsigned char *)(v17 + 16))
        {
          uint64_t v133 = *(const void **)v125;
          size_t v134 = *(void *)(v125 + 8);
          long long v310 = *(_OWORD *)v17;
          uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v133, v134);
          if ((int)result <= 0) {
            goto LABEL_137;
          }
        }
        while (1)
        {
LABEL_140:
          while (1)
          {
            uint64_t v136 = *--j;
            uint64_t v135 = v136;
            unint64_t v137 = *(void *)(v17 + 24);
            unint64_t v138 = *(void *)(v136 + 24);
            BOOL v139 = v137 > v138;
            if (v137 == v138)
            {
              unsigned int v140 = *(unsigned __int8 *)(v17 + 36);
              unsigned int v141 = *(unsigned __int8 *)(v135 + 36);
              BOOL v139 = v140 > v141;
              if (v140 == v141)
              {
                unsigned int v142 = *(unsigned __int8 *)(v17 + 37);
                unsigned int v143 = *(unsigned __int8 *)(v135 + 37);
                BOOL v139 = v142 > v143;
                if (v142 == v143) {
                  break;
                }
              }
            }
            if (!v139) {
              goto LABEL_146;
            }
          }
          if (!*(unsigned char *)(v135 + 16)) {
            break;
          }
          if (*(unsigned char *)(v17 + 16))
          {
            uint64_t v144 = *(const void **)v135;
            size_t v145 = *(void *)(v135 + 8);
            long long v310 = *(_OWORD *)v17;
            uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v144, v145);
            if ((int)result < 1) {
              break;
            }
          }
        }
      }
      unint64_t v146 = i - 1;
      BOOL v4 = i - 1 >= v8;
      BOOL v5 = i - 1 == v8;
      if (i - 1 != v8) {
        *unint64_t v8 = *v146;
      }
      a4 = 0;
      *unint64_t v146 = v17;
      uint64_t j = a2;
    }
    else
    {
      if (v19 <= v20)
      {
        unint64_t v19 = *(void *)(v17 + 24);
        goto LABEL_88;
      }
LABEL_22:
      for (uint64_t k = 0; ; ++k)
      {
        uint64_t v29 = v8[k + 1];
        unint64_t v30 = *(void *)(v29 + 24);
        unint64_t v31 = *(void *)(v17 + 24);
        BOOL v32 = v30 > v31;
        if (v30 == v31)
        {
          unsigned int v33 = *(unsigned __int8 *)(v29 + 36);
          unsigned int v34 = *(unsigned __int8 *)(v17 + 36);
          BOOL v32 = v33 > v34;
          if (v33 == v34)
          {
            unsigned int v35 = *(unsigned __int8 *)(v29 + 37);
            unsigned int v36 = *(unsigned __int8 *)(v17 + 37);
            BOOL v32 = v35 > v36;
            if (v35 == v36) {
              break;
            }
          }
        }
        if (!v32) {
          goto LABEL_33;
        }
LABEL_32:
        ;
      }
      if (*(unsigned char *)(v17 + 16))
      {
        if (!*(unsigned char *)(v29 + 16)) {
          goto LABEL_32;
        }
        uint64_t v37 = *(const void **)v17;
        size_t v38 = *(void *)(v17 + 8);
        long long v310 = *(_OWORD *)v29;
        if ((int)llvm::StringRef::compare((uint64_t)&v310, v37, v38) >= 1) {
          goto LABEL_32;
        }
      }
LABEL_33:
      unint64_t v39 = &v8[k];
      unint64_t v40 = (unint64_t)&v8[k + 1];
      m = a2 - 1;
      if (k * 8)
      {
        while (1)
        {
          uint64_t v42 = *m;
          unint64_t v43 = *(void *)(*m + 24);
          unint64_t v44 = *(void *)(v17 + 24);
          BOOL v45 = v43 > v44;
          if (v43 == v44
            && (unsigned int v46 = *(unsigned __int8 *)(v42 + 36), v47 = *(unsigned __int8 *)(v17 + 36), v45 = v46 > v47, v46 == v47)
            && (v48 = *(unsigned __int8 *)(v42 + 37), unsigned int v49 = *(unsigned __int8 *)(v17 + 37), v45 = v48 > v49, v48 == v49))
          {
            if (*(unsigned char *)(v17 + 16))
            {
              if (!*(unsigned char *)(v42 + 16)) {
                goto LABEL_60;
              }
              int v50 = *(const void **)v17;
              size_t v51 = *(void *)(v17 + 8);
              long long v310 = *(_OWORD *)v42;
              if ((int)llvm::StringRef::compare((uint64_t)&v310, v50, v51) > 0) {
                goto LABEL_60;
              }
            }
          }
          else if (v45)
          {
            goto LABEL_60;
          }
          --m;
        }
      }
      m = j;
      if (v40 < (unint64_t)j)
      {
        for (m = a2 - 1; ; --m)
        {
          uint64_t v52 = *m;
          unint64_t v53 = *(void *)(*m + 24);
          unint64_t v54 = *(void *)(v17 + 24);
          if (v53 == v54)
          {
            unsigned int v55 = *(unsigned __int8 *)(v52 + 36);
            unsigned int v56 = *(unsigned __int8 *)(v17 + 36);
            if (v55 == v56 && (unsigned int v55 = *(unsigned __int8 *)(v52 + 37), v56 = *(unsigned __int8 *)(v17 + 37), v55 == v56))
            {
              if (*(unsigned char *)(v17 + 16))
              {
                if (!*(unsigned char *)(v52 + 16)) {
                  break;
                }
                int v57 = *(const void **)v17;
                size_t v58 = *(void *)(v17 + 8);
                long long v310 = *(_OWORD *)v52;
                int v59 = llvm::StringRef::compare((uint64_t)&v310, v57, v58);
                if (v40 >= (unint64_t)m || v59 > 0) {
                  break;
                }
              }
              else if (v40 >= (unint64_t)m)
              {
                break;
              }
            }
            else if (v40 >= (unint64_t)m || v55 > v56)
            {
              break;
            }
          }
          else if (v40 >= (unint64_t)m || v53 > v54)
          {
            break;
          }
        }
      }
LABEL_60:
      if (v40 >= (unint64_t)m) {
        goto LABEL_82;
      }
      unint64_t v60 = (unint64_t)&v8[k + 1];
      unsigned int v61 = m;
      while (2)
      {
        uint64_t v62 = *(void *)v60;
        *(void *)unint64_t v60 = *v61;
        v60 += 8;
        *unsigned int v61 = v62;
        while (2)
        {
          uint64_t v63 = *(long long **)v60;
          unint64_t v64 = *(void *)(*(void *)v60 + 24);
          unint64_t v65 = *(void *)(v17 + 24);
          BOOL v66 = v64 > v65;
          if (v64 != v65
            || (unsigned int v67 = *((unsigned __int8 *)v63 + 36), v68 = *(unsigned __int8 *)(v17 + 36), v66 = v67 > v68, v67 != v68)
            || (v69 = *((unsigned __int8 *)v63 + 37), unsigned int v70 = *(unsigned __int8 *)(v17 + 37), v66 = v69 > v70, v69 != v70))
          {
            if (!v66) {
              goto LABEL_74;
            }
LABEL_72:
            v60 += 8;
            continue;
          }
          break;
        }
        if (*(unsigned char *)(v17 + 16))
        {
          if (!*((unsigned char *)v63 + 16)) {
            goto LABEL_72;
          }
          unsigned int v71 = *(const void **)v17;
          size_t v72 = *(void *)(v17 + 8);
          long long v310 = *v63;
          if ((int)llvm::StringRef::compare((uint64_t)&v310, v71, v72) >= 1) {
            goto LABEL_72;
          }
        }
        while (1)
        {
LABEL_74:
          while (1)
          {
            unint64_t v74 = (long long *)*--v61;
            unint64_t v73 = v74;
            unint64_t v75 = *((void *)v74 + 3);
            unint64_t v76 = *(void *)(v17 + 24);
            BOOL v77 = v75 > v76;
            if (v75 == v76)
            {
              unsigned int v78 = *((unsigned __int8 *)v73 + 36);
              unsigned int v79 = *(unsigned __int8 *)(v17 + 36);
              BOOL v77 = v78 > v79;
              if (v78 == v79)
              {
                unsigned int v80 = *((unsigned __int8 *)v73 + 37);
                unsigned int v81 = *(unsigned __int8 *)(v17 + 37);
                BOOL v77 = v80 > v81;
                if (v80 == v81) {
                  break;
                }
              }
            }
            if (v77) {
              goto LABEL_80;
            }
          }
          if (*(unsigned char *)(v17 + 16))
          {
            if (!*((unsigned char *)v73 + 16)) {
              break;
            }
            unsigned int v82 = *(const void **)v17;
            size_t v83 = *(void *)(v17 + 8);
            long long v310 = *v73;
            if ((int)llvm::StringRef::compare((uint64_t)&v310, v82, v83) > 0) {
              break;
            }
          }
        }
LABEL_80:
        if (v60 < (unint64_t)v61) {
          continue;
        }
        break;
      }
      unint64_t v39 = (uint64_t *)(v60 - 8);
      uint64_t j = a2;
LABEL_82:
      if (v39 != v8) {
        *unint64_t v8 = *v39;
      }
      uint64_t *v39 = v17;
      if (v40 < (unint64_t)m)
      {
LABEL_87:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,false>(v8, v39, a3, a4 & 1);
        a4 = 0;
        uint64_t i = v39 + 1;
      }
      else
      {
        BOOL v84 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v8, v39);
        uint64_t i = v39 + 1;
        uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v39 + 1, j);
        if (result)
        {
          a2 = v39;
          if (v84) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v84) {
          goto LABEL_87;
        }
      }
    }
  }
  unsigned int v158 = v8 + 1;
  BOOL v160 = v8 == j || v158 == j;
  if ((a4 & 1) == 0)
  {
    if (v160) {
      return result;
    }
    while (1)
    {
      v285 = v8;
      unint64_t v8 = v158;
      uint64_t v286 = *v285;
      uint64_t v287 = v285[1];
      unint64_t v288 = *(void *)(v287 + 24);
      unint64_t v289 = *(void *)(*v285 + 24);
      BOOL v290 = v288 > v289;
      if (v288 == v289
        && (unsigned int v291 = *(unsigned __int8 *)(v287 + 36),
            unsigned int v292 = *(unsigned __int8 *)(v286 + 36),
            BOOL v290 = v291 > v292,
            v291 == v292)
        && (unsigned int v293 = *(unsigned __int8 *)(v287 + 37),
            unsigned int v294 = *(unsigned __int8 *)(v286 + 37),
            BOOL v290 = v293 > v294,
            v293 == v294))
      {
        if (*(unsigned char *)(v286 + 16))
        {
          if (*(unsigned char *)(v287 + 16))
          {
            v295 = *(const void **)v286;
            size_t v296 = *(void *)(v286 + 8);
            long long v310 = *(_OWORD *)v287;
            uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v295, v296);
            if ((int)result >= 1)
            {
              uint64_t v287 = *v8;
              goto LABEL_304;
            }
          }
          else
          {
            while (1)
            {
LABEL_304:
              while (1)
              {
                v297 = v285;
                v285[1] = *v285;
                uint64_t v299 = *--v285;
                uint64_t v298 = v299;
                unint64_t v300 = *(void *)(v287 + 24);
                unint64_t v301 = *(void *)(v299 + 24);
                BOOL v302 = v300 > v301;
                if (v300 == v301)
                {
                  unsigned int v303 = *(unsigned __int8 *)(v287 + 36);
                  unsigned int v304 = *(unsigned __int8 *)(v298 + 36);
                  BOOL v302 = v303 > v304;
                  if (v303 == v304)
                  {
                    unsigned int v305 = *(unsigned __int8 *)(v287 + 37);
                    unsigned int v306 = *(unsigned __int8 *)(v298 + 37);
                    BOOL v302 = v305 > v306;
                    if (v305 == v306) {
                      break;
                    }
                  }
                }
                if (!v302) {
                  goto LABEL_312;
                }
              }
              if (!*(unsigned char *)(v298 + 16)) {
                break;
              }
              if (*(unsigned char *)(v287 + 16))
              {
                v307 = *(const void **)v298;
                size_t v308 = *(void *)(v298 + 8);
                long long v310 = *(_OWORD *)v287;
                uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v307, v308);
                if ((int)result <= 0) {
                  break;
                }
              }
            }
LABEL_312:
            uint64_t *v297 = v287;
          }
        }
      }
      else if (v290)
      {
        goto LABEL_304;
      }
      unsigned int v158 = v8 + 1;
      if (v8 + 1 == a2) {
        return result;
      }
    }
  }
  if (v160) {
    return result;
  }
  uint64_t v161 = 0;
  uint64_t v162 = v8;
  while (2)
  {
    uint64_t v163 = v162;
    uint64_t v162 = v158;
    uint64_t v164 = *v163;
    uint64_t v165 = v163[1];
    unint64_t v166 = *(void *)(v165 + 24);
    unint64_t v167 = *(void *)(*v163 + 24);
    BOOL v168 = v166 > v167;
    if (v166 == v167
      && (unsigned int v169 = *(unsigned __int8 *)(v165 + 36),
          unsigned int v170 = *(unsigned __int8 *)(v164 + 36),
          BOOL v168 = v169 > v170,
          v169 == v170)
      && (unsigned int v171 = *(unsigned __int8 *)(v165 + 37),
          unsigned int v172 = *(unsigned __int8 *)(v164 + 37),
          BOOL v168 = v171 > v172,
          v171 == v172))
    {
      if (!*(unsigned char *)(v164 + 16)) {
        goto LABEL_198;
      }
      if (*(unsigned char *)(v165 + 16))
      {
        unsigned int v173 = *(const void **)v164;
        size_t v174 = *(void *)(v164 + 8);
        long long v310 = *(_OWORD *)v165;
        uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v173, v174);
        if ((int)result < 1) {
          goto LABEL_198;
        }
        uint64_t v165 = *v162;
        uint64_t v164 = *v163;
      }
    }
    else if (!v168)
    {
      goto LABEL_198;
    }
    v163[1] = v164;
    unsigned int v175 = v8;
    if (v163 == v8) {
      goto LABEL_197;
    }
    uint64_t v176 = v161;
    while (2)
    {
      unint64_t v177 = (uint64_t *)((char *)v8 + v176);
      uint64_t v178 = *(uint64_t *)((char *)v8 + v176 - 8);
      unint64_t v179 = *(void *)(v165 + 24);
      unint64_t v180 = *(void *)(v178 + 24);
      if (v179 != v180)
      {
        if (v179 <= v180)
        {
          unsigned int v175 = (uint64_t *)((char *)v8 + v176);
          goto LABEL_197;
        }
        goto LABEL_194;
      }
      unsigned int v181 = *(unsigned __int8 *)(v165 + 36);
      unsigned int v182 = *(unsigned __int8 *)(v178 + 36);
      BOOL v183 = v181 > v182;
      if (v181 == v182)
      {
        unsigned int v184 = *(unsigned __int8 *)(v165 + 37);
        unsigned int v185 = *(unsigned __int8 *)(v178 + 37);
        BOOL v183 = v184 > v185;
        if (v184 == v185)
        {
          if (!*(unsigned char *)(v178 + 16)) {
            break;
          }
          if (*(unsigned char *)(v165 + 16))
          {
            unint64_t v186 = *(const void **)v178;
            size_t v187 = *(void *)(v178 + 8);
            long long v310 = *(_OWORD *)v165;
            uint64_t result = llvm::StringRef::compare((uint64_t)&v310, v186, v187);
            if ((int)result < 1) {
              break;
            }
            uint64_t v178 = *(v177 - 1);
          }
          goto LABEL_194;
        }
      }
      if (v183)
      {
LABEL_194:
        --v163;
        *unint64_t v177 = v178;
        v176 -= 8;
        if (!v176)
        {
          unsigned int v175 = v8;
          goto LABEL_197;
        }
        continue;
      }
      break;
    }
    unsigned int v175 = v163;
LABEL_197:
    *unsigned int v175 = v165;
LABEL_198:
    unsigned int v158 = v162 + 1;
    v161 += 8;
    if (v162 + 1 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,0>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(a1, a2, a3, a4);
  uint64_t v11 = *a5;
  uint64_t v12 = *a4;
  unint64_t v13 = *(void *)(*a5 + 24);
  unint64_t v14 = *(void *)(*a4 + 24);
  BOOL v15 = v13 > v14;
  if (v13 == v14
    && (v16 = *(unsigned __int8 *)(v11 + 36), v17 = *(unsigned __int8 *)(v12 + 36), BOOL v15 = v16 > v17, v16 == v17)
    && (v18 = *(unsigned __int8 *)(v11 + 37), v19 = *(unsigned __int8 *)(v12 + 37), BOOL v15 = v18 > v19, v18 == v19))
  {
    if (!*(unsigned char *)(v12 + 16)) {
      return result;
    }
    if (*(unsigned char *)(v11 + 16))
    {
      unint64_t v20 = *(const void **)v12;
      size_t v21 = *(void *)(v12 + 8);
      long long v55 = *(_OWORD *)v11;
      uint64_t result = llvm::StringRef::compare((uint64_t)&v55, v20, v21);
      if ((int)result < 1) {
        return result;
      }
      uint64_t v12 = *a4;
      uint64_t v11 = *a5;
    }
  }
  else if (!v15)
  {
    return result;
  }
  *a4 = v11;
  *a5 = v12;
  uint64_t v22 = *a4;
  uint64_t v23 = *a3;
  unint64_t v24 = *(void *)(*a4 + 24);
  unint64_t v25 = *(void *)(*a3 + 24);
  BOOL v26 = v24 > v25;
  if (v24 == v25
    && (unsigned int v27 = *(unsigned __int8 *)(v22 + 36), v28 = *(unsigned __int8 *)(v23 + 36), v26 = v27 > v28, v27 == v28)
    && (v29 = *(unsigned __int8 *)(v22 + 37), unsigned int v30 = *(unsigned __int8 *)(v23 + 37), v26 = v29 > v30, v29 == v30))
  {
    if (!*(unsigned char *)(v23 + 16)) {
      return result;
    }
    if (*(unsigned char *)(v22 + 16))
    {
      unint64_t v31 = *(const void **)v23;
      size_t v32 = *(void *)(v23 + 8);
      long long v55 = *(_OWORD *)v22;
      uint64_t result = llvm::StringRef::compare((uint64_t)&v55, v31, v32);
      if ((int)result < 1) {
        return result;
      }
      uint64_t v23 = *a3;
      uint64_t v22 = *a4;
    }
  }
  else if (!v26)
  {
    return result;
  }
  *a3 = v22;
  *a4 = v23;
  uint64_t v33 = *a3;
  uint64_t v34 = *a2;
  unint64_t v35 = *(void *)(*a3 + 24);
  unint64_t v36 = *(void *)(*a2 + 24);
  BOOL v37 = v35 > v36;
  if (v35 == v36
    && (unsigned int v38 = *(unsigned __int8 *)(v33 + 36), v39 = *(unsigned __int8 *)(v34 + 36), v37 = v38 > v39, v38 == v39)
    && (v40 = *(unsigned __int8 *)(v33 + 37), unsigned int v41 = *(unsigned __int8 *)(v34 + 37), v37 = v40 > v41, v40 == v41))
  {
    if (!*(unsigned char *)(v34 + 16)) {
      return result;
    }
    if (*(unsigned char *)(v33 + 16))
    {
      uint64_t v42 = *(const void **)v34;
      size_t v43 = *(void *)(v34 + 8);
      long long v55 = *(_OWORD *)v33;
      uint64_t result = llvm::StringRef::compare((uint64_t)&v55, v42, v43);
      if ((int)result < 1) {
        return result;
      }
      uint64_t v34 = *a2;
      uint64_t v33 = *a3;
    }
  }
  else if (!v37)
  {
    return result;
  }
  *a2 = v33;
  *a3 = v34;
  uint64_t v44 = *a2;
  uint64_t v45 = *(void *)a1;
  unint64_t v46 = *(void *)(*a2 + 24);
  unint64_t v47 = *(void *)(*(void *)a1 + 24);
  BOOL v48 = v46 > v47;
  if (v46 == v47)
  {
    unsigned int v49 = *(unsigned __int8 *)(v44 + 36);
    unsigned int v50 = *(unsigned __int8 *)(v45 + 36);
    BOOL v48 = v49 > v50;
    if (v49 == v50)
    {
      unsigned int v51 = *(unsigned __int8 *)(v44 + 37);
      unsigned int v52 = *(unsigned __int8 *)(v45 + 37);
      BOOL v48 = v51 > v52;
      if (v51 == v52)
      {
        if (!*(unsigned char *)(v45 + 16)) {
          return result;
        }
        if (*(unsigned char *)(v44 + 16))
        {
          unint64_t v53 = *(const void **)v45;
          size_t v54 = *(void *)(v45 + 8);
          long long v55 = *(_OWORD *)v44;
          uint64_t result = llvm::StringRef::compare((uint64_t)&v55, v53, v54);
          if ((int)result < 1) {
            return result;
          }
          uint64_t v45 = *(void *)a1;
          uint64_t v44 = *a2;
        }
        goto LABEL_37;
      }
    }
  }
  if (v48)
  {
LABEL_37:
    *(void *)a1 = v44;
    *a2 = v45;
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = (long long *)*a2;
  uint64_t v7 = *(void *)result;
  unint64_t v8 = *(void *)(*a2 + 24);
  unint64_t v9 = *(void *)(*(void *)result + 24);
  BOOL v10 = v8 > v9;
  if (v8 == v9)
  {
    unsigned int v11 = *((unsigned __int8 *)v6 + 36);
    unsigned int v12 = *(unsigned __int8 *)(v7 + 36);
    BOOL v10 = v11 > v12;
    if (v11 == v12)
    {
      unsigned int v13 = *((unsigned __int8 *)v6 + 37);
      unsigned int v14 = *(unsigned __int8 *)(v7 + 37);
      BOOL v10 = v13 > v14;
      if (v13 == v14)
      {
        if (*(unsigned char *)(v7 + 16))
        {
          if (!*((unsigned char *)v6 + 16)) {
            goto LABEL_7;
          }
          BOOL v15 = *(const void **)v7;
          size_t v16 = *(void *)(v7 + 8);
          long long v58 = *v6;
          uint64_t result = llvm::StringRef::compare((uint64_t)&v58, v15, v16);
          uint64_t v6 = (long long *)*a2;
          unint64_t v8 = *(void *)(*a2 + 24);
          if ((int)result > 0) {
            goto LABEL_7;
          }
        }
LABEL_15:
        BOOL v26 = (long long *)*a3;
        unint64_t v27 = *(void *)(*a3 + 24);
        BOOL v28 = v27 > v8;
        if (v27 == v8
          && (v29 = *((unsigned __int8 *)v26 + 36), unsigned int v30 = *((unsigned __int8 *)v6 + 36), v28 = v29 > v30, v29 == v30)
          && (unsigned int v31 = *((unsigned __int8 *)v26 + 37), v32 = *((unsigned __int8 *)v6 + 37), v28 = v31 > v32, v31 == v32))
        {
          if (!*((unsigned char *)v6 + 16)) {
            return result;
          }
          if (*((unsigned char *)v26 + 16))
          {
            uint64_t v33 = *(const void **)v6;
            size_t v34 = *((void *)v6 + 1);
            long long v58 = *v26;
            uint64_t result = llvm::StringRef::compare((uint64_t)&v58, v33, v34);
            if ((int)result < 1) {
              return result;
            }
            uint64_t v6 = (long long *)*a2;
            BOOL v26 = (long long *)*a3;
          }
        }
        else if (!v28)
        {
          return result;
        }
        *a2 = (uint64_t)v26;
        *a3 = (uint64_t)v6;
        unint64_t v35 = (long long *)*a2;
        unint64_t v36 = *(long long **)v5;
        unint64_t v37 = *(void *)(*a2 + 24);
        unint64_t v38 = *(void *)(*(void *)v5 + 24);
        BOOL v39 = v37 > v38;
        if (v37 == v38
          && (v40 = *((unsigned __int8 *)v35 + 36), unsigned int v41 = *((unsigned __int8 *)v36 + 36), v39 = v40 > v41, v40 == v41)
          && (unsigned int v42 = *((unsigned __int8 *)v35 + 37), v43 = *((unsigned __int8 *)v36 + 37), v39 = v42 > v43, v42 == v43))
        {
          if (!*((unsigned char *)v36 + 16)) {
            return result;
          }
          if (*((unsigned char *)v35 + 16))
          {
            uint64_t v44 = *(const void **)v36;
            size_t v45 = *((void *)v36 + 1);
            long long v58 = *v35;
            uint64_t result = llvm::StringRef::compare((uint64_t)&v58, v44, v45);
            if ((int)result < 1) {
              return result;
            }
            unint64_t v36 = *(long long **)v5;
            unint64_t v35 = (long long *)*a2;
          }
        }
        else if (!v39)
        {
          return result;
        }
        *(void *)uint64_t v5 = v35;
        *a2 = (uint64_t)v36;
        return result;
      }
    }
  }
  if (!v10) {
    goto LABEL_15;
  }
LABEL_7:
  unsigned int v17 = (long long *)*a3;
  unint64_t v18 = *(void *)(*a3 + 24);
  BOOL v19 = v18 > v8;
  if (v18 == v8
    && (v20 = *((unsigned __int8 *)v17 + 36), v21 = *((unsigned __int8 *)v6 + 36), BOOL v19 = v20 > v21, v20 == v21)
    && (v22 = *((unsigned __int8 *)v17 + 37), v23 = *((unsigned __int8 *)v6 + 37), BOOL v19 = v22 > v23, v22 == v23))
  {
    if (*((unsigned char *)v6 + 16))
    {
      if (!*((unsigned char *)v17 + 16))
      {
LABEL_33:
        unint64_t v46 = *(long long **)v5;
        *(void *)uint64_t v5 = v17;
        *a3 = (uint64_t)v46;
        return result;
      }
      unint64_t v24 = *(const void **)v6;
      size_t v25 = *((void *)v6 + 1);
      long long v58 = *v17;
      uint64_t result = llvm::StringRef::compare((uint64_t)&v58, v24, v25);
      if ((int)result > 0)
      {
        unsigned int v17 = (long long *)*a3;
        goto LABEL_33;
      }
      uint64_t v6 = (long long *)*a2;
    }
  }
  else if (v19)
  {
    goto LABEL_33;
  }
  unint64_t v47 = *(long long **)v5;
  *(void *)uint64_t v5 = v6;
  *a2 = (uint64_t)v47;
  BOOL v48 = (long long *)*a3;
  unint64_t v49 = *(void *)(*a3 + 24);
  unint64_t v50 = *((void *)v47 + 3);
  BOOL v51 = v49 > v50;
  if (v49 == v50)
  {
    unsigned int v52 = *((unsigned __int8 *)v48 + 36);
    unsigned int v53 = *((unsigned __int8 *)v47 + 36);
    BOOL v51 = v52 > v53;
    if (v52 == v53)
    {
      unsigned int v54 = *((unsigned __int8 *)v48 + 37);
      unsigned int v55 = *((unsigned __int8 *)v47 + 37);
      BOOL v51 = v54 > v55;
      if (v54 == v55)
      {
        if (!*((unsigned char *)v47 + 16)) {
          return result;
        }
        if (*((unsigned char *)v48 + 16))
        {
          unsigned int v56 = *(const void **)v47;
          size_t v57 = *((void *)v47 + 1);
          long long v58 = *v48;
          uint64_t result = llvm::StringRef::compare((uint64_t)&v58, v56, v57);
          if ((int)result < 1) {
            return result;
          }
          unint64_t v47 = (long long *)*a2;
          BOOL v48 = (long long *)*a3;
        }
        goto LABEL_47;
      }
    }
  }
  if (v51)
  {
LABEL_47:
    *a2 = (uint64_t)v48;
    *a3 = (uint64_t)v47;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      unint64_t v8 = *(void *)(v6 + 24);
      unint64_t v9 = *(void *)(*a1 + 24);
      BOOL v10 = v8 > v9;
      if (v8 == v9
        && (v11 = *(unsigned __int8 *)(v6 + 36), v12 = *(unsigned __int8 *)(v7 + 36), BOOL v10 = v11 > v12, v11 == v12)
        && (v13 = *(unsigned __int8 *)(v6 + 37), v14 = *(unsigned __int8 *)(v7 + 37), BOOL v10 = v13 > v14, v13 == v14))
      {
        if (!*(unsigned char *)(v7 + 16)) {
          return result;
        }
        if (*(unsigned char *)(v6 + 16))
        {
          BOOL v15 = *(const void **)v7;
          size_t v16 = *(void *)(v7 + 8);
          long long v45 = *(_OWORD *)v6;
          if ((int)llvm::StringRef::compare((uint64_t)&v45, v15, v16) < 1) {
            return 1;
          }
          uint64_t v7 = *a1;
          uint64_t v6 = *(a2 - 1);
        }
      }
      else if (!v10)
      {
        return result;
      }
      *a1 = v6;
      *(a2 - 1) = v7;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,0>((uint64_t)a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unsigned int v17 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)a1, a1 + 1, a1 + 2);
      unint64_t v18 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v19 = 0;
      int v20 = 0;
      break;
  }
  do
  {
    uint64_t v21 = *v18;
    uint64_t v22 = *v17;
    unint64_t v23 = *(void *)(*v18 + 24);
    unint64_t v24 = *(void *)(*v17 + 24);
    BOOL v25 = v23 > v24;
    if (v23 == v24
      && (v26 = *(unsigned __int8 *)(v21 + 36), unsigned int v27 = *(unsigned __int8 *)(v22 + 36), v25 = v26 > v27, v26 == v27)
      && (unsigned int v28 = *(unsigned __int8 *)(v21 + 37), v29 = *(unsigned __int8 *)(v22 + 37), v25 = v28 > v29, v28 == v29))
    {
      if (!*(unsigned char *)(v22 + 16)) {
        goto LABEL_35;
      }
      if (*(unsigned char *)(v21 + 16))
      {
        unsigned int v30 = *(const void **)v22;
        size_t v31 = *(void *)(v22 + 8);
        long long v45 = *(_OWORD *)v21;
        if ((int)llvm::StringRef::compare((uint64_t)&v45, v30, v31) < 1) {
          goto LABEL_35;
        }
        uint64_t v21 = *v18;
        uint64_t v22 = *v17;
      }
    }
    else if (!v25)
    {
      goto LABEL_35;
    }
    *unint64_t v18 = v22;
    unsigned int v32 = a1;
    if (v17 == a1) {
      goto LABEL_34;
    }
    uint64_t v33 = v19;
    while (1)
    {
      size_t v34 = (char *)a1 + v33;
      uint64_t v35 = *(uint64_t *)((char *)a1 + v33 + 8);
      unint64_t v36 = *(void *)(v21 + 24);
      unint64_t v37 = *(void *)(v35 + 24);
      BOOL v38 = v36 > v37;
      if (v36 == v37)
      {
        unsigned int v39 = *(unsigned __int8 *)(v21 + 36);
        unsigned int v40 = *(unsigned __int8 *)(v35 + 36);
        BOOL v38 = v39 > v40;
        if (v39 == v40)
        {
          unsigned int v41 = *(unsigned __int8 *)(v21 + 37);
          unsigned int v42 = *(unsigned __int8 *)(v35 + 37);
          BOOL v38 = v41 > v42;
          if (v41 == v42) {
            break;
          }
        }
      }
      if (!v38)
      {
LABEL_33:
        unsigned int v32 = v17;
        goto LABEL_34;
      }
LABEL_31:
      --v17;
      *((void *)v34 + 2) = v35;
      v33 -= 8;
      if (v33 == -16)
      {
        unsigned int v32 = a1;
        goto LABEL_34;
      }
    }
    if (*(unsigned char *)(v35 + 16))
    {
      if (*(unsigned char *)(v21 + 16))
      {
        unsigned int v43 = *(const void **)v35;
        size_t v44 = *(void *)(v35 + 8);
        long long v45 = *(_OWORD *)v21;
        if ((int)llvm::StringRef::compare((uint64_t)&v45, v43, v44) < 1) {
          goto LABEL_33;
        }
        uint64_t v35 = *((void *)v34 + 1);
      }
      goto LABEL_31;
    }
    unsigned int v32 = (uint64_t *)((char *)a1 + v33 + 16);
LABEL_34:
    *unsigned int v32 = v21;
    if (++v20 == 8) {
      return v18 + 1 == a2;
    }
LABEL_35:
    unsigned int v17 = v18;
    v19 += 8;
    ++v18;
  }
  while (v18 != a2);
  return 1;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(a1, a2, a3);
  uint64_t v9 = *a4;
  uint64_t v10 = *a3;
  unint64_t v11 = *(void *)(*a4 + 24);
  unint64_t v12 = *(void *)(*a3 + 24);
  BOOL v13 = v11 > v12;
  if (v11 == v12
    && (v14 = *(unsigned __int8 *)(v9 + 36), v15 = *(unsigned __int8 *)(v10 + 36), BOOL v13 = v14 > v15, v14 == v15)
    && (v16 = *(unsigned __int8 *)(v9 + 37), v17 = *(unsigned __int8 *)(v10 + 37), BOOL v13 = v16 > v17, v16 == v17))
  {
    if (!*(unsigned char *)(v10 + 16)) {
      return result;
    }
    if (*(unsigned char *)(v9 + 16))
    {
      unint64_t v18 = *(const void **)v10;
      size_t v19 = *(void *)(v10 + 8);
      long long v42 = *(_OWORD *)v9;
      uint64_t result = llvm::StringRef::compare((uint64_t)&v42, v18, v19);
      if ((int)result < 1) {
        return result;
      }
      uint64_t v10 = *a3;
      uint64_t v9 = *a4;
    }
  }
  else if (!v13)
  {
    return result;
  }
  *a3 = v9;
  *a4 = v10;
  uint64_t v20 = *a3;
  uint64_t v21 = *a2;
  unint64_t v22 = *(void *)(*a3 + 24);
  unint64_t v23 = *(void *)(*a2 + 24);
  BOOL v24 = v22 > v23;
  if (v22 == v23
    && (v25 = *(unsigned __int8 *)(v20 + 36), v26 = *(unsigned __int8 *)(v21 + 36), BOOL v24 = v25 > v26, v25 == v26)
    && (v27 = *(unsigned __int8 *)(v20 + 37), v28 = *(unsigned __int8 *)(v21 + 37), BOOL v24 = v27 > v28, v27 == v28))
  {
    if (!*(unsigned char *)(v21 + 16)) {
      return result;
    }
    if (*(unsigned char *)(v20 + 16))
    {
      unsigned int v29 = *(const void **)v21;
      size_t v30 = *(void *)(v21 + 8);
      long long v42 = *(_OWORD *)v20;
      uint64_t result = llvm::StringRef::compare((uint64_t)&v42, v29, v30);
      if ((int)result < 1) {
        return result;
      }
      uint64_t v21 = *a2;
      uint64_t v20 = *a3;
    }
  }
  else if (!v24)
  {
    return result;
  }
  *a2 = v20;
  *a3 = v21;
  uint64_t v31 = *a2;
  uint64_t v32 = *(void *)a1;
  unint64_t v33 = *(void *)(*a2 + 24);
  unint64_t v34 = *(void *)(*(void *)a1 + 24);
  BOOL v35 = v33 > v34;
  if (v33 == v34)
  {
    unsigned int v36 = *(unsigned __int8 *)(v31 + 36);
    unsigned int v37 = *(unsigned __int8 *)(v32 + 36);
    BOOL v35 = v36 > v37;
    if (v36 == v37)
    {
      unsigned int v38 = *(unsigned __int8 *)(v31 + 37);
      unsigned int v39 = *(unsigned __int8 *)(v32 + 37);
      BOOL v35 = v38 > v39;
      if (v38 == v39)
      {
        if (!*(unsigned char *)(v32 + 16)) {
          return result;
        }
        if (*(unsigned char *)(v31 + 16))
        {
          unsigned int v40 = *(const void **)v32;
          size_t v41 = *(void *)(v32 + 8);
          long long v42 = *(_OWORD *)v31;
          uint64_t result = llvm::StringRef::compare((uint64_t)&v42, v40, v41);
          if ((int)result < 1) {
            return result;
          }
          uint64_t v32 = *(void *)a1;
          uint64_t v31 = *a2;
        }
        goto LABEL_28;
      }
    }
  }
  if (v35)
  {
LABEL_28:
    *(void *)a1 = v31;
    *a2 = v32;
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::create(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 <= 0x3F)
  {
    unint64_t v11 = a2;
    v12[0] = "invalid buffer: the size (";
    uint64_t v12[2] = &v11;
    __int16 v13 = 2563;
    v14[0] = v12;
    _OWORD v14[2] = ") is smaller than an ELF header (";
    __int16 v15 = 770;
    uint64_t v10 = 64;
    v16[0] = v14;
    void v16[2] = &v10;
    __int16 v17 = 2562;
    v3[0] = v16;
    std::string __p = ")";
    LOWORD(v6) = 770;
    int v18 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  v3[0] = a1;
  v3[1] = a2;
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = &v10;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(a3, (uint64_t)v3);
  if (v7 != &v10) {
    free(v7);
  }
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::create(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 <= 0x33)
  {
    unint64_t v11 = a2;
    v12[0] = "invalid buffer: the size (";
    uint64_t v12[2] = &v11;
    __int16 v13 = 2563;
    v14[0] = v12;
    _OWORD v14[2] = ") is smaller than an ELF header (";
    __int16 v15 = 770;
    uint64_t v10 = 52;
    v16[0] = v14;
    void v16[2] = &v10;
    __int16 v17 = 2562;
    v3[0] = v16;
    std::string __p = ")";
    LOWORD(v6) = 770;
    int v18 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  v3[0] = a1;
  v3[1] = a2;
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = &v10;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(a3, (uint64_t)v3);
  if (v7 != &v10) {
    free(v7);
  }
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
}

uint64_t *llvm::jitlink::createLinkGraphFromELFObject@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 <= 3) {
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
  }
  uint64_t v5 = *(void *)a1;
  if (*(_DWORD *)v5 != 1179403647) {
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
  }
  if (*(unsigned char *)(v5 + 5) != 1) {
    goto LABEL_10;
  }
  int v6 = *(unsigned __int8 *)(v5 + 4);
  if (v6 == 1)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::create(v5, v3, (uint64_t)v25);
    uint64_t v7 = v25[0];
    if (v27)
    {
      v25[0] = 0;
      char v12 = -1;
    }
    else
    {
      char v12 = 0;
      uint64_t v7 = *(unsigned __int16 *)(v25[0] + 18);
    }
    uint64_t result = llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::~Expected(v25);
    if (v12) {
      goto LABEL_32;
    }
LABEL_11:
    if ((unsigned __int16)v7 > 0xB6u)
    {
      switch((unsigned __int16)v7)
      {
        case 0x102u:
          long long v15 = *(_OWORD *)(a1 + 16);
          v22[0] = *(_OWORD *)a1;
          v22[1] = v15;
          return llvm::jitlink::createLinkGraphFromELFObject_loongarch(v22, a2);
        case 0xF3u:
          long long v16 = *(_OWORD *)(a1 + 16);
          v21[0] = *(_OWORD *)a1;
          v21[1] = v16;
          return llvm::jitlink::createLinkGraphFromELFObject_riscv(v21, a2);
        case 0xB7u:
          long long v11 = *(_OWORD *)(a1 + 16);
          v24[0] = *(_OWORD *)a1;
          v24[1] = v11;
          return llvm::jitlink::createLinkGraphFromELFObject_aarch64(v24, a2);
      }
    }
    else
    {
      switch((unsigned __int16)v7)
      {
        case 3u:
          long long v13 = *(_OWORD *)(a1 + 16);
          v19[0] = *(_OWORD *)a1;
          v19[1] = v13;
          return llvm::jitlink::createLinkGraphFromELFObject_i386(v19, a2);
        case 0x28u:
          long long v14 = *(_OWORD *)(a1 + 16);
          v23[0] = *(_OWORD *)a1;
          v23[1] = v14;
          return llvm::jitlink::createLinkGraphFromELFObject_aarch32(v23, a2);
        case 0x3Eu:
          long long v9 = *(_OWORD *)(a1 + 16);
          v20[0] = *(_OWORD *)a1;
          v20[1] = v9;
          return llvm::jitlink::createLinkGraphFromELFObject_x86_64(v20, a2);
      }
    }
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = *(void *)(a1 + 24);
    __int16 v26 = 1283;
    v25[0] = (uint64_t)"Unsupported target machine architecture in ELF object ";
    long long v25[2] = v17;
    void v25[3] = v18;
    llvm::make_error<llvm::jitlink::JITLinkError,llvm::Twine>();
  }
  if (v6 != 2)
  {
LABEL_10:
    LOWORD(v7) = 0;
    goto LABEL_11;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::create(v5, v3, (uint64_t)v25);
  uint64_t v7 = v25[0];
  if (v27)
  {
    v25[0] = 0;
    char v8 = -1;
  }
  else
  {
    char v8 = 0;
    uint64_t v7 = *(unsigned __int16 *)(v25[0] + 18);
  }
  uint64_t result = llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::~Expected(v25);
  if ((v8 & 1) == 0) {
    goto LABEL_11;
  }
LABEL_32:
  *(unsigned char *)(a2 + 8) |= 1u;
  *(void *)a2 = v7;
  return result;
}

llvm::jitlink::LinkGraph *llvm::jitlink::link_ELF(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  size_t v2 = *a1;
  int v3 = *((_DWORD *)*a1 + 36);
  if (v3 > 26)
  {
    switch(v3)
    {
      case 27:
      case 28:
        *a1 = 0;
        unint64_t v22 = v2;
        uint64_t v4 = *a2;
        *a2 = 0;
        uint64_t v21 = v4;
        llvm::jitlink::link_ELF_riscv(&v22, &v21);
        uint64_t v5 = v21;
        uint64_t v21 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
        uint64_t result = v22;
        unint64_t v22 = 0;
        if (!result) {
          return result;
        }
        goto LABEL_29;
      case 35:
      case 36:
        goto LABEL_13;
      case 37:
        *a1 = 0;
        uint64_t v18 = v2;
        uint64_t v13 = *a2;
        *a2 = 0;
        uint64_t v17 = v13;
        llvm::jitlink::link_ELF_i386(&v18, &v17);
        uint64_t v14 = v17;
        uint64_t v17 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
        uint64_t result = v18;
        uint64_t v18 = 0;
        if (!result) {
          return result;
        }
        goto LABEL_29;
      case 38:
        *a1 = 0;
        uint64_t v20 = v2;
        uint64_t v15 = *a2;
        *a2 = 0;
        uint64_t v19 = v15;
        llvm::jitlink::link_ELF_x86_64(&v20, &v19);
        uint64_t v16 = v19;
        uint64_t v19 = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
        uint64_t result = v20;
        uint64_t v20 = 0;
        if (result) {
          goto LABEL_29;
        }
        return result;
      default:
        goto LABEL_31;
    }
  }
  if ((v3 - 1) < 2)
  {
LABEL_13:
    *a1 = 0;
    __int16 v26 = v2;
    uint64_t v9 = *a2;
    *a2 = 0;
    uint64_t v25 = v9;
    llvm::jitlink::link_ELF_aarch32(&v26, &v25);
    uint64_t v10 = v25;
    uint64_t v25 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t result = v26;
    __int16 v26 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_29;
  }
  if ((v3 - 13) < 2)
  {
    *a1 = 0;
    BOOL v24 = v2;
    uint64_t v7 = *a2;
    *a2 = 0;
    uint64_t v23 = v7;
    llvm::jitlink::link_ELF_loongarch((uint64_t)&v24, &v23);
    uint64_t v8 = v23;
    uint64_t v23 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t result = v24;
    BOOL v24 = 0;
    if (!result) {
      return result;
    }
LABEL_29:
    llvm::jitlink::LinkGraph::~LinkGraph(result);
    return (llvm::jitlink::LinkGraph *)MEMORY[0x263E500B0]();
  }
  if (v3 != 3)
  {
LABEL_31:
    std::operator+<char>();
    llvm::make_error<llvm::jitlink::JITLinkError,std::string>();
  }
  *a1 = 0;
  uint64_t v28 = v2;
  uint64_t v11 = *a2;
  *a2 = 0;
  uint64_t v27 = v11;
  llvm::jitlink::link_ELF_aarch64(&v28, &v27);
  uint64_t v12 = v27;
  uint64_t v27 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t result = v28;
  uint64_t v28 = 0;
  if (result) {
    goto LABEL_29;
  }
  return result;
}

void llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>()
{
}

uint64_t llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 64) &= ~1u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 40) = a1 + 64;
  uint64_t v3 = a1 + 40;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  if (*(void *)(a2 + 48)) {
    llvm::SmallVectorImpl<char>::operator=(v3, (const void **)(a2 + 40));
  }
  return a1;
}

uint64_t *llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::~Expected(uint64_t *a1)
{
  size_t v2 = a1 + 8;
  if (a1[8])
  {
    uint64_t v5 = *a1;
    *a1 = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  else
  {
    uint64_t v3 = (void *)a1[5];
    if (v3 != v2) {
      free(v3);
    }
    uint64_t v4 = (void *)a1[2];
    if (v4)
    {
      a1[3] = (uint64_t)v4;
      operator delete(v4);
    }
  }
  return a1;
}

void llvm::jitlink::ELFLinkGraphBuilderBase::~ELFLinkGraphBuilderBase(llvm::jitlink::LinkGraph **this)
{
  *this = (llvm::jitlink::LinkGraph *)&unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100](this + 1, 0);
}

{
  uint64_t vars8;

  *this = (llvm::jitlink::LinkGraph *)&unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100](this + 1, 0);
  JUMPOUT(0x263E500B0);
}

char *llvm::jitlink::getJITLinkEdgeKind(char *this, signed int a2)
{
  signed int v7 = a2;
  if (a2 <= 27)
  {
    switch(a2)
    {
      case 2:
        this[8] &= ~1u;
        char v2 = 3;
        goto LABEL_18;
      case 3:
        this[8] &= ~1u;
        char v2 = 2;
        goto LABEL_18;
      case 10:
        this[8] &= ~1u;
        char v2 = 5;
        goto LABEL_18;
    }
LABEL_16:
    v3[0] = "{0:d}: ";
    v3[1] = 7;
    void v3[2] = v5;
    v3[3] = 1;
    v4[0] = &unk_270DBEB80;
    v4[1] = &v7;
    v5[0] = v4;
    v5[1] = "Unsupported aarch32 relocation ";
    v5[3] = v3;
    __int16 v6 = 1539;
    llvm::object::getELFRelocationTypeName((llvm::object *)0x28, a2);
    operator new();
  }
  if (a2 > 46)
  {
    if (a2 == 47)
    {
      this[8] &= ~1u;
      char v2 = 7;
      goto LABEL_18;
    }
    if (a2 == 48)
    {
      this[8] &= ~1u;
      char v2 = 8;
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (a2 == 28)
  {
    this[8] &= ~1u;
    char v2 = 4;
    goto LABEL_18;
  }
  if (a2 != 30) {
    goto LABEL_16;
  }
  this[8] &= ~1u;
  char v2 = 6;
LABEL_18:
  *this = v2;
  return this;
}

const char *llvm::jitlink::getELFAArch32EdgeKindName(llvm::jitlink *this)
{
  char v1 = (_BYTE)this - 2;
  if (this - 2) < 7 && ((0x7Du >> v1)) {
    return off_265592538[v1];
  }
  char v2 = "<Unrecognized edge kind>";
  if (this == 1) {
    char v2 = "Keep-Alive";
  }
  if (this) {
    return v2;
  }
  else {
    return "INVALID RELOCATION";
  }
}

uint64_t *llvm::jitlink::createLinkGraphFromELFObject_aarch32@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  __dst[5] = *MEMORY[0x263EF8340];
  long long v3 = a1[1];
  v29[0] = *a1;
  v29[1] = v3;
  llvm::object::ObjectFile::createELFObjectFile(v29, 1, (uint64_t)&v32);
  if ((v33 & 1) == 0)
  {
    llvm::object::ObjectFile::makeTriple(v32, (llvm::Triple *)&v26);
    uint64_t ArchName = llvm::Triple::getArchName((llvm::Triple *)&v26);
    unsigned int v6 = llvm::ARM::parseArch(ArchName, v5);
    if (!v6) {
      llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
    }
    int v7 = *((_DWORD *)&llvm::ARM::ARMArchNames + 18 * v6 + 17);
    if ((v7 | 4) != 0xE)
    {
      CPUuint64_t ArchName = llvm::jitlink::aarch32::getCPUArchName(v7);
      strlen(CPUArchName);
      operator new();
    }
    if ((int)v27 > 34)
    {
      if (v27 != 35)
      {
        if (v27 != 36)
        {
LABEL_7:
          std::operator+<char>();
          llvm::make_error<llvm::jitlink::JITLinkError,std::string>();
        }
LABEL_13:
        uint64_t v10 = (void *)*((void *)v32 + 4);
        size_t v11 = *((void *)v32 + 5);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v19, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
        }
        else {
          std::string v19 = v26;
        }
        long long v20 = v27;
        uint64_t v21 = v28;
        v37[0] = v19.__r_.__value_.__l.__size_;
        std::string::size_type v15 = v19.__r_.__value_.__r.__words[0];
        *(void *)((char *)v37 + 7) = *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 7);
        char v16 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        memset(&v19, 0, sizeof(v19));
        long long v30 = v27;
        uint64_t v31 = v28;
        if (v10) {
          std::string::basic_string[abi:nn180100](__dst, v10, v11);
        }
        else {
          memset(__dst, 0, 24);
        }
        *(void *)std::string __p = v15;
        *(void *)&__p[8] = v37[0];
        *(void *)&__p[15] = *(void *)((char *)v37 + 7);
        __p[23] = v16;
        long long v35 = v30;
        uint64_t v36 = v31;
        operator new();
      }
    }
    else if (v27 != 1)
    {
      if (v27 != 2) {
        goto LABEL_7;
      }
      goto LABEL_13;
    }
    int v12 = v32 + 56;
    uint64_t v13 = (void *)*((void *)v32 + 4);
    size_t v14 = *((void *)v32 + 5);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v22, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
    }
    else {
      std::string v22 = v26;
    }
    long long v23 = v27;
    uint64_t v24 = v28;
    *(_OWORD *)std::string __p = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
    std::string::size_type v17 = v22.__r_.__value_.__r.__words[2];
    memset(&v22, 0, sizeof(v22));
    long long v35 = v27;
    *(void *)&__p[16] = v17;
    uint64_t v36 = v28;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFLinkGraphBuilder((int)v25, v12, (uint64_t)__p, v13, v14);
  }
  uint64_t v8 = v32;
  uint64_t v32 = 0;
  *(unsigned char *)(a2 + 8) |= 1u;
  *(void *)a2 = v8;
  return llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected((uint64_t *)&v32);
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::buildGraph(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_WORD *)(**(void **)(a1 + 24) + 16) != 1) {
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
  }
  llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::prepare(a1, &v5);
  uint64_t v4 = v5;
  if (v5
    || (llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::graphifySections(a1, &v5), (uint64_t v4 = v5) != 0)|| (llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::graphifySymbols(a1, (uint64_t *)&v5), (uint64_t v4 = v5) != 0)|| ((*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(&v5, a1), (uint64_t v4 = v5) != 0))
  {
    *(unsigned char *)(a2 + 8) |= 1u;
  }
  else
  {
    *(unsigned char *)(a2 + 8) &= ~1u;
    uint64_t v4 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  *(void *)a2 = v4;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)1>::~ELFLinkGraphBuilder_aarch32(uint64_t a1)
{
  *(void *)a1 = &unk_270DBECD0;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)0>::~ELFLinkGraphBuilder_aarch32(uint64_t a1)
{
  *(void *)a1 = &unk_270DBED10;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

void llvm::jitlink::link_ELF_aarch32(void *a1, void *a2)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  long long v3 = (llvm::Triple *)(*a1 + 120);
  uint64_t ArchName = llvm::Triple::getArchName(v3);
  unsigned int v6 = (*((_DWORD *)&llvm::ARM::ARMArchNames + 18 * llvm::ARM::parseArch(ArchName, v5) + 17) - 10) & 0xFFFFFFFB;
  uint64_t v44 = 0;
  long long v43 = 0u;
  memset(v42, 0, sizeof(v42));
  memset(v41, 0, sizeof(v41));
  int64x2_t v40 = 0u;
  if ((*(unsigned int (**)(void, llvm::Triple *))(*(void *)*a2 + 56))(*a2, v3))
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 64))(&v51);
    if ((unint64_t)v52 < 8)
    {
      *(void *)&long long v49 = llvm::jitlink::markAllSymbolsLive;
      unint64_t v50 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
          + 2;
      if (v40.i64[1] >= *(void *)&v41[0])
      {
        uint64_t v13 = (v40.i64[1] - v40.i64[0]) >> 5;
        if ((unint64_t)(v13 + 1) >> 59) {
          goto LABEL_62;
        }
        unint64_t v14 = (*(void *)&v41[0] - v40.i64[0]) >> 4;
        if (v14 <= v13 + 1) {
          unint64_t v14 = v13 + 1;
        }
        if (*(void *)&v41[0] - v40.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        BOOL v48 = (char *)v41;
        if (v15) {
          char v16 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v41, v15);
        }
        else {
          char v16 = 0;
        }
        uint64_t v21 = (uint64_t)&v16[4 * v13];
        long long v45 = v16;
        v46.i64[0] = v21;
        unint64_t v47 = &v16[4 * v15];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v21, &v49);
        uint64_t v8 = v21 + 32;
        v46.i64[1] = v21 + 32;
        std::string v22 = (long long *)v40.i64[1];
        uint64_t v23 = v46.i64[0];
        if (v40.i64[1] == v40.i64[0])
        {
          int64x2_t v24 = vdupq_n_s64(v40.u64[1]);
        }
        else
        {
          do
          {
            v22 -= 2;
            uint64_t v23 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v23 - 32, v22);
          }
          while (v22 != (long long *)v40.i64[0]);
          int64x2_t v24 = v40;
          uint64_t v8 = v46.i64[1];
        }
        v40.i64[0] = v23;
        v40.i64[1] = v8;
        int64x2_t v46 = v24;
        std::string v26 = *(void ***)&v41[0];
        *(void *)&v41[0] = v47;
        unint64_t v47 = v26;
        long long v45 = (void **)v24.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v45);
      }
      else
      {
        uint64_t v8 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v40.i64[1], &v49)+ 32;
      }
      v40.i64[1] = v8;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v49);
    }
    else
    {
      if (v40.i64[1] >= *(void *)&v41[0])
      {
        uint64_t v9 = (v40.i64[1] - v40.i64[0]) >> 5;
        if ((unint64_t)(v9 + 1) >> 59) {
          goto LABEL_62;
        }
        unint64_t v10 = (*(void *)&v41[0] - v40.i64[0]) >> 4;
        if (v10 <= v9 + 1) {
          unint64_t v10 = v9 + 1;
        }
        if (*(void *)&v41[0] - v40.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        BOOL v48 = (char *)v41;
        if (v11) {
          int v12 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v41, v11);
        }
        else {
          int v12 = 0;
        }
        uint64_t v17 = (uint64_t)&v12[4 * v9];
        long long v45 = v12;
        v46.i64[0] = v17;
        unint64_t v47 = &v12[4 * v11];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v17, &v51);
        uint64_t v7 = v17 + 32;
        v46.i64[1] = v17 + 32;
        uint64_t v18 = (long long *)v40.i64[1];
        uint64_t v19 = v46.i64[0];
        if (v40.i64[1] == v40.i64[0])
        {
          int64x2_t v20 = vdupq_n_s64(v40.u64[1]);
        }
        else
        {
          do
          {
            v18 -= 2;
            uint64_t v19 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v19 - 32, v18);
          }
          while (v18 != (long long *)v40.i64[0]);
          int64x2_t v20 = v40;
          uint64_t v7 = v46.i64[1];
        }
        v40.i64[0] = v19;
        v40.i64[1] = v7;
        int64x2_t v46 = v20;
        uint64_t v25 = *(void ***)&v41[0];
        *(void *)&v41[0] = v47;
        unint64_t v47 = v25;
        long long v45 = (void **)v20.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v45);
      }
      else
      {
        uint64_t v7 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v40.i64[1], &v51)+ 32;
      }
      v40.i64[1] = v7;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v51);
    if (v6) {
      goto LABEL_55;
    }
    *(void *)&long long v51 = llvm::jitlink::buildTables_ELF_aarch32<(llvm::jitlink::aarch32::StubsFlavor)1>;
    unsigned int v52 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
        + 2;
    if (*(void *)&v41[1] < *((void *)&v41[1] + 1))
    {
      uint64_t v27 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v41[1], &v51)+ 32;
LABEL_54:
      *(void *)&v41[1] = v27;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v51);
      goto LABEL_55;
    }
    uint64_t v28 = (uint64_t)(*(void *)&v41[1] - *((void *)&v41[0] + 1)) >> 5;
    if (!((unint64_t)(v28 + 1) >> 59))
    {
      unint64_t v29 = (uint64_t)(*((void *)&v41[1] + 1) - *((void *)&v41[0] + 1)) >> 4;
      if (v29 <= v28 + 1) {
        unint64_t v29 = v28 + 1;
      }
      if (*((void *)&v41[1] + 1) - *((void *)&v41[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v30 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v29;
      }
      BOOL v48 = (char *)&v41[1] + 8;
      if (v30) {
        uint64_t v31 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v41[1] + 8, v30);
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v32 = (uint64_t)&v31[4 * v28];
      long long v45 = v31;
      v46.i64[0] = v32;
      unint64_t v47 = &v31[4 * v30];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v32, &v51);
      uint64_t v27 = v32 + 32;
      v46.i64[1] = v32 + 32;
      unint64_t v34 = (long long *)*((void *)&v41[0] + 1);
      char v33 = *(long long **)&v41[1];
      uint64_t v35 = v46.i64[0];
      if (*(void *)&v41[1] == *((void *)&v41[0] + 1))
      {
        int64x2_t v36 = vdupq_n_s64(*(unint64_t *)&v41[1]);
      }
      else
      {
        do
        {
          v33 -= 2;
          uint64_t v35 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v35 - 32, v33);
        }
        while (v33 != v34);
        int64x2_t v36 = *(int64x2_t *)((char *)v41 + 8);
        uint64_t v27 = v46.i64[1];
      }
      *((void *)&v41[0] + 1) = v35;
      *(void *)&v41[1] = v27;
      int64x2_t v46 = v36;
      unsigned int v37 = (void **)*((void *)&v41[1] + 1);
      *((void *)&v41[1] + 1) = v47;
      unint64_t v47 = v37;
      long long v45 = (void **)v36.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v45);
      goto LABEL_54;
    }
LABEL_62:
    abort();
  }
LABEL_55:
  (*(void (**)(void ***__return_ptr))(*(void *)*a2 + 72))(&v45);
  if (!v45) {
    operator new();
  }
  uint64_t v38 = *a2;
  unsigned int v39 = v45;
  long long v45 = 0;
  (*(void (**)(uint64_t, void ***))(*(void *)v38 + 24))(v38, &v39);
  if (v39) {
    (*((void (**)(void **))*v39 + 1))(v39);
  }
  if (v45) {
    (*((void (**)(void **))*v45 + 1))(v45);
  }
  long long v45 = (void **)&v43;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v45);
  long long v45 = (void **)&v42[1] + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v45);
  long long v45 = (void **)v42;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v45);
  long long v45 = (void **)v41 + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v45);
  long long v45 = (void **)&v40;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v45);
}

uint64_t llvm::jitlink::buildTables_ELF_aarch32<(llvm::jitlink::aarch32::StubsFlavor)1>@<X0>(llvm::jitlink::LinkGraph *a1@<X0>, void *a2@<X8>)
{
  unsigned int v16 = 0;
  uint64_t v17 = 0;
  llvm::jitlink::LinkGraph::blocks(a1, v25);
  v26[0] = v25[0];
  v26[1] = v25[1];
  long long v26[2] = v25[2];
  v26[3] = v25[3];
  llvm::jitlink::LinkGraph::blocks(a1, &v18);
  v24[0] = v20;
  v24[1] = v21;
  long long v24[2] = v22;
  v24[3] = v23;
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v27, v26, (uint64_t *)v24);
  unint64_t v5 = v27;
  unsigned int v6 = v28;
  if (v27 != v28)
  {
    do
    {
      uint64_t v7 = *(unsigned __int8 **)(*(void *)v5 + 40);
      uint64_t v8 = *(unsigned __int8 **)(*(void *)v5 + 48);
      while (v7 != v8)
      {
        uint64_t v9 = *(_OWORD **)v7;
        if ((*(unsigned char *)(*(void *)(*(void *)v7 + 16) + 8) & 1) == 0 && v7[24] - 5 <= 1)
        {
          v25[0] = *v9;
          *(void *)&long long v18 = 0;
          int v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(&v15, (uint64_t)v25, &v18, v4);
          uint64_t v11 = v18;
          if (!v10) {
            uint64_t v11 = v15 + 24 * v16;
          }
          if (v11 == v15 + 24 * v16)
          {
            Entry = llvm::jitlink::aarch32::StubsManager<(llvm::jitlink::aarch32::StubsFlavor)1>::createEntry((uint64_t)&v15, (uint64_t)a1, (uint64_t)v9);
            long long v18 = *v9;
            uint64_t v19 = Entry;
            llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)&v15, &v18, &v19, v13, (uint64_t)v25);
            uint64_t v11 = *(void *)&v25[0];
          }
          *(void *)uint64_t v7 = *(void *)(v11 + 16);
        }
        v7 += 32;
      }
      v5 += 8;
    }
    while (v5 != v6);
    unint64_t v5 = v27;
  }
  if (v5)
  {
    uint64_t v28 = v5;
    operator delete(v5);
  }
  *a2 = 0;
  return MEMORY[0x263E500A0](v15, 8);
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::makeTargetFlags()
{
  return 0;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRawOffset(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 4);
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::excludeSection()
{
  return 0;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)0,false>>::makeTargetFlags()
{
  return 0;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRawOffset(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 4));
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)0,false>>::excludeSection()
{
  return 0;
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFLinkGraphBuilder(int a1, int a2, uint64_t a3, void *__src, size_t __len)
{
  if (__src)
  {
    std::string::basic_string[abi:nn180100](__dst, __src, __len);
  }
  else
  {
    __dst[0] = 0;
    __dst[1] = 0;
    uint64_t v11 = 0;
  }
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  long long v8 = *(_OWORD *)(a3 + 24);
  uint64_t v9 = *(void *)(a3 + 40);
  operator new();
}

void llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)1>::~ELFLinkGraphBuilder_aarch32(uint64_t a1)
{
  *(void *)a1 = &unk_270DBECD0;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x263E500B0);
}

void llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)1>::addRelocations(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    unint64_t v5 = *(unsigned int **)(a1 + 32);
    unsigned int v6 = &v5[10 * v3];
    uint64_t v7 = "Refencing a section that wasn't added to the graph: ";
    while (v5[1] != 9)
    {
      *a2 = 0;
LABEL_35:
      v5 += 10;
      if (v5 == v6) {
        goto LABEL_36;
      }
    }
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(*(void **)(a1 + 24), v5[7], (uint64_t)&v24);
    if (v25)
    {
      unint64_t v14 = v24;
      *a2 = (uint64_t)v24;
      goto LABEL_34;
    }
    long long v8 = *(void **)(a1 + 24);
    *(void *)&long long v19 = llvm::object::defaultWarningHandler;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(v8, v24, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v19, (uint64_t)&v22);
    if (v23)
    {
      uint64_t v15 = v22;
      *(void *)&long long v22 = 0;
      *a2 = v15;
    }
    else
    {
      if (*(unsigned char *)(a1 + 72)
        || (long long v19 = v22,
            std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90], (uint64_t)&v19) == (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90]))
      {
        if (!(*(unsigned int (**)(uint64_t, unsigned int *))(*(void *)a1 + 40))(a1, v24))
        {
          GraphBlocuint64_t k = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, v5[7]);
          if (!GraphBlock)
          {
            __int16 v21 = 1283;
            *(void *)&long long v19 = v7;
            long long v20 = v22;
            getErrorErrorCat();
            operator new();
          }
          int v10 = (void *)GraphBlock;
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>(*(void **)(a1 + 24), v5, (uint64_t)&v19);
          uint64_t v11 = (_DWORD *)v19;
          int v12 = v7;
          if (v20)
          {
            *(void *)&long long v19 = 0;
          }
          else
          {
            if (*((void *)&v19 + 1))
            {
              uint64_t v13 = 8 * *((void *)&v19 + 1);
              do
              {
                llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)1>::addSingleRelRelocation(a1, v11, (uint64_t)v24, v10, a2);
                if (*a2) {
                  goto LABEL_23;
                }
                v11 += 2;
                v13 -= 8;
              }
              while (v13);
            }
            uint64_t v11 = 0;
          }
          *a2 = (uint64_t)v11;
LABEL_23:
          if (v20)
          {
            uint64_t v16 = v19;
            *(void *)&long long v19 = 0;
            if (v16) {
              (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
            }
          }
          uint64_t v7 = v12;
          goto LABEL_27;
        }
      }
      *a2 = 0;
    }
LABEL_27:
    if (v23)
    {
      uint64_t v17 = v22;
      *(void *)&long long v22 = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
    if (v25)
    {
      long long v18 = v24;
      int64x2_t v24 = 0;
      if (v18) {
        (*(void (**)(unsigned int *))(*(void *)v18 + 8))(v18);
      }
    }
    unint64_t v14 = (unsigned int *)*a2;
LABEL_34:
    if (v14) {
      return;
    }
    goto LABEL_35;
  }
LABEL_36:
  *a2 = 0;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)1>::makeTargetFlags(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) & 1;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)1>::getRawOffset(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) & 0xFFFFFFFE;
}

BOOL llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)1>::excludeSection(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 1879048193;
}

void llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)1>::addSingleRelRelocation(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  unsigned int v10 = a2[1];
  unsigned int v11 = v10 >> 8;
  unsigned int v29 = v10 >> 8;
  if (v10 > 0xFF)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(*(void **)(a1 + 24), *(unsigned int **)(a1 + 48), v11, (uint64_t)&v34);
    if (v35)
    {
      uint64_t v17 = v34;
      uint64_t v34 = 0;
LABEL_19:
      *a5 = v17;
      goto LABEL_20;
    }
  }
  else
  {
    char v35 = 0;
    uint64_t v34 = 0;
  }
  uint64_t GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(a1, v11);
  if (!GraphSymbol)
  {
    int v16 = *(_DWORD *)(a1 + 112);
    *(void *)&long long v21 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {0}, shndx: {1} Size of table: {2}";
    *((void *)&v21 + 1) = 113;
    long long v22 = v28;
    uint64_t v23 = 3;
    v24[0] = &unk_270DBEB80;
    v24[1] = &v29;
    v25[0] = &unk_270DBED90;
    v25[1] = v34 + 14;
    uint64_t v26 = &unk_270DBE8C8;
    int v27 = v16;
    v28[0] = v24;
    v28[1] = v25;
    long long v28[2] = &v26;
    getErrorErrorCat();
    uint64_t v32 = 3;
    char v33 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>();
  }
  uint64_t v13 = GraphSymbol;
  llvm::jitlink::getJITLinkEdgeKind((char *)&v32, *((unsigned __int8 *)a2 + 4));
  if (v33)
  {
    uint64_t v17 = v32;
    goto LABEL_19;
  }
  int v14 = *a2 + *(_DWORD *)(a3 + 12) - *(_DWORD *)a4;
  *(void *)&long long v21 = v13;
  DWORD2(v21) = v14;
  long long v22 = 0;
  LOBYTE(v23) = v32;
  uint64_t v15 = *(void *)(a1 + 8);
  if (v32 > 3u)
  {
    if (v32 == 4) {
      llvm::jitlink::aarch32::readAddendArm(v15, (uint64_t)a4, (uint64_t)&v21);
    }
    llvm::jitlink::aarch32::readAddendThumb(v15, (uint64_t)a4, (uint64_t)&v21, (unsigned __int8 *)(a1 + 152), (uint64_t)&v30);
  }
  else
  {
    llvm::jitlink::aarch32::readAddendData(v15, (uint64_t)a4, (uint64_t)&v21, (uint64_t)&v30);
  }
  if (v31)
  {
    uint64_t v17 = (uint64_t)v30;
    goto LABEL_19;
  }
  long long v22 = v30;
  llvm::jitlink::Block::addEdge(a4, &v21);
  char v18 = v31;
  *a5 = 0;
  if (v18)
  {
    long long v19 = v30;
    unint64_t v30 = 0;
    if (v19) {
      (*(void (**)(void *))(*v19 + 8))(v19);
    }
  }
LABEL_20:
  if (v35)
  {
    uint64_t v20 = v34;
    uint64_t v34 = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
  }
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection@<X0>(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a1, (uint64_t)v8);
  if (v9)
  {
    uint64_t v6 = v8[0];
    char v7 = *(unsigned char *)(a3 + 8) | 1;
  }
  else
  {
    if (v8[1] <= (unint64_t)a2) {
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v6 = v8[0] + 40 * a2;
    char v7 = *(unsigned char *)(a3 + 8) & 0xFE;
  }
  *(unsigned char *)(a3 + 8) = v7;
  *(void *)a3 = v6;
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(void *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, void *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a1, (uint64_t)v16);
  if (v17)
  {
    uint64_t v11 = v16[0];
    *(unsigned char *)(a5 + 16) |= 1u;
    *(void *)a5 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if (v15)
    {
      uint64_t v12 = v14[0];
      *(unsigned char *)(a5 + 16) |= 1u;
      *(void *)a5 = v12;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if (v15)
      {
        uint64_t v10 = v14[0];
        v14[0] = 0;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
      }
    }
    if (v17)
    {
      uint64_t v13 = v16[0];
      v16[0] = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
    }
  }
}

void llvm::object::defaultWarningHandler(llvm::object *this, const llvm::Twine *a2)
{
}

{
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
}

{
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
}

{
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
}

{
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
}

{
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
}

{
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(uint64_t a1, int a2)
{
  int v5 = a2;
  uint64_t v6 = 0;
  int v3 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)(a1 + 80), &v5, &v6);
  uint64_t result = 0;
  if (v3)
  {
    if (v6 != *(void *)(a1 + 80) + 16 * *(unsigned int *)(a1 + 96)) {
      return *(void *)(v6 + 8);
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *(unsigned int *)(*result + 32);
  if (v4)
  {
    int v5 = (uint64_t *)*(unsigned __int16 *)(v3 + 46);
    if (v5 != (uint64_t *)40)
    {
      uint64_t v13 = "invalid e_shentsize in ELF header: ";
      int v14 = v5;
      __int16 v15 = 2307;
      LODWORD(v12) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    unint64_t v6 = result[1];
    if (v4 > 0xFFFFFFD7 || v4 + 40 > v6)
    {
      uint64_t v12 = *(unsigned int *)(*result + 32);
      uint64_t v13 = "section header table goes past the end of the file: e_shoff = 0x";
      int v14 = &v12;
      __int16 v15 = 3587;
      int v16 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v10 = v3 + v4;
    unsigned int v11 = *(unsigned __int16 *)(v3 + 48);
    if (!v11) {
      unsigned int v11 = *(_DWORD *)(v10 + 20);
    }
    if (v4 + 40 * (unint64_t)v11 > v6)
    {
      uint64_t v13 = "section table goes past the end of file";
      __int16 v15 = 259;
      LODWORD(v12) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    *(unsigned char *)(a2 + 16) &= ~1u;
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v11;
  }
  else
  {
    uint64_t v8 = result[2];
    uint64_t v9 = result[3];
    if (v8 == v9)
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) &= ~1u;
    }
    else
    {
      *(unsigned char *)(a2 + 16) &= ~1u;
      *(void *)a2 = v8;
      *(void *)(a2 + 8) = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v8) >> 3);
    }
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionStringTable(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, void *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7 = *(unsigned __int16 *)(*a1 + 50);
  if (v7 == 0xFFFF)
  {
    if (!a3)
    {
      uint64_t v12 = "e_shstrndx == SHN_XINDEX, but the section header table is empty";
      __int16 v14 = 259;
      LODWORD(v10[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    unsigned int v7 = *(_DWORD *)(a2 + 24);
    if (v7) {
      goto LABEL_3;
    }
LABEL_9:
    *(unsigned char *)(a6 + 16) &= ~1u;
    uint64_t v9 = a1[6];
    *(void *)a6 = a1[5];
    *(void *)(a6 + 8) = v9;
    return;
  }
  if (!*(_WORD *)(*a1 + 50)) {
    goto LABEL_9;
  }
LABEL_3:
  if (a3 <= v7)
  {
    v10[0] = "section header string table index ";
    void v10[2] = v7;
    __int16 v11 = 2051;
    uint64_t v12 = (const char *)v10;
    uint64_t v13 = " does not exist";
    __int16 v14 = 770;
    int v15 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v8 = a2 + 40 * v7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTable(a1, v8, a4, a5, a6);
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName@<X0>(void *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6 = *a2;
  if (v6)
  {
    if (a4 <= v6)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v13);
      uint64_t v8 = std::string::insert(&v13, 0, "a section ");
      std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      uint64_t v10 = std::string::append(&v14, " has an invalid sh_name (0x");
      std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v16 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = v6;
      v17[0] = __p;
      uint64_t v17[2] = &v12;
      __int16 v18 = 3588;
      long long v19 = v17;
      uint64_t v20 = ") offset which goes past the end of the section name string table";
      __int16 v21 = 770;
      int v22 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    unsigned int v7 = (const char *)(a3 + v6);
    uint64_t result = (void *)strlen(v7);
    *(unsigned char *)(a5 + 16) &= ~1u;
    *(void *)a5 = v7;
    *(void *)(a5 + 8) = result;
  }
  else
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(unsigned char *)(a5 + 16) &= ~1u;
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTable(void *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, void *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4) == 3) {
    goto LABEL_10;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, a2, &v29);
  uint64_t v10 = std::string::insert(&v29, 0, "invalid sh_type for string table section ");
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  unint64_t v12 = std::string::append(&v30, ": expected SHT_STRTAB, but got ");
  std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
  long long v34 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string::size_type v35 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), *(_DWORD *)(a2 + 4));
  v31[0] = &v34;
  _OWORD v31[2] = ELFSectionTypeName;
  v31[3] = v15;
  __int16 v32 = 1284;
  a3(&v28, a4, v31);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::string::size_type v16 = v28.__r_.__value_.__r.__words[0];
  if (!v28.__r_.__value_.__r.__words[0])
  {
LABEL_10:
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<char>(a1, a2, (uint64_t)&v34);
    uint64_t v17 = v34;
    if (v35)
    {
      *(void *)&long long v34 = 0;
      *(unsigned char *)(a5 + 16) |= 1u;
      *(void *)a5 = v17;
    }
    else
    {
      uint64_t v18 = *((void *)&v34 + 1);
      if (!*((void *)&v34 + 1))
      {
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, a2, &v28);
        uint64_t v23 = std::string::insert(&v28, 0, "SHT_STRTAB string table section ");
        std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        char v25 = std::string::append(&v29, " is empty");
        std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        __int16 v32 = 260;
        v31[0] = &v30;
        int v33 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
      }
      if (*(unsigned char *)(*((void *)&v34 + 1) + v34 - 1))
      {
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, a2, &v28);
        long long v19 = std::string::insert(&v28, 0, "SHT_STRTAB string table section ");
        std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        __int16 v21 = std::string::append(&v29, " is non-null terminated");
        std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        __int16 v32 = 260;
        v31[0] = &v30;
        int v33 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
      }
      *(unsigned char *)(a5 + 16) &= ~1u;
      *(void *)a5 = v17;
      *(void *)(a5 + 8) = v18;
    }
    if (v35)
    {
      uint64_t v27 = v34;
      *(void *)&long long v34 = 0;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
  }
  else
  {
    *(unsigned char *)(a5 + 16) |= 1u;
    *(void *)a5 = v16;
  }
}

void llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a1, (uint64_t)v13);
  if (v14)
  {
    std::string::size_type v9 = v13[0];
    v13[0] = 0;
    v12.__r_.__value_.__r.__words[0] = v9;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v12);
    if (v12.__r_.__value_.__r.__words[0]) {
      (*(void (**)(std::string::size_type))(*(void *)v12.__r_.__value_.__l.__data_ + 8))(v12.__r_.__value_.__r.__words[0]);
    }
    std::string::basic_string[abi:nn180100]<0>(a3, "[unknown index]");
  }
  else
  {
    std::to_string(&v11, 0xCCCCCCCCCCCCCCCDLL * ((int64_t)(a2 - v13[0]) >> 3));
    int v5 = std::string::insert(&v11, 0, "[index ");
    std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unsigned int v7 = std::string::append(&v12, "]");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)a3 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    a3[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  if (v14)
  {
    std::string::size_type v10 = v13[0];
    v13[0] = 0;
    if (v10) {
      (*(void (**)(std::string::size_type))(*(void *)v10 + 8))(v10);
    }
  }
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<char>@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  std::string::size_type v6 = *(unsigned int *)(a2 + 16);
  std::string::size_type v5 = *(unsigned int *)(a2 + 20);
  if (__CFADD__(v6, v5))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, a2, &v26);
    unsigned int v7 = std::string::insert(&v26, 0, "section ");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v9 = std::string::append(&v21, " has a sh_offset (0x");
    std::string::size_type v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v24 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v20.__r_.__value_.__r.__words[0] = v6;
    v27[0] = __p;
    std::string v28 = &v20;
    __int16 v29 = 3588;
    v30[0] = v27;
    char v31 = ") + sh_size (0x";
    __int16 v32 = 770;
    v19.__r_.__value_.__r.__words[0] = v5;
    v33[0] = v30;
    long long v34 = &v19;
    __int16 v35 = 3586;
    uint64_t v36 = v33;
    unsigned int v37 = ") that cannot be represented";
    __int16 v38 = 770;
    LODWORD(v18) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (result[1] < (unint64_t)(v5 + v6))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, a2, &v19);
    std::string v11 = std::string::insert(&v19, 0, "section ");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v13 = std::string::append(&v20, " has a sh_offset (0x");
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v17 = v5;
    std::string::size_type v18 = v6;
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    v21.__r_.__value_.__r.__words[2] = (std::string::size_type)&v18;
    __int16 v22 = 3588;
    __p[0] = &v21;
    std::string::size_type v24 = ") + sh_size (0x";
    __int16 v25 = 770;
    v27[0] = __p;
    std::string v28 = (std::string *)&v17;
    __int16 v29 = 3586;
    v30[0] = v27;
    char v31 = ") that is greater than the file size (0x";
    __int16 v32 = 770;
    uint64_t v16 = v3[1];
    v33[0] = v30;
    long long v34 = (std::string *)&v16;
    __int16 v35 = 3586;
    uint64_t v36 = v33;
    unsigned int v37 = ")";
    __int16 v38 = 770;
    int v39 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v15 = *result + v6;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v15;
  *(void *)(a3 + 8) = v5;
  return result;
}

uint64_t llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

const char **std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>(const char **a1, const char **a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    std::string::size_type v5 = *(const void **)a3;
    size_t v6 = *(void *)(a3 + 8);
    do
    {
      if (*v3)
      {
        if (strlen(*v3) == v6 && (!v6 || !memcmp(*v3, v5, v6))) {
          return v3;
        }
      }
      else if (!v6)
      {
        return v3;
      }
      ++v3;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>@<X0>(void *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  if (a2[9] != 8)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v32);
    std::string::size_type v12 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v14 = std::string::append(&v34, " has invalid sh_entsize: expected ");
    std::string::size_type v15 = (std::string *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __int16 v38 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v36.__r_.__value_.__r.__words[0] = 8;
    v40[0] = __p;
    size_t v41 = &v36;
    __int16 v42 = 2564;
    v43[0] = v40;
    uint64_t v44 = (std::string *)", but got ";
    __int16 v45 = 770;
    uint64_t v16 = (const char *)a2[9];
    int64x2_t v46 = v43;
    unint64_t v47 = v16;
    __int16 v48 = 2050;
    LODWORD(v31.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v6 = a2[5];
  if ((v6 & 7) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v36);
    unsigned int v7 = std::string::insert(&v36, 0, "section ");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v9 = std::string::append(&v32, " has an invalid sh_size (");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v34;
    __int16 v38 = (std::string *)v6;
    __int16 v39 = 2052;
    v40[0] = __p;
    size_t v41 = (std::string *)") which is not a multiple of its sh_entsize (";
    __int16 v42 = 770;
    std::string v11 = (std::string *)a2[9];
    v43[0] = v40;
    uint64_t v44 = v11;
    __int16 v45 = 2050;
    int64x2_t v46 = v43;
    unint64_t v47 = ")";
    __int16 v48 = 770;
    LODWORD(v31.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v17 = a2[4];
  if (__CFADD__(v17, v6))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v36);
    std::string::size_type v18 = std::string::insert(&v36, 0, "section ");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::string v20 = std::string::append(&v32, " has a sh_offset (0x");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v31.__r_.__value_.__r.__words[0] = v17;
    __p[0] = &v34;
    __int16 v38 = &v31;
    __int16 v39 = 3588;
    v40[0] = __p;
    size_t v41 = (std::string *)") + sh_size (0x";
    __int16 v42 = 770;
    v30.__r_.__value_.__r.__words[0] = v6;
    v43[0] = v40;
    uint64_t v44 = &v30;
    __int16 v45 = 3586;
    int64x2_t v46 = v43;
    unint64_t v47 = ") that cannot be represented";
    __int16 v48 = 770;
    LODWORD(v29) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (result[1] < (unint64_t)(v6 + v17))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v30);
    __int16 v22 = std::string::insert(&v30, 0, "section ");
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v24 = std::string::append(&v31, " has a sh_offset (0x");
    std::string::size_type v25 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v28 = v6;
    std::string::size_type v29 = v17;
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    v32.__r_.__value_.__r.__words[2] = (std::string::size_type)&v29;
    __int16 v33 = 3588;
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    v34.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    __int16 v35 = 770;
    __p[0] = &v34;
    __int16 v38 = (std::string *)&v28;
    __int16 v39 = 3586;
    v40[0] = __p;
    size_t v41 = (std::string *)") that is greater than the file size (0x";
    __int16 v42 = 770;
    uint64_t v27 = v4[1];
    v43[0] = v40;
    uint64_t v44 = (std::string *)&v27;
    __int16 v45 = 3586;
    int64x2_t v46 = v43;
    unint64_t v47 = ")";
    __int16 v48 = 770;
    int v49 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v26 = *result + v17;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v26;
  *(void *)(a3 + 8) = v6 >> 3;
  return result;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(uint64_t a1, int a2)
{
  int v5 = a2;
  uint64_t v6 = 0;
  int v3 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)(a1 + 104), &v5, &v6);
  uint64_t result = 0;
  if (v3)
  {
    if (v6 != *(void *)(a1 + 104) + 16 * *(unsigned int *)(a1 + 120)) {
      return *(void *)(v6 + 8);
    }
  }
  return result;
}

void llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>()
{
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(a1, a2, (uint64_t)v22);
  if (v23)
  {
    uint64_t v8 = v22[0];
    char v9 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    if (v22[1] <= (unint64_t)a3)
    {
      uint64_t v11 = 16 * a3;
      v12[0] = "can't read an entry at 0x";
      uint64_t v12[2] = &v11;
      __int16 v13 = 3587;
      v14[0] = v12;
      uint64_t v14[2] = ": it goes past the end of the section (0x";
      __int16 v15 = 770;
      uint64_t v10 = a2[5];
      v16[0] = v14;
      uint64_t v16[2] = &v10;
      __int16 v17 = 3586;
      std::string::size_type v18 = v16;
      std::string::size_type v19 = ")";
      __int16 v20 = 770;
      int v21 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v8 = v22[0] + 16 * a3;
    char v9 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v9;
  *(void *)a4 = v8;
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>@<X0>(void *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  if (a2[9] != 16)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v32);
    std::string::size_type v12 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v14 = std::string::append(&v34, " has invalid sh_entsize: expected ");
    __int16 v15 = (std::string *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __int16 v38 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v36.__r_.__value_.__r.__words[0] = 16;
    v40[0] = __p;
    size_t v41 = &v36;
    __int16 v42 = 2564;
    v43[0] = v40;
    uint64_t v44 = (std::string *)", but got ";
    __int16 v45 = 770;
    uint64_t v16 = (const char *)a2[9];
    int64x2_t v46 = v43;
    unint64_t v47 = v16;
    __int16 v48 = 2050;
    LODWORD(v31.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v6 = a2[5];
  if ((v6 & 0xF) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v36);
    unsigned int v7 = std::string::insert(&v36, 0, "section ");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    char v9 = std::string::append(&v32, " has an invalid sh_size (");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v34;
    __int16 v38 = (std::string *)v6;
    __int16 v39 = 2052;
    v40[0] = __p;
    size_t v41 = (std::string *)") which is not a multiple of its sh_entsize (";
    __int16 v42 = 770;
    uint64_t v11 = (std::string *)a2[9];
    v43[0] = v40;
    uint64_t v44 = v11;
    __int16 v45 = 2050;
    int64x2_t v46 = v43;
    unint64_t v47 = ")";
    __int16 v48 = 770;
    LODWORD(v31.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v17 = a2[4];
  if (__CFADD__(v17, v6))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v36);
    std::string::size_type v18 = std::string::insert(&v36, 0, "section ");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    __int16 v20 = std::string::append(&v32, " has a sh_offset (0x");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v31.__r_.__value_.__r.__words[0] = v17;
    __p[0] = &v34;
    __int16 v38 = &v31;
    __int16 v39 = 3588;
    v40[0] = __p;
    size_t v41 = (std::string *)") + sh_size (0x";
    __int16 v42 = 770;
    v30.__r_.__value_.__r.__words[0] = v6;
    v43[0] = v40;
    uint64_t v44 = &v30;
    __int16 v45 = 3586;
    int64x2_t v46 = v43;
    unint64_t v47 = ") that cannot be represented";
    __int16 v48 = 770;
    LODWORD(v29) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (result[1] < (unint64_t)(v6 + v17))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v30);
    __int16 v22 = std::string::insert(&v30, 0, "section ");
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    uint64_t v24 = std::string::append(&v31, " has a sh_offset (0x");
    std::string::size_type v25 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v28 = v6;
    std::string::size_type v29 = v17;
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    v32.__r_.__value_.__r.__words[2] = (std::string::size_type)&v29;
    __int16 v33 = 3588;
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    v34.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    __int16 v35 = 770;
    __p[0] = &v34;
    __int16 v38 = (std::string *)&v28;
    __int16 v39 = 3586;
    v40[0] = __p;
    size_t v41 = (std::string *)") that is greater than the file size (0x";
    __int16 v42 = 770;
    uint64_t v27 = v4[1];
    v43[0] = v40;
    uint64_t v44 = (std::string *)&v27;
    __int16 v45 = 3586;
    int64x2_t v46 = v43;
    unint64_t v47 = ")";
    __int16 v48 = 770;
    int v49 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v26 = *result + v17;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v26;
  *(void *)(a3 + 8) = v6 >> 4;
  return result;
}

void llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>::~stream_operator_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::write_integer(a2, **(unsigned __int16 **)(a1 + 8), 0, 0);
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::prepare(uint64_t a1@<X0>, void **a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(*(void **)(a1 + 24), (uint64_t)__p);
  if ((v18 & 1) != 0
    || (*(_OWORD *)(a1 + 32) = *(_OWORD *)__p,
        uint64_t v4 = *(void **)(a1 + 24),
        uint64_t v5 = *(void *)(a1 + 32),
        unint64_t v6 = *(void *)(a1 + 40),
        __int16 v15 = llvm::object::defaultWarningHandler,
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionStringTable(v4, v5, v6, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v15, (uint64_t)__p), (v18 & 1) != 0))
  {
LABEL_16:
    *a2 = __p[0];
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)__p;
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      uint64_t v8 = 40 * v7;
      char v9 = (unsigned int *)(*(void *)(a1 + 32) + 24);
      do
      {
        std::string::size_type v10 = v9 - 6;
        int v11 = *(v9 - 5);
        if (v11 == 2)
        {
          if (*(void *)(a1 + 48))
          {
            std::operator+<char>();
            llvm::make_error<llvm::jitlink::JITLinkError,std::string>();
          }
          *(void *)(a1 + 48) = v10;
          int v11 = *(v9 - 5);
        }
        if (v11 == 18)
        {
          unint64_t v12 = *v9;
          if (*(void *)(a1 + 40) <= v12) {
            llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
          }
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable(*(void **)(a1 + 24), v10, (uint64_t)__p);
          if (v18) {
            goto LABEL_16;
          }
          __int16 v15 = (void (*)(llvm::object *, const llvm::Twine *))(*(void *)(a1 + 32)
                                                                                    + 40 * v12);
          long long v16 = *(_OWORD *)__p;
          llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::try_emplace<llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>(a1 + 128, &v15, &v16, (uint64_t)&v14);
          if (v18)
          {
            std::string::size_type v13 = __p[0];
            __p[0] = 0;
            if (v13) {
              (*(void (**)(void *))(*(void *)v13 + 8))(v13);
            }
          }
        }
        v9 += 10;
        v8 -= 40;
      }
      while (v8);
    }
    *a2 = 0;
  }
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::graphifySections@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 40))
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(result + 80);
    unsigned int v6 = 1;
    do
    {
      uint64_t v7 = (unsigned int *)(*(void *)(v3 + 32) + 40 * v4);
      uint64_t result = (uint64_t)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(*(void **)(v3 + 24), v7, *(void *)(v3 + 56), *(void *)(v3 + 64), (uint64_t)&v27);
      if (v28)
      {
        uint64_t v14 = v27;
        *(void *)&long long v27 = 0;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned int *))(*(void *)v3 + 40))(v3, v7);
        if ((result & 1) != 0
          || !v7[1]
          || !*(unsigned char *)(v3 + 72)
          && (long long v25 = v27,
              uint64_t result = (uint64_t)std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90], (uint64_t)&v25), (char **)result != &llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90]))
        {
          int v15 = 6;
          goto LABEL_20;
        }
        uint64_t SectionByName = llvm::jitlink::LinkGraph::findSectionByName(*(void *)(v3 + 8), v27, *((uint64_t *)&v27 + 1), v8);
        if (!SectionByName) {
          llvm::jitlink::LinkGraph::createSection();
        }
        if (v7[1] == 8)
        {
          uint64_t v10 = *(void *)(v3 + 8);
          uint64_t v11 = v7[5];
          uint64_t v12 = v7[3];
          uint64_t v24 = v7[8];
          *(void *)&long long v25 = v12;
          *(void *)&long long v22 = v11;
          uint64_t v23 = 0;
          std::string::size_type v13 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v10, SectionByName, (uint64_t *)&v22, (uint64_t *)&v25, (unint64_t *)&v24, &v23);
LABEL_17:
          LODWORD(v25) = v6 - 1;
          uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(v5, &v25);
          int v15 = 0;
          *(void *)(result + 8) = v13;
          goto LABEL_20;
        }
        uint64_t result = (uint64_t)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<char>(*(void **)(v3 + 24), (uint64_t)v7, (uint64_t)&v25);
        if ((v26 & 1) == 0)
        {
          uint64_t v16 = *(void *)(v3 + 8);
          uint64_t v17 = v7[3];
          uint64_t v18 = v7[8];
          long long v22 = v25;
          uint64_t v23 = v18;
          uint64_t v24 = v17;
          uint64_t v21 = 0;
          std::string::size_type v13 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v16, SectionByName, (uint64_t *)&v22, &v24, (unint64_t *)&v23, &v21);
          if (v26)
          {
            uint64_t v19 = v25;
            *(void *)&long long v25 = 0;
            if (v19) {
              (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
            }
          }
          goto LABEL_17;
        }
        uint64_t v14 = v25;
      }
      *a2 = v14;
      int v15 = 1;
LABEL_20:
      if (v28)
      {
        uint64_t result = v27;
        *(void *)&long long v27 = 0;
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      if (v15 != 6 && v15) {
        return result;
      }
      uint64_t v4 = v6;
    }
    while (*(void *)(v3 + 40) != v6++);
  }
  *a2 = 0;
  return result;
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::graphifySymbols(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned int **)(a1 + 48);
  if (v3)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(*(void **)(a1 + 24), v3, (uint64_t)&v61);
    if (v63)
    {
      *a2 = v61;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTableForSymtab(*(void **)(a1 + 24), *(void *)(a1 + 48), *(void *)(a1 + 32), *(void *)(a1 + 40), (uint64_t)v59);
      if (v60)
      {
        uint64_t v5 = v59[0];
        v59[0] = 0;
        goto LABEL_47;
      }
      uint64_t v5 = v62;
      if (v62)
      {
        uint64_t v6 = 0;
        int64x2_t v40 = (uint64_t *)(a1 + 104);
        unsigned int v7 = 1;
        while (1)
        {
          uint64_t v8 = v61 + 16 * v6;
          if ((*(unsigned char *)(v8 + 12) & 0xF) != 4) {
            break;
          }
LABEL_17:
          uint64_t v6 = v7;
          BOOL v24 = v62 == v7++;
          if (v24)
          {
            uint64_t v5 = 0;
            goto LABEL_47;
          }
        }
        llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getName((llvm::object *)v8, v59[0], v59[1], (uint64_t)&v56);
        if (v58)
        {
          uint64_t v22 = v56;
          uint64_t v56 = 0;
        }
        else
        {
          unsigned int v9 = *(unsigned __int8 *)(v8 + 12);
          unsigned int v10 = v9 & 0xF;
          if (v10 == 5 || *(unsigned __int16 *)(v8 + 14) == 65522)
          {
            uint64_t v11 = *(void *)(a1 + 8);
            uint64_t CommonSection = llvm::jitlink::ELFLinkGraphBuilderBase::getCommonSection((llvm::jitlink::ELFLinkGraphBuilderBase *)a1);
            uint64_t v14 = *(unsigned int *)(v8 + 4);
            uint64_t v13 = *(unsigned int *)(v8 + 8);
            uint64_t v54 = 0;
            v50[0] = v13;
            v49[0] = v14;
            v47[0] = 0;
            int v15 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v11, CommonSection, v50, &v54, (unint64_t *)v49, v47);
            uint64_t v16 = v56;
            uint64_t v17 = v57;
            uint64_t v18 = *(unsigned int *)(v8 + 8);
            uint64_t v19 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v11, 40, 3);
            *uint64_t v19 = v16;
            v19[1] = v17;
            long long v19[2] = v15;
            _OWORD v19[3] = 0x200000000000000;
            _OWORD v19[4] = v18;
            uint64_t v20 = v15[2] + 56;
            v50[0] = (uint64_t)v19;
            llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v20, v50, (uint64_t)&v54);
            LODWORD(v54) = v7 - 1;
            *((void *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(v40, &v54)+ 1) = v19;
            int v21 = 8;
            goto LABEL_13;
          }
          if (!*(_WORD *)(v8 + 14))
          {
            if (v9 >= 0x10)
            {
              unsigned int v34 = v9 >> 4;
              if (v34 - 1 >= 2)
              {
                v47[0] = (uint64_t)"Invalid symbol binding ";
                __int16 v48 = 259;
                int v37 = *(unsigned __int8 *)(v8 + 12) >> 4;
                __int16 v46 = 265;
                LODWORD(v45[0]) = v37;
                llvm::operator+(v47, v45, (uint64_t)v49);
                long long v43 = " for external symbol ";
                __int16 v44 = 259;
                llvm::operator+(v49, (uint64_t *)&v43, (uint64_t)v50);
                __int16 v42 = 261;
                v41[0] = v56;
                v41[1] = v57;
                llvm::operator+(v50, v41, (uint64_t)&v54);
                getErrorErrorCat();
                llvm::make_error<llvm::StringError,llvm::Twine,std::error_code>();
              }
              __int16 v35 = llvm::jitlink::LinkGraph::addExternalSymbol(*(void *)(a1 + 8), v56, v57, *(unsigned int *)(v8 + 8), v34 == 2);
              goto LABEL_43;
            }
LABEL_34:
            int v21 = 0;
            goto LABEL_13;
          }
          BOOL v24 = v10 < 4 || v10 == 6;
          if (!v24) {
            goto LABEL_34;
          }
          llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolLinkageAndScope(v8, v56, v57, (uint64_t)&v54);
          if ((v55 & 1) == 0)
          {
            char v25 = v54;
            char v26 = BYTE1(v54);
            int v27 = *(unsigned __int16 *)(v8 + 14);
            if (v27 != 0xFFFF) {
              goto LABEL_28;
            }
            v50[0] = *(void *)(a1 + 48);
            uint64_t v54 = 0;
            int v21 = 8;
            if (!llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)(a1 + 128), v50, &v54)|| v54 == *(void *)(a1 + 128) + 24 * *(unsigned int *)(a1 + 144))
            {
LABEL_13:
              if (v58)
              {
                uint64_t v23 = v56;
                uint64_t v56 = 0;
                if (v23) {
                  (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
                }
              }
              if ((v21 | 8) != 8) {
                goto LABEL_48;
              }
              goto LABEL_17;
            }
            uint64_t v36 = *(void *)(v54 + 16);
            v51[0] = *(void *)(v54 + 8);
            v51[1] = v36;
            char v52 = 1;
            uint64_t v53 = 0;
            llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)1,false>>(v7 - 1, v51, (uint64_t)&v54);
            if ((v55 & 1) == 0)
            {
              int v27 = v54;
LABEL_28:
              GraphBlocuint64_t k = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, v27);
              if (GraphBlock)
              {
                uint64_t v29 = GraphBlock;
                uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v8);
                uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v8, v30);
                uint64_t v32 = *(void *)(a1 + 8);
                if (v57) {
                  __int16 v33 = llvm::jitlink::LinkGraph::addDefinedSymbol(v32, v29, v31, v56, v57, *(unsigned int *)(v8 + 8), v25, v26, (*(unsigned char *)(v8 + 12) & 0xF) == 2, 0);
                }
                else {
                  __int16 v33 = llvm::jitlink::LinkGraph::addAnonymousSymbol(v32, v29, v31, *(unsigned int *)(v8 + 8), 0, 0);
                }
                __int16 v35 = v33;
                void v33[3] = v33[3] & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)v30 << 63);
LABEL_43:
                LODWORD(v54) = v7 - 1;
                int v21 = 0;
                *((void *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(v40, &v54)+ 1) = v35;
                goto LABEL_13;
              }
              goto LABEL_34;
            }
          }
          uint64_t v22 = v54;
        }
        *a2 = v22;
        int v21 = 1;
        goto LABEL_13;
      }
LABEL_47:
      *a2 = v5;
LABEL_48:
      if (v60)
      {
        uint64_t v38 = v59[0];
        v59[0] = 0;
        if (v38) {
          (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
        }
      }
      if (v63)
      {
        uint64_t v39 = v61;
        uint64_t v61 = 0;
        if (v39) {
          (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
        }
      }
    }
  }
  else
  {
    *a2 = 0;
  }
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a1, (uint64_t)v8);
  if (v9)
  {
    uint64_t v7 = v8[0];
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v7;
  }
  else
  {
    uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if (v9)
    {
      uint64_t result = (void *)v8[0];
      v8[0] = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>(a1, a2, (uint64_t)&v31);
  uint64_t v11 = v31;
  if (v33)
  {
    uint64_t v31 = 0;
    *(unsigned char *)(a5 + 16) |= 1u;
  }
  else
  {
    uint64_t v12 = (unint64_t *)a2[6];
    if (a4 <= (unint64_t)v12)
    {
      int v27 = "invalid section index: ";
      char v28 = v12;
      __int16 v29 = 2051;
      LODWORD(v23[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v13 = a3 + 40 * v12;
    int v14 = *(_DWORD *)(v13 + 4);
    if (v14 != 2 && v14 != 11)
    {
      ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), v14);
      __int16 v26 = 1283;
      v23[0] = "SHT_SYMTAB_SHNDX section is linked with ";
      BOOL v24 = ELFSectionTypeName;
      uint64_t v25 = v18;
      int v27 = (const char *)v23;
      char v28 = (unint64_t *)" section (expected SHT_SYMTAB/SHT_DYNSYM)";
      __int16 v29 = 770;
      LODWORD(v20[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v16 = v32;
    unint64_t v22 = (unint64_t)*(unsigned int *)(v13 + 20) >> 4;
    if (v32 != v22)
    {
      uint64_t v19 = v32;
      v20[0] = "SHT_SYMTAB_SHNDX has ";
      long long v20[2] = &v19;
      __int16 v21 = 2563;
      v23[0] = v20;
      BOOL v24 = " entries, but the symbol table associated has ";
      __int16 v26 = 770;
      int v27 = (const char *)v23;
      char v28 = &v22;
      __int16 v29 = 3074;
      int v30 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    *(unsigned char *)(a5 + 16) &= ~1u;
    *(void *)(a5 + 8) = v16;
  }
  *(void *)a5 = v11;
  if (v33)
  {
    uint64_t result = v31;
    uint64_t v31 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>@<X0>(void *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  if (a2[9] != 4)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v32);
    uint64_t v12 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = std::string::append(&v34, " has invalid sh_entsize: expected ");
    int v15 = (std::string *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    uint64_t v38 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v36.__r_.__value_.__r.__words[0] = 4;
    v40[0] = __p;
    size_t v41 = &v36;
    __int16 v42 = 2564;
    v43[0] = v40;
    __int16 v44 = (std::string *)", but got ";
    __int16 v45 = 770;
    uint64_t v16 = (const char *)a2[9];
    __int16 v46 = v43;
    unint64_t v47 = v16;
    __int16 v48 = 2050;
    LODWORD(v31.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v6 = a2[5];
  if ((v6 & 3) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v36);
    uint64_t v7 = std::string::insert(&v36, 0, "section ");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    char v9 = std::string::append(&v32, " has an invalid sh_size (");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v34;
    uint64_t v38 = (std::string *)v6;
    __int16 v39 = 2052;
    v40[0] = __p;
    size_t v41 = (std::string *)") which is not a multiple of its sh_entsize (";
    __int16 v42 = 770;
    uint64_t v11 = (std::string *)a2[9];
    v43[0] = v40;
    __int16 v44 = v11;
    __int16 v45 = 2050;
    __int16 v46 = v43;
    unint64_t v47 = ")";
    __int16 v48 = 770;
    LODWORD(v31.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v17 = a2[4];
  if (__CFADD__(v17, v6))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v36);
    uint64_t v18 = std::string::insert(&v36, 0, "section ");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&v32, " has a sh_offset (0x");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v31.__r_.__value_.__r.__words[0] = v17;
    __p[0] = &v34;
    uint64_t v38 = &v31;
    __int16 v39 = 3588;
    v40[0] = __p;
    size_t v41 = (std::string *)") + sh_size (0x";
    __int16 v42 = 770;
    v30.__r_.__value_.__r.__words[0] = v6;
    v43[0] = v40;
    __int16 v44 = &v30;
    __int16 v45 = 3586;
    __int16 v46 = v43;
    unint64_t v47 = ") that cannot be represented";
    __int16 v48 = 770;
    LODWORD(v29) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (result[1] < (unint64_t)(v6 + v17))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v30);
    unint64_t v22 = std::string::insert(&v30, 0, "section ");
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    BOOL v24 = std::string::append(&v31, " has a sh_offset (0x");
    std::string::size_type v25 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v28 = v6;
    std::string::size_type v29 = v17;
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    v32.__r_.__value_.__r.__words[2] = (std::string::size_type)&v29;
    __int16 v33 = 3588;
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    v34.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    __int16 v35 = 770;
    __p[0] = &v34;
    uint64_t v38 = (std::string *)&v28;
    __int16 v39 = 3586;
    v40[0] = __p;
    size_t v41 = (std::string *)") that is greater than the file size (0x";
    __int16 v42 = 770;
    uint64_t v27 = v4[1];
    v43[0] = v40;
    __int16 v44 = (std::string *)&v27;
    __int16 v45 = 3586;
    __int16 v46 = v43;
    unint64_t v47 = ")";
    __int16 v48 = 770;
    int v49 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v26 = *result + v17;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v26;
  *(void *)(a3 + 8) = v6 >> 2;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::try_emplace<llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)a1, a2, &v12);
  char v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::InsertIntoBucketImpl<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>(a1, (uint64_t)a2, a2, v12);
    char v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(_OWORD *)(result + 8) = *a3;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 24 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      char v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          char v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 24 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::InsertIntoBucketImpl<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::grow(a1, v7);
  char v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::grow(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::moveFromOldBuckets(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)v5, (void *)a2, &v10);
      char v9 = v10;
      *uint64_t v10 = *(void *)a2;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(uint64_t *a1, _DWORD *a2)
{
  int v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>(a1, a2, &v7);
  inserted = v7;
  if ((v4 & 1) == 0)
  {
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::InsertIntoBucketImpl<unsigned int>((uint64_t)a1, (uint64_t)a2, a2, v7);
    _DWORD *inserted = *a2;
    *((void *)inserted + 1) = 0;
  }
  return inserted;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::grow(a1, v7);
  char v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_DWORD *llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::moveFromOldBuckets(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -1;
      result += 4;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_DWORD **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -1;
      v7 += 4;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      uint64_t v10 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)v5, (_DWORD *)a2, &v10);
      char v9 = v10;
      *uint64_t v10 = *(_DWORD *)a2;
      *((void *)v9 + 1) = *(void *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTableForSymtab(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6 = *(_DWORD *)(a2 + 4);
  if (v6 != 2 && v6 != 11)
  {
    v9[0] = "invalid sh_type for symbol table, expected SHT_SYMTAB or SHT_DYNSYM";
    __int16 v10 = 259;
    int v11 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  unint64_t v8 = *(unsigned int *)(a2 + 24);
  if (a4 <= v8)
  {
    v9[0] = "invalid section index: ";
    uint64_t v9[2] = v8;
    __int16 v10 = 2051;
    int v11 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  v9[0] = llvm::object::defaultWarningHandler;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTable(a1, a3 + 40 * v8, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)v9, a5);
}

size_t llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getName@<X0>(llvm::object *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = *(unsigned int *)a1;
  if (a3 <= v5)
  {
    llvm::object::object_category(a1);
    memset(__p, 0, sizeof(__p));
    int v10 = 0;
    char v14 = 0;
    uint64_t v15 = 0;
    int v16 = 1;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    char v9 = &unk_270DBD6E0;
    std::string::size_type v17 = __p;
    llvm::raw_ostream::SetUnbuffered(&v9);
    v19[0] = &unk_270DBEDC0;
    v19[1] = "st_name (0x%x) is past the end of the string table of size 0x%zx";
    int v20 = v5;
    unint64_t v21 = a3;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v9, (uint64_t)v19);
    operator new();
  }
  uint64_t v6 = a2 + v5;
  if (a2) {
    size_t result = strlen((const char *)(a2 + v5));
  }
  else {
    size_t result = 0;
  }
  *(unsigned char *)(a4 + 16) &= ~1u;
  *(void *)a4 = v6;
  *(void *)(a4 + 8) = result;
  return result;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilderBase::getCommonSection(llvm::jitlink::ELFLinkGraphBuilderBase *this)
{
  uint64_t result = *((void *)this + 2);
  if (!result) {
    llvm::jitlink::LinkGraph::createSection();
  }
  return result;
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolLinkageAndScope(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v5 = (unint64_t)*(unsigned __int8 *)(a1 + 12) >> 4;
  if ((int)v5 > 1)
  {
    if (v5 != 2 && v5 != 10) {
      goto LABEL_11;
    }
    __int16 v6 = 0;
    LOWORD(v5) = 1;
    __int16 v7 = 1;
  }
  else
  {
    if (v5)
    {
      if (v5 == 1)
      {
        __int16 v6 = 0;
        __int16 v7 = 0;
        goto LABEL_13;
      }
LABEL_11:
      v10[0] = "Unrecognized symbol binding ";
      uint64_t v11 = v5;
      __int16 v12 = 2307;
      v13[0] = v10;
      char v14 = " for ";
      __int16 v15 = 770;
      int v16 = v13;
      uint64_t v17 = a2;
      uint64_t v18 = a3;
      __int16 v19 = 1282;
      getErrorErrorCat();
      operator new();
    }
    __int16 v7 = 0;
    LOWORD(v5) = 2;
    __int16 v6 = 2;
  }
LABEL_13:
  int v9 = *(unsigned char *)(a1 + 13) & 3;
  if (v9 == 1)
  {
    v10[0] = "Unrecognized symbol visibility ";
    uint64_t v11 = 1;
    __int16 v12 = 2307;
    v13[0] = v10;
    char v14 = " for ";
    __int16 v15 = 770;
    int v16 = v13;
    uint64_t v17 = a2;
    uint64_t v18 = a3;
    __int16 v19 = 1282;
    getErrorErrorCat();
    operator new();
  }
  if (v9 != 2) {
    LOWORD(v5) = v6;
  }
  *(unsigned char *)(a4 + 8) &= ~1u;
  *(_WORD *)a4 = v7 | ((_WORD)v5 << 8);
}

uint64_t *llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)1,false>>@<X0>(unsigned int a1@<W1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!*a2)
  {
    v11[0] = "found an extended symbol index (";
    unint64_t v12 = a1;
    __int16 v13 = 2051;
    char v14 = v11;
    p_p = (std::string *)"), but unable to locate the extended symbol index table";
    __int16 v16 = 770;
    LODWORD(v9[0]) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v4 = a1;
  uint64_t result = llvm::object::DataRegion<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>::operator[](a2, a1, (uint64_t)&v18);
  if (v19)
  {
    v9[0] = "unable to read an extended symbol table at index ";
    uint64_t v9[2] = v4;
    __int16 v10 = 2051;
    v11[0] = v9;
    unint64_t v12 = (unint64_t)": ";
    __int16 v13 = 770;
    uint64_t v6 = v18;
    uint64_t v18 = 0;
    uint64_t v7 = v6;
    llvm::toString(&v7, &__p);
    char v14 = v11;
    p_p = &__p;
    __int16 v16 = 1026;
    int v17 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v18;
  return result;
}

uint64_t llvm::format_object<unsigned int,unsigned long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t *llvm::object::DataRegion<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>::operator[]@<X0>(uint64_t *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)result + 16))
  {
    if (result[1] <= a2)
    {
      v5[0] = "the index is greater than or equal to the number of entries (";
      _OWORD v5[2] = result + 1;
      __int16 v6 = 3075;
      uint64_t v7 = (const char *)v5;
      unint64_t v8 = ")";
      __int16 v9 = 770;
      int v10 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v4 = *result;
  }
  else
  {
    uint64_t v4 = *result;
    if (*result + 4 * a2 + 4 > result[3])
    {
      uint64_t v7 = "can't read past the end of the file";
      __int16 v9 = 259;
      LODWORD(v5[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = *(_DWORD *)(v4 + 4 * a2);
  return result;
}

void llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)0>::~ELFLinkGraphBuilder_aarch32(uint64_t a1)
{
  *(void *)a1 = &unk_270DBED10;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x263E500B0);
}

void llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)0>::addRelocations(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    unint64_t v5 = *(unsigned int **)(a1 + 32);
    __int16 v6 = &v5[10 * v3];
    while (v5[1] != 150994944)
    {
      *a2 = 0;
LABEL_27:
      v5 += 10;
      if (v5 == v6) {
        goto LABEL_37;
      }
    }
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(*(void **)(a1 + 24), bswap32(v5[7]), (uint64_t)&v20);
    if (v21)
    {
      int v10 = v20;
      *a2 = v20;
      goto LABEL_26;
    }
    uint64_t v7 = *(void **)(a1 + 24);
    *(void *)&long long v15 = llvm::object::defaultWarningHandler;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName(v7, v20, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v15, (uint64_t)&v18);
    if (v19)
    {
      int v10 = (unsigned int *)v18;
      *(void *)&long long v18 = 0;
      *a2 = v10;
    }
    else
    {
      if (*(unsigned char *)(a1 + 72)
        || (long long v15 = v18,
            std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90], (uint64_t)&v15) == (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90]))
      {
        if (!(*(unsigned int (**)(uint64_t, unsigned int *))(*(void *)a1 + 40))(a1, v20))
        {
          GraphBlocuint64_t k = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, bswap32(v5[7]));
          if (!GraphBlock)
          {
            __int16 v17 = 1283;
            *(void *)&long long v15 = "Refencing a section that wasn't added to the graph: ";
            long long v16 = v18;
            getErrorErrorCat();
            operator new();
          }
          __int16 v9 = (void *)GraphBlock;
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,false>>(*(void **)(a1 + 24), v5, (uint64_t)&v15);
          int v10 = (unsigned int *)v15;
          if (v16)
          {
            *(void *)&long long v15 = 0;
          }
          else
          {
            if (*((void *)&v15 + 1))
            {
              uint64_t v11 = 8 * *((void *)&v15 + 1);
              while (1)
              {
                llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)0>::addSingleRelRelocation(a1, (uint64_t)v10, (uint64_t)v20, v9, a2);
                if (*a2) {
                  break;
                }
                v10 += 2;
                v11 -= 8;
                if (!v11)
                {
                  int v10 = 0;
                  goto LABEL_32;
                }
              }
              int v10 = *a2;
              goto LABEL_33;
            }
            int v10 = 0;
          }
LABEL_32:
          *a2 = v10;
LABEL_33:
          if (v16)
          {
            uint64_t v14 = v15;
            *(void *)&long long v15 = 0;
            if (v14) {
              (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
            }
          }
          goto LABEL_20;
        }
      }
      int v10 = 0;
      *a2 = 0;
    }
LABEL_20:
    if (v19)
    {
      uint64_t v12 = v18;
      *(void *)&long long v18 = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
    }
    if (v21)
    {
      __int16 v13 = v20;
      uint64_t v20 = 0;
      if (v13) {
        (*(void (**)(unsigned int *))(*(void *)v13 + 8))(v13);
      }
    }
LABEL_26:
    if (v10) {
      return;
    }
    goto LABEL_27;
  }
LABEL_37:
  *a2 = 0;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)0>::makeTargetFlags(uint64_t a1, uint64_t a2)
{
  return HIBYTE(*(_DWORD *)(a2 + 4)) & 1;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)0>::getRawOffset(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 4) & 0xFEFFFFFF);
}

BOOL llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)0>::excludeSection(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 16777328;
}

void llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)0>::addSingleRelRelocation(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  unsigned int v10 = bswap32(*(_DWORD *)(a2 + 4));
  unsigned int v11 = v10 >> 8;
  unsigned int v28 = v10 >> 8;
  if (v10 > 0xFF)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(*(void **)(a1 + 24), *(unsigned int **)(a1 + 48), v11, (uint64_t)&v31);
    if (v32)
    {
      long long v16 = v31;
      std::string v31 = 0;
LABEL_21:
      *a5 = v16;
      goto LABEL_22;
    }
  }
  else
  {
    char v32 = 0;
    std::string v31 = 0;
  }
  LODWORD(v33) = v11;
  *(void *)&long long v20 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)(a1 + 104), &v33, &v20)|| (void)v20 == *(void *)(a1 + 104) + 16 * *(unsigned int *)(a1 + 120)|| (uint64_t v12 = *(void *)(v20 + 8)) == 0)
  {
    int v15 = *(_DWORD *)(a1 + 112);
    *(void *)&long long v20 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {0}, shndx: {1} Size of table: {2}";
    *((void *)&v20 + 1) = 113;
    char v21 = v27;
    uint64_t v22 = 3;
    v23[0] = &unk_270DBEB80;
    v23[1] = &v28;
    v24[0] = &unk_270DBEE20;
    v24[1] = (char *)v31 + 14;
    std::string::size_type v25 = &unk_270DBE8C8;
    int v26 = v15;
    v27[0] = v23;
    v27[1] = v24;
    void v27[2] = &v25;
    getErrorErrorCat();
    operator new();
  }
  llvm::jitlink::getJITLinkEdgeKind((char *)&v33, *(unsigned __int8 *)(a2 + 7));
  if (v34)
  {
    long long v16 = v33;
    goto LABEL_21;
  }
  unsigned int v13 = bswap32(*(_DWORD *)a2) + bswap32(*(_DWORD *)(a3 + 12)) - *(_DWORD *)a4;
  *(void *)&long long v20 = v12;
  DWORD2(v20) = v13;
  char v21 = 0;
  LOBYTE(v22) = (_BYTE)v33;
  uint64_t v14 = *(void *)(a1 + 8);
  if (v33 > 3u)
  {
    if (v33 == 4) {
      llvm::jitlink::aarch32::readAddendArm(v14, (uint64_t)a4, (uint64_t)&v20);
    }
    llvm::jitlink::aarch32::readAddendThumb(v14, (uint64_t)a4, (uint64_t)&v20, (unsigned __int8 *)(a1 + 152), (uint64_t)&v29);
  }
  else
  {
    llvm::jitlink::aarch32::readAddendData(v14, (uint64_t)a4, (uint64_t)&v20, (uint64_t)&v29);
  }
  if (v30)
  {
    long long v16 = v29;
    goto LABEL_21;
  }
  char v21 = v29;
  llvm::jitlink::Block::addEdge(a4, &v20);
  char v17 = v30;
  *a5 = 0;
  if (v17)
  {
    long long v18 = v29;
    std::string::size_type v29 = 0;
    if (v18) {
      (*(void (**)(void *))(*v18 + 8))(v18);
    }
  }
LABEL_22:
  if (v32)
  {
    char v19 = v31;
    std::string v31 = 0;
    if (v19) {
      (*(void (**)(void *))(*v19 + 8))(v19);
    }
  }
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection@<X0>(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a1, (uint64_t)v8);
  if (v9)
  {
    uint64_t v6 = v8[0];
    char v7 = *(unsigned char *)(a3 + 8) | 1;
  }
  else
  {
    if (v8[1] <= (unint64_t)a2) {
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v6 = v8[0] + 40 * a2;
    char v7 = *(unsigned char *)(a3 + 8) & 0xFE;
  }
  *(unsigned char *)(a3 + 8) = v7;
  *(void *)a3 = v6;
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName(void *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, void *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a1, (uint64_t)v16);
  if (v17)
  {
    uint64_t v11 = v16[0];
    *(unsigned char *)(a5 + 16) |= 1u;
    *(void *)a5 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if (v15)
    {
      uint64_t v12 = v14[0];
      *(unsigned char *)(a5 + 16) |= 1u;
      *(void *)a5 = v12;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if (v15)
      {
        uint64_t v10 = v14[0];
        v14[0] = 0;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
      }
    }
    if (v17)
    {
      uint64_t v13 = v16[0];
      v16[0] = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
    }
  }
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  unsigned int v4 = *(_DWORD *)(*result + 32);
  if (v4)
  {
    unsigned int v5 = *(unsigned __int16 *)(v3 + 46);
    if (v5 != 10240)
    {
      char v15 = "invalid e_shentsize in ELF header: ";
      long long v16 = (uint64_t *)__rev16(v5);
      __int16 v17 = 2307;
      LODWORD(v14) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v6 = bswap32(v4);
    unint64_t v7 = result[1];
    if (v6 > 0xFFFFFFD7 || v6 + 40 > v7)
    {
      uint64_t v14 = v6;
      char v15 = "section header table goes past the end of the file: e_shoff = 0x";
      long long v16 = &v14;
      __int16 v17 = 3587;
      int v18 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v11 = v3 + v6;
    unsigned int v12 = *(unsigned __int16 *)(v3 + 48);
    if (v12) {
      unsigned int v13 = __rev16(v12);
    }
    else {
      unsigned int v13 = bswap32(*(_DWORD *)(v11 + 20));
    }
    if (v6 + 40 * (unint64_t)v13 > v7)
    {
      char v15 = "section table goes past the end of file";
      __int16 v17 = 259;
      LODWORD(v14) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    *(unsigned char *)(a2 + 16) &= ~1u;
    *(void *)a2 = v11;
    *(void *)(a2 + 8) = v13;
  }
  else
  {
    uint64_t v9 = result[2];
    uint64_t v10 = result[3];
    if (v9 == v10)
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) &= ~1u;
    }
    else
    {
      *(unsigned char *)(a2 + 16) &= ~1u;
      *(void *)a2 = v9;
      *(void *)(a2 + 8) = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v9) >> 3);
    }
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionStringTable(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, void *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7 = *(unsigned __int16 *)(*a1 + 50);
  if (v7 == 0xFFFF)
  {
    if (!a3)
    {
      unsigned int v13 = "e_shstrndx == SHN_XINDEX, but the section header table is empty";
      __int16 v15 = 259;
      LODWORD(v11[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    unsigned int v8 = bswap32(*(_DWORD *)(a2 + 24));
    if (v8) {
      goto LABEL_3;
    }
LABEL_9:
    *(unsigned char *)(a6 + 16) &= ~1u;
    uint64_t v10 = a1[6];
    *(void *)a6 = a1[5];
    *(void *)(a6 + 8) = v10;
    return;
  }
  unsigned int v8 = __rev16(v7);
  if (!v8) {
    goto LABEL_9;
  }
LABEL_3:
  if (a3 <= v8)
  {
    v11[0] = "section header string table index ";
    void v11[2] = v8;
    __int16 v12 = 2051;
    unsigned int v13 = (const char *)v11;
    uint64_t v14 = " does not exist";
    __int16 v15 = 770;
    int v16 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v9 = a2 + 40 * v8;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTable(a1, v9, a4, a5, a6);
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName@<X0>(void *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (*a2)
  {
    unint64_t v6 = bswap32(*a2);
    if (a4 <= v6)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v13);
      unsigned int v8 = std::string::insert(&v13, 0, "a section ");
      std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      uint64_t v10 = std::string::append(&v14, " has an invalid sh_name (0x");
      std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v16 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = v6;
      v17[0] = __p;
      uint64_t v17[2] = &v12;
      __int16 v18 = 3588;
      char v19 = v17;
      long long v20 = ") offset which goes past the end of the section name string table";
      __int16 v21 = 770;
      int v22 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    unsigned int v7 = (const char *)(a3 + v6);
    uint64_t result = (void *)strlen(v7);
    *(unsigned char *)(a5 + 16) &= ~1u;
    *(void *)a5 = v7;
    *(void *)(a5 + 8) = result;
  }
  else
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(unsigned char *)(a5 + 16) &= ~1u;
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTable(void *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, void *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4) == 50331648) {
    goto LABEL_10;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, a2, &v29);
  uint64_t v10 = std::string::insert(&v29, 0, "invalid sh_type for string table section ");
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  unint64_t v12 = std::string::append(&v30, ": expected SHT_STRTAB, but got ");
  std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
  long long v34 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string::size_type v35 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(*(_DWORD *)(a2 + 4)));
  v31[0] = &v34;
  _OWORD v31[2] = ELFSectionTypeName;
  v31[3] = v15;
  __int16 v32 = 1284;
  a3(&v28, a4, v31);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::string::size_type v16 = v28.__r_.__value_.__r.__words[0];
  if (!v28.__r_.__value_.__r.__words[0])
  {
LABEL_10:
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<char>(a1, a2, (uint64_t)&v34);
    uint64_t v17 = v34;
    if (v35)
    {
      *(void *)&long long v34 = 0;
      *(unsigned char *)(a5 + 16) |= 1u;
      *(void *)a5 = v17;
    }
    else
    {
      uint64_t v18 = *((void *)&v34 + 1);
      if (!*((void *)&v34 + 1))
      {
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, a2, &v28);
        std::string::size_type v23 = std::string::insert(&v28, 0, "SHT_STRTAB string table section ");
        std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        std::string::size_type v25 = std::string::append(&v29, " is empty");
        std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        __int16 v32 = 260;
        v31[0] = &v30;
        int v33 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
      }
      if (*(unsigned char *)(*((void *)&v34 + 1) + v34 - 1))
      {
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, a2, &v28);
        char v19 = std::string::insert(&v28, 0, "SHT_STRTAB string table section ");
        std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        __int16 v21 = std::string::append(&v29, " is non-null terminated");
        std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        __int16 v32 = 260;
        v31[0] = &v30;
        int v33 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
      }
      *(unsigned char *)(a5 + 16) &= ~1u;
      *(void *)a5 = v17;
      *(void *)(a5 + 8) = v18;
    }
    if (v35)
    {
      uint64_t v27 = v34;
      *(void *)&long long v34 = 0;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
  }
  else
  {
    *(unsigned char *)(a5 + 16) |= 1u;
    *(void *)a5 = v16;
  }
}

void llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a1, (uint64_t)v13);
  if (v14)
  {
    std::string::size_type v9 = v13[0];
    v13[0] = 0;
    v12.__r_.__value_.__r.__words[0] = v9;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v12);
    if (v12.__r_.__value_.__r.__words[0]) {
      (*(void (**)(std::string::size_type))(*(void *)v12.__r_.__value_.__l.__data_ + 8))(v12.__r_.__value_.__r.__words[0]);
    }
    std::string::basic_string[abi:nn180100]<0>(a3, "[unknown index]");
  }
  else
  {
    std::to_string(&v11, 0xCCCCCCCCCCCCCCCDLL * ((int64_t)(a2 - v13[0]) >> 3));
    unsigned int v5 = std::string::insert(&v11, 0, "[index ");
    std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unsigned int v7 = std::string::append(&v12, "]");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)a3 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    a3[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  if (v14)
  {
    std::string::size_type v10 = v13[0];
    v13[0] = 0;
    if (v10) {
      (*(void (**)(std::string::size_type))(*(void *)v10 + 8))(v10);
    }
  }
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<char>@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  std::string::size_type v5 = bswap32(*(_DWORD *)(a2 + 16));
  std::string::size_type v6 = bswap32(*(_DWORD *)(a2 + 20));
  if (__CFADD__(v5, v6))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, a2, &v26);
    unsigned int v7 = std::string::insert(&v26, 0, "section ");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v9 = std::string::append(&v21, " has a sh_offset (0x");
    std::string::size_type v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v24 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v20.__r_.__value_.__r.__words[0] = v5;
    v27[0] = __p;
    std::string v28 = &v20;
    __int16 v29 = 3588;
    v30[0] = v27;
    std::string v31 = ") + sh_size (0x";
    __int16 v32 = 770;
    v19.__r_.__value_.__r.__words[0] = v6;
    v33[0] = v30;
    long long v34 = &v19;
    __int16 v35 = 3586;
    uint64_t v36 = v33;
    int v37 = ") that cannot be represented";
    __int16 v38 = 770;
    LODWORD(v18) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (result[1] < (unint64_t)(v6 + v5))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, a2, &v19);
    std::string v11 = std::string::insert(&v19, 0, "section ");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v13 = std::string::append(&v20, " has a sh_offset (0x");
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v17 = v6;
    std::string::size_type v18 = v5;
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    v21.__r_.__value_.__r.__words[2] = (std::string::size_type)&v18;
    __int16 v22 = 3588;
    __p[0] = &v21;
    std::string::size_type v24 = ") + sh_size (0x";
    __int16 v25 = 770;
    v27[0] = __p;
    std::string v28 = (std::string *)&v17;
    __int16 v29 = 3586;
    v30[0] = v27;
    std::string v31 = ") that is greater than the file size (0x";
    __int16 v32 = 770;
    uint64_t v16 = v3[1];
    v33[0] = v30;
    long long v34 = (std::string *)&v16;
    __int16 v35 = 3586;
    uint64_t v36 = v33;
    int v37 = ")";
    __int16 v38 = 770;
    int v39 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v15 = *result + v5;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v15;
  *(void *)(a3 + 8) = v6;
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,false>>@<X0>(void *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = result;
  if (a2[9] != 0x8000000)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v32);
    std::string::size_type v12 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v14 = std::string::append(&v34, " has invalid sh_entsize: expected ");
    uint64_t v15 = (std::string *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __int16 v38 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v36.__r_.__value_.__r.__words[0] = 8;
    v40[0] = __p;
    size_t v41 = &v36;
    __int16 v42 = 2564;
    v43[0] = v40;
    __int16 v44 = (std::string *)", but got ";
    __int16 v45 = 770;
    uint64_t v16 = (const char *)bswap32(a2[9]);
    __int16 v46 = v43;
    unint64_t v47 = v16;
    __int16 v48 = 2050;
    LODWORD(v31.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v6 = bswap32(a2[5]);
  if ((v6 & 7) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v36);
    unsigned int v7 = std::string::insert(&v36, 0, "section ");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v9 = std::string::append(&v32, " has an invalid sh_size (");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v34;
    __int16 v38 = (std::string *)v6;
    __int16 v39 = 2052;
    v40[0] = __p;
    size_t v41 = (std::string *)") which is not a multiple of its sh_entsize (";
    __int16 v42 = 770;
    std::string v11 = (std::string *)bswap32(a2[9]);
    v43[0] = v40;
    __int16 v44 = v11;
    __int16 v45 = 2050;
    __int16 v46 = v43;
    unint64_t v47 = ")";
    __int16 v48 = 770;
    LODWORD(v31.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v17 = bswap32(a2[4]);
  if (__CFADD__(v17, v6))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v36);
    std::string::size_type v18 = std::string::insert(&v36, 0, "section ");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::string v20 = std::string::append(&v32, " has a sh_offset (0x");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v31.__r_.__value_.__r.__words[0] = v17;
    __p[0] = &v34;
    __int16 v38 = &v31;
    __int16 v39 = 3588;
    v40[0] = __p;
    size_t v41 = (std::string *)") + sh_size (0x";
    __int16 v42 = 770;
    v30.__r_.__value_.__r.__words[0] = v6;
    v43[0] = v40;
    __int16 v44 = &v30;
    __int16 v45 = 3586;
    __int16 v46 = v43;
    unint64_t v47 = ") that cannot be represented";
    __int16 v48 = 770;
    LODWORD(v29) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (result[1] < (unint64_t)(v6 + v17))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v30);
    __int16 v22 = std::string::insert(&v30, 0, "section ");
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v24 = std::string::append(&v31, " has a sh_offset (0x");
    std::string::size_type v25 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v28 = v6;
    std::string::size_type v29 = v17;
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    v32.__r_.__value_.__r.__words[2] = (std::string::size_type)&v29;
    __int16 v33 = 3588;
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    v34.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    __int16 v35 = 770;
    __p[0] = &v34;
    __int16 v38 = (std::string *)&v28;
    __int16 v39 = 3586;
    v40[0] = __p;
    size_t v41 = (std::string *)") that is greater than the file size (0x";
    __int16 v42 = 770;
    uint64_t v27 = v4[1];
    v43[0] = v40;
    __int16 v44 = (std::string *)&v27;
    __int16 v45 = 3586;
    __int16 v46 = v43;
    unint64_t v47 = ")";
    __int16 v48 = 770;
    int v49 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v26 = *result + v17;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v26;
  *(void *)(a3 + 8) = v6 >> 3;
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(a1, a2, (uint64_t)v22);
  if (v23)
  {
    uint64_t v8 = v22[0];
    char v9 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    if (v22[1] <= (unint64_t)a3)
    {
      uint64_t v11 = 16 * a3;
      v12[0] = "can't read an entry at 0x";
      uint64_t v12[2] = &v11;
      __int16 v13 = 3587;
      v14[0] = v12;
      uint64_t v14[2] = ": it goes past the end of the section (0x";
      __int16 v15 = 770;
      uint64_t v10 = bswap32(a2[5]);
      v16[0] = v14;
      uint64_t v16[2] = &v10;
      __int16 v17 = 3586;
      std::string::size_type v18 = v16;
      std::string::size_type v19 = ")";
      __int16 v20 = 770;
      int v21 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v8 = v22[0] + 16 * a3;
    char v9 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v9;
  *(void *)a4 = v8;
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>@<X0>(void *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = result;
  if (a2[9] != 0x10000000)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v32);
    std::string::size_type v12 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v14 = std::string::append(&v34, " has invalid sh_entsize: expected ");
    __int16 v15 = (std::string *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __int16 v38 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v36.__r_.__value_.__r.__words[0] = 16;
    v40[0] = __p;
    size_t v41 = &v36;
    __int16 v42 = 2564;
    v43[0] = v40;
    __int16 v44 = (std::string *)", but got ";
    __int16 v45 = 770;
    uint64_t v16 = (const char *)bswap32(a2[9]);
    __int16 v46 = v43;
    unint64_t v47 = v16;
    __int16 v48 = 2050;
    LODWORD(v31.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v6 = bswap32(a2[5]);
  if ((v6 & 0xF) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v36);
    unsigned int v7 = std::string::insert(&v36, 0, "section ");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    char v9 = std::string::append(&v32, " has an invalid sh_size (");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v34;
    __int16 v38 = (std::string *)v6;
    __int16 v39 = 2052;
    v40[0] = __p;
    size_t v41 = (std::string *)") which is not a multiple of its sh_entsize (";
    __int16 v42 = 770;
    uint64_t v11 = (std::string *)bswap32(a2[9]);
    v43[0] = v40;
    __int16 v44 = v11;
    __int16 v45 = 2050;
    __int16 v46 = v43;
    unint64_t v47 = ")";
    __int16 v48 = 770;
    LODWORD(v31.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v17 = bswap32(a2[4]);
  if (__CFADD__(v17, v6))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v36);
    std::string::size_type v18 = std::string::insert(&v36, 0, "section ");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    __int16 v20 = std::string::append(&v32, " has a sh_offset (0x");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v31.__r_.__value_.__r.__words[0] = v17;
    __p[0] = &v34;
    __int16 v38 = &v31;
    __int16 v39 = 3588;
    v40[0] = __p;
    size_t v41 = (std::string *)") + sh_size (0x";
    __int16 v42 = 770;
    v30.__r_.__value_.__r.__words[0] = v6;
    v43[0] = v40;
    __int16 v44 = &v30;
    __int16 v45 = 3586;
    __int16 v46 = v43;
    unint64_t v47 = ") that cannot be represented";
    __int16 v48 = 770;
    LODWORD(v29) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (result[1] < (unint64_t)(v6 + v17))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v30);
    __int16 v22 = std::string::insert(&v30, 0, "section ");
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    uint64_t v24 = std::string::append(&v31, " has a sh_offset (0x");
    std::string::size_type v25 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v28 = v6;
    std::string::size_type v29 = v17;
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    v32.__r_.__value_.__r.__words[2] = (std::string::size_type)&v29;
    __int16 v33 = 3588;
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    v34.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    __int16 v35 = 770;
    __p[0] = &v34;
    __int16 v38 = (std::string *)&v28;
    __int16 v39 = 3586;
    v40[0] = __p;
    size_t v41 = (std::string *)") that is greater than the file size (0x";
    __int16 v42 = 770;
    uint64_t v27 = v4[1];
    v43[0] = v40;
    __int16 v44 = (std::string *)&v27;
    __int16 v45 = 3586;
    __int16 v46 = v43;
    unint64_t v47 = ")";
    __int16 v48 = 770;
    int v49 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v26 = *result + v17;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v26;
  *(void *)(a3 + 8) = v6 >> 4;
  return result;
}

void llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)0,1ul,1ul> const&>::~stream_operator_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)0,1ul,1ul> const&>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::write_integer(a2, bswap32(**(unsigned __int16 **)(a1 + 8)) >> 16, 0, 0);
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a1, (uint64_t)v8);
  if (v9)
  {
    uint64_t v7 = v8[0];
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v7;
  }
  else
  {
    uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if (v9)
    {
      uint64_t result = (void *)v8[0];
      v8[0] = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>(a1, a2, (uint64_t)&v31);
  uint64_t v11 = v31;
  if (v33)
  {
    std::string v31 = 0;
    *(unsigned char *)(a5 + 16) |= 1u;
  }
  else
  {
    std::string::size_type v12 = (const char *)bswap32(a2[6]);
    if (a4 <= (unint64_t)v12)
    {
      uint64_t v27 = "invalid section index: ";
      std::string::size_type v28 = v12;
      __int16 v29 = 2051;
      LODWORD(v23[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v13 = a3 + 40 * v12;
    unsigned int v14 = *(_DWORD *)(v13 + 4);
    if (v14 != 0x2000000 && v14 != 184549376)
    {
      ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(v14));
      __int16 v26 = 1283;
      v23[0] = "SHT_SYMTAB_SHNDX section is linked with ";
      uint64_t v24 = ELFSectionTypeName;
      uint64_t v25 = v18;
      uint64_t v27 = (const char *)v23;
      std::string::size_type v28 = " section (expected SHT_SYMTAB/SHT_DYNSYM)";
      __int16 v29 = 770;
      LODWORD(v20[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v16 = v32;
    uint64_t v22 = bswap32(*(_DWORD *)(v13 + 20)) >> 4;
    if (v32 != v22)
    {
      uint64_t v19 = v32;
      v20[0] = "SHT_SYMTAB_SHNDX has ";
      long long v20[2] = &v19;
      __int16 v21 = 2563;
      v23[0] = v20;
      uint64_t v24 = " entries, but the symbol table associated has ";
      __int16 v26 = 770;
      uint64_t v27 = (const char *)v23;
      std::string::size_type v28 = (const char *)&v22;
      __int16 v29 = 3074;
      int v30 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    *(unsigned char *)(a5 + 16) &= ~1u;
    *(void *)(a5 + 8) = v16;
  }
  *(void *)a5 = v11;
  if (v33)
  {
    uint64_t result = v31;
    std::string v31 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>@<X0>(void *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = result;
  if (a2[9] != 0x4000000)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v32);
    std::string::size_type v12 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unsigned int v14 = std::string::append(&v34, " has invalid sh_entsize: expected ");
    __int16 v15 = (std::string *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __int16 v38 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v36.__r_.__value_.__r.__words[0] = 4;
    v40[0] = __p;
    size_t v41 = &v36;
    __int16 v42 = 2564;
    v43[0] = v40;
    __int16 v44 = (std::string *)", but got ";
    __int16 v45 = 770;
    uint64_t v16 = (const char *)bswap32(a2[9]);
    __int16 v46 = v43;
    unint64_t v47 = v16;
    __int16 v48 = 2050;
    LODWORD(v31.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v6 = bswap32(a2[5]);
  if ((v6 & 3) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v36);
    uint64_t v7 = std::string::insert(&v36, 0, "section ");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    char v9 = std::string::append(&v32, " has an invalid sh_size (");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v34;
    __int16 v38 = (std::string *)v6;
    __int16 v39 = 2052;
    v40[0] = __p;
    size_t v41 = (std::string *)") which is not a multiple of its sh_entsize (";
    __int16 v42 = 770;
    uint64_t v11 = (std::string *)bswap32(a2[9]);
    v43[0] = v40;
    __int16 v44 = v11;
    __int16 v45 = 2050;
    __int16 v46 = v43;
    unint64_t v47 = ")";
    __int16 v48 = 770;
    LODWORD(v31.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v17 = bswap32(a2[4]);
  if (__CFADD__(v17, v6))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v36);
    uint64_t v18 = std::string::insert(&v36, 0, "section ");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    __int16 v20 = std::string::append(&v32, " has a sh_offset (0x");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v31.__r_.__value_.__r.__words[0] = v17;
    __p[0] = &v34;
    __int16 v38 = &v31;
    __int16 v39 = 3588;
    v40[0] = __p;
    size_t v41 = (std::string *)") + sh_size (0x";
    __int16 v42 = 770;
    v30.__r_.__value_.__r.__words[0] = v6;
    v43[0] = v40;
    __int16 v44 = &v30;
    __int16 v45 = 3586;
    __int16 v46 = v43;
    unint64_t v47 = ") that cannot be represented";
    __int16 v48 = 770;
    LODWORD(v29) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (result[1] < (unint64_t)(v6 + v17))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(result, (uint64_t)a2, &v30);
    uint64_t v22 = std::string::insert(&v30, 0, "section ");
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    uint64_t v24 = std::string::append(&v31, " has a sh_offset (0x");
    std::string::size_type v25 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v28 = v6;
    std::string::size_type v29 = v17;
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    v32.__r_.__value_.__r.__words[2] = (std::string::size_type)&v29;
    __int16 v33 = 3588;
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    v34.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    __int16 v35 = 770;
    __p[0] = &v34;
    __int16 v38 = (std::string *)&v28;
    __int16 v39 = 3586;
    v40[0] = __p;
    size_t v41 = (std::string *)") that is greater than the file size (0x";
    __int16 v42 = 770;
    uint64_t v27 = v4[1];
    v43[0] = v40;
    __int16 v44 = (std::string *)&v27;
    __int16 v45 = 3586;
    __int16 v46 = v43;
    unint64_t v47 = ")";
    __int16 v48 = 770;
    int v49 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v26 = *result + v17;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v26;
  *(void *)(a3 + 8) = v6 >> 2;
  return result;
}

void *llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 24 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if ((*(void *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          __int16 v15 = v18;
          *uint64_t v18 = *(void *)v13;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 24 * v16;
    do
    {
      *uint64_t result = -4096;
      result += 3;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTableForSymtab(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6 = *(_DWORD *)(a2 + 4);
  if (v6 != 0x2000000 && v6 != 184549376)
  {
    v9[0] = "invalid sh_type for symbol table, expected SHT_SYMTAB or SHT_DYNSYM";
    __int16 v10 = 259;
    int v11 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  unint64_t v8 = bswap32(*(_DWORD *)(a2 + 24));
  if (a4 <= v8)
  {
    v9[0] = "invalid section index: ";
    uint64_t v9[2] = v8;
    __int16 v10 = 2051;
    int v11 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  v9[0] = llvm::object::defaultWarningHandler;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTable(a1, a3 + 40 * v8, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)v9, a5);
}

size_t llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getName@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = bswap32(*a1);
  if (a3 <= v5)
  {
    llvm::object::object_category((llvm::object *)a1);
    memset(__p, 0, sizeof(__p));
    int v10 = 0;
    char v14 = 0;
    uint64_t v15 = 0;
    int v16 = 1;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    char v9 = &unk_270DBD6E0;
    uint64_t v17 = __p;
    llvm::raw_ostream::SetUnbuffered(&v9);
    v19[0] = &unk_270DBEDC0;
    v19[1] = "st_name (0x%x) is past the end of the string table of size 0x%zx";
    int v20 = v5;
    unint64_t v21 = a3;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v9, (uint64_t)v19);
    operator new();
  }
  uint64_t v6 = a2 + v5;
  if (a2) {
    size_t result = strlen((const char *)(a2 + v5));
  }
  else {
    size_t result = 0;
  }
  *(unsigned char *)(a4 + 16) &= ~1u;
  *(void *)a4 = v6;
  *(void *)(a4 + 8) = result;
  return result;
}

uint64_t *llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)0,false>>@<X0>(unsigned int a1@<W1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!*a2)
  {
    v11[0] = "found an extended symbol index (";
    unint64_t v12 = a1;
    __int16 v13 = 2051;
    char v14 = v11;
    p_p = (std::string *)"), but unable to locate the extended symbol index table";
    __int16 v16 = 770;
    LODWORD(v9[0]) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v4 = a1;
  size_t result = llvm::object::DataRegion<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>::operator[](a2, a1, (uint64_t)&v18);
  if (v19)
  {
    v9[0] = "unable to read an extended symbol table at index ";
    uint64_t v9[2] = v4;
    __int16 v10 = 2051;
    v11[0] = v9;
    unint64_t v12 = (unint64_t)": ";
    __int16 v13 = 770;
    uint64_t v6 = v18;
    uint64_t v18 = 0;
    uint64_t v7 = v6;
    llvm::toString(&v7, &__p);
    char v14 = v11;
    p_p = &__p;
    __int16 v16 = 1026;
    int v17 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = bswap32(v18);
  return result;
}

void llvm::jitlink::ELFJITLinker_aarch32::~ELFJITLinker_aarch32(llvm::jitlink::ELFJITLinker_aarch32 *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x263E500B0);
}

char *llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_aarch32>::fixUpBlocks@<X0>(char *result@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(_DWORD *)(a2 + 192))
  {
    uint64_t v5 = *(unsigned int *)(a2 + 200);
    if (v5)
    {
      uint64_t v6 = 24 * v5;
      uint64_t v7 = *(void **)(a2 + 184);
      while (*v7 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v7 += 3;
        v6 -= 24;
        if (!v6) {
          goto LABEL_35;
        }
      }
    }
    else
    {
      uint64_t v7 = *(void **)(a2 + 184);
    }
    uint64_t v8 = *(void *)(a2 + 184) + 24 * v5;
    if (v7 != (void *)v8)
    {
      char v9 = result + 152;
LABEL_10:
      uint64_t v10 = v7[2];
      int v23 = *(_DWORD *)(v10 + 20);
      size_t result = (char *)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v10 + 32);
      uint64_t v22 = *(void *)(v10 + 32) + 8 * *(unsigned int *)(v10 + 48);
      if ((char *)v22 == result) {
        goto LABEL_32;
      }
      unint64_t v12 = (uint64_t **)result;
      __int16 v13 = v11;
      unint64_t v21 = v9;
      do
      {
        char v14 = *v12;
        if (v23 == 2 && (v14[1] & 4) == 0)
        {
          __int16 v16 = (const void *)v14[3];
          size_t v15 = v14[4];
          size_t result = (char *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, v15, 0);
          int v17 = result;
          if (v15) {
            size_t result = (char *)memmove(result, v16, v15);
          }
          _OWORD v14[3] = (uint64_t)v17;
          void v14[4] = v15;
          v14[1] |= 4uLL;
          char v9 = v21;
        }
        uint64_t v18 = (unsigned __int8 *)v14[5];
        char v19 = (unsigned __int8 *)v14[6];
        while (v18 != v19)
        {
          unsigned int v20 = v18[24];
          if (v20 >= 2)
          {
            if (v20 > 3)
            {
              if (v20 == 4) {
                llvm::jitlink::aarch32::applyFixupArm(a2, (uint64_t)v14, (uint64_t)v18);
              }
              size_t result = (char *)llvm::jitlink::aarch32::applyFixupThumb(a2, v14, (uint64_t)v18, v9, a3);
            }
            else
            {
              size_t result = (char *)llvm::jitlink::aarch32::applyFixupData(a2, v14, v18, a3);
            }
            if (*a3) {
              return result;
            }
          }
          v18 += 32;
        }
        while (++v12 != v13)
        {
          if (((unint64_t)*v12 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_31;
          }
        }
        unint64_t v12 = v13;
LABEL_31:
        ;
      }
      while (v12 != (uint64_t **)v22);
LABEL_32:
      while (1)
      {
        v7 += 3;
        if (v7 == (void *)v8) {
          break;
        }
        if (*v7 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v7 != (void *)v8) {
            goto LABEL_10;
          }
          break;
        }
      }
    }
  }
LABEL_35:
  *a3 = 0;
  return result;
}

void llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_aarch32>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t *llvm::jitlink::createLinkGraphFromELFObject_aarch64@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  long long v3 = a1[1];
  v15[0] = *a1;
  v15[1] = v3;
  llvm::object::ObjectFile::createELFObjectFile(v15, 1, (uint64_t)&v20);
  uint64_t v4 = (llvm::object::ObjectFile *)v20;
  if ((v21 & 1) == 0)
  {
    uint64_t v5 = (void *)v20[4];
    size_t v6 = v20[5];
    int v7 = v20 + 56;
    llvm::object::ObjectFile::makeTriple((llvm::object::ObjectFile *)v20, (llvm::Triple *)__p);
    long long v16 = *(_OWORD *)__p;
    uint64_t v8 = v11;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = 0;
    long long v18 = v12;
    uint64_t v17 = v8;
    uint64_t v19 = v13;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFLinkGraphBuilder((int)&v14, v7, (uint64_t)&v16, v5, v6);
  }
  unsigned int v20 = 0;
  *(unsigned char *)(a2 + 8) |= 1u;
  *(void *)a2 = v4;
  return llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected((uint64_t *)&v20);
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::buildGraph(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_WORD *)(**(void **)(a1 + 24) + 16) != 1) {
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
  }
  llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::prepare(a1, &v5);
  uint64_t v4 = v5;
  if (v5
    || (llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::graphifySections(a1, &v5), (uint64_t v4 = v5) != 0)|| (llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::graphifySymbols(a1, (uint64_t *)&v5), (uint64_t v4 = v5) != 0)|| ((*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(&v5, a1), (uint64_t v4 = v5) != 0))
  {
    *(unsigned char *)(a2 + 8) |= 1u;
  }
  else
  {
    *(unsigned char *)(a2 + 8) &= ~1u;
    uint64_t v4 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  *(void *)a2 = v4;
}

uint64_t anonymous namespace'::ELFLinkGraphBuilder_aarch64<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFLinkGraphBuilder_aarch64(uint64_t a1)
{
  *(void *)a1 = &unk_270DBEEA0;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

void llvm::jitlink::link_ELF_aarch64(void *a1, void *a2)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v67 = 0;
  long long v66 = 0u;
  memset(v65, 0, sizeof(v65));
  memset(v64, 0, sizeof(v64));
  int64x2_t v63 = 0u;
  if ((*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, *a1 + 120))
  {
    unint64_t v74 = ".eh_frame";
    *(void *)&long long v75 = 9;
    unint64_t v76 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::DWARFRecordSectionSplitter,llvm::jitlink::DWARFRecordSectionSplitter,void>::Callbacks
                                    + 2);
    unsigned int v71 = (char *)v64;
    unsigned int v68 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v64, 1uLL);
    v69.i64[0] = (uint64_t)v68;
    unsigned int v70 = &v68[4 * v3];
    uint64_t v4 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v68, (long long *)&v74)+ 32;
    v69.i64[1] = v4;
    uint64_t v5 = (long long *)v63.i64[1];
    uint64_t v6 = v69.i64[0];
    if (v63.i64[1] == v63.i64[0])
    {
      int64x2_t v7 = vdupq_n_s64(v63.u64[1]);
    }
    else
    {
      do
      {
        v5 -= 2;
        uint64_t v6 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v6 - 32, v5);
      }
      while (v5 != (long long *)v63.i64[0]);
      int64x2_t v7 = v63;
      uint64_t v4 = v69.i64[1];
    }
    v63.i64[0] = v6;
    int64x2_t v69 = v7;
    uint64_t v8 = *(void ***)&v64[0];
    *(void *)&v64[0] = v70;
    unsigned int v70 = v8;
    unsigned int v68 = (void **)v7.i64[0];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v68);
    v63.i64[1] = v4;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v74);
    unint64_t v76 = 0;
    char v9 = operator new(0x20uLL, (std::align_val_t)8uLL);
    long long v75 = xmmword_261E8A760;
    *char v9 = ".eh_frame";
    v9[1] = 9;
    *((_DWORD *)v9 + 4) = 8;
    *((_DWORD *)v9 + 5) = 84279812;
    *((unsigned char *)v9 + 24) = 8;
    unint64_t v74 = (const char *)v9;
    unint64_t v76 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameEdgeFixer,llvm::jitlink::EHFrameEdgeFixer,void>::Callbacks;
    if (v63.i64[1] >= *(void *)&v64[0])
    {
      uint64_t v11 = (v63.i64[1] - v63.i64[0]) >> 5;
      if ((unint64_t)(v11 + 1) >> 59) {
        goto LABEL_97;
      }
      unint64_t v12 = (*(void *)&v64[0] - v63.i64[0]) >> 4;
      if (v12 <= v11 + 1) {
        unint64_t v12 = v11 + 1;
      }
      if (*(void *)&v64[0] - v63.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      unsigned int v71 = (char *)v64;
      if (v13) {
        uint64_t v14 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v64, v13);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = (uint64_t)&v14[4 * v11];
      unsigned int v68 = v14;
      v69.i64[0] = v15;
      unsigned int v70 = &v14[4 * v13];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v15, (long long *)&v74);
      unint64_t v10 = v15 + 32;
      v69.i64[1] = v15 + 32;
      long long v16 = (long long *)v63.i64[1];
      uint64_t v17 = v69.i64[0];
      if (v63.i64[1] == v63.i64[0])
      {
        int64x2_t v18 = vdupq_n_s64(v63.u64[1]);
      }
      else
      {
        do
        {
          v16 -= 2;
          uint64_t v17 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v17 - 32, v16);
        }
        while (v16 != (long long *)v63.i64[0]);
        int64x2_t v18 = v63;
        unint64_t v10 = v69.u64[1];
      }
      v63.i64[0] = v17;
      v63.i64[1] = v10;
      int64x2_t v69 = v18;
      uint64_t v19 = *(void ***)&v64[0];
      *(void *)&v64[0] = v70;
      unsigned int v70 = v19;
      unsigned int v68 = (void **)v18.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v68);
    }
    else
    {
      unint64_t v10 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v63.i64[1], (long long *)&v74)+ 32;
    }
    v63.i64[1] = v10;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v74);
    unint64_t v74 = ".eh_frame";
    *(void *)&long long v75 = 9;
    unint64_t v76 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameNullTerminator,llvm::jitlink::EHFrameNullTerminator,void>::Callbacks
                                    + 2);
    if (v10 >= *(void *)&v64[0])
    {
      uint64_t v21 = (v63.i64[1] - v63.i64[0]) >> 5;
      if ((unint64_t)(v21 + 1) >> 59) {
        goto LABEL_97;
      }
      unint64_t v22 = (*(void *)&v64[0] - v63.i64[0]) >> 4;
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      if (*(void *)&v64[0] - v63.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      unsigned int v71 = (char *)v64;
      if (v23) {
        uint64_t v24 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v64, v23);
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = (uint64_t)&v24[4 * v21];
      unsigned int v68 = v24;
      v69.i64[0] = v25;
      unsigned int v70 = &v24[4 * v23];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v25, (long long *)&v74);
      uint64_t v20 = v25 + 32;
      v69.i64[1] = v25 + 32;
      uint64_t v26 = (long long *)v63.i64[1];
      uint64_t v27 = v69.i64[0];
      if (v63.i64[1] == v63.i64[0])
      {
        int64x2_t v28 = vdupq_n_s64(v63.u64[1]);
      }
      else
      {
        do
        {
          v26 -= 2;
          uint64_t v27 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v27 - 32, v26);
        }
        while (v26 != (long long *)v63.i64[0]);
        int64x2_t v28 = v63;
        uint64_t v20 = v69.i64[1];
      }
      v63.i64[0] = v27;
      v63.i64[1] = v20;
      int64x2_t v69 = v28;
      std::string::size_type v29 = *(void ***)&v64[0];
      *(void *)&v64[0] = v70;
      unsigned int v70 = v29;
      unsigned int v68 = (void **)v28.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v68);
    }
    else
    {
      uint64_t v20 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v10, (long long *)&v74)+ 32;
    }
    v63.i64[1] = v20;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v74);
    (*(void (**)(const char **__return_ptr))(*(void *)*a2 + 64))(&v74);
    if ((unint64_t)v76 < 8)
    {
      *(void *)&long long v72 = llvm::jitlink::markAllSymbolsLive;
      unint64_t v73 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
          + 2;
      if (v63.i64[1] >= *(void *)&v64[0])
      {
        uint64_t v36 = (v63.i64[1] - v63.i64[0]) >> 5;
        if ((unint64_t)(v36 + 1) >> 59) {
          goto LABEL_97;
        }
        unint64_t v37 = (*(void *)&v64[0] - v63.i64[0]) >> 4;
        if (v37 <= v36 + 1) {
          unint64_t v37 = v36 + 1;
        }
        if (*(void *)&v64[0] - v63.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v38 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v37;
        }
        unsigned int v71 = (char *)v64;
        if (v38) {
          __int16 v39 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v64, v38);
        }
        else {
          __int16 v39 = 0;
        }
        uint64_t v44 = (uint64_t)&v39[4 * v36];
        unsigned int v68 = v39;
        v69.i64[0] = v44;
        unsigned int v70 = &v39[4 * v38];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v44, &v72);
        uint64_t v31 = v44 + 32;
        v69.i64[1] = v44 + 32;
        __int16 v45 = (long long *)v63.i64[1];
        uint64_t v46 = v69.i64[0];
        if (v63.i64[1] == v63.i64[0])
        {
          int64x2_t v47 = vdupq_n_s64(v63.u64[1]);
        }
        else
        {
          do
          {
            v45 -= 2;
            uint64_t v46 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v46 - 32, v45);
          }
          while (v45 != (long long *)v63.i64[0]);
          int64x2_t v47 = v63;
          uint64_t v31 = v69.i64[1];
        }
        v63.i64[0] = v46;
        v63.i64[1] = v31;
        int64x2_t v69 = v47;
        int v49 = *(void ***)&v64[0];
        *(void *)&v64[0] = v70;
        unsigned int v70 = v49;
        unsigned int v68 = (void **)v47.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v68);
      }
      else
      {
        uint64_t v31 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v63.i64[1], &v72)+ 32;
      }
      v63.i64[1] = v31;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v72);
    }
    else
    {
      if (v63.i64[1] >= *(void *)&v64[0])
      {
        uint64_t v32 = (v63.i64[1] - v63.i64[0]) >> 5;
        if ((unint64_t)(v32 + 1) >> 59) {
          goto LABEL_97;
        }
        unint64_t v33 = (*(void *)&v64[0] - v63.i64[0]) >> 4;
        if (v33 <= v32 + 1) {
          unint64_t v33 = v32 + 1;
        }
        if (*(void *)&v64[0] - v63.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v33;
        }
        unsigned int v71 = (char *)v64;
        if (v34) {
          __int16 v35 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v64, v34);
        }
        else {
          __int16 v35 = 0;
        }
        uint64_t v40 = (uint64_t)&v35[4 * v32];
        unsigned int v68 = v35;
        v69.i64[0] = v40;
        unsigned int v70 = &v35[4 * v34];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v40, (long long *)&v74);
        uint64_t v30 = v40 + 32;
        v69.i64[1] = v40 + 32;
        size_t v41 = (long long *)v63.i64[1];
        uint64_t v42 = v69.i64[0];
        if (v63.i64[1] == v63.i64[0])
        {
          int64x2_t v43 = vdupq_n_s64(v63.u64[1]);
        }
        else
        {
          do
          {
            v41 -= 2;
            uint64_t v42 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v42 - 32, v41);
          }
          while (v41 != (long long *)v63.i64[0]);
          int64x2_t v43 = v63;
          uint64_t v30 = v69.i64[1];
        }
        v63.i64[0] = v42;
        v63.i64[1] = v30;
        int64x2_t v69 = v43;
        __int16 v48 = *(void ***)&v64[0];
        *(void *)&v64[0] = v70;
        unsigned int v70 = v48;
        unsigned int v68 = (void **)v43.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v68);
      }
      else
      {
        uint64_t v30 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v63.i64[1], (long long *)&v74)+ 32;
      }
      v63.i64[1] = v30;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v74);
    unint64_t v76 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
                                    + 2);
    if (*(void *)&v64[1] < *((void *)&v64[1] + 1))
    {
      uint64_t v50 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v64[1], (long long *)&v74)+ 32;
LABEL_89:
      *(void *)&v64[1] = v50;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v74);
      goto LABEL_90;
    }
    uint64_t v51 = (uint64_t)(*(void *)&v64[1] - *((void *)&v64[0] + 1)) >> 5;
    if (!((unint64_t)(v51 + 1) >> 59))
    {
      unint64_t v52 = (uint64_t)(*((void *)&v64[1] + 1) - *((void *)&v64[0] + 1)) >> 4;
      if (v52 <= v51 + 1) {
        unint64_t v52 = v51 + 1;
      }
      if (*((void *)&v64[1] + 1) - *((void *)&v64[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v53 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v53 = v52;
      }
      unsigned int v71 = (char *)&v64[1] + 8;
      if (v53) {
        uint64_t v54 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v64[1] + 8, v53);
      }
      else {
        uint64_t v54 = 0;
      }
      uint64_t v55 = (uint64_t)&v54[4 * v51];
      unsigned int v68 = v54;
      v69.i64[0] = v55;
      unsigned int v70 = &v54[4 * v53];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v55, (long long *)&v74);
      uint64_t v50 = v55 + 32;
      v69.i64[1] = v55 + 32;
      uint64_t v57 = (long long *)*((void *)&v64[0] + 1);
      uint64_t v56 = *(long long **)&v64[1];
      uint64_t v58 = v69.i64[0];
      if (*(void *)&v64[1] == *((void *)&v64[0] + 1))
      {
        int64x2_t v59 = vdupq_n_s64(*(unint64_t *)&v64[1]);
      }
      else
      {
        do
        {
          v56 -= 2;
          uint64_t v58 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v58 - 32, v56);
        }
        while (v56 != v57);
        int64x2_t v59 = *(int64x2_t *)((char *)v64 + 8);
        uint64_t v50 = v69.i64[1];
      }
      *((void *)&v64[0] + 1) = v58;
      *(void *)&v64[1] = v50;
      int64x2_t v69 = v59;
      char v60 = (void **)*((void *)&v64[1] + 1);
      *((void *)&v64[1] + 1) = v70;
      unsigned int v70 = v60;
      unsigned int v68 = (void **)v59.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v68);
      goto LABEL_89;
    }
LABEL_97:
    abort();
  }
LABEL_90:
  (*(void (**)(void ***__return_ptr))(*(void *)*a2 + 72))(&v68);
  if (!v68) {
    operator new();
  }
  uint64_t v61 = *a2;
  uint64_t v62 = v68;
  unsigned int v68 = 0;
  (*(void (**)(uint64_t, void ***))(*(void *)v61 + 24))(v61, &v62);
  if (v62) {
    (*((void (**)(void **))*v62 + 1))(v62);
  }
  if (v68) {
    (*((void (**)(void **))*v68 + 1))(v68);
  }
  unsigned int v68 = (void **)&v66;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v68);
  unsigned int v68 = (void **)&v65[1] + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v68);
  unsigned int v68 = (void **)v65;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v68);
  unsigned int v68 = (void **)v64 + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v68);
  unsigned int v68 = (void **)&v63;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v68);
}

uint64_t anonymous namespace'::buildTables_ELF_aarch64@<X0>(_anonymous_namespace_ *this@<X0>, void *a2@<X8>)
{
  v46[0] = 0;
  v46[1] = 0;
  int v47 = 0;
  uint64_t v48 = 0;
  v42[0] = 0;
  v42[1] = 0;
  int v43 = 0;
  uint64_t v44 = v46;
  uint64_t v45 = 0;
  v39[0] = 0;
  v39[1] = 0;
  int v40 = 0;
  uint64_t v41 = 0;
  v34[0] = 0;
  v34[1] = 0;
  unsigned int v35 = 0;
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  unint64_t v38 = v39;
  llvm::jitlink::LinkGraph::blocks(this, v56);
  v57[0] = v56[0];
  v57[1] = v56[1];
  void v57[2] = v56[2];
  void v57[3] = v56[3];
  llvm::jitlink::LinkGraph::blocks(this, &v49);
  v55[0] = v51;
  v55[1] = v52;
  v55[2] = v53;
  v55[3] = v54;
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v58, v57, (uint64_t *)v55);
  uint64_t v5 = v58;
  unint64_t v33 = v59;
  if (v58 != v59)
  {
    uint64_t v32 = a2;
    uint64_t v6 = &v50;
    while (1)
    {
      uint64_t v7 = *v5;
      char v9 = *(uint64_t **)(*v5 + 40);
      uint64_t v8 = *(uint64_t **)(*v5 + 48);
      while (v9 != v8)
      {
        if (llvm::jitlink::aarch64::GOTTableManager::visitEdge((uint64_t)v46, (uint64_t)this, v7, (uint64_t)v9)) {
          goto LABEL_29;
        }
        int v11 = *((unsigned __int8 *)v9 + 24);
        if (v11 == 20)
        {
          char v13 = 13;
          goto LABEL_13;
        }
        if (v11 == 19)
        {
          char v13 = 12;
LABEL_13:
          *((unsigned char *)v9 + 24) = v13;
          uint64_t v14 = (_OWORD *)*v9;
          v56[0] = *(_OWORD *)*v9;
          *(void *)&long long v49 = 0;
          int v15 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v34, (uint64_t)v56, &v49, v10);
          uint64_t v16 = v49;
          if (!v15) {
            uint64_t v16 = v34[0] + 24 * v35;
          }
          if (v16 == v34[0] + 24 * v35)
          {
            if (!v36) {
              llvm::jitlink::LinkGraph::createSection();
            }
            *((void *)&v56[0] + 1) = 16;
            *(void *)&long long v49 = 0;
            uint64_t v60 = 0;
            v61[0] = 8;
            uint64_t v17 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)this, v36, (uint64_t *)v56, (uint64_t *)&v49, v61, &v60);
            int64x2_t v18 = v37;
            if (!v37)
            {
              int64x2_t v18 = llvm::jitlink::LinkGraph::addExternalSymbol((uint64_t)this, (uint64_t)"__tlsdesc_resolver", 18, 8, 0);
              unint64_t v37 = v18;
            }
            llvm::jitlink::Block::addEdge(v17, 2, 0, (uint64_t)v18, 0);
            uint64_t v19 = v38;
            v56[0] = *v14;
            *(void *)&long long v49 = 0;
            int v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v38, (uint64_t)v56, &v49, v20);
            uint64_t v22 = v49;
            if (!v21) {
              uint64_t v22 = *v19 + 24 * *((unsigned int *)v19 + 4);
            }
            if (v22 == *v19 + 24 * *((unsigned int *)v19 + 4))
            {
              unint64_t v23 = v6;
              uint64_t v24 = v19[3];
              if (!v24) {
                llvm::jitlink::LinkGraph::createSection();
              }
              uint64_t v25 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)this, 16, 0);
              void *v25 = 0;
              v25[1] = 0;
              *(void *)&v56[0] = v25;
              *((void *)&v56[0] + 1) = 16;
              *(void *)&long long v49 = 0;
              uint64_t v60 = 0;
              v61[0] = 8;
              uint64_t v26 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::MutableArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)this, v24, (uint64_t *)v56, (uint64_t *)&v49, v61, &v60);
              llvm::jitlink::Block::addEdge(v26, 2, 8, (uint64_t)v14, 0);
              uint64_t v27 = llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)this, (uint64_t)v26, 0, 16, 0, 0);
              long long v49 = *v14;
              uint64_t v50 = v27;
              uint64_t v6 = v23;
              llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)v19, &v49, v23, v28, (uint64_t)v56);
              uint64_t v22 = *(void *)&v56[0];
            }
            llvm::jitlink::Block::addEdge(v17, 2, 8, *(void *)(v22 + 16), 0);
            std::string::size_type v29 = llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)this, (uint64_t)v17, 0, 8, 0, 0);
            long long v49 = *v14;
            uint64_t v50 = v29;
            llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)v34, &v49, v6, v30, (uint64_t)v56);
            uint64_t v16 = *(void *)&v56[0];
          }
          uint64_t EntryForTarget = *(void *)(v16 + 16);
LABEL_28:
          *char v9 = EntryForTarget;
          goto LABEL_29;
        }
        if (v11 == 9 && (*(unsigned char *)(*(void *)(*v9 + 16) + 8) & 1) == 0)
        {
          uint64_t EntryForTarget = llvm::jitlink::TableManager<llvm::jitlink::aarch64::PLTTableManager>::getEntryForTarget((uint64_t)v42, (uint64_t)this, (_OWORD *)*v9, v10);
          goto LABEL_28;
        }
LABEL_29:
        v9 += 4;
      }
      if (++v5 == v33)
      {
        uint64_t v5 = v58;
        a2 = v32;
        break;
      }
    }
  }
  if (v5)
  {
    int64x2_t v59 = v5;
    operator delete(v5);
  }
  *a2 = 0;
  MEMORY[0x263E500A0](v34[0], 8);
  MEMORY[0x263E500A0](v39[0], 8);
  MEMORY[0x263E500A0](v42[0], 8);
  return MEMORY[0x263E500A0](v46[0], 8);
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::makeTargetFlags()
{
  return 0;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRawOffset(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::excludeSection()
{
  return 0;
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFLinkGraphBuilder(int a1, int a2, uint64_t a3, void *__src, size_t __len)
{
  if (__src)
  {
    std::string::basic_string[abi:nn180100](__dst, __src, __len);
  }
  else
  {
    __dst[0] = 0;
    __dst[1] = 0;
    uint64_t v11 = 0;
  }
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  long long v8 = *(_OWORD *)(a3 + 24);
  uint64_t v9 = *(void *)(a3 + 40);
  operator new();
}

void anonymous namespace'::ELFLinkGraphBuilder_aarch64<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFLinkGraphBuilder_aarch64(uint64_t a1)
{
  *(void *)a1 = &unk_270DBEEA0;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x263E500B0);
}

void anonymous namespace'::ELFLinkGraphBuilder_aarch64<llvm::object::ELFType<(llvm::support::endianness)1,true>>::addRelocations(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = v5 + (v3 << 6);
    do
    {
      if (*(_DWORD *)(v5 + 4) == 4)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(*(void **)(a1 + 24), *(_DWORD *)(v5 + 44), (uint64_t)&v52);
        if (v53)
        {
          uint64_t v27 = v52;
          *a2 = (uint64_t)v52;
          if (v27) {
            return;
          }
        }
        else
        {
          uint64_t v7 = *(void **)(a1 + 24);
          *(void *)&long long v32 = llvm::object::defaultWarningHandler;
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(v7, v52, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v32, (uint64_t)&v50);
          if (v51)
          {
            uint64_t v28 = v50;
            *(void *)&long long v50 = 0;
            *a2 = v28;
          }
          else if ((*(unsigned char *)(a1 + 72) {
                  || (long long v32 = v50,
          }
                      std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90], (uint64_t)&v32) == (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90]))&& !(*(unsigned int (**)(uint64_t, unsigned int *))(*(void *)a1 + 40))(a1, v52))
          {
            GraphBlocuint64_t k = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, *(_DWORD *)(v5 + 44));
            if (!GraphBlock)
            {
              LOWORD(v34) = 1283;
              *(void *)&long long v32 = "Refencing a section that wasn't added to the graph: ";
              long long v33 = v50;
              getErrorErrorCat();
              operator new();
            }
            uint64_t v9 = (void *)GraphBlock;
            llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(*(void **)(a1 + 24), (void *)v5, (uint64_t)&v47);
            uint64_t v10 = v47;
            if (v49)
            {
              uint64_t v47 = 0;
            }
            else
            {
              if (v48)
              {
                uint64_t v11 = 24 * v48;
                while (1)
                {
                  unint64_t v12 = v52;
                  int v13 = *(_DWORD *)(v10 + 12);
                  int v40 = v13;
                  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationSymbol(*(void **)(a1 + 24), v10, *(void **)(a1 + 48), (uint64_t)&v54);
                  if ((v55 & 1) == 0) {
                    break;
                  }
                  uint64_t v17 = v54;
                  uint64_t v54 = 0;
                  *a2 = v17;
LABEL_51:
                  if (v55)
                  {
                    uint64_t v22 = v54;
                    uint64_t v54 = 0;
                    if (v22) {
                      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
                    }
                  }
                  if (*a2) {
                    goto LABEL_83;
                  }
                  v10 += 24;
                  v11 -= 24;
                  if (!v11) {
                    goto LABEL_81;
                  }
                }
                uint64_t GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(a1, v13);
                if (!GraphSymbol)
                {
                  int v18 = *(_DWORD *)(a1 + 112);
                  *(void *)&long long v32 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {0}, "
                                    "shndx: {1} Size of table: {2}";
                  *((void *)&v32 + 1) = 113;
                  *(void *)&long long v33 = v39;
                  *((void *)&v33 + 1) = 3;
                  unint64_t v34 = &unk_270DBEB80;
                  unsigned int v35 = &v40;
                  v36[0] = &unk_270DBED90;
                  v36[1] = v54 + 6;
                  unint64_t v37 = &unk_270DBE8C8;
                  int v38 = v18;
                  v39[0] = &v34;
                  v39[1] = v36;
                  void v39[2] = &v37;
                  getErrorErrorCat();
                  uint64_t v45 = 3;
                  uint64_t v46 = &getErrorErrorCat(void)::ErrorErrorCat;
                  llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>();
                }
                signed int v15 = *(_DWORD *)(v10 + 8);
                signed int v44 = v15;
                if (v15 <= 310)
                {
                  switch(v15)
                  {
                    case 257:
                      char v16 = 2;
                      goto LABEL_48;
                    case 258:
                      char v16 = 4;
                      goto LABEL_48;
                    case 259:
                    case 262:
                    case 263:
                    case 265:
                    case 267:
                    case 270:
                    case 271:
                    case 272:
                    case 273:
                    case 274:
                    case 276:
                    case 279:
                    case 280:
                    case 281:
                      goto LABEL_33;
                    case 260:
                      char v16 = 5;
                      goto LABEL_48;
                    case 261:
                      char v16 = 6;
                      goto LABEL_48;
                    case 264:
                      uint64_t v19 = (uint64_t *)(v10 + 16);
                      uint64_t v20 = *(void *)v10 + *((void *)v12 + 2) - *v9;
                      if ((*(_DWORD *)(v9[3] + v20) & 0x5FFFFFE0) != 0x52800000) {
                        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[80]>();
                      }
                      goto LABEL_45;
                    case 266:
                      uint64_t v19 = (uint64_t *)(v10 + 16);
                      uint64_t v20 = *(void *)v10 + *((void *)v12 + 2) - *v9;
                      if ((*(_DWORD *)(v9[3] + v20) & 0x5FFFFFE0) != 0x52A00000) {
                        goto LABEL_70;
                      }
                      goto LABEL_45;
                    case 268:
                      uint64_t v19 = (uint64_t *)(v10 + 16);
                      uint64_t v20 = *(void *)v10 + *((void *)v12 + 2) - *v9;
                      if ((*(_DWORD *)(v9[3] + v20) & 0x5FFFFFE0) != 0x52C00000) {
                        goto LABEL_70;
                      }
                      goto LABEL_45;
                    case 269:
                      uint64_t v19 = (uint64_t *)(v10 + 16);
                      uint64_t v20 = *(void *)v10 + *((void *)v12 + 2) - *v9;
                      if ((*(_DWORD *)(v9[3] + v20) & 0x5FFFFFE0) != 0x52E00000) {
                        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[78]>();
                      }
LABEL_45:
                      char v16 = 10;
                      break;
                    case 275:
                      char v16 = 12;
                      goto LABEL_48;
                    case 277:
                      char v16 = 13;
                      goto LABEL_48;
                    case 278:
                      uint64_t v19 = (uint64_t *)(v10 + 16);
                      uint64_t v20 = *(void *)v10 + *((void *)v12 + 2) - *v9;
                      int v23 = *(_DWORD *)(v9[3] + v20);
                      if ((~v23 & 0x4800000) == 0 || (v23 & 0xFB000000) != 956301312) {
                        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[74]>();
                      }
                      goto LABEL_71;
                    case 282:
                    case 283:
                      char v16 = 9;
                      goto LABEL_48;
                    case 284:
                      uint64_t v19 = (uint64_t *)(v10 + 16);
                      uint64_t v20 = *(void *)v10 + *((void *)v12 + 2) - *v9;
                      if ((*(_DWORD *)(v9[3] + v20) & 0xFB000000) != 0x79000000) {
                        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
                      }
                      goto LABEL_71;
                    case 285:
                      uint64_t v19 = (uint64_t *)(v10 + 16);
                      uint64_t v20 = *(void *)v10 + *((void *)v12 + 2) - *v9;
                      if ((*(_DWORD *)(v9[3] + v20) & 0xFB000000) != 0xB9000000) {
                        goto LABEL_70;
                      }
                      goto LABEL_71;
                    case 286:
                      uint64_t v19 = (uint64_t *)(v10 + 16);
                      uint64_t v20 = *(void *)v10 + *((void *)v12 + 2) - *v9;
                      unsigned int v25 = *(_DWORD *)(v9[3] + v20);
                      if (v25 >> 30 != 3 || (v25 & 0x3B000000) != 956301312) {
LABEL_70:
                      }
                        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[81]>();
                      goto LABEL_71;
                    default:
                      if (v15 != 299) {
                        goto LABEL_33;
                      }
                      uint64_t v19 = (uint64_t *)(v10 + 16);
                      uint64_t v20 = *(void *)v10 + *((void *)v12 + 2) - *v9;
                      if (*(_DWORD *)(v9[3] + v20) >> 23 != 123) {
                        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[83]>();
                      }
LABEL_71:
                      char v16 = 13;
                      break;
                  }
LABEL_49:
                  uint64_t v21 = *v19;
                  *(void *)&long long v32 = GraphSymbol;
                  DWORD2(v32) = v20;
                  *(void *)&long long v33 = v21;
                  BYTE8(v33) = v16;
                  llvm::jitlink::Block::addEdge(v9, &v32);
LABEL_50:
                  *a2 = 0;
                  goto LABEL_51;
                }
                if (v15 > 562)
                {
                  if ((v15 - 563) >= 2)
                  {
                    if (v15 != 569)
                    {
LABEL_33:
                      *(void *)&long long v32 = "{0:d}: ";
                      *((void *)&v32 + 1) = 7;
                      *(void *)&long long v33 = v36;
                      *((void *)&v33 + 1) = 1;
                      unint64_t v34 = &unk_270DBCE28;
                      unsigned int v35 = &v44;
                      v36[0] = &v34;
                      uint64_t v41 = "Unsupported aarch64 relocation:";
                      uint64_t v42 = &v32;
                      __int16 v43 = 1539;
                      llvm::object::getELFRelocationTypeName((llvm::object *)0xB7, v15);
                      operator new();
                    }
                    goto LABEL_50;
                  }
                  char v16 = 20;
                }
                else
                {
                  switch(v15)
                  {
                    case 311:
                      char v16 = 14;
                      break;
                    case 312:
                      char v16 = 15;
                      break;
                    case 562:
                      char v16 = 19;
                      break;
                    default:
                      goto LABEL_33;
                  }
                }
LABEL_48:
                uint64_t v19 = (uint64_t *)(v10 + 16);
                uint64_t v20 = *(void *)v10 + *((void *)v12 + 2) - *v9;
                goto LABEL_49;
              }
LABEL_81:
              uint64_t v10 = 0;
            }
            *a2 = v10;
LABEL_83:
            if (v49)
            {
              uint64_t v29 = v47;
              uint64_t v47 = 0;
              if (v29) {
                (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
              }
            }
          }
          else
          {
            *a2 = 0;
          }
          if (v51)
          {
            uint64_t v30 = v50;
            *(void *)&long long v50 = 0;
            if (v30) {
              (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
            }
          }
          if (v53)
          {
            uint64_t v31 = v52;
            long long v52 = 0;
            if (v31) {
              (*(void (**)(unsigned int *))(*(void *)v31 + 8))(v31);
            }
          }
          if (*a2) {
            return;
          }
        }
      }
      else
      {
        *a2 = 0;
      }
      v5 += 64;
    }
    while (v5 != v6);
  }
  *a2 = 0;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection@<X0>(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  size_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a1, (uint64_t)v8);
  if (v9)
  {
    unint64_t v6 = v8[0];
    char v7 = *(unsigned char *)(a3 + 8) | 1;
  }
  else
  {
    if (v8[1] <= (unint64_t)a2) {
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    unint64_t v6 = v8[0] + ((unint64_t)a2 << 6);
    char v7 = *(unsigned char *)(a3 + 8) & 0xFE;
  }
  *(unsigned char *)(a3 + 8) = v7;
  *(void *)a3 = v6;
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(void *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, void *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a1, (uint64_t)v16);
  if (v17)
  {
    uint64_t v11 = v16[0];
    *(unsigned char *)(a5 + 16) |= 1u;
    *(void *)a5 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if (v15)
    {
      uint64_t v12 = v14[0];
      *(unsigned char *)(a5 + 16) |= 1u;
      *(void *)a5 = v12;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if (v15)
      {
        uint64_t v10 = v14[0];
        v14[0] = 0;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
      }
    }
    if (v17)
    {
      uint64_t v13 = v16[0];
      v16[0] = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
    }
  }
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  unint64_t v4 = *(void *)(*result + 40);
  unint64_t v25 = v4;
  if (v4)
  {
    uint64_t v5 = (const char *)*(unsigned __int16 *)(v3 + 58);
    if (v5 != (const char *)64)
    {
      uint64_t v22 = "invalid e_shentsize in ELF header: ";
      int v23 = v5;
      __int16 v24 = 2307;
      LODWORD(v18[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    unint64_t v6 = result[1];
    if (v4 > 0xFFFFFFFFFFFFFFBFLL || v4 + 64 > v6)
    {
      uint64_t v22 = "section header table goes past the end of the file: e_shoff = 0x";
      int v23 = (const char *)&v25;
      __int16 v24 = 3587;
      LODWORD(v18[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v10 = v3 + v4;
    unint64_t v11 = *(unsigned __int16 *)(v3 + 60);
    unint64_t v21 = v11;
    if (!v11)
    {
      unint64_t v11 = *(void *)(v10 + 32);
      unint64_t v21 = v11;
      if (v11 >> 58)
      {
        v18[0] = "invalid number of sections specified in the NULL section's sh_size field (";
        uint64_t v19 = (uint64_t *)&v21;
        __int16 v20 = 3075;
        uint64_t v22 = (const char *)v18;
        int v23 = ")";
        __int16 v24 = 770;
        LODWORD(v16[0]) = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
      }
    }
    BOOL v12 = __CFADD__(v4, v11 << 6);
    unint64_t v13 = v4 + (v11 << 6);
    if (v12)
    {
      v14[0] = "invalid section header table offset (e_shoff = 0x";
      uint64_t v14[2] = &v25;
      __int16 v15 = 3587;
      v16[0] = v14;
      uint64_t v16[2] = ") or invalid number of sections specified in the first section header's sh_size field (0x";
      __int16 v17 = 770;
      v18[0] = v16;
      uint64_t v19 = (uint64_t *)&v21;
      __int16 v20 = 3586;
      uint64_t v22 = (const char *)v18;
      int v23 = ")";
      __int16 v24 = 770;
      int v26 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    if (v13 > v6)
    {
      uint64_t v22 = "section table goes past the end of file";
      __int16 v24 = 259;
      LODWORD(v18[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    *(unsigned char *)(a2 + 16) &= ~1u;
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v11;
  }
  else
  {
    uint64_t v8 = result[2];
    uint64_t v9 = result[3];
    if (v8 == v9)
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) &= ~1u;
    }
    else
    {
      *(unsigned char *)(a2 + 16) &= ~1u;
      *(void *)a2 = v8;
      *(void *)(a2 + 8) = (v9 - v8) >> 6;
    }
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionStringTable(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, void *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7 = *(unsigned __int16 *)(*a1 + 62);
  if (v7 == 0xFFFF)
  {
    if (!a3)
    {
      BOOL v12 = "e_shstrndx == SHN_XINDEX, but the section header table is empty";
      __int16 v14 = 259;
      LODWORD(v10[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    unsigned int v7 = *(_DWORD *)(a2 + 40);
    if (v7) {
      goto LABEL_3;
    }
LABEL_9:
    *(unsigned char *)(a6 + 16) &= ~1u;
    uint64_t v9 = a1[6];
    *(void *)a6 = a1[5];
    *(void *)(a6 + 8) = v9;
    return;
  }
  if (!*(_WORD *)(*a1 + 62)) {
    goto LABEL_9;
  }
LABEL_3:
  if (a3 <= v7)
  {
    v10[0] = "section header string table index ";
    void v10[2] = v7;
    __int16 v11 = 2051;
    BOOL v12 = (const char *)v10;
    unint64_t v13 = " does not exist";
    __int16 v14 = 770;
    int v15 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v8 = a2 + ((unint64_t)v7 << 6);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTable(a1, v8, a4, a5, a6);
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName@<X0>(void *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6 = *a2;
  if (v6)
  {
    if (a4 <= v6)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(result, (uint64_t)a2, &v13);
      uint64_t v8 = std::string::insert(&v13, 0, "a section ");
      std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      uint64_t v10 = std::string::append(&v14, " has an invalid sh_name (0x");
      std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v16 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = v6;
      v17[0] = __p;
      uint64_t v17[2] = &v12;
      __int16 v18 = 3588;
      uint64_t v19 = v17;
      __int16 v20 = ") offset which goes past the end of the section name string table";
      __int16 v21 = 770;
      int v22 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    unsigned int v7 = (const char *)(a3 + v6);
    size_t result = (void *)strlen(v7);
    *(unsigned char *)(a5 + 16) &= ~1u;
    *(void *)a5 = v7;
    *(void *)(a5 + 8) = result;
  }
  else
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(unsigned char *)(a5 + 16) &= ~1u;
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTable(void *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, void *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4) == 3) {
    goto LABEL_10;
  }
  llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, a2, &v29);
  uint64_t v10 = std::string::insert(&v29, 0, "invalid sh_type for string table section ");
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  unint64_t v12 = std::string::append(&v30, ": expected SHT_STRTAB, but got ");
  std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
  long long v34 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string::size_type v35 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), *(_DWORD *)(a2 + 4));
  v31[0] = &v34;
  _OWORD v31[2] = ELFSectionTypeName;
  v31[3] = v15;
  __int16 v32 = 1284;
  a3(&v28, a4, v31);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::string::size_type v16 = v28.__r_.__value_.__r.__words[0];
  if (!v28.__r_.__value_.__r.__words[0])
  {
LABEL_10:
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<char>(a1, a2, (uint64_t)&v34);
    uint64_t v17 = v34;
    if (v35)
    {
      *(void *)&long long v34 = 0;
      *(unsigned char *)(a5 + 16) |= 1u;
      *(void *)a5 = v17;
    }
    else
    {
      uint64_t v18 = *((void *)&v34 + 1);
      if (!*((void *)&v34 + 1))
      {
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, a2, &v28);
        int v23 = std::string::insert(&v28, 0, "SHT_STRTAB string table section ");
        std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        unint64_t v25 = std::string::append(&v29, " is empty");
        std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        __int16 v32 = 260;
        v31[0] = &v30;
        int v33 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
      }
      if (*(unsigned char *)(*((void *)&v34 + 1) + v34 - 1))
      {
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, a2, &v28);
        uint64_t v19 = std::string::insert(&v28, 0, "SHT_STRTAB string table section ");
        std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        __int16 v21 = std::string::append(&v29, " is non-null terminated");
        std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        __int16 v32 = 260;
        v31[0] = &v30;
        int v33 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
      }
      *(unsigned char *)(a5 + 16) &= ~1u;
      *(void *)a5 = v17;
      *(void *)(a5 + 8) = v18;
    }
    if (v35)
    {
      uint64_t v27 = v34;
      *(void *)&long long v34 = 0;
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
  }
  else
  {
    *(unsigned char *)(a5 + 16) |= 1u;
    *(void *)a5 = v16;
  }
}

void llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a1, (uint64_t)v13);
  if (v14)
  {
    std::string::size_type v9 = v13[0];
    v13[0] = 0;
    v12.__r_.__value_.__r.__words[0] = v9;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v12);
    if (v12.__r_.__value_.__r.__words[0]) {
      (*(void (**)(std::string::size_type))(*(void *)v12.__r_.__value_.__l.__data_ + 8))(v12.__r_.__value_.__r.__words[0]);
    }
    std::string::basic_string[abi:nn180100]<0>(a3, "[unknown index]");
  }
  else
  {
    std::to_string(&v11, (int64_t)(a2 - v13[0]) >> 6);
    uint64_t v5 = std::string::insert(&v11, 0, "[index ");
    std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unsigned int v7 = std::string::append(&v12, "]");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)a3 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    a3[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  if (v14)
  {
    std::string::size_type v10 = v13[0];
    v13[0] = 0;
    if (v10) {
      (*(void (**)(std::string::size_type))(*(void *)v10 + 8))(v10);
    }
  }
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<char>@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v37 = v5;
  uint64_t v38 = v6;
  if (__CFADD__(v6, v5))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(result, a2, &v24);
    unsigned int v7 = std::string::insert(&v24, 0, "section ");
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v9 = std::string::append(&v19, " has a sh_offset (0x");
    std::string::size_type v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v22 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v25[0] = __p;
    std::string::size_type v26 = &v38;
    __int16 v27 = 3588;
    v28[0] = v25;
    std::string v29 = ") + sh_size (0x";
    __int16 v30 = 770;
    v31[0] = v28;
    __int16 v32 = &v37;
    __int16 v33 = 3586;
    long long v34 = v31;
    std::string::size_type v35 = ") that cannot be represented";
    __int16 v36 = 770;
    LODWORD(v18.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if ((unint64_t)(v5 + v6) > result[1])
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(result, a2, &v17);
    std::string v11 = std::string::insert(&v17, 0, "section ");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v13 = std::string::append(&v18, " has a sh_offset (0x");
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
    v19.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38;
    __int16 v20 = 3588;
    __p[0] = &v19;
    std::string::size_type v22 = ") + sh_size (0x";
    __int16 v23 = 770;
    v25[0] = __p;
    std::string::size_type v26 = &v37;
    __int16 v27 = 3586;
    v28[0] = v25;
    std::string v29 = ") that is greater than the file size (0x";
    __int16 v30 = 770;
    uint64_t v16 = v3[1];
    v31[0] = v28;
    __int16 v32 = &v16;
    __int16 v33 = 3586;
    long long v34 = v31;
    std::string::size_type v35 = ")";
    __int16 v36 = 770;
    int v39 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v15 = *result + v6;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v15;
  *(void *)(a3 + 8) = v5;
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = result;
  if (a2[7] != 24)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(result, (uint64_t)a2, &v28);
    std::string::size_type v12 = std::string::insert(&v28, 0, "section ");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v14 = std::string::append(&v30, " has invalid sh_entsize: expected ");
    uint64_t v15 = (uint64_t *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    long long v34 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v32.__r_.__value_.__r.__words[0] = 24;
    v38[0] = __p;
    int v39 = &v32;
    __int16 v40 = 2564;
    v41[0] = v38;
    uint64_t v42 = (std::string *)", but got ";
    __int16 v43 = 770;
    v27.__r_.__value_.__r.__words[0] = a2[7];
    signed int v44 = v41;
    uint64_t v45 = &v27;
    __int16 v46 = 3074;
    LODWORD(v26.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  unint64_t v36 = v7;
  uint64_t v37 = v6;
  if (v7 % 0x18)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(result, (uint64_t)a2, &v32);
    std::string::size_type v8 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v10 = std::string::append(&v28, " has an invalid sh_size (");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v30;
    long long v34 = (uint64_t *)&v36;
    __int16 v35 = 3076;
    v38[0] = __p;
    int v39 = (std::string *)") which is not a multiple of its sh_entsize (";
    __int16 v40 = 770;
    v27.__r_.__value_.__r.__words[0] = a2[7];
    v41[0] = v38;
    uint64_t v42 = &v27;
    __int16 v43 = 3074;
    signed int v44 = v41;
    uint64_t v45 = (std::string *)")";
    __int16 v46 = 770;
    LODWORD(v26.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (__CFADD__(v6, v7))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(result, (uint64_t)a2, &v32);
    uint64_t v16 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::string v18 = std::string::append(&v28, " has a sh_offset (0x");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v30;
    long long v34 = &v37;
    __int16 v35 = 3588;
    v38[0] = __p;
    int v39 = (std::string *)") + sh_size (0x";
    __int16 v40 = 770;
    v41[0] = v38;
    uint64_t v42 = (std::string *)&v36;
    __int16 v43 = 3586;
    signed int v44 = v41;
    uint64_t v45 = (std::string *)") that cannot be represented";
    __int16 v46 = 770;
    LODWORD(v27.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (v7 + v6 > result[1])
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(result, (uint64_t)a2, &v26);
    __int16 v20 = std::string::insert(&v26, 0, "section ");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v22 = std::string::append(&v27, " has a sh_offset (0x");
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    v28.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37;
    __int16 v29 = 3588;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    v30.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    __int16 v31 = 770;
    __p[0] = &v30;
    long long v34 = (uint64_t *)&v36;
    __int16 v35 = 3586;
    v38[0] = __p;
    int v39 = (std::string *)") that is greater than the file size (0x";
    __int16 v40 = 770;
    uint64_t v25 = v4[1];
    v41[0] = v38;
    uint64_t v42 = (std::string *)&v25;
    __int16 v43 = 3586;
    signed int v44 = v41;
    uint64_t v45 = (std::string *)")";
    __int16 v46 = 770;
    int v47 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v24 = *result + v6;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v24;
  *(void *)(a3 + 8) = v7 / 0x18;
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationSymbol@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *result;
  if (*(_WORD *)(*result + 18) == 8 && *(unsigned char *)(v4 + 4) == 2)
  {
    if (*(unsigned char *)(v4 + 5) == 1) {
      unint64_t v5 = *(void *)(a2 + 8) << 32;
    }
    else {
      unint64_t v5 = *(void *)(a2 + 8);
    }
  }
  else
  {
    unint64_t v5 = *(void *)(a2 + 8);
  }
  unint64_t v6 = HIDWORD(v5);
  if (v6) {
    return llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(result, a3, v6, a4);
  }
  *(unsigned char *)(a4 + 8) &= ~1u;
  *(void *)a4 = 0;
  return result;
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[74]>()
{
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[81]>()
{
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[83]>()
{
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[80]>()
{
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[78]>()
{
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>@<X0>(void *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  size_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(a1, a2, (uint64_t)v22);
  if (v23)
  {
    uint64_t v8 = v22[0];
    char v9 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    if (v22[1] <= (unint64_t)a3)
    {
      uint64_t v11 = 24 * a3;
      v12[0] = "can't read an entry at 0x";
      uint64_t v12[2] = &v11;
      __int16 v13 = 3587;
      v14[0] = v12;
      uint64_t v14[2] = ": it goes past the end of the section (0x";
      __int16 v15 = 770;
      uint64_t v10 = a2[4];
      v16[0] = v14;
      uint64_t v16[2] = &v10;
      __int16 v17 = 3586;
      std::string v18 = v16;
      std::string::size_type v19 = ")";
      __int16 v20 = 770;
      int v21 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v8 = v22[0] + 24 * a3;
    char v9 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v9;
  *(void *)a4 = v8;
  return result;
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::prepare(uint64_t a1@<X0>, void **a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(*(void **)(a1 + 24), (uint64_t)__p);
  if ((v18 & 1) != 0
    || (*(_OWORD *)(a1 + 32) = *(_OWORD *)__p,
        uint64_t v4 = *(void **)(a1 + 24),
        uint64_t v5 = *(void *)(a1 + 32),
        unint64_t v6 = *(void *)(a1 + 40),
        __int16 v15 = llvm::object::defaultWarningHandler,
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionStringTable(v4, v5, v6, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v15, (uint64_t)__p), (v18 & 1) != 0))
  {
LABEL_16:
    *a2 = __p[0];
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)__p;
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      uint64_t v8 = v7 << 6;
      char v9 = (unsigned int *)(*(void *)(a1 + 32) + 40);
      do
      {
        uint64_t v10 = (uint64_t)(v9 - 10);
        int v11 = *(v9 - 9);
        if (v11 == 2)
        {
          if (*(void *)(a1 + 48))
          {
            std::operator+<char>();
            llvm::make_error<llvm::jitlink::JITLinkError,std::string>();
          }
          *(void *)(a1 + 48) = v10;
          int v11 = *(v9 - 9);
        }
        if (v11 == 18)
        {
          unint64_t v12 = *v9;
          if (*(void *)(a1 + 40) <= v12) {
            llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
          }
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable(*(void **)(a1 + 24), v10, (uint64_t)__p);
          if (v18) {
            goto LABEL_16;
          }
          __int16 v15 = (void (*)(llvm::object *, const llvm::Twine *))(*(void *)(a1 + 32) + (v12 << 6));
          long long v16 = *(_OWORD *)__p;
          llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::try_emplace<llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>(a1 + 128, &v15, &v16, (uint64_t)&v14);
          if (v18)
          {
            __int16 v13 = __p[0];
            __p[0] = 0;
            if (v13) {
              (*(void (**)(void *))(*(void *)v13 + 8))(v13);
            }
          }
        }
        v9 += 16;
        v8 -= 64;
      }
      while (v8);
    }
    *a2 = 0;
  }
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::graphifySections@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 40))
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(result + 80);
    unsigned int v6 = 1;
    do
    {
      uint64_t v7 = *(void *)(v3 + 32) + (v4 << 6);
      size_t result = (uint64_t)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(*(void **)(v3 + 24), (unsigned int *)v7, *(void *)(v3 + 56), *(void *)(v3 + 64), (uint64_t)&v27);
      if (v28)
      {
        uint64_t v14 = v27;
        *(void *)&long long v27 = 0;
      }
      else
      {
        size_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v7);
        if ((result & 1) != 0
          || !*(_DWORD *)(v7 + 4)
          || !*(unsigned char *)(v3 + 72)
          && (long long v25 = v27,
              size_t result = (uint64_t)std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90], (uint64_t)&v25), (char **)result != &llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90]))
        {
          int v15 = 6;
          goto LABEL_20;
        }
        uint64_t SectionByName = llvm::jitlink::LinkGraph::findSectionByName(*(void *)(v3 + 8), v27, *((uint64_t *)&v27 + 1), v8);
        if (!SectionByName) {
          llvm::jitlink::LinkGraph::createSection();
        }
        if (*(_DWORD *)(v7 + 4) == 8)
        {
          uint64_t v10 = *(void *)(v3 + 8);
          uint64_t v11 = *(void *)(v7 + 32);
          uint64_t v12 = *(void *)(v7 + 16);
          uint64_t v24 = *(void *)(v7 + 48);
          *(void *)&long long v25 = v12;
          *(void *)&long long v22 = v11;
          uint64_t v23 = 0;
          __int16 v13 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v10, SectionByName, (uint64_t *)&v22, (uint64_t *)&v25, (unint64_t *)&v24, &v23);
LABEL_17:
          LODWORD(v25) = v6 - 1;
          size_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(v5, &v25);
          int v15 = 0;
          *(void *)(result + 8) = v13;
          goto LABEL_20;
        }
        size_t result = (uint64_t)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<char>(*(void **)(v3 + 24), v7, (uint64_t)&v25);
        if ((v26 & 1) == 0)
        {
          uint64_t v16 = *(void *)(v3 + 8);
          uint64_t v17 = *(void *)(v7 + 16);
          uint64_t v18 = *(void *)(v7 + 48);
          long long v22 = v25;
          uint64_t v23 = v18;
          uint64_t v24 = v17;
          uint64_t v21 = 0;
          __int16 v13 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v16, SectionByName, (uint64_t *)&v22, &v24, (unint64_t *)&v23, &v21);
          if (v26)
          {
            uint64_t v19 = v25;
            *(void *)&long long v25 = 0;
            if (v19) {
              (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
            }
          }
          goto LABEL_17;
        }
        uint64_t v14 = v25;
      }
      *a2 = v14;
      int v15 = 1;
LABEL_20:
      if (v28)
      {
        size_t result = v27;
        *(void *)&long long v27 = 0;
        if (result) {
          size_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      if (v15 != 6 && v15) {
        return result;
      }
      uint64_t v4 = v6;
    }
    while (*(void *)(v3 + 40) != v6++);
  }
  *a2 = 0;
  return result;
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::graphifySymbols(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(*(void **)(a1 + 24), v3, (uint64_t)&v61);
    if (v63)
    {
      *a2 = v61;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTableForSymtab(*(void **)(a1 + 24), *(void *)(a1 + 48), *(void *)(a1 + 32), *(void *)(a1 + 40), (uint64_t)v59);
      if (v60)
      {
        uint64_t v5 = v59[0];
        v59[0] = 0;
        goto LABEL_47;
      }
      uint64_t v5 = v62;
      if (v62)
      {
        uint64_t v6 = 0;
        __int16 v40 = (uint64_t *)(a1 + 104);
        unsigned int v7 = 1;
        while (1)
        {
          uint64_t v8 = v61 + 24 * v6;
          if ((*(unsigned char *)(v8 + 4) & 0xF) != 4) {
            break;
          }
LABEL_17:
          uint64_t v6 = v7;
          BOOL v24 = v62 == v7++;
          if (v24)
          {
            uint64_t v5 = 0;
            goto LABEL_47;
          }
        }
        llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getName((llvm::object *)v8, v59[0], v59[1], (uint64_t)&v56);
        if (v58)
        {
          uint64_t v22 = v56;
          uint64_t v56 = 0;
        }
        else
        {
          unsigned int v9 = *(unsigned __int8 *)(v8 + 4);
          unsigned int v10 = v9 & 0xF;
          if (v10 == 5 || *(unsigned __int16 *)(v8 + 6) == 65522)
          {
            uint64_t v11 = *(void *)(a1 + 8);
            uint64_t CommonSection = llvm::jitlink::ELFLinkGraphBuilderBase::getCommonSection((llvm::jitlink::ELFLinkGraphBuilderBase *)a1);
            uint64_t v14 = *(void *)(v8 + 8);
            uint64_t v13 = *(void *)(v8 + 16);
            uint64_t v54 = 0;
            v50[0] = v13;
            v49[0] = v14;
            v47[0] = 0;
            int v15 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v11, CommonSection, v50, &v54, (unint64_t *)v49, v47);
            uint64_t v17 = v56;
            uint64_t v16 = v57;
            uint64_t v18 = *(void *)(v8 + 16);
            uint64_t v19 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v11, 40, 3);
            *uint64_t v19 = v17;
            v19[1] = v16;
            _OWORD v19[4] = v18;
            void v19[2] = v15;
            _OWORD v19[3] = 0x200000000000000;
            uint64_t v20 = v15[2] + 56;
            v50[0] = (uint64_t)v19;
            llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v20, v50, (uint64_t)&v54);
            LODWORD(v54) = v7 - 1;
            *((void *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(v40, &v54)+ 1) = v19;
            int v21 = 8;
            goto LABEL_13;
          }
          if (!*(_WORD *)(v8 + 6))
          {
            if (v9 >= 0x10)
            {
              unsigned int v34 = v9 >> 4;
              if (v34 - 1 >= 2)
              {
                v47[0] = (uint64_t)"Invalid symbol binding ";
                __int16 v48 = 259;
                int v37 = *(unsigned __int8 *)(v8 + 4) >> 4;
                __int16 v46 = 265;
                LODWORD(v45[0]) = v37;
                llvm::operator+(v47, v45, (uint64_t)v49);
                __int16 v43 = " for external symbol ";
                __int16 v44 = 259;
                llvm::operator+(v49, (uint64_t *)&v43, (uint64_t)v50);
                __int16 v42 = 261;
                v41[0] = v56;
                v41[1] = v57;
                llvm::operator+(v50, v41, (uint64_t)&v54);
                getErrorErrorCat();
                llvm::make_error<llvm::StringError,llvm::Twine,std::error_code>();
              }
              __int16 v35 = llvm::jitlink::LinkGraph::addExternalSymbol(*(void *)(a1 + 8), v56, v57, *(void *)(v8 + 16), v34 == 2);
              goto LABEL_43;
            }
LABEL_34:
            int v21 = 0;
            goto LABEL_13;
          }
          BOOL v24 = v10 < 4 || v10 == 6;
          if (!v24) {
            goto LABEL_34;
          }
          llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolLinkageAndScope(v8, v56, v57, (uint64_t)&v54);
          if ((v55 & 1) == 0)
          {
            char v25 = v54;
            char v26 = BYTE1(v54);
            int v27 = *(unsigned __int16 *)(v8 + 6);
            if (v27 != 0xFFFF) {
              goto LABEL_28;
            }
            v50[0] = *(void *)(a1 + 48);
            uint64_t v54 = 0;
            int v21 = 8;
            if (!llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)(a1 + 128), v50, &v54)|| v54 == *(void *)(a1 + 128) + 24 * *(unsigned int *)(a1 + 144))
            {
LABEL_13:
              if (v58)
              {
                uint64_t v23 = v56;
                uint64_t v56 = 0;
                if (v23) {
                  (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
                }
              }
              if ((v21 | 8) != 8) {
                goto LABEL_48;
              }
              goto LABEL_17;
            }
            uint64_t v36 = *(void *)(v54 + 16);
            v51[0] = *(void *)(v54 + 8);
            v51[1] = v36;
            char v52 = 1;
            uint64_t v53 = 0;
            llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)1,false>>(v7 - 1, v51, (uint64_t)&v54);
            if ((v55 & 1) == 0)
            {
              int v27 = v54;
LABEL_28:
              GraphBlocuint64_t k = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, v27);
              if (GraphBlock)
              {
                uint64_t v29 = GraphBlock;
                uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v8);
                uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v8, v30);
                uint64_t v32 = *(void *)(a1 + 8);
                if (v57) {
                  __int16 v33 = llvm::jitlink::LinkGraph::addDefinedSymbol(v32, v29, v31, v56, v57, *(void *)(v8 + 16), v25, v26, (*(unsigned char *)(v8 + 4) & 0xF) == 2, 0);
                }
                else {
                  __int16 v33 = llvm::jitlink::LinkGraph::addAnonymousSymbol(v32, v29, v31, *(void *)(v8 + 16), 0, 0);
                }
                __int16 v35 = v33;
                void v33[3] = v33[3] & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)v30 << 63);
LABEL_43:
                LODWORD(v54) = v7 - 1;
                int v21 = 0;
                *((void *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(v40, &v54)+ 1) = v35;
                goto LABEL_13;
              }
              goto LABEL_34;
            }
          }
          uint64_t v22 = v54;
        }
        *a2 = v22;
        int v21 = 1;
        goto LABEL_13;
      }
LABEL_47:
      *a2 = v5;
LABEL_48:
      if (v60)
      {
        uint64_t v38 = v59[0];
        v59[0] = 0;
        if (v38) {
          (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
        }
      }
      if (v63)
      {
        uint64_t v39 = v61;
        uint64_t v61 = 0;
        if (v39) {
          (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
        }
      }
    }
  }
  else
  {
    *a2 = 0;
  }
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  size_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a1, (uint64_t)v8);
  if (v9)
  {
    uint64_t v7 = v8[0];
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v7;
  }
  else
  {
    size_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if (v9)
    {
      size_t result = (void *)v8[0];
      v8[0] = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  size_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>(a1, (void *)a2, (uint64_t)&v31);
  uint64_t v11 = v31;
  if (v33)
  {
    uint64_t v31 = 0;
    *(unsigned char *)(a5 + 16) |= 1u;
  }
  else
  {
    unint64_t v12 = *(unsigned int *)(a2 + 40);
    if (a4 <= v12)
    {
      int v27 = "invalid section index: ";
      char v28 = (unint64_t *)v12;
      __int16 v29 = 2051;
      LODWORD(v23[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v13 = a3 + (v12 << 6);
    int v14 = *(_DWORD *)(v13 + 4);
    if (v14 != 2 && v14 != 11)
    {
      ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), v14);
      __int16 v26 = 1283;
      v23[0] = "SHT_SYMTAB_SHNDX section is linked with ";
      BOOL v24 = ELFSectionTypeName;
      uint64_t v25 = v18;
      int v27 = (const char *)v23;
      char v28 = (unint64_t *)" section (expected SHT_SYMTAB/SHT_DYNSYM)";
      __int16 v29 = 770;
      LODWORD(v20[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v16 = v32;
    unint64_t v22 = *(void *)(v13 + 32) / 0x18uLL;
    if (v32 != v22)
    {
      uint64_t v19 = v32;
      v20[0] = "SHT_SYMTAB_SHNDX has ";
      long long v20[2] = &v19;
      __int16 v21 = 2563;
      v23[0] = v20;
      BOOL v24 = " entries, but the symbol table associated has ";
      __int16 v26 = 770;
      int v27 = (const char *)v23;
      char v28 = &v22;
      __int16 v29 = 3074;
      int v30 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    *(unsigned char *)(a5 + 16) &= ~1u;
    *(void *)(a5 + 8) = v16;
  }
  *(void *)a5 = v11;
  if (v33)
  {
    size_t result = v31;
    uint64_t v31 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  if (a2[7] != 4)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(result, (uint64_t)a2, &v28);
    unint64_t v12 = std::string::insert(&v28, 0, "section ");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = std::string::append(&v30, " has invalid sh_entsize: expected ");
    int v15 = (uint64_t *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    uint64_t v34 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v32.__r_.__value_.__r.__words[0] = 4;
    v38[0] = __p;
    uint64_t v39 = &v32;
    __int16 v40 = 2564;
    v41[0] = v38;
    __int16 v42 = (std::string *)", but got ";
    __int16 v43 = 770;
    v27.__r_.__value_.__r.__words[0] = a2[7];
    __int16 v44 = v41;
    uint64_t v45 = &v27;
    __int16 v46 = 3074;
    LODWORD(v26.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  unint64_t v36 = v7;
  uint64_t v37 = v6;
  if ((v7 & 3) != 0)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(result, (uint64_t)a2, &v32);
    uint64_t v8 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v28, " has an invalid sh_size (");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v30;
    uint64_t v34 = (uint64_t *)&v36;
    __int16 v35 = 3076;
    v38[0] = __p;
    uint64_t v39 = (std::string *)") which is not a multiple of its sh_entsize (";
    __int16 v40 = 770;
    v27.__r_.__value_.__r.__words[0] = a2[7];
    v41[0] = v38;
    __int16 v42 = &v27;
    __int16 v43 = 3074;
    __int16 v44 = v41;
    uint64_t v45 = (std::string *)")";
    __int16 v46 = 770;
    LODWORD(v26.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (__CFADD__(v6, v7))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(result, (uint64_t)a2, &v32);
    uint64_t v16 = std::string::insert(&v32, 0, "section ");
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    uint64_t v18 = std::string::append(&v28, " has a sh_offset (0x");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v30;
    uint64_t v34 = &v37;
    __int16 v35 = 3588;
    v38[0] = __p;
    uint64_t v39 = (std::string *)") + sh_size (0x";
    __int16 v40 = 770;
    v41[0] = v38;
    __int16 v42 = (std::string *)&v36;
    __int16 v43 = 3586;
    __int16 v44 = v41;
    uint64_t v45 = (std::string *)") that cannot be represented";
    __int16 v46 = 770;
    LODWORD(v27.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (v7 + v6 > result[1])
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(result, (uint64_t)a2, &v26);
    uint64_t v20 = std::string::insert(&v26, 0, "section ");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    unint64_t v22 = std::string::append(&v27, " has a sh_offset (0x");
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    v28.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37;
    __int16 v29 = 3588;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    v30.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    __int16 v31 = 770;
    __p[0] = &v30;
    uint64_t v34 = (uint64_t *)&v36;
    __int16 v35 = 3586;
    v38[0] = __p;
    uint64_t v39 = (std::string *)") that is greater than the file size (0x";
    __int16 v40 = 770;
    uint64_t v25 = v4[1];
    v41[0] = v38;
    __int16 v42 = (std::string *)&v25;
    __int16 v43 = 3586;
    __int16 v44 = v41;
    uint64_t v45 = (std::string *)")";
    __int16 v46 = 770;
    int v47 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  uint64_t v24 = *result + v6;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v24;
  *(void *)(a3 + 8) = v7 >> 2;
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTableForSymtab(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6 = *(_DWORD *)(a2 + 4);
  if (v6 != 2 && v6 != 11)
  {
    v9[0] = "invalid sh_type for symbol table, expected SHT_SYMTAB or SHT_DYNSYM";
    __int16 v10 = 259;
    int v11 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  unint64_t v8 = *(unsigned int *)(a2 + 40);
  if (a4 <= v8)
  {
    v9[0] = "invalid section index: ";
    uint64_t v9[2] = v8;
    __int16 v10 = 2051;
    int v11 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  v9[0] = llvm::object::defaultWarningHandler;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTable(a1, a3 + (v8 << 6), (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)v9, a5);
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolLinkageAndScope(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v5 = (unint64_t)*(unsigned __int8 *)(a1 + 4) >> 4;
  if ((int)v5 > 1)
  {
    if (v5 != 2 && v5 != 10) {
      goto LABEL_11;
    }
    __int16 v6 = 0;
    LOWORD(v5) = 1;
    __int16 v7 = 1;
  }
  else
  {
    if (v5)
    {
      if (v5 == 1)
      {
        __int16 v6 = 0;
        __int16 v7 = 0;
        goto LABEL_13;
      }
LABEL_11:
      v10[0] = "Unrecognized symbol binding ";
      uint64_t v11 = v5;
      __int16 v12 = 2307;
      v13[0] = v10;
      int v14 = " for ";
      __int16 v15 = 770;
      uint64_t v16 = v13;
      uint64_t v17 = a2;
      uint64_t v18 = a3;
      __int16 v19 = 1282;
      getErrorErrorCat();
      operator new();
    }
    __int16 v7 = 0;
    LOWORD(v5) = 2;
    __int16 v6 = 2;
  }
LABEL_13:
  int v9 = *(unsigned char *)(a1 + 5) & 3;
  if (v9 == 1)
  {
    v10[0] = "Unrecognized symbol visibility ";
    uint64_t v11 = 1;
    __int16 v12 = 2307;
    v13[0] = v10;
    int v14 = " for ";
    __int16 v15 = 770;
    uint64_t v16 = v13;
    uint64_t v17 = a2;
    uint64_t v18 = a3;
    __int16 v19 = 1282;
    getErrorErrorCat();
    operator new();
  }
  if (v9 != 2) {
    LOWORD(v5) = v6;
  }
  *(unsigned char *)(a4 + 8) &= ~1u;
  *(_WORD *)a4 = v7 | ((_WORD)v5 << 8);
}

void anonymous namespace'::ELFJITLinker_aarch64::~ELFJITLinker_aarch64(_anonymous_namespace_::ELFJITLinker_aarch64 *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x263E500B0);
}

void llvm::jitlink::JITLinker<anonymous namespace'::ELFJITLinker_aarch64>::fixUpBlocks(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 192))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 200);
    if (v4)
    {
      uint64_t v5 = 24 * v4;
      __int16 v6 = *(void **)(a1 + 184);
      while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v6 += 3;
        v5 -= 24;
        if (!v5) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      __int16 v6 = *(void **)(a1 + 184);
    }
    uint64_t v7 = *(void *)(a1 + 184) + 24 * v4;
LABEL_10:
    if (v6 != (void *)v7)
    {
      uint64_t v8 = v6[2];
      int v21 = *(_DWORD *)(v8 + 20);
      int v9 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 32);
      uint64_t v11 = *(void *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
      if ((uint64_t **)v11 == v9) {
        goto LABEL_28;
      }
      __int16 v12 = v9;
      std::string::size_type v13 = v10;
      do
      {
        int v14 = *v12;
        if (v21 == 2 && (v14[1] & 4) == 0)
        {
          size_t v15 = v14[4];
          unint64_t __src = (void *)v14[3];
          uint64_t v16 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, v15, 0);
          uint64_t v17 = (uint64_t)v16;
          if (v15) {
            memmove(v16, __src, v15);
          }
          _OWORD v14[3] = v17;
          void v14[4] = v15;
          v14[1] |= 4uLL;
        }
        uint64_t v18 = v14[5];
        uint64_t v19 = v14[6];
        while (v18 != v19)
        {
          if (*(unsigned __int8 *)(v18 + 24) >= 2u)
          {
            llvm::jitlink::aarch64::applyFixup(a1, v14, v18, a2);
            if (*a2) {
              return;
            }
          }
          v18 += 32;
        }
        while (++v12 != v13)
        {
          if (((unint64_t)*v12 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_27;
          }
        }
        __int16 v12 = v13;
LABEL_27:
        ;
      }
      while (v12 != (uint64_t **)v11);
LABEL_28:
      while (1)
      {
        v6 += 3;
        if (v6 == (void *)v7) {
          break;
        }
        if (*v6 < 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_10;
        }
      }
    }
  }
LABEL_6:
  *a2 = 0;
}

void llvm::jitlink::JITLinker<anonymous namespace'::ELFJITLinker_aarch64>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t *llvm::jitlink::createLinkGraphFromELFObject_i386@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  long long v3 = a1[1];
  v11[0] = *a1;
  v11[1] = v3;
  llvm::object::ObjectFile::createELFObjectFile(v11, 1, (uint64_t)&v12);
  uint64_t v4 = (llvm::object::ObjectFile *)v12;
  if ((v13 & 1) == 0)
  {
    uint64_t v5 = (void *)v12[4];
    size_t v6 = v12[5];
    int v7 = v12 + 56;
    llvm::object::ObjectFile::makeTriple((llvm::object::ObjectFile *)v12, (llvm::Triple *)__p);
    llvm::jitlink::ELFLinkGraphBuilder_i386<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFLinkGraphBuilder_i386((int)&v10, v5, v6, v7, (uint64_t)__p);
  }
  __int16 v12 = 0;
  *(unsigned char *)(a2 + 8) |= 1u;
  *(void *)a2 = v4;
  return llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected((uint64_t *)&v12);
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_i386<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFLinkGraphBuilder_i386(uint64_t a1)
{
  *(void *)a1 = &unk_270DBECD0;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

void llvm::jitlink::link_ELF_i386(void *a1, void *a2)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v51 = 0;
  long long v50 = 0u;
  memset(v49, 0, sizeof(v49));
  memset(v48, 0, sizeof(v48));
  int64x2_t v47 = 0u;
  if ((*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, *a1 + 120))
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 64))(&v56);
    if ((unint64_t)v57 < 8)
    {
      *(void *)&long long v58 = llvm::jitlink::markAllSymbolsLive;
      int64x2_t v59 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
          + 2;
      if (v47.i64[1] >= *(void *)&v48[0])
      {
        uint64_t v9 = (v47.i64[1] - v47.i64[0]) >> 5;
        if ((unint64_t)(v9 + 1) >> 59) {
          goto LABEL_77;
        }
        unint64_t v10 = (*(void *)&v48[0] - v47.i64[0]) >> 4;
        if (v10 <= v9 + 1) {
          unint64_t v10 = v9 + 1;
        }
        if (*(void *)&v48[0] - v47.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        char v55 = (char *)v48;
        if (v11) {
          __int16 v12 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v48, v11);
        }
        else {
          __int16 v12 = 0;
        }
        uint64_t v17 = (uint64_t)&v12[4 * v9];
        char v52 = v12;
        v53.i64[0] = v17;
        uint64_t v54 = &v12[4 * v11];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v17, &v58);
        uint64_t v4 = v17 + 32;
        v53.i64[1] = v17 + 32;
        uint64_t v18 = (long long *)v47.i64[1];
        uint64_t v19 = v53.i64[0];
        if (v47.i64[1] == v47.i64[0])
        {
          int64x2_t v20 = vdupq_n_s64(v47.u64[1]);
        }
        else
        {
          do
          {
            v18 -= 2;
            uint64_t v19 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v19 - 32, v18);
          }
          while (v18 != (long long *)v47.i64[0]);
          int64x2_t v20 = v47;
          uint64_t v4 = v53.i64[1];
        }
        v47.i64[0] = v19;
        v47.i64[1] = v4;
        int64x2_t v53 = v20;
        unint64_t v22 = *(void ***)&v48[0];
        *(void *)&v48[0] = v54;
        uint64_t v54 = v22;
        char v52 = (void **)v20.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v52);
      }
      else
      {
        uint64_t v4 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v47.i64[1], &v58)+ 32;
      }
      v47.i64[1] = v4;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v58);
    }
    else
    {
      if (v47.i64[1] >= *(void *)&v48[0])
      {
        uint64_t v5 = (v47.i64[1] - v47.i64[0]) >> 5;
        if ((unint64_t)(v5 + 1) >> 59) {
          goto LABEL_77;
        }
        unint64_t v6 = (*(void *)&v48[0] - v47.i64[0]) >> 4;
        if (v6 <= v5 + 1) {
          unint64_t v6 = v5 + 1;
        }
        if (*(void *)&v48[0] - v47.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v7 = v6;
        }
        char v55 = (char *)v48;
        if (v7) {
          uint64_t v8 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v48, v7);
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v13 = (uint64_t)&v8[4 * v5];
        char v52 = v8;
        v53.i64[0] = v13;
        uint64_t v54 = &v8[4 * v7];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v13, &v56);
        uint64_t v3 = v13 + 32;
        v53.i64[1] = v13 + 32;
        uint64_t v14 = (long long *)v47.i64[1];
        uint64_t v15 = v53.i64[0];
        if (v47.i64[1] == v47.i64[0])
        {
          int64x2_t v16 = vdupq_n_s64(v47.u64[1]);
        }
        else
        {
          do
          {
            v14 -= 2;
            uint64_t v15 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v15 - 32, v14);
          }
          while (v14 != (long long *)v47.i64[0]);
          int64x2_t v16 = v47;
          uint64_t v3 = v53.i64[1];
        }
        v47.i64[0] = v15;
        v47.i64[1] = v3;
        int64x2_t v53 = v16;
        int v21 = *(void ***)&v48[0];
        *(void *)&v48[0] = v54;
        uint64_t v54 = v21;
        char v52 = (void **)v16.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v52);
      }
      else
      {
        uint64_t v3 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v47.i64[1], &v56)+ 32;
      }
      v47.i64[1] = v3;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v56);
    uint64_t v57 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
        + 2;
    if (*(void *)&v48[1] >= *((void *)&v48[1] + 1))
    {
      uint64_t v24 = (uint64_t)(*(void *)&v48[1] - *((void *)&v48[0] + 1)) >> 5;
      if ((unint64_t)(v24 + 1) >> 59) {
        goto LABEL_77;
      }
      unint64_t v25 = (uint64_t)(*((void *)&v48[1] + 1) - *((void *)&v48[0] + 1)) >> 4;
      if (v25 <= v24 + 1) {
        unint64_t v25 = v24 + 1;
      }
      if (*((void *)&v48[1] + 1) - *((void *)&v48[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      char v55 = (char *)&v48[1] + 8;
      if (v26) {
        std::string v27 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v48[1] + 8, v26);
      }
      else {
        std::string v27 = 0;
      }
      uint64_t v28 = (uint64_t)&v27[4 * v24];
      char v52 = v27;
      v53.i64[0] = v28;
      uint64_t v54 = &v27[4 * v26];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v28, &v56);
      uint64_t v23 = v28 + 32;
      v53.i64[1] = v28 + 32;
      std::string v30 = (long long *)*((void *)&v48[0] + 1);
      __int16 v29 = *(long long **)&v48[1];
      uint64_t v31 = v53.i64[0];
      if (*(void *)&v48[1] == *((void *)&v48[0] + 1))
      {
        int64x2_t v32 = vdupq_n_s64(*(unint64_t *)&v48[1]);
      }
      else
      {
        do
        {
          v29 -= 2;
          uint64_t v31 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v31 - 32, v29);
        }
        while (v29 != v30);
        int64x2_t v32 = *(int64x2_t *)((char *)v48 + 8);
        uint64_t v23 = v53.i64[1];
      }
      *((void *)&v48[0] + 1) = v31;
      *(void *)&v48[1] = v23;
      int64x2_t v53 = v32;
      char v33 = (void **)*((void *)&v48[1] + 1);
      *((void *)&v48[1] + 1) = v54;
      uint64_t v54 = v33;
      char v52 = (void **)v32.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v52);
    }
    else
    {
      uint64_t v23 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v48[1], &v56)+ 32;
    }
    *(void *)&v48[1] = v23;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v56);
    *(void *)&long long v56 = llvm::jitlink::i386::optimizeGOTAndStubAccesses;
    uint64_t v57 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
        + 2;
    if (*(void *)&v49[2] < *((void *)&v49[2] + 1))
    {
      uint64_t v34 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v49[2], &v56)+ 32;
LABEL_69:
      *(void *)&long long v49[2] = v34;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v56);
      goto LABEL_70;
    }
    uint64_t v35 = (uint64_t)(*(void *)&v49[2] - *((void *)&v49[1] + 1)) >> 5;
    if (!((unint64_t)(v35 + 1) >> 59))
    {
      unint64_t v36 = (uint64_t)(*((void *)&v49[2] + 1) - *((void *)&v49[1] + 1)) >> 4;
      if (v36 <= v35 + 1) {
        unint64_t v36 = v35 + 1;
      }
      if (*((void *)&v49[2] + 1) - *((void *)&v49[1] + 1) >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v37 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      char v55 = (char *)&v49[2] + 8;
      if (v37) {
        uint64_t v38 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v49[2] + 8, v37);
      }
      else {
        uint64_t v38 = 0;
      }
      uint64_t v39 = (uint64_t)&v38[4 * v35];
      char v52 = v38;
      v53.i64[0] = v39;
      uint64_t v54 = &v38[4 * v37];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v39, &v56);
      uint64_t v34 = v39 + 32;
      v53.i64[1] = v39 + 32;
      uint64_t v41 = (long long *)*((void *)&v49[1] + 1);
      __int16 v40 = *(long long **)&v49[2];
      uint64_t v42 = v53.i64[0];
      if (*(void *)&v49[2] == *((void *)&v49[1] + 1))
      {
        int64x2_t v43 = vdupq_n_s64(*(unint64_t *)&v49[2]);
      }
      else
      {
        do
        {
          v40 -= 2;
          uint64_t v42 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v42 - 32, v40);
        }
        while (v40 != v41);
        int64x2_t v43 = *(int64x2_t *)((char *)&v49[1] + 8);
        uint64_t v34 = v53.i64[1];
      }
      *((void *)&v49[1] + 1) = v42;
      *(void *)&long long v49[2] = v34;
      int64x2_t v53 = v43;
      __int16 v44 = (void **)*((void *)&v49[2] + 1);
      *((void *)&v49[2] + 1) = v54;
      uint64_t v54 = v44;
      char v52 = (void **)v43.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v52);
      goto LABEL_69;
    }
LABEL_77:
    abort();
  }
LABEL_70:
  (*(void (**)(void ***__return_ptr))(*(void *)*a2 + 72))(&v52);
  if (!v52) {
    operator new();
  }
  uint64_t v45 = *a2;
  __int16 v46 = v52;
  char v52 = 0;
  (*(void (**)(uint64_t, void ***))(*(void *)v45 + 24))(v45, &v46);
  if (v46) {
    (*((void (**)(void **))*v46 + 1))(v46);
  }
  if (v52) {
    (*((void (**)(void **))*v52 + 1))(v52);
  }
  char v52 = (void **)&v50;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v52);
  char v52 = (void **)&v49[1] + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v52);
  char v52 = (void **)v49;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v52);
  char v52 = (void **)v48 + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v52);
  char v52 = (void **)&v47;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v52);
}

uint64_t anonymous namespace'::buildTables_ELF_i386@<X0>(_anonymous_namespace_ *this@<X0>, void *a2@<X8>)
{
  v26[0] = 0;
  v26[1] = 0;
  int v27 = 0;
  uint64_t v28 = 0;
  v22[0] = 0;
  v22[1] = 0;
  unsigned int v23 = 0;
  uint64_t v24 = v26;
  uint64_t v25 = 0;
  llvm::jitlink::LinkGraph::blocks(this, v36);
  v37[0] = v36[0];
  v37[1] = v36[1];
  uint64_t v37[2] = v36[2];
  void v37[3] = v36[3];
  llvm::jitlink::LinkGraph::blocks(this, &v29);
  v35[0] = v31;
  v35[1] = v32;
  long long v35[2] = v33;
  void v35[3] = v34;
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v38, v37, (uint64_t *)v35);
  unint64_t v6 = v38;
  int v21 = v39;
  if (v38 != v39)
  {
    int64x2_t v20 = a2;
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)v6 + 40);
      uint64_t v7 = *(void *)(*(void *)v6 + 48);
      while (v8 != v7)
      {
        int v9 = *(unsigned __int8 *)(v8 + 24);
        switch(v9)
        {
          case 9:
            *(unsigned char *)(v8 + 24) = 8;
            uint64_t EntryForTarget = llvm::jitlink::TableManager<llvm::jitlink::i386::GOTTableManager>::getEntryForTarget((uint64_t)v26, (uint64_t)this, *(_OWORD **)v8, v5);
LABEL_19:
            *(void *)uint64_t v8 = EntryForTarget;
            break;
          case 8:
            if (!v28) {
              llvm::jitlink::LinkGraph::createSection();
            }
            break;
          case 10:
            unint64_t v10 = *(_OWORD **)v8;
            if ((*(unsigned char *)(*(void *)(*(void *)v8 + 16) + 8) & 1) == 0)
            {
              *(unsigned char *)(v8 + 24) = 12;
              v36[0] = *v10;
              *(void *)&long long v29 = 0;
              int v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v22, (uint64_t)v36, &v29, v5);
              uint64_t v12 = v29;
              if (!v11) {
                uint64_t v12 = v22[0] + 24 * v23;
              }
              if (v12 == v22[0] + 24 * v23)
              {
                uint64_t v13 = v25;
                if (!v25) {
                  llvm::jitlink::LinkGraph::createSection();
                }
                uint64_t v14 = llvm::jitlink::TableManager<llvm::jitlink::i386::GOTTableManager>::getEntryForTarget((uint64_t)v24, (uint64_t)this, v10, v5);
                *(void *)&v36[0] = &llvm::jitlink::i386::PointerJumpStubContent;
                *((void *)&v36[0] + 1) = 6;
                *(void *)&long long v29 = 0;
                uint64_t v40 = 0;
                v41[0] = 8;
                uint64_t v15 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)this, v13, (uint64_t *)v36, (uint64_t *)&v29, v41, &v40);
                llvm::jitlink::Block::addEdge(v15, 3, 2, v14, 0);
                int64x2_t v16 = llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)this, (uint64_t)v15, 0, 6, 1, 0);
                long long v29 = *v10;
                std::string v30 = v16;
                llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)v22, &v29, &v30, v17, (uint64_t)v36);
                uint64_t v12 = *(void *)&v36[0];
              }
              uint64_t EntryForTarget = *(void *)(v12 + 16);
              goto LABEL_19;
            }
            break;
        }
        v8 += 32;
      }
      v6 += 8;
      if (v6 == v21)
      {
        unint64_t v6 = v38;
        a2 = v20;
        break;
      }
    }
  }
  if (v6)
  {
    uint64_t v39 = v6;
    operator delete(v6);
  }
  *a2 = 0;
  MEMORY[0x263E500A0](v22[0], 8);
  return MEMORY[0x263E500A0](v26[0], 8);
}

uint64_t llvm::jitlink::TableManager<llvm::jitlink::i386::GOTTableManager>::getEntryForTarget(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  *(_OWORD *)int64x2_t v16 = *a3;
  *(void *)&long long v14 = 0;
  int v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v16, &v14, a4);
  uint64_t v8 = v14;
  if (!v7) {
    uint64_t v8 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  }
  if (v8 == *(void *)a1 + 24 * *(unsigned int *)(a1 + 16))
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (!v9) {
      llvm::jitlink::LinkGraph::createSection();
    }
    v16[0] = (uint64_t)&llvm::jitlink::i386::NullPointerContent;
    v16[1] = 4;
    *(void *)&long long v14 = 0;
    unint64_t v18 = 8;
    uint64_t v17 = 0;
    unint64_t v10 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, v9, v16, (uint64_t *)&v14, &v18, &v17);
    llvm::jitlink::Block::addEdge(v10, 3, 0, (uint64_t)a3, 0);
    int v11 = llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v10, 0, 4, 0, 0);
    long long v14 = *a3;
    uint64_t v15 = v11;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>(a1, &v14, &v15, v12, (uint64_t)v16);
    uint64_t v8 = v16[0];
  }
  return *(void *)(v8 + 16);
}

void llvm::jitlink::ELFLinkGraphBuilder_i386<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFLinkGraphBuilder_i386(int a1, void *__src, size_t __len, int a4, uint64_t a5)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a5;
  uint64_t v6 = *(void *)(a5 + 16);
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  long long v7 = *(_OWORD *)(a5 + 24);
  uint64_t v8 = *(void *)(a5 + 40);
  llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFLinkGraphBuilder(a1, a4, (uint64_t)__p, __src, __len);
}

void llvm::jitlink::ELFLinkGraphBuilder_i386<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFLinkGraphBuilder_i386(uint64_t a1)
{
  *(void *)a1 = &unk_270DBECD0;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x263E500B0);
}

void llvm::jitlink::ELFLinkGraphBuilder_i386<llvm::object::ELFType<(llvm::support::endianness)1,false>>::addRelocations(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = *(unsigned int **)(a1 + 32);
    uint64_t v6 = &v5[10 * v3];
    long long v7 = "Refencing a section that wasn't added to the graph: ";
    uint64_t v8 = &getErrorErrorCat(void)::ErrorErrorCat;
    while (1)
    {
      unsigned int v9 = v5[1];
      if (v9 == 4)
      {
        getErrorErrorCat();
        *(void *)&long long v22 = 3;
        *((void *)&v22 + 1) = v8;
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
      }
      if (v9 == 9) {
        break;
      }
      *a2 = 0;
LABEL_36:
      v5 += 10;
      if (v5 == v6) {
        goto LABEL_37;
      }
    }
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(*(void **)(a1 + 24), v5[7], (uint64_t)&v27);
    if (v28)
    {
      uint64_t v17 = v27;
      *a2 = v27;
      goto LABEL_35;
    }
    unint64_t v10 = *(void **)(a1 + 24);
    *(void *)&long long v22 = llvm::object::defaultWarningHandler;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(v10, v27, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v22, (uint64_t)&v25);
    if (v26)
    {
      unint64_t v18 = (unsigned int *)v25;
      *(void *)&long long v25 = 0;
      *a2 = v18;
    }
    else
    {
      if (*(unsigned char *)(a1 + 72)
        || (long long v22 = v25,
            std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90], (uint64_t)&v22) == (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90]))
      {
        if (!(*(unsigned int (**)(uint64_t, unsigned int *))(*(void *)a1 + 40))(a1, v27))
        {
          GraphBlocuint64_t k = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, v5[7]);
          if (!GraphBlock)
          {
            __int16 v24 = 1283;
            *(void *)&long long v22 = v7;
            long long v23 = v25;
            getErrorErrorCat();
            operator new();
          }
          uint64_t v12 = (void *)GraphBlock;
          uint64_t v13 = v8;
          long long v14 = v7;
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>(*(void **)(a1 + 24), v5, (uint64_t)&v22);
          uint64_t v15 = (unsigned int *)v22;
          if (v23)
          {
            *(void *)&long long v22 = 0;
          }
          else
          {
            if (*((void *)&v22 + 1))
            {
              uint64_t v16 = 8 * *((void *)&v22 + 1);
              do
              {
                llvm::jitlink::ELFLinkGraphBuilder_i386<llvm::object::ELFType<(llvm::support::endianness)1,false>>::addSingleRelocation(a1, v15, (uint64_t)v27, v12, a2);
                if (*a2) {
                  goto LABEL_24;
                }
                v15 += 2;
                v16 -= 8;
              }
              while (v16);
            }
            uint64_t v15 = 0;
          }
          *a2 = v15;
LABEL_24:
          if (v23)
          {
            uint64_t v19 = v22;
            *(void *)&long long v22 = 0;
            if (v19) {
              (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
            }
          }
          long long v7 = v14;
          uint64_t v8 = v13;
          goto LABEL_28;
        }
      }
      *a2 = 0;
    }
LABEL_28:
    if (v26)
    {
      uint64_t v20 = v25;
      *(void *)&long long v25 = 0;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
    }
    if (v28)
    {
      int v21 = v27;
      int v27 = 0;
      if (v21) {
        (*(void (**)(unsigned int *))(*(void *)v21 + 8))(v21);
      }
    }
    uint64_t v17 = *a2;
LABEL_35:
    if (v17) {
      return;
    }
    goto LABEL_36;
  }
LABEL_37:
  *a2 = 0;
}

void llvm::jitlink::ELFLinkGraphBuilder_i386<llvm::object::ELFType<(llvm::support::endianness)1,false>>::addSingleRelocation(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  unsigned int v10 = a2[1];
  unsigned int v11 = v10 >> 8;
  unsigned int v29 = v10 >> 8;
  if (v10 > 0xFF)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(*(void **)(a1 + 24), *(unsigned int **)(a1 + 48), v11, (uint64_t)&v33);
    if (v34)
    {
      uint64_t v16 = v33;
      uint64_t v33 = 0;
      *a5 = v16;
      goto LABEL_19;
    }
  }
  else
  {
    char v34 = 0;
    uint64_t v33 = 0;
  }
  uint64_t GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(a1, v11);
  if (!GraphSymbol)
  {
    int v15 = *(_DWORD *)(a1 + 112);
    *(void *)&long long v20 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {0}, shndx: {1} Size of table: {2}";
    *((void *)&v20 + 1) = 113;
    int v21 = v28;
    uint64_t v22 = 3;
    long long v23 = &unk_270DBEB80;
    __int16 v24 = &v29;
    v25[0] = &unk_270DBED90;
    v25[1] = v33 + 14;
    char v26 = &unk_270DBE8C8;
    int v27 = v15;
    v28[0] = &v23;
    v28[1] = v25;
    void v28[2] = &v26;
    getErrorErrorCat();
    uint64_t v31 = 3;
    long long v32 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>();
  }
  int v13 = *((unsigned __int8 *)a2 + 4);
  int v30 = v13;
  char v14 = 2;
  switch(v13)
  {
    case 0:
      goto LABEL_17;
    case 1:
      char v14 = 3;
      goto LABEL_17;
    case 2:
      char v14 = 4;
      goto LABEL_17;
    case 3:
      char v14 = 9;
      goto LABEL_17;
    case 4:
      char v14 = 10;
      goto LABEL_17;
    case 9:
      char v14 = 8;
      goto LABEL_17;
    case 10:
      unint64_t v17 = *a2 + (unint64_t)*(unsigned int *)(a3 + 12) - *a4;
      unint64_t v18 = (void *)*(unsigned int *)(a4[3] + v17);
      char v14 = 7;
      goto LABEL_18;
    case 20:
      char v14 = 5;
      goto LABEL_17;
    case 21:
      char v14 = 6;
LABEL_17:
      unint64_t v18 = 0;
      unint64_t v17 = *a2 + (unint64_t)*(unsigned int *)(a3 + 12) - *a4;
LABEL_18:
      *(void *)&long long v20 = GraphSymbol;
      DWORD2(v20) = v17;
      int v21 = v18;
      LOBYTE(v22) = v14;
      llvm::jitlink::Block::addEdge(a4, &v20);
      *a5 = 0;
      break;
    default:
      *(void *)&long long v20 = "{0:d}";
      *((void *)&v20 + 1) = 5;
      int v21 = v25;
      uint64_t v22 = 1;
      long long v23 = &unk_270DBCE28;
      __int16 v24 = (unsigned int *)&v30;
      v25[0] = &v23;
      operator new();
  }
LABEL_19:
  if (v34)
  {
    uint64_t v19 = v33;
    uint64_t v33 = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
}

void llvm::jitlink::ELFJITLinker_i386::~ELFJITLinker_i386(llvm::jitlink::ELFJITLinker_i386 *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x263E500B0);
}

uint64_t **llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_i386>::fixUpBlocks@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v34 = result;
  if (*(_DWORD *)(a2 + 192))
  {
    uint64_t v4 = *(unsigned int *)(a2 + 200);
    if (v4)
    {
      uint64_t v5 = 24 * v4;
      uint64_t v6 = *(void **)(a2 + 184);
      while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v6 += 3;
        v5 -= 24;
        if (!v5) {
          goto LABEL_46;
        }
      }
    }
    else
    {
      uint64_t v6 = *(void **)(a2 + 184);
    }
    uint64_t v7 = *(void *)(a2 + 184) + 24 * v4;
    if (v6 != (void *)v7)
    {
      int v30 = (void *)v7;
LABEL_10:
      uint64_t v8 = v6[2];
      int v33 = *(_DWORD *)(v8 + 20);
      size_t result = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 32);
      uint64_t v32 = *(void *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
      if ((uint64_t **)v32 != result)
      {
        unsigned int v10 = result;
        unsigned int v11 = v9;
        do
        {
          uint64_t v12 = *v10;
          if (v33 == 2 && (v12[1] & 4) == 0)
          {
            char v14 = (const void *)v12[3];
            size_t v13 = v12[4];
            size_t result = (uint64_t **)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, v13, 0);
            int v15 = result;
            if (v13) {
              size_t result = (uint64_t **)memmove(result, v14, v13);
            }
            _OWORD v12[3] = (uint64_t)v15;
            void v12[4] = v13;
            v12[1] |= 4uLL;
          }
          uint64_t v17 = v12[5];
          uint64_t v16 = v12[6];
          while (v17 != v16)
          {
            unsigned int v18 = *(unsigned __int8 *)(v17 + 24);
            unsigned int v19 = v18 - 2;
            if (v18 >= 2)
            {
              uint64_t v20 = v12[3];
              uint64_t v21 = *(unsigned int *)(v17 + 8);
              uint64_t v22 = *v12 + v21;
              switch(v19)
              {
                case 0u:
                  goto LABEL_31;
                case 1u:
                  int v24 = **(_DWORD **)(*(void *)v17 + 16);
                  int v25 = *(_DWORD *)(*(void *)v17 + 24) + *(_DWORD *)(v17 + 16);
                  goto LABEL_28;
                case 2u:
                case 8u:
                case 9u:
                case 0xAu:
                  int v23 = **(_DWORD **)(*(void *)v17 + 16)
                      - v22
                      + *(_DWORD *)(*(void *)v17 + 24)
                      + *(_DWORD *)(v17 + 16)
                      - 4;
                  goto LABEL_30;
                case 3u:
                  uint64_t v26 = (*(void *)(*(void *)v17 + 24) & 0x1FFFFFFFFFFFFFFLL)
                      + *(void *)(v17 + 16)
                      + **(void **)(*(void *)v17 + 16);
                  if (((*(_DWORD *)(*(void *)v17 + 24)
                       + *(_DWORD *)(v17 + 16)
                       + **(_DWORD **)(*(void *)v17 + 16)) & 0xFFFF0000) == 0)
                    goto LABEL_24;
                  goto LABEL_26;
                case 4u:
                  uint64_t v26 = **(void **)(*(void *)v17 + 16)
                      - v22
                      + (*(void *)(*(void *)v17 + 24) & 0x1FFFFFFFFFFFFFFLL)
                      + *(void *)(v17 + 16)
                      - 4;
                  if (v26 != (__int16)v26) {
LABEL_26:
                  }
                    llvm::jitlink::makeTargetOutOfRangeError(a2, v12, v17);
LABEL_24:
                  *(_WORD *)(v20 + v21) = v26;
                  goto LABEL_31;
                case 5u:
                  int v25 = **(_DWORD **)(*(void *)v17 + 16) - v22;
                  int v24 = *(_DWORD *)(*(void *)v17 + 24) + *(_DWORD *)(v17 + 16);
LABEL_28:
                  int v23 = v25 + v24;
                  goto LABEL_30;
                case 6u:
                  int v23 = *(_DWORD *)(*(void *)v17 + 24)
                      + **(_DWORD **)(*(void *)v17 + 16)
                      - (*(_DWORD *)v34[19][2]
                       + *((_DWORD *)v34[19] + 6))
                      + *(_DWORD *)(v17 + 16);
LABEL_30:
                  *(_DWORD *)(v20 + v21) = v23;
LABEL_31:
                  *a3 = 0;
                  break;
                default:
                  std::operator+<char>();
                  int v27 = std::string::append(&v35, ", section ");
                  std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
                  *(_OWORD *)std::string __p = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
                  std::string::size_type v37 = v28;
                  v27->__r_.__value_.__l.__size_ = 0;
                  v27->__r_.__value_.__r.__words[2] = 0;
                  v27->__r_.__value_.__r.__words[0] = 0;
                  long long v29 = *(_OWORD *)v12[2];
                  uint64_t v38 = __p;
                  long long v39 = v29;
                  __int16 v40 = 1284;
                  uint64_t v41 = &v38;
                  uint64_t v42 = " unsupported edge kind ";
                  __int16 v43 = 770;
                  if (!*llvm::jitlink::i386::getEdgeKindName((llvm::jitlink::i386 *)*(unsigned __int8 *)(v17 + 24)))
                  {
                    int v46 = v44;
                    __int16 v47 = v45;
                  }
                  operator new();
              }
            }
            v17 += 32;
          }
          while (++v10 != v11)
          {
            if (((unint64_t)*v10 | 0x1000) != 0xFFFFFFFFFFFFF000) {
              goto LABEL_40;
            }
          }
          unsigned int v10 = v11;
LABEL_40:
          ;
        }
        while (v10 != (uint64_t **)v32);
      }
      for (v6 += 3; v6 != v30; v6 += 3)
      {
        if (*v6 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v6 != v30) {
            goto LABEL_10;
          }
          break;
        }
      }
    }
  }
LABEL_46:
  *a3 = 0;
  return result;
}

void llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_i386>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::jitlink::ELFJITLinker_i386::ELFJITLinker_i386(std::unique_ptr<llvm::jitlink::JITLinkContext>,std::unique_ptr<llvm::jitlink::LinkGraph>,llvm::jitlink::PassConfiguration)::{lambda(llvm::jitlink::LinkGraph &)#1}>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  v37[0] = 0;
  v37[1] = 0;
  unsigned int v38 = 0;
  uint64_t v39 = a2;
  uint64_t v40 = v5;
  uint64_t v6 = a2 + 208;
  uint64_t v7 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 208);
  unsigned int v9 = v8;
  llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v6);
  unsigned int v10 = (uint64_t *)(*(void *)(a2 + 208) + 8 * *(unsigned int *)(a2 + 224));
  std::vector<llvm::jitlink::Symbol *>::vector<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,0>(&v41, v7, v9, v10, (uint64_t)v10);
  uint64_t v12 = v41;
  size_t v13 = v42;
  if (v41 != v42)
  {
    uint64_t v35 = v5;
    unint64_t v36 = a3;
    do
    {
      char v14 = *(void **)v12;
      if (*(void *)(*(void *)v12 + 8) == 21)
      {
        BOOL v15 = *(void *)*v14 == 0x5F4C41424F4C475FLL && *(void *)(*v14 + 8) == 0x545F54455346464FLL;
        if (v15 && *(void *)(*v14 + 13) == 0x5F454C4241545F54)
        {
          uint64_t v17 = v40;
          uint64_t SectionByName = (unint64_t *)llvm::jitlink::LinkGraph::findSectionByName(v39, (uint64_t)"$__GOT", 6, v11);
          if (SectionByName)
          {
            unsigned int v19 = SectionByName;
            *(void *)(v17 + 152) = v14;
            int v44 = SectionByName;
            v46[0] = 0;
            int v20 = llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>(v37, &v44, v46);
            uint64_t v21 = v46[0];
            if (!v20) {
              uint64_t v21 = v37[0] + 24 * v38;
            }
            if (v21 == v37[0] + 24 * v38)
            {
              llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v43, (uint64_t)v19);
              int v44 = v19;
              long long v45 = v43;
              llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::try_emplace<llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>((uint64_t)v37, &v44, &v45, (uint64_t)v46);
              uint64_t v21 = v46[0];
            }
            uint64_t v22 = *(void *)(v21 + 8);
            if (v22) {
              llvm::jitlink::LinkGraph::makeDefined(a2, v14, v22, 0, 0, 0, 2, 0);
            }
            else {
              llvm::jitlink::LinkGraph::makeAbsolute(a2, (uint64_t)v14, 0);
            }
          }
        }
      }
      v12 += 8;
    }
    while (v12 != v13);
    uint64_t v12 = v41;
    uint64_t v5 = v35;
    a3 = v36;
  }
  if (v12)
  {
    uint64_t v42 = v12;
    operator delete(v12);
  }
  if (!*(void *)(v5 + 152))
  {
    uint64_t v23 = llvm::jitlink::LinkGraph::findSectionByName(a2, (uint64_t)"$__GOT", 6, v11);
    if (v23)
    {
      uint64_t v24 = v23;
      int v25 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v23 + 56);
      uint64_t v27 = *(void *)(v24 + 56) + 8 * *(unsigned int *)(v24 + 72);
      if ((void *)v27 == v25)
      {
LABEL_39:
        llvm::jitlink::SectionRange::SectionRange(&v44, v24);
        uint64_t v31 = v44;
        if (v44)
        {
          unint64_t v32 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, 40, 3);
          *(void *)unint64_t v32 = "_GLOBAL_OFFSET_TABLE_";
          *(void *)(v32 + 8) = 21;
          *(void *)(v32 + 16) = v31;
          *(_OWORD *)(v32 + 24) = xmmword_261E8D5E0;
          uint64_t v33 = v31[2] + 56;
          uint64_t v41 = (char *)v32;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v33, &v41, (uint64_t)v46);
        }
        else
        {
          unint64_t v32 = (unint64_t)llvm::jitlink::LinkGraph::addAbsoluteSymbol(a2, (uint64_t)"_GLOBAL_OFFSET_TABLE_", 21, 0, 0, 0, 2, 1);
        }
        *(void *)(v5 + 152) = v32;
      }
      else
      {
        while (1)
        {
          uint64_t v28 = *v25;
          if (*(void *)(*v25 + 8) == 21)
          {
            BOOL v29 = **(void **)v28 == 0x5F4C41424F4C475FLL && *(void *)(*(void *)v28 + 8) == 0x545F54455346464FLL;
            if (v29 && *(void *)(*(void *)v28 + 13) == 0x5F454C4241545F54) {
              break;
            }
          }
          while (++v25 != v26)
          {
            if ((*v25 | 0x1000) != 0xFFFFFFFFFFFFF000) {
              goto LABEL_38;
            }
          }
          int v25 = v26;
LABEL_38:
          if (v25 == (void *)v27) {
            goto LABEL_39;
          }
        }
        *(void *)(v5 + 152) = v28;
      }
    }
  }
  *a3 = 0;
  return MEMORY[0x263E500A0](v37[0], 8);
}

uint64_t llvm::jitlink::LinkGraph::makeAbsolute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  if ((*(unsigned char *)(v6 + 8) & 3) != 0)
  {
    uint64_t v7 = *(void *)(v6 + 16) + 56;
    v15[0] = a2;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v7, v15);
    uint64_t v8 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 16, 3);
    unint64_t v9 = v8[1] & 0xFFFFFFFFFFFFFFFCLL | 2;
    *uint64_t v8 = a3;
    v8[1] = v9;
    unint64_t v10 = *(void *)(a2 + 24) & 0xFE00000000000000;
    *(void *)(a2 + 16) = v8;
  }
  else
  {
    v15[0] = a2;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(a1 + 208, v15);
    unsigned int v11 = *(void **)(a2 + 16);
    uint64_t v12 = v11[1] | 2;
    void *v11 = a3;
    v11[1] = v12;
    unint64_t v10 = *(void *)(a2 + 24) & 0xF3FFFFFFFFFFFFFFLL | 0x800000000000000;
  }
  *(void *)(a2 + 24) = v10;
  uint64_t v14 = a2;
  return llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1 + 232, &v14, (uint64_t)v15);
}

void *std::vector<llvm::jitlink::Symbol *>::vector<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,0>(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a4)
  {
    unint64_t v6 = 0;
    uint64_t v7 = a2;
    while (1)
    {
      if (++v7 == a3)
      {
        uint64_t v7 = a3;
LABEL_7:
        ++v6;
        if (v7 == a4) {
          goto LABEL_10;
        }
      }
      else if ((*v7 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        goto LABEL_7;
      }
    }
  }
  unint64_t v6 = 0;
LABEL_10:
  std::vector<llvm::jitlink::Symbol *>::__init_with_size[abi:nn180100]<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator>(a1, a2, a3, a4, a5, v6);
  return a1;
}

void *std::vector<llvm::jitlink::Symbol *>::__init_with_size[abi:nn180100]<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator>(void *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, unint64_t a6)
{
  if (a6)
  {
    uint64_t v9 = (uint64_t)result;
    std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](result, a6);
    return (void *)std::vector<llvm::jitlink::Symbol *>::__construct_at_end<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator>(v9, a2, a3, a4);
  }
  return result;
}

uint64_t std::vector<llvm::jitlink::Symbol *>::__construct_at_end<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *(void **)(result + 8);
  while (a2 != a4)
  {
    uint64_t v5 = *a2++;
    void *v4 = v5;
    while (a2 != a3)
    {
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000) {
        goto LABEL_8;
      }
      ++a2;
    }
    a2 = a3;
LABEL_8:
    ++v4;
  }
  *(void *)(result + 8) = v4;
  return result;
}

uint64_t *llvm::jitlink::createLinkGraphFromELFObject_loongarch@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  long long v3 = a1[1];
  v23[0] = *a1;
  v23[1] = v3;
  llvm::object::ObjectFile::createELFObjectFile(v23, 1, (uint64_t)&v28);
  uint64_t v4 = (llvm::object::ObjectFile *)v28;
  if ((v29 & 1) == 0)
  {
    if ((*(unsigned int (**)(size_t *))(*v28 + 392))(v28) == 14)
    {
      uint64_t v5 = (void *)v28[4];
      size_t v6 = v28[5];
      int v7 = v28 + 56;
      llvm::object::ObjectFile::makeTriple((llvm::object::ObjectFile *)v28, (llvm::Triple *)&v18);
      long long v24 = v18;
      uint64_t v8 = v19;
      long long v18 = 0uLL;
      uint64_t v19 = 0;
      long long v26 = v20;
      uint64_t v25 = v8;
      uint64_t v27 = v21;
      llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFLinkGraphBuilder((int)&v22, v7, (uint64_t)&v24, v5, v6);
    }
    uint64_t v9 = (void *)v28[4];
    size_t v10 = v28[5];
    int v11 = v28 + 56;
    llvm::object::ObjectFile::makeTriple((llvm::object::ObjectFile *)v28, (llvm::Triple *)__p);
    long long v24 = *(_OWORD *)__p;
    uint64_t v12 = v15;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v15 = 0;
    long long v26 = v16;
    uint64_t v25 = v12;
    uint64_t v27 = v17;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFLinkGraphBuilder((int)&v22, v11, (uint64_t)&v24, v9, v10);
  }
  uint64_t v28 = 0;
  *(unsigned char *)(a2 + 8) |= 1u;
  *(void *)a2 = v4;
  return llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected((uint64_t *)&v28);
}

uint64_t anonymous namespace'::ELFLinkGraphBuilder_loongarch<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFLinkGraphBuilder_loongarch(uint64_t a1)
{
  *(void *)a1 = &unk_270DBEEA0;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

uint64_t anonymous namespace'::ELFLinkGraphBuilder_loongarch<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFLinkGraphBuilder_loongarch(uint64_t a1)
{
  *(void *)a1 = &unk_270DBECD0;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

void llvm::jitlink::link_ELF_loongarch(uint64_t a1, void *a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v69 = 0;
  long long v68 = 0u;
  memset(v67, 0, sizeof(v67));
  memset(v66, 0, sizeof(v66));
  int64x2_t v65 = 0u;
  if ((*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, *(void *)a1 + 120))
  {
    unint64_t v76 = ".eh_frame";
    *(void *)&long long v77 = 9;
    unsigned int v78 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::DWARFRecordSectionSplitter,llvm::jitlink::DWARFRecordSectionSplitter,void>::Callbacks
                                    + 2);
    unint64_t v73 = (char *)v66;
    unsigned int v70 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v66, 1uLL);
    v71.i64[0] = (uint64_t)v70;
    long long v72 = &v70[4 * v4];
    uint64_t v5 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v70, (long long *)&v76)+ 32;
    v71.i64[1] = v5;
    size_t v6 = (long long *)v65.i64[1];
    uint64_t v7 = v71.i64[0];
    if (v65.i64[1] == v65.i64[0])
    {
      int64x2_t v8 = vdupq_n_s64(v65.u64[1]);
    }
    else
    {
      do
      {
        v6 -= 2;
        uint64_t v7 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v7 - 32, v6);
      }
      while (v6 != (long long *)v65.i64[0]);
      int64x2_t v8 = v65;
      uint64_t v5 = v71.i64[1];
    }
    v65.i64[0] = v7;
    int64x2_t v71 = v8;
    uint64_t v9 = *(void ***)&v66[0];
    *(void *)&v66[0] = v72;
    long long v72 = v9;
    unsigned int v70 = (void **)v8.i64[0];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v70);
    v65.i64[1] = v5;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v76);
    int v10 = *(_DWORD *)(*(void *)a1 + 168);
    unsigned int v78 = 0;
    int v11 = operator new(0x20uLL, (std::align_val_t)8uLL);
    long long v77 = xmmword_261E8A760;
    void *v11 = ".eh_frame";
    v11[1] = 9;
    *((_DWORD *)v11 + 4) = v10;
    *((_DWORD *)v11 + 5) = 117768707;
    *((unsigned char *)v11 + 24) = 6;
    unint64_t v76 = (const char *)v11;
    unsigned int v78 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameEdgeFixer,llvm::jitlink::EHFrameEdgeFixer,void>::Callbacks;
    if (v65.i64[1] >= *(void *)&v66[0])
    {
      uint64_t v13 = (v65.i64[1] - v65.i64[0]) >> 5;
      if ((unint64_t)(v13 + 1) >> 59) {
        goto LABEL_97;
      }
      unint64_t v14 = (*(void *)&v66[0] - v65.i64[0]) >> 4;
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      if (*(void *)&v66[0] - v65.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      unint64_t v73 = (char *)v66;
      if (v15) {
        long long v16 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v66, v15);
      }
      else {
        long long v16 = 0;
      }
      uint64_t v17 = (uint64_t)&v16[4 * v13];
      unsigned int v70 = v16;
      v71.i64[0] = v17;
      long long v72 = &v16[4 * v15];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v17, (long long *)&v76);
      unint64_t v12 = v17 + 32;
      v71.i64[1] = v17 + 32;
      long long v18 = (long long *)v65.i64[1];
      uint64_t v19 = v71.i64[0];
      if (v65.i64[1] == v65.i64[0])
      {
        int64x2_t v20 = vdupq_n_s64(v65.u64[1]);
      }
      else
      {
        do
        {
          v18 -= 2;
          uint64_t v19 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v19 - 32, v18);
        }
        while (v18 != (long long *)v65.i64[0]);
        int64x2_t v20 = v65;
        unint64_t v12 = v71.u64[1];
      }
      v65.i64[0] = v19;
      v65.i64[1] = v12;
      int64x2_t v71 = v20;
      uint64_t v21 = *(void ***)&v66[0];
      *(void *)&v66[0] = v72;
      long long v72 = v21;
      unsigned int v70 = (void **)v20.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v70);
    }
    else
    {
      unint64_t v12 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v65.i64[1], (long long *)&v76)+ 32;
    }
    v65.i64[1] = v12;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v76);
    unint64_t v76 = ".eh_frame";
    *(void *)&long long v77 = 9;
    unsigned int v78 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameNullTerminator,llvm::jitlink::EHFrameNullTerminator,void>::Callbacks
                                    + 2);
    if (v12 >= *(void *)&v66[0])
    {
      uint64_t v23 = (v65.i64[1] - v65.i64[0]) >> 5;
      if ((unint64_t)(v23 + 1) >> 59) {
        goto LABEL_97;
      }
      unint64_t v24 = (*(void *)&v66[0] - v65.i64[0]) >> 4;
      if (v24 <= v23 + 1) {
        unint64_t v24 = v23 + 1;
      }
      if (*(void *)&v66[0] - v65.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v25 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v24;
      }
      unint64_t v73 = (char *)v66;
      if (v25) {
        long long v26 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v66, v25);
      }
      else {
        long long v26 = 0;
      }
      uint64_t v27 = (uint64_t)&v26[4 * v23];
      unsigned int v70 = v26;
      v71.i64[0] = v27;
      long long v72 = &v26[4 * v25];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v27, (long long *)&v76);
      uint64_t v22 = v27 + 32;
      v71.i64[1] = v27 + 32;
      uint64_t v28 = (long long *)v65.i64[1];
      uint64_t v29 = v71.i64[0];
      if (v65.i64[1] == v65.i64[0])
      {
        int64x2_t v30 = vdupq_n_s64(v65.u64[1]);
      }
      else
      {
        do
        {
          v28 -= 2;
          uint64_t v29 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v29 - 32, v28);
        }
        while (v28 != (long long *)v65.i64[0]);
        int64x2_t v30 = v65;
        uint64_t v22 = v71.i64[1];
      }
      v65.i64[0] = v29;
      v65.i64[1] = v22;
      int64x2_t v71 = v30;
      uint64_t v31 = *(void ***)&v66[0];
      *(void *)&v66[0] = v72;
      long long v72 = v31;
      unsigned int v70 = (void **)v30.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v70);
    }
    else
    {
      uint64_t v22 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v12, (long long *)&v76)+ 32;
    }
    v65.i64[1] = v22;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v76);
    (*(void (**)(const char **__return_ptr))(*(void *)*a2 + 64))(&v76);
    if ((unint64_t)v78 < 8)
    {
      *(void *)&long long v74 = llvm::jitlink::markAllSymbolsLive;
      long long v75 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
          + 2;
      if (v65.i64[1] >= *(void *)&v66[0])
      {
        uint64_t v38 = (v65.i64[1] - v65.i64[0]) >> 5;
        if ((unint64_t)(v38 + 1) >> 59) {
          goto LABEL_97;
        }
        unint64_t v39 = (*(void *)&v66[0] - v65.i64[0]) >> 4;
        if (v39 <= v38 + 1) {
          unint64_t v39 = v38 + 1;
        }
        if (*(void *)&v66[0] - v65.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v40 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v39;
        }
        unint64_t v73 = (char *)v66;
        if (v40) {
          uint64_t v41 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v66, v40);
        }
        else {
          uint64_t v41 = 0;
        }
        uint64_t v46 = (uint64_t)&v41[4 * v38];
        unsigned int v70 = v41;
        v71.i64[0] = v46;
        long long v72 = &v41[4 * v40];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v46, &v74);
        uint64_t v33 = v46 + 32;
        v71.i64[1] = v46 + 32;
        __int16 v47 = (long long *)v65.i64[1];
        uint64_t v48 = v71.i64[0];
        if (v65.i64[1] == v65.i64[0])
        {
          int64x2_t v49 = vdupq_n_s64(v65.u64[1]);
        }
        else
        {
          do
          {
            v47 -= 2;
            uint64_t v48 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v48 - 32, v47);
          }
          while (v47 != (long long *)v65.i64[0]);
          int64x2_t v49 = v65;
          uint64_t v33 = v71.i64[1];
        }
        v65.i64[0] = v48;
        v65.i64[1] = v33;
        int64x2_t v71 = v49;
        uint64_t v51 = *(void ***)&v66[0];
        *(void *)&v66[0] = v72;
        long long v72 = v51;
        unsigned int v70 = (void **)v49.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v70);
      }
      else
      {
        uint64_t v33 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v65.i64[1], &v74)+ 32;
      }
      v65.i64[1] = v33;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v74);
    }
    else
    {
      if (v65.i64[1] >= *(void *)&v66[0])
      {
        uint64_t v34 = (v65.i64[1] - v65.i64[0]) >> 5;
        if ((unint64_t)(v34 + 1) >> 59) {
          goto LABEL_97;
        }
        unint64_t v35 = (*(void *)&v66[0] - v65.i64[0]) >> 4;
        if (v35 <= v34 + 1) {
          unint64_t v35 = v34 + 1;
        }
        if (*(void *)&v66[0] - v65.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v36 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v35;
        }
        unint64_t v73 = (char *)v66;
        if (v36) {
          std::string::size_type v37 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v66, v36);
        }
        else {
          std::string::size_type v37 = 0;
        }
        uint64_t v42 = (uint64_t)&v37[4 * v34];
        unsigned int v70 = v37;
        v71.i64[0] = v42;
        long long v72 = &v37[4 * v36];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v42, (long long *)&v76);
        uint64_t v32 = v42 + 32;
        v71.i64[1] = v42 + 32;
        long long v43 = (long long *)v65.i64[1];
        uint64_t v44 = v71.i64[0];
        if (v65.i64[1] == v65.i64[0])
        {
          int64x2_t v45 = vdupq_n_s64(v65.u64[1]);
        }
        else
        {
          do
          {
            v43 -= 2;
            uint64_t v44 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v44 - 32, v43);
          }
          while (v43 != (long long *)v65.i64[0]);
          int64x2_t v45 = v65;
          uint64_t v32 = v71.i64[1];
        }
        v65.i64[0] = v44;
        v65.i64[1] = v32;
        int64x2_t v71 = v45;
        long long v50 = *(void ***)&v66[0];
        *(void *)&v66[0] = v72;
        long long v72 = v50;
        unsigned int v70 = (void **)v45.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v70);
      }
      else
      {
        uint64_t v32 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v65.i64[1], (long long *)&v76)+ 32;
      }
      v65.i64[1] = v32;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v76);
    unsigned int v78 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
                                    + 2);
    if (*(void *)&v66[1] < *((void *)&v66[1] + 1))
    {
      uint64_t v52 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v66[1], (long long *)&v76)+ 32;
LABEL_89:
      *(void *)&v66[1] = v52;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v76);
      goto LABEL_90;
    }
    uint64_t v53 = (uint64_t)(*(void *)&v66[1] - *((void *)&v66[0] + 1)) >> 5;
    if (!((unint64_t)(v53 + 1) >> 59))
    {
      unint64_t v54 = (uint64_t)(*((void *)&v66[1] + 1) - *((void *)&v66[0] + 1)) >> 4;
      if (v54 <= v53 + 1) {
        unint64_t v54 = v53 + 1;
      }
      if (*((void *)&v66[1] + 1) - *((void *)&v66[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v55 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v54;
      }
      unint64_t v73 = (char *)&v66[1] + 8;
      if (v55) {
        long long v56 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v66[1] + 8, v55);
      }
      else {
        long long v56 = 0;
      }
      uint64_t v57 = (uint64_t)&v56[4 * v53];
      unsigned int v70 = v56;
      v71.i64[0] = v57;
      long long v72 = &v56[4 * v55];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v57, (long long *)&v76);
      uint64_t v52 = v57 + 32;
      v71.i64[1] = v57 + 32;
      int64x2_t v59 = (long long *)*((void *)&v66[0] + 1);
      long long v58 = *(long long **)&v66[1];
      uint64_t v60 = v71.i64[0];
      if (*(void *)&v66[1] == *((void *)&v66[0] + 1))
      {
        int64x2_t v61 = vdupq_n_s64(*(unint64_t *)&v66[1]);
      }
      else
      {
        do
        {
          v58 -= 2;
          uint64_t v60 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v60 - 32, v58);
        }
        while (v58 != v59);
        int64x2_t v61 = *(int64x2_t *)((char *)v66 + 8);
        uint64_t v52 = v71.i64[1];
      }
      *((void *)&v66[0] + 1) = v60;
      *(void *)&v66[1] = v52;
      int64x2_t v71 = v61;
      uint64_t v62 = (void **)*((void *)&v66[1] + 1);
      *((void *)&v66[1] + 1) = v72;
      long long v72 = v62;
      unsigned int v70 = (void **)v61.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v70);
      goto LABEL_89;
    }
LABEL_97:
    abort();
  }
LABEL_90:
  (*(void (**)(void ***__return_ptr))(*(void *)*a2 + 72))(&v70);
  if (!v70) {
    operator new();
  }
  uint64_t v63 = *a2;
  uint64_t v64 = v70;
  unsigned int v70 = 0;
  (*(void (**)(uint64_t, void ***))(*(void *)v63 + 24))(v63, &v64);
  if (v64) {
    (*((void (**)(void **))*v64 + 1))(v64);
  }
  if (v70) {
    (*((void (**)(void **))*v70 + 1))(v70);
  }
  unsigned int v70 = (void **)&v68;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v70);
  unsigned int v70 = (void **)&v67[1] + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v70);
  unsigned int v70 = (void **)v67;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v70);
  unsigned int v70 = (void **)v66 + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v70);
  unsigned int v70 = (void **)&v65;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v70);
}

uint64_t anonymous namespace'::buildTables_ELF_loongarch@<X0>(_anonymous_namespace_ *this@<X0>, void *a2@<X8>)
{
  v28[0] = 0;
  v28[1] = 0;
  int v29 = 0;
  uint64_t v30 = 0;
  v24[0] = 0;
  v24[1] = 0;
  unsigned int v25 = 0;
  long long v26 = v28;
  uint64_t v27 = 0;
  llvm::jitlink::LinkGraph::blocks(this, v38);
  v39[0] = v38[0];
  v39[1] = v38[1];
  void v39[2] = v38[2];
  void v39[3] = v38[3];
  llvm::jitlink::LinkGraph::blocks(this, &v31);
  v37[0] = v33;
  v37[1] = v34;
  uint64_t v37[2] = v35;
  void v37[3] = v36;
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v40, v39, (uint64_t *)v37);
  size_t v6 = v40;
  uint64_t v7 = v41;
  if (v40 != v41)
  {
    uint64_t v23 = a2;
    while (1)
    {
      uint64_t v9 = *(unsigned __int8 **)(*(void *)v6 + 40);
      int64x2_t v8 = *(unsigned __int8 **)(*(void *)v6 + 48);
      while (v9 != v8)
      {
        int v10 = v9[24];
        if (v10 == 4)
        {
          unint64_t v12 = *(_OWORD **)v9;
          if (*(unsigned char *)(*(void *)(*(void *)v9 + 16) + 8)) {
            goto LABEL_23;
          }
          v38[0] = *v12;
          *(void *)&long long v31 = 0;
          int v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v24, (uint64_t)v38, &v31, v5);
          uint64_t v14 = v31;
          if (!v13) {
            uint64_t v14 = v24[0] + 24 * v25;
          }
          if (v14 == v24[0] + 24 * v25)
          {
            uint64_t v15 = v27;
            if (!v27) {
              llvm::jitlink::LinkGraph::createSection();
            }
            uint64_t EntryForTarget = llvm::jitlink::TableManager<llvm::jitlink::loongarch::GOTTableManager>::getEntryForTarget((uint64_t)v26, (uint64_t)this, v12, v5);
            if (*((_DWORD *)this + 42) == 8) {
              uint64_t v17 = &llvm::jitlink::loongarch::LA64StubContent;
            }
            else {
              uint64_t v17 = &llvm::jitlink::loongarch::LA32StubContent;
            }
            *(void *)&v38[0] = v17;
            *((void *)&v38[0] + 1) = 12;
            *(void *)&long long v31 = 0;
            uint64_t v42 = 0;
            v43[0] = 4;
            long long v18 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)this, v15, (uint64_t *)v38, (uint64_t *)&v31, v43, &v42);
            llvm::jitlink::Block::addEdge(v18, 8, 0, EntryForTarget, 0);
            llvm::jitlink::Block::addEdge(v18, 9, 4, EntryForTarget, 0);
            uint64_t v19 = llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)this, (uint64_t)v18, 0, 12, 1, 0);
            long long v31 = *v12;
            uint64_t v32 = v19;
            llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)v24, &v31, &v32, v20, (uint64_t)v38);
            uint64_t v14 = *(void *)&v38[0];
          }
          uint64_t v21 = *(void *)(v14 + 16);
        }
        else
        {
          if (v10 == 10)
          {
            char v11 = 8;
          }
          else
          {
            if (v10 != 11) {
              goto LABEL_23;
            }
            char v11 = 9;
          }
          v9[24] = v11;
          uint64_t v21 = llvm::jitlink::TableManager<llvm::jitlink::loongarch::GOTTableManager>::getEntryForTarget((uint64_t)v28, (uint64_t)this, *(_OWORD **)v9, v5);
        }
        *(void *)uint64_t v9 = v21;
LABEL_23:
        v9 += 32;
      }
      v6 += 8;
      if (v6 == v7)
      {
        size_t v6 = v40;
        a2 = v23;
        break;
      }
    }
  }
  if (v6)
  {
    uint64_t v41 = v6;
    operator delete(v6);
  }
  *a2 = 0;
  MEMORY[0x263E500A0](v24[0], 8);
  return MEMORY[0x263E500A0](v28[0], 8);
}

uint64_t llvm::jitlink::TableManager<llvm::jitlink::loongarch::GOTTableManager>::getEntryForTarget(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  *(_OWORD *)uint64_t v19 = *a3;
  *(void *)&long long v17 = 0;
  int v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v19, &v17, a4);
  uint64_t v8 = v17;
  if (!v7) {
    uint64_t v8 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  }
  if (v8 == *(void *)a1 + 24 * *(unsigned int *)(a1 + 16))
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (!v9) {
      llvm::jitlink::LinkGraph::createSection();
    }
    unint64_t v10 = *(unsigned int *)(a2 + 168);
    v19[0] = (uint64_t)&llvm::jitlink::loongarch::NullPointerContent;
    v19[1] = v10;
    *(void *)&long long v17 = 0;
    unint64_t v21 = v10;
    uint64_t v20 = 0;
    char v11 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, v9, v19, (uint64_t *)&v17, &v21, &v20);
    uint64_t v12 = (uint64_t)v11;
    if (*(_DWORD *)(a2 + 168) == 8) {
      char v13 = 2;
    }
    else {
      char v13 = 3;
    }
    llvm::jitlink::Block::addEdge(v11, v13, 0, (uint64_t)a3, 0);
    uint64_t v14 = llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, v12, 0, *(unsigned int *)(a2 + 168), 0, 0);
    long long v17 = *a3;
    long long v18 = v14;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>(a1, &v17, &v18, v15, (uint64_t)v19);
    uint64_t v8 = v19[0];
  }
  return *(void *)(v8 + 16);
}

void anonymous namespace'::ELFLinkGraphBuilder_loongarch<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFLinkGraphBuilder_loongarch(uint64_t a1)
{
  *(void *)a1 = &unk_270DBEEA0;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x263E500B0);
}

void anonymous namespace'::ELFLinkGraphBuilder_loongarch<llvm::object::ELFType<(llvm::support::endianness)1,true>>::addRelocations(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = v5 + (v3 << 6);
    do
    {
      if (*(_DWORD *)(v5 + 4) != 4)
      {
        *a2 = 0;
        goto LABEL_56;
      }
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(*(void **)(a1 + 24), *(_DWORD *)(v5 + 44), (uint64_t)&v48);
      if (v49)
      {
        uint64_t v23 = v48;
        *a2 = v48;
        if (v23) {
          return;
        }
        goto LABEL_56;
      }
      int v7 = *(void **)(a1 + 24);
      *(void *)&long long v28 = llvm::object::defaultWarningHandler;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(v7, v48, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v28, (uint64_t)&v46);
      if (v47)
      {
        uint64_t v24 = v46;
        *(void *)&long long v46 = 0;
        *a2 = v24;
        goto LABEL_49;
      }
      if (!*(unsigned char *)(a1 + 72)
        && (long long v28 = v46,
            std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90], (uint64_t)&v28) != (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90])|| (*(unsigned int (**)(uint64_t, unsigned int *))(*(void *)a1 + 40))(a1, v48))
      {
        *a2 = 0;
        goto LABEL_49;
      }
      GraphBlocuint64_t k = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, *(_DWORD *)(v5 + 44));
      if (!GraphBlock)
      {
        LOWORD(v30) = 1283;
        *(void *)&long long v28 = "Refencing a section that wasn't added to the graph: ";
        long long v29 = v46;
        getErrorErrorCat();
        operator new();
      }
      uint64_t v9 = (void *)GraphBlock;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(*(void **)(a1 + 24), (void *)v5, (uint64_t)&v43);
      uint64_t v10 = v43;
      if (v45)
      {
        uint64_t v43 = 0;
      }
      else
      {
        if (v44)
        {
          uint64_t v11 = 24 * v44;
          uint64_t v12 = v43 + 8;
          do
          {
            char v13 = v48;
            int v14 = *(_DWORD *)(v12 + 4);
            int v36 = v14;
            llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationSymbol(*(void **)(a1 + 24), v12 - 8, *(void **)(a1 + 48), (uint64_t)&v50);
            if (v51)
            {
              uint64_t v18 = v50;
              uint64_t v50 = 0;
              *a2 = v18;
            }
            else
            {
              uint64_t GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(a1, v14);
              if (!GraphSymbol)
              {
                int v19 = *(_DWORD *)(a1 + 112);
                *(void *)&long long v28 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {0}, sh"
                                  "ndx: {1} Size of table: {2}";
                *((void *)&v28 + 1) = 113;
                *(void *)&long long v29 = v35;
                *((void *)&v29 + 1) = 3;
                uint64_t v30 = &unk_270DBEB80;
                long long v31 = &v36;
                v32[0] = &unk_270DBED90;
                v32[1] = v50 + 6;
                long long v33 = &unk_270DBE8C8;
                int v34 = v19;
                v35[0] = &v30;
                v35[1] = v32;
                long long v35[2] = &v33;
                getErrorErrorCat();
                uint64_t v41 = 3;
                uint64_t v42 = &getErrorErrorCat(void)::ErrorErrorCat;
                llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>();
              }
              signed int v16 = *(_DWORD *)v12;
              signed int v40 = v16;
              if (v16 <= 65)
              {
                if (v16 == 1)
                {
                  char v17 = 3;
                }
                else
                {
                  if (v16 != 2)
                  {
LABEL_24:
                    *(void *)&long long v28 = "{0:d}: ";
                    *((void *)&v28 + 1) = 7;
                    *(void *)&long long v29 = v32;
                    *((void *)&v29 + 1) = 1;
                    uint64_t v30 = &unk_270DBCE28;
                    long long v31 = &v40;
                    v32[0] = &v30;
                    std::string::size_type v37 = "Unsupported loongarch relocation:";
                    uint64_t v38 = &v28;
                    __int16 v39 = 1539;
                    llvm::object::getELFRelocationTypeName((llvm::object *)0x102, v16);
                    operator new();
                  }
                  char v17 = 2;
                }
              }
              else
              {
                switch(v16)
                {
                  case 'B':
                    char v17 = 4;
                    break;
                  case 'C':
                  case 'D':
                  case 'E':
                  case 'F':
                  case 'I':
                  case 'J':
                    goto LABEL_24;
                  case 'G':
                    char v17 = 8;
                    break;
                  case 'H':
                    char v17 = 9;
                    break;
                  case 'K':
                    char v17 = 10;
                    break;
                  case 'L':
                    char v17 = 11;
                    break;
                  default:
                    if (v16 != 99) {
                      goto LABEL_24;
                    }
                    char v17 = 5;
                    break;
                }
              }
              uint64_t v20 = *(void *)(v12 + 8);
              int v21 = *(_DWORD *)(v12 - 8) + v13[4] - *(_DWORD *)v9;
              *(void *)&long long v28 = GraphSymbol;
              DWORD2(v28) = v21;
              *(void *)&long long v29 = v20;
              BYTE8(v29) = v17;
              llvm::jitlink::Block::addEdge(v9, &v28);
              *a2 = 0;
            }
            if (v51)
            {
              uint64_t v22 = v50;
              uint64_t v50 = 0;
              if (v22) {
                (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
              }
            }
            if (*a2) {
              goto LABEL_46;
            }
            v12 += 24;
            v11 -= 24;
          }
          while (v11);
        }
        uint64_t v10 = 0;
      }
      *a2 = v10;
LABEL_46:
      if (v45)
      {
        uint64_t v25 = v43;
        uint64_t v43 = 0;
        if (v25) {
          (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
        }
      }
LABEL_49:
      if (v47)
      {
        uint64_t v26 = v46;
        *(void *)&long long v46 = 0;
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
        }
      }
      if (v49)
      {
        uint64_t v27 = v48;
        uint64_t v48 = 0;
        if (v27) {
          (*(void (**)(unsigned int *))(*(void *)v27 + 8))(v27);
        }
      }
      if (*a2) {
        return;
      }
LABEL_56:
      v5 += 64;
    }
    while (v5 != v6);
  }
  *a2 = 0;
}

void anonymous namespace'::ELFLinkGraphBuilder_loongarch<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFLinkGraphBuilder_loongarch(uint64_t a1)
{
  *(void *)a1 = &unk_270DBECD0;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x263E500B0);
}

void anonymous namespace'::ELFLinkGraphBuilder_loongarch<llvm::object::ELFType<(llvm::support::endianness)1,false>>::addRelocations(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = *(unsigned int **)(a1 + 32);
    uint64_t v6 = &v5[10 * v3];
    int v7 = llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>;
    do
    {
      if (v5[1] == 4)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(*(void **)(a1 + 24), v5[7], (uint64_t)&v50);
        if (v51)
        {
          uint64_t v24 = v50;
          *a2 = v50;
          if (v24) {
            return;
          }
        }
        else
        {
          uint64_t v8 = *(void **)(a1 + 24);
          *(void *)&long long v30 = llvm::object::defaultWarningHandler;
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(v8, v50, (void (*)(std::string *__return_ptr, uint64_t, void *))v7, (uint64_t)&v30, (uint64_t)&v48);
          if (v49)
          {
            uint64_t v25 = v48;
            *(void *)&long long v48 = 0;
            *a2 = v25;
          }
          else if ((*(unsigned char *)(a1 + 72) {
                  || (long long v30 = v48,
          }
                      std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90], (uint64_t)&v30) == (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90]))&& !(*(unsigned int (**)(uint64_t, unsigned int *))(*(void *)a1 + 40))(a1, v50))
          {
            GraphBlocuint64_t k = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, v5[7]);
            if (!GraphBlock)
            {
              LOWORD(v32) = 1283;
              *(void *)&long long v30 = "Refencing a section that wasn't added to the graph: ";
              long long v31 = v48;
              getErrorErrorCat();
              operator new();
            }
            uint64_t v10 = (void *)GraphBlock;
            llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>(*(void **)(a1 + 24), v5, (uint64_t)&v45);
            uint64_t v11 = v45;
            long long v29 = v7;
            if (v47)
            {
              uint64_t v45 = 0;
            }
            else
            {
              if (v46)
              {
                uint64_t v12 = 12 * v46;
                char v13 = (unsigned int *)(v45 + 4);
                do
                {
                  int v14 = v50;
                  unsigned int v15 = *v13;
                  unsigned int v16 = *v13 >> 8;
                  unsigned int v38 = v16;
                  if (v15 > 0xFF)
                  {
                    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(*(void **)(a1 + 24), *(unsigned int **)(a1 + 48), v16, (uint64_t)&v52);
                    if (v53)
                    {
                      uint64_t v20 = v52;
                      uint64_t v52 = 0;
                      *a2 = v20;
                      goto LABEL_33;
                    }
                  }
                  else
                  {
                    char v53 = 0;
                    uint64_t v52 = 0;
                  }
                  uint64_t GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(a1, v16);
                  if (!GraphSymbol)
                  {
                    int v19 = *(_DWORD *)(a1 + 112);
                    *(void *)&long long v30 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {0}"
                                      ", shndx: {1} Size of table: {2}";
                    *((void *)&v30 + 1) = 113;
                    *(void *)&long long v31 = v37;
                    *((void *)&v31 + 1) = 3;
                    uint64_t v32 = &unk_270DBEB80;
                    long long v33 = &v38;
                    v34[0] = &unk_270DBED90;
                    v34[1] = v52 + 14;
                    long long v35 = &unk_270DBE8C8;
                    int v36 = v19;
                    v37[0] = &v32;
                    v37[1] = v34;
                    uint64_t v37[2] = &v35;
                    getErrorErrorCat();
                    uint64_t v43 = 3;
                    uint64_t v44 = &getErrorErrorCat(void)::ErrorErrorCat;
                    llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>();
                  }
                  signed int v18 = *(unsigned __int8 *)v13;
                  signed int v42 = v18;
                  if (v18 <= 65)
                  {
                    if (v18 == 1)
                    {
                      LOBYTE(v18) = 3;
                    }
                    else if (v18 != 2)
                    {
LABEL_26:
                      *(void *)&long long v30 = "{0:d}: ";
                      *((void *)&v30 + 1) = 7;
                      *(void *)&long long v31 = v34;
                      *((void *)&v31 + 1) = 1;
                      uint64_t v32 = &unk_270DBCE28;
                      long long v33 = &v42;
                      v34[0] = &v32;
                      __int16 v39 = "Unsupported loongarch relocation:";
                      signed int v40 = &v30;
                      __int16 v41 = 1539;
                      llvm::object::getELFRelocationTypeName((llvm::object *)0x102, v18);
                      operator new();
                    }
                  }
                  else
                  {
                    switch(v18)
                    {
                      case 'B':
                        LOBYTE(v18) = 4;
                        break;
                      case 'C':
                      case 'D':
                      case 'E':
                      case 'F':
                      case 'I':
                      case 'J':
                        goto LABEL_26;
                      case 'G':
                        LOBYTE(v18) = 8;
                        break;
                      case 'H':
                        LOBYTE(v18) = 9;
                        break;
                      case 'K':
                        LOBYTE(v18) = 10;
                        break;
                      case 'L':
                        LOBYTE(v18) = 11;
                        break;
                      default:
                        if (v18 != 99) {
                          goto LABEL_26;
                        }
                        LOBYTE(v18) = 5;
                        break;
                    }
                  }
                  uint64_t v21 = (int)v13[1];
                  int v22 = *(v13 - 1) + v14[3] - *(_DWORD *)v10;
                  *(void *)&long long v30 = GraphSymbol;
                  DWORD2(v30) = v22;
                  *(void *)&long long v31 = v21;
                  BYTE8(v31) = v18;
                  llvm::jitlink::Block::addEdge(v10, &v30);
                  *a2 = 0;
LABEL_33:
                  if (v53)
                  {
                    uint64_t v23 = v52;
                    uint64_t v52 = 0;
                    if (v23) {
                      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
                    }
                  }
                  if (*a2) {
                    goto LABEL_48;
                  }
                  v13 += 3;
                  v12 -= 12;
                }
                while (v12);
              }
              uint64_t v11 = 0;
            }
            *a2 = v11;
LABEL_48:
            if (v47)
            {
              uint64_t v26 = v45;
              uint64_t v45 = 0;
              if (v26) {
                (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
              }
            }
            int v7 = v29;
          }
          else
          {
            *a2 = 0;
          }
          if (v49)
          {
            uint64_t v27 = v48;
            *(void *)&long long v48 = 0;
            if (v27) {
              (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
            }
          }
          if (v51)
          {
            long long v28 = v50;
            uint64_t v50 = 0;
            if (v28) {
              (*(void (**)(unsigned int *))(*(void *)v28 + 8))(v28);
            }
          }
          if (*a2) {
            return;
          }
        }
      }
      else
      {
        *a2 = 0;
      }
      v5 += 10;
    }
    while (v5 != v6);
  }
  *a2 = 0;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>@<X0>(void *result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  if (a2[9] != 12)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v33);
    char v13 = std::string::insert(&v33, 0, "section ");
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    unsigned int v15 = std::string::append(&v35, " has invalid sh_entsize: expected ");
    unsigned int v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    __int16 v39 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v37.__r_.__value_.__r.__words[0] = 12;
    v41[0] = __p;
    signed int v42 = &v37;
    __int16 v43 = 2564;
    v44[0] = v41;
    uint64_t v45 = (std::string *)", but got ";
    __int16 v46 = 770;
    char v17 = (const char *)a2[9];
    char v47 = v44;
    long long v48 = v17;
    __int16 v49 = 2050;
    LODWORD(v32.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v6 = a2[5];
  unsigned int v7 = a2[5] / 0xC;
  if (a2[5] % 0xC)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v37);
    uint64_t v8 = std::string::insert(&v37, 0, "section ");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v33, " has an invalid sh_size (");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    __p[0] = &v35;
    __int16 v39 = (std::string *)v6;
    __int16 v40 = 2052;
    v41[0] = __p;
    signed int v42 = (std::string *)") which is not a multiple of its sh_entsize (";
    __int16 v43 = 770;
    uint64_t v12 = (std::string *)a2[9];
    v44[0] = v41;
    uint64_t v45 = v12;
    __int16 v46 = 2050;
    char v47 = v44;
    long long v48 = ")";
    __int16 v49 = 770;
    LODWORD(v32.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v18 = a2[4];
  if (__CFADD__(v18, v6))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v37);
    int v19 = std::string::insert(&v37, 0, "section ");
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = std::string::append(&v33, " has a sh_offset (0x");
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v32.__r_.__value_.__r.__words[0] = v18;
    __p[0] = &v35;
    __int16 v39 = &v32;
    __int16 v40 = 3588;
    v41[0] = __p;
    signed int v42 = (std::string *)") + sh_size (0x";
    __int16 v43 = 770;
    v31.__r_.__value_.__r.__words[0] = v6;
    v44[0] = v41;
    uint64_t v45 = &v31;
    __int16 v46 = 3586;
    char v47 = v44;
    long long v48 = ") that cannot be represented";
    __int16 v49 = 770;
    LODWORD(v30) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  if (result[1] < (unint64_t)(v6 + v18))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(result, (uint64_t)a2, &v31);
    uint64_t v23 = std::string::insert(&v31, 0, "section ");
    std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    uint64_t v25 = std::string::append(&v32, " has a sh_offset (0x");
    std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v29 = v6;
    std::string::size_type v30 = v18;
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    v33.__r_.__value_.__r.__words[2] = (std::string::size_type)&v30;
    __int16 v34 = 3588;
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
    v35.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
    __int16 v36 = 770;
    __p[0] = &v35;
    __int16 v39 = (std::string *)&v29;
    __int16 v40 = 3586;
    v41[0] = __p;
    signed int v42 = (std::string *)") that is greater than the file size (0x";
    __int16 v43 = 770;
    uint64_t v28 = v4[1];
    v44[0] = v41;
    uint64_t v45 = (std::string *)&v28;
    __int16 v46 = 3586;
    char v47 = v44;
    long long v48 = ")";
    __int16 v49 = 770;
    int v50 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
  }
  std::string::size_type v27 = *result + v18;
  *(unsigned char *)(a3 + 16) &= ~1u;
  *(void *)a3 = v27;
  *(void *)(a3 + 8) = v7;
  return result;
}

void anonymous namespace'::ELFJITLinker_loongarch::~ELFJITLinker_loongarch(_anonymous_namespace_::ELFJITLinker_loongarch *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x263E500B0);
}

void llvm::jitlink::JITLinker<anonymous namespace'::ELFJITLinker_loongarch>::fixUpBlocks(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 192))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 200);
    if (v3)
    {
      uint64_t v4 = 24 * v3;
      uint64_t v5 = *(void **)(a1 + 184);
      while (*v5 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v5 += 3;
        v4 -= 24;
        if (!v4) {
          goto LABEL_56;
        }
      }
    }
    else
    {
      uint64_t v5 = *(void **)(a1 + 184);
    }
    uint64_t v6 = *(void *)(a1 + 184) + 24 * v3;
    if (v5 != (void *)v6)
    {
      std::string v37 = (void *)v6;
LABEL_10:
      uint64_t v7 = v5[2];
      int v39 = *(_DWORD *)(v7 + 20);
      uint64_t v8 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v7 + 32);
      uint64_t v38 = *(void *)(v7 + 32) + 8 * *(unsigned int *)(v7 + 48);
      if ((uint64_t **)v38 != v8)
      {
        uint64_t v10 = v8;
        std::string::size_type v11 = v9;
        do
        {
          uint64_t v12 = *v10;
          if (v39 == 2 && (v12[1] & 4) == 0)
          {
            std::string::size_type v14 = (const void *)v12[3];
            size_t v13 = v12[4];
            unsigned int v15 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, v13, 0);
            uint64_t v16 = (uint64_t)v15;
            if (v13) {
              memmove(v15, v14, v13);
            }
            _OWORD v12[3] = v16;
            void v12[4] = v13;
            v12[1] |= 4uLL;
          }
          std::string::size_type v18 = (unsigned __int8 *)v12[5];
          char v17 = (unsigned __int8 *)v12[6];
          while (v18 != v17)
          {
            unsigned int v19 = v18[24];
            unsigned int v20 = v19 - 2;
            if (v19 >= 2)
            {
              uint64_t v21 = v12[3];
              uint64_t v22 = *((unsigned int *)v18 + 2);
              unint64_t v23 = *v12 + v22;
              uint64_t v24 = (*(void *)(*(void *)v18 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(*(void *)v18 + 16);
              uint64_t v25 = *((void *)v18 + 2);
              switch(v20)
              {
                case 0u:
                  unint64_t v26 = v24 + v25;
                  goto LABEL_34;
                case 1u:
                  unint64_t v30 = v24 + v25;
                  if (HIDWORD(v30)) {
                    goto LABEL_37;
                  }
                  goto LABEL_32;
                case 2u:
                  unint64_t v31 = v24 - v23 + v25;
                  if ((v31 + 0x8000000) >> 28) {
                    goto LABEL_37;
                  }
                  if ((v31 & 3) != 0) {
                    llvm::jitlink::makeAlignmentError(v23, v31, 4u, (uint64_t)v18);
                  }
                  int v36 = *(_DWORD *)(v21 + v22);
                  unsigned int v35 = (v31 << 8) & 0x3FFFC00 | (v31 >> 18) & 0x3FF;
                  goto LABEL_39;
                case 3u:
                  unint64_t v32 = v24 - v23;
                  goto LABEL_31;
                case 4u:
                  unint64_t v32 = v23 - v24;
LABEL_31:
                  unint64_t v30 = v32 + v25;
                  if (v30 != (int)v30) {
                    goto LABEL_37;
                  }
LABEL_32:
                  *(_DWORD *)(v21 + v22) = v30;
                  goto LABEL_41;
                case 5u:
                  unint64_t v26 = v24 + v25 - v23;
LABEL_34:
                  *(void *)(v21 + v22) = v26;
                  goto LABEL_41;
                case 6u:
                  unint64_t v33 = ((((v24 + v25) & 0x800) + v24 + v25) & 0xFFFFFFFFFFFFF000) - (v23 & 0xFFFFFFFFFFFFF000);
                  if (v33 != (int)v33) {
LABEL_37:
                  }
                    llvm::jitlink::makeTargetOutOfRangeError(a1, v12, (uint64_t)v18);
                  unsigned int v34 = *(_DWORD *)(v21 + v22) | (v33 >> 7);
                  goto LABEL_40;
                case 7u:
                  unsigned int v35 = *(_DWORD *)(v21 + v22);
                  int v36 = ((*(_WORD *)(*(void *)v18 + 24) + **(_WORD **)(*(void *)v18 + 16) + (_WORD)v25) & 0xFFF) << 10;
LABEL_39:
                  unsigned int v34 = v35 | v36;
LABEL_40:
                  *(_DWORD *)(v21 + v22) = v34;
LABEL_41:
                  *a2 = 0;
                  break;
                default:
                  std::operator+<char>();
                  std::string::size_type v27 = std::string::append(&v41, ", section ");
                  std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
                  *(_OWORD *)std::string __p = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
                  std::string::size_type v43 = v28;
                  v27->__r_.__value_.__l.__size_ = 0;
                  v27->__r_.__value_.__r.__words[2] = 0;
                  v27->__r_.__value_.__r.__words[0] = 0;
                  long long v29 = *(_OWORD *)v12[2];
                  uint64_t v44 = __p;
                  long long v45 = v29;
                  __int16 v46 = 1284;
                  char v47 = &v44;
                  long long v48 = " unsupported edge kind ";
                  __int16 v49 = 770;
                  if (!*llvm::jitlink::loongarch::getEdgeKindName((llvm::jitlink::loongarch *)v18[24]))
                  {
                    int v52 = v50;
                    __int16 v53 = v51;
                  }
                  operator new();
              }
            }
            v18 += 32;
          }
          while (++v10 != v11)
          {
            if (((unint64_t)*v10 | 0x1000) != 0xFFFFFFFFFFFFF000) {
              goto LABEL_50;
            }
          }
          uint64_t v10 = v11;
LABEL_50:
          ;
        }
        while (v10 != (uint64_t **)v38);
      }
      for (v5 += 3; v5 != v37; v5 += 3)
      {
        if (*v5 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v5 != v37) {
            goto LABEL_10;
          }
          break;
        }
      }
    }
  }
LABEL_56:
  *a2 = 0;
}

void llvm::jitlink::JITLinker<anonymous namespace'::ELFJITLinker_loongarch>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t *llvm::jitlink::createLinkGraphFromELFObject_riscv@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  long long v3 = a1[1];
  v23[0] = *a1;
  v23[1] = v3;
  llvm::object::ObjectFile::createELFObjectFile(v23, 1, (uint64_t)&v28);
  uint64_t v4 = (llvm::object::ObjectFile *)v28;
  if ((v29 & 1) == 0)
  {
    if ((*(unsigned int (**)(size_t *))(*v28 + 392))(v28) == 28)
    {
      uint64_t v5 = (void *)v28[4];
      size_t v6 = v28[5];
      int v7 = v28 + 56;
      llvm::object::ObjectFile::makeTriple((llvm::object::ObjectFile *)v28, (llvm::Triple *)&v18);
      long long v24 = v18;
      uint64_t v8 = v19;
      long long v18 = 0uLL;
      uint64_t v19 = 0;
      long long v26 = v20;
      uint64_t v25 = v8;
      uint64_t v27 = v21;
      llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFLinkGraphBuilder((int)&v22, v7, (uint64_t)&v24, v5, v6);
    }
    std::string::size_type v9 = (void *)v28[4];
    size_t v10 = v28[5];
    int v11 = v28 + 56;
    llvm::object::ObjectFile::makeTriple((llvm::object::ObjectFile *)v28, (llvm::Triple *)__p);
    long long v24 = *(_OWORD *)__p;
    uint64_t v12 = v15;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v15 = 0;
    long long v26 = v16;
    uint64_t v25 = v12;
    uint64_t v27 = v17;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFLinkGraphBuilder((int)&v22, v11, (uint64_t)&v24, v9, v10);
  }
  std::string::size_type v28 = 0;
  *(unsigned char *)(a2 + 8) |= 1u;
  *(void *)a2 = v4;
  return llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected((uint64_t *)&v28);
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFLinkGraphBuilder_riscv(uint64_t a1)
{
  *(void *)a1 = &unk_270DBEEA0;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFLinkGraphBuilder_riscv(uint64_t a1)
{
  *(void *)a1 = &unk_270DBECD0;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

void llvm::jitlink::link_ELF_riscv(void *a1, void *a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v40 = 0;
  long long v39 = 0u;
  memset(v38, 0, sizeof(v38));
  memset(v37, 0, sizeof(v37));
  int64x2_t v36 = 0u;
  if ((*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, *a1 + 120))
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 64))(&v47);
    if ((unint64_t)v48 < 8)
    {
      *(void *)&long long v45 = llvm::jitlink::markAllSymbolsLive;
      __int16 v46 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
          + 2;
      if (v36.i64[1] >= *(void *)&v37[0])
      {
        uint64_t v9 = (v36.i64[1] - v36.i64[0]) >> 5;
        if ((unint64_t)(v9 + 1) >> 59) {
          goto LABEL_61;
        }
        unint64_t v10 = (*(void *)&v37[0] - v36.i64[0]) >> 4;
        if (v10 <= v9 + 1) {
          unint64_t v10 = v9 + 1;
        }
        if (*(void *)&v37[0] - v36.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        uint64_t v44 = (char *)v37;
        if (v11) {
          uint64_t v12 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v37, v11);
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v17 = (uint64_t)&v12[4 * v9];
        std::string v41 = v12;
        v42.i64[0] = v17;
        std::string::size_type v43 = &v12[4 * v11];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v17, &v45);
        uint64_t v4 = v17 + 32;
        v42.i64[1] = v17 + 32;
        long long v18 = (long long *)v36.i64[1];
        uint64_t v19 = v42.i64[0];
        if (v36.i64[1] == v36.i64[0])
        {
          int64x2_t v20 = vdupq_n_s64(v36.u64[1]);
        }
        else
        {
          do
          {
            v18 -= 2;
            uint64_t v19 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v19 - 32, v18);
          }
          while (v18 != (long long *)v36.i64[0]);
          int64x2_t v20 = v36;
          uint64_t v4 = v42.i64[1];
        }
        v36.i64[0] = v19;
        v36.i64[1] = v4;
        int64x2_t v42 = v20;
        uint64_t v22 = *(void ***)&v37[0];
        *(void *)&v37[0] = v43;
        std::string::size_type v43 = v22;
        std::string v41 = (void **)v20.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v41);
      }
      else
      {
        uint64_t v4 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v36.i64[1], &v45)+ 32;
      }
      v36.i64[1] = v4;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v45);
    }
    else
    {
      if (v36.i64[1] >= *(void *)&v37[0])
      {
        uint64_t v5 = (v36.i64[1] - v36.i64[0]) >> 5;
        if ((unint64_t)(v5 + 1) >> 59) {
          goto LABEL_61;
        }
        unint64_t v6 = (*(void *)&v37[0] - v36.i64[0]) >> 4;
        if (v6 <= v5 + 1) {
          unint64_t v6 = v5 + 1;
        }
        if (*(void *)&v37[0] - v36.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v7 = v6;
        }
        uint64_t v44 = (char *)v37;
        if (v7) {
          uint64_t v8 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v37, v7);
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v13 = (uint64_t)&v8[4 * v5];
        std::string v41 = v8;
        v42.i64[0] = v13;
        std::string::size_type v43 = &v8[4 * v7];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v13, &v47);
        uint64_t v3 = v13 + 32;
        v42.i64[1] = v13 + 32;
        std::string::size_type v14 = (long long *)v36.i64[1];
        uint64_t v15 = v42.i64[0];
        if (v36.i64[1] == v36.i64[0])
        {
          int64x2_t v16 = vdupq_n_s64(v36.u64[1]);
        }
        else
        {
          do
          {
            v14 -= 2;
            uint64_t v15 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v15 - 32, v14);
          }
          while (v14 != (long long *)v36.i64[0]);
          int64x2_t v16 = v36;
          uint64_t v3 = v42.i64[1];
        }
        v36.i64[0] = v15;
        v36.i64[1] = v3;
        int64x2_t v42 = v16;
        uint64_t v21 = *(void ***)&v37[0];
        *(void *)&v37[0] = v43;
        std::string::size_type v43 = v21;
        std::string v41 = (void **)v16.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v41);
      }
      else
      {
        uint64_t v3 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v36.i64[1], &v47)+ 32;
      }
      v36.i64[1] = v3;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v47);
    long long v48 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
        + 2;
    if (*(void *)&v37[1] < *((void *)&v37[1] + 1))
    {
      uint64_t v23 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v37[1], &v47)+ 32;
LABEL_53:
      *(void *)&v37[1] = v23;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v47);
      goto LABEL_54;
    }
    uint64_t v24 = (uint64_t)(*(void *)&v37[1] - *((void *)&v37[0] + 1)) >> 5;
    if (!((unint64_t)(v24 + 1) >> 59))
    {
      unint64_t v25 = (uint64_t)(*((void *)&v37[1] + 1) - *((void *)&v37[0] + 1)) >> 4;
      if (v25 <= v24 + 1) {
        unint64_t v25 = v24 + 1;
      }
      if (*((void *)&v37[1] + 1) - *((void *)&v37[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      uint64_t v44 = (char *)&v37[1] + 8;
      if (v26) {
        uint64_t v27 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v37[1] + 8, v26);
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = (uint64_t)&v27[4 * v24];
      std::string v41 = v27;
      v42.i64[0] = v28;
      std::string::size_type v43 = &v27[4 * v26];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v28, &v47);
      uint64_t v23 = v28 + 32;
      v42.i64[1] = v28 + 32;
      uint64_t v30 = (long long *)*((void *)&v37[0] + 1);
      char v29 = *(long long **)&v37[1];
      uint64_t v31 = v42.i64[0];
      if (*(void *)&v37[1] == *((void *)&v37[0] + 1))
      {
        int64x2_t v32 = vdupq_n_s64(*(unint64_t *)&v37[1]);
      }
      else
      {
        do
        {
          v29 -= 2;
          uint64_t v31 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v31 - 32, v29);
        }
        while (v29 != v30);
        int64x2_t v32 = *(int64x2_t *)((char *)v37 + 8);
        uint64_t v23 = v42.i64[1];
      }
      *((void *)&v37[0] + 1) = v31;
      *(void *)&v37[1] = v23;
      int64x2_t v42 = v32;
      unint64_t v33 = (void **)*((void *)&v37[1] + 1);
      *((void *)&v37[1] + 1) = v43;
      std::string::size_type v43 = v33;
      std::string v41 = (void **)v32.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v41);
      goto LABEL_53;
    }
LABEL_61:
    abort();
  }
LABEL_54:
  (*(void (**)(void ***__return_ptr))(*(void *)*a2 + 72))(&v41);
  if (!v41) {
    operator new();
  }
  uint64_t v34 = *a2;
  unsigned int v35 = v41;
  std::string v41 = 0;
  (*(void (**)(uint64_t, void ***))(*(void *)v34 + 24))(v34, &v35);
  if (v35) {
    (*((void (**)(void **))*v35 + 1))(v35);
  }
  if (v41) {
    (*((void (**)(void **))*v41 + 1))(v41);
  }
  std::string v41 = (void **)&v39;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v41);
  std::string v41 = (void **)&v38[1] + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v41);
  std::string v41 = (void **)v38;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v41);
  std::string v41 = (void **)v37 + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v41);
  std::string v41 = (void **)&v36;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v41);
}

uint64_t llvm::jitlink::PerGraphGOTAndPLTStubsBuilder<anonymous namespace'::PerGraphGOTAndPLTStubsBuilder_ELF_riscv>::asPass@<X0>(llvm::jitlink::LinkGraph *a1@<X0>, void *a2@<X8>)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = a1;
  int v27 = 0;
  v28[0] = 0;
  v28[1] = 0;
  unsigned int v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  llvm::jitlink::LinkGraph::blocks(a1, v39);
  v40[0] = v39[0];
  v40[1] = v39[1];
  void v40[2] = v39[2];
  v40[3] = v39[3];
  llvm::jitlink::LinkGraph::blocks(a1, &v32);
  v38[0] = v34;
  v38[1] = v35;
  void v38[2] = v36;
  _OWORD v38[3] = v37;
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v41, v40, (uint64_t *)v38);
  unint64_t v6 = v41;
  uint64_t v23 = v42;
  if (v41 != v42)
  {
    while (1)
    {
      unint64_t v7 = *(uint64_t **)(*(void *)v6 + 40);
      uint64_t v8 = *(uint64_t **)(*(void *)v6 + 48);
      while (v7 != v8)
      {
        int v9 = *((unsigned __int8 *)v7 + 24);
        if (v9 == 7)
        {
          uint64_t v12 = (long long *)*v7;
          v39[0] = *(_OWORD *)*v7;
          *(void *)&long long v32 = 0;
          int v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v28, (uint64_t)v39, &v32, v5);
          uint64_t v14 = v32;
          if (!v13) {
            uint64_t v14 = v28[0] + 24 * v29;
          }
          if (v14 == v28[0] + 24 * v29)
          {
            if (!v31) {
              llvm::jitlink::LinkGraph::createSection();
            }
            if (*((_DWORD *)v24 + 42) == 8) {
            else
            }
            *(void *)&v39[0] = v15;
            *((void *)&v39[0] + 1) = 16;
            *(void *)&long long v32 = 0;
            uint64_t v43 = 0;
            v44[0] = 4;
            int64x2_t v16 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)v24, v31, (uint64_t *)v39, (uint64_t *)&v32, v44, &v43);
            llvm::jitlink::Block::addEdge(v16, 6, 0, GOTEntry, 0);
            int64x2_t v20 = llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)v24, (uint64_t)v16, 0, 16, 1, 0);
            long long v32 = *v12;
            unint64_t v33 = v20;
            llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)v28, &v32, &v33, v21, (uint64_t)v39);
            uint64_t v14 = *(void *)&v39[0];
          }
          uint64_t v10 = *(void *)(v14 + 16);
          char v11 = 6;
        }
        else
        {
          if (v9 != 8) {
            goto LABEL_18;
          }
          char v11 = 9;
        }
        *((unsigned char *)v7 + 24) = v11;
        *unint64_t v7 = v10;
LABEL_18:
        v7 += 4;
      }
      v6 += 8;
      if (v6 == v23)
      {
        unint64_t v6 = v41;
        break;
      }
    }
  }
  *a2 = 0;
  if (v6)
  {
    int64x2_t v42 = v6;
    operator delete(v6);
  }
  MEMORY[0x263E500A0](v28[0], 8);
  return MEMORY[0x263E500A0](v25, 8);
}

void llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFLinkGraphBuilder_riscv(uint64_t a1)
{
  *(void *)a1 = &unk_270DBEEA0;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x263E500B0);
}

void llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,true>>::addRelocations(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = v5 + (v3 << 6);
    unint64_t v7 = "Refencing a section that wasn't added to the graph: ";
    while (*(_DWORD *)(v5 + 4) != 4)
    {
      *a2 = 0;
LABEL_35:
      v5 += 64;
      if (v5 == v6) {
        goto LABEL_36;
      }
    }
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(*(void **)(a1 + 24), *(_DWORD *)(v5 + 44), (uint64_t)&v24);
    if (v25)
    {
      uint64_t v14 = v24;
      *a2 = (unint64_t)v24;
      goto LABEL_34;
    }
    uint64_t v8 = *(void **)(a1 + 24);
    *(void *)&long long v19 = llvm::object::defaultWarningHandler;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(v8, v24, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v19, (uint64_t)&v22);
    if (v23)
    {
      unint64_t v15 = v22;
      *(void *)&long long v22 = 0;
      *a2 = v15;
    }
    else
    {
      if (*(unsigned char *)(a1 + 72)
        || (long long v19 = v22,
            std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90], (uint64_t)&v19) == (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90]))
      {
        if (!(*(unsigned int (**)(uint64_t, unsigned int *))(*(void *)a1 + 40))(a1, v24))
        {
          GraphBlocuint64_t k = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, *(_DWORD *)(v5 + 44));
          if (!GraphBlock)
          {
            __int16 v21 = 1283;
            *(void *)&long long v19 = v7;
            long long v20 = v22;
            getErrorErrorCat();
            operator new();
          }
          uint64_t v10 = (void *)GraphBlock;
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(*(void **)(a1 + 24), (void *)v5, (uint64_t)&v19);
          uint64_t v11 = v19;
          uint64_t v12 = v7;
          if (v20)
          {
            *(void *)&long long v19 = 0;
          }
          else
          {
            if (*((void *)&v19 + 1))
            {
              uint64_t v13 = 24 * *((void *)&v19 + 1);
              do
              {
                llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,true>>::addSingleRelocation(a1, v11, (uint64_t)v24, v10, a2);
                if (*a2) {
                  goto LABEL_23;
                }
                v11 += 24;
                v13 -= 24;
              }
              while (v13);
            }
            uint64_t v11 = 0;
          }
          *a2 = v11;
LABEL_23:
          if (v20)
          {
            uint64_t v16 = v19;
            *(void *)&long long v19 = 0;
            if (v16) {
              (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
            }
          }
          unint64_t v7 = v12;
          goto LABEL_27;
        }
      }
      *a2 = 0;
    }
LABEL_27:
    if (v23)
    {
      uint64_t v17 = v22;
      *(void *)&long long v22 = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
    if (v25)
    {
      long long v18 = v24;
      uint64_t v24 = 0;
      if (v18) {
        (*(void (**)(unsigned int *))(*(void *)v18 + 8))(v18);
      }
    }
    uint64_t v14 = (unsigned int *)*a2;
LABEL_34:
    if (v14) {
      return;
    }
    goto LABEL_35;
  }
LABEL_36:
  *a2 = 0;
}

void llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,true>>::addSingleRelocation(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 == 51)
  {
LABEL_2:
    *a5 = 0;
    return;
  }
  uint64_t v8 = *(void ****)(a2 + 16);
  long long v32 = v8;
  if (v7 == 43)
  {
    if (v8)
    {
      unint64_t v9 = ((unint64_t)v8 - 1) | (((unint64_t)v8 - 1) >> 1) | ((((unint64_t)v8 - 1) | (((unint64_t)v8 - 1) >> 1)) >> 2);
      unint64_t v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
      unint64_t v38 = (v10 | (v10 >> 16) | ((v10 | (v10 >> 16)) >> 32)) + 1;
      if (v38 >= 3)
      {
        *(void *)&long long v22 = "Unsupported relocation R_RISCV_ALIGN with alignment {0} larger than 2 (addend: {1})";
        *((void *)&v22 + 1) = 83;
        char v23 = &v29;
        uint64_t v24 = 2;
        char v25 = &unk_270DBE1A0;
        uint64_t v26 = &v38;
        int v27 = (void **)&unk_270DBF110;
        uint64_t v28 = &v32;
        unsigned int v29 = &v25;
        uint64_t v30 = &v27;
        llvm::make_error<llvm::jitlink::JITLinkError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned long long &>,llvm::detail::provider_format_adapter<long long &>>>>();
      }
    }
    goto LABEL_2;
  }
  int v37 = v7;
  int v11 = v7 - 1;
  if ((v7 - 1) >= 0x39 || ((0x1F818FF0FCF8003uLL >> v11) & 1) == 0)
  {
    *(void *)&long long v22 = "{0:d}: ";
    *((void *)&v22 + 1) = 7;
    char v23 = &v27;
    uint64_t v24 = 1;
    char v25 = &unk_270DBCE28;
    uint64_t v26 = (unint64_t *)&v37;
    int v27 = &v25;
    uint64_t v33 = (uint64_t)"Unsupported riscv relocation:";
    long long v35 = &v22;
    __int16 v36 = 1539;
    llvm::object::getELFRelocationTypeName((llvm::object *)0xF3, v7);
    operator new();
  }
  char v15 = byte_261E8D620[v11];
  unint64_t v16 = HIDWORD(v7);
  int v37 = HIDWORD(v7);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationSymbol(*(void **)(a1 + 24), a2, *(void **)(a1 + 48), (uint64_t)&v38);
  if (v39)
  {
    unint64_t v19 = v38;
    unint64_t v38 = 0;
    *a5 = v19;
  }
  else
  {
    uint64_t GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(a1, v16);
    if (!GraphSymbol)
    {
      int v20 = *(_DWORD *)(a1 + 112);
      *(void *)&long long v22 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {0}, shndx: {1} S"
                        "ize of table: {2}";
      *((void *)&v22 + 1) = 113;
      char v23 = (void ***)v31;
      uint64_t v24 = 3;
      char v25 = &unk_270DBEB80;
      uint64_t v26 = (unint64_t *)&v37;
      int v27 = (void **)&unk_270DBED90;
      uint64_t v28 = (void ****)(v38 + 6);
      unsigned int v29 = (void **)&unk_270DBE8C8;
      LODWORD(v30) = v20;
      v31[0] = &v25;
      v31[1] = &v27;
      void v31[2] = &v29;
      getErrorErrorCat();
      uint64_t v33 = 3;
      long long v34 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>();
    }
    int v18 = *(_DWORD *)a2 + *(_DWORD *)(a3 + 16) - *(_DWORD *)a4;
    *(void *)&long long v22 = GraphSymbol;
    DWORD2(v22) = v18;
    char v23 = v8;
    LOBYTE(v24) = v15;
    llvm::jitlink::Block::addEdge(a4, &v22);
    *a5 = 0;
  }
  if (v39)
  {
    unint64_t v21 = v38;
    unint64_t v38 = 0;
    if (v21) {
      (*(void (**)(unint64_t))(*(void *)v21 + 8))(v21);
    }
  }
}

void llvm::make_error<llvm::jitlink::JITLinkError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned long long &>,llvm::detail::provider_format_adapter<long long &>>>>()
{
}

void llvm::detail::provider_format_adapter<long long &>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<long long &>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<long long,void>::format(*(unint64_t **)(a1 + 8), a2, a3, a4);
}

void llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFLinkGraphBuilder_riscv(uint64_t a1)
{
  *(void *)a1 = &unk_270DBECD0;
  MEMORY[0x263E500A0](*(void *)(a1 + 128), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 104), 8);
  MEMORY[0x263E500A0](*(void *)(a1 + 80), 8);
  *(void *)a1 = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x263E500B0);
}

void llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,false>>::addRelocations(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = *(unsigned int **)(a1 + 32);
    uint64_t v6 = &v5[10 * v3];
    unint64_t v7 = "Refencing a section that wasn't added to the graph: ";
    while (v5[1] != 4)
    {
      *a2 = 0;
LABEL_35:
      v5 += 10;
      if (v5 == v6) {
        goto LABEL_36;
      }
    }
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(*(void **)(a1 + 24), v5[7], (uint64_t)&v24);
    if (v25)
    {
      uint64_t v14 = v24;
      *a2 = (unint64_t)v24;
      goto LABEL_34;
    }
    uint64_t v8 = *(void **)(a1 + 24);
    *(void *)&long long v19 = llvm::object::defaultWarningHandler;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(v8, v24, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v19, (uint64_t)&v22);
    if (v23)
    {
      unint64_t v15 = v22;
      *(void *)&long long v22 = 0;
      *a2 = v15;
    }
    else
    {
      if (*(unsigned char *)(a1 + 72)
        || (long long v19 = v22,
            std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90], (uint64_t)&v19) == (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90]))
      {
        if (!(*(unsigned int (**)(uint64_t, unsigned int *))(*(void *)a1 + 40))(a1, v24))
        {
          GraphBlocuint64_t k = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, v5[7]);
          if (!GraphBlock)
          {
            __int16 v21 = 1283;
            *(void *)&long long v19 = v7;
            long long v20 = v22;
            getErrorErrorCat();
            operator new();
          }
          unint64_t v10 = (void *)GraphBlock;
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>(*(void **)(a1 + 24), v5, (uint64_t)&v19);
          int v11 = (_DWORD *)v19;
          uint64_t v12 = v7;
          if (v20)
          {
            *(void *)&long long v19 = 0;
          }
          else
          {
            if (*((void *)&v19 + 1))
            {
              uint64_t v13 = 12 * *((void *)&v19 + 1);
              do
              {
                llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,false>>::addSingleRelocation(a1, v11, (uint64_t)v24, v10, a2);
                if (*a2) {
                  goto LABEL_23;
                }
                v11 += 3;
                v13 -= 12;
              }
              while (v13);
            }
            int v11 = 0;
          }
          *a2 = (unint64_t)v11;
LABEL_23:
          if (v20)
          {
            uint64_t v16 = v19;
            *(void *)&long long v19 = 0;
            if (v16) {
              (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
            }
          }
          unint64_t v7 = v12;
          goto LABEL_27;
        }
      }
      *a2 = 0;
    }
LABEL_27:
    if (v23)
    {
      uint64_t v17 = v22;
      *(void *)&long long v22 = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
    if (v25)
    {
      int v18 = v24;
      uint64_t v24 = 0;
      if (v18) {
        (*(void (**)(unsigned int *))(*(void *)v18 + 8))(v18);
      }
    }
    uint64_t v14 = (unsigned int *)*a2;
LABEL_34:
    if (v14) {
      return;
    }
    goto LABEL_35;
  }
LABEL_36:
  *a2 = 0;
}

void llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,false>>::addSingleRelocation(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  unsigned int v7 = a2[1];
  if (v7 == 51)
  {
LABEL_2:
    *a5 = 0;
    return;
  }
  uint64_t v8 = (void ***)(int)a2[2];
  long long v32 = v8;
  if (v7 == 43)
  {
    if (v8)
    {
      unint64_t v9 = ((unint64_t)v8 - 1) | (((unint64_t)v8 - 1) >> 1) | ((((unint64_t)v8 - 1) | (((unint64_t)v8 - 1) >> 1)) >> 2);
      unint64_t v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
      unint64_t v38 = (v10 | (v10 >> 16) | ((v10 | (v10 >> 16)) >> 32)) + 1;
      if (v38 >= 3)
      {
        *(void *)&long long v22 = "Unsupported relocation R_RISCV_ALIGN with alignment {0} larger than 2 (addend: {1})";
        *((void *)&v22 + 1) = 83;
        char v23 = &v29;
        uint64_t v24 = 2;
        char v25 = &unk_270DBE1A0;
        uint64_t v26 = &v38;
        int v27 = (void **)&unk_270DBF110;
        uint64_t v28 = &v32;
        unsigned int v29 = &v25;
        uint64_t v30 = &v27;
        llvm::make_error<llvm::jitlink::JITLinkError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned long long &>,llvm::detail::provider_format_adapter<long long &>>>>();
      }
    }
    goto LABEL_2;
  }
  unsigned int v37 = v7;
  char v11 = v7 - 1;
  if ((v7 - 1) >= 0x39u || ((0x1F818FF0FCF8003uLL >> v11) & 1) == 0)
  {
    *(void *)&long long v22 = "{0:d}: ";
    *((void *)&v22 + 1) = 7;
    char v23 = &v27;
    uint64_t v24 = 1;
    char v25 = &unk_270DBCE28;
    uint64_t v26 = (unint64_t *)&v37;
    int v27 = &v25;
    uint64_t v33 = (uint64_t)"Unsupported riscv relocation:";
    long long v35 = &v22;
    __int16 v36 = 1539;
    llvm::object::getELFRelocationTypeName((llvm::object *)0xF3, v7);
    operator new();
  }
  char v15 = byte_261E8D620[v11];
  unsigned int v16 = v7 >> 8;
  unsigned int v37 = v7 >> 8;
  if (v7 <= 0xFF)
  {
    LOBYTE(v39) = 0;
    unint64_t v38 = 0;
LABEL_14:
    uint64_t GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(a1, v16);
    if (!GraphSymbol)
    {
      int v19 = *(_DWORD *)(a1 + 112);
      *(void *)&long long v22 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {0}, shndx: {1} S"
                        "ize of table: {2}";
      *((void *)&v22 + 1) = 113;
      char v23 = (void ***)v31;
      uint64_t v24 = 3;
      char v25 = &unk_270DBEB80;
      uint64_t v26 = (unint64_t *)&v37;
      int v27 = (void **)&unk_270DBED90;
      uint64_t v28 = (void ****)(v38 + 14);
      unsigned int v29 = (void **)&unk_270DBE8C8;
      LODWORD(v30) = v19;
      v31[0] = &v25;
      v31[1] = &v27;
      void v31[2] = &v29;
      getErrorErrorCat();
      uint64_t v33 = 3;
      long long v34 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>();
    }
    int v18 = *a2 + *(_DWORD *)(a3 + 12) - *(_DWORD *)a4;
    *(void *)&long long v22 = GraphSymbol;
    DWORD2(v22) = v18;
    char v23 = v8;
    LOBYTE(v24) = v15;
    llvm::jitlink::Block::addEdge(a4, &v22);
    *a5 = 0;
    goto LABEL_18;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(*(void **)(a1 + 24), *(unsigned int **)(a1 + 48), v16, (uint64_t)&v38);
  if ((v39 & 1) == 0) {
    goto LABEL_14;
  }
  unint64_t v20 = v38;
  unint64_t v38 = 0;
  *a5 = v20;
LABEL_18:
  if (v39)
  {
    unint64_t v21 = v38;
    unint64_t v38 = 0;
    if (v21) {
      (*(void (**)(unint64_t))(*(void *)v21 + 8))(v21);
    }
  }
}

uint64_t llvm::jitlink::PerGraphGOTAndPLTStubsBuilder<anonymous namespace'::PerGraphGOTAndPLTStubsBuilder_ELF_riscv>::getGOTEntry(uint64_t a1, _OWORD *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6 = a1 + 8;
  *(_OWORD *)unint64_t v20 = *a2;
  *(void *)&long long v18 = 0;
  int v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 8), (uint64_t)v20, &v18, a4);
  uint64_t v8 = v18;
  if (!v7) {
    uint64_t v8 = *(void *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 24);
  }
  if (v8 == *(void *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 24))
  {
    uint64_t v9 = *(void *)a1;
    uint64_t v10 = *(void *)(a1 + 56);
    if (!v10) {
      llvm::jitlink::LinkGraph::createSection();
    }
    unint64_t v11 = *(unsigned int *)(*(void *)a1 + 168);
    v20[1] = v11;
    *(void *)&long long v18 = 0;
    unint64_t v22 = v11;
    uint64_t v21 = 0;
    uint64_t v12 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v9, v10, v20, (uint64_t *)&v18, &v22, &v21);
    uint64_t v13 = (uint64_t)v12;
    if (*(_DWORD *)(*(void *)a1 + 168) == 8) {
      char v14 = 3;
    }
    else {
      char v14 = 2;
    }
    llvm::jitlink::Block::addEdge(v12, v14, 0, (uint64_t)a2, 0);
    char v15 = llvm::jitlink::LinkGraph::addAnonymousSymbol(*(void *)a1, v13, 0, *(unsigned int *)(*(void *)a1 + 168), 0, 0);
    long long v18 = *a2;
    int v19 = v15;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>(v6, &v18, &v19, v16, (uint64_t)v20);
    uint64_t v8 = v20[0];
  }
  return *(void *)(v8 + 16);
}

void llvm::jitlink::ELFJITLinker_riscv::~ELFJITLinker_riscv(llvm::jitlink::ELFJITLinker_riscv *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x263E500B0);
}

void llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_riscv>::fixUpBlocks(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 192))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 200);
    if (v3)
    {
      uint64_t v4 = 24 * v3;
      uint64_t v5 = *(void **)(a1 + 184);
      while (*v5 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v5 += 3;
        v4 -= 24;
        if (!v4) {
          goto LABEL_89;
        }
      }
    }
    else
    {
      uint64_t v5 = *(void **)(a1 + 184);
    }
    uint64_t v6 = *(void *)(a1 + 184) + 24 * v3;
    if (v5 != (void *)v6)
    {
      long long v47 = (void *)v6;
      do
      {
        uint64_t v7 = v5[2];
        int v8 = *(_DWORD *)(v7 + 20);
        uint64_t v9 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v7 + 32);
        uint64_t v11 = *(void *)(v7 + 32) + 8 * *(unsigned int *)(v7 + 48);
        if ((uint64_t **)v11 != v9)
        {
          uint64_t v12 = v9;
          uint64_t v13 = v10;
          do
          {
            char v14 = *v12;
            if (v8 == 2 && (v14[1] & 4) == 0)
            {
              unsigned int v16 = (const void *)v14[3];
              size_t v15 = v14[4];
              uint64_t v17 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, v15, 0);
              uint64_t v18 = (uint64_t)v17;
              if (v15) {
                memmove(v17, v16, v15);
              }
              _OWORD v14[3] = v18;
              void v14[4] = v15;
              v14[1] |= 4uLL;
            }
            int v19 = (unsigned int *)v14[5];
            unint64_t v20 = (unsigned int *)v14[6];
            while (v19 != v20)
            {
              if (*((unsigned __int8 *)v19 + 24) >= 2u)
              {
                uint64_t v21 = v19[2];
                unint64_t v22 = (_DWORD *)(v14[3] + v21);
                unint64_t v23 = *v14 + v21;
                switch(*((unsigned char *)v19 + 24))
                {
                  case 2:
                  case 0x1D:
                    int v24 = **(_DWORD **)(*(void *)v19 + 16);
                    int v25 = *(_DWORD *)(*(void *)v19 + 24);
                    goto LABEL_47;
                  case 3:
                    uint64_t v26 = **(void **)(*(void *)v19 + 16);
                    uint64_t v27 = *(void *)(*(void *)v19 + 24) & 0x1FFFFFFFFFFFFFFLL;
                    goto LABEL_49;
                  case 4:
                    int64_t v28 = **(void **)(*(void *)v19 + 16)
                        - v23
                        + (*(void *)(*(void *)v19 + 24) & 0x1FFFFFFFFFFFFFFLL)
                        + *((void *)v19 + 2);
                    if ((unint64_t)((v28 >> 1) + 2048) >= 0x1000) {
                      goto LABEL_77;
                    }
                    if (((**(_DWORD **)(*(void *)v19 + 16)
                         - v23
                         + *(_DWORD *)(*(void *)v19 + 24)
                         + v19[4]) & 1) != 0)
                      goto LABEL_78;
                    unsigned int v29 = (v28 << 19) & 0x80000000 | (((v28 >> 5) & 0x3F) << 25) | (((v28 >> 1) & 0xF) << 8);
                    unsigned int v30 = ((**(_DWORD **)(*(void *)v19 + 16)
                          - v23
                          + *(_DWORD *)(*(void *)v19 + 24)
                          + v19[4]) >> 4) & 0x80 | *v22 & 0x1FFF07F;
                    goto LABEL_43;
                  case 5:
                    int64_t v28 = **(void **)(*(void *)v19 + 16)
                        - v23
                        + (*(void *)(*(void *)v19 + 24) & 0x1FFFFFFFFFFFFFFLL)
                        + *((void *)v19 + 2);
                    if ((unint64_t)((v28 >> 1) + 0x80000) >= 0x100000) {
                      goto LABEL_77;
                    }
                    if (((**(_DWORD **)(*(void *)v19 + 16)
                         - v23
                         + *(_DWORD *)(*(void *)v19 + 24)
                         + v19[4]) & 1) != 0)
                      goto LABEL_78;
                    *unint64_t v22 = v28 & 0xFF000 | ((v28 >> 20) << 31) | (((v28 >> 1) & 0x3FF) << 21) | (((v28 >> 11) & 1) << 20) | *v22 & 0xFFF;
                    goto LABEL_73;
                  case 6:
                    if ((**(void **)(*(void *)v19 + 16)
                        - v23
                        + (*(void *)(*(void *)v19 + 24) & 0x1FFFFFFFFFFFFFFLL)
                        + *((void *)v19 + 2)
                        + 2147485696u) >> 32)
                      goto LABEL_77;
                    int v31 = v22[1] | ((**(_DWORD **)(*(void *)v19 + 16)
                                   - v23
                                   + *(_DWORD *)(*(void *)v19 + 24)
                                   + v19[4]) << 20);
                    *v22 |= (**(_DWORD **)(*(void *)v19 + 16)
                           - v23
                           + *(_DWORD *)(*(void *)v19 + 24)
                           + v19[4]
                           + 2048) & 0xFFFFF000;
                    v22[1] = v31;
                    goto LABEL_73;
                  case 9:
                    uint64_t v32 = **(void **)(*(void *)v19 + 16)
                        - v23
                        + (*(void *)(*(void *)v19 + 24) & 0x1FFFFFFFFFFFFFFLL)
                        + *((void *)v19 + 2);
                    goto LABEL_37;
                  case 0xA:
                    llvm::jitlink::getRISCVPCRelHi20((uint64_t)&v49, *(void *)(*(void *)(*(void *)v19 + 16) + 40), *(void *)(*(void *)(*(void *)v19 + 16) + 48), *(void *)(*(void *)v19 + 24));
                    if (v50) {
                      goto LABEL_75;
                    }
                    int v33 = *(_DWORD *)(*(void *)v49 + 24)
                        + v49[4]
                        + **(_DWORD **)(*(void *)v49 + 16)
                        - (**(_DWORD **)(*(void *)v19 + 16)
                         + *(_DWORD *)(*(void *)v19 + 24));
                    goto LABEL_40;
                  case 0xB:
                    llvm::jitlink::getRISCVPCRelHi20((uint64_t)&v49, *(void *)(*(void *)(*(void *)v19 + 16) + 40), *(void *)(*(void *)(*(void *)v19 + 16) + 48), *(void *)(*(void *)v19 + 24));
                    if (v50)
                    {
LABEL_75:
                      __int16 v46 = v49;
                      *a2 = v49;
                      if (v46) {
                        return;
                      }
                    }
                    else
                    {
                      unsigned int v34 = *(_DWORD *)(*(void *)v49 + 24)
                          + v49[4]
                          + **(_DWORD **)(*(void *)v49 + 16)
                          - (**(_DWORD **)(*(void *)v19 + 16)
                           + *(_DWORD *)(*(void *)v19 + 24));
LABEL_42:
                      unsigned int v37 = v34 >> 5;
                      unsigned int v30 = (v34 & 0x1F) << 7;
                      unsigned int v29 = *v22 & 0x1FFF07F | (v37 << 25);
LABEL_43:
                      int v35 = v29 | v30;
LABEL_72:
                      *unint64_t v22 = v35;
LABEL_73:
                      *a2 = 0;
                    }
                    break;
                  case 0xC:
                    uint64_t v32 = (*(void *)(*(void *)v19 + 24) & 0x1FFFFFFFFFFFFFFLL)
                        + *((void *)v19 + 2)
                        + **(void **)(*(void *)v19 + 16);
LABEL_37:
                    if ((unint64_t)(v32 + 2147485696) >> 32) {
                      goto LABEL_77;
                    }
                    int v35 = (v32 + 2048) & 0xFFFFF000 | *v22 & 0xFFF;
                    goto LABEL_72;
                  case 0xD:
                    int v33 = *(_DWORD *)(*(void *)v19 + 24) + v19[4] + **(_DWORD **)(*(void *)v19 + 16);
LABEL_40:
                    unsigned int v36 = *v22 & 0xFFFFF | ((unsigned __int16)v33 << 20);
                    goto LABEL_66;
                  case 0xE:
                    unsigned int v34 = *(_DWORD *)(*(void *)v19 + 24) + v19[4] + **(_DWORD **)(*(void *)v19 + 16);
                    goto LABEL_42;
                  case 0xF:
                    int v38 = **(_DWORD **)(*(void *)v19 + 16);
                    int v39 = *(_DWORD *)(*(void *)v19 + 24) + *(unsigned __int8 *)v22;
                    goto LABEL_68;
                  case 0x10:
                    int v40 = **(_DWORD **)(*(void *)v19 + 16);
                    int v41 = *(_DWORD *)(*(void *)v19 + 24) + *(unsigned __int16 *)v22;
                    goto LABEL_70;
                  case 0x11:
                    int v24 = **(_DWORD **)(*(void *)v19 + 16);
                    int v25 = *(_DWORD *)(*(void *)v19 + 24) + *v22;
LABEL_47:
                    int v35 = v25 + v19[4] + v24;
                    goto LABEL_72;
                  case 0x12:
                    uint64_t v26 = **(void **)(*(void *)v19 + 16);
                    uint64_t v27 = (*(void *)(*(void *)v19 + 24) & 0x1FFFFFFFFFFFFFFLL) + *(void *)v22;
LABEL_49:
                    uint64_t v42 = v27 + *((void *)v19 + 2) + v26;
                    goto LABEL_54;
                  case 0x13:
                    int v43 = *(unsigned __int8 *)v22
                        - (*(_DWORD *)(*(void *)v19 + 24)
                         + v19[4])
                        - **(_DWORD **)(*(void *)v19 + 16);
                    goto LABEL_64;
                  case 0x14:
                    unsigned int v44 = *(unsigned __int16 *)v22
                        - (*(_DWORD *)(*(void *)v19 + 24)
                         + v19[4])
                        - **(_DWORD **)(*(void *)v19 + 16);
                    goto LABEL_62;
                  case 0x15:
                    int v35 = *v22 - (*(_DWORD *)(*(void *)v19 + 24) + v19[4]) - **(_DWORD **)(*(void *)v19 + 16);
                    goto LABEL_72;
                  case 0x16:
                    uint64_t v42 = *(void *)v22
                        - ((*(void *)(*(void *)v19 + 24) & 0x1FFFFFFFFFFFFFFLL)
                         + *((void *)v19 + 2))
                        - **(void **)(*(void *)v19 + 16);
LABEL_54:
                    *(void *)unint64_t v22 = v42;
                    goto LABEL_73;
                  case 0x17:
                    int64_t v28 = **(void **)(*(void *)v19 + 16)
                        - v23
                        + (*(void *)(*(void *)v19 + 24) & 0x1FFFFFFFFFFFFFFLL)
                        + *((void *)v19 + 2);
                    if (v28 >> 1 != (char)(v28 >> 1)) {
                      goto LABEL_77;
                    }
                    if (((**(_DWORD **)(*(void *)v19 + 16)
                         - v23
                         + *(_DWORD *)(*(void *)v19 + 24)
                         + v19[4]) & 1) != 0)
                      goto LABEL_78;
                    int v45 = (16 * v28) & 0x1000 | (((v28 >> 3) & 3) << 10) | (v28 >> 1) & 0x60 | (8 * ((v28 >> 1) & 3));
                    unsigned int v44 = *(_WORD *)v22 & 0xE383 | ((**(_DWORD **)(*(void *)v19 + 16)
                                                   - v23
                                                   + *(_DWORD *)(*(void *)v19 + 24)
                                                   + v19[4]) >> 3) & 4;
                    goto LABEL_61;
                  case 0x18:
                    int64_t v28 = **(void **)(*(void *)v19 + 16)
                        - v23
                        + (*(void *)(*(void *)v19 + 24) & 0x1FFFFFFFFFFFFFFLL)
                        + *((void *)v19 + 2);
                    if ((unint64_t)((v28 >> 1) + 1024) >= 0x800) {
LABEL_77:
                    }
                      llvm::jitlink::makeTargetOutOfRangeError(a1, v14, (uint64_t)v19);
                    if (((**(_DWORD **)(*(void *)v19 + 16)
                         - v23
                         + *(_DWORD *)(*(void *)v19 + 24)
                         + v19[4]) & 1) != 0)
LABEL_78:
                      llvm::jitlink::makeAlignmentError(v23, v28, 2u, (uint64_t)v19);
                    int v45 = (2 * v28) & 0x1600 | (((v28 >> 4) & 1) << 11) | (v28 >> 2) & 0x100 | (((v28 >> 6) & 1) << 7) | (v28 >> 1) & 0x40 | (8 * ((v28 >> 1) & 7));
                    unsigned int v44 = *(_WORD *)v22 & 0xE003 | ((**(_DWORD **)(*(void *)v19 + 16)
                                                   - v23
                                                   + *(_DWORD *)(*(void *)v19 + 24)
                                                   + v19[4]) >> 3) & 4;
LABEL_61:
                    LOWORD(v44) = v44 | v45;
LABEL_62:
                    *(_WORD *)unint64_t v22 = v44;
                    goto LABEL_73;
                  case 0x19:
                    int v43 = *(unsigned char *)v22 & 0xC0 | (*(unsigned __int8 *)v22
                                                + v19[4]
                                                - *(_DWORD *)(*(void *)v19 + 24)
                                                - **(_DWORD **)(*(void *)v19 + 16)) & 0x3F;
LABEL_64:
                    *(unsigned char *)unint64_t v22 = v43;
                    goto LABEL_73;
                  case 0x1A:
                    unsigned int v36 = *v22 & 0xFFFFFFC0 | (*(_DWORD *)(*(void *)v19 + 24)
                                             + v19[4]
                                             + **(_DWORD **)(*(void *)v19 + 16)) & 0x3F;
LABEL_66:
                    *unint64_t v22 = v36;
                    goto LABEL_73;
                  case 0x1B:
                    int v38 = **(_DWORD **)(*(void *)v19 + 16);
                    int v39 = *(_DWORD *)(*(void *)v19 + 24);
LABEL_68:
                    *(unsigned char *)unint64_t v22 = v39 + *((unsigned char *)v19 + 16) + v38;
                    goto LABEL_73;
                  case 0x1C:
                    int v40 = **(_DWORD **)(*(void *)v19 + 16);
                    int v41 = *(_DWORD *)(*(void *)v19 + 24);
LABEL_70:
                    *(_WORD *)unint64_t v22 = v41 + *((_WORD *)v19 + 8) + v40;
                    goto LABEL_73;
                  case 0x1E:
                    int v35 = **(_DWORD **)(*(void *)v19 + 16) - v23 + *(_DWORD *)(*(void *)v19 + 24) + v19[4];
                    goto LABEL_72;
                  default:
                    goto LABEL_73;
                }
              }
              v19 += 8;
            }
            while (++v12 != v13)
            {
              if (((unint64_t)*v12 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                goto LABEL_83;
              }
            }
            uint64_t v12 = v13;
LABEL_83:
            ;
          }
          while (v12 != (uint64_t **)v11);
        }
        for (v5 += 3; ; v5 += 3)
        {
          if (v5 == v47) {
            goto LABEL_89;
          }
          if (*v5 < 0xFFFFFFFFFFFFFFFELL) {
            break;
          }
        }
      }
      while (v5 != v47);
    }
  }
LABEL_89:
  *a2 = 0;
}

void llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_riscv>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::jitlink::getRISCVPCRelHi20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == a2) {
LABEL_24:
  }
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
  unint64_t v4 = a4 & 0x1FFFFFFFFFFFFFFLL;
  unint64_t v5 = (a3 - a2) >> 5;
  while (1)
  {
    unint64_t v6 = v5 >> 1;
    uint64_t v7 = a2 + 32 * (v5 >> 1);
    unint64_t v8 = *(unsigned int *)(v7 + 8);
    if (v4 <= v8) {
      break;
    }
    a2 = v7 + 32;
    unint64_t v6 = v5 + ~v6;
LABEL_7:
    unint64_t v5 = v6;
    if (!v6) {
      goto LABEL_24;
    }
  }
  if (v4 < v8)
  {
    a3 = a2 + 32 * (v5 >> 1);
    goto LABEL_7;
  }
  if (v5 >= 2)
  {
    do
    {
      unint64_t v9 = v6 >> 1;
      uint64_t v10 = a2 + 32 * (v6 >> 1);
      unint64_t v11 = *(unsigned int *)(v10 + 8);
      uint64_t v12 = v10 + 32;
      v6 += ~(v6 >> 1);
      if (v4 > v11) {
        a2 = v12;
      }
      else {
        unint64_t v6 = v9;
      }
    }
    while (v6);
  }
  uint64_t v13 = v7 + 32;
  if (a3 != v7 + 32)
  {
    unint64_t v14 = (a3 - (v7 + 32)) >> 5;
    a3 = v13;
    do
    {
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = a3 + 32 * (v14 >> 1);
      unint64_t v17 = *(unsigned int *)(v16 + 8);
      uint64_t v18 = v16 + 32;
      v14 += ~(v14 >> 1);
      if (v4 < v17) {
        unint64_t v14 = v15;
      }
      else {
        a3 = v18;
      }
    }
    while (v14);
  }
  while (1)
  {
    if (a2 == a3) {
      goto LABEL_24;
    }
    if (*(unsigned char *)(a2 + 24) == 9) {
      break;
    }
    a2 += 32;
  }
  *(unsigned char *)(result + 8) &= ~1u;
  *(void *)size_t result = a2;
  return result;
}

uint64_t *llvm::jitlink::createLinkGraphFromELFObject_x86_64@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  long long v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  llvm::object::ObjectFile::createELFObjectFile(v7, 1, (uint64_t)&v8);
  uint64_t v4 = v8;
  if ((v9 & 1) == 0) {
    llvm::jitlink::ELFLinkGraphBuilder_x86_64::ELFLinkGraphBuilder_x86_64((int)&v6, *(void **)(v8 + 32), *(void *)(v8 + 40), v8 + 56);
  }
  uint64_t v8 = 0;
  *(unsigned char *)(a2 + 8) |= 1u;
  *(void *)a2 = v4;
  return llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected(&v8);
}

void llvm::jitlink::ELFLinkGraphBuilder_x86_64::~ELFLinkGraphBuilder_x86_64(llvm::jitlink::ELFLinkGraphBuilder_x86_64 *this)
{
  *(void *)this = &unk_270DBEEA0;
  MEMORY[0x263E500A0](*((void *)this + 16), 8);
  MEMORY[0x263E500A0](*((void *)this + 13), 8);
  MEMORY[0x263E500A0](*((void *)this + 10), 8);
  *(void *)this = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)this + 1, 0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_270DBEEA0;
  MEMORY[0x263E500A0](*((void *)this + 16), 8);
  MEMORY[0x263E500A0](*((void *)this + 13), 8);
  MEMORY[0x263E500A0](*((void *)this + 10), 8);
  *(void *)this = &unk_270DBECB0;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)this + 1, 0);
  JUMPOUT(0x263E500B0);
}

void llvm::jitlink::link_ELF_x86_64(void *a1, void *a2)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v91 = 0;
  long long v90 = 0u;
  int64x2_t v88 = 0u;
  memset(v89, 0, sizeof(v89));
  memset(v87, 0, sizeof(v87));
  int64x2_t v86 = 0u;
  if ((*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, *a1 + 120))
  {
    unint64_t v96 = ".eh_frame";
    *(void *)&long long v97 = 9;
    unsigned int v98 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::DWARFRecordSectionSplitter,llvm::jitlink::DWARFRecordSectionSplitter,void>::Callbacks
                                    + 2);
    unint64_t v95 = (char *)v87;
    uint64_t v92 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v87, 1uLL);
    v93.i64[0] = (uint64_t)v92;
    uint64_t v94 = &v92[4 * v3];
    uint64_t v4 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v92, (long long *)&v96)+ 32;
    v93.i64[1] = v4;
    unint64_t v5 = (long long *)v86.i64[1];
    uint64_t v6 = v93.i64[0];
    if (v86.i64[1] == v86.i64[0])
    {
      int64x2_t v7 = vdupq_n_s64(v86.u64[1]);
    }
    else
    {
      do
      {
        v5 -= 2;
        uint64_t v6 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v6 - 32, v5);
      }
      while (v5 != (long long *)v86.i64[0]);
      int64x2_t v7 = v86;
      uint64_t v4 = v93.i64[1];
    }
    v86.i64[0] = v6;
    int64x2_t v93 = v7;
    uint64_t v8 = *(void ***)&v87[0];
    *(void *)&v87[0] = v94;
    uint64_t v94 = v8;
    uint64_t v92 = (void **)v7.i64[0];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v92);
    v86.i64[1] = v4;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v96);
    unsigned int v98 = 0;
    char v9 = operator new(0x20uLL, (std::align_val_t)8uLL);
    long long v97 = xmmword_261E8A760;
    *char v9 = ".eh_frame";
    v9[1] = 9;
    *((_DWORD *)v9 + 4) = 8;
    *((_DWORD *)v9 + 5) = 101122563;
    *((unsigned char *)v9 + 24) = 9;
    unint64_t v96 = (const char *)v9;
    unsigned int v98 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameEdgeFixer,llvm::jitlink::EHFrameEdgeFixer,void>::Callbacks;
    if (v86.i64[1] >= *(void *)&v87[0])
    {
      uint64_t v11 = (v86.i64[1] - v86.i64[0]) >> 5;
      if ((unint64_t)(v11 + 1) >> 59) {
        goto LABEL_129;
      }
      unint64_t v12 = (*(void *)&v87[0] - v86.i64[0]) >> 4;
      if (v12 <= v11 + 1) {
        unint64_t v12 = v11 + 1;
      }
      if (*(void *)&v87[0] - v86.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v95 = (char *)v87;
      if (v13) {
        unint64_t v14 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v87, v13);
      }
      else {
        unint64_t v14 = 0;
      }
      uint64_t v15 = (uint64_t)&v14[4 * v11];
      uint64_t v92 = v14;
      v93.i64[0] = v15;
      uint64_t v94 = &v14[4 * v13];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v15, (long long *)&v96);
      unint64_t v10 = v15 + 32;
      v93.i64[1] = v15 + 32;
      uint64_t v16 = (long long *)v86.i64[1];
      uint64_t v17 = v93.i64[0];
      if (v86.i64[1] == v86.i64[0])
      {
        int64x2_t v18 = vdupq_n_s64(v86.u64[1]);
      }
      else
      {
        do
        {
          v16 -= 2;
          uint64_t v17 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v17 - 32, v16);
        }
        while (v16 != (long long *)v86.i64[0]);
        int64x2_t v18 = v86;
        unint64_t v10 = v93.u64[1];
      }
      v86.i64[0] = v17;
      v86.i64[1] = v10;
      int64x2_t v93 = v18;
      int v19 = *(void ***)&v87[0];
      *(void *)&v87[0] = v94;
      uint64_t v94 = v19;
      uint64_t v92 = (void **)v18.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v92);
    }
    else
    {
      unint64_t v10 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v86.i64[1], (long long *)&v96)+ 32;
    }
    v86.i64[1] = v10;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v96);
    unint64_t v96 = ".eh_frame";
    *(void *)&long long v97 = 9;
    unsigned int v98 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameNullTerminator,llvm::jitlink::EHFrameNullTerminator,void>::Callbacks
                                    + 2);
    if (v10 >= *(void *)&v87[0])
    {
      uint64_t v21 = (v86.i64[1] - v86.i64[0]) >> 5;
      if ((unint64_t)(v21 + 1) >> 59) {
        goto LABEL_129;
      }
      unint64_t v22 = (*(void *)&v87[0] - v86.i64[0]) >> 4;
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      if (*(void *)&v87[0] - v86.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      unint64_t v95 = (char *)v87;
      if (v23) {
        int v24 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v87, v23);
      }
      else {
        int v24 = 0;
      }
      uint64_t v25 = (uint64_t)&v24[4 * v21];
      uint64_t v92 = v24;
      v93.i64[0] = v25;
      uint64_t v94 = &v24[4 * v23];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v25, (long long *)&v96);
      uint64_t v20 = v25 + 32;
      v93.i64[1] = v25 + 32;
      uint64_t v26 = (long long *)v86.i64[1];
      uint64_t v27 = v93.i64[0];
      if (v86.i64[1] == v86.i64[0])
      {
        int64x2_t v28 = vdupq_n_s64(v86.u64[1]);
      }
      else
      {
        do
        {
          v26 -= 2;
          uint64_t v27 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v27 - 32, v26);
        }
        while (v26 != (long long *)v86.i64[0]);
        int64x2_t v28 = v86;
        uint64_t v20 = v93.i64[1];
      }
      v86.i64[0] = v27;
      v86.i64[1] = v20;
      int64x2_t v93 = v28;
      unsigned int v29 = *(void ***)&v87[0];
      *(void *)&v87[0] = v94;
      uint64_t v94 = v29;
      uint64_t v92 = (void **)v28.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v92);
    }
    else
    {
      uint64_t v20 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v10, (long long *)&v96)+ 32;
    }
    v86.i64[1] = v20;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v96);
    (*(void (**)(const char **__return_ptr))(*(void *)*a2 + 64))(&v96);
    if ((unint64_t)v98 < 8)
    {
      *(void *)&long long v99 = llvm::jitlink::markAllSymbolsLive;
      unsigned int v100 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
           + 2;
      if (v86.i64[1] >= *(void *)&v87[0])
      {
        uint64_t v36 = (v86.i64[1] - v86.i64[0]) >> 5;
        if ((unint64_t)(v36 + 1) >> 59) {
          goto LABEL_129;
        }
        unint64_t v37 = (*(void *)&v87[0] - v86.i64[0]) >> 4;
        if (v37 <= v36 + 1) {
          unint64_t v37 = v36 + 1;
        }
        if (*(void *)&v87[0] - v86.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v38 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v37;
        }
        unint64_t v95 = (char *)v87;
        if (v38) {
          int v39 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v87, v38);
        }
        else {
          int v39 = 0;
        }
        uint64_t v44 = (uint64_t)&v39[4 * v36];
        uint64_t v92 = v39;
        v93.i64[0] = v44;
        uint64_t v94 = &v39[4 * v38];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v44, &v99);
        uint64_t v31 = v44 + 32;
        v93.i64[1] = v44 + 32;
        int v45 = (long long *)v86.i64[1];
        uint64_t v46 = v93.i64[0];
        if (v86.i64[1] == v86.i64[0])
        {
          int64x2_t v47 = vdupq_n_s64(v86.u64[1]);
        }
        else
        {
          do
          {
            v45 -= 2;
            uint64_t v46 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v46 - 32, v45);
          }
          while (v45 != (long long *)v86.i64[0]);
          int64x2_t v47 = v86;
          uint64_t v31 = v93.i64[1];
        }
        v86.i64[0] = v46;
        v86.i64[1] = v31;
        int64x2_t v93 = v47;
        uint64_t v49 = *(void ***)&v87[0];
        *(void *)&v87[0] = v94;
        uint64_t v94 = v49;
        uint64_t v92 = (void **)v47.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v92);
      }
      else
      {
        uint64_t v31 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v86.i64[1], &v99)+ 32;
      }
      v86.i64[1] = v31;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v99);
    }
    else
    {
      if (v86.i64[1] >= *(void *)&v87[0])
      {
        uint64_t v32 = (v86.i64[1] - v86.i64[0]) >> 5;
        if ((unint64_t)(v32 + 1) >> 59) {
          goto LABEL_129;
        }
        unint64_t v33 = (*(void *)&v87[0] - v86.i64[0]) >> 4;
        if (v33 <= v32 + 1) {
          unint64_t v33 = v32 + 1;
        }
        if (*(void *)&v87[0] - v86.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v33;
        }
        unint64_t v95 = (char *)v87;
        if (v34) {
          int v35 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v87, v34);
        }
        else {
          int v35 = 0;
        }
        uint64_t v40 = (uint64_t)&v35[4 * v32];
        uint64_t v92 = v35;
        v93.i64[0] = v40;
        uint64_t v94 = &v35[4 * v34];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v40, (long long *)&v96);
        uint64_t v30 = v40 + 32;
        v93.i64[1] = v40 + 32;
        int v41 = (long long *)v86.i64[1];
        uint64_t v42 = v93.i64[0];
        if (v86.i64[1] == v86.i64[0])
        {
          int64x2_t v43 = vdupq_n_s64(v86.u64[1]);
        }
        else
        {
          do
          {
            v41 -= 2;
            uint64_t v42 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v42 - 32, v41);
          }
          while (v41 != (long long *)v86.i64[0]);
          int64x2_t v43 = v86;
          uint64_t v30 = v93.i64[1];
        }
        v86.i64[0] = v42;
        v86.i64[1] = v30;
        int64x2_t v93 = v43;
        long long v48 = *(void ***)&v87[0];
        *(void *)&v87[0] = v94;
        uint64_t v94 = v48;
        uint64_t v92 = (void **)v43.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v92);
      }
      else
      {
        uint64_t v30 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v86.i64[1], (long long *)&v96)+ 32;
      }
      v86.i64[1] = v30;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v96);
    unsigned int v98 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
                                    + 2);
    if (*(void *)&v87[1] >= *((void *)&v87[1] + 1))
    {
      uint64_t v51 = (uint64_t)(*(void *)&v87[1] - *((void *)&v87[0] + 1)) >> 5;
      if ((unint64_t)(v51 + 1) >> 59) {
        goto LABEL_129;
      }
      unint64_t v52 = (uint64_t)(*((void *)&v87[1] + 1) - *((void *)&v87[0] + 1)) >> 4;
      if (v52 <= v51 + 1) {
        unint64_t v52 = v51 + 1;
      }
      if (*((void *)&v87[1] + 1) - *((void *)&v87[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v53 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v53 = v52;
      }
      unint64_t v95 = (char *)&v87[1] + 8;
      if (v53) {
        uint64_t v54 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v87[1] + 8, v53);
      }
      else {
        uint64_t v54 = 0;
      }
      uint64_t v55 = (uint64_t)&v54[4 * v51];
      uint64_t v92 = v54;
      v93.i64[0] = v55;
      uint64_t v94 = &v54[4 * v53];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v55, (long long *)&v96);
      uint64_t v50 = v55 + 32;
      v93.i64[1] = v55 + 32;
      uint64_t v57 = (long long *)*((void *)&v87[0] + 1);
      long long v56 = *(long long **)&v87[1];
      uint64_t v58 = v93.i64[0];
      if (*(void *)&v87[1] == *((void *)&v87[0] + 1))
      {
        int64x2_t v59 = vdupq_n_s64(*(unint64_t *)&v87[1]);
      }
      else
      {
        do
        {
          v56 -= 2;
          uint64_t v58 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v58 - 32, v56);
        }
        while (v56 != v57);
        int64x2_t v59 = *(int64x2_t *)((char *)v87 + 8);
        uint64_t v50 = v93.i64[1];
      }
      *((void *)&v87[0] + 1) = v58;
      *(void *)&v87[1] = v50;
      int64x2_t v93 = v59;
      uint64_t v60 = (void **)*((void *)&v87[1] + 1);
      *((void *)&v87[1] + 1) = v94;
      uint64_t v94 = v60;
      uint64_t v92 = (void **)v59.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v92);
    }
    else
    {
      uint64_t v50 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v87[1], (long long *)&v96)+ 32;
    }
    *(void *)&v87[1] = v50;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v96);
    int64x2_t v61 = (const char *)operator new(0x20uLL, (std::align_val_t)8uLL);
    unint64_t v96 = v61;
    long long v97 = xmmword_261E8A760;
    *(void *)int64x2_t v61 = 0;
    *((void *)v61 + 1) = 0;
    *((_DWORD *)v61 + 4) = 0;
    *((void *)v61 + 3) = llvm::jitlink::identifyELFSectionStartAndEndSymbols;
    unsigned int v98 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::DefineExternalSectionStartAndEndSymbols<llvm::jitlink::SectionRangeSymbolDesc (&)(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)>,llvm::jitlink::DefineExternalSectionStartAndEndSymbols<llvm::jitlink::SectionRangeSymbolDesc (&)(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)>,void>::Callbacks
                                    + 4);
    MEMORY[0x263E500A0](0, 8);
    if (v88.i64[1] >= *(void *)&v89[0])
    {
      uint64_t v63 = (v88.i64[1] - v88.i64[0]) >> 5;
      if ((unint64_t)(v63 + 1) >> 59) {
        goto LABEL_129;
      }
      unint64_t v64 = (*(void *)&v89[0] - v88.i64[0]) >> 4;
      if (v64 <= v63 + 1) {
        unint64_t v64 = v63 + 1;
      }
      if (*(void *)&v89[0] - v88.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v65 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v65 = v64;
      }
      unint64_t v95 = (char *)v89;
      if (v65) {
        long long v66 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v89, v65);
      }
      else {
        long long v66 = 0;
      }
      uint64_t v67 = (uint64_t)&v66[4 * v63];
      uint64_t v92 = v66;
      v93.i64[0] = v67;
      uint64_t v94 = &v66[4 * v65];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v67, (long long *)&v96);
      uint64_t v62 = v67 + 32;
      v93.i64[1] = v67 + 32;
      long long v68 = (long long *)v88.i64[1];
      uint64_t v69 = (long long *)v88.i64[0];
      uint64_t v70 = v93.i64[0];
      if (v88.i64[1] == v88.i64[0])
      {
        int64x2_t v71 = vdupq_n_s64(v88.u64[1]);
      }
      else
      {
        do
        {
          v68 -= 2;
          uint64_t v70 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v70 - 32, v68);
        }
        while (v68 != v69);
        int64x2_t v71 = v88;
        uint64_t v62 = v93.i64[1];
      }
      v88.i64[0] = v70;
      v88.i64[1] = v62;
      int64x2_t v93 = v71;
      long long v72 = *(void ***)&v89[0];
      *(void *)&v89[0] = v94;
      uint64_t v94 = v72;
      uint64_t v92 = (void **)v71.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v92);
    }
    else
    {
      uint64_t v62 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v88.i64[1], (long long *)&v96)+ 32;
    }
    v88.i64[1] = v62;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v96);
    MEMORY[0x263E500A0](0, 8);
    unint64_t v96 = (const char *)llvm::jitlink::x86_64::optimizeGOTAndStubAccesses;
    unsigned int v98 = (uint64_t (**)())((char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
                                    + 2);
    if (*(void *)&v89[1] < *((void *)&v89[1] + 1))
    {
      uint64_t v73 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v89[1], (long long *)&v96)+ 32;
LABEL_121:
      *(void *)&v89[1] = v73;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v96);
      goto LABEL_122;
    }
    uint64_t v74 = (uint64_t)(*(void *)&v89[1] - *((void *)&v89[0] + 1)) >> 5;
    if (!((unint64_t)(v74 + 1) >> 59))
    {
      unint64_t v75 = (uint64_t)(*((void *)&v89[1] + 1) - *((void *)&v89[0] + 1)) >> 4;
      if (v75 <= v74 + 1) {
        unint64_t v75 = v74 + 1;
      }
      if (*((void *)&v89[1] + 1) - *((void *)&v89[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v76 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v76 = v75;
      }
      unint64_t v95 = (char *)&v89[1] + 8;
      if (v76) {
        long long v77 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v89[1] + 8, v76);
      }
      else {
        long long v77 = 0;
      }
      uint64_t v78 = (uint64_t)&v77[4 * v74];
      uint64_t v92 = v77;
      v93.i64[0] = v78;
      uint64_t v94 = &v77[4 * v76];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v78, (long long *)&v96);
      uint64_t v73 = v78 + 32;
      v93.i64[1] = v78 + 32;
      unsigned int v80 = (long long *)*((void *)&v89[0] + 1);
      uint64_t v79 = *(long long **)&v89[1];
      uint64_t v81 = v93.i64[0];
      if (*(void *)&v89[1] == *((void *)&v89[0] + 1))
      {
        int64x2_t v82 = vdupq_n_s64(*(unint64_t *)&v89[1]);
      }
      else
      {
        do
        {
          v79 -= 2;
          uint64_t v81 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v81 - 32, v79);
        }
        while (v79 != v80);
        int64x2_t v82 = *(int64x2_t *)((char *)v89 + 8);
        uint64_t v73 = v93.i64[1];
      }
      *((void *)&v89[0] + 1) = v81;
      *(void *)&v89[1] = v73;
      int64x2_t v93 = v82;
      size_t v83 = (void **)*((void *)&v89[1] + 1);
      *((void *)&v89[1] + 1) = v94;
      uint64_t v94 = v83;
      uint64_t v92 = (void **)v82.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v92);
      goto LABEL_121;
    }
LABEL_129:
    abort();
  }
LABEL_122:
  (*(void (**)(void ***__return_ptr))(*(void *)*a2 + 72))(&v92);
  if (!v92) {
    operator new();
  }
  uint64_t v84 = *a2;
  uint64_t v85 = v92;
  uint64_t v92 = 0;
  (*(void (**)(uint64_t, void ***))(*(void *)v84 + 24))(v84, &v85);
  if (v85) {
    (*((void (**)(void **))*v85 + 1))(v85);
  }
  if (v92) {
    (*((void (**)(void **))*v92 + 1))(v92);
  }
  uint64_t v92 = (void **)&v90;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v92);
  uint64_t v92 = (void **)v89 + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v92);
  uint64_t v92 = (void **)&v88;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v92);
  uint64_t v92 = (void **)v87 + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v92);
  uint64_t v92 = (void **)&v86;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v92);
}

uint64_t anonymous namespace'::buildTables_ELF_x86_64@<X0>(_anonymous_namespace_ *this@<X0>, void *a2@<X8>)
{
  v27[0] = 0;
  v27[1] = 0;
  int v28 = 0;
  uint64_t v29 = 0;
  v23[0] = 0;
  v23[1] = 0;
  int v24 = 0;
  uint64_t v25 = v27;
  uint64_t v26 = 0;
  v20[0] = 0;
  v20[1] = 0;
  unsigned int v21 = 0;
  uint64_t v22 = 0;
  llvm::jitlink::LinkGraph::blocks(this, v37);
  v38[0] = v37[0];
  v38[1] = v37[1];
  void v38[2] = v37[2];
  _OWORD v38[3] = v37[3];
  llvm::jitlink::LinkGraph::blocks(this, &v30);
  v36[0] = v32;
  v36[1] = v33;
  void v36[2] = v34;
  uint64_t v36[3] = v35;
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v39, v38, (uint64_t *)v36);
  unint64_t v5 = v39;
  int v19 = v40;
  if (v39 != v40)
  {
    do
    {
      uint64_t v6 = *v5;
      uint64_t v8 = *(void *)(*v5 + 40);
      uint64_t v7 = *(void *)(*v5 + 48);
      while (v8 != v7)
      {
        if ((llvm::jitlink::x86_64::GOTTableManager::visitEdge((uint64_t)v27, (uint64_t)this, v6, v8) & 1) == 0
          && (llvm::jitlink::x86_64::PLTTableManager::visitEdge((uint64_t)v23, (uint64_t)this, v6, (unint64_t *)v8) & 1) == 0
          && *(unsigned char *)(v8 + 24) == 23)
        {
          *(unsigned char *)(v8 + 24) = 7;
          unint64_t v10 = *(long long **)v8;
          v37[0] = *(_OWORD *)*(void *)v8;
          *(void *)&long long v30 = 0;
          int v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v20, (uint64_t)v37, &v30, v9);
          uint64_t v12 = v30;
          if (!v11) {
            uint64_t v12 = v20[0] + 24 * v21;
          }
          if (v12 == v20[0] + 24 * v21)
          {
            uint64_t v13 = v22;
            if (!v22) {
              llvm::jitlink::LinkGraph::createSection();
            }
            unint64_t v14 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)this, 16, 0);
            *unint64_t v14 = 0;
            v14[1] = 0;
            *(void *)&v37[0] = v14;
            *((void *)&v37[0] + 1) = 16;
            *(void *)&long long v30 = 0;
            uint64_t v41 = 0;
            v42[0] = 8;
            uint64_t v15 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::MutableArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)this, v13, (uint64_t *)v37, (uint64_t *)&v30, v42, &v41);
            llvm::jitlink::Block::addEdge(v15, 2, 8, (uint64_t)v10, 0);
            uint64_t v16 = llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)this, (uint64_t)v15, 0, 16, 0, 0);
            long long v30 = *v10;
            uint64_t v31 = v16;
            llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)v20, &v30, &v31, v17, (uint64_t)v37);
            uint64_t v12 = *(void *)&v37[0];
          }
          *(void *)uint64_t v8 = *(void *)(v12 + 16);
        }
        v8 += 32;
      }
      ++v5;
    }
    while (v5 != v19);
    unint64_t v5 = v39;
  }
  if (v5)
  {
    uint64_t v40 = v5;
    operator delete(v5);
  }
  *a2 = 0;
  MEMORY[0x263E500A0](v20[0], 8);
  MEMORY[0x263E500A0](v23[0], 8);
  return MEMORY[0x263E500A0](v27[0], 8);
}

uint64_t llvm::jitlink::identifyELFSectionStartAndEndSymbols(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (v5 < 7)
  {
    if (v5 < 5) {
      return 0;
    }
    goto LABEL_8;
  }
  if (*(_DWORD *)v4 != 1953718111 || *(_DWORD *)(v4 + 3) != 1953653108)
  {
LABEL_8:
    if (*(_DWORD *)v4 != 1852137311 || *(unsigned char *)(v4 + 4) != 100) {
      return 0;
    }
    uint64_t result = llvm::jitlink::LinkGraph::findSectionByName(a1, v4 + 5, v5 - 5, a4);
    if (!result) {
      return 0;
    }
    return result;
  }
  uint64_t result = llvm::jitlink::LinkGraph::findSectionByName(a1, v4 + 7, v5 - 7, a4);
  if (!result) {
    return 0;
  }
  return result;
}

void llvm::jitlink::ELFLinkGraphBuilder_x86_64::ELFLinkGraphBuilder_x86_64(int a1, void *a2, size_t a3, int a4)
{
  uint64_t v8 = "x86_64-unknown-linux";
  __int16 v9 = 259;
  llvm::Triple::Triple(__p, (const llvm::Twine *)&v8);
  llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFLinkGraphBuilder(a1, a4, (uint64_t)__p, a2, a3);
}

void llvm::jitlink::ELFLinkGraphBuilder_x86_64::addRelocations(llvm::jitlink::ELFLinkGraphBuilder_x86_64 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v5 = *((void *)this + 4);
    uint64_t v6 = v5 + (v3 << 6);
    uint64_t v7 = "Refencing a section that wasn't added to the graph: ";
    uint64_t v8 = &getErrorErrorCat(void)::ErrorErrorCat;
    while (1)
    {
      int v9 = *(_DWORD *)(v5 + 4);
      if (v9 == 9)
      {
        getErrorErrorCat();
        *(void *)&long long v22 = 3;
        *((void *)&v22 + 1) = v8;
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
      }
      if (v9 == 4) {
        break;
      }
      *a2 = 0;
LABEL_36:
      v5 += 64;
      if (v5 == v6) {
        goto LABEL_37;
      }
    }
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(*((void **)this + 3), *(_DWORD *)(v5 + 44), (uint64_t)&v27);
    if (v28)
    {
      uint64_t v17 = v27;
      *a2 = (uint64_t)v27;
      goto LABEL_35;
    }
    unint64_t v10 = (void *)*((void *)this + 3);
    *(void *)&long long v22 = llvm::object::defaultWarningHandler;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(v10, v27, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v22, (uint64_t)&v25);
    if (v26)
    {
      uint64_t v18 = v25;
      *(void *)&long long v25 = 0;
      *a2 = v18;
    }
    else
    {
      if (*((unsigned char *)this + 72)
        || (long long v22 = v25,
            std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90], (uint64_t)&v22) == (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_26A955A90]))
      {
        if (!(*(unsigned int (**)(llvm::jitlink::ELFLinkGraphBuilder_x86_64 *, unsigned int *))(*(void *)this + 40))(this, v27))
        {
          GraphBlocuint64_t k = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock((uint64_t)this, *(_DWORD *)(v5 + 44));
          if (!GraphBlock)
          {
            __int16 v24 = 1283;
            *(void *)&long long v22 = v7;
            long long v23 = v25;
            getErrorErrorCat();
            operator new();
          }
          uint64_t v12 = (void *)GraphBlock;
          uint64_t v13 = v8;
          unint64_t v14 = v7;
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(*((void **)this + 3), (void *)v5, (uint64_t)&v22);
          uint64_t v15 = v22;
          if (v23)
          {
            *(void *)&long long v22 = 0;
          }
          else
          {
            if (*((void *)&v22 + 1))
            {
              uint64_t v16 = 24 * *((void *)&v22 + 1);
              do
              {
                llvm::jitlink::ELFLinkGraphBuilder_x86_64::addSingleRelocation((uint64_t)this, v15, (uint64_t)v27, v12, a2);
                if (*a2) {
                  goto LABEL_24;
                }
                v15 += 24;
                v16 -= 24;
              }
              while (v16);
            }
            uint64_t v15 = 0;
          }
          *a2 = v15;
LABEL_24:
          if (v23)
          {
            uint64_t v19 = v22;
            *(void *)&long long v22 = 0;
            if (v19) {
              (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
            }
          }
          uint64_t v7 = v14;
          uint64_t v8 = v13;
          goto LABEL_28;
        }
      }
      *a2 = 0;
    }
LABEL_28:
    if (v26)
    {
      uint64_t v20 = v25;
      *(void *)&long long v25 = 0;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
    }
    if (v28)
    {
      unsigned int v21 = v27;
      uint64_t v27 = 0;
      if (v21) {
        (*(void (**)(unsigned int *))(*(void *)v21 + 8))(v21);
      }
    }
    uint64_t v17 = (unsigned int *)*a2;
LABEL_35:
    if (v17) {
      return;
    }
    goto LABEL_36;
  }
LABEL_37:
  *a2 = 0;
}

void llvm::jitlink::ELFLinkGraphBuilder_x86_64::addSingleRelocation(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  int v10 = *(_DWORD *)(a2 + 12);
  int v28 = v10;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationSymbol(*(void **)(a1 + 24), a2, *(void **)(a1 + 48), (uint64_t)&v35);
  if (v36)
  {
    uint64_t v15 = v35;
    uint64_t v35 = 0;
    *a5 = v15;
  }
  else
  {
    uint64_t GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(a1, v10);
    if (!GraphSymbol)
    {
      int v16 = *(_DWORD *)(a1 + 112);
      *(void *)&long long v19 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {0}, shndx: {1} S"
                        "ize of table: {2}";
      *((void *)&v19 + 1) = 113;
      uint64_t v20 = v27;
      uint64_t v21 = 3;
      long long v22 = &unk_270DBEB80;
      long long v23 = &v28;
      v24[0] = &unk_270DBED90;
      v24[1] = v35 + 6;
      long long v25 = &unk_270DBE8C8;
      int v26 = v16;
      v27[0] = &v22;
      v27[1] = v24;
      void v27[2] = &v25;
      getErrorErrorCat();
      uint64_t v33 = 3;
      long long v34 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>();
    }
    unsigned int v12 = *(_DWORD *)(a2 + 8);
    unsigned int v32 = v12;
    switch(v12)
    {
      case 1u:
        uint64_t v13 = *(void *)(a2 + 16);
        char v14 = 2;
        goto LABEL_22;
      case 2u:
        uint64_t v13 = *(void *)(a2 + 16);
        char v14 = 7;
        goto LABEL_22;
      case 3u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x1Au:
        goto LABEL_10;
      case 4u:
        uint64_t v13 = *(void *)(a2 + 16) + 4;
        char v14 = 11;
        goto LABEL_22;
      case 9u:
        uint64_t v13 = *(void *)(a2 + 16);
        char v14 = 15;
        goto LABEL_22;
      case 0xAu:
        uint64_t v13 = *(void *)(a2 + 16);
        char v14 = 3;
        goto LABEL_22;
      case 0xBu:
        uint64_t v13 = *(void *)(a2 + 16);
        char v14 = 4;
        goto LABEL_22;
      case 0x13u:
        uint64_t v13 = *(void *)(a2 + 16);
        char v14 = 23;
        goto LABEL_22;
      case 0x18u:
      case 0x1Du:
        uint64_t v13 = *(void *)(a2 + 16);
        char v14 = 6;
        goto LABEL_22;
      case 0x19u:
        uint64_t v13 = *(void *)(a2 + 16);
        char v14 = 10;
        goto LABEL_22;
      case 0x1Bu:
        uint64_t v13 = *(void *)(a2 + 16);
        char v14 = 17;
        goto LABEL_22;
      case 0x1Cu:
        uint64_t v13 = *(void *)(a2 + 16);
        char v14 = 16;
        goto LABEL_22;
      default:
        if (v12 == 41)
        {
          uint64_t v13 = 0;
          char v14 = 21;
        }
        else
        {
          if (v12 != 42)
          {
LABEL_10:
            *(void *)&long long v19 = "{0:d}: ";
            *((void *)&v19 + 1) = 7;
            uint64_t v20 = v24;
            uint64_t v21 = 1;
            long long v22 = &unk_270DBCE28;
            long long v23 = &v32;
            v24[0] = &v22;
            uint64_t v29 = "Unsupported x86-64 relocation type ";
            long long v30 = &v19;
            __int16 v31 = 1539;
            llvm::object::getELFRelocationTypeName((llvm::object *)0x3E, v12);
            operator new();
          }
          uint64_t v13 = 0;
          char v14 = 20;
        }
LABEL_22:
        int v17 = *(_DWORD *)a2 + *(_DWORD *)(a3 + 16) - *(_DWORD *)a4;
        *(void *)&long long v19 = GraphSymbol;
        DWORD2(v19) = v17;
        uint64_t v20 = (void *)v13;
        LOBYTE(v21) = v14;
        llvm::jitlink::Block::addEdge(a4, &v19);
        *a5 = 0;
        break;
    }
  }
  if (v36)
  {
    uint64_t v18 = v35;
    uint64_t v35 = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::jitlink::DefineExternalSectionStartAndEndSymbols<llvm::jitlink::SectionRangeSymbolDesc (&)(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)>>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = a2 + 208;
  uint64_t v7 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 208);
  int v9 = v8;
  llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v6);
  int v10 = (uint64_t *)(*(void *)(a2 + 208) + 8 * *(unsigned int *)(a2 + 224));
  std::vector<llvm::jitlink::Symbol *>::vector<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,0>(&v24, v7, v9, v10, (uint64_t)v10);
  int v11 = v24;
  unsigned int v12 = v25;
  if (v24 == v25) {
    goto LABEL_16;
  }
  do
  {
    uint64_t v13 = *v11;
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a2, *v11);
    if (!v14) {
      goto LABEL_14;
    }
    uint64_t v16 = v14;
    char v17 = v15;
    uint64_t v27 = v14;
    v29[0] = 0;
    int v18 = llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)a1, &v27, v29);
    uint64_t v19 = v29[0];
    if (!v18) {
      uint64_t v19 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
    }
    if (v19 == *(void *)a1 + 24 * *(unsigned int *)(a1 + 16))
    {
      llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v26, v16);
      uint64_t v27 = v16;
      long long v28 = v26;
      llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::try_emplace<llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>(a1, &v27, &v28, (uint64_t)v29);
      uint64_t v19 = v29[0];
    }
    uint64_t v20 = *(void *)(v19 + 8);
    if (v17)
    {
      if (v20)
      {
        uint64_t v22 = a2;
        long long v23 = (void *)v13;
        uint64_t v21 = 0;
        goto LABEL_12;
      }
    }
    else if (v20)
    {
      uint64_t v20 = *(void *)(v19 + 16);
      uint64_t v21 = *(void *)(v20 + 32);
      uint64_t v22 = a2;
      long long v23 = (void *)v13;
LABEL_12:
      llvm::jitlink::LinkGraph::makeDefined(v22, v23, v20, v21, 0, 0, 2, 0);
      goto LABEL_14;
    }
    llvm::jitlink::LinkGraph::makeAbsolute(a2, v13, v20);
LABEL_14:
    ++v11;
  }
  while (v11 != v12);
  int v11 = v24;
LABEL_16:
  *a3 = 0;
  if (v11)
  {
    long long v25 = v11;
    operator delete(v11);
  }
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::MoveImpl<llvm::jitlink::DefineExternalSectionStartAndEndSymbols<llvm::jitlink::SectionRangeSymbolDesc (&)(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)>>(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)uint64_t result = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(void *)(result + 24) = *(void *)(a2 + 24);
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::DestroyImpl<llvm::jitlink::DefineExternalSectionStartAndEndSymbols<llvm::jitlink::SectionRangeSymbolDesc (&)(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)>>()
{
}

void llvm::jitlink::ELFJITLinker_x86_64::~ELFJITLinker_x86_64(llvm::jitlink::ELFJITLinker_x86_64 *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x263E500B0);
}

uint64_t **llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_x86_64>::fixUpBlocks@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(_DWORD *)(a2 + 192))
  {
    uint64_t v5 = result;
    uint64_t v6 = *(unsigned int *)(a2 + 200);
    if (v6)
    {
      uint64_t v7 = 24 * v6;
      uint64_t v8 = *(void **)(a2 + 184);
      while (*v8 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v8 += 3;
        v7 -= 24;
        if (!v7) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v8 = *(void **)(a2 + 184);
    }
    uint64_t v9 = *(void *)(a2 + 184) + 24 * v6;
LABEL_10:
    if (v8 != (void *)v9)
    {
      uint64_t v10 = v8[2];
      int v21 = *(_DWORD *)(v10 + 20);
      uint64_t result = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v10 + 32);
      uint64_t v20 = *(void *)(v10 + 32) + 8 * *(unsigned int *)(v10 + 48);
      if ((uint64_t **)v20 == result) {
        goto LABEL_28;
      }
      unsigned int v12 = result;
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = *v12;
        if (v21 == 2 && (v14[1] & 4) == 0)
        {
          size_t v15 = v14[4];
          unint64_t __src = (void *)v14[3];
          uint64_t result = (uint64_t **)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, v15, 0);
          uint64_t v16 = result;
          if (v15) {
            uint64_t result = (uint64_t **)memmove(result, __src, v15);
          }
          _OWORD v14[3] = (uint64_t)v16;
          void v14[4] = v15;
          v14[1] |= 4uLL;
        }
        uint64_t v17 = v14[5];
        uint64_t v18 = v14[6];
        while (v17 != v18)
        {
          if (*(unsigned __int8 *)(v17 + 24) >= 2u)
          {
            uint64_t result = (uint64_t **)llvm::jitlink::x86_64::applyFixup(a2, v14, v17, (uint64_t)v5[19], a3);
            if (*a3) {
              return result;
            }
          }
          v17 += 32;
        }
        while (++v12 != v13)
        {
          if (((unint64_t)*v12 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_27;
          }
        }
        unsigned int v12 = v13;
LABEL_27:
        ;
      }
      while (v12 != (uint64_t **)v20);
LABEL_28:
      while (1)
      {
        v8 += 3;
        if (v8 == (void *)v9) {
          break;
        }
        if (*v8 < 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_10;
        }
      }
    }
  }
LABEL_6:
  *a3 = 0;
  return result;
}

void llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_x86_64>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::jitlink::ELFJITLinker_x86_64::ELFJITLinker_x86_64(std::unique_ptr<llvm::jitlink::JITLinkContext>,std::unique_ptr<llvm::jitlink::LinkGraph>,llvm::jitlink::PassConfiguration)::{lambda(llvm::jitlink::LinkGraph &)#1}>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  v37[0] = 0;
  v37[1] = 0;
  unsigned int v38 = 0;
  uint64_t v39 = a2;
  uint64_t v40 = v5;
  uint64_t v6 = a2 + 208;
  uint64_t v7 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 208);
  uint64_t v9 = v8;
  llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v6);
  uint64_t v10 = (uint64_t *)(*(void *)(a2 + 208) + 8 * *(unsigned int *)(a2 + 224));
  std::vector<llvm::jitlink::Symbol *>::vector<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,0>(&v41, v7, v9, v10, (uint64_t)v10);
  unsigned int v12 = v41;
  uint64_t v13 = v42;
  if (v41 != v42)
  {
    uint64_t v35 = v5;
    char v36 = a3;
    do
    {
      uint64_t v14 = *(void **)v12;
      if (*(void *)(*(void *)v12 + 8) == 21)
      {
        BOOL v15 = *(void *)*v14 == 0x5F4C41424F4C475FLL && *(void *)(*v14 + 8) == 0x545F54455346464FLL;
        if (v15 && *(void *)(*v14 + 13) == 0x5F454C4241545F54)
        {
          uint64_t v17 = v40;
          uint64_t SectionByName = (unint64_t *)llvm::jitlink::LinkGraph::findSectionByName(v39, (uint64_t)"$__GOT", 6, v11);
          if (SectionByName)
          {
            uint64_t v19 = SectionByName;
            *(void *)(v17 + 152) = v14;
            uint64_t v44 = SectionByName;
            v46[0] = 0;
            int v20 = llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>(v37, &v44, v46);
            uint64_t v21 = v46[0];
            if (!v20) {
              uint64_t v21 = v37[0] + 24 * v38;
            }
            if (v21 == v37[0] + 24 * v38)
            {
              llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v43, (uint64_t)v19);
              uint64_t v44 = v19;
              long long v45 = v43;
              llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::try_emplace<llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>((uint64_t)v37, &v44, &v45, (uint64_t)v46);
              uint64_t v21 = v46[0];
            }
            uint64_t v22 = *(void *)(v21 + 8);
            if (v22) {
              llvm::jitlink::LinkGraph::makeDefined(a2, v14, v22, 0, 0, 0, 2, 0);
            }
            else {
              llvm::jitlink::LinkGraph::makeAbsolute(a2, (uint64_t)v14, 0);
            }
          }
        }
      }
      v12 += 8;
    }
    while (v12 != v13);
    unsigned int v12 = v41;
    uint64_t v5 = v35;
    a3 = v36;
  }
  if (v12)
  {
    uint64_t v42 = v12;
    operator delete(v12);
  }
  if (!*(void *)(v5 + 152))
  {
    uint64_t v23 = llvm::jitlink::LinkGraph::findSectionByName(a2, (uint64_t)"$__GOT", 6, v11);
    if (v23)
    {
      uint64_t v24 = v23;
      long long v25 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v23 + 56);
      uint64_t v27 = *(void *)(v24 + 56) + 8 * *(unsigned int *)(v24 + 72);
      if ((void *)v27 == v25)
      {
LABEL_39:
        llvm::jitlink::SectionRange::SectionRange(&v44, v24);
        __int16 v31 = v44;
        if (v44)
        {
          unint64_t v32 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, 40, 3);
          *(void *)unint64_t v32 = "_GLOBAL_OFFSET_TABLE_";
          *(void *)(v32 + 8) = 21;
          *(void *)(v32 + 16) = v31;
          *(_OWORD *)(v32 + 24) = xmmword_261E8D5E0;
          uint64_t v33 = v31[2] + 56;
          uint64_t v41 = (char *)v32;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v33, &v41, (uint64_t)v46);
        }
        else
        {
          unint64_t v32 = (unint64_t)llvm::jitlink::LinkGraph::addAbsoluteSymbol(a2, (uint64_t)"_GLOBAL_OFFSET_TABLE_", 21, 0, 0, 0, 2, 1);
        }
        *(void *)(v5 + 152) = v32;
      }
      else
      {
        while (1)
        {
          uint64_t v28 = *v25;
          if (*(void *)(*v25 + 8) == 21)
          {
            BOOL v29 = **(void **)v28 == 0x5F4C41424F4C475FLL && *(void *)(*(void *)v28 + 8) == 0x545F54455346464FLL;
            if (v29 && *(void *)(*(void *)v28 + 13) == 0x5F454C4241545F54) {
              break;
            }
          }
          while (++v25 != v26)
          {
            if ((*v25 | 0x1000) != 0xFFFFFFFFFFFFF000) {
              goto LABEL_38;
            }
          }
          long long v25 = v26;
LABEL_38:
          if (v25 == (void *)v27) {
            goto LABEL_39;
          }
        }
        *(void *)(v5 + 152) = v28;
      }
    }
  }
  *a3 = 0;
  return MEMORY[0x263E500A0](v37[0], 8);
}

void llvm::jitlink::createLinkGraphFromCOFFObject(uint64_t a1)
{
  int v2 = *(unsigned __int8 **)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  if (llvm::identify_magic(*(unsigned __int8 **)a1, v3) != 24) {
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
  }
  if (v3 <= 0x13) {
LABEL_3:
  }
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[22]>();
  if (v3 >= 0x44 && *v2 == 77 && v2[1] == 90)
  {
    uint64_t v4 = *((unsigned int *)v2 + 15);
    if (*(_DWORD *)&v2[v4] != 17744) {
      llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[19]>();
    }
    if (v3 < v4 + 24) {
      goto LABEL_3;
    }
    uint64_t v5 = 0;
    v2 += v4 + 4;
LABEL_12:
    uint64_t v6 = v5 + 6;
    if (v2) {
      uint64_t v6 = v2;
    }
    int v7 = *(unsigned __int16 *)v6;
    if (v7 == 34404)
    {
      long long v8 = *(_OWORD *)(a1 + 16);
      v17[0] = *(_OWORD *)a1;
      v17[1] = v8;
      llvm::jitlink::createLinkGraphFromCOFFObject_x86_64(v17);
    }
    __int16 v13 = 1283;
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 24);
    v12[0] = "Unsupported target machine architecture in COFF object ";
    uint64_t v12[2] = v9;
    _OWORD v12[3] = v10;
    uint64_t v14 = v12;
    BOOL v15 = ": ";
    __int16 v16 = 770;
    operator new();
  }
  if (!*(_WORD *)v2)
  {
    uint64_t v5 = 0;
    if (*((__int16 *)v2 + 1) != -1 || v3 < 0x38) {
      goto LABEL_12;
    }
    if (*((unsigned __int16 *)v2 + 2) >= 2u
      && *(void *)(v2 + 12) == 0x4BA9BAEED1BAA1C7
      && *(void *)(v2 + 20) == 0xB8DCA46AF6FA20AFLL)
    {
      uint64_t v5 = v2;
      int v2 = 0;
      goto LABEL_12;
    }
  }
  uint64_t v5 = 0;
  goto LABEL_12;
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[22]>()
{
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[19]>()
{
}

llvm::jitlink::LinkGraph *llvm::jitlink::link_COFF(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  int v2 = *a1;
  if (*((_DWORD *)*a1 + 36) != 38)
  {
    std::operator+<char>();
    llvm::make_error<llvm::jitlink::JITLinkError,std::string>();
  }
  *a1 = 0;
  int v7 = v2;
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v6 = v3;
  llvm::jitlink::link_COFF_x86_64(&v7, &v6);
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = v7;
  int v7 = 0;
  if (result)
  {
    llvm::jitlink::LinkGraph::~LinkGraph(result);
    return (llvm::jitlink::LinkGraph *)MEMORY[0x263E500B0]();
  }
  return result;
}

void COFFOptTable::~COFFOptTable(COFFOptTable *this)
{
  *(void *)this = &unk_270DC1780;
  int v2 = (char *)*((void *)this + 7);
  if (v2 != (char *)this + 80) {
    free(v2);
  }
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_270DC1780;
  int v2 = (char *)*((void *)this + 7);
  if (v2 != (char *)this + 80) {
    free(v2);
  }
  JUMPOUT(0x263E500B0);
}

void llvm::jitlink::COFFDirectiveParser::parse(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned char v53[32] = *MEMORY[0x263EF8340];
  uint64_t v51 = v53;
  uint64_t v52 = 0x1000000000;
  long long v48 = v50;
  uint64_t v49 = 0x1000000000;
  int v7 = (uint64_t *)(a1 + 96);
  llvm::cl::TokenizeWindowsCommandLineNoCopy(a2, a3, (uint64_t *)(a1 + 96), (unsigned int *)&v51);
  if (v52)
  {
    long long v8 = (uint64_t *)v51;
    uint64_t v9 = (uint64_t *)((char *)v51 + 16 * v52);
    uint64_t v10 = (unsigned char *)(a2 + a3);
    do
    {
      unsigned int v12 = (const void *)*v8;
      size_t v11 = v8[1];
      __int16 v13 = (unsigned char *)(*v8 + v11);
      if (v13 == v10 || *v13)
      {
        uint64_t v14 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*v7, v11 + 1, 0);
        uint64_t v15 = (uint64_t)v14;
        if (v11) {
          memcpy(v14, v12, v11);
        }
        *(unsigned char *)(v15 + v11) = 0;
      }
      else
      {
        uint64_t v15 = *v8;
      }
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v48, v15);
      v8 += 2;
    }
    while (v8 != v9);
  }
  uint64_t v31 = 0;
  llvm::opt::OptTable::ParseArgs((llvm::opt::OptTable *)optTable, (const char **)v48, v49, (unsigned int *)&v31 + 1, &v31, 0, 0, (llvm::opt::InputArgList *)&v32);
  if (v31) {
    operator new();
  }
  *(unsigned char *)(a4 + 352) &= ~1u;
  *(void *)a4 = &unk_270DBF2B0;
  __int16 v16 = (void *)(a4 + 24);
  *(void *)(a4 + 8) = a4 + 24;
  *(void *)(a4 + 16) = 0x1000000000;
  unsigned int v17 = v34;
  if (v34 && &v32 != (void **)a4)
  {
    uint64_t v18 = __src;
    if (__src != v36)
    {
      *(void *)(a4 + 8) = __src;
      int v19 = v35;
      *(_DWORD *)(a4 + 16) = v17;
      *(_DWORD *)(a4 + 20) = v19;
      unint64_t __src = v36;
      int v35 = 0;
      goto LABEL_22;
    }
    if (v34 < 0x11)
    {
      uint64_t v20 = v34;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 8, (void *)(a4 + 24), v34, 8);
      uint64_t v20 = v34;
      if (!v34)
      {
LABEL_21:
        *(_DWORD *)(a4 + 16) = v17;
        goto LABEL_22;
      }
      uint64_t v18 = __src;
      __int16 v16 = *(void **)(a4 + 8);
    }
    memcpy(v16, v18, 8 * v20);
    goto LABEL_21;
  }
LABEL_22:
  *(void *)(a4 + 152) = v37;
  *(void *)(a4 + 160) = v38;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  *(_DWORD *)(a4 + 168) = v39;
  int v39 = 0;
  unsigned int v34 = 0;
  *(void *)a4 = &unk_270DC1758;
  uint64_t v21 = (void *)(a4 + 192);
  *(void *)(a4 + 176) = a4 + 192;
  *(void *)(a4 + 184) = 0x1000000000;
  unsigned int v22 = v41;
  if (v41 && &v32 != (void **)a4)
  {
    uint64_t v23 = v40;
    if (v40 != v43)
    {
      *(void *)(a4 + 176) = v40;
      int v24 = v42;
      *(_DWORD *)(a4 + 184) = v22;
      *(_DWORD *)(a4 + 188) = v24;
      uint64_t v40 = v43;
      int v42 = 0;
LABEL_32:
      unsigned int v41 = 0;
      goto LABEL_33;
    }
    if (v41 < 0x11)
    {
      uint64_t v25 = v41;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 176, (void *)(a4 + 192), v41, 8);
      uint64_t v25 = v41;
      if (!v41)
      {
LABEL_31:
        *(_DWORD *)(a4 + 184) = v22;
        goto LABEL_32;
      }
      uint64_t v23 = v40;
      uint64_t v21 = *(void **)(a4 + 176);
    }
    memcpy(v21, v23, 8 * v25);
    goto LABEL_31;
  }
LABEL_33:
  *(void *)(a4 + 320) = a4 + 320;
  *(void *)(a4 + 328) = a4 + 320;
  *(void *)(a4 + 336) = 0;
  uint64_t v26 = v46;
  if (v46)
  {
    uint64_t v28 = v44;
    uint64_t v27 = v45;
    uint64_t v29 = *v45;
    *(void *)(v29 + 8) = *(void *)(v44 + 8);
    **(void **)(v28 + 8) = v29;
    uint64_t v30 = *(void *)(a4 + 320);
    *(void *)(v30 + 8) = v27;
    *uint64_t v27 = v30;
    *(void *)(a4 + 320) = v28;
    *(void *)(v28 + 8) = a4 + 320;
    *(void *)(a4 + 336) = v26;
    uint64_t v46 = 0;
  }
  *(_DWORD *)(a4 + 344) = v47;
  llvm::opt::InputArgList::~InputArgList(&v32);
  if (v48 != v50) {
    free(v48);
  }
  if (v51 != v53) {
    free(v51);
  }
}

uint64_t llvm::opt::PrecomputedOptTable::getPrefixesUnion(llvm::opt::PrecomputedOptTable *this)
{
  return *((void *)this + 11);
}

void llvm::opt::PrecomputedOptTable::~PrecomputedOptTable(llvm::opt::PrecomputedOptTable *this)
{
  *(void *)this = &unk_270DC1780;
  int v2 = (char *)*((void *)this + 7);
  if (v2 != (char *)this + 80) {
    free(v2);
  }
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_270DC1780;
  int v2 = (char *)*((void *)this + 7);
  if (v2 != (char *)this + 80) {
    free(v2);
  }
  JUMPOUT(0x263E500B0);
}

void llvm::opt::InputArgList::~InputArgList(void **this)
{
  llvm::opt::InputArgList::releaseMemory((uint64_t)this);
  std::__list_imp<std::string>::clear(this + 40);
  int v2 = (void **)this[22];
  if (v2 != this + 24) {
    free(v2);
  }
  llvm::opt::ArgList::~ArgList((llvm::opt::ArgList *)this);
}

void llvm::opt::ArgList::~ArgList(llvm::opt::ArgList *this)
{
  *(void *)this = &unk_270DBF2B0;
  MEMORY[0x263E500A0](*((void *)this + 19), 4);
  int v2 = (char *)*((void *)this + 1);
  if (v2 != (char *)this + 24) {
    free(v2);
  }
}

void std::__list_imp<std::string>::clear(void **a1)
{
  if (a1[2])
  {
    uint64_t v3 = (void **)*a1;
    int v2 = (void **)a1[1];
    uint64_t v4 = *v2;
    v4[1] = *((void *)*a1 + 1);
    *v3[1] = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        uint64_t v5 = (void **)v2[1];
        std::__list_imp<std::string>::__delete_node[abi:nn180100]<>((int)a1, v2);
        int v2 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__list_imp<std::string>::__delete_node[abi:nn180100]<>(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }
  operator delete(__p);
}

uint64_t _GLOBAL__sub_I_COFFDirectiveParser_cpp()
{
  uint64_t v0 = (size_t *)llvm::opt::OptTable::OptTable((uint64_t)optTable, (uint64_t)&infoTable, 5, 1);
  optTable[0] = (uint64_t)&unk_270DBF288;
  qword_26B41E968 = (uint64_t)&PrefixTable_init;
  unk_26B41E970 = 4;
  llvm::opt::OptTable::buildPrefixChars(v0);
  optTable[0] = (uint64_t)&unk_270DBF260;
  return __cxa_atexit((void (*)(void *))COFFOptTable::~COFFOptTable, optTable, &dword_261C2B000);
}

void llvm::jitlink::COFFLinkGraphBuilder::COFFLinkGraphBuilder(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_270DBF2D8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a2;
  uint64_t v5 = (void *)a2[4];
  if (v5)
  {
    std::string::basic_string[abi:nn180100](__dst, v5, a2[5]);
  }
  else
  {
    __dst[0] = 0;
    __dst[1] = 0;
    uint64_t v13 = 0;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v6 = *(std::string *)a3;
  }
  long long v7 = *(_OWORD *)(a3 + 24);
  uint64_t v8 = *(void *)(a3 + 40);
  llvm::Triple::setObjectFormat((llvm::Triple *)&v6, 1);
  std::string __p = v6;
  memset(&v6, 0, sizeof(v6));
  long long v10 = v7;
  uint64_t v11 = v8;
  (*(void (**)(void *))(*a2 + 376))(a2);
  operator new();
}

void llvm::jitlink::COFFLinkGraphBuilder::~COFFLinkGraphBuilder(llvm::jitlink::COFFLinkGraphBuilder *this)
{
  *(void *)this = &unk_270DBF2D8;
  MEMORY[0x263E500A0](*((void *)this + 38), 8);
  MEMORY[0x263E500A0](*((void *)this + 35), 8);
  MEMORY[0x263E500A0](*((void *)this + 32), 8);
  int v2 = (void *)*((void *)this + 29);
  if (v2)
  {
    *((void *)this + 30) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 26);
  if (v3)
  {
    *((void *)this + 27) = v3;
    operator delete(v3);
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 96);
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)this + 11, 0);
  std::string v6 = (void **)((char *)this + 56);
  std::vector<std::set<std::pair<unsigned long long,llvm::jitlink::Symbol *>>>::__destroy_vector::operator()[abi:nn180100](&v6);
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
}

void llvm::jitlink::COFFLinkGraphBuilder::buildGraph(llvm::jitlink::COFFLinkGraphBuilder *this@<X0>, uint64_t a2@<X8>)
{
  if (((*(uint64_t (**)(void))(**((void **)this + 10) + 440))(*((void *)this + 10)) & 1) == 0) {
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
  }
  llvm::jitlink::COFFLinkGraphBuilder::graphifySections(this, &v6);
  uint64_t v5 = v6;
  if (v6
    || (llvm::jitlink::COFFLinkGraphBuilder::graphifySymbols((char **)this, v4, &v6), (uint64_t v5 = v6) != 0)
    || ((*(void (**)(const char **__return_ptr, llvm::jitlink::COFFLinkGraphBuilder *))(*(void *)this + 16))(&v6, this), (uint64_t v5 = v6) != 0))
  {
    *(unsigned char *)(a2 + 8) |= 1u;
  }
  else
  {
    *(unsigned char *)(a2 + 8) &= ~1u;
    uint64_t v5 = (const char *)*((void *)this + 11);
    *((void *)this + 11) = 0;
  }
  *(void *)a2 = v5;
}

void llvm::jitlink::COFFLinkGraphBuilder::graphifySections(llvm::jitlink::COFFLinkGraphBuilder *this@<X0>, void *a2@<X8>)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 10);
  uint64_t v4 = *(void *)(v3 + 48);
  if (v4)
  {
    uint64_t v5 = a2;
    int v6 = *(unsigned __int16 *)(v4 + 2);
    if (v6 == 0xFFFF) {
      int v6 = 0;
    }
  }
  else
  {
    uint64_t v5 = a2;
    int v6 = *(_DWORD *)(*(void *)(v3 + 56) + 44);
  }
  unint64_t v7 = (v6 + 1);
  uint64_t v8 = *((void *)this + 26);
  uint64_t v9 = *((void *)this + 27);
  unint64_t v10 = (v9 - v8) >> 3;
  if (v7 <= v10)
  {
    BOOL v26 = v7 >= v10;
    uint64_t v25 = v5;
    if (!v26) {
      *((void *)this + 27) = v8 + 8 * v7;
    }
  }
  else
  {
    unint64_t v11 = v7 - v10;
    unsigned int v12 = (char *)this + 224;
    uint64_t v13 = *((void *)this + 28);
    size_t v14 = 8 * (v7 - v10);
    if (v7 - v10 <= (v13 - v9) >> 3)
    {
      bzero(*((void **)this + 27), 8 * (v7 - v10));
      *((void *)this + 27) = v9 + 8 * v11;
      uint64_t v25 = v5;
    }
    else
    {
      uint64_t v15 = v13 - v8;
      if (v15 >> 2 > v7) {
        unint64_t v7 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v7;
      }
      unsigned int v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)v12, v16);
      uint64_t v18 = &v17[8 * v10];
      uint64_t v20 = &v17[8 * v19];
      bzero(v18, v14);
      uint64_t v21 = &v18[8 * v11];
      uint64_t v23 = (char *)*((void *)this + 26);
      unsigned int v22 = (char *)*((void *)this + 27);
      if (v22 != v23)
      {
        do
        {
          uint64_t v24 = *((void *)v22 - 1);
          v22 -= 8;
          *((void *)v18 - 1) = v24;
          v18 -= 8;
        }
        while (v22 != v23);
        unsigned int v22 = (char *)*((void *)this + 26);
      }
      uint64_t v25 = v5;
      *((void *)this + 26) = v18;
      *((void *)this + 27) = v21;
      *((void *)this + 28) = v20;
      if (v22) {
        operator delete(v22);
      }
    }
  }
  uint64_t v27 = (char *)this + 96;
  int64x2_t v86 = (uint64_t *)((char *)this + 280);
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v29 = (llvm::object *)*((void *)this + 10);
    uint64_t v30 = *((void *)v29 + 6);
    if (v30)
    {
      int v31 = *(unsigned __int16 *)(v30 + 2);
      if (v31 == 0xFFFF) {
        int v31 = 0;
      }
    }
    else
    {
      int v31 = *(_DWORD *)(*((void *)v29 + 7) + 44);
    }
    if (i > v31)
    {
      void *v25 = 0;
      return;
    }
    llvm::object::COFFObjectFile::getSection(v29, i, (uint64_t)&v97);
    if (v98) {
      break;
    }
    unint64_t v32 = v97;
    llvm::object::COFFObjectFile::getSectionName(*((llvm::object::COFFObjectFile **)this + 10), (uint64_t)v97, (uint64_t)&v99);
    if (v101)
    {
      char v36 = v99;
      long long v99 = 0;
      if (v36) {
        (*(void (**)(void *))(*(void *)v36 + 8))(v36);
      }
      int v35 = 0;
      uint64_t v34 = 0;
    }
    else
    {
      int v35 = v99;
      uint64_t v34 = (uint64_t)v100;
    }
    int v37 = v32[9];
    if ((v37 & 0x20000000) != 0) {
      int v38 = 5;
    }
    else {
      int v38 = 1;
    }
    if (v37 >= 0) {
      int v39 = v38;
    }
    else {
      int v39 = v38 | 2;
    }
    uint64_t SectionByName = llvm::jitlink::LinkGraph::findSectionByName(*((void *)this + 11), (uint64_t)v35, v34, v33);
    if (!SectionByName) {
      llvm::jitlink::LinkGraph::createSection();
    }
    if (*(_DWORD *)(SectionByName + 16) != v39) {
      llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
    }
    unsigned int v41 = v32[9];
    if ((v41 & 0x80) != 0)
    {
      uint64_t v46 = (void *)*((void *)this + 10);
      uint64_t v48 = v46[8];
      uint64_t v47 = v46[9];
      if (*((_OWORD *)v46 + 4) == 0 || !v46[2])
      {
        unsigned int v49 = v32[4];
        if (v48) {
          goto LABEL_58;
        }
      }
      else
      {
        unsigned int v49 = v32[4];
        if (v49 >= v32[2]) {
          unsigned int v49 = v32[2];
        }
        if (v48)
        {
LABEL_58:
          uint64_t v47 = *(unsigned int *)(v48 + 28);
LABEL_62:
          uint64_t v50 = *((void *)this + 11);
          uint64_t v51 = (void *)(v47 + v32[3]);
          unsigned int v52 = 1 << (((v41 >> 20) & 0xF) - 1);
          if (((v41 >> 20) & 0xF) == 0) {
            unsigned int v52 = 16;
          }
          long long v99 = v51;
          v89[0] = v49;
          if ((v41 & 8) != 0) {
            uint64_t v53 = 1;
          }
          else {
            uint64_t v53 = v52;
          }
          *(void *)&long long v91 = v53;
          v95[0] = 0;
          uint64_t v54 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v50, SectionByName, v89, (uint64_t *)&v99, (unint64_t *)&v91, v95);
          goto LABEL_109;
        }
      }
      if (v47) {
        uint64_t v47 = *(void *)(v47 + 24);
      }
      goto LABEL_62;
    }
    uint64_t v87 = 0;
    unint64_t v88 = 0;
    llvm::object::COFFObjectFile::getSectionContents(*((llvm::object **)this + 10), v32, (unint64_t *)&v87, v25);
    if (*v25) {
      return;
    }
    long long v43 = (void *)v87;
    unint64_t v42 = v88;
    if (v34 == 8 && *v35 == 0x657674636572642ELL)
    {
      llvm::jitlink::COFFDirectiveParser::parse((uint64_t)v27, v87, v88, (uint64_t)&v99);
      if (v102)
      {
        uint64_t v55 = v99;
        long long v99 = 0;
        void *v25 = v55;
      }
      else
      {
        uint64_t v84 = v27;
        uint64_t v85 = v25;
        if (v101)
        {
          uint64_t v44 = 8 * v101;
          long long v45 = v100;
          while (!*v45)
          {
            ++v45;
            v44 -= 8;
            if (!v44) {
              goto LABEL_93;
            }
          }
        }
        else
        {
          long long v45 = v100;
        }
        long long v56 = &v100[v101];
        if (v45 != v56)
        {
          uint64_t v57 = (void **)*v45;
          while (1)
          {
            uint64_t v58 = (const char *)*v57[6];
            v95[0] = (uint64_t)v58;
            size_t v59 = v58 ? strlen(v58) : 0;
            v95[1] = v59;
            int v60 = *((_DWORD *)*v57 + 12);
            if (v60 != 5) {
              break;
            }
            uint64_t v67 = *((void *)this + 11);
            __int16 v90 = 261;
            v89[0] = (uint64_t)v58;
            v89[1] = v59;
            *(void *)&long long v91 = llvm::jitlink::LinkGraph::allocateContent(v67, (uint64_t)v89);
            *((void *)&v91 + 1) = v68;
            uint64_t v69 = llvm::jitlink::LinkGraph::addExternalSymbol(*((void *)this + 11), v91, v68, 0, 0);
            llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(v86, &v91, v70, v71)[2] = v69;
            uint64_t v74 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(v86, &v91, v72, v73);
            *(void *)(v74[2] + 24) |= 0x1000000000000000uLL;
            do
            {
LABEL_87:
              if (++v45 == v56) {
                goto LABEL_93;
              }
              uint64_t v57 = (void **)*v45;
            }
            while (!*v45);
            if (v45 == v56) {
              goto LABEL_93;
            }
          }
          if (v60 != 3) {
            goto LABEL_87;
          }
          char v96 = 61;
          llvm::StringRef::split(v95, &v96, 1uLL, (uint64_t)&v91);
          long long v94 = v91;
          if (!*((void *)&v91 + 1) || (uint64_t v61 = v93) == 0) {
            llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
          }
          uint64_t v62 = v92;
          *(void *)&long long v91 = 0;
          char v63 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>,llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(*((void *)this + 32), *((_DWORD *)this + 68), (uint64_t)&v94, (unint64_t *)&v91);
          unint64_t v64 = (void *)v91;
          if ((v63 & 1) == 0)
          {
            int v65 = *((_DWORD *)this + 66);
            unsigned int v66 = *((_DWORD *)this + 68);
            if (4 * v65 + 4 >= 3 * v66)
            {
              v66 *= 2;
            }
            else if (v66 + ~v65 - *((_DWORD *)this + 67) > v66 >> 3)
            {
              goto LABEL_82;
            }
            llvm::DenseMap<llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>::grow((uint64_t)this + 256, v66);
            *(void *)&long long v91 = 0;
            llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>,llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(*((void *)this + 32), *((_DWORD *)this + 68), (uint64_t)&v94, (unint64_t *)&v91);
            unint64_t v64 = (void *)v91;
LABEL_82:
            ++*((_DWORD *)this + 66);
            if (*v64 != -1) {
              --*((_DWORD *)this + 67);
            }
            *(_OWORD *)unint64_t v64 = v94;
            _OWORD v64[2] = 0;
            v64[3] = 0;
          }
          _OWORD v64[2] = v62;
          v64[3] = v61;
          goto LABEL_87;
        }
LABEL_93:
        uint64_t v25 = v85;
        *uint64_t v85 = 0;
        uint64_t v27 = v84;
      }
      if (v102)
      {
        unint64_t v75 = v99;
        long long v99 = 0;
        if (v75) {
          (*(void (**)(void *))(*(void *)v75 + 8))(v75);
        }
      }
      else
      {
        llvm::opt::InputArgList::~InputArgList(&v99);
      }
      if (*v25) {
        return;
      }
    }
    uint64_t v76 = *((void *)this + 10);
    uint64_t v77 = *(void *)(v76 + 64);
    if (v77)
    {
      uint64_t v78 = *(unsigned int *)(v77 + 28);
    }
    else
    {
      uint64_t v78 = *(void *)(v76 + 72);
      if (v78) {
        uint64_t v78 = *(void *)(v78 + 24);
      }
    }
    uint64_t v79 = *((void *)this + 11);
    uint64_t v80 = v78 + v32[3];
    unsigned int v81 = v32[9];
    unsigned int v82 = 1 << (((v81 >> 20) & 0xF) - 1);
    if (((v81 >> 20) & 0xF) == 0) {
      unsigned int v82 = 16;
    }
    if ((v81 & 8) != 0) {
      uint64_t v83 = 1;
    }
    else {
      uint64_t v83 = v82;
    }
    long long v99 = v43;
    unsigned int v100 = (void *)v42;
    v89[0] = v80;
    *(void *)&long long v91 = v83;
    v95[0] = 0;
    uint64_t v54 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v79, SectionByName, (uint64_t *)&v99, v89, (unint64_t *)&v91, v95);
LABEL_109:
    *(void *)(*((void *)this + 26) + 8 * i) = v54;
  }
  void *v25 = v97;
}

void llvm::jitlink::COFFLinkGraphBuilder::graphifySymbols(char **this@<X0>, unint64_t *a2@<X3>, const char **a3@<X8>)
{
  uint64_t v5 = (llvm::jitlink::COFFLinkGraphBuilder *)this;
  v223[1] = *MEMORY[0x263EF8340];
  int v6 = this[10];
  uint64_t v7 = *((void *)v6 + 6);
  if (v7)
  {
    int v8 = *(unsigned __int16 *)(v7 + 2);
    if (v8 == 0xFFFF) {
      int v8 = 0;
    }
  }
  else
  {
    int v8 = *(_DWORD *)(*((void *)v6 + 7) + 44);
  }
  unint64_t v9 = (v8 + 1);
  unint64_t v11 = this[7];
  unint64_t v10 = this[8];
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3);
  unint64_t v13 = v9 - v12;
  if (v9 > v12)
  {
    size_t v14 = this[9];
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - v10) >> 3) >= v13)
    {
      int v31 = &v10[24 * v13];
      uint64_t v32 = 24 * v9 - 8 * ((v10 - v11) >> 3);
      uint64_t v33 = v10 + 8;
      do
      {
        *uint64_t v33 = 0;
        v33[1] = 0;
        *(v33 - 1) = v33;
        v33 += 3;
        v32 -= 24;
      }
      while (v32);
      this[8] = v31;
      goto LABEL_35;
    }
    unint64_t v15 = 0x5555555555555556 * ((v14 - v11) >> 3);
    if (v15 <= v9) {
      unint64_t v15 = v9;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - v11) >> 3) >= 0x555555555555555) {
      unint64_t v3 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v3 = v15;
    }
    if (v3 > 0xAAAAAAAAAAAAAAALL) {
LABEL_306:
    }
      std::__throw_bad_array_new_length[abi:nn180100]();
    unint64_t v16 = (char *)operator new(24 * v3);
    unsigned int v17 = &v16[8 * ((v10 - v11) >> 3)];
    uint64_t v18 = &v16[24 * v9];
    uint64_t v19 = v17 + 8;
    uint64_t v20 = 24 * v9 - 8 * ((v10 - v11) >> 3);
    do
    {
      *uint64_t v19 = 0;
      v19[1] = 0;
      *(v19 - 1) = v19;
      v19 += 3;
      v20 -= 24;
    }
    while (v20);
    uint64_t v21 = &v16[24 * v3];
    if (v10 == v11)
    {
      *((void *)v5 + 7) = v17;
      *((void *)v5 + 8) = v18;
      *((void *)v5 + 9) = v21;
      if (!v10) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v22 = 0;
      do
      {
        uint64_t v23 = &v17[v22];
        *((void *)v23 - 3) = *(void *)&v10[v22 - 24];
        uint64_t v24 = &v10[v22 - 16];
        uint64_t v25 = *(void *)v24;
        *(void *)&v17[v22 - 16] = *(void *)v24;
        uint64_t v26 = (uint64_t)&v17[v22 - 16];
        uint64_t v27 = *(void *)&v10[v22 - 8];
        *((void *)v23 - 1) = v27;
        if (v27)
        {
          *(void *)(v25 + 16) = v26;
          *(void *)&v10[v22 - 24] = v24;
          *(void *)uint64_t v24 = 0;
          *(void *)&v10[v22 - 8] = 0;
        }
        else
        {
          *((void *)v23 - 3) = v26;
        }
        v22 -= 24;
      }
      while (&v10[v22] != v11);
      unint64_t v10 = (char *)*((void *)v5 + 7);
      uint64_t v28 = (char *)*((void *)v5 + 8);
      *((void *)v5 + 7) = &v17[v22];
      *((void *)v5 + 8) = v18;
      *((void *)v5 + 9) = v21;
      if (v28 != v10)
      {
        do
        {
          uint64_t v29 = v28 - 24;
          std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)(v28 - 24), *((void **)v28 - 2));
          uint64_t v28 = v29;
        }
        while (v29 != v10);
      }
      if (!v10) {
        goto LABEL_35;
      }
    }
    operator delete(v10);
    goto LABEL_35;
  }
  if (v9 < v12)
  {
    for (uint64_t i = &v11[24 * v9]; v10 != i; v10 -= 24)
      std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)(v10 - 24), *((void **)v10 - 2));
    *((void *)v5 + 8) = i;
  }
LABEL_35:
  uint64_t v34 = *((void *)v5 + 10);
  uint64_t v35 = *(void *)(v34 + 48);
  if (v35)
  {
    int v36 = *(unsigned __int16 *)(v35 + 2);
    if (v36 == 0xFFFF) {
      int v36 = 0;
    }
  }
  else
  {
    int v36 = *(_DWORD *)(*(void *)(v34 + 56) + 44);
  }
  unint64_t v37 = (v36 + 1);
  int v39 = (unsigned char *)*((void *)v5 + 1);
  int v38 = (unsigned char *)*((void *)v5 + 2);
  unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v38 - v39) >> 3);
  unint64_t v41 = v37 - v40;
  if (v37 <= v40)
  {
    if (v37 >= v40) {
      goto LABEL_60;
    }
    unsigned int v49 = &v39[24 * v37];
LABEL_59:
    *((void *)v5 + 2) = v49;
    goto LABEL_60;
  }
  uint64_t v42 = *((void *)v5 + 3);
  if (0xAAAAAAAAAAAAAAABLL * ((v42 - (uint64_t)v38) >> 3) >= v41)
  {
    unsigned int v49 = &v38[24 * v41];
    do
    {
      *int v38 = 0;
      v38[16] = 0;
      v38 += 24;
    }
    while (v38 != v49);
    goto LABEL_59;
  }
  unint64_t v43 = 0x5555555555555556 * ((v42 - (uint64_t)v39) >> 3);
  if (v43 <= v37) {
    unint64_t v43 = v37;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v42 - (uint64_t)v39) >> 3) >= 0x555555555555555) {
    unint64_t v3 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v3 = v43;
  }
  if (v3 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_306;
  }
  uint64_t v44 = (char *)operator new(24 * v3);
  long long v45 = &v44[8 * ((v38 - v39) >> 3)];
  uint64_t v46 = &v44[24 * v37];
  uint64_t v47 = v45;
  do
  {
    *uint64_t v47 = 0;
    v47[16] = 0;
    v47 += 24;
  }
  while (v47 != v46);
  if (v38 != v39)
  {
    do
    {
      long long v48 = *(_OWORD *)(v38 - 24);
      *(v45 - 8) = *(v38 - 8);
      *(_OWORD *)(v45 - 24) = v48;
      v45 -= 24;
      v38 -= 24;
    }
    while (v38 != v39);
    int v38 = v39;
  }
  *((void *)v5 + 1) = v45;
  *((void *)v5 + 2) = v46;
  *((void *)v5 + 3) = &v44[24 * v3];
  if (v38) {
    operator delete(v38);
  }
LABEL_60:
  uint64_t v50 = (void *)*((void *)v5 + 10);
  if (!v50[12] && !v50[13]) {
    goto LABEL_65;
  }
  uint64_t v51 = v50[6];
  if (v51)
  {
    if (*(__int16 *)(v51 + 2) != -1)
    {
      unsigned int v52 = (unsigned int *)(v51 + 12);
      goto LABEL_67;
    }
LABEL_65:
    unint64_t v53 = 0;
    uint64_t v54 = (void *)((char *)v5 + 240);
    uint64_t v55 = *((void *)v5 + 29);
    unint64_t v56 = (*((void *)v5 + 30) - v55) >> 3;
    goto LABEL_79;
  }
  unsigned int v52 = (unsigned int *)(v50[7] + 52);
LABEL_67:
  unint64_t v53 = *v52;
  uint64_t v54 = (void *)((char *)v5 + 240);
  uint64_t v57 = *((void *)v5 + 30);
  uint64_t v55 = *((void *)v5 + 29);
  unint64_t v56 = (v57 - v55) >> 3;
  if (v53 > v56)
  {
    unint64_t v58 = v53 - v56;
    uint64_t v59 = *((void *)v5 + 31);
    if (v53 - v56 > (v59 - v57) >> 3)
    {
      uint64_t v60 = v59 - v55;
      if (v60 >> 2 > v53) {
        unint64_t v53 = v60 >> 2;
      }
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v61 = v53;
      }
      uint64_t v62 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)v5 + 248, v61);
      char v63 = &v62[8 * v56];
      int v65 = &v62[8 * v64];
      bzero(v63, 8 * v58);
      unsigned int v66 = &v63[8 * v58];
      uint64_t v68 = (char *)*((void *)v5 + 29);
      uint64_t v67 = (char *)*((void *)v5 + 30);
      if (v67 != v68)
      {
        do
        {
          uint64_t v69 = *((void *)v67 - 1);
          v67 -= 8;
          *((void *)v63 - 1) = v69;
          v63 -= 8;
        }
        while (v67 != v68);
        uint64_t v67 = (char *)*((void *)v5 + 29);
      }
      *((void *)v5 + 29) = v63;
      *((void *)v5 + 30) = v66;
      *((void *)v5 + 31) = v65;
      if (v67) {
        operator delete(v67);
      }
      goto LABEL_83;
    }
    bzero(*((void **)v5 + 30), 8 * v58);
    uint64_t v70 = v57 + 8 * v58;
    goto LABEL_82;
  }
LABEL_79:
  if (v56 > v53)
  {
    uint64_t v70 = v55 + 8 * v53;
LABEL_82:
    void *v54 = v70;
  }
LABEL_83:
  int v71 = 0;
  int64_t v188 = (uint64_t *)((char *)v5 + 304);
  int64_t v189 = (uint64_t *)((char *)v5 + 280);
  int64_t v190 = v5;
  while (1)
  {
    uint64_t v72 = (void *)*((void *)v5 + 10);
    if (v72[12] || (uint64_t v73 = (_DWORD *)v72[13]) != 0)
    {
      uint64_t v74 = v72[6];
      if (!v74)
      {
        uint64_t v73 = (_DWORD *)(v72[7] + 52);
        goto LABEL_90;
      }
      if (*(__int16 *)(v74 + 2) != -1)
      {
        uint64_t v73 = (_DWORD *)(v74 + 12);
LABEL_90:
        LODWORD(v73) = *v73;
        goto LABEL_92;
      }
      LODWORD(v73) = 0;
    }
LABEL_92:
    if (v71 >= (int)v73) {
      break;
    }
    llvm::object::COFFObjectFile::getSymbol(v72, v71, (uint64_t)&v207);
    if (v209)
    {
      *a3 = (const char *)v207;
      return;
    }
    if (v207) {
      unint64_t v75 = (char *)v207;
    }
    else {
      unint64_t v75 = (char *)v208;
    }
    llvm::object::COFFObjectFile::getSymbolName(v75, *((llvm::object::COFFObjectFile **)v5 + 10), (uint64_t)&v218);
    if (v219)
    {
      if ((void)v218) {
        (*(void (**)(void))(*(void *)v218 + 8))(v218);
      }
      uint64_t v77 = 0;
      std::string::size_type v76 = 0;
    }
    else
    {
      std::string::size_type v76 = *((void *)&v218 + 1);
      uint64_t v77 = v218;
    }
    uint64_t v78 = v207;
    uint64_t v192 = v4;
    if (v207)
    {
      int v79 = *(unsigned __int16 *)(v207 + 12);
      if (v79 >> 8 > 0xFE)
      {
        uint64_t v80 = 0;
        int v195 = (__int16)v79;
        goto LABEL_114;
      }
    }
    else
    {
      int v79 = *(_DWORD *)(v208 + 12);
    }
    int v195 = v79;
    if (v79 < 1)
    {
      uint64_t v80 = 0;
      if (!v207) {
        goto LABEL_109;
      }
    }
    else
    {
      llvm::object::COFFObjectFile::getSection(*((llvm::object **)v5 + 10), v79, (uint64_t)&v216);
      if (v217)
      {
        *(void *)&long long v218 = "{0:d}: ";
        *((void *)&v218 + 1) = 7;
        uint64_t v219 = v223;
        uint64_t v220 = 1;
        unint64_t v221 = &unk_270DBF300;
        BOOL v222 = &v195;
        v223[0] = &v221;
        v196[0] = "Invalid COFF section number:";
        BOOL v197 = &v218;
        __int16 v198 = 1539;
        v199[0] = (uint64_t)v196;
        unsigned int v200 = " (";
        __int16 v201 = 770;
        uint64_t v95 = v216;
        uint64_t v216 = 0;
        uint64_t v193 = v95;
        llvm::toString(&v193, &__p);
        char v96 = v201;
        if (v201 == 1)
        {
          v203[0] = (uint64_t)&__p;
          __int16 v204 = 260;
        }
        else if ((_BYTE)v201)
        {
          if (HIBYTE(v201) != 1) {
            char v96 = 2;
          }
          unsigned int v109 = v199;
          if (HIBYTE(v201) == 1) {
            unsigned int v109 = (uint64_t *)v199[0];
          }
          v203[0] = (uint64_t)v109;
          v203[1] = v199[1];
          v203[2] = (uint64_t)&__p;
          LOBYTE(v204) = v96;
          HIBYTE(v204) = 4;
        }
        else
        {
          __int16 v204 = 256;
        }
        operator new();
      }
      uint64_t v80 = v216;
      uint64_t v78 = v207;
      if (!v207)
      {
LABEL_109:
        uint64_t v81 = v208;
        int v82 = *(unsigned __int8 *)(v208 + 18);
        switch(v82)
        {
          case 2:
            if (!*(_DWORD *)(v208 + 12) && !*(_DWORD *)(v208 + 8)) {
              goto LABEL_193;
            }
            break;
          case 103:
            goto LABEL_181;
          case 105:
            unint64_t v83 = v3;
            uint64_t v84 = (int *)(v208 + 20);
LABEL_136:
            int v99 = *v84;
            int v98 = v84[1];
            unsigned int v101 = (int *)*((void *)v190 + 5);
            unint64_t v100 = *((void *)v190 + 6);
            if ((unint64_t)v101 >= v100)
            {
              uint64_t v103 = (int *)*((void *)v190 + 4);
              uint64_t v104 = ((char *)v101 - (char *)v103) >> 5;
              unint64_t v105 = v104 + 1;
              if ((unint64_t)(v104 + 1) >> 59) {
                abort();
              }
              uint64_t v106 = v100 - (void)v103;
              if (v106 >> 4 > v105) {
                unint64_t v105 = v106 >> 4;
              }
              if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v107 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v107 = v105;
              }
              if (v107)
              {
                if (v107 >> 59) {
                  goto LABEL_306;
                }
                unsigned int v108 = (char *)operator new(32 * v107);
              }
              else
              {
                unsigned int v108 = 0;
              }
              uint64_t v114 = &v108[32 * v104];
              *(_DWORD *)uint64_t v114 = v71;
              *((_DWORD *)v114 + 1) = v99;
              *((_DWORD *)v114 + 2) = v98;
              *((void *)v114 + 2) = v77;
              *((void *)v114 + 3) = v76;
              unint64_t v115 = v114;
              unint64_t v3 = v83;
              if (v101 == v103)
              {
                uint64_t v5 = v190;
              }
              else
              {
                do
                {
                  long long v116 = *((_OWORD *)v101 - 1);
                  *((_OWORD *)v115 - 2) = *((_OWORD *)v101 - 2);
                  *((_OWORD *)v115 - 1) = v116;
                  v115 -= 32;
                  v101 -= 8;
                }
                while (v101 != v103);
                uint64_t v5 = v190;
                unsigned int v101 = (int *)*((void *)v190 + 4);
              }
              char v102 = v114 + 32;
              *((void *)v5 + 4) = v115;
              *((void *)v5 + 5) = v114 + 32;
              *((void *)v5 + 6) = &v108[32 * v107];
              if (v101) {
                operator delete(v101);
              }
            }
            else
            {
              int *v101 = v71;
              v101[1] = v99;
              long long v101[2] = v98;
              char v102 = v101 + 8;
              *((void *)v101 + 2) = v77;
              *((void *)v101 + 3) = v76;
              unint64_t v3 = v83;
              uint64_t v5 = v190;
            }
            *((void *)v5 + 5) = v102;
            goto LABEL_181;
        }
        goto LABEL_120;
      }
    }
LABEL_114:
    int v85 = *(unsigned __int8 *)(v78 + 16);
    if (v85 == 105)
    {
      unint64_t v83 = v3;
      uint64_t v84 = (int *)(v78 + 18);
      goto LABEL_136;
    }
    if (v85 == 103) {
      goto LABEL_181;
    }
    if (v85 == 2 && !*(_WORD *)(v78 + 12) && !*(_DWORD *)(v78 + 8))
    {
      uint64_t v81 = v208;
LABEL_193:
      *(void *)&long long v218 = v77;
      *((void *)&v218 + 1) = v76;
      unsigned int v210 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v189, (uint64_t)&v218, &v210, a2) & 1) == 0)
      {
        unint64_t v122 = (unsigned int *)(v78 + 8);
        if (!v78) {
          unint64_t v122 = (unsigned int *)(v81 + 8);
        }
        size_t v123 = llvm::jitlink::LinkGraph::addExternalSymbol(*((void *)v5 + 11), v218, *((uint64_t *)&v218 + 1), *v122, 0);
        llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(v189, &v218, v124, v125)[2] = v123;
      }
      a2 = (unint64_t *)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(v189, &v218, v120, v121)[2];
      if (!a2) {
        goto LABEL_181;
      }
LABEL_170:
      llvm::jitlink::COFFLinkGraphBuilder::setGraphSymbol((uint64_t *)v5, v195, v71, (unint64_t)a2);
      goto LABEL_181;
    }
    uint64_t v81 = v208;
LABEL_120:
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v76;
    uint64_t v216 = v78;
    uint64_t v217 = v81;
    int v202 = v71;
    if (llvm::object::COFFSymbolRef::isCommon((llvm::object::COFFSymbolRef *)&v216))
    {
      uint64_t v86 = *((void *)v5 + 11);
      uint64_t v87 = *((void *)v5 + 25);
      if (!v87) {
        llvm::jitlink::LinkGraph::createSection();
      }
      uint64_t v88 = v216;
      if (!v216) {
        uint64_t v88 = v217;
      }
      uint64_t v89 = *(unsigned int *)(v88 + 8);
      *(void *)&long long v218 = 0;
      unsigned int v210 = (const char *)v89;
      v203[0] = v89;
      v199[0] = 0;
      __int16 v90 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v86, v87, (uint64_t *)&v210, (uint64_t *)&v218, (unint64_t *)v203, v199);
      uint64_t v91 = v216;
      if (!v216) {
        uint64_t v91 = v217;
      }
      uint64_t v92 = *(unsigned int *)(v91 + 8);
      uint64_t v93 = (char *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v86, 40, 3);
      *(void *)uint64_t v93 = v77;
      *((void *)v93 + 1) = v76;
      *((void *)v93 + 2) = v90;
      *((void *)v93 + 3) = 0x200000000000000;
      *((void *)v93 + 4) = v92;
      uint64_t v94 = v90[2] + 56;
      unsigned int v210 = v93;
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v94, &v210, (uint64_t)&v218);
      v206 &= ~1u;
      uint64_t v205 = (unint64_t *)v93;
      goto LABEL_167;
    }
    if (v216)
    {
      int v97 = *(unsigned __int16 *)(v216 + 12);
      if (v97 == 0xFFFF)
      {
        size_t v113 = (unsigned int *)(v216 + 8);
LABEL_191:
        uint64_t v4 = v192;
        unsigned int v119 = llvm::jitlink::LinkGraph::addAbsoluteSymbol(*((void *)v5 + 11), v77, v76, *v113, 0, 0, 2, 0);
        v206 &= ~1u;
        uint64_t v205 = v119;
        goto LABEL_168;
      }
      if ((unsigned __int16)(v97 + 256) < 0x101u) {
        goto LABEL_134;
      }
    }
    else
    {
      int v97 = *(_DWORD *)(v217 + 12);
      if (v97 == -1)
      {
        size_t v113 = (unsigned int *)(v217 + 8);
        goto LABEL_191;
      }
      if (v97 <= 0)
      {
LABEL_134:
        *(void *)&long long v218 = "{0:d}";
        *((void *)&v218 + 1) = 5;
        uint64_t v219 = v223;
        uint64_t v220 = 1;
        unint64_t v221 = &unk_270DBF300;
        BOOL v222 = &v202;
        v223[0] = &v221;
        operator new();
      }
    }
    if (v97 >= (int)((*((void *)v5 + 30) - *((void *)v5 + 29)) >> 3)
      || (uint64_t v110 = *(void *)(*((void *)v5 + 26) + 8 * v97)) == 0)
    {
      v206 &= ~1u;
      uint64_t v205 = 0;
LABEL_167:
      uint64_t v4 = v192;
      goto LABEL_168;
    }
    if (v216)
    {
      int v111 = *(unsigned __int8 *)(v216 + 16);
      if (v111 != 2)
      {
        if (v111 != 3)
        {
          if (v111 != 6) {
            goto LABEL_202;
          }
LABEL_207:
          BOOL v128 = (unsigned int *)(v216 + 8);
          unsigned int v129 = (_WORD *)(v216 + 14);
LABEL_214:
          uint64_t v133 = llvm::jitlink::LinkGraph::addDefinedSymbol(*((void *)v5 + 11), v110, *v128, v77, v76, 0, 0, 2, (*v129 & 0xF0) == 32, 0);
          v206 &= ~1u;
          uint64_t v205 = v133;
          goto LABEL_167;
        }
        if (!*(unsigned char *)(v216 + 17) || (*(unsigned char *)(v80 + 37) & 0x10) == 0) {
          goto LABEL_207;
        }
        if (*(unsigned char *)(v216 + 32) == 5)
        {
          unint64_t v135 = *(unsigned __int16 *)(v216 + 30);
          uint64_t v136 = (unsigned int *)(v216 + 8);
          unint64_t v137 = (_WORD *)(v216 + 14);
LABEL_225:
          uint64_t v4 = v192;
          unsigned int v130 = llvm::jitlink::LinkGraph::addDefinedSymbol(*((void *)v5 + 11), v110, *v136, v77, v76, 0, 0, 2, (*v137 & 0xF0) == 32, 0);
          if ((int)v135 < 1 || (int)v135 >= (int)((*((void *)v5 + 30) - *((void *)v5 + 29)) >> 3)) {
            BOOL v139 = 0;
          }
          else {
            BOOL v139 = *(void **)(*((void *)v5 + 26) + 8 * v135);
          }
          llvm::jitlink::Block::addEdge(v139, 1, 0, (uint64_t)v130, 0);
LABEL_230:
          v206 &= ~1u;
          uint64_t v205 = v130;
          goto LABEL_168;
        }
        unsigned int v140 = (unsigned int *)(v216 + 18);
        unsigned int v141 = *(unsigned __int16 *)(v216 + 12);
        if (v141 >> 8 >= 0xFF) {
          unsigned int v141 = (__int16)v141;
        }
        goto LABEL_234;
      }
      if ((*(unsigned char *)(v80 + 37) & 0x10) == 0)
      {
        unint64_t v126 = (unsigned int *)(v216 + 8);
        unint64_t v127 = (_WORD *)(v216 + 14);
LABEL_210:
        uint64_t v4 = v192;
        unsigned int v130 = llvm::jitlink::LinkGraph::addDefinedSymbol(*((void *)v5 + 11), v110, *v126, v77, v76, 0, 0, 0, (*v127 & 0xF0) == 32, 0);
        llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(v188, &__p, v131, v132)[2] = v130;
        goto LABEL_230;
      }
      unsigned int v134 = *(unsigned __int16 *)(v216 + 12);
      uint64_t v4 = v192;
      if (v134 >> 8 > 0xFE) {
        unsigned int v134 = (__int16)v134;
      }
    }
    else
    {
      int v111 = *(unsigned __int8 *)(v217 + 18);
      if (v111 != 2)
      {
        if (v111 != 3)
        {
          if (v111 != 6)
          {
LABEL_202:
            *(void *)&long long v218 = "{0:d}";
            *((void *)&v218 + 1) = 5;
            uint64_t v219 = v223;
            uint64_t v220 = 1;
            unint64_t v221 = &unk_270DBE9A0;
            LOBYTE(v222) = v111;
            v223[0] = &v221;
            v196[0] = "Unsupported storage class ";
            BOOL v197 = &v218;
            __int16 v198 = 1539;
            v199[0] = (uint64_t)v196;
            unsigned int v200 = " in symbol ";
            __int16 v201 = 770;
            unsigned int v210 = "{0:d}";
            uint64_t v211 = 5;
            unsigned int v212 = &v215;
            uint64_t v213 = 1;
            v214[0] = &unk_270DBF300;
            v214[1] = &v202;
            v215 = v214;
            operator new();
          }
LABEL_213:
          BOOL v128 = (unsigned int *)(v217 + 8);
          unsigned int v129 = (_WORD *)(v217 + 16);
          goto LABEL_214;
        }
        if (!*(unsigned char *)(v217 + 19) || (*(unsigned char *)(v80 + 37) & 0x10) == 0) {
          goto LABEL_213;
        }
        if (*(unsigned char *)(v217 + 34) == 5)
        {
          unint64_t v135 = *(unsigned __int16 *)(v217 + 32) | ((unint64_t)*(unsigned __int16 *)(v217 + 36) << 16);
          uint64_t v136 = (unsigned int *)(v217 + 8);
          unint64_t v137 = (_WORD *)(v217 + 16);
          goto LABEL_225;
        }
        unsigned int v140 = (unsigned int *)(v217 + 20);
        unsigned int v141 = *(_DWORD *)(v217 + 12);
LABEL_234:
        uint64_t v4 = v192;
        if (*(unsigned char *)(*((void *)v5 + 1) + 24 * (int)v141 + 16))
        {
          unint64_t v138 = "COMDAT export request already exists before symbol ";
LABEL_236:
          v203[0] = (uint64_t)v138;
          __int16 v204 = 259;
          *(void *)&long long v218 = "{0:d}";
          *((void *)&v218 + 1) = 5;
          uint64_t v219 = v223;
          uint64_t v220 = 1;
          unint64_t v221 = &unk_270DBF300;
          BOOL v222 = &v202;
          v223[0] = &v221;
          __int16 v201 = 262;
          v199[0] = (uint64_t)&v218;
          llvm::operator+(v203, v199, (uint64_t)&v210);
          llvm::make_error<llvm::jitlink::JITLinkError,llvm::Twine>();
        }
        llvm::jitlink::COFFLinkGraphBuilder::createCOMDATExportRequest((uint64_t)&v205, (uint64_t)v5, v71, v216, v217, v140);
        goto LABEL_168;
      }
      if ((*(unsigned char *)(v80 + 37) & 0x10) == 0)
      {
        unint64_t v126 = (unsigned int *)(v217 + 8);
        unint64_t v127 = (_WORD *)(v217 + 16);
        goto LABEL_210;
      }
      unsigned int v134 = *(_DWORD *)(v217 + 12);
      uint64_t v4 = v192;
    }
    if (!*(unsigned char *)(*((void *)v5 + 1) + 24 * (int)v134 + 16))
    {
      unint64_t v138 = "No pending COMDAT export for symbol ";
      goto LABEL_236;
    }
    llvm::jitlink::COFFLinkGraphBuilder::exportCOMDATSymbol((uint64_t)&v205, (uint64_t *)v5, v77, v76, v216, v217);
LABEL_168:
    if (v206)
    {
      char v112 = 0;
      *a3 = (const char *)v205;
      goto LABEL_185;
    }
    a2 = v205;
    if (v205) {
      goto LABEL_170;
    }
LABEL_181:
    if (v207) {
      BOOL v117 = (unsigned __int8 *)(v207 + 17);
    }
    else {
      BOOL v117 = (unsigned __int8 *)(v208 + 19);
    }
    v71 += *v117;
    char v112 = 1;
    uint64_t v4 = v192;
LABEL_185:
    if (v209)
    {
      uint64_t v118 = v207;
      uint64_t v207 = 0;
      if (v118) {
        (*(void (**)(uint64_t))(*(void *)v118 + 8))(v118);
      }
    }
    ++v71;
    if ((v112 & 1) == 0) {
      return;
    }
  }
  uint64_t v142 = *((void *)v5 + 4);
  uint64_t v143 = *((void *)v5 + 5);
  if (v142 == v143)
  {
LABEL_255:
    *a3 = 0;
    goto LABEL_256;
  }
  while (1)
  {
    uint64_t v144 = *(unsigned int *)(v142 + 4);
    if ((v144 & 0x80000000) != 0
      || (uint64_t v145 = *((void *)v5 + 29), (int)v144 >= (int)((unint64_t)(*((void *)v5 + 30) - v145) >> 3))
      || (unint64_t v146 = *(void **)(v145 + 8 * v144)) == 0)
    {
      *(void *)&long long v218 = "{0:d}";
      *((void *)&v218 + 1) = 5;
      uint64_t v219 = v223;
      uint64_t v220 = 1;
      unint64_t v221 = &unk_270DBF300;
      BOOL v222 = (int *)v142;
      v223[0] = &v221;
      operator new();
    }
    llvm::object::COFFObjectFile::getSymbol(*((void **)v5 + 10), *(_DWORD *)v142, (uint64_t)&v210);
    if (v212)
    {
      size_t v187 = v210;
      *a3 = v210;
      goto LABEL_304;
    }
    uint64_t v147 = v146[2];
    uint64_t v148 = *(void *)(v147 + 8);
    if ((v148 & 1) == 0) {
      operator new();
    }
    unint64_t v149 = llvm::jitlink::LinkGraph::addDefinedSymbol(*((void *)v5 + 11), v147, v146[3] & 0x1FFFFFFFFFFFFFFLL, *(void *)(v142 + 16), *(void *)(v142 + 24), v146[4], 1, 2 * (*(_DWORD *)(v142 + 8) != 3), (v146[3] & 0x2000000000000000) != 0, 0);
    if (v210)
    {
      unsigned int v150 = *((unsigned __int16 *)v210 + 6);
      if (v150 >> 8 <= 0xFE) {
        int v151 = *((unsigned __int16 *)v210 + 6);
      }
      else {
        int v151 = (__int16)v150;
      }
    }
    else
    {
      int v151 = *(_DWORD *)(v211 + 12);
    }
    llvm::jitlink::COFFLinkGraphBuilder::setGraphSymbol((uint64_t *)v5, v151, *(_DWORD *)v142, (unint64_t)v149);
    if (v212)
    {
      uint64_t v152 = (uint64_t)v210;
      unsigned int v210 = 0;
      if (v152) {
        (*(void (**)(uint64_t))(*(void *)v152 + 8))(v152);
      }
    }
    if ((v148 & 1) == 0) {
      break;
    }
    v142 += 32;
    if (v142 == v143) {
      goto LABEL_255;
    }
  }
  size_t v187 = *a3;
LABEL_304:
  if (!v187)
  {
LABEL_256:
    unsigned int v153 = v189;
    if (*((_DWORD *)v5 + 66))
    {
      uint64_t v154 = *((unsigned int *)v5 + 68);
      if (v154)
      {
        uint64_t v155 = 32 * v154;
        char v156 = (_OWORD *)*((void *)v5 + 32);
        while (*(void *)v156 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v156 += 2;
          v155 -= 32;
          if (!v155) {
            goto LABEL_261;
          }
        }
      }
      else
      {
        char v156 = (_OWORD *)*((void *)v5 + 32);
      }
      uint64_t v178 = *((void *)v5 + 32) + 32 * v154;
LABEL_295:
      if (v156 != (_OWORD *)v178)
      {
        *(void *)&long long v218 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v188, (uint64_t)(v156 + 1), &v218, a2))
        {
          *(void *)&long long v218 = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v153, (uint64_t)v156, &v218, a2))
          {
            unint64_t v180 = (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(v188, v156 + 1, v179, a2)[2];
            BOOL v183 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(v189, v156, v181, v182);
            uint64_t v184 = v180[2];
            uint64_t v185 = v180[3] & 0x1FFFFFFFFFFFFFFLL;
            uint64_t v186 = v180[4];
            unsigned int v153 = v189;
            llvm::jitlink::LinkGraph::makeDefined(*((void *)v5 + 11), (void *)v183[2], v184, v185, v186, 1, 2, 0);
          }
        }
        while (1)
        {
          v156 += 2;
          if (v156 == (_OWORD *)v178) {
            break;
          }
          if (*(void *)v156 < 0xFFFFFFFFFFFFFFFELL) {
            goto LABEL_295;
          }
        }
      }
    }
LABEL_261:
    uint64_t v157 = *((void *)v5 + 10);
    uint64_t v158 = *(void *)(v157 + 48);
    uint64_t v159 = 1;
    if (!v158) {
      goto LABEL_265;
    }
LABEL_262:
    int v160 = *(unsigned __int16 *)(v158 + 2);
    if (v160 == 0xFFFF) {
      int v160 = 0;
    }
    while (1)
    {
      if (v159 > v160)
      {
        *a3 = 0;
        return;
      }
      uint64_t v161 = (void *)(*((void *)v5 + 7) + 24 * v159);
      if (v161[2])
      {
        uint64_t v164 = (void *)*v161;
        uint64_t v163 = v161 + 1;
        uint64_t v162 = v164;
        if (v163 != v164) {
          break;
        }
      }
LABEL_288:
      ++v159;
      if (v158) {
        goto LABEL_262;
      }
LABEL_265:
      int v160 = *(_DWORD *)(*(void *)(v157 + 56) + 44);
    }
    uint64_t v165 = 0;
    uint64_t v166 = *(void *)(*(void *)(*((void *)v5 + 26) + 8 * v159) + 32);
    while (1)
    {
      unint64_t v167 = (void *)*v163;
      BOOL v168 = (void *)*v163;
      unsigned int v169 = v163;
      if (*v163)
      {
        do
        {
          unsigned int v170 = v168;
          BOOL v168 = (void *)v168[1];
        }
        while (v168);
      }
      else
      {
        do
        {
          unsigned int v170 = (void *)v169[2];
          BOOL v171 = *v170 == (void)v169;
          unsigned int v169 = v170;
        }
        while (v171);
      }
      unsigned int v172 = (void *)*v163;
      unsigned int v173 = v163;
      if (v167)
      {
        do
        {
          size_t v174 = v172;
          unsigned int v172 = (void *)v172[1];
        }
        while (v172);
      }
      else
      {
        do
        {
          size_t v174 = (void *)v173[2];
          BOOL v171 = *v174 == (void)v173;
          unsigned int v173 = v174;
        }
        while (v171);
      }
      uint64_t v175 = v170[4];
      uint64_t v176 = v174[5];
      if ((*(void *)(v176 + 24) & 0x1FFFFFFFFFFFFFFLL) != v166) {
        uint64_t v165 = v166 - v175;
      }
      if (*(void *)(v176 + 32))
      {
        if (v167) {
          goto LABEL_284;
        }
      }
      else
      {
        *(void *)(v176 + 32) = v165;
        if (v167)
        {
          do
          {
LABEL_284:
            unint64_t v177 = v167;
            unint64_t v167 = (void *)v167[1];
          }
          while (v167);
          goto LABEL_287;
        }
      }
      do
      {
        unint64_t v177 = (void *)v163[2];
        BOOL v171 = *v177 == (void)v163;
        uint64_t v163 = v177;
      }
      while (v171);
LABEL_287:
      uint64_t v166 = v175;
      uint64_t v163 = v177;
      if (v177 == v162) {
        goto LABEL_288;
      }
    }
  }
}

uint64_t *llvm::jitlink::COFFLinkGraphBuilder::setGraphSymbol(uint64_t *result, int a2, int a3, unint64_t a4)
{
  *(void *)(result[29] + 8 * a3) = a4;
  if (a2 >= 1)
  {
    uint64_t v5 = result[7] + 24 * a2;
    unint64_t v6 = *(void *)(a4 + 24) & 0x1FFFFFFFFFFFFFFLL;
    int v8 = (uint64_t **)(v5 + 8);
    uint64_t v7 = *(uint64_t **)(v5 + 8);
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = (uint64_t **)v7;
          unint64_t v10 = v7[4];
          if (v10 <= v6) {
            break;
          }
LABEL_6:
          uint64_t v7 = *v9;
          int v8 = v9;
          if (!*v9) {
            goto LABEL_12;
          }
        }
        if (v10 >= v6)
        {
          unint64_t v11 = v9[5];
          if ((unint64_t)v11 > a4) {
            goto LABEL_6;
          }
          if ((unint64_t)v11 >= a4) {
            return result;
          }
        }
        uint64_t v7 = v9[1];
        if (!v7)
        {
          int v8 = v9 + 1;
          goto LABEL_12;
        }
      }
    }
    unint64_t v9 = (uint64_t **)(v5 + 8);
LABEL_12:
    unint64_t v12 = (uint64_t *)operator new(0x30uLL);
    void v12[4] = v6;
    uint64_t v12[5] = a4;
    *unint64_t v12 = 0;
    v12[1] = 0;
    uint64_t v12[2] = (uint64_t)v9;
    *int v8 = v12;
    uint64_t v13 = **(void **)v5;
    if (v13)
    {
      *(void *)uint64_t v5 = v13;
      size_t v14 = *v8;
    }
    else
    {
      size_t v14 = v12;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 8), v14);
    ++*(void *)(v5 + 16);
  }
  return result;
}

BOOL llvm::object::COFFSymbolRef::isCommon(llvm::object::COFFSymbolRef *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this)
  {
    uint64_t v1 = *((void *)this + 1);
    int v4 = *(unsigned __int8 *)(v1 + 18);
    if ((v4 == 2 || v4 == 104) && !*(_DWORD *)(v1 + 12)) {
      return *(_DWORD *)(v1 + 8) != 0;
    }
    return 0;
  }
  int v2 = *(unsigned __int8 *)(v1 + 16);
  BOOL v3 = v2 == 104 || v2 == 2;
  if (!v3 || *(_WORD *)(v1 + 12)) {
    return 0;
  }
  return *(_DWORD *)(v1 + 8) != 0;
}

void *llvm::jitlink::COFFLinkGraphBuilder::exportCOMDATSymbol(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)&long long v22 = a3;
  *((void *)&v22 + 1) = a4;
  if (a5)
  {
    LODWORD(v10) = *(unsigned __int16 *)(a5 + 12);
    if (v10 >> 8 > 0xFE)
    {
      uint64_t v11 = 0;
      unint64_t v12 = a2 + 1;
      goto LABEL_11;
    }
  }
  else
  {
    LODWORD(v10) = *(_DWORD *)(a6 + 12);
  }
  if ((int)v10 < 1 || (int)v10 >= (int)((unint64_t)(a2[30] - a2[29]) >> 3)) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(a2[26] + 8 * v10);
  }
  unint64_t v12 = a2 + 1;
  if (!a5)
  {
    uint64_t v13 = *v12 + 24 * *(int *)(a6 + 12);
    size_t v14 = (unsigned int *)(a6 + 8);
    unint64_t v15 = (_WORD *)(a6 + 16);
    goto LABEL_16;
  }
  LODWORD(v10) = *(unsigned __int16 *)(a5 + 12);
LABEL_11:
  if (v10 >> 8 >= 0xFF) {
    uint64_t v10 = (__int16)v10;
  }
  else {
    uint64_t v10 = v10;
  }
  uint64_t v13 = *v12 + 24 * v10;
  size_t v14 = (unsigned int *)(a5 + 8);
  unint64_t v15 = (_WORD *)(a5 + 14);
LABEL_16:
  unint64_t v16 = llvm::jitlink::LinkGraph::addDefinedSymbol(a2[11], v11, *v14, a3, a4, 0, *(unsigned char *)(v13 + 4), 0, (*v15 & 0xF0) == 32, 0);
  if (a5)
  {
    unsigned int v17 = *(unsigned __int16 *)(a5 + 12);
    if (v17 >> 8 <= 0xFE) {
      int v18 = *(unsigned __int16 *)(a5 + 12);
    }
    else {
      int v18 = (__int16)v17;
    }
  }
  else
  {
    int v18 = *(_DWORD *)(a6 + 12);
  }
  llvm::jitlink::COFFLinkGraphBuilder::setGraphSymbol(a2, v18, *(_DWORD *)v13, (unint64_t)v16);
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(a2 + 38, &v22, v19, v20);
  result[2] = v16;
  if (*(unsigned char *)(v13 + 16)) {
    *(unsigned char *)(v13 + 16) = 0;
  }
  *(unsigned char *)(a1 + 8) &= ~1u;
  *(void *)a1 = v16;
  return result;
}

uint64_t llvm::jitlink::COFFLinkGraphBuilder::createCOMDATExportRequest(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  char v6 = 0;
  switch(*((unsigned char *)a6 + 14))
  {
    case 1:
      break;
    case 2:
    case 3:
    case 4:
    case 6:
      char v6 = 1;
      break;
    case 7:
      llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>();
    default:
      v11[0] = &unk_270DBF330;
      v11[1] = (char *)a6 + 14;
      long long v11[2] = v11;
      operator new();
  }
  uint64_t v7 = *a6;
  if (a4)
  {
    unsigned int v8 = *(unsigned __int16 *)(a4 + 12);
    if (v8 >> 8 > 0xFE) {
      unsigned int v8 = (__int16)v8;
    }
  }
  else
  {
    unsigned int v8 = *(_DWORD *)(a5 + 12);
  }
  uint64_t v9 = *(void *)(a2 + 8) + 24 * (int)v8;
  int v10 = *(unsigned __int8 *)(v9 + 16);
  *(_DWORD *)uint64_t v9 = a3;
  *(unsigned char *)(v9 + 4) = v6;
  *(void *)(v9 + 8) = v7;
  if (!v10) {
    *(unsigned char *)(v9 + 16) = 1;
  }
  *(unsigned char *)(result + 8) &= ~1u;
  *(void *)uint64_t result = 0;
  return result;
}

void std::vector<std::set<std::pair<unsigned long long,llvm::jitlink::Symbol *>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 24;
        std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
        int v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void llvm::detail::provider_format_adapter<int &>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<int &>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<int,void>::format(*(unsigned int **)(a1 + 8), a2, a3, a4);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>,llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(uint64_t a1, int a2, uint64_t a3, unint64_t *a4)
{
  if (a2)
  {
    unsigned int v7 = a2 - 1;
    uint64_t v8 = (a2 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a3, *(void *)a3 + *(void *)(a3 + 8), a3, a4);
    unint64_t v9 = a1 + 32 * v8;
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a3, *(void *)(a3 + 8), *(void **)v9, *(void *)(v9 + 8)))
    {
      uint64_t result = 1;
    }
    else
    {
      unint64_t v11 = 0;
      int v12 = 1;
      int v13 = v8;
      while (*(void *)v9 != -1)
      {
        if (v11) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = *(void *)v9 == -2;
        }
        if (v14) {
          unint64_t v15 = v9;
        }
        else {
          unint64_t v15 = v11;
        }
        int v16 = v12 + 1;
        uint64_t v17 = (v13 + v12) & v7;
        unint64_t v9 = a1 + 32 * v17;
        BOOL isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a3, *(void *)(a3 + 8), *(void **)v9, *(void *)(v9 + 8));
        int v13 = v17;
        unint64_t v11 = v15;
        BOOL v19 = isEqual;
        uint64_t result = 1;
        int v12 = v16;
        if (v19) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v11) {
        unint64_t v9 = v11;
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a4 = v9;
  return result;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        *uint64_t result = xmmword_261E8A6B0;
        result += 2;
        v11 -= 32;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 32 * v3;
      int v13 = (_OWORD *)v4;
      do
      {
        if (*(void *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>,llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(*(void *)a1, *(_DWORD *)(a1 + 16), (uint64_t)v13, (unint64_t *)&v17);
          BOOL v14 = v17;
          *uint64_t v17 = *v13;
          v14[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = 32 * v15;
    do
    {
      *uint64_t result = xmmword_261E8A6B0;
      result += 2;
      v16 -= 32;
    }
    while (v16);
  }
  return result;
}

void llvm::detail::provider_format_adapter<unsigned char const&>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned char const&>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned char,void>::format(*(unsigned __int8 **)(a1 + 8), a2, a3, a4);
}

const char *llvm::jitlink::getCOFFX86RelocationKindName(llvm::jitlink *this)
{
  if ((this - 25) >= 5) {
    return llvm::jitlink::x86_64::getEdgeKindName(this);
  }
  else {
    return off_2655927B0[(char)((_BYTE)this - 25)];
  }
}

void llvm::jitlink::createLinkGraphFromCOFFObject_x86_64(long long *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  long long v1 = a1[1];
  long long v2 = *a1;
  long long v3 = v1;
  llvm::object::COFFObjectFile::create();
}

void llvm::jitlink::link_COFF_x86_64(void *a1, void *a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v45 = 0;
  long long v44 = 0u;
  memset(v43, 0, sizeof(v43));
  memset(v42, 0, sizeof(v42));
  int64x2_t v41 = 0u;
  if ((*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 56))(*a2, *a1 + 120))
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 64))(&v52);
    if ((unint64_t)v53 < 8)
    {
      *(void *)&long long v50 = llvm::jitlink::markAllSymbolsLive;
      uint64_t v51 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
          + 2;
      if (v41.i64[1] < *(void *)&v42[0])
      {
        uint64_t v4 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v41.i64[1], &v50)+ 32;
LABEL_49:
        v41.i64[1] = v4;
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v50);
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v52);
        *(void *)&long long v52 = *a2;
        unint64_t v53 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::link_COFF_x86_64(std::unique_ptr<llvm::jitlink::LinkGraph>,std::unique_ptr<llvm::jitlink::JITLinkContext>)::$_0,llvm::jitlink::link_COFF_x86_64(std::unique_ptr<llvm::jitlink::LinkGraph>,std::unique_ptr<llvm::jitlink::JITLinkContext>)::$_0,void>::Callbacks
            + 2;
        if (*(void *)&v43[2] < *((void *)&v43[2] + 1))
        {
          uint64_t v28 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v43[2], &v52)+ 32;
LABEL_65:
          *(void *)&void v43[2] = v28;
          llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v52);
          goto LABEL_66;
        }
        uint64_t v29 = (uint64_t)(*(void *)&v43[2] - *((void *)&v43[1] + 1)) >> 5;
        if (!((unint64_t)(v29 + 1) >> 59))
        {
          unint64_t v30 = (uint64_t)(*((void *)&v43[2] + 1) - *((void *)&v43[1] + 1)) >> 4;
          if (v30 <= v29 + 1) {
            unint64_t v30 = v29 + 1;
          }
          if (*((void *)&v43[2] + 1) - *((void *)&v43[1] + 1) >= 0x7FFFFFFFFFFFFFE0uLL) {
            unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v30;
          }
          unsigned int v49 = (char *)&v43[2] + 8;
          if (v31) {
            uint64_t v32 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v43[2] + 8, v31);
          }
          else {
            uint64_t v32 = 0;
          }
          uint64_t v33 = (uint64_t)&v32[4 * v29];
          uint64_t v46 = v32;
          v47.i64[0] = v33;
          long long v48 = &v32[4 * v31];
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v33, &v52);
          uint64_t v28 = v33 + 32;
          v47.i64[1] = v33 + 32;
          uint64_t v35 = (long long *)*((void *)&v43[1] + 1);
          uint64_t v34 = *(long long **)&v43[2];
          uint64_t v36 = v47.i64[0];
          if (*(void *)&v43[2] == *((void *)&v43[1] + 1))
          {
            int64x2_t v37 = vdupq_n_s64(*(unint64_t *)&v43[2]);
          }
          else
          {
            do
            {
              v34 -= 2;
              uint64_t v36 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v36 - 32, v34);
            }
            while (v34 != v35);
            int64x2_t v37 = *(int64x2_t *)((char *)&v43[1] + 8);
            uint64_t v28 = v47.i64[1];
          }
          *((void *)&v43[1] + 1) = v36;
          *(void *)&void v43[2] = v28;
          int64x2_t v47 = v37;
          int v38 = (void **)*((void *)&v43[2] + 1);
          *((void *)&v43[2] + 1) = v48;
          long long v48 = v38;
          uint64_t v46 = (void **)v37.i64[0];
          std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v46);
          goto LABEL_65;
        }
LABEL_73:
        abort();
      }
      uint64_t v9 = (v41.i64[1] - v41.i64[0]) >> 5;
      if ((unint64_t)(v9 + 1) >> 59) {
        goto LABEL_73;
      }
      unint64_t v10 = (*(void *)&v42[0] - v41.i64[0]) >> 4;
      if (v10 <= v9 + 1) {
        unint64_t v10 = v9 + 1;
      }
      if (*(void *)&v42[0] - v41.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      unsigned int v49 = (char *)v42;
      if (v11) {
        uint64_t v12 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v42, v11);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v17 = (uint64_t)&v12[4 * v9];
      uint64_t v46 = v12;
      v47.i64[0] = v17;
      long long v48 = &v12[4 * v11];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v17, &v50);
      uint64_t v4 = v17 + 32;
      v47.i64[1] = v17 + 32;
      int v18 = (long long *)v41.i64[1];
      uint64_t v19 = v47.i64[0];
      if (v41.i64[1] != v41.i64[0])
      {
        do
        {
          v18 -= 2;
          uint64_t v19 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v19 - 32, v18);
        }
        while (v18 != (long long *)v41.i64[0]);
        goto LABEL_46;
      }
    }
    else
    {
      if (v41.i64[1] >= *(void *)&v42[0])
      {
        uint64_t v5 = (v41.i64[1] - v41.i64[0]) >> 5;
        if ((unint64_t)(v5 + 1) >> 59) {
          goto LABEL_73;
        }
        unint64_t v6 = (*(void *)&v42[0] - v41.i64[0]) >> 4;
        if (v6 <= v5 + 1) {
          unint64_t v6 = v5 + 1;
        }
        if (*(void *)&v42[0] - v41.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v7 = v6;
        }
        unsigned int v49 = (char *)v42;
        if (v7) {
          unsigned int v8 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v42, v7);
        }
        else {
          unsigned int v8 = 0;
        }
        uint64_t v13 = (uint64_t)&v8[4 * v5];
        uint64_t v46 = v8;
        v47.i64[0] = v13;
        long long v48 = &v8[4 * v7];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v13, &v52);
        unint64_t v3 = v13 + 32;
        v47.i64[1] = v3;
        BOOL v14 = (long long *)v41.i64[1];
        uint64_t v15 = v47.i64[0];
        if (v41.i64[1] == v41.i64[0])
        {
          int64x2_t v16 = vdupq_n_s64(v41.u64[1]);
        }
        else
        {
          do
          {
            v14 -= 2;
            uint64_t v15 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v15 - 32, v14);
          }
          while (v14 != (long long *)v41.i64[0]);
          int64x2_t v16 = v41;
          unint64_t v3 = v47.u64[1];
        }
        v41.i64[0] = v15;
        v41.i64[1] = v3;
        int64x2_t v47 = v16;
        uint64_t v20 = *(void ***)&v42[0];
        *(void *)&v42[0] = v48;
        long long v48 = v20;
        uint64_t v46 = (void **)v16.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v46);
      }
      else
      {
        unint64_t v3 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v41.i64[1], &v52)+ 32;
      }
      v41.i64[1] = v3;
      *(void *)&long long v50 = ".pdata";
      *((void *)&v50 + 1) = 6;
      uint64_t v51 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::SEHFrameKeepAlivePass,llvm::jitlink::SEHFrameKeepAlivePass,void>::Callbacks
          + 2;
      if (v3 < *(void *)&v42[0])
      {
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v3, &v50);
        uint64_t v4 = v3 + 32;
        goto LABEL_49;
      }
      uint64_t v21 = (uint64_t)(v3 - v41.i64[0]) >> 5;
      if ((unint64_t)(v21 + 1) >> 59) {
        goto LABEL_73;
      }
      unint64_t v22 = (*(void *)&v42[0] - v41.i64[0]) >> 4;
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      if (*(void *)&v42[0] - v41.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      unsigned int v49 = (char *)v42;
      if (v23) {
        uint64_t v24 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v42, v23);
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = (uint64_t)&v24[4 * v21];
      uint64_t v46 = v24;
      v47.i64[0] = v25;
      long long v48 = &v24[4 * v23];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v25, &v50);
      uint64_t v4 = v25 + 32;
      v47.i64[1] = v25 + 32;
      int v18 = (long long *)v41.i64[1];
      uint64_t v19 = v47.i64[0];
      if (v41.i64[1] != v41.i64[0])
      {
        do
        {
          v18 -= 2;
          uint64_t v19 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v19 - 32, v18);
        }
        while (v18 != (long long *)v41.i64[0]);
LABEL_46:
        int64x2_t v26 = v41;
        uint64_t v4 = v47.i64[1];
LABEL_48:
        v41.i64[0] = v19;
        v41.i64[1] = v4;
        int64x2_t v47 = v26;
        uint64_t v27 = *(void ***)&v42[0];
        *(void *)&v42[0] = v48;
        long long v48 = v27;
        uint64_t v46 = (void **)v26.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v46);
        goto LABEL_49;
      }
    }
    int64x2_t v26 = vdupq_n_s64((unint64_t)v18);
    goto LABEL_48;
  }
LABEL_66:
  (*(void (**)(void ***__return_ptr))(*(void *)*a2 + 72))(&v46);
  if (!v46) {
    operator new();
  }
  uint64_t v39 = *a2;
  unint64_t v40 = v46;
  uint64_t v46 = 0;
  (*(void (**)(uint64_t, void ***))(*(void *)v39 + 24))(v39, &v40);
  if (v40) {
    (*((void (**)(void **))*v40 + 1))(v40);
  }
  if (v46) {
    (*((void (**)(void **))*v46 + 1))(v46);
  }
  uint64_t v46 = (void **)&v44;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v46);
  uint64_t v46 = (void **)&v43[1] + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v46);
  uint64_t v46 = (void **)v43;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v46);
  uint64_t v46 = (void **)v42 + 1;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v46);
  uint64_t v46 = (void **)&v41;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v46);
}

void anonymous namespace'::COFFLinkGraphBuilder_x86_64::~COFFLinkGraphBuilder_x86_64(_anonymous_namespace_::COFFLinkGraphBuilder_x86_64 *this)
{
  llvm::jitlink::COFFLinkGraphBuilder::~COFFLinkGraphBuilder(this);
  JUMPOUT(0x263E500B0);
}

void anonymous namespace'::COFFLinkGraphBuilder_x86_64::addRelocations(_anonymous_namespace_::COFFLinkGraphBuilder_x86_64 *this@<X0>, void *a2@<X8>)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 10);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 352))(v4);
  uint64_t v7 = v6;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 360))(v4);
  uint64_t v48 = v5;
  uint64_t v49 = v7;
  BOOL v10 = v7 == v9 && v5 == v8;
  if (v10)
  {
LABEL_71:
    *a2 = 0;
  }
  else
  {
    uint64_t v11 = v8;
    uint64_t v12 = v9;
    uint64_t v45 = v9;
    uint64_t v46 = v8;
    while (1)
    {
      llvm::object::COFFObjectFile::getSectionName(*((llvm::object::COFFObjectFile **)this + 10), v5, (uint64_t)v60);
      if (v61)
      {
        uint64_t v19 = v60[0];
        v60[0] = 0;
        *a2 = v19;
      }
      else
      {
        unsigned int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v49 + 160))(v49, v48);
        if (v13 > 0x7FFFFFFE
          || (int)(v13 + 1) >= (int)((*((void *)this + 30) - *((void *)this + 29)) >> 3)
          || (BOOL v14 = *(void **)(*((void *)this + 26) + 8 * (v13 + 1))) == 0)
        {
          LOWORD(v56) = 1283;
          *(void *)&long long v53 = "Referencing a section that wasn't added to the graph: ";
          uint64_t v54 = (void *)v60[0];
          uint64_t v55 = v60[1];
          getErrorErrorCat();
          operator new();
        }
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v49 + 272))(v49, v48);
        uint64_t v17 = v16;
        uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v49 + 280))();
        uint64_t v50 = v15;
        uint64_t v51 = v17;
        uint64_t v47 = v18;
        if (v15 != v18)
        {
          while (2)
          {
            uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v51 + 312))(v51, v15);
            if (v21 == (*(uint64_t (**)(void))(**((void **)this + 10) + 56))(*((void *)this + 10)))
            {
              uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v49 + 160))(v49, v48);
              *(void *)&long long v53 = "Invalid symbol index in relocation entry. index: {0}, section: {1}";
              *((void *)&v53 + 1) = 66;
              uint64_t v54 = v59;
              uint64_t v55 = 2;
              unint64_t v56 = &unk_270DBF388;
              uint64_t v57 = (int *)(v15 + 4);
            }
            else
            {
              unint64_t v22 = (void *)*((void *)this + 10);
              uint64_t v23 = v22[12];
              if (v23) {
                uint64_t v24 = 0;
              }
              else {
                uint64_t v24 = v21;
              }
              if (v23) {
                uint64_t v25 = v21;
              }
              else {
                uint64_t v25 = 0;
              }
              if (!v23) {
                uint64_t v23 = v22[13];
              }
              if (v25) {
                uint64_t v26 = v25;
              }
              else {
                uint64_t v26 = v24;
              }
              unint64_t v27 = v26 - v23;
              BOOL v10 = v22[6] == 0;
              unint64_t v28 = 18;
              if (v10) {
                unint64_t v28 = 20;
              }
              unint64_t v29 = v27 / v28;
              int v52 = v29;
              if ((v29 & 0x80000000) == 0)
              {
                uint64_t v30 = *((void *)this + 29);
                if ((int)v29 < (int)((unint64_t)(*((void *)this + 30) - v30) >> 3))
                {
                  unint64_t v31 = *(void **)(v30 + 8 * v29);
                  if (v31)
                  {
                    int v32 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v49 + 152))(v49, v48);
                    int v33 = (*(uint64_t (**)(void))(*(void *)v51 + 304))();
                    uint64_t v34 = v14[3];
                    unsigned int v35 = v33 + v32 - *v14;
                    switch((*(uint64_t (**)(void))(*(void *)v51 + 320))())
                    {
                      case 1:
                        uint64_t v36 = *(void *)(v34 + v35);
                        char v37 = 27;
                        goto LABEL_48;
                      case 3:
                        uint64_t v36 = *(int *)(v34 + v35);
                        char v37 = 26;
                        goto LABEL_48;
                      case 4:
                        uint64_t v36 = *(int *)(v34 + v35);
                        goto LABEL_47;
                      case 5:
                        uint64_t v36 = *(int *)(v34 + v35) - 1;
                        goto LABEL_47;
                      case 6:
                        uint64_t v36 = *(int *)(v34 + v35) - 2;
                        goto LABEL_47;
                      case 7:
                        uint64_t v36 = *(int *)(v34 + v35) - 3;
                        goto LABEL_47;
                      case 8:
                        uint64_t v36 = *(int *)(v34 + v35) - 4;
                        goto LABEL_47;
                      case 9:
                        uint64_t v36 = *(int *)(v34 + v35) - 5;
LABEL_47:
                        char v37 = 25;
                        goto LABEL_48;
                      case 10:
                        if (v25)
                        {
                          unsigned int v38 = *(unsigned __int16 *)(v25 + 12);
                          if (v38 != 0xFFFF)
                          {
                            if (v38 >> 8 > 0xFE) {
                              unsigned int v38 = (__int16)v38;
                            }
LABEL_59:
                            uint64_t v39 = (int)v38;
                            goto LABEL_66;
                          }
                        }
                        else
                        {
                          unsigned int v38 = *(_DWORD *)(v24 + 12);
                          if (v38 != -1) {
                            goto LABEL_59;
                          }
                        }
                        uint64_t v40 = *((void *)this + 10);
                        uint64_t v41 = *(void *)(v40 + 48);
                        if (v41)
                        {
                          int v42 = *(unsigned __int16 *)(v41 + 2);
                          if (v42 == 0xFFFF) {
                            int v42 = 0;
                          }
                        }
                        else
                        {
                          int v42 = *(_DWORD *)(*(void *)(v40 + 56) + 44);
                        }
                        uint64_t v39 = (v42 + 1);
LABEL_66:
                        uint64_t v36 = *(__int16 *)(v34 + v35);
                        unint64_t v31 = llvm::jitlink::LinkGraph::addAbsoluteSymbol(*((void *)this + 11), (uint64_t)"secidx", 6, v39, 2, 0, 2, 0);
                        char v37 = 28;
LABEL_48:
                        *(void *)&long long v53 = v31;
                        DWORD2(v53) = v35;
                        uint64_t v54 = (void *)v36;
                        LOBYTE(v55) = v37;
                        llvm::jitlink::Block::addEdge(v14, &v53);
LABEL_49:
                        *a2 = 0;
                        (*(void (**)(uint64_t, uint64_t *))(*(void *)v51 + 296))(v51, &v50);
                        uint64_t v15 = v50;
                        if (v50 == v47) {
                          goto LABEL_11;
                        }
                        continue;
                      case 11:
                        if ((*(unsigned char *)(v31[2] + 8) & 1) == 0) {
                          goto LABEL_49;
                        }
                        uint64_t v36 = *(int *)(v34 + v35);
                        char v37 = 29;
                        goto LABEL_48;
                      default:
                        uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v51 + 320))(v51, v50);
                        *(void *)&long long v53 = "{0:d}";
                        *((void *)&v53 + 1) = 5;
                        uint64_t v54 = v58;
                        uint64_t v55 = 1;
                        unint64_t v56 = &unk_270DBD7D8;
                        uint64_t v57 = (int *)v44;
                        v58[0] = &v56;
                        operator new();
                    }
                  }
                }
              }
              uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v49 + 160))(v49, v48);
              *(void *)&long long v53 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {0}, section: {1}";
              *((void *)&v53 + 1) = 96;
              uint64_t v54 = v59;
              uint64_t v55 = 2;
              unint64_t v56 = &unk_270DBF300;
              uint64_t v57 = &v52;
            }
            break;
          }
          v58[0] = &unk_270DBD7D8;
          v58[1] = v43;
          v59[0] = &v56;
          v59[1] = v58;
          getErrorErrorCat();
          operator new();
        }
LABEL_11:
        uint64_t v19 = 0;
        *a2 = 0;
        uint64_t v12 = v45;
        uint64_t v11 = v46;
      }
      if (v61)
      {
        uint64_t v20 = v60[0];
        v60[0] = 0;
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
        }
      }
      if (v19) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v49 + 136))(v49, &v48);
      uint64_t v5 = v48;
      if (v49 == v12 && v48 == v11) {
        goto LABEL_71;
      }
    }
  }
}

void llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul> const&>::~stream_operator_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul> const&>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  return write_unsigned<unsigned long>(a2, **(unsigned int **)(a1 + 8), 0, 0, 0);
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::jitlink::SEHFrameKeepAlivePass>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t result = llvm::jitlink::LinkGraph::findSectionByName(a2, *a1, a1[1], a3);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t result = (uint64_t)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(result + 32);
    uint64_t v9 = *(void *)(v7 + 32) + 8 * *(unsigned int *)(v7 + 48);
    if (v9 != result)
    {
      BOOL v10 = (uint64_t *)result;
      uint64_t v11 = v8;
      do
      {
        uint64_t v12 = *v10;
        unsigned int v13 = llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, *v10, 0, 0, 0, 0);
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        int v28 = 0;
        uint64_t v15 = *(void *)(v12 + 40);
        uint64_t v14 = *(void *)(v12 + 48);
        if (v15 == v14)
        {
          uint64_t v17 = 0;
        }
        else
        {
          uint64_t v16 = v13;
          do
          {
            if (*(unsigned char *)(*(void *)(*(void *)v15 + 16) + 8))
            {
              uint64_t v25 = *(void *)(*(void *)v15 + 16);
              llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v26, &v25, (uint64_t)&v22);
            }
            v15 += 32;
          }
          while (v15 != v14);
          uint64_t v17 = v26;
          if (v27)
          {
            uint64_t v18 = v26;
            if (v28)
            {
              uint64_t v19 = 0;
              while (((unint64_t)v26[v19] | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                if (v28 == ++v19) {
                  goto LABEL_24;
                }
              }
              uint64_t v18 = &v26[v19];
            }
            uint64_t v20 = &v26[v28];
            if (v18 != v20)
            {
              uint64_t v21 = *v18;
LABEL_19:
              *(void *)&long long v22 = v16;
              DWORD2(v22) = 0;
              uint64_t v23 = 0;
              char v24 = 1;
              llvm::jitlink::Block::addEdge(v21, &v22);
              while (++v18 != v20)
              {
                uint64_t v21 = *v18;
                if (((unint64_t)*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
                {
                  if (v18 != v20) {
                    goto LABEL_19;
                  }
                  break;
                }
              }
              uint64_t v17 = v26;
            }
          }
        }
LABEL_24:
        uint64_t result = MEMORY[0x263E500A0](v17, 8);
        while (++v10 != v11)
        {
          if ((*v10 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_29;
          }
        }
        BOOL v10 = v11;
LABEL_29:
        ;
      }
      while (v10 != (uint64_t *)v9);
    }
  }
  *a4 = 0;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::jitlink::link_COFF_x86_64(std::unique_ptr<llvm::jitlink::LinkGraph>,std::unique_ptr<llvm::jitlink::JITLinkContext>)::$_0>@<X0>(llvm::jitlink::LinkGraph *this@<X1>, void *a2@<X8>)
{
  v31[0] = 0;
  v31[1] = 0;
  int v32 = 0;
  uint64_t v33 = 0;
  llvm::jitlink::LinkGraph::blocks(this, v36);
  v34[0] = v36[0];
  v34[1] = v36[1];
  __n128 v3 = v37;
  void v34[2] = v36[2];
  __n128 v35 = v37;
  uint64_t v4 = v38;
  uint64_t v30 = v39;
  uint64_t v5 = (uint64_t *)v37.n128_u64[0];
  if (*(void *)&v36[0] != v38 || v37.n128_u64[0] != v39)
  {
    do
    {
      uint64_t v6 = *v5;
      uint64_t v8 = *(void *)(v6 + 40);
      uint64_t v7 = *(void *)(v6 + 48);
      while (v8 != v7)
      {
        char v9 = 12;
        switch(*(unsigned char *)(v8 + 24))
        {
          case 0x19:
            goto LABEL_35;
          case 0x1A:
            uint64_t v10 = v33;
            if (v33) {
              goto LABEL_20;
            }
            llvm::jitlink::LinkGraph::defined_symbols(this, &v43);
            v41[0] = v43;
            v41[1] = v44;
            void v41[2] = v45;
            long long v42 = v46;
            uint64_t v13 = v47;
            uint64_t v14 = v48;
            uint64_t v15 = (uint64_t *)v46;
            if ((void)v43 == v47 && (void)v46 == v48) {
              goto LABEL_19;
            }
            while (1)
            {
              uint64_t v16 = *v15;
              if (*(void *)(v16 + 8) == 11
                && **(void **)v16 == 0x426567616D495F5FLL
                && *(void *)(*(void *)v16 + 3) == 0x657361426567616DLL)
              {
                break;
              }
              llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v41, (uint64_t)v40);
              uint64_t v15 = (uint64_t *)v42;
              if (*(void *)&v41[0] == v13 && (void)v42 == v14)
              {
LABEL_19:
                long long v43 = 0uLL;
                LODWORD(v44) = 0;
                *(void *)&v41[0] = "__ImageBase";
                *((void *)&v41[0] + 1) = 11;
                *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>,llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::FindAndConstruct((uint64_t *)&v43, v41, v11, v12)+ 4) = 0;
                *(void *)&v41[0] = 0;
                v40[0] = 0;
                operator new();
              }
            }
            uint64_t v10 = (*(void *)(v16 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(v16 + 16);
            uint64_t v33 = v10;
LABEL_20:
            uint64_t v19 = *(void *)(v8 + 16) - v10;
            goto LABEL_34;
          case 0x1B:
            char v9 = 2;
            goto LABEL_35;
          case 0x1C:
            char v9 = 5;
            goto LABEL_35;
          case 0x1D:
            uint64_t v20 = *(void *)(v8 + 16);
            uint64_t v21 = *(void *)(*(void *)(*(void *)v8 + 16) + 16);
            if (!v32) {
              goto LABEL_29;
            }
            unsigned int v22 = ((v21 >> 4) ^ (v21 >> 9)) & (v32 - 1);
            uint64_t v23 = *(void *)(v31[0] + 16 * v22);
            if (v23 == v21) {
              goto LABEL_33;
            }
            int v24 = 1;
            break;
          default:
            goto LABEL_36;
        }
        while (v23 != -4096)
        {
          unsigned int v25 = v22 + v24++;
          unsigned int v22 = v25 & (v32 - 1);
          uint64_t v23 = *(void *)(v31[0] + 16 * v22);
          if (v23 == v21) {
            goto LABEL_33;
          }
        }
LABEL_29:
        llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v43, v21);
        if ((void)v43) {
          uint64_t v26 = *(void *)v43;
        }
        else {
          uint64_t v26 = 0;
        }
        *(void *)&v41[0] = v21;
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>,llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>::FindAndConstruct((uint64_t)v31, (uint64_t *)v41)[1] = v26;
LABEL_33:
        *(void *)&long long v43 = v21;
        uint64_t v19 = v20
            - llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>,llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>::FindAndConstruct((uint64_t)v31, (uint64_t *)&v43)[1];
LABEL_34:
        *(void *)(v8 + 16) = v19;
        char v9 = 3;
LABEL_35:
        *(unsigned char *)(v8 + 24) = v9;
LABEL_36:
        v8 += 32;
      }
      __n128 v3 = llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)v34, (uint64_t)&v43);
      uint64_t v5 = (uint64_t *)v35.n128_u64[0];
    }
    while (*(void *)&v34[0] != v4 || v35.n128_u64[0] != v30);
  }
  *a2 = 0;
  return MEMORY[0x263E500A0](v31[0], 8, v3);
}

void llvm::jitlink::createLookupContinuation<anonymous namespace'::COFFLinkGraphLowering_x86_64::getImageBaseAddress(llvm::jitlink::LinkGraph &,llvm::jitlink::JITLinkContext &)::{lambda(llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)#1}>(anonymous namespace'::COFFLinkGraphLowering_x86_64::getImageBaseAddress(llvm::jitlink::LinkGraph &,llvm::jitlink::JITLinkContext &)::{lambda(llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)#1})::Impl::~Impl()
{
}

uint64_t *llvm::jitlink::createLookupContinuation<anonymous namespace'::COFFLinkGraphLowering_x86_64::getImageBaseAddress(llvm::jitlink::LinkGraph &,llvm::jitlink::JITLinkContext &)::{lambda(llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)#1}>(anonymous namespace'::COFFLinkGraphLowering_x86_64::getImageBaseAddress(llvm::jitlink::LinkGraph &,llvm::jitlink::JITLinkContext &)::{lambda(llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)#1})::Impl::run(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  char v12 = *(unsigned char *)(a2 + 24) & 1;
  long long v2 = *(void **)a2;
  if (v12)
  {
    *(void *)a2 = 0;
    uint64_t v5 = *(void **)(a1 + 8);
    char v9 = 0;
    void *v5 = v2;
    if (!v2) {
LABEL_13:
    }
      void *v5 = 0;
  }
  else
  {
    char v9 = *(void **)a2;
    uint64_t v10 = *(void *)(a2 + 8);
    int v3 = v10;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    unsigned int v11 = *(_DWORD *)(a2 + 16);
    uint64_t v4 = v11;
    *(_DWORD *)(a2 + 16) = 0;
    uint64_t v5 = *(void **)(a1 + 8);
    uint64_t v6 = &v2[4 * v4];
    if (v3)
    {
      if (v4)
      {
        uint64_t v7 = 32 * v4;
        while (*v2 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v2 += 4;
          v7 -= 32;
          if (!v7) {
            goto LABEL_11;
          }
        }
      }
      uint64_t v6 = v2;
    }
LABEL_11:
    **(void **)(a1 + 16) = v6[2];
    if (v5 && !*v5) {
      goto LABEL_13;
    }
  }
  return llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t *)&v9);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>,llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::grow(a1, v7);
    uint64_t v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t result = *a2;
  result[1] = 0;
  return result;
}

void anonymous namespace'::COFFJITLinker_x86_64::~COFFJITLinker_x86_64(_anonymous_namespace_::COFFJITLinker_x86_64 *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x263E500B0);
}

void llvm::jitlink::JITLinker<anonymous namespace'::COFFJITLinker_x86_64>::fixUpBlocks(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 192))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 200);
    if (v4)
    {
      uint64_t v5 = 24 * v4;
      int v6 = *(void **)(a1 + 184);
      while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v6 += 3;
        v5 -= 24;
        if (!v5) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      int v6 = *(void **)(a1 + 184);
    }
    uint64_t v7 = *(void *)(a1 + 184) + 24 * v4;
LABEL_10:
    if (v6 != (void *)v7)
    {
      uint64_t v8 = v6[2];
      int v21 = *(_DWORD *)(v8 + 20);
      char v9 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 32);
      uint64_t v11 = *(void *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
      if ((uint64_t **)v11 == v9) {
        goto LABEL_28;
      }
      char v12 = v9;
      uint64_t v13 = v10;
      do
      {
        uint64_t v14 = *v12;
        if (v21 == 2 && (v14[1] & 4) == 0)
        {
          size_t v15 = v14[4];
          unint64_t __src = (void *)v14[3];
          uint64_t v16 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, v15, 0);
          uint64_t v17 = (uint64_t)v16;
          if (v15) {
            memmove(v16, __src, v15);
          }
          _OWORD v14[3] = v17;
          void v14[4] = v15;
          v14[1] |= 4uLL;
        }
        uint64_t v18 = v14[5];
        uint64_t v19 = v14[6];
        while (v18 != v19)
        {
          if (*(unsigned __int8 *)(v18 + 24) >= 2u)
          {
            llvm::jitlink::x86_64::applyFixup(a1, v14, v18, 0, a2);
            if (*a2) {
              return;
            }
          }
          v18 += 32;
        }
        while (++v12 != v13)
        {
          if (((unint64_t)*v12 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_27;
          }
        }
        char v12 = v13;
LABEL_27:
        ;
      }
      while (v12 != (uint64_t **)v11);
LABEL_28:
      while (1)
      {
        v6 += 3;
        if (v6 == (void *)v7) {
          break;
        }
        if (*v6 < 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_10;
        }
      }
    }
  }
LABEL_6:
  *a2 = 0;
}

void llvm::jitlink::JITLinker<anonymous namespace'::COFFJITLinker_x86_64>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::jitlink::aarch32::encodeImmBT4BlT1BlxT2_J1J2(unint64_t this)
{
  return ((this >> 14) & 0x400 | (this >> 12) & 0x3FF | ((((unsigned __int16)(this >> 11) ^ (unsigned __int16)(this >> 10)) & 0x2000 | ((unsigned __int16)(this >> 11) ^ (unsigned __int16)(this >> 13)) & 0x800 | (this >> 1) & 0x7FF) << 16)) ^ 0x28000000;
}

void llvm::jitlink::aarch32::makeUnexpectedOpcodeError(uint64_t a1, uint64_t (*a2)(uint64_t), __int16 *a3, __int16 *a4, uint64_t a5)
{
  __int16 v5 = *a3;
  __int16 v6 = *a4;
  uint64_t v7 = "Invalid opcode [ 0x{0:x4}, 0x{1:x4} ] for relocation: {2}";
  uint64_t v8 = 57;
  char v9 = v16;
  uint64_t v10 = 3;
  uint64_t v11 = &unk_270DBF438;
  __int16 v12 = v5;
  uint64_t v13 = &unk_270DBF438;
  __int16 v14 = v6;
  v15[0] = &unk_270DBE970;
  v15[1] = a2(a5);
  v16[0] = &v11;
  v16[1] = &v13;
  uint64_t v16[2] = v15;
  operator new();
}

uint64_t llvm::jitlink::aarch32::readAddendData@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  if ((*(unsigned char *)(a3 + 24) & 0xFE) != 2)
  {
    std::operator+<char>();
    uint64_t v10 = std::string::append(&v13, ", section ");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    long long v12 = *(_OWORD *)*(void *)(a2 + 16);
    uint64_t v16 = __p;
    long long v17 = v12;
    __int16 v18 = 1284;
    uint64_t v19 = &v16;
    uint64_t v20 = " can not read implicit addend for aarch32 edge kind ";
    __int16 v21 = 770;
    if (!*(unsigned char *)(*(uint64_t (**)(void))(v6 + 176))(*(unsigned __int8 *)(a3 + 24)))
    {
      int v24 = v22;
      __int16 v25 = v23;
    }
    operator new();
  }
  signed int v8 = *(_DWORD *)(*(void *)(a2 + 24) + *(unsigned int *)(a3 + 8));
  unsigned int v9 = bswap32(v8);
  if ((*(_DWORD *)(result + 172) - 1) >= 2) {
    signed int v8 = v9;
  }
  *(unsigned char *)(a4 + 8) &= ~1u;
  *(void *)a4 = v8;
  return result;
}

void llvm::jitlink::aarch32::readAddendArm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 24) == 4)
  {
    uint64_t v4 = (const char *)(*(uint64_t (**)(uint64_t))(a1 + 176))(4);
    if (v4) {
      strlen(v4);
    }
    operator new();
  }
  std::operator+<char>();
  uint64_t v7 = std::string::append(&v10, ", section ");
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  std::string::size_type v12 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  long long v9 = *(_OWORD *)*(void *)(a2 + 16);
  std::string v13 = __p;
  long long v14 = v9;
  __int16 v15 = 1284;
  uint64_t v16 = &v13;
  long long v17 = " can not read implicit addend for aarch32 edge kind ";
  __int16 v18 = 770;
  if (!*(unsigned char *)(*(uint64_t (**)(void))(a1 + 176))(*(unsigned __int8 *)(a3 + 24)))
  {
    int v21 = v19;
    __int16 v22 = v20;
  }
  operator new();
}

uint64_t llvm::jitlink::aarch32::readAddendThumb@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = result;
  int v9 = *(unsigned __int8 *)(a3 + 24) - 5;
  std::string v10 = (__int16 *)(*(void *)(a2 + 24) + *(unsigned int *)(a3 + 8));
  switch(v9)
  {
    case 0:
      uint64_t v11 = (unsigned __int16)*v10;
      unsigned int v12 = (unsigned __int16)v10[1];
      if ((v11 & 0xF800) != 0xF000 || v12 >> 14 <= 2)
      {
        long long v14 = *(uint64_t (**)(uint64_t))(result + 176);
        uint64_t v15 = a5;
        uint64_t v16 = 5;
        goto LABEL_25;
      }
      int v23 = *a4;
      uint64_t v24 = (uint64_t)((v11 << 54) | ((unint64_t)(v12 & 0x7FF) << 43)) >> 42;
      int v25 = ((v12 << 10) ^ (v11 << 13)) & 0x800000;
      int v26 = ((v12 << 11) ^ (v11 << 12)) & 0x400000;
      int v27 = (v11 << 14) & 0x1000000 | ((v11 & 0x3FF) << 12) | (2 * (v12 & 0x7FF));
      goto LABEL_20;
    case 1:
      uint64_t v20 = (unsigned __int16)*v10;
      if ((v20 & 0xF800) != 0xF000 || (int v21 = v10[1], (v21 & 0x80000000) == 0))
      {
        long long v14 = *(uint64_t (**)(uint64_t))(result + 176);
        uint64_t v15 = a5;
        uint64_t v16 = 6;
LABEL_25:
        llvm::jitlink::aarch32::makeUnexpectedOpcodeError(v15, v14, v10, v10 + 1, v16);
      }
      int v22 = (unsigned __int16)v10[1];
      if ((v21 & 0x1000) != 0)
      {
        unint64_t v31 = (const char *)(*(uint64_t (**)(uint64_t))(result + 176))(6);
        if (v31) {
          strlen(v31);
        }
        operator new();
      }
      int v23 = *a4;
      uint64_t v24 = (uint64_t)((v20 << 54) | ((unint64_t)(v10[1] & 0x7FF) << 43)) >> 42;
      int v25 = ((v22 << 10) ^ (v20 << 13)) & 0x800000;
      int v26 = ((v22 << 11) ^ (v20 << 12)) & 0x400000;
      int v27 = (v20 << 14) & 0x1000000 | ((v20 & 0x3FF) << 12) | (2 * (v22 & 0x7FF));
LABEL_20:
      uint64_t v30 = (uint64_t)((unint64_t)((v27 | v25 | v26) ^ 0xC00000u) << 39) >> 39;
      if (!v23) {
        uint64_t v30 = v24;
      }
LABEL_22:
      *(unsigned char *)(a5 + 8) &= ~1u;
      *(void *)a5 = v30;
      return result;
    case 2:
      __int16 v28 = *v10;
      if ((*v10 & 0xFBF0) == 0xF240)
      {
        unsigned int v29 = v10[1];
        if ((v29 & 0x80000000) == 0) {
          goto LABEL_18;
        }
      }
      long long v14 = *(uint64_t (**)(uint64_t))(result + 176);
      uint64_t v15 = a5;
      uint64_t v16 = 7;
      goto LABEL_25;
    case 3:
      __int16 v28 = *v10;
      if ((*v10 & 0xFBF0) == 0xF2C0)
      {
        unsigned int v29 = v10[1];
        if ((v29 & 0x80000000) == 0)
        {
LABEL_18:
          uint64_t v30 = (__int16)((2 * v28) & 0x800 | (v28 << 12) | (v29 >> 4) & 0x700 | v29);
          goto LABEL_22;
        }
      }
      long long v14 = *(uint64_t (**)(uint64_t))(result + 176);
      uint64_t v15 = a5;
      uint64_t v16 = 8;
      goto LABEL_25;
    default:
      std::operator+<char>();
      long long v17 = std::string::append(&v32, ", section ");
      std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      std::string::size_type v34 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      long long v19 = *(_OWORD *)*(void *)(a2 + 16);
      __n128 v35 = __p;
      long long v36 = v19;
      __int16 v37 = 1284;
      uint64_t v38 = &v35;
      uint64_t v39 = " can not read implicit addend for aarch32 edge kind ";
      __int16 v40 = 770;
      if (!*(unsigned char *)(*(uint64_t (**)(void))(v7 + 176))(*(unsigned __int8 *)(a3 + 24)))
      {
        int v43 = v41;
        __int16 v44 = v42;
      }
      operator new();
  }
}

uint64_t llvm::jitlink::aarch32::applyFixupData@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v7 = *((unsigned int *)a3 + 2);
  int v8 = a3[24];
  uint64_t v9 = *((void *)a3 + 2);
  uint64_t v10 = (*(void *)(*(void *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(*(void *)a3 + 16);
  if (v8 == 3)
  {
    uint64_t v11 = v10 + v9;
  }
  else
  {
    if (v8 != 2)
    {
      std::operator+<char>();
      std::string v13 = std::string::append(&v16, ", section ");
      std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      std::string::size_type v18 = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      long long v15 = *(_OWORD *)a2[2];
      long long v19 = __p;
      long long v20 = v15;
      __int16 v21 = 1284;
      int v22 = &v19;
      int v23 = " encountered unfixable aarch32 edge kind ";
      __int16 v24 = 770;
      if (!*(unsigned char *)(*(uint64_t (**)(void))(v6 + 176))(a3[24]))
      {
        int v27 = v25;
        __int16 v28 = v26;
      }
      operator new();
    }
    uint64_t v11 = v10 + v9 - (*a2 + v7);
  }
  if (v11 != (int)v11)
  {
    llvm::jitlink::makeTargetOutOfRangeError(result, a2, (uint64_t)a3);
  }
  unsigned int v12 = bswap32(v11);
  if (*(_DWORD *)(result + 172) == 1) {
    unsigned int v12 = v11;
  }
  *(_DWORD *)(a2[3] + v7) = v12;
  *a4 = 0;
  return result;
}

void llvm::jitlink::aarch32::applyFixupArm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 24) == 4)
  {
    uint64_t v4 = (const char *)(*(uint64_t (**)(uint64_t))(a1 + 176))(4);
    if (v4) {
      strlen(v4);
    }
    operator new();
  }
  std::operator+<char>();
  uint64_t v7 = std::string::append(&v10, ", section ");
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  std::string::size_type v12 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  long long v9 = *(_OWORD *)*(void *)(a2 + 16);
  std::string v13 = __p;
  long long v14 = v9;
  __int16 v15 = 1284;
  std::string v16 = &v13;
  long long v17 = " encountered unfixable aarch32 edge kind ";
  __int16 v18 = 770;
  if (!*(unsigned char *)(*(uint64_t (**)(void))(a1 + 176))(*(unsigned __int8 *)(a3 + 24)))
  {
    int v21 = v19;
    __int16 v22 = v20;
  }
  operator new();
}

unint64_t llvm::jitlink::aarch32::applyFixupThumb@<X0>(unint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = result;
  uint64_t v9 = *(void *)(*(void *)a3 + 24);
  uint64_t v10 = (v9 & 0x1FFFFFFFFFFFFFFLL) + **(void **)(*(void *)a3 + 16);
  uint64_t v11 = v10 | 1;
  if (v9 < 0) {
    v10 |= 1uLL;
  }
  uint64_t v12 = *(unsigned int *)(a3 + 8);
  std::string v13 = (__int16 *)(a2[3] + v12);
  long long v14 = v13 + 1;
  uint64_t v15 = *a2 + v12;
  uint64_t v16 = *(void *)(a3 + 16);
  switch(*(unsigned char *)(a3 + 24))
  {
    case 5:
      unsigned int v17 = (unsigned __int16)v13[1];
      if ((*v13 & 0xF800) != 0xF000 || v17 >> 14 <= 2)
      {
        int v19 = *(uint64_t (**)(uint64_t))(result + 176);
        uint64_t v20 = (uint64_t)a5;
        int v21 = v13;
        __int16 v22 = v13 + 1;
        uint64_t v23 = 5;
        goto LABEL_35;
      }
      unint64_t v34 = v10 - v15 + v16;
      if (v9 < 0 == ((v17 & 0x1000) == 0))
      {
        if (v9 < 0)
        {
          LOWORD(v17) = v17 & 0xEFFF;
          *long long v14 = v17;
          v34 |= 1uLL;
        }
        else
        {
          LOWORD(v17) = v17 & 0xEFFE;
          *long long v14 = v17;
          unint64_t v34 = (v34 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        }
      }
      if (*a4)
      {
        if (!((v34 + 0x1000000) >> 25))
        {
          *std::string v13 = (v34 >> 14) & 0x400 | (v34 >> 12) & 0x3FF | 0xF000;
          LOWORD(v17) = (v17 & 0xD000 | ((v34 >> 11) ^ (v34 >> 13)) & 0x800 | ((v34 >> 11) ^ (v34 >> 10)) & 0x2000 | (v34 >> 1) & 0x7FF) ^ 0x2800;
LABEL_30:
          *long long v14 = v17;
          goto LABEL_31;
        }
      }
      else if (v34 + 0x200000 < 0x400000)
      {
        *std::string v13 = (v34 >> 12) & 0x7FF | 0xF000;
        unsigned int v17 = v17 & 0xD000 | 0x2800 | (v34 >> 1) & 0x7FF;
        goto LABEL_30;
      }
      goto LABEL_52;
    case 6:
      if ((*v13 & 0xF800) == 0xF000)
      {
        int v27 = v13[1];
        if (v27 < 0)
        {
          __int16 v28 = v13[1];
          if ((v27 & 0x1000) != 0)
          {
            __n128 v35 = (const char *)(*(uint64_t (**)(uint64_t))(result + 176))(6);
            if (v35) {
              strlen(v35);
            }
            operator new();
          }
          if ((v9 & 0x8000000000000000) == 0)
          {
            unsigned int v29 = (const char *)(*(uint64_t (**)(uint64_t))(result + 176))(6);
            if (v29) {
              strlen(v29);
            }
            operator new();
          }
          uint64_t result = v11 - v15 + v16;
          if (*a4)
          {
            if (!((result + 0x1000000) >> 25))
            {
              uint64_t result = llvm::jitlink::aarch32::encodeImmBT4BlT1BlxT2_J1J2(result);
              *std::string v13 = result | 0xF000;
              unsigned int v17 = v28 & 0xD000 | WORD1(result);
              goto LABEL_30;
            }
          }
          else if (result + 0x200000 < 0x400000)
          {
            *std::string v13 = (result >> 12) & 0x7FF | 0xF000;
            unsigned int v17 = (result >> 1) & 0x7FF | v27 & 0xD000 | 0x2800;
            goto LABEL_30;
          }
LABEL_52:
          llvm::jitlink::makeTargetOutOfRangeError(v7, a2, a3);
        }
      }
      int v19 = *(uint64_t (**)(uint64_t))(result + 176);
      uint64_t v20 = (uint64_t)a5;
      int v21 = v13;
      __int16 v22 = v13 + 1;
      uint64_t v23 = 6;
      goto LABEL_35;
    case 7:
      if ((*v13 & 0xFBF0) != 0xF240 || (unsigned int v30 = v13[1], (v30 & 0x80000000) != 0))
      {
        int v19 = *(uint64_t (**)(uint64_t))(result + 176);
        uint64_t v20 = (uint64_t)a5;
        int v21 = v13;
        __int16 v22 = v13 + 1;
        uint64_t v23 = 7;
LABEL_35:
        llvm::jitlink::aarch32::makeUnexpectedOpcodeError(v20, v19, v21, v22, v23);
      }
      unsigned int v31 = v10 + v16;
      *std::string v13 = (v31 >> 1) & 0x400 | ((unsigned __int16)v31 >> 12) | 0xF240;
      LOWORD(v30) = v30 & 0x8F00 | v31 | (((v31 >> 8) & 7) << 12);
LABEL_23:
      v13[1] = v30;
LABEL_31:
      *a5 = 0;
      return result;
    case 8:
      if ((*v13 & 0xFBF0) == 0xF2C0)
      {
        int v32 = v13[1];
        if ((v32 & 0x80000000) == 0)
        {
          unint64_t v33 = v10 + v16;
          *std::string v13 = ((v33 >> 16) >> 1) & 0x400 | (WORD1(v33) >> 12) | 0xF2C0;
          unsigned int v30 = v32 & 0x8F00 | BYTE2(v33) | (v33 >> 12) & 0x7000;
          goto LABEL_23;
        }
      }
      int v19 = *(uint64_t (**)(uint64_t))(result + 176);
      uint64_t v20 = (uint64_t)a5;
      int v21 = v13;
      __int16 v22 = v13 + 1;
      uint64_t v23 = 8;
      goto LABEL_35;
    default:
      std::operator+<char>();
      __int16 v24 = std::string::append(&v36, ", section ");
      std::string::size_type v25 = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      std::string::size_type v38 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      long long v26 = *(_OWORD *)a2[2];
      uint64_t v39 = __p;
      long long v40 = v26;
      __int16 v41 = 1284;
      __int16 v42 = &v39;
      int v43 = " encountered unfixable aarch32 edge kind ";
      __int16 v44 = 770;
      if (!*(unsigned char *)(*(uint64_t (**)(void))(v7 + 176))(*(unsigned __int8 *)(a3 + 24)))
      {
        int v47 = v45;
        __int16 v48 = v46;
      }
      operator new();
  }
}

void *llvm::jitlink::aarch32::StubsManager<(llvm::jitlink::aarch32::StubsFlavor)1>::createEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v5 = llvm::jitlink::aarch32::StubsManager<(llvm::jitlink::aarch32::StubsFlavor)1>::addStub<10ul>(a1, a2, (uint64_t)&llvm::jitlink::aarch32::Thumbv7ABS, 4uLL);
  llvm::jitlink::Block::addEdge(v5, 7, 0, a3, 0);
  llvm::jitlink::Block::addEdge(v5, 8, 4, a3, 0);
  uint64_t result = llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v5, 0, v5[4], 1, 0);
  result[3] |= 0x8000000000000000;
  return result;
}

void *llvm::jitlink::aarch32::StubsManager<(llvm::jitlink::aarch32::StubsFlavor)1>::addStub<10ul>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    llvm::jitlink::LinkGraph::createSection();
  }
  v10[0] = a3;
  v10[1] = 10;
  unint64_t v8 = a4;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  return llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, v5, v10, &v9, &v8, &v7);
}

char *llvm::jitlink::aarch32::getCPUArchName(int a1)
{
  return off_2655927D8[a1];
}

void llvm::detail::provider_format_adapter<unsigned short>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned short>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  int v15 = 0;
  if (!llvm::detail::HelperFunctions::consumeHexStyle((const void **)&v16, &v15))
  {
    if (v17)
    {
      int v12 = 0;
      unsigned int v13 = *v16;
      if (v13 <= 0x63)
      {
        if (v13 != 68)
        {
          if (v13 != 78) {
            goto LABEL_19;
          }
          goto LABEL_16;
        }
LABEL_17:
        int v12 = 0;
        ++v16;
        goto LABEL_18;
      }
      if (v13 == 100) {
        goto LABEL_17;
      }
      if (v13 == 110)
      {
LABEL_16:
        ++v16;
        int v12 = 1;
LABEL_18:
        --v17;
      }
    }
    else
    {
      int v12 = 0;
    }
LABEL_19:
    size_t v18 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6)) {
      size_t v14 = 0;
    }
    else {
      size_t v14 = v18;
    }
    return llvm::write_integer(a2, *(unsigned __int16 *)(a1 + 8), v14, v12);
  }
  int v7 = v15;
  size_t v18 = 0;
  int v8 = llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6);
  unint64_t v9 = v18;
  if (v8) {
    unint64_t v9 = 0;
  }
  if ((v7 & 0xFFFFFFFE) == 2) {
    unint64_t v10 = v9 + 2;
  }
  else {
    unint64_t v10 = v9;
  }
  return llvm::write_hex(a2, *(unsigned __int16 *)(a1 + 8), v7, v10, 1);
}

const char *llvm::jitlink::aarch64::getEdgeKindName(llvm::jitlink::aarch64 *this)
{
  char v1 = (_BYTE)this - 2;
  if (this - 2) < 0x13 && ((0x7FFFDu >> v1)) {
    return off_265592890[v1];
  }
  long long v2 = "<Unrecognized edge kind>";
  if (this == 1) {
    long long v2 = "Keep-Alive";
  }
  if (this) {
    return v2;
  }
  else {
    return "INVALID RELOCATION";
  }
}

void llvm::jitlink::aarch64::createEmptyPointerSigningFunction(llvm::jitlink::aarch64 *this, llvm::jitlink::LinkGraph *a2)
{
  llvm::jitlink::LinkGraph::blocks(this, v13);
  v11[0] = v13[0];
  v11[1] = v13[1];
  long long v11[2] = v13[2];
  long long v12 = v14;
  uint64_t v2 = v15;
  uint64_t v3 = v16;
  uint64_t v4 = (uint64_t *)v14;
  if (*(void *)&v13[0] != v15 || (void)v14 != v16)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = *(void *)(*v4 + 40);
      uint64_t v8 = *(void *)(v6 + 48);
      while (v7 != v8)
      {
        if (*(unsigned char *)(v7 + 24) == 3) {
          ++v5;
        }
        v7 += 32;
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)v11, (uint64_t)v10);
      uint64_t v4 = (uint64_t *)v12;
    }
    while (*(void *)&v11[0] != v2 || (void)v12 != v3);
  }
  llvm::jitlink::LinkGraph::createSection();
}

void llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction(llvm::jitlink::aarch64 *this@<X0>, unint64_t *a2@<X3>, void *a3@<X8>)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t SectionByName = llvm::jitlink::LinkGraph::findSectionByName((uint64_t)this, (uint64_t)"$__ptrauth_sign", 15, a2);
  uint64_t v6 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(SectionByName + 56);
  uint64_t v7 = *v6;
  uint64_t v8 = *(void *)(*v6 + 16);
  unint64_t v9 = *(std::__shared_weak_count_vtbl **)(v8 + 24);
  unint64_t v10 = *(std::__shared_weak_count_vtbl **)(v8 + 32);
  int v11 = *((_DWORD *)this + 43);
  uint64_t v50 = &unk_270DBC590;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v51, v9, v10, v11);
  uint64_t v53 = 0;
  uint64_t v49 = &v50;
  llvm::jitlink::LinkGraph::blocks(this, &v56);
  v47[0] = v56;
  v47[1] = v57;
  v47[2] = v58;
  long long v48 = v59;
  long long v12 = v60;
  uint64_t v13 = v65;
  uint64_t v14 = v59;
  if ((long long *)v56 != v60 || (void)v48 != v65)
  {
    do
    {
      uint64_t v16 = *(void **)v14;
      size_t v18 = *(unsigned int **)(*(void *)v14 + 40);
      uint64_t v17 = *(unsigned int **)(*(void *)v14 + 48);
      while (v18 != v17)
      {
        if (*((unsigned char *)v18 + 24) == 3)
        {
          unint64_t v19 = *((void *)v18 + 2);
          unint64_t v46 = v19;
          if (v19 >> 51 != 4096)
          {
            uint64_t v23 = *v16 + v18[2];
            v28[0] = "{0:x}";
            v28[1] = 5;
            uint64_t v28[2] = &v30;
            void v28[3] = 1;
            v29[0] = &unk_270DBD7D8;
            v29[1] = v23;
            unsigned int v30 = v29;
            void v41[2] = v28;
            __int16 v42 = 1539;
            int v43 = v41;
            __int16 v44 = " has invalid encoded addend  ";
            __int16 v45 = 770;
            __n128 v35 = "{0:x}";
            uint64_t v36 = 5;
            __int16 v37 = &v40;
            uint64_t v38 = 1;
            v39[0] = &unk_270DBE1A0;
            v39[1] = &v46;
            long long v40 = v39;
            v41[0] = "Pointer64Auth edge at ";
            operator new();
          }
          llvm::jitlink::aarch64::writeMovRegImm64Seq<llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction(llvm::jitlink::LinkGraph &)::$_0>((uint64_t)v34, (uint64_t *)&v49, 8, (*(void *)(*(void *)v18 + 24) & 0x1FFFFFFFFFFFFFFLL) + (int)v19 + **(void **)(*(void *)v18 + 16));
          llvm::jitlink::aarch64::writeMovRegImm64Seq<llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction(llvm::jitlink::LinkGraph &)::$_0>((uint64_t)v33, (uint64_t *)&v49, 9, *v16 + v18[2]);
          if ((v19 & 0x1000000000000) != 0)
          {
            llvm::BinaryStreamWriter::writeInteger<unsigned int>(&v32, (uint64_t)&v50);
            if (v32) {
              goto LABEL_23;
            }
            if (WORD2(v19))
            {
              llvm::BinaryStreamWriter::writeInteger<unsigned int>(&v32, (uint64_t)&v50);
LABEL_21:
              if (v32) {
                goto LABEL_23;
              }
            }
          }
          else if (WORD2(v19))
          {
            llvm::jitlink::aarch64::writeMovRegImm64Seq<llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction(llvm::jitlink::LinkGraph &)::$_0>((uint64_t)&v32, (uint64_t *)&v49, 10, WORD2(v19));
            goto LABEL_21;
          }
          llvm::BinaryStreamWriter::writeInteger<unsigned int>(&v32, (uint64_t)&v50);
LABEL_23:
          llvm::BinaryStreamWriter::writeInteger<unsigned int>(&v31, (uint64_t)&v50);
          uint64_t v20 = (unsigned int *)v16[6];
          int64_t v21 = (char *)v20 - (char *)(v18 + 8);
          if (v20 != v18 + 8) {
            memmove(v18, v18 + 8, v21 - 7);
          }
          uint64_t v17 = (unsigned int *)((char *)v18 + v21);
          v16[6] = (char *)v18 + v21;
        }
        else
        {
          v18 += 8;
        }
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)v47, (uint64_t)v28);
      uint64_t v14 = v48;
    }
    while (*(long long **)&v47[0] != v12 || (void)v48 != v13);
  }
  llvm::jitlink::aarch64::writeMovRegImm64Seq<llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction(llvm::jitlink::LinkGraph &)::$_0>((uint64_t)v27, (uint64_t *)&v49, 0, 0);
  llvm::jitlink::aarch64::writeMovRegImm64Seq<llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction(llvm::jitlink::LinkGraph &)::$_0>((uint64_t)v26, (uint64_t *)&v49, 1, 1uLL);
  llvm::BinaryStreamWriter::writeInteger<unsigned int>(&v25, (uint64_t)&v50);
  uint64_t v15 = (uint64_t *)((char *)this + 256);
  llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<>>((*(void *)(v7 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(v7 + 16), (uint64_t)&v54);
  *(void *)&long long v56 = v54;
  *((void *)&v56 + 1) = &v58;
  long long v57 = xmmword_261E8A770;
  if (v55[1]) {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v56 + 8, v55);
  }
  *((void *)&v59 + 1) = 0;
  uint64_t v61 = 0;
  uint64_t v64 = 0;
  long long v63 = 0u;
  uint64_t v60 = &v63;
  uint64_t v62 = 24;
  std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100](v15, (uint64_t)&v56);
  if (v60 != &v63) {
    free(v60);
  }
  if (*((long long **)&v56 + 1) != &v58) {
    free(*((void **)&v56 + 1));
  }
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected(&v54);
  *a3 = 0;
  uint64_t v50 = &unk_270DBC590;
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v52);
  }
}

uint64_t llvm::jitlink::aarch64::writeMovRegImm64Seq<llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction(llvm::jitlink::LinkGraph &)::$_0>(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = (void *)result;
  int v7 = 0;
  for (char i = 0; ; char i = 1)
  {
    if ((i & 1) == 0 || (_WORD)a4)
    {
      uint64_t result = llvm::BinaryStreamWriter::writeInteger<unsigned int>(v6, *a2);
      if (*v6) {
        break;
      }
    }
    a4 >>= 16;
    v7 += 0x200000;
    if (v7 == 0x800000)
    {
      *uint64_t v6 = 0;
      return result;
    }
  }
  return result;
}

uint64_t llvm::BinaryStreamWriter::writeInteger<unsigned int>(void *a1, uint64_t a2)
{
  uint64_t v4 = (llvm::WritableBinaryStreamRef *)(a2 + 8);
  (*(void (**)(void))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24));
  uint64_t result = llvm::WritableBinaryStreamRef::writeBytes(v4, *(void *)(a2 + 56), 4, a1);
  if (!*a1)
  {
    *(void *)(a2 + 56) += 4;
    *a1 = 0;
  }
  return result;
}

const char *llvm::jitlink::i386::getEdgeKindName(llvm::jitlink::i386 *this)
{
  if ((this - 2) < 0xB) {
    return off_265592928[(char)((_BYTE)this - 2)];
  }
  uint64_t v2 = "<Unrecognized edge kind>";
  if (this == 1) {
    uint64_t v2 = "Keep-Alive";
  }
  if (this) {
    return v2;
  }
  else {
    return "INVALID RELOCATION";
  }
}

void llvm::jitlink::i386::optimizeGOTAndStubAccesses(llvm::jitlink::i386 *this@<X0>, void *a2@<X8>)
{
  llvm::jitlink::LinkGraph::blocks(this, v15);
  v13[0] = v15[0];
  v13[1] = v15[1];
  void v13[2] = v15[2];
  long long v14 = v16;
  uint64_t v4 = v17;
  uint64_t v5 = v18;
  uint64_t v6 = (void **)v16;
  if (*(void *)&v15[0] != v17 || (void)v16 != v18)
  {
    do
    {
      int v7 = *v6;
      uint64_t v8 = v7[5];
      for (uint64_t i = v7[6]; v8 != i; v8 += 32)
      {
        if (*(unsigned char *)(v8 + 24) == 12)
        {
          uint64_t v10 = **(void **)(*(void *)(**(void **)(*(void *)(*(void *)v8 + 16) + 40) + 16) + 40);
          if (!((**(void **)(v10 + 16)
                - (*v7
                 + *(unsigned int *)(v8 + 8))
                + (*(void *)(v10 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                + 2147483652u) >> 32))
          {
            *(unsigned char *)(v8 + 24) = 10;
            *(void *)uint64_t v8 = v10;
          }
        }
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)v13, (uint64_t)&v12);
      uint64_t v6 = (void **)v14;
    }
    while (*(void *)&v13[0] != v4 || (void)v14 != v5);
  }
  *a2 = 0;
}

const char *llvm::jitlink::loongarch::getEdgeKindName(llvm::jitlink::loongarch *this)
{
  if ((this - 2) < 0xA) {
    return off_265592980[(char)((_BYTE)this - 2)];
  }
  uint64_t v2 = "<Unrecognized edge kind>";
  if (this == 1) {
    uint64_t v2 = "Keep-Alive";
  }
  if (this) {
    return v2;
  }
  else {
    return "INVALID RELOCATION";
  }
}

const char *llvm::jitlink::riscv::getEdgeKindName(llvm::jitlink::riscv *this)
{
  if ((this - 2) < 0x1D) {
    return off_2655929D0[(char)((_BYTE)this - 2)];
  }
  uint64_t v2 = "<Unrecognized edge kind>";
  if (this == 1) {
    uint64_t v2 = "Keep-Alive";
  }
  if (this) {
    return v2;
  }
  else {
    return "INVALID RELOCATION";
  }
}

const char *llvm::jitlink::x86_64::getEdgeKindName(llvm::jitlink::x86_64 *this)
{
  char v1 = (_BYTE)this - 2;
  if (this - 2) < 0x17 && ((0x5FFFFFu >> v1)) {
    return off_265592AB8[v1];
  }
  uint64_t v2 = "<Unrecognized edge kind>";
  if (this == 1) {
    uint64_t v2 = "Keep-Alive";
  }
  if (this) {
    return v2;
  }
  else {
    return "INVALID RELOCATION";
  }
}

void llvm::jitlink::x86_64::optimizeGOTAndStubAccesses(llvm::jitlink::x86_64 *this@<X0>, void *a2@<X8>)
{
  llvm::jitlink::LinkGraph::blocks(this, v24);
  v22[0] = v24[0];
  v22[1] = v24[1];
  uint64_t v22[2] = v24[2];
  long long v23 = v25;
  uint64_t v3 = v26;
  uint64_t v4 = v27;
  uint64_t v5 = (void **)v25;
  if (*(void *)&v24[0] != v26 || (void)v25 != v27)
  {
    do
    {
      uint64_t v6 = *v5;
      uint64_t v7 = v6[5];
      uint64_t v8 = v6[6];
      while (v7 != v8)
      {
        int v9 = *(unsigned __int8 *)(v7 + 24);
        if ((v9 - 18) >= 2)
        {
          if (v9 == 14)
          {
            uint64_t v11 = **(void **)(*(void *)(**(void **)(*(void *)(*(void *)v7 + 16) + 40) + 16) + 40);
            if (!((**(void **)(v11 + 16)
                  - (*v6
                   + *(unsigned int *)(v7 + 8))
                  + (*(void *)(v11 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                  + 2147483652u) >> 32))
            {
              *(unsigned char *)(v7 + 24) = 11;
LABEL_23:
              *(void *)uint64_t v7 = v11;
            }
          }
        }
        else
        {
          uint64_t v10 = *(unsigned int *)(v7 + 8);
          uint64_t v11 = **(void **)(*(void *)(*(void *)v7 + 16) + 40);
          unint64_t v12 = (*(void *)(v11 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(v11 + 16);
          unint64_t v13 = v12 - (*v6 + v10) + 2147483652u;
          unint64_t v14 = HIDWORD(v12);
          unint64_t v15 = HIDWORD(v13);
          if (v14) {
            BOOL v16 = v15 == 0;
          }
          else {
            BOOL v16 = 1;
          }
          if (v16)
          {
            uint64_t v17 = v6[3] + v10;
            int v18 = *(unsigned __int8 *)(v17 - 2);
            if (v18 == 139 && !v15)
            {
              *(unsigned char *)(v17 - 2) = -115;
              *(unsigned char *)(v7 + 24) = 7;
              *(void *)uint64_t v7 = v11;
              *(void *)(v7 + 16) -= 4;
              goto LABEL_24;
            }
            if (v18 == 255 && !v14)
            {
              if (*(unsigned char *)(v17 - 1) == 21)
              {
                *(_WORD *)(v17 - 2) = -6041;
              }
              else
              {
                *(unsigned char *)(v17 - 2) = -23;
                *(unsigned char *)(v17 + 3) = -112;
                --*(_DWORD *)(v7 + 8);
              }
              *(unsigned char *)(v7 + 24) = 3;
              goto LABEL_23;
            }
          }
        }
LABEL_24:
        v7 += 32;
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)v22, (uint64_t)v21);
      uint64_t v5 = (void **)v23;
    }
    while (*(void *)&v22[0] != v3 || (void)v23 != v4);
  }
  *a2 = 0;
}

void llvm::orc::registerFrameWrapper(llvm::orc *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
}

void llvm::orc::deregisterFrameWrapper(llvm::orc *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
}

uint64_t llvm::orc::walkLibunwindEHFrameSection<llvm::Error (*)(void const*)>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t (*a4)(unsigned int *))
{
  uint64_t v4 = (void *)result;
  if (a3 && (v5 = a2, (uint64_t v6 = *a2) != 0))
  {
    uint64_t v8 = (unsigned int *)((char *)a2 + a3);
    while (1)
    {
      uint64_t v9 = v6 == 0xFFFFFFFFLL ? 12 : 4;
      uint64_t v10 = v6 == 0xFFFFFFFFLL ? *(void *)(v5 + 1) + 12 : v6 + 4;
      if (*(unsigned int *)((char *)v5 + v9))
      {
        uint64_t result = a4(v5);
        if (*v4) {
          break;
        }
      }
      uint64_t v5 = (unsigned int *)((char *)v5 + v10);
      if (v5 != v8)
      {
        uint64_t v6 = *v5;
        if (*v5) {
          continue;
        }
      }
      goto LABEL_14;
    }
  }
  else
  {
LABEL_14:
    void *v4 = 0;
  }
  return result;
}

char *llvm_orc_registerEHFrameSectionWrapper(void *a1, unint64_t a2)
{
  llvm::orc::shared::detail::WrapperFunctionHandlerHelper<llvm::Error ()(llvm::orc::ExecutorAddrRange),llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>)>::ResultSerializer,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>::apply<llvm::Error (&)(llvm::orc::ExecutorAddrRange)>(&v3, (void (*)(char **__return_ptr, void, void))registerEHFrameWrapper, a1, a2);
  return v3;
}

uint64_t registerEHFrameWrapper@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::orc::walkLibunwindEHFrameSection<llvm::Error (*)(void const*)>(a3, a1, a2 - (void)a1, (uint64_t (*)(unsigned int *))llvm::orc::registerFrameWrapper);
}

char *llvm_orc_deregisterEHFrameSectionWrapper(void *a1, unint64_t a2)
{
  llvm::orc::shared::detail::WrapperFunctionHandlerHelper<llvm::Error ()(llvm::orc::ExecutorAddrRange),llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>)>::ResultSerializer,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>::apply<llvm::Error (&)(llvm::orc::ExecutorAddrRange)>(&v3, (void (*)(char **__return_ptr, void, void))deregisterEHFrameWrapper, a1, a2);
  return v3;
}

uint64_t deregisterEHFrameWrapper@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return llvm::orc::walkLibunwindEHFrameSection<llvm::Error (*)(void const*)>(a3, a1, a2 - (void)a1, (uint64_t (*)(unsigned int *))llvm::orc::deregisterFrameWrapper);
}

char *llvm::orc::shared::detail::WrapperFunctionHandlerHelper<llvm::Error ()(llvm::orc::ExecutorAddrRange),llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>)>::ResultSerializer,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>::apply<llvm::Error (&)(llvm::orc::ExecutorAddrRange)>(char **a1, void (*a2)(char **__return_ptr, void, void), void *a3, unint64_t a4)
{
  if (a4 >= 8 && (a4 & 0xFFFFFFFFFFFFFFF8) != 8)
  {
    a2(&v13, *a3, a3[1]);
    uint64_t v5 = v13;
    unint64_t v13 = 0;
    uint64_t v6 = (long long *)((char *)&v18 + 1);
    if (v5)
    {
      char v14 = 1;
      *(void *)&long long v18 = v5;
      llvm::toString((uint64_t *)&v18, &__p);
      if ((void)v18) {
        (*(void (**)(void))(*(void *)v18 + 8))(v18);
      }
      if (v14)
      {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v8 = size + 9;
        *(void *)&long long v18 = 0;
        *((void *)&v18 + 1) = size + 9;
        if (size > 0xFFFFFFFFFFFFFFF6)
        {
          uint64_t v9 = &v18;
          BOOL v16 = &v18;
          std::string::size_type v17 = size + 9;
          if (size == -9) {
            goto LABEL_21;
          }
          char v10 = 1;
        }
        else
        {
          uint64_t v9 = (long long *)malloc_type_malloc(size + 9, 0xBCDE199DuLL);
          uint64_t v6 = (long long *)((char *)v9 + 1);
          *(void *)&long long v18 = v9;
          char v10 = v14;
        }
LABEL_16:
        *(unsigned char *)uint64_t v9 = v10;
        BOOL v16 = v6;
        std::string::size_type v17 = v8 - 1;
        if (!v14
          || llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::serialize(&v16, (uint64_t)&__p))
        {
          *(_OWORD *)a1 = v18;
          long long v18 = 0uLL;
          goto LABEL_22;
        }
LABEL_21:
        llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", a1);
LABEL_22:
        if (*((void *)&v18 + 1) < 9uLL)
        {
          if (*((void *)&v18 + 1)) {
            goto LABEL_27;
          }
          unint64_t v12 = (void *)v18;
          if (!(void)v18) {
            goto LABEL_27;
          }
        }
        else
        {
          unint64_t v12 = (void *)v18;
        }
        free(v12);
LABEL_27:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t result = v13;
        if (v13) {
          return (char *)(*(uint64_t (**)(char *))(*(void *)v13 + 8))(v13);
        }
        return result;
      }
    }
    else
    {
      char v14 = 0;
      memset(&__p, 0, sizeof(__p));
    }
    char v10 = 0;
    long long v18 = xmmword_261E8D440;
    uint64_t v9 = &v18;
    uint64_t v8 = 1;
    goto LABEL_16;
  }
  return llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Could not deserialize arguments for wrapper function call", a1);
}

uint64_t llvm::orc::runAsMain(uint64_t (*a1)(void, char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string __p = 0;
  __p_8 = 0;
  unsigned int v29 = 0;
  uint64_t v7 = *(unsigned __int8 *)(a4 + 16);
  unint64_t v8 = a3 + v7;
  if (a3 + v7)
  {
    if (v8 >> 61) {
      goto LABEL_37;
    }
    unint64_t v33 = &v29;
    std::string __p = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v8);
    __p_8 = __p;
    int64x2_t v31 = vdupq_n_s64(0);
    char v10 = v29;
    unsigned int v29 = &__p[8 * v9];
    uint64_t v32 = v10;
    uint64_t v30 = v31.i64[0];
    std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer((uint64_t)&v30);
    uint64_t v7 = *(unsigned __int8 *)(a4 + 16);
  }
  unint64_t v11 = a3 + v7 + 1;
  if (a3 + v7 != -1)
  {
    if (!(v11 >> 61))
    {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v11);
      char v14 = &v12[8 * v13];
      LODWORD(v7) = *(unsigned __int8 *)(a4 + 16);
      goto LABEL_8;
    }
LABEL_37:
    abort();
  }
  unint64_t v12 = 0;
  char v14 = 0;
LABEL_8:
  if (v7) {
    operator new[]();
  }
  if (a3) {
    operator new[]();
  }
  unint64_t v15 = v12;
  if (v12 >= v14)
  {
    uint64_t v17 = 1;
    if ((unint64_t)((v14 - v12) >> 2) > 1) {
      uint64_t v17 = (v14 - v12) >> 2;
    }
    if ((unint64_t)(v14 - v12) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18) {
      unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v18);
    }
    unint64_t v19 = (char *)v18;
    *(void *)unint64_t v18 = 0;
    while (v15 != v12)
    {
      uint64_t v20 = *((void *)v15 - 1);
      v15 -= 8;
      *((void *)v19 - 1) = v20;
      v19 -= 8;
    }
    if (v12) {
      operator delete(v12);
    }
    unint64_t v12 = v19;
    uint64_t v16 = a1(a3 + *(unsigned __int8 *)(a4 + 16), v19);
  }
  else
  {
    *(void *)unint64_t v12 = 0;
    uint64_t v16 = a1(*(unsigned __int8 *)(a4 + 16), v12);
  }
  uint64_t v21 = v16;
  if (v12) {
    operator delete(v12);
  }
  if (__p)
  {
    __int16 v22 = __p_8;
    long long v23 = __p;
    if (__p_8 != __p)
    {
      do
      {
        uint64_t v25 = *((void *)v22 - 1);
        v22 -= 8;
        uint64_t v24 = v25;
        *(void *)__int16 v22 = 0;
        if (v25) {
          MEMORY[0x263E50080](v24, 0x1000C8077774924);
        }
      }
      while (v22 != __p);
      long long v23 = __p;
    }
    operator delete(v23);
  }
  return v21;
}

uint64_t std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      MEMORY[0x263E50080](v4, 0x1000C8077774924);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void llvm::orc::shared::runFinalizeActions(void *a1@<X0>, uint64_t a2@<X8>)
{
  long long v26 = 0uLL;
  v27[0] = 0;
  uint64_t v5 = (void *)*a1;
  uint64_t v4 = (void *)a1[1];
  if ((void *)*a1 == v4)
  {
    uint64_t v4 = (void *)*a1;
LABEL_32:
    a1[1] = v4;
    *(unsigned char *)(a2 + 24) &= ~1u;
    *(_OWORD *)a2 = v26;
    *(void *)(a2 + 16) = v27[0];
    long long v26 = 0uLL;
    v27[0] = 0;
    goto LABEL_33;
  }
  unint64_t v6 = 0;
  uint64_t v7 = v5;
  do
  {
    if (v7[7]) {
      ++v6;
    }
    v7 += 14;
  }
  while (v7 != v4);
  if (v6)
  {
    if (v6 > 0x492492492492492) {
LABEL_49:
    }
      abort();
    __n128 v35 = v27;
    int64x2_t v31 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::WrapperFunctionCall>>(v6);
    uint64_t v32 = v31;
    unint64_t v33 = v31;
    unint64_t v34 = &v31[7 * v8];
    std::vector<llvm::orc::shared::WrapperFunctionCall>::__swap_out_circular_buffer(&v26, &v31);
    std::__split_buffer<llvm::orc::shared::WrapperFunctionCall>::~__split_buffer((uint64_t)&v31);
    uint64_t v5 = (void *)*a1;
    uint64_t v4 = (void *)a1[1];
  }
  if (v5 == v4) {
    goto LABEL_32;
  }
  while (1)
  {
    if (*v5)
    {
      llvm::orc::shared::WrapperFunctionCall::runWithSPSRetErrorMerged((llvm::orc::shared::WrapperFunctionCall *)v5, &v25);
      uint64_t v9 = v25;
      if (v25) {
        break;
      }
    }
    uint64_t v10 = v5[7];
    if (v10)
    {
      uint64_t v11 = *((void *)&v26 + 1);
      if (*((void *)&v26 + 1) >= v27[0])
      {
        uint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v26 + 1) - v26) >> 3);
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) > 0x492492492492492) {
          goto LABEL_49;
        }
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v27[0] - v26) >> 3) > v14) {
          unint64_t v14 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v27[0] - v26) >> 3);
        }
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v27[0] - v26) >> 3)) >= 0x249249249249249) {
          unint64_t v15 = 0x492492492492492;
        }
        else {
          unint64_t v15 = v14;
        }
        __n128 v35 = v27;
        uint64_t v16 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::WrapperFunctionCall>>(v15);
        uint64_t v17 = &v16[7 * v13];
        int64x2_t v31 = v16;
        uint64_t v32 = v17;
        unint64_t v34 = &v16[7 * v18];
        *uint64_t v17 = (void *)v5[7];
        v17[1] = v17 + 4;
        *((_OWORD *)v17 + 1) = xmmword_261E8A770;
        if (v5[9]) {
          llvm::SmallVectorImpl<char>::operator=((uint64_t)(v17 + 1), (const void **)v5 + 8);
        }
        unint64_t v33 = v17 + 7;
        std::vector<llvm::orc::shared::WrapperFunctionCall>::__swap_out_circular_buffer(&v26, &v31);
        uint64_t v12 = *((void *)&v26 + 1);
        std::__split_buffer<llvm::orc::shared::WrapperFunctionCall>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        **((void **)&v26 + 1) = v10;
        *(void *)(v11 + 8) = v11 + 32;
        *(_OWORD *)(v11 + 16) = xmmword_261E8A770;
        if (v5[9]) {
          llvm::SmallVectorImpl<char>::operator=(v11 + 8, (const void **)v5 + 8);
        }
        uint64_t v12 = v11 + 56;
      }
      *((void *)&v26 + 1) = v12;
    }
    v5 += 14;
    if (v5 == v4)
    {
      unint64_t v19 = (void *)*a1;
      uint64_t v4 = (void *)a1[1];
      if (v4 != (void *)*a1)
      {
        do
        {
          v4 -= 14;
          std::allocator<llvm::orc::shared::AllocActionCallPair>::destroy[abi:nn180100]((uint64_t)(a1 + 2), v4);
        }
        while (v4 != v19);
        uint64_t v4 = v19;
      }
      goto LABEL_32;
    }
  }
  uint64_t v25 = 0;
  uint64_t v20 = 0;
  if (*((void *)&v26 + 1) != (void)v26)
  {
    uint64_t v21 = (*((void *)&v26 + 1) - (void)v26) / 56;
    __int16 v22 = (llvm::orc::shared::WrapperFunctionCall *)(v26 + 56 * v21 - 56);
    do
    {
      llvm::orc::shared::WrapperFunctionCall::runWithSPSRetErrorMerged(v22, &v28);
      uint64_t v30 = v28;
      int64x2_t v31 = v20;
      __int16 v28 = 0;
      llvm::ErrorList::join(&v31, &v30, &v29);
      if (v30) {
        (*((void (**)(void **))*v30 + 1))(v30);
      }
      if (v31) {
        (*((void (**)(void **))*v31 + 1))(v31);
      }
      uint64_t v20 = v29;
      unsigned int v29 = 0;
      if (v28) {
        (*((void (**)(void **))*v28 + 1))(v28);
      }
      __int16 v22 = (llvm::orc::shared::WrapperFunctionCall *)((char *)v22 - 56);
      --v21;
    }
    while (v21);
  }
  uint64_t v30 = v20;
  int64x2_t v31 = v9;
  llvm::ErrorList::join(&v31, &v30, &v24);
  if (v30) {
    (*((void (**)(void **))*v30 + 1))(v30);
  }
  if (v31) {
    (*((void (**)(void **))*v31 + 1))(v31);
  }
  *(unsigned char *)(a2 + 24) |= 1u;
  long long v23 = v25;
  *(void *)a2 = v24;
  uint64_t v24 = 0;
  if (v23) {
    (*((void (**)(void **))*v23 + 1))(v23);
  }
LABEL_33:
  int64x2_t v31 = (void **)&v26;
  std::vector<llvm::orc::shared::WrapperFunctionCall>::__destroy_vector::operator()[abi:nn180100](&v31);
}

void *std::vector<llvm::orc::shared::WrapperFunctionCall>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(v4 + v7 - 56);
      *(void *)(v6 + v7 - 48) = v6 + v7 - 24;
      uint64_t result = (void *)(v6 + v7 - 48);
      *(result - 1) = v8;
      *(_OWORD *)(result + 1) = xmmword_261E8A770;
      if (*(void *)(v4 + v7 - 40)) {
        uint64_t result = (void *)llvm::SmallVectorImpl<char>::operator=((uint64_t)result, (const void **)(v4 + v7 - 48));
      }
      v7 -= 56;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v9 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v9;
  uint64_t v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = v3[2];
  void v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::WrapperFunctionCall>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(56 * a1);
}

uint64_t std::__split_buffer<llvm::orc::shared::WrapperFunctionCall>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 56;
    uint64_t v4 = *(void **)(v2 - 48);
    if (v4 == (void *)(v2 - 24))
    {
      v2 -= 56;
    }
    else
    {
      free(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t llvm::orc::isMachOInitializerSection(void *__s2, size_t __n, void *a3, size_t a4)
{
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = (const void **)&llvm::orc::MachOInitSectionNames[v8];
    size_t v10 = *((void *)&llvm::orc::MachOInitSectionNames[v8] + 1);
    if (v10 >= __n)
    {
      uint64_t v11 = (char *)*v9;
      if (!__n || !memcmp(*v9, __s2, __n))
      {
        uint64_t v12 = v10 >= 7 ? 7 : v10;
        if (v10 - v12 == a4 && (v10 < 8 || !memcmp(&v11[v12], a3, a4))) {
          break;
        }
      }
    }
    if (++v8 == 22) {
      return 0;
    }
  }
  return 1;
}

uint64_t llvm::orc::isMachOInitializerSection(void *__s2, size_t __n)
{
  uint64_t v4 = (uint64_t *)llvm::orc::MachOInitSectionNames;
  while (v4[1] != __n || __n && memcmp((const void *)*v4, __s2, __n))
  {
    v4 += 2;
    if (v4 == &llvm::ProfileSummaryHugeWorkingSetSizeThreshold) {
      return 0;
    }
  }
  return 1;
}

BOOL llvm::orc::isELFInitializerSection(uint64_t a1, unint64_t a2)
{
  BOOL result = 0;
  if (a2 >= 0xB)
  {
    BOOL v2 = *(void *)a1 == 0x72615F74696E692ELL && *(void *)(a1 + 3) == 0x79617272615F7469;
    if (v2 && (a2 < 0xC || *(unsigned char *)(a1 + 11) == 46)) {
      return 1;
    }
  }
  return result;
}

double _GLOBAL__sub_I_ObjectFormats_cpp()
{
  llvm::orc::MachOInitSectionNames = llvm::orc::MachOModInitFuncSectionName;
  unk_26B41FD78 = llvm::orc::MachOObjCCatListSectionName;
  xmmword_26B41FD88 = llvm::orc::MachOObjCCatList2SectionName;
  unk_26B41FD98 = llvm::orc::MachOObjCClassListSectionName;
  xmmword_26B41FDA8 = llvm::orc::MachOObjCClassNameSectionName;
  unk_26B41FDB8 = llvm::orc::MachOObjCClassRefsSectionName;
  xmmword_26B41FDC8 = llvm::orc::MachOObjCConstSectionName;
  unk_26B41FDD8 = llvm::orc::MachOObjCDataSectionName;
  xmmword_26B41FDE8 = llvm::orc::MachOObjCImageInfoSectionName;
  unk_26B41FDF8 = llvm::orc::MachOObjCMethNameSectionName;
  xmmword_26B41FE08 = llvm::orc::MachOObjCMethTypeSectionName;
  unk_26B41FE18 = llvm::orc::MachOObjCNLCatListSectionName;
  xmmword_26B41FE28 = llvm::orc::MachOObjCNLClassListSectionName;
  unk_26B41FE38 = llvm::orc::MachOObjCProtoListSectionName;
  xmmword_26B41FE48 = llvm::orc::MachOObjCProtoRefsSectionName;
  unk_26B41FE58 = llvm::orc::MachOObjCSelRefsSectionName;
  xmmword_26B41FE68 = llvm::orc::MachOSwift5ProtoSectionName;
  unk_26B41FE78 = llvm::orc::MachOSwift5ProtosSectionName;
  xmmword_26B41FE88 = llvm::orc::MachOSwift5TypesSectionName;
  unk_26B41FE98 = llvm::orc::MachOSwift5TypeRefSectionName;
  double result = *(double *)&llvm::orc::MachOSwift5FieldMetadataSectionName;
  xmmword_26B41FEA8 = llvm::orc::MachOSwift5FieldMetadataSectionName;
  unk_26B41FEB8 = llvm::orc::MachOSwift5EntrySectionName;
  return result;
}

void anonymous namespace'::getOrcErrCat(_anonymous_namespace_ *this)
{
  {
  }
}

uint64_t llvm::orc::DuplicateDefinition::convertToErrorCode(llvm::orc::DuplicateDefinition *this)
{
  return 2;
}

llvm::raw_ostream *llvm::orc::DuplicateDefinition::log(llvm::orc::DuplicateDefinition *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v4 > 0x1FuLL)
  {
    qmemcpy(v4, "Duplicate definition of symbol '", 32);
    *((void *)a2 + 4) += 32;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Duplicate definition of symbol '", 0x20uLL);
  }
  uint64_t v7 = (const char *)*((void *)this + 1);
  uint64_t v6 = (char *)this + 8;
  uint64_t v5 = v7;
  int v8 = v6[23];
  if (v8 >= 0) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v5;
  }
  if (v8 >= 0) {
    size_t v10 = v6[23];
  }
  else {
    size_t v10 = *((void *)v6 + 1);
  }
  double result = llvm::raw_ostream::write(a2, v9, v10);
  uint64_t v12 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v12)
  {
    return llvm::raw_ostream::write(a2, "'", 1uLL);
  }
  else
  {
    *uint64_t v12 = 39;
    ++*((void *)a2 + 4);
  }
  return result;
}

void llvm::orc::DuplicateDefinition::~DuplicateDefinition(void **this)
{
  *this = &unk_270DBF468;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_270DBF468;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x263E500B0);
}

void *llvm::ErrorInfo<llvm::orc::DuplicateDefinition,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::orc::DuplicateDefinition::ID;
}

BOOL llvm::ErrorInfo<llvm::orc::DuplicateDefinition,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::DuplicateDefinition::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void anonymous namespace'::OrcErrorCategory::~OrcErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x263E500B0);
}

const char *anonymous namespace'::OrcErrorCategory::name(_anonymous_namespace_::OrcErrorCategory *this)
{
  return "orc";
}

void *anonymous namespace'::OrcErrorCategory::message@<X0>(int a1@<W1>, void *a2@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a2, off_265592B70[a1 - 1]);
}

void *llvm::JITSymbolFlags::fromObjectSymbol@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  double result = (*(void *(**)(void **__return_ptr))(**(void **)(a1 + 8) + 40))(&v11);
  if (v12)
  {
    uint64_t v7 = v11;
    *(unsigned char *)(a2 + 8) |= 1u;
    *(void *)a2 = v7;
  }
  else
  {
    unsigned int v5 = v11;
    double result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 120))(&v9);
    if (v10)
    {
      uint64_t v8 = v9;
      *(unsigned char *)(a2 + 8) |= 1u;
      *(void *)a2 = v8;
    }
    else
    {
      int v6 = (v5 >> 2) & 0x14 | (v5 >> 1) & 2;
      if (v9 == 5) {
        LOWORD(v6) = v6 | 0x20;
      }
      *(unsigned char *)(a2 + 8) &= ~1u;
      *(_WORD *)a2 = (_WORD)v6 << 8;
    }
    if (v12)
    {
      double result = v11;
      uint64_t v11 = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t llvm::object::ObjectFile::getCommonSymbolSize(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  (*(void (**)(void ***__return_ptr))(*(void *)a1 + 40))(&v8);
  if (v9)
  {
    uint64_t v7 = v8;
    uint64_t v8 = 0;
    llvm::report_fatal_error(&v7);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, a2);
  if (v9)
  {
    unsigned int v5 = v8;
    uint64_t v8 = 0;
    if (v5) {
      (*((void (**)(void **))*v5 + 1))(v5);
    }
  }
  return v4;
}

uint64_t *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::create(*(void *)a1, *(void *)(a1 + 8), (uint64_t)&v22);
  if ((v26 & 1) != 0 && (uint64_t v6 = v22, *(void *)&v22 = 0, v6))
  {
    *(unsigned char *)(a3 + 152) |= 1u;
    *(void *)a3 = v6;
  }
  else
  {
    long long v7 = *(_OWORD *)(a1 + 16);
    v16[0] = *(_OWORD *)a1;
    v16[1] = v7;
    long long v12 = v22;
    *(_OWORD *)std::string __p = v23;
    long long v23 = 0uLL;
    uint64_t v8 = v24;
    uint64_t v24 = 0;
    uint64_t v14 = v8;
    v15[0] = v16;
    v15[1] = 0;
    void v15[2] = 0;
    if (v25[1]) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)v15, v25);
    }
    llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFObjectFile((uint64_t)v17, v16, (uint64_t)&v12, 0, 0, 0);
    if (v15[0] != v16) {
      free(v15[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (a2
      && (llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::initContent((uint64_t)v17, &v11), (uint64_t v9 = v11) != 0))
    {
      *(unsigned char *)(a3 + 152) |= 1u;
      *(void *)a3 = v9;
    }
    else
    {
      *(unsigned char *)(a3 + 152) &= ~1u;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFObjectFile(a3, (uint64_t)v17);
    }
    v17[0] = &unk_270DBF500;
    if (v20 != &v21) {
      free(v20);
    }
    if (v18)
    {
      unint64_t v19 = v18;
      operator delete(v18);
    }
  }
  return llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::~Expected((uint64_t *)&v22);
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::initContent@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  double result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((void *)(a1 + 56), (uint64_t)&v10);
  uint64_t v5 = v10;
  if ((v12 & 1) == 0)
  {
    if (v11)
    {
      uint64_t v6 = 40 * v11;
      long long v7 = (int *)(v10 + 4);
      while (1)
      {
        int v8 = *v7;
        if (*v7 == 2) {
          break;
        }
        if (v8 != 18)
        {
          if (v8 != 11) {
            goto LABEL_11;
          }
          uint64_t v9 = (void *)(a1 + 120);
          if (*(void *)(a1 + 120)) {
            goto LABEL_11;
          }
LABEL_10:
          *uint64_t v9 = v7 - 1;
          goto LABEL_11;
        }
        uint64_t v9 = (void *)(a1 + 136);
        if (!*(void *)(a1 + 136)) {
          goto LABEL_10;
        }
LABEL_11:
        v7 += 10;
        v6 -= 40;
        if (!v6) {
          goto LABEL_15;
        }
      }
      uint64_t v9 = (void *)(a1 + 128);
      if (*(void *)(a1 + 128)) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v5 = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFObjectFile(void *a1)
{
  *a1 = &unk_270DBF500;
  BOOL v2 = (void *)a1[12];
  if (v2 != a1 + 15) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFObjectFile(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v12 = *a2;
  long long v11 = a2[1];
  *(_DWORD *)(a1 + 8) = 13;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  *(void *)a1 = &unk_270DBF500;
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a3;
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::vector((void *)(a1 + 72), a3 + 16);
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  if (*(void *)(a3 + 48)) {
    llvm::SmallVectorImpl<char>::operator=(a1 + 96, a3 + 40);
  }
  *(void *)(a1 + 120) = a4;
  *(void *)(a1 + 128) = a5;
  *(void *)(a1 + 136) = a6;
  return a1;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFObjectFile(void *a1)
{
  *a1 = &unk_270DBF500;
  BOOL v2 = (void *)a1[12];
  if (v2 != a1 + 15) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x263E500B0);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::moveSymbolNext(uint64_t a1, uint64_t a2)
{
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolFlags@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 7;
  double result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v32);
  int v8 = (_WORD *)v32;
  if (v33)
  {
    uint64_t v32 = 0;
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v8;
    goto LABEL_88;
  }
  unsigned int v9 = *(unsigned __int8 *)(v32 + 12);
  if ((v9 & 0xF0) == 0x20) {
    int v10 = 6;
  }
  else {
    int v10 = 2;
  }
  if (v9 < 0x10) {
    int v10 = 0;
  }
  if (*(__int16 *)(v32 + 14) == -15) {
    int v11 = v10 | 8;
  }
  else {
    int v11 = v10;
  }
  long long v12 = (unsigned int *)a1[16];
  if (v12)
  {
    double result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(v6, v12, (uint64_t)&v29);
    uint64_t v13 = v29;
    if (v31) {
      goto LABEL_33;
    }
    BOOL v14 = v8 == v29;
  }
  else
  {
    BOOL v14 = 0;
  }
  unint64_t v15 = (unsigned int *)a1[15];
  if (v15)
  {
    double result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(v6, v15, (uint64_t)&v29);
    uint64_t v13 = v29;
    if ((v31 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_33:
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v13;
    goto LABEL_88;
  }
  uint64_t v13 = 0;
LABEL_17:
  int v16 = v8 == v13 || v14;
  if ((v9 & 0xF) - 3 < 2) {
    int v16 = 1;
  }
  if (v16) {
    int v17 = v11 | 0x80;
  }
  else {
    int v17 = v11;
  }
  int v18 = *(unsigned __int16 *)(*v6 + 18);
  switch(v18)
  {
    case 183:
      double result = (*(void *(**)(_WORD **__return_ptr, void *, uint64_t))(*a1 + 80))(&v29, a1, a2);
      if (v31)
      {
        __int16 v28 = v29;
        unsigned int v29 = 0;
        llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v28);
        double result = v28;
        if (v28) {
          double result = (void *)(*(uint64_t (**)(void *))(*v28 + 8))(v28);
        }
        if (v31)
        {
          double result = v29;
          unsigned int v29 = 0;
          if (result) {
            double result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
          }
        }
        int v19 = v17;
      }
      else
      {
        int v19 = v17;
        if (v30 >= 2)
        {
          int v19 = v11 | 0x80;
          if (*v29 != 25636)
          {
            if (*v29 == 30756) {
              int v19 = v11 | 0x80;
            }
            else {
              int v19 = v17;
            }
          }
        }
      }
      int v17 = v19;
      break;
    case 40:
      double result = (*(void *(**)(_WORD **__return_ptr, void *, uint64_t))(*a1 + 80))(&v29, a1, a2);
      if (v31)
      {
        __int16 v28 = v29;
        unsigned int v29 = 0;
        llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v28);
        double result = v28;
        if (v28) {
          double result = (void *)(*(uint64_t (**)(void *))(*v28 + 8))(v28);
        }
        if (v31)
        {
          double result = v29;
          unsigned int v29 = 0;
          if (result) {
            double result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
          }
        }
        unsigned int v20 = v17;
        goto LABEL_67;
      }
      if (v30)
      {
        unsigned int v20 = v17;
        if (v30 == 1)
        {
LABEL_67:
          if ((v8[6] & 0xF) == 2) {
            unsigned int v20 = v20 & 0xFFFFFEFF | ((*((_DWORD *)v8 + 1) & 1) << 8);
          }
          int v17 = v20;
          break;
        }
        if (*v29 != 25636)
        {
          unsigned int v20 = v11 | 0x80;
          if (*v29 != 29732)
          {
            if (*v29 == 24868) {
              unsigned int v20 = v11 | 0x80;
            }
            else {
              unsigned int v20 = v17;
            }
          }
          goto LABEL_67;
        }
      }
      unsigned int v20 = v11 | 0x80;
      goto LABEL_67;
    case 243:
      double result = (*(void *(**)(_WORD **__return_ptr, void *, uint64_t))(*a1 + 80))(&v29, a1, a2);
      if (v31)
      {
        uint64_t v21 = (uint64_t)v29;
        unsigned int v29 = 0;
        uint64_t v27 = (void *)v21;
        llvm::consumeError((uint64_t *)&v27);
        double result = v27;
        if (v27) {
          double result = (void *)(*(uint64_t (**)(void *))(*v27 + 8))(v27);
        }
      }
      else if (!v30)
      {
        int v17 = v11 | 0x80;
      }
      if (v31)
      {
        double result = v29;
        unsigned int v29 = 0;
        if (result) {
          double result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        }
      }
      break;
  }
  if (v8[7])
  {
    unsigned int v22 = *((unsigned __int8 *)v8 + 12);
    int v23 = v22 & 0xF;
    if (v23 != 5 && (unsigned __int16)v8[7] != 65522) {
      goto LABEL_76;
    }
  }
  else
  {
    v17 |= 1u;
    unsigned int v22 = *((unsigned __int8 *)v8 + 12);
    int v23 = v22 & 0xF;
    if (v23 != 5) {
      goto LABEL_76;
    }
  }
  v17 |= 0x10u;
LABEL_76:
  unsigned int v24 = v22 >> 4;
  if (v24 <= 0xA && ((1 << v24) & 0x406) != 0)
  {
    int v25 = *((unsigned char *)v8 + 13) & 3;
    if (v25 == 3 || (*((unsigned char *)v8 + 13) & 3) == 0) {
      v17 |= 0x40u;
    }
  }
  else
  {
    int v25 = *((unsigned char *)v8 + 13) & 3;
  }
  if (v23 == 10) {
    int v26 = v17 | 0x20;
  }
  else {
    int v26 = v17;
  }
  if (v25 == 2) {
    v26 |= 0x200u;
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v26;
LABEL_88:
  if (v33)
  {
    double result = (void *)v32;
    uint64_t v32 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::symbol_begin(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1) {
    unsigned int v2 = *(_DWORD *)(v1 + 20) > 0xFu;
  }
  else {
    unsigned int v2 = 0;
  }
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::symbol_end(void *a1)
{
  uint64_t v1 = a1[16];
  if (v1) {
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::toDRI((uint64_t)a1, v1, *(_DWORD *)(v1 + 20) >> 4);
  }
  else {
    return (*(uint64_t (**)(void *))(*a1 + 48))(a1);
  }
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::is64Bit(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 376))(a1) == 8;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolName(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v32);
  if (v33)
  {
    int v10 = v32;
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v10;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(v6, a2, (uint64_t)&v30);
  uint64_t v7 = v30;
  if ((v31 & 1) == 0)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(v6, *(_DWORD *)(v30 + 24), (uint64_t)&v28);
    uint64_t v8 = v28;
    if (v29)
    {
      uint64_t v28 = 0;
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v8;
LABEL_37:
      if (v31)
      {
        uint64_t v18 = v30;
        uint64_t v30 = 0;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
      }
      goto LABEL_40;
    }
    *(void *)&long long v24 = llvm::object::defaultWarningHandler;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v24, (uint64_t)v26);
    if (v27)
    {
      uint64_t v11 = v26[0];
      v26[0] = 0;
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v11;
LABEL_34:
      if (v29)
      {
        uint64_t v17 = v28;
        uint64_t v28 = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
      }
      goto LABEL_37;
    }
    llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getName(v32, v26[0], v26[1], (uint64_t)&v24);
    char v9 = v25;
    if ((v25 & 1) != 0 || !*((void *)&v24 + 1))
    {
      if ((*((unsigned char *)v32 + 12) & 0xF) == 3)
      {
        (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*a1 + 128))(&v21, a1, a2);
        if ((v23 & 1) == 0)
        {
          if (v25)
          {
            uint64_t v12 = v24;
            *(void *)&long long v24 = 0;
          }
          else
          {
            uint64_t v12 = 0;
          }
          uint64_t v20 = v12;
          llvm::consumeError(&v20);
          if (v20) {
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 144))(v22, v21);
          if (v23)
          {
            uint64_t v14 = v21;
            uint64_t v21 = 0;
            if (v14) {
              (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
            }
          }
          if (v25)
          {
            uint64_t v15 = v24;
            *(void *)&long long v24 = 0;
            if (v15) {
              (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
            }
          }
          goto LABEL_31;
        }
        uint64_t v13 = v21;
        uint64_t v21 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
        char v9 = v25;
      }
      *(unsigned char *)(a3 + 16) = *(unsigned char *)(a3 + 16) & 0xFE | v9 & 1;
      if (v9)
      {
        *(void *)a3 = v24;
        goto LABEL_31;
      }
    }
    else
    {
      *(unsigned char *)(a3 + 16) &= ~1u;
    }
    *(_OWORD *)a3 = v24;
LABEL_31:
    if (v27)
    {
      uint64_t v16 = v26[0];
      v26[0] = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    goto LABEL_34;
  }
  uint64_t v30 = 0;
  *(unsigned char *)(a3 + 16) |= 1u;
  *(void *)a3 = v7;
LABEL_40:
  if (v33)
  {
    int v19 = v32;
    uint64_t v32 = 0;
    if (v19) {
      (*(void (**)(llvm::object *))(*(void *)v19 + 8))(v19);
    }
  }
}

unsigned int *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  double result = (unsigned int *)llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v25);
  if (v26)
  {
    uint64_t v8 = v25;
    goto LABEL_10;
  }
  uint64_t v7 = v25;
  double result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v23);
  uint64_t v8 = v23;
  if (v24)
  {
LABEL_10:
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v8;
    return result;
  }
  int v9 = *(unsigned __int16 *)(v23 + 14);
  if ((v9 - 65521) < 2 || v9 == 0)
  {
    *(unsigned char *)(a3 + 8) &= ~1u;
    *(void *)a3 = v7;
    return result;
  }
  double result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection((void *)(a1 + 56), a2, (uint64_t)&v21);
  if (v22)
  {
    uint64_t v14 = v21;
    uint64_t v21 = 0;
    goto LABEL_18;
  }
  if (*(_WORD *)(*(void *)(a1 + 56) + 16) == 1)
  {
    uint64_t v11 = *(unsigned int **)(a1 + 136);
    if (v11)
    {
      double result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable((void *)(a1 + 56), v11, (uint64_t)&v18);
      if (v20)
      {
        uint64_t v14 = v18;
        goto LABEL_18;
      }
      uint64_t v13 = v18;
      uint64_t v12 = v19;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    *(void *)&long long v15 = v13;
    *((void *)&v15 + 1) = v12;
    char v16 = 1;
    uint64_t v17 = 0;
    double result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection((void *)(a1 + 56), v23, v21, &v15, (uint64_t)&v18);
    uint64_t v14 = v18;
    if ((v19 & 1) == 0)
    {
      if (v18) {
        v7 += v18[3];
      }
      goto LABEL_23;
    }
LABEL_18:
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v14;
    goto LABEL_24;
  }
LABEL_23:
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v7;
LABEL_24:
  if (v22)
  {
    double result = v21;
    uint64_t v21 = 0;
    if (result) {
      double result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  if (v24)
  {
    double result = (unsigned int *)v23;
    uint64_t v23 = 0;
    if (result) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 56;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v7);
  if (v8)
  {
    uint64_t v6 = (void **)v7;
    uint64_t v7 = 0;
    llvm::report_fatal_error(&v6);
  }
  uint64_t result = *(unsigned int *)(v7 + 4);
  if (*(__int16 *)(v7 + 14) != -15)
  {
    int v4 = *(unsigned __int16 *)(*(void *)v2 + 18);
    if ((v4 == 40 || v4 == 8) && (*(unsigned char *)(v7 + 12) & 0xF) == 2) {
      return result & 0xFFFFFFFE;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    uint64_t v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  if (*(__int16 *)(v4 + 14) == -14) {
    return *(unsigned int *)(v4 + 4);
  }
  else {
    return 0;
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getCommonSymbolSizeImpl(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 448))();
}

unsigned int *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v7);
  uint64_t v5 = v7;
  if (v8)
  {
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v5;
  }
  else
  {
    switch(*(unsigned char *)(v7 + 12) & 0xF)
    {
      case 0:
        *(unsigned char *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = 0;
        return result;
      case 1:
      case 5:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 2;
        goto LABEL_10;
      case 2:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 5;
        goto LABEL_10;
      case 3:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 3;
        goto LABEL_10;
      case 4:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 4;
        goto LABEL_10;
      default:
        *(unsigned char *)(a3 + 8) &= ~1u;
        int v6 = 1;
LABEL_10:
        *(_DWORD *)a3 = v6;
        break;
    }
  }
  return result;
}

unsigned int *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = a2;
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v6 = a1 + 7;
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v12);
  if (v13)
  {
    uint64_t v8 = (uint64_t)v12;
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v8;
  }
  else
  {
    uint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(v6, v3, (uint64_t)&v10);
    if (v11)
    {
      uint64_t v9 = v10;
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v9;
    }
    else
    {
      uint64_t result = (unsigned int *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolSection(a1, (uint64_t)v12, v10, a3);
      if (v11)
      {
        uint64_t result = v10;
        int v10 = 0;
        if (result) {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
        }
      }
    }
    if (v13)
    {
      uint64_t result = v12;
      uint64_t v12 = 0;
      if (result) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::moveSectionNext(uint64_t a1, void *a2)
{
  *a2 += 40;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = llvm::object::defaultWarningHandler;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName((void *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v3, a3);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionAddress(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 12);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((void *)(a1 + 56), (uint64_t)&v7);
  if (v8)
  {
    unsigned int v3 = v7;
    uint64_t v7 = 0;
  }
  else
  {
    unsigned int v3 = 0;
  }
  int v6 = v3;
  llvm::handleAllErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6);
  if (v6) {
    (*(void (**)(void *))(*v6 + 8))(v6);
  }
  uint64_t v4 = v7;
  if (v8)
  {
    uint64_t v7 = 0;
    if (v4) {
      (*(void (**)(void *))(*v4 + 8))(v4);
    }
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((a2 - (uint64_t)v4) >> 3);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionSize(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 20);
}

llvm::object *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContents@<X0>(llvm::object *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[1] == 8)
  {
    uint64_t v4 = *((void *)result + 2);
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = v4;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    int v6 = (void *)((char *)result + 16);
    long long v7 = *((_OWORD *)result + 2);
    v11[0] = *((_OWORD *)result + 1);
    v11[1] = v7;
    uint64_t result = llvm::object::Binary::checkOffset((llvm::object *)v11, a2[4] + *(void *)&v11[0], a2[5], &v12);
    uint64_t v8 = v12;
    if (v12)
    {
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v8;
    }
    else
    {
      uint64_t v9 = a2[5];
      uint64_t v10 = *v6 + a2[4];
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)a3 = v10;
      *(void *)(a3 + 8) = v9;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 32);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isSectionCompressed(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 9) >> 3) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isSectionText(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 8) >> 2) & 1;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isSectionData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) != 1) {
    return 0;
  }
  if ((*(_DWORD *)(a2 + 8) & 2) != 0) {
    return (*(_DWORD *)(a2 + 8) & 4) == 0;
  }
  return 0;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isSectionBSS(uint64_t a1, uint64_t a2)
{
  return (*(unsigned char *)(a2 + 8) & 3) != 0 && *(_DWORD *)(a2 + 4) == 8;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 8;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isBerkeleyText(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  BOOL v3 = (v2 & 4) != 0 || (*(_DWORD *)(a2 + 8) & 1) == 0;
  return (v2 & 2) != 0 && v3;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isBerkeleyData(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1) & 1) != 0 || *(_DWORD *)(a2 + 4) == 8) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a2 + 8) >> 1) & 1;
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isDebugSection(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 144))(&v6);
  if (v8)
  {
    uint64_t v5 = v6;
    uint64_t v6 = 0;
    llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v5);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    if (v8)
    {
      uint64_t result = v6;
      uint64_t v6 = 0;
      if (!result) {
        return result;
      }
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    }
    return 0;
  }
  if (v7 < 6) {
    return 0;
  }
  if (*(_DWORD *)v6 == 1650811950 && *(_WORD *)(v6 + 4) == 26485) {
    return 1;
  }
  if (v7 < 7) {
    return 0;
  }
  if (*(_DWORD *)v6 == 1701083694 && *(_DWORD *)(v6 + 3) == 1735746149) {
    return 1;
  }
  if (v7 != 10) {
    return 0;
  }
  return *(void *)v6 == 0x646E695F6264672ELL && *(_WORD *)(v6 + 8) == 30821;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::section_rel_begin(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((void *)(a1 + 56), (uint64_t)&v5);
  uint64_t result = v5;
  if ((v6 & 1) == 0) {
    return ((a2 - v5) / (unint64_t)*(unsigned __int16 *)(*(void *)(a1 + 56) + 46));
  }
  uint64_t v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::section_rel_end(void *a1, _DWORD *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 272))(a1);
  int v5 = a2[1];
  if (v5 == 4 || v5 == 9)
  {
    RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelSection((uint64_t)a1, v4);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1 + 7, *((_DWORD *)RelSection + 6), (uint64_t)&v16);
    if (v17)
    {
      uint64_t v9 = v16;
      char v16 = 0;
      char v11 = v9;
      *(void *)&v12.__val_ = llvm::errorToErrorCode(&v11);
      v12.__cat_ = v10;
      std::error_code::message(&v13, &v12);
      __int16 v15 = 260;
      uint64_t v14 = &v13;
      llvm::report_fatal_error((llvm *)&v14, (const llvm::Twine *)1);
    }
    return v4 | ((unint64_t)(a2[5] / a2[9] + HIDWORD(v4)) << 32);
  }
  return v4;
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocatedSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 4 || v5 == 9)
  {
    uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1 + 7, *(_DWORD *)(a2 + 28), (uint64_t)&v10);
    uint64_t v7 = v10;
    if (v11)
    {
      *(unsigned char *)(a3 + 16) |= 1u;
    }
    else
    {
      *(unsigned char *)(a3 + 16) &= ~1u;
      *(void *)(a3 + 8) = a1;
    }
    *(void *)a3 = v7;
  }
  else
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*a1 + 360))(a1);
    *(unsigned char *)(a3 + 16) &= ~1u;
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v9;
  }
  return result;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::moveRelocationNext(uint64_t a1, uint64_t a2)
{
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelSection(a1, a2)+ 1) == 9)Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRel(a1, a2); {
  else
  }
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRela(a1, a2);
  return *(unsigned int *)Rel;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationSymbol(uint64_t a1, uint64_t a2)
{
  RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelSection(a1, a2);
  if (*((_DWORD *)RelSection + 1) == 9) {
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRel(a1, a2);
  }
  else {
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRela(a1, a2);
  }
  unsigned int v6 = *((_DWORD *)Rel + 1);
  if (v6 > 0xFF) {
    return *((unsigned int *)RelSection + 6) | ((unint64_t)(v6 >> 8) << 32);
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationType(uint64_t a1, uint64_t a2)
{
  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelSection(a1, a2)+ 1) == 9)Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRel(a1, a2); {
  else
  }
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRela(a1, a2);
  return *((unsigned __int8 *)Rel + 4);
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationTypeName(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1 + 7;
  unsigned int v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 320))(a1);
  return llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationTypeName(v4, v5, a3);
}

uint64_t llvm::object::ObjectFile::mapReflectionSectionNameToEnumValue()
{
  return 10;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::dynamic_relocation_sections(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::string __p = 0;
  __int16 v37 = 0;
  uint64_t v38 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((void *)(a1 + 56), (uint64_t)&v39);
  if ((v41 & 1) == 0 && v40)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v39;
    uint64_t v6 = v39 + 40 * v40;
    do
    {
      if (*(_DWORD *)(v5 + 4) == 6)
      {
        uint64_t v7 = (int *)(*(unsigned int *)(v5 + 16) + *(void *)(a1 + 16));
        int v8 = *v7;
        if (*v7)
        {
          do
          {
            if (v8 == 17 || v8 == 7 || v8 == 23)
            {
              uint64_t v9 = v7[1];
              if (v4 >= v38)
              {
                char v11 = __p;
                uint64_t v12 = (v4 - __p) >> 3;
                unint64_t v13 = v12 + 1;
                if ((unint64_t)(v12 + 1) >> 61) {
LABEL_56:
                }
                  abort();
                uint64_t v14 = v38 - __p;
                if ((v38 - __p) >> 2 > v13) {
                  unint64_t v13 = v14 >> 2;
                }
                if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v15 = v13;
                }
                if (v15)
                {
                  char v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v38, v15);
                  char v11 = __p;
                  uint64_t v4 = v37;
                }
                else
                {
                  char v16 = 0;
                }
                char v17 = &v16[8 * v12];
                *(void *)char v17 = v9;
                uint64_t v10 = v17 + 8;
                while (v4 != v11)
                {
                  uint64_t v18 = *((void *)v4 - 1);
                  v4 -= 8;
                  *((void *)v17 - 1) = v18;
                  v17 -= 8;
                }
                std::string __p = v17;
                uint64_t v38 = &v16[8 * v15];
                if (v11) {
                  operator delete(v11);
                }
              }
              else
              {
                *(void *)uint64_t v4 = v9;
                uint64_t v10 = v4 + 8;
              }
              __int16 v37 = v10;
              uint64_t v4 = v10;
            }
            int v19 = v7[2];
            v7 += 2;
            int v8 = v19;
          }
          while (v19);
        }
      }
      v5 += 40;
    }
    while (v5 != v6);
    if (v40)
    {
      char v20 = 0;
      uint64_t v21 = v39;
      uint64_t v22 = v39 + 40 * v40;
      uint64_t v23 = a2 + 2;
      do
      {
        char v24 = __p;
        if (__p != v37)
        {
          while (*(void *)v24 != *(_DWORD *)(v21 + 12))
          {
            v24 += 8;
            if (v24 == v37)
            {
              char v24 = v37;
              break;
            }
          }
        }
        if (v24 != v37)
        {
          if ((unint64_t)v20 >= *v23)
          {
            uint64_t v25 = (v20 - *a2) >> 4;
            if ((unint64_t)(v25 + 1) >> 60) {
              goto LABEL_56;
            }
            uint64_t v26 = *v23 - (void)*a2;
            uint64_t v27 = v26 >> 3;
            if (v26 >> 3 <= (unint64_t)(v25 + 1)) {
              uint64_t v27 = v25 + 1;
            }
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v27;
            }
            char v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(a2 + 2), v28);
            char v31 = &v29[16 * v25];
            *(void *)char v31 = v21;
            *((void *)v31 + 1) = a1;
            char v33 = *a2;
            uint64_t v32 = a2[1];
            uint64_t v34 = v31;
            if (v32 != *a2)
            {
              do
              {
                *((_OWORD *)v34 - 1) = *((_OWORD *)v32 - 1);
                v34 -= 16;
                v32 -= 16;
              }
              while (v32 != v33);
              uint64_t v32 = *a2;
            }
            char v20 = v31 + 16;
            *a2 = v34;
            a2[1] = v31 + 16;
            a2[2] = &v29[16 * v30];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *(void *)char v20 = v21;
            *((void *)v20 + 1) = a1;
            v20 += 16;
          }
          a2[1] = v20;
        }
        v21 += 40;
      }
      while (v21 != v22);
    }
  }
  if (v41)
  {
    uint64_t v35 = v39;
    uint64_t v39 = 0;
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
    }
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::section_begin(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((void *)(a1 + 56), (uint64_t)&v2);
  uint64_t result = v2;
  if (v3)
  {
    uint64_t v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::section_end(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((void *)(a1 + 56), (uint64_t)v2);
  uint64_t result = v2[0];
  if ((v3 & 1) == 0) {
    return v2[0] + 40 * v2[1];
  }
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getBytesInAddress()
{
  return 4;
}

const char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getFileFormatName(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  int v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 != 2)
  {
    if (v2 != 1) {
      llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
    }
    int v3 = *(unsigned __int16 *)(v1 + 18);
    if (v3 > 82)
    {
      if (v3 <= 223)
      {
        if (v3 > 104)
        {
          if (v3 == 105) {
            return "elf32-msp430";
          }
          if (v3 == 164) {
            return "elf32-hexagon";
          }
        }
        else
        {
          if (v3 == 83) {
            return "elf32-avr";
          }
          if (v3 == 94) {
            return "elf32-xtensa";
          }
        }
      }
      else if (v3 <= 243)
      {
        if (v3 == 224) {
          return "elf32-amdgpu";
        }
        if (v3 == 243) {
          return "elf32-littleriscv";
        }
      }
      else
      {
        switch(v3)
        {
          case 244:
            return "elf32-lanai";
          case 252:
            return "elf32-csky";
          case 258:
            return "elf32-loongarch";
        }
      }
    }
    else
    {
      if (v3 <= 17)
      {
        uint64_t result = "elf32-m68k";
        switch(v3)
        {
          case 2:
            return "elf32-sparc";
          case 3:
            uint64_t result = "elf32-i386";
            break;
          case 4:
            return result;
          case 6:
            uint64_t result = "elf32-iamcu";
            break;
          case 8:
            uint64_t result = "elf32-mips";
            break;
          default:
            return "elf32-unknown";
        }
        return result;
      }
      if (v3 > 39)
      {
        if (v3 == 40) {
          return "elf32-littlearm";
        }
        if (v3 == 62) {
          return "elf32-x86-64";
        }
      }
      else
      {
        if (v3 == 18) {
          return "elf32-sparc";
        }
        if (v3 == 20) {
          return "elf32-powerpcle";
        }
      }
    }
    return "elf32-unknown";
  }
  int v5 = *(unsigned __int16 *)(v1 + 18);
  if (v5 > 182)
  {
    if (v5 > 246)
    {
      switch(v5)
      {
        case 247:
          return "elf64-bpf";
        case 251:
          return "elf64-ve";
        case 258:
          return "elf64-loongarch";
      }
    }
    else
    {
      switch(v5)
      {
        case 183:
          return "elf64-littleaarch64";
        case 224:
          return "elf64-amdgpu";
        case 243:
          return "elf64-littleriscv";
      }
    }
  }
  else if (v5 > 21)
  {
    switch(v5)
    {
      case 22:
        return "elf64-s390";
      case 43:
        return "elf64-sparc";
      case 62:
        return "elf64-x86-64";
    }
  }
  else
  {
    switch(v5)
    {
      case 3:
        return "elf64-i386";
      case 8:
        return "elf64-mips";
      case 21:
        return "elf64-powerpcle";
    }
  }
  return "elf64-unknown";
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getArch(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  unsigned int v2 = *(unsigned __int16 *)(v1 + 18);
  if (v2 <= 0x52)
  {
    if (*(unsigned __int16 *)(v1 + 18) <= 0x27u)
    {
      uint64_t result = 15;
      switch(*(_WORD *)(v1 + 18))
      {
        case 2:
        case 0x12:
          return 31;
        case 3:
        case 6:
          return 37;
        case 4:
          return result;
        case 8:
          int v6 = *(unsigned __int8 *)(v1 + 4);
          if (v6 != 1)
          {
            if (v6 == 2) {
              return 19;
            }
LABEL_54:
            llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
          }
          uint64_t result = 17;
          break;
        case 0x14:
          return 22;
        case 0x15:
          return 24;
        case 0x16:
          return 32;
        default:
          return 0;
      }
      return result;
    }
    switch(v2)
    {
      case '(':
        return 1;
      case '+':
        return 30;
      case '>':
        return 38;
    }
    return 0;
  }
  if (*(unsigned __int16 *)(v1 + 18) <= 0xDFu)
  {
    if (*(unsigned __int16 *)(v1 + 18) <= 0x68u)
    {
      if (v2 == 83) {
        return 7;
      }
      if (v2 == 94) {
        return 40;
      }
    }
    else
    {
      switch(v2)
      {
        case 0x69u:
          return 20;
        case 0xA4u:
          return 12;
        case 0xB7u:
          return 3;
      }
    }
    return 0;
  }
  switch(*(_WORD *)(v1 + 18))
  {
    case 0xF3:
      int v4 = *(unsigned __int8 *)(v1 + 4);
      if (v4 != 1)
      {
        if (v4 == 2) {
          return 28;
        }
        goto LABEL_54;
      }
      return 27;
    case 0xF4:
      return 55;
    case 0xF5:
    case 0xF6:
    case 0xF8:
    case 0xF9:
    case 0xFA:
      return 0;
    case 0xF7:
      return 8;
    case 0xFB:
      return 60;
    case 0xFC:
      return 10;
    default:
      if (v2 == 224)
      {
        int v7 = *(unsigned __int8 *)(v1 + 36);
        unsigned int v8 = v7 - 1;
        if ((v7 - 32) >= 0x28) {
          unsigned int v9 = 0;
        }
        else {
          unsigned int v9 = 26;
        }
        if (v8 >= 0x10) {
          uint64_t result = v9;
        }
        else {
          uint64_t result = 25;
        }
      }
      else
      {
        if (v2 != 258) {
          return 0;
        }
        int v5 = *(unsigned __int8 *)(v1 + 4);
        if (v5 != 1)
        {
          if (v5 == 2) {
            return 14;
          }
          goto LABEL_54;
        }
        uint64_t result = 13;
      }
      break;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStartAddress@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 56);
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(void *)a2 = *(unsigned int *)(v2 + 24);
  return result;
}

uint64_t llvm::object::ObjectFile::mapDebugSectionName(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isRelocatableObject(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 56) + 16) == 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolSize(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned int *)(v4 + 8);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 12) >> 4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolOther(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 13);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolELFType(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if (v5)
  {
    int v3 = (void **)v4;
    uint64_t v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned char *)(v4 + 12) & 0xF;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionType(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 4);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionFlags(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionOffset(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationAddend@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelSection(a1, a2)+ 1) != 4)llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(); {
  uint64_t result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRela(a1, a2);
  }
  uint64_t v7 = *((int *)result + 2);
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v7;
  return result;
}

unsigned char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getBuildAttributes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, llvm::ELFAttributeParser *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  char v5 = (void *)(a1 + 56);
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((void *)(a1 + 56), (uint64_t)&v16);
  if (v18)
  {
    uint64_t v9 = v16;
    uint64_t v16 = 0;
    *(void *)a3 = v9;
    goto LABEL_8;
  }
  if (!v17)
  {
LABEL_6:
    *(void *)a3 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = (_DWORD *)(v16 + 4);
  uint64_t v8 = 40 * v17;
  while (*v7 != 1879048195)
  {
    v7 += 10;
    v8 -= 40;
    if (!v8) {
      goto LABEL_6;
    }
  }
  uint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<char>(v5, (uint64_t)(v7 - 1), (uint64_t)&v13);
  uint64_t v10 = v13;
  if (v15) {
    goto LABEL_19;
  }
  if (*v13 != 65 || v14 == 1)
  {
    uint64_t v10 = 0;
LABEL_19:
    *(void *)a3 = v10;
    goto LABEL_8;
  }
  uint64_t result = (unsigned char *)llvm::ELFAttributeParser::parse(a2, (uint64_t)v13, v14, 1, a3);
  uint64_t v12 = *(void *)a3;
  if (v15)
  {
    uint64_t result = v13;
    unint64_t v13 = 0;
    if (result) {
      uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
    }
  }
  if (!v12) {
    goto LABEL_6;
  }
LABEL_8:
  if (v18)
  {
    uint64_t result = (unsigned char *)v16;
    uint64_t v16 = 0;
    if (result) {
      return (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getDynamicSymbolIterators@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::dynamic_symbol_begin(a1);
  unint64_t v6 = v5;
  unint64_t result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::dynamic_symbol_end(a1);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v8;
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getPlatformFlags(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 56) + 36);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEType(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 56) + 16);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEMachine(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 56) + 18);
}

void *std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::__vallocate[abi:nn180100](a1, 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3));
    unint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    abort();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(40 * a2);
}

unsigned int *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>@<X0>(void *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1, a2, (uint64_t)&v9);
  unint64_t v8 = v9;
  if (v10)
  {
    *(unsigned char *)(a4 + 8) |= 1u;
    *(void *)a4 = v8;
  }
  else
  {
    unint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(a1, v9, a3, a4);
    if (v10)
    {
      unint64_t result = v9;
      uint64_t v9 = 0;
      if (result) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::toDRI(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((void *)(a1 + 56), (uint64_t)&v7);
    unint64_t v5 = v7;
    if (v8)
    {
      unint64_t v7 = 0;
      if (v5)
      {
        (*(void (**)(unint64_t))(*(void *)v5 + 8))(v5);
        LODWORD(v5) = 0;
      }
      a3 = 0;
    }
    else
    {
      unint64_t v5 = (a2 - v7) / 0x28;
    }
  }
  else
  {
    a3 = 0;
    LODWORD(v5) = 0;
  }
  return v5 | ((unint64_t)a3 << 32);
}

uint64_t *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    v13[0] = 0;
    v13[1] = 0;
    char v14 = 0;
LABEL_5:
    long long v9 = a4[1];
    v12[0] = *a4;
    v12[1] = v9;
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1, a2, (uint64_t)a3, v12, a5);
    if ((v14 & 1) == 0) {
      return result;
    }
    goto LABEL_8;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(a1, a3, (uint64_t)v13);
  if ((v14 & 1) == 0)
  {
    a3 = (unsigned int *)v13[0];
    goto LABEL_5;
  }
  uint64_t v11 = v13[0];
  v13[0] = 0;
  *(unsigned char *)(a5 + 8) |= 1u;
  *(void *)a5 = v11;
LABEL_8:
  unint64_t result = (uint64_t *)v13[0];
  v13[0] = 0;
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  return result;
}

uint64_t *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  long long v7 = a4[1];
  v10[0] = *a4;
  v10[1] = v7;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(a2, a3, v10, (uint64_t)&v11);
  if (v12)
  {
    long long v9 = v11;
    *(unsigned char *)(a5 + 8) |= 1u;
    *(void *)a5 = v9;
  }
  else if (v11)
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1, v11, a5);
    if (v12)
    {
      unint64_t result = v11;
      uint64_t v11 = 0;
      if (result) {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
    }
  }
  else
  {
    *(unsigned char *)(a5 + 8) &= ~1u;
    *(void *)a5 = 0;
  }
  return result;
}

uint64_t *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int16 *)(a1 + 14);
  if (v5 != 0xFFFF)
  {
    *(unsigned char *)(a4 + 8) &= ~1u;
    if ((unsigned __int16)(v5 + 256) <= 0x100u)
    {
      *(_DWORD *)a4 = 0;
      return result;
    }
    goto LABEL_6;
  }
  long long v6 = a3[1];
  v9[0] = *a3;
  v9[1] = v6;
  unint64_t result = llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)1,false>>((unint64_t)(a1 - a2) >> 4, (uint64_t *)v9, (uint64_t)&v10);
  if ((v11 & 1) == 0)
  {
    *(unsigned char *)(a4 + 8) &= ~1u;
    int v5 = v10;
LABEL_6:
    *(_DWORD *)a4 = v5;
    return result;
  }
  uint64_t v8 = v10;
  *(unsigned char *)(a4 + 8) |= 1u;
  *(void *)a4 = v8;
  return result;
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolSection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v8 = (unsigned int *)a1[17];
  if (v8)
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable(a1 + 7, v8, (uint64_t)&v17);
    if (v19)
    {
      uint64_t v12 = v17;
      goto LABEL_9;
    }
    char v11 = v17;
    uint64_t v10 = v18;
  }
  else
  {
    uint64_t v10 = 0;
    char v11 = 0;
  }
  *(void *)&long long v14 = v11;
  *((void *)&v14 + 1) = v10;
  char v15 = 1;
  uint64_t v16 = 0;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1 + 7, a2, a3, &v14, (uint64_t)&v17);
  uint64_t v12 = v17;
  if (v18)
  {
LABEL_9:
    *(unsigned char *)(a4 + 16) |= 1u;
    *(void *)a4 = v12;
    return result;
  }
  if (v17)
  {
    *(unsigned char *)(a4 + 16) &= ~1u;
    *(void *)a4 = v12;
    *(void *)(a4 + 8) = a1;
  }
  else
  {
    unint64_t result = (void *)(*(uint64_t (**)(void *))(*a1 + 360))(a1);
    *(unsigned char *)(a4 + 16) &= ~1u;
    *(void *)a4 = result;
    *(void *)(a4 + 8) = v13;
    if (v18)
    {
      unint64_t result = v17;
      uint64_t v17 = 0;
      if (result) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void *llvm::handleAllErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  llvm::handleErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v2, &v3);
  unint64_t result = v2;
  if (v2) {
    return (void *)(*(uint64_t (**)(void *))(*v2 + 8))(v2);
  }
  return result;
}

void **llvm::handleErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>@<X0>(void **result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result)
  {
    *unint64_t result = 0;
    if ((*(unsigned int (**)(void *, void *))(*v3 + 48))(v3, &llvm::ErrorList::ID))
    {
      *a2 = 0;
      uint64_t v4 = (void ***)v3[1];
      int v5 = (void ***)v3[2];
      if (v4 != v5)
      {
        long long v6 = 0;
        do
        {
          long long v9 = v6;
          long long v7 = *v4;
          const void *v4 = 0;
          (*((void (**)(void **, void *))*v7 + 6))(v7, &llvm::ErrorInfoBase::ID);
          uint64_t v8 = v7;
          llvm::ErrorList::join(&v9, &v8, &v10);
          long long v6 = v10;
          *a2 = v10;
          uint64_t v10 = 0;
          if (v8) {
            (*((void (**)(void **))*v8 + 1))(v8);
          }
          if (v9) {
            (*((void (**)(void **))*v9 + 1))(v9);
          }
          ++v4;
        }
        while (v4 != v5);
      }
      return (void **)(*(uint64_t (**)(void *))(*v3 + 8))(v3);
    }
    else
    {
      unint64_t result = (void **)(*(uint64_t (**)(void *, void *))(*v3 + 48))(v3, &llvm::ErrorInfoBase::ID);
      *a2 = v3;
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

llvm::object *llvm::object::Binary::checkOffset@<X0>(llvm::object *result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v5 = a3 + a2;
  if (__CFADD__(a3, a2)
    || v5 < a3
    || (*(void *)result <= a2 ? (BOOL v6 = v5 > *(void *)result + *((void *)result + 1)) : (BOOL v6 = 1), v6))
  {
    *(void *)&v7.__val_ = llvm::object::object_category(result);
    return (llvm::object *)llvm::errorCodeToError((llvm *)4, v7, a4);
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelSection(uint64_t a1, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection((void *)(a1 + 56), a2, (uint64_t)&v10);
  if (v11)
  {
    uint64_t v3 = v10;
    uint64_t v10 = 0;
    unint64_t v5 = v3;
    *(void *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    __int16 v9 = 260;
    uint64_t v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRel(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if (v11)
  {
    uint64_t v3 = v10;
    uint64_t v10 = 0;
    unint64_t v5 = v3;
    *(void *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    __int16 v9 = 260;
    uint64_t v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

void **llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRela(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if (v11)
  {
    uint64_t v3 = v10;
    uint64_t v10 = 0;
    unint64_t v5 = v3;
    *(void *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    __int16 v9 = 260;
    uint64_t v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

unsigned int *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>@<X0>(void *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1, a2, (uint64_t)&v9);
  uint64_t v8 = v9;
  if (v10)
  {
    *(unsigned char *)(a4 + 8) |= 1u;
    *(void *)a4 = v8;
  }
  else
  {
    unint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>(a1, v9, a3, a4);
    if (v10)
    {
      unint64_t result = v9;
      __int16 v9 = 0;
      if (result) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>(a1, a2, (uint64_t)v22);
  if (v23)
  {
    uint64_t v8 = v22[0];
    char v9 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    if (v22[1] <= (unint64_t)a3)
    {
      uint64_t v11 = 8 * a3;
      v12[0] = "can't read an entry at 0x";
      _OWORD v12[2] = &v11;
      __int16 v13 = 3587;
      v14[0] = v12;
      uint64_t v14[2] = ": it goes past the end of the section (0x";
      __int16 v15 = 770;
      uint64_t v10 = a2[5];
      v16[0] = v14;
      long long v16[2] = &v10;
      __int16 v17 = 3586;
      uint64_t v18 = v16;
      char v19 = ")";
      __int16 v20 = 770;
      int v21 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v8 = v22[0] + 8 * a3;
    char v9 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v9;
  *(void *)a4 = v8;
  return result;
}

unsigned int *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>@<X0>(void *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1, a2, (uint64_t)&v9);
  uint64_t v8 = v9;
  if (v10)
  {
    *(unsigned char *)(a4 + 8) |= 1u;
    *(void *)a4 = v8;
  }
  else
  {
    unint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>(a1, v9, a3, a4);
    if (v10)
    {
      unint64_t result = v9;
      char v9 = 0;
      if (result) {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>(a1, a2, (uint64_t)v22);
  if (v23)
  {
    uint64_t v8 = v22[0];
    char v9 = *(unsigned char *)(a4 + 8) | 1;
  }
  else
  {
    if (v22[1] <= (unint64_t)a3)
    {
      uint64_t v11 = 12 * a3;
      v12[0] = "can't read an entry at 0x";
      _OWORD v12[2] = &v11;
      __int16 v13 = 3587;
      v14[0] = v12;
      uint64_t v14[2] = ": it goes past the end of the section (0x";
      __int16 v15 = 770;
      uint64_t v10 = a2[5];
      v16[0] = v14;
      long long v16[2] = &v10;
      __int16 v17 = 3586;
      uint64_t v18 = v16;
      char v19 = ")";
      __int16 v20 = 770;
      int v21 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>();
    }
    uint64_t v8 = v22[0] + 12 * a3;
    char v9 = *(unsigned char *)(a4 + 8) & 0xFE;
  }
  *(unsigned char *)(a4 + 8) = v9;
  *(void *)a4 = v8;
  return result;
}

void *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationTypeName(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  std::string v7 = (llvm::object *)*(unsigned __int16 *)(*a1 + 18);
  if (v7 == 8 && *(unsigned char *)(v6 + 4) == 2)
  {
    ELFRelocationTypeName = (char *)llvm::object::getELFRelocationTypeName((llvm::object *)8, a2);
    llvm::SmallVectorImpl<char>::append<char const*,void>(a3, ELFRelocationTypeName, &ELFRelocationTypeName[v9]);
    uint64_t v10 = (char *)llvm::object::getELFRelocationTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), BYTE1(a2));
    uint64_t v12 = v11;
    llvm::SmallVectorImpl<char>::append(a3, 1uLL, 47);
    llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v10, &v10[v12]);
    __int16 v13 = llvm::object::getELFRelocationTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), BYTE2(a2));
    uint64_t v15 = v14;
    llvm::SmallVectorImpl<char>::append(a3, 1uLL, 47);
    uint64_t v16 = (char *)&v13[v15];
    __int16 v17 = a3;
    uint64_t v18 = (char *)v13;
  }
  else
  {
    char v19 = llvm::object::getELFRelocationTypeName(v7, a2);
    uint64_t v16 = (char *)&v19[v20];
    __int16 v17 = a3;
    uint64_t v18 = (char *)v19;
  }
  return llvm::SmallVectorImpl<char>::append<char const*,void>(v17, v18, v16);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::dynamic_symbol_begin(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  unsigned int v2 = v1 && *(_DWORD *)(v1 + 20) > 0xFu;
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::dynamic_symbol_end(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (v1) {
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::toDRI(a1, v1, *(_DWORD *)(v1 + 20) >> 4);
  }
  else {
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::dynamic_symbol_begin(a1);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFObjectFile(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 32);
  v9[0] = *(_OWORD *)(a2 + 16);
  v9[1] = v4;
  long long v6 = *(_OWORD *)(a2 + 56);
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::vector(__p, a2 + 72);
  v8[1] = 0;
  uint64_t v8[2] = 0;
  v8[0] = v9;
  if (*(void *)(a2 + 104)) {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)v8, a2 + 96);
  }
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFObjectFile(a1, v9, (uint64_t)&v6, *(void *)(a2 + 120), *(void *)(a2 + 128), *(void *)(a2 + 136));
  if (v8[0] != v9) {
    free(v8[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

uint64_t *llvm::Expected<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 152);
  uint64_t v3 = *a1;
  if (v2)
  {
    *a1 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    (*(void (**)(uint64_t *))v3)(a1);
  }
  return a1;
}

uint64_t *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::create(*(void *)a1, *(void *)(a1 + 8), (uint64_t)&v22);
  if ((v26 & 1) != 0 && (uint64_t v6 = v22, *(void *)&v22 = 0, v6))
  {
    *(unsigned char *)(a3 + 152) |= 1u;
    *(void *)a3 = v6;
  }
  else
  {
    long long v7 = *(_OWORD *)(a1 + 16);
    v16[0] = *(_OWORD *)a1;
    v16[1] = v7;
    long long v12 = v22;
    *(_OWORD *)std::string __p = v23;
    long long v23 = 0uLL;
    uint64_t v8 = v24;
    uint64_t v24 = 0;
    uint64_t v14 = v8;
    v15[0] = v16;
    v15[1] = 0;
    void v15[2] = 0;
    if (v25[1]) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)v15, v25);
    }
    llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::ELFObjectFile((uint64_t)v17, v16, (uint64_t)&v12, 0, 0, 0);
    if (v15[0] != v16) {
      free(v15[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (a2
      && (llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::initContent((uint64_t)v17, &v11), (uint64_t v9 = v11) != 0))
    {
      *(unsigned char *)(a3 + 152) |= 1u;
      *(void *)a3 = v9;
    }
    else
    {
      *(unsigned char *)(a3 + 152) &= ~1u;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::ELFObjectFile(a3, (uint64_t)v17);
    }
    v17[0] = &unk_270DBF738;
    if (v20 != &v21) {
      free(v20);
    }
    if (v18)
    {
      char v19 = v18;
      operator delete(v18);
    }
  }
  return llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::~Expected((uint64_t *)&v22);
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::initContent@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((void *)(a1 + 56), (uint64_t)&v10);
  uint64_t v5 = v10;
  if ((v12 & 1) == 0)
  {
    if (v11)
    {
      uint64_t v6 = 40 * v11;
      long long v7 = (unsigned int *)(v10 + 4);
      while (1)
      {
        unsigned int v8 = bswap32(*v7);
        if (v8 == 2) {
          break;
        }
        if (v8 != 18)
        {
          if (v8 != 11) {
            goto LABEL_11;
          }
          uint64_t v9 = (void *)(a1 + 120);
          if (*(void *)(a1 + 120)) {
            goto LABEL_11;
          }
LABEL_10:
          *uint64_t v9 = v7 - 1;
          goto LABEL_11;
        }
        uint64_t v9 = (void *)(a1 + 136);
        if (!*(void *)(a1 + 136)) {
          goto LABEL_10;
        }
LABEL_11:
        v7 += 10;
        v6 -= 40;
        if (!v6) {
          goto LABEL_15;
        }
      }
      uint64_t v9 = (void *)(a1 + 128);
      if (*(void *)(a1 + 128)) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v5 = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  *a2 = v5;
  return result;
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::~ELFObjectFile(void *a1)
{
  *a1 = &unk_270DBF738;
  char v2 = (void *)a1[12];
  if (v2 != a1 + 15) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::ELFObjectFile(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v12 = *a2;
  long long v11 = a2[1];
  *(_DWORD *)(a1 + 8) = 14;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  *(void *)a1 = &unk_270DBF738;
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a3;
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::vector((void *)(a1 + 72), a3 + 16);
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  if (*(void *)(a3 + 48)) {
    llvm::SmallVectorImpl<char>::operator=(a1 + 96, a3 + 40);
  }
  *(void *)(a1 + 120) = a4;
  *(void *)(a1 + 128) = a5;
  *(void *)(a1 + 136) = a6;
  return a1;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::~ELFObjectFile(void *a1)
{
  *a1 = &unk_270DBF738;
  char v2 = (void *)a1[12];
  if (v2 != a1 + 15) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x263E500B0);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::moveSymbolNext(uint64_t a1, uint64_t a2)
{
}

void *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolFlags@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 7;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v31);
  unsigned int v8 = (_WORD *)v31;
  if (v32)
  {
    uint64_t v31 = 0;
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v8;
    goto LABEL_87;
  }
  unsigned int v9 = *(unsigned __int8 *)(v31 + 12);
  if ((v9 & 0xF0) == 0x20) {
    int v10 = 6;
  }
  else {
    int v10 = 2;
  }
  if (v9 < 0x10) {
    int v10 = 0;
  }
  if (*(__int16 *)(v31 + 14) == -3585) {
    int v11 = v10 | 8;
  }
  else {
    int v11 = v10;
  }
  long long v12 = (unsigned int *)a1[16];
  if (v12)
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(v6, v12, (uint64_t)&v28);
    uint64_t v13 = v28;
    if (v30) {
      goto LABEL_33;
    }
    BOOL v14 = v8 == v28;
  }
  else
  {
    BOOL v14 = 0;
  }
  uint64_t v15 = (unsigned int *)a1[15];
  if (v15)
  {
    unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(v6, v15, (uint64_t)&v28);
    uint64_t v13 = v28;
    if ((v30 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_33:
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v13;
    goto LABEL_87;
  }
  uint64_t v13 = 0;
LABEL_17:
  int v16 = v8 == v13 || v14;
  if ((v9 & 0xF) - 3 < 2) {
    int v16 = 1;
  }
  if (v16) {
    int v17 = v11 | 0x80;
  }
  else {
    int v17 = v11;
  }
  int v18 = *(unsigned __int16 *)(*v6 + 18);
  switch(v18)
  {
    case 46848:
      unint64_t result = (*(void *(**)(_WORD **__return_ptr, void *, uint64_t))(*a1 + 80))(&v28, a1, a2);
      if (v30)
      {
        uint64_t v27 = v28;
        unint64_t v28 = 0;
        llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v27);
        unint64_t result = v27;
        if (v27) {
          unint64_t result = (void *)(*(uint64_t (**)(void *))(*v27 + 8))(v27);
        }
        if (v30)
        {
          unint64_t result = v28;
          unint64_t v28 = 0;
          if (result) {
            unint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
          }
        }
        int v19 = v17;
      }
      else
      {
        int v19 = v17;
        if (v29 >= 2)
        {
          int v19 = v11 | 0x80;
          if (*v28 != 25636)
          {
            if (*v28 == 30756) {
              int v19 = v11 | 0x80;
            }
            else {
              int v19 = v17;
            }
          }
        }
      }
LABEL_68:
      int v17 = v19;
      break;
    case 10240:
      unint64_t result = (*(void *(**)(_WORD **__return_ptr, void *, uint64_t))(*a1 + 80))(&v28, a1, a2);
      if (v30)
      {
        uint64_t v27 = v28;
        unint64_t v28 = 0;
        llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v27);
        unint64_t result = v27;
        if (v27) {
          unint64_t result = (void *)(*(uint64_t (**)(void *))(*v27 + 8))(v27);
        }
        if (v30)
        {
          unint64_t result = v28;
          unint64_t v28 = 0;
          if (result) {
            unint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
          }
        }
        int v19 = v17;
      }
      else
      {
        if (!v29) {
          goto LABEL_65;
        }
        int v19 = v17;
        if (v29 == 1) {
          goto LABEL_66;
        }
        if (*v28 == 25636)
        {
LABEL_65:
          int v19 = v11 | 0x80;
        }
        else
        {
          int v19 = v11 | 0x80;
          if (*v28 != 29732)
          {
            if (*v28 == 24868) {
              int v19 = v11 | 0x80;
            }
            else {
              int v19 = v17;
            }
          }
        }
      }
LABEL_66:
      if ((v8[6] & 0xF) == 2)
      {
        int v17 = v8[3] & 0x100 | v19;
        break;
      }
      goto LABEL_68;
    case 62208:
      unint64_t result = (*(void *(**)(_WORD **__return_ptr, void *, uint64_t))(*a1 + 80))(&v28, a1, a2);
      if (v30)
      {
        uint64_t v20 = (uint64_t)v28;
        unint64_t v28 = 0;
        char v26 = (void *)v20;
        llvm::consumeError((uint64_t *)&v26);
        unint64_t result = v26;
        if (v26) {
          unint64_t result = (void *)(*(uint64_t (**)(void *))(*v26 + 8))(v26);
        }
      }
      else if (!v29)
      {
        int v17 = v11 | 0x80;
      }
      if (v30)
      {
        unint64_t result = v28;
        unint64_t v28 = 0;
        if (result) {
          unint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
        }
      }
      break;
  }
  if (v8[7])
  {
    unsigned int v21 = *((unsigned __int8 *)v8 + 12);
    int v22 = v21 & 0xF;
    if (v22 != 5 && (unsigned __int16)v8[7] != 62207) {
      goto LABEL_75;
    }
  }
  else
  {
    v17 |= 1u;
    unsigned int v21 = *((unsigned __int8 *)v8 + 12);
    int v22 = v21 & 0xF;
    if (v22 != 5) {
      goto LABEL_75;
    }
  }
  v17 |= 0x10u;
LABEL_75:
  unsigned int v23 = v21 >> 4;
  if (v23 <= 0xA && ((1 << v23) & 0x406) != 0)
  {
    int v24 = *((unsigned char *)v8 + 13) & 3;
    if (v24 == 3 || (*((unsigned char *)v8 + 13) & 3) == 0) {
      v17 |= 0x40u;
    }
  }
  else
  {
    int v24 = *((unsigned char *)v8 + 13) & 3;
  }
  if (v22 == 10) {
    int v25 = v17 | 0x20;
  }
  else {
    int v25 = v17;
  }
  if (v24 == 2) {
    v25 |= 0x200u;
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v25;
LABEL_87:
  if (v32)
  {
    unint64_t result = (void *)v31;
    uint64_t v31 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::symbol_begin(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1) {
    unsigned int v2 = bswap32(*(_DWORD *)(v1 + 20)) > 0xF;
  }
  else {
    unsigned int v2 = 0;
  }
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::symbol_end(void *a1)
{
  uint64_t v1 = a1[16];
  if (v1) {
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::toDRI((uint64_t)a1, v1, bswap32(*(_DWORD *)(v1 + 20)) >> 4);
  }
  else {
    return (*(uint64_t (**)(void *))(*a1 + 48))(a1);
  }
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::is64Bit(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 376))(a1) == 8;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolName(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v32);
  if (v33)
  {
    int v10 = v32;
    *(unsigned char *)(a3 + 16) |= 1u;
    *(void *)a3 = v10;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(v6, a2, (uint64_t)&v30);
  uint64_t v7 = v30;
  if ((v31 & 1) == 0)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(v6, bswap32(*(_DWORD *)(v30 + 24)), (uint64_t)&v28);
    uint64_t v8 = v28;
    if (v29)
    {
      uint64_t v28 = 0;
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v8;
LABEL_37:
      if (v31)
      {
        uint64_t v18 = v30;
        uint64_t v30 = 0;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
      }
      goto LABEL_40;
    }
    *(void *)&long long v24 = llvm::object::defaultWarningHandler;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, void *))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v24, (uint64_t)v26);
    if (v27)
    {
      uint64_t v11 = v26[0];
      v26[0] = 0;
      *(unsigned char *)(a3 + 16) |= 1u;
      *(void *)a3 = v11;
LABEL_34:
      if (v29)
      {
        uint64_t v17 = v28;
        uint64_t v28 = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
      }
      goto LABEL_37;
    }
    llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getName(v32, v26[0], v26[1], (uint64_t)&v24);
    char v9 = v25;
    if ((v25 & 1) != 0 || !*((void *)&v24 + 1))
    {
      if ((v32[3] & 0xF) == 3)
      {
        (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*a1 + 128))(&v21, a1, a2);
        if ((v23 & 1) == 0)
        {
          if (v25)
          {
            uint64_t v12 = v24;
            *(void *)&long long v24 = 0;
          }
          else
          {
            uint64_t v12 = 0;
          }
          uint64_t v20 = v12;
          llvm::consumeError(&v20);
          if (v20) {
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 144))(v22, v21);
          if (v23)
          {
            uint64_t v14 = v21;
            uint64_t v21 = 0;
            if (v14) {
              (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
            }
          }
          if (v25)
          {
            uint64_t v15 = v24;
            *(void *)&long long v24 = 0;
            if (v15) {
              (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
            }
          }
          goto LABEL_31;
        }
        uint64_t v13 = v21;
        uint64_t v21 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
        char v9 = v25;
      }
      *(unsigned char *)(a3 + 16) = *(unsigned char *)(a3 + 16) & 0xFE | v9 & 1;
      if (v9)
      {
        *(void *)a3 = v24;
        goto LABEL_31;
      }
    }
    else
    {
      *(unsigned char *)(a3 + 16) &= ~1u;
    }
    *(_OWORD *)a3 = v24;
LABEL_31:
    if (v27)
    {
      uint64_t v16 = v26[0];
      v26[0] = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    goto LABEL_34;
  }
  uint64_t v30 = 0;
  *(unsigned char *)(a3 + 16) |= 1u;
  *(void *)a3 = v7;
LABEL_40:
  if (v33)
  {
    int v19 = v32;
    char v32 = 0;
    if (v19) {
      (*(void (**)(unsigned int *))(*(void *)v19 + 8))(v19);
    }
  }
}

unsigned int *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  unint64_t result = (unsigned int *)llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v25);
  if (v26)
  {
    uint64_t v8 = v25;
    goto LABEL_10;
  }
  uint64_t v7 = v25;
  unint64_t result = llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((void *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v23);
  uint64_t v8 = v23;
  if (v24)
  {
LABEL_10:
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v8;
    return result;
  }
  unsigned int v9 = bswap32(*(unsigned __int16 *)(v23 + 14)) >> 16;
  if (v9 - 65521 < 2 || v9 == 0)
  {
    *(unsigned char *)(a3 + 8) &= ~1u;
    *(void *)a3 = v7;
    return result;
  }
  unint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection((void *)(a1 + 56), a2, (uint64_t)&v21);
  if (v22)
  {
    uint64_t v14 = v21;
    uint64_t v21 = 0;
    goto LABEL_18;
  }
  if (*(_WORD *)(*(void *)(a1 + 56) + 16) == 256)
  {
    uint64_t v11 = *(unsigned int **)(a1 + 136);
    if (v11)
    {
      unint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable((void *)(a1 + 56), v11, (uint64_t)&v18);
      if (v20)
      {
        uint64_t v14 = v18;
        goto LABEL_18;
      }
      uint64_t v13 = v18;
      uint64_t v12 = v19;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    *(void *)&long long v15 = v13;
    *((void *)&v15 + 1) = v12;
    char v16 = 1;
    uint64_t v17 = 0;
    unint64_t result = (unsigned int *)llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection((void *)(a1 + 56), v23, v21, &v15, (uint64_t)&v18);
    uint64_t v14 = v18;
    if ((v19 & 1) == 0)
    {
      if (v18) {
        v7 += bswap32(v18[3]);
      }
      goto LABEL_23;
    }
LABEL_18:
    *(unsigned char *)(a3 + 8) |= 1u;
    *(void *)a3 = v14;
    goto LABEL_24;
  }
LABEL_23:
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v7;
LABEL_24:
  if (v22)
  {
    unint64_t result = v21;
    uint64_t v21 = 0;
    if (result) {
      unint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  if (v24)
  {
    unint64_t result = (unsigned int *)v23;
    uint64_t v23 = 0;
    if (result) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  return result;
}