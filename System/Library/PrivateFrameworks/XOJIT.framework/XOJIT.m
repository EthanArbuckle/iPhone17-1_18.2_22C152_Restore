BOOL static XOJITError.Kind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t XOJITError.Kind.hash(into:)()
{
  return sub_261E88AE8();
}

uint64_t sub_261C2D258@<X0>(char *a1@<X8>)
{
  uint64_t result = XOJIT_Error_IsFailedToMaterialize(*(void *)(v1 + 16));
  if (result)
  {
    char v4 = 0;
  }
  else
  {
    uint64_t result = XOJIT_Error_IsUnsatisfiedSymbolDependencies(*(void *)(v1 + 16));
    if (result) {
      char v4 = 1;
    }
    else {
      char v4 = 2;
    }
  }
  *a1 = v4;
  return result;
}

uint64_t XOJITError.deinit()
{
  XOJIT_Error_Destroy(*(void *)(v0 + 16));
  return v0;
}

uint64_t XOJITError.__deallocating_deinit()
{
  XOJITError.deinit();
  uint64_t v0 = OUTLINED_FUNCTION_16();
  return MEMORY[0x270FA0228](v0);
}

uint64_t XOJITError.description.getter()
{
  uint64_t v1 = XOJIT_Error_ToMessage(*(char **)(v0 + 16));
  if (!v1) {
    return 0x737365636375733CLL;
  }
  v2 = v1;
  uint64_t v3 = sub_261E889A8();
  free(v2);
  return v3;
}

uint64_t sub_261C2D36C()
{
  return XOJITError.description.getter();
}

uint64_t sub_261C2D390(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t MemoryBuffer.__allocating_init(identifier:fromFile:)()
{
  OUTLINED_FUNCTION_29();
  uint64_t v0 = OUTLINED_FUNCTION_3();
  MemoryBuffer.init(identifier:fromFile:)();
  return v0;
}

uint64_t MemoryBuffer.init(identifier:fromFile:)()
{
  OUTLINED_FUNCTION_29();
  *(void *)(v0 + 16) = 0;
  uint64_t v1 = sub_261E88988();
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_261E88988();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v3 = XOJIT_MemoryBuffer_CreateWithIdentifierFromPath((unsigned char *)(v1 + 32), (unsigned char *)(v2 + 32), (void *)(v0 + 16));
  swift_endAccess();
  swift_release();
  swift_release();
  if (v3)
  {
    swift_release();
    type metadata accessor for XOJITError();
    uint64_t v4 = OUTLINED_FUNCTION_3();
    *(void *)(v4 + 16) = v3;
    sub_261C2D554();
    OUTLINED_FUNCTION_2();
    uint64_t *v5 = v4;
    swift_willThrow();
  }
  return v0;
}

uint64_t type metadata accessor for XOJITError()
{
  return self;
}

unint64_t sub_261C2D554()
{
  unint64_t result = qword_26A955228;
  if (!qword_26A955228)
  {
    type metadata accessor for XOJITError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A955228);
  }
  return result;
}

uint64_t MemoryBuffer.__allocating_init(fromFile:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_3();
  swift_bridgeObjectRetain();
  MemoryBuffer.init(identifier:fromFile:)();
  return v0;
}

uint64_t MemoryBuffer.deinit()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1) {
    XOJIT_MemoryBuffer_Destroy(v1);
  }
  return v0;
}

uint64_t MemoryBuffer.__deallocating_deinit()
{
  MemoryBuffer.deinit();
  uint64_t v0 = OUTLINED_FUNCTION_16();
  return MEMORY[0x270FA0228](v0);
}

uint64_t sub_261C2D66C()
{
  swift_beginAccess();
  uint64_t result = *(void *)(v0 + 16);
  if (result) {
    *(void *)(v0 + 16) = 0;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_261C2D6B8(uint64_t result, uint64_t a2)
{
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v3 = result;
  uint64_t result = swift_retain();
  if (a2)
  {
    uint64_t v4 = *(void (**)(uint64_t))(v3 + 32);
    if (v4)
    {
      type metadata accessor for XOJITError();
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = a2;
      swift_retain();
      v4(v5);
      swift_release();
      swift_release();
      return sub_261C3272C((uint64_t)v4);
    }
LABEL_11:
    __break(1u);
    return result;
  }
  return swift_release();
}

uint64_t XOJIT.__allocating_init(fromXPCConnection:oopJITLinkageType:opaqueOwner:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = OUTLINED_FUNCTION_15();
  XOJIT.init(fromXPCConnection:oopJITLinkageType:opaqueOwner:)(a1, a2, a3);
  return v6;
}

uint64_t XOJIT.init(fromXPCConnection:oopJITLinkageType:opaqueOwner:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  v3[4] = 0;
  v3[2] = 0;
  v3[5] = 0;
  if (qword_26A955220 != -1)
  {
    swift_once();
    uint64_t v7 = v3[4];
  }
  v3[4] = 0;
  v3[5] = 0;
  sub_261C3272C(v7);
  v3[3] = a3;
  OUTLINED_FUNCTION_30();
  if (v8) {
    v9 = 0;
  }
  else {
    v9 = sub_261C2D78C;
  }
  if (v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (uint64_t)v3;
  }
  if ((a2 & 0x8000000000000000) == 0 && !HIDWORD(a2))
  {
    uint64_t v11 = XOJIT_XOJIT_NoopMutatingCallback;
    uint64_t v12 = *(void *)algn_26A956D78;
    swift_unknownObjectRetain();
    XOJIT_XOJIT_CreateFromXPCWithOOPJITType((uint64_t)v9, v10, v11, v12, a1, a2);
  }
  OUTLINED_FUNCTION_9();
  uint64_t result = sub_261E88A58();
  __break(1u);
  return result;
}

uint64_t XOJIT.__allocating_init(fromXPCConnection:oopJITLinkageType:opaqueOwner:reportError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = OUTLINED_FUNCTION_15();
  uint64_t v9 = OUTLINED_FUNCTION_33();
  XOJIT.init(fromXPCConnection:oopJITLinkageType:opaqueOwner:reportError:)(v9, v10, a3, a4, a5);
  return v8;
}

uint64_t XOJIT.init(fromXPCConnection:oopJITLinkageType:opaqueOwner:reportError:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = 0;
  v5[2] = 0;
  v5[4] = 0;
  v5[5] = 0;
  if (qword_26A955220 != -1)
  {
    swift_once();
    uint64_t v11 = v5[4];
  }
  v5[3] = a3;
  v5[4] = a4;
  v5[5] = a5;
  swift_unknownObjectRetain();
  sub_261C3273C(a4);
  sub_261C3272C(v11);
  OUTLINED_FUNCTION_30();
  if (v12) {
    v13 = 0;
  }
  else {
    v13 = sub_261C2D78C;
  }
  if (v12) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = (uint64_t)v5;
  }
  if ((a2 & 0x8000000000000000) == 0 && !HIDWORD(a2)) {
    XOJIT_XOJIT_CreateFromXPCWithOOPJITType((uint64_t)v13, v14, XOJIT_XOJIT_NoopMutatingCallback, *(uint64_t *)algn_26A956D78, a1, a2);
  }
  OUTLINED_FUNCTION_9();
  uint64_t result = sub_261E88A58();
  __break(1u);
  return result;
}

uint64_t XOJIT.__allocating_init(fromXPCConnection:opaqueOwner:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OUTLINED_FUNCTION_15();
  XOJIT.init(fromXPCConnection:oopJITLinkageType:opaqueOwner:reportError:)(a1, 1uLL, a2, 0, 0);
  return v4;
}

void XOJIT.__allocating_init()()
{
}

void XOJIT.init()()
{
  uint64_t v1 = 0;
  v0[2] = 0;
  v0[4] = 0;
  v0[5] = 0;
  if (qword_26A955220 != -1)
  {
    swift_once();
    uint64_t v1 = v0[4];
  }
  v0[3] = 0;
  v0[4] = 0;
  v0[5] = 0;
  sub_261C3272C(v1);
  OUTLINED_FUNCTION_30();
  XOJIT_XOJIT_CreateInProcess();
}

void XOJIT.__allocating_init(reportError:)(uint64_t a1, uint64_t a2)
{
}

void XOJIT.init(reportError:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  v2[2] = 0;
  v2[4] = 0;
  v2[5] = 0;
  if (qword_26A955220 != -1)
  {
    swift_once();
    uint64_t v5 = v2[4];
  }
  v2[3] = 0;
  v2[4] = a1;
  v2[5] = a2;
  sub_261C3273C(a1);
  sub_261C3272C(v5);
  OUTLINED_FUNCTION_30();
  XOJIT_XOJIT_CreateInProcess();
}

uint64_t XOJIT.deinit()
{
  uint64_t v1 = sub_261E88918();
  OUTLINED_FUNCTION_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4, v5);
  OUTLINED_FUNCTION_23();
  uint64_t v6 = *(std::recursive_mutex **)(v0 + 16);
  if (v6)
  {
    OUTLINED_FUNCTION_7();
    uint64_t v7 = sub_261E888F8();
    os_log_type_t v8 = sub_261E88A18();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_261C2B000, v7, v8, "Destroying XOJIT C++ instance...", v9, 2u);
      MEMORY[0x263E50980](v9, -1, -1);
    }

    XOJIT_XOJIT_Destroy(v6);
    unint64_t v10 = sub_261E888F8();
    os_log_type_t v11 = sub_261E88A18();
    if (os_log_type_enabled(v10, v11))
    {
      char v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v12 = 0;
      _os_log_impl(&dword_261C2B000, v10, v11, "Destroyed XOJIT C++ instance.", v12, 2u);
      MEMORY[0x263E50980](v12, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  }
  swift_unknownObjectRelease();
  sub_261C3272C(*(void *)(v0 + 32));
  return v0;
}

uint64_t XOJIT.__deallocating_deinit()
{
  XOJIT.deinit();
  return MEMORY[0x270FA0228](v0);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XOJIT.endSession()()
{
  uint64_t v1 = *(std::recursive_mutex **)(v0 + 16);
  if (v1)
  {
    if (XOJIT_XOJIT_EndSession(v1))
    {
      type metadata accessor for XOJITError();
      uint64_t v2 = OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_27(v2);
      uint64_t v3 = OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_12(v3, v4);
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::String __swiftcall XOJIT.getTargetTriple()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    XOJIT_XOJIT_GetTargetTriple(v1);
    uint64_t v1 = sub_261E889A8();
  }
  else
  {
    __break(1u);
  }
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t XOJIT.programJITDylib.getter@<X0>(void *a1@<X8>)
{
  return sub_261C2E294((uint64_t (*)(void))XOJIT_XOJIT_GetProgramJITDylibRetained, a1);
}

uint64_t XOJIT.platformJITDylib.getter@<X0>(void *a1@<X8>)
{
  return sub_261C2E294((uint64_t (*)(void))XOJIT_XOJIT_GetPlatformJITDylibRetained, a1);
}

uint64_t sub_261C2E294@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(v2 + 16);
  if (result)
  {
    uint64_t v6 = a1();
    type metadata accessor for XOJIT.JITDylib.JITDylibRef();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v6;
    *a2 = v2;
    a2[1] = v7;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XOJIT.objectLinkingLayer.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = *(void *)(v1 + 16);
  if (result)
  {
    uint64_t ObjectLinkingLayer = XOJIT_XOJIT_GetObjectLinkingLayer(result);
    *a1 = v1;
    a1[1] = ObjectLinkingLayer;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XOJIT.runProgramOnMainThread(symbol:jitDylibName:arguments:)(Swift::String symbol, Swift::String jitDylibName, Swift::OpaquePointer arguments)
{
  return sub_261C2E40C(symbol._countAndFlagsBits, (uint64_t)symbol._object, jitDylibName._countAndFlagsBits, (uint64_t)jitDylibName._object, (uint64_t)arguments._rawValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unsigned int *))XOJIT_XOJIT_RunAsMain);
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XOJIT.runProgramOnAnyThread(symbol:jitDylibName:arguments:)(Swift::String symbol, Swift::String jitDylibName, Swift::OpaquePointer arguments)
{
  return sub_261C2E40C(symbol._countAndFlagsBits, (uint64_t)symbol._object, jitDylibName._countAndFlagsBits, (uint64_t)jitDylibName._object, (uint64_t)arguments._rawValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unsigned int *))XOJIT_XOJIT_RunOnAnyThread);
}

uint64_t sub_261C2E40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unsigned int *))
{
  uint64_t v7 = v6;
  uint64_t v33 = *MEMORY[0x263EF8340];
  unsigned int v32 = -1;
  int64_t v8 = *(void *)(a5 + 16);
  if (v8)
  {
    uint64_t v31 = MEMORY[0x263F8EE78];
    sub_261C32C98(0, v8, 0);
    uint64_t v10 = v31;
    uint64_t v11 = a5 + 40;
    do
    {
      char v12 = (const char *)(sub_261E88988() + 32);
      swift_bridgeObjectRetain();
      v13 = strdup(v12);
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v15 = *(void *)(v31 + 16);
      unint64_t v14 = *(void *)(v31 + 24);
      unint64_t v16 = v15 + 1;
      if (v15 >= v14 >> 1) {
        sub_261C32C98((char *)(v14 > 1), v15 + 1, 1);
      }
      v11 += 16;
      *(void *)(v31 + 16) = v16;
      *(void *)(v31 + 8 * v15 + 32) = v13;
      --v8;
    }
    while (v8);
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
    unint64_t v16 = *(void *)(MEMORY[0x263F8EE78] + 16);
  }
  uint64_t v17 = *(void *)(v7 + 16);
  if (!v17) {
LABEL_22:
  }
    __break(1u);
  if (v16 >> 31)
  {
    __break(1u);
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_33();
  uint64_t v18 = sub_261E88988() + 32;
  uint64_t v19 = sub_261E88988();
  uint64_t v20 = a6(v17, v18, v19 + 32, v16, v10 + 32, &v32);
  swift_release();
  swift_release();
  if (v20)
  {
    uint64_t i = type metadata accessor for XOJITError();
    uint64_t v22 = OUTLINED_FUNCTION_3();
    *(void *)(v22 + 16) = v20;
    sub_261C2D554();
    OUTLINED_FUNCTION_6();
    uint64_t *v23 = v22;
    swift_willThrow();
    uint64_t v24 = *(void *)(v10 + 16);
    if (v24)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v24; ++i)
      {
        v25 = *(void **)(v10 + 8 * i + 32);
        free(v25);
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t i = v32;
    uint64_t v26 = *(void *)(v10 + 16);
    if (v26)
    {
      swift_bridgeObjectRetain();
      for (uint64_t j = 0; j != v26; ++j)
      {
        v28 = *(void **)(v10 + 8 * j + 32);
        free(v28);
      }
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  return i;
}

uint64_t XOJIT.runNewInitializers(for:)()
{
  uint64_t result = *(void *)(v0 + 16);
  if (result) {
    XOJIT_XOJIT_RunNewInitializers(result);
  }
  __break(1u);
  return result;
}

uint64_t sub_261C2E70C()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XOJIT.callOnAnyThread<A>(_:_:)()
{
  sub_261E888B8();
  swift_allocObject();
  sub_261E888A8();
  OUTLINED_FUNCTION_33();
  uint64_t v2 = sub_261E88898();
  unint64_t v4 = v3;
  uint64_t result = swift_release();
  if (!v1)
  {
    swift_retain_n();
    switch(v4 >> 62)
    {
      case 1uLL:
        if (v2 >> 32 < (int)v2)
        {
          __break(1u);
          JUMPOUT(0x261C2E948);
        }
        swift_retain_n();
        sub_261C32FB4(v2, v4);
        uint64_t v6 = OUTLINED_FUNCTION_33();
        sub_261C32EA0(v6, v7, v4 & 0x3FFFFFFFFFFFFFFFLL, v0);
        OUTLINED_FUNCTION_20();
        break;
      case 2uLL:
        uint64_t v8 = *(void *)(v2 + 16);
        uint64_t v9 = *(void *)(v2 + 24);
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_261C32EA0(v8, v9, v4 & 0x3FFFFFFFFFFFFFFFLL, v0);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        swift_retain();
        swift_retain_n();
        OUTLINED_FUNCTION_18();
        sub_261C3300C(v10, v11, v12, v0);
      default:
        swift_retain();
        swift_retain_n();
        sub_261C3300C(v2, v4 & 0xFFFFFFFFFFFFLL, BYTE6(v4), v0);
    }
    sub_261C32F5C(v2, v4);
    OUTLINED_FUNCTION_32();
    return OUTLINED_FUNCTION_32();
  }
  return result;
}

void sub_261C2E958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16)) {
    XOJIT_XOJIT_CallOnAnyThread();
  }
  __break(1u);
}

void XOJIT.callOnAnyThread<A>(symbol:in:_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A955230);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_261E89BE0;
  *(void *)(inited + 32) = v6;
  *(void *)(inited + 40) = v5;
  *(unsigned char *)(inited + 48) = 1;
  unsigned __int8 v9 = 1;
  unsigned __int8 v8 = 0;
  swift_retain();
  swift_retain();
  XOJIT.lookup(searchOrder:name:lookupFlags:lookupKind:requiredState:)(inited, a1, a2, &v8, &v9);
}

void XOJIT.lookup(searchOrder:name:lookupFlags:lookupKind:requiredState:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  int v6 = *a4;
  int v24 = *a5;
  int64_t v7 = *(void *)(a1 + 16);
  unsigned __int8 v8 = (char *)MEMORY[0x263F8EE78];
  if (v7)
  {
    uint64_t v25 = MEMORY[0x263F8EE78];
    sub_261C32CB8(0, v7, 0);
    unsigned __int8 v8 = (char *)v25;
    unint64_t v10 = *(void *)(v25 + 16);
    uint64_t v11 = 16 * v10;
    uint64_t v12 = (unsigned __int8 *)(a1 + 48);
    do
    {
      int v13 = *v12;
      uint64_t v14 = *(void *)(*((void *)v12 - 1) + 16);
      unint64_t v15 = *(void *)(v25 + 24);
      unint64_t v16 = v10 + 1;
      if (v10 >= v15 >> 1) {
        sub_261C32CB8((char *)(v15 > 1), v10 + 1, 1);
      }
      *(void *)(v25 + 16) = v16;
      uint64_t v17 = v25 + v11;
      *(void *)(v17 + 32) = v14;
      *(_DWORD *)(v17 + 40) = v13;
      v11 += 16;
      v12 += 24;
      unint64_t v10 = v16;
      --v7;
    }
    while (v7);
    uint64_t v5 = v23;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned __int8 v8 = sub_261C32770(0, *((void *)v8 + 2) + 1, 1, (uint64_t)v8);
  }
  unint64_t v19 = *((void *)v8 + 2);
  unint64_t v18 = *((void *)v8 + 3);
  if (v19 >= v18 >> 1) {
    unsigned __int8 v8 = sub_261C32770((char *)(v18 > 1), v19 + 1, 1, (uint64_t)v8);
  }
  *((void *)v8 + 2) = v19 + 1;
  uint64_t v20 = (uint64_t)&v8[16 * v19 + 32];
  *(void *)uint64_t v20 = 0;
  *(_DWORD *)(v20 + 8) = 1;
  uint64_t v21 = *(void *)(v5 + 16);
  if (v21)
  {
    uint64_t v22 = sub_261E88988();
    XOJIT_XOJIT_SymbolLookup(v21, v24, (void *)v8 + 4, (char *)(v22 + 32), v6);
  }
  __break(1u);
}

uint64_t XOJIT.loadDylib(_:)@<X0>(void *a1@<X8>)
{
  if (!*(void *)(v1 + 16)) {
    __break(1u);
  }
  sub_261E88988();
  uint64_t v3 = OUTLINED_FUNCTION_31();
  uint64_t Dylib = XOJIT_XOJIT_LoadDylib(v3, v4, v5);
  uint64_t result = swift_release();
  if (Dylib)
  {
    type metadata accessor for XOJITError();
    *(void *)(OUTLINED_FUNCTION_3() + 16) = Dylib;
    sub_261C2D554();
    uint64_t v8 = OUTLINED_FUNCTION_2();
    return OUTLINED_FUNCTION_25(v8, v9);
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

uint64_t XOJIT.JITDylib.name.getter()
{
  XOJIT_JITDylib_GetName(*(void *)(*(void *)(v0 + 8) + 16));
  return sub_261E889A8();
}

uint64_t XOJIT.JITDylib.executionSession.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t result = *(void *)(*v1 + 16);
  if (result)
  {
    uint64_t ExecutionSession = XOJIT_XOJIT_GetExecutionSession();
    *a1 = v2;
    a1[1] = ExecutionSession;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XOJIT.JITDylib.addToLinkOrder(_:flags:)(uint64_t a1, unsigned __int8 *a2)
{
  return XOJIT_JITDylib_AddToLinkOrder(*(void *)(*(void *)(v2 + 8) + 16), *(void *)(*(void *)(a1 + 8) + 16), *a2);
}

uint64_t sub_261C2EF18()
{
  return sub_261C305F4((void (*)(void))XOJIT_JITDylib_Release);
}

uint64_t XOJIT.loadLinkableFile(path:archives:identifier:)(char *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a6;
  v21[1] = *MEMORY[0x263EF8340];
  int v9 = *a4;
  v21[0] = 0;
  unsigned int v20 = 0;
  if (!a6) {
    swift_bridgeObjectRetain();
  }
  uint64_t v10 = *(void *)(v6 + 16);
  if (!v10) {
    __break(1u);
  }
  uint64_t v11 = (char *)(sub_261E88988() + 32);
  uint64_t v12 = sub_261E88988();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = XOJIT_XOJIT_LoadLinkableFile(v10, v11, (const char *)(v12 + 32), v9, v21, &v20);
  swift_release();
  uint64_t result = swift_release();
  if (v13)
  {
    type metadata accessor for XOJITError();
    uint64_t v15 = OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_27(v15);
    uint64_t v16 = OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_12(v16, v17);
    return v7;
  }
  uint64_t v18 = v21[0];
  if (v21[0])
  {
    if (v20) {
      char v19 = 2 * (v20 == 1);
    }
    else {
      char v19 = 1;
    }
    type metadata accessor for MemoryBuffer();
    uint64_t v7 = OUTLINED_FUNCTION_3();
    sub_261C2D390(v18);
    *a1 = v19;
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t XOJIT.ObjectLinkingLayer.add(object:name:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 + 8);
  uint64_t v9 = *(void *)(v5 + 8);
  type metadata accessor for LLVMMemoryBuffer();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  sub_261C35824(a1, a2);
  uint64_t v10 = *(llvm::orc::JITDylib **)(v8 + 16);
  uint64_t v11 = sub_261C35810();
  uint64_t v12 = LLVMOrcObjectLayerAddObjectFile(v9, v10, v11);
  if (v12) {
    LLVMGetErrorMessage(v12);
  }
  return swift_release();
}

void XOJIT.ObjectLinkingLayer.add(object:to:)(uint64_t a1, uint64_t a2)
{
}

uint64_t XOJIT.ObjectLinkingLayer.add(object:to:)(uint64_t a1, _OWORD *a2)
{
  *(void *)(v3 + 16) = a1;
  *(_OWORD *)(v3 + 24) = *a2;
  *(_OWORD *)(v3 + 40) = *v2;
  return OUTLINED_FUNCTION_5((uint64_t)sub_261C2F228);
}

uint64_t sub_261C2F228()
{
  OUTLINED_FUNCTION_8();
  uint64_t v2 = swift_task_alloc();
  OUTLINED_FUNCTION_19(v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 64) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_261C2F2D8;
  return sub_261C2F3DC((uint64_t)sub_261C331A4, v0);
}

uint64_t sub_261C2F2D8()
{
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_10();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_10();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_18();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_21();
    return v10();
  }
}

uint64_t sub_261C2F3DC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return OUTLINED_FUNCTION_5((uint64_t)sub_261C2F3F4);
}

uint64_t sub_261C2F3F4()
{
  OUTLINED_FUNCTION_8();
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  void *v2 = v0;
  v2[1] = sub_261C2F4D8;
  OUTLINED_FUNCTION_18();
  return MEMORY[0x270FA2360]();
}

uint64_t sub_261C2F4D8()
{
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_10();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_10();
  *uint64_t v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  OUTLINED_FUNCTION_18();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_261C2F5C0()
{
  OUTLINED_FUNCTION_21();
  return v0();
}

uint64_t sub_261C2F5DC()
{
  OUTLINED_FUNCTION_8();
  swift_task_dealloc();
  OUTLINED_FUNCTION_21();
  return v0();
}

void XOJIT.ObjectLinkingLayer.linkArchive(archive:into:)(uint64_t a1, uint64_t a2)
{
}

void sub_261C2F664(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(*(void *)v3 + 16);
  if (v4)
  {
    uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 16);
    uint64_t v7 = sub_261C2D66C();
    uint64_t v8 = a3(v4, v6, v7);
    if (v8) {
      LLVMGetErrorMessage(v8);
    }
  }
  else
  {
    __break(1u);
    __break(1u);
  }
}

uint64_t XOJIT.ObjectLinkingLayer.linkArchive(archive:into:)(uint64_t a1, _OWORD *a2)
{
  *(void *)(v3 + 16) = a1;
  *(_OWORD *)(v3 + 24) = *a2;
  *(_OWORD *)(v3 + 40) = *v2;
  return OUTLINED_FUNCTION_5((uint64_t)sub_261C2F72C);
}

uint64_t sub_261C2F72C()
{
  OUTLINED_FUNCTION_8();
  uint64_t v2 = swift_task_alloc();
  OUTLINED_FUNCTION_19(v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 64) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_261C2F7DC;
  return sub_261C2F3DC((uint64_t)sub_261C331BC, v0);
}

uint64_t sub_261C2F7DC()
{
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_10();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_10();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_18();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_21();
    return v10();
  }
}

uint64_t sub_261C2F8E0()
{
  OUTLINED_FUNCTION_8();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_261C2F940(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = *(void *)(a3 + 16);
  if (v8)
  {
    uint64_t v10 = result;
    uint64_t v11 = *(void *)(a6 + 16);
    uint64_t v12 = sub_261C2D66C();
    return a8(v8, v11, v12, v10, a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void XOJIT.ObjectLinkingLayer.linkArchive(archive:into:forceLoad:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4 = *(void *)(*(void *)v3 + 16);
  if (v4)
  {
    int v5 = *a3;
    uint64_t v6 = *(void **)(*(void *)(a2 + 8) + 16);
    uint64_t v7 = sub_261C2D66C();
    uint64_t v8 = XOJIT_XOJIT_LinkStaticArchiveWithForceLoad(v4, v6, v7, v5);
    if (v8) {
      LLVMGetErrorMessage(v8);
    }
  }
  else
  {
    __break(1u);
    __break(1u);
  }
}

uint64_t XOJIT.ObjectLinkingLayer.linkArchive(archive:into:forceLoad:)(uint64_t a1, _OWORD *a2, unsigned char *a3)
{
  *(void *)(v4 + 16) = a1;
  *(_OWORD *)(v4 + 24) = *a2;
  *(unsigned char *)(v4 + 80) = *a3;
  *(_OWORD *)(v4 + 40) = *v3;
  return OUTLINED_FUNCTION_5((uint64_t)sub_261C2FA94);
}

uint64_t sub_261C2FA94()
{
  char v1 = *(unsigned char *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  long long v4 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v3 + 32) = v4;
  *(void *)(v3 + 48) = v2;
  *(unsigned char *)(v3 + 56) = v1;
  int v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v5;
  void *v5 = v0;
  v5[1] = sub_261C2F7DC;
  return sub_261C2F3DC((uint64_t)sub_261C331FC, v3);
}

void sub_261C2FB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_261C2D66C();
    XOJIT_XOJIT_LinkStaticArchiveWithForceLoadAsync();
  }
  __break(1u);
}

uint64_t XOJIT.JITTargetAddress.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t (*XOJIT.JITTargetAddress.rawValue.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.JITTargetAddress.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t (*XOJIT.JITEvaluatedSymbol.address.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.ExecutorAddress.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t XOJIT.ExecutorAddress.rawValue.setter(uint64_t result)
{
  *char v1 = result;
  return result;
}

uint64_t (*XOJIT.ExecutorAddress.rawValue.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

void XOJIT.ExecutorSymbolDef.address.getter(void *a1@<X8>)
{
  *a1 = *v1;
}

void *XOJIT.ExecutorSymbolDef.address.setter(void *result)
{
  *char v1 = *result;
  return result;
}

uint64_t (*XOJIT.ExecutorSymbolDef.address.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

BOOL static XOJIT.LookupKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t XOJIT.LookupKind.hash(into:)()
{
  return sub_261E88AE8();
}

uint64_t _s5XOJIT10XOJITErrorC4KindO9hashValueSivg_0()
{
  return sub_261E88B08();
}

uint64_t sub_261C2FD38()
{
  return sub_261E88B08();
}

void XOJIT.ExecutionSession.lookup(searchOrder:name:lookupFlags:lookupKind:requiredState:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  unsigned __int8 v5 = *a5;
  unsigned __int8 v7 = *a4;
  unsigned __int8 v6 = v5;
  XOJIT.lookup(searchOrder:name:lookupFlags:lookupKind:requiredState:)(a1, a2, a3, &v7, &v6);
}

void XOJIT.ExecutionSession.createJITDylib(name:)()
{
  v3[1] = *MEMORY[0x263EF8340];
  char v1 = *(std::recursive_mutex **)(v0 + 8);
  v3[0] = 0;
  uint64_t v2 = sub_261E88988();
  LLVMOrcExecutionSessionCreateJITDylib(v1, (int)v3, (char *)(v2 + 32));
}

void XOJIT.ExecutionSession.createBareJITDylib(name:)()
{
  char v1 = *(std::recursive_mutex **)(v0 + 8);
  uint64_t v2 = sub_261E88988();
  LLVMOrcExecutionSessionCreateBareJITDylib(v1, (char *)(v2 + 32));
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*XOJIT.MachOHeaderOptions.Dylib.name.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.timestamp.getter()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.timestamp.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*XOJIT.MachOHeaderOptions.Dylib.timestamp.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.currentVersion.getter()
{
  return *(unsigned int *)(v0 + 20);
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.currentVersion.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 20) = result;
  return result;
}

uint64_t (*XOJIT.MachOHeaderOptions.Dylib.currentVersion.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.compatibilityVersion.getter()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.compatibilityVersion.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*XOJIT.MachOHeaderOptions.Dylib.compatibilityVersion.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.init(name:timestamp:currentVersion:compatibilityVersion:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(_DWORD *)(a6 + 16) = a3;
  *(_DWORD *)(a6 + 20) = a4;
  *(_DWORD *)(a6 + 24) = a5;
  return result;
}

uint64_t XOJIT.MachOHeaderOptions.idDylib.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_DWORD *)(a1 + 24) = v2;
  return swift_bridgeObjectRetain();
}

__n128 XOJIT.MachOHeaderOptions.idDylib.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int32 v3 = a1[1].n128_u32[2];
  swift_bridgeObjectRelease();
  __n128 result = v5;
  *uint64_t v1 = v5;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u32[2] = v3;
  return result;
}

uint64_t (*XOJIT.MachOHeaderOptions.idDylib.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.MachOHeaderOptions.loadDylibs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t XOJIT.MachOHeaderOptions.loadDylibs.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*XOJIT.MachOHeaderOptions.loadDylibs.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.MachOHeaderOptions.rpaths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t XOJIT.MachOHeaderOptions.rpaths.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*XOJIT.MachOHeaderOptions.rpaths.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

__n128 XOJIT.MachOHeaderOptions.init(idDylib:loadDylibs:rpaths:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v4 = a1[1].n128_u64[0];
  unsigned __int32 v5 = a1[1].n128_u32[2];
  __n128 result = *a1;
  *a4 = *a1;
  a4[1].n128_u64[0] = v4;
  a4[1].n128_u32[2] = v5;
  a4[2].n128_u64[0] = a2;
  a4[2].n128_u64[1] = a3;
  return result;
}

void sub_261C301B8()
{
}

uint64_t sub_261C3037C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t (*a8)(void), void (*a9)(uint64_t, void *))
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_261E88A38();
    if (v9)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v13 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v13 = sub_261E88A48();
    }
    sub_261C350C8(v13, v14, a8);
    if (v9) {
      goto LABEL_7;
    }
LABEL_10:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v19[0] = a1;
  v19[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = *(void *)(a3 + 16);
  v17[0] = v19;
  v17[1] = a6;
  int v18 = a7;
  a9(v16, v17);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_261C304CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_261E88A38();
    return swift_release();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v5 = sub_261E88A48();
    }
    sub_261C350C8(v5, v6, (uint64_t (*)(void))sub_261C350F0);
    return swift_release();
  }
  v8[0] = a1;
  v8[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  XOJIT_MachOHeaderOptions_AddRPath(*(void *)(a3 + 16), (char *)v8);
  return swift_release();
}

uint64_t sub_261C305DC()
{
  return sub_261C305F4((void (*)(void))XOJIT_MachOHeaderOptions_Destroy);
}

uint64_t sub_261C305F4(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  uint64_t v2 = OUTLINED_FUNCTION_16();
  return MEMORY[0x270FA0228](v2);
}

void XOJIT.createJITDylib(name:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 32))
  {
    type metadata accessor for XOJIT.MachOHeaderOptions.COptions();
    OUTLINED_FUNCTION_3();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_261C301B8();
  }
  unint64_t v4 = *(std::recursive_mutex **)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = sub_261E88988();
    XOJIT_XOJIT_CreateJITDylib(v4, (char *)(v5 + 32), 0);
  }
  __break(1u);
  __break(1u);
}

void XOJIT.createJITDylib(name:)(uint64_t a1, uint64_t a2)
{
  memset(v2, 0, sizeof(v2));
  XOJIT.createJITDylib(name:options:)(a1, a2, (uint64_t)v2);
}

void XOJIT.createBareJITDylib(name:)()
{
  uint64_t v1 = *(std::recursive_mutex **)(v0 + 16);
  uint64_t v2 = sub_261E88988();
  LLVMOrcExecutionSessionCreateBareJITDylib(v1, (char *)(v2 + 32));
}

uint64_t XOJIT.setLoadableAtPathViaRegex(jd:regex:replacement:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void **)(*(void *)(result + 8) + 16);
    unint64_t v4 = (char *)(sub_261E88988() + 32);
    uint64_t v5 = sub_261E88988();
    XOJIT_XOJIT_SetLoadableAtPathViaRegex(v2, v3, v4, (char *)(v5 + 32));
  }
  __break(1u);
  return result;
}

uint64_t XOJIT.ReplacementManager.__allocating_init(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_17();
  uint64_t v2 = swift_allocObject();
  XOJIT.ReplacementManager.init(_:)(a1);
  return v2;
}

uint64_t XOJIT.ReplacementManager.init(_:)(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    XOJIT_CreateReplacementManager();
  }
  __break(1u);
  return result;
}

uint64_t XOJIT.ReplacementManager.deinit()
{
  XOJIT_DisposeReplacementManager(*(xojit::ReplacementManager **)(v0 + 24));
  swift_release();
  return v0;
}

uint64_t XOJIT.ReplacementManager.__deallocating_deinit()
{
  XOJIT.ReplacementManager.deinit();
  uint64_t v0 = OUTLINED_FUNCTION_17();
  return MEMORY[0x270FA0228](v0);
}

uint64_t XOJIT.ReplacementManager.addWithReplacement(object:name:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 + 8);
  type metadata accessor for LLVMMemoryBuffer();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  sub_261C35824(a1, a2);
  uint64_t v9 = *(void *)(v5 + 24);
  std::string::size_type v10 = *(void *)(v8 + 16);
  uint64_t v11 = sub_261C35810();
  uint64_t v12 = XOJIT_ReplacementManager_AddObjectFile(v9, v10, v11);
  if (v12) {
    LLVMGetErrorMessage(v12);
  }
  return swift_release();
}

uint64_t XOJIT.ReplacementManager.addWithReplacement(object:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 24);
  std::string::size_type v4 = *(void *)(*(void *)(a2 + 8) + 16);
  uint64_t v5 = sub_261C2D66C();
  uint64_t result = XOJIT_ReplacementManager_AddObjectFile(v3, v4, v5);
  if (result) {
    LLVMGetErrorMessage(result);
  }
  return result;
}

uint64_t XOJIT.ReplacementManager.addWithReplacement(object:to:)(uint64_t a1, _OWORD *a2)
{
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  *(_OWORD *)(v3 + 32) = *a2;
  return OUTLINED_FUNCTION_5((uint64_t)sub_261C30BD4);
}

uint64_t sub_261C30BD4()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v3 + 32) = v1;
  *(void *)(v3 + 40) = v2;
  std::string::size_type v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  *std::string::size_type v4 = v0;
  v4[1] = sub_261C30CA4;
  return sub_261C2F3DC((uint64_t)sub_261C33234, v3);
}

uint64_t sub_261C30CA4()
{
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_10();
  *std::string::size_type v4 = v3;
  uint64_t v5 = *v1;
  OUTLINED_FUNCTION_10();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_18();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_21();
    return v10();
  }
}

uint64_t sub_261C30DA8()
{
  OUTLINED_FUNCTION_8();
  swift_task_dealloc();
  OUTLINED_FUNCTION_21();
  return v0();
}

void sub_261C30E04()
{
  sub_261C2D66C();
  XOJIT_ReplacementManager_AddObjectFileAsync();
}

void XOJIT.ReplacementManager.applyPendingUpdates(to:)(uint64_t a1)
{
  XOJIT_ReplacementManager_ApplyPendingUpdates(*(xojit::ReplacementManager **)(v1 + 24), *(llvm::orc::JITDylib **)(*(void *)(a1 + 8) + 16));
}

uint64_t XOJIT.ORCRuntimeBridge.__allocating_init(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_16();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t XOJIT.ORCRuntimeBridge.init(_:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

void XOJIT.ORCRuntimeBridge.jit_dlopen(name:)()
{
  if (*(void *)(*(void *)(v0 + 16) + 16))
  {
    sub_261E88988();
    uint64_t v1 = OUTLINED_FUNCTION_31();
    XOJIT_OrcRTJITDlopen(v1);
  }
  __break(1u);
}

uint64_t XOJIT.ORCRuntimeBridge.deinit()
{
  swift_release();
  return v0;
}

uint64_t XOJIT.ORCRuntimeBridge.__deallocating_deinit()
{
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_16();
  return MEMORY[0x270FA0228](v0);
}

uint64_t XOJIT.UVSymbolString.description.getter()
{
  aBlock[6] = *MEMORY[0x263EF8340];
  uint64_t v1 = *v0;
  uint64_t v2 = OUTLINED_FUNCTION_26();
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = 0;
  uint64_t v7 = v1;
  uint64_t v3 = OUTLINED_FUNCTION_26();
  *(void *)(v3 + 16) = sub_261C33270;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_261C332A8;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_261C313FC;
  aBlock[3] = &block_descriptor;
  std::string::size_type v4 = _Block_copy(aBlock);
  swift_retain_n();
  swift_release();
  XOJIT_SymbolString_WithStringRepresentationsDo((uint64_t)&v7, 1, (uint64_t)v4);
  _Block_release(v4);
  swift_release();
  swift_beginAccess();
  if (!*(void *)(v2 + 24)) {
    __break(1u);
  }
  uint64_t v5 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v5;
}

uint64_t sub_261C31198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t *)(a3 + 16);
  if (!a1) {
    a2 = 0;
  }
  return sub_261C311D0(a1, a2, v3);
}

uint64_t sub_261C311D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = sub_261E88978();
  MEMORY[0x270FA5388](v4 - 8, v5);
  sub_261E88968();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A9553A0);
  sub_261C35058(&qword_26A9553A8, &qword_26A9553A0);
  uint64_t result = sub_261E88958();
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t v9 = v7;
    swift_beginAccess();
    *a3 = v8;
    a3[1] = v9;
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void XOJIT.UVSymbolString.withStringRepresentationDo(_:)(uint64_t a1, uint64_t a2)
{
  v8[1] = *MEMORY[0x263EF8340];
  v8[0] = *v2;
  uint64_t v5 = OUTLINED_FUNCTION_26();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  v7[4] = sub_261C332A8;
  v7[5] = v5;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1107296256;
  v7[2] = sub_261C313FC;
  v7[3] = &block_descriptor_21;
  uint64_t v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  XOJIT_SymbolString_WithStringRepresentationsDo((uint64_t)v8, 1, (uint64_t)v6);
  _Block_release(v6);
}

Swift::Void __swiftcall XOJIT.UVSymbolString.retain()()
{
  XOJIT_SymbolString_Retain(*v0);
}

Swift::Void __swiftcall XOJIT.UVSymbolString.release()()
{
  XOJIT_SymbolString_Release(*v0);
}

uint64_t sub_261C313FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);
  return swift_release();
}

uint64_t XOJIT.UVSymbolString.hash(into:)()
{
  return sub_261E88AE8();
}

BOOL static XOJIT.UVSymbolString.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t XOJIT.UVSymbolString.hashValue.getter()
{
  return sub_261E88B08();
}

uint64_t sub_261C314EC()
{
  return sub_261E88B08();
}

void XOJIT.intern(_:)(unint64_t **a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v4 = sub_261E88988();
    uint64_t v5 = XOJIT_XOJIT_Intern(v2, (char *)(v4 + 32));
    swift_release();
    *a1 = v5;
  }
  else
  {
    __break(1u);
  }
}

uint64_t XOJIT.SymbolTableStream.Record.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XOJIT.SymbolTableStream.Record.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*XOJIT.SymbolTableStream.Record.name.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.SymbolTableStream.Record.address.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t XOJIT.SymbolTableStream.Record.address.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*XOJIT.SymbolTableStream.Record.address.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.SymbolTableStream.Record.hash(into:)()
{
  return sub_261E88AF8();
}

BOOL static XOJIT.SymbolTableStream.Record.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return v2 == v3;
  }
  char v5 = sub_261E88A78();
  BOOL result = 0;
  if (v5) {
    return v2 == v3;
  }
  return result;
}

uint64_t XOJIT.SymbolTableStream.Record.hashValue.getter()
{
  return sub_261E88B08();
}

uint64_t sub_261C31770()
{
  return sub_261E88B08();
}

uint64_t sub_261C317E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A9553B0);
  OUTLINED_FUNCTION_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6, v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955270);
  OUTLINED_FUNCTION_0();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13, v14);
  OUTLINED_FUNCTION_24();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955268);
  OUTLINED_FUNCTION_0();
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v18, v19);
  uint64_t v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v9, *MEMORY[0x263F8F580], v3);
  sub_261E889D8();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a1, v21, v15);
  uint64_t v22 = type metadata accessor for XOJIT.SymbolTableStream(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(a1 + *(int *)(v22 + 20), v1, v10);
}

uint64_t XOJIT.SymbolTableStream.makeAsyncIterator()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955268);
  return MEMORY[0x270FA1F60](v0);
}

uint64_t sub_261C319F4()
{
  XOJIT.SymbolTableStream.makeAsyncIterator()();
  return sub_261C34FB4(v0);
}

uint64_t XOJIT.listenToSymbolTableStream()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955270);
  OUTLINED_FUNCTION_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7, v8);
  OUTLINED_FUNCTION_24();
  sub_261C317E4(a1);
  uint64_t v9 = type metadata accessor for XOJIT.SymbolTableStream(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, a1 + *(int *)(v9 + 20), v4);
  type metadata accessor for XOJIT.Context(0);
  uint64_t v10 = swift_allocObject();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v10+ OBJC_IVAR____TtCFC5XOJIT5XOJIT25listenToSymbolTableStreamFT_VS0_17SymbolTableStreamL_7Context_continuation, v2, v4);
  uint64_t v12 = *(void *)(v1 + 16);
  if (v12)
  {
    swift_retain();
    XOJIT_XOJIT_GetObjectLinkingLayer(v12);
    XOJIT_SymbolTableCallbackPlugin_Create();
  }
  __break(1u);
  return result;
}

uint64_t sub_261C31B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a3;
  v11[0] = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_261C35020;
  *(void *)(v7 + 24) = v6;
  v10[4] = sub_261C332A8;
  v10[5] = v7;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1107296256;
  v10[2] = sub_261C313FC;
  v10[3] = &block_descriptor_137;
  uint64_t v8 = _Block_copy(v10);
  swift_retain();
  swift_release();
  XOJIT_SymbolString_WithStringRepresentationsDo((uint64_t)v11, 1, (uint64_t)v8);
  _Block_release(v8);
  return swift_release();
}

uint64_t sub_261C31CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    a2 = 0;
  }
  return sub_261C31CDC(a1, a2, a3, a4);
}

uint64_t sub_261C31CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955398);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8, v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_261E88978();
  MEMORY[0x270FA5388](v13 - 8, v14);
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  sub_261E88968();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A9553A0);
  sub_261C35058(&qword_26A9553A8, &qword_26A9553A0);
  uint64_t result = sub_261E88958();
  if (v16)
  {
    uint64_t v22 = v8;
    uint64_t v23 = v4;
    if (a3)
    {
      uint64_t v17 = result;
      uint64_t v18 = v16;
      swift_retain();
      uint64_t v24 = v17;
      uint64_t v25 = v18;
      uint64_t v26 = v27;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A955270);
      sub_261E889E8();
      uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v20 = v22;
      v19(v12, v22);
      uint64_t v24 = v17;
      uint64_t v25 = v18;
      uint64_t v26 = v27;
      sub_261E889E8();
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v19)(v12, v20);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_261C31F10(uint64_t result)
{
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A955270);
    sub_261E889F8();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XOJIT.addSymbolTableCallback(_:)(uint64_t a1, uint64_t a2)
{
  _s5XOJIT5XOJITC7ContextCMa_0();
  uint64_t result = OUTLINED_FUNCTION_26();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  uint64_t v6 = *(void *)(v2 + 16);
  if (v6)
  {
    swift_retain();
    swift_retain();
    XOJIT_XOJIT_GetObjectLinkingLayer(v6);
    XOJIT_SymbolTableCallbackPlugin_Create();
  }
  __break(1u);
  return result;
}

uint64_t sub_261C3201C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = *(void (**)(uint64_t *, uint64_t))(result + 16);
    swift_retain();
    uint64_t v6 = a2;
    v5(&v6, a3);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_261C32098(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t sub_261C320AC()
{
  uint64_t v1 = sub_261E88918();
  OUTLINED_FUNCTION_0();
  uint64_t v16 = v2;
  MEMORY[0x270FA5388](v3, v4);
  OUTLINED_FUNCTION_23();
  uint64_t v5 = self;
  id v6 = objc_msgSend(v5, sel_standardUserDefaults);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A955280);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_261E89BE0;
  *(void *)(inited + 32) = 0xD00000000000001BLL;
  *(void *)(inited + 40) = 0x8000000261EA7DC0;
  *(void *)(inited + 72) = MEMORY[0x263F8D6C8];
  *(void *)(inited + 48) = 0;
  sub_261E88938();
  uint64_t v8 = (void *)sub_261E88928();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_registerDefaults_, v8);

  id v9 = objc_msgSend(v5, sel_standardUserDefaults);
  uint64_t v10 = (void *)sub_261E88948();
  uint64_t v11 = (uint64_t)objc_msgSend(v9, sel_integerForKey_, v10);

  if (v11 <= 0)
  {
    uint64_t v11 = sysconf(58);
    if (v11 < 0)
    {
      OUTLINED_FUNCTION_7();
      uint64_t v12 = sub_261E888F8();
      os_log_type_t v13 = sub_261E88A18();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 134217984;
        sub_261E88A28();
        _os_log_impl(&dword_261C2B000, v12, v13, "failed to determine cpu count; limiting to %ld threads", v14, 0xCu);
        MEMORY[0x263E50980](v14, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v0, v1);
      return 8;
    }
  }
  return v11;
}

uint64_t sub_261C32330()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  return v0;
}

uint64_t sub_261C323A0()
{
  sub_261C32330();
  return MEMORY[0x270FA0228](v0);
}

uint64_t sub_261C323F8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t (*)()))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A9553B8);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A9553C0);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + *(void *)(*(void *)v9 + 88), v8, v4);
  return a2(v9, sub_261C3264C);
}

uint64_t sub_261C32538(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      type metadata accessor for XOJITError();
      uint64_t v3 = swift_allocObject();
      *(void *)(v3 + 16) = a2;
      sub_261C2D554();
      swift_allocError();
      *uint64_t v4 = v3;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A9553B8);
      sub_261E889B8();
      return swift_release();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A9553B8);
      sub_261E889C8();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_261C32650()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCFC5XOJIT5XOJIT25listenToSymbolTableStreamFT_VS0_17SymbolTableStreamL_7Context_continuation;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955270);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return MEMORY[0x270FA0228](v0);
}

uint64_t sub_261C326F4()
{
  swift_release();
  return MEMORY[0x270FA0228](v0);
}

uint64_t sub_261C3272C(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_261C3273C(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for XOJIT.JITDylib.JITDylibRef()
{
  return self;
}

char *sub_261C32770(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A9553C8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  if (v5)
  {
    sub_261C329E8((char *)(a4 + 32), v8, v12);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_261C32860(0, v8, v12, a4);
  }
  return v10;
}

char *sub_261C32860(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    char v5 = (char *)(a4 + 16 * a1 + 32);
    unint64_t v6 = &__dst[16 * v4];
    if (v5 >= v6 || &v5[16 * v4] <= __dst)
    {
      memcpy(__dst, v5, 16 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)sub_261E88A68();
  __break(1u);
  return result;
}

char *sub_261C32954(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_261E88A68();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

char *sub_261C329E8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_261E88A68();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t sub_261C32A7C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A9553D0);
  swift_arrayDestroy();
  return MEMORY[0x270FA0228](v0);
}

void *sub_261C32AE0(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0 || (&__dst[8 * a2] > __src ? (BOOL v3 = &__src[8 * a2] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)sub_261E88A68();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, 8 * a2);
  }
  return result;
}

void *sub_261C32BBC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0 || (&__dst[16 * a2] > __src ? (BOOL v3 = &__src[16 * a2] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)sub_261E88A68();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, 16 * a2);
  }
  return result;
}

char *sub_261C32C98(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_261C32CD8(a1, a2, a3, *v3);
  *BOOL v3 = (uint64_t)result;
  return result;
}

char *sub_261C32CB8(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_261C32DBC(a1, a2, a3, *v3);
  *BOOL v3 = (uint64_t)result;
  return result;
}

char *sub_261C32CD8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A9553E0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  os_log_type_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_261C32954(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_261C32AE0(v13, v8, v12);
  }
  swift_release();
  return v10;
}

char *sub_261C32DBC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A9553C8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  os_log_type_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_261C329E8(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_261C32BBC(v13, v8, v12);
  }
  swift_release();
  return v10;
}

uint64_t sub_261C32EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_261E888C8();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = sub_261E888E8();
    if (__OFSUB__(a1, result)) {
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (!v9)
  {
    uint64_t v11 = sub_261E888D8();
    if (v11 >= v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = v11;
    }
    uint64_t v13 = v8 + v12;
    if (v8) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    sub_261C2E958(v8, v14, a4);
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_261C32F5C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_261C32FB4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

void sub_261C3300C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1;
  __int16 v5 = a2;
  char v6 = BYTE2(a2);
  char v7 = BYTE3(a2);
  char v8 = BYTE4(a2);
  char v9 = BYTE5(a2);
  sub_261C2E958((uint64_t)&v4, (uint64_t)&v4 + a3, a4);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for MemoryBuffer()
{
  return self;
}

unint64_t sub_261C33158()
{
  unint64_t result = qword_26A955238;
  if (!qword_26A955238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A955238);
  }
  return result;
}

uint64_t sub_261C331A4(uint64_t a1, uint64_t a2)
{
  return sub_261C331D4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))XOJIT_XOJIT_AddObjectFileAsync);
}

uint64_t sub_261C331BC(uint64_t a1, uint64_t a2)
{
  return sub_261C331D4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))XOJIT_XOJIT_LinkStaticArchiveAsync);
}

uint64_t sub_261C331D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  return sub_261C2F940(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], a3);
}

void sub_261C331FC(uint64_t a1, uint64_t a2)
{
  sub_261C2FB6C(a1, a2, *(void *)(v2 + 16));
}

uint64_t type metadata accessor for XOJIT.MachOHeaderOptions.COptions()
{
  return self;
}

void sub_261C33234()
{
}

uint64_t sub_261C33240()
{
  swift_bridgeObjectRelease();
  uint64_t v0 = OUTLINED_FUNCTION_17();
  return MEMORY[0x270FA0238](v0);
}

uint64_t sub_261C33270(uint64_t a1, uint64_t a2)
{
  return sub_261C31198(a1, a2, v2);
}

uint64_t sub_261C33278()
{
  swift_release();
  uint64_t v0 = OUTLINED_FUNCTION_17();
  return MEMORY[0x270FA0238](v0);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t type metadata accessor for XOJIT.SymbolTableStream(uint64_t a1)
{
  return sub_261C33304(a1, (uint64_t *)&unk_26A9552E8);
}

uint64_t type metadata accessor for XOJIT.Context(uint64_t a1)
{
  return sub_261C33304(a1, (uint64_t *)&unk_26A955388);
}

uint64_t sub_261C33304(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t _s5XOJIT5XOJITC7ContextCMa_0()
{
  return self;
}

unint64_t sub_261C33360()
{
  unint64_t result = qword_26A955288;
  if (!qword_26A955288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A955288);
  }
  return result;
}

unint64_t sub_261C333B0()
{
  unint64_t result = qword_26A955290;
  if (!qword_26A955290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A955290);
  }
  return result;
}

unint64_t sub_261C33400()
{
  unint64_t result = qword_26A955298;
  if (!qword_26A955298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A955298);
  }
  return result;
}

unint64_t sub_261C33450()
{
  unint64_t result = qword_26A9552A0;
  if (!qword_26A9552A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A9552A0);
  }
  return result;
}

unint64_t sub_261C334A0()
{
  unint64_t result = qword_26A9552A8;
  if (!qword_26A9552A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A9552A8);
  }
  return result;
}

unint64_t sub_261C334F0()
{
  unint64_t result = qword_26A9552B0;
  if (!qword_26A9552B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A9552B0);
  }
  return result;
}

unint64_t sub_261C33540()
{
  unint64_t result = qword_26A9552B8;
  if (!qword_26A9552B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A9552B8);
  }
  return result;
}

unint64_t sub_261C33590()
{
  unint64_t result = qword_26A9552C0;
  if (!qword_26A9552C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A9552C0);
  }
  return result;
}

unint64_t sub_261C335E0()
{
  unint64_t result = qword_26A9552C8;
  if (!qword_26A9552C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A9552C8);
  }
  return result;
}

unint64_t sub_261C33630()
{
  unint64_t result = qword_26A9552D0;
  if (!qword_26A9552D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A9552D0);
  }
  return result;
}

uint64_t sub_261C3367C()
{
  return sub_261C35058(&qword_26A9552D8, &qword_26A9552E0);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t method lookup function for XOJITError(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for XOJITError);
}

uint64_t dispatch thunk of XOJITError.kind.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_261C33754(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_261C3375C(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void type metadata accessor for XOJITError.Kind()
{
}

uint64_t method lookup function for MemoryBuffer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MemoryBuffer);
}

uint64_t dispatch thunk of MemoryBuffer.__allocating_init(identifier:fromFile:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata accessor for XOJIT()
{
  return self;
}

uint64_t method lookup function for XOJIT(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for XOJIT);
}

uint64_t dispatch thunk of XOJIT.__allocating_init(fromXPCConnection:oopJITLinkageType:opaqueOwner:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of XOJIT.__allocating_init(fromXPCConnection:oopJITLinkageType:opaqueOwner:reportError:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of XOJIT.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of XOJIT.__allocating_init(reportError:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

void type metadata accessor for XOJIT.DylibHandle()
{
}

uint64_t destroy for XOJIT.JITDylib()
{
  swift_release();
  return swift_release();
}

void *_s5XOJIT5XOJITC8JITDylibVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for XOJIT.JITDylib(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for XOJIT.JITDylib(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

void type metadata accessor for XOJIT.JITDylib()
{
}

void type metadata accessor for XOJIT.LoadArchives()
{
}

void type metadata accessor for XOJIT.LinkableFileKind()
{
}

void type metadata accessor for XOJIT.ObjectLinkingLayer()
{
}

uint64_t _s5XOJIT10XOJITErrorC4KindOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s5XOJIT10XOJITErrorC4KindOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x261C33B4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for XOJIT.ObjectLinkingLayer.StaticArchiveForceLoad()
{
}

void type metadata accessor for XOJIT.JITTargetAddress()
{
}

void type metadata accessor for XOJIT.JITEvaluatedSymbol()
{
}

void type metadata accessor for XOJIT.ExecutorAddress()
{
}

void type metadata accessor for XOJIT.ExecutorSymbolDef()
{
}

void type metadata accessor for XOJIT.JITDylibLookupFlags()
{
}

void type metadata accessor for XOJIT.SymbolLookupFlags()
{
}

uint64_t _s5XOJIT5XOJITC19JITDylibLookupFlagsOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s5XOJIT5XOJITC19JITDylibLookupFlagsOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x261C33D24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_261C33D4C(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

void type metadata accessor for XOJIT.LookupKind()
{
}

uint64_t getEnumTagSinglePayload for XOJIT.SymbolState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for XOJIT.SymbolState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x261C33EB8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

void type metadata accessor for XOJIT.SymbolState()
{
}

void *initializeBufferWithCopyOfBuffer for XOJIT.ExecutionSession(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for XOJIT.ExecutionSession()
{
  return swift_release();
}

void *_s5XOJIT5XOJITC18ObjectLinkingLayerVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

_OWORD *assignWithTake for XOJIT.ExecutionSession(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  return a1;
}

uint64_t _s5XOJIT5XOJITC8JITDylibVwet_0(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_261C33FEC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for XOJIT.ExecutionSession()
{
}

uint64_t destroy for XOJIT.MachOHeaderOptions()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for XOJIT.MachOHeaderOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for XOJIT.MachOHeaderOptions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for XOJIT.MachOHeaderOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for XOJIT.MachOHeaderOptions(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XOJIT.MachOHeaderOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for XOJIT.MachOHeaderOptions()
{
}

uint64_t initializeBufferWithCopyOfBuffer for XOJIT.MachOHeaderOptions.Dylib(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t initializeWithCopy for XOJIT.MachOHeaderOptions.Dylib(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for XOJIT.MachOHeaderOptions.Dylib(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy28_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for XOJIT.MachOHeaderOptions.Dylib(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for XOJIT.MachOHeaderOptions.Dylib(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 28))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XOJIT.MachOHeaderOptions.Dylib(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 28) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for XOJIT.MachOHeaderOptions.Dylib()
{
}

uint64_t type metadata accessor for XOJIT.ReplacementManager()
{
  return self;
}

uint64_t method lookup function for XOJIT.ReplacementManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for XOJIT.ReplacementManager);
}

uint64_t dispatch thunk of XOJIT.ReplacementManager.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata accessor for XOJIT.ORCRuntimeBridge()
{
  return self;
}

uint64_t method lookup function for XOJIT.ORCRuntimeBridge(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for XOJIT.ORCRuntimeBridge);
}

uint64_t dispatch thunk of XOJIT.ORCRuntimeBridge.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for XOJIT.UVSymbolString(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1 || !*(unsigned char *)(a1 + 8))
    {
      if (*(void *)a1) {
        int v2 = -1;
      }
      else {
        int v2 = 0;
      }
    }
    else
    {
      int v2 = *(_DWORD *)a1 + 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XOJIT.UVSymbolString(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)__n128 result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = 0;
    }
  }
  return result;
}

void type metadata accessor for XOJIT.UVSymbolString()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for XOJIT.SymbolTableStream(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955268);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    char v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955270);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for XOJIT.SymbolTableStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955268);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955270);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

uint64_t initializeWithCopy for XOJIT.SymbolTableStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955268);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955270);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for XOJIT.SymbolTableStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955268);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955270);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for XOJIT.SymbolTableStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955268);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955270);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for XOJIT.SymbolTableStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955268);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955270);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for XOJIT.SymbolTableStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_261C34A48);
}

uint64_t sub_261C34A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A955268);
  OUTLINED_FUNCTION_11();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955270);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }
  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for XOJIT.SymbolTableStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_261C34B08);
}

uint64_t sub_261C34B08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A955268);
  OUTLINED_FUNCTION_11();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A955270);
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }
  return __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

void sub_261C34BBC()
{
  sub_261C35434(319, &qword_26A9552F8, (uint64_t)&type metadata for XOJIT.SymbolTableStream.Record, MEMORY[0x263F8F5B8]);
  if (v0 <= 0x3F)
  {
    sub_261C35434(319, qword_26A955300, (uint64_t)&type metadata for XOJIT.SymbolTableStream.Record, MEMORY[0x263F8F590]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t destroy for XOJIT.SymbolTableStream.Record()
{
  return swift_bridgeObjectRelease();
}

void *_s5XOJIT5XOJITC17SymbolTableStreamV6RecordVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for XOJIT.SymbolTableStream.Record(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for XOJIT.SymbolTableStream.Record(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for XOJIT.SymbolTableStream.Record(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XOJIT.SymbolTableStream.Record(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for XOJIT.SymbolTableStream.Record()
{
}

uint64_t sub_261C34E4C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Box()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_261C34EF8()
{
  return type metadata accessor for XOJIT.Context(0);
}

void sub_261C34F00()
{
  sub_261C35434(319, qword_26A955300, (uint64_t)&type metadata for XOJIT.SymbolTableStream.Record, MEMORY[0x263F8F590]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_261C34FB4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XOJIT.SymbolTableStream(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_261C35010()
{
  uint64_t v0 = OUTLINED_FUNCTION_17();
  return MEMORY[0x270FA0238](v0);
}

uint64_t sub_261C35020(uint64_t a1, uint64_t a2)
{
  return sub_261C31CA8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_261C35028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(a2, a3);
}

uint64_t sub_261C35058(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_261C3509C(uint64_t a1)
{
  return sub_261C3514C(a1, (uint64_t (*)(uint64_t, void *))XOJIT_MachOHeaderOptions_SetIDDylib);
}

uint64_t sub_261C350C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_261C350F0(char *a1)
{
  XOJIT_MachOHeaderOptions_AddRPath(*(void *)(v1 + 16), a1);
}

uint64_t sub_261C35120(uint64_t a1)
{
  return sub_261C3514C(a1, (uint64_t (*)(uint64_t, void *))XOJIT_MachOHeaderOptions_AddLoadDylib);
}

uint64_t sub_261C3514C(uint64_t a1, uint64_t (*a2)(uint64_t, void *))
{
  int v3 = *(_DWORD *)(v2 + 48);
  uint64_t v4 = *(void *)(*(void *)(v2 + 16) + 16);
  v6[0] = a1;
  v6[1] = *(void *)(v2 + 40);
  int v7 = v3;
  return a2(v4, v6);
}

uint64_t sub_261C351A8(uint64_t a1)
{
  return sub_261C323F8(a1, *(uint64_t (**)(uint64_t, uint64_t (*)()))(v1 + 16));
}

uint64_t orc_rt_CWrapperFunctionResultGetOutOfBandError(void *a1)
{
  if (a1[1]) {
    return 0;
  }
  else {
    return *a1;
  }
}

void orc_rt_DisposeCWrapperFunctionResult(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 9)
  {
    uint64_t v2 = *(void **)a1;
LABEL_3:
    free(v2);
    return;
  }
  if (!v1)
  {
    uint64_t v2 = *(void **)a1;
    if (v2) {
      goto LABEL_3;
    }
  }
}

unint64_t sub_261C351F0()
{
  unint64_t result = qword_26A9553D8;
  if (!qword_26A9553D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A9553D8);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

void *initializeBufferWithCopyOfBuffer for LLVMError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LLVMError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for LLVMError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LLVMError(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LLVMError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for XOJIT.CallError()
{
}

uint64_t sub_261C3539C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_261C353BC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for XOJIT_JITDylibSearchOrderElement(uint64_t a1)
{
}

void type metadata accessor for XOJIT_JITDylibLookupFlags(uint64_t a1)
{
}

void sub_261C35434(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t OUTLINED_FUNCTION_2()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_3()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_5(uint64_t a1)
{
  return MEMORY[0x270FA2498](a1, 0, 0);
}

uint64_t OUTLINED_FUNCTION_6()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_7()
{
  return MEMORY[0x270FA2E08](0x6C7070612E6D6F63, 0xEF54494A4F582E65, 0x54494A4F58, 0xE500000000000000);
}

uint64_t OUTLINED_FUNCTION_12(uint64_t a1, void *a2)
{
  *a2 = v2;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_13(uint64_t a1, void *a2)
{
  *a2 = v2;
  a2[1] = v3;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_14()
{
  return LLVMDisposeErrorMessage(v0);
}

uint64_t OUTLINED_FUNCTION_15()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17()
{
  return v0;
}

__n128 OUTLINED_FUNCTION_19(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  __n128 result = *(__n128 *)(v2 + 40);
  long long v4 = *(_OWORD *)(v2 + 24);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_20()
{
  return sub_261C32F5C(v1, v0);
}

uint64_t OUTLINED_FUNCTION_21()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_22()
{
  return sub_261E88AE8();
}

uint64_t OUTLINED_FUNCTION_25(uint64_t a1, void *a2)
{
  *a2 = v2;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_26()
{
  return swift_allocObject();
}

unint64_t OUTLINED_FUNCTION_27(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  return sub_261C2D554();
}

uint64_t OUTLINED_FUNCTION_28()
{
  return sub_261E88AD8();
}

uint64_t OUTLINED_FUNCTION_31()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_32()
{
  return MEMORY[0x270FA0528](v0, 2);
}

uint64_t OUTLINED_FUNCTION_33()
{
  return v0;
}

uint64_t sub_261C35810()
{
  uint64_t result = *(void *)(v0 + 16);
  if (result) {
    *(void *)(v0 + 16) = 0;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_261C35824(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = 0;
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = sub_261E88988();
  swift_bridgeObjectRelease();
  uint64_t v6 = LLVMCreateMemoryBufferWithMemoryRange(a1, v4, (char *)(v5 + 32));
  swift_release();
  *(void *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_261C358BC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1) {
    LLVMDisposeMemoryBuffer(v1);
  }
  return v0;
}

uint64_t sub_261C358E0()
{
  sub_261C358BC();
  return MEMORY[0x270FA0228](v0);
}

uint64_t type metadata accessor for LLVMMemoryBuffer()
{
  return self;
}

ValueMetadata *type metadata accessor for LLVMError()
{
  return &type metadata for LLVMError;
}

uint64_t libcd_log_stderr(const char *a1)
{
  return fputs(a1, (FILE *)*MEMORY[0x263EF8348]);
}

_DWORD *libcd_create(uint64_t a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x100uLL, 0x10F204024BF9B0EuLL);
  *(void *)uint64_t v2 = a1;
  v2[18] = 0;
  v2[4] = 0;
  v2[34] = 0;
  *((void *)v2 + 13) = 0;
  *((void *)v2 + 14) = 0;
  uint64_t v3 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  *((void *)v2 + 20) = v3;
  *uint64_t v3 = 2;
  v2[42] = 1;
  *((void *)v2 + 22) = malloc_type_calloc(1uLL, 0x1CuLL, 0x1000040F1E6FBC0uLL);
  *((unsigned char *)v2 + 224) = 0;
  return v2;
}

void libcd_free(uint64_t a1)
{
  if (a1)
  {
    free(*(void **)(a1 + 96));
    for (uint64_t i = *(void **)(a1 + 192); ; *(void *)(a1 + 104) = *i)
    {
      free(i);
      uint64_t i = *(void **)(a1 + 104);
      if (!i) {
        break;
      }
    }
    while (1)
    {
      uint64_t v3 = *(void **)(a1 + 112);
      if (!v3) {
        break;
      }
      *(void *)(a1 + 112) = *v3;
      free(v3);
    }
    free(*(void **)(a1 + 160));
    free(*(void **)(a1 + 176));
    libcd_reset_write_method(a1);
    libcd_reset_read_method(a1);
    free((void *)a1);
  }
}

uint64_t libcd_reset_write_method(uint64_t result)
{
  switch(*(_DWORD *)(result + 16))
  {
    case 1:
      *(_DWORD *)(result + 24) = -1;
      break;
    case 2:
    case 3:
      *(void *)(result + 32) = 0;
      goto LABEL_3;
    case 4:
LABEL_3:
      *(void *)(result + 24) = 0;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 16) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 8) = 0;
  return result;
}

uint64_t libcd_reset_read_method(uint64_t result)
{
  switch(*(_DWORD *)(result + 72))
  {
    case 1:
      *(_DWORD *)(result + 80) = -1;
      break;
    case 2:
    case 3:
    case 4:
      *(void *)(result + 80) = 0;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 72) = 0;
  *(unsigned char *)(result + 88) = 0;
  *(void *)(result + 64) = 0;
  return result;
}

uint64_t libcd_set_hash_types(uint64_t a1, int *a2, unsigned int a3)
{
  free(*(void **)(a1 + 160));
  *(void *)(a1 + 160) = 0;
  if (a3)
  {
    size_t v6 = a3;
    uint64_t v7 = a3;
    uint64_t v8 = a2;
    while (1)
    {
      int v9 = *v8++;
      if (!_libcd_get_hash_info(v9)) {
        return 1;
      }
      if (!--v7) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    size_t v6 = 0;
LABEL_7:
    uint64_t v10 = malloc_type_calloc(v6, 4uLL, 0x100004052888210uLL);
    *(void *)(a1 + 160) = v10;
    memcpy(v10, a2, 4 * v6);
    *(_DWORD *)(a1 + 168) = a3;
    uint64_t v11 = malloc_type_realloc(*(void **)(a1 + 176), 28 * v6, 0x1000040F1E6FBC0uLL);
    *(void *)(a1 + 176) = v11;
    bzero(v11, 28 * v6);
    return 0;
  }
}

void *_libcd_get_hash_info(int a1)
{
  if (a1 < 3)
  {
    uint64_t result = (void *)((char *)&_known_hash_types + 16 * a1);
    if (*result < 0x21uLL) {
      return result;
    }
    _libcd_err_log("%s: internal error, hash len (%d) is larger than max known hash len (%d)\n");
  }
  else
  {
    _libcd_err_log("%s: unknown hash type %d (>= %d)\n");
  }
  return 0;
}

uint64_t libcd_set_input_mem(uint64_t a1, uint64_t a2)
{
  uint64_t result = libcd_reset_read_method(a1);
  *(_DWORD *)(a1 + 72) = 2;
  *(void *)(a1 + 64) = _libcd_read_page_mem;
  *(void *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 88) = 1;
  return result;
}

size_t _libcd_read_page_mem(void *a1, int a2, uint64_t a3, size_t a4, void *a5)
{
  size_t v6 = a4;
  uint64_t v9 = a1[10];
  bzero(a5, a4);
  if (v6 + a3 > *a1) {
    size_t v6 = *a1 - a3;
  }
  memcpy(a5, (const void *)(v9 + a3), v6);
  return v6;
}

uint64_t libcd_set_output_mem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = libcd_reset_write_method(a1);
  *(_DWORD *)(a1 + 16) = 2;
  *(void *)(a1 + 8) = _libcd_write_mem;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a2 + a3;
  *(unsigned char *)(a1 + 56) = 1;
  return result;
}

size_t _libcd_write_mem(void *a1, uint64_t a2, void *__src, size_t __n)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[6] + a2;
  size_t v6 = a1[4] - v4;
  if (v5 + __n <= v6)
  {
    size_t v7 = __n;
    memcpy((void *)(v4 + v5), __src, __n);
    a1[5] += v7;
  }
  else
  {
    _libcd_err_log("%s: write beyond end: %zu > %zu\n", "_libcd_write_mem", v5 + __n, v6);
    return 0;
  }
  return v7;
}

uint64_t libcd_set_linkage(uint64_t a1, int a2, long long *a3)
{
  char v4 = a2;
  if (_libcd_get_hash_info(a2))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 224) = 1;
    *(unsigned char *)(a1 + 225) = v4;
    long long v7 = *a3;
    *(_DWORD *)(a1 + 242) = *((_DWORD *)a3 + 4);
    *(_OWORD *)(a1 + 226) = v7;
  }
  else
  {
    _libcd_err_log("%s: unknown linkage hash type\n", "libcd_set_linkage");
    return 1;
  }
  return result;
}

void _libcd_err_log(char *a1, ...)
{
  va_start(va, a1);
  uint64_t v1 = 0;
  vasprintf(&v1, a1, va);
  if (v1)
  {
    _configured_log_writer(v1);
    free(v1);
  }
}

size_t libcd_cd_size(uint64_t a1, int a2)
{
  hash_info = _libcd_get_hash_info(a2);
  char v4 = *(const char **)(a1 + 96);
  if (v4) {
    size_t v5 = strlen(v4) + 1;
  }
  else {
    size_t v5 = 0;
  }
  size_t v6 = *(const char **)(a1 + 192);
  if (v6) {
    size_t v7 = strlen(v6) + 1;
  }
  else {
    size_t v7 = 0;
  }
  uint64_t v8 = 108;
  if (!*(unsigned char *)(a1 + 224)) {
    uint64_t v8 = 88;
  }
  size_t v9 = v5 + v7 + v8;
  if (*(unsigned char *)(a1 + 224)) {
    v9 += 20;
  }
  return v9
       + (*(unsigned int *)(a1 + 120)
        + (unint64_t)((unint64_t)(*(void *)a1 + 4095) >> 12))
       * *hash_info;
}

uint64_t libcd_superblob_size(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 168))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 12;
    do
      v3 += libcd_cd_size(a1, *(_DWORD *)(*(void *)(a1 + 160) + 4 * v2++));
    while (v2 < *(unsigned int *)(a1 + 168));
  }
  else
  {
    LODWORD(v2) = 0;
    uint64_t v3 = 12;
  }
  for (uint64_t i = *(void **)(a1 + 104); i; uint64_t i = (void *)*i)
  {
    v3 += i[3];
    LODWORD(v2) = v2 + 1;
  }
  uint64_t v5 = *(void *)(a1 + 128);
  BOOL v6 = v5 == 0;
  uint64_t v7 = v5 + v3;
  if (v6) {
    unsigned int v8 = v2;
  }
  else {
    unsigned int v8 = v2 + 1;
  }
  return v7 + 8 * v8;
}

uint64_t libcd_serialize_as_type(uint64_t a1, unsigned int a2)
{
  if (!*(void *)(a1 + 64) || !*(_DWORD *)(a1 + 72))
  {
    _libcd_err_log("%s: No read page method set\n", "libcd_serialize_as_type");
    return 2;
  }
  if (!*(void *)(a1 + 8) || !*(_DWORD *)(a1 + 16))
  {
    _libcd_err_log("%s: No write method set\n");
    return 1;
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v3 = (void *)(a1 + 104);
  uint64_t v4 = *(int *)(a1 + 168) - 1;
  uint64_t v5 = (void *)(a1 + 104);
  do
  {
    uint64_t v5 = (void *)*v5;
    ++v4;
  }
  while (v5);
  uint64_t v6 = *(void *)(a1 + 128);
  if (v6) {
    unsigned int v7 = v4 + 1;
  }
  else {
    unsigned int v7 = v4;
  }
  if (!v7)
  {
    _libcd_err_log("%s: nothing to serialize\n", "libcd_serialize_as_type");
    return 5;
  }
  v28[0] = bswap32(a2);
  v28[1] = bswap32(libcd_superblob_size(a1));
  v28[2] = bswap32(v7);
  if (!(*(uint64_t (**)(uint64_t, void, _DWORD *, uint64_t))(a1 + 8))(a1, *(void *)(a1 + 40), v28, 12))
  {
    _libcd_err_log("%s: serialize superblob header failed\n");
    return 1;
  }
  if (v6) {
    size_t v8 = v4 + 1;
  }
  else {
    size_t v8 = v4;
  }
  uint64_t v9 = 8 * v8;
  unsigned int v10 = 8 * v8 + 12;
  uint64_t v11 = (int8x8_t *)malloc_type_calloc(v8, 8uLL, 0x100004000313F17uLL);
  if (*(_DWORD *)(a1 + 168))
  {
    unint64_t v12 = 0;
    do
    {
      unsigned int v13 = v12 + 4095;
      if (!v12) {
        unsigned int v13 = 0;
      }
      v11[v12] = vrev32_s8((int8x8_t)__PAIR64__(v10, v13));
      int v14 = *(_DWORD *)(*(void *)(a1 + 160) + 4 * v12++);
      v10 += libcd_cd_size(a1, v14);
    }
    while (v12 < *(unsigned int *)(a1 + 168));
  }
  else
  {
    LODWORD(v12) = 0;
  }
  uint64_t v17 = (void *)*v3;
  if (*v3)
  {
    uint64_t v18 = &v11[v12];
    do
    {
      v19.i32[0] = *((_DWORD *)v17 + 2);
      v19.i32[1] = v10;
      *v18++ = vrev32_s8(v19);
      v10 += *((_DWORD *)v17 + 6);
      uint64_t v17 = (void *)*v17;
      LODWORD(v12) = v12 + 1;
    }
    while (v17);
  }
  if (*(void *)(a1 + 128))
  {
    uint64_t v20 = &v11[v12];
    v20->i32[0] = 256;
    v20->i32[1] = bswap32(v10);
  }
  if (!(*(uint64_t (**)(uint64_t, void, int8x8_t *, uint64_t))(a1 + 8))(a1, *(void *)(a1 + 40), v11, v9))
  {
    _libcd_err_log("%s: serialize superblob indices failed\n");
    goto LABEL_48;
  }
  free(v11);
  if (!*(_DWORD *)(a1 + 168)) {
    goto LABEL_40;
  }
  unint64_t v21 = 0;
  do
  {
    uint64_t v22 = _libcd_serialize_cd(a1, *(_DWORD *)(*(void *)(a1 + 160) + 4 * v21));
    if (v22)
    {
      uint64_t v15 = v22;
      _libcd_err_log("%s: serialize code directory type %d failed, error %d\n", "libcd_serialize_as_type", *(_DWORD *)(*(void *)(a1 + 160) + 4 * v21), v22);
      return v15;
    }
    ++v21;
  }
  while (v21 < *(unsigned int *)(a1 + 168));
  do
  {
LABEL_40:
    uint64_t v3 = (void *)*v3;
    if (!v3)
    {
      size_t v23 = *(void *)(a1 + 128);
      if (!v23) {
        return 0;
      }
      uint64_t v24 = (int8x8_t *)malloc_type_calloc(1uLL, v23, 0xC430757BuLL);
      if (!v24)
      {
        uint64_t v26 = *(void *)(a1 + 128);
        uint64_t v27 = __error();
        _libcd_err_log("%s: serialize signature space(%zu) failed allocating space (%d)\n", "libcd_serialize_as_type", v26, *v27);
        return 6;
      }
      uint64_t v11 = v24;
      int v25 = *(_DWORD *)(a1 + 136);
      if (v25 == 4)
      {
        if (((*(uint64_t (**)(void))(*(void *)(a1 + 144) + 16))() & 1) == 0)
        {
LABEL_46:
          _libcd_err_log("%s: Failed to generate signature\n", "libcd_serialize_as_type");
          free(v11);
          return 4;
        }
      }
      else if (v25 == 3 {
             && ((*(uint64_t (**)(uint64_t, void, void, int8x8_t *))(a1 + 144))(a1, *(void *)(a1 + 152), *(void *)(a1 + 128), v24) & 1) == 0)
      }
      {
        goto LABEL_46;
      }
      if ((*(uint64_t (**)(uint64_t, void, int8x8_t *, void))(a1 + 8))(a1, *(void *)(a1 + 40), v11, *(void *)(a1 + 128)))
      {
        free(v11);
        return 0;
      }
      _libcd_err_log("%s: serialize signature space (%zu) failed\n");
LABEL_48:
      free(v11);
      return 1;
    }
  }
  while ((*(uint64_t (**)(uint64_t, void, void, void))(a1 + 8))(a1, *(void *)(a1 + 40), v3[2], v3[3]));
  _libcd_err_log("%s: serialize raw blob data, slot %#x, failed\n");
  return 1;
}

uint64_t _libcd_serialize_cd(uint64_t a1, int a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  hash_info = _libcd_get_hash_info(a2);
  size_t v5 = libcd_cd_size(a1, a2);
  uint64_t v6 = (int8x16_t *)malloc_type_calloc(1uLL, v5, 0x1B8D4971uLL);
  if (v6)
  {
    unsigned int v7 = v6;
    v6->i32[0] = 34397946;
    unsigned int v8 = libcd_cd_size(a1, a2);
    int v9 = *(unsigned __int8 *)(a1 + 224);
    if (*(unsigned char *)(a1 + 224)) {
      int v10 = 393728;
    }
    else {
      int v10 = 262656;
    }
    v7->i32[1] = bswap32(v8);
    v7->i32[2] = v10;
    v7->i32[3] = bswap32(*(_DWORD *)(a1 + 92));
    if (v9) {
      unsigned int v11 = 108;
    }
    else {
      unsigned int v11 = 88;
    }
    unint64_t v12 = *(const char **)(a1 + 96);
    if (v12)
    {
      v7[1].i32[1] = v11 << 24;
      unsigned int v11 = (v11 | 1) + strlen(v12);
    }
    unsigned int v13 = *(_DWORD *)(a1 + 120);
    unint64_t v14 = *(void *)a1;
    unsigned int v15 = bswap32((unint64_t)(*(void *)a1 + 4095) >> 12);
    v7[1].i32[2] = bswap32(v13);
    v7[1].i32[3] = v15;
    if (HIDWORD(v14)) {
      v7[3].i64[1] = bswap64(v14);
    }
    else {
      v7[2].i32[0] = bswap32(v14);
    }
    size_t v17 = *hash_info;
    v7[2].i8[4] = *hash_info;
    v7[2].i8[5] = a2;
    v7[2].i8[6] = *(unsigned char *)(a1 + 184);
    v7[2].i8[7] = 12;
    uint64_t v18 = *(const char **)(a1 + 192);
    if (v18)
    {
      v7[3].i32[0] = bswap32(v11);
      v11 += strlen(v18) + 1;
    }
    v7[4] = vrev64q_s8(*(int8x16_t *)(a1 + 200));
    v7[5].i64[0] = bswap64(*(void *)(a1 + 216));
    if (v9)
    {
      v7[6].i8[0] = *(unsigned char *)(a1 + 225);
      if (*(unsigned char *)(a1 + 246))
      {
        char v19 = *(unsigned char *)(a1 + 247);
        unsigned int v20 = bswap32(*(unsigned __int16 *)(a1 + 248)) >> 16;
      }
      else
      {
        LOWORD(v20) = 0;
        char v19 = 1;
      }
      v7[6].i8[1] = v19;
      v7[6].i16[1] = v20;
      v7[6].i32[1] = bswap32(v11);
      v7[6].i32[2] = 335544320;
      v11 += 20;
      uint64_t v21 = 27;
    }
    else
    {
      uint64_t v21 = 22;
    }
    v7[1].i32[0] = bswap32(v11 + v13 * v17);
    uint64_t v22 = &v7->i32[v21];
    if (v12)
    {
      size_t v23 = strlen(v12) + 1;
      memcpy(v22, v12, v23);
      uint64_t v22 = (__int32 *)((char *)v22 + v23);
    }
    uint64_t v24 = *(const void **)(a1 + 192);
    if (v24)
    {
      size_t v25 = strlen(*(const char **)(a1 + 192)) + 1;
      memcpy(v22, v24, v25);
      uint64_t v22 = (__int32 *)((char *)v22 + v25);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      long long v26 = *(_OWORD *)(a1 + 226);
      v22[4] = *(_DWORD *)(a1 + 242);
      *(_OWORD *)uint64_t v22 = v26;
      v22 += 5;
    }
    size_t v47 = v5;
    if (*(_DWORD *)(a1 + 120))
    {
      uint64_t v27 = ((uint64_t (*)(void))hash_info[1])();
      MEMORY[0x270FA5388](v27, v28);
      v30 = (char *)&v46 - v29;
      uint64_t v31 = (char *)malloc_type_calloc(*(unsigned int *)(a1 + 120), *hash_info, 0x22D8E2EBuLL);
      for (uint64_t i = *(uint64_t **)(a1 + 112); i; uint64_t i = (uint64_t *)*i)
      {
        ccdigest_init();
        ccdigest_update();
        (*(void (**)(uint64_t, char *, char *))(v27 + 56))(v27, v30, &v31[*hash_info * (*(_DWORD *)(a1 + 120) - *((_DWORD *)i + 2))]);
      }
      memcpy(v22, v31, *hash_info * *(unsigned int *)(a1 + 120));
      free(v31);
    }
    unint64_t v33 = *(void *)a1 + 4095;
    unsigned int v48 = 0;
    uint64_t v34 = (v33 >> 12);
    if ((v33 >> 12))
    {
      uint64_t v35 = 0;
      do
      {
        unsigned int v48 = _libcd_hash_page(a1, v35);
        if (v48) {
          BOOL v36 = 1;
        }
        else {
          BOOL v36 = v34 - 1 == v35;
        }
        ++v35;
      }
      while (!v36);
    }
    if (v48)
    {
      _libcd_err_log("%s: serialize page hashes failed\n", "_libcd_serialize_cd");
      free(v7);
      return v48;
    }
    else if ((*(uint64_t (**)(uint64_t, void, int8x16_t *, size_t))(a1 + 8))(a1, *(void *)(a1 + 40), v7, v47))
    {
      uint64_t v37 = ((uint64_t (*)(void))hash_info[1])();
      MEMORY[0x270FA5388](v37, v38);
      v40 = (char *)&v46 - v39;
      v41 = malloc_type_calloc(1uLL, *hash_info, 0xAB74758DuLL);
      if (v41)
      {
        v42 = v41;
        ccdigest_init();
        ccdigest_update();
        (*(void (**)(uint64_t, char *, _DWORD *))(v37 + 56))(v37, v40, v42);
        uint64_t v43 = *(unsigned int *)(a1 + 168);
        if (v43)
        {
          uint64_t v44 = *(void *)(a1 + 176);
          while (*(unsigned char *)(v44 + 24))
          {
            if (*(_DWORD *)v44 == a2) {
              goto LABEL_52;
            }
            v44 += 28;
            if (!--v43) {
              goto LABEL_53;
            }
          }
          *(_DWORD *)uint64_t v44 = a2;
          *(unsigned char *)(v44 + 24) = 1;
LABEL_52:
          long long v45 = *(_OWORD *)v42;
          *(_DWORD *)(v44 + 20) = v42[4];
          *(_OWORD *)(v44 + 4) = v45;
        }
LABEL_53:
        free(v42);
        free(v7);
        return 0;
      }
      else
      {
        _libcd_err_log("%s: Failed to allocated memory for cdhash\n", "_libcd_serialize_cd");
        free(v7);
        return 6;
      }
    }
    else
    {
      _libcd_err_log("%s: failed to write directory\n", "_libcd_serialize_cd");
      free(v7);
      return 1;
    }
  }
  else
  {
    _libcd_err_log("%s: Failed to allocate temporary memory for code directory\n", "_libcd_serialize_cd");
    return 6;
  }
}

uint64_t _libcd_hash_page(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v6 = (size_t *)v5;
  int v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = v2;
  uint64_t v19 = *MEMORY[0x263EF8340];
  memset(__src, 0, sizeof(__src));
  uint64_t v12 = (*(uint64_t (**)(void))(v5 + 8))();
  MEMORY[0x270FA5388](v12, v13);
  unsigned int v15 = &v17[-v14];
  bzero(v17, 0x1000uLL);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *))(v11 + 64))(v11, v10, v10 << 12, 4096, v17))
  {
    ccdigest_init();
    ccdigest_update();
    (*(void (**)(uint64_t, unsigned char *, _OWORD *))(v12 + 56))(v12, v15, __src);
    memcpy(v4, __src, *v6);
    return 0;
  }
  else
  {
    _libcd_err_log("%s: read page %d at pos %zu failed (pages: %d)\n", "_libcd_hash_page", v10, v10 << 12, v8);
    return 2;
  }
}

void xojit::ReplacementManager::ReplacementManager(xojit::ReplacementManager *this, llvm::orc::ObjectLinkingLayer *a2, llvm::orc::ExecutorProcessControl *a3)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = 850045863;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 0;
  operator new();
}

uint64_t llvm::orc::ObjectLinkingLayer::addPlugin(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  unint64_t v5 = *(void *)(a1 + 184);
  uint64_t v6 = *(void **)(a1 + 176);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = *(void *)(a1 + 168);
    uint64_t v10 = ((uint64_t)v6 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v5 - v9;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v27 = a1 + 184;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(a1 + 184, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unsigned int v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    long long v26 = v16;
    uint64_t v17 = *a2;
    *a2 = 0;
    *(void *)unsigned int v15 = v17;
    int v8 = v15 + 8;
    v25.i64[1] = (uint64_t)(v15 + 8);
    uint64_t v19 = *(void **)(a1 + 168);
    uint64_t v18 = *(void **)(a1 + 176);
    if (v18 == v19)
    {
      int64x2_t v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        uint64_t v20 = *--v18;
        *uint64_t v18 = 0;
        *((void *)v15 - 1) = v20;
        v15 -= 8;
      }
      while (v18 != v19);
      int64x2_t v21 = *(int64x2_t *)(a1 + 168);
      int v8 = (void *)v25.i64[1];
      uint64_t v16 = v26;
    }
    *(void *)(a1 + 168) = v15;
    *(void *)(a1 + 176) = v8;
    int64x2_t v25 = v21;
    uint64_t v22 = *(char **)(a1 + 184);
    *(void *)(a1 + 184) = v16;
    long long v26 = v22;
    uint64_t v24 = v21.i64[0];
    std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::~__split_buffer((void **)&v24);
  }
  else
  {
    uint64_t v7 = *a2;
    *a2 = 0;
    *uint64_t v6 = v7;
    int v8 = v6 + 1;
  }
  *(void *)(a1 + 176) = v8;
  std::mutex::unlock(v4);
  return a1;
}

void xojit::ReplacementManager::~ReplacementManager(xojit::ReplacementManager *this)
{
}

uint64_t llvm::orc::ExecutionSession::dispatchTask(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 72) + 24);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v5 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t xojit::ReplacementManager::addWithReplacement@<X0>(uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(*(void *)a1 + 8);
  uint64_t v9 = *(void *)(*(void *)a3 + 8);
  uint64_t v10 = *(void *)(*(void *)a3 + 16) - v9;
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)a3 + 16))();
  *(void *)&long long v88 = v9;
  *((void *)&v88 + 1) = v10;
  uint64_t v89 = v11;
  uint64_t v90 = v12;
  llvm::orc::getObjectFileInterface(v8, &v88, (uint64_t)&v94);
  if ((v98 & 1) == 0)
  {
    uint64_t v13 = *(void *)(*(void *)a1 + 8);
    uint64_t v14 = v97;
    std::string::size_type v87 = v97;
    if (v97 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      atomic_fetch_add((atomic_ullong *volatile)(v97 + 8), 1uLL);
      uint64_t v14 = v87;
    }
    if (v14)
    {
      uint64_t v15 = *(void *)v14;
      *(void *)&v91[0] = (char *)&v91[1] + 8;
      *(_OWORD *)((char *)v91 + 8) = xmmword_261E8A6A0;
      llvm::SmallVectorImpl<char>::append<char const*,void>(v91, (unsigned char *)(v14 + 16), (unsigned char *)(v14 + 16 + v15));
      unint64_t v16 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = v16 + 1;
      std::to_string(&v85, v16);
      uint64_t v17 = std::string::insert(&v85, 0, "$", 1uLL);
      std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(v91, p_p, (unsigned char *)p_p + size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      llvm::orc::ExecutorProcessControl::intern(*(void *)(v13 + 72), *(uint64_t **)&v91[0], *((unint64_t *)&v91[0] + 1), (unint64_t **)&__p);
      __int16 v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v94, (uint64_t *)&v87)[4];
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v94, (uint64_t *)&__p)[4] = v21;
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::erase((uint64_t)&v94, &v87);
      if (v97 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v97 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      std::string::size_type v97 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__r.__words[0] + 8), 1uLL);
        if (__p.__r_.__value_.__r.__words[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__r.__words[0] + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
      }
      if (*(_OWORD **)&v91[0] != (_OWORD *)((char *)&v91[1] + 8)) {
        free(*(void **)&v91[0]);
      }
      uint64_t v22 = v87;
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v71 = v13;
    if ((unint64_t)(v22 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v22 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    std::mutex::lock((std::mutex *)(a1 + 16));
    uint64_t v24 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)a3 + 16))();
    unint64_t v26 = v25;
    std::string::size_type v72 = a2;
    __p.__r_.__value_.__r.__words[0] = a2;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::FindAndConstruct(a1 + 88, (uint64_t *)&__p);
    uint64_t v28 = v27;
    uint64_t v29 = (llvm::StringMapImpl *)(v27 + 8);
    long long v92 = 0u;
    memset(v93, 0, sizeof(v93));
    uint64_t v73 = 0;
    memset(v91, 0, sizeof(v91));
    uint64_t v74 = 0;
    int v75 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    int v78 = 0;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    int v81 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    int v84 = 0;
    unsigned int v30 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)(v27 + 8), v24, v26);
    uint64_t v31 = *(void *)(v28 + 8);
    uint64_t v32 = v30;
    uint64_t v33 = *(void *)(v31 + 8 * v30);
    if (v33 == -8)
    {
      --*(_DWORD *)(v28 + 24);
    }
    else if (v33)
    {
      goto LABEL_39;
    }
    uint64_t v34 = (char *)operator new(v26 + 105, (std::align_val_t)8uLL);
    uint64_t v35 = v34;
    BOOL v36 = v34 + 104;
    if (v26) {
      memcpy(v34 + 104, v24, v26);
    }
    v36[v26] = 0;
    uint64_t v37 = v73;
    *(void *)uint64_t v35 = v26;
    *((void *)v35 + 1) = v37;
    uint64_t v73 = 0;
    *((void *)v35 + 2) = v74;
    uint64_t v74 = 0;
    *((_DWORD *)v35 + 6) = v75;
    int v75 = 0;
    *((void *)v35 + 4) = v76;
    uint64_t v76 = 0;
    *((void *)v35 + 5) = v77;
    uint64_t v77 = 0;
    *((_DWORD *)v35 + 12) = v78;
    int v78 = 0;
    *((void *)v35 + 7) = v79;
    uint64_t v79 = 0;
    *((void *)v35 + 8) = v80;
    uint64_t v80 = 0;
    *((_DWORD *)v35 + 18) = v81;
    int v81 = 0;
    *((void *)v35 + 10) = v82;
    uint64_t v82 = 0;
    *((void *)v35 + 11) = v83;
    uint64_t v83 = 0;
    *((_DWORD *)v35 + 24) = v84;
    int v84 = 0;
    *(void *)(v31 + 8 * v32) = v35;
    ++*(_DWORD *)(v28 + 20);
    for (uint64_t i = (uint64_t *)(*(void *)(v28 + 8) + 8 * llvm::StringMapImpl::RehashTable(v29, v32)); ; ++i)
    {
      uint64_t v33 = *i;
      if (*i && v33 != -8) {
        break;
      }
    }
LABEL_39:
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)&v82);
    MEMORY[0x263E500A0](v82, 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)&v79);
    MEMORY[0x263E500A0](v79, 8);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(&v76);
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)&v73);
    MEMORY[0x263E500A0](v73, 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)&v93[1] + 8);
    MEMORY[0x263E500A0](*((void *)&v93[1] + 1), 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)v93);
    MEMORY[0x263E500A0](*(void *)&v93[0], 8);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t *)&v91[1] + 1);
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)v91);
    MEMORY[0x263E500A0](*(void *)&v91[0], 8);
    if (v95)
    {
      if (v96)
      {
        uint64_t v40 = 16 * v96;
        uint64_t v41 = v94;
        while ((*(void *)v41 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v41 += 16;
          v40 -= 16;
          if (!v40) {
            goto LABEL_54;
          }
        }
      }
      else
      {
        uint64_t v41 = v94;
      }
      uint64_t v42 = v94 + 16 * v96;
      while (v41 != v42)
      {
        *(void *)&v91[0] = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(v33 + 8), *(_DWORD *)(v33 + 24), *(void *)v41, v91) & 1) != 0|| (*(void *)&v91[0] = 0, (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(v33 + 32), (void *)v41, v91))|| (*(void *)&v91[0] = 0, llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(v33 + 56), *(_DWORD *)(v33 + 72), *(void *)v41, v91)))
        {
          *(unsigned char *)(v41 + 9) |= 2u;
        }
        do
        {
          v41 += 16;
          if (v41 == v42) {
            goto LABEL_54;
          }
        }
        while ((*(void *)v41 | 8) == 0xFFFFFFFFFFFFFFF8);
      }
    }
LABEL_54:
    unint64_t v43 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v43 + 1;
    std::to_string(&__p, v43);
    uint64_t v44 = std::string::insert(&__p, 0, "__replacement_tag$", 0x12uLL);
    std::string::size_type v45 = v44->__r_.__value_.__r.__words[2];
    v91[0] = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    *(void *)&v91[1] = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v91[1]) & 0x80u) == 0) {
      uint64_t v46 = (uint64_t *)v91;
    }
    else {
      uint64_t v46 = *(uint64_t **)&v91[0];
    }
    if ((SBYTE7(v91[1]) & 0x80u) == 0) {
      unint64_t v47 = BYTE7(v91[1]);
    }
    else {
      unint64_t v47 = *((void *)&v91[0] + 1);
    }
    llvm::orc::ExecutorProcessControl::intern(*(void *)(v71 + 72), v46, v47, (unint64_t **)&v85);
    if (SBYTE7(v91[1]) < 0) {
      operator delete(*(void **)&v91[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v72;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::FindAndConstruct(a1 + 88, (uint64_t *)&__p);
    uint64_t v49 = v48;
    v50 = (void *)v48[2].i64[1];
    unint64_t v53 = v48[3].u64[0];
    uint64_t i64 = (uint64_t)v48[3].i64;
    unint64_t v52 = v53;
    if ((unint64_t)v50 >= v53)
    {
      uint64_t v56 = v49[2].i64[0];
      uint64_t v57 = ((uint64_t)v50 - v56) >> 3;
      unint64_t v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 61) {
        abort();
      }
      uint64_t v59 = v52 - v56;
      if (v59 >> 2 > v58) {
        unint64_t v58 = v59 >> 2;
      }
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v60 = v58;
      }
      *(void *)&long long v92 = i64;
      if (v60) {
        v61 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(i64, v60);
      }
      else {
        v61 = 0;
      }
      v62 = &v61[8 * v57];
      *(void *)&v91[0] = v61;
      *((void *)&v91[0] + 1) = v62;
      *(void *)&v91[1] = v62;
      *((void *)&v91[1] + 1) = &v61[8 * v60];
      std::string::size_type v63 = v85.__r_.__value_.__r.__words[0];
      *(void *)v62 = v85.__r_.__value_.__r.__words[0];
      v64 = v62;
      if (v63 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        atomic_fetch_add((atomic_ullong *volatile)(v63 + 8), 1uLL);
        v62 = (char *)*((void *)&v91[0] + 1);
        v64 = *(char **)&v91[1];
      }
      v55 = v64 + 8;
      *(void *)&v91[1] = v64 + 8;
      v66 = (void *)v49[2].i64[0];
      v65 = (void *)v49[2].i64[1];
      if (v65 == v66)
      {
        int64x2_t v68 = vdupq_n_s64((unint64_t)v65);
      }
      else
      {
        do
        {
          *((void *)v62 - 1) = 0;
          v62 -= 8;
          uint64_t v67 = *--v65;
          *(void *)v62 = v67;
          void *v65 = 0;
        }
        while (v65 != v66);
        int64x2_t v68 = v49[2];
        v55 = *(void **)&v91[1];
      }
      v49[2].i64[0] = (uint64_t)v62;
      v49[2].i64[1] = (uint64_t)v55;
      *(int64x2_t *)((char *)v91 + 8) = v68;
      uint64_t v69 = v49[3].i64[0];
      v49[3].i64[0] = *((void *)&v91[1] + 1);
      *((void *)&v91[1] + 1) = v69;
      *(void *)&v91[0] = v68.i64[0];
      std::__split_buffer<llvm::orc::SymbolStringPtr>::~__split_buffer((uint64_t)v91);
    }
    else
    {
      std::string::size_type v54 = v85.__r_.__value_.__r.__words[0];
      void *v50 = v85.__r_.__value_.__r.__words[0];
      if (v54 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v54 + 8), 1uLL);
      }
      v55 = v50 + 1;
    }
    v49[2].i64[1] = (uint64_t)v55;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v94, (uint64_t *)&v85)[4] = 0x4000;
    operator new();
  }
  uint64_t v23 = v94;
  uint64_t v94 = 0;
  *a4 = v23;
  return llvm::Expected<llvm::orc::MaterializationUnit::Interface>::~Expected((uint64_t)&v94);
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::erase(uint64_t a1, void *a2)
{
  uint64_t v5 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v5))
  {
    uint64_t v4 = v5;
    if ((unint64_t)(*v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(*v5 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    *uint64_t v4 = -16;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void llvm::orc::JITDylib::define<llvm::orc::BasicObjectLayerMaterializationUnit>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (*(_DWORD *)(*(void *)a2 + 16))
  {
    uint64_t v5 = *(std::recursive_mutex **)(a1 + 32);
    v6[0] = a1;
    v6[1] = a2;
    void v6[2] = a3;
    std::recursive_mutex::lock(v5);
    llvm::orc::JITDylib::define<llvm::orc::BasicObjectLayerMaterializationUnit>(std::unique_ptr<llvm::orc::BasicObjectLayerMaterializationUnit> &&,llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>)::{lambda(void)#1}::operator()((uint64_t)v6, a4);
    std::recursive_mutex::unlock(v5);
  }
  else
  {
    *a4 = 0;
  }
}

void xojit::ReplacementManager::applyPendingUpdatesFor(xojit::ReplacementManager *this, llvm::orc::JITDylib *a2)
{
  v23[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)this + 88;
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = a2;
  v5[2] = 1;
  uint64_t v20 = (char *)(v5 + 4);
  __int16 v21 = (char *)(v5 + 4);
  std::string __p = v5;
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v23[0] = (uint64_t)a2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::FindAndConstruct((uint64_t)v4, v23);
  uint64_t v17 = *(uint64_t **)(v6 + 32);
  uint64_t v7 = v17;
  long long v12 = *(_OWORD *)(v6 + 40);
  *(_OWORD *)(v6 + 32) = 0u;
  long long v18 = v12;
  *(void *)(v6 + 48) = 0;
  std::mutex::unlock((std::mutex *)((char *)this + 16));
  uint64_t v16 = 0;
  long long v15 = 0u;
  if (v7 == (uint64_t *)v12)
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    do
    {
      uint64_t v8 = *v7;
      unint64_t v9 = *v7 - 1;
      if (v9 >= 0xFFFFFFFFFFFFFFE0)
      {
        uint64_t v14 = *v7;
      }
      else
      {
        atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 1uLL);
        uint64_t v14 = v8;
        atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 1uLL);
      }
      llvm::orc::SymbolLookupSet::add((uint64_t *)&v15, &v14, 1);
      if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      if (v9 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      ++v7;
    }
    while (v7 != (uint64_t *)v12);
    uint64_t v11 = (uint64_t *)*((void *)&v15 + 1);
    uint64_t v10 = (uint64_t *)v15;
  }
  memset(v13, 0, sizeof(v13));
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__init_with_size[abi:nn180100]<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*>((char *)v13, v10, v11, ((char *)v11 - (char *)v10) >> 4);
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v22, (uint64_t)&llvm::orc::NoDependenciesToRegister);
  llvm::orc::ExecutionSession::lookup();
}

uint64_t *llvm::orc::SymbolLookupSet::add(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    uint64_t v11 = (uint64_t)(v9 - *a1) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      abort();
    }
    uint64_t v13 = v7 - *a1;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = v6;
    long long v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v6, v14);
    uint64_t v16 = &v15[16 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[16 * v17];
    *(void *)uint64_t v16 = v5;
    *((_DWORD *)v16 + 2) = a3;
    void v19[2] = v16 + 16;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__swap_out_circular_buffer(a1, v19);
    uint64_t v10 = a1[1];
    std::__split_buffer<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    *(void *)unint64_t v9 = v5;
    *(_DWORD *)(v9 + 8) = a3;
    uint64_t v10 = v9 + 16;
  }
  a1[1] = v10;
  return a1;
}

void *llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  int32x2_t result = *(void **)a1;
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  uint64_t v5 = &result[v4];
  if (!v2) {
    return v5;
  }
  if (v4)
  {
    uint64_t v6 = 8 * v4;
    while ((*result | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      ++result;
      v6 -= 8;
      if (!v6) {
        return v5;
      }
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(8 * a2);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

void **std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::__destruct_at_end[abi:nn180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      int32x2_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        int32x2_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void llvm::orc::ExecutorProcessControl::intern(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  unint64_t v7 = *(std::mutex **)(a1 + 8);
  std::mutex::lock(v7);
  int v10 = 0;
  unint64_t v8 = llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::try_emplace<int>((llvm::StringMapImpl *)&v7[1], a2, a3, &v10);
  unint64_t v9 = *v8;
  *a4 = *v8;
  if ((unint64_t)v9 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)v9 + 1, 1uLL);
  }
  std::mutex::unlock(v7);
}

unint64_t **llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::try_emplace<int>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3, int *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  uint64_t i = (unint64_t **)(*(void *)a1 + 8 * v8);
  int v10 = *i;
  if (*i == (unint64_t *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v10)
  {
    while (!v10 || v10 == (unint64_t *)-8)
    {
      uint64_t v11 = i[1];
      ++i;
      int v10 = v11;
    }
    return i;
  }
  unint64_t v12 = operator new(a3 + 17, (std::align_val_t)8uLL);
  uint64_t v13 = v12;
  unint64_t v14 = (char *)(v12 + 2);
  if (a3) {
    memcpy(v12 + 2, a2, a3);
  }
  v14[a3] = 0;
  unint64_t v15 = *a4;
  unint64_t *v13 = a3;
  v13[1] = v15;
  *uint64_t i = v13;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (unint64_t **)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v8));
        !*i || *i + 1 == 0;
  return i;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(uint64_t **)result;
    uint64_t v3 = 16 * v1;
    do
    {
      uint64_t v4 = *v2;
      if ((*v2 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        uint64_t v5 = v2[1];
        if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 0xFFFFFFFFFFFFFFFFLL);
          uint64_t v4 = *v2;
        }
      }
      if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v2 += 2;
      v3 -= 16;
    }
    while (v3);
  }
  return result;
}

uint64_t *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = 8 * v2;
    do
    {
      if ((unint64_t)(*(void *)v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(*(void *)v3 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v3 += 8;
      v4 -= 8;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x263E500A0](v3, 8);
  return a1;
}

uint64_t std::__split_buffer<llvm::orc::SymbolStringPtr>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  while (v3 != v2)
  {
    uint64_t v5 = *(void *)(v3 - 8);
    v3 -= 8;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v3;
    if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v3 = *(void *)(a1 + 16);
    }
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v6);
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(16 * a2);
}

uint64_t *std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 16) = 0;
    v4 -= 16;
    uint64_t v5 = *(void *)(v2 - 16);
    v2 -= 16;
    *(void *)uint64_t v4 = v5;
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *int32x2_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  while (v3 != v2)
  {
    uint64_t v5 = *(void *)(v3 - 16);
    v3 -= 16;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v3;
    if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v3 = *(void *)(a1 + 16);
    }
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v6);
  }
  return a1;
}

char *std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__init_with_size[abi:nn180100]<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    int32x2_t result = std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vallocate[abi:nn180100](result, a4);
    for (uint64_t i = *((void *)v6 + 1); a2 != a3; a2 += 2)
    {
      uint64_t v8 = *a2;
      *(void *)uint64_t i = *a2;
      if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 1uLL);
      }
      *(_DWORD *)(i + 8) = *((_DWORD *)a2 + 2);
      i += 16;
    }
    *((void *)v6 + 1) = i;
  }
  return result;
}

char *std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    abort();
  }
  int32x2_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    uint64_t v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 2);
        v3 -= 16;
        uint64_t v5 = v6;
        if ((unint64_t)(v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
      }
      while (v3 != v2);
      uint64_t v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

void std::future<llvm::MSVCPError>::get(std::__assoc_sub_state **a1@<X0>, std::__assoc_sub_state_vtbl **a2@<X8>)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  std::__assoc_state<llvm::MSVCPError>::move(v2, a2);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    on_zero_shared = v2->__on_zero_shared;
    ((void (*)(std::__assoc_sub_state *))on_zero_shared)(v2);
  }
}

void std::__assoc_state<llvm::MSVCPError>::~__assoc_state(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;
  uint64_t vars8;

  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x263E500B0);
}

uint64_t std::__assoc_state<llvm::MSVCPError>::__on_zero_shared(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v2 = *(void *)(a1 + 144);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 8);
  return v3(a1);
}

uint64_t std::__throw_future_error[abi:nn180100]()
{
  return std::__assoc_sub_state::__attach_future[abi:nn180100]();
}

void std::__assoc_sub_state::__attach_future[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  int v3 = *(_DWORD *)(a1 + 136);
  if ((v3 & 2) != 0)
  {
    uint64_t v4 = std::__throw_future_error[abi:nn180100]();
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<llvm::orc::ExecutorProcessControl::MemoryAccess::writeUInt64s(llvm::ArrayRef<llvm::orc::tpctypes::UIntWrite<unsigned long long>>)::{lambda(llvm::Error)#1}>(v4);
  }
  else
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 1uLL, memory_order_relaxed);
    *(_DWORD *)(a1 + 136) = v3 | 2;
    std::mutex::unlock(v2);
  }
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<llvm::orc::ExecutorProcessControl::MemoryAccess::writeUInt64s(llvm::ArrayRef<llvm::orc::tpctypes::UIntWrite<unsigned long long>>)::{lambda(llvm::Error)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  int v3 = *a1;
  uint64_t v5 = v2;
  std::promise<llvm::MSVCPError>::set_value(v3, &v5);
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

void std::promise<llvm::MSVCPError>::set_value(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (v2)
  {
  }
  else
  {
    uint64_t v2 = std::__throw_future_error[abi:nn180100]();
  }
  std::__assoc_state<llvm::MSVCPError>::set_value<llvm::MSVCPError>(v2, a2);
}

void std::__assoc_state<llvm::MSVCPError>::set_value<llvm::MSVCPError>(uint64_t a1, void *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v7.__ptr_ = 0, uint64_t v5 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v7), v5))
  {
    uint64_t v6 = (void *)std::__throw_future_error[abi:nn180100]();
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 144) = *a2;
    *a2 = 0;
    *(_DWORD *)(a1 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
    std::mutex::unlock(v4);
  }
}

void *llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(void *a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = a1[3];
  if (v2 >= 8)
  {
    if ((v2 & 4) != 0)
    {
      if ((v2 & 2) == 0) {
        a1 = (void *)*a1;
      }
      (*(void (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 16))(a1);
    }
    if ((v2 & 2) == 0) {
      MEMORY[0x263E500A0](*v1, v1[2]);
    }
  }
  return v1;
}

void std::__assoc_state<llvm::MSVCPError>::move(std::__assoc_sub_state *a1@<X0>, std::__assoc_sub_state_vtbl **a2@<X8>)
{
  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v8.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v8);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v7, &a1->__exception_);
    v5.__ptr_ = &v7;
    std::rethrow_exception(v5);
    std::promise<llvm::MSVCPError>::~promise(v6);
  }
  else
  {
    *a2 = a1[1].__vftable;
    a1[1].__vftable = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
  }
}

uint64_t *std::promise<llvm::MSVCPError>::~promise(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if ((*(unsigned char *)(v2 + 136) & 1) == 0)
    {
      v7.__ptr_ = 0;
      uint64_t v3 = *(void *)(v2 + 16);
      std::exception_ptr::~exception_ptr(&v7);
      uint64_t v2 = *a1;
      if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
      {
        std::exception_ptr v5 = std::future_category();
        MEMORY[0x263E4FDD0](v6, 4, v5);
        abort();
      }
    }
    if (!atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
  }
  return a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<llvm::orc::ExecutorProcessControl::MemoryAccess::writeUInt32s(llvm::ArrayRef<llvm::orc::tpctypes::UIntWrite<unsigned int>>)::{lambda(llvm::Error)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *a1;
  uint64_t v5 = v2;
  std::promise<llvm::MSVCPError>::set_value(v3, &v5);
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

void std::vector<xojit::ReplacementManager::DylibState::PendingDefinition>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 5;
        std::__destroy_at[abi:nn180100]<xojit::ReplacementManager::DylibState::PendingDefinition,0>(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:nn180100]<xojit::ReplacementManager::DylibState::PendingDefinition,0>(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
  uint64_t v3 = a1[2];
  if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v4 = a1[1];
  if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  if ((unint64_t)(*a1 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(*a1 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
}

void std::__shared_weak_count::__release_shared[abi:nn180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    uint64_t v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 1);
        v3 -= 8;
        uint64_t v5 = v6;
        if ((unint64_t)(v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
      }
      while (v3 != v2);
      uint64_t v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

atomic_uint *llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(atomic_uint *result)
{
  unsigned int add = atomic_fetch_add(result, 0xFFFFFFFF);
  if (result && add == 1)
  {
    llvm::orc::ResourceTracker::~ResourceTracker((llvm::orc::ResourceTracker *)result);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    std::exception_ptr v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -8)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -16;
        }
        if (v12) {
          int v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        std::exception_ptr v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        std::exception_ptr v7 = v10;
      }
    }
  }
  else
  {
    std::exception_ptr v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *llvm::SmallVectorImpl<char>::append<char const*,void>(void *result, unsigned char *__src, unsigned char *a3)
{
  int v5 = result;
  size_t v6 = a3 - __src;
  uint64_t v7 = result[1];
  unint64_t v8 = v7 + a3 - __src;
  if (result[2] < v8)
  {
    uint64_t result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v8, 1);
    uint64_t v7 = v5[1];
  }
  if (__src != a3)
  {
    uint64_t result = memcpy((void *)(*v5 + v7), __src, v6);
    uint64_t v7 = v5[1];
  }
  v5[1] = v7 + v6;
  return result;
}

double llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::LookupBucketFor<llvm::orc::JITDylib *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  uint64_t v6 = v9;
  if (v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::grow(a1, v8);
    uint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::LookupBucketFor<llvm::orc::JITDylib *>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    uint64_t v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)v6 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)uint64_t v6 = *a2;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(_DWORD *)(v6 + 28) = 104;
  double result = 0.0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(void *)(v6 + 96) = 0;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::LookupBucketFor<llvm::orc::JITDylib *>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 104 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          int v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 104 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::grow(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(104 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 104 * v10;
      do
      {
        *double result = -4096;
        result += 13;
        v11 -= 104;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = *(void *)(v4 + v12);
        if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::LookupBucketFor<llvm::orc::JITDylib *>(*(void *)a1, *(_DWORD *)(a1 + 16), v13, &v19);
          unint64_t v14 = v19;
          uint64_t v15 = v4 + v12;
          *uint64_t v19 = *(void **)(v4 + v12);
          v14[1] = *(void **)(v4 + v12 + 8);
          *((_OWORD *)v14 + 1) = *(_OWORD *)(v4 + v12 + 16);
          *(void *)(v15 + 16) = 0;
          *(void *)(v4 + v12 + 8) = 0;
          *(_DWORD *)(v15 + 24) = 0;
          v14[4] = 0;
          v14[5] = 0;
          v14[6] = 0;
          *((_OWORD *)v14 + 2) = *(_OWORD *)(v4 + v12 + 32);
          v14[6] = *(void **)(v4 + v12 + 48);
          *(void *)(v4 + v12 + 32) = 0;
          *(void *)(v15 + 40) = 0;
          *(void *)(v15 + 48) = 0;
          v14[7] = 0;
          v14[8] = 0;
          v14[9] = 0;
          *(_OWORD *)(v14 + 7) = *(_OWORD *)(v4 + v12 + 56);
          v14[9] = *(void **)(v4 + v12 + 72);
          *(void *)(v4 + v12 + 56) = 0;
          *(void *)(v15 + 64) = 0;
          *(void *)(v15 + 72) = 0;
          v14[10] = 0;
          v14[11] = 0;
          v14[12] = 0;
          uint64_t v16 = v4 + v12 + 80;
          *((_OWORD *)v14 + 5) = *(_OWORD *)v16;
          v14[12] = *(void **)(v4 + v12 + 96);
          *(void *)uint64_t v16 = 0;
          *(void *)(v16 + 8) = 0;
          *(void *)(v16 + 16) = 0;
          ++*(_DWORD *)(a1 + 8);
          uint64_t v19 = (void **)v16;
          std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v19);
          uint64_t v19 = (void **)(v4 + v12 + 56);
          std::vector<xojit::ReplacementManager::DylibState::PendingDefinition>::__destroy_vector::operator()[abi:nn180100](&v19);
          uint64_t v19 = (void **)(v4 + v12 + 32);
          std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v19);
          llvm::StringMap<xojit::ReplacementManager::DylibState::ObjectState,llvm::MallocAllocator>::~StringMap(v4 + v12 + 8);
        }
        v12 += 104;
      }
      while (104 * v3 != v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v17 = *(_DWORD *)(a1 + 16);
  if (v17)
  {
    uint64_t v18 = 104 * v17;
    do
    {
      *double result = -4096;
      result += 13;
      v18 -= 104;
    }
    while (v18);
  }
  return result;
}

uint64_t llvm::StringMap<xojit::ReplacementManager::DylibState::ObjectState,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        unint64_t v5 = *(void **)(*(void *)a1 + v3);
        if (v5 != (void *)-8 && v5 != 0) {
          llvm::StringMapEntry<xojit::ReplacementManager::DylibState::ObjectState>::Destroy<llvm::MallocAllocator>(v5);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void llvm::StringMapEntry<xojit::ReplacementManager::DylibState::ObjectState>::Destroy<llvm::MallocAllocator>(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)(a1 + 10));
  MEMORY[0x263E500A0](a1[10], 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)(a1 + 7));
  MEMORY[0x263E500A0](a1[7], 8);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(a1 + 4);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll(v2);
  MEMORY[0x263E500A0](a1[1], 8);
  JUMPOUT(0x263E500A0);
}

_WORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  int v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0) {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&>((uint64_t)a1, v7, a2);
  }
  return v5;
}

_WORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&>(uint64_t a1, void *a2, uint64_t *a3)
{
  double result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*(void *)result - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(*(void *)result + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v5 = *a3;
  *(void *)double result = *a3;
  if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 1uLL);
  }
  result[4] = 0;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -8) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::moveFromOldBuckets(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *double result = -8;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  char v4 = a2;
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -8;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *v4;
      if ((*v4 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        uint64_t v11 = 0;
        double result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)v5, v4, &v11);
        uint64_t v10 = v11;
        if ((unint64_t)(*(void *)v11 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(*(void *)v11 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        *(void *)uint64_t v10 = 0;
        *(void *)uint64_t v10 = *v4;
        *char v4 = 0;
        *(_WORD *)(v10 + 8) = *((_WORD *)v4 + 4);
        ++*(_DWORD *)(v5 + 8);
        uint64_t v9 = *v4;
      }
      if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::destroyAll(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 104 * v1;
    uint64_t v3 = (void **)(*(void *)result + 56);
    do
    {
      if (((unint64_t)*(v3 - 7) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        char v4 = v3 + 3;
        std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v4);
        char v4 = v3;
        std::vector<xojit::ReplacementManager::DylibState::PendingDefinition>::__destroy_vector::operator()[abi:nn180100](&v4);
        char v4 = v3 - 3;
        std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v4);
        double result = llvm::StringMap<xojit::ReplacementManager::DylibState::ObjectState,llvm::MallocAllocator>::~StringMap((uint64_t)(v3 - 6));
      }
      v3 += 13;
      v2 -= 104;
    }
    while (v2);
  }
  return result;
}

uint64_t xojit::ReplacementManager::Plugin::Plugin(uint64_t this, xojit::ReplacementManager *a2)
{
  *(void *)this = &unk_270DBB858;
  *(void *)(this + 8) = a2;
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(void *)(this + 64) = 0;
  if (*(_DWORD *)(*((void *)a2 + 1) + 64) == 38) {
    xojit::ReplacementManager::Plugin::initializeMCDisassembler((xojit::ReplacementManager::Plugin *)this);
  }
  return this;
}

void *llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  llvm::handleErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v2, &v3);
  double result = v2;
  if (v2) {
    return (void *)(*(uint64_t (**)(void *))(*v2 + 8))(v2);
  }
  return result;
}

void xojit::ReplacementManager::Plugin::initializeMCDisassembler(xojit::ReplacementManager::Plugin *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 8);
  if (*(char *)(v2 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(v2 + 40), *(void *)(v2 + 48));
  }
  else {
    std::string v46 = *(std::string *)(v2 + 40);
  }
  long long v47 = *(_OWORD *)(v2 + 64);
  uint64_t v48 = *(void *)(v2 + 80);
  unint64_t v43 = 0;
  std::string::size_type v44 = 0;
  uint64_t v45 = 0;
  uint64_t v3 = llvm::TargetRegistry::lookupTarget((uint64_t)&v46, (uint64_t)&v43);
  if (v3)
  {
    uint64_t v4 = v3;
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = &v46;
    }
    else {
      uint64_t v5 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v46.__r_.__value_.__l.__size_;
    }
    uint64_t MCSubtargetInfo = llvm::Target::createMCSubtargetInfo(v3, (uint64_t)v5, size, (uint64_t)"", 0, (uint64_t)"", 0);
    uint64_t v8 = *((void *)this + 2);
    *((void *)this + 2) = MCSubtargetInfo;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      uint64_t MCSubtargetInfo = *((void *)this + 2);
    }
    if (MCSubtargetInfo)
    {
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v9 = &v46;
      }
      else {
        uint64_t v9 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v10 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v10 = v46.__r_.__value_.__l.__size_;
      }
      MCRegInfo = llvm::Target::createMCRegInfo(v4, (uint64_t)v9, v10);
      uint64_t v12 = *((void *)this + 3);
      *((void *)this + 3) = MCRegInfo;
      if (v12)
      {
        std::default_delete<llvm::MCRegisterInfo>::operator()[abi:nn180100]((uint64_t)this + 24, v12);
        MCRegInfo = (uint64_t (*)(std::string *))*((void *)this + 3);
      }
      if (MCRegInfo)
      {
        uint64_t v13 = *(uint64_t (**)(void))(v4 + 64);
        if (v13) {
          uint64_t v14 = v13();
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v21 = *((void *)this + 4);
        *((void *)this + 4) = v14;
        if (v21)
        {
          MEMORY[0x263E500B0](v21, 0x10F0C40CB53E019);
          uint64_t v14 = *((void *)this + 4);
        }
        if (v14)
        {
          uint64_t v22 = *(uint64_t (**)(void))(v4 + 72);
          if (v22) {
            uint64_t v23 = v22();
          }
          else {
            uint64_t v23 = 0;
          }
          uint64_t v24 = *((void *)this + 5);
          *((void *)this + 5) = v23;
          if (v24)
          {
            (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
            uint64_t v23 = *((void *)this + 5);
          }
          if (v23)
          {
            LOWORD(__p[0]) = 2048;
            *(void **)((char *)__p + 4) = (void *)2;
            HIDWORD(__p[1]) = 2;
            long long v30 = 0u;
            *(_OWORD *)uint64_t v31 = 0u;
            long long v32 = 0u;
            *(_OWORD *)uint64_t v33 = 0u;
            *(_OWORD *)uint64_t v34 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v25 = &v46;
            }
            else {
              unint64_t v25 = (std::string *)v46.__r_.__value_.__r.__words[0];
            }
            if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v26 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v26 = v46.__r_.__value_.__l.__size_;
            }
            uint64_t MCAsmInfo = llvm::Target::createMCAsmInfo(v4, *((void *)this + 3), (uint64_t)v25, v26, (uint64_t)__p);
            uint64_t v28 = *((void *)this + 6);
            *((void *)this + 6) = MCAsmInfo;
            if (v28)
            {
              (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
              uint64_t MCAsmInfo = *((void *)this + 6);
            }
            if (MCAsmInfo) {
              operator new();
            }
            std::operator+<char>();
            getErrorErrorCat();
            v41.__r_.__value_.__r.__words[0] = 3;
            v41.__r_.__value_.__l.__size_ = (std::string::size_type)&getErrorErrorCat(void)::ErrorErrorCat;
            llvm::make_error<llvm::StringError,std::string,std::error_code>();
          }
        }
      }
    }
    std::operator+<char>();
    getErrorErrorCat();
    v42.__r_.__value_.__r.__words[0] = 3;
    v42.__r_.__value_.__l.__size_ = (std::string::size_type)&getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,std::string,std::error_code>();
  }
  std::operator+<char>();
  uint64_t v15 = std::string::append(&v41, "': ", 3uLL);
  std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v45 >= 0) {
    unsigned int v17 = (const std::string::value_type *)&v43;
  }
  else {
    unsigned int v17 = v43;
  }
  if (v45 >= 0) {
    std::string::size_type v18 = HIBYTE(v45);
  }
  else {
    std::string::size_type v18 = v44;
  }
  uint64_t v19 = std::string::append(&v42, v17, v18);
  std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  *(void *)&long long v30 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  getErrorErrorCat();
  uint64_t v39 = 3;
  uint64_t v40 = &getErrorErrorCat(void)::ErrorErrorCat;
  llvm::make_error<llvm::StringError,std::string,std::error_code>();
}

void xojit::ReplacementManager::Plugin::~Plugin(xojit::ReplacementManager::Plugin *this)
{
  xojit::ReplacementManager::Plugin::~Plugin(this);
  JUMPOUT(0x263E500B0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(void *)this = &unk_270DBB858;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<llvm::MCContext>::reset[abi:nn180100]((llvm::MCContext **)this + 7, 0);
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5) {
    MEMORY[0x263E500B0](v5, 0x10F0C40CB53E019);
  }
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6) {
    std::default_delete<llvm::MCRegisterInfo>::operator()[abi:nn180100]((uint64_t)this + 24, v6);
  }
  int v7 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
}

void xojit::ReplacementManager::Plugin::modifyPassConfig(void *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v8 = (std::mutex *)(a1[1] + 16);
  std::mutex::lock(v8);
  uint64_t v9 = a1[1] + 88;
  *(void *)&long long v34 = *a2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::FindAndConstruct(v9, (uint64_t *)&v34);
  uint64_t v11 = v10;
  uint64_t v12 = (uint64_t *)(v10 + 8);
  uint64_t v15 = *(uint64_t **)(a3 + 96);
  uint64_t v14 = a3 + 96;
  uint64_t v13 = v15;
  int v16 = *(char *)(v14 + 23);
  if (v16 >= 0) {
    unsigned int v17 = (uint64_t *)v14;
  }
  else {
    unsigned int v17 = v13;
  }
  if (v16 >= 0) {
    unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    unint64_t v18 = *(void *)(v14 + 8);
  }
  int Key = llvm::StringMapImpl::FindKey(v12, v17, v18);
  if (Key != -1 && Key != (unint64_t)*(unsigned int *)(v11 + 16))
  {
    std::string::size_type v20 = (long long *)*a4;
    *(void *)&long long v34 = a1;
    *((void *)&v34 + 1) = a2;
    long long v36 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1},xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1},void>::Callbacks
        + 2;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::insert(a4, v20, &v34);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v34);
    unint64_t v21 = a4[14];
    *(void *)&long long v32 = a1;
    *((void *)&v32 + 1) = a2;
    uint64_t v33 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#2},xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#2},void>::Callbacks
        + 2;
    unint64_t v22 = a4[13];
    if (v22 >= v21)
    {
      uint64_t v24 = a4[12];
      uint64_t v25 = (uint64_t)(v22 - v24) >> 5;
      if ((unint64_t)(v25 + 1) >> 59) {
        abort();
      }
      uint64_t v26 = v21 - v24;
      uint64_t v27 = v26 >> 4;
      if (v26 >> 4 <= (unint64_t)(v25 + 1)) {
        uint64_t v27 = v25 + 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      long long v37 = a4 + 14;
      if (v28) {
        uint64_t v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 14), v28);
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v30 = (uint64_t)&v29[32 * v25];
      *(void *)&long long v34 = v29;
      *((void *)&v34 + 1) = v30;
      long long v36 = &v29[32 * v28];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v30, &v32);
      uint64_t v35 = v30 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 12, &v34);
      uint64_t v23 = a4[13];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v34);
    }
    else
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[13], &v32);
      uint64_t v23 = v22 + 32;
    }
    a4[13] = v23;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v32);
    if (a1[8] && a1[5])
    {
      uint64_t v31 = (long long *)*a4;
      *(void *)&long long v34 = a1;
      long long v36 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#3},xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#3},void>::Callbacks
          + 2;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::insert(a4, v31, &v34);
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v34);
    }
  }
  std::mutex::unlock(v8);
}

void xojit::ReplacementManager::Plugin::notifyEmitted(void *a1@<X8>)
{
  *a1 = 0;
}

void xojit::ReplacementManager::Plugin::notifyFailed(void *a1@<X8>)
{
  *a1 = 0;
}

void xojit::ReplacementManager::Plugin::notifyRemovingResources(void *a1@<X8>)
{
  *a1 = 0;
}

void **llvm::handleErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>@<X0>(void **result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result)
  {
    *double result = 0;
    if ((*(unsigned int (**)(void *, void *))(*v3 + 48))(v3, &llvm::ErrorList::ID))
    {
      *a2 = 0;
      uint64_t v4 = (void ***)v3[1];
      uint64_t v5 = (void ***)v3[2];
      if (v4 != v5)
      {
        uint64_t v6 = 0;
        do
        {
          uint64_t v10 = v6;
          int v7 = *v4;
          *uint64_t v4 = 0;
          if ((*((unsigned int (**)(void **, void *))*v7 + 6))(v7, &llvm::ErrorInfoBase::ID))
          {
            (*((void (**)(void **))*v7 + 1))(v7);
            int v7 = 0;
          }
          uint64_t v9 = v7;
          llvm::ErrorList::join(&v10, &v9, &v11);
          uint64_t v6 = v11;
          *a2 = v11;
          uint64_t v11 = 0;
          if (v9) {
            (*((void (**)(void **))*v9 + 1))(v9);
          }
          if (v10) {
            (*((void (**)(void **))*v10 + 1))(v10);
          }
          ++v4;
        }
        while (v4 != v5);
      }
      return (void **)(*(uint64_t (**)(void *))(*v3 + 8))(v3);
    }
    else
    {
      double result = (void **)(*(uint64_t (**)(void *, void *))(*v3 + 48))(v3, &llvm::ErrorInfoBase::ID);
      if (result)
      {
        *a2 = 0;
        uint64_t v8 = *(uint64_t (**)(void *))(*v3 + 8);
        return (void **)v8(v3);
      }
      else
      {
        *a2 = v3;
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void **llvm::ErrorList::join@<X0>(void ***a1@<X0>, void ***a2@<X1>, void ***a3@<X8>)
{
  double result = *a1;
  int v7 = *a2;
  if (!result) {
    goto LABEL_33;
  }
  if (v7)
  {
    if ((*((unsigned int (**)(void **, void *))*result + 6))(result, &llvm::ErrorList::ID))
    {
      uint64_t v8 = *a1;
      if (*a2)
      {
        double result = (void **)(*((uint64_t (**)(void **, void *))**a2 + 6))(*a2, &llvm::ErrorList::ID);
        uint64_t v9 = *a2;
        if (result)
        {
          *a2 = 0;
          uint64_t v10 = (uint64_t *)v9[1];
          uint64_t v11 = (uint64_t *)v9[2];
          if (v10 == v11) {
            goto LABEL_26;
          }
          uint64_t v12 = v8 + 3;
          uint64_t v13 = (char *)v8[2];
          do
          {
            if ((unint64_t)v13 >= *v12)
            {
              uint64_t v15 = v8[1];
              uint64_t v16 = (v13 - v15) >> 3;
              if ((unint64_t)(v16 + 1) >> 61) {
                goto LABEL_56;
              }
              uint64_t v17 = *v12 - (void)v15;
              uint64_t v18 = v17 >> 2;
              if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
                uint64_t v18 = v16 + 1;
              }
              if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v19 = v18;
              }
              v50 = v8 + 3;
              if (v19) {
                std::string::size_type v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(v8 + 3), v19);
              }
              else {
                std::string::size_type v20 = 0;
              }
              unint64_t v21 = &v20[8 * v16];
              unint64_t v22 = &v20[8 * v19];
              uint64_t v49 = v22;
              uint64_t v23 = *v10;
              *uint64_t v10 = 0;
              *(void *)unint64_t v21 = v23;
              uint64_t v13 = v21 + 8;
              v48.i64[1] = (uint64_t)(v21 + 8);
              uint64_t v25 = v8[1];
              uint64_t v24 = v8[2];
              if (v24 == v25)
              {
                int64x2_t v27 = vdupq_n_s64((unint64_t)v24);
              }
              else
              {
                do
                {
                  uint64_t v26 = *--v24;
                  *uint64_t v24 = 0;
                  *((void *)v21 - 1) = v26;
                  v21 -= 8;
                }
                while (v24 != v25);
                int64x2_t v27 = *(int64x2_t *)(v8 + 1);
                uint64_t v13 = (char *)v48.i64[1];
                unint64_t v22 = v49;
              }
              v8[1] = v21;
              void v8[2] = v13;
              int64x2_t v48 = v27;
              unint64_t v28 = (char *)v8[3];
              v8[3] = v22;
              uint64_t v49 = v28;
              long long v47 = (void **)v27.i64[0];
              double result = std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((void **)&v47);
            }
            else
            {
              uint64_t v14 = *v10;
              *uint64_t v10 = 0;
              *(void *)uint64_t v13 = v14;
              v13 += 8;
            }
            void v8[2] = v13;
            ++v10;
          }
          while (v10 != v11);
          if (v9) {
LABEL_26:
          }
            double result = (void **)(*((uint64_t (**)(void **))*v9 + 1))(v9);
LABEL_53:
          *a3 = *a1;
          goto LABEL_54;
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
      *a2 = 0;
      double result = v8 + 3;
      unint64_t v31 = (unint64_t)v8[3];
      long long v32 = (void ***)v8[2];
      if ((unint64_t)v32 >= v31)
      {
        long long v34 = v8[1];
        uint64_t v35 = ((char *)v32 - v34) >> 3;
        if ((unint64_t)(v35 + 1) >> 61) {
LABEL_56:
        }
          abort();
        uint64_t v36 = v31 - (void)v34;
        uint64_t v37 = v36 >> 2;
        if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
          uint64_t v37 = v35 + 1;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v37;
        }
        v50 = v8 + 3;
        if (v38) {
          uint64_t v39 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)result, v38);
        }
        else {
          uint64_t v39 = 0;
        }
        uint64_t v40 = &v39[8 * v35];
        std::string v41 = &v39[8 * v38];
        uint64_t v49 = v41;
        *(void *)uint64_t v40 = v9;
        uint64_t v33 = v40 + 8;
        v48.i64[1] = (uint64_t)(v40 + 8);
        unint64_t v43 = v8[1];
        std::string v42 = v8[2];
        if (v42 == v43)
        {
          int64x2_t v45 = vdupq_n_s64((unint64_t)v42);
        }
        else
        {
          do
          {
            uint64_t v44 = *--v42;
            void *v42 = 0;
            *((void *)v40 - 1) = v44;
            v40 -= 8;
          }
          while (v42 != v43);
          int64x2_t v45 = *(int64x2_t *)(v8 + 1);
          uint64_t v33 = (void *)v48.i64[1];
          std::string v41 = v49;
        }
        v8[1] = v40;
        void v8[2] = v33;
        int64x2_t v48 = v45;
        std::string v46 = (char *)v8[3];
        v8[3] = v41;
        uint64_t v49 = v46;
        long long v47 = (void **)v45.i64[0];
        double result = std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((void **)&v47);
      }
      else
      {
        *long long v32 = v9;
        uint64_t v33 = v32 + 1;
      }
      void v8[2] = v33;
      goto LABEL_53;
    }
    if (!*a2 || !(*((unsigned int (**)(void **, void *))**a2 + 6))(*a2, &llvm::ErrorList::ID)) {
      operator new();
    }
    uint64_t v29 = (uint64_t *)(*a2 + 1);
    uint64_t v30 = (uint64_t *)*v29;
    long long v47 = *a1;
    *a1 = 0;
    std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::insert(v29, v30, (uint64_t *)&v47);
    double result = v47;
    long long v47 = 0;
    if (result) {
      double result = (void **)(*((uint64_t (**)(void **))*result + 1))(result);
    }
    int v7 = *a2;
LABEL_33:
    *a3 = v7;
    *a2 = 0;
    return result;
  }
  *a3 = result;
LABEL_54:
  *a1 = 0;
  return result;
}

uint64_t *std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::insert(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v12 = *a1;
    unint64_t v13 = ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v13 >> 61) {
      abort();
    }
    uint64_t v14 = ((uint64_t)a2 - v12) >> 3;
    uint64_t v15 = v8 - v12;
    uint64_t v16 = v15 >> 2;
    if (v15 >> 2 <= v13) {
      uint64_t v16 = ((uint64_t)(v6 - *a1) >> 3) + 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    uint64_t v25 = v7;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v7, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    unint64_t v21 = v18;
    unint64_t v22 = &v18[8 * v14];
    uint64_t v23 = v22;
    uint64_t v24 = &v18[8 * v17];
    std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::push_back(&v21, a3);
    uint64_t v4 = (uint64_t *)std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__swap_out_circular_buffer(a1, &v21, v4);
    std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer(&v21);
  }
  else if (a2 == (uint64_t *)v6)
  {
    uint64_t v19 = *a3;
    *a3 = 0;
    *a2 = v19;
    a1[1] = (uint64_t)(a2 + 1);
  }
  else
  {
    std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__move_range((uint64_t)a1, a2, v6, (uint64_t)(a2 + 1));
    uint64_t v10 = *a3;
    *a3 = 0;
    uint64_t v11 = *v4;
    *uint64_t v4 = v10;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  return v4;
}

void **std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::__destruct_at_end[abi:nn180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      double result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        double result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void *std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = (void *)((char *)v6 + (void)a2 - a4);
  unint64_t v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    unint64_t v9 = v7;
    unint64_t v8 = *(void **)(a1 + 8);
    do
    {
      uint64_t v10 = *v9;
      *v9++ = 0;
      *v8++ = v10;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,0>(a2, v7, v6);
}

void *std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::push_back(void *result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = (uint64_t *)result[2];
  if (v4 == (uint64_t *)result[3])
  {
    uint64_t v6 = *result;
    uint64_t v5 = (uint64_t *)result[1];
    uint64_t v7 = (uint64_t)v5 - *v3;
    if ((unint64_t)v5 <= *v3)
    {
      uint64_t v14 = (uint64_t)v4 - v6;
      BOOL v13 = v14 == 0;
      uint64_t v15 = v14 >> 2;
      if (v13) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = v15;
      }
      uint64_t v33 = v3[4];
      unint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v33, v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      std::string::size_type v20 = (uint64_t *)v3[1];
      uint64_t v21 = v3[2] - (void)v20;
      if (v21)
      {
        uint64_t v22 = v21 >> 3;
        uint64_t v23 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * v22;
        uint64_t v25 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v26 = *v20;
          *v20++ = 0;
          *(void *)uint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
        int64x2_t v27 = *(int64x2_t *)(v3 + 1);
      }
      else
      {
        int64x2_t v27 = vdupq_n_s64((unint64_t)v20);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
      }
      uint64_t v30 = (void *)*v3;
      *uint64_t v3 = v17;
      v3[1] = v19;
      int64x2_t v31 = v27;
      uint64_t v28 = v3[3];
      void v3[2] = v23;
      v3[3] = &v17[8 * v18];
      uint64_t v32 = v28;
      double result = std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer(&v30);
      uint64_t v4 = (uint64_t *)v3[2];
    }
    else
    {
      uint64_t v8 = v7 >> 3;
      BOOL v9 = v7 >> 3 < -1;
      uint64_t v10 = (v7 >> 3) + 2;
      if (v9) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = v8 + 1;
      }
      unint64_t v12 = v11 >> 1;
      double result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,0>(v5, v4, &v5[-(v11 >> 1)]);
      v3[1] -= 8 * v12;
      void v3[2] = v4;
    }
  }
  uint64_t v29 = *a2;
  *a2 = 0;
  *uint64_t v4 = v29;
  v3[2] += 8;
  return result;
}

uint64_t std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__swap_out_circular_buffer(void *a1, void *a2, void *a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = (void *)*a1;
  uint64_t v6 = result;
  if ((void *)*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      uint64_t v8 = *--v7;
      *uint64_t v7 = 0;
      *(void *)(v6 - 8) = v8;
      v6 -= 8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  BOOL v9 = (void *)a1[1];
  uint64_t v10 = (void *)a2[2];
  if (v9 != a3)
  {
    do
    {
      uint64_t v11 = *a3;
      *a3++ = 0;
      *v10++ = v11;
    }
    while (a3 != v9);
    uint64_t v6 = a2[1];
  }
  a2[2] = v10;
  unint64_t v12 = (void *)*a1;
  *a1 = v6;
  a2[1] = v12;
  uint64_t v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

void *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,0>(void *a1, void *a2, void *a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v8 = *--v6;
      uint64_t v7 = v8;
      *uint64_t v6 = 0;
      uint64_t v10 = *--a3;
      uint64_t v9 = v10;
      *a3 = v7;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      uint64_t v7 = *a3;
      *a3 = v6;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      ++v4;
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *llvm::ErrorList::ErrorList(void *a1, void *a2, uint64_t *a3)
{
  a1[1] = 0;
  uint64_t v6 = a1 + 1;
  *a1 = &unk_270DBCD10;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v7 = (uint64_t)(a1 + 3);
  uint64_t v37 = a1 + 3;
  uint64_t v8 = operator new(8uLL);
  uint64_t v9 = v8;
  *uint64_t v8 = *a2;
  uint64_t v10 = v8 + 1;
  *a2 = 0;
  uint64_t v11 = (void *)a1[2];
  unint64_t v12 = (void *)*v6;
  if (v11 == (void *)*v6)
  {
    int64x2_t v15 = vdupq_n_s64((unint64_t)v11);
    uint64_t v13 = v8;
  }
  else
  {
    uint64_t v13 = v8;
    do
    {
      uint64_t v14 = *--v11;
      *uint64_t v11 = 0;
      *--uint64_t v13 = v14;
    }
    while (v11 != v12);
    int64x2_t v15 = *(int64x2_t *)v6;
  }
  a1[1] = v13;
  a1[2] = v10;
  int64x2_t v35 = v15;
  unint64_t v16 = (char *)a1[3];
  a1[3] = v10;
  uint64_t v36 = v16;
  uint64_t v34 = v15.i64[0];
  std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((void **)&v34);
  unint64_t v17 = a1[3];
  a1[2] = v10;
  if ((unint64_t)v10 >= v17)
  {
    uint64_t v20 = ((uint64_t)v10 - *v6) >> 3;
    if ((unint64_t)(v20 + 1) >> 61) {
      abort();
    }
    uint64_t v21 = v17 - *v6;
    uint64_t v22 = v21 >> 2;
    if (v21 >> 2 <= (unint64_t)(v20 + 1)) {
      uint64_t v22 = v20 + 1;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v22;
    }
    uint64_t v37 = (void *)v7;
    if (v23) {
      uint64_t v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v7, v23);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = &v24[8 * v20];
    uint64_t v26 = &v24[8 * v23];
    uint64_t v36 = v26;
    uint64_t v27 = *a3;
    *a3 = 0;
    *(void *)uint64_t v25 = v27;
    uint64_t v19 = v25 + 8;
    v35.i64[1] = (uint64_t)(v25 + 8);
    uint64_t v29 = (void *)a1[1];
    uint64_t v28 = (void *)a1[2];
    if (v28 == v29)
    {
      int64x2_t v31 = vdupq_n_s64((unint64_t)v28);
    }
    else
    {
      do
      {
        uint64_t v30 = *--v28;
        void *v28 = 0;
        *((void *)v25 - 1) = v30;
        v25 -= 8;
      }
      while (v28 != v29);
      int64x2_t v31 = *(int64x2_t *)v6;
      uint64_t v19 = (void *)v35.i64[1];
      uint64_t v26 = v36;
    }
    a1[1] = v25;
    a1[2] = v19;
    int64x2_t v35 = v31;
    uint64_t v32 = (char *)a1[3];
    a1[3] = v26;
    uint64_t v36 = v32;
    uint64_t v34 = v31.i64[0];
    std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((void **)&v34);
  }
  else
  {
    uint64_t v18 = *a3;
    *a3 = 0;
    v9[1] = v18;
    uint64_t v19 = v9 + 2;
  }
  a1[2] = v19;
  return a1;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t *std::unique_ptr<llvm::ErrorList>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = (void **)(v2 + 8);
    std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:nn180100](&v3);
    return (uint64_t *)MEMORY[0x263E500B0](v2, 0xA1C4030951706);
  }
  return result;
}

void std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__clear[abi:nn180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__clear[abi:nn180100](void *result)
{
  unsigned int v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void llvm::make_error<llvm::StringError,std::string,std::error_code>()
{
}

uint64_t llvm::Target::createMCSubtargetInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  std::string::size_type v7 = *(uint64_t (**)(std::string *, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 88);
  if (!v7) {
    return 0;
  }
  __int16 v15 = 261;
  v14[0] = a2;
  v14[1] = a3;
  llvm::Triple::Triple(__p, (const llvm::Twine *)v14);
  uint64_t v12 = v7(__p, a4, a5, a6, a7);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  return v12;
}

uint64_t (*llvm::Target::createMCRegInfo(uint64_t a1, uint64_t a2, uint64_t a3))(std::string *)
{
  uint64_t v3 = *(uint64_t (**)(std::string *))(a1 + 80);
  if (v3)
  {
    __int16 v6 = 261;
    v5[0] = a2;
    v5[1] = a3;
    llvm::Triple::Triple(__p, (const llvm::Twine *)v5);
    uint64_t v3 = (uint64_t (*)(std::string *))v3(__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  return v3;
}

uint64_t llvm::Target::createMCAsmInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, std::string *, uint64_t))(a1 + 48);
  if (!v5) {
    return 0;
  }
  __int16 v11 = 261;
  v10[0] = a3;
  v10[1] = a4;
  llvm::Triple::Triple(__p, (const llvm::Twine *)v10);
  uint64_t v8 = v5(a2, __p, a5);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  return v8;
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    __int16 v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void std::default_delete<llvm::MCRegisterInfo>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    MEMORY[0x263E500A0](*(void *)(a2 + 184), 4);
    MEMORY[0x263E500A0](*(void *)(a2 + 160), 4);
    JUMPOUT(0x263E500B0);
  }
}

llvm::MCContext *std::unique_ptr<llvm::MCContext>::reset[abi:nn180100](llvm::MCContext **a1, llvm::MCContext *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::MCContext::~MCContext(result);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

long long *std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::insert(uint64_t *a1, long long *a2, long long *a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v11 = *a1;
    unint64_t v12 = ((uint64_t)(v6 - *a1) >> 5) + 1;
    if (v12 >> 59) {
      abort();
    }
    uint64_t v13 = ((uint64_t)a2 - v11) >> 5;
    uint64_t v14 = v8 - v11;
    uint64_t v15 = v14 >> 4;
    if (v14 >> 4 <= v12) {
      uint64_t v15 = ((uint64_t)(v6 - *a1) >> 5) + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    uint64_t v23 = v7;
    if (v16) {
      unint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(v7, v16);
    }
    else {
      unint64_t v17 = 0;
    }
    uint64_t v19 = v17;
    uint64_t v20 = &v17[32 * v13];
    uint64_t v21 = v20;
    uint64_t v22 = &v17[32 * v16];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::push_back(&v19, a3);
    uint64_t v4 = (long long *)std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a1, &v19, v4);
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v19);
  }
  else if (a2 == (long long *)v6)
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)a2, a3);
    a1[1] = (uint64_t)(v4 + 2);
  }
  else
  {
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__move_range((uint64_t)a1, a2, v6, (uint64_t)(a2 + 2));
    if (v4 == a3)
    {
      return a3;
    }
    else
    {
      uint64_t v10 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v4);
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v10, a3);
    }
  }
  return v4;
}

long long *std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__move_range(uint64_t a1, long long *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v6 = *(long long **)(a1 + 8);
  uint64_t v7 = (long long *)((char *)v6 + (void)a2 - a4);
  uint64_t v8 = (uint64_t)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v10 = (long long *)((char *)v6 + (void)a2 - a4);
    uint64_t v8 = (uint64_t)v6;
    do
    {
      uint64_t v11 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v8, v10);
      v10 += 2;
      uint64_t v8 = v11 + 32;
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *>((uint64_t)&v13, a2, v7, v6);
}

uint64_t std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = (long long *)a1[2];
  if (v4 == (long long *)a1[3])
  {
    uint64_t v5 = (long long *)a1[1];
    uint64_t v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (long long *)*a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = ((uint64_t)v4 - *a1) >> 4;
      }
      uint64_t v14 = a1[4];
      uint64_t v30 = a1[4];
      uint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(v14, v13);
      unint64_t v16 = &v15[32 * (v13 >> 2)];
      uint64_t v18 = &v15[32 * v17];
      uint64_t v19 = (long long *)a1[1];
      uint64_t v20 = a1[2] - (void)v19;
      if (v20)
      {
        uint64_t v21 = &v16[v20 & 0xFFFFFFFFFFFFFFE0];
        uint64_t v22 = 32 * (v20 >> 5);
        uint64_t v23 = (uint64_t)v16;
        do
        {
          uint64_t v23 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v23, v19)
              + 32;
          v19 += 2;
          v22 -= 32;
        }
        while (v22);
        int64x2_t v24 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v24 = vdupq_n_s64((unint64_t)v19);
        uint64_t v21 = v16;
      }
      uint64_t v27 = (long long *)*a1;
      *a1 = v15;
      a1[1] = v16;
      int64x2_t v28 = v24;
      uint64_t v25 = a1[3];
      a1[2] = v21;
      a1[3] = v18;
      uint64_t v29 = v25;
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v27);
      uint64_t v4 = (long long *)a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 5;
      BOOL v8 = v6 >> 5 < -1;
      uint64_t v9 = (v6 >> 5) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *>((uint64_t)&v27, v5, v4, &v5[-2 * (v10 >> 1)]);
      uint64_t v4 = v12;
      a1[1] -= 32 * v11;
      a1[2] = v12;
    }
  }
  uint64_t result = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v4, a2);
  a1[2] += 32;
  return result;
}

uint64_t std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, long long *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = (long long *)*a1;
  uint64_t v8 = v6;
  if (v7 != a3)
  {
    uint64_t v9 = a3;
    uint64_t v8 = a2[1];
    do
    {
      v9 -= 2;
      uint64_t v8 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v8 - 32, v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  unint64_t v10 = (long long *)a1[1];
  uint64_t v11 = a2[2];
  if (v10 != v3)
  {
    do
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v11, v3);
      v3 += 2;
      v11 += 32;
    }
    while (v3 != v10);
    uint64_t v8 = a2[1];
  }
  a2[2] = v11;
  uint64_t v12 = *a1;
  *a1 = v8;
  a2[1] = v12;
  uint64_t v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v3 = *((void *)a2 + 3);
  *(void *)(a1 + 24) = v3;
  if (*((void *)a2 + 3) >= 8uLL)
  {
    if ((v3 & 2) != 0 && (v3 & 4) != 0)
    {
      (*(void (**)(uint64_t, long long *))((v3 & 0xFFFFFFFFFFFFFFF8) + 8))(a1, a2);
    }
    else
    {
      long long v5 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v5;
    }
    *((void *)a2 + 3) = 0;
  }
  return a1;
}

long long *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *>(uint64_t a1, long long *a2, long long *a3, long long *a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = v6 - 2;
      uint64_t v8 = a4 - 2;
      if (v6 != a4)
      {
        uint64_t v9 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)a4 - 4);
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v9, v7);
      }
      a4 = v8;
      uint64_t v6 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(32 * a2);
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *>(uint64_t a1, long long *a2, long long *a3, long long *a4)
{
  long long v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4)
      {
        uint64_t v7 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(a4);
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v7, v5);
      }
      v5 += 2;
      a4 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1}>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v249 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  uint64_t v4 = (uint64_t *)a1[1];
  v182 = (std::mutex *)(*(void *)(*a1 + 8) + 16);
  std::mutex::lock(v182);
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v189 = *(void *)(*(void *)(v6 + 8) + 32);
  v180 = v4;
  *(void *)&long long v235 = *v4;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::FindAndConstruct(v6 + 88, (uint64_t *)&v235);
  uint64_t v8 = (llvm::StringMapImpl *)(v7 + 8);
  int v9 = *(char *)(a2 + 119);
  if (v9 >= 0) {
    unint64_t v10 = (uint64_t *)(a2 + 96);
  }
  else {
    unint64_t v10 = *(uint64_t **)(a2 + 96);
  }
  if (v9 >= 0) {
    unint64_t v11 = *(unsigned __int8 *)(a2 + 119);
  }
  else {
    unint64_t v11 = *(void *)(a2 + 104);
  }
  uint64_t v12 = *llvm::StringMap<xojit::ReplacementManager::DylibState::ObjectState,llvm::MallocAllocator>::try_emplace<>(v8, v10, v11);
  uint64_t v13 = *(void *)(v5 + 8);
  unint64_t v14 = *(void *)(v13 + 80);
  *(void *)(v13 + 80) = v14 + 1;
  std::to_string(&v208, v14);
  v205 = 0;
  v206 = 0;
  v207 = 0;
  v202 = 0;
  v203 = 0;
  v204 = 0;
  v199 = 0;
  v200 = 0;
  v201 = 0;
  if (!*(_DWORD *)(a2 + 192)) {
    goto LABEL_101;
  }
  uint64_t v16 = *(unsigned int *)(a2 + 200);
  if (v16)
  {
    uint64_t v17 = 24 * v16;
    uint64_t v18 = *(void **)(a2 + 184);
    while (*v18 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v18 += 3;
      v17 -= 24;
      if (!v17) {
        goto LABEL_101;
      }
    }
  }
  else
  {
    uint64_t v18 = *(void **)(a2 + 184);
  }
  uint64_t v19 = *(void *)(a2 + 184) + 24 * v16;
  if (v18 == (void *)v19)
  {
LABEL_101:
    uint64_t v196 = 0;
    uint64_t v197 = 0;
    int v198 = 0;
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    unsigned int v195 = 0;
    goto LABEL_102;
  }
  do
  {
    uint64_t v20 = v18[2];
    uint64_t v21 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v20 + 56);
    uint64_t v23 = *(void *)(v20 + 56) + 8 * *(unsigned int *)(v20 + 72);
    if ((void *)v23 == v21) {
      goto LABEL_96;
    }
    int64x2_t v24 = v21;
    uint64_t v25 = v22;
    do
    {
      uint64_t v26 = (void *)*v24;
      unint64_t v27 = *(void *)(*v24 + 8);
      if (!v27) {
        goto LABEL_73;
      }
      int64x2_t v28 = *(unint64_t **)v20;
      uint64_t v29 = *(void *)(v20 + 8);
      uint64_t v30 = v26[3];
      if ((v30 & 0xC00000000000000) == 0x800000000000000 && *(unsigned char *)*v26 == 108) {
        goto LABEL_73;
      }
      if ((v30 & 0x2000000000000000) != 0)
      {
        int64x2_t v35 = v206;
        if (v206 < v207)
        {
          *(void *)v206 = v26;
          uint64_t v36 = v35 + 8;
LABEL_65:
          v206 = v36;
          goto LABEL_73;
        }
        uint64_t v37 = (v206 - (unsigned char *)v205) >> 3;
        if (!((unint64_t)(v37 + 1) >> 61))
        {
          unint64_t v38 = (v207 - (unsigned char *)v205) >> 2;
          if (v38 <= v37 + 1) {
            unint64_t v38 = v37 + 1;
          }
          if ((unint64_t)(v207 - (unsigned char *)v205) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v38;
          }
          if (v39) {
            uint64_t v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v207, v39);
          }
          else {
            uint64_t v40 = 0;
          }
          long long v47 = &v40[8 * v37];
          *(void *)long long v47 = v26;
          uint64_t v36 = v47 + 8;
          uint64_t v49 = (char *)v205;
          int64x2_t v48 = v206;
          if (v206 != v205)
          {
            do
            {
              uint64_t v50 = *((void *)v48 - 1);
              v48 -= 8;
              *((void *)v47 - 1) = v50;
              v47 -= 8;
            }
            while (v48 != v49);
            int64x2_t v48 = (char *)v205;
          }
          v205 = v47;
          v206 = v36;
          v207 = &v40[8 * v39];
          if (v48) {
            operator delete(v48);
          }
          goto LABEL_65;
        }
LABEL_299:
        abort();
      }
      if (v27 >= 3)
      {
        BOOL v31 = *(_WORD *)*v26 == 9311 && *(unsigned char *)(*v26 + 2) == 115;
        if (v31 && *(_WORD *)(*v26 + v27 - 2) == 30036)
        {
          v55 = v203;
          if (v203 >= v204)
          {
            uint64_t v57 = (v203 - (unsigned char *)v202) >> 3;
            if ((unint64_t)(v57 + 1) >> 61) {
              goto LABEL_299;
            }
            unint64_t v58 = (v204 - (unsigned char *)v202) >> 2;
            if (v58 <= v57 + 1) {
              unint64_t v58 = v57 + 1;
            }
            if ((unint64_t)(v204 - (unsigned char *)v202) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v58;
            }
            if (v59) {
              unint64_t v60 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v204, v59);
            }
            else {
              unint64_t v60 = 0;
            }
            v61 = &v60[8 * v57];
            *(void *)v61 = v26;
            uint64_t v56 = v61 + 8;
            std::string::size_type v63 = (char *)v202;
            v62 = v203;
            if (v203 != v202)
            {
              do
              {
                uint64_t v64 = *((void *)v62 - 1);
                v62 -= 8;
                *((void *)v61 - 1) = v64;
                v61 -= 8;
              }
              while (v62 != v63);
              v62 = (char *)v202;
            }
            v202 = v61;
            v203 = v56;
            v204 = &v60[8 * v59];
            if (v62) {
              operator delete(v62);
            }
          }
          else
          {
            *(void *)v203 = v26;
            uint64_t v56 = v55 + 8;
          }
          v203 = v56;
          goto LABEL_73;
        }
      }
      if (v29 == 23)
      {
        if (bswap64(*v28) == 0x5F5F444154412C5FLL
          && bswap64(v28[1]) == 0x5F6F626A635F696DLL
          && bswap64(*(unint64_t *)((char *)v28 + 15)) == 0x6D616765696E666FLL)
        {
          goto LABEL_73;
        }
LABEL_49:
        std::string v41 = v200;
        if (v200 >= v201)
        {
          uint64_t v43 = (v200 - (unsigned char *)v199) >> 3;
          if ((unint64_t)(v43 + 1) >> 61) {
            goto LABEL_299;
          }
          unint64_t v44 = (v201 - (unsigned char *)v199) >> 2;
          if (v44 <= v43 + 1) {
            unint64_t v44 = v43 + 1;
          }
          if ((unint64_t)(v201 - (unsigned char *)v199) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v44;
          }
          if (v45) {
            std::string v46 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v201, v45);
          }
          else {
            std::string v46 = 0;
          }
          v51 = &v46[8 * v43];
          *(void *)v51 = v26;
          std::string v42 = v51 + 8;
          unint64_t v53 = (char *)v199;
          unint64_t v52 = v200;
          if (v200 != v199)
          {
            do
            {
              uint64_t v54 = *((void *)v52 - 1);
              v52 -= 8;
              *((void *)v51 - 1) = v54;
              v51 -= 8;
            }
            while (v52 != v53);
            unint64_t v52 = (char *)v199;
          }
          v199 = v51;
          v200 = v42;
          v201 = &v46[8 * v45];
          if (v52) {
            operator delete(v52);
          }
        }
        else
        {
          *(void *)v200 = v26;
          std::string v42 = v41 + 8;
        }
        v200 = v42;
        goto LABEL_73;
      }
      if (v29 != 16) {
        goto LABEL_49;
      }
      unint64_t v33 = *v28;
      unint64_t v32 = v28[1];
      if (v33 != 0x5F2C545845545F5FLL || v32 != 0x676E69727473635FLL) {
        goto LABEL_49;
      }
LABEL_73:
      while (++v24 != v25)
      {
        if ((*v24 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_77;
        }
      }
      int64x2_t v24 = v25;
LABEL_77:
      ;
    }
    while (v24 != (void *)v23);
    do
    {
LABEL_96:
      v18 += 3;
      if (v18 == (void *)v19) {
        goto LABEL_99;
      }
    }
    while (*v18 >= 0xFFFFFFFFFFFFFFFELL);
  }
  while (v18 != (void *)v19);
LABEL_99:
  uint64_t v196 = 0;
  uint64_t v197 = 0;
  int v198 = 0;
  uint64_t v193 = 0;
  uint64_t v194 = 0;
  unsigned int v195 = 0;
  if (v205 != v206) {
    llvm::jitlink::LinkGraph::createSection();
  }
LABEL_102:
  uint64_t SectionByName = llvm::jitlink::LinkGraph::findSectionByName(a2, (uint64_t)"__LD,__compact_unwind", 21, v15);
  if (SectionByName)
  {
    uint64_t v66 = SectionByName;
    uint64_t v67 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(SectionByName + 32);
    uint64_t v69 = *(void *)(v66 + 32) + 8 * *(unsigned int *)(v66 + 48);
    if ((void *)v69 != v67)
    {
      v70 = v67;
      uint64_t v71 = v68;
      do
      {
        std::string::size_type v72 = *(void **)(*v70 + 40);
        uint64_t v73 = *(void **)(*v70 + 48);
        while (v72 != v73)
        {
          *(void *)&long long v222 = *v72;
          *(void *)&long long v235 = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(&v193, &v222, &v235))
          {
            if ((void)v235 != v193 + 16 * v195) {
              *std::string::size_type v72 = *(void *)(v235 + 8);
            }
          }
          v72 += 4;
        }
        while (++v70 != v71)
        {
          if ((*v70 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_115;
          }
        }
        v70 = v71;
LABEL_115:
        ;
      }
      while (v70 != (void *)v69);
    }
  }
  int v75 = (uint64_t ***)v202;
  uint64_t v74 = (uint64_t ***)v203;
  if (v202 != v203)
  {
    uint64_t v185 = v12 + 80;
    while (1)
    {
      uint64_t v76 = *v75;
      llvm::orc::ExecutorProcessControl::intern(*(void *)(v189 + 72), **v75, (unint64_t)(*v75)[1], v213);
      *(unint64_t **)&long long v235 = v213[0];
      if ((unint64_t)v213[0] - 1 >= 0xFFFFFFFFFFFFFFE0)
      {
        *((unint64_t **)&v235 + 1) = v213[0];
      }
      else
      {
        atomic_fetch_add((atomic_ullong *volatile)v213[0] + 1, 1uLL);
        *((unint64_t **)&v235 + 1) = v213[0];
        if ((unint64_t)v213[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)v213[0] + 1, 1uLL);
        }
      }
      *(void *)&long long v222 = 0;
      uint64_t v77 = v235;
      int v78 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(v12 + 56), *(_DWORD *)(v12 + 72), v235, &v222);
      char v79 = v78;
      uint64_t v80 = (void *)v222;
      if (v78)
      {
        uint64_t v81 = *((void *)&v235 + 1);
      }
      else
      {
        uint64_t v82 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(v12 + 56, (uint64_t *)&v235, (void *)v222);
        uint64_t v80 = v82;
        if ((unint64_t)(*v82 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          atomic_fetch_add((atomic_ullong *volatile)(*v82 + 8), 0xFFFFFFFFFFFFFFFFLL);
          uint64_t v77 = v235;
        }
        uint64_t v81 = 0;
        *uint64_t v82 = v77;
        v82[1] = *((void *)&v235 + 1);
        long long v235 = 0uLL;
        uint64_t v77 = 0;
      }
      if ((unint64_t)(v81 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        atomic_fetch_add((atomic_ullong *volatile)(v81 + 8), 0xFFFFFFFFFFFFFFFFLL);
        uint64_t v77 = v235;
      }
      if ((unint64_t)(v77 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v77 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      unint64_t v83 = (unint64_t)v76[4];
      if (v83 <= 7)
      {
        uint64_t v93 = *v213[0];
        __int16 v221 = 1283;
        v217 = (std::string *)"expected async function pointer ";
        v219 = (const char *)(v213[0] + 2);
        uint64_t v220 = v93;
        *(void *)&long long v222 = &v217;
        *(void *)&long long v223 = " to have size 8; got ";
        __int16 v224 = 770;
        std::to_string(&__p, v83);
        char v94 = v224;
        if ((_BYTE)v224)
        {
          if (v224 == 1)
          {
            *(void *)&long long v235 = &__p;
            char v95 = 1;
            char v94 = 4;
          }
          else
          {
            if (HIBYTE(v224) != 1) {
              char v94 = 2;
            }
            v102 = &v222;
            if (HIBYTE(v224) == 1) {
              v102 = (long long *)v222;
            }
            *(void *)&long long v235 = v102;
            *((void *)&v235 + 1) = *((void *)&v222 + 1);
            p_p = &__p;
            char v95 = 4;
          }
        }
        else
        {
          char v95 = 1;
        }
        BYTE8(v237) = v94;
        BYTE9(v237) = v95;
        getErrorErrorCat();
        operator new();
      }
      uint64_t v84 = (unint64_t)v76[3] & 0xC00000000000000;
      if (v79) {
        break;
      }
      if (v84 == 0x800000000000000)
      {
        uint64_t v96 = *v213[0];
        __int16 v221 = 773;
        v217 = (std::string *)(v213[0] + 2);
        uint64_t v218 = v96;
        v219 = "$";
        *(void *)&long long v222 = &v217;
        *(void *)&long long v223 = &v208;
        __int16 v224 = 1026;
        *(void *)&long long v235 = &v222;
        p_p = (std::string *)"$promoted";
        WORD4(v237) = 770;
        llvm::Twine::str((llvm::Twine *)&v235, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v97 = &__p;
        }
        else {
          std::string::size_type v97 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        llvm::orc::ExecutorProcessControl::intern(*(void *)(v189 + 72), (uint64_t *)v97, size, v211);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v99 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::FindAndConstruct(v185, (uint64_t *)v213);
        uint64_t v100 = v99[1];
        if ((unint64_t)(v100 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v100 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        v101 = v211[0];
        v99[1] = v211[0];
        if ((unint64_t)v101 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)v101 + 1, 1uLL);
        }
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v196, (uint64_t *)v211);
        llvm::jitlink::LinkGraph::addDefinedSymbol(a2, (uint64_t)v76[2], (unint64_t)v76[3] & 0x1FFFFFFFFFFFFFFLL, (uint64_t)(v211[0] + 2), *v211[0], (uint64_t)v76[4], 0, 1, 0, 1);
        goto LABEL_165;
      }
LABEL_174:
      if ((unint64_t)v213[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)v213[0] + 1, 0xFFFFFFFFFFFFFFFFLL);
      }
      if (++v75 == v74) {
        goto LABEL_177;
      }
    }
    if (v84 == 0x800000000000000)
    {
      std::string v85 = (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::FindAndConstruct(v185, (uint64_t *)v213)[1];
      v86 = (uint64_t *)*v85;
      *uint64_t v76 = v85 + 2;
      v76[1] = v86;
    }
    uint64_t v87 = *v213[0];
    __int16 v221 = 773;
    v217 = (std::string *)(v213[0] + 2);
    uint64_t v218 = v87;
    v219 = "$";
    *(void *)&long long v222 = &v217;
    *(void *)&long long v223 = &v208;
    __int16 v224 = 1026;
    *(void *)&long long v235 = &v222;
    p_p = (std::string *)"$impl";
    WORD4(v237) = 770;
    llvm::Twine::str((llvm::Twine *)&v235, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v88 = &__p;
    }
    else {
      long long v88 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v89 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v89 = __p.__r_.__value_.__l.__size_;
    }
    llvm::orc::ExecutorProcessControl::intern(*(void *)(v189 + 72), (uint64_t *)v88, v89, v211);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v90 = v80[1];
    if ((unint64_t)(v90 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v90 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    v91 = (uint64_t *)v211[0];
    v80[1] = v211[0];
    if ((unint64_t)v91 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      atomic_fetch_add(v91 + 1, 1uLL);
      v91 = (uint64_t *)v211[0];
    }
    __int16 v92 = *((unsigned char *)llvm::jitlink::LinkGraph::addDefinedSymbol(a2, (uint64_t)v76[2], (unint64_t)v76[3] & 0x1FFFFFFFFFFFFFFLL, (uint64_t)(v91 + 2), *v91, (uint64_t)v76[4], ((unint64_t)v76[3] & 0x200000000000000) != 0, 1, 0, 1)+ 31) & 2;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v196, (uint64_t *)v211)[4] = v92 << 8;
    llvm::jitlink::LinkGraph::makeExternal(a2, (uint64_t)v76);
LABEL_165:
    if ((unint64_t)v211[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)v211[0] + 1, 0xFFFFFFFFFFFFFFFFLL);
    }
    goto LABEL_174;
  }
LABEL_177:
  v103 = (uint64_t ***)v199;
  v104 = (uint64_t ***)v200;
  uint64_t v188 = a2;
  if (v199 != v200)
  {
    uint64_t v105 = v12 + 32;
    uint64_t v106 = v12 + 80;
    do
    {
      v107 = *v103;
      llvm::orc::ExecutorProcessControl::intern(*(void *)(v189 + 72), **v103, (unint64_t)(*v103)[1], v213);
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>(v105, (uint64_t *)v213, (uint64_t)&v235);
      uint64_t v108 = (unint64_t)v107[3] & 0xC00000000000000;
      if ((_BYTE)p_p)
      {
        if (v108 == 0x800000000000000)
        {
          uint64_t v109 = *v213[0];
          __int16 v221 = 773;
          v217 = (std::string *)(v213[0] + 2);
          uint64_t v218 = v109;
          v219 = "$";
          *(void *)&long long v222 = &v217;
          *(void *)&long long v223 = &v208;
          __int16 v224 = 1026;
          *(void *)&long long v235 = &v222;
          p_p = (std::string *)"$promoted";
          WORD4(v237) = 770;
          llvm::Twine::str((llvm::Twine *)&v235, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v110 = &__p;
          }
          else {
            v110 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v111 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v111 = __p.__r_.__value_.__l.__size_;
          }
          llvm::orc::ExecutorProcessControl::intern(*(void *)(v189 + 72), (uint64_t *)v110, v111, v211);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          v112 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::FindAndConstruct(v106, (uint64_t *)v213);
          uint64_t v113 = v112[1];
          if ((unint64_t)(v113 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(v113 + 8), 0xFFFFFFFFFFFFFFFFLL);
          }
          v114 = v211[0];
          v112[1] = v211[0];
          if ((unint64_t)v114 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)v114 + 1, 1uLL);
          }
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v196, (uint64_t *)v211)[4] = 0;
          v115 = v107[2];
          v116 = v211[0] + 2;
          uint64_t v117 = *v211[0];
          uint64_t v118 = v115[4];
          v119 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v188, 40, 3);
          void *v119 = v116;
          v119[1] = v117;
          v119[2] = v115;
          v119[3] = 0x400000000000000;
          v119[4] = v118;
          uint64_t v120 = v115[2] + 56;
          *(void *)&long long v222 = v119;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v120, &v222, (uint64_t)&v235);
          if ((unint64_t)v211[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)v211[0] + 1, 0xFFFFFFFFFFFFFFFFLL);
          }
          a2 = v188;
        }
      }
      else
      {
        if (v108 == 0x800000000000000)
        {
          v121 = (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::FindAndConstruct(v106, (uint64_t *)v213)[1];
          v122 = (uint64_t *)*v121;
          *v107 = v121 + 2;
          v107[1] = v122;
        }
        llvm::jitlink::LinkGraph::makeExternal(a2, (uint64_t)v107);
      }
      if ((unint64_t)v213[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)v213[0] + 1, 0xFFFFFFFFFFFFFFFFLL);
      }
      ++v103;
    }
    while (v103 != v104);
  }
  uint64_t v123 = v196;
  uint64_t v196 = 0;
  int v124 = v198;
  int v198 = 0;
  *(void *)&long long v235 = v123;
  v191[0] = 0;
  uint64_t v125 = v197;
  uint64_t v197 = 0;
  *((void *)&v235 + 1) = v125;
  v191[1] = 0;
  LODWORD(p_p) = v124;
  int v192 = 0;
  llvm::orc::ExecutionSession::OL_defineMaterializing(v180, (int32x2_t *)&v235, a3);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)&v235);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(v191);
  if (*a3) {
    goto LABEL_269;
  }
  uint64_t v181 = 0;
  uint64_t v127 = 0;
  int v186 = 0;
  uint64_t v128 = 0;
  uint64_t v129 = 0;
  v130 = (std::string *)*(unsigned int *)(a2 + 168);
  long long v235 = llvm::orc::MachOObjCCatListSectionName;
  long long v237 = llvm::orc::MachOObjCCatList2SectionName;
  p_p = v130;
  v238 = v130;
  long long v239 = llvm::orc::MachOObjCClassListSectionName;
  long long v241 = llvm::orc::MachOObjCNLCatListSectionName;
  v240 = v130;
  v242 = v130;
  long long v243 = llvm::orc::MachOSwift5ProtoSectionName;
  long long v245 = llvm::orc::MachOSwift5ProtosSectionName;
  uint64_t v244 = 4;
  uint64_t v246 = 4;
  long long v247 = llvm::orc::MachOSwift5TypesSectionName;
  uint64_t v248 = 4;
  uint64_t v230 = 0;
  uint64_t v229 = 0;
  unsigned int v231 = 0;
  uint64_t v233 = 0;
  v232 = 0;
  unsigned int v234 = 0;
  uint64_t v227 = 0;
  v226 = 0;
  unsigned int v228 = 0;
  do
  {
    v131 = (uint64_t *)&v235 + 3 * v129;
    uint64_t v133 = *v131;
    v132 = (unint64_t *)v131[1];
    size_t v134 = v131[2];
    uint64_t v135 = llvm::jitlink::LinkGraph::findSectionByName(a2, *v131, (uint64_t)v132, v126);
    if (!v135) {
      goto LABEL_261;
    }
    uint64_t v136 = v135;
    v183 = (unint64_t *)v133;
    uint64_t v190 = v129;
    v137 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v135 + 32);
    uint64_t v139 = *(void *)(v136 + 32) + 8 * *(unsigned int *)(v136 + 48);
    if ((void *)v139 == v137) {
      goto LABEL_231;
    }
    v140 = (void **)v137;
    v141 = v138;
    do
    {
      v225 = 0;
      v225 = *v140;
      unint64_t v142 = v225[4];
      v144 = (char *)v225[5];
      v143 = (char *)v225[6];
      if (v142 != ((v143 - v144) >> 5) * v134)
      {
        __int16 v212 = 1283;
        v211[0] = (unint64_t *)"unexpected block size for section ";
        v211[2] = v183;
        v211[3] = v132;
        v213[0] = (unint64_t *)v211;
        v213[2] = (unint64_t *)": ";
        __int16 v214 = 770;
        std::to_string(&v210, v142);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v213;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v210;
        __int16 v216 = 1026;
        v217 = &__p;
        v219 = "; expected ";
        __int16 v221 = 770;
        std::to_string(&v209, ((uint64_t)(v225[6] - v225[5]) >> 5) * v134);
        *(void *)&long long v222 = &v217;
        *(void *)&long long v223 = &v209;
        __int16 v224 = 1026;
        getErrorErrorCat();
        operator new();
      }
      if (v144 != v143)
      {
        uint64_t v145 = 0;
        do
        {
          uint64_t v146 = *(void *)v144;
          v144 += 32;
          if ((*(unsigned char *)(*(void *)(v146 + 16) + 8) & 3) == 0) {
            ++v145;
          }
        }
        while (v144 != v143);
        if (v145)
        {
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v232, &v225, (uint64_t)&v222);
          v147 = v225;
          if (v145 == (uint64_t)(v225[6] - v225[5]) >> 5
            || (*(void *)&long long v222 = 0,
                unsigned int v148 = v231,
                (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(v128, v231, (uint64_t)v225, &v222) & 1) != 0))
          {
LABEL_221:
            a2 = v188;
            goto LABEL_222;
          }
          if (4 * (int)v230 + 4 >= 3 * v148)
          {
            int v150 = 2 * v148;
          }
          else
          {
            if (v148 + ~v230 - HIDWORD(v230) > v148 >> 3)
            {
LABEL_218:
              uint64_t v149 = v222;
              LODWORD(v230) = v230 + 1;
              if (*(void *)v222 != -4096) {
                --HIDWORD(v230);
              }
              *(void *)long long v222 = v147;
              *(void *)(v149 + 8) = v145;
              goto LABEL_221;
            }
            int v150 = v148;
          }
          llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::grow((uint64_t)&v229, v150);
          *(void *)&long long v222 = 0;
          uint64_t v128 = v229;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(v229, v231, (uint64_t)v147, &v222);
          goto LABEL_218;
        }
      }
LABEL_222:
      while (++v140 != v141)
      {
        if (((unint64_t)*v140 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_226;
        }
      }
      v140 = v141;
LABEL_226:
      ;
    }
    while (v140 != (void **)v139);
    uint64_t v127 = v229;
    int v186 = v230;
    uint64_t v181 = v231;
LABEL_231:
    if (v186)
    {
      v151 = (void *)v127;
      uint64_t v152 = v181;
      if (v181)
      {
        uint64_t v153 = 16 * v181;
        v151 = (void *)v127;
        while ((*v151 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v151 += 2;
          v153 -= 16;
          if (!v153) {
            goto LABEL_250;
          }
        }
        uint64_t v152 = v181;
      }
      v154 = (void *)(v127 + 16 * v152);
      if (v151 != v154)
      {
        v155 = (uint64_t *)*v151;
        uint64_t v184 = v127;
        do
        {
          uint64_t v156 = (((v155[6] - v155[5]) >> 5) - v151[1]) * v134;
          unint64_t v157 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, v156, 0);
          uint64_t v158 = *v155;
          unint64_t v159 = v155[1];
          *(void *)&long long v222 = v157;
          *((void *)&v222 + 1) = v156;
          v217 = (std::string *)v158;
          __p.__r_.__value_.__r.__words[0] = 1 << (v159 >> 3);
          v213[0] = (unint64_t *)(v159 >> 8);
          v160 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::MutableArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, v136, (uint64_t *)&v222, (uint64_t *)&v217, (unint64_t *)&__p, (uint64_t *)v213);
          uint64_t v161 = v155[5];
          uint64_t v162 = v155[6];
          if (v161 != v162)
          {
            v163 = v160;
            uint64_t v164 = 0;
            do
            {
              if ((*(unsigned char *)(*(void *)(*(void *)v161 + 16) + 8) & 3) != 0)
              {
                long long v165 = *(_OWORD *)(v161 + 16);
                long long v222 = *(_OWORD *)v161;
                long long v223 = v165;
                DWORD2(v222) = v164;
                llvm::jitlink::Block::addEdge(v163, &v222);
                memcpy((void *)(v157 + v164), (const void *)(v155[3] + *(unsigned int *)(v161 + 8)), v134);
                v164 += v134;
              }
              v161 += 32;
            }
            while (v161 != v162);
          }
          v151 += 2;
          a2 = v188;
          uint64_t v127 = v184;
          if (v151 == v154) {
            break;
          }
          while (1)
          {
            v155 = (uint64_t *)*v151;
            if ((*v151 | 0x1000) != 0xFFFFFFFFFFFFF000) {
              break;
            }
            v151 += 2;
            if (v151 == v154) {
              goto LABEL_250;
            }
          }
        }
        while (v151 != v154);
      }
    }
LABEL_250:
    v166 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v136 + 56);
    uint64_t v168 = *(void *)(v136 + 56) + 8 * *(unsigned int *)(v136 + 72);
    if ((std::string::size_type *)v168 == v166)
    {
      uint64_t v128 = v127;
      uint64_t v129 = v190;
    }
    else
    {
      v169 = v166;
      v170 = v167;
      do
      {
        __p.__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = *v169;
        *(void *)&long long v222 = *(void *)(__p.__r_.__value_.__r.__words[0] + 16);
        v217 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)&v232, &v222, &v217))llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v226, &__p, (uint64_t)&v222); {
        while (++v169 != v170)
        }
        {
          if ((*v169 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_258;
          }
        }
        v169 = v170;
LABEL_258:
        ;
      }
      while (v169 != (std::string::size_type *)v168);
      uint64_t v128 = v127;
      uint64_t v129 = v190;
    }
LABEL_261:
    ++v129;
  }
  while (v129 != 7);
  if (v227)
  {
    if (v228)
    {
      uint64_t v171 = 8 * v228;
      v172 = v226;
      while ((*v172 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v172;
        v171 -= 8;
        if (!v171) {
          goto LABEL_285;
        }
      }
    }
    else
    {
      v172 = v226;
    }
    v173 = &v226[v228];
    if (v172 != v173)
    {
      uint64_t v174 = *v172;
LABEL_281:
      uint64_t v175 = *(void *)(*(void *)(v174 + 16) + 16) + 56;
      *(void *)&long long v222 = v174;
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v175, &v222);
      while (++v172 != v173)
      {
        uint64_t v174 = *v172;
        if ((*v172 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v172 != v173) {
            goto LABEL_281;
          }
          break;
        }
      }
    }
  }
LABEL_285:
  if (v233)
  {
    if (v234)
    {
      uint64_t v176 = 8 * v234;
      v177 = v232;
      while ((*v177 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v177;
        v176 -= 8;
        if (!v176) {
          goto LABEL_298;
        }
      }
    }
    else
    {
      v177 = v232;
    }
    v178 = &v232[v234];
    if (v177 != v178)
    {
      v179 = (void *)*v177;
LABEL_294:
      llvm::jitlink::LinkGraph::removeBlock(a2, v179);
      while (++v177 != v178)
      {
        v179 = (void *)*v177;
        if ((*v177 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v177 != v178) {
            goto LABEL_294;
          }
          break;
        }
      }
    }
  }
LABEL_298:
  *a3 = 0;
  MEMORY[0x263E500A0](v226, 8);
  MEMORY[0x263E500A0](v232, 8);
  MEMORY[0x263E500A0](v127, 8);
LABEL_269:
  MEMORY[0x263E500A0](v193, 8);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(&v196);
  if (v199)
  {
    v200 = (char *)v199;
    operator delete(v199);
  }
  if (v202)
  {
    v203 = (char *)v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = (char *)v205;
    operator delete(v205);
  }
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v208.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(v182);
}

void llvm::jitlink::LinkGraph::createSection()
{
}

void *llvm::jitlink::LinkGraph::addDefinedSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10)
{
  uint64_t v17 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 40, 3);
  uint64_t v18 = v17;
  *uint64_t v17 = a4;
  v17[1] = a5;
  uint64_t v19 = 0x1000000000000000;
  if (!a10) {
    uint64_t v19 = 0;
  }
  uint64_t v20 = 0x2000000000000000;
  if (!a9) {
    uint64_t v20 = 0;
  }
  void v17[2] = a2;
  v17[3] = ((unint64_t)(a7 & 1) << 57) | ((unint64_t)(a8 & 3) << 58) | v19 & 0xFE00000000000000 | v20 & 0xFE00000000000000 | a3 & 0x1FFFFFFFFFFFFFFLL;
  v17[4] = a6;
  uint64_t v21 = *(void *)(a2 + 16) + 56;
  uint64_t v23 = v18;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v21, &v23, (uint64_t)v24);
  return v18;
}

void llvm::jitlink::Block::addEdge(void *a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v12 = a1[7];
  uint64_t v10 = (uint64_t)(a1 + 7);
  unint64_t v11 = v12;
  unint64_t v13 = *(void *)(v10 - 8);
  if (v13 >= v12)
  {
    uint64_t v15 = a1[5];
    uint64_t v16 = (uint64_t)(v13 - v15) >> 5;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 59) {
      abort();
    }
    uint64_t v18 = v11 - v15;
    if (v18 >> 4 > v17) {
      unint64_t v17 = v18 >> 4;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19) {
      uint64_t v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(v10, v19);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = &v20[32 * v16];
    uint64_t v22 = &v20[32 * v19];
    *(void *)uint64_t v21 = a4;
    *((_DWORD *)v21 + 2) = a3;
    *((void *)v21 + 2) = a5;
    v21[24] = a2;
    unint64_t v14 = v21 + 32;
    int64x2_t v24 = (char *)a1[5];
    uint64_t v23 = (char *)a1[6];
    if (v23 != v24)
    {
      do
      {
        long long v25 = *((_OWORD *)v23 - 2);
        *(_OWORD *)(v21 - 23) = *(_OWORD *)(v23 - 23);
        *((_OWORD *)v21 - 2) = v25;
        v21 -= 32;
        v23 -= 32;
      }
      while (v23 != v24);
      uint64_t v23 = (char *)a1[5];
    }
    a1[5] = v21;
    a1[6] = v14;
    a1[7] = v22;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    *(void *)unint64_t v13 = a4;
    *(_DWORD *)(v13 + 8) = a3;
    *(void *)(v13 + 16) = a5;
    unint64_t v14 = (char *)(v13 + 32);
    *(unsigned char *)(v13 + 24) = a2;
  }
  a1[6] = v14;
}

uint64_t llvm::jitlink::LinkGraph::makeExternal(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if ((*(unsigned char *)(v4 + 8) & 2) != 0)
  {
    v13[0] = a2;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(a1 + 232, v13);
    int v9 = *(void **)(a2 + 16);
    unint64_t v10 = v9[1] & 0xFFFFFFFFFFFFFFFDLL;
    *int v9 = 0;
    v9[1] = v10;
  }
  else
  {
    uint64_t v5 = *(void *)(v4 + 16) + 56;
    v13[0] = a2;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v5, v13);
    uint64_t v6 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 16, 3);
    unint64_t v7 = v6[1] & 0xFFFFFFFFFFFFFFFCLL;
    *uint64_t v6 = 0;
    v6[1] = v7;
    unint64_t v8 = *(void *)(a2 + 24) & 0xE200000000000000;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v8;
  }
  uint64_t v12 = a2;
  return llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1 + 208, &v12, (uint64_t)v13);
}

uint64_t llvm::jitlink::LinkGraph::findSectionByName(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v8 = 0;
  int v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 184), (uint64_t)v7, &v8, a4);
  uint64_t result = 0;
  if (v5)
  {
    if (v8 != *(void *)(a1 + 184) + 24 * *(unsigned int *)(a1 + 200)) {
      return *(void *)(v8 + 16);
    }
  }
  return result;
}

uint64_t *llvm::StringMap<xojit::ReplacementManager::DylibState::ObjectState,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  uint64_t i = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      uint64_t v9 = i[1];
      ++i;
      uint64_t v8 = v9;
    }
    return i;
  }
  unint64_t v11 = (char *)operator new(a3 + 105, (std::align_val_t)8uLL);
  uint64_t v12 = v11;
  unint64_t v13 = v11 + 104;
  if (a3) {
    memcpy(v11 + 104, a2, a3);
  }
  v13[a3] = 0;
  *(void *)uint64_t v12 = a3;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *uint64_t i = (uint64_t)v12;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v6)); !*i || *i == -8; ++i)
    ;
  return i;
}

BOOL llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(char *a1, size_t __n, void *__s2, uint64_t a4)
{
  if (__s2 == (void *)-2) {
    return a1 + 2 == 0;
  }
  if (__s2 == (void *)-1) {
    return a1 + 1 == 0;
  }
  if (__n != a4) {
    return 0;
  }
  if (__n) {
    return memcmp(a1, __s2, __n) == 0;
  }
  return 1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::try_emplace<std::unique_ptr<llvm::jitlink::Section>>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t *a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v14 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)a2, &v14, a4);
  unint64_t v10 = v14;
  if (result)
  {
    char v11 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::InsertIntoBucketImpl<llvm::StringRef>(a1, (uint64_t)a2, (uint64_t)a2, v14);
    unint64_t v10 = (void *)result;
    *(_OWORD *)uint64_t result = *a2;
    uint64_t v12 = *a3;
    *a3 = 0;
    *(void *)(result + 16) = v12;
    char v11 = 1;
  }
  uint64_t v13 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v13;
  *(unsigned char *)(a5 + 16) = v11;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, void *a3, unint64_t *a4)
{
  int v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    uint64_t v7 = *a1;
    int v8 = v5 - 1;
    unsigned int v9 = (v5 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a2, *(void *)a2 + *(void *)(a2 + 8), (uint64_t)a3, a4);
    uint64_t v10 = v7 + 24 * v9;
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(void *)(a2 + 8), *(void **)v10, *(void *)(v10 + 8)))
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      while (*(void *)v10 != -1)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = *(void *)v10 == -2;
        }
        if (v14) {
          uint64_t v12 = v10;
        }
        uint64_t v18 = v12;
        int v15 = v13 + 1;
        unsigned int v9 = (v9 + v13) & v8;
        uint64_t v10 = v7 + 24 * v9;
        BOOL isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(void *)(a2 + 8), *(void **)v10, *(void *)(v10 + 8));
        uint64_t v12 = v18;
        BOOL v17 = isEqual;
        uint64_t result = 1;
        int v13 = v15;
        if (v17) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v12) {
        uint64_t v10 = v12;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::grow(a1, v7);
  uint64_t v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::grow(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(llvm::jitlink::Section ***)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::moveFromOldBuckets((llvm::jitlink::Section *)a1, v4, &v4[3 * v3], v10);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = 24 * v11;
    do
    {
      *uint64_t result = xmmword_261E8A6B0;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v12 -= 24;
    }
    while (v12);
  }
  return result;
}

llvm::jitlink::Section *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::moveFromOldBuckets(llvm::jitlink::Section *result, llvm::jitlink::Section **a2, llvm::jitlink::Section **a3, unint64_t *a4)
{
  unint64_t v5 = result;
  *((void *)result + 1) = 0;
  uint64_t v6 = *((unsigned int *)result + 4);
  if (v6)
  {
    int v7 = *(_OWORD **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      *int v7 = xmmword_261E8A6B0;
      int v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    unsigned int v9 = a2 + 2;
    do
    {
      if ((unint64_t)*(v9 - 2) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v13 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v5, (uint64_t)(v9 - 2), &v13, a4);
        uint64_t v10 = v13;
        _OWORD *v13 = *((_OWORD *)v9 - 1);
        uint64_t v11 = *v9;
        *unsigned int v9 = 0;
        *((void *)v10 + 2) = v11;
        ++*((_DWORD *)v5 + 2);
        uint64_t result = std::unique_ptr<llvm::jitlink::Section>::reset[abi:nn180100](v9, 0);
      }
      uint64_t v12 = v9 + 1;
      v9 += 3;
    }
    while (v12 != a3);
  }
  return result;
}

llvm::jitlink::Section *std::unique_ptr<llvm::jitlink::Section>::reset[abi:nn180100](llvm::jitlink::Section **a1, llvm::jitlink::Section *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::jitlink::Section::~Section(result);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

unint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(a1 + 80) += a2;
  uint64_t v5 = (1 << a3) - 1;
  uint64_t v6 = -(1 << a3);
  if (*(void *)a1) {
    BOOL v7 = ((v5 + *(void *)a1) & (unint64_t)v6) - *(void *)a1 + a2 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    uint64_t v8 = v5 + a2;
    if ((unint64_t)(v5 + a2) > 0x1000)
    {
      unsigned int v9 = operator new(v5 + a2, (std::align_val_t)8uLL);
      llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)(a1 + 64), (uint64_t)v9, v8);
      return ((unint64_t)v9 + v5) & v6;
    }
    llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::StartNewSlab(a1);
    unint64_t result = (v5 + *(void *)a1) & v6;
  }
  else
  {
    unint64_t result = (v5 + *(void *)a1) & v6;
  }
  *(void *)a1 = result + a2;
  return result;
}

unsigned int *llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = result[2];
  if (v6 >= result[3])
  {
    unint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v6 + 1, 16);
    LODWORD(v6) = v5[2];
  }
  BOOL v7 = (void *)(*(void *)v5 + 16 * v6);
  *BOOL v7 = a2;
  v7[1] = a3;
  ++v5[2];
  return result;
}

unsigned int *llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::StartNewSlab(uint64_t a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 16);
  unsigned int v3 = *(_DWORD *)(a1 + 24) >> 7;
  if (v3 >= 0x1E) {
    LOBYTE(v3) = 30;
  }
  uint64_t v4 = 4096 << v3;
  uint64_t v5 = (char *)operator new(4096 << v3, (std::align_val_t)8uLL);
  unint64_t result = llvm::SmallVectorTemplateBase<void *,true>::push_back(v2, (uint64_t)v5);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = &v5[v4];
  return result;
}

unsigned int *llvm::SmallVectorTemplateBase<void *,true>::push_back(unsigned int *result, uint64_t a2)
{
  unsigned int v3 = result;
  uint64_t v4 = result[2];
  if (v4 >= result[3])
  {
    unint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v4 + 1, 8);
    LODWORD(v4) = v3[2];
  }
  *(void *)(*(void *)v3 + 8 * v4) = a2;
  ++v3[2];
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a2, &v10);
  BOOL v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::jitlink::Symbol *>(a1, (uint64_t)a2, a2, v10);
    BOOL v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    BOOL v7 = (void *)(*a1 + 8 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        BOOL v7 = (void *)(v4 + 8 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        BOOL v7 = v10;
      }
    }
  }
  else
  {
    BOOL v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::jitlink::Symbol *>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::moveFromOldBuckets(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)v5, a2, &v9);
      *uint64_t v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::jitlink::Symbol *>((uint64_t)a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    int v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        int v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v7 = v10;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::jitlink::Symbol *>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::moveFromOldBuckets(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::moveFromOldBuckets(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)v5, a2, &v10);
      uint64_t v9 = v10;
      *uint64_t v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  uint64_t v5 = v9;
  if ((v4 & 1) == 0)
  {
    uint64_t v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, a2, v9);
    uint64_t v5 = v6;
    if ((unint64_t)(*v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(*v6 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    uint64_t v7 = *a2;
    *uint64_t v6 = *a2;
    if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 1uLL);
    }
    v6[1] = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -8)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -16;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -8) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -8;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      unsigned int v13 = (uint64_t *)v4;
      do
      {
        uint64_t v14 = *v13;
        if ((*v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          int v15 = v18;
          if ((unint64_t)(*v18 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(*v18 + 8), 0xFFFFFFFFFFFFFFFFLL);
          }
          *int v15 = 0;
          *int v15 = *v13;
          uint64_t *v13 = 0;
          v15[1] = 0;
          v15[1] = v13[1];
          v13[1] = 0;
          ++*(_DWORD *)(a1 + 8);
          uint64_t v14 = *v13;
        }
        if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      *uint64_t result = -8;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

void *llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v11 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 64, 3);
  uint64_t v12 = v11;
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  uint64_t v15 = *a4;
  unint64_t v16 = *a5;
  uint64_t v17 = *a6;
  void v11[2] = a2;
  v11[3] = v13;
  v11[4] = v14;
  v11[5] = 0;
  v11[6] = 0;
  v11[7] = 0;
  char v18 = __clz(__rbit64(v16));
  if (v16) {
    uint64_t v19 = (8 * (v18 & 0x1F)) | 1;
  }
  else {
    uint64_t v19 = 1;
  }
  *uint64_t v11 = v15;
  v11[1] = v19 | (v17 << 8);
  uint64_t v21 = v11;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a2 + 32, &v21, (uint64_t)v22);
  return v12;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(uint64_t a1, void *a2)
{
  uint64_t v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a2, &v4))
  {
    *uint64_t v4 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&,llvm::detail::DenseSetEmpty&>(a1, v10, a2);
    int v7 = (void *)result;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*result - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(*result + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v5 = *a3;
  *uint64_t result = *a3;
  if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 1uLL);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    int v7 = (void *)(*a1 + 8 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -8)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -16;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        int v7 = (void *)(v4 + 8 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v7 = v10;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -8) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -8;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -8;
      v8 -= 8;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *v4;
      if ((*v4 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        uint64_t v11 = 0;
        uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)v5, v4, &v11);
        uint64_t v10 = v11;
        if ((unint64_t)(*v11 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(*v11 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        uint64_t v9 = 0;
        *uint64_t v10 = 0;
        *uint64_t v10 = *v4;
        *uint64_t v4 = 0;
        ++*(_DWORD *)(v5 + 8);
      }
      if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = 16 * v2;
    do
    {
      if ((unint64_t)(*(void *)v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(*(void *)v3 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v3 += 16;
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x263E500A0](v3, 8);
  return a1;
}

void llvm::jitlink::Block::addEdge(void *a1, _OWORD *a2)
{
  unint64_t v6 = a1[7];
  uint64_t v4 = (uint64_t)(a1 + 7);
  unint64_t v5 = v6;
  int v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = a1[5];
    uint64_t v11 = ((uint64_t)v7 - v10) >> 5;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59) {
      abort();
    }
    uint64_t v13 = v5 - v10;
    if (v13 >> 4 > v12) {
      unint64_t v12 = v13 >> 4;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(v4, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = &v15[32 * v11];
    uint64_t v17 = &v15[32 * v14];
    long long v18 = a2[1];
    *(_OWORD *)unint64_t v16 = *a2;
    *((_OWORD *)v16 + 1) = v18;
    uint64_t v9 = v16 + 32;
    uint64_t v20 = (char *)a1[5];
    uint64_t v19 = (char *)a1[6];
    if (v19 != v20)
    {
      do
      {
        long long v21 = *((_OWORD *)v19 - 2);
        *(_OWORD *)(v16 - 23) = *(_OWORD *)(v19 - 23);
        *((_OWORD *)v16 - 2) = v21;
        v16 -= 32;
        v19 -= 32;
      }
      while (v19 != v20);
      uint64_t v19 = (char *)a1[5];
    }
    a1[5] = v16;
    a1[6] = v9;
    a1[7] = v17;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    long long v8 = a2[1];
    *int v7 = *a2;
    v7[1] = v8;
    uint64_t v9 = v7 + 2;
  }
  a1[6] = v9;
}

void llvm::jitlink::LinkGraph::removeBlock(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[2] + 32;
  unint64_t v5 = a2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v3, &v5);
  uint64_t v4 = (void *)a2[5];
  if (v4)
  {
    a2[6] = v4;
    operator delete(v4);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        unint64_t v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        unint64_t v6 = v10;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      unsigned int v13 = (uint64_t *)v4;
      do
      {
        uint64_t v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          uint64_t v15 = v19;
          uint64_t v16 = v13[1];
          *uint64_t v19 = *v13;
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    uint64_t v18 = 16 * v17;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

void *llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::MutableArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v11 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 64, 3);
  uint64_t v12 = v11;
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  uint64_t v15 = *a4;
  unint64_t v16 = *a5;
  uint64_t v17 = *a6;
  void v11[2] = a2;
  v11[3] = v13;
  v11[4] = v14;
  v11[5] = 0;
  v11[6] = 0;
  v11[7] = 0;
  unint64_t v18 = (8 * (__clz(__rbit64(v16)) & 0x1F)) | 5;
  uint64_t v19 = 5;
  if (v16) {
    uint64_t v19 = v18;
  }
  *uint64_t v11 = v15;
  v11[1] = v19 | (v17 << 8);
  long long v21 = v11;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a2 + 32, &v21, (uint64_t)v22);
  return v12;
}

uint64_t std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  unint64_t v5 = (long long *)*a1;
  uint64_t v4 = (long long *)a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 2;
    uint64_t result = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(result - 32, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#2}>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (void *)a1[1];
  uint64_t v7 = (std::mutex *)(*(void *)(*a1 + 8) + 16);
  std::mutex::lock(v7);
  uint64_t v8 = *(void *)(v5 + 8) + 88;
  *(void *)&v88[0] = *v6;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::FindAndConstruct(v8, (uint64_t *)v88);
  uint64_t v10 = v9;
  uint64_t v11 = (llvm::StringMapImpl *)(v9 + 1);
  int v12 = *(char *)(a2 + 119);
  if (v12 >= 0) {
    uint64_t v13 = (uint64_t *)(a2 + 96);
  }
  else {
    uint64_t v13 = *(uint64_t **)(a2 + 96);
  }
  if (v12 >= 0) {
    unint64_t v14 = *(unsigned __int8 *)(a2 + 119);
  }
  else {
    unint64_t v14 = *(void *)(a2 + 104);
  }
  uint64_t v15 = llvm::StringMap<xojit::ReplacementManager::DylibState::ObjectState,llvm::MallocAllocator>::try_emplace<>(v11, v13, v14);
  uint64_t v16 = *v15;
  if (!*(_DWORD *)(*v15 + 64))
  {
    *a3 = 0;
    goto LABEL_103;
  }
  __int16 v92 = 0;
  uint64_t v93 = 0;
  uint64_t v94 = 0x1000000000;
  uint64_t v17 = *(unsigned int *)(v16 + 72);
  if (v17)
  {
    uint64_t v18 = 16 * v17;
    uint64_t v19 = *(void **)(v16 + 56);
    while ((*v19 | 8) == 0xFFFFFFFFFFFFFFF8)
    {
      v19 += 2;
      v18 -= 16;
      if (!v18) {
        goto LABEL_38;
      }
    }
  }
  else
  {
    uint64_t v19 = *(void **)(v16 + 56);
  }
  uint64_t v20 = *(void *)(v16 + 56) + 16 * v17;
  if (v19 != (void *)v20)
  {
    long long v21 = (unint64_t *)*v19;
LABEL_17:
    uint64_t v22 = (unint64_t *)v19[1];
    if (v21 == v22) {
      goto LABEL_35;
    }
    unint64_t v25 = *v22;
    int64x2_t v24 = (uint64_t *)(v22 + 2);
    size_t v23 = v25;
    unsigned int v26 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)&v92, v24, v25);
    unint64_t v27 = v92;
    uint64_t v28 = v92[v26];
    if (v28 == -8)
    {
      LODWORD(v94) = v94 - 1;
    }
    else if (v28)
    {
      goto LABEL_31;
    }
    uint64_t v79 = v26;
    uint64_t v81 = v16;
    unint64_t v83 = v10;
    uint64_t v29 = operator new(v23 + 17, (std::align_val_t)8uLL);
    uint64_t v30 = v29;
    BOOL v31 = (char *)(v29 + 2);
    if (v23) {
      memcpy(v29 + 2, v24, v23);
    }
    v31[v23] = 0;
    size_t *v30 = v23;
    v30[1] = 0;
    v27[v79] = v30;
    ++HIDWORD(v93);
    int v32 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v92, v79);
    unint64_t v33 = &v92[v32];
    uint64_t v16 = v81;
    uint64_t v10 = v83;
    while (1)
    {
      uint64_t v28 = *v33;
      if (*v33 && v28 != -8) {
        break;
      }
      ++v33;
    }
LABEL_31:
    uint64_t v35 = *(void *)(v28 + 8);
    if ((unint64_t)(v35 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v35 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    uint64_t v36 = (unint64_t *)*v19;
    *(void *)(v28 + 8) = *v19;
    if ((unint64_t)v36 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)v36 + 1, 1uLL);
    }
LABEL_35:
    while (1)
    {
      v19 += 2;
      if (v19 == (void *)v20) {
        break;
      }
      long long v21 = (unint64_t *)*v19;
      if ((*v19 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        if (v19 != (void *)v20) {
          goto LABEL_17;
        }
        break;
      }
    }
  }
LABEL_38:
  llvm::jitlink::LinkGraph::defined_symbols((llvm::jitlink::LinkGraph *)a2, v88);
  v86[0] = v88[0];
  v86[1] = v88[1];
  __n128 v37 = v89;
  v86[2] = v88[2];
  __n128 v87 = v89;
  uint64_t v38 = v90;
  uint64_t v39 = v91;
  unint64_t v40 = v89.n128_u64[0];
  *(void *)uint64_t v80 = v91;
  uint64_t v82 = v90;
  if (*(void *)&v88[0] != v90 || v89.n128_u64[0] != v91)
  {
    while (1)
    {
      uint64_t v41 = *(void *)v40;
      unint64_t v42 = *(void *)(*(void *)v40 + 8);
      if (!v42 || (*(unsigned char *)(v41 + 31) & 0x20) != 0) {
        goto LABEL_86;
      }
      int Key = llvm::StringMapImpl::FindKey((uint64_t *)&v92, *(uint64_t **)v41, v42);
      uint64_t v44 = Key;
      if (Key == -1) {
        uint64_t v44 = v93;
      }
      if (v44 == v93) {
        goto LABEL_86;
      }
      unint64_t v45 = v92;
      uint64_t v46 = *(void *)(v92[v44] + 8);
      unint64_t v47 = v46 - 1;
      uint64_t v48 = v46;
      if ((unint64_t)(v46 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        atomic_fetch_add((atomic_ullong *volatile)(v46 + 8), 1uLL);
        uint64_t v48 = *(void *)(v45[v44] + 8);
      }
      v85[0] = 0;
      int v49 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(v16 + 80), *(_DWORD *)(v16 + 96), v48, v85);
      uint64_t v50 = v85[0];
      if (!v49 || v85[0] == *(void *)(v16 + 80) + 16 * *(unsigned int *)(v16 + 96)) {
        break;
      }
      if (v47 <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v46 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      uint64_t v46 = *(void *)(v50 + 8);
      if ((unint64_t)(v46 - 1) < 0xFFFFFFFFFFFFFFE0)
      {
        atomic_fetch_add((atomic_ullong *volatile)(v46 + 8), 1uLL);
        int v52 = *(_DWORD *)(*(void *)(*(void *)(v41 + 16) + 24) + (*(void *)(v41 + 24) & 0x1FFFFFFFFFFFFFFLL) + 4);
LABEL_62:
        int v53 = 1;
        atomic_fetch_add((atomic_ullong *volatile)(v46 + 8), 1uLL);
        goto LABEL_64;
      }
      int v53 = 0;
      int v52 = *(_DWORD *)(*(void *)(*(void *)(v41 + 16) + 24) + (*(void *)(v41 + 24) & 0x1FFFFFFFFFFFFFFLL) + 4);
LABEL_64:
      v55 = (char *)v10[11];
      unint64_t v54 = v10[12];
      if ((unint64_t)v55 < v54)
      {
        *(void *)v55 = v46;
        *((_DWORD *)v55 + 2) = v52;
        uint64_t v56 = v55 + 16;
        goto LABEL_84;
      }
      uint64_t v57 = v16;
      unint64_t v58 = v10;
      unint64_t v59 = (unsigned char *)v10[10];
      uint64_t v60 = (v55 - v59) >> 4;
      unint64_t v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 60) {
        abort();
      }
      v62 = a3;
      std::string::size_type v63 = v7;
      int v84 = v53;
      uint64_t v64 = v54 - (void)v59;
      if (v64 >> 3 > v61) {
        unint64_t v61 = v64 >> 3;
      }
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v65 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v65 = v61;
      }
      if (v65 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v66 = (char *)operator new(16 * v65);
      uint64_t v67 = &v66[16 * v60];
      int64x2_t v68 = &v66[16 * v65];
      *(void *)uint64_t v67 = v46;
      *((_DWORD *)v67 + 2) = v52;
      uint64_t v56 = v67 + 16;
      if (v55 == v59)
      {
        uint64_t v10 = v58;
        v58[10] = v67;
        v58[11] = v56;
        v58[12] = v68;
        uint64_t v7 = v63;
        a3 = v62;
        uint64_t v16 = v57;
LABEL_42:
        uint64_t v39 = *(void *)v80;
        uint64_t v38 = v82;
        if (!v55) {
          goto LABEL_83;
        }
        goto LABEL_82;
      }
      uint64_t v7 = v63;
      uint64_t v16 = v57;
      do
      {
        *((void *)v67 - 2) = 0;
        v67 -= 16;
        uint64_t v69 = *((void *)v55 - 2);
        v55 -= 16;
        *(void *)uint64_t v67 = v69;
        *(void *)v55 = 0;
        *((_DWORD *)v67 + 2) = *((_DWORD *)v55 + 2);
      }
      while (v55 != v59);
      uint64_t v10 = v58;
      v55 = (char *)v58[10];
      v70 = (char *)v58[11];
      v58[10] = v67;
      v58[11] = v56;
      v58[12] = v68;
      a3 = v62;
      if (v70 == v55) {
        goto LABEL_42;
      }
      uint64_t v39 = *(void *)v80;
      uint64_t v38 = v82;
      do
      {
        uint64_t v72 = *((void *)v70 - 2);
        v70 -= 16;
        uint64_t v71 = v72;
        if ((unint64_t)(v72 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v71 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
      }
      while (v70 != v55);
      if (!v55) {
        goto LABEL_83;
      }
LABEL_82:
      operator delete(v55);
LABEL_83:
      int v53 = v84;
LABEL_84:
      v10[11] = v56;
      if (v53) {
        atomic_fetch_add((atomic_ullong *volatile)(v46 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
LABEL_86:
      __n128 v37 = llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v86, (uint64_t)v85);
      unint64_t v40 = v87.n128_u64[0];
      if (*(void *)&v86[0] == v38 && v87.n128_u64[0] == v39) {
        goto LABEL_91;
      }
    }
    int v52 = *(_DWORD *)(*(void *)(*(void *)(v41 + 16) + 24) + (*(void *)(v41 + 24) & 0x1FFFFFFFFFFFFFFLL) + 4);
    if (v47 > 0xFFFFFFFFFFFFFFDFLL)
    {
      int v53 = 0;
      goto LABEL_64;
    }
    goto LABEL_62;
  }
LABEL_91:
  *a3 = 0;
  if (HIDWORD(v93) && v93)
  {
    unint64_t v74 = 0;
    uint64_t v75 = 8 * v93;
    do
    {
      uint64_t v76 = v92[v74 / 8];
      if (v76 != -8 && v76 != 0)
      {
        uint64_t v78 = *(void *)(v76 + 8);
        if ((unint64_t)(v78 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v78 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        MEMORY[0x263E500A0](v37);
      }
      v74 += 8;
    }
    while (v75 != v74);
  }
  free(v92);
LABEL_103:
  std::mutex::unlock(v7);
}

double llvm::jitlink::LinkGraph::defined_symbols@<D0>(llvm::jitlink::LinkGraph *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (void *)*((void *)this + 23);
  uint64_t v4 = *((unsigned int *)this + 50);
  uint64_t v5 = &v3[3 * v4];
  if (*((_DWORD *)this + 48))
  {
    if (v4)
    {
      uint64_t v6 = 24 * v4;
      while (*v3 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v3 += 3;
        v6 -= 24;
        if (!v6) {
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v3 = v5;
  }
  v16[0] = v3;
  v16[1] = v5;
  char v17 = 1;
  *(void *)&long long v14 = v5;
  *((void *)&v14 + 1) = v5;
  char v15 = 1;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::nested_collection_iterator((uint64_t)v18, v16, &v14);
  v12[0] = v5;
  v12[1] = v5;
  char v13 = 1;
  *(void *)&long long v10 = v5;
  *((void *)&v10 + 1) = v5;
  char v11 = 1;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::nested_collection_iterator((uint64_t)(a2 + 4), v12, &v10);
  long long v7 = v18[1];
  *a2 = v18[0];
  a2[1] = v7;
  double result = *(double *)&v19;
  long long v9 = v20;
  a2[2] = v19;
  a2[3] = v9;
  return result;
}

__n128 llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v5 = (void *)(*(void *)(a1 + 48) + 8);
  *(void *)(a1 + 48) = v5;
  while (v5 != v4 && (*v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
    *(void *)(a1 + 48) = ++v5;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::moveToNonEmptyInnerOrEnd((void *)a1);
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v6;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v8;
  return result;
}

uint64_t llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::nested_collection_iterator(uint64_t a1, void *a2, long long *a3)
{
  long long v4 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = a2[2];
  *(_OWORD *)a1 = v4;
  long long v5 = *a3;
  *(void *)(a1 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 24) = v5;
  if (*a2 == *(void *)a3)
  {
    uint64_t v7 = 0;
    long long v6 = 0;
  }
  else
  {
    long long v6 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(*(void *)(*a2 + 16) + 56);
  }
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::moveToNonEmptyInnerOrEnd((void *)a1);
  return a1;
}

void *llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::moveToNonEmptyInnerOrEnd(void *result)
{
  uint64_t v1 = *result;
  if (*result != result[3])
  {
    uint64_t v2 = result;
    uint64_t v3 = result + 6;
    do
    {
      uint64_t v4 = *(void *)(v1 + 16);
      __n128 result = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v4 + 56);
      if (*v3 != *(void *)(v4 + 56) + 8 * *(unsigned int *)(v4 + 72)) {
        break;
      }
      long long v5 = (void *)v2[1];
      long long v6 = (void *)(*v2 + 24);
      void *v2 = v6;
      if (v6 != v5)
      {
        while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v6 += 3;
          void *v2 = v6;
          if (v6 == v5)
          {
            long long v6 = v5;
            break;
          }
        }
      }
      if (v6 == (void *)v2[3])
      {
        *uint64_t v3 = 0;
        v3[1] = 0;
        return result;
      }
      __n128 result = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v6[2] + 56);
      uint64_t v1 = *v2;
      uint64_t v7 = v2[3];
      v2[6] = result;
      v2[7] = v8;
    }
    while (v1 != v7);
  }
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#3}>(llvm::jitlink::LinkGraph *this@<X1>, uint64_t *a2@<X0>, void *a3@<X8>)
{
  uint64_t v4 = *a2;
  llvm::jitlink::LinkGraph::defined_symbols(this, v19);
  v17[0] = v19[0];
  v17[1] = v19[1];
  void v17[2] = v19[2];
  long long v18 = v20;
  uint64_t v5 = v21;
  uint64_t v6 = v22;
  uint64_t v7 = (void **)v20;
  if (*(void *)&v19[0] != v21 || (void)v20 != v22)
  {
    while (1)
    {
      if ((*((unsigned char *)*v7 + 31) & 0x20) != 0)
      {
        llvm::orc::addFunctionPointerRelocationsToCurrentSymbol(*v7, (uint64_t)this, *(void **)(v4 + 64), *(void *)(v4 + 40), &v16);
        uint64_t v8 = v16;
        if (v16) {
          break;
        }
      }
LABEL_20:
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v17, (uint64_t)v15);
      uint64_t v7 = (void **)v18;
      if (*(void *)&v17[0] == v5 && (void)v18 == v6) {
        goto LABEL_25;
      }
    }
    uint64_t v16 = 0;
    if ((*(unsigned int (**)(void *, void *))(*v8 + 48))(v8, &llvm::ErrorList::ID))
    {
      long long v10 = (void ***)v8[1];
      long long v9 = (void ***)v8[2];
      if (v10 != v9)
      {
        char v11 = 0;
        do
        {
          int64x2_t v24 = v11;
          int v12 = *v10;
          *long long v10 = 0;
          if ((*((unsigned int (**)(void **, void *))*v12 + 6))(v12, &llvm::ErrorInfoBase::ID))
          {
            (*((void (**)(void **))*v12 + 1))(v12);
            int v12 = 0;
          }
          size_t v23 = v12;
          llvm::ErrorList::join(&v24, &v23, v15);
          char v11 = v15[0];
          v15[0] = 0;
          if (v23) {
            (*((void (**)(void **))*v23 + 1))(v23);
          }
          if (v24) {
            (*((void (**)(void **))*v24 + 1))(v24);
          }
          ++v10;
        }
        while (v10 != v9);
      }
    }
    else if (!(*(unsigned int (**)(void *, void *))(*v8 + 48))(v8, &llvm::ErrorInfoBase::ID))
    {
      goto LABEL_18;
    }
    (*(void (**)(void *))(*v8 + 8))(v8);
LABEL_18:
    if (v16) {
      (*(void (**)(void *))(*v16 + 8))(v16);
    }
    goto LABEL_20;
  }
LABEL_25:
  *a3 = 0;
}

uint64_t llvm::orc::GenericNamedTaskImpl<xojit::ReplacementManager::~ReplacementManager()::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(void *)a1 = &unk_270DBB8B0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void llvm::orc::GenericNamedTaskImpl<xojit::ReplacementManager::~ReplacementManager()::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(void *)a1 = &unk_270DBB8B0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  JUMPOUT(0x263E500B0);
}

void *llvm::RTTIExtends<llvm::orc::GenericNamedTask,llvm::orc::Task>::dynamicClassID()
{
  return &llvm::orc::GenericNamedTask::ID;
}

uint64_t llvm::RTTIExtends<llvm::orc::GenericNamedTask,llvm::orc::Task>::isA(uint64_t a1, void *a2)
{
  BOOL v3 = a2 == &llvm::orc::Task::ID || a2 == &llvm::RTTIRoot::ID;
  return a2 == &llvm::orc::GenericNamedTask::ID || v3;
}

llvm::raw_ostream *llvm::orc::GenericNamedTaskImpl<xojit::ReplacementManager::~ReplacementManager()::$_0>::printDescription(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 16));
}

intptr_t llvm::orc::GenericNamedTaskImpl<xojit::ReplacementManager::~ReplacementManager()::$_0>::run(uint64_t a1)
{
  return dispatch_semaphore_signal(**(dispatch_semaphore_t **)(a1 + 8));
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, char *__s)
{
  if (__s) {
    size_t v4 = strlen(__s);
  }
  else {
    size_t v4 = 0;
  }
  return llvm::raw_ostream::operator<<(a1, __s, v4);
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *this, const void *a2, size_t __n)
{
  uint64_t v6 = *((void *)this + 3);
  uint64_t v5 = (void *)*((void *)this + 4);
  if (__n <= v6 - (uint64_t)v5)
  {
    if (__n)
    {
      memcpy(v5, a2, __n);
      *((void *)this + 4) += __n;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)a2, __n);
  }
  return this;
}

uint64_t llvm::Expected<llvm::orc::MaterializationUnit::Interface>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(void *)a1;
    *(void *)a1 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t *)a1);
  }
  return a1;
}

uint64_t *llvm::orc::JITDylib::define<llvm::orc::BasicObjectLayerMaterializationUnit>(std::unique_ptr<llvm::orc::BasicObjectLayerMaterializationUnit> &&,llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>)::{lambda(void)#1}::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  size_t v4 = *(llvm::orc::JITDylib **)a1;
  __n128 result = llvm::orc::JITDylib::defineImpl(*(llvm::orc::JITDylib **)a1, **(llvm::orc::MaterializationUnit ***)(a1 + 8), a2);
  if (!*a2)
  {
    if (!**(void **)(a1 + 16))
    {
      llvm::orc::JITDylib::getDefaultResourceTracker(v4, &v12);
      uint64_t v6 = *(atomic_uint ***)(a1 + 16);
      uint64_t v7 = *v6;
      *uint64_t v6 = v12;
      if (v7) {
        llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v7);
      }
    }
    uint64_t v8 = *(void *)(*((void *)v4 + 4) + 80);
    if (!v8
      || (__n128 result = (uint64_t *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v8 + 32))(v8, **(void **)(a1 + 16), **(void **)(a1 + 8)), !*a2))
    {
      long long v9 = *(std::__shared_weak_count_vtbl ***)(a1 + 8);
      long long v10 = *v9;
      *long long v9 = 0;
      char v11 = v10;
      llvm::orc::JITDylib::installMaterializationUnit((uint64_t)v4, &v11, **(void **)(a1 + 16));
      __n128 result = (uint64_t *)v11;
      char v11 = 0;
      if (result) {
        __n128 result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
      *a2 = 0;
    }
  }
  return result;
}

void *std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void *)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t *)a1);
  }
  return a1;
}

uint64_t *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = 24 * v2;
    do
    {
      if ((unint64_t)(*(void *)v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(*(void *)v3 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v3 += 24;
      v4 -= 24;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x263E500A0](v3, 8);
  return a1;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0) {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&>((uint64_t)a1, v7, a2);
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&>(uint64_t a1, void *a2, uint64_t *a3)
{
  __n128 result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*result - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(*result + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v5 = *a3;
  *__n128 result = *a3;
  if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 1uLL);
  }
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 24 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      long long v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -8)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -16;
        }
        if (v12) {
          long long v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 24 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::grow(a1, v7);
  long long v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -8) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::grow(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::moveFromOldBuckets(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = -8;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      *int v7 = -8;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *v4;
      if ((*v4 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        uint64_t v11 = 0;
        uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)v5, v4, &v11);
        uint64_t v10 = v11;
        if ((unint64_t)(*(void *)v11 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(*(void *)v11 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        *(void *)uint64_t v10 = 0;
        *(void *)uint64_t v10 = *v4;
        *uint64_t v4 = 0;
        *(_OWORD *)(v10 + 8) = *(_OWORD *)(v4 + 1);
        ++*(_DWORD *)(v5 + 8);
        uint64_t v9 = *v4;
      }
      if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v4 += 3;
    }
    while (v4 != a3);
  }
  return result;
}

void anonymous namespace'::LogManager::~LogManager(void **this)
{
}

{
  os_release(*this);
}

void xojit::XOJIT::Create()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_26B417678, memory_order_acquire) != -1)
  {
    v0[0] = &v1;
    *(void *)&long long v2 = v0;
    std::__call_once(&qword_26B417678, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<xojit::XOJIT::Create(llvm::unique_function<void ()(llvm::Error)>,std::unique_ptr<llvm::orc::ExecutorProcessControl>,llvm::unique_function<llvm::Error ()(xojit::XOJIT&)>)::$_0 &&>>);
  }
  operator new();
}

void xojit::XOJIT::~XOJIT(std::recursive_mutex *this)
{
  llvm::orc::ExecutionSession::endSession(this, &v5);
  if (v5)
  {
    uint64_t v4 = v5;
    uint64_t v5 = 0;
    llvm::orc::ExecutionSession::reportError((uint64_t)this, (uint64_t *)&v4);
    if (v4) {
      (*((void (**)(void **))*v4 + 1))(v4);
    }
    if (v5) {
      (*((void (**)(void **))*v5 + 1))(v5);
    }
  }
  long long v2 = *(atomic_uint **)&this[8].__m_.__opaque[32];
  if (v2) {
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v2);
  }
  uint64_t v3 = *(atomic_uint **)&this[8].__m_.__opaque[24];
  if (v3) {
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v3);
  }
  llvm::orc::ObjectLinkingLayer::~ObjectLinkingLayer((llvm::orc::ObjectLinkingLayer *)&this[5].__m_.__opaque[24]);
  llvm::orc::ExecutionSession::~ExecutionSession((llvm::orc::ExecutionSession *)this);
}

uint64_t llvm::orc::ExecutionSession::reportError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (void *)(a1 + 88);
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  if ((v4 & 2) == 0) {
    uint64_t v3 = (void *)*v3;
  }
  (*(void (**)(void *, uint64_t *))(v4 & 0xFFFFFFFFFFFFFFF8))(v3, &v6);
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t llvm::orc::JITDylib::addGenerator<llvm::orc::EPCDynamicLibrarySearchGenerator>(void *a1, void *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (std::recursive_mutex *)a1[4];
  v5[0] = a1;
  v5[1] = a2;
  std::recursive_mutex::lock(v3);
  llvm::orc::JITDylib::addGenerator<llvm::orc::EPCDynamicLibrarySearchGenerator>(std::unique_ptr<llvm::orc::EPCDynamicLibrarySearchGenerator>)::{lambda(void)#1}::operator()(v5);
  std::recursive_mutex::unlock(v3);
  return v2;
}

void llvm::orc::MachOPlatform::buildSimpleMachOHeaderMU()
{
}

void xojit::XOJIT::runProgramOnMainThread(uint64_t a1)
{
  v3[8] = *MEMORY[0x263EF8340];
  v3[0] = *(void *)(a1 + 544);
  llvm::orc::ExecutorProcessControl::intern(*(void *)(a1 + 72), (uint64_t *)"___xojit_executor_run_program_on_main_thread", 0x2CuLL, &v2);
  llvm::orc::ExecutionSession::lookup(a1, v3, 1uLL, (uint64_t *)&v2);
}

void *std::string::basic_string[abi:nn180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::make_unique[abi:nn180100]<llvm::orc::SimpleMachOHeaderMU,llvm::orc::MachOPlatform &,llvm::orc::SymbolStringPtr &,llvm::orc::MachOPlatform::HeaderOptions>()
{
}

uint64_t std::__optional_destruct_base<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll(a1);
    MEMORY[0x263E500A0](*(void *)a1, 8);
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(uint64_t **)result;
    uint64_t v3 = 24 * v1;
    do
    {
      uint64_t v4 = *v2;
      if ((*v2 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        uint64_t v5 = v2[1];
        if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 0xFFFFFFFFFFFFFFFFLL);
          uint64_t v4 = *v2;
        }
      }
      if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v2 += 3;
      v3 -= 24;
    }
    while (v3);
  }
  return result;
}

void std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  a1[1] = v2;
}

atomic_uint *llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(atomic_uint *result)
{
  unsigned int add = atomic_fetch_add(result, 0xFFFFFFFF);
  if (result && add == 1)
  {
    llvm::orc::JITDylib::~JITDylib((llvm::orc::JITDylib *)result);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

uint64_t *llvm::Expected<std::unique_ptr<llvm::orc::EPCDynamicLibrarySearchGenerator>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v3) {
LABEL_5:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else if (v3)
  {
    goto LABEL_5;
  }
  return a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<xojit::XOJIT::XOJIT(llvm::unique_function<void ()(llvm::Error)>,std::unique_ptr<llvm::orc::ExecutorProcessControl>,llvm::unique_function<llvm::Error ()(xojit::XOJIT&)>,llvm::Error&)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = _MergedGlobals;
  uint64_t result = os_log_type_enabled((os_log_t)_MergedGlobals, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v7 = v2;
    llvm::toString(&v7, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v10 = p_p;
    _os_log_error_impl(&dword_261C2B000, v3, OS_LOG_TYPE_ERROR, "error: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t result = v7;
    if (v7) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  else if (v2)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
    return v5(v2);
  }
  return result;
}

char **llvm::toString@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  v21[6] = *MEMORY[0x263EF8340];
  uint64_t v20 = 0x200000000;
  uint64_t v18 = *a1;
  long long v19 = (char *)v21;
  *a1 = 0;
  char v17 = &v19;
  llvm::handleAllErrors<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v18, (uint64_t *)&v17);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v3 = v19;
  uint64_t v4 = v20;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if (v4)
  {
    uint64_t v5 = 0;
    std::string::size_type v6 = v4 - 1;
    do
    {
      if (v3[v5 + 23] < 0) {
        uint64_t v7 = *(void *)&v3[v5 + 8];
      }
      else {
        uint64_t v7 = v3[v5 + 23];
      }
      v6 += v7;
      v5 += 24;
    }
    while (24 * v4 != v5);
    std::string::reserve(a2, v6);
    int v8 = v3[23];
    uint64_t v9 = v8 >= 0 ? v3 : *(const std::string::value_type **)v3;
    std::string::size_type v10 = v8 >= 0 ? v3[23] : *((void *)v3 + 1);
    std::string::append(a2, v9, v10);
    if (v4 != 1)
    {
      uint64_t v11 = v3 + 24;
      uint64_t v12 = 24 * v4 - 24;
      do
      {
        std::string::append(a2, "\n", 1uLL);
        int v13 = v11[23];
        if (v13 >= 0) {
          long long v14 = v11;
        }
        else {
          long long v14 = *(const std::string::value_type **)v11;
        }
        if (v13 >= 0) {
          std::string::size_type v15 = v11[23];
        }
        else {
          std::string::size_type v15 = *((void *)v11 + 1);
        }
        std::string::append(a2, v14, v15);
        v11 += 24;
        v12 -= 24;
      }
      while (v12);
    }
  }
  return llvm::SmallVector<std::string,2u>::~SmallVector(&v19);
}

uint64_t llvm::handleAllErrors<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  llvm::handleErrors<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t)&v3, a2, &v4);
  uint64_t result = v3;
  if (v3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return result;
}

uint64_t llvm::handleErrors<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void **)result;
  if (*(void *)result)
  {
    *(void *)uint64_t result = 0;
    if ((*(unsigned int (**)(void *, void *))(*v4 + 48))(v4, &llvm::ErrorList::ID))
    {
      *a3 = 0;
      std::string::size_type v6 = (uint64_t *)v4[1];
      uint64_t v7 = (uint64_t *)v4[2];
      if (v6 != v7)
      {
        int v8 = 0;
        do
        {
          long long v14 = v8;
          uint64_t v9 = *v6;
          *std::string::size_type v6 = 0;
          uint64_t v12 = v9;
          llvm::handleErrorImpl<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v12, a2, (uint64_t *)&v13);
          llvm::ErrorList::join(&v14, (void ***)&v13, &v15);
          int v8 = v15;
          *a3 = (uint64_t)v15;
          std::string::size_type v15 = 0;
          if (v13) {
            (*v13)[1]((void **)v13);
          }
          uint64_t v10 = v12;
          uint64_t v12 = 0;
          if (v10) {
            (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
          }
          if (v14) {
            (*((void (**)(void **))*v14 + 1))(v14);
          }
          ++v6;
        }
        while (v6 != v7);
      }
      return (*(uint64_t (**)(void *))(*v4 + 8))(v4);
    }
    else
    {
      uint64_t v11 = v4;
      llvm::handleErrorImpl<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v11, a2, a3);
      uint64_t result = (uint64_t)v11;
      uint64_t v11 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::handleErrorImpl<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)*a1 + 48))(*a1, &llvm::ErrorInfoBase::ID);
  uint64_t v7 = *a1;
  *a1 = 0;
  if (result)
  {
    uint64_t v8 = v7;
    llvm::ErrorHandlerTraits<void (&)(llvm::ErrorInfoBase &)>::apply<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(a2, &v8, a3);
    uint64_t result = v8;
    uint64_t v8 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *a3 = v7;
  }
  return result;
}

void llvm::ErrorHandlerTraits<void (&)(llvm::ErrorInfoBase &)>::apply<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  (*(void (**)(void **__return_ptr, void))(*(void *)*a2 + 24))(__p, *a2);
  unint64_t v5 = llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>(v4, (unint64_t)__p, 1);
  uint64_t v6 = *(void *)v4 + 24 * *(unsigned int *)(v4 + 8);
  long long v7 = *(_OWORD *)v5;
  *(void *)(v6 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)uint64_t v6 = v7;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(void *)unint64_t v5 = 0;
  ++*(_DWORD *)(v4 + 8);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  *a3 = 0;
}

unint64_t llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v7 = *(void *)a1 + 24 * v4;
    if (*(void *)a1 <= a2 && v7 > a2)
    {
      unint64_t v9 = a2 - *(void *)a1;
      llvm::SmallVectorTemplateBase<std::string,false>::grow(a1, v5);
      return *(void *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::string,false>::grow(a1, v5);
    }
  }
  return a2;
}

void llvm::SmallVectorTemplateBase<std::string,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v6);
  llvm::SmallVectorTemplateBase<std::string,false>::moveElementsForGrow((long long **)a1, (uint64_t)v4);
  int v5 = v6;
  if (*(void *)a1 != v3) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

void llvm::SmallVectorTemplateBase<std::string,false>::moveElementsForGrow(long long **a1, uint64_t a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = 24 * v2;
    do
    {
      long long v5 = *v3;
      *(void *)(a2 + 16) = *((void *)v3 + 2);
      *(_OWORD *)a2 = v5;
      a2 += 24;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
      *(void *)uint64_t v3 = 0;
      uint64_t v3 = (long long *)((char *)v3 + 24);
      v4 -= 24;
    }
    while (v4);
    uint64_t v6 = *((unsigned int *)a1 + 2);
    if (v6)
    {
      unint64_t v7 = *a1;
      uint64_t v8 = 24 * v6;
      do
      {
        if (*((char *)v7 + v8 - 1) < 0) {
          operator delete(*(void **)((char *)v7 + v8 - 24));
        }
        v8 -= 24;
      }
      while (v8);
    }
  }
}

char **llvm::SmallVector<std::string,2u>::~SmallVector(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    do
    {
      if (v2[v4 - 1] < 0) {
        operator delete(*(void **)&v2[v4 - 24]);
      }
      v4 -= 24;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::orc::JITDylib &,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::CallImpl<xojit::XOJIT::XOJIT(llvm::unique_function<void ()(llvm::Error)>,std::unique_ptr<llvm::orc::ExecutorProcessControl>,llvm::unique_function<llvm::Error ()(xojit::XOJIT&)>,llvm::Error&)::$_1>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  int v4 = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  uint64_t v5 = *(void *)(*(void *)a1 + 72) + 40;
  uint64_t v10 = v3;
  uint64_t v7 = 0;
  uint64_t v6 = a3[1];
  a3[1] = 0;
  uint64_t v11 = v6;
  uint64_t v8 = 0;
  int v12 = v4;
  int v9 = 0;
  llvm::jitlink::absoluteSymbolsLinkGraph(v5);
}

void llvm::orc::ObjectLinkingLayer::add(uint64_t a1, llvm::orc::JITDylib *a2, llvm::jitlink::LinkGraph **a3)
{
  llvm::orc::JITDylib::getDefaultResourceTracker(a2, &v7);
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = v5;
  llvm::orc::ObjectLinkingLayer::add(a1, (uint64_t)&v7, (uint64_t *)&v6);
}

void llvm::jitlink::LinkGraph::~LinkGraph(llvm::jitlink::LinkGraph *this)
{
  uint64_t v2 = (void **)((char *)this + 256);
  std::vector<llvm::orc::shared::AllocActionCallPair>::__destroy_vector::operator()[abi:nn180100](&v2);
  MEMORY[0x263E500A0](*((void *)this + 29), 8);
  MEMORY[0x263E500A0](*((void *)this + 26), 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::destroyAll((llvm::jitlink::LinkGraph *)((char *)this + 184));
  MEMORY[0x263E500A0](*((void *)this + 23), 8);
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this);
}

void std::vector<llvm::orc::shared::AllocActionCallPair>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    int v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 14;
        std::__destroy_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,0>(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,0>(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2 != a1 + 11) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3 != a1 + 4)
  {
    free(v3);
  }
}

llvm::jitlink::Section *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::destroyAll(llvm::jitlink::Section *result)
{
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = 24 * v1;
    uint64_t v3 = (llvm::jitlink::Section **)(*(void *)result + 16);
    do
    {
      if ((unint64_t)*(v3 - 2) <= 0xFFFFFFFFFFFFFFFDLL) {
        uint64_t result = std::unique_ptr<llvm::jitlink::Section>::reset[abi:nn180100](v3, 0);
      }
      v3 += 3;
      v2 -= 24;
    }
    while (v2);
  }
  return result;
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      MEMORY[0x263E500A0](v5, 8);
      v4 -= 8;
    }
    while (v4);
  }
  uint64_t v6 = *(uint64_t **)(a1 + 64);
  uint64_t v7 = *(unsigned int *)(a1 + 72);
  if (v7)
  {
    uint64_t v8 = 16 * v7;
    do
    {
      uint64_t v9 = *v6;
      v6 += 2;
      MEMORY[0x263E500A0](v9, 8);
      v8 -= 16;
    }
    while (v8);
    uint64_t v6 = *(uint64_t **)(a1 + 64);
  }
  if (v6 != (uint64_t *)(a1 + 80)) {
    free(v6);
  }
  uint64_t v10 = *(void **)(a1 + 16);
  if (v10 != (void *)(a1 + 32)) {
    free(v10);
  }
  return a1;
}

void llvm::orc::JITDylib::addGenerator<llvm::orc::EPCDynamicLibrarySearchGenerator>(std::unique_ptr<llvm::orc::EPCDynamicLibrarySearchGenerator>)::{lambda(void)#1}::operator()(void **a1)
{
  uint64_t v1 = *a1;
  std::shared_ptr<llvm::orc::DefinitionGenerator>::shared_ptr[abi:nn180100]<llvm::orc::EPCDynamicLibrarySearchGenerator,std::default_delete<llvm::orc::EPCDynamicLibrarySearchGenerator>,void>((uint64_t *)&v20, a1[1]);
  uint64_t v2 = (_OWORD *)v1[24];
  unint64_t v3 = v1[25];
  if ((unint64_t)v2 >= v3)
  {
    uint64_t v4 = v1[23];
    uint64_t v5 = ((uint64_t)v2 - v4) >> 4;
    unint64_t v6 = v5 + 1;
    if ((unint64_t)(v5 + 1) >> 60) {
      abort();
    }
    uint64_t v7 = v3 - v4;
    if (v7 >> 3 > v6) {
      unint64_t v6 = v7 >> 3;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v8 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v8 = v6;
    }
    int64x2_t v24 = v1 + 25;
    uint64_t v9 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(v1 + 25), v8);
    uint64_t v11 = &v9[16 * v5];
    *(_OWORD *)uint64_t v11 = v20;
    long long v20 = 0uLL;
    int v13 = (void *)v1[23];
    int v12 = (void *)v1[24];
    if (v12 == v13)
    {
      int64x2_t v16 = vdupq_n_s64((unint64_t)v12);
      long long v14 = &v9[16 * v5];
    }
    else
    {
      long long v14 = &v9[16 * v5];
      do
      {
        long long v15 = *((_OWORD *)v12 - 1);
        v12 -= 2;
        *((_OWORD *)v14 - 1) = v15;
        v14 -= 16;
        *int v12 = 0;
        v12[1] = 0;
      }
      while (v12 != v13);
      int64x2_t v16 = *(int64x2_t *)(v1 + 23);
    }
    char v17 = v11 + 16;
    v1[23] = v14;
    v1[24] = v11 + 16;
    int64x2_t v22 = v16;
    uint64_t v18 = v1[25];
    v1[25] = &v9[16 * v10];
    uint64_t v23 = v18;
    uint64_t v21 = v16.i64[0];
    std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((void **)&v21);
    long long v19 = (std::__shared_weak_count *)*((void *)&v20 + 1);
    v1[24] = v17;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v19);
    }
  }
  else
  {
    _OWORD *v2 = v20;
    v1[24] = v2 + 1;
  }
}

void **std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::clear[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

uint64_t *std::shared_ptr<llvm::orc::DefinitionGenerator>::shared_ptr[abi:nn180100]<llvm::orc::EPCDynamicLibrarySearchGenerator,std::default_delete<llvm::orc::EPCDynamicLibrarySearchGenerator>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<llvm::orc::EPCDynamicLibrarySearchGenerator  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t std::__shared_ptr_pointer<llvm::orc::EPCDynamicLibrarySearchGenerator  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void anonymous namespace'::RejectMismatchedArchitectures::~RejectMismatchedArchitectures(_anonymous_namespace_::RejectMismatchedArchitectures *this)
{
}

void *anonymous namespace'::RejectMismatchedArchitectures::modifyPassConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (long long *)*a4;
  *(void *)&long long v6 = a2;
     + 2;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::insert(a4, v4, &v6);
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v6);
}

void llvm::orc::ObjectLinkingLayer::Plugin::notifyEmitted(void *a1@<X8>)
{
  *a1 = 0;
}

void anonymous namespace'::RejectMismatchedArchitectures::notifyFailed(void *a1@<X8>)
{
  *a1 = 0;
}

void anonymous namespace'::RejectMismatchedArchitectures::notifyRemovingResources(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<anonymous namespace'::RejectMismatchedArchitectures::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1}>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)(**(void **)result + 32) + 72);
  if (*(_DWORD *)(a2 + 144) != *(_DWORD *)(v4 + 64) || *(_DWORD *)(a2 + 164) != *(_DWORD *)(v4 + 84))
  {
    std::operator+<char>();
    uint64_t v5 = std::string::append(&v19, " with triple ", 0xDuLL);
    std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    int v7 = *(char *)(a2 + 143);
    if (v7 >= 0) {
      uint64_t v8 = (const std::string::value_type *)(a2 + 120);
    }
    else {
      uint64_t v8 = *(const std::string::value_type **)(a2 + 120);
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *(unsigned __int8 *)(a2 + 143);
    }
    else {
      std::string::size_type v9 = *(void *)(a2 + 128);
    }
    uint64_t v10 = std::string::append(&v20, v8, v9);
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    int v12 = std::string::append(&v21, " into process with triple ", 0x1AuLL);
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = *(char *)(v4 + 63);
    if (v14 >= 0) {
      long long v15 = (const std::string::value_type *)(v4 + 40);
    }
    else {
      long long v15 = *(const std::string::value_type **)(v4 + 40);
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 *)(v4 + 63);
    }
    else {
      std::string::size_type v16 = *(void *)(v4 + 48);
    }
    char v17 = std::string::append(&v22, v15, v16);
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    long long v23 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v24 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    getErrorErrorCat();
    llvm::make_error<llvm::StringError,std::string,std::error_code>();
  }
  *a3 = 0;
  return result;
}

void llvm::detail::UniqueFunctionBase<std::unique_ptr<llvm::orc::MaterializationUnit>,llvm::orc::MachOPlatform &,llvm::orc::MachOPlatform::HeaderOptions>::CallImpl<std::unique_ptr<llvm::orc::MaterializationUnit> (*)(llvm::orc::MachOPlatform &,llvm::orc::MachOPlatform::HeaderOptions)>(void (**a1)(uint64_t, void **), uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *a1;
  LOBYTE(v6[0]) = 0;
  char v10 = 0;
  if (*(unsigned char *)(a3 + 40))
  {
    *(_OWORD *)std::string::size_type v6 = *(_OWORD *)a3;
    uint64_t v4 = *(void *)(a3 + 16);
    uint64_t v5 = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    uint64_t v7 = v4;
    uint64_t v8 = v5;
    int v9 = *(_DWORD *)(a3 + 32);
    char v10 = 1;
  }
  long long v11 = *(_OWORD *)(a3 + 48);
  uint64_t v12 = *(void *)(a3 + 64);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  long long v13 = *(_OWORD *)(a3 + 72);
  uint64_t v14 = *(void *)(a3 + 88);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)(a3 + 96);
  uint64_t v16 = *(void *)(a3 + 112);
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 96) = 0;
  v3(a2, v6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  char v17 = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v17);
  char v17 = (void **)&v11;
  std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](&v17);
  if (v10)
  {
    if (SHIBYTE(v7) < 0) {
      operator delete(v6[0]);
    }
  }
}

uint64_t *llvm::Expected<std::unique_ptr<llvm::orc::MachOPlatform>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v3) {
LABEL_5:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else if (v3)
  {
    goto LABEL_5;
  }
  return a1;
}

uint64_t *llvm::Expected<std::unique_ptr<llvm::orc::GDBJITDebugInfoRegistrationPlugin>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v3) {
LABEL_5:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else if (v3)
  {
    goto LABEL_5;
  }
  return a1;
}

void llvm::make_error<llvm::StringError,char const*&,std::error_code>()
{
}

void *llvm::orc::shared::detail::ResultDeserializer<long long,long long>::deserialize@<X0>(void *result@<X0>, void *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (a3 <= 7)
  {
    getErrorErrorCat();
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
  }
  *uint64_t result = *a2;
  *a4 = 0;
  return result;
}

char *llvm::orc::shared::WrapperFunctionResult::createOutOfBandError@<X0>(llvm::orc::shared::WrapperFunctionResult *this@<X0>, char **a2@<X8>)
{
  a2[1] = 0;
  size_t v5 = strlen((const char *)this);
  std::string::size_type v6 = (char *)malloc_type_malloc(v5 + 1, 0x586EBFFAuLL);
  uint64_t result = strcpy(v6, (const char *)this);
  *a2 = result;
  return result;
}

uint64_t llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,llvm::StringRef,void>::serialize(void *a1, const void *a2, size_t __n)
{
  if (a1[1] < 8uLL) {
    return 0;
  }
  *(void *)*a1 = __n;
  uint64_t v5 = a1[1];
  std::string::size_type v6 = (void *)(*a1 + 8);
  *a1 = v6;
  a1[1] = v5 - 8;
  if (__n)
  {
    if (v5 - 8 < __n) {
      return 0;
    }
    memcpy(v6, a2, __n);
    size_t v8 = a1[1] - __n;
    *a1 += __n;
    a1[1] = v8;
  }
  return 1;
}

void llvm::orc::ExecutorProcessControl::callWrapper()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void std::future<llvm::orc::shared::WrapperFunctionResult>::get(atomic_ullong **a1@<X0>, _OWORD *a2@<X8>)
{
  char v2 = *a1;
  *a1 = 0;
  std::__assoc_state<llvm::orc::shared::WrapperFunctionResult>::move((uint64_t)v2, a2);
  if (v2 && !atomic_fetch_add(v2 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = *(void (**)(atomic_ullong *))(*v2 + 16);
    v3(v2);
  }
}

void std::__assoc_state<llvm::orc::shared::WrapperFunctionResult>::~__assoc_state(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  char v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;
  uint64_t vars8;

  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  char v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x263E500B0);
}

uint64_t std::__assoc_state<llvm::orc::shared::WrapperFunctionResult>::__on_zero_shared(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    unint64_t v2 = *(void *)(a1 + 152);
    if (v2 >= 9)
    {
      uint64_t v3 = *(void **)(a1 + 144);
LABEL_4:
      free(v3);
      goto LABEL_7;
    }
    if (!v2)
    {
      uint64_t v3 = *(void **)(a1 + 144);
      if (v3) {
        goto LABEL_4;
      }
    }
  }
LABEL_7:
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 8);
  return v4(a1);
}

void llvm::detail::UniqueFunctionBase<void,llvm::orc::shared::WrapperFunctionResult>::CallImpl<llvm::orc::ExecutorProcessControl::callWrapper(llvm::orc::ExecutorAddr,llvm::ArrayRef<char>)::{lambda(llvm::orc::shared::WrapperFunctionResult)#1}>(uint64_t **a1, uint64_t a2)
{
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  std::promise<llvm::orc::shared::WrapperFunctionResult>::set_value(*a1, (uint64_t)v4);
  if (v4[1] >= (void *)9)
  {
    unint64_t v2 = v4[0];
LABEL_7:
    free(v2);
    return;
  }
  unint64_t v2 = v4[0];
  if (v4[1]) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v4[0] == 0;
  }
  if (!v3) {
    goto LABEL_7;
  }
}

void std::promise<llvm::orc::shared::WrapperFunctionResult>::set_value(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (v2)
  {
  }
  else
  {
    uint64_t v2 = std::__throw_future_error[abi:nn180100]();
  }
  std::__assoc_state<llvm::orc::shared::WrapperFunctionResult>::set_value<llvm::orc::shared::WrapperFunctionResult>(v2, a2);
}

void std::__assoc_state<llvm::orc::shared::WrapperFunctionResult>::set_value<llvm::orc::shared::WrapperFunctionResult>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v8.__ptr_ = 0, uint64_t v5 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v8), v5))
  {
    uint64_t v6 = std::__throw_future_error[abi:nn180100]();
    std::__assoc_state<llvm::orc::shared::WrapperFunctionResult>::move(v6, v7);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a1 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
    std::mutex::unlock(v4);
  }
}

void std::__assoc_state<llvm::orc::shared::WrapperFunctionResult>::move(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  uint64_t v4 = *(void *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
  }
  else
  {
    *a2 = *(_OWORD *)(a1 + 144);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
  }
}

void llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>()
{
}

uint64_t _GLOBAL__sub_I_XOJIT_cpp()
{
  _MergedGlobals = (uint64_t)os_log_create("com.apple.XOJIT", "XOJIT");
}

uint64_t XOJIT_XOJIT_LoadDylib(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 72) + 16))(&v5);
  if (v6) {
    return v5;
  }
  uint64_t result = 0;
  *a3 = v5;
  return result;
}

atomic_uint *XOJIT_XOJIT_GetPlatformJITDylibRetained(uint64_t a1)
{
  uint64_t v1 = *(atomic_uint **)(a1 + 544);
  if (v1)
  {
    atomic_fetch_add_explicit(v1, 1u, memory_order_relaxed);
    atomic_fetch_add_explicit(v1, 1u, memory_order_relaxed);
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v1);
  }
  else
  {
    atomic_fetch_add_explicit(0, 1u, memory_order_relaxed);
  }
  return v1;
}

void XOJIT_OrcRTJITDlopen(uint64_t a1)
{
  v18[9] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(atomic_uint **)(a1 + 544);
  if (v2)
  {
    atomic_fetch_add_explicit(v2, 1u, memory_order_relaxed);
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v2);
    BOOL v3 = *(atomic_uint **)(a1 + 544);
    if (v3) {
      atomic_fetch_add_explicit(v3, 1u, memory_order_relaxed);
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  std::string __p = 0;
  char v17 = 0;
  v18[0] = 0;
  std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>::reserve(&__p, 1uLL);
  uint64_t v4 = v17;
  if ((unint64_t)v17 >= v18[0])
  {
    uint64_t v6 = (v17 - (unsigned char *)__p) >> 4;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 60) {
      abort();
    }
    uint64_t v8 = v18[0] - (void)__p;
    if ((uint64_t)(v18[0] - (void)__p) >> 3 > v7) {
      unint64_t v7 = v8 >> 3;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9) {
      char v10 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)v18, v9);
    }
    else {
      char v10 = 0;
    }
    long long v11 = (atomic_uint **)&v10[16 * v6];
    uint64_t v12 = &v10[16 * v9];
    *long long v11 = v3;
    v11[1] = 0;
    uint64_t v5 = (char *)(v11 + 2);
    uint64_t v14 = (char *)__p;
    long long v13 = v17;
    if (v17 != __p)
    {
      do
      {
        *((_OWORD *)v11 - 1) = *((_OWORD *)v13 - 1);
        v11 -= 2;
        v13 -= 16;
      }
      while (v13 != v14);
      long long v13 = (char *)__p;
    }
    std::string __p = v11;
    char v17 = v5;
    v18[0] = v12;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *(void *)char v17 = v3;
    *((void *)v4 + 1) = 0;
    uint64_t v5 = v4 + 16;
  }
  char v17 = v5;
  llvm::orc::ExecutorProcessControl::intern(*(void *)(a1 + 72), (uint64_t *)"___orc_rt_jit_dlopen_wrapper", 0x1CuLL, &v15);
  llvm::orc::ExecutionSession::lookup(a1, (uint64_t)&__p, (uint64_t *)&v15);
}

void XOJIT_XOJIT_RunAsMain(uint64_t a1, char *__s, const char *a3, int a4, const char **a5)
{
  v13[6] = *MEMORY[0x263EF8340];
  v12[0] = v13;
  v12[1] = (void *)0x300000000;
  if (a4 >= 4) {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v12, v13, a4, 16);
  }
  if (a4 >= 1)
  {
    uint64_t v10 = a4;
    do
    {
      if (*a5) {
        size_t v11 = strlen(*a5);
      }
      else {
        size_t v11 = 0;
      }
      llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)v12, (uint64_t)*a5++, v11);
      --v10;
    }
    while (v10);
  }
  if (__s)
  {
    strlen(__s);
    if (!a3) {
      goto LABEL_13;
    }
  }
  else if (!a3)
  {
LABEL_13:
    xojit::XOJIT::runProgramOnMainThread(a1);
  }
  strlen(a3);
  goto LABEL_13;
}

void XOJIT_XOJIT_RunOnAnyThread(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(atomic_uint **)(a1 + 544);
  if (v2) {
    atomic_fetch_add_explicit(v2, 1u, memory_order_relaxed);
  }
  v4.__first_ = (std::__split_buffer<std::string>::pointer)v2;
  llvm::orc::ExecutorProcessControl::intern(*(void *)(a1 + 72), (uint64_t *)"___xojit_executor_run_program_wrapper", 0x25uLL, &v3);
  llvm::orc::ExecutionSession::lookup(a1, (uint64_t *)&v4, 1uLL, (uint64_t *)&v3);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    int64_t v5 = this->__end_ - this->__begin_;
    v14.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    std::vector<std::string>::pointer begin = this->__begin_;
    end = this->__end_;
    if (end == this->__begin_)
    {
      int64x2_t v12 = vdupq_n_s64((unint64_t)end);
      uint64_t v10 = (std::string *)&v6[24 * v5];
    }
    else
    {
      uint64_t v10 = (std::string *)&v6[24 * v5];
      do
      {
        long long v11 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
        v10[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v11;
        --v10;
        end[-1].__r_.__value_.__l.__size_ = 0;
        end[-1].__r_.__value_.__r.__words[2] = 0;
        end[-1].__r_.__value_.__r.__words[0] = 0;
        --end;
      }
      while (end != begin);
      int64x2_t v12 = *(int64x2_t *)&this->__begin_;
    }
    this->__begin_ = v10;
    this->__end_ = (std::vector<std::string>::pointer)&v6[24 * v5];
    *(int64x2_t *)&v14.__begin_ = v12;
    long long v13 = this->__end_cap_.__value_;
    this->__end_cap_.__value_ = (std::string *)&v6[24 * v7];
    v14.__end_cap_.__value_ = v13;
    v14.__first_ = (std::__split_buffer<std::string>::pointer)v12.i64[0];
    std::__split_buffer<std::string>::~__split_buffer(&v14);
  }
}

void XOJIT_XOJIT_CallOnAnyThread()
{
}

void XOJIT_XOJIT_RunNewInitializers(uint64_t a1)
{
  v2[2] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(atomic_uint **)(a1 + 544);
  if (v1)
  {
    atomic_fetch_add_explicit(v1, 1u, memory_order_relaxed);
    v2[0] = (uint64_t)v1;
    llvm::orc::ExecutionSession::lookup(a1, v2, 1uLL, (uint64_t *)"___orc_rt_jit_dlopen_wrapper", 0x1CuLL);
  }
  v2[0] = 0;
  llvm::orc::ExecutionSession::lookup(a1, v2, 1uLL, (uint64_t *)"___orc_rt_jit_dlopen_wrapper", 0x1CuLL);
}

void XOJIT_CreateReplacementManager()
{
}

xojit::ReplacementManager *XOJIT_DisposeReplacementManager(xojit::ReplacementManager *result)
{
  if (result) {
    xojit::ReplacementManager::~ReplacementManager(result);
  }
  return result;
}

uint64_t XOJIT_ReplacementManager_AddObjectFile(uint64_t a1, std::string::size_type a2, uint64_t a3)
{
  uint64_t v6 = a3;
  xojit::ReplacementManager::addWithReplacement(a1, a2, (uint64_t)&v6, &v7);
  uint64_t v3 = v6;
  uint64_t v4 = v7;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return v4;
}

void XOJIT_ReplacementManager_AddObjectFileAsync()
{
}

void XOJIT_ReplacementManager_ApplyPendingUpdates(xojit::ReplacementManager *a1, llvm::orc::JITDylib *a2)
{
}

uint64_t XOJIT_Error_Destroy(uint64_t a1)
{
  uint64_t v2 = a1;
  llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v2);
  uint64_t result = v2;
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return result;
}

uint64_t XOJIT_Error_IsFailedToMaterialize(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 48))(result, &llvm::orc::FailedToMaterialize::ID);
  }
  return result;
}

uint64_t XOJIT_Error_IsUnsatisfiedSymbolDependencies(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 48))(result, &llvm::orc::UnsatisfiedSymbolDependencies::ID);
  }
  return result;
}

char *XOJIT_Error_ToMessage(char *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    *(void *)__s1 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v5 = 0;
    char v9 = 0;
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v6 = 0;
    uint64_t v4 = &unk_270DBD6E0;
    int64x2_t v12 = __s1;
    llvm::raw_ostream::SetUnbuffered(&v4);
    (*(void (**)(char *, void **))(*(void *)v1 + 16))(v1, &v4);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v4);
    if (SHIBYTE(v15) < 0)
    {
      uint64_t v2 = *(char **)__s1;
      uint64_t v1 = strdup(*(const char **)__s1);
      operator delete(v2);
    }
    else
    {
      return strdup(__s1);
    }
  }
  return v1;
}

char *XOJIT_Error_DestroyToMessage(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = a1;
  llvm::toString(&v4, &__s1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return strdup((const char *)&__s1);
  }
  uint64_t v2 = (void *)__s1.__r_.__value_.__r.__words[0];
  uint64_t v1 = strdup(__s1.__r_.__value_.__l.__data_);
  operator delete(v2);
  return v1;
}

uint64_t XOJIT_MemoryBuffer_CreateWithIdentifierFromPath(unsigned char *a1, unsigned char *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a1) {
    int v5 = a1;
  }
  else {
    int v5 = a2;
  }
  char v6 = 1;
  HIBYTE(v14) = 1;
  if (*a2)
  {
    v13[0] = a2;
    char v6 = 3;
  }
  LOBYTE(v14) = v6;
  llvm::sys::fs::openNativeFileForRead((uint64_t)v13, 0, 0, (uint64_t)&v17);
  if (v18) {
    return v17;
  }
  uint64_t v7 = (llvm::sys::Process *)v17;
  char v8 = 1;
  HIBYTE(v14) = 1;
  if (*v5)
  {
    v13[0] = v5;
    char v8 = 3;
  }
  LOBYTE(v14) = v8;
  getOpenFileImpl<llvm::MemoryBuffer>(v17, (const llvm::Twine *)v13, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 1, 0, 0, (uint64_t)&v15);
  llvm::sys::Process::SafelyCloseFileDescriptor(v7);
  if (v16)
  {
    __int16 v14 = 773;
    v13[0] = "Could not create MemoryBuffer for path ";
    v13[1] = 39;
    v13[2] = a2;
    operator new();
  }
  uint64_t v9 = 0;
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  *a3 = v10;
  uint64_t v11 = v15;
  uint64_t v15 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return v9;
}

uint64_t XOJIT_MemoryBuffer_Destroy(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t XOJIT_SymbolString_Retain(uint64_t result)
{
  return result;
}

uint64_t XOJIT_SymbolString_Release(uint64_t result)
{
  return result;
}

uint64_t XOJIT_SymbolString_WithStringRepresentationsDo(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    int v5 = (void *)result;
    do
    {
      char v6 = (void *)*v5++;
      uint64_t result = (*(uint64_t (**)(uint64_t, void *, void *, void))(a3 + 16))(a3, v6, v6 + 2, *v6);
      --v4;
    }
    while (v4);
  }
  return result;
}

void XOJIT_XOJIT_CreateInProcess()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t v0 = (char *)operator new(0x70uLL);
  *((void *)v0 + 1) = 0;
  *((void *)v0 + 2) = 0;
  *(void *)uint64_t v0 = &unk_270DBBB98;
  *((_OWORD *)v0 + 2) = 0u;
  *((_OWORD *)v0 + 3) = 0u;
  *((_OWORD *)v0 + 4) = 0u;
  *((_OWORD *)v0 + 5) = 0u;
  *(_OWORD *)(v0 + 92) = 0u;
  *((_DWORD *)v0 + 27) = 16;
  uint64_t v2 = v0;
  *((void *)v0 + 3) = 850045863;
  uint64_t v1 = v0 + 24;
  _xojit_defaultConcurrency();
  operator new();
}

void XOJIT_XOJIT_CreateFromXPCWithOOPJITType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v6[13] = *MEMORY[0x263EF8340];
  v6[0] = 0;
  xojit::createXPCEPC(a5, a6, v6);
}

void XOJIT_XOJIT_Destroy(std::recursive_mutex *a1)
{
  llvm::orc::ExecutionSession::endSession(a1, &v3);
  if (v3)
  {
    uint64_t v2 = v3;
    uint64_t v3 = 0;
    llvm::orc::ExecutionSession::reportError((uint64_t)a1, (uint64_t *)&v2);
    if (v2) {
      (*((void (**)(void **))*v2 + 1))(v2);
    }
    if (v3) {
      (*((void (**)(void **))*v3 + 1))(v3);
    }
  }
  if (a1)
  {
    xojit::XOJIT::~XOJIT(a1);
    MEMORY[0x263E500B0]();
  }
}

void **XOJIT_XOJIT_EndSession(std::recursive_mutex *a1)
{
  llvm::orc::ExecutionSession::endSession(a1, &v2);
  return v2;
}

uint64_t XOJIT_XOJIT_GetTargetTriple(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  uint64_t result = v1 + 40;
  if (*(char *)(v1 + 63) < 0) {
    return *(void *)result;
  }
  return result;
}

atomic_uint *XOJIT_XOJIT_GetProgramJITDylibRetained(uint64_t a1)
{
  uint64_t v1 = *(atomic_uint **)(a1 + 552);
  if (v1)
  {
    atomic_fetch_add_explicit(v1, 1u, memory_order_relaxed);
    atomic_fetch_add_explicit(v1, 1u, memory_order_relaxed);
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v1);
  }
  else
  {
    atomic_fetch_add_explicit(0, 1u, memory_order_relaxed);
  }
  return v1;
}

void XOJIT_XOJIT_CreateJITDylib(std::recursive_mutex *a1, char *__s, uint64_t a3)
{
  v34.__r_.__value_.__s.__data_[0] = 0;
  char v37 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v39, 0, sizeof(v39));
  *(_OWORD *)__dst = 0u;
  uint64_t v41 = 0;
  if (!a3) {
    goto LABEL_51;
  }
  if (*(unsigned char *)(a3 + 40))
  {
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v34 = *(std::string *)a3;
    }
    uint64_t v35 = *(void *)(a3 + 24);
    int v36 = *(_DWORD *)(a3 + 32);
    char v37 = 1;
  }
  if (&v34 == (std::string *)a3)
  {
LABEL_51:
    std::string::basic_string[abi:nn180100]<0>(&v33, __s);
    llvm::orc::ExecutionSession::createBareJITDylib(a1);
  }
  uint64_t v7 = *(long long **)(a3 + 48);
  char v6 = *(long long **)(a3 + 56);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - (char *)v7) >> 3);
  uint64_t v9 = *(void *)&v39[0];
  uint64_t v10 = (void **)__p[0];
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v39[0] - (unint64_t)__p[0]) >> 3) >= v8)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 3) >= v8)
    {
      std::string v20 = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,0>(*(std::string **)(a3 + 48), *(std::string **)(a3 + 56), (std::string *)__p[0]);
      for (uint64_t i = (std::string *)__p[1]; i != v20; uint64_t i = (std::string *)((char *)i - 40))
      {
        if (i[-1].__r_.__value_.__s.__data_[7] < 0) {
          operator delete((void *)i[-2].__r_.__value_.__l.__size_);
        }
      }
      __p[1] = v20;
      goto LABEL_32;
    }
    uint64_t v19 = (std::string *)((char *)v7 + 8 * (((char *)__p[1] - (char *)__p[0]) >> 3));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,0>(*(std::string **)(a3 + 48), v19, (std::string *)__p[0]);
    char v16 = (std::string *)__p[1];
    char v18 = (long long *)v19;
  }
  else
  {
    if (__p[0])
    {
      uint64_t v11 = (void **)__p[1];
      int64x2_t v12 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v11 - 17) < 0) {
            operator delete(*(v11 - 5));
          }
          v11 -= 5;
        }
        while (v11 != v10);
        int64x2_t v12 = __p[0];
      }
      __p[1] = v10;
      operator delete(v12);
      uint64_t v9 = 0;
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&v39[0] = 0;
    }
    if (v8 > 0x666666666666666) {
      goto LABEL_52;
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (v9 >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= v8) {
      uint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - (char *)v7) >> 3);
    }
    unint64_t v15 = v13 >= 0x333333333333333 ? 0x666666666666666 : v14;
    if (v15 > 0x666666666666666) {
      goto LABEL_52;
    }
    char v16 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v15);
    __p[0] = v16;
    __p[1] = v16;
    *(void *)&v39[0] = (char *)v16 + 40 * v17;
    char v18 = v7;
  }
  __p[1] = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>,llvm::orc::MachOPlatform::HeaderOptions::Dylib*,llvm::orc::MachOPlatform::HeaderOptions::Dylib*,llvm::orc::MachOPlatform::HeaderOptions::Dylib*>(v18, v6, v16);
LABEL_32:
  std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)v39 + 8), *(std::string **)(a3 + 72), *(long long **)(a3 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 80) - *(void *)(a3 + 72)) >> 3));
  std::string v22 = *(char **)(a3 + 96);
  long long v23 = *(unsigned char **)(a3 + 104);
  uint64_t v24 = v23 - v22;
  unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 2);
  uint64_t v26 = (uint64_t)v41;
  unint64_t v27 = (char *)__dst[0];
  if (0xAAAAAAAAAAAAAAABLL * ((v41 - (char *)__dst[0]) >> 2) >= v25)
  {
    if (0xAAAAAAAAAAAAAAABLL * (((char *)__dst[1] - (char *)__dst[0]) >> 2) < v25)
    {
      int v32 = &v22[4 * (((char *)__dst[1] - (char *)__dst[0]) >> 2)];
      if (__dst[1] != __dst[0])
      {
        memmove(__dst[0], v22, (char *)__dst[1] - (char *)__dst[0]);
        unint64_t v27 = (char *)__dst[1];
      }
      uint64_t v24 = v23 - v32;
      if (v23 != v32) {
        memmove(v27, v32, v23 - v32);
      }
      goto LABEL_50;
    }
LABEL_48:
    if (v23 != v22) {
      memmove(v27, v22, v23 - v22);
    }
LABEL_50:
    __dst[1] = &v27[v24];
    goto LABEL_51;
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
    uint64_t v26 = 0;
    __dst[0] = 0;
    __dst[1] = 0;
    uint64_t v41 = 0;
  }
  if (v25 <= 0x1555555555555555)
  {
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v26 >> 2);
    uint64_t v29 = 2 * v28;
    if (2 * v28 <= v25) {
      uint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 2);
    }
    unint64_t v30 = v28 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v29;
    if (v30 <= 0x1555555555555555)
    {
      unint64_t v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::BuildVersionOpts>>(v30);
      __dst[0] = v27;
      __dst[1] = v27;
      uint64_t v41 = &v27[12 * v31];
      goto LABEL_48;
    }
  }
LABEL_52:
  abort();
}

void XOJIT_XOJIT_SetLoadableAtPathViaRegex(uint64_t a1, void *a2, char *__s, char *a4)
{
  uint64_t v7 = *(void *)(a1 + 344);
  if (__s)
  {
    size_t v8 = strlen(__s);
    if (a4)
    {
LABEL_3:
      size_t v9 = strlen(a4);
      goto LABEL_6;
    }
  }
  else
  {
    size_t v8 = 0;
    if (a4) {
      goto LABEL_3;
    }
  }
  size_t v9 = 0;
LABEL_6:
  llvm::orc::MachOPlatform::setLoadableAtPathRegexMatcher(v7, a2, __s, v8, a4, v9);
}

atomic_uint *XOJIT_JITDylib_Release(atomic_uint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    atomic_fetch_add_explicit(result, 1u, memory_order_relaxed);
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(result);
    return llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v1);
  }
  else
  {
    atomic_fetch_add(0, 0xFFFFFFFF);
  }
  return result;
}

uint64_t XOJIT_JITDylib_GetName(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t XOJIT_XOJIT_RemoveJITDylibAndRelease(uint64_t a1, atomic_uint *a2)
{
  if (a2) {
    atomic_fetch_add_explicit(a2, 1u, memory_order_relaxed);
  }
  llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(a2);
  atomic_fetch_add_explicit(a2, 1u, memory_order_relaxed);
  uint64_t v4 = (atomic_uint **)operator new(8uLL);
  v8[0] = v4;
  *uint64_t v4 = a2;
  v8[1] = v4 + 1;
  void v8[2] = v4 + 1;
  atomic_fetch_add_explicit(a2, 1u, memory_order_relaxed);
  llvm::orc::ExecutionSession::removeJITDylibs(a1, v8, &v7);
  size_t v9 = v8;
  std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v9);
  llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(a2);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(a2);
  return v5;
}

uint64_t XOJIT_XOJIT_AddObjectFile(uint64_t a1, llvm::orc::JITDylib *a2, uint64_t a3)
{
  uint64_t v5 = a3;
  llvm::orc::ObjectLayer::add(a1 + 352, a2, &v5, &v6);
  uint64_t v3 = v6;
  uint64_t v6 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return v3;
}

void XOJIT_XOJIT_AddObjectFileAsync()
{
}

uint64_t XOJIT_XOJIT_LinkStaticArchive(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v9 = a3;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  llvm::orc::StaticLibraryDefinitionGenerator::Create(a1 + 352, &v9, v11, v10, (uint64_t)&v12);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v11);
  uint64_t v4 = v9;
  uint64_t v9 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = v12;
  uint64_t v12 = 0;
  if ((v13 & 1) == 0)
  {
    uint64_t v8 = v5;
    llvm::orc::JITDylib::addGenerator<llvm::orc::StaticLibraryDefinitionGenerator>(a2, &v8);
    uint64_t v6 = v8;
    uint64_t v8 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v5 = 0;
  }
  llvm::Expected<std::unique_ptr<llvm::orc::EPCDynamicLibrarySearchGenerator>>::~Expected(&v12);
  return v5;
}

uint64_t llvm::orc::JITDylib::addGenerator<llvm::orc::StaticLibraryDefinitionGenerator>(void *a1, void *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (std::recursive_mutex *)a1[4];
  v5[0] = a1;
  v5[1] = a2;
  std::recursive_mutex::lock(v3);
  llvm::orc::JITDylib::addGenerator<llvm::orc::StaticLibraryDefinitionGenerator>(std::unique_ptr<llvm::orc::StaticLibraryDefinitionGenerator>)::{lambda(void)#1}::operator()(v5);
  std::recursive_mutex::unlock(v3);
  return v2;
}

void XOJIT_XOJIT_LinkStaticArchiveAsync()
{
}

uint64_t XOJIT_XOJIT_LinkStaticArchiveWithForceLoad(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  if (a4)
  {
    *(void *)&long long v16 = a1 + 352;
    *((void *)&v16 + 1) = a2;
    BOOL v17 = a4 == 2;
    char v18 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::MemoryBufferRef>::CallbacksHolder<llvm::orc::ForceLoadMachOArchiveMembers,llvm::orc::ForceLoadMachOArchiveMembers,void>::Callbacks
        + 2;
    uint64_t v7 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v19);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v7, &v16);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v16);
  }
  uint64_t v13 = a3;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v15, &v19);
  memset(v14, 0, sizeof(v14));
  llvm::orc::StaticLibraryDefinitionGenerator::Create(a1 + 352, &v13, v15, v14, (uint64_t)&v16);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v14);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v15);
  uint64_t v8 = v13;
  uint64_t v13 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v16;
  *(void *)&long long v16 = 0;
  if ((BYTE8(v16) & 1) == 0)
  {
    uint64_t v12 = v9;
    llvm::orc::JITDylib::addGenerator<llvm::orc::StaticLibraryDefinitionGenerator>(a2, &v12);
    uint64_t v10 = v12;
    uint64_t v12 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v9 = 0;
  }
  llvm::Expected<std::unique_ptr<llvm::orc::EPCDynamicLibrarySearchGenerator>>::~Expected((uint64_t *)&v16);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v19);
  return v9;
}

void XOJIT_XOJIT_LinkStaticArchiveWithForceLoadAsync()
{
}

void XOJIT_XOJIT_SymbolLookup(uint64_t a1, int a2, void *a3, char *__s, int a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  uint64_t v7 = *a3;
  if (*a3)
  {
    uint64_t v8 = a3;
    uint64_t v9 = 0;
    do
    {
      int v10 = *((_DWORD *)v8 + 2);
      if (v9 >= v27)
      {
        uint64_t v11 = (v9 - (unsigned char *)__p) >> 4;
        if ((unint64_t)(v11 + 1) >> 60) {
          abort();
        }
        unint64_t v12 = (v27 - (unsigned char *)__p) >> 3;
        if (v12 <= v11 + 1) {
          unint64_t v12 = v11 + 1;
        }
        if ((unint64_t)(v27 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)&v27, v13);
        }
        else {
          uint64_t v14 = 0;
        }
        unint64_t v15 = &v14[16 * v11];
        *(void *)unint64_t v15 = v7;
        *((_DWORD *)v15 + 2) = v10;
        BOOL v17 = (char *)__p;
        long long v16 = v26;
        char v18 = v15;
        if (v26 != __p)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v16 - 1);
            v18 -= 16;
            v16 -= 16;
          }
          while (v16 != v17);
          long long v16 = (char *)__p;
        }
        uint64_t v9 = v15 + 16;
        std::string __p = v18;
        uint64_t v26 = v15 + 16;
        unint64_t v27 = &v14[16 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(void *)uint64_t v9 = v7;
        *((_DWORD *)v9 + 2) = v10;
        v9 += 16;
      }
      uint64_t v26 = v9;
      uint64_t v19 = v8[2];
      v8 += 2;
      uint64_t v7 = v19;
    }
    while (v19);
  }
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  if (__s) {
    size_t v20 = strlen(__s);
  }
  else {
    size_t v20 = 0;
  }
  llvm::orc::ExecutorProcessControl::intern(*(void *)(a1 + 72), (uint64_t *)__s, v20, (unint64_t **)&v22);
  llvm::orc::SymbolLookupSet::add((uint64_t *)&v23, (uint64_t *)&v22, a5);
  if ((unint64_t)v22 - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add(v22 + 1, 0xFFFFFFFFFFFFFFFFLL);
  }
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v28, (uint64_t)&llvm::orc::NoDependenciesToRegister);
  llvm::orc::ExecutionSession::lookup();
}

uint64_t XOJIT_XOJIT_LoadLinkableFile(uint64_t a1, char *__s, const char *a3, int a4, uint64_t *a5, unsigned int *a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (a4 == 2) {
    int v11 = 2;
  }
  else {
    int v11 = a4 == 1;
  }
  if (__s) {
    unint64_t v12 = (void (**)(_anonymous_namespace_::ErrorErrorCategory *__hidden))strlen(__s);
  }
  else {
    unint64_t v12 = 0;
  }
  unint64_t v13 = (llvm::Triple *)(*(void *)(a1 + 72) + 40);
  v18[0] = a3;
  if (a3) {
    size_t v14 = strlen(a3);
  }
  else {
    size_t v14 = 0;
  }
  v18[1] = v14;
  char v19 = 1;
  llvm::orc::loadLinkableFile((uint64_t)__s, v12, v13, v11, (uint64_t)v18, (uint64_t)&v20);
  if (v22)
  {
    uint64_t v15 = v20;
    uint64_t v20 = 0;
  }
  else
  {
    if (v21 >= 2)
    {
      getErrorErrorCat();
      operator new();
    }
    uint64_t v15 = 0;
    *a6 = v21;
    uint64_t v16 = v20;
    uint64_t v20 = 0;
    *a5 = v16;
  }
  llvm::Expected<std::pair<std::unique_ptr<llvm::MemoryBuffer>,llvm::orc::LinkableFileKind>>::~Expected(&v20);
  return v15;
}

uint64_t XOJIT_XOJIT_GetObjectLinkingLayer(uint64_t a1)
{
  return a1 + 352;
}

unint64_t *XOJIT_XOJIT_Intern(uint64_t a1, char *__s)
{
  if (__s) {
    size_t v4 = strlen(__s);
  }
  else {
    size_t v4 = 0;
  }
  llvm::orc::ExecutorProcessControl::intern(*(void *)(a1 + 72), (uint64_t *)__s, v4, &v6);
  return v6;
}

uint64_t XOJIT_ObjectLinkingLayer_AddPlugin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  llvm::orc::ObjectLinkingLayer::addPlugin(a1, &v3);
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void XOJIT_SymbolTableCallbackPlugin_Create()
{
}

void XOJIT_MachOHeaderOptions_Create()
{
}

uint64_t XOJIT_MachOHeaderOptions_Destroy(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void **)(result + 96);
    if (v2)
    {
      *(void *)(v1 + 104) = v2;
      operator delete(v2);
    }
    uint64_t v3 = (void **)(v1 + 72);
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
    uint64_t v3 = (void **)(v1 + 48);
    std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](&v3);
    if (*(unsigned char *)(v1 + 40))
    {
      if (*(char *)(v1 + 23) < 0) {
        operator delete(*(void **)v1);
      }
    }
    return MEMORY[0x263E500B0](v1, 0x1032C40F5F4C4DBLL);
  }
  return result;
}

double XOJIT_MachOHeaderOptions_SetIDDylib(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:nn180100]<0>(&v7, *(char **)a2);
  uint64_t v9 = *(void *)(a2 + 8);
  int v10 = *(_DWORD *)(a2 + 16);
  if (*(unsigned char *)(a1 + 40))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    double result = *(double *)&v7;
    *(_OWORD *)a1 = v7;
    uint64_t v5 = v9;
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v5;
    *(_DWORD *)(a1 + 32) = v10;
  }
  else
  {
    double result = *(double *)&v7;
    *(_OWORD *)a1 = v7;
    uint64_t v6 = v9;
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v6;
    *(_DWORD *)(a1 + 32) = v10;
    *(unsigned char *)(a1 + 40) = 1;
  }
  return result;
}

void XOJIT_MachOHeaderOptions_AddLoadDylib(void *a1, uint64_t a2)
{
  std::string::basic_string[abi:nn180100]<0>(__p, *(char **)a2);
  uint64_t v27 = *(void *)(a2 + 8);
  int v28 = *(_DWORD *)(a2 + 16);
  unint64_t v4 = a1[7];
  unint64_t v5 = a1[8];
  if (v4 >= v5)
  {
    uint64_t v8 = a1[6];
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - v8) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x666666666666666) {
      abort();
    }
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v8) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12 + 40 * v9;
    long long v15 = *(_OWORD *)__p;
    *(void *)(v14 + 16) = v26;
    *(_OWORD *)unint64_t v14 = v15;
    __p[1] = 0;
    uint64_t v26 = 0;
    __p[0] = 0;
    uint64_t v16 = v27;
    *(_DWORD *)(v14 + 32) = v28;
    *(void *)(v14 + 24) = v16;
    BOOL v17 = (void **)a1[6];
    char v18 = (void **)a1[7];
    if (v18 == v17)
    {
      unint64_t v23 = v14 + 40;
      a1[6] = v14;
      a1[7] = v14 + 40;
      a1[8] = v12 + 40 * v13;
    }
    else
    {
      unint64_t v19 = v14;
      do
      {
        long long v20 = *(_OWORD *)(v18 - 5);
        *(void *)(v19 - 24) = *(v18 - 3);
        *(_OWORD *)(v19 - 40) = v20;
        *(v18 - 4) = 0;
        *(v18 - 3) = 0;
        *(v18 - 5) = 0;
        uint64_t v21 = (uint64_t)*(v18 - 2);
        *(_DWORD *)(v19 - 8) = *((_DWORD *)v18 - 2);
        *(void *)(v19 - 16) = v21;
        v19 -= 40;
        v18 -= 5;
      }
      while (v18 != v17);
      char v18 = (void **)a1[6];
      char v22 = (void **)a1[7];
      unint64_t v23 = v14 + 40;
      a1[6] = v19;
      a1[7] = v14 + 40;
      a1[8] = v12 + 40 * v13;
      while (v22 != v18)
      {
        if (*((char *)v22 - 17) < 0) {
          operator delete(*(v22 - 5));
        }
        v22 -= 5;
      }
    }
    if (v18) {
      operator delete(v18);
    }
    int v24 = SHIBYTE(v26);
    a1[7] = v23;
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)__p;
    *(void *)(v4 + 16) = v26;
    *(_OWORD *)unint64_t v4 = v6;
    uint64_t v7 = v27;
    *(_DWORD *)(v4 + 32) = v28;
    *(void *)(v4 + 24) = v7;
    a1[7] = v4 + 40;
  }
}

void XOJIT_MachOHeaderOptions_AddRPath(uint64_t a1, char *a2)
{
  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  unint64_t v3 = *(void *)(a1 + 88);
  unint64_t v4 = *(void *)(a1 + 80);
  if (v4 >= v3)
  {
    uint64_t v6 = *(void *)(a1 + 72);
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v6) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    v24.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 88);
    if (v10) {
      unint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(a1 + 88, v10);
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v12 = &v11[24 * v7];
    long long v13 = *(_OWORD *)__p;
    *((void *)v12 + 2) = v23;
    *(_OWORD *)unint64_t v12 = v13;
    __p[1] = 0;
    uint64_t v23 = 0;
    __p[0] = 0;
    uint64_t v15 = *(void *)(a1 + 72);
    unint64_t v14 = *(void *)(a1 + 80);
    if (v14 == v15)
    {
      int64x2_t v18 = vdupq_n_s64(v14);
      uint64_t v16 = &v11[24 * v7];
    }
    else
    {
      uint64_t v16 = &v11[24 * v7];
      do
      {
        long long v17 = *(_OWORD *)(v14 - 24);
        *((void *)v16 - 1) = *(void *)(v14 - 8);
        *(_OWORD *)(v16 - 24) = v17;
        v16 -= 24;
        *(void *)(v14 - 16) = 0;
        *(void *)(v14 - 8) = 0;
        *(void *)(v14 - 24) = 0;
        v14 -= 24;
      }
      while (v14 != v15);
      int64x2_t v18 = *(int64x2_t *)(a1 + 72);
    }
    unint64_t v19 = v12 + 24;
    *(void *)(a1 + 72) = v16;
    *(void *)(a1 + 80) = v12 + 24;
    *(int64x2_t *)&v24.__begin_ = v18;
    long long v20 = *(std::string **)(a1 + 88);
    *(void *)(a1 + 88) = &v11[24 * v10];
    v24.__end_cap_.__value_ = v20;
    v24.__first_ = (std::__split_buffer<std::string>::pointer)v18.i64[0];
    std::__split_buffer<std::string>::~__split_buffer(&v24);
    int v21 = SHIBYTE(v23);
    *(void *)(a1 + 80) = v19;
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v5 = *(_OWORD *)__p;
    *(void *)(v4 + 16) = v23;
    *(_OWORD *)unint64_t v4 = v5;
    *(void *)(a1 + 80) = v4 + 24;
  }
}

uint64_t XOJIT_MachOHeaderOptions_AddBuildVersionsForExecutor(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = llvm::orc::MachOPlatform::HeaderOptions::BuildVersionOpts::fromTriple(*(void *)(a2 + 72) + 40, a3);
  if ((v6 & 0xFF00000000) == 0)
  {
    std::string::basic_string[abi:nn180100]<0>(&v34, "Could not identify build version for ");
    uint64_t v12 = *(void *)(a2 + 72);
    uint64_t v15 = *(const std::string::value_type **)(v12 + 40);
    uint64_t v13 = v12 + 40;
    unint64_t v14 = v15;
    int v16 = *(char *)(v13 + 23);
    if (v16 >= 0) {
      long long v17 = (const std::string::value_type *)v13;
    }
    else {
      long long v17 = v14;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(v13 + 8);
    }
    unint64_t v19 = std::string::append(&v34, v17, v18);
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    std::string::size_type v36 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    getErrorErrorCat();
    operator new();
  }
  uint64_t v7 = v5;
  int v8 = v6;
  unint64_t v10 = a1[13];
  unint64_t v9 = a1[14];
  if (v10 >= v9)
  {
    uint64_t v21 = a1[12];
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v21) >> 2);
    unint64_t v23 = v22 + 1;
    if (v22 + 1 > 0x1555555555555555) {
      abort();
    }
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v21) >> 2);
    if (2 * v24 > v23) {
      unint64_t v23 = 2 * v24;
    }
    if (v24 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v25 = 0x1555555555555555;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25) {
      unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::BuildVersionOpts>>(v25);
    }
    else {
      uint64_t v26 = 0;
    }
    unint64_t v27 = v25 + 12 * v22;
    unint64_t v28 = v25 + 12 * v26;
    *(void *)unint64_t v27 = v7;
    *(_DWORD *)(v27 + 8) = v8;
    unint64_t v11 = v27 + 12;
    unint64_t v30 = (_DWORD *)a1[12];
    uint64_t v29 = (_DWORD *)a1[13];
    if (v29 != v30)
    {
      do
      {
        uint64_t v31 = *(void *)(v29 - 3);
        v29 -= 3;
        int v32 = v29[2];
        *(void *)(v27 - 12) = v31;
        v27 -= 12;
        *(_DWORD *)(v27 + 8) = v32;
      }
      while (v29 != v30);
      uint64_t v29 = (_DWORD *)a1[12];
    }
    a1[12] = v27;
    a1[13] = v11;
    a1[14] = v28;
    if (v29) {
      operator delete(v29);
    }
  }
  else
  {
    *(void *)unint64_t v10 = v5;
    *(_DWORD *)(v10 + 8) = v6;
    unint64_t v11 = v10 + 12;
  }
  a1[13] = v11;
  return 0;
}

void std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    unint64_t v9 = &v6[16 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(24 * a2);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:nn180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      int64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        int64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t)&v2, &v3);
  uint64_t result = v2;
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return result;
}

uint64_t llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void **)result;
  if (*(void *)result)
  {
    *(void *)uint64_t result = 0;
    if ((*(unsigned int (**)(void *, void *))(*v3 + 48))(v3, &llvm::ErrorList::ID))
    {
      *a2 = 0;
      unint64_t v4 = (void ***)v3[1];
      int64_t v5 = (void ***)v3[2];
      if (v4 != v5)
      {
        uint64_t v6 = 0;
        do
        {
          unint64_t v10 = v6;
          uint64_t v7 = *v4;
          *unint64_t v4 = 0;
          if ((*((unsigned int (**)(void **, void *))*v7 + 6))(v7, &llvm::ErrorInfoBase::ID))
          {
            (*((void (**)(void **))*v7 + 1))(v7);
            uint64_t v7 = 0;
          }
          unint64_t v9 = v7;
          llvm::ErrorList::join(&v10, &v9, &v11);
          uint64_t v6 = v11;
          *a2 = (uint64_t)v11;
          unint64_t v11 = 0;
          if (v9) {
            (*((void (**)(void **))*v9 + 1))(v9);
          }
          if (v10) {
            (*((void (**)(void **))*v10 + 1))(v10);
          }
          ++v4;
        }
        while (v4 != v5);
      }
      return (*(uint64_t (**)(void *))(*v3 + 8))(v3);
    }
    else
    {
      uint64_t v8 = v3;
      llvm::handleErrorImpl<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v8, a2);
      uint64_t result = (uint64_t)v8;
      uint64_t v8 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t llvm::handleErrorImpl<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  int v4 = (*(uint64_t (**)(uint64_t, void *))(*(void *)*a1 + 48))(*a1, &llvm::ErrorInfoBase::ID);
  uint64_t result = *a1;
  *a1 = 0;
  if (v4)
  {
    *a2 = 0;
    if (result)
    {
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 8);
      return v6();
    }
  }
  else
  {
    *a2 = result;
  }
  return result;
}

void *llvm::raw_ostream::SetUnbuffered(void *this)
{
  uint64_t v1 = this;
  uint64_t v3 = this + 2;
  uint64_t v2 = (const char *)this[2];
  int v4 = (const char *)this[4];
  uint64_t v5 = v4 - v2;
  if (v4 != v2)
  {
    this[4] = v2;
    this = (void *)llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)this, v2, v5);
  }
  if (*((_DWORD *)v1 + 14) == 1)
  {
    this = (void *)*v3;
    if (*v3) {
      this = (void *)MEMORY[0x263E50080](this, 0x1000C8077774924, v5);
    }
  }
  *((_DWORD *)v1 + 14) = 0;
  v3[1] = 0;
  void v3[2] = 0;
  *uint64_t v3 = 0;
  return this;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<createErrorReporter(XOJIT_XOJIT_ErrorReporterCallback)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  return (*(uint64_t (**)(void, uint64_t))a1)(*(void *)(a1 + 8), v2);
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,xojit::XOJIT &>::CallImpl<wrapCallback(XOJIT_XOJIT_MutatingCallback)::$_0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void))a1)(a2, *(void *)(a1 + 8));
  *a3 = result;
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>,llvm::orc::MachOPlatform::HeaderOptions::Dylib*,llvm::orc::MachOPlatform::HeaderOptions::Dylib*,llvm::orc::MachOPlatform::HeaderOptions::Dylib*>(long long *a1, long long *a2, std::string *this)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v6 = *v5;
        this->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
      }
      std::string::size_type v7 = *((void *)v5 + 3);
      LODWORD(this[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)v5 + 8);
      this[1].__r_.__value_.__r.__words[0] = v7;
      uint64_t v5 = (long long *)((char *)v5 + 40);
      this = (std::string *)((char *)this + 40);
    }
    while (v5 != a2);
  }
  return this;
}

std::string *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,0>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    uint64_t v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      int v6 = v5[1].__r_.__value_.__r.__words[1];
      this[1].__r_.__value_.__r.__words[0] = v5[1].__r_.__value_.__r.__words[0];
      LODWORD(this[1].__r_.__value_.__r.__words[1]) = v6;
      this = (std::string *)((char *)this + 40);
      uint64_t v5 = (std::string *)((char *)v5 + 40);
    }
    while (v5 != a2);
  }
  return this;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(40 * a1);
}

void std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, long long *a3, unint64_t a4)
{
  int v8 = this + 16;
  std::vector<std::string>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:nn180100](this, v11);
    end = this->__end_;
    int v13 = v8;
    unint64_t v14 = (long long *)__str;
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    uint64_t v15 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v15, begin);
    end = this->__end_;
    int v13 = v8;
    unint64_t v14 = (long long *)v15;
LABEL_11:
    this->__end_ = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(v13, v14, a3, end);
    return;
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  long long v17 = v16;
  std::vector<std::string>::pointer v18 = this->__end_;
  if (v18 != v16)
  {
    do
    {
      if (SHIBYTE(v18[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18[-1].__r_.__value_.__l.__data_);
      }
      --v18;
    }
    while (v18 != v17);
  }
  this->__end_ = v17;
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

char *std::vector<std::string>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(int a1, long long *a2, long long *a3, std::string *this)
{
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        this->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
      }
      int v6 = (long long *)((char *)v6 + 24);
      ++this;
    }
    while (v6 != a3);
  }
  return this;
}

std::string *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::BuildVersionOpts>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(12 * a1);
}

void std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__clear[abi:nn180100]((atomic_uint *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

atomic_uint *std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__clear[abi:nn180100](atomic_uint *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)result;
  for (uint64_t i = *((void *)result + 1); i != v2; i -= 8)
  {
    uint64_t v4 = *(atomic_uint **)(i - 8);
    uint64_t result = v4;
    if (v4) {
      uint64_t result = llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(result);
    }
  }
  *((void *)v1 + 1) = v2;
  return result;
}

void SymbolTableCallbackPlugin::~SymbolTableCallbackPlugin(SymbolTableCallbackPlugin *this)
{
  *(void *)this = &unk_270DBB9E8;
  (*((void (**)(void))this + 2))(*((void *)this + 3));
}

{
  uint64_t vars8;

  *(void *)this = &unk_270DBB9E8;
  (*((void (**)(void))this + 2))(*((void *)this + 3));
  JUMPOUT(0x263E500B0);
}

void *SymbolTableCallbackPlugin::modifyPassConfig(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unint64_t v5 = a4[14];
  *(void *)&long long v21 = *(void *)(*(void *)a2 + 32);
  *((void *)&v21 + 1) = a1;
  unint64_t v22 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<SymbolTableCallbackPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1},SymbolTableCallbackPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1},void>::Callbacks
      + 2;
  unint64_t v6 = a4[13];
  if (v6 >= v5)
  {
    int v8 = a4 + 12;
    uint64_t v9 = a4[12];
    uint64_t v10 = (uint64_t)(v6 - v9) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      abort();
    }
    uint64_t v11 = v5 - v9;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    std::string::size_type v20 = a4 + 14;
    if (v13) {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 14), v13);
    }
    else {
      unint64_t v14 = 0;
    }
    int v16 = v14;
    long long v17 = &v14[32 * v10];
    unint64_t v19 = &v14[32 * v13];
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v17, &v21);
    std::vector<std::string>::pointer v18 = v17 + 32;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(v8, &v16);
    unint64_t v7 = a4[13];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v16);
  }
  else
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[13], &v21);
    unint64_t v7 = v6 + 32;
  }
  a4[13] = v7;
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v21);
}

void SymbolTableCallbackPlugin::notifyEmitted(void *a1@<X8>)
{
  *a1 = 0;
}

void SymbolTableCallbackPlugin::notifyFailed(void *a1@<X8>)
{
  *a1 = 0;
}

void SymbolTableCallbackPlugin::notifyRemovingResources(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<SymbolTableCallbackPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1}>@<X0>(llvm::jitlink::LinkGraph *this@<X1>, void *a2@<X0>, void *a3@<X8>)
{
  uint64_t v6 = a2[1];
  llvm::jitlink::LinkGraph::defined_symbols(this, v19);
  v17[0] = v19[0];
  v17[1] = v19[1];
  void v17[2] = v19[2];
  long long v18 = v20;
  uint64_t v8 = v21;
  uint64_t v9 = v22;
  uint64_t v10 = (uint64_t *)v20;
  if (*(void *)&v19[0] != v21 || (void)v20 != v22)
  {
    do
    {
      uint64_t v11 = *v10;
      unint64_t v12 = *(void *)(*v10 + 8);
      if (v12)
      {
        llvm::orc::ExecutorProcessControl::intern(*(void *)(*a2 + 72), *(uint64_t **)v11, v12, v16);
        (*(void (**)(void, unint64_t *, uint64_t))(v6 + 8))(*(void *)(v6 + 24), v16[0], (*(void *)(v11 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(void **)(v11 + 16));
        if ((unint64_t)v16[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)v16[0] + 1, 0xFFFFFFFFFFFFFFFFLL);
        }
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v17, (uint64_t)v16);
      uint64_t v10 = (uint64_t *)v18;
    }
    while (*(void *)&v17[0] != v8 || (void)v18 != v9);
  }
  uint64_t result = llvm::jitlink::LinkGraph::findSectionByName((uint64_t)this, (uint64_t)"__TEXT,__swift5_entry", 21, v7);
  if (result)
  {
    llvm::jitlink::SectionRange::SectionRange((unint64_t **)v19, result);
    llvm::orc::ExecutorProcessControl::intern(*(void *)(*a2 + 72), (uint64_t *)"__swift5_entry_relative_start", 0x1DuLL, (unint64_t **)v17);
    if (*(void *)&v19[0]) {
      uint64_t v15 = **(void **)&v19[0];
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(v6 + 8))(*(void *)(v6 + 24), *(void *)&v17[0], v15);
    if ((unint64_t)(*(void *)&v17[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v17[0] + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
  }
  *a3 = 0;
  return result;
}

unint64_t **llvm::jitlink::SectionRange::SectionRange(unint64_t **a1, uint64_t a2)
{
  uint64_t v4 = a2 + 32;
  *a1 = 0;
  a1[1] = 0;
  if ((void *)(*(void *)(a2 + 32) + 8 * *(unsigned int *)(a2 + 48)) != llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 32))
  {
    unint64_t v5 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v4);
    uint64_t v6 = (unint64_t *)*v5;
    *a1 = (unint64_t *)*v5;
    a1[1] = v6;
    unint64_t v7 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v4);
    uint64_t v9 = *(void *)(a2 + 32) + 8 * *(unsigned int *)(a2 + 48);
    if ((void *)v9 != v7)
    {
      uint64_t v10 = *a1;
      uint64_t v11 = a1[1];
      do
      {
        unint64_t v12 = (unint64_t *)*v7;
        unint64_t v13 = *(void *)*v7;
        if (v13 < *v10)
        {
          *a1 = v12;
          uint64_t v10 = v12;
        }
        if (v13 > *v11)
        {
          a1[1] = v12;
          uint64_t v11 = v12;
        }
        while (++v7 != v8)
        {
          if ((*v7 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_12;
          }
        }
        unint64_t v7 = v8;
LABEL_12:
        ;
      }
      while (v7 != (void *)v9);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<llvm::orc::SymbolStringPool>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBBB98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::orc::SymbolStringPool>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBBB98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

void std::__shared_ptr_emplace<llvm::orc::SymbolStringPool>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (std::mutex *)(a1 + 24);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap(a1 + 88);
  std::mutex::~mutex(v1);
}

uint64_t llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)a1 + v3);
        if (v5 != -8 && v5 != 0) {
          MEMORY[0x263E500A0]();
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

BOOL llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::serialize(void *a1, uint64_t a2)
{
  if (a1[1] < 8uLL) {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  *(void *)*a1 = v2;
  uint64_t v3 = (unsigned char *)(*a1 + 8);
  uint64_t v4 = a1[1] - 8;
  *a1 = v3;
  a1[1] = v4;
  int v5 = *(char *)(a2 + 23);
  BOOL v6 = v5 < 0;
  if (v5 >= 0) {
    unint64_t v7 = (char *)a2;
  }
  else {
    unint64_t v7 = *(char **)a2;
  }
  if (v6) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  BOOL v9 = v8 == 0;
  if (v8) {
    BOOL v10 = v4 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t v11 = v8 - 1;
    do
    {
      char v12 = *v7++;
      *uint64_t v3 = v12;
      uint64_t v3 = (unsigned char *)(*a1 + 1);
      uint64_t v13 = a1[1] - 1;
      *a1 = v3;
      a1[1] = v13;
      BOOL v9 = v11 == 0;
      if (!v11) {
        break;
      }
      --v11;
    }
    while (v13);
  }
  return v9;
}

void llvm::orc::shared::detail::serializeViaSPSToWrapperFunctionResult<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSSequence<char>,int>,std::string,int>(uint64_t a1@<X0>, _DWORD *a2@<X1>, char **a3@<X8>)
{
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  uint64_t v7 = v6 + 12;
  *(void *)&long long v10 = 0;
  *((void *)&v10 + 1) = v6 + 12;
  if ((unint64_t)(v6 + 12) <= 8)
  {
    uint64_t v8 = &v10;
  }
  else
  {
    uint64_t v8 = (long long *)malloc_type_malloc(v6 + 12, 0xBCDE199DuLL);
    *(void *)&long long v10 = v8;
  }
  v9[0] = v8;
  v9[1] = v7;
  if (llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSSequence<char>,int>::serialize<std::string,int>(v9, a1, a2))
  {
    *(_OWORD *)a3 = v10;
  }
  else
  {
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", a3);
    if (*((void *)&v10 + 1) > 8uLL || !*((void *)&v10 + 1) && (void)v10) {
      free((void *)v10);
    }
  }
}

BOOL llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSSequence<char>,int>::serialize<std::string,int>(void *a1, uint64_t a2, _DWORD *a3)
{
  BOOL result = llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::serialize(a1, a2);
  if (result)
  {
    if (a1[1] < 4uLL)
    {
      return 0;
    }
    else
    {
      *(_DWORD *)*a1 = *a3;
      uint64_t v6 = a1[1] - 4;
      *a1 += 4;
      a1[1] = v6;
      return 1;
    }
  }
  return result;
}

uint64_t llvm::orc::GenericNamedTaskImpl<XOJIT_ReplacementManager_AddObjectFileAsync::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBA40;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  return a1;
}

void llvm::orc::GenericNamedTaskImpl<XOJIT_ReplacementManager_AddObjectFileAsync::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBA40;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *llvm::orc::GenericNamedTaskImpl<XOJIT_ReplacementManager_AddObjectFileAsync::$_0>::printDescription(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 48));
}

uint64_t llvm::orc::GenericNamedTaskImpl<XOJIT_ReplacementManager_AddObjectFileAsync::$_0>::run(void *a1)
{
  uint64_t v2 = a1[1];
  std::string::size_type v3 = a1[2];
  uint64_t v9 = a1[3];
  xojit::ReplacementManager::addWithReplacement(v2, v3, (uint64_t)&v9, &v10);
  uint64_t v4 = v9;
  uint64_t v9 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v6 = (void (*)(uint64_t, uint64_t))a1[4];
  uint64_t v5 = a1[5];
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  v6(v5, v7);
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return result;
}

uint64_t *llvm::Expected<std::unique_ptr<llvm::orc::SelfExecutorProcessControl>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v3) {
LABEL_5:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else if (v3)
  {
    goto LABEL_5;
  }
  return a1;
}

uint64_t llvm::Expected<std::unique_ptr<xojit::XOJIT>>::~Expected(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(std::recursive_mutex **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (v3) {
      (*(void (**)(std::recursive_mutex *))(v3->__m_.__sig + 8))(v3);
    }
  }
  else if (v3)
  {
    xojit::XOJIT::~XOJIT(v3);
    MEMORY[0x263E500B0]();
  }
  return a1;
}

uint64_t llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_AddObjectFileAsync::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBA88;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  return a1;
}

void llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_AddObjectFileAsync::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBA88;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_AddObjectFileAsync::$_0>::printDescription(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 48));
}

uint64_t llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_AddObjectFileAsync::$_0>::run(void *a1)
{
  char v2 = (llvm::orc::JITDylib *)a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[1] + 352;
  uint64_t v9 = v3;
  llvm::orc::ObjectLayer::add(v4, v2, &v9, &v10);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v6 = (void (*)(uint64_t, uint64_t))a1[4];
  uint64_t v5 = a1[5];
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  v6(v5, v7);
  uint64_t result = v10;
  if (v10) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return result;
}

void llvm::orc::JITDylib::addGenerator<llvm::orc::StaticLibraryDefinitionGenerator>(std::unique_ptr<llvm::orc::StaticLibraryDefinitionGenerator>)::{lambda(void)#1}::operator()(void **a1)
{
  uint64_t v1 = *a1;
  std::shared_ptr<llvm::orc::DefinitionGenerator>::shared_ptr[abi:nn180100]<llvm::orc::StaticLibraryDefinitionGenerator,std::default_delete<llvm::orc::StaticLibraryDefinitionGenerator>,void>((uint64_t *)&v20, a1[1]);
  char v2 = (_OWORD *)v1[24];
  unint64_t v3 = v1[25];
  if ((unint64_t)v2 >= v3)
  {
    uint64_t v4 = v1[23];
    uint64_t v5 = ((uint64_t)v2 - v4) >> 4;
    unint64_t v6 = v5 + 1;
    if ((unint64_t)(v5 + 1) >> 60) {
      abort();
    }
    uint64_t v7 = v3 - v4;
    if (v7 >> 3 > v6) {
      unint64_t v6 = v7 >> 3;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v8 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v8 = v6;
    }
    unint64_t v24 = v1 + 25;
    uint64_t v9 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(v1 + 25), v8);
    uint64_t v11 = &v9[16 * v5];
    *(_OWORD *)uint64_t v11 = v20;
    long long v20 = 0uLL;
    uint64_t v13 = (void *)v1[23];
    char v12 = (void *)v1[24];
    if (v12 == v13)
    {
      int64x2_t v16 = vdupq_n_s64((unint64_t)v12);
      unint64_t v14 = &v9[16 * v5];
    }
    else
    {
      unint64_t v14 = &v9[16 * v5];
      do
      {
        long long v15 = *((_OWORD *)v12 - 1);
        v12 -= 2;
        *((_OWORD *)v14 - 1) = v15;
        v14 -= 16;
        *char v12 = 0;
        v12[1] = 0;
      }
      while (v12 != v13);
      int64x2_t v16 = *(int64x2_t *)(v1 + 23);
    }
    long long v17 = v11 + 16;
    v1[23] = v14;
    v1[24] = v11 + 16;
    int64x2_t v22 = v16;
    uint64_t v18 = v1[25];
    v1[25] = &v9[16 * v10];
    uint64_t v23 = v18;
    uint64_t v21 = v16.i64[0];
    std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((void **)&v21);
    unint64_t v19 = (std::__shared_weak_count *)*((void *)&v20 + 1);
    v1[24] = v17;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v19);
    }
  }
  else
  {
    _OWORD *v2 = v20;
    v1[24] = v2 + 1;
  }
}

uint64_t *std::shared_ptr<llvm::orc::DefinitionGenerator>::shared_ptr[abi:nn180100]<llvm::orc::StaticLibraryDefinitionGenerator,std::default_delete<llvm::orc::StaticLibraryDefinitionGenerator>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<llvm::orc::StaticLibraryDefinitionGenerator  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t std::__shared_ptr_pointer<llvm::orc::StaticLibraryDefinitionGenerator  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_LinkStaticArchiveAsync::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBB08;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  return a1;
}

void llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_LinkStaticArchiveAsync::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBB08;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_LinkStaticArchiveAsync::$_0>::printDescription(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 48));
}

uint64_t *llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_LinkStaticArchiveAsync::$_0>::run(void *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[1] + 352;
  uint64_t v13 = v3;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  llvm::orc::StaticLibraryDefinitionGenerator::Create(v4, &v13, v15, v14, (uint64_t)&v16);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v14);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v15);
  uint64_t v5 = v13;
  uint64_t v13 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (v17)
  {
    uint64_t v9 = (void (*)(uint64_t, uint64_t))a1[4];
    uint64_t v8 = a1[5];
    uint64_t v10 = v16;
    uint64_t v16 = 0;
    v9(v8, v10);
  }
  else
  {
    uint64_t v6 = v16;
    uint64_t v16 = 0;
    uint64_t v12 = v6;
    llvm::orc::JITDylib::addGenerator<llvm::orc::StaticLibraryDefinitionGenerator>(v2, &v12);
    uint64_t v7 = v12;
    uint64_t v12 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    ((void (*)(void, void))a1[4])(a1[5], 0);
  }
  return llvm::Expected<std::unique_ptr<llvm::orc::EPCDynamicLibrarySearchGenerator>>::~Expected(&v16);
}

uint64_t *llvm::detail::UniqueFunctionBase<llvm::Error,llvm::MemoryBufferRef>::CallImpl<llvm::orc::ForceLoadMachOArchiveMembers>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  return llvm::orc::ForceLoadMachOArchiveMembers::operator()(a1, v5, a3);
}

uint64_t llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_LinkStaticArchiveWithForceLoadAsync::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBB50;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  return a1;
}

void llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_LinkStaticArchiveWithForceLoadAsync::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBB50;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_LinkStaticArchiveWithForceLoadAsync::$_0>::printDescription(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void *llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_LinkStaticArchiveWithForceLoadAsync::$_0>::run(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v23 = 0;
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5)
  {
    *(void *)&long long v19 = v3 + 352;
    *((void *)&v19 + 1) = v2;
    BOOL v20 = v5 == 2;
    uint64_t v21 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::MemoryBufferRef>::CallbacksHolder<llvm::orc::ForceLoadMachOArchiveMembers,llvm::orc::ForceLoadMachOArchiveMembers,void>::Callbacks
        + 2;
    uint64_t v6 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v22);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v6, &v19);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v19);
  }
  uint64_t v15 = v4;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v19, &v22);
  memset(v16, 0, sizeof(v16));
  llvm::orc::StaticLibraryDefinitionGenerator::Create(v3 + 352, &v15, &v19, v16, (uint64_t)&v17);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v16);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v19);
  uint64_t v7 = v15;
  uint64_t v15 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (v18)
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v12 = v17;
    uint64_t v17 = 0;
    v11(v10, v12);
  }
  else
  {
    uint64_t v8 = v17;
    uint64_t v17 = 0;
    uint64_t v14 = v8;
    llvm::orc::JITDylib::addGenerator<llvm::orc::StaticLibraryDefinitionGenerator>(v2, &v14);
    uint64_t v9 = v14;
    uint64_t v14 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    (*(void (**)(void, void))(a1 + 40))(*(void *)(a1 + 48), 0);
  }
  llvm::Expected<std::unique_ptr<llvm::orc::EPCDynamicLibrarySearchGenerator>>::~Expected(&v17);
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v22);
}

uint64_t *llvm::Expected<std::pair<std::unique_ptr<llvm::MemoryBuffer>,llvm::orc::LinkableFileKind>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 16);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v3) {
LABEL_5:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else if (v3)
  {
    goto LABEL_5;
  }
  return a1;
}

void xojit::XOJITXPC::~XOJITXPC(xojit::XOJITXPC *this)
{
  *(void *)this = &unk_270DBBBD0;
  uint64_t v1 = (std::mutex *)((char *)this + 8);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)this + 11);
  std::mutex::~mutex(v1);
}

{
  std::mutex *v1;
  uint64_t vars8;

  *(void *)this = &unk_270DBBBD0;
  uint64_t v1 = (std::mutex *)((char *)this + 8);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)this + 11);
  std::mutex::~mutex(v1);
  JUMPOUT(0x263E500B0);
}

void xojit::XOJITXPC::start(xojit::XOJITXPC *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (_xpc_connection_s *)*((void *)this + 9);
  handler[0] = MEMORY[0x263EF8330];
  handler[1] = 0x40000000;
  handler[2] = ___ZN5xojit8XOJITXPC5startEv_block_invoke;
  handler[3] = &__block_descriptor_tmp;
  handler[4] = this;
  xpc_connection_set_event_handler(v4, handler);
  xpc_connection_resume(*((xpc_connection_t *)this + 9));
  *a2 = 0;
}

void *___ZN5xojit8XOJITXPC5startEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  if (MEMORY[0x263E50BA0](a2) != MEMORY[0x263EF8708])
  {
    if (a2 != (void *)MEMORY[0x263EF86A8])
    {
      getErrorErrorCat();
      operator new();
    }
    int v5 = 0;
LABEL_36:
    std::mutex::lock((std::mutex *)(v3 + 8));
    xpc_release(*(xpc_object_t *)(v3 + 72));
    *(void *)(v3 + 72) = 0;
    std::mutex::unlock((std::mutex *)(v3 + 8));
    uint64_t v16 = *(void *)(v3 + 80);
    unint64_t v25 = v5;
    (*(void (**)(uint64_t, void **))(*(void *)v16 + 24))(v16, &v25);
    uint64_t result = v25;
    if (v25) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*(void *)v25 + 8))(v25);
    }
    unint64_t v17 = *(void *)(v3 + 112);
    if (v17 >= 8)
    {
      char v18 = (void **)(v3 + 88);
      long long v19 = v18;
      if ((v17 & 2) == 0) {
        long long v19 = (void **)*v18;
      }
      (*(void (**)(void ***__return_ptr, void **, void))(v17 & 0xFFFFFFFFFFFFFFF8))(&v23, v19, 0);
      uint64_t v30 = 0;
      if (v18 != &__dst)
      {
        BOOL v20 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v18);
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v20, (long long *)&__dst);
      }
      return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&__dst);
    }
    return result;
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(a2, "opc");
  uint64_t v21 = uint64;
  if (uint64 >= 2)
  {
    getErrorErrorCat();
    __dst = (void *)3;
    *(void *)&long long v29 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[38],std::error_code>();
  }
  if (uint64)
  {
    std::mutex::lock((std::mutex *)(v3 + 8));
    unint64_t v6 = *(void *)(v3 + 112);
    std::mutex::unlock((std::mutex *)(v3 + 8));
    if (v6 <= 7)
    {
      __dst = "No handler for opcode ";
      *((void *)&v29 + 1) = &v21;
      __int16 v31 = 3075;
      getErrorErrorCat();
      operator new();
    }
    uint64_t v13 = (void *)(v3 + 88);
    uint64_t v14 = *(void *)(v3 + 112);
    if ((v14 & 2) == 0) {
      uint64_t v13 = (void *)*v13;
    }
    (*(void (**)(size_t *__return_ptr, void *, void *))(v14 & 0xFFFFFFFFFFFFFFF8))(&length, v13, a2);
  }
  else
  {
    unsigned __int8 v7 = xpc_dictionary_get_uint64(a2, "opd");
    uint64_t v8 = xpc_dictionary_get_uint64(a2, "seq");
    uint64_t v9 = xpc_dictionary_get_uint64(a2, "tag");
    size_t length = 0;
    data = xpc_dictionary_get_data(a2, "buf", &length);
    __dst = &v30;
    long long v29 = xmmword_261E8A720;
    llvm::SmallVectorImpl<char>::resizeImpl<false>(&__dst, length);
    if (data && length) {
      memcpy(__dst, data, length);
    }
    uint64_t v11 = *(void *)(v3 + 80);
    unint64_t v25 = v27;
    long long v26 = xmmword_261E8A720;
    if ((void)v29) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v25, (const void **)&__dst);
    }
    (*(void (**)(void ***__return_ptr, uint64_t, void, uint64_t, uint64_t, void **))(*(void *)v11 + 16))(&v23, v11, v7, v8, v9, &v25);
    if (v25 != v27) {
      free(v25);
    }
    if (__dst != &v30) {
      free(__dst);
    }
    if (v24)
    {
      size_t length = (size_t)v23;
    }
    else if (v23 == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
      size_t length = 0;
      if (v24)
      {
        uint64_t v12 = v23;
        uint64_t v23 = 0;
        if (v12) {
          (*((void (**)(void **))*v12 + 1))(v12);
        }
      }
    }
    else
    {
      size_t length = 0;
    }
  }
  __dst = 0;
  unint64_t v25 = (void *)length;
  size_t length = 0;
  llvm::ErrorList::join((void ***)&__dst, (void ***)&v25, &v23);
  if (v25) {
    (*(void (**)(void *))(*(void *)v25 + 8))(v25);
  }
  if (__dst) {
    (*(void (**)(void *))(*(void *)__dst + 8))(__dst);
  }
  uint64_t result = (void *)length;
  int v5 = v23;
  uint64_t v23 = 0;
  if (length) {
    uint64_t result = (void *)(*(uint64_t (**)(size_t))(*(void *)length + 8))(length);
  }
  if (v5) {
    goto LABEL_36;
  }
  return result;
}

void xojit::XOJITXPC::sendMessage(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const void *a5@<X4>, size_t a6@<X5>, void *a7@<X8>)
{
  xpc_object_t empty = xpc_dictionary_create_empty();
  xpc_dictionary_set_uint64(empty, "opc", 0);
  xpc_dictionary_set_uint64(empty, "opd", a2);
  xpc_dictionary_set_uint64(empty, "seq", a3);
  xpc_dictionary_set_uint64(empty, "tag", a4);
  xpc_dictionary_set_data(empty, "buf", a5, a6);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v15 = *(_xpc_connection_s **)(a1 + 72);
  if (!v15)
  {
    getErrorErrorCat();
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
  }
  xpc_connection_send_message(v15, empty);
  std::mutex::unlock((std::mutex *)(a1 + 8));
  *a7 = 0;
  xpc_release(empty);
}

void xojit::XOJITXPC::disconnect(xojit::XOJITXPC *this)
{
  char v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  uint64_t v3 = (_xpc_connection_s *)*((void *)this + 9);
  if (v3) {
    xpc_connection_cancel(v3);
  }
  std::mutex::unlock(v2);
}

void xojit::XOJITXPC::setHandler(uint64_t a1, long long *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if ((long long *)(a1 + 88) != a2)
  {
    int v5 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 88));
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v5, a2);
  }
  std::mutex::unlock(v4);
}

void llvm::make_error<llvm::StringError,char const(&)[38],std::error_code>()
{
}

void llvm::make_error<llvm::StringError,llvm::Twine,std::error_code>()
{
}

void xojit::createXPCEPC(uint64_t a1, int a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v5 = a2;
  if (!*a3)
  {
    dispatch_get_global_queue(25, 0);
    _xojit_defaultConcurrency();
    operator new();
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0x40000000;
  *a3 = 0;
  unint64_t v6 = &v3;
  unsigned __int8 v7 = &v4;
  uint64_t v8 = &v5;
  uint64_t v9 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager>>,llvm::orc::SimpleRemoteEPC &>::CallbacksHolder<xojit::createXPCEPC(_xpc_connection_s *,unsigned int,std::unique_ptr<llvm::orc::TaskDispatcher>)::$_0,xojit::createXPCEPC(_xpc_connection_s *,unsigned int,std::unique_ptr<llvm::orc::TaskDispatcher>)::$_0,void>::Callbacks
     + 2;
  uint64_t v10 = xojit::createMemAccess;
  uint64_t v11 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>>,llvm::orc::SimpleRemoteEPC &>::CallbacksHolder<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>> (*)(llvm::orc::ExecutorProcessControl&),llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>> (*)(llvm::orc::ExecutorProcessControl&),void>::Callbacks
      + 2;
  operator new();
}

uint64_t xojit::createMemAccess@<X0>(xojit *this@<X0>, uint64_t a2@<X8>)
{
  v9[15] = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  v9[0] = &v6;
  v9[1] = "__xojit_memaccess_write_uint8s";
  void v9[2] = 30;
  v9[3] = (char *)&v6 + 8;
  v9[4] = "__xojit_memaccess_write_uint16s";
  v9[5] = 31;
  v9[6] = &v7;
  v9[7] = "__xojit_memaccess_write_uint32s";
  v9[8] = 31;
  v9[9] = (char *)&v7 + 8;
  v9[10] = "__xojit_memaccess_write_uint64s";
  v9[11] = 31;
  v9[12] = &v8;
  v9[13] = "__xojit_memaccess_write_buffers";
  v9[14] = 31;
  llvm::orc::ExecutorProcessControl::getBootstrapSymbols((uint64_t)this, (uint64_t)v9, 5, &v5);
  uint64_t result = v5;
  if (!v5) {
    operator new();
  }
  *(unsigned char *)(a2 + 8) |= 1u;
  *(void *)a2 = result;
  return result;
}

uint64_t llvm::orc::ExecutorProcessControl::getBootstrapSymbols@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (a3)
  {
    uint64_t v5 = result;
    long long v6 = (uint64_t *)(result + 152);
    long long v7 = (unint64_t *)(a2 + 16);
    uint64_t v8 = 24 * a3;
    do
    {
      uint64_t result = llvm::StringMapImpl::FindKey(v6, (uint64_t *)*(v7 - 1), *v7);
      if (result == -1 || (int)result == (unint64_t)*(unsigned int *)(v5 + 160))
      {
        __int16 v10 = 1283;
        v9[0] = "Symbol \"";
        void v9[2] = *(v7 - 1);
        v9[3] = *v7;
        uint64_t v11 = v9;
        uint64_t v12 = "\" not found in bootstrap symbols map";
        __int16 v13 = 770;
        getErrorErrorCat();
        operator new();
      }
      *(void *)*(v7 - 2) = *(void *)(*(void *)(*v6 + 8 * (int)result) + 8);
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  *a4 = 0;
  return result;
}

void llvm::orc::EPCGenericMemoryAccess::~EPCGenericMemoryAccess(llvm::orc::EPCGenericMemoryAccess *this)
{
}

void *llvm::orc::EPCGenericMemoryAccess::writeUInt8sAsync(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  long long v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = (void *)v6[3];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v24, a4);
  uint64_t v9 = 9 * ((a3 - 1) & 0xFFFFFFFFFFFFFFFLL);
  if (a3) {
    uint64_t v10 = v9 + 17;
  }
  else {
    uint64_t v10 = 8;
  }
  if (a3)
  {
    uint64_t v11 = malloc_type_malloc(v9 + 17, 0xBCDE199DuLL);
    uint64_t v12 = v11;
    *uint64_t v11 = a3;
    uint64_t v13 = a2 + 16 * a3;
    unint64_t v14 = v9 + 9;
    uint64_t v15 = 8;
    while (1)
    {
      uint64_t v16 = (char *)v11 + v15;
      *(void *)uint64_t v16 = *(void *)a2;
      v16[8] = *(unsigned char *)(a2 + 8);
      a2 += 16;
      if (a2 == v13) {
        break;
      }
      v14 -= 9;
      v15 += 9;
      if (v14 <= 7)
      {
        llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v22);
        free(v12);
        if (!v23)
        {
          long long v29 = v22;
          if (v22)
          {
            getErrorErrorCat();
            uint64_t v33 = 3;
            *(void *)&v34[0] = &getErrorErrorCat(void)::ErrorErrorCat;
            llvm::make_error<llvm::StringError,char const*&,std::error_code>();
          }
        }
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  long long v22 = v12;
  unint64_t v23 = v10;
LABEL_13:
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v25, &v24);
  unint64_t v17 = v23;
  if (v23 <= 8) {
    char v18 = &v22;
  }
  else {
    char v18 = v22;
  }
  long long v29 = v8;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v30, v25);
  uint64_t v31 = (uint64_t)v29;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v32, v30);
  uint64_t v33 = v31;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v34, v32);
  long long v19 = operator new(0x28uLL, (std::align_val_t)8uLL);
  long long v26 = v19;
  long long v27 = xmmword_261E8A730;
  *long long v19 = v33;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v19 + 1), v34);
  unint64_t v28 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_S1I_vE9CallbacksE
      + 4;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v34);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v32);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v30);
  (*(void (**)(void *, uint64_t, void **, void *, unint64_t))(*v6 + 56))(v6, v7, &v26, v18, v17);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v26);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v25);
  if (v23 >= 9)
  {
    BOOL v20 = v22;
LABEL_20:
    free(v20);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v24);
  }
  if (!v23)
  {
    BOOL v20 = v22;
    if (v22) {
      goto LABEL_20;
    }
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v24);
}

void *llvm::orc::EPCGenericMemoryAccess::writeUInt16sAsync(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  long long v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = (void *)v6[3];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v24, a4);
  uint64_t v9 = 10 * ((a3 - 1) & 0xFFFFFFFFFFFFFFFLL);
  if (a3) {
    uint64_t v10 = v9 + 18;
  }
  else {
    uint64_t v10 = 8;
  }
  if (a3)
  {
    uint64_t v11 = malloc_type_malloc(v9 + 18, 0xBCDE199DuLL);
    uint64_t v12 = v11;
    *uint64_t v11 = a3;
    uint64_t v13 = a2 + 16 * a3;
    unint64_t v14 = v9 + 10;
    uint64_t v15 = 8;
    while (1)
    {
      uint64_t v16 = (char *)v11 + v15;
      *(void *)uint64_t v16 = *(void *)a2;
      *((_WORD *)v16 + 4) = *(_WORD *)(a2 + 8);
      a2 += 16;
      if (a2 == v13) {
        break;
      }
      v14 -= 10;
      v15 += 10;
      if (v14 <= 7)
      {
        llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v22);
        free(v12);
        if (!v23)
        {
          long long v29 = v22;
          if (v22)
          {
            getErrorErrorCat();
            uint64_t v33 = 3;
            *(void *)&v34[0] = &getErrorErrorCat(void)::ErrorErrorCat;
            llvm::make_error<llvm::StringError,char const*&,std::error_code>();
          }
        }
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  long long v22 = v12;
  unint64_t v23 = v10;
LABEL_13:
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v25, &v24);
  unint64_t v17 = v23;
  if (v23 <= 8) {
    char v18 = &v22;
  }
  else {
    char v18 = v22;
  }
  long long v29 = v8;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v30, v25);
  uint64_t v31 = (uint64_t)v29;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v32, v30);
  uint64_t v33 = v31;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v34, v32);
  long long v19 = operator new(0x28uLL, (std::align_val_t)8uLL);
  long long v26 = v19;
  long long v27 = xmmword_261E8A730;
  *long long v19 = v33;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v19 + 1), v34);
  unint64_t v28 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteItEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_S1I_vE9CallbacksE
      + 4;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v34);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v32);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v30);
  (*(void (**)(void *, uint64_t, void **, void *, unint64_t))(*v6 + 56))(v6, v7, &v26, v18, v17);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v26);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v25);
  if (v23 >= 9)
  {
    BOOL v20 = v22;
LABEL_20:
    free(v20);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v24);
  }
  if (!v23)
  {
    BOOL v20 = v22;
    if (v22) {
      goto LABEL_20;
    }
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v24);
}

void *llvm::orc::EPCGenericMemoryAccess::writeUInt32sAsync(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  long long v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = (void *)v6[3];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v24, a4);
  uint64_t v9 = 12 * ((a3 - 1) & 0xFFFFFFFFFFFFFFFLL);
  if (a3) {
    uint64_t v10 = v9 + 20;
  }
  else {
    uint64_t v10 = 8;
  }
  if (a3)
  {
    uint64_t v11 = malloc_type_malloc(v9 + 20, 0xBCDE199DuLL);
    uint64_t v12 = v11;
    *uint64_t v11 = a3;
    uint64_t v13 = a2 + 16 * a3;
    unint64_t v14 = v9 + 12;
    uint64_t v15 = 8;
    while (1)
    {
      uint64_t v16 = (char *)v11 + v15;
      *(void *)uint64_t v16 = *(void *)a2;
      *((_DWORD *)v16 + 2) = *(_DWORD *)(a2 + 8);
      a2 += 16;
      if (a2 == v13) {
        break;
      }
      v14 -= 12;
      v15 += 12;
      if (v14 <= 7)
      {
        llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v22);
        free(v12);
        if (!v23)
        {
          long long v29 = v22;
          if (v22)
          {
            getErrorErrorCat();
            uint64_t v33 = 3;
            *(void *)&v34[0] = &getErrorErrorCat(void)::ErrorErrorCat;
            llvm::make_error<llvm::StringError,char const*&,std::error_code>();
          }
        }
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  long long v22 = v12;
  unint64_t v23 = v10;
LABEL_13:
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v25, &v24);
  unint64_t v17 = v23;
  if (v23 <= 8) {
    char v18 = &v22;
  }
  else {
    char v18 = v22;
  }
  long long v29 = v8;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v30, v25);
  uint64_t v31 = (uint64_t)v29;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v32, v30);
  uint64_t v33 = v31;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v34, v32);
  long long v19 = operator new(0x28uLL, (std::align_val_t)8uLL);
  long long v26 = v19;
  long long v27 = xmmword_261E8A730;
  *long long v19 = v33;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v19 + 1), v34);
  unint64_t v28 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_S1I_vE9CallbacksE
      + 4;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v34);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v32);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v30);
  (*(void (**)(void *, uint64_t, void **, void *, unint64_t))(*v6 + 56))(v6, v7, &v26, v18, v17);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v26);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v25);
  if (v23 >= 9)
  {
    BOOL v20 = v22;
LABEL_20:
    free(v20);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v24);
  }
  if (!v23)
  {
    BOOL v20 = v22;
    if (v22) {
      goto LABEL_20;
    }
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v24);
}

void *llvm::orc::EPCGenericMemoryAccess::writeUInt64sAsync(uint64_t a1, void *a2, uint64_t a3, long long *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  long long v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = (void *)v6[3];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v19, a4);
  size_t v9 = (16 * a3) | 8;
  *(void *)&v28[0] = 0;
  *((void *)&v28[0] + 1) = v9;
  if (v9 == 8)
  {
    uint64_t v10 = v28;
  }
  else
  {
    uint64_t v10 = malloc_type_malloc(v9, 0xBCDE199DuLL);
    *(void *)&v28[0] = v10;
  }
  *uint64_t v10 = a3;
  if (a3)
  {
    if (!(16 * a3))
    {
      llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v18);
      goto LABEL_10;
    }
    uint64_t v11 = &a2[2 * a3];
    uint64_t v12 = v10 + 2;
    do
    {
      *(v12 - 1) = *a2;
      *uint64_t v12 = a2[1];
      v12 += 2;
      a2 += 2;
    }
    while (a2 != v11);
  }
  *(_OWORD *)char v18 = v28[0];
LABEL_10:
  if (!v18[1])
  {
    long long v24 = v18[0];
    if (v18[0])
    {
      getErrorErrorCat();
      *(void *)&v28[0] = 3;
      *((void *)&v28[0] + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
  }
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v20, &v19);
  uint64_t v13 = v18[1];
  if (v18[1] <= (void *)8) {
    unint64_t v14 = v18;
  }
  else {
    unint64_t v14 = (void **)v18[0];
  }
  long long v24 = v8;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v25, v20);
  long long v26 = v24;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v27, v25);
  *(void *)&v28[0] = v26;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v28 + 8, v27);
  uint64_t v15 = operator new(0x28uLL, (std::align_val_t)8uLL);
  uint64_t v21 = v15;
  long long v22 = xmmword_261E8A730;
  *uint64_t v15 = *(void *)&v28[0];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v15 + 1), (_OWORD *)((char *)v28 + 8));
  unint64_t v23 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_S1I_vE9CallbacksE
      + 4;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)v28 + 1);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v27);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v25);
  (*(void (**)(void *, uint64_t, void **, void **, void *))(*v6 + 56))(v6, v7, &v21, v14, v13);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v21);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v20);
  if (v18[1] >= (void *)9)
  {
    uint64_t v16 = v18[0];
LABEL_18:
    free(v16);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v19);
  }
  if (!v18[1])
  {
    uint64_t v16 = v18[0];
    if (v18[0]) {
      goto LABEL_18;
    }
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v19);
}

void *llvm::orc::EPCGenericMemoryAccess::writeBuffersAsync(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  long long v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = (_OWORD *)v6[3];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v25, a4);
  if (a3)
  {
    size_t v9 = (char *)v34 + 8;
    uint64_t v10 = &a2[3 * a3];
    uint64_t v11 = 24 * a3;
    uint64_t v12 = a2 + 2;
    size_t v13 = 8;
    do
    {
      uint64_t v14 = *v12;
      v12 += 3;
      v13 += v14 + 16;
      v11 -= 24;
    }
    while (v11);
    *(void *)&v34[0] = 0;
    *((void *)&v34[0] + 1) = v13;
    if (v13 < 9)
    {
      uint64_t v15 = v34;
      uint64_t v32 = v34;
      *(void *)&v33[0] = v13;
      if (v13 != 8)
      {
LABEL_13:
        llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v24);
        if (*((void *)&v34[0] + 1) > 8uLL || !*((void *)&v34[0] + 1) && *(void *)&v34[0]) {
          free(*(void **)&v34[0]);
        }
        goto LABEL_17;
      }
      size_t v16 = 0;
    }
    else
    {
      uint64_t v15 = malloc_type_malloc(v13, 0xBCDE199DuLL);
      size_t v9 = (char *)(v15 + 1);
      *(void *)&v34[0] = v15;
      size_t v16 = v13 - 8;
    }
    *uint64_t v15 = a3;
    uint64_t v32 = v9;
    *(void *)&v33[0] = v16;
    while (1)
    {
      uint64_t v18 = *a2;
      uint64_t v17 = (uint64_t)(a2 + 1);
      if ((llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>::serialize<llvm::orc::ExecutorAddr,llvm::StringRef>(&v32, v18, v17) & 1) == 0)goto LABEL_13; {
      a2 = (uint64_t *)(v17 + 16);
      }
      if (a2 == v10) {
        goto LABEL_12;
      }
    }
  }
  v34[0] = xmmword_261E8A740;
LABEL_12:
  *(_OWORD *)long long v24 = v34[0];
LABEL_17:
  if (!v24[1])
  {
    uint64_t v30 = v24[0];
    if (v24[0])
    {
      getErrorErrorCat();
      *(void *)&v34[0] = 3;
      *((void *)&v34[0] + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
  }
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v26, &v25);
  long long v19 = v24[1];
  if (v24[1] <= (void *)8) {
    BOOL v20 = v24;
  }
  else {
    BOOL v20 = (void **)v24[0];
  }
  uint64_t v30 = v8;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v31, v26);
  uint64_t v32 = v30;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v33, v31);
  *(void *)&v34[0] = v32;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v34 + 8, v33);
  uint64_t v21 = operator new(0x28uLL, (std::align_val_t)8uLL);
  long long v27 = v21;
  long long v28 = xmmword_261E8A730;
  *uint64_t v21 = *(void *)&v34[0];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v21 + 1), (_OWORD *)((char *)v34 + 8));
  uint64_t v29 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSC_IcEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSH_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes11BufferWriteEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISM_E9callAsyncIS18_SQ_JSU_EEEvS15_SW_DpRKT1_EUlSO_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_S1I_vE9CallbacksE
      + 4;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)v34 + 1);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v33);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v31);
  (*(void (**)(void *, uint64_t, void **, void **, void *))(*v6 + 56))(v6, v7, &v27, v20, v19);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v27);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v26);
  if (v24[1] >= (void *)9)
  {
    long long v22 = v24[0];
LABEL_25:
    free(v22);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v25);
  }
  if (!v24[1])
  {
    long long v22 = v24[0];
    if (v24[0]) {
      goto LABEL_25;
    }
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v25);
}

void _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvRS4_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  char v2 = *(void **)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v4, (long long *)(a1 + 8));
  v5[0] = v2;
  v5[1] = v3;
  operator new();
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvS1J_(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (long long *)(a2 + 8));
}

void *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBC50;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 9)
  {
    uint64_t v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    if (v3) {
      goto LABEL_5;
    }
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBC50;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2) {
      goto LABEL_8;
    }
    uint64_t v3 = *(void **)(a1 + 40);
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = *(void **)(a1 + 40);
  }
  free(v3);
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E3runEv(void *a1)
{
  uint64_t v1 = a1 + 1;
  unint64_t v2 = (void *)a1[5];
  unint64_t v3 = a1[6];
  a1[5] = 0;
  a1[6] = 0;
  if (!v3)
  {
    v5[3] = v2;
    if (v2)
    {
      getErrorErrorCat();
      v5[0] = 3;
      v5[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
  }
  v5[0] = 0;
  uint64_t v4 = a1[4];
  if ((v4 & 2) == 0) {
    uint64_t v1 = (void *)*v1;
  }
  (*(void (**)(void *, void *))(v4 & 0xFFFFFFFFFFFFFFF8))(v1, v5);
  if (v5[0]) {
    (*(void (**)(void))(*(void *)v5[0] + 8))(v5[0]);
  }
  if (v3 > 8 || !v3 && v2) {
    free(v2);
  }
}

void _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteItEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvRS4_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void **)a2;
  unint64_t v3 = *(void **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v4, (long long *)(a1 + 8));
  v5[0] = v2;
  v5[1] = v3;
  operator new();
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteItEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvS1J_(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (long long *)(a2 + 8));
}

void *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteItEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteItEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBC98;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 9)
  {
    unint64_t v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    unint64_t v3 = *(void **)(a1 + 40);
    if (v3) {
      goto LABEL_5;
    }
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteItEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBC98;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2) {
      goto LABEL_8;
    }
    unint64_t v3 = *(void **)(a1 + 40);
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v3 = *(void **)(a1 + 40);
  }
  free(v3);
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteItEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteItEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E3runEv(void *a1)
{
  uint64_t v1 = a1 + 1;
  unint64_t v2 = (void *)a1[5];
  unint64_t v3 = a1[6];
  a1[5] = 0;
  a1[6] = 0;
  if (!v3)
  {
    v5[3] = v2;
    if (v2)
    {
      getErrorErrorCat();
      v5[0] = 3;
      v5[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
  }
  v5[0] = 0;
  uint64_t v4 = a1[4];
  if ((v4 & 2) == 0) {
    uint64_t v1 = (void *)*v1;
  }
  (*(void (**)(void *, void *))(v4 & 0xFFFFFFFFFFFFFFF8))(v1, v5);
  if (v5[0]) {
    (*(void (**)(void))(*(void *)v5[0] + 8))(v5[0]);
  }
  if (v3 > 8 || !v3 && v2) {
    free(v2);
  }
}

void _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvRS4_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void **)a2;
  unint64_t v3 = *(void **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v4, (long long *)(a1 + 8));
  v5[0] = v2;
  v5[1] = v3;
  operator new();
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvS1J_(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (long long *)(a2 + 8));
}

void *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBCE0;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 9)
  {
    unint64_t v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    unint64_t v3 = *(void **)(a1 + 40);
    if (v3) {
      goto LABEL_5;
    }
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBCE0;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2) {
      goto LABEL_8;
    }
    unint64_t v3 = *(void **)(a1 + 40);
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v3 = *(void **)(a1 + 40);
  }
  free(v3);
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E3runEv(void *a1)
{
  uint64_t v1 = a1 + 1;
  unint64_t v2 = (void *)a1[5];
  unint64_t v3 = a1[6];
  a1[5] = 0;
  a1[6] = 0;
  if (!v3)
  {
    v5[3] = v2;
    if (v2)
    {
      getErrorErrorCat();
      v5[0] = 3;
      v5[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
  }
  v5[0] = 0;
  uint64_t v4 = a1[4];
  if ((v4 & 2) == 0) {
    uint64_t v1 = (void *)*v1;
  }
  (*(void (**)(void *, void *))(v4 & 0xFFFFFFFFFFFFFFF8))(v1, v5);
  if (v5[0]) {
    (*(void (**)(void))(*(void *)v5[0] + 8))(v5[0]);
  }
  if (v3 > 8 || !v3 && v2) {
    free(v2);
  }
}

void _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvRS4_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void **)a2;
  unint64_t v3 = *(void **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v4, (long long *)(a1 + 8));
  v5[0] = v2;
  v5[1] = v3;
  operator new();
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvS1J_(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (long long *)(a2 + 8));
}

void *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBD28;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 9)
  {
    unint64_t v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    unint64_t v3 = *(void **)(a1 + 40);
    if (v3) {
      goto LABEL_5;
    }
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBD28;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2) {
      goto LABEL_8;
    }
    unint64_t v3 = *(void **)(a1 + 40);
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v3 = *(void **)(a1 + 40);
  }
  free(v3);
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E3runEv(void *a1)
{
  uint64_t v1 = a1 + 1;
  unint64_t v2 = (void *)a1[5];
  unint64_t v3 = a1[6];
  a1[5] = 0;
  a1[6] = 0;
  if (!v3)
  {
    v5[3] = v2;
    if (v2)
    {
      getErrorErrorCat();
      v5[0] = 3;
      v5[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
  }
  v5[0] = 0;
  uint64_t v4 = a1[4];
  if ((v4 & 2) == 0) {
    uint64_t v1 = (void *)*v1;
  }
  (*(void (**)(void *, void *))(v4 & 0xFFFFFFFFFFFFFFF8))(v1, v5);
  if (v5[0]) {
    (*(void (**)(void))(*(void *)v5[0] + 8))(v5[0]);
  }
  if (v3 > 8 || !v3 && v2) {
    free(v2);
  }
}

uint64_t llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>::serialize<llvm::orc::ExecutorAddr,llvm::StringRef>(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1[1] < 8uLL) {
    return 0;
  }
  *(void *)*a1 = a2;
  uint64_t v3 = a1[1] - 8;
  *a1 += 8;
  a1[1] = v3;
  return llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,llvm::StringRef,void>::serialize(a1, *(const void **)a3, *(void *)(a3 + 8));
}

void _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSC_IcEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSH_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes11BufferWriteEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISM_E9callAsyncIS18_SQ_JSU_EEEvS15_SW_DpRKT1_EUlSO_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvRS4_(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void **)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v4, (long long *)(a1 + 8));
  v5[0] = v2;
  v5[1] = v3;
  operator new();
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSC_IcEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSH_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes11BufferWriteEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISM_E9callAsyncIS18_SQ_JSU_EEEvS15_SW_DpRKT1_EUlSO_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvS1J_(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (long long *)(a2 + 8));
}

void *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSC_IcEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSH_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes11BufferWriteEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISM_E9callAsyncIS18_SQ_JSU_EEEvS15_SW_DpRKT1_EUlSO_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS8_IcEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSD_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes11BufferWriteEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISI_E9callAsyncIS14_SM_JSQ_EEEvS11_SS_DpRKT1_EUlSK_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBD70;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 9)
  {
    uint64_t v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    if (v3) {
      goto LABEL_5;
    }
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS8_IcEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSD_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes11BufferWriteEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISI_E9callAsyncIS14_SM_JSQ_EEEvS11_SS_DpRKT1_EUlSK_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBD70;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2) {
      goto LABEL_8;
    }
    uint64_t v3 = *(void **)(a1 + 40);
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = *(void **)(a1 + 40);
  }
  free(v3);
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 8));
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS8_IcEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSD_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes11BufferWriteEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISI_E9callAsyncIS14_SM_JSQ_EEEvS11_SS_DpRKT1_EUlSK_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS8_IcEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSD_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes11BufferWriteEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISI_E9callAsyncIS14_SM_JSQ_EEEvS11_SS_DpRKT1_EUlSK_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E3runEv(void *a1)
{
  uint64_t v1 = a1 + 1;
  unint64_t v2 = (void *)a1[5];
  unint64_t v3 = a1[6];
  a1[5] = 0;
  a1[6] = 0;
  if (!v3)
  {
    v5[3] = v2;
    if (v2)
    {
      getErrorErrorCat();
      v5[0] = 3;
      v5[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
  }
  v5[0] = 0;
  uint64_t v4 = a1[4];
  if ((v4 & 2) == 0) {
    uint64_t v1 = (void *)*v1;
  }
  (*(void (**)(void *, void *))(v4 & 0xFFFFFFFFFFFFFFF8))(v1, v5);
  if (v5[0]) {
    (*(void (**)(void))(*(void *)v5[0] + 8))(v5[0]);
  }
  if (v3 > 8 || !v3 && v2) {
    free(v2);
  }
}

void llvm::SmallVectorImpl<char>::resizeImpl<false>(void *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (a1[2] < a2)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, a2, 1);
        unint64_t v2 = a1[1];
      }
      if (a2 != v2) {
        bzero((void *)(*a1 + v2), a2 - v2);
      }
    }
    a1[1] = a2;
  }
}

uint64_t llvm::SmallVectorImpl<char>::operator=(uint64_t a1, const void **a2)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v5 = a2 + 3;
    uint64_t v4 = *a2;
    if (v4 == v5)
    {
      unint64_t v6 = (unint64_t)a2[1];
      unint64_t v7 = *(void *)(a1 + 8);
      if (v7 >= v6)
      {
        if (v6) {
          memmove(*(void **)a1, v4, (size_t)a2[1]);
        }
      }
      else
      {
        if (*(void *)(a1 + 16) >= v6)
        {
          if (v7) {
            memmove(*(void **)a1, v4, *(void *)(a1 + 8));
          }
        }
        else
        {
          *(void *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), v6, 1);
          unint64_t v7 = 0;
        }
        uint64_t v8 = (char *)a2[1];
        if ((char *)v7 != v8) {
          memcpy((void *)(*(void *)a1 + v7), (char *)*a2 + v7, &v8[(void)*a2] - ((char *)*a2 + v7));
        }
      }
      *(void *)(a1 + 8) = v6;
      a2[1] = 0;
    }
    else
    {
      llvm::SmallVectorImpl<char>::assignRemote(a1, (uint64_t)a2);
    }
  }
  return a1;
}

__n128 llvm::SmallVectorImpl<char>::assignRemote(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(a1 + 24);
  uint64_t v4 = *(void **)a1;
  if (v4 != v5) {
    free(v4);
  }
  *(void *)a1 = *(void *)a2;
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 24;
  return result;
}

void anonymous namespace'::GCDTaskDispatcher::~GCDTaskDispatcher(_anonymous_namespace_::GCDTaskDispatcher *this)
{
  *(void *)this = &unk_270DBBDB8;
  dispatch_release(*((dispatch_object_t *)this + 2));
  dispatch_release(*((dispatch_object_t *)this + 1));
  std::deque<std::unique_ptr<llvm::orc::Task>>::~deque[abi:nn180100]((void *)this + 13);
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
}

{
  uint64_t vars8;

  JUMPOUT(0x263E500B0);
}

void anonymous namespace'::GCDTaskDispatcher::dispatch(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::deque<std::unique_ptr<llvm::orc::Task>>::push_back((void *)(a1 + 104), a2);
  unint64_t v5 = *(void *)(a1 + 96);
  if (v5 < *(void *)(a1 + 88))
  {
    *(void *)(a1 + 96) = v5 + 1;
    unint64_t v7 = *(NSObject **)(a1 + 8);
    unint64_t v6 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN12_GLOBAL__N_117GCDTaskDispatcher8dispatchENSt3__110unique_ptrIN4llvm3orc4TaskENS1_14default_deleteIS5_EEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_49;
    block[4] = a1;
    dispatch_group_async(v6, v7, block);
  }
  std::mutex::unlock(v4);
}

intptr_t anonymous namespace'::GCDTaskDispatcher::shutdown(dispatch_group_t *this)
{
  return dispatch_group_wait(this[2], 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t std::deque<std::unique_ptr<llvm::orc::Task>>::~deque[abi:nn180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    unint64_t v6 = &v2[v5 >> 9];
    unint64_t v7 = (uint64_t *)((char *)*v6 + 8 * (v5 & 0x1FF));
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (uint64_t *)v8)
    {
      do
      {
        uint64_t v9 = *v7;
        *unint64_t v7 = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
        if ((char *)++v7 - (unsigned char *)*v6 == 4096)
        {
          uint64_t v10 = (uint64_t *)v6[1];
          ++v6;
          unint64_t v7 = v10;
        }
      }
      while (v7 != (uint64_t *)v8);
      unint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 256;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_18;
    }
    uint64_t v13 = 512;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void std::deque<std::unique_ptr<llvm::orc::Task>>::push_back(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::unique_ptr<llvm::orc::Task>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  uint64_t v9 = *(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
  uint64_t v10 = *a2;
  *a2 = 0;
  *(void *)(v9 + 8 * (v8 & 0x1FF)) = v10;
  a1[5] = v7 + 1;
}

void ___ZN12_GLOBAL__N_117GCDTaskDispatcher8dispatchENSt3__110unique_ptrIN4llvm3orc4TaskENS1_14default_deleteIS5_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::mutex::lock((std::mutex *)(v1 + 24));
  while (*(void *)(v1 + 144))
  {
    uint64_t v2 = *(void *)(*(void *)(v1 + 112) + ((*(void *)(v1 + 136) >> 6) & 0x3FFFFFFFFFFFFF8));
    uint64_t v3 = *(void *)(v1 + 136) & 0x1FFLL;
    uint64_t v4 = *(void *)(v2 + 8 * v3);
    *(void *)(v2 + 8 * v3) = 0;
    std::deque<std::unique_ptr<llvm::orc::Task>>::pop_front((void *)(v1 + 104));
    std::mutex::unlock((std::mutex *)(v1 + 24));
    (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    std::mutex::lock((std::mutex *)(v1 + 24));
  }
  --*(void *)(v1 + 96);
  std::mutex::unlock((std::mutex *)(v1 + 24));
}

uint64_t std::deque<std::unique_ptr<llvm::orc::Task>>::pop_front(void *a1)
{
  unint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(a1[1] + ((v2 >> 6) & 0x3FFFFFFFFFFFFF8));
  uint64_t v4 = *(void *)(v3 + 8 * (v2 & 0x1FF));
  *(void *)(v3 + 8 * (v2 & 0x1FF)) = 0;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    unint64_t v2 = a1[4];
  }
  uint64_t v5 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v5;
  return std::deque<std::unique_ptr<llvm::orc::Task>>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)a1, 1);
}

void std::deque<std::unique_ptr<llvm::orc::Task>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v29 = 1;
      }
      else {
        unint64_t v29 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v5, v29);
      uint64_t v31 = &v30[8 * (v29 >> 2)];
      uint64_t v33 = &v30[8 * v32];
      std::string v34 = (uint64_t *)a1[1];
      unint64_t v8 = v31;
      uint64_t v35 = a1[2] - (void)v34;
      if (v35)
      {
        unint64_t v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v36 = 8 * (v35 >> 3);
        char v37 = &v30[8 * (v29 >> 2)];
        do
        {
          uint64_t v38 = *v34++;
          *(void *)char v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *>>::push_front((uint64_t)a1, &v54);
    unint64_t v40 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v41 = *v40;
    uint64_t v9 = (char *)(v40 + 1);
    uint64_t v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_29;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(a1 + 3), v46);
      uint64_t v31 = &v30[8 * (v46 >> 2)];
      uint64_t v33 = &v30[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v31;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        v51 = &v30[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      uint64_t v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *> &>::push_back(&v54, &v53);
  long long v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    long long v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *> &>::push_front((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    long long v28 = (char *)a1[2];
  }
  unint64_t v42 = (char *)*a1;
  long long v43 = v54;
  long long v44 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  uint64_t v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(void *)&long long v55 = v28;
  *((void *)&v55 + 1) = v45;
  if (v28 != v27) {
    *(void *)&long long v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (v42) {
    operator delete(v42);
  }
}

void std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *>>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      long long v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      long long v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *>>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *> &>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *> &>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<std::unique_ptr<llvm::orc::Task>>::__maybe_remove_front_spare[abi:nn180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

uint64_t *llvm::Expected<std::unique_ptr<xojit::XOJITXPC>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v3) {
LABEL_5:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else if (v3)
  {
    goto LABEL_5;
  }
  return a1;
}

void llvm::detail::UniqueFunctionBase<llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager>>,llvm::orc::SimpleRemoteEPC &>::CallImpl<xojit::createXPCEPC(_xpc_connection_s *,unsigned int,std::unique_ptr<llvm::orc::TaskDispatcher>)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(unsigned int *)a1[2];
  if (v4 >= 3)
  {
    *(void *)buf = "Unrecognized OOP-JIT type ";
    *(void *)&buf[16] = v4;
    LOWORD(v48) = 2051;
    getErrorErrorCat();
    operator new();
  }
  uint64_t v6 = **a1;
  __int16 v33 = 0;
  llvm::orc::ExecutorProcessControl::getBootstrapMapValue<BOOL,BOOL>(buf, a2, (uint64_t *)"IsSandboxed", 0xBuLL, (uint64_t)&v33);
  std::string::size_type v7 = *(void *)buf;
  if (!*(void *)buf)
  {
    if (!HIBYTE(v33))
    {
      getErrorErrorCat();
      *(void *)buf = 3;
      *(void *)&buf[8] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
    }
    __int16 v32 = 0;
    llvm::orc::ExecutorProcessControl::getBootstrapMapValue<BOOL,BOOL>(buf, a2, (uint64_t *)"UseOOPJIT", 9uLL, (uint64_t)&v32);
    std::string::size_type v7 = *(void *)buf;
    if (!*(void *)buf)
    {
      if (!HIBYTE(v32))
      {
        getErrorErrorCat();
        *(void *)buf = 3;
        *(void *)&buf[8] = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const(&)[38],std::error_code>();
      }
      int v8 = v33;
      v62.__r_.__value_.__r.__words[2] = 0;
      if (!(_BYTE)v33 || *(_DWORD *)(a2 + 80) == 23)
      {
        *(void *)buf = &buf[24];
        *(_OWORD *)&buf[8] = xmmword_261E8A720;
        llvm::sys::path::system_temp_directory(1, buf);
        llvm::SmallVectorImpl<char>::append<char const*,void>(buf, "/OOPJit/", "");
        std::string::basic_string[abi:nn180100](__p, *(void **)buf, *(size_t *)&buf[8]);
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v62.__r_.__value_.__r.__words[2] = v40;
        if (*(unsigned char **)buf != &buf[24]) {
          free(*(void **)buf);
        }
      }
      else
      {
        *((unsigned char *)&v62.__r_.__value_.__s + 23) = 20;
        LODWORD(v62.__r_.__value_.__r.__words[2]) = 796158282;
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)"/private/var/OOPJit/";
      }
      size_t v9 = strlen(*((const char **)&oop_jit_conversion + v4));
      std::string::append(&v62, *((const std::string::value_type **)&oop_jit_conversion + v4), v9);
      LOWORD(v48) = 260;
      *(void *)buf = &v62;
      *(void *)&v35.__val_ = llvm::sys::fs::create_directories((uint64_t)buf, 1, 511);
      v35.__cat_ = v10;
      if (v35.__val_)
      {
        *(void *)&long long v36 = "Could not create oop-jit code file directory ";
        *((void *)&v36 + 1) = 45;
        *(void *)&long long v37 = &v62;
        LOWORD(v38) = 1029;
        __p[0] = &v36;
        *(void *)&long long v40 = ": ";
        LOWORD(v41) = 770;
        std::error_code::message(&v34, &v35);
        *(void *)buf = __p;
        *(void *)&buf[16] = &v34;
        LOWORD(v48) = 1026;
        getErrorErrorCat();
        operator new();
      }
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v62.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:nn180100]((uint64_t)__p, size + 7);
      if ((SBYTE7(v40) & 0x80u) == 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      if (size)
      {
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v13 = &v62;
        }
        else {
          uint64_t v13 = (std::string *)v62.__r_.__value_.__r.__words[0];
        }
        memmove(v12, v13, size);
      }
      strcpy((char *)v12 + size, "/XXXXXX");
      if ((SBYTE7(v40) & 0x80u) == 0) {
        uint64_t v14 = (char *)__p;
      }
      else {
        uint64_t v14 = (char *)__p[0];
      }
      uint64_t v15 = mkdtemp(v14);
      if (v15)
      {
        unint64_t v16 = v15;
        int v17 = open(v15, 0x100000);
        if (v17 != -1)
        {
          v46 &= ~1u;
          v43[0] = v17;
          std::string::basic_string[abi:nn180100]<0>(&v44, v16);
          if (SBYTE7(v40) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v62.__r_.__value_.__l.__data_);
          }
          if (v46)
          {
            std::string::size_type v7 = *(void *)v43;
            *(void *)long long v43 = 0;
          }
          else
          {
            long long v37 = 0u;
            long long v38 = 0u;
            long long v36 = 0u;
            *(void *)buf = &v36;
            *(void *)&buf[8] = "__xojit_xpcmemmgr_instance";
            *(void *)&buf[16] = 26;
            *(void *)&buf[24] = (char *)&v36 + 8;
            uint64_t v48 = "__xojit_xpcmemmgr_acquire_slab";
            uint64_t v49 = 30;
            uint64_t v50 = &v37;
            v51 = "__xojit_xpcmemmgr_release_slab";
            uint64_t v52 = 30;
            int v53 = (char *)&v37 + 8;
            long long v54 = "__xojit_xpcmemmgr_deallocate";
            uint64_t v55 = 28;
            uint64_t v56 = &v38;
            uint64_t v57 = "__xojit_xpcmemmgr_make_read_only";
            uint64_t v58 = 32;
            unint64_t v59 = (char *)&v38 + 8;
            uint64_t v60 = "__xojit_xpcmemmgr_apply_sandbox_extension";
            uint64_t v61 = 41;
            llvm::orc::ExecutorProcessControl::getBootstrapSymbols(a2, (uint64_t)buf, 6, &v62);
            std::string::size_type v7 = v62.__r_.__value_.__r.__words[0];
            if (!v62.__r_.__value_.__r.__words[0])
            {
              char v42 = 0;
              *(_OWORD *)std::string __p = v36;
              long long v40 = v37;
              long long v41 = v38;
              if (v32 | v8)
              {
                std::mutex::lock((std::mutex *)(v6 + 8));
                uint64_t v24 = *(_xpc_connection_s **)(v6 + 72);
                if (!v24)
                {
                  std::mutex::unlock((std::mutex *)(v6 + 8));
                  getErrorErrorCat();
                  *(void *)buf = 3;
                  *(void *)&buf[8] = &getErrorErrorCat(void)::ErrorErrorCat;
                  llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
                }
                xpc_connection_get_pid(v24);
                std::mutex::unlock((std::mutex *)(v6 + 8));
                std::mutex::lock((std::mutex *)(v6 + 8));
                if (!*(void *)(v6 + 72))
                {
                  std::mutex::unlock((std::mutex *)(v6 + 8));
                  getErrorErrorCat();
                  *(void *)&long long v36 = 3;
                  *((void *)&v36 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
                  llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
                }
                xpc_connection_get_audit_token();
                std::mutex::unlock((std::mutex *)(v6 + 8));
                if (csops_audittoken())
                {
                  int v25 = *__error();
                  uint64_t v26 = std::generic_category();
                  LODWORD(v36) = v25;
                  *((void *)&v36 + 1) = v26;
                  llvm::make_error<llvm::StringError,std::error_code,char const(&)[30]>();
                }
                if (v8)
                {
                  long long v36 = *(_OWORD *)buf;
                  long long v37 = *(_OWORD *)&buf[16];
                  long long v27 = (const char *)sandbox_extension_issue_file_to_process();
                  if (v27)
                  {
                    uint64_t v31 = 0;
                    *(void *)&v35.__val_ = v27;
                    v35.__cat_ = (const std::error_category *)strlen(v27);
                    v34.__r_.__value_.__r.__words[0] = a2;
                    v34.__r_.__value_.__l.__size_ = *((void *)&v41 + 1);
                    llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>),llvm::Error &,llvm::orc::ExecutorAddr &,llvm::StringRef>(llvm::orc::ExecutorAddr,llvm::Error &,llvm::orc::ExecutorAddr &,llvm::StringRef &&)::{lambda(char const*,unsigned long)#1},llvm::Error,llvm::orc::ExecutorAddr,llvm::StringRef>((uint64_t)&v30, (uint64_t)&v34, &v31, (uint64_t *)__p, (uint64_t)&v35);
                  }
                  int v28 = *__error();
                  unint64_t v29 = std::generic_category();
                  LODWORD(v34.__r_.__value_.__l.__data_) = v28;
                  v34.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
                  llvm::make_error<llvm::StringError,std::error_code,char const(&)[41]>();
                }
              }
              operator new();
            }
            close(v43[0]);
          }
          if (v46)
          {
            std::string::size_type v23 = *(void *)v43;
            *(void *)long long v43 = 0;
            if (v23) {
              (*(void (**)(std::string::size_type))(*(void *)v23 + 8))(v23);
            }
          }
          else if (v45 < 0)
          {
            operator delete(v44);
          }
          goto LABEL_11;
        }
        uint64_t v22 = __error();
        uint64_t v19 = strerror(*v22);
        LOWORD(v48) = 773;
        uint64_t v20 = "Could not open temporary path for code files: ";
        uint64_t v21 = 46;
      }
      else
      {
        uint64_t v18 = __error();
        uint64_t v19 = strerror(*v18);
        LOWORD(v48) = 773;
        uint64_t v20 = "Could not create code file directory for session: ";
        uint64_t v21 = 50;
      }
      *(void *)buf = v20;
      *(void *)&buf[8] = v21;
      *(void *)&buf[16] = v19;
      getErrorErrorCat();
      operator new();
    }
  }
LABEL_11:
  *(unsigned char *)(a3 + 8) = *(unsigned char *)(a3 + 8) & 0xFE | 1;
  *(void *)a3 = v7;
}

uint64_t llvm::orc::ExecutorProcessControl::getBootstrapMapValue<BOOL,BOOL>(void *a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a5 + 1)) {
    *(unsigned char *)(a5 + 1) = 0;
  }
  uint64_t result = llvm::StringMapImpl::FindKey((uint64_t *)(a2 + 128), a3, a4);
  if (result != -1 && (int)result != (unint64_t)*(unsigned int *)(a2 + 136))
  {
    uint64_t v11 = *(void *)(*(void *)(a2 + 128) + 8 * (int)result);
    uint64_t v12 = *(unsigned __int8 **)(v11 + 8);
    if (*(unsigned __int8 **)(v11 + 16) == v12)
    {
      __int16 v16 = 1283;
      uint64_t v13 = "Could not deserialize value for key ";
      uint64_t v14 = a3;
      unint64_t v15 = a4;
      getErrorErrorCat();
      operator new();
    }
    *(_WORD *)a5 = *v12 | 0x100;
  }
  *a1 = 0;
  return result;
}

void llvm::make_error<llvm::StringError,std::error_code,char const(&)[30]>()
{
}

void llvm::make_error<llvm::StringError,std::error_code,char const(&)[41]>()
{
}

void *std::string::basic_string[abi:nn180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    void *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>),llvm::Error &,llvm::orc::ExecutorAddr &,llvm::StringRef>(llvm::orc::ExecutorAddr,llvm::Error &,llvm::orc::ExecutorAddr &,llvm::StringRef &&)::{lambda(char const*,unsigned long)#1},llvm::Error,llvm::orc::ExecutorAddr,llvm::StringRef>(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5)
{
  *a3 = 0;
  uint64_t v7 = *(void *)(a5 + 8);
  uint64_t v8 = v7 + 16;
  v12[0] = 0;
  v12[1] = (void *)(v7 + 16);
  if ((unint64_t)(v7 + 16) <= 8)
  {
    size_t v9 = v12;
  }
  else
  {
    size_t v9 = malloc_type_malloc(v7 + 16, 0xBCDE199DuLL);
    v12[0] = v9;
  }
  v11[0] = v9;
  v11[1] = v8;
  if (llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>::serialize<llvm::orc::ExecutorAddr,llvm::StringRef>(v11, *a4, a5))
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v12;
  }
  else
  {
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v10);
    if (v12[1] > (void *)8 || !v12[1] && v12[0]) {
      free(v12[0]);
    }
  }
  if (!v10[1])
  {
    v11[0] = v10[0];
    if (v10[0])
    {
      getErrorErrorCat();
      v12[0] = (void *)3;
      v12[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
  }
  llvm::orc::ExecutorProcessControl::callWrapper();
}

void llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSError,llvm::Error>::deserialize(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v12[0] = a2;
  v12[1] = a3;
  v8[0] = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  size_t v9 = 0;
  if (!llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSError,llvm::orc::shared::detail::SPSSerializableError,void>::deserialize(v12, (uint64_t)v8))
  {
    getErrorErrorCat();
    void v12[2] = 3;
    v12[3] = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
  }
  std::string __p = v9;
  char v7 = HIBYTE(v11);
  size_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (v8[0])
  {
    getErrorErrorCat();
    operator new();
  }
  *a1 = 0;
  if (v7 < 0) {
    operator delete(__p);
  }
  *a4 = 0;
  if (SHIBYTE(v11) < 0) {
    operator delete(v9);
  }
}

BOOL llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSError,llvm::orc::shared::detail::SPSSerializableError,void>::deserialize(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(*a1)++;
  a1[1] = v2 - 1;
  *(unsigned char *)a2 = v3;
  return !v3
      || llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::deserialize((uint64_t)a1, (std::string *)(a2 + 8));
}

BOOL llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::deserialize(uint64_t a1, std::string *this)
{
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v2 >= 8;
  unint64_t v4 = v2 - 8;
  if (!v3) {
    return 0;
  }
  std::string::size_type v7 = **(void **)a1;
  *(void *)a1 += 8;
  *(void *)(a1 + 8) = v4;
  std::string::reserve(this, v7);
  if (!v7) {
    return 1;
  }
  do
  {
    uint64_t v8 = *(void *)(a1 + 8);
    BOOL v10 = v8 != 0;
    if (!v8) {
      break;
    }
    std::string::value_type v9 = *(unsigned char *)(*(void *)a1)++;
    *(void *)(a1 + 8) = v8 - 1;
    std::string::push_back(this, v9);
    --v7;
  }
  while (v7);
  return v10;
}

void anonymous namespace'::XPCMemoryManager::~XPCMemoryManager(_anonymous_namespace_::XPCMemoryManager *this)
{
  *(void *)this = &unk_270DBBDE8;
  close(*((_DWORD *)this + 32));
  __int16 v15 = 260;
  uint64_t v14 = (char *)this + 104;
  llvm::sys::fs::remove_directories((llvm::sys::fs *)&v14, (const llvm::Twine *)1);
  uint64_t v2 = *((unsigned int *)this + 86);
  uint64_t v3 = *((void *)this + 41);
  if (v2)
  {
    uint64_t v4 = 40 * v2;
    uint64_t v5 = (void *)(v3 + 8);
    do
    {
      if (*(v5 - 1) <= 0xFFFFFFFFFFFFFFFDLL) {
        uint64_t v5 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v5);
      }
      v5 += 5;
      v4 -= 40;
    }
    while (v4);
    uint64_t v3 = *((void *)this + 41);
  }
  MEMORY[0x263E500A0](v3, 8);
  std::mutex::~mutex((std::mutex *)((char *)this + 248));
  uint64_t v6 = *((unsigned int *)this + 60);
  uint64_t v7 = *((void *)this + 28);
  if (v6)
  {
    uint64_t v8 = 32 * v6;
    std::string::value_type v9 = (void **)(v7 + 8);
    do
    {
      if (((unint64_t)*(v9 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
      v9 += 4;
      }
      v8 -= 32;
    }
    while (v8);
    uint64_t v7 = *((void *)this + 28);
  }
  MEMORY[0x263E500A0](v7, 8);
  uint64_t v10 = *((unsigned int *)this + 54);
  uint64_t v11 = *((void *)this + 25);
  if (v10)
  {
    uint64_t v12 = 16 * v10;
    uint64_t v13 = (uint64_t *)(v11 + 8);
    do
    {
      if ((*(v13 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
      v13 += 2;
      }
      v12 -= 16;
    }
    while (v12);
    uint64_t v11 = *((void *)this + 25);
  }
  MEMORY[0x263E500A0](v11, 8);
  std::mutex::~mutex((std::mutex *)((char *)this + 136));
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
}

{
  uint64_t vars8;

  JUMPOUT(0x263E500B0);
}

uint64_t anonymous namespace'::XPCMemoryManager::allocate(uint64_t a1, uint64_t a2, llvm::jitlink::LinkGraph *a3, long long *a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  llvm::jitlink::BasicLayout::BasicLayout((llvm::jitlink::BasicLayout *)&v22, a3);
  if (v24)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v23;
    do
    {
      unsigned int v12 = *v11;
      unsigned int v13 = v12 & 7;
      if (v13 >= 4 && v13 != 5)
      {
        getErrorErrorCat();
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
      }
      if ((v12 & 1) == 0)
      {
        getErrorErrorCat();
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
      }
      unint64_t v15 = *(unsigned int *)(*(void *)(a1 + 8) + 88);
      if (!(v15 >> v11[8]))
      {
        getErrorErrorCat();
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
      }
      uint64_t v16 = *((void *)v11 + 3) + *((void *)v11 + 2);
      if (v12 > 7)
      {
        if (v13 >= 4) {
          v9 += v16;
        }
        else {
          v8 += (v15 + v16 - 1) / v15 * v15;
        }
      }
      else if (v13 >= 4)
      {
        v10 += v16;
      }
      else
      {
        v7 += (v15 + v16 - 1) / v15 * v15;
      }
      v11 += 104;
    }
    while (v11 != &v23[104 * v24]);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  v18[0] = v7;
  v18[1] = v8;
  void v18[2] = v10;
  v18[3] = v9;
  v18[4] = v22;
  v19[0] = &v20;
  v19[1] = 0x400000000;
  if (v24) {
    llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)v19, (uint64_t)&v23);
  }
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v21, a4);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v21);
  llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)v19);
  return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v23);
}

void anonymous namespace'::XPCMemoryManager::deallocate(void *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = (long long *)a3;
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    std::string __p = 0;
    char v46 = 0;
    uint64_t v47 = 0;
    std::vector<llvm::orc::ExecutorAddr>::reserve(&__p, v5 - v4);
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    if (*a2 == v9)
    {
      unsigned int v12 = v46;
    }
    else
    {
      uint64_t v10 = v46;
      do
      {
        uint64_t v11 = *v8;
        *uint64_t v8 = -1;
        if (v10 >= v47)
        {
          unsigned int v13 = (char *)__p;
          uint64_t v14 = (v10 - (unsigned char *)__p) >> 3;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            abort();
          }
          uint64_t v16 = v47 - (unsigned char *)__p;
          if ((v47 - (unsigned char *)__p) >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v47, v17);
            unsigned int v13 = (char *)__p;
            uint64_t v10 = v46;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = &v18[8 * v14];
          *(void *)uint64_t v19 = v11;
          unsigned int v12 = v19 + 8;
          while (v10 != v13)
          {
            uint64_t v20 = *((void *)v10 - 1);
            v10 -= 8;
            *((void *)v19 - 1) = v20;
            v19 -= 8;
          }
          std::string __p = v19;
          char v46 = v12;
          uint64_t v47 = &v18[8 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *(void *)uint64_t v10 = v11;
          unsigned int v12 = v10 + 8;
        }
        char v46 = v12;
        ++v8;
        uint64_t v10 = v12;
      }
      while (v8 != v9);
    }
    uint64_t v22 = (void *)a1[1];
    uint64_t v23 = a1[6];
    v50[0] = a1;
    v50[1] = 0;
    __dst[0] = 0;
    __dst[1] = 0;
    int v24 = __p;
    int64_t v25 = v12 - (unsigned char *)__p;
    if (v12 != __p)
    {
      std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](&v50[1], v25 >> 3);
      uint64_t v26 = (char *)__dst[0];
      memmove(__dst[0], v24, v25);
      __dst[0] = &v26[v25];
    }
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v52, v3);
    uint64_t v27 = v46 - (unsigned char *)__p - 8;
    uint64_t v28 = v22[3];
    unint64_t v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 24;
    if (v46 == __p) {
      size_t v30 = 16;
    }
    else {
      size_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 24;
    }
    *(void *)&long long v65 = 0;
    *((void *)&v65 + 1) = v30;
    if (v30 < 9)
    {
      if ((v27 & 0xFFFFFFFFFFFFFFF8) == 0xFFFFFFFFFFFFFFE8)
      {
        llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v49);
        goto LABEL_50;
      }
      __int16 v32 = (char *)&v65 + 8;
      uint64_t v31 = &v65;
    }
    else
    {
      uint64_t v31 = (long long *)malloc_type_malloc(v30, 0xBCDE199DuLL);
      __int16 v32 = (char *)v31 + 8;
      *(void *)&long long v65 = v31;
      unint64_t v29 = v30;
    }
    *(void *)uint64_t v31 = a1[3];
    if ((v29 & 0xFFFFFFFFFFFFFFF8) != 8)
    {
      __int16 v33 = (char *)__p;
      *((void *)v31 + 1) = (v46 - (unsigned char *)__p) >> 3;
      std::string v34 = v46;
      BOOL v35 = v33 == v46;
      if (v29 - 16 >= 8 && v33 != v46)
      {
        unint64_t v36 = v29 - 24;
        long long v37 = v32 + 8;
        long long v38 = v33 + 8;
        do
        {
          *v37++ = *((void *)v38 - 1);
          BOOL v35 = v38 == v34;
          if (v38 == v34) {
            break;
          }
          v38 += 8;
          BOOL v39 = v36 > 7;
          v36 -= 8;
        }
        while (v39);
      }
      if (v35)
      {
        *(_OWORD *)uint64_t v49 = v65;
        goto LABEL_50;
      }
      size_t v30 = *((void *)&v65 + 1);
    }
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v49);
    if (v30 > 8 || !v30 && (void)v65) {
      free((void *)v65);
    }
LABEL_50:
    if (!v49[1])
    {
      *(void **)unint64_t v59 = v49[0];
      if (v49[0])
      {
        getErrorErrorCat();
        *(void *)&long long v65 = 3;
        *((void *)&v65 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const*&,std::error_code>();
      }
    }
    *(_OWORD *)int v53 = *(_OWORD *)v50;
    long long v54 = *(_OWORD *)__dst;
    __dst[0] = 0;
    __dst[1] = 0;
    v50[1] = 0;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v55, &v52);
    *(_OWORD *)&v59[8] = *(_OWORD *)v53;
    long long v40 = v49[1];
    if (v49[1] <= (void *)8) {
      long long v41 = v49;
    }
    else {
      long long v41 = (void **)v49[0];
    }
    *(void *)unint64_t v59 = v28;
    *(_OWORD *)&v59[24] = v54;
    v53[1] = 0;
    long long v54 = 0uLL;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v60, v55);
    long long v61 = *(_OWORD *)v59;
    long long v62 = *(_OWORD *)&v59[16];
    uint64_t v63 = *(void *)&v59[32];
    memset(&v59[16], 0, 24);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v64, v60);
    long long v65 = v61;
    long long v66 = v62;
    uint64_t v67 = v63;
    long long v62 = 0uLL;
    uint64_t v63 = 0;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v68, v64);
    char v42 = operator new(0x48uLL, (std::align_val_t)8uLL);
    uint64_t v56 = v42;
    long long v57 = xmmword_261E8A750;
    long long v43 = v66;
    _OWORD *v42 = v65;
    v42[1] = v43;
    *((void *)v42 + 4) = v67;
    long long v66 = 0uLL;
    uint64_t v67 = 0;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v42 + 40, v68);
    uint64_t v58 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSL_9allocatorISP_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrENSM_ISY_NSQ_ISY_EEEEEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_S10_EEEvS1A_S12_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1A_EUlS4_E_S1K_vE9CallbacksE
        + 4;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v68);
    if ((void)v66)
    {
      *((void *)&v66 + 1) = v66;
      operator delete((void *)v66);
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v64);
    if ((void)v62)
    {
      *((void *)&v62 + 1) = v62;
      operator delete((void *)v62);
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v60);
    if (*(void *)&v59[16])
    {
      *(void *)&v59[24] = *(void *)&v59[16];
      operator delete(*(void **)&v59[16]);
    }
    (*(void (**)(void *, uint64_t, _OWORD **, void **, void *))(*v22 + 56))(v22, v23, &v56, v41, v40);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v56);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v55);
    if (v53[1])
    {
      *(void **)&long long v54 = v53[1];
      operator delete(v53[1]);
    }
    if (v49[1] < (void *)9)
    {
      if (v49[1]) {
        goto LABEL_69;
      }
      long long v44 = v49[0];
      if (!v49[0]) {
        goto LABEL_69;
      }
    }
    else
    {
      long long v44 = v49[0];
    }
    free(v44);
LABEL_69:
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v52);
    if (v50[1])
    {
      __dst[0] = v50[1];
      operator delete(v50[1]);
    }
    if (__p)
    {
      char v46 = (char *)__p;
      operator delete(__p);
    }
    return;
  }
  uint64_t v48 = 0;
  uint64_t v21 = *(void *)(a3 + 24);
  if ((v21 & 2) == 0) {
    uint64_t v3 = *(long long **)a3;
  }
  (*(void (**)(long long *, uint64_t *))(v21 & 0xFFFFFFFFFFFFFFF8))(v3, &v48);
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
}

void *llvm::detail::UniqueFunctionBase<llvm::Error,void *>::CallImpl<anonymous namespace'::XPCMemoryManager::XPCMemoryManager(llvm::orc::SimpleRemoteEPC &,xojit::XOJITXPC &,unsigned long long,anonymous namespace'::CodeDirectoryHash,unsigned int,BOOL,BOOL,std::string,int,anonymous namespace'::XPCMemoryManager::SymbolAddrs)::$_0>@<X0>(xpc_object_t xdict@<X1>, uint64_t *a2@<X0>, void *a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  if (xdict)
  {
    uint64_t uint64 = xpc_dictionary_get_uint64(xdict, "id");
    if (!uint64)
    {
      getErrorErrorCat();
      uint64_t v25 = 3;
      uint64_t v26 = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
    }
    uint64_t v7 = uint64;
    unint64_t v24 = 0;
    std::mutex::lock((std::mutex *)(v4 + 248));
    uint64_t v25 = 0;
    int v8 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(void *)(v4 + 328), *(_DWORD *)(v4 + 344), v7, &v25);
    uint64_t v9 = v25;
    if (v8) {
      BOOL v10 = v25 == *(void *)(v4 + 328) + 40 * *(unsigned int *)(v4 + 344);
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      if (&v23 != (void **)(v25 + 8))
      {
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v23);
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v23, (long long *)(v9 + 8));
      }
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(v9 + 8));
      *(void *)uint64_t v9 = -2;
      *(int32x2_t *)(v4 + 336) = vadd_s32(*(int32x2_t *)(v4 + 336), (int32x2_t)0x1FFFFFFFFLL);
    }
    std::mutex::unlock((std::mutex *)(v4 + 248));
    if (v24 <= 7)
    {
      getErrorErrorCat();
      operator new();
    }
    string = xpc_dictionary_get_string(xdict, "err");
    if (string)
    {
      __int16 v28 = 773;
      uint64_t v25 = (uint64_t)"finalization failed: ";
      uint64_t v26 = 21;
      uint64_t v27 = string;
      getErrorErrorCat();
      operator new();
    }
    uint64_t v20 = xpc_dictionary_get_uint64(xdict, "fa");
    if (!v20)
    {
      getErrorErrorCat();
      uint64_t v25 = 3;
      uint64_t v26 = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
    }
    LOBYTE(v26) = 0;
    uint64_t v25 = v20;
    if ((v24 & 2) != 0) {
      uint64_t v21 = &v23;
    }
    else {
      uint64_t v21 = v23;
    }
    (*(void (**)(void *, uint64_t *))(v24 & 0xFFFFFFFFFFFFFFF8))(v21, &v25);
    if (v26)
    {
      uint64_t v22 = v25;
      uint64_t v25 = 0;
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
    }
    *a3 = 0;
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v23);
  }
  else
  {
    std::mutex::lock((std::mutex *)(v4 + 248));
    *(unsigned char *)(v4 + 312) = 1;
    MEMORY[0x263E500A0](0, 8);
    unsigned int v12 = *(void **)(v4 + 328);
    int v13 = *(_DWORD *)(v4 + 336);
    *(void *)(v4 + 328) = 0;
    *(void *)(v4 + 336) = 0;
    uint64_t v14 = *(unsigned int *)(v4 + 344);
    *(_DWORD *)(v4 + 344) = 0;
    std::mutex::unlock((std::mutex *)(v4 + 248));
    if (v13)
    {
      unint64_t v15 = v12;
      if (v14)
      {
        uint64_t v16 = 40 * v14;
        unint64_t v15 = v12;
        while (*v15 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v15 += 5;
          v16 -= 40;
          if (!v16) {
            goto LABEL_23;
          }
        }
      }
      if (v15 != &v12[5 * v14])
      {
        getErrorErrorCat();
        operator new();
      }
    }
LABEL_23:
    if (v14)
    {
      uint64_t v17 = 40 * v14;
      uint64_t v18 = v12 + 1;
      do
      {
        if (*(v18 - 1) <= 0xFFFFFFFFFFFFFFFDLL) {
          uint64_t v18 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v18);
        }
        v18 += 5;
        v17 -= 40;
      }
      while (v17);
    }
    uint64_t result = (void *)MEMORY[0x263E500A0](v12, 8);
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 40 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      BOOL v10 = 0;
      int v11 = 1;
      while (v7 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -2;
        }
        if (v12) {
          BOOL v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 40 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void **std::vector<anonymous namespace'::XPCMemoryManager::ReserveRequest>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)v3 - 4);
        llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)(v3 - 464));
        v3 -= 504;
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector(uint64_t a1)
{
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  return a1;
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::destroy_range(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v2 = a2;
    do
    {
      int v4 = *(void **)(v2 - 24);
      if (v4)
      {
        *(void *)(v2 - 16) = v4;
        operator delete(v4);
      }
      unsigned int v5 = *(void **)(v2 - 48);
      if (v5)
      {
        *(void *)(v2 - 40) = v5;
        operator delete(v5);
      }
      v2 -= 104;
    }
    while (v2 != a1);
  }
}

uint64_t *std::unique_ptr<anonymous namespace'::XPCMemoryManager::JDLayout>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(*(void **)(v2 + 24));
    JUMPOUT(0x263E500B0);
  }
  return result;
}

void std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(*a1);
    std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void anonymous namespace'::XPCMemoryManager::reserve(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  v90.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 136);
  v90.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 136));
  *(void *)v112 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)(a1 + 200), *(_DWORD *)(a1 + 216), a2, v112))
  {
    uint64_t v6 = *(void *)v112;
    uint64_t v7 = *(void *)(a1 + 200);
    uint64_t v8 = *(unsigned int *)(a1 + 216);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 200);
    uint64_t v8 = *(unsigned int *)(a1 + 216);
    uint64_t v6 = v7 + 16 * v8;
  }
  if (v6 != v7 + 16 * v8)
  {
    unint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 88);
    unint64_t v10 = *(void *)a3 + (v9 - 1 + *(void *)(a3 + 16)) / v9 * v9;
    unint64_t v11 = *(void *)(a3 + 8) + (*(void *)(a3 + 24) + v9 - 1) / v9 * v9;
    if (!(v10 | v11))
    {
      unint64_t v12 = 0;
      unint64_t v13 = 0;
LABEL_7:
      std::unique_lock<std::mutex>::unlock(&v90);
      long long v55 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)size_t size = *(_OWORD *)a3;
      long long v95 = v55;
      uint64_t v96 = *(void *)(a3 + 32);
      std::string::size_type v97 = &v99;
      uint64_t v98 = 0x400000000;
      if (*(_DWORD *)(a3 + 48)) {
        llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v97, a3 + 40);
      }
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v100, (long long *)(a3 + 472));
      v106[0] = v107;
      v106[1] = (void *)0x400000000;
      long long v110 = 0u;
      long long v111 = 0u;
      v104 = (void **)v12;
      unint64_t v105 = v13;
      if ((v112[16] & 1) != 0
        || (long long v108 = *(_OWORD *)v112,
            (v112[16] & 1) != 0))
      {
        char v103 = -1;
        v102 = *(void ***)v112;
        if ((v101 & 2) != 0) {
          uint64_t v71 = v100;
        }
        else {
          uint64_t v71 = (void *)v100[0];
        }
        (*(void (**)(void *, void ***))(v101 & 0xFFFFFFFFFFFFFFF8))(v71, &v102);
        llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>::~Expected((uint64_t *)&v102);
      }
      else
      {
        long long v109 = *(_OWORD *)v112;
        uint64_t v86 = v96;
        if (v98)
        {
          unint64_t v87 = v108;
          unint64_t v89 = v109;
          unint64_t v56 = v105;
          long long v57 = v104;
          uint64_t v58 = 104 * v98;
          unint64_t v59 = (unint64_t *)(v97 + 5);
          do
          {
            unsigned int v60 = *((unsigned __int8 *)v59 - 40);
            unint64_t v61 = *(unsigned int *)(*(void *)(a1 + 8) + 88);
            unint64_t v62 = (*(v59 - 3) + *(v59 - 2) + v61 - 1) / v61 * v61;
            uint64_t v63 = llvm::orc::AllocGroupSmallMap<llvm::orc::ExecutorAddrRange>::operator[]((uint64_t)v106, *((unsigned char *)v59 - 40));
            if (v60 > 7)
            {
              *(void *)uint64_t v63 = v56;
              *((void *)v63 + 1) = v62 + v56;
              *(v59 - 1) = v56;
              if ((v60 & 4) != 0)
              {
                uint64_t v67 = *(v59 - 3);
                if (v67)
                {
                  unint64_t v68 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v86, *(v59 - 3), 0);
                  *(void *)&long long v111 = v68;
                  *((void *)&v111 + 1) = v67;
                }
                else
                {
                  unint64_t v68 = v111;
                }
                *unint64_t v59 = v68;
              }
              else
              {
                *unint64_t v59 = v89;
                v89 += v62;
              }
              v56 += v62;
              uint64_t v64 = v57;
            }
            else
            {
              uint64_t v64 = (void **)((char *)v57 + v62);
              *(void *)uint64_t v63 = v57;
              *((void *)v63 + 1) = (char *)v57 + v62;
              *(v59 - 1) = (unint64_t)v57;
              if ((v60 & 4) != 0)
              {
                uint64_t v65 = *(v59 - 3);
                if (v65)
                {
                  unint64_t v66 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v86, *(v59 - 3), 0);
                  *(void *)&long long v110 = v66;
                  *((void *)&v110 + 1) = v65;
                }
                else
                {
                  unint64_t v66 = v110;
                }
                *unint64_t v59 = v66;
              }
              else
              {
                *unint64_t v59 = v87;
                v87 += v62;
              }
            }
            v59 += 13;
            long long v57 = v64;
            v58 -= 104;
          }
          while (v58);
        }
        llvm::jitlink::BasicLayout::apply(&v96, &v93);
        uint64_t v69 = v93;
        if (!v93) {
          operator new();
        }
        uint64_t v93 = 0;
        *(void *)v112 = v69;
        v102 = v91;
        uint64_t v91 = 0;
        llvm::ErrorList::join((void ***)v112, &v102, (void ***)&v92);
        if (v102) {
          (*((void (**)(void **))*v102 + 1))(v102);
        }
        if (*(void *)v112) {
          (*(void (**)(void))(**(void **)v112 + 8))(*(void *)v112);
        }
        v112[8] = -1;
        *(void *)v112 = v92;
        __int16 v92 = 0;
        if ((v101 & 2) != 0) {
          v70 = v100;
        }
        else {
          v70 = (void *)v100[0];
        }
        (*(void (**)(void *, unsigned char *))(v101 & 0xFFFFFFFFFFFFFFF8))(v70, v112);
        llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>::~Expected((uint64_t *)v112);
        if (v92) {
          (*v92)[1]((void **)v92);
        }
        if (v91) {
          (*((void (**)(void **))*v91 + 1))(v91);
        }
        if (v93) {
          (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
        }
      }
      if (v106[0] != v107) {
        free(v106[0]);
      }
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v100);
      llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v97);
      goto LABEL_125;
    }
    uint64_t v22 = *(void **)(v6 + 8);
    unint64_t v24 = *v22;
    uint64_t v23 = (uint64_t **)(v22 + 3);
    unint64_t v12 = v24;
    uint64_t v88 = *(void *)(v6 + 8);
    uint64_t v26 = (uint64_t ***)(v88 + 16);
    uint64_t v25 = *(uint64_t **)(v88 + 16);
    if (v25 != (uint64_t *)v23)
    {
      unint64_t v27 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v28 = v25[4] - v12;
        if (v10) {
          BOOL v29 = v27 == 0;
        }
        else {
          BOOL v29 = 0;
        }
        char v30 = !v29;
        if (v29 && v10 <= v28)
        {
          uint64_t v31 = std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::__emplace_hint_unique_key_args<llvm::orc::ExecutorAddr,std::pair<llvm::orc::ExecutorAddr,unsigned long long>>(v26, (uint64_t **)v25, v12, v12, v10);
          if (v13 || !v11)
          {
            unint64_t v27 = v12;
LABEL_65:
            if (!v10) {
              goto LABEL_71;
            }
            goto LABEL_66;
          }
          uint64_t v25 = v31;
          unint64_t v13 = 0;
          unint64_t v27 = v12;
        }
        else if (!v13 && v11 && v11 <= v28)
        {
          __int16 v32 = std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::__emplace_hint_unique_key_args<llvm::orc::ExecutorAddr,std::pair<llvm::orc::ExecutorAddr,unsigned long long>>(v26, (uint64_t **)v25, v12, v12, v11);
          if (v30)
          {
            unint64_t v13 = v12;
            if (v10) {
              goto LABEL_66;
            }
LABEL_71:
            unint64_t v54 = v12;
            unint64_t v12 = v27;
            uint64_t v53 = v88;
            goto LABEL_72;
          }
          uint64_t v25 = v32;
          unint64_t v27 = 0;
          unint64_t v13 = v12;
        }
        __int16 v33 = (uint64_t *)v25[1];
        std::string v34 = (uint64_t **)v25;
        if (v33)
        {
          do
          {
            BOOL v35 = (uint64_t **)v33;
            __int16 v33 = (uint64_t *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            BOOL v35 = (uint64_t **)v34[2];
            BOOL v29 = *v35 == (uint64_t *)v34;
            std::string v34 = v35;
          }
          while (!v29);
        }
        v12 += v25[5];
        uint64_t v25 = (uint64_t *)v35;
        if (v35 == v23) {
          goto LABEL_65;
        }
      }
    }
    unint64_t v13 = 0;
    unint64_t v27 = 0;
    if (!v10) {
      goto LABEL_71;
    }
LABEL_66:
    if (v27) {
      goto LABEL_71;
    }
    uint64_t v53 = v88;
    if (v10 <= *(void *)(v88 + 8) - v12)
    {
      std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::__emplace_hint_unique_key_args<llvm::orc::ExecutorAddr,std::pair<llvm::orc::ExecutorAddr,unsigned long long>>(v26, v23, v12, v12, v10);
      unint64_t v54 = v12 + v10;
    }
    else
    {
      unint64_t v54 = v12;
      unint64_t v12 = 0;
    }
LABEL_72:
    if (!v13 && v11)
    {
      if (v11 <= *(void *)(v53 + 8) - v54)
      {
        std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::__emplace_hint_unique_key_args<llvm::orc::ExecutorAddr,std::pair<llvm::orc::ExecutorAddr,unsigned long long>>(v26, v23, v54, v54, v11);
        unint64_t v13 = v54;
        if (v10)
        {
LABEL_77:
          if (!v12)
          {
            getErrorErrorCat();
            *(void *)v112 = 3;
            *(void *)&v112[8] = &getErrorErrorCat(void)::ErrorErrorCat;
            llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
          }
        }
LABEL_80:
        if (!v13 && v11)
        {
          getErrorErrorCat();
          *(void *)v112 = 3;
          *(void *)&v112[8] = &getErrorErrorCat(void)::ErrorErrorCat;
          llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
        }
        goto LABEL_7;
      }
      unint64_t v13 = 0;
    }
    if (v10) {
      goto LABEL_77;
    }
    goto LABEL_80;
  }
  v102 = 0;
  unint64_t v15 = v102;
  if ((v14 & 1) == 0)
  {
    v104 = v102;
    int v16 = *(_DWORD *)(a1 + 232);
    uint64_t v17 = *(unsigned int *)(a1 + 240);
    if (4 * v16 + 4 >= (3 * v17))
    {
      int v18 = 2 * v17;
    }
    else
    {
      int v18 = *(_DWORD *)(a1 + 240);
      if ((int)v17 + ~v16 - *(_DWORD *)(a1 + 236) > v17 >> 3)
      {
LABEL_11:
        *(_DWORD *)(a1 + 232) = v16 + 1;
        if (*v15 != (void *)-4096) {
          --*(_DWORD *)(a1 + 236);
        }
        *unint64_t v15 = (void *)a2;
        v15[1] = 0;
        long long v15[2] = 0;
        v15[3] = 0;
        goto LABEL_14;
      }
    }
    uint64_t v72 = *(void *)(a1 + 224);
    unint64_t v73 = (v18 - 1) | ((unint64_t)(v18 - 1) >> 1);
    unint64_t v74 = v73 | (v73 >> 2) | ((v73 | (v73 >> 2)) >> 4);
    int v75 = ((v74 | (v74 >> 8)) >> 16) | v74 | (v74 >> 8);
    if ((v75 + 1) > 0x40) {
      unsigned int v76 = v75 + 1;
    }
    else {
      unsigned int v76 = 64;
    }
    *(_DWORD *)(a1 + 240) = v76;
    uint64_t v77 = operator new(32 * v76, (std::align_val_t)8uLL);
    *(void *)(a1 + 224) = v77;
    if (v72)
    {
      *(void *)(a1 + 232) = 0;
      uint64_t v78 = *(unsigned int *)(a1 + 240);
      if (v78)
      {
        uint64_t v79 = 32 * v78;
        do
        {
          *uint64_t v77 = -4096;
          v77 += 4;
          v79 -= 32;
        }
        while (v79);
      }
      if (v17)
      {
        uint64_t v80 = 32 * v17;
        uint64_t v81 = v72;
        do
        {
          uint64_t v82 = *(void *)v81;
          if ((*(void *)v81 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            *(void *)v112 = 0;
            unint64_t v83 = *(void **)v112;
            **(void **)v112 = v82;
            v83[1] = 0;
            v83[2] = 0;
            v83[3] = 0;
            *(_OWORD *)(v83 + 1) = *(_OWORD *)(v81 + 8);
            v83[3] = *(void *)(v81 + 24);
            *(void *)(v81 + 8) = 0;
            *(void *)(v81 + 16) = 0;
            *(void *)(v81 + 24) = 0;
            ++*(_DWORD *)(a1 + 232);
          }
          v81 += 32;
          v80 -= 32;
        }
        while (v80);
      }
      MEMORY[0x263E500A0](v72, 8);
      uint64_t v77 = *(void **)(a1 + 224);
      LODWORD(v84) = *(_DWORD *)(a1 + 240);
    }
    else
    {
      *(void *)(a1 + 232) = 0;
      uint64_t v84 = *(unsigned int *)(a1 + 240);
      if (v84)
      {
        uint64_t v85 = 0;
        do
        {
          v77[v85] = -4096;
          v85 += 4;
        }
        while (4 * v84 != v85);
      }
    }
    int v16 = *(_DWORD *)(a1 + 232);
    unint64_t v15 = v104;
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v20 = (char *)v15[2];
  uint64_t v19 = (char *)v15[3];
  if (v20 < v19)
  {
    uint64_t v21 = v20 + 504;
    goto LABEL_60;
  }
  unint64_t v36 = v15[1];
  unint64_t v37 = 0xEFBEFBEFBEFBEFBFLL * ((v20 - v36) >> 3);
  if (v37 + 1 > 0x82082082082082) {
    abort();
  }
  unint64_t v38 = 0xEFBEFBEFBEFBEFBFLL * ((v19 - v36) >> 3);
  uint64_t v39 = 2 * v38;
  if (2 * v38 <= v37 + 1) {
    uint64_t v39 = v37 + 1;
  }
  if (v38 >= 0x41041041041041) {
    unint64_t v40 = 0x82082082082082;
  }
  else {
    unint64_t v40 = v39;
  }
  if (v40)
  {
    if (v40 > 0x82082082082082) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    long long v41 = (char *)operator new(504 * v40);
  }
  else
  {
    long long v41 = 0;
  }
  uint64_t v42 = (uint64_t)&v41[504 * v37];
  long long v43 = &v41[504 * v40];
  uint64_t v21 = (void *)(v42 + 504);
  char v45 = (char *)v15[1];
  long long v44 = (char *)v15[2];
  if (v44 != v45)
  {
    do
    {
      v42 -= 504;
      v44 -= 504;
    }
    while (v44 != v45);
    long long v44 = (char *)v15[1];
    char v46 = (char *)v15[2];
    v15[1] = (void *)v42;
    long long v15[2] = v21;
    for (v15[3] = v43; v46 != v44; v46 -= 504)
    {
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)v46 - 4);
      llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)(v46 - 464));
    }
    if (!v44) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  v15[1] = (void *)v42;
  long long v15[2] = v21;
  v15[3] = v43;
  if (v44) {
LABEL_59:
  }
    operator delete(v44);
LABEL_60:
  long long v15[2] = v21;
  if ((unsigned char *)v21 - (unsigned char *)v15[1] == 504)
  {
    std::unique_lock<std::mutex>::unlock(&v90);
    uint64_t v47 = *(void *)(a1 + 72);
    uint64_t v48 = *(void **)(a1 + 8);
    uint64_t v49 = *(void *)(a1 + 32);
    uint64_t v50 = v48[3];
    v51 = malloc_type_malloc(0x10uLL, 0xBCDE199DuLL);
    void *v51 = *(void *)(a1 + 24);
    v51[1] = v47;
    long long v52 = operator new(0x20uLL, (std::align_val_t)8uLL);
    *(_OWORD *)&v112[8] = xmmword_261E8A760;
    *long long v52 = v50;
    v52[1] = a1;
    v52[2] = a2;
    v52[3] = v47;
    *(void *)v112 = v52;
    uint64_t v113 = _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_15SPSExecutorAddrEEESC_yEE9callAsyncIZNS7_19callSPSWrapperAsyncISE_S8_ZN12_GLOBAL__N_116XPCMemoryManager11acquireSlabEPKNS_7jitlink12JITLinkDylibEyE3__0JNS2_12ExecutorAddrEyEEEvOT0_SP_OT1_DpRKT2_EUlOT_PKcmE_SO_JSP_yEEEvSZ_SR_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerESZ_EUlS4_E_S19_vE9CallbacksE;
    (*(void (**)(void *, uint64_t, unsigned char *, void *, uint64_t))(*v48 + 56))(v48, v49, v112, v51, 16);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v112);
    free(v51);
  }
LABEL_125:
  if (v90.__owns_) {
    std::mutex::unlock(v90.__m_);
  }
}

uint64_t *llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v3) {
LABEL_5:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else if (v3)
  {
    goto LABEL_5;
  }
  return a1;
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::__emplace_hint_unique_key_args<llvm::orc::ExecutorAddr,std::pair<llvm::orc::ExecutorAddr,unsigned long long>>();
  }
}

uint64_t *std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::__emplace_hint_unique_key_args<llvm::orc::ExecutorAddr,std::pair<llvm::orc::ExecutorAddr,unsigned long long>>(uint64_t ***a1, uint64_t **a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (uint64_t *)a2;
  unint64_t v9 = (uint64_t **)(a1 + 1);
  if (a1 + 1 == (uint64_t ***)a2 || (unint64_t v10 = (unint64_t)a2[4], v10 > a3))
  {
    uint64_t v11 = (uint64_t)*a2;
    if (*a1 == a2)
    {
      unint64_t v13 = a2;
LABEL_16:
      if (v11) {
        uint64_t v19 = (uint64_t *)v13;
      }
      else {
        uint64_t v19 = (uint64_t *)a2;
      }
      if (v11) {
        unint64_t v15 = v13 + 1;
      }
      else {
        unint64_t v15 = a2;
      }
      uint64_t v7 = *v15;
      if (*v15) {
        return v7;
      }
      uint64_t v7 = v19;
      goto LABEL_42;
    }
    if (v11)
    {
      unint64_t v12 = *a2;
      do
      {
        unint64_t v13 = (uint64_t **)v12;
        unint64_t v12 = (uint64_t *)v12[1];
      }
      while (v12);
    }
    else
    {
      uint64_t v17 = a2;
      do
      {
        unint64_t v13 = (uint64_t **)v17[2];
        BOOL v18 = *v13 == (uint64_t *)v17;
        uint64_t v17 = v13;
      }
      while (v18);
    }
    if ((unint64_t)v13[4] < a3) {
      goto LABEL_16;
    }
    uint64_t v20 = *v9;
    unint64_t v15 = (uint64_t **)(a1 + 1);
    uint64_t v7 = (uint64_t *)(a1 + 1);
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v7 = v20;
          unint64_t v21 = v20[4];
          if (v21 <= a3) {
            break;
          }
          uint64_t v20 = (uint64_t *)*v20;
          unint64_t v15 = (uint64_t **)v7;
          if (!*v7) {
            goto LABEL_42;
          }
        }
        if (v21 >= a3) {
          return v7;
        }
        uint64_t v20 = (uint64_t *)v20[1];
        if (!v20) {
          goto LABEL_30;
        }
      }
    }
LABEL_42:
    uint64_t v25 = v7;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = a4;
    v7[5] = a5;
    *uint64_t v7 = 0;
    v7[1] = 0;
    void v7[2] = (uint64_t)v25;
    *unint64_t v15 = v7;
    uint64_t v26 = **a1;
    unint64_t v27 = v7;
    if (v26)
    {
      *a1 = (uint64_t **)v26;
      unint64_t v27 = *v15;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[1], v27);
    a1[2] = (uint64_t **)((char *)a1[2] + 1);
    return v7;
  }
  if (v10 >= a3) {
    return v7;
  }
  unint64_t v15 = a2 + 1;
  char v14 = a2[1];
  if (v14)
  {
    do
    {
      unint64_t v15 = (uint64_t **)v14;
      char v14 = (uint64_t *)*v14;
      uint64_t v7 = (uint64_t *)v15;
      int v16 = v15;
    }
    while (v14);
  }
  else
  {
    int v16 = a2;
    do
    {
      uint64_t v22 = (uint64_t *)v16;
      int v16 = (uint64_t **)v16[2];
    }
    while (*v16 != v22);
  }
  if (v16 == v9) {
    goto LABEL_42;
  }
  if ((unint64_t)v16[4] > a3) {
    goto LABEL_42;
  }
  uint64_t v23 = *v9;
  unint64_t v15 = (uint64_t **)(a1 + 1);
  uint64_t v7 = (uint64_t *)(a1 + 1);
  if (!*v9) {
    goto LABEL_42;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v7 = v23;
      unint64_t v24 = v23[4];
      if (v24 <= a3) {
        break;
      }
      uint64_t v23 = (uint64_t *)*v23;
      unint64_t v15 = (uint64_t **)v7;
      if (!*v7) {
        goto LABEL_42;
      }
    }
    if (v24 >= a3) {
      return v7;
    }
    uint64_t v23 = (uint64_t *)v23[1];
    if (!v23)
    {
LABEL_30:
      unint64_t v15 = (uint64_t **)(v7 + 1);
      goto LABEL_42;
    }
  }
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      char v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), unsigned int v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              long long v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            void v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            char v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), unsigned int v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        char v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        void v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t anonymous namespace'::XPCMemoryManager::allocateWorkingMemPages(uint64_t this, mach_vm_size_t size)
{
  uint64_t v2 = this;
  if (size)
  {
    mach_vm_address_t address = 0;
    this = mach_vm_allocate(*MEMORY[0x263EF8960], &address, size, 1);
    if (this)
    {
      __int16 v8 = 773;
      unsigned int v5 = "mach_vm_allocate failed with error code ";
      uint64_t v6 = 40;
      uint64_t v7 = mach_error_string(this);
      getErrorErrorCat();
      operator new();
    }
    mach_vm_address_t v4 = address;
    *(unsigned char *)(v2 + 16) &= ~1u;
    *(void *)(v2 + 8) = size;
    *(void *)uint64_t v2 = v4;
  }
  else
  {
    *(void *)this = 0;
    *(void *)(this + 8) = 0;
    *(unsigned char *)(this + 16) &= ~1u;
  }
  return this;
}

unsigned __int8 *llvm::orc::AllocGroupSmallMap<llvm::orc::ExecutorAddrRange>::operator[](uint64_t a1, unsigned __int8 a2)
{
  unint64_t v3 = *(unsigned int *)(a1 + 8);
  if (!v3) {
    goto LABEL_20;
  }
  mach_vm_address_t v4 = *(unsigned __int8 **)a1;
  uint64_t v5 = *(void *)a1 + 24 * v3;
  uint64_t v6 = *(unsigned __int8 **)a1;
  do
  {
    unint64_t v7 = v3 >> 1;
    __int16 v8 = &v6[24 * (v3 >> 1)];
    unsigned int v10 = *v8;
    unint64_t v9 = v8 + 24;
    v3 += ~(v3 >> 1);
    if (v10 < a2) {
      uint64_t v6 = v9;
    }
    else {
      unint64_t v3 = v7;
    }
  }
  while (v3);
  if (v6 == (unsigned __int8 *)v5)
  {
LABEL_20:
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    v30[0] = a2;
    unint64_t v26 = llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,true>>(a1, (unint64_t)v30);
    uint64_t v27 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 8);
    long long v28 = *(_OWORD *)v26;
    *(void *)(v27 + 16) = *(void *)(v26 + 16);
    *(_OWORD *)uint64_t v27 = v28;
    LODWORD(v27) = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v27;
    uint64_t v6 = (unsigned __int8 *)(*(void *)a1 + 24 * v27 - 24);
  }
  else if (*v6 != a2)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    v30[0] = a2;
    uint64_t v11 = (unsigned char *)(v6 - v4);
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v4) >> 3);
    unint64_t v13 = llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,true>>(a1, (unint64_t)v30);
    char v14 = *(unsigned __int8 **)a1;
    uint64_t v6 = &v11[*(void *)a1];
    uint64_t v15 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 8);
    *(void *)(v15 + 16) = *(void *)(v15 - 8);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)(v15 - 24);
    int v16 = *(unsigned __int8 **)a1;
    unsigned int v17 = *(_DWORD *)(a1 + 8);
    uint64_t v18 = *(void *)a1 + 24 * v17 - 24;
    if ((unsigned __int8 *)v18 != v6)
    {
      uint64_t v19 = *(void *)a1 + 24 * v17 - 24;
      do
      {
        char v20 = *(unsigned char *)(v19 - 24);
        v19 -= 24;
        *(unsigned char *)uint64_t v18 = v20;
        *(_OWORD *)(v18 + 8) = *(_OWORD *)(v18 - 16);
        uint64_t v18 = v19;
      }
      while ((unsigned __int8 *)v19 != v6);
      unsigned int v17 = *(_DWORD *)(a1 + 8);
      int v16 = *(unsigned __int8 **)a1;
    }
    unsigned int v21 = v17 + 1;
    *(_DWORD *)(a1 + 8) = v21;
    unint64_t v22 = (unint64_t)&v16[24 * v21];
    BOOL v24 = v13 >= (unint64_t)v6 && v13 < v22;
    unint64_t v25 = v13 + 24 * v24;
    *uint64_t v6 = *(unsigned char *)v25;
    *(_OWORD *)&v14[24 * v12 + 8] = *(_OWORD *)(v25 + 8);
  }
  return v6 + 8;
}

void **anonymous namespace'::XPCMemoryManager::abandon(void ***a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v5 = (mach_vm_address_t *)(a3 + 144);
  *(_OWORD *)__base = *(_OWORD *)a3;
  unint64_t v9 = v7;
  llvm::ErrorList::join(&v9, (void ***)&v8, a1);
  if (v8) {
    (*v8)[1]((void **)v8);
  }
  uint64_t result = v9;
  if (v9) {
    return (void **)(*((uint64_t (**)(void **))*v9 + 1))(v9);
  }
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,true>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v5 = v3 + 1;
    unint64_t v6 = *(void *)a1 + 24 * v3;
    if (*(void *)a1 <= a2 && v6 > a2)
    {
      unint64_t v8 = a2 - *(void *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 24);
      return *(void *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 24);
    }
  }
  return v2;
}

void anonymous namespace'::XPCMemoryManager::release(uint64_t a1, unint64_t *__base, uint64_t a3)
{
  uint64_t v3 = a3;
  mach_vm_address_t v4 = __base;
  if (a3 >= 2) {
    qsort(__base, a3 & 0x1FFFFFFFFFFFFFFFLL, 8uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<llvm::orc::ExecutorAddr>);
  }
  if (!*v4)
  {
    do
    {
      --v3;
      unint64_t v6 = v4[1];
      ++v4;
    }
    while (!v6);
  }
  std::mutex::lock((std::mutex *)(a1 + 136));
  while (v3)
  {
    if (*(_DWORD *)(a1 + 208))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 216);
      if (v7)
      {
        uint64_t v8 = 16 * v7;
        unint64_t v9 = *(void **)(a1 + 200);
        while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v9 += 2;
          v8 -= 16;
          if (!v8) {
            goto LABEL_11;
          }
        }
      }
      else
      {
        unint64_t v9 = *(void **)(a1 + 200);
      }
      uint64_t v10 = *(void *)(a1 + 200) + 16 * v7;
LABEL_15:
      if (v9 != (void *)v10)
      {
        if (!v3) {
          goto LABEL_42;
        }
        uint64_t v11 = (unint64_t *)v9[1];
        unint64_t v12 = (uint64_t **)(v11 + 3);
        unint64_t v13 = v4 - 1;
        uint64_t v14 = v3;
        while (1)
        {
          unint64_t v15 = v13[v3];
          if (*v11 > v15 || v11[1] <= v15) {
            break;
          }
          int v16 = *v12;
          if (!*v12) {
            goto LABEL_31;
          }
          unint64_t v17 = *v4;
          uint64_t v18 = (uint64_t *)(v11 + 3);
          uint64_t v19 = *v12;
          do
          {
            unint64_t v20 = v19[4];
            BOOL v21 = v20 >= v17;
            if (v20 >= v17) {
              unint64_t v22 = (uint64_t **)v19;
            }
            else {
              unint64_t v22 = (uint64_t **)(v19 + 1);
            }
            if (v21) {
              uint64_t v18 = v19;
            }
            uint64_t v19 = *v22;
          }
          while (*v22);
          if (v18 == (uint64_t *)v12 || v17 < v18[4]) {
LABEL_31:
          }
            uint64_t v18 = (uint64_t *)(v11 + 3);
          uint64_t v23 = (uint64_t *)v18[1];
          BOOL v24 = v18;
          if (v23)
          {
            do
            {
              unint64_t v25 = v23;
              uint64_t v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              unint64_t v25 = (uint64_t *)v24[2];
              BOOL v26 = *v25 == (void)v24;
              BOOL v24 = v25;
            }
            while (!v26);
          }
          if ((uint64_t *)v11[2] == v18) {
            void v11[2] = (unint64_t)v25;
          }
          --v11[4];
          std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v16, v18);
          operator delete(v18);
          ++v4;
          if (!--v14)
          {
            uint64_t v3 = 0;
            goto LABEL_42;
          }
        }
        uint64_t v3 = v14;
LABEL_42:
        while (1)
        {
          v9 += 2;
          if (v9 == (void *)v10) {
            break;
          }
          if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_15;
          }
        }
      }
    }
LABEL_11:
    ;
  }
  std::mutex::unlock((std::mutex *)(a1 + 136));
}

void *anonymous namespace'::XPCMemoryManager::deallocateWorkingMemPages(void *result, mach_vm_address_t *a2)
{
  uint64_t v3 = result;
  mach_vm_address_t v4 = *a2;
  if (v4)
  {
    uint64_t result = (void *)mach_vm_deallocate(*MEMORY[0x263EF8960], v4, a2[1]);
    if (result)
    {
      __int16 v8 = 773;
      unint64_t v5 = "Error deallocating working memory: ";
      uint64_t v6 = 35;
      uint64_t v7 = mach_error_string((mach_error_t)result);
      getErrorErrorCat();
      operator new();
    }
    *a2 = 0;
    a2[1] = 0;
  }
  *uint64_t v3 = 0;
  return result;
}

uint64_t llvm::array_pod_sort_comparator<llvm::orc::ExecutorAddr>(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

uint64_t *std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    mach_vm_address_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      mach_vm_address_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *uint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    void v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      void v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)v12;
    }
    uint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    unint64_t v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        unint64_t v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        long long v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        *unint64_t v20 = (uint64_t)v7;
        void v7[2] = (uint64_t)v20;
        uint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      BOOL v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    unint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    unint64_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    uint64_t *v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
  }
  unint64_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    int v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    unint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      unint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  int v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    unint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *uint64_t v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    long long v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    void v7[2] = (uint64_t)v15;
    int v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  BOOL v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  *BOOL v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>>::operator=(uint64_t a1, char **a2)
{
  if ((char **)a1 != a2)
  {
    int v5 = a2 + 2;
    mach_vm_address_t v4 = *a2;
    if (*a2 != (char *)(a2 + 2))
    {
      uint64_t v6 = *(char **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        mach_vm_address_t v4 = *a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = a2 + 1;
      *(void *)(a1 + 8) = a2[1];
      *a2 = (char *)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_21;
    }
    uint64_t v7 = a2 + 1;
    unint64_t v8 = *((unsigned int *)a2 + 2);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if (v8)
      {
        uint64_t v10 = *(char **)a1;
        uint64_t v11 = &v4[24 * v8];
        do
        {
          *uint64_t v10 = *v4;
          *(_OWORD *)(v10 + 8) = *(_OWORD *)(v4 + 8);
          v4 += 24;
          v10 += 24;
        }
        while (v4 != v11);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if (v9)
      {
        uint64_t v12 = &v4[24 * v9];
        unint64_t v13 = *(char **)a1;
        do
        {
          char *v13 = *v4;
          *(_OWORD *)(v13 + 8) = *(_OWORD *)(v4 + 8);
          v4 += 24;
          v13 += 24;
        }
        while (v4 != v12);
LABEL_18:
        uint64_t v14 = *v7;
        if (v9 != v14) {
          memcpy((void *)(*(void *)a1 + 24 * v9), &(*a2)[24 * v9], &(*a2)[24 * v14] - &(*a2)[24 * v9]);
        }
LABEL_20:
        *(_DWORD *)(a1 + 8) = v8;
LABEL_21:
        *uint64_t v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 24);
    }
    uint64_t v9 = 0;
    goto LABEL_18;
  }
  return a1;
}

void anonymous namespace'::XPCMemoryManager::InFlightAlloc::~InFlightAlloc(mach_vm_address_t *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *this = (mach_vm_address_t)&unk_270DBBE18;
  __p.__r_.__value_.__r.__words[0] = v7;
  llvm::ErrorList::join((void ***)&__p, (void ***)buf, &v8);
  if (*(void *)buf) {
    (*(void (**)(void))(**(void **)buf + 8))(*(void *)buf);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    (*(void (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 8))(__p.__r_.__value_.__r.__words[0]);
  }
  if (v8)
  {
    int v5 = v8;
    unint64_t v8 = 0;
    llvm::toString((uint64_t *)&v5, &__p);
    if (v5) {
      (*((void (**)(void **))*v5 + 1))(v5);
    }
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = p_p;
      _os_log_debug_impl(&dword_261C2B000, v2, OS_LOG_TYPE_DEBUG, "InFlightAlloc destruction of working memory failed %s", buf, 0xCu);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8) {
      (*((void (**)(void **))*v8 + 1))(v8);
    }
  }
  uint64_t v3 = (mach_vm_address_t *)this[5];
  if (v3 != this + 7) {
    free(v3);
  }
}

{
  uint64_t vars8;

  JUMPOUT(0x263E500B0);
}

void **anonymous namespace'::XPCMemoryManager::InFlightAlloc::abandon(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a2[3];
  if ((v4 & 2) == 0) {
    a2 = (void *)*a2;
  }
  (*(void (**)(void *, void ***))(v4 & 0xFFFFFFFFFFFFFFF8))(a2, &v6);
  uint64_t result = v6;
  if (v6) {
    return (void **)(*((uint64_t (**)(void **))*v6 + 1))(v6);
  }
  return result;
}

void anonymous namespace'::XPCMemoryManager::InFlightAlloc::finalize(uint64_t a1, long long *a2)
{
  v160[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  long long v118 = *(_OWORD *)(a1 + 24);
  v119 = v121;
  uint64_t v120 = 0x400000000;
  if (*(_DWORD *)(a1 + 48)) {
    llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>>::operator=((uint64_t)&v119, (char **)(a1 + 40));
  }
  long long v6 = *(_OWORD *)(a1 + 168);
  long long v122 = *(_OWORD *)(a1 + 152);
  long long v123 = v6;
  long long v7 = *(_OWORD *)(a1 + 200);
  long long v124 = *(_OWORD *)(a1 + 184);
  long long v125 = v7;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v117, a2);
  uint64_t value = 0;
  std::mutex::lock((std::mutex *)(v4 + 248));
  if (*(unsigned char *)(v4 + 312))
  {
    getErrorErrorCat();
    *(void *)&long long v126 = 3;
    *((void *)&v126 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[38],std::error_code>();
  }
  uint64_t v9 = *(void *)(v4 + 320);
  uint64_t v8 = *(void *)(v4 + 328);
  *(void *)(v4 + 320) = v9 + 1;
  uint64_t value = v9;
  bytes = 0;
  char v10 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(v8, *(_DWORD *)(v4 + 344), v9, &bytes);
  uint64_t v11 = (char *)bytes;
  if (v10) {
    goto LABEL_11;
  }
  int v12 = *(_DWORD *)(v4 + 336);
  unsigned int v13 = *(_DWORD *)(v4 + 344);
  if (4 * v12 + 4 >= 3 * v13)
  {
    v13 *= 2;
    goto LABEL_164;
  }
  if (v13 + ~v12 - *(_DWORD *)(v4 + 340) <= v13 >> 3)
  {
LABEL_164:
    llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::grow(v4 + 328, v13);
    bytes = 0;
    llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(void *)(v4 + 328), *(_DWORD *)(v4 + 344), value, &bytes);
    uint64_t v11 = (char *)bytes;
  }
  ++*(_DWORD *)(v4 + 336);
  if (*(void *)v11 != -1) {
    --*(_DWORD *)(v4 + 340);
  }
  *(void *)uint64_t v11 = value;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
LABEL_11:
  if (v11 + 8 != (char *)&v117)
  {
    uint64_t v14 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)v11 + 1);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v14, &v117);
  }
  std::mutex::unlock((std::mutex *)(v4 + 248));
  v112[0] = v4;
  v112[1] = (uint64_t)&value;
  if (v137)
  {
    uint64_t v67 = v136;
    uint64_t v136 = 0;
    bytes = v67;
    if (bytes) {
      (*(void (**)(void *))(*(void *)bytes + 8))(bytes);
    }
    goto LABEL_160;
  }
  if (v135)
  {
    unint64_t v68 = v134;
    size_t v134 = 0;
    bytes = v68;
    if (bytes) {
      (*(void (**)(void *))(*(void *)bytes + 8))(bytes);
    }
    goto LABEL_159;
  }
  long long v15 = v124;
  int v16 = (uint64_t *)llvm::orc::AllocGroupSmallMap<llvm::orc::ExecutorAddrRange>::operator[]((uint64_t)&v119, 5u);
  if (v133)
  {
    uint64_t v69 = v132;
    v132 = 0;
    bytes = v69;
    if (bytes) {
      (*(void (**)(void *))(*(void *)bytes + 8))(bytes);
    }
    goto LABEL_158;
  }
  long long v17 = v125;
  uint64_t v18 = (uint64_t *)llvm::orc::AllocGroupSmallMap<llvm::orc::ExecutorAddrRange>::operator[]((uint64_t)&v119, 0xDu);
  if (v131)
  {
    v70 = v130;
    v130 = 0;
    bytes = v70;
    goto LABEL_155;
  }
  long long v126 = v118;
  uint64_t v127 = v129;
  uint64_t v128 = 0x400000000;
  if (v120) {
    llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>>::operator=((uint64_t)&v127, (uint64_t *)&v119);
  }
  uint64_t v19 = 0;
  v129[6] = v122;
  v129[7] = v123;
  v129[8] = v124;
  v129[9] = v125;
  long long v115 = *(_OWORD *)(v5 + 256);
  unint64_t v116 = *(void *)(v5 + 272);
  *(void *)(v5 + 264) = 0;
  *(void *)(v5 + 272) = 0;
  *(void *)(v5 + 256) = 0;
  int v114 = 185139969;
  long long v20 = xmmword_261E8A770;
  do
  {
    unint64_t v21 = v128;
    if (!v128) {
      goto LABEL_52;
    }
    unsigned int v22 = *((unsigned __int8 *)&v114 + v19);
    uint64_t v23 = (unsigned __int8 *)v127;
    do
    {
      unint64_t v24 = v21 >> 1;
      uint64_t v25 = &v23[24 * (v21 >> 1)];
      unsigned int v27 = *v25;
      uint64_t v26 = v25 + 24;
      v21 += ~(v21 >> 1);
      if (v27 < v22) {
        uint64_t v23 = v26;
      }
      else {
        unint64_t v21 = v24;
      }
    }
    while (v21);
    if (v23 == (unsigned __int8 *)((char *)v127 + 24 * v128)) {
      goto LABEL_52;
    }
    int v28 = *v23;
    BOOL v29 = v28 == v22 ? (char *)v23 : (char *)v127 + 24 * v128;
    if (v28 != v22 || (v22 & 7) != 1) {
      goto LABEL_52;
    }
    uint64_t v31 = *(void **)(v4 + 56);
    uint64_t v158 = (uint64_t)v160;
    long long v159 = v20;
    llvm::SmallVectorImpl<char>::resizeImpl<false>(&v158, 0x10uLL);
    uint64_t v32 = v159;
    if ((unint64_t)v159 < 8
      || (uint64_t v33 = v158, *(void *)v158 = *((void *)v29 + 1), (v32 & 0xFFFFFFFFFFFFFFF8) == 8))
    {
      getErrorErrorCat();
      bytes = (void *)3;
      *(void *)size_t length = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
    }
    *(void *)(v33 + 8) = *((void *)v29 + 2);
    v155 = v157;
    long long v156 = xmmword_261E8A770;
    if ((void)v159)
    {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v155, (const void **)&v158);
      bytes = v31;
      *(void *)size_t length = &v140;
      *(_OWORD *)&length[8] = xmmword_261E8A770;
      if ((void)v156) {
        llvm::SmallVectorImpl<char>::operator=((uint64_t)length, (const void **)&v155);
      }
    }
    else
    {
      bytes = v31;
      *(void *)size_t length = &v140;
      *(_OWORD *)&length[8] = xmmword_261E8A770;
    }
    llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>((uint64_t)buf, (uint64_t)&bytes);
    if (*(char **)length != &v140) {
      free(*(void **)length);
    }
    if (v155 != v157) {
      free(v155);
    }
    if ((void *)v158 != v160) {
      free((void *)v158);
    }
    v151 = *(void **)buf;
    uint64_t v152 = v154;
    long long v153 = xmmword_261E8A770;
    if (v150[1]) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v152, v150);
    }
    llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected((uint64_t *)buf);
    if (v22 > 7)
    {
      uint64_t v35 = v115;
      bytes = v151;
      *(void *)size_t length = &v140;
      *(_OWORD *)&length[8] = xmmword_261E8A770;
      if ((void)v153) {
        llvm::SmallVectorImpl<char>::operator=((uint64_t)length, (uint64_t)&v152);
      }
      uint64_t v148 = 0;
      uint64_t v145 = 0;
      long long v147 = 0u;
      v143 = 0;
      v144 = &v147;
      uint64_t v146 = 24;
      uint64_t v36 = v35 - v115;
      uint64_t v37 = 0x6DB6DB6DB6DB6DB7 * ((v35 - (uint64_t)v115) >> 4);
      unint64_t v38 = (void *)v35;
      uint64_t v39 = (char *)*((void *)&v115 + 1);
      if (*((void *)&v115 + 1) >= v116)
      {
        unint64_t v46 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v115 + 1) - v115) >> 4) + 1;
        if (v46 > 0x249249249249249) {
          abort();
        }
        uint64_t v105 = v35;
        uint64_t v107 = v115;
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v116 - v115) >> 4) > v46) {
          unint64_t v46 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v116 - v115) >> 4);
        }
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v116 - v115) >> 4)) >= 0x124924924924924) {
          unint64_t v47 = 0x249249249249249;
        }
        else {
          unint64_t v47 = v46;
        }
        v157[1] = &v116;
        if (v47)
        {
          uint64_t v48 = 0x6DB6DB6DB6DB6DB7 * ((v35 - (uint64_t)v115) >> 4);
          uint64_t v49 = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::AllocActionCallPair>>((uint64_t)&v116, v47);
          uint64_t v37 = v48;
          uint64_t v50 = v49;
        }
        else
        {
          uint64_t v50 = 0;
        }
        uint64_t v51 = (uint64_t)&v50[14 * v37];
        v155 = v50;
        *(void *)&long long v156 = v51;
        *((void *)&v156 + 1) = v51;
        v157[0] = &v50[14 * v47];
        if (v37 == v47)
        {
          if (v36 < 1)
          {
            v104 = (char *)&v50[14 * v47];
            if (v107 == v105) {
              unint64_t v53 = 1;
            }
            else {
              unint64_t v53 = 2 * v37;
            }
            v160[1] = &v116;
            unint64_t v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::AllocActionCallPair>>((uint64_t)&v116, v53);
            unint64_t v55 = v53 >> 2;
            uint64_t v56 = v4;
            long long v57 = (char *)&v54[14 * v55];
            v155 = v54;
            *(void *)&long long v156 = v57;
            uint64_t v158 = (uint64_t)v50;
            *(void *)&long long v159 = v51;
            *((void *)&v156 + 1) = v57;
            v157[0] = &v54[14 * v58];
            *((void *)&v159 + 1) = v51;
            v160[0] = v104;
            std::__split_buffer<llvm::orc::shared::AllocActionCallPair>::~__split_buffer((uint64_t)&v158);
            uint64_t v51 = (uint64_t)v57;
            uint64_t v4 = v56;
          }
          else
          {
            uint64_t v52 = v37 + 2;
            if (v37 >= -1) {
              uint64_t v52 = v37 + 1;
            }
            v51 -= 112 * (v52 >> 1);
            *(void *)&long long v156 = v51;
            *((void *)&v156 + 1) = v51;
          }
        }
        std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(v51, (uint64_t)&bytes);
        uint64_t v59 = v156;
        uint64_t v60 = *((void *)&v156 + 1) + 112;
        *((void *)&v156 + 1) += 112;
        uint64_t v61 = v115;
        if ((void *)v115 != v38)
        {
          uint64_t v62 = (uint64_t)v38;
          do
          {
            v59 -= 112;
            v62 -= 112;
            std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(v59, v62);
          }
          while (v62 != v61);
          uint64_t v60 = *((void *)&v156 + 1);
        }
        uint64_t v63 = (void *)*((void *)&v115 + 1);
        if (*((void **)&v115 + 1) != v38)
        {
          do
          {
            uint64_t v64 = std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(v60, (uint64_t)v38);
            v38 += 14;
            uint64_t v60 = v64 + 112;
          }
          while (v38 != v63);
          unint64_t v38 = (void *)*((void *)&v115 + 1);
        }
        uint64_t v65 = (void *)v115;
        unint64_t v66 = v116;
        *(void *)&long long v115 = v59;
        *((void *)&v115 + 1) = v60;
        unint64_t v116 = v157[0];
        *((void *)&v156 + 1) = v38;
        v157[0] = v66;
        v155 = v65;
        *(void *)&long long v156 = v65;
        std::__split_buffer<llvm::orc::shared::AllocActionCallPair>::~__split_buffer((uint64_t)&v155);
      }
      else if (v35 == *((void *)&v115 + 1))
      {
        std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(v35, (uint64_t)&bytes);
        *((void *)&v115 + 1) = v35 + 112;
      }
      else
      {
        uint64_t v103 = 0x6DB6DB6DB6DB6DB7 * ((v35 - (uint64_t)v115) >> 4);
        uint64_t v106 = v115;
        uint64_t v40 = *((void *)&v115 + 1) - 112;
        uint64_t v41 = *((void *)&v115 + 1);
        unint64_t v42 = *((void *)&v115 + 1) - 112;
        if (*((void *)&v115 + 1) >= 0x70uLL)
        {
          do
          {
            uint64_t v43 = std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(v41, v42);
            v42 += 112;
            uint64_t v41 = v43 + 112;
          }
          while (v42 < (unint64_t)v39);
        }
        *((void *)&v115 + 1) = v41;
        if (v39 != (char *)(v38 + 14))
        {
          uint64_t v44 = 0;
          do
          {
            *(void *)&v39[v44 - 112] = *(void *)(v40 + v44 - 112);
            llvm::SmallVectorImpl<char>::operator=((uint64_t)&v39[v44 - 104], (const void **)(v40 + v44 - 104));
            *(void *)&v39[v44 - 56] = *(void *)(v40 + v44 - 56);
            llvm::SmallVectorImpl<char>::operator=((uint64_t)&v39[v44 - 48], (const void **)(v40 + v44 - 48));
            v44 -= 112;
          }
          while (-16 * ((v39 - (char *)(v38 + 14)) >> 4) != v44);
        }
        *unint64_t v38 = bytes;
        llvm::SmallVectorImpl<char>::operator=((uint64_t)(v38 + 1), (const void **)length);
        uint64_t v45 = v106 + 112 * v103;
        *(void *)(v45 + 56) = v143;
        llvm::SmallVectorImpl<char>::operator=(v45 + 64, (const void **)&v144);
      }
      if (v144 != &v147) {
        free(v144);
      }
      std::string v34 = *(void **)length;
      if (*(char **)length == &v140) {
        goto LABEL_49;
      }
    }
    else
    {
      bytes = v151;
      *(void *)size_t length = &v140;
      *(_OWORD *)&length[8] = xmmword_261E8A770;
      if ((void)v153) {
        llvm::SmallVectorImpl<char>::operator=((uint64_t)length, (uint64_t)&v152);
      }
      uint64_t v148 = 0;
      uint64_t v145 = 0;
      long long v147 = 0u;
      v143 = 0;
      v144 = &v147;
      uint64_t v146 = 24;
      std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100]((uint64_t *)&v115, (uint64_t)&bytes);
      if (v144 != &v147) {
        free(v144);
      }
      std::string v34 = *(void **)length;
      if (*(char **)length == &v140) {
        goto LABEL_49;
      }
    }
    free(v34);
LABEL_49:
    if (v152 != v154) {
      free(v152);
    }
    long long v20 = xmmword_261E8A770;
LABEL_52:
    ++v19;
  }
  while (v19 != 4);
  uint64_t v71 = v115;
  for (unint64_t i = 8; v71 != *((void *)&v115 + 1); v71 += 112)
    i += *(void *)(v71 + 16) + *(void *)(v71 + 72) + 32;
  bytes = &length[16];
  *(_OWORD *)size_t length = xmmword_261E8A780;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&bytes, i);
  v151 = bytes;
  uint64_t v152 = *(void **)length;
  BOOL v73 = llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>>>,std::vector<llvm::orc::shared::AllocActionCallPair>,void>::serialize(&v151, &v115);
  if (!v73)
  {
    getErrorErrorCat();
    uint64_t v158 = 3;
    *(void *)&long long v159 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
  }
  xpc_object_t v74 = xpc_data_create(bytes, *(size_t *)length);
  if (bytes != &length[16]) {
    free(bytes);
  }
  bytes = &v115;
  std::vector<llvm::orc::shared::AllocActionCallPair>::__destroy_vector::operator()[abi:nn180100]((void ***)&bytes);
  if (v127 != v129) {
    free(v127);
  }
  if (v73)
  {
    LOBYTE(bytes) = 3;
    *(void *)size_t length = v136;
    length[8] = 11;
    *(void *)&length[16] = v134;
    char v140 = 5;
    v141 = v132;
    char v142 = 13;
    v143 = v130;
    xpc_object_t xarray = xpc_array_create(0, 0);
    xpc_object_t v110 = xpc_array_create(0, 0);
    xpc_object_t v109 = xpc_array_create(0, 0);
    xpc_object_t object = xpc_array_create(0, 0);
    uint64_t v75 = 0;
    p_bytes = (unsigned __int8 *)&bytes;
    while (1)
    {
      uint64_t v77 = *(void **)&length[16 * v75];
      if (v77) {
        break;
      }
LABEL_147:
      ++v75;
      p_bytes = &length[16 * v75 - 8];
      if (v75 == 4)
      {
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_261C2B000, v99, OS_LOG_TYPE_DEBUG, "Sending finalize message", buf, 2u);
        }
        xpc_object_t empty = xpc_dictionary_create_empty();
        xpc_dictionary_set_uint64(empty, "opc", 1uLL);
        xpc_dictionary_set_uint64(empty, "id", value);
        xpc_dictionary_set_value(empty, "groups", xarray);
        xpc_dictionary_set_value(empty, "bases", v110);
        xpc_dictionary_set_value(empty, "sizes", v109);
        xpc_dictionary_set_value(empty, "sources", object);
        xpc_dictionary_set_value(empty, "aa", v74);
        uint64_t v101 = *(void *)(v4 + 16);
        std::mutex::lock((std::mutex *)(v101 + 8));
        v102 = *(_xpc_connection_s **)(v101 + 72);
        if (v102) {
          xpc_connection_send_message(v102, empty);
        }
        std::mutex::unlock((std::mutex *)(v101 + 8));
        xpc_release(empty);
        xpc_release(object);
        xpc_release(v109);
        xpc_release(v110);
        xpc_release(xarray);
        if (v74) {
          xpc_release(v74);
        }
        goto LABEL_157;
      }
    }
    uint64_t v78 = *p_bytes;
    if ((v78 & 4) == 0)
    {
      unint64_t v79 = v120;
      if (v120)
      {
        unsigned int v80 = v78 & 0xF8 | 1;
        uint64_t v81 = (char *)v119;
        uint64_t v82 = (char *)v119 + 24 * v120;
        unint64_t v83 = (char *)v119;
        unint64_t v84 = v120;
        do
        {
          unint64_t v85 = v84 >> 1;
          uint64_t v86 = (unsigned __int8 *)&v83[24 * (v84 >> 1)];
          unsigned int v88 = *v86;
          unint64_t v87 = v86 + 24;
          v84 += ~(v84 >> 1);
          if (v88 < v80) {
            unint64_t v83 = (char *)v87;
          }
          else {
            unint64_t v84 = v85;
          }
        }
        while (v84);
        if (v83 == v82 || *v83 != v80)
        {
          uint64_t v89 = 0;
          uint64_t v90 = 0;
        }
        else
        {
          uint64_t v90 = *((void *)v83 + 1);
          uint64_t v89 = *((void *)v83 + 2);
        }
        unsigned int v94 = v78 & 0xF8 | 3;
        do
        {
          unint64_t v95 = v79 >> 1;
          uint64_t v96 = (unsigned __int8 *)&v81[24 * (v79 >> 1)];
          unsigned int v98 = *v96;
          std::string::size_type v97 = v96 + 24;
          v79 += ~(v79 >> 1);
          if (v98 < v94) {
            uint64_t v81 = (char *)v97;
          }
          else {
            unint64_t v79 = v95;
          }
        }
        while (v79);
        if (v81 != v82 && *v81 == v94)
        {
          if (!v90) {
            uint64_t v90 = *((void *)v81 + 1);
          }
          __int16 v92 = (uint64_t *)(v81 + 16);
LABEL_133:
          uint64_t v89 = *v92;
        }
      }
      else
      {
        uint64_t v89 = 0;
        uint64_t v90 = 0;
      }
      xpc_array_set_uint64(xarray, 0xFFFFFFFFFFFFFFFFLL, v78);
      xpc_array_set_uint64(v110, 0xFFFFFFFFFFFFFFFFLL, v90);
      xpc_array_set_uint64(v109, 0xFFFFFFFFFFFFFFFFLL, v89 - v90);
      xpc_array_set_value(object, 0xFFFFFFFFFFFFFFFFLL, v77);
      goto LABEL_147;
    }
    uint64_t v91 = llvm::orc::AllocGroupSmallMap<llvm::orc::ExecutorAddrRange>::operator[]((uint64_t)&v119, *p_bytes);
    uint64_t v93 = *(void *)v91;
    __int16 v92 = (uint64_t *)(v91 + 8);
    uint64_t v90 = v93;
    goto LABEL_133;
  }
  bytes = v74;
LABEL_155:
  if (bytes) {
    (*(void (**)(void *))(*(void *)bytes + 8))(bytes);
  }
LABEL_157:
LABEL_158:
LABEL_159:
LABEL_160:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v117);
  if (v119 != v121) {
    free(v119);
  }
}

uint64_t anonymous namespace'::XPCMemoryManager::createXPCMemPort(uint64_t result, memory_object_offset_t offset, memory_object_size_t a3)
{
  uint64_t v3 = result;
  if (offset)
  {
    mach_port_t object_handle = 0;
    memory_object_size_t size = a3;
    mach_error_t memory_entry_64 = mach_make_memory_entry_64(*MEMORY[0x263EF8960], &size, offset, 4194375, &object_handle, 0);
    if (memory_entry_64)
    {
      __int16 v8 = 773;
      uint64_t v5 = "Failed to create mach port for memory: ";
      uint64_t v6 = 39;
      long long v7 = mach_error_string(memory_entry_64);
      getErrorErrorCat();
      operator new();
    }
    uint64_t result = xpc_mach_send_create();
    *(unsigned char *)(v3 + 8) &= ~1u;
    *(void *)uint64_t v3 = result;
  }
  else
  {
    *(unsigned char *)(result + 8) &= ~1u;
    *(void *)uint64_t result = 0;
  }
  return result;
}

void *anonymous namespace'::XPCMemoryManager::finalize(llvm::jitlink::LinkGraph &,anonymous namespace'::XPCMemoryManager::InFlightAllocInfo,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>)::$_2::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  uint64_t v15 = 0;
  std::mutex::lock((std::mutex *)(v4 + 248));
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v11 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(void *)(v4 + 328), *(_DWORD *)(v4 + 344), *v5, &v11))uint64_t v6 = v11; {
  else
  }
    uint64_t v6 = *(void *)(v4 + 328) + 40 * *(unsigned int *)(v4 + 344);
  if (v14 != (void *)(v6 + 8))
  {
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v14);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v14, (long long *)(v6 + 8));
  }
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(v6 + 8));
  *(void *)uint64_t v6 = -2;
  *(int32x2_t *)(v4 + 336) = vadd_s32(*(int32x2_t *)(v4 + 336), (int32x2_t)0x1FFFFFFFFLL);
  std::mutex::unlock((std::mutex *)(v4 + 248));
  uint64_t v7 = *a2;
  *a2 = 0;
  v13 |= 1u;
  uint64_t v12 = v7;
  if ((v15 & 2) != 0) {
    __int16 v8 = v14;
  }
  else {
    __int16 v8 = (void *)v14[0];
  }
  (*(void (**)(void *, uint64_t *))(v15 & 0xFFFFFFFFFFFFFFF8))(v8, &v12);
  if (v13)
  {
    uint64_t v9 = v12;
    uint64_t v12 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v14);
}

void anonymous namespace'::XPCMemoryManager::createXPCCodeFile(uint64_t a1, uint64_t a2, unsigned char *__src, unint64_t a4, uint64_t a5, uint64_t a6)
{
  v42[64] = *MEMORY[0x263EF8340];
  if (a4)
  {
    uint64_t v40 = v42;
    long long v41 = xmmword_261E8A790;
    unint64_t v10 = a6 - a5;
    if ((unint64_t)(a6 - a5) >= 0x201) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v40, v42, a6 - a5, 1);
    }
    *(void *)&long long v41 = 0;
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v40, __src, &__src[a4]);
    if (v10 > a4) {
      llvm::SmallVectorImpl<char>::append(&v40, v10 - a4, 0);
    }
    std::string::basic_string[abi:nn180100]<0>(v32, "cf.XXXXXX");
    int v11 = 1000;
    while (1)
    {
      uint64_t v12 = v33 >= 0 ? (char *)v32 : (char *)v32[0];
      int v13 = mkstempsat_np(*(_DWORD *)(a2 + 128), v12, 0);
      if (v13 != -1) {
        break;
      }
      if (!--v11)
      {
        uint64_t v14 = __error();
        uint64_t v15 = strerror(*v14);
        v38[4] = 773;
        uint64_t v36 = "Could not create file for text section: ";
        *(void *)&long long v37 = 40;
        *((void *)&v37 + 1) = v15;
        getErrorErrorCat();
        operator new();
      }
    }
    int v16 = v13;
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v36, v13, 0, 0, 0);
    llvm::raw_ostream::write((llvm::raw_ostream *)&v36, (const char *)v40, v41);
    std::error_code v25 = v39;
    if (v39.__val_)
    {
      std::error_code::message(&v27, &v25);
      long long v17 = std::string::insert(&v27, 0, "Error writing file for text section: ", 0x25uLL);
      std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      std::string::size_type v30 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      getErrorErrorCat();
      operator new();
    }
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v36);
    if (*(unsigned char *)(a2 + 103))
    {
      uint64_t v19 = libcd_create(v41);
      v25.__val_ = 2;
      libcd_set_hash_types((uint64_t)v19, &v25.__val_, 1u);
      v27.__r_.__value_.__r.__words[0] = 0x8000000010BDEFALL;
      long long v20 = malloc_type_malloc(0x20uLL, 0x1070040E5421EB9uLL);
      long long v20[2] = 0x10000;
      *((void *)v20 + 2) = &v27;
      *((void *)v20 + 3) = 8;
      *(void *)long long v20 = *((void *)v19 + 13);
      *((void *)v19 + 13) = v20;
      libcd_set_input_mem((uint64_t)v19, (uint64_t)v40);
      v19[23] = 2;
      *((void *)v19 + 12) = strdup("ADHOC");
      uint64_t v21 = v41;
      *((void *)v19 + 25) = 0;
      *((void *)v19 + 26) = v21;
      *((void *)v19 + 27) = 0;
      libcd_set_linkage((uint64_t)v19, 2, (long long *)(a2 + 80));
      if (*(_WORD *)(a2 + 100) == 1) {
        *(_DWORD *)((char *)v19 + 246) = 66049;
      }
      libcd_superblob_size((uint64_t)v19);
      operator new[]();
    }
    if (*(char *)(a2 + 127) < 0)
    {
      unsigned int v22 = *(char **)(a2 + 104);
      uint64_t v23 = *(void *)(a2 + 112);
    }
    else
    {
      unsigned int v22 = (char *)(a2 + 104);
      uint64_t v23 = *(unsigned __int8 *)(a2 + 127);
    }
    uint64_t v36 = v38;
    long long v37 = xmmword_261E8A780;
    llvm::SmallVectorImpl<char>::append<std::__wrap_iter<char *>,void>(&v36, v22, &v22[v23]);
    __int16 v35 = 260;
    std::string v34 = v32;
    __int16 v31 = 257;
    __int16 v28 = 257;
    __int16 v26 = 257;
    llvm::sys::path::append(&v36, 0, (uint64_t)&v34, (uint64_t)__p, (uint64_t)&v27, (uint64_t)&v25);
    llvm::SmallVectorTemplateBase<char,true>::push_back(&v36, 0);
    *(void *)&long long v37 = v37 - 1;
    xpc_object_t v24 = xpc_string_create((const char *)v36);
    *(unsigned char *)(a1 + 8) &= ~1u;
    *(void *)a1 = v24;
    if (v36 != v38) {
      free(v36);
    }
    close(v16);
    if (v33 < 0) {
      operator delete(v32[0]);
    }
    if (v40 != v42) {
      free(v40);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 8) &= ~1u;
    *(void *)a1 = 0;
  }
}

uint64_t llvm::Expected<anonymous namespace'::XPCMemoryManager::XPCCodeFile>::~Expected(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void **)a1;
  if (v2)
  {
    *(void *)a1 = 0;
    if (v3) {
      (*(void (**)(void *))(*(void *)v3 + 8))(v3);
    }
  }
  else if (v3)
  {
    xpc_release(v3);
  }
  return a1;
}

void *llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 40 * v10;
      do
      {
        *uint64_t result = -1;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 40 * v3;
      int v13 = (long long *)(v4 + 8);
      do
      {
        unint64_t v14 = *((void *)v13 - 1);
        if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          std::string::size_type v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          uint64_t v15 = v18;
          *std::string::size_type v18 = *((void *)v13 - 1);
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v15 + 1), v13);
          ++*(_DWORD *)(a1 + 8);
          llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v13);
        }
        int v13 = (long long *)((char *)v13 + 40);
        v12 -= 40;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 40 * v16;
    do
    {
      *uint64_t result = -1;
      result += 5;
      v17 -= 40;
    }
    while (v17);
  }
  return result;
}

void *llvm::SmallVectorImpl<char>::append(void *result, size_t __len, int __c)
{
  unint64_t v5 = result;
  uint64_t v6 = result[1];
  if (v6 + __len > result[2])
  {
    uint64_t result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v6 + __len, 1);
    uint64_t v6 = v5[1];
    if (!__len) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (__len)
  {
LABEL_3:
    uint64_t result = memset((void *)(*v5 + v6), __c, __len);
    uint64_t v6 = v5[1];
  }
LABEL_4:
  v5[1] = v6 + __len;
  return result;
}

void *llvm::SmallVectorImpl<char>::append<std::__wrap_iter<char *>,void>(void *result, char *a2, char *a3)
{
  uint64_t v4 = a2;
  unint64_t v5 = result;
  uint64_t v6 = a3 - a2;
  uint64_t v7 = result[1];
  unint64_t v8 = v7 + a3 - a2;
  if (result[2] < v8)
  {
    uint64_t result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v8, 1);
    uint64_t v7 = v5[1];
  }
  if (v4 != a3)
  {
    uint64_t v9 = (unsigned char *)(*v5 + v7);
    do
    {
      char v10 = *v4++;
      *v9++ = v10;
    }
    while (v4 != a3);
    uint64_t v7 = v5[1];
  }
  v5[1] = v7 + v6;
  return result;
}

void *llvm::SmallVectorTemplateBase<char,true>::push_back(void *result, char a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  if ((unint64_t)(v4 + 1) > result[2])
  {
    uint64_t result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v4 + 1, 1);
    uint64_t v4 = v3[1];
  }
  *(unsigned char *)(*v3 + v4) = a2;
  ++v3[1];
  return result;
}

uint64_t std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 4);
    if ((unint64_t)(v10 + 1) > 0x249249249249249) {
      abort();
    }
    unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x124924924924924) {
      unint64_t v13 = 0x249249249249249;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::AllocActionCallPair>>(v4, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = &v14[112 * v10];
    std::string::size_type v18 = &v14[112 * v13];
    std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>((uint64_t)v16, a2);
    uint64_t v17 = v16 + 112;
    std::vector<llvm::orc::shared::AllocActionCallPair>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<llvm::orc::shared::AllocActionCallPair>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 112;
  }
  a1[1] = v9;
  return result;
}

uint64_t llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 56) &= ~1u;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = a1 + 32;
  uint64_t v3 = a1 + 8;
  *(_OWORD *)(a1 + 16) = xmmword_261E8A770;
  if (*(void *)(a2 + 16)) {
    llvm::SmallVectorImpl<char>::operator=(v3, (const void **)(a2 + 8));
  }
  return a1;
}

uint64_t *llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected(uint64_t *a1)
{
  if (a1[7])
  {
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    char v2 = (uint64_t *)a1[1];
    if (v2 != a1 + 4) {
      free(v2);
    }
  }
  return a1;
}

uint64_t std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = a1 + 32;
  uint64_t v4 = a1 + 8;
  long long v5 = xmmword_261E8A770;
  *(_OWORD *)(a1 + 16) = xmmword_261E8A770;
  if (*(void *)(a2 + 16))
  {
    llvm::SmallVectorImpl<char>::operator=(v4, (const void **)(a2 + 8));
    long long v5 = xmmword_261E8A770;
  }
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = a1 + 88;
  *(void *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  if (*(void *)(a2 + 72)) {
    llvm::SmallVectorImpl<char>::operator=(a1 + 64, (const void **)(a2 + 64));
  }
  return a1;
}

uint64_t std::vector<llvm::orc::shared::AllocActionCallPair>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 112;
    uint64_t result = std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(result - 112, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::AllocActionCallPair>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(112 * a2);
}

uint64_t std::__split_buffer<llvm::orc::shared::AllocActionCallPair>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 112;
    std::__destroy_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,0>((void *)(i - 112));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<char>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    size_t v4 = *(void *)(a2 + 8);
    size_t v5 = *(void *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, v4);
      }
    }
    else
    {
      if (*(void *)(a1 + 16) >= v4)
      {
        if (v5) {
          memmove(*(void **)a1, *(const void **)a2, *(void *)(a1 + 8));
        }
      }
      else
      {
        *(void *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), v4, 1);
        size_t v5 = 0;
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + v5), (const void *)(*(void *)a2 + v5), *(void *)a2 + v6 - (*(void *)a2 + v5));
      }
    }
    *(void *)(a1 + 8) = v4;
  }
  return a1;
}

BOOL llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>>>,std::vector<llvm::orc::shared::AllocActionCallPair>,void>::serialize(void *a1, void *a2)
{
  if (a1[1] < 8uLL) {
    return 0;
  }
  *(void *)*a1 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4);
  uint64_t v3 = a1[1] - 8;
  *a1 += 8;
  a1[1] = v3;
  size_t v4 = (void *)*a2;
  size_t v5 = (void *)a2[1];
  if ((void *)*a2 == v5) {
    return 1;
  }
  do
  {
    BOOL result = llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>>::serialize<llvm::orc::shared::WrapperFunctionCall,llvm::orc::shared::WrapperFunctionCall>(a1, v4, v4 + 7);
    if (!result) {
      break;
    }
    v4 += 14;
  }
  while (v4 != v5);
  return result;
}

BOOL llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>>::serialize<llvm::orc::shared::WrapperFunctionCall,llvm::orc::shared::WrapperFunctionCall>(void *a1, void *a2, void *a3)
{
  BOOL result = llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>::serialize<llvm::orc::ExecutorAddr,llvm::SmallVector<char,24u>>(a1, a2, (uint64_t)(a2 + 1));
  if (result)
  {
    return llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>::serialize<llvm::orc::ExecutorAddr,llvm::SmallVector<char,24u>>(a1, a3, (uint64_t)(a3 + 1));
  }
  return result;
}

BOOL llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>::serialize<llvm::orc::ExecutorAddr,llvm::SmallVector<char,24u>>(void *a1, void *a2, uint64_t a3)
{
  if (a1[1] < 8uLL) {
    return 0;
  }
  *(void *)*a1 = *a2;
  uint64_t v3 = a1[1] - 8;
  *a1 += 8;
  a1[1] = v3;
  return llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,llvm::SmallVector<char,24u>,void>::serialize(a1, a3);
}

BOOL llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,llvm::SmallVector<char,24u>,void>::serialize(void *a1, uint64_t a2)
{
  if (a1[1] < 8uLL) {
    return 0;
  }
  *(void *)*a1 = *(void *)(a2 + 8);
  char v2 = (unsigned char *)(*a1 + 8);
  uint64_t v3 = a1[1] - 8;
  *a1 = v2;
  a1[1] = v3;
  uint64_t v4 = *(void *)(a2 + 8);
  BOOL v5 = v4 == 0;
  if (v4 && v3)
  {
    uint64_t v6 = *(char **)a2;
    uint64_t v7 = v4 - 1;
    do
    {
      char v8 = *v6++;
      unsigned char *v2 = v8;
      char v2 = (unsigned char *)(*a1 + 1);
      uint64_t v9 = a1[1] - 1;
      *a1 = v2;
      a1[1] = v9;
      BOOL v5 = v7 == 0;
      if (!v7) {
        break;
      }
      --v7;
    }
    while (v9);
  }
  return v5;
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    unint64_t v4 = *((unsigned int *)a2 + 2);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        uint64_t v6 = *a2;
        uint64_t v7 = *a2 + 24 * v4;
        uint64_t v8 = *(void *)a1;
        do
        {
          *(unsigned char *)uint64_t v8 = *(unsigned char *)v6;
          *(_OWORD *)(v8 + 8) = *(_OWORD *)(v6 + 8);
          v6 += 24;
          v8 += 24;
        }
        while (v6 != v7);
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if (v5)
      {
        uint64_t v9 = *a2;
        uint64_t v10 = *a2 + 24 * v5;
        uint64_t v11 = *(void *)a1;
        do
        {
          *(unsigned char *)uint64_t v11 = *(unsigned char *)v9;
          *(_OWORD *)(v11 + 8) = *(_OWORD *)(v9 + 8);
          v9 += 24;
          v11 += 24;
        }
        while (v9 != v10);
LABEL_14:
        uint64_t v12 = *((unsigned int *)a2 + 2);
        if (v5 != v12) {
          memcpy((void *)(*(void *)a1 + 24 * v5), (const void *)(*a2 + 24 * v5), *a2 + 24 * v12 - (*a2 + 24 * v5));
        }
LABEL_16:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4, 24);
    }
    uint64_t v5 = 0;
    goto LABEL_14;
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::JITLinkDylib const*,std::vector<anonymous namespace'::XPCMemoryManager::ReserveRequest>,llvm::DenseMapInfo<llvm::jitlink::JITLinkDylib const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::JITLinkDylib const*,std::vector<anonymous namespace'::XPCMemoryManager::ReserveRequest>>>,llvm::jitlink::JITLinkDylib const*,std::vector<anonymous namespace'::XPCMemoryManager::ReserveRequest>,llvm::DenseMapInfo<llvm::jitlink::JITLinkDylib const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::JITLinkDylib const*,std::vector<anonymous namespace'::XPCMemoryManager::ReserveRequest>>>::LookupBucketFor<llvm::jitlink::JITLinkDylib const*>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v5 = (void *)(a1 + 32 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a3)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      while (v6 != -4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          uint64_t v9 = v5;
        }
        int v12 = v4 + v10++;
        uint64_t v4 = v12 & (a2 - 1);
        uint64_t v5 = (void *)(a1 + 32 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = 1;
        if (*v5 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v7 = 0;
      if (v9) {
        uint64_t v5 = v9;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

uint64_t std::allocator_traits<std::allocator<anonymous namespace'::XPCMemoryManager::ReserveRequest>>::construct[abi:nn180100]<anonymous namespace'::XPCMemoryManager::ReserveRequest,anonymous namespace'::XPCMemoryManager::ReserveRequest,void,void>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = a1 + 56;
  uint64_t v5 = a1 + 40;
  *(void *)(a1 + 48) = 0x400000000;
  if (*(_DWORD *)(a2 + 48)) {
    llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=(v5, a2 + 40);
  }
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a1 + 472, (long long *)(a2 + 472));
}

void **anonymous namespace'::XPCMemoryManager::acquireSlab(llvm::jitlink::JITLinkDylib const*,unsigned long long)::$_0::operator()(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  if (*a2)
  {
    if (a3[1])
    {
      *a3 = 0;
      uint64_t v5 = *a2;
    }
    *a2 = 0;
  }
  else
  {
    if ((a3[1] & 1) == 0) {
      operator new();
    }
    uint64_t v5 = *a3;
    *a3 = 0;
  }
  *(void *)&long long v7 = v5;
  llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v7);
  if ((void)v7) {
    (*(void (**)(void))(*(void *)v7 + 8))(v7);
  }
}

void **anonymous namespace'::XPCMemoryManager::failReserveRequests(uint64_t a1, uint64_t a2)
{
  v3[5] = *(void **)MEMORY[0x263EF8340];
  if (v3[0] != v3[1])
  {
    getErrorErrorCat();
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
  }
}

void anonymous namespace'::XPCMemoryManager::takePendingReserveRequests(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (std::mutex *)(a2 + 136);
  std::mutex::lock((std::mutex *)(a2 + 136));
  uint64_t v10 = 0;
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(a2 + 224);
    uint64_t v9 = *(unsigned int *)(a2 + 240);
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 224);
    uint64_t v9 = *(unsigned int *)(a2 + 240);
    uint64_t v7 = v8 + 32 * v9;
  }
  if (v7 == v8 + 32 * v9)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)(v7 + 8);
    a1[2] = *(void *)(v7 + 24);
    *(void *)(v7 + 16) = 0;
    *(void *)(v7 + 24) = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)uint64_t v7 = -8192;
    *(int32x2_t *)(a2 + 232) = vadd_s32(*(int32x2_t *)(a2 + 232), (int32x2_t)0x1FFFFFFFFLL);
  }
  std::mutex::unlock(v6);
}

void _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_15SPSExecutorAddrEEESC_yEE9callAsyncIZNS7_19callSPSWrapperAsyncISE_S8_ZN12_GLOBAL__N_116XPCMemoryManager11acquireSlabEPKNS_7jitlink12JITLinkDylibEyE3__0JNS2_12ExecutorAddrEyEEEvOT0_SP_OT1_DpRKT2_EUlOT_PKcmE_SO_JSP_yEEEvSZ_SR_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerESZ_EUlS4_E_EEvPvRS4_(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  operator new();
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZN12_GLOBAL__N_116XPCMemoryManager11acquireSlabEPKNS_7jitlink12JITLinkDylibEyE3__0JNS0_12ExecutorAddrEyEEEvOT0_SL_OT1_DpRKT2_EUlOT_PKcmE_SK_JSL_yEEEvSV_SN_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESV_ENUlS13_E_clES13_EUlvE_ED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBE48;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 9)
  {
    uint64_t v3 = *(void **)(a1 + 32);
LABEL_5:
    free(v3);
    return a1;
  }
  if (!v2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3) {
      goto LABEL_5;
    }
  }
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZN12_GLOBAL__N_116XPCMemoryManager11acquireSlabEPKNS_7jitlink12JITLinkDylibEyE3__0JNS0_12ExecutorAddrEyEEEvOT0_SL_OT1_DpRKT2_EUlOT_PKcmE_SK_JSL_yEEEvSV_SN_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESV_ENUlS13_E_clES13_EUlvE_ED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBE48;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 < 9)
  {
    if (v2) {
      goto LABEL_8;
    }
    uint64_t v3 = *(void **)(a1 + 32);
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = *(void **)(a1 + 32);
  }
  free(v3);
LABEL_8:
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZN12_GLOBAL__N_116XPCMemoryManager11acquireSlabEPKNS_7jitlink12JITLinkDylibEyE3__0JNS0_12ExecutorAddrEyEEEvOT0_SL_OT1_DpRKT2_EUlOT_PKcmE_SK_JSL_yEEEvSV_SN_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESV_ENUlS13_E_clES13_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 48));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZN12_GLOBAL__N_116XPCMemoryManager11acquireSlabEPKNS_7jitlink12JITLinkDylibEyE3__0JNS0_12ExecutorAddrEyEEEvOT0_SL_OT1_DpRKT2_EUlOT_PKcmE_SK_JSL_yEEEvSV_SN_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESV_ENUlS13_E_clES13_EUlvE_E3runEv(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)(a1 + 8);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  char v14 = 0;
  uint64_t v13 = 0;
  if (v8[1])
  {
    if (v8[1] <= (void *)8) {
      unint64_t v2 = v8;
    }
    else {
      unint64_t v2 = (void **)v8[0];
    }
  }
  else
  {
    uint64_t v9 = v8[0];
    if (v8[0])
    {
      getErrorErrorCat();
      uint64_t v11 = 3;
      int v12 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    unint64_t v2 = v8;
  }
  llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr>,llvm::Expected<llvm::orc::ExecutorAddr>>::deserialize(&v13, (uint64_t)v2, (uint64_t)v8[1], &v10);
  if (v10)
  {
    uint64_t v9 = v10;
    uint64_t v10 = 0;
    LOBYTE(v12) = v14 & 1;
    uint64_t v3 = v13;
    if (v14) {
      uint64_t v13 = 0;
    }
    uint64_t v11 = v3;
    if ((v12 & 1) != 0 && v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v5 = (uint64_t)v9;
    if (!v9) {
      goto LABEL_22;
    }
LABEL_21:
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    goto LABEL_22;
  }
  uint64_t v10 = 0;
  LOBYTE(v12) = v14 & 1;
  uint64_t v4 = v13;
  if (v14) {
    uint64_t v13 = 0;
  }
  uint64_t v11 = v4;
  if (v12)
  {
    uint64_t v5 = v11;
    if (v11) {
      goto LABEL_21;
    }
  }
LABEL_22:
  if (v10) {
    (*(void (**)(void *))(*(void *)v10 + 8))(v10);
  }
  if (v14)
  {
    uint64_t v6 = v13;
    uint64_t v13 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  if (v8[1] >= (void *)9)
  {
    uint64_t v7 = v8[0];
LABEL_31:
    free(v7);
    return;
  }
  if (!v8[1])
  {
    uint64_t v7 = v8[0];
    if (v8[0]) {
      goto LABEL_31;
    }
  }
}

void llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr>,llvm::Expected<llvm::orc::ExecutorAddr>>::deserialize(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  v11[0] = a2;
  v11[1] = a3;
  v10[0] = 0;
  memset(&v10[8], 0, 32);
  if (!llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr>,llvm::orc::shared::detail::SPSSerializableExpected<llvm::orc::ExecutorAddr>,void>::deserialize(v11, (uint64_t)v10))
  {
    getErrorErrorCat();
    uint64_t v12 = 3;
    uint64_t v13 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
  }
  long long v7 = *(_OWORD *)v10;
  *(_OWORD *)std::string __p = *(_OWORD *)&v10[16];
  uint64_t v9 = *(void *)&v10[32];
  memset(&v10[16], 0, 24);
  llvm::orc::shared::detail::fromSPSSerializable<llvm::orc::ExecutorAddr>((uint64_t)&v7, (uint64_t)&v12);
  llvm::Expected<llvm::orc::ExecutorAddr>::moveAssign<llvm::orc::ExecutorAddr>(a1, &v12);
  if (v13)
  {
    uint64_t v6 = v12;
    uint64_t v12 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  *a4 = 0;
  if ((v10[39] & 0x80000000) != 0) {
    operator delete(*(void **)&v10[16]);
  }
}

uint64_t llvm::orc::shared::detail::fromSPSSerializable<llvm::orc::ExecutorAddr>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)result)
  {
    getErrorErrorCat();
    operator new();
  }
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(void *)a2 = *(void *)(result + 8);
  return result;
}

BOOL llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr>,llvm::orc::shared::detail::SPSSerializableExpected<llvm::orc::ExecutorAddr>,void>::deserialize(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *a1;
  int v4 = *(unsigned __int8 *)(*a1)++;
  a1[1] = v2 - 1;
  *(unsigned char *)a2 = v4;
  if (v4)
  {
    if ((unint64_t)(v2 - 1) >= 8)
    {
      uint64_t v5 = *(void *)(v3 + 1);
      *a1 = v3 + 9;
      a1[1] = v2 - 9;
      *(void *)(a2 + 8) = v5;
      return 1;
    }
    return 0;
  }
  return llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::deserialize((uint64_t)a1, (std::string *)(a2 + 16));
}

unsigned char *llvm::Expected<llvm::orc::ExecutorAddr>::moveAssign<llvm::orc::ExecutorAddr>(unsigned char *result, unsigned char *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    char v4 = result[8];
    if (v4)
    {
      BOOL result = *(unsigned char **)result;
      *(void *)uint64_t v3 = 0;
      if (result)
      {
        BOOL result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
        char v4 = v3[8];
      }
    }
    char v5 = a2[8];
    v3[8] = v4 & 0xFE | v5 & 1;
    uint64_t v6 = *(void *)a2;
    if (v5) {
      *(void *)a2 = 0;
    }
    *(void *)uint64_t v3 = v6;
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = a2 + 16;
    uint64_t v4 = *(void *)a2;
    if (v4 != v5)
    {
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::assignRemote(a1, a2);
      return a1;
    }
    unint64_t v6 = *(unsigned int *)(a2 + 8);
    unsigned int v7 = *(_DWORD *)(a1 + 8);
    if (v7 >= v6)
    {
      uint64_t v8 = *(void *)a1;
      if (v6)
      {
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *>((uint64_t)&v12, v4, v4 + 104 * v6, v8);
        uint64_t v10 = v9;
        uint64_t v8 = *(void *)a1;
        unsigned int v7 = *(_DWORD *)(a1 + 8);
      }
      else
      {
        uint64_t v10 = *(void *)a1;
      }
      llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::destroy_range(v10, v8 + 104 * v7);
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 12) >= v6)
    {
      if (v7)
      {
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *>((uint64_t)&v13, v4, v4 + 104 * v7, *(void *)a1);
LABEL_12:
        llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::uninitialized_move<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>*,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>*>(*(void *)a2 + 104 * v7, *(void *)a2 + 104 * *(unsigned int *)(a2 + 8), *(void *)a1 + 104 * v7);
LABEL_15:
        *(_DWORD *)(a1 + 8) = v6;
        llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::destroy_range(*(void *)a2, *(void *)a2 + 104 * *(unsigned int *)(a2 + 8));
        *(_DWORD *)(a2 + 8) = 0;
        return a1;
      }
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::destroy_range(*(void *)a1, *(void *)a1 + 104 * v7);
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::grow(a1, v6);
    }
    unsigned int v7 = 0;
    goto LABEL_12;
  }
  return a1;
}

double llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::assignRemote(uint64_t a1, uint64_t a2)
{
  llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::destroy_range(*(void *)a1, *(void *)a1 + 104 * *(unsigned int *)(a1 + 8));
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  *(void *)a1 = *(void *)a2;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0;
  return result;
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 104, &v6);
  llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::moveElementsForGrow(a1, (uint64_t)v4);
  int v5 = v6;
  if (*(void *)a1 != v3) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::uninitialized_move<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>*,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  while (result != a2)
  {
    *(unsigned char *)a3 = *(unsigned char *)result;
    long long v3 = *(_OWORD *)(result + 8);
    long long v4 = *(_OWORD *)(result + 24);
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(result + 40);
    *(_OWORD *)(a3 + 24) = v4;
    *(_OWORD *)(a3 + 8) = v3;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(result + 56);
    *(void *)(a3 + 72) = *(void *)(result + 72);
    *(void *)(result + 56) = 0;
    *(void *)(result + 64) = 0;
    *(void *)(result + 72) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 80) = *(_OWORD *)(result + 80);
    *(void *)(a3 + 96) = *(void *)(result + 96);
    *(void *)(result + 80) = 0;
    *(void *)(result + 88) = 0;
    *(void *)(result + 96) = 0;
    result += 104;
    a3 += 104;
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(unsigned char *)a4 = *(unsigned char *)v5;
    long long v7 = *(_OWORD *)(v5 + 8);
    long long v8 = *(_OWORD *)(v5 + 24);
    *(_OWORD *)(a4 + 40) = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a4 + 24) = v8;
    *(_OWORD *)(a4 + 8) = v7;
    std::vector<llvm::jitlink::Block *>::__move_assign(a4 + 56, (__n128 *)(v5 + 56));
    std::vector<llvm::jitlink::Block *>::__move_assign(a4 + 80, (__n128 *)(v5 + 80));
    a4 += 104;
    v5 += 104;
  }
  while (v5 != v6);
  return v6;
}

__n128 std::vector<llvm::jitlink::Block *>::__move_assign(uint64_t a1, __n128 *a2)
{
  long long v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::moveElementsForGrow(uint64_t a1, uint64_t a2)
{
  llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::uninitialized_move<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>*,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>*>(*(void *)a1, *(void *)a1 + 104 * *(unsigned int *)(a1 + 8), a2);
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)a1 + 104 * *(unsigned int *)(a1 + 8);
  llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::destroy_range(v3, v4);
}

void std::vector<llvm::orc::ExecutorAddr>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v3, a2);
    long long v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    char v12 = v7;
    if (v11 != *a1)
    {
      char v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

BOOL llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSExecutorAddr>,std::vector<llvm::orc::ExecutorAddr>,void>::serialize(void *a1, void *a2)
{
  if (a1[1] < 8uLL) {
    return 0;
  }
  *(void *)*a1 = (uint64_t)(a2[1] - *a2) >> 3;
  uint64_t v2 = (void *)(*a1 + 8);
  unint64_t v3 = a1[1] - 8;
  *a1 = v2;
  a1[1] = v3;
  uint64_t v4 = a2[1];
  BOOL v5 = *a2 == v4;
  if (*a2 != v4 && v3 >= 8)
  {
    uint64_t v6 = *a2 + 8;
    do
    {
      void *v2 = *(void *)(v6 - 8);
      uint64_t v2 = (void *)(*a1 + 8);
      unint64_t v7 = a1[1] - 8;
      *a1 = v2;
      a1[1] = v7;
      BOOL v5 = v6 == v4;
      if (v6 == v4) {
        break;
      }
      v6 += 8;
    }
    while (v7 > 7);
  }
  return v5;
}

void _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSL_9allocatorISP_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrENSM_ISY_NSQ_ISY_EEEEEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_S10_EEEvS1A_S12_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1A_EUlS4_E_EEvPvRS4_(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)a2;
  unint64_t v3 = *(void **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 8);
  long long v6 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v7, (long long *)(a1 + 40));
  v8[0] = v2;
  v8[1] = v3;
  operator new();
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSL_9allocatorISP_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrENSM_ISY_NSQ_ISY_EEEEEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_S10_EEEvS1A_S12_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1A_EUlS4_E_EEvPvS1L_(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  a1[1] = *(void *)(a2 + 8);
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  a1[4] = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 5), (long long *)(a2 + 40));
}

void _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSL_9allocatorISP_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrENSM_ISY_NSQ_ISY_EEEEEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_S10_EEEvS1A_S12_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1A_EUlS4_E_EEvPv(void *a1)
{
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(a1 + 5);
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSH_9allocatorISL_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrENSI_ISU_NSM_ISU_EEEEEEEvOT0_SU_OT1_DpRKT2_EUlOT_PKcmE_ST_JSU_SW_EEEvS16_SY_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES16_ENUlS1E_E_clES1E_EUlvE_ED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBE90;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 9)
  {
    unint64_t v3 = *(void **)(a1 + 72);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    unint64_t v3 = *(void **)(a1 + 72);
    if (v3) {
      goto LABEL_5;
    }
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 40));
  long long v4 = *(void **)(a1 + 16);
  if (v4)
  {
    *(void *)(a1 + 24) = v4;
    operator delete(v4);
  }
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSH_9allocatorISL_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrENSI_ISU_NSM_ISU_EEEEEEEvOT0_SU_OT1_DpRKT2_EUlOT_PKcmE_ST_JSU_SW_EEEvS16_SY_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES16_ENUlS1E_E_clES1E_EUlvE_ED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_270DBBE90;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 < 9)
  {
    if (v2 || (unint64_t v3 = *(void **)(a1 + 72)) == 0)
    {
LABEL_8:
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)(a1 + 40));
      long long v4 = *(void **)(a1 + 16);
      if (v4)
      {
        *(void *)(a1 + 24) = v4;
        operator delete(v4);
      }
      JUMPOUT(0x263E500B0);
    }
  }
  else
  {
    unint64_t v3 = *(void **)(a1 + 72);
  }
  free(v3);
  goto LABEL_8;
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSH_9allocatorISL_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrENSI_ISU_NSM_ISU_EEEEEEEvOT0_SU_OT1_DpRKT2_EUlOT_PKcmE_ST_JSU_SW_EEEvS16_SY_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES16_ENUlS1E_E_clES1E_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 88));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSH_9allocatorISL_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrENSI_ISU_NSM_ISU_EEEEEEEvOT0_SU_OT1_DpRKT2_EUlOT_PKcmE_ST_JSU_SW_EEEvS16_SY_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES16_ENUlS1E_E_clES1E_EUlvE_E3runEv(uint64_t a1)
{
  *(_OWORD *)uint64_t v11 = *(_OWORD *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v13 = 0;
  if (v11[1])
  {
    if (v11[1] <= (void *)8) {
      unint64_t v2 = v11;
    }
    else {
      unint64_t v2 = (void **)v11[0];
    }
  }
  else
  {
    v12[3] = v11[0];
    if (v11[0])
    {
      getErrorErrorCat();
      v12[0] = 3;
      v12[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
    unint64_t v2 = v11;
  }
  llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSError,llvm::Error>::deserialize(&v13, (uint64_t)v2, (uint64_t)v11[1], &v14);
  uint64_t v3 = v14;
  if (v14)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    long long v4 = (void *)(a1 + 40);
    v12[0] = v3;
    uint64_t v5 = *(void *)(a1 + 64);
    if ((v5 & 2) == 0) {
      long long v4 = (void *)*v4;
    }
    (*(void (**)(void *, void *))(v5 & 0xFFFFFFFFFFFFFFF8))(v4, v12);
    if (v12[0]) {
      (*(void (**)(void))(*(void *)v12[0] + 8))(v12[0]);
    }
    uint64_t v6 = v14;
    if (v14) {
LABEL_11:
    }
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  else
  {
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    if (!v8) {
    uint64_t v9 = (void *)(a1 + 40);
    }
    v12[0] = v8;
    uint64_t v10 = *(void *)(a1 + 64);
    if ((v10 & 2) == 0) {
      uint64_t v9 = (void *)*v9;
    }
    (*(void (**)(void *, void *))(v10 & 0xFFFFFFFFFFFFFFF8))(v9, v12);
    uint64_t v6 = v12[0];
    if (v12[0]) {
      goto LABEL_11;
    }
  }
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  if (v11[1] >= (void *)9)
  {
    uint64_t v7 = v11[0];
LABEL_18:
    free(v7);
    return;
  }
  if (!v11[1])
  {
    uint64_t v7 = v11[0];
    if (v11[0]) {
      goto LABEL_18;
    }
  }
}

char *std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    abort();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>>,llvm::orc::SimpleRemoteEPC &>::CallImpl<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>> (*)(llvm::orc::ExecutorProcessControl&)>(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

uint64_t _GLOBAL__sub_I_XPCExecutorProcessControl_cpp()
{
}

void *llvm::detail::IEEEFloat::assign(void *this, uint64_t *a2)
{
  char v2 = *((unsigned char *)this + 20) & 0xF7 | *((unsigned char *)a2 + 20) & 8;
  *((unsigned char *)this + 20) = v2;
  char v3 = *((unsigned char *)a2 + 20);
  int v4 = v3 & 7;
  *((unsigned char *)this + 20) = v2 & 0xF8 | v3 & 7;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  BOOL v6 = (v3 & 6) != 0 && v4 != 3;
  if (v4 == 1 || v6) {
    return llvm::detail::IEEEFloat::copySignificand(this, a2);
  }
  return this;
}

void *llvm::detail::IEEEFloat::copySignificand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  __n128 result = a1 + 1;
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if ((v4 - 64) <= 0xFFFFFF7F) {
    __n128 result = (void *)*result;
  }
  unsigned int v5 = *(_DWORD *)(*a2 + 8) - 64;
  uint64_t v8 = (uint64_t *)a2[1];
  BOOL v6 = a2 + 1;
  uint64_t v7 = v8;
  if (v5 >= 0xFFFFFF80) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v7;
  }
  if (v4 <= 0xFFFFFFBF)
  {
    unint64_t v10 = (unint64_t)(v4 + 64) >> 6;
    do
    {
      uint64_t v11 = *v9++;
      *result++ = v11;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::makeNaN(llvm::detail::IEEEFloat *this, int a2, int a3, const llvm::APInt *a4)
{
  uint64_t v4 = a4;
  char v7 = *((unsigned char *)this + 20) & 0xF0;
  if (a3) {
    char v8 = 9;
  }
  else {
    char v8 = 1;
  }
  *((unsigned char *)this + 20) = v7 | v8;
  uint64_t v9 = *(int **)this;
  int v10 = *(_DWORD *)(*(void *)this + 16);
  if (v10 == 1)
  {
    if (v9[5] == 2) {
      int v11 = v9[1] - 1;
    }
    else {
      int v11 = *v9;
    }
  }
  else
  {
    int v11 = *v9 + 1;
  }
  *((_DWORD *)this + 4) = v11;
  unsigned int v12 = v9[2];
  uint64_t v13 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  if (v12 - 64 <= 0xFFFFFF7F) {
    uint64_t v13 = *(const llvm::APInt **)v13;
  }
  unsigned int v14 = v12 + 64;
  unint64_t v15 = (v12 + 64) >> 6;
  int v35 = 1;
  uint64_t v34 = 0;
  if (v10 == 1)
  {
    if (v9[5] == 2)
    {
      *((unsigned char *)this + 20) = v7 | 9;
      unsigned int v16 = v9[2] - 1;
      uint64_t v17 = 0;
    }
    else
    {
      unsigned int v16 = v12 - 1;
      uint64_t v17 = -1;
    }
    llvm::APInt::APInt((llvm::APInt *)&v32, v16, v17);
    a2 = 0;
    uint64_t result = v32;
    uint64_t v34 = v32;
    unsigned int v20 = v33;
    int v35 = v33;
    uint64_t v4 = (const llvm::APInt *)&v34;
    unsigned int v19 = v33;
  }
  else
  {
    if (!a4)
    {
      *(void *)uint64_t v13 = 0;
      if (v14 >= 0x80) {
        bzero((char *)v13 + 8, 8 * (v15 - 2) + 8);
      }
      uint64_t result = 0;
      unsigned int v29 = v12 - 2;
      unsigned int v20 = 1;
      unsigned int v26 = v12;
      if (a2) {
        goto LABEL_32;
      }
LABEL_42:
      if (v9[5] == 2) {
        goto LABEL_44;
      }
      goto LABEL_43;
    }
    uint64_t result = 0;
    unsigned int v19 = *((_DWORD *)a4 + 2);
    unsigned int v20 = 1;
  }
  unint64_t v21 = ((unint64_t)v19 + 63) >> 6;
  if (v15 > v21)
  {
    *(void *)uint64_t v13 = 0;
    if (v14 >= 0x80)
    {
      uint64_t v22 = result;
      bzero((char *)v13 + 8, 8 * (v15 - 2) + 8);
      uint64_t result = v22;
    }
  }
  if (v19 >= 0x41) {
    uint64_t v4 = *(const llvm::APInt **)v4;
  }
  if (v15 >= v21) {
    uint64_t v23 = v21;
  }
  else {
    uint64_t v23 = v15;
  }
  if (v23)
  {
    xpc_object_t v24 = (const llvm::APInt **)v13;
    do
    {
      std::error_code v25 = *(const llvm::APInt **)v4;
      uint64_t v4 = (const llvm::APInt *)((char *)v4 + 8);
      *v24++ = v25;
      --v23;
    }
    while (v23);
  }
  uint64_t v9 = *(int **)this;
  unsigned int v26 = *(_DWORD *)(*(void *)this + 8);
  unsigned int v27 = (v26 - 1) >> 6;
  *((void *)v13 + v27) &= ~(-1 << (v26 - 1));
  for (unsigned int i = v27 + 1; v15 != i; ++i)
    *((void *)v13 + i) = 0;
  unsigned int v29 = v26 - 2;
  if (!a2) {
    goto LABEL_42;
  }
LABEL_32:
  *((void *)v13 + (v29 >> 6)) &= ~(1 << v29);
  if (v12 <= 0xFFFFFFBF)
  {
    unint64_t v30 = *(void *)v13;
    if (*(void *)v13) {
      goto LABEL_44;
    }
    while (v15 - 1 != v30)
    {
      if (*((void *)v13 + ++v30))
      {
        if (v30 >= v15) {
          break;
        }
        goto LABEL_44;
      }
    }
  }
  unsigned int v29 = v26 - 3;
LABEL_43:
  *((void *)v13 + (v29 >> 6)) |= 1 << v29;
LABEL_44:
  if (v9 == (int *)&llvm::semX87DoubleExtended) {
    *((void *)v13 + ((v26 - 1) >> 6)) |= 1 << (v26 - 1);
  }
  if (v20 >= 0x41)
  {
    if (result) {
      return MEMORY[0x263E50080](result, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::operator=(llvm::detail::IEEEFloat *this, llvm::detail::IEEEFloat *a2)
{
  if (this != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)this != *(void *)a2)
    {
      if ((*(_DWORD *)(*(void *)this + 8) - 64) <= 0xFFFFFF7F)
      {
        uint64_t v5 = *((void *)this + 1);
        if (v5)
        {
          MEMORY[0x263E50080](v5, 0x1000C8000313F17);
          uint64_t v4 = *(void *)a2;
        }
      }
      *(void *)this = v4;
      if ((*(_DWORD *)(v4 + 8) + 64) >= 0x80) {
        operator new[]();
      }
    }
    llvm::detail::IEEEFloat::assign(this, (uint64_t *)a2);
  }
  return this;
}

uint64_t llvm::detail::IEEEFloat::operator=(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)a1 + 8) - 64) <= 0xFFFFFF7F)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4) {
      MEMORY[0x263E50080](v4, 0x1000C8000313F17);
    }
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  char v5 = *(unsigned char *)(a1 + 20) & 0xF8 | *(unsigned char *)(a2 + 20) & 7;
  *(unsigned char *)(a1 + 20) = v5;
  *(unsigned char *)(a1 + 20) = v5 & 0xF7 | *(unsigned char *)(a2 + 20) & 8;
  *(void *)a2 = &llvm::semBogus;
  return a1;
}

BOOL llvm::detail::IEEEFloat::isDenormal(llvm::detail::IEEEFloat *this)
{
  BOOL v1 = (*((unsigned char *)this + 20) & 6) == 0 || (*((unsigned char *)this + 20) & 7) == 3;
  if (v1 || *((_DWORD *)this + 4) != *(_DWORD *)(*(void *)this + 4)) {
    return 0;
  }
  int v2 = *(_DWORD *)(*(void *)this + 8);
  uint64_t v3 = (void *)((char *)this + 8);
  if ((v2 - 64) <= 0xFFFFFF7F) {
    uint64_t v3 = (void *)*v3;
  }
  return ((v3[(v2 - 1) >> 6] >> (v2 - 1)) & 1) == 0;
}

BOOL llvm::detail::IEEEFloat::isSignificandAllOnes(llvm::detail::IEEEFloat *this)
{
  uint64_t v2 = *(void *)this;
  BOOL v1 = (uint64_t *)((char *)this + 8);
  int v3 = *(_DWORD *)(v2 + 8);
  if ((v3 - 64) <= 0xFFFFFF7F) {
    BOOL v1 = (uint64_t *)*v1;
  }
  unsigned int v4 = v3 + 63;
  uint64_t v5 = (v4 >> 6) - 1;
  if (v4 >> 6 == 1)
  {
    uint64_t v5 = 0;
    return (v1[v5] | (-1 << v4)) == -1;
  }
  else
  {
    uint64_t v6 = (v4 >> 6) - 1;
    char v7 = v1;
    while (1)
    {
      uint64_t v8 = *v7++;
      if (v8 != -1) {
        break;
      }
      if (!--v6) {
        return (v1[v5] | (-1 << v4)) == -1;
      }
    }
    return 0;
  }
}

uint64_t llvm::detail::IEEEFloat::compare(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  unsigned int v3 = *((unsigned __int8 *)this + 20);
  unsigned int v4 = *((unsigned __int8 *)a2 + 20);
  uint64_t result = 3;
  switch(4 * (v3 & 7) + (v4 & 7))
  {
    case 1u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 9u:
    case 0xDu:
      return result;
    case 2u:
    case 3u:
    case 0xBu:
      uint64_t result = ~(v3 >> 2) & 2;
      break;
    case 8u:
    case 0xCu:
    case 0xEu:
      uint64_t result = (v4 >> 2) & 2;
      break;
    case 0xAu:
      int v9 = (v3 >> 3) & 1;
      if (v9 == ((v4 >> 3) & 1))
      {
        LODWORD(result) = llvm::detail::IEEEFloat::compareAbsoluteValue(this, a2);
        if (result == 2) {
          unsigned int v10 = 0;
        }
        else {
          unsigned int v10 = result;
        }
        if (result) {
          unsigned int v11 = v10;
        }
        else {
          unsigned int v11 = 2;
        }
        if ((v3 & 8) != 0) {
          uint64_t result = v11;
        }
        else {
          uint64_t result = result;
        }
      }
      else
      {
        uint64_t result = (2 * v9) ^ 2u;
      }
      break;
    case 0xFu:
      uint64_t result = 1;
      break;
    default:
      int v6 = (v3 >> 3) & 1;
      BOOL v7 = v6 == ((v4 >> 3) & 1);
      unsigned int v8 = (2 * v6) ^ 2;
      if (v7) {
        uint64_t result = 1;
      }
      else {
        uint64_t result = v8;
      }
      break;
  }
  return result;
}

BOOL llvm::detail::IEEEFloat::bitwiseIsEqual(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  if (this == a2) {
    return 1;
  }
  if (*(void *)this != *(void *)a2) {
    return 0;
  }
  int v2 = *((unsigned __int8 *)this + 20);
  int v3 = *((unsigned __int8 *)a2 + 20);
  if ((v2 & 7) != (v3 & 7) || ((v3 ^ v2) & 8) != 0) {
    return 0;
  }
  uint64_t v4 = 1;
  if ((v2 & 7) == 0 || (v2 & 7) == 3) {
    return v4;
  }
  if ((v2 & 6) != 0 && *((_DWORD *)this + 4) != *((_DWORD *)a2 + 4)) {
    return 0;
  }
  int v5 = *(_DWORD *)(*(void *)this + 8);
  unsigned int v6 = v5 - 64;
  BOOL v7 = (void *)((char *)this + 8);
  if ((v5 - 64) <= 0xFFFFFF7F) {
    BOOL v7 = (void *)*v7;
  }
  unsigned int v8 = v5 + 64;
  unsigned int v11 = (char *)*((void *)a2 + 1);
  int v9 = (char *)a2 + 8;
  unsigned int v10 = v11;
  if (v6 < 0xFFFFFF80) {
    int v9 = v10;
  }
  return memcmp(v7, v9, (v8 >> 3) & 0x1FFFFFF8) == 0;
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a1 + 20) & 0xF0 | 2;
  int v6 = *(_DWORD *)(a2 + 8);
  BOOL v7 = (void *)(a1 + 8);
  if ((v6 - 64) >= 0xFFFFFF80)
  {
    *BOOL v7 = 0;
  }
  else
  {
    unsigned int v8 = (void *)*v7;
    *unsigned int v8 = 0;
    bzero(v8 + 1, 8 * (((v6 + 64) >> 6) - 2) + 8);
    BOOL v7 = (void *)*v7;
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 8) - 1;
  *BOOL v7 = a3;
  llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)a1, 1, 0);
  return a1;
}

uint64_t llvm::detail::IEEEFloat::normalize(llvm::detail::IEEEFloat *this, int a2, int a3)
{
  if ((*((unsigned char *)this + 20) & 6) == 0 || (*((unsigned char *)this + 20) & 7) == 3) {
    return 0;
  }
  int v9 = (char *)this + 8;
  unsigned int v8 = *(_DWORD **)this;
  int v10 = *(_DWORD *)(*(void *)this + 8);
  unsigned int v11 = (char *)this + 8;
  if ((v10 - 64) <= 0xFFFFFF7F) {
    unsigned int v11 = *(char **)v9;
  }
  unsigned int v12 = (v10 + 64) >> 6;
  int v13 = 64 - (v12 << 6);
  unsigned int v14 = v12 - 1;
  while (1)
  {
    unint64_t v15 = *(void *)&v11[8 * v14];
    if (v15) {
      break;
    }
    v13 += 64;
    if (--v14 == -1) {
      goto LABEL_14;
    }
  }
  int v16 = (__clz(v15) - v13) ^ 0x3F;
  unsigned int v17 = v16 + 1;
  if (v16 == -1)
  {
LABEL_14:
    unsigned int v17 = 0;
    goto LABEL_15;
  }
  unsigned int v25 = v17 - v10;
  int v26 = *((_DWORD *)this + 4);
  int v27 = v26 + v25;
  if ((signed int)(v26 + v25) > *v8) {
    goto LABEL_33;
  }
  int v31 = v8[1];
  unsigned int v32 = v31 - v26;
  if (v27 >= v31) {
    unsigned int v33 = v25;
  }
  else {
    unsigned int v33 = v32;
  }
  if ((v33 & 0x80000000) != 0)
  {
    llvm::detail::IEEEFloat::shiftSignificandLeft(this, -v33);
    return 0;
  }
  if (v33)
  {
    int v34 = llvm::detail::IEEEFloat::shiftSignificandRight(this, v33);
    if (v34 == 2) {
      int v35 = 3;
    }
    else {
      int v35 = v34;
    }
    if (v34) {
      int v36 = v35;
    }
    else {
      int v36 = 1;
    }
    if (a3) {
      a3 = v36;
    }
    else {
      a3 = v34;
    }
    if (v17 >= v33) {
      v17 -= v33;
    }
    else {
      unsigned int v17 = 0;
    }
    unsigned int v8 = *(_DWORD **)this;
  }
LABEL_15:
  if (v8[4] == 1 && v8[5] == 1 && *((_DWORD *)this + 4) == *v8 && llvm::detail::IEEEFloat::isSignificandAllOnes(this)) {
    goto LABEL_33;
  }
  if (!a3)
  {
    if (!v17)
    {
      char v24 = *((unsigned char *)this + 20) & 0xF8 | 3;
      *((unsigned char *)this + 20) = v24;
      if (v8[5] == 2)
      {
        uint64_t result = 0;
        *((unsigned char *)this + 20) = v24 & 0xF3;
        return result;
      }
    }
    return 0;
  }
  if ((llvm::detail::IEEEFloat::roundAwayFromZero((uint64_t *)this, a2, a3, 0) & 1) == 0)
  {
    int v18 = v8[2];
    goto LABEL_35;
  }
  if (!v17) {
    *((_DWORD *)this + 4) = v8[1];
  }
  llvm::detail::IEEEFloat::incrementSignificand(this);
  unsigned int v8 = *(_DWORD **)this;
  int v18 = *(_DWORD *)(*(void *)this + 8);
  if ((v18 - 64) <= 0xFFFFFF7F) {
    int v9 = *(char **)v9;
  }
  unsigned int v19 = (v18 + 64) >> 6;
  int v20 = 64 - (v19 << 6);
  unsigned int v21 = v19 - 1;
  while (1)
  {
    unint64_t v22 = *(void *)&v9[8 * v21];
    if (v22) {
      break;
    }
    v20 += 64;
    if (--v21 == -1)
    {
      int v23 = -1;
      goto LABEL_59;
    }
  }
  int v23 = (__clz(v22) - v20) ^ 0x3F;
LABEL_59:
  if (v23 == v18)
  {
    if (*((_DWORD *)this + 4) == *v8)
    {
      if ((*((unsigned char *)this + 20) & 8) != 0) {
        int v29 = 3;
      }
      else {
        int v29 = 2;
      }
      __int16 v28 = this;
      goto LABEL_65;
    }
    llvm::detail::IEEEFloat::shiftSignificandRight(this, 1u);
    return 16;
  }
  unsigned int v17 = v23 + 1;
  if (v8[4] == 1 && v8[5] == 1 && *((_DWORD *)this + 4) == *v8 && llvm::detail::IEEEFloat::isSignificandAllOnes(this))
  {
LABEL_33:
    __int16 v28 = this;
    int v29 = a2;
LABEL_65:
    return llvm::detail::IEEEFloat::handleOverflow(v28, v29);
  }
LABEL_35:
  if (v17 == v18) {
    return 16;
  }
  if (!v17)
  {
    char v30 = *((unsigned char *)this + 20) & 0xF8 | 3;
    *((unsigned char *)this + 20) = v30;
    if (v8[5] == 2) {
      *((unsigned char *)this + 20) = v30 & 0xF3;
    }
  }
  return 24;
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, uint64_t a2)
{
  *(void *)this = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  llvm::detail::IEEEFloat::makeZero(this, 0);
  return this;
}

void llvm::detail::IEEEFloat::makeZero(llvm::detail::IEEEFloat *this, int a2)
{
  char v2 = *((unsigned char *)this + 20) & 0xF0;
  if (a2) {
    char v3 = 8;
  }
  else {
    char v3 = 0;
  }
  *((unsigned char *)this + 20) = v2 | v3 | 3;
  uint64_t v4 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 20) == 2) {
    *((unsigned char *)this + 20) = v2 | 3;
  }
  int v5 = *(_DWORD *)(v4 + 8);
  *((_DWORD *)this + 4) = *(_DWORD *)(v4 + 4) - 1;
  if ((v5 - 64) >= 0xFFFFFF80)
  {
    *((void *)this + 1) = 0;
  }
  else
  {
    int v6 = (void *)*((void *)this + 1);
    *int v6 = 0;
    bzero(v6 + 1, 8 * (((v5 + 64) >> 6) - 2) + 8);
  }
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  uint64_t v3 = *(void *)a2;
  *(void *)this = *(void *)a2;
  if ((*(_DWORD *)(v3 + 8) + 64) >= 0x80) {
    operator new[]();
  }
  llvm::detail::IEEEFloat::assign(this, (uint64_t *)a2);
  return this;
}

uint64_t *llvm::detail::IEEEFloat::incrementSignificand(llvm::detail::IEEEFloat *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t result = (uint64_t *)((char *)this + 8);
  uint64_t v3 = *(unsigned int *)(v2 + 8);
  if ((v3 - 64) > 0xFFFFFF7F)
  {
    if (v3 > 0xFFFFFFBF) {
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t *)*result;
  }
  BOOL v4 = __CFADD__((*result)++, 1);
  if (v4)
  {
    unint64_t v5 = (unint64_t)(v3 + 64) >> 6;
    int v6 = result + 1;
    unint64_t v7 = v5 - 1;
    do
    {
      if (!v7) {
        break;
      }
      --v7;
      BOOL v4 = __CFADD__((*v6++)++, 1);
    }
    while (v4);
  }
  return result;
}

void *llvm::detail::IEEEFloat::addSignificand(llvm::detail::IEEEFloat *this, uint64_t **a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t result = (void *)((char *)this + 8);
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if ((v4 - 64) <= 0xFFFFFF7F) {
    uint64_t result = (void *)*result;
  }
  unsigned int v5 = *((_DWORD *)*a2 + 2) - 64;
  unsigned int v8 = a2[1];
  int v6 = (char *)(a2 + 1);
  unint64_t v7 = v8;
  if (v5 >= 0xFFFFFF80) {
    int v9 = (uint64_t *)v6;
  }
  else {
    int v9 = v7;
  }
  if (v4 <= 0xFFFFFFBF)
  {
    BOOL v10 = 0;
    unint64_t v11 = (unint64_t)(v4 + 64) >> 6;
    do
    {
      uint64_t v12 = *v9++;
      uint64_t v13 = v12 + *result;
      BOOL v14 = __CFADD__(v12, *result);
      BOOL v15 = (unint64_t)(v13 + 1) <= *result;
      if (v10)
      {
        ++v13;
        BOOL v10 = v15;
      }
      else
      {
        BOOL v10 = v14;
      }
      *result++ = v13;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t *llvm::detail::IEEEFloat::subtractSignificand(llvm::detail::IEEEFloat *this, unint64_t **a2, uint64_t a3)
{
  uint64_t v4 = *(void *)this;
  uint64_t result = (uint64_t *)((char *)this + 8);
  uint64_t v5 = *(unsigned int *)(v4 + 8);
  if ((v5 - 64) <= 0xFFFFFF7F) {
    uint64_t result = (uint64_t *)*result;
  }
  unsigned int v6 = *((_DWORD *)*a2 + 2) - 64;
  int v9 = a2[1];
  unint64_t v7 = (char *)(a2 + 1);
  unsigned int v8 = v9;
  if (v6 >= 0xFFFFFF80) {
    BOOL v10 = (unint64_t *)v7;
  }
  else {
    BOOL v10 = v8;
  }
  if (v5 <= 0xFFFFFFBF)
  {
    unint64_t v11 = (unint64_t)(v5 + 64) >> 6;
    do
    {
      unint64_t v12 = *v10++;
      unint64_t v13 = *result - v12;
      BOOL v14 = *result < v12;
      unint64_t v15 = *result + ~v12;
      if (a3)
      {
        a3 = v15 >= *result;
      }
      else
      {
        unint64_t v15 = v13;
        a3 = v14;
      }
      *result++ = v15;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::multiplySignificand(unint64_t *a1, uint64_t a2, const llvm::detail::IEEEFloat *a3)
{
  v45[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = (long long *)*a1;
  int v6 = *(_DWORD *)(*a1 + 8);
  int v35 = 2 * v6;
  unsigned int v7 = 2 * v6 + 64;
  unsigned int v8 = (unint64_t *)(v7 >> 6);
  if (v7 >= 0x140) {
    operator new[]();
  }
  unsigned int v9 = *(_DWORD *)(*a1 + 8);
  BOOL v10 = a1 + 1;
  unint64_t v38 = (unint64_t **)(a1 + 1);
  if ((v6 - 64) <= 0xFFFFFF7F) {
    BOOL v10 = *v38;
  }
  unsigned int v36 = *(_DWORD *)(*a1 + 8);
  int v11 = (2 * v6) | 1;
  uint64_t v12 = (v6 + 64) >> 6;
  if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
    unint64_t v13 = (const unint64_t **)(a2 + 8);
  }
  else {
    unint64_t v13 = *(const unint64_t ***)(a2 + 8);
  }
  llvm::APInt::tcFullMultiply((llvm::APInt *)v45, v10, v13, (const unint64_t *)((v9 + 64) >> 6), (const unint64_t *)((v9 + 64) >> 6));
  int v14 = 64 - (v8 << 6);
  int v15 = v8 - 1;
  unsigned int v37 = v9;
  while (1)
  {
    unint64_t v16 = v45[v15];
    if (v16) {
      break;
    }
    v14 += 64;
    if (--v15 == -1)
    {
      unsigned int v17 = 0;
      goto LABEL_13;
    }
  }
  unsigned int v17 = ((__clz(v16) - v14) ^ 0x3F) + 1;
LABEL_13:
  int v18 = *(_DWORD *)(a2 + 16) + *((_DWORD *)a1 + 4) + 2;
  *((_DWORD *)a1 + 4) = v18;
  if ((*((unsigned char *)a3 + 20) & 7) == 3)
  {
    uint64_t v19 = 0;
  }
  else
  {
    int v34 = *v38;
    if (v35 != v17)
    {
      llvm::APInt::tcShiftLeft((llvm::APInt *)v45, v8, v35 - v17);
      *((_DWORD *)a1 + 4) = v18 - (v35 - v17);
    }
    uint64_t v20 = *((void *)v5 + 2);
    long long v42 = *v5;
    uint64_t v43 = v20;
    DWORD2(v42) = v11;
    unsigned int v21 = v45;
    if (v8 == 1) {
      unsigned int v21 = (void *)v45[0];
    }
    *a1 = (unint64_t)&v42;
    a1[1] = (unint64_t)v21;
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v40, a3);
    llvm::detail::IEEEFloat::convert(&v40, (uint64_t)&v42, 0, &v44);
    llvm::detail::IEEEFloat::shiftSignificandRight((llvm::detail::IEEEFloat *)&v40, 1u);
    uint64_t v19 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)&v40, 0);
    int v22 = v8 - 1;
    if (v8 == 1) {
      v45[0] = *v38;
    }
    *a1 = (unint64_t)v5;
    a1[1] = (unint64_t)v34;
    int v23 = 64 - (v8 << 6);
    while (1)
    {
      unint64_t v24 = v45[v22];
      if (v24) {
        break;
      }
      v23 += 64;
      if (--v22 == -1)
      {
        unsigned int v17 = 0;
        goto LABEL_26;
      }
    }
    unsigned int v17 = ((__clz(v24) - v23) ^ 0x3F) + 1;
LABEL_26:
    if ((*(_DWORD *)(v40 + 8) - 64) <= 0xFFFFFF7F && v41) {
      MEMORY[0x263E50080](v41, 0x1000C8000313F17);
    }
    int v18 = *((_DWORD *)a1 + 4);
  }
  int v25 = v18 + ~v36;
  *((_DWORD *)a1 + 4) = v25;
  unsigned int v26 = v17 - v36;
  if (v17 > v36)
  {
    int v27 = (unint64_t *)((v17 + 63) >> 6);
    unsigned int v28 = llvm::lostFractionThroughTruncation((llvm *)v45, v27, v17 - v36);
    llvm::APInt::tcShiftRight((llvm::APInt *)v45, v27, v26);
    if (v28 == 2) {
      int v29 = 3;
    }
    else {
      int v29 = v28;
    }
    if (v28) {
      unsigned int v30 = v29;
    }
    else {
      unsigned int v30 = 1;
    }
    if (v19) {
      uint64_t v19 = v30;
    }
    else {
      uint64_t v19 = v28;
    }
    *((_DWORD *)a1 + 4) = v26 + v25;
  }
  if (v37 <= 0xFFFFFFBF)
  {
    int v31 = v45;
    do
    {
      unint64_t v32 = *v31++;
      *v10++ = v32;
      --v12;
    }
    while (v12);
  }
  return v19;
}

uint64_t llvm::detail::IEEEFloat::convert(uint64_t *a1, uint64_t a2, int a3, unsigned char *a4)
{
  uint64_t v7 = *a1;
  uint64_t isSignaling = llvm::detail::IEEEFloat::isSignaling((llvm::detail::IEEEFloat *)a1);
  char v8 = 0;
  int v9 = *(_DWORD *)(a2 + 8);
  unsigned int v10 = v9 + 64;
  int v11 = *(_DWORD *)(v7 + 8);
  signed int v12 = v9 - v11;
  if ((_UNKNOWN *)a2 != &llvm::semX87DoubleExtended && (_UNKNOWN *)v7 == &llvm::semX87DoubleExtended)
  {
    if ((*((unsigned char *)a1 + 20) & 7) != 1)
    {
LABEL_10:
      char v8 = 0;
      goto LABEL_11;
    }
    if ((v11 - 64) > 0xFFFFFF7F)
    {
      uint64_t v13 = a1[1];
      if (v13 < 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v13 = *(void *)a1[1];
      if (v13 < 0)
      {
LABEL_8:
        if ((v13 & 0x4000000000000000) == 0) {
          goto LABEL_9;
        }
        goto LABEL_10;
      }
    }
LABEL_9:
    char v8 = 1;
  }
LABEL_11:
  char v52 = v8;
  int v14 = (unint64_t *)(v10 >> 6);
  int v15 = (unint64_t *)((v11 + 64) >> 6);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_12:
    int v16 = 0;
    goto LABEL_13;
  }
  int v23 = *((unsigned char *)a1 + 20) & 7;
  if ((*((unsigned char *)a1 + 20) & 6) != 0 && v23 != 3)
  {
    unsigned int v25 = v11 - 64;
    unsigned int v26 = a1 + 1;
    if ((v11 - 64) <= 0xFFFFFF7F) {
      unsigned int v26 = (void *)*v26;
    }
    int v27 = 64 - (v15 << 6);
    int v28 = v15 - 1;
    while (1)
    {
      unint64_t v29 = v26[v28];
      if (v29) {
        break;
      }
      v27 += 64;
      if (--v28 == -1)
      {
        int v30 = -1;
        goto LABEL_82;
      }
    }
    int v30 = (__clz(v29) - v27) ^ 0x3F;
LABEL_82:
    signed int v44 = v30 + 1 - v11;
    int v45 = *((_DWORD *)a1 + 4);
    int v46 = *(_DWORD *)(a2 + 4);
    if (v44 + v45 < v46) {
      signed int v44 = v46 - v45;
    }
    if (v44 <= v12) {
      signed int v44 = v12;
    }
    if (v44 < 0)
    {
      v12 -= v44;
    }
    else
    {
      if (v30 + 1 > -v12)
      {
LABEL_91:
        uint64_t v51 = v7;
        goto LABEL_92;
      }
      signed int v44 = v30 + v12;
      signed int v12 = -v30;
    }
    *((_DWORD *)a1 + 4) = v44 + v45;
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_91;
  }
  if (v23 != 1 || *(_DWORD *)(v7 + 16) == 1) {
    goto LABEL_12;
  }
  uint64_t v51 = v7;
  unsigned int v25 = v11 - 64;
LABEL_92:
  unint64_t v47 = (llvm *)(a1 + 1);
  if (v25 <= 0xFFFFFF7F) {
    unint64_t v47 = *(llvm **)v47;
  }
  int v16 = llvm::lostFractionThroughTruncation(v47, v15, -v12);
  llvm::APInt::tcShiftRight(v47, v15, -v12);
  uint64_t v7 = v51;
LABEL_13:
  if (v14 > v15) {
    operator new[]();
  }
  if (v14 == 1 && v15 != 1)
  {
    int v18 = *((unsigned char *)a1 + 20) & 7;
    BOOL v20 = (*((unsigned char *)a1 + 20) & 6) != 0 && v18 != 3;
    unsigned int v21 = *(_DWORD *)(*a1 + 8) - 64;
    if (v18 == 1 || v20)
    {
      int v31 = a1 + 1;
      if (v21 <= 0xFFFFFF7F) {
        int v31 = (void *)*v31;
      }
      int v22 = (void *)*v31;
    }
    else
    {
      int v22 = 0;
    }
    if (v21 <= 0xFFFFFF7F)
    {
      uint64_t v32 = a1[1];
      if (v32) {
        MEMORY[0x263E50080](v32, 0x1000C8000313F17);
      }
    }
    a1[1] = (uint64_t)v22;
  }
  *a1 = a2;
  if (v12 >= 1)
  {
    int v33 = *((unsigned char *)a1 + 20) & 7;
    BOOL v34 = (*((unsigned char *)a1 + 20) & 6) == 0 || v33 == 3;
    BOOL v35 = !v34;
    if (v33 == 1 || v35)
    {
      unsigned int v37 = (llvm::APInt *)(a1 + 1);
      if ((*(_DWORD *)(a2 + 8) - 64) <= 0xFFFFFF7F) {
        unsigned int v37 = *(llvm::APInt **)v37;
      }
      llvm::APInt::tcShiftLeft(v37, v14, v12);
    }
  }
  unsigned int v38 = *((unsigned __int8 *)a1 + 20);
  int v39 = v38 & 7;
  if ((v38 & 6) != 0 && v39 != 3)
  {
    uint64_t isSignaling = llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)a1, a3, v16);
    *a4 = isSignaling != 0;
    return isSignaling;
  }
  if ((v38 & 7) == 0)
  {
    if (*(_DWORD *)(*a1 + 16) == 1)
    {
      llvm::detail::IEEEFloat::makeNaN((llvm::detail::IEEEFloat *)a1, 0, (v38 >> 3) & 1, 0);
      *a4 = 1;
      return 16;
    }
    goto LABEL_79;
  }
  if (v39 == 3)
  {
    if (*(_DWORD *)(*a1 + 20) == 2)
    {
      int v41 = (*(_DWORD *)(v7 + 20) != 2) & (v38 >> 3);
      *a4 = v41;
      if (v41) {
        uint64_t v42 = 16;
      }
      else {
        uint64_t v42 = 0;
      }
      uint64_t isSignaling = v42;
      *((unsigned char *)a1 + 20) &= ~8u;
      return isSignaling;
    }
LABEL_79:
    uint64_t isSignaling = 0;
    *a4 = 0;
    return isSignaling;
  }
  if (v39 != 1) {
    goto LABEL_79;
  }
  if (*(_DWORD *)(*a1 + 16) == 1)
  {
    *a4 = *(_DWORD *)(v7 + 16) != 1;
    llvm::detail::IEEEFloat::makeNaN((llvm::detail::IEEEFloat *)a1, 0, (*((unsigned __int8 *)a1 + 20) >> 3) & 1, 0);
    return isSignaling;
  }
  if (*(_DWORD *)(v7 + 20) == 2 && *(_DWORD *)(*a1 + 20) != 2) {
    llvm::detail::IEEEFloat::makeNaN((llvm::detail::IEEEFloat *)a1, 0, 0, 0);
  }
  if (v16) {
    char v48 = 1;
  }
  else {
    char v48 = v52;
  }
  *a4 = v48;
  if ((v52 & 1) == 0 && (_UNKNOWN *)*a1 == &llvm::semX87DoubleExtended) {
    *(void *)a1[1] |= 0x8000000000000000;
  }
  if (!isSignaling) {
    return 0;
  }
  if (*(_DWORD *)(*a1 + 16) == 1) {
    return 1;
  }
  int v49 = *(_DWORD *)(*a1 + 8);
  uint64_t v50 = a1 + 1;
  if ((v49 - 64) <= 0xFFFFFF7F) {
    uint64_t v50 = (void *)*v50;
  }
  uint64_t isSignaling = 1;
  v50[(v49 - 2) >> 6] |= 1 << (v49 - 2);
  return isSignaling;
}

uint64_t llvm::detail::IEEEFloat::shiftSignificandRight(llvm::detail::IEEEFloat *this, unsigned int a2)
{
  *((_DWORD *)this + 4) += a2;
  int v3 = *(_DWORD *)(*(void *)this + 8);
  uint64_t v4 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  if ((v3 - 64) <= 0xFFFFFF7F) {
    uint64_t v4 = *(llvm **)v4;
  }
  uint64_t v5 = (unint64_t *)((v3 + 64) >> 6);
  uint64_t v6 = llvm::lostFractionThroughTruncation(v4, v5, a2);
  llvm::APInt::tcShiftRight(v4, v5, a2);
  return v6;
}

uint64_t llvm::detail::IEEEFloat::addOrSubtractSignificand(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2, int a3)
{
  int v5 = *((_DWORD *)this + 4);
  int v6 = *((_DWORD *)a2 + 4);
  int v7 = v5 - v6;
  if (((((*((unsigned char *)a2 + 20) ^ *((unsigned char *)this + 20)) & 8) == 0) ^ a3))
  {
    if (v7 < 1)
    {
      uint64_t v10 = llvm::detail::IEEEFloat::shiftSignificandRight(this, v6 - v5);
      llvm::detail::IEEEFloat::addSignificand(this, (uint64_t **)a2);
      return v10;
    }
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v17, a2);
    uint64_t v8 = llvm::detail::IEEEFloat::shiftSignificandRight((llvm::detail::IEEEFloat *)&v17, v5 - v6);
    llvm::detail::IEEEFloat::addSignificand(this, &v17);
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v17, a2);
    if (v5 == v6)
    {
      unsigned int v9 = 0;
    }
    else if (v7 < 1)
    {
      unsigned int v9 = llvm::detail::IEEEFloat::shiftSignificandRight(this, ~v7);
      int v12 = *((_DWORD *)v17 + 2);
      if ((v12 - 64) >= 0xFFFFFF80) {
        uint64_t v13 = (llvm::APInt *)&v18;
      }
      else {
        uint64_t v13 = v18;
      }
      llvm::APInt::tcShiftLeft(v13, (unint64_t *)((v12 + 64) >> 6), 1u);
      --v19;
    }
    else
    {
      unsigned int v9 = llvm::detail::IEEEFloat::shiftSignificandRight((llvm::detail::IEEEFloat *)&v17, v7 - 1);
      llvm::detail::IEEEFloat::shiftSignificandLeft(this, 1u);
    }
    int v14 = llvm::detail::IEEEFloat::compareAbsoluteValue(this, (const llvm::detail::IEEEFloat *)&v17);
    BOOL v15 = v9 != 0;
    if (v14)
    {
      llvm::detail::IEEEFloat::subtractSignificand(this, (unint64_t **)&v17, v15);
    }
    else
    {
      llvm::detail::IEEEFloat::subtractSignificand((llvm::detail::IEEEFloat *)&v17, (unint64_t **)this, v15);
      llvm::detail::IEEEFloat::copySignificand((uint64_t *)this, (uint64_t *)&v17);
      *((unsigned char *)this + 20) ^= 8u;
    }
    if (v9 == 3) {
      unsigned int v16 = 1;
    }
    else {
      unsigned int v16 = v9;
    }
    if (v9 == 1) {
      uint64_t v8 = 3;
    }
    else {
      uint64_t v8 = v16;
    }
  }
  if ((*((_DWORD *)v17 + 2) - 64) <= 0xFFFFFF7F)
  {
    if (v18) {
      MEMORY[0x263E50080](v18, 0x1000C8000313F17);
    }
  }
  return v8;
}

uint64_t llvm::detail::IEEEFloat::multiplySignificand(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v6, *(void *)this);
  uint64_t v4 = llvm::detail::IEEEFloat::multiplySignificand((unint64_t *)this, (uint64_t)a2, (const llvm::detail::IEEEFloat *)&v6);
  if ((*(_DWORD *)(v6 + 8) - 64) <= 0xFFFFFF7F && v7) {
    MEMORY[0x263E50080](v7, 0x1000C8000313F17);
  }
  return v4;
}

uint64_t llvm::detail::IEEEFloat::divideSignificand(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  v46[4] = *MEMORY[0x263EF8340];
  int v3 = (void *)((char *)this + 8);
  unsigned int v4 = *(_DWORD *)(*(void *)this + 8);
  if (v4 - 64 <= 0xFFFFFF7F) {
    int v3 = (void *)*v3;
  }
  if ((*(_DWORD *)(*(void *)a2 + 8) - 64) >= 0xFFFFFF80) {
    int v5 = (char *)a2 + 8;
  }
  else {
    int v5 = (char *)*((void *)a2 + 1);
  }
  unsigned int v6 = v4 + 64;
  unint64_t v7 = (v4 + 64) >> 6;
  if (v4 + 64 >= 0xC0) {
    operator new[]();
  }
  uint64_t v8 = (llvm::APInt *)&v46[v7];
  if (v4 <= 0xFFFFFFBF)
  {
    unint64_t v10 = 0;
    if (v7 <= 1) {
      unsigned int v11 = 1;
    }
    else {
      unsigned int v11 = (v4 + 64) >> 6;
    }
    uint64_t v12 = 8 * v11;
    do
    {
      v46[v10 / 8] = v3[v10 / 8];
      *(void *)((char *)v8 + v10) = *(void *)&v5[v10];
      v3[v10 / 8] = 0;
      v10 += 8;
    }
    while (v12 != v10);
    unsigned int v9 = *(_DWORD *)(*(void *)this + 8);
  }
  else
  {
    unsigned int v9 = *(_DWORD *)(*(void *)this + 8);
  }
  int v13 = *((_DWORD *)this + 4) - *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 4) = v13;
  int v14 = 64 - (v7 << 6);
  int v15 = v7 - 1;
  unsigned int v16 = v7 - 1;
  while (1)
  {
    unint64_t v17 = *((void *)v8 + v16);
    if (v17) {
      break;
    }
    v14 += 64;
    if (--v16 == -1)
    {
      int v18 = 0;
      goto LABEL_21;
    }
  }
  int v18 = (__clz(v17) - v14) ^ 0xFFFFFFC0;
LABEL_21:
  unsigned int v19 = v9 + v18;
  if (v9 + v18)
  {
    *((_DWORD *)this + 4) = v19 + v13;
    llvm::APInt::tcShiftLeft(v8, (unint64_t *)(v6 >> 6), v19);
  }
  int v20 = 64 - (v7 << 6);
  while (1)
  {
    unint64_t v21 = v46[v15];
    if (v21) {
      break;
    }
    v20 += 64;
    if (--v15 == -1)
    {
      int v22 = 0;
      goto LABEL_28;
    }
  }
  int v22 = (__clz(v21) - v20) ^ 0xFFFFFFC0;
LABEL_28:
  uint64_t v23 = v9 + v22;
  if (v9 + v22)
  {
    *((_DWORD *)this + 4) -= v23;
    llvm::APInt::tcShiftLeft((llvm::APInt *)v46, (unint64_t *)(v6 >> 6), v23);
  }
  unint64_t v24 = (char *)v8 - 8;
  uint64_t v25 = (v4 + 64) >> 6;
  while (v25 * 8)
  {
    unint64_t v26 = v46[v25 - 1];
    unint64_t v27 = *(void *)&v24[v25 * 8];
    --v25;
    if (v26 != v27)
    {
      if (v26 <= v27)
      {
        --*((_DWORD *)this + 4);
        llvm::APInt::tcShiftLeft((llvm::APInt *)v46, (unint64_t *)(v6 >> 6), 1u);
      }
      break;
    }
  }
  unint64_t v28 = v7;
  if (!v9) {
    goto LABEL_51;
  }
  do
  {
    unint64_t v29 = v7;
    while (v29 * 8)
    {
      unint64_t v30 = v46[v29 - 1];
      unint64_t v31 = *(void *)&v24[v29 * 8];
      --v29;
      if (v30 != v31)
      {
        if (v30 <= v31)
        {
          --v9;
          goto LABEL_48;
        }
        break;
      }
    }
    if (v4 <= 0xFFFFFFBF)
    {
      uint64_t v32 = 0;
      int v33 = v46;
      BOOL v34 = &v46[v7];
      uint64_t v35 = v6 >> 6;
      do
      {
        unint64_t v36 = *v34++;
        unint64_t v37 = *v33 - v36;
        BOOL v38 = *v33 < v36;
        unint64_t v39 = *v33 + ~v36;
        if (v32)
        {
          uint64_t v32 = v39 >= *v33;
        }
        else
        {
          unint64_t v39 = v37;
          uint64_t v32 = v38;
        }
        *v33++ = v39;
        --v35;
      }
      while (v35);
    }
    --v9;
    v3[v9 >> 6] |= 1 << v9;
LABEL_48:
    llvm::APInt::tcShiftLeft((llvm::APInt *)v46, (unint64_t *)(v6 >> 6), 1u);
  }
  while (v9);
  do
  {
LABEL_51:
    if (!(v28 * 8))
    {
      uint64_t v42 = 2;
      goto LABEL_64;
    }
    unint64_t v40 = v46[v28 - 1];
    unint64_t v41 = *(void *)&v24[v28 * 8];
    --v28;
  }
  while (v40 == v41);
  if (v40 <= v41)
  {
    if (v4 > 0xFFFFFFBF) {
      return 0;
    }
    unint64_t v43 = v46[0];
    if (v46[0])
    {
      uint64_t v42 = 1;
    }
    else
    {
      while (v7 - 1 != v43)
      {
        if (v46[++v43]) {
          goto LABEL_63;
        }
      }
      unint64_t v43 = v6 >> 6;
LABEL_63:
      uint64_t v42 = v43 < v7;
    }
  }
  else
  {
    uint64_t v42 = 3;
  }
LABEL_64:
  if (v6 >= 0xC0) {
    MEMORY[0x263E50080](v46, 0x1000C8000313F17, v23);
  }
  return v42;
}

void llvm::detail::IEEEFloat::shiftSignificandLeft(llvm::detail::IEEEFloat *this, unsigned int a2)
{
  uint64_t v5 = *(void *)this;
  unsigned int v4 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  int v6 = *(_DWORD *)(v5 + 8);
  if ((v6 - 64) <= 0xFFFFFF7F) {
    unsigned int v4 = *(llvm::APInt **)v4;
  }
  llvm::APInt::tcShiftLeft(v4, (unint64_t *)((v6 + 64) >> 6), a2);
  *((_DWORD *)this + 4) -= a2;
}

uint64_t llvm::detail::IEEEFloat::compareAbsoluteValue(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  int v2 = *((_DWORD *)this + 4) - *((_DWORD *)a2 + 4);
  if (v2)
  {
    if (v2 < 1) {
      return v2 >= 0;
    }
    else {
      return 2;
    }
  }
  else
  {
    uint64_t v4 = *(void *)this;
    int v3 = (void *)((char *)this + 8);
    int v5 = *(_DWORD *)(v4 + 8);
    if ((v5 - 64) <= 0xFFFFFF7F) {
      int v3 = (void *)*v3;
    }
    unsigned int v6 = *(_DWORD *)(*(void *)a2 + 8) - 64;
    unsigned int v9 = (char *)*((void *)a2 + 1);
    unint64_t v7 = (char *)a2 + 8;
    uint64_t v8 = v9;
    if (v6 >= 0xFFFFFF80) {
      unint64_t v10 = v7;
    }
    else {
      unint64_t v10 = v8;
    }
    unsigned int v11 = (v5 + 64) >> 6;
    uint64_t v12 = v10 - 8;
    for (uint64_t i = 8 * v11; ; i -= 8)
    {
      uint64_t v14 = i;
      if (!i) {
        break;
      }
      unint64_t v15 = v3[(unint64_t)i / 8 - 1];
      unint64_t v16 = *(void *)&v12[i];
      if (v15 != v16)
      {
        if (v15 > v16) {
          return 2;
        }
        return v14 == 0;
      }
    }
    return v14 == 0;
  }
}

uint64_t llvm::detail::IEEEFloat::handleOverflow(llvm::detail::IEEEFloat *this, int a2)
{
  switch(a2)
  {
    case 1:
    case 4:
      goto LABEL_5;
    case 2:
      char v3 = *((unsigned char *)this + 20);
      if ((v3 & 8) != 0) {
        goto LABEL_10;
      }
      goto LABEL_5;
    case 3:
      char v3 = *((unsigned char *)this + 20);
      if ((v3 & 8) == 0) {
        goto LABEL_10;
      }
LABEL_5:
      unsigned int v4 = *((unsigned __int8 *)this + 20);
      if (*(_DWORD *)(*(void *)this + 16) == 1) {
        llvm::detail::IEEEFloat::makeNaN(this, 0, (v4 >> 3) & 1, 0);
      }
      else {
        *((unsigned char *)this + 20) = v4 & 0xF8;
      }
      uint64_t result = 20;
      break;
    default:
      char v3 = *((unsigned char *)this + 20);
LABEL_10:
      *((unsigned char *)this + 20) = v3 & 0xF8 | 2;
      uint64_t v6 = *(void *)this;
      *((_DWORD *)this + 4) = **(_DWORD **)this;
      unsigned int v7 = *(_DWORD *)(v6 + 8);
      uint64_t v8 = (llvm::detail **)((char *)this + 8);
      unsigned int v9 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      if (v7 - 64 <= 0xFFFFFF7F) {
        unsigned int v9 = *v8;
      }
      llvm::detail::tcSetLeastSignificantBits(v9, (unint64_t *)((v7 + 64) >> 6), v7);
      uint64_t v10 = *(void *)this;
      if (*(_DWORD *)(*(void *)this + 16) == 1 && *(_DWORD *)(v10 + 20) == 1)
      {
        if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F) {
          uint64_t v8 = (llvm::detail **)*v8;
        }
        *uint64_t v8 = (llvm::detail *)((unint64_t)*v8 & 0xFFFFFFFFFFFFFFFELL);
      }
      uint64_t result = 16;
      break;
  }
  return result;
}

void llvm::detail::tcSetLeastSignificantBits(llvm::detail *this, unint64_t *a2, unsigned int a3)
{
  unsigned int v3 = a3;
  unsigned int v4 = a2;
  unsigned int v6 = a3 - 65;
  if (a3 < 0x41)
  {
    unsigned int v7 = 0;
    if (!a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  memset(this, 255, 8 * (v6 >> 6) + 8);
  unsigned int v7 = (v6 >> 6) + 1;
  unsigned int v8 = v3 - (v6 & 0xFFFFFFC0);
  LOBYTE(v3) = v8 - 64;
  if (v8 != 64) {
LABEL_5:
  }
    *((void *)this + v7++) = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
LABEL_6:
  if (v7 < v4)
  {
    bzero((char *)this + 8 * v7, 8 * (~v7 + v4) + 8);
  }
}

uint64_t llvm::detail::IEEEFloat::roundAwayFromZero(uint64_t *a1, int a2, int a3, unsigned int a4)
{
  uint64_t v4 = 0;
  switch(a2)
  {
    case 1:
      if (a3 == 3)
      {
        uint64_t v4 = 1;
      }
      else if (a3 == 2 && (*((unsigned char *)a1 + 20) & 7) != 3)
      {
        uint64_t v7 = *a1;
        unsigned int v6 = a1 + 1;
        if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F) {
          unsigned int v6 = (void *)*v6;
        }
        uint64_t v4 = (v6[a4 >> 6] >> a4) & 1;
      }
      else
      {
        uint64_t v4 = 0;
      }
      break;
    case 2:
      BOOL v5 = (*((unsigned char *)a1 + 20) & 8) == 0;
      goto LABEL_8;
    case 3:
      uint64_t v4 = (*((unsigned __int8 *)a1 + 20) >> 3) & 1;
      break;
    case 4:
      BOOL v5 = (a3 & 0xFFFFFFFE) == 2;
LABEL_8:
      uint64_t v4 = v5;
      break;
    default:
      return v4;
  }
  return v4;
}

uint64_t llvm::detail::IEEEFloat::addOrSubtractSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2, int a3)
{
  unsigned __int8 v4 = *((unsigned char *)this + 20);
  unsigned __int8 v5 = *((unsigned char *)a2 + 20);
  uint64_t result = 0;
  switch(4 * (v4 & 7) + (v5 & 7))
  {
    case 1:
    case 9:
    case 0xD:
      llvm::detail::IEEEFloat::assign(this, (uint64_t *)a2);
      goto LABEL_3;
    case 2:
    case 3:
    case 0xB:
    case 0xF:
      return result;
    case 4:
    case 5:
    case 6:
    case 7:
LABEL_3:
      if (llvm::detail::IEEEFloat::isSignaling(this))
      {
        if (*(_DWORD *)(*(void *)this + 16) == 1) {
          goto LABEL_22;
        }
        int v9 = *(_DWORD *)(*(void *)this + 8);
        uint64_t v10 = (void *)((char *)this + 8);
        if ((v9 - 64) <= 0xFFFFFF7F) {
          uint64_t v10 = (void *)*v10;
        }
        uint64_t result = 1;
        v10[(v9 - 2) >> 6] |= 1 << (v9 - 2);
      }
      else
      {
        uint64_t result = llvm::detail::IEEEFloat::isSignaling(a2);
      }
      break;
    case 8:
    case 0xC:
      uint64_t result = 0;
      *((unsigned char *)this + 20) = v4 & 0xF8;
      if (a3 != (*((unsigned char *)a2 + 20) & 8) >> 3) {
        char v11 = 8;
      }
      else {
        char v11 = 0;
      }
      char v12 = v11 | v4 & 0xF0;
      goto LABEL_20;
    case 0xA:
      return 2;
    case 0xE:
      llvm::detail::IEEEFloat::assign(this, (uint64_t *)a2);
      uint64_t result = 0;
      if (a3 != (*((unsigned char *)a2 + 20) & 8) >> 3) {
        char v13 = 8;
      }
      else {
        char v13 = 0;
      }
      char v12 = v13 | *((unsigned char *)this + 20) & 0xF7;
LABEL_20:
      *((unsigned char *)this + 20) = v12;
      return result;
    default:
      if (((((v5 ^ v4) & 8) == 0) ^ a3))
      {
        uint64_t result = 0;
      }
      else
      {
        llvm::detail::IEEEFloat::makeNaN(this, 0, 0, 0);
LABEL_22:
        uint64_t result = 1;
      }
      break;
  }
  return result;
}

BOOL llvm::detail::IEEEFloat::isSignaling(llvm::detail::IEEEFloat *this)
{
  if ((*((unsigned char *)this + 20) & 7) != 1 || *(_DWORD *)(*(void *)this + 16) == 1) {
    return 0;
  }
  int v2 = *(_DWORD *)(*(void *)this + 8);
  unsigned int v3 = (void *)((char *)this + 8);
  if ((v2 - 64) <= 0xFFFFFF7F) {
    unsigned int v3 = (void *)*v3;
  }
  return ((v3[(v2 - 2) >> 6] >> (v2 - 2)) & 1) == 0;
}

BOOL llvm::detail::IEEEFloat::multiplySpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  char v3 = *((unsigned char *)this + 20);
  char v4 = *((unsigned char *)a2 + 20);
  BOOL result = 0;
  switch(4 * (v3 & 7) + (v4 & 7))
  {
    case 1:
    case 9:
    case 0xD:
      llvm::detail::IEEEFloat::assign(this, (uint64_t *)a2);
      char v3 = *((unsigned char *)this + 20) & 0xF7;
      *((unsigned char *)this + 20) = v3;
      char v4 = *((unsigned char *)a2 + 20);
      goto LABEL_4;
    case 3:
    case 0xC:
      llvm::detail::IEEEFloat::makeNaN(this, 0, 0, 0);
      goto LABEL_13;
    case 4:
    case 5:
    case 6:
    case 7:
LABEL_4:
      *((unsigned char *)this + 20) = v4 & 8 ^ v3;
      if (llvm::detail::IEEEFloat::isSignaling(this))
      {
        if (*(_DWORD *)(*(void *)this + 16) == 1)
        {
LABEL_13:
          BOOL result = 1;
        }
        else
        {
          int v8 = *(_DWORD *)(*(void *)this + 8);
          int v9 = (void *)((char *)this + 8);
          if ((v8 - 64) <= 0xFFFFFF7F) {
            int v9 = (void *)*v9;
          }
          BOOL result = 1;
          v9[(v8 - 2) >> 6] |= 1 << (v8 - 2);
        }
      }
      else
      {
        BOOL result = llvm::detail::IEEEFloat::isSignaling(a2);
      }
      break;
    case 0xA:
      return result;
    case 0xB:
    case 0xE:
    case 0xF:
      BOOL result = 0;
      char v7 = v3 & 0xF8 | 3;
      goto LABEL_11;
    default:
      BOOL result = 0;
      char v7 = v3 & 0xF8;
LABEL_11:
      *((unsigned char *)this + 20) = v7;
      break;
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::divideSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  unsigned int v3 = *((unsigned __int8 *)this + 20);
  char v4 = *((unsigned char *)a2 + 20);
  uint64_t result = 0;
  switch(4 * (v3 & 7) + (v4 & 7))
  {
    case 1u:
    case 9u:
    case 0xDu:
      llvm::detail::IEEEFloat::assign(this, (uint64_t *)a2);
      LOBYTE(v3) = *((unsigned char *)this + 20) & 0xF7;
      *((unsigned char *)this + 20) = v3;
      char v4 = *((unsigned char *)a2 + 20);
      goto LABEL_3;
    case 2u:
    case 3u:
    case 0xAu:
    case 0xCu:
    case 0xEu:
      return result;
    case 4u:
    case 5u:
    case 6u:
    case 7u:
LABEL_3:
      *((unsigned char *)this + 20) = v4 & 8 ^ v3;
      if (!llvm::detail::IEEEFloat::isSignaling(this)) {
        return llvm::detail::IEEEFloat::isSignaling(a2);
      }
      if (*(_DWORD *)(*(void *)this + 16) == 1) {
        return 1;
      }
      int v7 = *(_DWORD *)(*(void *)this + 8);
      int v8 = (void *)((char *)this + 8);
      if ((v7 - 64) <= 0xFFFFFF7F) {
        int v8 = (void *)*v8;
      }
      uint64_t result = 1;
      v8[(v7 - 2) >> 6] |= 1 << (v7 - 2);
      return result;
    case 8u:
      uint64_t result = 0;
      *((unsigned char *)this + 20) = v3 & 0xF8 | 3;
      return result;
    case 0xBu:
      if (*(_DWORD *)(*(void *)this + 16) == 1) {
        llvm::detail::IEEEFloat::makeNaN(this, 0, (v3 >> 3) & 1, 0);
      }
      else {
        *((unsigned char *)this + 20) = v3 & 0xF8;
      }
      return 2;
    default:
      llvm::detail::IEEEFloat::makeNaN(this, 0, 0, 0);
      return 1;
  }
}

uint64_t llvm::detail::IEEEFloat::addOrSubtract(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3, int a4)
{
  uint64_t result = llvm::detail::IEEEFloat::addOrSubtractSpecials(a1, a2, a4);
  if (result == 2)
  {
    int v9 = llvm::detail::IEEEFloat::addOrSubtractSignificand(a1, a2, a4);
    uint64_t result = llvm::detail::IEEEFloat::normalize(a1, a3, v9);
  }
  char v10 = *((unsigned char *)a1 + 20);
  if ((v10 & 7) == 3)
  {
    char v11 = *((unsigned char *)a2 + 20);
    if ((v11 & 7) != 3 || a4 != ((v11 ^ v10) & 8) >> 3)
    {
      char v10 = v10 & 0xF7 | (8 * (a3 == 3));
      *((unsigned char *)a1 + 20) = v10;
    }
    if (*(_DWORD *)(*(void *)a1 + 20) == 2) {
      *((unsigned char *)a1 + 20) = v10 & 0xF7;
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::multiply(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  *((unsigned char *)a1 + 20) ^= *((unsigned char *)a2 + 20) & 8;
  uint64_t result = llvm::detail::IEEEFloat::multiplySpecials(a1, a2);
  char v7 = *((unsigned char *)a1 + 20);
  if ((v7 & 7) == 3)
  {
    if (*(_DWORD *)(*(void *)a1 + 20) == 2) {
      *((unsigned char *)a1 + 20) = v7 & 0xF7;
    }
  }
  else if ((*((unsigned char *)a1 + 20) & 6) != 0)
  {
    int v8 = llvm::detail::IEEEFloat::multiplySignificand(a1, a2);
    LODWORD(result) = llvm::detail::IEEEFloat::normalize(a1, a3, v8);
    if (v8) {
      return result | 0x10;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::divide(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  *((unsigned char *)a1 + 20) ^= *((unsigned char *)a2 + 20) & 8;
  uint64_t result = llvm::detail::IEEEFloat::divideSpecials(a1, a2);
  char v7 = *((unsigned char *)a1 + 20);
  if ((v7 & 7) == 3)
  {
    if (*(_DWORD *)(*(void *)a1 + 20) == 2) {
      *((unsigned char *)a1 + 20) = v7 & 0xF7;
    }
  }
  else if ((*((unsigned char *)a1 + 20) & 6) != 0)
  {
    int v8 = llvm::detail::IEEEFloat::divideSignificand(a1, a2);
    LODWORD(result) = llvm::detail::IEEEFloat::normalize(a1, a3, v8);
    if (v8) {
      return result | 0x10;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::mod(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  uint64_t isSignaling = 0;
  switch(4 * (*((unsigned char *)this + 20) & 7) + (*((unsigned char *)a2 + 20) & 7))
  {
    case 1:
    case 9:
    case 0xD:
      llvm::detail::IEEEFloat::assign(this, (uint64_t *)a2);
      goto LABEL_4;
    case 4:
    case 5:
    case 6:
    case 7:
LABEL_4:
      if (llvm::detail::IEEEFloat::isSignaling(this))
      {
        if (*(_DWORD *)(*(void *)this + 16) == 1)
        {
LABEL_6:
          uint64_t isSignaling = 1;
        }
        else
        {
          int v5 = *(_DWORD *)(*(void *)this + 8);
          unsigned int v6 = (void *)((char *)this + 8);
          if ((v5 - 64) <= 0xFFFFFF7F) {
            unsigned int v6 = (void *)*v6;
          }
          uint64_t isSignaling = 1;
          v6[(v5 - 2) >> 6] |= 1 << (v5 - 2);
        }
      }
      else
      {
        uint64_t isSignaling = llvm::detail::IEEEFloat::isSignaling(a2);
      }
LABEL_11:
      char v7 = *((unsigned char *)this + 20);
      BOOL v8 = (v7 & 6) == 0 || (v7 & 7) == 3;
      if (v8 || ((*((unsigned char *)a2 + 20) & 6) != 0 ? (BOOL v9 = (*((unsigned char *)a2 + 20) & 7) == 3) : (BOOL v9 = 1), v9))
      {
        char v10 = *((unsigned char *)this + 20);
      }
      else
      {
        int v13 = llvm::detail::IEEEFloat::compareAbsoluteValue(this, a2);
        char v10 = v7;
        if (v13)
        {
          do
          {
            int v15 = llvm::detail::ilogb(this, v14);
            int v17 = v15 - llvm::detail::ilogb(a2, v16);
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v23, a2);
            llvm::detail::scalbn(&v23, v17, 1, &v25);
            if ((*(_DWORD *)(v23 + 8) - 64) <= 0xFFFFFF7F && v24) {
              MEMORY[0x263E50080](v24, 0x1000C8000313F17);
            }
            char v18 = v27;
            if ((v27 & 7) == 1
              || !llvm::detail::IEEEFloat::compareAbsoluteValue(this, (const llvm::detail::IEEEFloat *)&v25))
            {
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v19, a2);
              llvm::detail::scalbn(&v19, v17 - 1, 1, &v21);
              llvm::detail::IEEEFloat::operator=((uint64_t)&v25, (uint64_t)&v21);
              if ((*(_DWORD *)(v21 + 8) - 64) <= 0xFFFFFF7F && v22) {
                MEMORY[0x263E50080](v22, 0x1000C8000313F17);
              }
              if ((*(_DWORD *)(v19 + 8) - 64) <= 0xFFFFFF7F && v20) {
                MEMORY[0x263E50080](v20, 0x1000C8000313F17);
              }
              char v18 = v27;
            }
            char v27 = v18 & 0xF7 | *((unsigned char *)this + 20) & 8;
            uint64_t isSignaling = llvm::detail::IEEEFloat::addOrSubtract(this, (const llvm::detail::IEEEFloat *)&v25, 1, 1);
            if ((*(_DWORD *)(v25 + 8) - 64) <= 0xFFFFFF7F && v26) {
              MEMORY[0x263E50080](v26, 0x1000C8000313F17);
            }
            char v10 = *((unsigned char *)this + 20);
          }
          while ((v10 & 6) != 0
               && (v10 & 7) != 3
               && (*((unsigned char *)a2 + 20) & 6) != 0
               && (*((unsigned char *)a2 + 20) & 7) != 3
               && llvm::detail::IEEEFloat::compareAbsoluteValue(this, a2));
        }
      }
      if ((v10 & 7) == 3)
      {
        char v11 = v10 & 0xF7 | v7 & 8;
        *((unsigned char *)this + 20) = v11;
        if (*(_DWORD *)(*(void *)this + 20) == 2) {
          char v11 = v10 & 0xF7;
        }
        *((unsigned char *)this + 20) = v11;
      }
      return isSignaling;
    case 8:
    case 0xA:
    case 0xC:
    case 0xE:
      goto LABEL_11;
    default:
      llvm::detail::IEEEFloat::makeNaN(this, 0, 0, 0);
      goto LABEL_6;
  }
}

uint64_t llvm::detail::ilogb(llvm::detail *this, const llvm::detail::IEEEFloat *a2)
{
  int v2 = *((unsigned char *)this + 20) & 7;
  if ((*((unsigned char *)this + 20) & 7) == 0) {
    return 0x7FFFFFFFLL;
  }
  if (v2 == 1) {
    return 0x80000000;
  }
  if (v2 == 3) {
    return 2147483649;
  }
  if (!llvm::detail::IEEEFloat::isDenormal(this)) {
    return *((unsigned int *)this + 4);
  }
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v7, this);
  int v5 = *(_DWORD *)(*(void *)this + 8) - 1;
  v9 += v5;
  llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v7, 1, 0);
  uint64_t v3 = (v9 - v5);
  if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F && v8) {
    MEMORY[0x263E50080](v8, 0x1000C8000313F17);
  }
  return v3;
}

uint64_t llvm::detail::scalbn@<X0>(unsigned char *a1@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  int v6 = **(_DWORD **)a1 + *(_DWORD *)(*(void *)a1 + 8) + ~*(_DWORD *)(*(void *)a1 + 4);
  int v7 = -2 - v6;
  if (v6 + 1 < a2) {
    int v8 = v6 + 1;
  }
  else {
    int v8 = a2;
  }
  if (v7 > a2) {
    int v8 = v7;
  }
  *((_DWORD *)a1 + 4) += v8;
  llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)a1, a3, 0);
  if ((a1[20] & 7) == 1 && *(_DWORD *)(*(void *)a1 + 16) != 1)
  {
    int v9 = *(_DWORD *)(*(void *)a1 + 8);
    char v10 = a1 + 8;
    if ((v9 - 64) <= 0xFFFFFF7F) {
      char v10 = (void *)*v10;
    }
    v10[(v9 - 2) >> 6] |= 1 << (v9 - 2);
  }
  *a4 = &llvm::semBogus;
  return llvm::detail::IEEEFloat::operator=((uint64_t)a4, (uint64_t)a1);
}

uint64_t llvm::detail::IEEEFloat::fusedMultiplyAdd(llvm::detail::IEEEFloat *this, llvm::detail::IEEEFloat *a2, llvm::detail::IEEEFloat *a3, int a4)
{
  char v8 = *((unsigned char *)this + 20);
  *((unsigned char *)this + 20) = *((unsigned char *)a2 + 20) & 8 ^ v8;
  int v9 = v8 & 6;
  int v10 = v8 & 7;
  if (v9) {
    BOOL v11 = v10 == 3;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11
    || ((*((unsigned char *)a2 + 20) & 6) != 0 ? (BOOL v12 = (*((unsigned char *)a2 + 20) & 7) == 3) : (BOOL v12 = 1),
        v12 || (*((unsigned char *)a3 + 20) & 6) == 0))
  {
    if (llvm::detail::IEEEFloat::multiplySpecials(this, a2))
    {
      return 1;
    }
    else
    {
      return llvm::detail::IEEEFloat::addOrSubtract(this, a3, a4, 0);
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v17, a3);
    int v13 = llvm::detail::IEEEFloat::multiplySignificand((unint64_t *)this, (uint64_t)a2, (const llvm::detail::IEEEFloat *)&v17);
    if ((*(_DWORD *)(v17 + 8) - 64) <= 0xFFFFFF7F && v18) {
      MEMORY[0x263E50080](v18, 0x1000C8000313F17);
    }
    LODWORD(result) = llvm::detail::IEEEFloat::normalize(this, a4, v13);
    if (v13) {
      uint64_t result = result | 0x10;
    }
    else {
      uint64_t result = result;
    }
    int v15 = *((unsigned __int8 *)this + 20);
    if ((v15 & 7) == 3 && (result & 8) == 0 && ((*((unsigned __int8 *)a3 + 20) ^ v15) & 8) != 0)
    {
      char v16 = v15 & 0xF7;
      *((unsigned char *)this + 20) = v16 | (8 * (a4 == 3));
      if (*(_DWORD *)(*(void *)this + 20) != 2) {
        v16 |= 8 * (a4 == 3);
      }
      *((unsigned char *)this + 20) = v16;
    }
  }
  return result;
}

llvm::APInt **llvm::APInt::operator<<=(llvm::APInt **this, unsigned int a2)
{
  uint64_t v3 = *((unsigned int *)this + 2);
  if (v3 > 0x40)
  {
    llvm::APInt::tcShiftLeft(*this, (unint64_t *)((unint64_t)(v3 + 63) >> 6), a2);
    llvm::APInt::clearUnusedBits((uint64_t)this);
    return this;
  }
  else
  {
    if (v3 == a2) {
      char v4 = 0;
    }
    else {
      char v4 = (llvm::APInt *)((void)*this << a2);
    }
    *this = v4;
    return (llvm::APInt **)llvm::APInt::clearUnusedBits((uint64_t)this);
  }
}

uint64_t llvm::detail::IEEEFloat::convertFromAPInt(llvm::APInt *this, uint64_t a2, int a3, int a4)
{
  unsigned int v17 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = v17;
  if (v17 > 0x40) {
    operator new[]();
  }
  int v7 = *(llvm **)a2;
  char v16 = *(llvm **)a2;
  char v8 = *((unsigned char *)this + 20);
  *((unsigned char *)this + 20) = v8 & 0xF7;
  if (!a3) {
    goto LABEL_11;
  }
  int v9 = (void *)((char *)v7 + 8 * ((v6 - 1) >> 6));
  if (v6 < 0x41) {
    int v9 = &v16;
  }
  if ((*v9 >> (v6 - 1)))
  {
    *((unsigned char *)this + 20) = v8 | 8;
    unsigned int v15 = v6;
    if (v6 >= 0x41) {
      operator new[]();
    }
    uint64_t v14 = v7;
    llvm::APInt::flipAllBits((uint64_t)&v14);
    llvm::APInt::operator++((uint64_t)&v14);
    unsigned int v10 = v15;
    unsigned int v15 = 0;
    char v16 = v14;
    unsigned int v17 = v10;
    int v7 = v14;
  }
  else
  {
LABEL_11:
    unsigned int v10 = v6;
  }
  if (v10 >= 0x41) {
    BOOL v11 = v7;
  }
  else {
    BOOL v11 = (llvm *)&v16;
  }
  uint64_t v12 = llvm::detail::IEEEFloat::convertFromUnsignedParts(this, v11, (unint64_t *)((unint64_t)(v6 + 63) >> 6), a4);
  if (v10 >= 0x41 && v7) {
    MEMORY[0x263E50080](v7, 0x1000C8000313F17);
  }
  return v12;
}

uint64_t llvm::detail::IEEEFloat::convertToSignExtendedInteger(uint64_t a1, llvm::APInt *this, uint64_t a3, unsigned int a4, int a5, int a6, unsigned char *a7)
{
  *a7 = 0;
  unsigned int v7 = *(unsigned char *)(a1 + 20) & 7;
  if (v7 < 2) {
    return 1;
  }
  unsigned int v13 = a4 + 63;
  unsigned int v14 = (a4 + 63) >> 6;
  if (v7 == 3)
  {
    *(void *)this = 0;
    if (v13 >= 0x80) {
      bzero((char *)this + 8, 8 * (v14 - 2) + 8);
    }
    LOBYTE(v15) = ((*(unsigned __int8 *)(a1 + 20) >> 3) & 1) == 0;
    goto LABEL_7;
  }
  unsigned int v17 = (llvm *)(a1 + 8);
  uint64_t v18 = (const unint64_t *)*(unsigned int *)(*(void *)a1 + 8);
  if ((v18 - 64) <= 0xFFFFFF7F) {
    unsigned int v17 = *(llvm **)v17;
  }
  unsigned int v19 = *(_DWORD *)(a1 + 16);
  if ((v19 & 0x80000000) != 0)
  {
    *(void *)this = 0;
    if (v13 >= 0x80) {
      bzero((char *)this + 8, 8 * (v14 - 2) + 8);
    }
    unint64_t v40 = (unint64_t *)(v13 >> 6);
    unsigned int v21 = v18 + ~v19;
    if (!v21) {
      goto LABEL_28;
    }
  }
  else
  {
    if (v19 >= a4) {
      return 1;
    }
    unint64_t v40 = (unint64_t *)(v13 >> 6);
    uint64_t v20 = (const unint64_t *)(v19 + 1);
    unsigned int v21 = v18 - v20;
    if (v18 <= v20)
    {
      uint64_t v23 = (unint64_t *)(v13 >> 6);
      llvm::APInt::tcExtract(this, v40, (uint64_t)v17, v18, 0);
      llvm::APInt::tcShiftLeft(this, v40, v20 - *(_DWORD *)(*(void *)a1 + 8));
      int v27 = 1;
      goto LABEL_32;
    }
    llvm::APInt::tcExtract(this, v40, (uint64_t)v17, v20, v18 - v20);
    if (!v21) {
      goto LABEL_28;
    }
  }
  int v22 = llvm::lostFractionThroughTruncation(v17, (const unint64_t *)((*(_DWORD *)(*(void *)a1 + 8) + 64) >> 6), v21);
  if (!v22)
  {
LABEL_28:
    int v27 = 1;
LABEL_31:
    uint64_t v23 = v40;
    goto LABEL_32;
  }
  if (!llvm::detail::IEEEFloat::roundAwayFromZero((uint64_t *)a1, a6, v22, v21))
  {
    int v27 = 0;
    goto LABEL_31;
  }
  uint64_t v23 = v40;
  if (v13 < 0x40) {
    return 1;
  }
  BOOL v34 = __CFADD__((*(void *)this)++, 1);
  if (v34)
  {
    uint64_t v24 = 0;
    uint64_t v25 = (char *)this + 8;
    while ((unint64_t *)((char *)v40 - 1) != v24)
    {
      uint64_t v26 = *(void *)&v25[8 * (void)v24];
      *(void *)&v25[8 * (void)v24] = v26 + 1;
      uint64_t v24 = (unint64_t *)((char *)v24 + 1);
      if (v26 != -1)
      {
        if (v24 >= v40) {
          return 1;
        }
        goto LABEL_27;
      }
    }
    return 1;
  }
LABEL_27:
  int v27 = 0;
LABEL_32:
  int v28 = 64 - (v23 << 6);
  unsigned int v29 = v23 - 1;
  while (1)
  {
    unint64_t v30 = *((void *)this + v29);
    if (v30) {
      break;
    }
    v28 += 64;
    if (--v29 == -1)
    {
      int v31 = -1;
      goto LABEL_37;
    }
  }
  int v31 = (__clz(v30) - v28) ^ 0x3F;
LABEL_37:
  unsigned int v32 = v31 + 1;
  if ((*(unsigned char *)(a1 + 20) & 8) == 0)
  {
    unsigned int v33 = (a5 ^ 1) + a4;
    BOOL v34 = v32 >= v33;
    if (v32 < v33) {
      int v15 = v27;
    }
    else {
      int v15 = 0;
    }
    if (v34) {
      uint64_t result = 1;
    }
    else {
      uint64_t result = 16;
    }
    if (v15 == 1) {
      goto LABEL_7;
    }
    return result;
  }
  if ((a5 & 1) == 0)
  {
    if (v31 == -1) {
      goto LABEL_59;
    }
    return 1;
  }
  if (v32 == a4)
  {
    if (v13 < 0x40)
    {
LABEL_52:
      int v39 = -1;
    }
    else
    {
      uint64_t v35 = 0;
      unint64_t v36 = this;
      while (1)
      {
        unint64_t v38 = *(void *)v36;
        unint64_t v36 = (llvm::APInt *)((char *)v36 + 8);
        unint64_t v37 = v38;
        if (v38) {
          break;
        }
        v35 -= 64;
        if (!(((unint64_t)v23 << 6) + v35)) {
          goto LABEL_52;
        }
      }
      int v39 = __clz(__rbit64(v37)) - v35;
    }
    if (v39 != v31) {
      return 1;
    }
    goto LABEL_59;
  }
  if (v32 > a4) {
    return 1;
  }
LABEL_59:
  llvm::APInt::tcNegate(this, v23);
  if (v27)
  {
    LOBYTE(v15) = 1;
LABEL_7:
    uint64_t result = 0;
    *a7 = v15;
    return result;
  }
  return 16;
}

uint64_t llvm::lostFractionThroughTruncation(llvm *this, const unint64_t *a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = 0;
  char v4 = this;
  while (1)
  {
    unint64_t v6 = *(void *)v4;
    char v4 = (llvm *)((char *)v4 + 8);
    unint64_t v5 = v6;
    if (v6) {
      break;
    }
    v3 -= 64;
    if (!(((unint64_t)a2 << 6) + v3)) {
      return 0;
    }
  }
  int v7 = __clz(__rbit64(v5));
  if (v7 - (int)v3 >= a3) {
    return 0;
  }
  if (v7 - a3 + 1 == v3) {
    return 2;
  }
  if (a3 <= a2 << 6 && ((*((void *)this + ((a3 - 1) >> 6)) >> (a3 - 1)) & 1) != 0) {
    return 3;
  }
  return 1;
}

uint64_t llvm::detail::IEEEFloat::convertToInteger(uint64_t a1, llvm::APInt *a2, uint64_t a3, unsigned int a4, int a5, int a6, unsigned char *a7)
{
  uint64_t v11 = llvm::detail::IEEEFloat::convertToSignExtendedInteger(a1, a2, a3, a4, a5, a6, a7);
  if (v11 == 1)
  {
    if ((*(unsigned char *)(a1 + 20) & 8) != 0) {
      unsigned int v12 = a5;
    }
    else {
      unsigned int v12 = a4 - a5;
    }
    if ((*(unsigned char *)(a1 + 20) & 7) == 1) {
      unsigned int v13 = 0;
    }
    else {
      unsigned int v13 = v12;
    }
    llvm::detail::tcSetLeastSignificantBits(a2, (unint64_t *)((a4 + 63) >> 6), v13);
    if ((*(unsigned char *)(a1 + 20) & 8) != 0 && a5) {
      llvm::APInt::tcShiftLeft(a2, (unint64_t *)((a4 + 63) >> 6), a4 - 1);
    }
  }
  return v11;
}

uint64_t llvm::detail::IEEEFloat::convertFromUnsignedParts(llvm::APInt *this, llvm *a2, unint64_t *a3, int a4)
{
  *((unsigned char *)this + 20) = *((unsigned char *)this + 20) & 0xF8 | 2;
  int v7 = 64 - (a3 << 6);
  unsigned int v8 = a3 - 1;
  while (1)
  {
    unint64_t v9 = *((void *)a2 + v8);
    if (v9) {
      break;
    }
    v7 += 64;
    if (--v8 == -1)
    {
      int v10 = -1;
      goto LABEL_6;
    }
  }
  int v10 = (__clz(v9) - v7) ^ 0x3F;
LABEL_6:
  uint64_t v11 = (const unint64_t *)(v10 + 1);
  unsigned int v12 = (llvm::APInt *)((char *)this + 8);
  unsigned int v13 = (const unint64_t *)*(unsigned int *)(*(void *)this + 8);
  if ((v13 - 64) <= 0xFFFFFF7F) {
    unsigned int v12 = *(llvm::APInt **)v12;
  }
  unsigned int v14 = v11 - v13;
  if (v11 >= v13)
  {
    *((_DWORD *)this + 4) = v10;
    int v15 = llvm::lostFractionThroughTruncation(a2, a3, (int)v11 - (int)v13);
    llvm::APInt::tcExtract(v12, (unint64_t *)((v13 + 64) >> 6), (uint64_t)a2, v13, v14);
  }
  else
  {
    *((_DWORD *)this + 4) = v13 - 1;
    llvm::APInt::tcExtract(v12, (unint64_t *)((v13 + 64) >> 6), (uint64_t)a2, v11, 0);
    int v15 = 0;
  }
  return llvm::detail::IEEEFloat::normalize(this, a4, v15);
}

uint64_t llvm::skipLeadingZeroesAndAnyDot(uint64_t this, const char *a2, const char *a3, const char **a4)
{
  *a4 = a3;
  if (a2 != a3)
  {
    uint64_t v4 = a3 - a2;
    while (1)
    {
      int v5 = *(unsigned __int8 *)a2;
      if (v5 != 48) {
        break;
      }
      if (++a2 == a3) {
        goto LABEL_5;
      }
    }
    if (v5 == 46)
    {
      *a4 = a2;
      if (v4 == 1)
      {
        unsigned int v8 = "Significand has no digits";
        __int16 v9 = 259;
        getErrorErrorCat();
        operator new();
      }
      unint64_t v6 = a2 + 1;
      while (v6 != a3)
      {
        int v7 = *(unsigned __int8 *)v6++;
        if (v7 != 48)
        {
          a2 = v6 - 1;
          goto LABEL_13;
        }
      }
LABEL_5:
      a2 = a3;
    }
  }
LABEL_13:
  *(unsigned char *)(this + 8) &= ~1u;
  *(void *)this = a2;
  return this;
}

uint64_t llvm::detail::IEEEFloat::roundSignificandWithExponent(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  int v5 = v4;
  v63[0] = v6;
  uint64_t v62 = v7;
  unsigned int v8 = (unsigned __int8 *)v2;
  uint64_t v76 = *MEMORY[0x263EF8340];
  *(void *)&v63[1] = 0xFFFF800100007FFFLL;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  BOOL v10 = v4 == 1 || v4 == 4;
  int v60 = v3;
  BOOL v61 = v10;
  unsigned int v11 = (*(_DWORD *)(*(void *)v2 + 8) + 74) >> 6;
  if (v3 >= 0) {
    unsigned int v12 = v3;
  }
  else {
    unsigned int v12 = -v3;
  }
  uint64_t v73 = 390625;
  memset(v72, 0, sizeof(v72));
  long long v71 = 0u;
  long long v70 = 0u;
  uint64_t v13 = 1;
  int v69 = 1;
  v66[0] = llvm::powerOf5(unsigned long long *,unsigned int)::firstEightPowers[v12 & 7];
  if (v12 < 8) {
    goto LABEL_30;
  }
  unsigned int v59 = v4;
  unsigned int v14 = v12 >> 3;
  int v15 = v66;
  char v16 = (llvm::APInt *)&v67;
  unsigned int v17 = (llvm::APInt *)&v73;
  uint64_t v18 = 1;
  unsigned int v19 = -1;
  uint64_t v20 = &v69;
  do
  {
    unint64_t v21 = *v20;
    if (v21)
    {
      if ((v14 & 1) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v23 = (const unint64_t *)*(&v69 + v19);
      llvm::APInt::tcFullMultiply(v17, (unint64_t *)v17 - (void)v23, (const unint64_t **)v17 - (void)v23, v23, v23);
      unsigned int v24 = 2 * v23 - 1;
      if (*((void *)v17 + v24)) {
        unint64_t v21 = (2 * v23);
      }
      else {
        unint64_t v21 = v24;
      }
      *uint64_t v20 = v21;
      if ((v14 & 1) == 0)
      {
LABEL_14:
        int v22 = v15;
        goto LABEL_23;
      }
    }
    llvm::APInt::tcFullMultiply(v16, v15, (const unint64_t **)v17, (const unint64_t *)v18, (const unint64_t *)v21);
    unsigned int v25 = v21 + v18 - 1;
    if (*((void *)v16 + v25)) {
      uint64_t v18 = (v21 + v18);
    }
    else {
      uint64_t v18 = v25;
    }
    int v22 = (unint64_t *)v16;
    char v16 = (llvm::APInt *)v15;
    int v15 = v22;
LABEL_23:
    unsigned int v17 = (llvm::APInt *)((char *)v17 + 8 * v21);
    ++v19;
    ++v20;
    BOOL v26 = v14 >= 2;
    v14 >>= 1;
  }
  while (v26);
  if (v22 == v66)
  {
    int v5 = v59;
    uint64_t v13 = v18;
  }
  else
  {
    int v5 = v59;
    uint64_t v13 = v18;
    if (v18)
    {
      uint64_t v27 = v18;
      int v28 = v66;
      do
      {
        unint64_t v29 = *v22++;
        *v28++ = v29;
        --v27;
      }
      while (v27);
    }
  }
  do
  {
LABEL_30:
    LODWORD(v64) = (v11 << 6) - 1;
    unsigned int v30 = v64 - *(_DWORD *)(*(void *)v8 + 8);
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v73, (uint64_t)&v63[1]);
    llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)&v73, (v8[20] >> 3) & 1);
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v67, (uint64_t)&v63[1]);
    int v31 = llvm::detail::IEEEFloat::convertFromUnsignedParts((llvm::APInt *)&v73, v62, (unint64_t *)v63[0], 1);
    uint64_t v32 = v13;
    int v33 = llvm::detail::IEEEFloat::convertFromUnsignedParts((llvm::APInt *)&v67, (llvm *)v66, (unint64_t *)v13, 1);
    v75 += v60;
    if (v60 < 0)
    {
      int v34 = llvm::detail::IEEEFloat::divideSignificand((llvm::detail::IEEEFloat *)&v73, (const llvm::detail::IEEEFloat *)&v67);
      int v37 = *(_DWORD *)(*(void *)v8 + 4);
      unsigned int v36 = v30;
      int v38 = v37 - v75;
      if (v37 > v75)
      {
        unsigned int v36 = v38 + v30;
        if (v38 + v30 >= v64) {
          unsigned int v30 = v64;
        }
        else {
          v30 += v38;
        }
      }
      int v35 = 2 * ((v33 | v34) != 0);
    }
    else
    {
      int v34 = llvm::detail::IEEEFloat::multiplySignificand((llvm::detail::IEEEFloat *)&v73, (const llvm::detail::IEEEFloat *)&v67);
      int v35 = v33 != 0;
      unsigned int v36 = v30;
    }
    BOOL v39 = v34 != 0;
    if (v31) {
      ++v35;
    }
    unsigned int v40 = 2 * v39;
    unsigned int v41 = v39 | (2 * v35);
    if (v35) {
      unint64_t v42 = v41;
    }
    else {
      unint64_t v42 = v40;
    }
    if ((*(_DWORD *)(v73 + 8) - 64) >= 0xFFFFFF80) {
      unint64_t v43 = (uint64_t *)&v74;
    }
    else {
      unint64_t v43 = v74;
    }
    unsigned int v44 = (v30 - 1) >> 6;
    unint64_t v45 = v43[v44] & (0xFFFFFFFFFFFFFFFFLL >> ((v30 - 1) & 0x3F ^ 0x3F));
    uint64_t v46 = 1 << (v30 - 1);
    if (!v61) {
      uint64_t v46 = 0;
    }
    if (v30 - 1 > 0x3F)
    {
      if (v45 == v46)
      {
        unsigned int v48 = v44 - 1;
        while (v48)
        {
          if (v43[v48--]) {
            goto LABEL_60;
          }
        }
        uint64_t v47 = *v43;
      }
      else if (v45 == v46 - 1)
      {
        unsigned int v50 = v44 - 1;
        while (v50)
        {
          uint64_t v51 = v43[v50--];
          if (v51 != -1) {
            goto LABEL_60;
          }
        }
        uint64_t v47 = -*v43;
      }
      else
      {
LABEL_60:
        uint64_t v47 = -1;
      }
    }
    else
    {
      uint64_t v47 = v45 - v46;
      if ((uint64_t)(v45 - v46) < 0) {
        uint64_t v47 = v46 - v45;
      }
    }
    unint64_t v52 = 2 * v47;
    if (2 * v47 >= v42)
    {
      int v53 = *(_DWORD *)(*(void *)v8 + 8);
      unint64_t v54 = (llvm::APInt *)(v8 + 8);
      if ((v53 - 64) <= 0xFFFFFF7F) {
        unint64_t v54 = (llvm::APInt *)*((void *)v8 + 1);
      }
      llvm::APInt::tcExtract(v54, (unint64_t *)((v53 + 64) >> 6), (uint64_t)v43, (const unint64_t *)(v64 - v30), v30);
      *((_DWORD *)v8 + 4) = v75 + v30 + *(_DWORD *)(*(void *)v8 + 8) - v64;
      int v55 = *(_DWORD *)(v73 + 8);
      if ((v55 - 64) >= 0xFFFFFF80) {
        uint64_t v56 = (llvm *)&v74;
      }
      else {
        uint64_t v56 = (llvm *)v74;
      }
      int v57 = llvm::lostFractionThroughTruncation(v56, (const unint64_t *)((v55 + 64) >> 6), v36);
      unsigned int v59 = llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)v8, v5, v57);
    }
    if ((*(_DWORD *)(v67 + 8) - 64) <= 0xFFFFFF7F && v68) {
      MEMORY[0x263E50080](v68, 0x1000C8000313F17);
    }
    if ((*(_DWORD *)(v73 + 8) - 64) <= 0xFFFFFF7F && v74) {
      MEMORY[0x263E50080](v74, 0x1000C8000313F17);
    }
    v11 *= 2;
    BOOL v26 = v52 >= v42;
    uint64_t v13 = v32;
  }
  while (!v26);
  return v59;
}

void llvm::detail::IEEEFloat::makeInf(llvm::detail::IEEEFloat *this, int a2)
{
  uint64_t v2 = *(_DWORD **)this;
  if (*(_DWORD *)(*(void *)this + 16) == 1)
  {
    llvm::detail::IEEEFloat::makeNaN(this, 0, a2, 0);
  }
  else
  {
    if (a2) {
      char v3 = 8;
    }
    else {
      char v3 = 0;
    }
    *((unsigned char *)this + 20) = *((unsigned char *)this + 20) & 0xF0 | v3;
    *((_DWORD *)this + 4) = *v2 + 1;
    int v4 = v2[2];
    if ((v4 - 64) >= 0xFFFFFF80)
    {
      *((void *)this + 1) = 0;
    }
    else
    {
      int v5 = (void *)*((void *)this + 1);
      void *v5 = 0;
      bzero(v5 + 1, 8 * (((v4 + 64) >> 6) - 2) + 8);
    }
  }
}

void llvm::detail::IEEEFloat::convertFromString(llvm::detail::IEEEFloat *this@<X0>, char *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    unsigned int v12 = "Invalid string length";
    goto LABEL_33;
  }
  unint64_t v7 = a3;
  unsigned int v8 = a2;
  if (a3 < 3) {
    goto LABEL_3;
  }
  if (a3 == 8)
  {
    if (*(void *)a2 == 0x5954494E49464E49)
    {
LABEL_50:
      int v25 = 0;
      goto LABEL_51;
    }
LABEL_35:
    int v14 = *a2;
    if (v14 != 45)
    {
      int v15 = 0;
      unsigned int v17 = a2;
      unint64_t v16 = a3;
      goto LABEL_121;
    }
    unsigned int v17 = a2 + 1;
    if (a3 == 9)
    {
      if (*(void *)v17 != 0x5954494E49464E49)
      {
LABEL_120:
        unint64_t v16 = a3 - 1;
        int v14 = *v17;
        int v15 = 1;
        goto LABEL_121;
      }
    }
    else
    {
      if (a3 != 4) {
        goto LABEL_120;
      }
      if ((*(_WORD *)v17 != 28265 || a2[3] != 102) && (*(_WORD *)v17 != 28233 || a2[3] != 102)) {
        goto LABEL_120;
      }
    }
    int v25 = 1;
LABEL_51:
    llvm::detail::IEEEFloat::makeInf(this, v25);
    goto LABEL_52;
  }
  if (a3 == 4)
  {
    if (*(_DWORD *)a2 == 1718503723) {
      goto LABEL_50;
    }
    goto LABEL_35;
  }
  if (a3 != 3) {
    goto LABEL_35;
  }
  if (*(_WORD *)a2 == 28265 && a2[2] == 102) {
    goto LABEL_50;
  }
  int v14 = *a2;
  if (v14 == 45) {
    goto LABEL_3;
  }
  int v15 = 0;
  unint64_t v16 = 3;
  unsigned int v17 = a2;
LABEL_121:
  if ((v14 | 0x20) == 0x73)
  {
    if (v16 < 4) {
      goto LABEL_3;
    }
    ++v17;
    --v16;
    int v60 = 1;
  }
  else
  {
    int v60 = 0;
  }
  BOOL v61 = *(_WORD *)v17 == 24942 && v17[2] == 110;
  if (v61 || (*(_WORD *)v17 == 24910 ? (BOOL v62 = v17[2] == 78) : (BOOL v62 = 0), v62))
  {
    uint64_t v63 = 3;
    if (v16 < 3) {
      uint64_t v63 = v16;
    }
    uint64_t v64 = &v17[v63];
    unint64_t v65 = v16 - v63;
    uint64_t v86 = &v17[v63];
    unint64_t v87 = v16 - v63;
    if (v16 == v63)
    {
      llvm::detail::IEEEFloat::makeNaN(this, v60, v15, 0);
    }
    else
    {
      int v66 = *v64;
      if (v66 == 40)
      {
        if (v65 < 3) {
          goto LABEL_3;
        }
        unint64_t v67 = v65 - 1;
        if (v64[v65 - 1] != 41) {
          goto LABEL_3;
        }
        if (v67 >= v65) {
          unint64_t v67 = v16 - v63;
        }
        unint64_t v65 = v67 - 1;
        uint64_t v86 = v64 + 1;
        unint64_t v87 = v67 - 1;
        int v66 = *++v64;
      }
      if (v66 == 48)
      {
        if (v65 >= 2 && __tolower(v64[1]) == 120)
        {
          uint64_t v86 = v64 + 2;
          unint64_t v87 = v65 - 2;
          unsigned int v68 = 16;
        }
        else
        {
          unsigned int v68 = 8;
        }
      }
      else
      {
        unsigned int v68 = 10;
      }
      unsigned int v90 = 1;
      uint64_t v89 = 0;
      if (llvm::StringRef::getAsInteger((llvm::StringRef *)&v86, v68, (llvm::APInt *)&v89))
      {
        if (v90 >= 0x41 && v89) {
          MEMORY[0x263E50080](v89, 0x1000C8000313F17);
        }
        goto LABEL_3;
      }
      llvm::detail::IEEEFloat::makeNaN(this, v60, v15, (const llvm::APInt *)&v89);
      if (v90 >= 0x41 && v89) {
        MEMORY[0x263E50080](v89, 0x1000C8000313F17);
      }
    }
LABEL_52:
    *(unsigned char *)(a5 + 8) &= ~1u;
    *(_DWORD *)a5 = 0;
    return;
  }
LABEL_3:
  char v10 = *((unsigned char *)this + 20) & 0xF7 | (8 * (*v8 == 45));
  *((unsigned char *)this + 20) = v10;
  int v11 = *v8;
  if (v11 == 45 || v11 == 43)
  {
    if (!--v7)
    {
      unsigned int v12 = "String has no digits";
      goto LABEL_33;
    }
    ++v8;
  }
  if (v7 < 2 || *v8 != 48 || (v8[1] | 0x20) != 0x78)
  {
    uint64_t v18 = &v8[v7];
    unint64_t v85 = &v8[v7];
    llvm::skipLeadingZeroesAndAnyDot((uint64_t)&v89, v8, &v8[v7], (const char **)&v85);
    unsigned int v19 = v89;
    if (v90)
    {
      *(unsigned char *)(a5 + 8) |= 1u;
      *(void *)a5 = v19;
      return;
    }
    uint64_t v20 = v85;
    if (v89 == v18) {
      goto LABEL_59;
    }
    unint64_t v21 = v89;
    while (1)
    {
      int v22 = *v21;
      if (v22 == 46)
      {
        if (v20 != v18)
        {
          BOOL v26 = "String contains multiple dots";
          goto LABEL_164;
        }
        unint64_t v85 = v21;
        if (v21 + 1 == v18)
        {
          int v27 = 0;
          int v28 = v18;
          goto LABEL_88;
        }
        int v22 = v21[1];
        uint64_t v20 = v21++;
      }
      if (((char)v22 - 58) < 0xFFFFFFF6) {
        break;
      }
      if (++v21 == v18) {
        goto LABEL_59;
      }
    }
    if (v21 == v18)
    {
LABEL_59:
      int v27 = 0;
      int v28 = v18;
    }
    else
    {
      if ((v22 | 0x20) != 0x65)
      {
        BOOL v26 = "Invalid character in significand";
        goto LABEL_164;
      }
      if (v21 == v8 || v20 != v18 && v21 - v8 == 1)
      {
        BOOL v26 = "Significand has no digits";
        goto LABEL_164;
      }
      long long v71 = v21 + 1;
      if (v21 + 1 == v18 || ((int v72 = *v71, v72 == 45) || v72 == 43) && v21 + 2 == v18)
      {
        int v27 = 0;
      }
      else
      {
        if (v72 == 45 || (char v73 = *v71, v72 == 43))
        {
          long long v71 = v21 + 2;
          if (v21 + 2 != v18)
          {
            char v73 = *v71;
            goto LABEL_174;
          }
          BOOL v26 = "Exponent has no digits";
LABEL_164:
          uint64_t v86 = v26;
          __int16 v88 = 259;
          getErrorErrorCat();
          operator new();
        }
LABEL_174:
        unsigned int v74 = v73 - 48;
        if (v74 > 9)
        {
LABEL_175:
          BOOL v26 = "Invalid character in exponent";
          goto LABEL_164;
        }
        int v75 = v71 + 1;
        do
        {
          if (v75 == v18) {
            goto LABEL_195;
          }
          unsigned int v76 = *v75 - 48;
          if (v76 >= 0xA) {
            goto LABEL_175;
          }
          unsigned int v74 = v76 + 10 * v74;
          ++v75;
        }
        while (v74 >> 6 < 0x177);
        unsigned int v74 = 24000;
LABEL_195:
        if (v72 == 45) {
          int v27 = -v74;
        }
        else {
          int v27 = v74;
        }
      }
      if (v20 == v18)
      {
        unint64_t v85 = v21;
        int v28 = v21;
LABEL_88:
        uint64_t v20 = v21;
      }
      else
      {
        int v28 = v21;
      }
    }
    if (v28 == v89)
    {
      int v33 = 0;
    }
    else
    {
      if (v28 == v8)
      {
LABEL_67:
        uint64_t v32 = v8;
      }
      else
      {
        while (1)
        {
          unint64_t v29 = v28 - 1;
          do
          {
            if (v29 == v8) {
              goto LABEL_67;
            }
            int v31 = *v29--;
            int v30 = v31;
          }
          while (v31 == 48);
          if (v30 != 46) {
            break;
          }
          int v28 = v29 + 1;
        }
        uint64_t v32 = v29 + 1;
      }
      int v39 = v20 - v32;
      BOOL v40 = v20 > v89;
      BOOL v41 = v20 >= v32;
      BOOL v42 = v20 > v32;
      if (v41) {
        BOOL v40 = 0;
      }
      int v33 = v27 + v39 - v42 + v32 - v89 - v40;
    }
    if (v89 == v18 || (*v89 - 58) <= 0xFFFFFFF5)
    {
      char v43 = *((unsigned char *)this + 20) & 0xF8 | 3;
      *((unsigned char *)this + 20) = v43;
      int v44 = 0;
      if (*(_DWORD *)(*(void *)this + 20) == 2) {
        *((unsigned char *)this + 20) = v43 & 0xF3;
      }
      goto LABEL_162;
    }
    if (v33 < 51085)
    {
      uint64_t v46 = *(_DWORD **)this;
      if (v33 < -51082 || 28738 * v33 + 28738 <= 8651 * (v46[1] - v46[2]))
      {
        *((unsigned char *)this + 20) = *((unsigned char *)this + 20) & 0xF8 | 2;
        int v69 = v46[2];
        if ((v69 - 64) >= 0xFFFFFF80)
        {
          *((void *)this + 1) = 0;
        }
        else
        {
          long long v70 = (void *)*((void *)this + 1);
          void *v70 = 0;
          bzero(v70 + 1, 8 * (((v69 + 64) >> 6) - 2) + 8);
        }
        int v45 = llvm::detail::IEEEFloat::normalize(this, a4, 1);
        goto LABEL_161;
      }
      if (42039 * v33 - 42039 < 12655 * *v46) {
        operator new[]();
      }
    }
    int v45 = llvm::detail::IEEEFloat::handleOverflow(this, a4);
LABEL_161:
    int v44 = v45;
LABEL_162:
    *(unsigned char *)(a5 + 8) &= ~1u;
    *(_DWORD *)a5 = v44;
    return;
  }
  if (v7 == 2)
  {
    unsigned int v12 = "Invalid string";
    goto LABEL_33;
  }
  int v34 = v8 + 2;
  *((unsigned char *)this + 20) = v10 & 0xF8 | 2;
  int v35 = *(_DWORD *)(*(void *)this + 8);
  if ((v35 - 64) >= 0xFFFFFF80)
  {
    int v38 = (char *)this + 8;
    *((_DWORD *)this + 4) = 0;
    int v37 = (int *)((char *)this + 16);
    *((void *)this + 1) = 0;
  }
  else
  {
    unsigned int v36 = (void *)*((void *)this + 1);
    *unsigned int v36 = 0;
    bzero(v36 + 1, 8 * (((v35 + 64) >> 6) - 2) + 8);
    *((_DWORD *)this + 4) = 0;
    int v37 = (int *)((char *)this + 16);
    int v38 = (char *)*((void *)this + 1);
  }
  uint64_t v47 = &v8[v7];
  unint64_t v85 = 0;
  llvm::skipLeadingZeroesAndAnyDot((uint64_t)&v89, v34, v47, (const char **)&v85);
  unsigned int v48 = v89;
  if (v90)
  {
    *(unsigned char *)(a5 + 8) |= 1u;
    *(void *)a5 = v48;
    return;
  }
  if (v89 == v47) {
    goto LABEL_187;
  }
  char v49 = 0;
  unint64_t v50 = 0;
  unsigned int v51 = (v35 & 0xFFFFFFC0) + 64;
  unint64_t v52 = v85;
  int v53 = v89;
  while (1)
  {
    uint64_t v54 = *v53;
    if (v54 == 46)
    {
      if (v52 != v47)
      {
        unsigned int v12 = "String contains multiple dots";
        goto LABEL_33;
      }
      unint64_t v85 = v53;
      unint64_t v52 = v53++;
      goto LABEL_105;
    }
    uint64_t v55 = llvm::hexDigitValue(char)::LUT[v54];
    if (v55 == -1) {
      break;
    }
    ++v53;
    if (v51)
    {
      v51 -= 4;
      *(void *)&v38[8 * (v51 >> 6)] |= v55 << v51;
    }
    else
    {
      if ((v49 & 1) == 0)
      {
        if ((unint64_t)(v54 - 57) > 0xFFFFFFFFFFFFFFF6)
        {
          if ((v55 & 0xFFFFFFF7) != 0)
          {
            unint64_t v50 = v50 & 0xFFFFFFFF00000000 | 1;
          }
          else
          {
            uint64_t v56 = v53;
            if (v53 == v47)
            {
LABEL_188:
              unsigned int v12 = "Invalid trailing hexadecimal fraction!";
              goto LABEL_33;
            }
            while (1)
            {
              uint64_t v57 = *v56;
              if (v57 != 48 && v57 != 46) {
                break;
              }
              if (++v56 == v47) {
                goto LABEL_188;
              }
            }
            unint64_t v58 = v50 & 0xFFFFFFFF00000000;
            if (llvm::hexDigitValue(char)::LUT[v57] == -1)
            {
              unint64_t v50 = v58 | (2 * (v54 != 48));
            }
            else
            {
              if (v54 == 48) {
                uint64_t v59 = 1;
              }
              else {
                uint64_t v59 = 3;
              }
              unint64_t v50 = v59 | v58;
            }
          }
        }
        else
        {
          unint64_t v50 = v50 & 0xFFFFFFFF00000000 | 3;
        }
      }
      unsigned int v51 = 0;
      char v49 = 1;
    }
LABEL_105:
    if (v53 == v47) {
      goto LABEL_187;
    }
  }
  if (v53 == v47)
  {
LABEL_187:
    unsigned int v12 = "Hex strings require an exponent";
    goto LABEL_33;
  }
  if ((v54 | 0x20) != 0x70)
  {
    unsigned int v12 = "Invalid character in significand";
    goto LABEL_33;
  }
  if (v53 == v34 || v52 != v47 && v53 - v34 == 1)
  {
    unsigned int v12 = "Significand has no digits";
    goto LABEL_33;
  }
  if (v53 != v48)
  {
    if (v52 == v47)
    {
      unint64_t v85 = v53;
      LODWORD(v52) = v53;
    }
    uint64_t v77 = v53 + 1;
    if (v53 + 1 == v47 || ((v78 = *(unsigned __int8 *)v77, v78 == 45) || v78 == 43) && (uint64_t v77 = v53 + 2, v53 + 2 == v47))
    {
      unsigned int v12 = "Exponent has no digits";
      goto LABEL_33;
    }
    if (v77 != v47)
    {
      int v79 = 0;
      while (1)
      {
        unsigned int v80 = *v77 - 48;
        if (v80 >= 0xA) {
          break;
        }
        int v79 = v80 + 10 * v79;
        if (v79 >= 0x8000) {
          goto LABEL_219;
        }
        if (++v77 == v47) {
          goto LABEL_214;
        }
      }
      unsigned int v12 = "Invalid character in exponent";
LABEL_33:
      uint64_t v86 = v12;
      __int16 v88 = 259;
      getErrorErrorCat();
      operator new();
    }
    int v79 = 0;
LABEL_214:
    unsigned int v81 = *(_DWORD *)(*(void *)this + 8)
        - (v35 & 0xFFFFFFC0)
        + 4 * (v52 - v48 + ((v52 - v48) >> 31))
        - 65;
    if (v81 != (__int16)v81 || (v78 != 45 ? (int v82 = v79) : (int v82 = -v79), v83 = v82 + v81, v83 != (__int16)v83))
    {
LABEL_219:
      if (v78 == 45) {
        int v83 = -32768;
      }
      else {
        int v83 = 0x7FFF;
      }
    }
    *int v37 = v83;
  }
  int v84 = llvm::detail::IEEEFloat::normalize(this, a4, v50);
  *(unsigned char *)(a5 + 8) &= ~1u;
  *(_DWORD *)a5 = v84;
}

unint64_t llvm::detail::hash_value(llvm::hashing::detail::hash_state **this, const llvm::detail::IEEEFloat *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unsigned int v4 = *((unsigned __int8 *)this + 20);
  int v5 = v4 & 6;
  int v6 = v4 & 7;
  int v7 = (v4 >> 3) & 1;
  if (v5) {
    BOOL v8 = v6 == 3;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (v6 == 1) {
      LOBYTE(v7) = 0;
    }
    LOBYTE(v18) = v7;
    __int16 v9 = (int *)((char *)*this + 8);
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v20);
    char v20 = v6;
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)&v20, 0, v21, v22, (char *)&v18, v9);
  }
  else
  {
    char v19 = v7;
    int v11 = *this;
    int v14 = this[1];
    unsigned int v12 = (llvm::hashing::detail::hash_state *)(this + 1);
    uint64_t v13 = v14;
    int v15 = (int *)((char *)v12 + 8);
    LODWORD(v14) = *((_DWORD *)v11 + 2);
    unsigned int v17 = (int *)((char *)v11 + 8);
    int v16 = (int)v14;
    if ((v14 - 64) < 0xFFFFFF80) {
      unsigned int v12 = v13;
    }
    unint64_t v18 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(v12, (uint64_t)v12 + 8 * ((v16 + 64) >> 6), a3, a4);
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v20);
    char v20 = v6;
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,unsigned int,int,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)&v20, 0, v21, v22, &v19, v17, v15, (uint64_t *)&v18);
  }
}

uint64_t llvm::detail::IEEEFloat::convertF80LongDoubleAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, llvm::APInt *a2@<X8>)
{
  long long v15[2] = *MEMORY[0x263EF8340];
  unint64_t v4 = *((unsigned __int8 *)this + 20);
  int v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      uint64_t v11 = 0;
      unint64_t v7 = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        uint64_t v13 = *(void *)this;
        unsigned int v12 = (unint64_t *)((char *)this + 8);
        if ((*(_DWORD *)(v13 + 8) - 64) <= 0xFFFFFF7F) {
          unsigned int v12 = (unint64_t *)*v12;
        }
        unint64_t v7 = *v12;
      }
      else
      {
        unint64_t v7 = 0x8000000000000000;
      }
      uint64_t v11 = 0x7FFFLL;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 0x3FFF;
    uint64_t v10 = *(void *)this;
    __int16 v9 = (unint64_t *)((char *)this + 8);
    if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F) {
      __int16 v9 = (unint64_t *)*v9;
    }
    unint64_t v7 = *v9;
    if (v8 == 1) {
      unint64_t v8 = v7 >> 63;
    }
    uint64_t v11 = v8 & 0x7FFF;
  }
  v15[0] = v7;
  v15[1] = v11 & 0xFFFFFFFFFFFF7FFFLL | (((v4 >> 3) & 1) << 15);
  *((_DWORD *)a2 + 2) = 80;
  return llvm::APInt::initFromArray(a2, v15);
}

uint64_t llvm::detail::IEEEFloat::convertPPCDoubleDoubleAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  char v16 = 0;
  uint64_t v3 = *(void *)(*(void *)this + 16);
  long long v14 = *(_OWORD *)*(void *)this;
  uint64_t v15 = v3;
  DWORD1(v14) = -1022;
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v12, this);
  llvm::detail::IEEEFloat::convert(&v12, (uint64_t)&v14, 1, &v16);
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v9, (const llvm::detail::IEEEFloat *)&v12);
  llvm::detail::IEEEFloat::convert(&v9, (uint64_t)&llvm::semIEEEdouble, 1, &v16);
  llvm::detail::IEEEFloat::convertDoubleAPFloatToAPInt((llvm::detail::IEEEFloat *)&v9, (uint64_t)&v7);
  if (v8 > 0x40)
  {
    uint64_t v17 = *(void *)v7;
    MEMORY[0x263E50080]();
  }
  else
  {
    uint64_t v17 = v7;
  }
  if ((v11 & 6) != 0 && (v11 & 7) != 3 && v16)
  {
    llvm::detail::IEEEFloat::convert(&v9, (uint64_t)&v14, 1, &v16);
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v7, (const llvm::detail::IEEEFloat *)&v12);
    llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)&v7, (const llvm::detail::IEEEFloat *)&v9, 1, 1);
    llvm::detail::IEEEFloat::convert(&v7, (uint64_t)&llvm::semIEEEdouble, 1, &v16);
    llvm::detail::IEEEFloat::convertDoubleAPFloatToAPInt((llvm::detail::IEEEFloat *)&v7, (uint64_t)&v5);
    if (v6 > 0x40)
    {
      unint64_t v18 = (void *)*v5;
      MEMORY[0x263E50080]();
    }
    else
    {
      unint64_t v18 = v5;
    }
    if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F && v8) {
      MEMORY[0x263E50080](v8, 0x1000C8000313F17);
    }
  }
  else
  {
    unint64_t v18 = 0;
  }
  *((_DWORD *)a2 + 2) = 128;
  uint64_t result = llvm::APInt::initFromArray(a2, &v17);
  if ((*(_DWORD *)(v9 + 8) - 64) <= 0xFFFFFF7F)
  {
    uint64_t result = v10;
    if (v10) {
      uint64_t result = MEMORY[0x263E50080](v10, 0x1000C8000313F17);
    }
  }
  if ((*(_DWORD *)(v12 + 8) - 64) <= 0xFFFFFF7F)
  {
    uint64_t result = v13;
    if (v13) {
      return MEMORY[0x263E50080](v13, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::convertDoubleAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *((unsigned __int8 *)this + 20);
  int v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      unint64_t v7 = 0;
      LOWORD(v8) = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        uint64_t v10 = *(void *)this;
        uint64_t v9 = (unint64_t *)((char *)this + 8);
        if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F) {
          uint64_t v9 = (unint64_t *)*v9;
        }
        unint64_t v7 = *v9;
      }
      else
      {
        unint64_t v7 = 0;
      }
      LOWORD(v8) = 2047;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 1023;
    if ((*(_DWORD *)(*(void *)this + 8) - 64) > 0xFFFFFF7F) {
      unint64_t v7 = *((void *)this + 1);
    }
    else {
      unint64_t v7 = **((void **)this + 1);
    }
    if (v8 == 1) {
      uint64_t v8 = (v7 >> 52) & 1;
    }
  }
  *(_DWORD *)(a2 + 8) = 64;
  *(void *)a2 = (v4 << 60) & 0x8000000000000000 | v7 & 0xFFFFFFFFFFFFFLL | ((unint64_t)(v8 & 0x7FF) << 52);
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertQuadrupleAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v4 = *((unsigned __int8 *)this + 20);
  int v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      unint64_t v7 = 0;
      uint64_t v8 = 0;
      LOWORD(v9) = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        uint64_t v12 = *(void *)this;
        char v11 = (void *)((char *)this + 8);
        if ((*(_DWORD *)(v12 + 8) - 64) <= 0xFFFFFF7F) {
          char v11 = (void *)*v11;
        }
        unint64_t v7 = (void *)*v11;
        uint64_t v8 = v11[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
      LOWORD(v9) = 0x7FFF;
    }
  }
  else
  {
    LODWORD(v9) = *((_DWORD *)this + 4) + 0x3FFF;
    uint64_t v10 = (void *)((char *)this + 8);
    if ((*(_DWORD *)(*(void *)this + 8) - 64) > 0xFFFFFF7F)
    {
      unint64_t v7 = (void *)*((void *)this + 1);
      uint64_t v8 = *((void *)this + 2);
    }
    else
    {
      uint64_t v10 = (void *)*v10;
      unint64_t v7 = (void *)*v10;
      uint64_t v8 = v10[1];
    }
    if (v9 == 1) {
      uint64_t v9 = HIWORD(v10[1]) & 1;
    }
  }
  v14[0] = v7;
  v14[1] = (v4 << 60) & 0x8000000000000000 | v8 & 0xFFFFFFFFFFFFLL | ((unint64_t)(v9 & 0x7FFF) << 48);
  *((_DWORD *)a2 + 2) = 128;
  return llvm::APInt::initFromArray(a2, v14);
}

uint64_t llvm::detail::IEEEFloat::convertFloatAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((unsigned __int8 *)this + 20);
  int v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LODWORD(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        uint64_t v10 = *(void *)this;
        uint64_t v9 = (unint64_t *)((char *)this + 8);
        if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F) {
          uint64_t v9 = (unint64_t *)*v9;
        }
        unint64_t v7 = *v9;
      }
      else
      {
        LODWORD(v7) = 0;
      }
      LOBYTE(v8) = -1;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 127;
    if ((*(_DWORD *)(*(void *)this + 8) - 64) > 0xFFFFFF7F) {
      unint64_t v7 = *((void *)this + 1);
    }
    else {
      unint64_t v7 = **((void **)this + 1);
    }
    if (v8 == 1) {
      uint64_t v8 = (v7 >> 23) & 1;
    }
  }
  *(_DWORD *)(a2 + 8) = 32;
  *(void *)a2 = v7 & 0x7FFFFF | (((v4 >> 3) & 1) << 31) | ((unint64_t)v8 << 23);
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertBFloatAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((unsigned __int8 *)this + 20);
  int v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LOBYTE(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        uint64_t v10 = *(void *)this;
        uint64_t v9 = (unint64_t *)((char *)this + 8);
        if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F) {
          uint64_t v9 = (unint64_t *)*v9;
        }
        unint64_t v7 = *v9;
      }
      else
      {
        LOBYTE(v7) = 0;
      }
      LOBYTE(v8) = -1;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 127;
    if ((*(_DWORD *)(*(void *)this + 8) - 64) > 0xFFFFFF7F) {
      unint64_t v7 = *((void *)this + 1);
    }
    else {
      unint64_t v7 = **((void **)this + 1);
    }
    if (v8 == 1) {
      uint64_t v8 = (v7 >> 7) & 1;
    }
  }
  *(_DWORD *)(a2 + 8) = 16;
  *(void *)a2 = v7 & 0x7F | (((v4 >> 3) & 1) << 15) | ((unint64_t)v8 << 7);
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertHalfAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((unsigned __int8 *)this + 20);
  int v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LOWORD(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        uint64_t v10 = *(void *)this;
        uint64_t v9 = (unint64_t *)((char *)this + 8);
        if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F) {
          uint64_t v9 = (unint64_t *)*v9;
        }
        unint64_t v7 = *v9;
      }
      else
      {
        LOWORD(v7) = 0;
      }
      LOBYTE(v8) = 31;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 15;
    if ((*(_DWORD *)(*(void *)this + 8) - 64) > 0xFFFFFF7F) {
      unint64_t v7 = *((void *)this + 1);
    }
    else {
      unint64_t v7 = **((void **)this + 1);
    }
    if (v8 == 1) {
      uint64_t v8 = (v7 >> 10) & 1;
    }
  }
  *(_DWORD *)(a2 + 8) = 16;
  *(void *)a2 = v7 & 0x3FF | (((v4 >> 3) & 1) << 15) | ((unint64_t)(v8 & 0x1F) << 10);
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E5M2APFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((unsigned __int8 *)this + 20);
  int v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LOBYTE(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        uint64_t v10 = *(void *)this;
        uint64_t v9 = (unint64_t *)((char *)this + 8);
        if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F) {
          uint64_t v9 = (unint64_t *)*v9;
        }
        unint64_t v7 = *v9;
      }
      else
      {
        LOBYTE(v7) = 0;
      }
      LOBYTE(v8) = 31;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 15;
    if ((*(_DWORD *)(*(void *)this + 8) - 64) > 0xFFFFFF7F) {
      unint64_t v7 = *((void *)this + 1);
    }
    else {
      unint64_t v7 = **((void **)this + 1);
    }
    if (v8 == 1) {
      uint64_t v8 = (v7 >> 2) & 1;
    }
  }
  *(_DWORD *)(a2 + 8) = 8;
  *(void *)a2 = (16 * v4) & 0x80 | v7 & 3 | (4 * (v8 & 0x1F));
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E5M2FNUZAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((unsigned __int8 *)this + 20);
  int v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LOBYTE(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      uint64_t v10 = *(void *)this;
      uint64_t v9 = (unint64_t *)((char *)this + 8);
      if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F) {
        uint64_t v9 = (unint64_t *)*v9;
      }
      LOBYTE(v8) = 0;
      unint64_t v7 = *v9;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 16;
    if ((*(_DWORD *)(*(void *)this + 8) - 64) > 0xFFFFFF7F) {
      unint64_t v7 = *((void *)this + 1);
    }
    else {
      unint64_t v7 = **((void **)this + 1);
    }
    if (v8 == 1) {
      uint64_t v8 = (v7 >> 2) & 1;
    }
  }
  *(_DWORD *)(a2 + 8) = 8;
  *(void *)a2 = (16 * v4) & 0x80 | v7 & 3 | (4 * (v8 & 0x1F));
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E4M3FNAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((unsigned __int8 *)this + 20);
  int v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LOBYTE(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      uint64_t v10 = *(void *)this;
      uint64_t v9 = (unint64_t *)((char *)this + 8);
      if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F) {
        uint64_t v9 = (unint64_t *)*v9;
      }
      unint64_t v7 = *v9;
      LOBYTE(v8) = 15;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 7;
    if ((*(_DWORD *)(*(void *)this + 8) - 64) > 0xFFFFFF7F) {
      unint64_t v7 = *((void *)this + 1);
    }
    else {
      unint64_t v7 = **((void **)this + 1);
    }
    if (v8 == 1) {
      uint64_t v8 = (v7 >> 3) & 1;
    }
  }
  *(_DWORD *)(a2 + 8) = 8;
  *(void *)a2 = (16 * v4) & 0x80 | v7 & 7 | (8 * (v8 & 0xF));
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E4M3FNUZAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((unsigned __int8 *)this + 20);
  int v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LOBYTE(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      uint64_t v10 = *(void *)this;
      uint64_t v9 = (unint64_t *)((char *)this + 8);
      if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F) {
        uint64_t v9 = (unint64_t *)*v9;
      }
      LOBYTE(v8) = 0;
      unint64_t v7 = *v9;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 8;
    if ((*(_DWORD *)(*(void *)this + 8) - 64) > 0xFFFFFF7F) {
      unint64_t v7 = *((void *)this + 1);
    }
    else {
      unint64_t v7 = **((void **)this + 1);
    }
    if (v8 == 1) {
      uint64_t v8 = (v7 >> 3) & 1;
    }
  }
  *(_DWORD *)(a2 + 8) = 8;
  *(void *)a2 = (16 * v4) & 0x80 | v7 & 7 | (8 * (v8 & 0xF));
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E4M3B11FNUZAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((unsigned __int8 *)this + 20);
  int v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LOBYTE(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      uint64_t v10 = *(void *)this;
      uint64_t v9 = (unint64_t *)((char *)this + 8);
      if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F) {
        uint64_t v9 = (unint64_t *)*v9;
      }
      LOBYTE(v8) = 0;
      unint64_t v7 = *v9;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 11;
    if ((*(_DWORD *)(*(void *)this + 8) - 64) > 0xFFFFFF7F) {
      unint64_t v7 = *((void *)this + 1);
    }
    else {
      unint64_t v7 = **((void **)this + 1);
    }
    if (v8 == 1) {
      uint64_t v8 = (v7 >> 3) & 1;
    }
  }
  *(_DWORD *)(a2 + 8) = 8;
  *(void *)a2 = (16 * v4) & 0x80 | v7 & 7 | (8 * (v8 & 0xF));
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::bitcastToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v2 = *(void **)this;
  if (*(_UNKNOWN **)this == &llvm::semIEEEhalf) {
    return llvm::detail::IEEEFloat::convertHalfAPFloatToAPInt(this, (uint64_t)a2);
  }
  if (v2 == &llvm::semBFloat) {
    return llvm::detail::IEEEFloat::convertBFloatAPFloatToAPInt(this, (uint64_t)a2);
  }
  if (v2 == &llvm::semIEEEsingle) {
    return llvm::detail::IEEEFloat::convertFloatAPFloatToAPInt(this, (uint64_t)a2);
  }
  if (v2 == &llvm::semIEEEdouble) {
    return llvm::detail::IEEEFloat::convertDoubleAPFloatToAPInt(this, (uint64_t)a2);
  }
  if (v2 == &llvm::semIEEEquad) {
    return llvm::detail::IEEEFloat::convertQuadrupleAPFloatToAPInt(this, a2);
  }
  if (v2 == &llvm::semPPCDoubleDoubleLegacy) {
    return llvm::detail::IEEEFloat::convertPPCDoubleDoubleAPFloatToAPInt(this, a2);
  }
  if (v2 == &llvm::semFloat8E5M2) {
    return llvm::detail::IEEEFloat::convertFloat8E5M2APFloatToAPInt(this, (uint64_t)a2);
  }
  if (v2 == &llvm::semFloat8E5M2FNUZ) {
    return llvm::detail::IEEEFloat::convertFloat8E5M2FNUZAPFloatToAPInt(this, (uint64_t)a2);
  }
  if (v2 == &llvm::semFloat8E4M3FN) {
    return llvm::detail::IEEEFloat::convertFloat8E4M3FNAPFloatToAPInt(this, (uint64_t)a2);
  }
  if (v2 == &llvm::semFloat8E4M3FNUZ) {
    return llvm::detail::IEEEFloat::convertFloat8E4M3FNUZAPFloatToAPInt(this, (uint64_t)a2);
  }
  if (v2 == &llvm::semFloat8E4M3B11FNUZ) {
    return llvm::detail::IEEEFloat::convertFloat8E4M3B11FNUZAPFloatToAPInt(this, (uint64_t)a2);
  }
  return llvm::detail::IEEEFloat::convertF80LongDoubleAPFloatToAPInt(this, a2);
}

double llvm::detail::IEEEFloat::convertToDouble(llvm::detail::IEEEFloat *this)
{
  llvm::detail::IEEEFloat::bitcastToAPInt(this, (llvm::APInt *)&v3);
  if (v4 <= 0x40) {
    return *(double *)&v3;
  }
  double v1 = *v3;
  MEMORY[0x263E50080]();
  return v1;
}

void llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt *a2)
{
  *(void *)this = &llvm::semX87DoubleExtended;
  operator new[]();
}

uint64_t llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  if (*((_DWORD *)a2 + 2) >= 0x41u) {
    uint64_t v3 = *a2;
  }
  else {
    uint64_t v3 = (const llvm::APInt *)a2;
  }
  unsigned int v4 = *(const llvm::APInt **)v3;
  int v5 = (const llvm::APInt *)*((void *)v3 + 1);
  LODWORD(v11) = 64;
  uint64_t v10 = v4;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(this, &v10);
  uint64_t result = llvm::detail::IEEEFloat::convert((uint64_t *)this, (uint64_t)&llvm::semPPCDoubleDoubleLegacy, 1, &v12);
  if ((*((unsigned char *)this + 20) & 6) != 0 && (*((unsigned char *)this + 20) & 7) != 3)
  {
    int v9 = 64;
    uint64_t v8 = v5;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v10, &v8);
    llvm::detail::IEEEFloat::convert((uint64_t *)&v10, (uint64_t)&llvm::semPPCDoubleDoubleLegacy, 1, &v12);
    uint64_t result = llvm::detail::IEEEFloat::addOrSubtract(this, (const llvm::detail::IEEEFloat *)&v10, 1, 0);
    if ((*((_DWORD *)v10 + 2) - 64) <= 0xFFFFFF7F)
    {
      uint64_t result = v11;
      if (v11) {
        return MEMORY[0x263E50080](v11, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

void llvm::detail::IEEEFloat::initFromDoubleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41) {
    uint64_t v3 = *a2;
  }
  else {
    uint64_t v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3 & 0xFFFFFFFFFFFFFLL;
  unint64_t v5 = *((void *)v3 + ((v2 + 63) >> 6) - 1);
  uint64_t v6 = (v5 >> 52) & 0x7FF;
  *(void *)this = &llvm::semIEEEdouble;
  uint64_t v7 = (v5 >> 60) & 8;
  char v8 = *((unsigned char *)this + 20) & 0xF7 | v7;
  *((unsigned char *)this + 20) = v8;
  if (v6 == 2047 && v4 == 0)
  {
    llvm::detail::IEEEFloat::makeInf(this, v7 != 0);
    return;
  }
  if (v6 == 2047 && v4 != 0)
  {
    *((unsigned char *)this + 20) = v8 & 0xF8 | 1;
    *((_DWORD *)this + 4) = 1024;
LABEL_18:
    *((void *)this + 1) = v4;
    return;
  }
  if (!(v6 | v4))
  {
    llvm::detail::IEEEFloat::makeZero(this, v7 != 0);
    return;
  }
  *((unsigned char *)this + 20) = v8 & 0xF8 | 2;
  *((_DWORD *)this + 4) = v6 - 1023;
  *((void *)this + 1) = v4;
  if (v6)
  {
    v4 |= 0x10000000000000uLL;
    goto LABEL_18;
  }
  *((_DWORD *)this + 4) = -1022;
}

void llvm::detail::IEEEFloat::initFromQuadrupleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *a2;
  if (*((unsigned int *)a2 + 2) < 0x41uLL) {
    unint64_t v2 = (const llvm::APInt *)a2;
  }
  *((void *)&v3 + 1) = *((void *)v2 + 1) & 0xFFFFFFFFFFFFLL;
  *(void *)this = &llvm::semIEEEquad;
  operator new[]();
}

void llvm::detail::IEEEFloat::initFromFloatAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41) {
    long long v3 = *a2;
  }
  else {
    long long v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3 & 0x7FFFFFLL;
  unint64_t v5 = *((void *)v3 + ((v2 + 63) >> 6) - 1);
  uint64_t v6 = (v5 >> 23);
  *(void *)this = &llvm::semIEEEsingle;
  unsigned int v7 = (v5 >> 28) & 8;
  char v8 = *((unsigned char *)this + 20) & 0xF7 | v7;
  *((unsigned char *)this + 20) = v8;
  if (v6 == 255 && v4 == 0)
  {
    llvm::detail::IEEEFloat::makeInf(this, v7 != 0);
    return;
  }
  if (v6 == 255 && v4 != 0)
  {
    *((unsigned char *)this + 20) = v8 & 0xF8 | 1;
    *((_DWORD *)this + 4) = 128;
LABEL_18:
    *((void *)this + 1) = v4;
    return;
  }
  if (!(v6 | v4))
  {
    llvm::detail::IEEEFloat::makeZero(this, v7 != 0);
    return;
  }
  *((unsigned char *)this + 20) = v8 & 0xF8 | 2;
  *((_DWORD *)this + 4) = v6 - 127;
  *((void *)this + 1) = v4;
  if (v6)
  {
    v4 |= 0x800000uLL;
    goto LABEL_18;
  }
  *((_DWORD *)this + 4) = -126;
}

void llvm::detail::IEEEFloat::initFromBFloatAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41) {
    long long v3 = *a2;
  }
  else {
    long long v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3 & 0x7FLL;
  unint64_t v5 = *((void *)v3 + ((v2 + 63) >> 6) - 1);
  uint64_t v6 = (v5 >> 7);
  *(void *)this = &llvm::semBFloat;
  unsigned int v7 = (v5 >> 12) & 8;
  char v8 = *((unsigned char *)this + 20) & 0xF7 | v7;
  *((unsigned char *)this + 20) = v8;
  if (v6 == 255 && v4 == 0)
  {
    llvm::detail::IEEEFloat::makeInf(this, v7 != 0);
    return;
  }
  if (v6 == 255 && v4 != 0)
  {
    *((unsigned char *)this + 20) = v8 & 0xF8 | 1;
    *((_DWORD *)this + 4) = 128;
LABEL_18:
    *((void *)this + 1) = v4;
    return;
  }
  if (!(v6 | v4))
  {
    llvm::detail::IEEEFloat::makeZero(this, v7 != 0);
    return;
  }
  *((unsigned char *)this + 20) = v8 & 0xF8 | 2;
  *((_DWORD *)this + 4) = v6 - 127;
  *((void *)this + 1) = v4;
  if (v6)
  {
    v4 |= 0x80uLL;
    goto LABEL_18;
  }
  *((_DWORD *)this + 4) = -126;
}

void llvm::detail::IEEEFloat::initFromHalfAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41) {
    long long v3 = *a2;
  }
  else {
    long long v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3 & 0x3FFLL;
  unint64_t v5 = *((void *)v3 + ((v2 + 63) >> 6) - 1);
  uint64_t v6 = (v5 >> 10) & 0x1F;
  *(void *)this = &llvm::semIEEEhalf;
  unsigned int v7 = (v5 >> 12) & 8;
  char v8 = *((unsigned char *)this + 20) & 0xF7 | v7;
  *((unsigned char *)this + 20) = v8;
  if (v6 == 31 && v4 == 0)
  {
    llvm::detail::IEEEFloat::makeInf(this, v7 != 0);
    return;
  }
  if (v6 == 31 && v4 != 0)
  {
    *((unsigned char *)this + 20) = v8 & 0xF8 | 1;
    *((_DWORD *)this + 4) = 16;
LABEL_18:
    *((void *)this + 1) = v4;
    return;
  }
  if (!(v6 | v4))
  {
    llvm::detail::IEEEFloat::makeZero(this, v7 != 0);
    return;
  }
  *((unsigned char *)this + 20) = v8 & 0xF8 | 2;
  *((_DWORD *)this + 4) = v6 - 15;
  *((void *)this + 1) = v4;
  if (v6)
  {
    v4 |= 0x400uLL;
    goto LABEL_18;
  }
  *((_DWORD *)this + 4) = -14;
}

void llvm::detail::IEEEFloat::initFromFloat8E5M2APInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41) {
    long long v3 = *a2;
  }
  else {
    long long v3 = (const llvm::APInt *)a2;
  }
  uint64_t v4 = *(void *)v3 & 3;
  unint64_t v5 = *((void *)v3 + ((v2 + 63) >> 6) - 1);
  uint64_t v6 = (v5 >> 2) & 0x1F;
  *(void *)this = &llvm::semFloat8E5M2;
  unsigned int v7 = (v5 >> 4) & 8;
  char v8 = *((unsigned char *)this + 20) & 0xF7 | v7;
  *((unsigned char *)this + 20) = v8;
  if (v6 == 31 && v4 == 0)
  {
    llvm::detail::IEEEFloat::makeInf(this, v7 != 0);
    return;
  }
  if (v6 == 31 && v4 != 0)
  {
    *((unsigned char *)this + 20) = v8 & 0xF8 | 1;
    *((_DWORD *)this + 4) = 16;
LABEL_18:
    *((void *)this + 1) = v4;
    return;
  }
  if (!(v6 | v4))
  {
    llvm::detail::IEEEFloat::makeZero(this, v7 != 0);
    return;
  }
  *((unsigned char *)this + 20) = v8 & 0xF8 | 2;
  *((_DWORD *)this + 4) = v6 - 15;
  *((void *)this + 1) = v4;
  if (v6)
  {
    v4 |= 4uLL;
    goto LABEL_18;
  }
  *((_DWORD *)this + 4) = -14;
}

void llvm::detail::IEEEFloat::initFromFloat8E5M2FNUZAPInt(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 8);
  long long v3 = *(void **)a2;
  if (v2 < 0x41) {
    long long v3 = (void *)a2;
  }
  unint64_t v4 = v3[((v2 + 63) >> 6) - 1];
  uint64_t v5 = *v3 & 3;
  uint64_t v6 = (v4 >> 2) & 0x1F;
  *(void *)a1 = &llvm::semFloat8E5M2FNUZ;
  unsigned int v7 = (v4 >> 4) & 8;
  char v8 = *(unsigned char *)(a1 + 20) & 0xF7 | v7;
  *(unsigned char *)(a1 + 20) = v8;
  if (v6 | v5)
  {
    *(unsigned char *)(a1 + 20) = v8 & 0xF8 | 2;
    *(_DWORD *)(a1 + 16) = v6 - 16;
    *(void *)(a1 + 8) = v5;
    if (v6) {
      *(void *)(a1 + 8) = v5 | 4;
    }
    else {
      *(_DWORD *)(a1 + 16) = -15;
    }
  }
  else if (v7)
  {
    *(unsigned char *)(a1 + 20) = v8 & 0xF8 | 1;
    *(_DWORD *)(a1 + 16) = -16;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)a1, 0);
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E4M3FNAPInt(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 8);
  if (v2 >= 0x41) {
    long long v3 = *(void **)a2;
  }
  else {
    long long v3 = (void *)a2;
  }
  uint64_t v4 = *v3 & 7;
  unint64_t v5 = v3[((v2 + 63) >> 6) - 1];
  uint64_t v6 = (v5 >> 3) & 0xF;
  *(void *)a1 = &llvm::semFloat8E4M3FN;
  unsigned int v7 = (v5 >> 4) & 8;
  char v8 = *(unsigned char *)(a1 + 20) & 0xF7 | v7;
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a1 + 20) & 0xF7 | (v5 >> 4) & 8;
  if (v6 == 15 && v4 == 7)
  {
    *(unsigned char *)(a1 + 20) = v8 & 0xF8 | 1;
    *(_DWORD *)(a1 + 16) = 8;
    uint64_t v10 = 7;
LABEL_13:
    *(void *)(a1 + 8) = v10;
    return;
  }
  if (!(v6 | v4))
  {
    llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)a1, v7 != 0);
    return;
  }
  *(unsigned char *)(a1 + 20) = v8 & 0xF8 | 2;
  *(_DWORD *)(a1 + 16) = v6 - 7;
  *(void *)(a1 + 8) = v4;
  if (v6)
  {
    uint64_t v10 = v4 | 8;
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 16) = -6;
}

void llvm::detail::IEEEFloat::initFromFloat8E4M3FNUZAPInt(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 8);
  long long v3 = *(void **)a2;
  if (v2 < 0x41) {
    long long v3 = (void *)a2;
  }
  unint64_t v4 = v3[((v2 + 63) >> 6) - 1];
  uint64_t v5 = *v3 & 7;
  uint64_t v6 = (v4 >> 3) & 0xF;
  *(void *)a1 = &llvm::semFloat8E4M3FNUZ;
  unsigned int v7 = (v4 >> 4) & 8;
  char v8 = *(unsigned char *)(a1 + 20) & 0xF7 | v7;
  *(unsigned char *)(a1 + 20) = v8;
  if (v6 | v5)
  {
    *(unsigned char *)(a1 + 20) = v8 & 0xF8 | 2;
    *(_DWORD *)(a1 + 16) = v6 - 8;
    *(void *)(a1 + 8) = v5;
    if (v6) {
      *(void *)(a1 + 8) = v5 | 8;
    }
    else {
      *(_DWORD *)(a1 + 16) = -7;
    }
  }
  else if (v7)
  {
    *(unsigned char *)(a1 + 20) = v8 & 0xF8 | 1;
    *(_DWORD *)(a1 + 16) = -8;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)a1, 0);
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E4M3B11FNUZAPInt(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 8);
  long long v3 = *(void **)a2;
  if (v2 < 0x41) {
    long long v3 = (void *)a2;
  }
  unint64_t v4 = v3[((v2 + 63) >> 6) - 1];
  uint64_t v5 = *v3 & 7;
  uint64_t v6 = (v4 >> 3) & 0xF;
  *(void *)a1 = &llvm::semFloat8E4M3B11FNUZ;
  unsigned int v7 = (v4 >> 4) & 8;
  char v8 = *(unsigned char *)(a1 + 20) & 0xF7 | v7;
  *(unsigned char *)(a1 + 20) = v8;
  if (v6 | v5)
  {
    *(unsigned char *)(a1 + 20) = v8 & 0xF8 | 2;
    *(_DWORD *)(a1 + 16) = v6 - 11;
    *(void *)(a1 + 8) = v5;
    if (v6) {
      *(void *)(a1 + 8) = v5 | 8;
    }
    else {
      *(_DWORD *)(a1 + 16) = -10;
    }
  }
  else if (v7)
  {
    *(unsigned char *)(a1 + 20) = v8 & 0xF8 | 1;
    *(_DWORD *)(a1 + 16) = -11;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)a1, 0);
  }
}

void llvm::detail::IEEEFloat::initFromAPInt(llvm::detail::IEEEFloat *a1, void *a2, const llvm::APInt **a3)
{
  if (a2 == &llvm::semIEEEhalf)
  {
    llvm::detail::IEEEFloat::initFromHalfAPInt(a1, a3);
  }
  else if (a2 == &llvm::semBFloat)
  {
    llvm::detail::IEEEFloat::initFromBFloatAPInt(a1, a3);
  }
  else if (a2 == &llvm::semIEEEsingle)
  {
    llvm::detail::IEEEFloat::initFromFloatAPInt(a1, a3);
  }
  else if (a2 == &llvm::semIEEEdouble)
  {
    llvm::detail::IEEEFloat::initFromDoubleAPInt(a1, a3);
  }
  else
  {
    if (a2 == &llvm::semX87DoubleExtended) {
      llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt(a1, (const llvm::APInt *)a3);
    }
    if (a2 == &llvm::semIEEEquad) {
      llvm::detail::IEEEFloat::initFromQuadrupleAPInt(a1, a3);
    }
    if (a2 == &llvm::semPPCDoubleDoubleLegacy)
    {
      llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt(a1, a3);
    }
    else if (a2 == &llvm::semFloat8E5M2)
    {
      llvm::detail::IEEEFloat::initFromFloat8E5M2APInt(a1, a3);
    }
    else if (a2 == &llvm::semFloat8E5M2FNUZ)
    {
      llvm::detail::IEEEFloat::initFromFloat8E5M2FNUZAPInt((uint64_t)a1, (uint64_t)a3);
    }
    else if (a2 == &llvm::semFloat8E4M3FN)
    {
      llvm::detail::IEEEFloat::initFromFloat8E4M3FNAPInt((uint64_t)a1, (uint64_t)a3);
    }
    else if (a2 == &llvm::semFloat8E4M3FNUZ)
    {
      llvm::detail::IEEEFloat::initFromFloat8E4M3FNUZAPInt((uint64_t)a1, (uint64_t)a3);
    }
    else
    {
      llvm::detail::IEEEFloat::initFromFloat8E4M3B11FNUZAPInt((uint64_t)a1, (uint64_t)a3);
    }
  }
}

void llvm::detail::IEEEFloat::toString(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, int a5)
{
  v75[32] = *MEMORY[0x263EF8340];
  int v9 = *(unsigned char *)(a1 + 20) & 7;
  if (v9 == 3)
  {
    if ((*(unsigned char *)(a1 + 20) & 8) != 0) {
      llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 45);
    }
    if (a4)
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 48);
      return;
    }
    if (!a5)
    {
      llvm::SmallVectorImpl<char>::append<char const*,void>(a2, "0.0", "");
      if (a3 >= 2) {
        llvm::SmallVectorImpl<char>::append(a2, a3 - 1, 48);
      }
      uint64_t v10 = "e+00";
      goto LABEL_65;
    }
    uint64_t v10 = "0.0E+0";
    uint64_t v11 = "";
LABEL_66:
    llvm::SmallVectorImpl<char>::append<char const*,void>(a2, v10, v11);
    return;
  }
  if (v9 == 1)
  {
    uint64_t v10 = "NaN";
    uint64_t v11 = "";
    goto LABEL_66;
  }
  if ((*(unsigned char *)(a1 + 20) & 7) == 0)
  {
    if ((*(unsigned char *)(a1 + 20) & 8) != 0) {
      uint64_t v10 = "-Inf";
    }
    else {
      uint64_t v10 = "+Inf";
    }
LABEL_65:
    uint64_t v11 = v10 + 4;
    goto LABEL_66;
  }
  if ((*(unsigned char *)(a1 + 20) & 8) != 0) {
    llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 45);
  }
  int v13 = *(_DWORD *)(*(void *)a1 + 8);
  long long v14 = (void *)(a1 + 8);
  if ((v13 - 64) <= 0xFFFFFF7F) {
    long long v14 = (void *)*v14;
  }
  int v15 = *(_DWORD *)(a1 + 16);
  unsigned int v70 = *(_DWORD *)(*(void *)a1 + 8);
  llvm::APInt::initFromArray((llvm::APInt *)&v69, v14);
  if (!a3) {
    a3 = 59 * *(_DWORD *)(*(void *)a1 + 8) / 0xC4u + 2;
  }
  uint64_t v16 = v70;
  if (v70 > 0x40)
  {
    unsigned int v18 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v69);
    llvm::APInt::tcShiftRight(v69, (unint64_t *)((unint64_t)(v16 + 63) >> 6), v18);
  }
  else
  {
    unsigned int v17 = __clz(__rbit64((unint64_t)v69));
    if (v70 >= v17) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = v70;
    }
    if (v70 > v17) {
      int v69 = (llvm::APInt *)((unint64_t)v69 >> v18);
    }
    else {
      int v69 = 0;
    }
  }
  unsigned int v19 = v15 - v13 + v18;
  signed int v20 = v19 + 1;
  if (v19 != -1)
  {
    if (v20 < 1)
    {
      int v21 = -v20;
      unsigned int v22 = *(_DWORD *)(*(void *)a1 + 8) + (-137 * v20 + 136) / 59;
      llvm::APInt::zext((llvm::APInt *)&v69, v22, (llvm::APInt *)&__dst);
      if (v70 >= 0x41 && v69) {
        MEMORY[0x263E50080](v69, 0x1000C8000313F17);
      }
      int v69 = (llvm::APInt *)__dst;
      unsigned int v70 = v74;
      llvm::APInt::APInt((llvm::APInt *)&__dst, v22, 5);
      if (v21) {
LABEL_40:
      }
        llvm::APInt::operator*=((uint64_t)&v69, &__dst);
      while (v21 >= 2)
      {
        v21 >>= 1;
        llvm::APInt::operator*=((uint64_t)&__dst, &__dst);
        if (v21) {
          goto LABEL_40;
        }
      }
      if (v74 >= 0x41 && __dst) {
        MEMORY[0x263E50080](__dst, 0x1000C8000313F17);
      }
    }
    else
    {
      llvm::APInt::zext((llvm::APInt *)&v69, *(_DWORD *)(*(void *)a1 + 8) + v20, (llvm::APInt *)&__dst);
      if (v70 >= 0x41 && v69) {
        MEMORY[0x263E50080](v69, 0x1000C8000313F17);
      }
      int v69 = (llvm::APInt *)__dst;
      unsigned int v70 = v74;
      llvm::APInt::operator<<=(&v69, v20);
      signed int v20 = 0;
    }
  }
  unsigned int v23 = v70;
  if (v70 > 0x40) {
    int v24 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v69);
  }
  else {
    int v24 = v70 + __clz((unint64_t)v69) - 64;
  }
  unsigned int v25 = (196 * a3 + 58) / 0x3B;
  if (v23 - v24 > v25)
  {
    unsigned int v26 = 59 * (v23 - v24 - v25);
    if (v26 >= 0xC4)
    {
      unsigned int v27 = 59 * (v23 - v24 - v25);
      unsigned int v28 = v26 / 0xC4;
      llvm::APInt::APInt((llvm::APInt *)&__dst, v23, 1);
      llvm::APInt::APInt((llvm::APInt *)&v64, v70, 10);
      unsigned int v29 = v27 / 0xC4;
      if ((v28 & 1) == 0) {
        goto LABEL_54;
      }
LABEL_53:
      llvm::APInt::operator*=((uint64_t)&__dst, &v64);
LABEL_54:
      while (v29 >= 2)
      {
        v29 >>= 1;
        llvm::APInt::operator*=((uint64_t)&v64, &v64);
        if (v29) {
          goto LABEL_53;
        }
      }
      llvm::APInt::udiv((llvm::APInt *)&v69, (const llvm::APInt *)&__dst, (llvm::APInt *)&v71);
      if (v70 >= 0x41 && v69) {
        MEMORY[0x263E50080](v69, 0x1000C8000313F17);
      }
      int v69 = v71;
      unsigned int v30 = v72;
      unsigned int v70 = v72;
      if (v72 > 0x40) {
        int v31 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v69);
      }
      else {
        int v31 = v72 + __clz((unint64_t)v71) - 64;
      }
      llvm::APInt::trunc((llvm::APInt *)&v69, v30 - v31, (llvm::APInt *)&v71);
      if (v70 >= 0x41 && v69) {
        MEMORY[0x263E50080](v69, 0x1000C8000313F17);
      }
      int v69 = v71;
      unsigned int v70 = v72;
      if (v65 >= 0x41 && v64) {
        MEMORY[0x263E50080](v64, 0x1000C8000313F17);
      }
      v20 += v28;
      if (v74 >= 0x41 && __dst) {
        MEMORY[0x263E50080](__dst, 0x1000C8000313F17);
      }
      unsigned int v23 = v70;
    }
  }
  __dst = v75;
  long long v74 = xmmword_261E8A780;
  if (v23 <= 3)
  {
    int v69 = (llvm::APInt *)(v69 & 0xF);
    unsigned int v23 = 4;
    unsigned int v70 = 4;
  }
  llvm::APInt::APInt((llvm::APInt *)&v71, v23, 10);
  llvm::APInt::APInt((llvm::APInt *)&v67, v23, 0);
  LOBYTE(v23) = 1;
  while (1)
  {
    unsigned int v33 = v70;
    if (v70 >= 0x41)
    {
      if (v33 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v69) > 0x40) {
        goto LABEL_88;
      }
      int v34 = v69;
    }
    else
    {
      int v34 = &v69;
    }
    if (!*v34) {
      break;
    }
LABEL_88:
    llvm::APInt::udivrem((llvm::APInt *)&v69, (const llvm::APInt *)&v71, (const llvm::APInt *)&v69, (llvm::APInt *)&v67, v32);
    if (v68 >= 0x41) {
      int v35 = v67;
    }
    else {
      int v35 = (unsigned int **)&v67;
    }
    uint64_t v36 = *(unsigned int *)v35;
    unsigned int v23 = v23 & (v36 == 0);
    if (v23 == 1) {
      ++v20;
    }
    else {
      llvm::SmallVectorTemplateBase<char,true>::push_back(&__dst, v36 + 48);
    }
  }
  unsigned int v37 = v74;
  uint64_t v38 = v74 - a3;
  if (v74 <= a3) {
    goto LABEL_111;
  }
  int v39 = __dst;
  if (*((char *)__dst + (v38 - 1)) >= 53)
  {
    unsigned int v44 = a3;
    while (1)
    {
      uint64_t v45 = v38;
      int v46 = *((unsigned __int8 *)__dst + v38);
      if (v46 != 57) {
        break;
      }
      LODWORD(v38) = v45 + 1;
      if (!--v44) {
        goto LABEL_127;
      }
    }
    *((unsigned char *)__dst + v45) = v46 + 1;
    if (v44)
    {
      v20 += v45;
      int v39 = __dst;
      BOOL v41 = (char *)__dst + v45;
      size_t v42 = v74 - v45;
      if ((void)v74 == v45) {
        goto LABEL_102;
      }
      goto LABEL_109;
    }
LABEL_127:
    v20 += v37;
    *(void *)&long long v74 = 0;
    llvm::SmallVectorTemplateBase<char,true>::push_back(&__dst, 49);
    unsigned int v37 = v74;
    if (a4) {
      goto LABEL_112;
    }
    goto LABEL_128;
  }
  if (v38 < v74)
  {
    unsigned int v40 = a3;
    while (*((unsigned char *)__dst + v38) == 48)
    {
      ++v38;
      if (!--v40)
      {
        LODWORD(v38) = v74;
        break;
      }
    }
  }
  v20 += v38;
  BOOL v41 = (char *)__dst + v38;
  size_t v42 = v74 - v38;
  if ((void)v74 == v38)
  {
LABEL_102:
    char v43 = v39;
  }
  else
  {
LABEL_109:
    memmove(v39, v41, v42);
    char v43 = __dst;
  }
  unsigned int v37 = v39 + v42 - v43;
  *(void *)&long long v74 = &v39[v42] - v43;
LABEL_111:
  if (a4)
  {
LABEL_112:
    if ((v20 & 0x80000000) == 0)
    {
      if (v20 <= a4 && v20 + v37 <= a3)
      {
        if (v37)
        {
          uint64_t v47 = v37;
          unsigned int v48 = v37 - 1;
          do
          {
            llvm::SmallVectorTemplateBase<char,true>::push_back(a2, *((unsigned char *)__dst + v48--));
            --v47;
          }
          while (v47);
        }
        for (; v20; --v20)
          llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 48);
        goto LABEL_155;
      }
      goto LABEL_128;
    }
    int v49 = v20 + v37;
    if (((v20 + v37 - 1) & 0x80000000) != 0 && 1 - v49 > a4) {
      goto LABEL_128;
    }
    if (v49 < 1)
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 48);
      llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 46);
      if (v49)
      {
        do
          llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 48);
        while (!__CFADD__(v49++, 1));
        int v49 = 0;
      }
    }
    else
    {
      unsigned int v50 = v37 - 1;
      uint64_t v51 = v20 + v37;
      do
      {
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, *((unsigned char *)__dst + v50--));
        --v51;
      }
      while (v51);
      llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 46);
    }
    if (v49 != v37)
    {
      unsigned int v63 = ~v49 + v37;
      do
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, *((unsigned char *)__dst + v63--));
      while (v63 != -1);
    }
  }
  else
  {
LABEL_128:
    llvm::SmallVectorTemplateBase<char,true>::push_back(a2, *((unsigned char *)__dst + v37 - 1));
    llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 46);
    unsigned int v52 = v37 - 1;
    if (v37 == 1 && (a5 & 1) != 0)
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 48);
    }
    else if (v37 != 1)
    {
      unsigned int v53 = v37 - 2;
      do
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, *((unsigned char *)__dst + v53--));
      while (v53 != -1);
    }
    int v54 = v52 + v20;
    if (a5)
    {
      char v55 = 69;
    }
    else
    {
      if (a3 > v52) {
        llvm::SmallVectorImpl<char>::append(a2, a3 - v37 + 1, 48);
      }
      char v55 = 101;
    }
    llvm::SmallVectorTemplateBase<char,true>::push_back(a2, v55);
    if (v54 < 0) {
      char v56 = 45;
    }
    else {
      char v56 = 43;
    }
    if (v54 >= 0) {
      unsigned int v57 = v54;
    }
    else {
      unsigned int v57 = -v54;
    }
    llvm::SmallVectorTemplateBase<char,true>::push_back(a2, v56);
    uint64_t v64 = &v66;
    long long v65 = xmmword_261E8A7B0;
    do
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(&v64, (v57 % 0xA) | 0x30);
      BOOL v58 = v57 > 9;
      v57 /= 0xAu;
    }
    while (v58);
    unsigned int v59 = v65;
    if ((a5 & 1) == 0 && (unint64_t)v65 <= 1)
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(&v64, 48);
      unsigned int v59 = v65;
    }
    uint64_t v60 = v59;
    if (v59)
    {
      unsigned int v61 = v59 - 1;
      do
      {
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, *((unsigned char *)v64 + v61--));
        --v60;
      }
      while (v60);
    }
    if (v64 != &v66) {
      free(v64);
    }
  }
LABEL_155:
  if (v68 >= 0x41 && v67) {
    MEMORY[0x263E50080](v67, 0x1000C8000313F17);
  }
  if (v72 >= 0x41 && v71) {
    MEMORY[0x263E50080](v71, 0x1000C8000313F17);
  }
  if (__dst != v75) {
    free(__dst);
  }
  if (v70 >= 0x41 && v69) {
    MEMORY[0x263E50080](v69, 0x1000C8000313F17);
  }
}

void llvm::detail::DoubleAPFloat::DoubleAPFloat(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new[]();
}

{
  *a1 = a2;
  operator new[]();
}

{
  *a1 = a2;
  operator new[]();
}

void *llvm::detail::DoubleAPFloat::DoubleAPFloat(void *this, const llvm::detail::DoubleAPFloat *a2)
{
  *this = *(void *)a2;
  if (*((void *)a2 + 1)) {
    operator new[]();
  }
  this[1] = 0;
  return this;
}

llvm::detail::DoubleAPFloat *llvm::detail::DoubleAPFloat::operator=(llvm::detail::DoubleAPFloat *this, llvm::detail::DoubleAPFloat *a2)
{
  if (*(void *)this == *(void *)a2 && (uint64_t v6 = *((void *)a2 + 1)) != 0)
  {
    llvm::APFloat::Storage::operator=(*((void *)this + 1) + 8, (llvm::detail::DoubleAPFloat *)(v6 + 8));
    llvm::APFloat::Storage::operator=(*((void *)this + 1) + 40, (llvm::detail::DoubleAPFloat *)(*((void *)a2 + 1) + 40));
  }
  else if (this != a2)
  {
    unint64_t v4 = (char *)this + 8;
    uint64_t v5 = *((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v5) {
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>((uint64_t)v4, v5);
    }
    llvm::detail::DoubleAPFloat::DoubleAPFloat(this, a2);
  }
  return this;
}

uint64_t llvm::APFloat::add(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v4 = *(void **)(a1 + 8);
  long long v3 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v4 == &llvm::semPPCDoubleDouble) {
    return llvm::detail::DoubleAPFloat::addWithSpecial((int)v3, v3, (llvm::detail::DoubleAPFloat *)(a2 + 8), v3, a3);
  }
  else {
    return llvm::detail::IEEEFloat::addOrSubtract(v3, (const llvm::detail::IEEEFloat *)(a2 + 8), a3, 0);
  }
}

void llvm::APFloat::makeZero(llvm::APFloat *this, int a2)
{
  unint64_t v2 = this;
  if (*((_UNKNOWN **)this + 1) == &llvm::semPPCDoubleDouble)
  {
    do
    {
      llvm::APFloat::makeZero(*((llvm::APFloat **)v2 + 2), a2 & 1);
      int v3 = 0;
      LOBYTE(a2) = 0;
      uint64_t v4 = *((void *)v2 + 2);
      unint64_t v2 = (llvm::APFloat *)(v4 + 32);
    }
    while (*(_UNKNOWN **)(v4 + 40) == &llvm::semPPCDoubleDouble);
  }
  else
  {
    int v3 = a2;
  }
  llvm::detail::IEEEFloat::makeZero((llvm::APFloat *)((char *)v2 + 8), v3);
}

uint64_t llvm::APFloat::compareAbsoluteValue(llvm::APFloat *this, const llvm::APFloat *a2)
{
  uint64_t v4 = (void *)*((void *)this + 1);
  int v3 = (llvm::APFloat *)((char *)this + 8);
  if (v4 == &llvm::semPPCDoubleDouble)
  {
    uint64_t v7 = *((void *)this + 2);
    uint64_t v8 = *((void *)a2 + 2);
    uint64_t result = llvm::APFloat::compareAbsoluteValue((llvm::APFloat *)v7, (const llvm::APFloat *)v8);
    if (result == 1)
    {
      uint64_t v9 = v7 + 32;
      uint64_t v10 = v8 + 32;
      uint64_t result = llvm::APFloat::compareAbsoluteValue((llvm::APFloat *)(v7 + 32), (const llvm::APFloat *)(v8 + 32));
      if ((result & 1) == 0)
      {
        uint64_t v11 = v7;
        if (*(_UNKNOWN **)(v7 + 8) == &llvm::semPPCDoubleDouble) {
          uint64_t v11 = *(void *)(v7 + 16);
        }
        int v12 = *(unsigned __int8 *)(v11 + 28);
        if (*(_UNKNOWN **)(v7 + 40) == &llvm::semPPCDoubleDouble) {
          uint64_t v9 = *(void *)(v7 + 48);
        }
        unsigned int v13 = v12 ^ *(unsigned __int8 *)(v9 + 28);
        uint64_t v14 = v8;
        if (*(_UNKNOWN **)(v8 + 8) == &llvm::semPPCDoubleDouble) {
          uint64_t v14 = *(void *)(v8 + 16);
        }
        int v15 = (v13 >> 3) & 1;
        int v16 = *(unsigned __int8 *)(v14 + 28);
        if (*(_UNKNOWN **)(v8 + 40) == &llvm::semPPCDoubleDouble) {
          uint64_t v10 = *(void *)(v8 + 48);
        }
        unsigned int v17 = ((v16 ^ *(unsigned __int8 *)(v10 + 28)) >> 3) & 1;
        if (((v15 ^ 1) & 1) != 0 || v17)
        {
          if ((v15 ^ 1) & v17)
          {
            return 2;
          }
          else if (v15 | v17) == 1 && (v15 & v17)
          {
            return (2 - result);
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  else
  {
    uint64_t v5 = (const llvm::APFloat *)((char *)a2 + 8);
    return llvm::detail::IEEEFloat::compareAbsoluteValue(v3, v5);
  }
  return result;
}

uint64_t llvm::APFloat::subtract(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  uint64_t v4 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (*(_UNKNOWN **)(a1 + 8) == &llvm::semPPCDoubleDouble)
  {
    llvm::APFloat::changeSign(*(void *)(a1 + 16));
    int v9 = llvm::APFloat::changeSign(*(void *)(a1 + 16) + 32);
    uint64_t v10 = llvm::detail::DoubleAPFloat::addWithSpecial(v9, (int)v3, v4, v3);
    llvm::APFloat::changeSign(*(void *)(a1 + 16));
    llvm::APFloat::changeSign(*(void *)(a1 + 16) + 32);
    return v10;
  }
  else
  {
    uint64_t v5 = (llvm::detail::IEEEFloat *)(a1 + 8);
    uint64_t v6 = (const llvm::detail::IEEEFloat *)(a2 + 8);
    return llvm::detail::IEEEFloat::addOrSubtract(v5, v6, a3, 1);
  }
}

uint64_t llvm::APFloat::changeSign(uint64_t this)
{
  uint64_t v1 = this;
  for (uint64_t i = *(void *)(this + 8); (_UNKNOWN *)i == &llvm::semPPCDoubleDouble; uint64_t i = *(void *)(v3 + 40))
  {
    this = llvm::APFloat::changeSign(*(llvm::APFloat **)(v1 + 16));
    uint64_t v3 = *(void *)(v1 + 16);
    uint64_t v1 = v3 + 32;
  }
  int v4 = *(_DWORD *)(i + 20);
  char v5 = *(unsigned char *)(v1 + 28);
  if (v4 != 2 || (v5 & 5 | 2) != 3) {
    *(unsigned char *)(v1 + 28) = v5 ^ 8;
  }
  return this;
}

uint64_t llvm::detail::DoubleAPFloat::addWithSpecial(int a1, llvm::detail::DoubleAPFloat *a2, llvm::detail::DoubleAPFloat *a3, llvm::detail::DoubleAPFloat *this, int a5)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v9 = *((void *)a2 + 1);
  uint64_t v10 = (const llvm::APFloat::Storage *)(v9 + 8);
  uint64_t v11 = *(void **)(v9 + 8);
  uint64_t v12 = v9;
  if (v11 == &llvm::semPPCDoubleDouble) {
    uint64_t v12 = *(void *)(v9 + 16);
  }
  if ((*(unsigned char *)(v12 + 28) & 7) == 1) {
    goto LABEL_4;
  }
  uint64_t v15 = *((void *)a3 + 1);
  int v16 = *(void **)(v15 + 8);
  uint64_t v17 = v15;
  if (v16 == &llvm::semPPCDoubleDouble) {
    uint64_t v17 = *(void *)(v15 + 16);
  }
  if ((*(unsigned char *)(v17 + 28) & 7) == 1) {
    goto LABEL_11;
  }
  uint64_t v18 = v9;
  if (v11 == &llvm::semPPCDoubleDouble) {
    uint64_t v18 = *(void *)(v9 + 16);
  }
  if ((*(unsigned char *)(v18 + 28) & 7) == 3)
  {
LABEL_11:
    unsigned int v13 = this;
    uint64_t v14 = a3;
    goto LABEL_12;
  }
  uint64_t v21 = *((void *)a3 + 1);
  if (v16 == &llvm::semPPCDoubleDouble) {
    uint64_t v21 = *(void *)(v15 + 16);
  }
  if ((*(unsigned char *)(v21 + 28) & 7) == 3) {
    goto LABEL_4;
  }
  uint64_t v22 = v9;
  if (v11 == &llvm::semPPCDoubleDouble) {
    uint64_t v22 = *(void *)(v9 + 16);
  }
  if ((*(unsigned char *)(v22 + 28) & 7) != 0) {
    goto LABEL_31;
  }
  uint64_t v23 = *((void *)a3 + 1);
  if (v16 == &llvm::semPPCDoubleDouble) {
    uint64_t v23 = *(void *)(v15 + 16);
  }
  if ((*(unsigned char *)(v23 + 28) & 7) != 0) {
    goto LABEL_31;
  }
  uint64_t v24 = v9;
  if (v11 == &llvm::semPPCDoubleDouble) {
    uint64_t v24 = *(void *)(v9 + 16);
  }
  unsigned int v25 = *(unsigned __int8 *)(v24 + 28);
  uint64_t v26 = *((void *)a3 + 1);
  if (v16 == &llvm::semPPCDoubleDouble) {
    uint64_t v26 = *(void *)(v15 + 16);
  }
  if (((v25 >> 3) & 1) == (*(unsigned char *)(v26 + 28) & 8) >> 3)
  {
LABEL_31:
    if (v11 == &llvm::semPPCDoubleDouble) {
      uint64_t v9 = *(void *)(v9 + 16);
    }
    if ((*(unsigned char *)(v9 + 28) & 7) != 0)
    {
      if (v16 == &llvm::semPPCDoubleDouble) {
        uint64_t v15 = *(void *)(v15 + 16);
      }
      if ((*(unsigned char *)(v15 + 28) & 7) == 0) {
        goto LABEL_11;
      }
      llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v59, v10);
      llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v57, (const llvm::APFloat::Storage *)(*((void *)a2 + 1) + 40));
      llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v55, (const llvm::APFloat::Storage *)(*((void *)a3 + 1) + 8));
      llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v53, (const llvm::APFloat::Storage *)(*((void *)a3 + 1) + 40));
      llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)&v66, (const llvm::APFloat::Storage *)v59);
      uint64_t v19 = llvm::APFloat::add((int)v65, (int)v54, a5);
      if (v66 == &llvm::semPPCDoubleDouble) {
        char v28 = *(unsigned char *)(v67 + 28);
      }
      else {
        char v28 = v68;
      }
      if ((v28 & 6) != 0)
      {
        llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v64, (const llvm::APFloat::Storage *)v59);
        int v29 = llvm::APFloat::subtract((uint64_t)v63, (uint64_t)v65, a5);
        llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v61, (const llvm::APFloat::Storage *)v64);
        int v30 = llvm::APFloat::add((int)&v60, (int)v54, a5);
        int v31 = llvm::APFloat::add((int)v63, (int)v65, a5);
        int v32 = llvm::APFloat::subtract((uint64_t)v63, (uint64_t)v58, a5);
        llvm::APFloat::changeSign((uint64_t)v63);
        int v33 = llvm::APFloat::add((int)&v60, (int)v63, a5);
        int v34 = llvm::APFloat::add((int)&v60, (int)&v56, a5);
        uint64_t v35 = v29 | v30 | v31 | v32 | v33 | v34 | llvm::APFloat::add((int)&v60, (int)&v52, a5) | v19;
        if ((_UNKNOWN *)v61[0] == &llvm::semPPCDoubleDouble) {
          char v36 = *(unsigned char *)(v61[1] + 28);
        }
        else {
          char v36 = v62;
        }
        if ((v36 & 7) != 3 || (v36 & 8) != 0)
        {
          llvm::APFloat::Storage::operator=((llvm::detail::IEEEFloat *)(*((void *)this + 1) + 8), (llvm::detail::DoubleAPFloat *)&v66);
          uint64_t v19 = llvm::APFloat::add(*((void *)this + 1), (int)&v60, a5) | v35;
          uint64_t v38 = *((void *)this + 1);
          if (*(_UNKNOWN **)(v38 + 8) == &llvm::semPPCDoubleDouble) {
            char v39 = *(unsigned char *)(*(void *)(v38 + 16) + 28);
          }
          else {
            char v39 = *(unsigned char *)(v38 + 28);
          }
          if ((v39 & 7u) < 2)
          {
            llvm::APFloat::makeZero((llvm::APFloat *)(v38 + 32), 0);
            int v37 = 0;
            uint64_t v35 = v19;
          }
          else
          {
            llvm::APFloat::Storage::operator=((llvm::APFloat::Storage *)(v38 + 40), &v66);
            int v40 = llvm::APFloat::subtract(*((void *)this + 1) + 32, *((void *)this + 1), a5);
            uint64_t v35 = v40 | llvm::APFloat::add(*((void *)this + 1) + 32, (int)&v60, a5) | v19;
            int v37 = 1;
          }
        }
        else
        {
          llvm::APFloat::Storage::operator=((llvm::APFloat::Storage *)(*((void *)this + 1) + 8), &v66);
          llvm::APFloat::makeZero((llvm::APFloat *)(*((void *)this + 1) + 32), 0);
          uint64_t v19 = 0;
          int v37 = 0;
        }
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v61);
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v64);
        if (!v37) {
          goto LABEL_72;
        }
      }
      else
      {
        if ((v28 & 7) != 0) {
          goto LABEL_71;
        }
        int v41 = llvm::APFloat::compareAbsoluteValue((llvm::APFloat *)v58, (const llvm::APFloat *)v54);
        llvm::APFloat::Storage::operator=((llvm::detail::IEEEFloat *)&v66, (llvm::detail::DoubleAPFloat *)v53);
        int v42 = llvm::APFloat::add((int)v65, (int)&v56, a5);
        char v43 = v41 == 2 ? v54 : v58;
        unsigned int v44 = v41 == 2 ? v58 : v54;
        int v51 = (int)v43;
        int v45 = llvm::APFloat::add((int)v65, (int)v43, a5);
        uint64_t v19 = v45 | v42 | llvm::APFloat::add((int)v65, (int)v44, a5);
        char v46 = v66 == &llvm::semPPCDoubleDouble ? *(unsigned char *)(v67 + 28) : v68;
        if ((v46 & 7u) < 2)
        {
LABEL_71:
          llvm::APFloat::Storage::operator=((llvm::APFloat::Storage *)(*((void *)this + 1) + 8), &v66);
          llvm::APFloat::makeZero((llvm::APFloat *)(*((void *)this + 1) + 32), 0);
          goto LABEL_72;
        }
        llvm::APFloat::Storage::operator=((llvm::detail::IEEEFloat *)(*((void *)this + 1) + 8), (llvm::detail::DoubleAPFloat *)&v66);
        llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v64, (const llvm::APFloat::Storage *)v57);
        int v50 = llvm::APFloat::add((int)v63, (int)&v52, a5);
        if (v41 == 2) {
          uint64_t v47 = (llvm::detail::DoubleAPFloat *)v59;
        }
        else {
          uint64_t v47 = (llvm::detail::DoubleAPFloat *)v55;
        }
        llvm::APFloat::Storage::operator=((llvm::detail::IEEEFloat *)(*((void *)this + 1) + 40), v47);
        int v48 = llvm::APFloat::subtract(*((void *)this + 1) + 32, (uint64_t)v65, a5);
        int v49 = llvm::APFloat::add(*((void *)this + 1) + 32, v51, a5);
        uint64_t v35 = v50 | v48 | v49 | llvm::APFloat::add(*((void *)this + 1) + 32, (int)v63, a5) | v19;
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v64);
      }
      uint64_t v19 = v35;
LABEL_72:
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v66);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v53);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v55);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v57);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v59);
      return v19;
    }
LABEL_4:
    unsigned int v13 = this;
    uint64_t v14 = a2;
LABEL_12:
    llvm::detail::DoubleAPFloat::operator=(v13, v14);
    return 0;
  }
  uint64_t v27 = *((void *)this + 1);
  if (*(_UNKNOWN **)(v27 + 8) == &llvm::semPPCDoubleDouble) {
    uint64_t v27 = *(void *)(v27 + 16);
  }
  llvm::detail::DoubleAPFloat::makeNaN((llvm::APFloat **)this, 0, (*(unsigned char *)(v27 + 28) & 8) != 0, 0);
  return 1;
}

void llvm::detail::DoubleAPFloat::makeNaN(llvm::APFloat **this, char a2, char a3, const llvm::APInt *a4)
{
  llvm::APFloat::makeNaN(this[1], a2, a3, a4);
  char v5 = (llvm::APFloat *)((char *)this[1] + 32);
  llvm::APFloat::makeZero(v5, 0);
}

uint64_t llvm::detail::DoubleAPFloat::multiply(llvm::detail::DoubleAPFloat *this, llvm::detail::DoubleAPFloat *a2, uint64_t a3)
{
  int v4 = a2;
  v46[3] = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *(void **)(v6 + 8);
  uint64_t v8 = v6;
  if (v7 == &llvm::semPPCDoubleDouble) {
    uint64_t v8 = *(void *)(v6 + 16);
  }
  if ((*(unsigned char *)(v8 + 28) & 7) == 1)
  {
LABEL_4:
    uint64_t v9 = this;
    a2 = this;
LABEL_9:
    llvm::detail::DoubleAPFloat::operator=(v9, a2);
    return 0;
  }
  uint64_t v10 = *((void *)a2 + 1);
  uint64_t v11 = *(void **)(v10 + 8);
  uint64_t v12 = v10;
  if (v11 == &llvm::semPPCDoubleDouble) {
    uint64_t v12 = *(void *)(v10 + 16);
  }
  if ((*(unsigned char *)(v12 + 28) & 7) == 1) {
    goto LABEL_8;
  }
  uint64_t v15 = v6;
  if (v7 == &llvm::semPPCDoubleDouble) {
    uint64_t v15 = *(void *)(v6 + 16);
  }
  if ((*(unsigned char *)(v15 + 28) & 7) == 3)
  {
    uint64_t v16 = *((void *)a2 + 1);
    if (v11 == &llvm::semPPCDoubleDouble) {
      uint64_t v16 = *(void *)(v10 + 16);
    }
    if ((*(unsigned char *)(v16 + 28) & 7) == 0) {
      goto LABEL_24;
    }
  }
  uint64_t v17 = v6;
  if (v7 == &llvm::semPPCDoubleDouble) {
    uint64_t v17 = *(void *)(v6 + 16);
  }
  if ((*(unsigned char *)(v17 + 28) & 7) == 0)
  {
    uint64_t v18 = *((void *)a2 + 1);
    if (v11 == &llvm::semPPCDoubleDouble) {
      uint64_t v18 = *(void *)(v10 + 16);
    }
    if ((*(unsigned char *)(v18 + 28) & 7) == 3)
    {
LABEL_24:
      llvm::APFloat::makeNaN((llvm::APFloat *)v6, 0, 0, 0);
      llvm::APFloat::makeZero((llvm::APFloat *)(*((void *)this + 1) + 32), 0);
      return 0;
    }
  }
  if (v7 == &llvm::semPPCDoubleDouble) {
    char v19 = *(unsigned char *)(*(void *)(v6 + 16) + 28);
  }
  else {
    char v19 = *(unsigned char *)(v6 + 28);
  }
  int v20 = v19 & 7;
  if (v20 == 3 || !v20) {
    goto LABEL_4;
  }
  if (v11 == &llvm::semPPCDoubleDouble) {
    uint64_t v10 = *(void *)(v10 + 16);
  }
  int v21 = *(unsigned char *)(v10 + 28) & 7;
  if (v21 == 3 || !v21)
  {
LABEL_8:
    uint64_t v9 = this;
    goto LABEL_9;
  }
  llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v46, (const llvm::APFloat::Storage *)(v6 + 8));
  llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v45, (const llvm::APFloat::Storage *)(*((void *)this + 1) + 40));
  llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v44, (const llvm::APFloat::Storage *)(*((void *)v4 + 1) + 8));
  llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v42, (const llvm::APFloat::Storage *)(*((void *)v4 + 1) + 40));
  llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v39, (const llvm::APFloat::Storage *)v46);
  uint64_t v13 = llvm::APFloat::multiply(v38, v43, a3);
  if ((_UNKNOWN *)v39[0] == &llvm::semPPCDoubleDouble) {
    char v22 = *(unsigned char *)(v39[1] + 28);
  }
  else {
    char v22 = v40;
  }
  if ((v22 & 6) != 0 && (v22 & 7) != 3)
  {
    llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v37, (const llvm::APFloat::Storage *)v46);
    llvm::APFloat::changeSign((uint64_t)v38);
    int v30 = llvm::APFloat::fusedMultiplyAdd((uint64_t)v36, (uint64_t)v43, (uint64_t)v38, a3);
    llvm::APFloat::changeSign((uint64_t)v38);
    llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v34, (const llvm::APFloat::Storage *)v46);
    int v29 = llvm::APFloat::multiply(v33, v41, a3);
    llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v32, (const llvm::APFloat::Storage *)v45);
    int v28 = llvm::APFloat::multiply(v31, v43, a3);
    int v23 = llvm::APFloat::add((uint64_t)v33, (uint64_t)v31, a3);
    int v24 = llvm::APFloat::add((uint64_t)v36, (uint64_t)v33, a3);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v32);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v34);
    llvm::APFloat::Storage::Storage(v25, (const llvm::APFloat::Storage *)v39);
    uint64_t v13 = v30 | v29 | v28 | v23 | v24 | llvm::APFloat::add((uint64_t)v33, (uint64_t)v36, a3) | v13;
    llvm::APFloat::Storage::operator=((llvm::detail::IEEEFloat *)(*((void *)this + 1) + 8), (llvm::detail::DoubleAPFloat *)v34);
    if ((_UNKNOWN *)v34[0] == &llvm::semPPCDoubleDouble) {
      char v26 = *(unsigned char *)(v34[1] + 28);
    }
    else {
      char v26 = v35;
    }
    if ((v26 & 7u) < 2)
    {
      llvm::APFloat::makeZero((llvm::APFloat *)(*((void *)this + 1) + 32), 0);
    }
    else
    {
      int v27 = llvm::APFloat::subtract((uint64_t)v38, (uint64_t)v33, a3);
      uint64_t v13 = v27 | llvm::APFloat::add((uint64_t)v38, (uint64_t)v36, a3) | v13;
      llvm::APFloat::Storage::operator=((llvm::detail::IEEEFloat *)(*((void *)this + 1) + 40), (llvm::detail::DoubleAPFloat *)v39);
    }
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v34);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v37);
  }
  else
  {
    llvm::APFloat::Storage::operator=((llvm::detail::IEEEFloat *)(*((void *)this + 1) + 8), (llvm::detail::DoubleAPFloat *)v39);
    llvm::APFloat::makeZero((llvm::APFloat *)(*((void *)this + 1) + 32), 0);
  }
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v39);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v42);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v44);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v45);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v46);
  return v13;
}

uint64_t llvm::APFloat::multiply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(void **)(a1 + 8);
  uint64_t v3 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  char v5 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v4 == &llvm::semPPCDoubleDouble) {
    return llvm::detail::DoubleAPFloat::multiply(v3, v5, a3);
  }
  else {
    return llvm::detail::IEEEFloat::multiply(v3, v5, a3);
  }
}

uint64_t llvm::APFloat::fusedMultiplyAdd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = *(void **)(a1 + 8);
  int v4 = (llvm::APFloat **)(a1 + 8);
  uint64_t v6 = (llvm::APFloat **)(a2 + 8);
  uint64_t v7 = (llvm::APFloat **)(a3 + 8);
  if (v5 == &llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::fusedMultiplyAdd(v4, v6, v7, a4);
  }
  return llvm::detail::IEEEFloat::fusedMultiplyAdd((llvm::detail::IEEEFloat *)v4, (llvm::detail::IEEEFloat *)v6, (llvm::detail::IEEEFloat *)v7, a4);
}

void llvm::detail::DoubleAPFloat::divide(llvm::APFloat **a1, llvm::APFloat **a2, uint64_t a3)
{
  v10[3] = *MEMORY[0x263EF8340];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (llvm::APInt *)&v7);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v10, &v7);
  if (v8[0] >= 0x41u && v7) {
    MEMORY[0x263E50080](v7, 0x1000C8000313F17);
  }
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (llvm::APInt *)&v5);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v8, &v5);
  llvm::APFloat::divide(v9, &v7, a3);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v8);
  if (v6 >= 0x41)
  {
    if (v5) {
      MEMORY[0x263E50080](v5, 0x1000C8000313F17);
    }
  }
  llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v5, (llvm::APFloat *)v9);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v7, (uint64_t)&llvm::semPPCDoubleDouble);
}

uint64_t llvm::detail::DoubleAPFloat::bitcastToAPInt@<X0>(llvm::APFloat **this@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  llvm::APFloat::bitcastToAPInt((uint64_t *)&v8, this[1]);
  if (v9 >= 0x41) {
    int v4 = v8;
  }
  else {
    int v4 = (uint64_t *)&v8;
  }
  uint64_t v10 = *v4;
  llvm::APFloat::bitcastToAPInt((uint64_t *)&v6, (llvm::APFloat *)((char *)this[1] + 32));
  if (v7 > 0x40)
  {
    uint64_t v11 = (void *)*v6;
    MEMORY[0x263E50080]();
  }
  else
  {
    uint64_t v11 = v6;
  }
  if (v9 >= 0x41 && v8) {
    MEMORY[0x263E50080](v8, 0x1000C8000313F17);
  }
  *((_DWORD *)a2 + 2) = 128;
  return llvm::APInt::initFromArray(a2, &v10);
}

uint64_t llvm::APFloat::divide(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(void **)(a1 + 8);
  uint64_t v3 = (llvm::APFloat **)(a1 + 8);
  char v5 = (llvm::APFloat **)(a2 + 8);
  if (v4 == &llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::divide(v3, v5, a3);
  }
  return llvm::detail::IEEEFloat::divide((llvm::detail::IEEEFloat *)v3, (const llvm::detail::IEEEFloat *)v5, a3);
}

uint64_t *llvm::APFloat::bitcastToAPInt@<X0>(llvm::APInt *__return_ptr a1@<X8>, llvm::APFloat *this@<X0>)
{
  uint64_t v3 = (void *)*((void *)this + 1);
  unint64_t v2 = (llvm::APFloat **)((char *)this + 8);
  if (v3 == &llvm::semPPCDoubleDouble) {
    return (uint64_t *)llvm::detail::DoubleAPFloat::bitcastToAPInt(v2, a1);
  }
  else {
    return (uint64_t *)llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v2, a1);
  }
}

void *llvm::detail::DoubleAPFloat::operator=(void *a1, void *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = (uint64_t)(a1 + 1);
    uint64_t v5 = a1[1];
    a1[1] = 0;
    if (v5) {
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>(v4, v5);
    }
    *a1 = *a2;
    uint64_t v6 = a2[1];
    a2[1] = 0;
    a1[1] = v6;
    *a2 = &llvm::semBogus;
  }
  return a1;
}

void llvm::detail::DoubleAPFloat::mod(llvm::APFloat **this, llvm::APFloat **a2)
{
  v8[3] = *MEMORY[0x263EF8340];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(this, (llvm::APInt *)&v5);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v8, &v5);
  if (v6[0] >= 0x41u && v5) {
    MEMORY[0x263E50080](v5, 0x1000C8000313F17);
  }
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (llvm::APInt *)&v3);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v6, &v3);
  llvm::APFloat::mod((llvm::APFloat *)v7, (const llvm::APFloat *)&v5);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v6);
  if (v4 >= 0x41)
  {
    if (v3) {
      MEMORY[0x263E50080](v3, 0x1000C8000313F17);
    }
  }
  llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v3, (llvm::APFloat *)v7);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v5, (uint64_t)&llvm::semPPCDoubleDouble);
}

uint64_t llvm::APFloat::mod(llvm::APFloat *this, const llvm::APFloat *a2)
{
  uint64_t v3 = (void *)*((void *)this + 1);
  unint64_t v2 = (llvm::APFloat **)((char *)this + 8);
  unsigned int v4 = (llvm::APFloat **)((char *)a2 + 8);
  if (v3 == &llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::mod(v2, v4);
  }
  return llvm::detail::IEEEFloat::mod((llvm::detail::IEEEFloat *)v2, (const llvm::detail::IEEEFloat *)v4);
}

void llvm::detail::DoubleAPFloat::fusedMultiplyAdd(llvm::APFloat **a1, llvm::APFloat **a2, llvm::APFloat **a3, uint64_t a4)
{
  v16[3] = *MEMORY[0x263EF8340];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (llvm::APInt *)&v13);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v16, &v13);
  if (v14[0] >= 0x41u && v13) {
    MEMORY[0x263E50080](v13, 0x1000C8000313F17);
  }
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (llvm::APInt *)&v9);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v14, &v9);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a3, (llvm::APInt *)&v7);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v12, &v7);
  llvm::APFloat::fusedMultiplyAdd(v15, &v13, &v11, a4);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v12);
  if (v8 >= 0x41 && v7) {
    MEMORY[0x263E50080](v7, 0x1000C8000313F17);
  }
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v14);
  if (v10 >= 0x41)
  {
    if (v9) {
      MEMORY[0x263E50080](v9, 0x1000C8000313F17);
    }
  }
  llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v11, (llvm::APFloat *)v15);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v13, (uint64_t)&llvm::semPPCDoubleDouble);
}

void llvm::APFloat::makeInf(llvm::APFloat *this, char a2)
{
  unsigned int v4 = (void *)*((void *)this + 1);
  uint64_t v3 = (llvm::APFloat *)((char *)this + 8);
  if (v4 == &llvm::semPPCDoubleDouble)
  {
    llvm::APFloat::makeInf(*((llvm::APFloat **)this + 2), a2);
    uint64_t v5 = (llvm::APFloat *)(*((void *)this + 2) + 32);
    llvm::APFloat::makeZero(v5, 0);
  }
  else
  {
    llvm::detail::IEEEFloat::makeInf(v3, a2);
  }
}

void llvm::APFloat::makeNaN(llvm::APFloat *this, char a2, char a3, const llvm::APInt *a4)
{
  uint64_t v6 = (void *)*((void *)this + 1);
  uint64_t v5 = (llvm::APFloat *)((char *)this + 8);
  if (v6 == &llvm::semPPCDoubleDouble)
  {
    llvm::APFloat::makeNaN(*((llvm::APFloat **)this + 2), a2, a3, a4);
    unsigned int v7 = (llvm::APFloat *)(*((void *)this + 2) + 32);
    llvm::APFloat::makeZero(v7, 0);
  }
  else
  {
    llvm::detail::IEEEFloat::makeNaN(v5, a2, a3, a4);
  }
}

uint64_t llvm::detail::DoubleAPFloat::compare(llvm::APFloat **this, const llvm::APFloat **a2)
{
  uint64_t result = llvm::APFloat::compare(this[1], a2[1]);
  if (result == 1)
  {
    uint64_t v5 = (llvm::APFloat *)((char *)this[1] + 32);
    uint64_t v6 = (const llvm::APFloat *)((char *)a2[1] + 32);
    return llvm::APFloat::compare(v5, v6);
  }
  return result;
}

uint64_t llvm::APFloat::compare(llvm::APFloat *this, const llvm::APFloat *a2)
{
  uint64_t v3 = (void *)*((void *)this + 1);
  unint64_t v2 = (llvm::APFloat **)((char *)this + 8);
  unsigned int v4 = (const llvm::APFloat **)((char *)a2 + 8);
  if (v3 == &llvm::semPPCDoubleDouble) {
    return llvm::detail::DoubleAPFloat::compare(v2, v4);
  }
  else {
    return llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v2, (const llvm::detail::IEEEFloat *)v4);
  }
}

uint64_t llvm::detail::DoubleAPFloat::bitwiseIsEqual(llvm::APFloat **this, const llvm::APFloat **a2)
{
  uint64_t result = llvm::APFloat::bitwiseIsEqual(this[1], a2[1]);
  if (result)
  {
    uint64_t v5 = (llvm::APFloat *)((char *)this[1] + 32);
    uint64_t v6 = (const llvm::APFloat *)((char *)a2[1] + 32);
    return llvm::APFloat::bitwiseIsEqual(v5, v6);
  }
  return result;
}

uint64_t llvm::APFloat::bitwiseIsEqual(llvm::APFloat *this, const llvm::APFloat *a2)
{
  unsigned int v4 = (void *)*((void *)this + 1);
  unint64_t v2 = (llvm::APFloat **)((char *)this + 8);
  uint64_t v3 = v4;
  uint64_t v6 = (void *)*((void *)a2 + 1);
  uint64_t v5 = (const llvm::APFloat **)((char *)a2 + 8);
  if (v3 != v6) {
    return 0;
  }
  if (v3 == &llvm::semPPCDoubleDouble) {
    return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v2, v5);
  }
  return llvm::detail::IEEEFloat::bitwiseIsEqual((llvm::detail::IEEEFloat *)v2, (const llvm::detail::IEEEFloat *)v5);
}

unint64_t llvm::detail::hash_value(llvm::detail *this, const llvm::detail::DoubleAPFloat *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = (llvm *)*((void *)this + 1);
  if (v3)
  {
    uint64_t v9 = llvm::hash_value(v3, a2);
    uint64_t v8 = llvm::hash_value((llvm *)(*((void *)this + 1) + 32), v4);
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v10);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v10, 0, v10, v11, &v9, &v8);
  }
  else
  {
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v10);
    uint64_t v6 = v12 ^ HIDWORD(*(void *)this);
    unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *(void *)this + 8) ^ v6);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  }
}

unint64_t llvm::hash_value(llvm *this, const llvm::APFloat *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5 = (void *)*((void *)this + 1);
  unsigned int v4 = (llvm *)((char *)this + 8);
  if (v5 == &llvm::semPPCDoubleDouble) {
    return llvm::detail::hash_value(v4, a2);
  }
  else {
    return llvm::detail::hash_value((llvm::hashing::detail::hash_state **)v4, a2, a3, a4);
  }
}

void llvm::detail::DoubleAPFloat::convertFromString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[3] = *MEMORY[0x263EF8340];
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v10, (uint64_t)&llvm::semPPCDoubleDoubleLegacy);
  llvm::APFloat::convertFromString(v9, a2, a3, a4);
  llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v7, (llvm::APFloat *)v9);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v8, (uint64_t)&llvm::semPPCDoubleDouble);
}

void llvm::APFloat::convertFromString(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = (llvm::detail::IEEEFloat *)(a1 + 8);
  if (v6 == &llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::convertFromString((uint64_t)v5, (uint64_t)a2, a3, a4);
  }
  llvm::detail::IEEEFloat::convertFromString(v5, a2, a3, a4, a5);
}

uint64_t llvm::detail::DoubleAPFloat::convertToInteger(llvm::APFloat **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v18[3] = *MEMORY[0x263EF8340];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (llvm::APInt *)&v15);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v18, &v15);
  uint64_t v13 = llvm::APFloat::convertToInteger(v17, a2, a3, a4, a5, a6, a7);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v18);
  if (v16 >= 0x41 && v15) {
    MEMORY[0x263E50080](v15, 0x1000C8000313F17);
  }
  return v13;
}

uint64_t llvm::APFloat::convertToInteger(uint64_t a1, llvm::APInt *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  long long v8 = *(void **)(a1 + 8);
  uint64_t v7 = (llvm::APFloat **)(a1 + 8);
  if (v8 == &llvm::semPPCDoubleDouble) {
    return llvm::detail::DoubleAPFloat::convertToInteger(v7, (uint64_t)a2, a3, a4, a5, a6, (uint64_t)a7);
  }
  else {
    return llvm::detail::IEEEFloat::convertToInteger((uint64_t)v7, a2, a3, a4, a5, a6, a7);
  }
}

void llvm::detail::DoubleAPFloat::convertFromAPInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[3] = *MEMORY[0x263EF8340];
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v10, (uint64_t)&llvm::semPPCDoubleDoubleLegacy);
  llvm::APFloat::convertFromAPInt(v9, a2, a3, a4);
  llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v7, (llvm::APFloat *)v9);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v8, (uint64_t)&llvm::semPPCDoubleDouble);
}

uint64_t llvm::APFloat::convertFromAPInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)(a1 + 8);
  unsigned int v4 = (llvm::APInt *)(a1 + 8);
  if (v5 == &llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::convertFromAPInt((uint64_t)v4, a2, a3, a4);
  }
  return llvm::detail::IEEEFloat::convertFromAPInt(v4, a2, a3, a4);
}

void llvm::detail::DoubleAPFloat::toString(llvm::APFloat **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[3] = *MEMORY[0x263EF8340];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (llvm::APInt *)&v9);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v12, &v9);
  llvm::APFloat::toString(v11, a2, a3, a4, a5);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v12);
  if (v10 >= 0x41)
  {
    if (v9) {
      MEMORY[0x263E50080](v9, 0x1000C8000313F17);
    }
  }
}

void llvm::APFloat::toString(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = (llvm::APFloat **)(a1 + 8);
  if (v6 == &llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::toString(v5, (uint64_t)a2, a3, a4, a5);
  }
  else {
    llvm::detail::IEEEFloat::toString((uint64_t)v5, a2, a3, a4, a5);
  }
}

void *llvm::APFloat::Storage::Storage(void *a1, uint64_t *a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a3 == &llvm::semPPCDoubleDouble)
  {
    uint64_t v4 = *a2;
    uint64_t v6 = &llvm::semBogus;
    llvm::detail::IEEEFloat::operator=((uint64_t)&v6, (uint64_t)a2);
    llvm::APFloat::APFloat(v8, &v6, v4);
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v7, (uint64_t)&llvm::semIEEEdouble);
    llvm::detail::DoubleAPFloat::DoubleAPFloat(a1, (uint64_t)&llvm::semPPCDoubleDouble);
  }
  *a1 = &llvm::semBogus;
  llvm::detail::IEEEFloat::operator=((uint64_t)a1, (uint64_t)a2);
  return a1;
}

uint64_t llvm::APFloat::APFloat(uint64_t a1, void *a2, char *a3, unint64_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  llvm::APFloat::Storage::Storage<>((llvm::detail::IEEEFloat *)(a1 + 8), a2);
  llvm::APFloat::convertFromString(a1, a3, a4, 1, (uint64_t)&v11);
  char v7 = v12;
  if (v12)
  {
    uint64_t v8 = v11;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v10 = v8;
  llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v10);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if ((v7 & 1) != 0 && v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return a1;
}

uint64_t llvm::APFloat::convert(uint64_t a1, void *a2, int a3, unsigned char *a4)
{
  v16[3] = *(void **)MEMORY[0x263EF8340];
  uint64_t v5 = (llvm::APFloat::Storage *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4 == a2)
  {
    uint64_t v9 = 0;
    *a4 = 0;
    return v9;
  }
  if (v4 == &llvm::semPPCDoubleDouble)
  {
    uint64_t v9 = llvm::detail::IEEEFloat::convert((uint64_t *)(*(void *)(a1 + 16) + 8), (uint64_t)a2, a3, a4);
    uint64_t v11 = (uint64_t)v5;
    if (*(_UNKNOWN **)(a1 + 8) == &llvm::semPPCDoubleDouble) {
      uint64_t v11 = *(void *)(a1 + 16) + 8;
    }
    char v12 = &llvm::semBogus;
    llvm::detail::IEEEFloat::operator=((uint64_t)&v12, v11);
    llvm::APFloat::APFloat((uint64_t)v15, (uint64_t)&v12, a2);
    llvm::APFloat::Storage::operator=(v5, v16);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v16);
    if ((v12[2] - 64) <= 0xFFFFFF7F && v13) {
      MEMORY[0x263E50080](v13, 0x1000C8000313F17);
    }
    return v9;
  }
  if (a2 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::IEEEFloat::convert((uint64_t *)(a1 + 8), (uint64_t)&llvm::semPPCDoubleDoubleLegacy, a3, a4);
    llvm::detail::IEEEFloat::bitcastToAPInt(v5, (llvm::APInt *)&v14);
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v16, (uint64_t)&llvm::semPPCDoubleDouble);
  }
  char v7 = (uint64_t *)(a1 + 8);
  return llvm::detail::IEEEFloat::convert(v7, (uint64_t)a2, a3, a4);
}

llvm::detail::IEEEFloat *llvm::APFloat::getAllOnesValue@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  llvm::APInt::APInt((llvm::APInt *)&v5, a1[3], -1);
  uint64_t result = llvm::APFloat::Storage::Storage<llvm::APInt const&>((llvm::detail::IEEEFloat *)(a2 + 8), a1, &v5);
  if (v6 >= 0x41)
  {
    uint64_t result = v5;
    if (v5) {
      return (llvm::detail::IEEEFloat *)MEMORY[0x263E50080](v5, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::APFloat::convertToInteger(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  v15[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  uint64_t v13 = v15;
  uint64_t v14 = 0x400000000;
  llvm::SmallVectorImpl<unsigned long long>::resizeImpl<false>((uint64_t)&v13, (unint64_t)(v8 + 63) >> 6);
  uint64_t v9 = llvm::APFloat::convertToInteger(a1, (llvm::APInt *)v13, v14, v8, *(unsigned char *)(a2 + 12) == 0, a3, a4);
  int v12 = v8;
  llvm::APInt::initFromArray((llvm::APInt *)&v11, v13);
  if (*(_DWORD *)(a2 + 8) >= 0x41u && *(void *)a2) {
    MEMORY[0x263E50080](*(void *)a2, 0x1000C8000313F17);
  }
  *(void *)a2 = v11;
  *(_DWORD *)(a2 + 8) = v12;
  int v12 = 0;
  if (v13 != v15) {
    free(v13);
  }
  return v9;
}

double llvm::APFloat::convertToDouble(void **this)
{
  v7[3] = *MEMORY[0x263EF8340];
  if (this[1] == &llvm::semIEEEdouble)
  {
    uint64_t v4 = (llvm::detail::IEEEFloat *)(this + 1);
    return llvm::detail::IEEEFloat::convertToDouble(v4);
  }
  else
  {
    llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v7, (const llvm::APFloat::Storage *)(this + 1));
    llvm::APFloat::convert((uint64_t)v6, &llvm::semIEEEdouble, 1, &v5);
    if ((_UNKNOWN *)v7[0] == &llvm::semPPCDoubleDouble) {
      uint64_t v1 = (llvm::detail::IEEEFloat *)(v7[1] + 8);
    }
    else {
      uint64_t v1 = (llvm::detail::IEEEFloat *)v7;
    }
    double v2 = llvm::detail::IEEEFloat::convertToDouble(v1);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v7);
    return v2;
  }
}

llvm::APInt *llvm::APInt::APInt(llvm::APInt *this, unsigned int a2, uint64_t a3)
{
  *((_DWORD *)this + 2) = a2;
  if (a2 > 0x40) {
    llvm::APInt::initSlowCase(this);
  }
  *(void *)this = a3;
  llvm::APInt::clearUnusedBits((uint64_t)this);
  return this;
}

uint64_t llvm::APInt::clearUnusedBits(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 8);
  if (v1)
  {
    unint64_t v2 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
    if (v1 >= 0x41)
    {
      uint64_t v3 = (void *)(*(void *)this + 8 * (((unint64_t)(v1 + 63) >> 6) - 1));
      goto LABEL_5;
    }
  }
  else
  {
    unint64_t v2 = 0;
  }
  uint64_t v3 = (void *)this;
LABEL_5:
  *v3 &= v2;
  return this;
}

uint64_t llvm::APInt::flipAllBits(uint64_t this)
{
  if (*(_DWORD *)(this + 8) > 0x40u) {
    return llvm::APInt::flipAllBitsSlowCase(this);
  }
  *(void *)this = ~*(void *)this;
  return llvm::APInt::clearUnusedBits(this);
}

uint64_t llvm::APFloat::APFloat(uint64_t a1, uint64_t a2, void *a3)
{
  char v5 = (void *)(a1 + 8);
  char v7 = &llvm::semBogus;
  llvm::detail::IEEEFloat::operator=((uint64_t)&v7, a2);
  llvm::APFloat::Storage::Storage(v5, (uint64_t *)&v7, a3);
  if ((v7[2] - 64) <= 0xFFFFFF7F && v8) {
    MEMORY[0x263E50080](v8, 0x1000C8000313F17);
  }
  return a1;
}

llvm::APFloat::Storage *llvm::APFloat::Storage::operator=(llvm::APFloat::Storage *a1, void **a2)
{
  uint64_t v4 = *a2;
  if (*(_UNKNOWN **)a1 == &llvm::semPPCDoubleDouble)
  {
    if (v4 == &llvm::semPPCDoubleDouble)
    {
      llvm::detail::DoubleAPFloat::operator=(a1, a2);
      return a1;
    }
  }
  else if (v4 != &llvm::semPPCDoubleDouble)
  {
LABEL_8:
    llvm::detail::IEEEFloat::operator=((uint64_t)a1, (uint64_t)a2);
    return a1;
  }
  if (a1 != (llvm::APFloat::Storage *)a2)
  {
    llvm::APFloat::Storage::~Storage(a1);
    if (*a2 == &llvm::semPPCDoubleDouble)
    {
      *(void *)a1 = &llvm::semPPCDoubleDouble;
      unsigned int v6 = a2[1];
      a2[1] = 0;
      *((void *)a1 + 1) = v6;
      *a2 = &llvm::semBogus;
      return a1;
    }
    *(void *)a1 = &llvm::semBogus;
    goto LABEL_8;
  }
  return a1;
}

void llvm::APFloat::Storage::~Storage(llvm::APFloat::Storage *this)
{
  if (*(_UNKNOWN **)this == &llvm::semPPCDoubleDouble)
  {
    uint64_t v3 = (char *)this + 8;
    uint64_t v4 = *((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v4) {
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>((uint64_t)v3, v4);
    }
  }
  else if ((*(_DWORD *)(*(void *)this + 8) - 64) <= 0xFFFFFF7F)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      MEMORY[0x263E50080](v2, 0x1000C8000313F17);
    }
  }
}

llvm::detail::IEEEFloat *llvm::APFloat::Storage::Storage<llvm::APInt const&>(llvm::detail::IEEEFloat *a1, void *a2, const llvm::APInt **a3)
{
  if (a2 == &llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(a1, (uint64_t)&llvm::semPPCDoubleDouble);
  }
  llvm::detail::IEEEFloat::initFromAPInt(a1, a2, a3);
  return a1;
}

llvm::detail::IEEEFloat *llvm::APFloat::Storage::Storage(llvm::APFloat::Storage *this, const llvm::APFloat::Storage *a2)
{
  if (*(_UNKNOWN **)a2 == &llvm::semPPCDoubleDouble) {
    return (llvm::detail::IEEEFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(this, a2);
  }
  else {
    return llvm::detail::IEEEFloat::IEEEFloat(this, a2);
  }
}

llvm::detail::IEEEFloat *llvm::APFloat::Storage::operator=(llvm::detail::IEEEFloat *result, llvm::detail::DoubleAPFloat *a2)
{
  uint64_t v3 = *(void **)a2;
  if (*(_UNKNOWN **)result == &llvm::semPPCDoubleDouble)
  {
    if (v3 == &llvm::semPPCDoubleDouble) {
      return llvm::detail::DoubleAPFloat::operator=(result, a2);
    }
  }
  else if (v3 != &llvm::semPPCDoubleDouble)
  {
    return llvm::detail::IEEEFloat::operator=(result, a2);
  }
  if (result != a2)
  {
    llvm::APFloat::Storage::~Storage(result);
    return llvm::APFloat::Storage::Storage(v4, a2);
  }
  return result;
}

void std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a2 - 8);
    if (v2)
    {
      uint64_t v3 = a2 - 24;
      uint64_t v4 = 32 * v2;
      do
      {
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)(v3 + v4));
        v4 -= 32;
      }
      while (v4);
    }
    JUMPOUT(0x263E50080);
  }
}

llvm::detail::IEEEFloat *llvm::APFloat::Storage::Storage<>(llvm::detail::IEEEFloat *a1, void *a2)
{
  if (a2 == &llvm::semPPCDoubleDouble) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(a1, (uint64_t)&llvm::semPPCDoubleDouble);
  }
  return llvm::detail::IEEEFloat::IEEEFloat(a1, (uint64_t)a2);
}

uint64_t llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper(uint64_t this)
{
  *(void *)(this + 112) = 0;
  *(_OWORD *)(this + 80) = 0u;
  *(_OWORD *)(this + 96) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 64) = 0u;
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)this = 0u;
  unint64_t v1 = 0x26A955000uLL;
  {
    uint64_t v5 = this;
    unint64_t v1 = 0x26A955000uLL;
    int v3 = v2;
    this = v5;
    if (v3)
    {
      unint64_t v4 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v4 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v4;
      unint64_t v1 = 0x26A955000;
      this = v5;
    }
  }
  *(void *)(this + 120) = *(void *)(v1 + 1016);
  return this;
}

unsigned char *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>(uint64_t a1, uint64_t *a2, unsigned char *__dst, unint64_t a4, char a5)
{
  char __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    void *__dst = a5;
    return __dst + 1;
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    if (*a2)
    {
      llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)(a1 + 64), (llvm::hashing::detail::hash_state *)a1, v9, v10);
      uint64_t v11 = *a2 + 64;
    }
    else
    {
      llvm::hashing::detail::hash_state::create((llvm::hashing::detail::hash_state *)a1, *(void *)(a1 + 120), v9, v10, (llvm::hashing::detail::hash_state *)v14);
      long long v12 = v14[1];
      *(_OWORD *)(a1 + 64) = v14[0];
      *(_OWORD *)(a1 + 80) = v12;
      *(_OWORD *)(a1 + 96) = v14[2];
      *(void *)(a1 + 112) = v15;
      uint64_t v11 = 64;
    }
    *a2 = v11;
    if (a1 + 1 - v8 <= a4)
    {
      memcpy((void *)a1, &__src + v8, 1 - v8);
      a1 += 1 - v8;
    }
  }
  return (unsigned char *)a1;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,unsigned int>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, unsigned char *a3, char *a4, char *a5, int *a6)
{
  unint64_t v12 = a2;
  uint64_t v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v12, a3, (unint64_t)a4, *a5);
  unint64_t v13 = v12;
  uint64_t v10 = (char *)llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v13, v9, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v13, v10, a4);
}

void *llvm::hashing::detail::hash_state::create@<X0>(llvm::hashing::detail::hash_state *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, llvm::hashing::detail::hash_state *a5@<X8>)
{
  *(void *)a5 = 0;
  *((void *)a5 + 1) = a2;
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (a2 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (a2 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
  *((void *)a5 + 2) = 0x9DDFEA08EB382D69 * (v5 ^ (v5 >> 47));
  *((void *)a5 + 3) = __ROR8__(a2 ^ 0xB492B66FBE98F273, 49);
  unint64_t v6 = a2 ^ (a2 >> 47);
  *((void *)a5 + 4) = 0xB492B66FBE98F273 * a2;
  *((void *)a5 + 5) = v6;
  *((void *)a5 + 6) = 0x9DDFEA08EB382D69
                      * ((0x9DDFEA08EB382D69
                        * (a2 ^ (((0x9DDFEA08EB382D69 * (v6 ^ (0xB492B66FBE98F273 * a2))) ^ a2) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (0xB492B66FBE98F273 * a2))))) ^ ((0x9DDFEA08EB382D69 * (a2 ^ (((0x9DDFEA08EB382D69 * (v6 ^ (0xB492B66FBE98F273 * a2))) ^ a2) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (0xB492B66FBE98F273 * a2))))) >> 47));
  return llvm::hashing::detail::hash_state::mix(a5, this, a3, a4);
}

void *llvm::hashing::detail::hash_state::mix(llvm::hashing::detail::hash_state *this, llvm::hashing::detail::hash_state *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *((void *)this + 3);
  unint64_t v8 = 0xB492B66FBE98F273 * __ROR8__(v6 + *(void *)this + v7 + *((void *)a2 + 1), 37);
  uint64_t v9 = *((void *)this + 4);
  *(void *)this = v8;
  uint64_t v10 = __ROR8__(v9 + v6 + *((void *)a2 + 6), 42);
  uint64_t v11 = (unint64_t *)((char *)this + 48);
  unint64_t v12 = *((void *)this + 6) ^ v8;
  *(void *)this = v12;
  *((void *)this + 1) = 0xB492B66FBE98F273 * v10;
  unint64_t v13 = 0xB492B66FBE98F273 * v10 + v7 + *((void *)a2 + 5);
  uint64_t v15 = (char *)this + 40;
  uint64_t v14 = *((void *)this + 5);
  uint64_t v16 = __ROR8__(v14 + *((void *)this + 2), 33);
  *((void *)this + 1) = v13;
  *((void *)this + 2) = 0xB492B66FBE98F273 * v16;
  *((void *)this + 3) = 0xB492B66FBE98F273 * v9;
  *((void *)this + 4) = v14 + v12;
  llvm::hashing::detail::hash_state::mix_32_bytes(a2, (char *)this + 24, (unint64_t *)this + 4, a4);
  uint64_t v17 = *((void *)this + 1);
  *(void *)uint64_t v15 = *v11 + *((void *)this + 2);
  *uint64_t v11 = *((void *)a2 + 2) + v17;
  uint64_t result = llvm::hashing::detail::hash_state::mix_32_bytes((void *)a2 + 4, v15, v11, v18);
  uint64_t v20 = *((void *)this + 2);
  *((void *)this + 2) = *(void *)this;
  *(void *)this = v20;
  return result;
}

void *llvm::hashing::detail::hash_state::mix_32_bytes(void *this, char *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v4 = *(void *)a2 + *this;
  *(void *)a2 = v4;
  uint64_t v5 = this[3];
  *a3 = __ROR8__(v5 + *a3 + v4, 21);
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = this[1] + *(void *)a2 + this[2];
  *(void *)a2 = v7;
  *a3 += v6 + __ROR8__(v7, 44);
  *(void *)a2 += v5;
  return this;
}

_DWORD *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(uint64_t a1, uint64_t *a2, _DWORD *__dst, unint64_t a4, int a5)
{
  int __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    void *__dst = a5;
    return __dst + 1;
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    if (*a2)
    {
      llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)(a1 + 64), (llvm::hashing::detail::hash_state *)a1, v9, v10);
      uint64_t v11 = *a2 + 64;
    }
    else
    {
      llvm::hashing::detail::hash_state::create((llvm::hashing::detail::hash_state *)a1, *(void *)(a1 + 120), v9, v10, (llvm::hashing::detail::hash_state *)v14);
      long long v12 = v14[1];
      *(_OWORD *)(a1 + 64) = v14[0];
      *(_OWORD *)(a1 + 80) = v12;
      *(_OWORD *)(a1 + 96) = v14[2];
      *(void *)(a1 + 112) = v15;
      uint64_t v11 = 64;
    }
    *a2 = v11;
    if (a1 + 4 - v8 <= a4)
    {
      memcpy((void *)a1, (char *)&__src + v8, 4 - v8);
      a1 += 4 - v8;
    }
  }
  return (_DWORD *)a1;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine(llvm::hashing::detail::hash_combine_recursive_helper *this, uint64_t a2, char *a3, char *a4)
{
  if (a2)
  {
    std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,char *,char *>((char *)this, a3, a4);
    llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + 64), this, v7, v8);
    return llvm::hashing::detail::hash_state::finalize((llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + 64), (unint64_t)&a3[a2 - (void)this]);
  }
  else
  {
    unint64_t v10 = a3 - (char *)this;
    unint64_t v11 = *((void *)this + 15);
    return llvm::hashing::detail::hash_short(this, v10, v11);
  }
}

unint64_t llvm::hashing::detail::hash_short(llvm::hashing::detail *this, unint64_t a2, unint64_t a3)
{
  if (a2 - 4 <= 4)
  {
    unint64_t v3 = *(unsigned int *)((char *)this + a2 - 4) ^ a3;
    unint64_t v4 = 0x9DDFEA08EB382D69 * (v3 ^ (a2 + 8 * *(unsigned int *)this));
    unint64_t v5 = v3 ^ (v4 >> 47) ^ v4;
    return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v5) ^ ((0x9DDFEA08EB382D69 * v5) >> 47));
  }
  if (a2 - 9 <= 7)
  {
    uint64_t v7 = *(void *)((char *)this + a2 - 8);
    uint64_t v8 = __ROR8__(v7 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v8 ^ ((0x9DDFEA08EB382D69 * (*(void *)this ^ a3 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                  * (*(void *)this ^ a3 ^ v8)))) ^ ((0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (*(void *)this ^ a3 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(void *)this ^ a3 ^ v8)))) >> 47))) ^ v7;
  }
  if (a2 - 17 <= 0xF)
  {
    uint64_t v9 = *((void *)this + 1);
    unint64_t v10 = 0x9AE16A3B2F90404FLL * *(void *)((char *)this + a2 - 8);
    uint64_t v11 = __ROR8__(0xB492B66FBE98F273 * *(void *)this - v9, 43)
        - 0x3C5A37A36834CED9 * *(void *)((char *)this + a2 - 16)
        + __ROR8__(v10 ^ a3, 30);
    unint64_t v12 = a3 + a2 + __ROR8__(v9 ^ 0xC949D7C7509E6557, 20) - 0x4B6D499041670D8DLL * *(void *)this - v10;
    unint64_t v5 = v12 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v12)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v12));
    return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v5) ^ ((0x9DDFEA08EB382D69 * v5) >> 47));
  }
  if (a2 >= 0x21)
  {
    unint64_t v13 = (char *)this + a2;
    uint64_t v14 = *(void *)((char *)this + a2 - 16);
    uint64_t v15 = *(void *)((char *)this + a2 - 8);
    uint64_t v16 = *(void *)this - 0x3C5A37A36834CED9 * (v14 + a2);
    uint64_t v18 = *((void *)this + 2);
    uint64_t v17 = *((void *)this + 3);
    uint64_t v19 = __ROR8__(v16 + v17, 52);
    uint64_t v20 = v16 + *((void *)this + 1);
    uint64_t v21 = __ROR8__(v20, 7);
    uint64_t v22 = v20 + v18;
    uint64_t v23 = v21 + __ROR8__(*(void *)this - 0x3C5A37A36834CED9 * (v14 + a2), 37) + v19;
    uint64_t v24 = *(void *)((char *)this + a2 - 32) + v18;
    uint64_t v25 = __ROR8__(v24 + v15, 52);
    uint64_t v26 = v23 + __ROR8__(v22, 31);
    uint64_t v27 = __ROR8__(v24, 37);
    uint64_t v28 = *((void *)v13 - 3) + v24;
    uint64_t v29 = __ROR8__(v28, 7);
    uint64_t v30 = v28 + v14;
    uint64_t v31 = __ROR8__(v30, 31);
    unint64_t v32 = ((0xC3A5C85C97CB3127
          * ((0xC3A5C85C97CB3127 * (v30 + v15 + v26) - 0x651E95C4D06FBFB1 * (v22 + v17 + v27 + v25 + v29 + v31)) ^ ((0xC3A5C85C97CB3127 * (v30 + v15 + v26) - 0x651E95C4D06FBFB1 * (v22 + v17 + v27 + v25 + v29 + v31)) >> 47))) ^ a3)
        + v26;
    return 0x9AE16A3B2F90404FLL * (v32 ^ (v32 >> 47));
  }
  if (a2)
  {
    unint64_t v32 = (0x9AE16A3B2F90404FLL
         * (*(unsigned __int8 *)this | ((unint64_t)*((unsigned __int8 *)this + (a2 >> 1)) << 8))) ^ (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)this + a2 - 1))) ^ a3;
    return 0x9AE16A3B2F90404FLL * (v32 ^ (v32 >> 47));
  }
  return a3 ^ 0x9AE16A3B2F90404FLL;
}

unint64_t llvm::hashing::detail::hash_state::finalize(llvm::hashing::detail::hash_state *this, unint64_t a2)
{
  unint64_t v2 = 0x9DDFEA08EB382D69
     * (*((void *)this + 5) ^ ((0x9DDFEA08EB382D69 * (*((void *)this + 5) ^ *((void *)this + 3))) >> 47) ^ (0x9DDFEA08EB382D69 * (*((void *)this + 5) ^ *((void *)this + 3))));
  unint64_t v3 = 0x9DDFEA08EB382D69
     * (*((void *)this + 6) ^ ((0x9DDFEA08EB382D69 * (*((void *)this + 6) ^ *((void *)this + 4))) >> 47) ^ (0x9DDFEA08EB382D69 * (*((void *)this + 6) ^ *((void *)this + 4))));
  uint64_t v4 = *(void *)this - 0x4B6D499041670D8DLL * (a2 ^ (a2 >> 47)) - 0x622015F714C7D297 * (v3 ^ (v3 >> 47));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * (v4 ^ (*((void *)this + 2)
            - 0x4B6D499041670D8DLL * (*((void *)this + 1) ^ (*((void *)this + 1) >> 47))
            - 0x622015F714C7D297 * (v2 ^ (v2 >> 47))));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
}

char *std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,char *,char *>(char *__src, char *a2, char *a3)
{
  uint64_t v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 1 == a2)
    {
      char v6 = *__src;
      int64_t v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      uint64_t v4 = &__src[v7];
      *uint64_t v4 = v6;
    }
    else if (a2 + 1 == a3)
    {
      char v8 = *(a3 - 1);
      uint64_t v4 = __src + 1;
      size_t v9 = a3 - 1 - __src;
      if (a3 - 1 != __src) {
        memmove(__src + 1, __src, v9);
      }
      *int __src = v8;
    }
    else
    {
      return std::__rotate_gcd[abi:nn180100]<std::_ClassicAlgPolicy,char *>(__src, a2, a3);
    }
  }
  return v4;
}

unsigned char *std::__rotate_gcd[abi:nn180100]<std::_ClassicAlgPolicy,char *>(unsigned char *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2 - a1;
  if (a2 - a1 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      uint64_t v4 = 0;
      do
      {
        char v5 = a1[v4];
        a1[v4] = a2[v4];
        uint64_t v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        uint64_t v7 = (uint64_t)&a2[++v4];
      }
      while ((unsigned char *)v6 != a2 && v7 != (void)a3);
    }
  }
  else
  {
    uint64_t v9 = a3 - a2;
    uint64_t v10 = a2 - a1;
    do
    {
      uint64_t v11 = v10;
      uint64_t v10 = v9;
      uint64_t v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      unint64_t v12 = &a1[v10];
      do
      {
        char v14 = *--v12;
        char v13 = v14;
        uint64_t v15 = &v12[v3];
        uint64_t v16 = v12;
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = v15;
          *uint64_t v17 = *v15;
          uint64_t v18 = a3 - v15;
          BOOL v19 = __OFSUB__(v3, v18);
          uint64_t v21 = v3 - v18;
          char v20 = (v21 < 0) ^ v19;
          uint64_t v15 = &a1[v21];
          if (v20) {
            uint64_t v15 = &v16[v3];
          }
        }
        while (v15 != v12);
        *uint64_t v16 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(llvm::hashing::detail::hash_state *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  {
    unint64_t v13 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v13 = 0xFF51AFD7ED558CCDLL;
    }
    llvm::hashing::detail::get_execution_seed(void)::seed = v13;
  }
  unint64_t v6 = llvm::hashing::detail::get_execution_seed(void)::seed;
  unint64_t v7 = a2 - (void)this;
  if ((unint64_t)(a2 - (void)this) > 0x40)
  {
    llvm::hashing::detail::hash_state::create(this, llvm::hashing::detail::get_execution_seed(void)::seed, llvm::hashing::detail::get_execution_seed(void)::seed, a4, (llvm::hashing::detail::hash_state *)v14);
    unint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFC0) - 64;
    if ((v7 & 0xFFFFFFFFFFFFFFC0) != 0x40)
    {
      unint64_t v12 = (llvm::hashing::detail::hash_state *)((char *)this + 64);
      do
      {
        llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)v14, v12, v9, v10);
        unint64_t v12 = (llvm::hashing::detail::hash_state *)((char *)v12 + 64);
        v11 -= 64;
      }
      while (v11);
    }
    if ((v7 & 0x3F) != 0) {
      llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)v14, (llvm::hashing::detail::hash_state *)(a2 - 64), v9, v10);
    }
    return llvm::hashing::detail::hash_state::finalize((llvm::hashing::detail::hash_state *)v14, v7);
  }
  else
  {
    return llvm::hashing::detail::hash_short(this, a2 - (void)this, v6);
  }
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,unsigned int,int,llvm::hash_code>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, unsigned char *a3, char *a4, char *a5, int *a6, int *a7, uint64_t *a8)
{
  unint64_t v16 = a2;
  unint64_t v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  unint64_t v17 = v16;
  char v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<int,llvm::hash_code>(a1, v17, v14, a4, a7, a8);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<int,llvm::hash_code>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6)
{
  unint64_t v12 = a2;
  uint64_t v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v12, a3, (unint64_t)a4, *a5);
  unint64_t v13 = v12;
  uint64_t v10 = (char *)llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v13, v9, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v13, v10, a4);
}

void *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(uint64_t a1, uint64_t *a2, void *__dst, unint64_t a4, uint64_t a5)
{
  uint64_t __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    void *__dst = a5;
    return __dst + 1;
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    if (*a2)
    {
      llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)(a1 + 64), (llvm::hashing::detail::hash_state *)a1, v9, v10);
      uint64_t v11 = *a2 + 64;
    }
    else
    {
      llvm::hashing::detail::hash_state::create((llvm::hashing::detail::hash_state *)a1, *(void *)(a1 + 120), v9, v10, (llvm::hashing::detail::hash_state *)v14);
      long long v12 = v14[1];
      *(_OWORD *)(a1 + 64) = v14[0];
      *(_OWORD *)(a1 + 80) = v12;
      *(_OWORD *)(a1 + 96) = v14[2];
      *(void *)(a1 + 112) = v15;
      uint64_t v11 = 64;
    }
    *a2 = v11;
    if (a1 + 8 - v8 <= a4)
    {
      memcpy((void *)a1, (char *)&__src + v8, 8 - v8);
      a1 += 8 - v8;
    }
  }
  return (void *)a1;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v12 = a2;
  uint64_t v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v12, a3, (unint64_t)a4, *a5);
  unint64_t v13 = v12;
  uint64_t v10 = (char *)llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v13, v9, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v13, v10, a4);
}

void llvm::SmallVectorImpl<unsigned long long>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 8);
        unint64_t v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2) {
        bzero((void *)(*(void *)a1 + 8 * v2), 8 * (a2 - v2));
      }
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void llvm::APInt::initSlowCase(llvm::APInt *this)
{
}

uint64_t llvm::APInt::initFromArray(llvm::APInt *this, void *a2)
{
  if (*((_DWORD *)this + 2) > 0x40u) {
    operator new[]();
  }
  *(void *)this = *a2;
  return llvm::APInt::clearUnusedBits((uint64_t)this);
}

uint64_t llvm::APInt::reallocate(uint64_t this, unsigned int a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(unsigned int *)(this + 8);
  if (((unint64_t)(v4 + 63) >> 6) == (((unint64_t)a2 + 63) >> 6))
  {
    *(_DWORD *)(this + 8) = a2;
  }
  else
  {
    if (v4 >= 0x41)
    {
      this = *(void *)this;
      if (*(void *)v3) {
        this = MEMORY[0x263E50080]();
      }
    }
    *(_DWORD *)(v3 + 8) = a2;
    if (a2 >= 0x41) {
      operator new[]();
    }
  }
  return this;
}

const llvm::APInt *llvm::APInt::assignSlowCase(const llvm::APInt *this, const llvm::APInt *a2)
{
  if (this != a2)
  {
    uint64_t v3 = this;
    this = (const llvm::APInt *)llvm::APInt::reallocate((uint64_t)this, *((_DWORD *)a2 + 2));
    uint64_t v4 = *((unsigned int *)v3 + 2);
    if (v4 > 0x40)
    {
      char v5 = *(void **)v3;
      unint64_t v6 = *(const void **)a2;
      return (const llvm::APInt *)memcpy(v5, v6, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *(void *)uint64_t v3 = *(void *)a2;
    }
  }
  return this;
}

uint64_t llvm::APInt::operator++(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 8);
  if (v1 > 0x40)
  {
    unint64_t v2 = *(uint64_t **)this;
    uint64_t v3 = **(void **)this;
    **(void **)this = v3 + 1;
    if (v3 == -1)
    {
      unint64_t v4 = (unint64_t)(v1 + 63) >> 6;
      char v5 = v2 + 1;
      unint64_t v6 = v4 - 1;
      do
      {
        if (!v6) {
          break;
        }
        --v6;
      }
      while (__CFADD__((*v5++)++, 1));
    }
  }
  else
  {
    ++*(void *)this;
  }
  return llvm::APInt::clearUnusedBits(this);
}

uint64_t llvm::APInt::operator+=(uint64_t this, void **a2)
{
  uint64_t v2 = *(unsigned int *)(this + 8);
  if (v2 > 0x40)
  {
    BOOL v3 = 0;
    unint64_t v4 = *(void **)this;
    char v5 = *a2;
    unint64_t v6 = (unint64_t)(v2 + 63) >> 6;
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v8 = v7 + *v4;
      BOOL v9 = __CFADD__(v7, *v4);
      BOOL v10 = (unint64_t)(v8 + 1) <= *v4;
      if (v3)
      {
        ++v8;
        BOOL v3 = v10;
      }
      else
      {
        BOOL v3 = v9;
      }
      *v4++ = v8;
      --v6;
    }
    while (v6);
  }
  else
  {
    *(void *)this += *a2;
  }
  return llvm::APInt::clearUnusedBits(this);
}

uint64_t llvm::APInt::operator-=(uint64_t this, void **a2)
{
  uint64_t v2 = *(unsigned int *)(this + 8);
  if (v2 > 0x40)
  {
    uint64_t v3 = 0;
    unint64_t v4 = *(unint64_t **)this;
    char v5 = *a2;
    unint64_t v6 = (unint64_t)(v2 + 63) >> 6;
    do
    {
      unint64_t v7 = *v5++;
      unint64_t v8 = *v4 - v7;
      BOOL v9 = *v4 < v7;
      unint64_t v10 = *v4 + ~v7;
      if (v3)
      {
        uint64_t v3 = v10 >= *v4;
      }
      else
      {
        unint64_t v10 = v8;
        uint64_t v3 = v9;
      }
      *v4++ = v10;
      --v6;
    }
    while (v6);
  }
  else
  {
    *(void *)this -= *a2;
  }
  return llvm::APInt::clearUnusedBits(this);
}

llvm::APInt *llvm::APInt::operator*@<X0>(uint64_t a1@<X0>, void *a2@<X1>, llvm::APInt *a3@<X8>)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4 > 0x40) {
    operator new[]();
  }
  uint64_t v5 = *a2 * *(void *)a1;
  return llvm::APInt::APInt(a3, v4, v5);
}

uint64_t llvm::APInt::tcMultiply(llvm::APInt *this, unint64_t *a2, const unint64_t **a3, const unint64_t *a4)
{
  unsigned int v4 = a4;
  unint64_t v7 = this;
  *(void *)this = 0;
  if (a4 < 2)
  {
    if (!a4) {
      return 0;
    }
  }
  else
  {
    bzero((char *)this + 8, 8 * (a4 - 2) + 8);
  }
  LODWORD(v8) = 0;
  uint64_t v9 = v4;
  do
  {
    unint64_t v10 = *a3++;
    uint64_t v8 = llvm::APInt::tcMultiplyPart(v7, a2, v10, 0, v4, v9, 1) | v8;
    unint64_t v7 = (llvm::APInt *)((char *)v7 + 8);
    --v9;
  }
  while (v9);
  return v8;
}

uint64_t llvm::APInt::operator*=(uint64_t a1, void *a2)
{
  llvm::APInt::operator*(a1, a2, (llvm::APInt *)&v4);
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(void *)a1) {
    MEMORY[0x263E50080](*(void *)a1, 0x1000C8000313F17);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t llvm::APInt::tcMultiplyPart(llvm::APInt *this, unint64_t *a2, const unint64_t *a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  if (a5 >= a6) {
    uint64_t v7 = a6;
  }
  else {
    uint64_t v7 = a5;
  }
  if (v7)
  {
    uint64_t v8 = a2;
    uint64_t v9 = this;
    do
    {
      uint64_t v10 = 0;
      unint64_t v12 = *v8++;
      unint64_t v11 = v12;
      if (a3 && v11)
      {
        unint64_t v13 = v11 * (unint64_t)a3;
        unint64_t v14 = HIDWORD(v11);
        unint64_t v15 = v11 * (unint64_t)HIDWORD(a3);
        unint64_t v16 = HIDWORD(v15) + HIDWORD(v11) * (unint64_t)HIDWORD(a3);
        unint64_t v17 = v11 * (void)a3;
        BOOL v18 = __CFADD__(v17, a4);
        a4 += v17;
        uint64_t v19 = v18;
        if (v17 >= v13 + (v15 << 32)) {
          uint64_t v10 = (__PAIR128__(v19, v13)
        }
               + __PAIR128__(v16 + ((v14 * (unint64_t)a3) >> 32), v15 << 32)) >> 64;
        else {
          uint64_t v10 = ((__PAIR128__(v19, v13)
        }
                + __PAIR128__(v16 + ((v14 * (unint64_t)a3) >> 32), v15 << 32)) >> 64)
              + 1;
      }
      if (a7)
      {
        if (__CFADD__(a4, *(void *)v9)) {
          ++v10;
        }
        a4 += *(void *)v9;
      }
      *(void *)uint64_t v9 = a4;
      uint64_t v9 = (llvm::APInt *)((char *)v9 + 8);
      a4 = v10;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t v10 = a4;
  }
  if (a5 < a6)
  {
    uint64_t v20 = 0;
    *((void *)this + a5) = v10;
    return v20;
  }
  if (v10) {
    return 1;
  }
  uint64_t v20 = 0;
  if (a3 && a6 < a5)
  {
    uint64_t v22 = &a2[a6];
    unint64_t v23 = a5 - (unint64_t)a6;
    while (!*v22++)
    {
      if (!--v23) {
        return 0;
      }
    }
    return 1;
  }
  return v20;
}

uint64_t llvm::APInt::compare(llvm::APInt *this, const llvm::APInt *a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    unint64_t v4 = ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v4) {
        return 0;
      }
      unint64_t v5 = *(void *)(*(void *)this - 8 + v4);
      unint64_t v6 = *(void *)(*(void *)a2 - 8 + v4);
      v4 -= 8;
    }
    while (v5 == v6);
    if (v5 > v6) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else if (*(void *)this < *(void *)a2)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return *(void *)this > *(void *)a2;
  }
}

uint64_t llvm::APInt::compareSigned(llvm::APInt *this, const llvm::APInt *a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    uint64_t v9 = *(void *)(*(void *)this + 8 * ((v2 - 1) >> 6)) & (1 << (v2 - 1));
    unsigned int v10 = *((_DWORD *)a2 + 2);
    unsigned int v11 = v10 - 1;
    if (v10 >= 0x41) {
      unint64_t v12 = (const llvm::APInt *)(*(void *)a2 + 8 * (v11 >> 6));
    }
    else {
      unint64_t v12 = a2;
    }
    if ((v9 != 0) == ((*(void *)v12 >> v11) & 1))
    {
      unint64_t v13 = ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v13) {
          return 0;
        }
        unint64_t v14 = *(void *)(*(void *)this - 8 + v13);
        unint64_t v15 = *(void *)(*(void *)a2 - 8 + v13);
        v13 -= 8;
      }
      while (v14 == v15);
      if (v14 > v15) {
        return 1;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
    else if (v9)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    uint64_t v3 = -v2;
    uint64_t v4 = (uint64_t)(*(void *)this << v3) >> v3;
    uint64_t v5 = (uint64_t)(*(void *)a2 << v3) >> v3;
    BOOL v6 = v4 < v5;
    BOOL v7 = v4 > v5;
    if (v6) {
      return 0xFFFFFFFFLL;
    }
    else {
      return v7;
    }
  }
}

void *llvm::APInt::setBitsSlowCase(void *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a2 >> 6;
  uint64_t v4 = a3 >> 6;
  uint64_t v5 = -1 << a2;
  if ((a3 & 0x3F) != 0)
  {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> -(a3 & 0x3F);
    if (v4 == v3) {
      v5 &= v6;
    }
    else {
      *(void *)(*this + 8 * v4) |= v6;
    }
  }
  *(void *)(*this + 8 * v3) |= v5;
  uint64_t v7 = v3 + 1;
  if (v7 < v4)
  {
    do
      *(void *)(*this + 8 * v7++) = -1;
    while (v4 != v7);
  }
  return this;
}

uint64_t llvm::APInt::flipAllBitsSlowCase(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 8);
  if (v1)
  {
    uint64_t v2 = *(void **)this;
    unint64_t v3 = (unint64_t)(v1 + 63) >> 6;
    do
    {
      void *v2 = ~*v2;
      ++v2;
      --v3;
    }
    while (v3);
  }
  return llvm::APInt::clearUnusedBits(this);
}

llvm::APInt *llvm::APInt::zext@<X0>(llvm::APInt *this@<X0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  if (a2 > 0x40)
  {
    if (*((_DWORD *)this + 2) != a2) {
      operator new[]();
    }
    return (llvm::APInt *)llvm::APInt::APInt((uint64_t)a3, this);
  }
  else
  {
    uint64_t v3 = *(void *)this;
    return llvm::APInt::APInt(a3, a2, v3);
  }
}

llvm::APInt *llvm::APInt::operator=(llvm::APInt *this, const llvm::APInt *a2)
{
  if (*((_DWORD *)this + 2) > 0x40u || *((_DWORD *)a2 + 2) > 0x40u)
  {
    llvm::APInt::assignSlowCase(this, a2);
  }
  else
  {
    *(void *)this = *(void *)a2;
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  }
  return this;
}

unint64_t llvm::hash_value(llvm::hashing::detail::hash_state **this, const llvm::APInt *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t v6 = (int *)(this + 1);
  uint64_t v5 = *((unsigned int *)this + 2);
  if (v5 > 0x40)
  {
    unint64_t v8 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*this, (uint64_t)*this + (((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8), a3, a4);
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v9);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<int,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v9, 0, v9, v10, v6, (uint64_t *)&v8);
  }
  else
  {
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v9);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<int,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v9, 0, v9, v10, v6, (uint64_t *)this);
  }
}

BOOL llvm::APInt::operator==(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 > 0x40) {
    return memcmp(*(const void **)a1, *a2, ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    return *(void *)a1 == (void)*a2;
  }
}

void llvm::APInt::getHiBits(llvm::APInt *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v3 = *((_DWORD *)this + 2) - a2;
  uint64_t v4 = (llvm::APInt **)llvm::APInt::APInt(a3, this);
  llvm::APInt::lshrInPlace(v4, v3);
}

uint64_t llvm::APInt::getLoBits@<X0>(llvm::APInt *this@<X0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  llvm::APInt::APInt(a3, *((_DWORD *)this + 2), 0);
  llvm::APInt::setBits(a3, 0, a2);
  return llvm::APInt::operator&=((uint64_t)a3, (void **)this);
}

uint64_t llvm::APInt::operator&=(uint64_t result, void **a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2 > 0x40)
  {
    unsigned int v3 = *(void **)result;
    uint64_t v4 = *a2;
    unint64_t v5 = (unint64_t)(v2 + 63) >> 6;
    do
    {
      uint64_t v6 = *v4++;
      *v3++ &= v6;
      --v5;
    }
    while (v5);
  }
  else
  {
    *(void *)result &= (unint64_t)*a2;
  }
  return result;
}

uint64_t llvm::APInt::countLeadingZerosSlowCase(llvm::APInt *this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  unint64_t v2 = (unint64_t)(v1 + 63) >> 6;
  if (v2)
  {
    int v3 = 0;
    int v4 = v2 << 6;
    while (1)
    {
      unint64_t v5 = *(void *)(*(void *)this - 8 + 8 * v2);
      if (v5) {
        break;
      }
      --v2;
      v3 += 64;
      if (v2 + 1 <= 1) {
        goto LABEL_8;
      }
    }
    int v4 = __clz(v5) + v3;
  }
  else
  {
    int v4 = 0;
  }
LABEL_8:
  if ((v1 & 0x3F) != 0) {
    int v6 = v1 | 0xFFFFFFC0;
  }
  else {
    int v6 = 0;
  }
  return (v4 + v6);
}

unint64_t llvm::APInt::countLeadingOnesSlowCase(llvm::APInt *this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  char v2 = 64 - (v1 & 0x3F);
  int v3 = *((_DWORD *)this + 2) & 0x3F;
  if ((v1 & 0x3F) == 0)
  {
    int v3 = 64;
    char v2 = 0;
  }
  unint64_t v4 = (unint64_t)(v1 + 63) >> 6;
  uint64_t v5 = *(void *)this;
  unint64_t result = __clz(~(*(void *)(*(void *)this + 8 * v4 - 8) << v2));
  if (v4 >= 2 && v3 == result)
  {
    unint64_t result = (v3 + (v4 << 6) - 64);
    int v8 = v4 - 1;
    while (1)
    {
      uint64_t v9 = *(void *)(v5 + 8 * --v8);
      if (v9 != -1) {
        break;
      }
      v3 += 64;
      if (v8 <= 0) {
        return result;
      }
    }
    return __clz(~v9) + v3;
  }
  return result;
}

uint64_t llvm::APInt::countTrailingZerosSlowCase(unint64_t **this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  unint64_t v2 = (unint64_t)(v1 + 63) >> 6;
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = *this;
    unsigned int v5 = v2 << 6;
    unint64_t v6 = v2 << 6;
    while (!*v4)
    {
      ++v4;
      v3 += 64;
      if (v6 == v3) {
        goto LABEL_8;
      }
    }
    unsigned int v5 = __clz(__rbit64(*v4)) + v3;
  }
  else
  {
    unsigned int v5 = 0;
  }
LABEL_8:
  if (v1 >= v5) {
    return v5;
  }
  else {
    return v1;
  }
}

uint64_t llvm::APInt::countTrailingOnesSlowCase(llvm::APInt *this)
{
  unint64_t v1 = ((unint64_t)*((unsigned int *)this + 2) + 63) >> 6;
  if (!v1) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = *(void **)this;
  uint64_t result = (v1 << 6);
  unint64_t v5 = v1 << 6;
  while (*v3 == -1)
  {
    ++v3;
    v2 += 64;
    if (v5 == v2) {
      return result;
    }
  }
  return __clz(__rbit64(~*v3)) + v2;
}

void llvm::APInt::byteSwap(llvm::APInt *this@<X0>, llvm::APInt *a2@<X8>)
{
  unsigned int v4 = *((_DWORD *)this + 2);
  if (v4 == 32)
  {
    uint64_t v5 = bswap32(*(_DWORD *)this);
    int v6 = 32;
    goto LABEL_5;
  }
  if (v4 == 16)
  {
    uint64_t v5 = bswap32(*(unsigned __int16 *)this) >> 16;
    int v6 = 16;
LABEL_5:
    *((_DWORD *)a2 + 2) = v6;
    *(void *)a2 = v5;
    llvm::APInt::clearUnusedBits((uint64_t)a2);
    return;
  }
  if (v4 > 0x40)
  {
    llvm::APInt::APInt(a2, (v4 + 63) & 0xFFFFFFC0, 0);
    uint64_t v8 = *((unsigned int *)this + 2);
    if (v8)
    {
      uint64_t v9 = 0;
      unint64_t v10 = ((unint64_t)(v8 + 63) >> 6) - 1;
      do
      {
        *(void *)(*(void *)a2 + v9) = bswap64(*(void *)(*(void *)this + 8 * v10--));
        v9 += 8;
      }
      while (v10 != -1);
    }
    int v11 = *((_DWORD *)a2 + 2);
    if (v11 != v8)
    {
      llvm::APInt::lshrInPlace((llvm::APInt **)a2, v11 - v8);
      *((_DWORD *)a2 + 2) = *((_DWORD *)this + 2);
    }
  }
  else
  {
    unint64_t v7 = bswap64(*(void *)this) >> -(char)v4;
    llvm::APInt::APInt(a2, v4, v7);
  }
}

void llvm::APInt::lshrInPlace(llvm::APInt **this, unsigned int a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    llvm::APInt::tcShiftRight(*this, (unint64_t *)((unint64_t)(v2 + 63) >> 6), a2);
  }
  else if (v2 == a2)
  {
    *this = 0;
  }
  else
  {
    *this = (llvm::APInt *)((unint64_t)*this >> a2);
  }
}

llvm::APInt *llvm::APInt::trunc@<X0>(llvm::APInt *this@<X0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  uint64_t v3 = (uint64_t *)this;
  unsigned int v5 = *((_DWORD *)this + 2);
  if (a2 > 0x40)
  {
    if (v5 != a2) {
      operator new[]();
    }
    return (llvm::APInt *)llvm::APInt::APInt((uint64_t)a3, this);
  }
  else
  {
    if (v5 >= 0x41) {
      uint64_t v3 = *(uint64_t **)this;
    }
    uint64_t v6 = *v3;
    return llvm::APInt::APInt(a3, a2, v6);
  }
}

llvm::APInt *llvm::APInt::sext@<X0>(llvm::APInt *this@<X0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  if (a2 > 0x40)
  {
    if (*((_DWORD *)this + 2) != a2) {
      operator new[]();
    }
    return (llvm::APInt *)llvm::APInt::APInt((uint64_t)a3, this);
  }
  else
  {
    uint64_t v3 = (uint64_t)(*(void *)this << -*((unsigned char *)this + 8)) >> -*((unsigned char *)this + 8);
    return llvm::APInt::APInt(a3, a2, v3);
  }
}

llvm::APInt *llvm::APInt::sextOrTrunc@<X0>(llvm::APInt *this@<X0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  unsigned int v3 = *((_DWORD *)this + 2);
  if (v3 < a2) {
    return llvm::APInt::sext(this, a2, a3);
  }
  if (v3 > a2) {
    return llvm::APInt::trunc(this, a2, a3);
  }
  return (llvm::APInt *)llvm::APInt::APInt((uint64_t)a3, this);
}

uint64_t llvm::APInt::ashrInPlace(uint64_t this, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)(this + 8);
  if (v2 > 0x40) {
    return llvm::APInt::ashrSlowCase(this, a2);
  }
  uint64_t v3 = (uint64_t)(*(void *)this << -(char)v2) >> -(char)v2;
  if (v2 == a2) {
    char v4 = 63;
  }
  else {
    char v4 = a2;
  }
  *(void *)this = v3 >> v4;
  return llvm::APInt::clearUnusedBits(this);
}

uint64_t *llvm::APInt::getLimitedValue(uint64_t ***this, unint64_t a2)
{
  unsigned int v4 = *((_DWORD *)this + 2);
  if (v4 >= 0x41)
  {
    if (v4 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) > 0x40) {
      return (uint64_t *)a2;
    }
    unsigned int v5 = **this;
  }
  else
  {
    unsigned int v5 = (uint64_t *)*this;
  }
  if ((unint64_t)v5 <= a2) {
    return v5;
  }
  return (uint64_t *)a2;
}

uint64_t llvm::APInt::ashrSlowCase(uint64_t this, unsigned int a2)
{
  if (a2)
  {
    unsigned int v2 = (void *)this;
    uint64_t v3 = *(unsigned int *)(this + 8);
    unsigned int v4 = v3 - 1;
    unsigned int v5 = (void *)this;
    if (v3 >= 0x41) {
      unsigned int v5 = (void *)(*(void *)this + 8 * (v4 >> 6));
    }
    uint64_t v6 = *v5 & (1 << v4);
    unsigned int v7 = a2 >> 6;
    unint64_t v8 = (unint64_t)(v3 + 63) >> 6;
    unsigned int v9 = v8 - (a2 >> 6);
    if (v8 != a2 >> 6)
    {
      uint64_t v10 = (v8 - 1);
      *(void *)(*(void *)this + 8 * v10) = (uint64_t)(*(void *)(*(void *)this
                                                                                   + 8 * v10) << -(char)v3) >> -(char)v3;
      char v11 = a2 & 0x3F;
      if ((a2 & 0x3F) != 0)
      {
        uint64_t v12 = v9 - 1;
        if (v9 == 1)
        {
          uint64_t v12 = 0;
        }
        else
        {
          uint64_t v13 = 0;
          do
          {
            *(void *)(*(void *)this + 8 * v13) = (*(void *)(*(void *)this
                                                                + 8 * ((a2 >> 6) + v13 + 1)) << (64 - v11)) | (*(void *)(*(void *)this + 8 * ((a2 >> 6) + v13)) >> v11);
            ++v13;
          }
          while (v12 != v13);
        }
        *(void *)(*(void *)this + 8 * v12) = *(void *)(*(void *)this + 8 * v10) >> v11;
        *(void *)(*(void *)this + 8 * v12) = (uint64_t)(*(void *)(*(void *)this + 8 * v12) << v11) >> v11;
      }
      else
      {
        memmove(*(void **)this, (const void *)(*(void *)this + 8 * v7), 8 * v9);
      }
    }
    if (v6) {
      int v14 = -1;
    }
    else {
      int v14 = 0;
    }
    memset((void *)(*v2 + 8 * v9), v14, 8 * v7);
    return llvm::APInt::clearUnusedBits((uint64_t)v2);
  }
  return this;
}

void llvm::APInt::tcShiftRight(llvm::APInt *this, unint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    if (a3 >> 6 >= a2) {
      unsigned int v4 = a2;
    }
    else {
      unsigned int v4 = a3 >> 6;
    }
    uint64_t v5 = a2 - v4;
    char v6 = a3 & 0x3F;
    if ((a3 & 0x3F) != 0)
    {
      if (a3 >> 6 < a2)
      {
        uint64_t v7 = *((void *)this + v4) >> v6;
        *(void *)this = v7;
        if (v5 != 1)
        {
          unsigned int v8 = v4 + 1;
          unsigned int v9 = (void *)((char *)this + 8);
          uint64_t v10 = 1 - v5;
          do
          {
            *(v9 - 1) = (*((void *)this + v8) << (64 - v6)) | v7;
            uint64_t v7 = *((void *)this + v8) >> v6;
            *v9++ = v7;
            ++v8;
          }
          while (!__CFADD__(v10++, 1));
        }
      }
    }
    else
    {
      memmove(this, (char *)this + 8 * v4, (8 * v5));
    }
    bzero((char *)this + 8 * v5, 8 * v4);
  }
}

void llvm::APInt::tcShiftLeft(llvm::APInt *this, unint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    if (a3 >> 6 >= a2) {
      unsigned int v4 = a2;
    }
    else {
      unsigned int v4 = a3 >> 6;
    }
    char v5 = a3 & 0x3F;
    if ((a3 & 0x3F) != 0)
    {
      if (a3 >> 6 < a2)
      {
        uint64_t v6 = a2 - 1;
        uint64_t v7 = *((void *)this + v6 - v4) << (a3 & 0x3F);
        unsigned int v8 = (char *)this + 8 * v6;
        *(void *)unsigned int v8 = v7;
        if (v6 > v4)
        {
          unsigned int v9 = (unint64_t *)((char *)this + 8 * a2 + 8 * (uint64_t)-v4 - 16);
          uint64_t v10 = (void *)((char *)this + 8 * (a2 - 2));
          do
          {
            unint64_t v11 = *v9--;
            *(void *)unsigned int v8 = (v11 >> (64 - v5)) | v7;
            uint64_t v7 = *((void *)this + v6 - v4 - 1) << v5;
            unsigned int v8 = (char *)this + 8 * (v6 - 1);
            *v10-- = v7;
            --v6;
          }
          while (v4 < v6);
        }
      }
    }
    else
    {
      memmove((char *)this + 8 * v4, this, 8 * (a2 - v4));
    }
    bzero(this, 8 * v4);
  }
}

void llvm::APInt::udiv(llvm::APInt *this@<X0>, const llvm::APInt *a2@<X1>, llvm::APInt *a3@<X8>)
{
  unsigned int v6 = *((_DWORD *)this + 2);
  if (v6 <= 0x40)
  {
    uint64_t v7 = *(void *)this / *(void *)a2;
    unsigned int v8 = a3;
    unsigned int v9 = v6;
LABEL_16:
    llvm::APInt::APInt(v8, v9, v7);
    return;
  }
  uint64_t v10 = (const unint64_t *)(((unint64_t)(v6 - llvm::APInt::countLeadingZerosSlowCase(this))
                                  + 63) >> 6);
  unsigned int v11 = *((_DWORD *)a2 + 2);
  if (v11 > 0x40)
  {
    int v12 = llvm::APInt::countLeadingZerosSlowCase(a2);
    if (!v10)
    {
LABEL_15:
      unsigned int v8 = a3;
      unsigned int v9 = v6;
      uint64_t v7 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    int v12 = v11 + __clz(*(void *)a2) - 64;
    if (!v10) {
      goto LABEL_15;
    }
  }
  uint64_t v13 = v11 - v12;
  if (v13 == 1)
  {
    llvm::APInt::APInt((uint64_t)a3, this);
  }
  else
  {
    int v14 = (const unint64_t *)((unint64_t)(v13 + 63) >> 6);
    if (v10 < v14 || (llvm::APInt::compare(this, a2) & 0x80000000) != 0) {
      goto LABEL_15;
    }
    if (llvm::APInt::operator==((uint64_t)this, (const void **)a2))
    {
      unsigned int v9 = *((_DWORD *)this + 2);
      unsigned int v8 = a3;
      uint64_t v7 = 1;
      goto LABEL_16;
    }
    unsigned int v9 = *((_DWORD *)this + 2);
    if (v10 == 1)
    {
      uint64_t v7 = **(void **)this / **(void **)a2;
      unsigned int v8 = a3;
      goto LABEL_16;
    }
    llvm::APInt::APInt(a3, v9, 0);
    unint64_t v16 = *(llvm::APInt **)this;
    unint64_t v17 = *(uint64_t **)a2;
    BOOL v18 = *(unint64_t **)a3;
    llvm::APInt::divide(v16, v10, v17, v14, v18, 0, v15);
  }
}

void llvm::APInt::udivrem(llvm::APInt *this, const llvm::APInt *a2, const llvm::APInt *a3, llvm::APInt *a4, llvm::APInt *a5)
{
  uint64_t v9 = *((unsigned int *)this + 2);
  if (v9 <= 0x40)
  {
    uint64_t v10 = *(void *)this % *(void *)a2;
    llvm::APInt::APInt((llvm::APInt *)&v27, v9, *(void *)this / *(void *)a2);
    if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
      MEMORY[0x263E50080](*(void *)a3, 0x1000C8000313F17);
    }
    *(void *)a3 = v27;
    *((_DWORD *)a3 + 2) = v28;
    unsigned int v11 = v9;
    uint64_t v12 = v10;
LABEL_23:
    llvm::APInt::APInt((llvm::APInt *)&v27, v11, v12);
    if (*((_DWORD *)a4 + 2) >= 0x41u)
    {
      if (*(void *)a4) {
        MEMORY[0x263E50080](*(void *)a4, 0x1000C8000313F17);
      }
    }
    *(void *)a4 = v27;
    *((_DWORD *)a4 + 2) = v28;
    return;
  }
  unint64_t v13 = ((unint64_t)(v9 - llvm::APInt::countLeadingZerosSlowCase(this)) + 63) >> 6;
  unsigned int v14 = *((_DWORD *)a2 + 2);
  if (v14 <= 0x40)
  {
    int v15 = v14 + __clz(*(void *)a2) - 64;
    if (v13) {
      goto LABEL_8;
    }
LABEL_18:
    unsigned int v18 = v9;
    uint64_t v19 = 0;
LABEL_19:
    llvm::APInt::APInt((llvm::APInt *)&v27, v18, v19);
    if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
      MEMORY[0x263E50080](*(void *)a3, 0x1000C8000313F17);
    }
    *(void *)a3 = v27;
    *((_DWORD *)a3 + 2) = v28;
    unsigned int v11 = v9;
    uint64_t v12 = 0;
    goto LABEL_23;
  }
  int v15 = llvm::APInt::countLeadingZerosSlowCase(a2);
  if (!v13) {
    goto LABEL_18;
  }
LABEL_8:
  uint64_t v16 = v14 - v15;
  unint64_t v17 = (unint64_t)(v16 + 63) >> 6;
  if (v16 == 1)
  {
    llvm::APInt::operator=(a3, this);
    llvm::APInt::APInt((llvm::APInt *)&v27, v9, 0);
    if (*((_DWORD *)a4 + 2) >= 0x41u && *(void *)a4) {
      MEMORY[0x263E50080](*(void *)a4, 0x1000C8000313F17);
    }
    *(void *)a4 = v27;
    *((_DWORD *)a4 + 2) = v28;
  }
  if (v13 >= v17 && (llvm::APInt::compare(this, a2) & 0x80000000) == 0)
  {
    if (!llvm::APInt::operator==((uint64_t)this, (const void **)a2))
    {
      llvm::APInt::reallocate((uint64_t)a3, v9);
      llvm::APInt::reallocate((uint64_t)a4, v9);
      uint64_t v21 = *(llvm::APInt **)this;
      if (v13 == 1)
      {
        uint64_t v22 = *(void *)v21;
        unint64_t v23 = **(void **)a2;
        uint64_t v24 = *(void *)v21 / v23;
        llvm::APInt::operator=(a3, v24);
        llvm::APInt::operator=(a4, v22 - v24 * v23);
      }
      else
      {
        llvm::APInt::divide(v21, (const unint64_t *)v13, *(uint64_t **)a2, (const unint64_t *)v17, *(unint64_t **)a3, *(unint64_t **)a4, v20);
        uint64_t v25 = (void *)(*(void *)a3 + 8 * v13);
        unint64_t v26 = (unint64_t)(v9 + 63) >> 6;
        bzero(v25, (8 * (v26 - v13)));
        bzero((void *)(*(void *)a4 + 8 * v17), (8 * (v26 - v17)));
      }
      return;
    }
    unsigned int v18 = v9;
    uint64_t v19 = 1;
    goto LABEL_19;
  }
  llvm::APInt::operator=(a4, this);
  llvm::APInt::APInt((llvm::APInt *)&v27, v9, 0);
  if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
    MEMORY[0x263E50080](*(void *)a3, 0x1000C8000313F17);
  }
  *(void *)a3 = v27;
  *((_DWORD *)a3 + 2) = v28;
}

void llvm::APInt::divide(llvm::APInt *this, const unint64_t *a2, uint64_t *a3, const unint64_t *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7)
{
  uint64_t v7 = a6;
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v11 = (2 * a4);
  uint64_t v12 = (2 * a2);
  unsigned int v73 = a2;
  long long v74 = a4;
  if (a6) {
    int v13 = 4;
  }
  else {
    int v13 = 3;
  }
  int v72 = v12 - 2 * a4;
  unsigned int v14 = (v13 * v11 + 2 * v72) | 1;
  uint64_t v15 = (2 * a2) | 1u;
  size_t v16 = 4 * v15;
  if (v14 > 0x80) {
    operator new[]();
  }
  unint64_t v17 = &v75[v15];
  int v18 = v11 + v15;
  uint64_t v19 = &v75[v18];
  uint64_t v20 = &v75[(v18 + v12)];
  if (a6) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  bzero(v75, v16);
  if (v73)
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = *(void *)this;
      this = (llvm::APInt *)((char *)this + 8);
      v75[v22] = v23;
      v75[(v22 + 1)] = HIDWORD(v23);
      v22 += 2;
    }
    while (2 * v73 != v22);
  }
  v75[v12] = 0;
  bzero(v17, 4 * v11);
  if (v74)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 2 * v74;
    do
    {
      uint64_t v26 = *a3++;
      v17[v24] = v26;
      v17[(v24 + 1)] = HIDWORD(v26);
      v24 += 2;
    }
    while (v25 != v24);
  }
  bzero(v19, 4 * v12);
  if (v7) {
    bzero(v21, 4 * v11);
  }
  if (v11)
  {
    while (!v17[v11 - 1])
    {
      if (!--v11) {
        goto LABEL_23;
      }
    }
    LODWORD(v12) = v12 - v11;
  }
  else
  {
    LODWORD(v12) = v72;
  }
LABEL_23:
  if (v11 + v12)
  {
    uint64_t v27 = (v11 + v12);
    while (!v75[v27 - 1])
    {
      LODWORD(v12) = v12 - 1;
      if (!(--v27 * 4))
      {
        LODWORD(v12) = -(int)v11;
        break;
      }
    }
  }
  uint64_t v28 = (v11 - 1);
  if (v11 != 1)
  {
    unsigned int v36 = __clz(v17[v28]);
    int v37 = v12 + v11;
    if (!v36)
    {
      unsigned int v41 = 0;
      goto LABEL_53;
    }
    if (v37)
    {
      unsigned int v38 = 0;
      char v39 = v75;
      uint64_t v40 = (v12 + v11);
      do
      {
        unsigned int v41 = *v39 >> (32 - v36);
        *char v39 = (*v39 << v36) | v38;
        ++v39;
        unsigned int v38 = v41;
        --v40;
      }
      while (v40);
      if (!v11)
      {
LABEL_53:
        v75[v37] = v41;
        uint64_t v46 = (v11 - 2);
        uint64_t v47 = (int)v12;
        do
        {
          uint64_t v48 = (v11 + v47);
          unint64_t v49 = v75[(v48 - 1)] | ((unint64_t)v75[v48] << 32);
          unint64_t v50 = v17[v28];
          unint64_t v51 = v49 / v50;
          unint64_t v52 = v49 % v50;
          if (v49 / v50 == 0x100000000
            || (unint64_t v53 = v49 / v50, v51 * v17[v46] > (v75[(v48 - 2)] | (v52 << 32))))
          {
            unint64_t v53 = v51 - 1;
            unint64_t v54 = v52 + v50;
            if (!HIDWORD(v54)
              && (v51 == 0x100000001 || v53 * v17[v46] > (v75[(v48 - 2)] | (v54 << 32))))
            {
              unint64_t v53 = v51 - 2;
            }
          }
          if (v11)
          {
            uint64_t v55 = 0;
            uint64_t v56 = 0;
            do
            {
              unint64_t v57 = v53 * v17[v55];
              unint64_t v58 = v75[(v47 + v55)] - (v56 + v57);
              v75[(v47 + v55)] = v58;
              unint64_t v59 = HIDWORD(v57) - HIDWORD(v58);
              uint64_t v56 = v59;
              ++v55;
            }
            while (v11 != v55);
            unint64_t v60 = v75[v48];
            v75[v48] = v60 - v59;
            v19[v47] = v53;
            if (v59 > v60)
            {
              uint64_t v61 = 0;
              LOBYTE(v62) = 0;
              v19[v47] = v53 - 1;
              do
              {
                unsigned int v63 = v17[v61];
                unsigned int v64 = v75[(v47 + v61)];
                if (v63 >= v64) {
                  unsigned int v65 = v75[(v47 + v61)];
                }
                else {
                  unsigned int v65 = v17[v61];
                }
                unsigned int v66 = v63 + (v62 & 1) + v64;
                v75[(v47 + v61)] = v66;
                if (v66 >= v65) {
                  int v62 = v62 & (v66 == v65);
                }
                else {
                  int v62 = 1;
                }
                ++v61;
              }
              while (v11 != v61);
              v75[v48] += v62;
            }
          }
          else
          {
            v19[v47] = v53;
          }
          BOOL v34 = v47-- <= 0;
        }
        while (!v34);
        if (v21)
        {
          if (v36)
          {
            if ((v28 & 0x80000000) == 0)
            {
              int v67 = 0;
              do
              {
                unsigned int v68 = v75[v28];
                v21[v28] = (v68 >> v36) | v67;
                int v67 = v68 << (32 - v36);
                BOOL v34 = v28-- <= 0;
              }
              while (!v34);
            }
          }
          else if ((v28 & 0x80000000) == 0)
          {
            do
            {
              v21[v28] = v75[v28];
              BOOL v34 = v28-- <= 0;
            }
            while (!v34);
          }
        }
        goto LABEL_86;
      }
    }
    else
    {
      unsigned int v41 = 0;
      if (!v11) {
        goto LABEL_53;
      }
    }
    unsigned int v42 = 0;
    uint64_t v43 = v11;
    unsigned int v44 = (int *)v17;
    do
    {
      unsigned int v45 = *v44 >> (32 - v36);
      *unsigned int v44 = (*v44 << v36) | v42;
      ++v44;
      unsigned int v42 = v45;
      --v43;
    }
    while (v43);
    goto LABEL_53;
  }
  uint64_t v29 = 0;
  if ((v12 & 0x80000000) == 0)
  {
    unint64_t v30 = *v17;
    uint64_t v31 = v12;
    do
    {
      uint64_t v32 = v29;
      uint64_t v29 = v75[v31];
      unint64_t v33 = v29 | (v32 << 32);
      if (v33)
      {
        if (v33 >= v30)
        {
          if (v33 == v30)
          {
            uint64_t v29 = 0;
            v19[v31] = 1;
          }
          else
          {
            unint64_t v35 = v33 / v30;
            v19[v31] = v35;
            uint64_t v29 = (v29 - v30 * v35);
          }
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v29 = 0;
      }
      v19[v31] = 0;
LABEL_38:
      BOOL v34 = v31-- <= 0;
    }
    while (!v34);
  }
  if (v21) {
    *uint64_t v21 = v29;
  }
LABEL_86:
  if (v73 && a5)
  {
    uint64_t v69 = 0;
    do
    {
      *a5++ = v19[v69] | ((unint64_t)v19[(v69 + 1)] << 32);
      v69 += 2;
    }
    while (2 * v73 != v69);
  }
  if (v74 && v7)
  {
    uint64_t v70 = 0;
    uint64_t v71 = 2 * v74;
    do
    {
      *v7++ = v21[v70] | ((unint64_t)v21[(v70 + 1)] << 32);
      v70 += 2;
    }
    while (v71 != v70);
  }
}

void llvm::APInt::sdiv(llvm::APInt *this@<X0>, const llvm::APInt *a2@<X1>, llvm::APInt *a3@<X8>)
{
  unsigned int v6 = *((_DWORD *)this + 2);
  unsigned int v7 = v6 - 1;
  unsigned int v8 = this;
  if (v6 >= 0x41) {
    unsigned int v8 = (llvm::APInt *)(*(void *)this + 8 * (v7 >> 6));
  }
  unint64_t v9 = *(void *)v8;
  unsigned int v10 = *((_DWORD *)a2 + 2);
  char v11 = v10 - 1;
  if (v10 >= 0x41) {
    uint64_t v12 = (const llvm::APInt *)(*(void *)a2 + 8 * ((v10 - 1) >> 6));
  }
  else {
    uint64_t v12 = a2;
  }
  uint64_t v13 = (1 << v11) & *(void *)v12;
  if ((v9 >> v7))
  {
    if (v13)
    {
      uint64_t v14 = llvm::APInt::APInt((uint64_t)&v28, this);
      llvm::APInt::flipAllBits(v14);
      llvm::APInt::operator++((uint64_t)&v28);
      unsigned int v31 = v29;
      uint64_t v30 = v28;
      unsigned int v29 = 0;
      llvm::APInt::APInt((uint64_t)&v24, a2);
      llvm::APInt::flipAllBits((uint64_t)&v24);
      llvm::APInt::operator++((uint64_t)&v24);
      unsigned int v27 = v25;
      uint64_t v26 = v24;
      unsigned int v25 = 0;
      llvm::APInt::udiv((llvm::APInt *)&v30, (const llvm::APInt *)&v26, a3);
      if (v27 >= 0x41 && v26) {
        MEMORY[0x263E50080](v26, 0x1000C8000313F17);
      }
      if (v25 >= 0x41 && v24) {
        MEMORY[0x263E50080](v24, 0x1000C8000313F17);
      }
      if (v31 >= 0x41 && v30) {
        MEMORY[0x263E50080](v30, 0x1000C8000313F17);
      }
      if (v29 < 0x41) {
        return;
      }
      uint64_t v15 = v28;
      if (!v28) {
        return;
      }
LABEL_32:
      MEMORY[0x263E50080](v15, 0x1000C8000313F17);
      return;
    }
    llvm::APInt::APInt((uint64_t)&v20, this);
    llvm::APInt::flipAllBits((uint64_t)&v20);
    llvm::APInt::operator++((uint64_t)&v20);
    unsigned int v31 = v21;
    uint64_t v30 = v20;
    unsigned int v21 = 0;
    llvm::APInt::udiv((llvm::APInt *)&v30, a2, (llvm::APInt *)&v22);
    llvm::APInt::flipAllBits((uint64_t)&v22);
    llvm::APInt::operator++((uint64_t)&v22);
    *((_DWORD *)a3 + 2) = v23;
    *(void *)a3 = v22;
    int v23 = 0;
    if (v31 >= 0x41 && v30) {
      MEMORY[0x263E50080](v30, 0x1000C8000313F17);
    }
    if (v21 >= 0x41)
    {
      uint64_t v15 = v20;
      if (v20) {
        goto LABEL_32;
      }
    }
  }
  else if (v13)
  {
    llvm::APInt::APInt((uint64_t)&v16, a2);
    llvm::APInt::flipAllBits((uint64_t)&v16);
    llvm::APInt::operator++((uint64_t)&v16);
    unsigned int v31 = v17;
    uint64_t v30 = v16;
    unsigned int v17 = 0;
    llvm::APInt::udiv(this, (const llvm::APInt *)&v30, (llvm::APInt *)&v18);
    llvm::APInt::flipAllBits((uint64_t)&v18);
    llvm::APInt::operator++((uint64_t)&v18);
    *((_DWORD *)a3 + 2) = v19;
    *(void *)a3 = v18;
    int v19 = 0;
    if (v31 >= 0x41 && v30) {
      MEMORY[0x263E50080](v30, 0x1000C8000313F17);
    }
    if (v17 >= 0x41)
    {
      uint64_t v15 = v16;
      if (v16) {
        goto LABEL_32;
      }
    }
  }
  else
  {
    llvm::APInt::udiv(this, a2, a3);
  }
}

void llvm::APInt::urem(llvm::APInt *this@<X0>, const llvm::APInt *a2@<X1>, llvm::APInt *a3@<X8>)
{
  unsigned int v6 = *((_DWORD *)this + 2);
  if (v6 <= 0x40)
  {
    uint64_t v7 = *(void *)this % *(void *)a2;
    unsigned int v8 = a3;
    unsigned int v9 = v6;
LABEL_10:
    llvm::APInt::APInt(v8, v9, v7);
    return;
  }
  unsigned int v10 = (const unint64_t *)(((unint64_t)(v6 - llvm::APInt::countLeadingZerosSlowCase(this))
                                  + 63) >> 6);
  unsigned int v11 = *((_DWORD *)a2 + 2);
  if (v11 > 0x40)
  {
    int v12 = llvm::APInt::countLeadingZerosSlowCase(a2);
    if (!v10)
    {
LABEL_8:
      unsigned int v8 = a3;
      unsigned int v9 = v6;
LABEL_9:
      uint64_t v7 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    int v12 = v11 + __clz(*(void *)a2) - 64;
    if (!v10) {
      goto LABEL_8;
    }
  }
  uint64_t v13 = v11 - v12;
  if (v13 == 1) {
    goto LABEL_8;
  }
  uint64_t v14 = (const unint64_t *)((unint64_t)(v13 + 63) >> 6);
  if (v10 < v14 || (llvm::APInt::compare(this, a2) & 0x80000000) != 0)
  {
    llvm::APInt::APInt((uint64_t)a3, this);
  }
  else
  {
    if (llvm::APInt::operator==((uint64_t)this, (const void **)a2))
    {
      unsigned int v9 = *((_DWORD *)this + 2);
      unsigned int v8 = a3;
      goto LABEL_9;
    }
    unsigned int v9 = *((_DWORD *)this + 2);
    if (v10 == 1)
    {
      uint64_t v7 = **(void **)this % **(void **)a2;
      unsigned int v8 = a3;
      goto LABEL_10;
    }
    llvm::APInt::APInt(a3, v9, 0);
    uint64_t v16 = *(llvm::APInt **)this;
    unsigned int v17 = *(uint64_t **)a2;
    uint64_t v18 = *(unint64_t **)a3;
    llvm::APInt::divide(v16, v10, v17, v14, 0, v18, v15);
  }
}

void llvm::APInt::srem(llvm::APInt *this@<X0>, const llvm::APInt *a2@<X1>, llvm::APInt *a3@<X8>)
{
  unsigned int v6 = *((_DWORD *)this + 2);
  unsigned int v7 = v6 - 1;
  unsigned int v8 = this;
  if (v6 >= 0x41) {
    unsigned int v8 = (llvm::APInt *)(*(void *)this + 8 * (v7 >> 6));
  }
  unint64_t v9 = *(void *)v8;
  unsigned int v10 = *((_DWORD *)a2 + 2);
  char v11 = v10 - 1;
  if (v10 >= 0x41) {
    int v12 = (const llvm::APInt *)(*(void *)a2 + 8 * ((v10 - 1) >> 6));
  }
  else {
    int v12 = a2;
  }
  uint64_t v13 = (1 << v11) & *(void *)v12;
  if ((v9 >> v7))
  {
    if (v13)
    {
      llvm::APInt::APInt((uint64_t)&v25, this);
      llvm::APInt::flipAllBits((uint64_t)&v25);
      llvm::APInt::operator++((uint64_t)&v25);
      unsigned int v28 = v26;
      uint64_t v27 = v25;
      unsigned int v26 = 0;
      llvm::APInt::APInt((uint64_t)&v21, a2);
      llvm::APInt::flipAllBits((uint64_t)&v21);
      llvm::APInt::operator++((uint64_t)&v21);
      unsigned int v24 = v22;
      uint64_t v23 = v21;
      unsigned int v22 = 0;
      llvm::APInt::urem((llvm::APInt *)&v27, (const llvm::APInt *)&v23, (llvm::APInt *)&v29);
      llvm::APInt::flipAllBits((uint64_t)&v29);
      llvm::APInt::operator++((uint64_t)&v29);
      *((_DWORD *)a3 + 2) = v30;
      *(void *)a3 = v29;
      int v30 = 0;
      if (v24 >= 0x41 && v23) {
        MEMORY[0x263E50080](v23, 0x1000C8000313F17);
      }
      if (v22 >= 0x41 && v21) {
        MEMORY[0x263E50080](v21, 0x1000C8000313F17);
      }
      if (v28 >= 0x41 && v27) {
        MEMORY[0x263E50080](v27, 0x1000C8000313F17);
      }
      if (v26 < 0x41) {
        return;
      }
      uint64_t v14 = v25;
      if (!v25) {
        return;
      }
LABEL_32:
      MEMORY[0x263E50080](v14, 0x1000C8000313F17);
      return;
    }
    llvm::APInt::APInt((uint64_t)&v17, this);
    llvm::APInt::flipAllBits((uint64_t)&v17);
    llvm::APInt::operator++((uint64_t)&v17);
    unsigned int v28 = v18;
    uint64_t v27 = v17;
    unsigned int v18 = 0;
    llvm::APInt::urem((llvm::APInt *)&v27, a2, (llvm::APInt *)&v19);
    llvm::APInt::flipAllBits((uint64_t)&v19);
    llvm::APInt::operator++((uint64_t)&v19);
    *((_DWORD *)a3 + 2) = v20;
    *(void *)a3 = v19;
    int v20 = 0;
    if (v28 >= 0x41 && v27) {
      MEMORY[0x263E50080](v27, 0x1000C8000313F17);
    }
    if (v18 >= 0x41)
    {
      uint64_t v14 = v17;
      if (v17) {
        goto LABEL_32;
      }
    }
  }
  else if (v13)
  {
    llvm::APInt::APInt((uint64_t)&v15, a2);
    llvm::APInt::flipAllBits((uint64_t)&v15);
    llvm::APInt::operator++((uint64_t)&v15);
    unsigned int v28 = v16;
    uint64_t v27 = v15;
    unsigned int v16 = 0;
    llvm::APInt::urem(this, (const llvm::APInt *)&v27, a3);
    if (v28 >= 0x41 && v27) {
      MEMORY[0x263E50080](v27, 0x1000C8000313F17);
    }
    if (v16 >= 0x41)
    {
      uint64_t v14 = v15;
      if (v15) {
        goto LABEL_32;
      }
    }
  }
  else
  {
    llvm::APInt::urem(this, a2, a3);
  }
}

llvm::APInt *llvm::APInt::operator=(llvm::APInt *this, uint64_t a2)
{
  uint64_t v3 = *((unsigned int *)this + 2);
  if (v3 > 0x40)
  {
    **(void **)this = a2;
    bzero((void *)(*(void *)this + 8), (((unint64_t)(v3 + 63) >> 3) - 8) & 0xFFFFFFF8);
    return this;
  }
  else
  {
    *(void *)this = a2;
    return (llvm::APInt *)llvm::APInt::clearUnusedBits((uint64_t)this);
  }
}

uint64_t llvm::APInt::sadd_ov@<X0>(llvm::APInt *this@<X0>, const llvm::APInt *a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v6 = this;
  llvm::APInt::APInt((uint64_t)&v23, this);
  uint64_t result = llvm::APInt::operator+=((uint64_t)&v23, (void **)a2);
  unsigned int v9 = v24;
  *(_DWORD *)(a4 + 8) = v24;
  uint64_t v10 = v23;
  *(void *)a4 = v23;
  unsigned int v24 = 0;
  unsigned int v11 = *((_DWORD *)v6 + 2);
  unsigned int v12 = v11 - 1;
  uint64_t v13 = v6;
  if (v11 >= 0x41) {
    uint64_t v13 = (llvm::APInt *)(*(void *)v6 + 8 * (v12 >> 6));
  }
  BOOL v14 = (*(void *)v13 & (1 << v12)) == 0;
  unsigned int v15 = *((_DWORD *)a2 + 2);
  char v16 = v15 - 1;
  if (v15 >= 0x41) {
    uint64_t v17 = (const llvm::APInt *)(*(void *)a2 + 8 * ((v15 - 1) >> 6));
  }
  else {
    uint64_t v17 = a2;
  }
  if ((v14 ^ (((*(void *)v17 >> v16) & 1) == 0)))
  {
    BOOL v18 = 0;
  }
  else
  {
    char v19 = v9 - 1;
    int v20 = (void *)(v10 + 8 * ((v9 - 1) >> 6));
    if (v9 >= 0x41) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = (void *)a4;
    }
    uint64_t v22 = *v21 & (1 << v19);
    if (v11 >= 0x41) {
      unsigned int v6 = (llvm::APInt *)(*(void *)v6 + 8 * (v12 >> 6));
    }
    BOOL v18 = (v22 == 0) ^ ((*(void *)v6 & (1 << v12)) == 0);
  }
  *a3 = v18;
  return result;
}

BOOL llvm::APInt::isMinSignedValue(llvm::APInt *this)
{
  unsigned int v1 = *((_DWORD *)this + 2);
  if (v1 > 0x40)
  {
    if (((*(void *)(*(void *)this + 8 * ((v1 - 1) >> 6)) >> (v1 - 1)) & 1) == 0) {
      return 0;
    }
    return llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this) == v1 - 1;
  }
  else
  {
    return *(void *)this == 1 << (v1 - 1);
  }
}

BOOL llvm::APInt::isAllOnes(llvm::APInt *this)
{
  unsigned int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 1;
  }
  if (v1 > 0x40) {
    return llvm::APInt::countTrailingOnesSlowCase(this) == v1;
  }
  else {
    return *(void *)this == 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
  }
}

uint64_t llvm::APInt::smul_ov@<X0>(llvm::APInt *this@<X0>, const llvm::APInt *a2@<X1>, BOOL *a3@<X2>, llvm::APInt *a4@<X8>)
{
  uint64_t result = (uint64_t)llvm::APInt::operator*((uint64_t)this, a2, a4);
  unsigned int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2;
  if (v9 >= 0x41)
  {
    uint64_t result = llvm::APInt::countLeadingZerosSlowCase(a2);
    if (v9 - result > 0x40) {
      goto LABEL_5;
    }
    uint64_t v10 = *(const llvm::APInt **)a2;
  }
  if (!*(void *)v10)
  {
    *a3 = 0;
    return result;
  }
LABEL_5:
  llvm::APInt::sdiv(a4, a2, (llvm::APInt *)&__s1);
  if (v12 > 0x40)
  {
    if (!memcmp(__s1, *(const void **)this, (((unint64_t)v12 + 63) >> 3) & 0x3FFFFFF8))
    {
LABEL_7:
      uint64_t result = llvm::APInt::isMinSignedValue(this);
      if (result) {
        uint64_t result = llvm::APInt::isAllOnes(a2);
      }
      goto LABEL_11;
    }
  }
  else if (__s1 == *(void **)this)
  {
    goto LABEL_7;
  }
  uint64_t result = 1;
LABEL_11:
  *a3 = result;
  if (v12 >= 0x41)
  {
    uint64_t result = (uint64_t)__s1;
    if (__s1) {
      return MEMORY[0x263E50080](__s1, 0x1000C8000313F17);
    }
  }
  return result;
}

unint64_t llvm::APInt::countl_one(llvm::APInt *this)
{
  unsigned int v1 = *((_DWORD *)this + 2);
  if (v1 > 0x40) {
    return llvm::APInt::countLeadingOnesSlowCase(this);
  }
  if (v1) {
    return __clz(~(*(void *)this << -(char)v1));
  }
  return 0;
}

void llvm::APInt::toString(llvm::APInt *this, uint64_t a2, unsigned int a3, int a4, int a5)
{
  unsigned int v8 = this;
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (a5)
  {
    HIDWORD(v9) = a3;
    LODWORD(v9) = a3 - 2;
    uint64_t v10 = off_265590DE8[(int)(v9 >> 1)];
  }
  else
  {
    uint64_t v10 = "";
  }
  unsigned int v11 = *((_DWORD *)this + 2);
  if (v11 <= 0x40)
  {
    unint64_t v12 = *(void *)this;
    if (*(void *)this)
    {
      if (a4)
      {
        unint64_t v12 = (uint64_t)(v12 << -(char)v11) >> -(char)v11;
        if ((v12 & 0x8000000000000000) != 0)
        {
          llvm::SmallVectorTemplateBase<char,true>::push_back((void *)a2, 45);
          unint64_t v12 = -(uint64_t)v12;
        }
      }
      char v13 = *v10;
      if (*v10)
      {
        BOOL v14 = (unsigned __int8 *)(v10 + 1);
        do
        {
          llvm::SmallVectorTemplateBase<char,true>::push_back((void *)a2, v13);
          int v15 = *v14++;
          char v13 = v15;
        }
        while (v15);
      }
      char v16 = v52;
      if (v12)
      {
        char v16 = v52;
        do
        {
          *--char v16 = llvm::APInt::toString(llvm::SmallVectorImpl<char> &,unsigned int,BOOL,BOOL)const::Digits[v12 % a3];
          BOOL v17 = v12 >= a3;
          v12 /= a3;
        }
        while (v17);
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>((void *)a2, v16, v52);
      return;
    }
    goto LABEL_17;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(this) == v11)
  {
LABEL_17:
    char v18 = *v10;
    if (*v10)
    {
      char v19 = (unsigned __int8 *)(v10 + 1);
      do
      {
        llvm::SmallVectorTemplateBase<char,true>::push_back((void *)a2, v18);
        int v20 = *v19++;
        char v18 = v20;
      }
      while (v20);
    }
    llvm::SmallVectorTemplateBase<char,true>::push_back((void *)a2, 48);
    return;
  }
  llvm::APInt::APInt((uint64_t)&v47, v8);
  if (a4)
  {
    unsigned int v21 = *((_DWORD *)v8 + 2);
    unsigned int v22 = v21 - 1;
    if (v21 >= 0x41) {
      unsigned int v8 = (llvm::APInt *)(*(void *)v8 + 8 * (v22 >> 6));
    }
    if ((*(void *)v8 >> v22))
    {
      llvm::APInt::flipAllBits((uint64_t)&v47);
      llvm::APInt::operator++((uint64_t)&v47);
      llvm::SmallVectorTemplateBase<char,true>::push_back((void *)a2, 45);
    }
  }
  char v23 = *v10;
  if (*v10)
  {
    unsigned int v24 = (unsigned __int8 *)(v10 + 1);
    do
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back((void *)a2, v23);
      int v25 = *v24++;
      char v23 = v25;
    }
    while (v25);
  }
  uint64_t v26 = *(unsigned int *)(a2 + 8);
  if (a3 == 2 || a3 == 8)
  {
    if (a3 == 8) {
      int v27 = 3;
    }
    else {
      int v27 = 1;
    }
    goto LABEL_38;
  }
  if (a3 == 16)
  {
    int v27 = 4;
LABEL_38:
    unsigned int v28 = a3 - 1;
    unsigned int v29 = v27;
    while (1)
    {
      LODWORD(v30) = v48;
      if (v48 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v47) == v30) {
          goto LABEL_75;
        }
        unint64_t v31 = *(void *)v47;
      }
      else
      {
        LODWORD(v31) = v47;
        if (!v47) {
          goto LABEL_75;
        }
      }
      llvm::SmallVectorTemplateBase<char,true>::push_back((void *)a2, llvm::APInt::toString(llvm::SmallVectorImpl<char> &,unsigned int,BOOL,BOOL)const::Digits[v31 & v28]);
      if (v48 > 0x40)
      {
        llvm::APInt::tcShiftRight(v47, (unint64_t *)(((unint64_t)v48 + 63) >> 6), v29);
      }
      else if (v48 == v29)
      {
        uint64_t v47 = 0;
      }
      else
      {
        uint64_t v47 = (llvm::APInt *)((unint64_t)v47 >> v29);
      }
    }
  }
  while (1)
  {
    uint64_t v30 = v48;
    if (v48 <= 0x40)
    {
      if (!v47) {
        break;
      }
      uint64_t v49 = a3;
      unint64_t v32 = (unint64_t)v47 / a3;
      unint64_t v46 = (unint64_t)v47 % a3;
      unsigned int v33 = v48;
LABEL_52:
      llvm::APInt::APInt((llvm::APInt *)&v50, v33, v32);
      if (v48 >= 0x41 && v47) {
        MEMORY[0x263E50080](v47, 0x1000C8000313F17);
      }
      uint64_t v47 = v50;
LABEL_65:
      unsigned int v48 = v51;
      goto LABEL_66;
    }
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v47) == v30) {
      break;
    }
    unint64_t v46 = 0;
    uint64_t v49 = a3;
    uint64_t v34 = v30 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v47);
    unint64_t v35 = (unint64_t)(v34 + 63) >> 6;
    if (!v35)
    {
      unsigned int v36 = v30;
      uint64_t v37 = 0;
LABEL_61:
      llvm::APInt::APInt((llvm::APInt *)&v50, v36, v37);
      if (v48 >= 0x41 && v47) {
        MEMORY[0x263E50080](v47, 0x1000C8000313F17);
      }
      unint64_t v46 = 0;
      uint64_t v47 = v50;
      goto LABEL_65;
    }
    if (a3 == 1)
    {
      llvm::APInt::operator=((llvm::APInt *)&v47, (const llvm::APInt *)&v47);
      unint64_t v46 = 0;
      goto LABEL_66;
    }
    if (v34 <= 0x40)
    {
      if (*(void *)v47 < (unint64_t)a3)
      {
        unint64_t v46 = *(void *)v47;
        unsigned int v33 = v30;
        unint64_t v32 = 0;
        goto LABEL_52;
      }
      if (*(void *)v47 == a3)
      {
        unsigned int v36 = v30;
        uint64_t v37 = 1;
        goto LABEL_61;
      }
    }
    llvm::APInt::reallocate((uint64_t)&v47, v30);
    if (v35 == 1)
    {
      unint64_t v39 = *(void *)v47;
      unint64_t v40 = *(void *)v47 / (unint64_t)a3;
      llvm::APInt::operator=((llvm::APInt *)&v47, v40);
      unint64_t v46 = v39 - v40 * a3;
    }
    else
    {
      llvm::APInt::divide(v47, (const unint64_t *)v35, &v49, (const unint64_t *)1, (unint64_t *)v47, &v46, v38);
      bzero((char *)v47 + 8 * v35, 8 * (((unint64_t)(v30 + 63) >> 6) - v35));
    }
LABEL_66:
    llvm::SmallVectorTemplateBase<char,true>::push_back((void *)a2, llvm::APInt::toString(llvm::SmallVectorImpl<char> &,unsigned int,BOOL,BOOL)const::Digits[v46]);
  }
LABEL_75:
  uint64_t v41 = *(void *)(a2 + 8);
  unsigned int v42 = (unsigned char *)(*(void *)a2 + v41 - 1);
  if (v26 != v41 && (unint64_t)v42 > *(void *)a2 + v26)
  {
    unint64_t v44 = v26 + *(void *)a2 + 1;
    do
    {
      char v45 = *(unsigned char *)(v44 - 1);
      *(unsigned char *)(v44 - 1) = *v42;
      *v42-- = v45;
      BOOL v17 = v44++ >= (unint64_t)v42;
    }
    while (!v17);
    LODWORD(v30) = v48;
  }
  if (v30 >= 0x41 && v47) {
    MEMORY[0x263E50080](v47, 0x1000C8000313F17);
  }
}

void llvm::APInt::print(llvm::APInt *this, llvm::raw_ostream *a2, int a3)
{
  v6[5] = *MEMORY[0x263EF8340];
  unsigned int v4 = v6;
  long long v5 = xmmword_261E8AB60;
  llvm::APInt::toString(this, (uint64_t)&v4, 0xAu, a3, 0);
  llvm::raw_ostream::write(a2, (const char *)v4, v5);
  if (v4 != v6) {
    free(v4);
  }
}

void llvm::APInt::tcExtract(llvm::APInt *this, unint64_t *a2, uint64_t a3, const unint64_t *a4, unsigned int a5)
{
  unsigned int v5 = a4;
  unsigned int v7 = a2;
  unsigned int v9 = a4 + 63;
  unsigned int v10 = (a4 + 63) >> 6;
  unsigned int v11 = a5 >> 6;
  if ((a4 + 63) >= 0x40)
  {
    unint64_t v12 = (uint64_t *)(a3 + 8 * v11);
    char v13 = this;
    uint64_t v14 = v9 >> 6;
    do
    {
      uint64_t v15 = *v12++;
      *(void *)char v13 = v15;
      char v13 = (llvm::APInt *)((char *)v13 + 8);
      --v14;
    }
    while (v14);
  }
  unsigned int v16 = a5 & 0x3F;
  llvm::APInt::tcShiftRight(this, (unint64_t *)(v9 >> 6), v16);
  unsigned int v17 = (v9 & 0xFFFFFFC0) - v16;
  if (v17 < v5)
  {
    unsigned int v18 = v10 - 1;
    unint64_t v19 = ((*(void *)(a3 + 8 * (v11 + v10)) & (0xFFFFFFFFFFFFFFFFLL >> (v17 - v5))) << v17) | *((void *)this + v10 - 1);
LABEL_9:
    *((void *)this + v18) = v19;
    goto LABEL_10;
  }
  if (v17 > v5 && (v5 & 0x3F) != 0)
  {
    unsigned int v18 = v10 - 1;
    unint64_t v19 = *((void *)this + v10 - 1) & (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
    goto LABEL_9;
  }
LABEL_10:
  if (v10 < v7)
  {
    bzero((char *)this + ((v9 >> 3) & 0x1FFFFFF8), 8 * (~v10 + v7) + 8);
  }
}

void *llvm::APInt::tcNegate(void *this, unint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = 0;
    do
    {
      this[v2] = ~this[v2];
      ++v2;
    }
    while (a2 != v2);
    BOOL v3 = __CFADD__((*this)++, 1);
    if (v3)
    {
      unsigned int v4 = this + 1;
      uint64_t v5 = a2 - 1;
      do
      {
        if (!v5) {
          break;
        }
        --v5;
        BOOL v3 = __CFADD__((*v4++)++, 1);
      }
      while (v3);
    }
  }
  return this;
}

void llvm::APInt::tcFullMultiply(llvm::APInt *this, unint64_t *a2, const unint64_t **a3, const unint64_t *a4, const unint64_t *a5)
{
  unsigned int v7 = this;
  do
  {
    unsigned int v8 = a5;
    a5 = a4;
    unsigned int v9 = (unint64_t *)a3;
    a3 = (const unint64_t **)a2;
    a2 = v9;
    a4 = v8;
  }
  while (a5 > v8);
  *(void *)this = 0;
  if (v8 >= 2) {
    bzero((char *)this + 8, 8 * (v8 - 2) + 8);
  }
  if (a5)
  {
    a5 = (const unint64_t *)a5;
    do
    {
      unsigned int v10 = *a3++;
      llvm::APInt::tcMultiplyPart(v7, v9, v10, 0, v8, v8 + 1, 1);
      unsigned int v7 = (llvm::APInt *)((char *)v7 + 8);
      a5 = (const unint64_t *)((char *)a5 - 1);
    }
    while (a5);
  }
}

void *llvm::APInt::setBits(void *this, unsigned int a2, unsigned int a3)
{
  if (a2 != a3)
  {
    if (a2 > 0x3F || a3 > 0x40)
    {
      return llvm::APInt::setBitsSlowCase(this, a2, a3);
    }
    else
    {
      unint64_t v3 = 0xFFFFFFFFFFFFFFFFLL >> (a2 - a3) << a2;
      if (*((_DWORD *)this + 2) > 0x40u) {
        *(void *)*this |= v3;
      }
      else {
        *this |= v3;
      }
    }
  }
  return this;
}

unsigned int *llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(unsigned int *result, int a2)
{
  unint64_t v3 = result;
  uint64_t v4 = result[2];
  if (v4 >= result[3])
  {
    uint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v4 + 1, 4);
    LODWORD(v4) = v3[2];
  }
  *(_DWORD *)(*(void *)v3 + 4 * v4) = a2;
  ++v3[2];
  return result;
}

uint64_t llvm::APInt::APInt(uint64_t this, const llvm::APInt *a2)
{
  unsigned int v2 = *((_DWORD *)a2 + 2);
  *(_DWORD *)(this + 8) = v2;
  if (v2 > 0x40) {
    operator new[]();
  }
  *(void *)this = *(void *)a2;
  return this;
}

uint64_t llvm::APInt::getNumSignBits(llvm::APInt *this)
{
  unsigned int v1 = *((_DWORD *)this + 2);
  unsigned int v2 = v1 - 1;
  if (v1 <= 0x40)
  {
    if (((*(void *)this >> v2) & 1) == 0) {
      return v1 + __clz(*(void *)this) - 64;
    }
    return llvm::APInt::countl_one(this);
  }
  if ((*(void *)(*(void *)this + 8 * (v2 >> 6)) >> v2)) {
    return llvm::APInt::countl_one(this);
  }
  return llvm::APInt::countLeadingZerosSlowCase(this);
}

llvm::APInt **llvm::APInt::shl@<X0>(llvm::APInt *this@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X8>)
{
  llvm::APInt::APInt(a3, this);
  unsigned int LimitedValue = llvm::APInt::getLimitedValue(a2, *(unsigned int *)(a3 + 8));
  return llvm::APInt::operator<<=((llvm::APInt **)a3, LimitedValue);
}

uint64_t llvm::ARMAttributeParser::stringAttribute@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = a1[15];
  if (v6)
  {
    uint64_t v7 = 24 * v6;
    unsigned int v8 = &str_2;
    unint64_t v9 = a1[14];
    while (*(_DWORD *)v9 != a2)
    {
      v9 += 24;
      v7 -= 24;
      if (!v7)
      {
        unint64_t v10 = 0;
        goto LABEL_12;
      }
    }
  }
  else
  {
    unint64_t v9 = a1[14];
  }
  if (v9 == a1[14] + 24 * v6)
  {
    unint64_t v10 = 0;
    unsigned int v8 = &str_2;
  }
  else
  {
    uint64_t v11 = *(void *)(v9 + 8);
    unint64_t v12 = *(void *)(v9 + 16);
    uint64_t v13 = 4;
    if (v12 < 4) {
      uint64_t v13 = v12;
    }
    unsigned int v8 = (void *)(v11 + v13);
    unint64_t v10 = v12 - v13;
  }
LABEL_12:
  CStrRef = llvm::DataExtractor::getCStrRef((llvm::DataExtractor *)(a1 + 16), a1 + 19, (llvm::Error *)(a1 + 20));
  uint64_t result = a1[13];
  if (result)
  {
    uint64_t v17 = v14;
    unint64_t v18 = a1[13];
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)result + 224))(result, "Attribute", 9);
    (*(void (**)(unint64_t, const char *, uint64_t, uint64_t))(*(void *)a1[13] + 24))(a1[13], "Tag", 3, a2);
    if (v10) {
      (*(void (**)(unint64_t, const char *, uint64_t, void *, unint64_t))(*(void *)a1[13]
    }
                                                                                                + 208))(a1[13], "TagName", 7, v8, v10);
    (*(void (**)(unint64_t, const char *, uint64_t, void *, uint64_t))(*(void *)a1[13] + 208))(a1[13], "Value", 5, CStrRef, v17);
    uint64_t result = (*(uint64_t (**)(unint64_t))(*(void *)v18 + 232))(v18);
  }
  *a3 = 0;
  return result;
}

uint64_t llvm::ARMAttributeParser::CPU_arch@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "CPU_arch", a2, (uint64_t)CPU_arch_strings, 0x17uLL, a3);
}

uint64_t llvm::ARMAttributeParser::CPU_arch_profile@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t ULEB128 = llvm::DataExtractor::getULEB128((llvm::DataExtractor *)(a1 + 16), a1 + 19, (llvm::Error *)(a1 + 20));
  uint64_t v7 = "Unknown";
  uint64_t v8 = 7;
  unint64_t v9 = "Microcontroller";
  uint64_t v10 = 15;
  uint64_t v11 = "Real-time";
  uint64_t v12 = 9;
  uint64_t v13 = "Classic";
  if (ULEB128 != 83) {
    uint64_t v13 = "Unknown";
  }
  if (ULEB128 != 82)
  {
    uint64_t v12 = 7;
    uint64_t v11 = v13;
  }
  if (ULEB128 != 77)
  {
    uint64_t v10 = v12;
    unint64_t v9 = v11;
  }
  if (ULEB128 == 65)
  {
    uint64_t v8 = 11;
    uint64_t v7 = "Application";
  }
  if (!ULEB128)
  {
    uint64_t v8 = 4;
    uint64_t v7 = "None";
  }
  if (ULEB128 <= 76) {
    uint64_t v14 = v8;
  }
  else {
    uint64_t v14 = v10;
  }
  if (ULEB128 <= 76) {
    uint64_t v15 = (uint64_t)v7;
  }
  else {
    uint64_t v15 = (uint64_t)v9;
  }
  uint64_t result = llvm::ELFAttributeParser::printAttribute((uint64_t)a1, a2, ULEB128, v15, v14);
  *a3 = 0;
  return result;
}

uint64_t llvm::ARMAttributeParser::ARM_ISA_use@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ARM_ISA_use", a2, (uint64_t)&llvm::ARMAttributeParser::ARM_ISA_use(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

uint64_t llvm::ARMAttributeParser::THUMB_ISA_use@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "THUMB_ISA_use", a2, (uint64_t)&llvm::ARMAttributeParser::THUMB_ISA_use(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

uint64_t llvm::ARMAttributeParser::FP_arch@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "FP_arch", a2, (uint64_t)&llvm::ARMAttributeParser::FP_arch(llvm::ARMBuildAttrs::AttrType)::strings, 9uLL, a3);
}

uint64_t llvm::ARMAttributeParser::WMMX_arch@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "WMMX_arch", a2, (uint64_t)&llvm::ARMAttributeParser::WMMX_arch(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

uint64_t llvm::ARMAttributeParser::Advanced_SIMD_arch@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "Advanced_SIMD_arch", a2, (uint64_t)&llvm::ARMAttributeParser::Advanced_SIMD_arch(llvm::ARMBuildAttrs::AttrType)::strings, 5uLL, a3);
}

uint64_t llvm::ARMAttributeParser::MVE_arch@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "MVE_arch", a2, (uint64_t)&llvm::ARMAttributeParser::MVE_arch(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

uint64_t llvm::ARMAttributeParser::PCS_config@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "PCS_config", a2, (uint64_t)&llvm::ARMAttributeParser::PCS_config(llvm::ARMBuildAttrs::AttrType)::strings, 8uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_PCS_R9_use@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_PCS_R9_use", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_PCS_R9_use(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_PCS_RW_data@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_PCS_RW_data", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_PCS_RW_data(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_PCS_RO_data@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_PCS_RO_data", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_PCS_RO_data(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_PCS_GOT_use@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_PCS_GOT_use", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_PCS_GOT_use(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_PCS_wchar_t@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_PCS_wchar_t", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_PCS_wchar_t(llvm::ARMBuildAttrs::AttrType)::strings, 5uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_FP_rounding@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_rounding", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_FP_rounding(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_FP_denormal@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_denormal", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_FP_denormal(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_FP_exceptions@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_exceptions", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_FP_exceptions(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_FP_user_exceptions@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_user_exceptions", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_FP_user_exceptions(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_FP_number_model@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_number_model", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_FP_number_model(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::ABI_align_needed(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v23[2] = *MEMORY[0x263EF8340];
  unint64_t ULEB128 = llvm::DataExtractor::getULEB128((llvm::DataExtractor *)(a1 + 16), a1 + 19, (llvm::Error *)(a1 + 20));
  uint64_t v7 = ULEB128;
  std::string __p = 0;
  long long v21 = 0uLL;
  if (ULEB128 <= 3)
  {
    uint64_t v8 = llvm::ARMAttributeParser::ABI_align_needed(llvm::ARMBuildAttrs::AttrType)::strings[ULEB128];
LABEL_13:
    MEMORY[0x263E4FD30](&__p, v8);
    goto LABEL_14;
  }
  if (ULEB128 > 0xC)
  {
    uint64_t v8 = "Invalid";
    goto LABEL_13;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 1 << ULEB128;
  do
  {
    v22.__r_.__value_.__s.__data_[v9-- + 20] = (v10 % 0xA) | 0x30;
    BOOL v11 = v10 > 9;
    v10 /= 0xAuLL;
  }
  while (v11);
  std::string::__init_with_size[abi:nn180100]<char *,char *>(&v19, &v22.__r_.__value_.__s.__data_[v9 + 21], &v22.__r_.__value_.__s.__data_[21], -v9);
  uint64_t v12 = std::string::insert(&v19, 0, "8-byte alignment, ");
  std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v22, "-byte extended alignment");
  uint64_t v15 = (void *)v14->__r_.__value_.__r.__words[0];
  v23[0] = v14->__r_.__value_.__l.__size_;
  *(void *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  std::string __p = v15;
  *(void *)&long long v21 = v23[0];
  *(void *)((char *)&v21 + 7) = *(void *)((char *)v23 + 7);
  HIBYTE(v21) = v16;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
LABEL_14:
  if (v21 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if (v21 >= 0) {
    uint64_t v18 = HIBYTE(v21);
  }
  else {
    uint64_t v18 = v21;
  }
  llvm::ELFAttributeParser::printAttribute((uint64_t)a1, a2, v7, (uint64_t)p_p, v18);
  *a3 = 0;
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void llvm::ARMAttributeParser::ABI_align_preserved(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t ULEB128 = llvm::DataExtractor::getULEB128((llvm::DataExtractor *)(a1 + 16), a1 + 19, (llvm::Error *)(a1 + 20));
  uint64_t v7 = ULEB128;
  memset(&__p, 0, sizeof(__p));
  if (ULEB128 > 3)
  {
    if (ULEB128 > 0xC)
    {
      MEMORY[0x263E4FD30](&__p, "Invalid");
    }
    else
    {
      std::string::basic_string[abi:nn180100]<0>(&v26, "8-byte stack alignment, ");
      uint64_t v8 = 0;
      unint64_t v9 = 1 << v7;
      do
      {
        v29.__r_.__value_.__s.__data_[v8-- + 20] = (v9 % 0xA) | 0x30;
        BOOL v10 = v9 > 9;
        v9 /= 0xAuLL;
      }
      while (v10);
      std::string::__init_with_size[abi:nn180100]<char *,char *>(v24, &v29.__r_.__value_.__s.__data_[v8 + 21], &v29.__r_.__value_.__s.__data_[21], -v8);
      if ((v25 & 0x80u) == 0) {
        BOOL v11 = v24;
      }
      else {
        BOOL v11 = (void **)v24[0];
      }
      if ((v25 & 0x80u) == 0) {
        std::string::size_type v12 = v25;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v24[1];
      }
      std::string::size_type v13 = std::string::append(&v26, (const std::string::value_type *)v11, v12);
      std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:nn180100]<0>(v22, "-byte data alignment");
      if ((v23 & 0x80u) == 0) {
        uint64_t v15 = v22;
      }
      else {
        uint64_t v15 = (void **)v22[0];
      }
      if ((v23 & 0x80u) == 0) {
        std::string::size_type v16 = v23;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v22[1];
      }
      uint64_t v17 = std::string::append(&v29, (const std::string::value_type *)v15, v16);
      std::string::size_type v18 = v17->__r_.__value_.__r.__words[0];
      v28[0] = v17->__r_.__value_.__l.__size_;
      *(void *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
      char v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = v18;
      __p.__r_.__value_.__l.__size_ = v28[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v28 + 7);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v19;
      if ((char)v23 < 0) {
        operator delete(v22[0]);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if ((char)v25 < 0) {
        operator delete(v24[0]);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(&v29, llvm::ARMAttributeParser::ABI_align_preserved(llvm::ARMBuildAttrs::AttrType)::strings[ULEB128]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v29;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  llvm::ELFAttributeParser::printAttribute((uint64_t)a1, a2, v7, (uint64_t)p_p, size);
  *a3 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t llvm::ARMAttributeParser::ABI_enum_size@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_enum_size", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_enum_size(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_HardFP_use@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_HardFP_use", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_HardFP_use(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_VFP_args@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_VFP_args", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_VFP_args(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_WMMX_args@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_WMMX_args", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_WMMX_args(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_optimization_goals@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_optimization_goals", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_optimization_goals(llvm::ARMBuildAttrs::AttrType)::strings, 7uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_FP_optimization_goals@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_optimization_goals", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_FP_optimization_goals(llvm::ARMBuildAttrs::AttrType)::strings, 7uLL, a3);
}

uint64_t llvm::ARMAttributeParser::compatibility@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = (llvm::DataExtractor *)(a1 + 16);
  uint64_t v7 = a1 + 19;
  uint64_t v8 = (llvm::Error *)(a1 + 20);
  unint64_t ULEB128 = llvm::DataExtractor::getULEB128((llvm::DataExtractor *)(a1 + 16), a1 + 19, (llvm::Error *)(a1 + 20));
  CStrRef = llvm::DataExtractor::getCStrRef(v6, v7, v8);
  uint64_t result = a1[13];
  if (result)
  {
    size_t v13 = v10;
    unint64_t v28 = a1[13];
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)result + 224))(result, "Attribute", 9);
    (*(void (**)(unint64_t, const char *, uint64_t, uint64_t))(*(void *)a1[13] + 24))(a1[13], "Tag", 3, a2);
    std::string::size_type v14 = (llvm::raw_ostream *)(*(uint64_t (**)(void))(*(void *)a1[13] + 264))();
    uint64_t v15 = v14;
    std::string::size_type v16 = (_DWORD *)*((void *)v14 + 4);
    if (*((void *)v14 + 3) - (void)v16 > 6uLL)
    {
      *(_DWORD *)((char *)v16 + 3) = 540697973;
      *std::string::size_type v16 = 1970037078;
      *((void *)v14 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v14, "Value: ", 7uLL);
    }
    write_unsigned<unsigned long>(v15, ULEB128, 0, 0, 0);
    uint64_t v17 = (_WORD *)*((void *)v15 + 4);
    if (*((void *)v15 + 3) - (void)v17 > 1uLL)
    {
      *uint64_t v17 = 8236;
      *((void *)v15 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v15, ", ", 2uLL);
    }
    std::string::size_type v18 = llvm::raw_ostream::operator<<(v15, CStrRef, v13);
    char v19 = (unsigned char *)*((void *)v18 + 4);
    if ((unint64_t)v19 >= *((void *)v18 + 3))
    {
      llvm::raw_ostream::write(v18, 10);
    }
    else
    {
      *((void *)v18 + 4) = v19 + 1;
      *char v19 = 10;
    }
    unint64_t v20 = a1[15];
    if (v20)
    {
      uint64_t v21 = 24 * v20;
      std::string v22 = &str_2;
      unint64_t v23 = a1[14];
      while (*(_DWORD *)v23 != a2)
      {
        v23 += 24;
        v21 -= 24;
        if (!v21)
        {
          unint64_t v24 = 0;
          goto LABEL_22;
        }
      }
    }
    else
    {
      unint64_t v23 = a1[14];
    }
    if (v23 == a1[14] + 24 * v20)
    {
      unint64_t v24 = 0;
      std::string v22 = &str_2;
    }
    else
    {
      uint64_t v25 = *(void *)(v23 + 8);
      unint64_t v26 = *(void *)(v23 + 16);
      uint64_t v27 = 4;
      if (v26 < 4) {
        uint64_t v27 = v26;
      }
      std::string v22 = (void *)(v25 + v27);
      unint64_t v24 = v26 - v27;
    }
LABEL_22:
    (*(void (**)(unint64_t, const char *, uint64_t, void *, unint64_t))(*(void *)a1[13] + 208))(a1[13], "TagName", 7, v22, v24);
    (*(void (**)(void))(*(void *)a1[13] + 208))();
    uint64_t result = (*(uint64_t (**)(unint64_t))(*(void *)v28 + 232))(v28);
  }
  *a3 = 0;
  return result;
}

uint64_t llvm::ARMAttributeParser::CPU_unaligned_access@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "CPU_unaligned_access", a2, (uint64_t)&llvm::ARMAttributeParser::CPU_unaligned_access(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

uint64_t llvm::ARMAttributeParser::FP_HP_extension@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "FP_HP_extension", a2, (uint64_t)&llvm::ARMAttributeParser::FP_HP_extension(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

uint64_t llvm::ARMAttributeParser::ABI_FP_16bit_format@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_16bit_format", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_FP_16bit_format(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

uint64_t llvm::ARMAttributeParser::MPextension_use@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "MPextension_use", a2, (uint64_t)&llvm::ARMAttributeParser::MPextension_use(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

uint64_t llvm::ARMAttributeParser::DIV_use@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "DIV_use", a2, (uint64_t)&llvm::ARMAttributeParser::DIV_use(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

uint64_t llvm::ARMAttributeParser::DSP_extension@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "DSP_extension", a2, (uint64_t)&llvm::ARMAttributeParser::DSP_extension(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

uint64_t llvm::ARMAttributeParser::T2EE_use@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "T2EE_use", a2, (uint64_t)&llvm::ARMAttributeParser::T2EE_use(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

uint64_t llvm::ARMAttributeParser::Virtualization_use@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "Virtualization_use", a2, (uint64_t)&llvm::ARMAttributeParser::Virtualization_use(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

uint64_t llvm::ARMAttributeParser::PAC_extension@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "PAC_extension", a2, (uint64_t)&llvm::ARMAttributeParser::PAC_extension(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

uint64_t llvm::ARMAttributeParser::BTI_extension@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "BTI_extension", a2, (uint64_t)&llvm::ARMAttributeParser::BTI_extension(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

uint64_t llvm::ARMAttributeParser::PACRET_use@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "PACRET_use", a2, (uint64_t)&llvm::ARMAttributeParser::PACRET_use(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

uint64_t llvm::ARMAttributeParser::BTI_use@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute(a1, "BTI_use", a2, (uint64_t)&llvm::ARMAttributeParser::BTI_use(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

uint64_t llvm::ARMAttributeParser::nodefaults@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t ULEB128 = llvm::DataExtractor::getULEB128((llvm::DataExtractor *)(a1 + 16), a1 + 19, (llvm::Error *)(a1 + 20));
  uint64_t result = llvm::ELFAttributeParser::printAttribute((uint64_t)a1, a2, ULEB128, (uint64_t)"Unspecified Tags UNDEFINED", 26);
  *a3 = 0;
  return result;
}

void llvm::ARMAttributeParser::also_compatible_with(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v95[1] = *MEMORY[0x263EF8340];
  uint64_t v93 = v95;
  long long v94 = xmmword_261E8A740;
  int v81 = 0;
  char v85 = 0;
  uint64_t v86 = 0;
  int v87 = 1;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v82 = 0;
  unsigned int v80 = &unk_270DBD758;
  __int16 v88 = (void **)&v93;
  llvm::raw_ostream::SetUnbuffered(&v80);
  unint64_t v5 = a1[19];
  CStrRef = llvm::DataExtractor::getCStrRef((llvm::DataExtractor *)(a1 + 16), a1 + 19, (llvm::Error *)(a1 + 20));
  uint64_t v8 = v7;
  unint64_t v9 = a1[19];
  a1[19] = v5;
  uint64_t ULEB128 = llvm::DataExtractor::getULEB128((llvm::DataExtractor *)(a1 + 16), a1 + 19, (llvm::Error *)(a1 + 20));
  uint64_t v79 = ULEB128;
  unint64_t v11 = a1[15];
  if (!v11)
  {
LABEL_5:
    uint64_t v15 = std::generic_category();
    *(void *)&long long v76 = &v79;
    uint64_t v77 = " is not a valid tag number";
    __int16 v78 = 780;
    llvm::Twine::str((llvm::Twine *)&v76, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v17 = 33;
    goto LABEL_9;
  }
  int v12 = ULEB128;
  size_t v13 = (_DWORD *)a1[14];
  uint64_t v14 = 24 * v11;
  while (ULEB128 != *v13)
  {
    v13 += 6;
    v14 -= 24;
    if (!v14) {
      goto LABEL_5;
    }
  }
  if ((unint64_t)(ULEB128 - 4) > 0x3F) {
    goto LABEL_57;
  }
  if (((1 << (ULEB128 - 4)) & 0x8000000010000003) != 0)
  {
    std::string::size_type v18 = llvm::DataExtractor::getCStrRef((llvm::DataExtractor *)(a1 + 16), a1 + 19, (llvm::Error *)(a1 + 20));
    size_t v20 = v19;
    unint64_t v21 = a1[15];
    if (v21)
    {
      uint64_t v22 = 24 * v21;
      unint64_t v23 = &str_2;
      unint64_t v24 = a1[14];
      while (*(_DWORD *)v24 != v12)
      {
        v24 += 24;
        v22 -= 24;
        if (!v22)
        {
          size_t v25 = 0;
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v24 = a1[14];
    }
    if (v24 == a1[14] + 24 * v21)
    {
      size_t v25 = 0;
      unint64_t v23 = &str_2;
    }
    else
    {
      unint64_t v23 = *(const void **)(v24 + 8);
      size_t v25 = *(void *)(v24 + 16);
    }
LABEL_28:
    unint64_t v31 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v80, v23, v25);
    uint64_t v32 = *((void *)v31 + 4);
    if ((unint64_t)(*((void *)v31 + 3) - v32) > 2)
    {
      *(unsigned char *)(v32 + 2) = 32;
      *(_WORD *)uint64_t v32 = 15648;
      *((void *)v31 + 4) += 3;
    }
    else
    {
      unint64_t v31 = llvm::raw_ostream::write(v31, " = ", 3uLL);
    }
    llvm::raw_ostream::operator<<(v31, v18, v20);
    goto LABEL_32;
  }
  if (ULEB128 != 6)
  {
    if (ULEB128 == 65)
    {
      uint64_t v15 = std::generic_category();
      unint64_t v26 = a1[15];
      if (v26)
      {
        uint64_t v27 = 24 * v26;
        unint64_t v28 = &str_2;
        unint64_t v29 = a1[14];
        do
        {
          if (*(_DWORD *)v29 == 65) {
            goto LABEL_68;
          }
          v29 += 24;
          v27 -= 24;
        }
        while (v27);
        uint64_t v30 = 0;
      }
      else
      {
        unint64_t v29 = a1[14];
LABEL_68:
        if (v29 == a1[14] + 24 * v26)
        {
          uint64_t v30 = 0;
          unint64_t v28 = &str_2;
        }
        else
        {
          unint64_t v28 = *(void **)(v29 + 8);
          uint64_t v30 = *(void *)(v29 + 16);
        }
      }
      __int16 v78 = 773;
      *(void *)&long long v76 = v28;
      *((void *)&v76 + 1) = v30;
      uint64_t v77 = " cannot be recursively defined";
      llvm::Twine::str((llvm::Twine *)&v76, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v17 = 22;
LABEL_9:
      v70[0] = v17;
      v70[1] = v15;
      v89.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>();
    }
LABEL_57:
    unint64_t v49 = llvm::DataExtractor::getULEB128((llvm::DataExtractor *)(a1 + 16), a1 + 19, (llvm::Error *)(a1 + 20));
    unint64_t v50 = a1[15];
    if (v50)
    {
      uint64_t v51 = 24 * v50;
      unint64_t v52 = &str_2;
      unint64_t v53 = a1[14];
      while (*(_DWORD *)v53 != v12)
      {
        v53 += 24;
        v51 -= 24;
        if (!v51)
        {
          size_t v54 = 0;
          goto LABEL_79;
        }
      }
    }
    else
    {
      unint64_t v53 = a1[14];
    }
    if (v53 == a1[14] + 24 * v50)
    {
      size_t v54 = 0;
      unint64_t v52 = &str_2;
    }
    else
    {
      unint64_t v52 = *(const void **)(v53 + 8);
      size_t v54 = *(void *)(v53 + 16);
    }
LABEL_79:
    uint64_t v61 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v80, v52, v54);
    uint64_t v62 = *((void *)v61 + 4);
    if ((unint64_t)(*((void *)v61 + 3) - v62) > 2)
    {
      *(unsigned char *)(v62 + 2) = 32;
      *(_WORD *)uint64_t v62 = 15648;
      *((void *)v61 + 4) += 3;
    }
    else
    {
      uint64_t v61 = llvm::raw_ostream::write(v61, " = ", 3uLL);
    }
    write_unsigned<unsigned long>(v61, v49, 0, 0, 0);
    goto LABEL_32;
  }
  unint64_t v42 = llvm::DataExtractor::getULEB128((llvm::DataExtractor *)(a1 + 16), a1 + 19, (llvm::Error *)(a1 + 20));
  unint64_t v75 = v42;
  if (v42 >= 0x17)
  {
    uint64_t v55 = std::generic_category();
    v70[0] = &v75;
    v70[2] = " is not a valid ";
    __int16 v71 = 780;
    unint64_t v56 = a1[15];
    if (v56)
    {
      uint64_t v57 = 24 * v56;
      unint64_t v58 = &str_2;
      unint64_t v59 = a1[14];
      do
      {
        if (*(_DWORD *)v59 == 6) {
          goto LABEL_87;
        }
        v59 += 24;
        v57 -= 24;
      }
      while (v57);
      uint64_t v60 = 0;
    }
    else
    {
      unint64_t v59 = a1[14];
LABEL_87:
      if (v59 == a1[14] + 24 * v56)
      {
        uint64_t v60 = 0;
        unint64_t v58 = &str_2;
      }
      else
      {
        unint64_t v58 = *(void **)(v59 + 8);
        uint64_t v60 = *(void *)(v59 + 16);
      }
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v58;
    uint64_t v73 = v60;
    __int16 v74 = 1282;
    *(void *)&long long v76 = &__p;
    uint64_t v77 = " value";
    __int16 v78 = 770;
    llvm::Twine::str((llvm::Twine *)&v76, &v89);
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v68 = &v89;
    }
    else {
      unsigned int v68 = (std::string *)v89.__r_.__value_.__r.__words[0];
    }
    uint64_t v91 = 33;
    __int16 v92 = v55;
    unsigned int v90 = v68;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>();
  }
  unint64_t v43 = v42;
  unint64_t v44 = a1[15];
  if (v44)
  {
    uint64_t v45 = 24 * v44;
    unint64_t v46 = &str_2;
    unint64_t v47 = a1[14];
    while (*(_DWORD *)v47 != 6)
    {
      v47 += 24;
      v45 -= 24;
      if (!v45)
      {
        size_t v48 = 0;
        goto LABEL_90;
      }
    }
  }
  else
  {
    unint64_t v47 = a1[14];
  }
  if (v47 == a1[14] + 24 * v44)
  {
    size_t v48 = 0;
    unint64_t v46 = &str_2;
  }
  else
  {
    unint64_t v46 = *(const void **)(v47 + 8);
    size_t v48 = *(void *)(v47 + 16);
  }
LABEL_90:
  unsigned int v63 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v80, v46, v48);
  uint64_t v64 = *((void *)v63 + 4);
  if ((unint64_t)(*((void *)v63 + 3) - v64) > 2)
  {
    *(unsigned char *)(v64 + 2) = 32;
    *(_WORD *)uint64_t v64 = 15648;
    *((void *)v63 + 4) += 3;
  }
  else
  {
    unsigned int v63 = llvm::raw_ostream::write(v63, " = ", 3uLL);
  }
  write_unsigned<unsigned long>(v63, v43, 0, 0, 0);
  if (CPU_arch_strings[v43])
  {
    unsigned int v65 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v80, " (", 2uLL);
    unsigned int v66 = llvm::raw_ostream::operator<<(v65, CPU_arch_strings[v43]);
    int v67 = (unsigned char *)*((void *)v66 + 4);
    if ((unint64_t)v67 >= *((void *)v66 + 3))
    {
      llvm::raw_ostream::write(v66, 41);
    }
    else
    {
      *((void *)v66 + 4) = v67 + 1;
      *int v67 = 41;
    }
  }
LABEL_32:
  *(void *)&long long v76 = CStrRef;
  *((void *)&v76 + 1) = v8;
  LODWORD(__p.__r_.__value_.__l.__data_) = a2;
  std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__emplace_unique_key_args<unsigned int,unsigned int &,llvm::StringRef&>((uint64_t)(a1 + 8), (unsigned int *)&__p, &__p, &v76);
  unint64_t v33 = a1[13];
  if (v33)
  {
    *(void *)&long long v76 = &unk_270DBC348;
    *((void *)&v76 + 1) = v33;
    (*(void (**)(unint64_t, const char *, uint64_t))(*(void *)v33 + 224))(v33, "Attribute", 9);
    (*(void (**)(unint64_t, const char *, uint64_t, uint64_t))(*(void *)a1[13] + 24))(a1[13], "Tag", 3, a2);
    unint64_t v34 = a1[15];
    if (v34)
    {
      uint64_t v35 = 24 * v34;
      unsigned int v36 = &str_2;
      unint64_t v37 = a1[14];
      while (*(_DWORD *)v37 != a2)
      {
        v37 += 24;
        v35 -= 24;
        if (!v35)
        {
          unint64_t v38 = 0;
          goto LABEL_44;
        }
      }
    }
    else
    {
      unint64_t v37 = a1[14];
    }
    if (v37 == a1[14] + 24 * v34)
    {
      unint64_t v38 = 0;
      unsigned int v36 = &str_2;
    }
    else
    {
      uint64_t v39 = *(void *)(v37 + 8);
      unint64_t v40 = *(void *)(v37 + 16);
      uint64_t v41 = 4;
      if (v40 < 4) {
        uint64_t v41 = v40;
      }
      unsigned int v36 = (void *)(v39 + v41);
      unint64_t v38 = v40 - v41;
    }
LABEL_44:
    (*(void (**)(unint64_t, const char *, uint64_t, void *, unint64_t))(*(void *)a1[13] + 208))(a1[13], "TagName", 7, v36, v38);
    (*(void (**)(void))(*(void *)a1[13] + 344))();
    if ((void)v94) {
      (*(void (**)(unint64_t, const char *, uint64_t, void *))(*(void *)a1[13] + 208))(a1[13], "Description", 11, v93);
    }
    *(void *)&long long v76 = &unk_270DBC348;
    if (*((void *)&v76 + 1)) {
      (*(void (**)(void))(**((void **)&v76 + 1) + 232))(*((void *)&v76 + 1));
    }
  }
  a1[19] = v9;
  *a3 = 0;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v80);
  if (v93 != v95) {
    free(v93);
  }
}

void llvm::DictScope::~DictScope(llvm::DictScope *this)
{
  *(void *)this = &unk_270DBC348;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 232))(v1);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_270DBC348;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 232))(v1);
  }
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::ARMAttributeParser::handler@<X0>(uint64_t this@<X0>, BOOL *a2@<X2>, uint64_t a3@<X1>, void *a4@<X8>)
{
  uint64_t v6 = 0;
  *a2 = 0;
  while (llvm::ARMAttributeParser::displayRoutines[v6] != a3)
  {
    v6 += 6;
    if (v6 == 264) {
      goto LABEL_9;
    }
  }
  uint64_t v7 = &llvm::ARMAttributeParser::displayRoutines[v6];
  unint64_t v9 = (uint64_t (*)(void *))*((void *)v7 + 1);
  uint64_t v8 = *((void *)v7 + 2);
  size_t v10 = (void *)(this + (v8 >> 1));
  if (v8) {
    unint64_t v9 = *(uint64_t (**)(void *))(*v10 + v9);
  }
  this = v9(v10);
  if (!*a4)
  {
    *a2 = 1;
LABEL_9:
    *a4 = 0;
  }
  return this;
}

void llvm::ARMAttributeParser::~ARMAttributeParser(llvm::ARMAttributeParser *this)
{
  llvm::ELFAttributeParser::~ELFAttributeParser(this);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::DictScope::setPrinter(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 216))(a2);
}

void *std::string::__init_with_size[abi:nn180100]<char *,char *>(void *result, char *a2, char *a3, unint64_t a4)
{
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v7 = result;
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v7[1] = a4;
    void v7[2] = v9 | 0x8000000000000000;
    *uint64_t v7 = result;
    uint64_t v7 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v7 = v10;
    uint64_t v7 = (void *)((char *)v7 + 1);
  }
  *(unsigned char *)uint64_t v7 = 0;
  return result;
}

char *std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__emplace_unique_key_args<unsigned int,unsigned int &,llvm::StringRef&>(uint64_t a1, unsigned int *a2, _DWORD *a3, _OWORD *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      int v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          int v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  int v12 = (char *)operator new(0x28uLL);
  *(void *)int v12 = 0;
  *((void *)v12 + 1) = v8;
  *((_DWORD *)v12 + 4) = *a3;
  *(_OWORD *)(v12 + 24) = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)int v12 = *v21;
LABEL_38:
    *unint64_t v21 = v12;
    goto LABEL_39;
  }
  *(void *)int v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v22 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void llvm::ELFAttributeParser::~ELFAttributeParser(llvm::ELFAttributeParser *this)
{
  *(void *)this = &unk_270DBC320;
  uint64_t v2 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = *((void *)this + 20);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::~__hash_table((uint64_t)this + 64);
  std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::~__hash_table((uint64_t)this + 24);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

llvm::raw_ostream *llvm::BinaryStreamError::log(llvm::BinaryStreamError *this, llvm::raw_ostream *a2)
{
  unint64_t v5 = (const char *)*((void *)this + 1);
  uint64_t v3 = (char *)this + 8;
  int8x8_t v4 = v5;
  int v6 = v3[23];
  if (v6 >= 0) {
    uint64_t v7 = v3;
  }
  else {
    uint64_t v7 = v4;
  }
  if (v6 >= 0) {
    size_t v8 = v3[23];
  }
  else {
    size_t v8 = *((void *)v3 + 1);
  }
  return llvm::raw_ostream::write(a2, v7, v8);
}

uint64_t llvm::BinaryStreamError::convertToErrorCode(llvm::BinaryStreamError *this)
{
  return 3;
}

void llvm::BinaryStreamError::~BinaryStreamError(void **this)
{
  *this = &unk_270DBC370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_270DBC370;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x263E500B0);
}

void llvm::ErrorInfoBase::message(llvm::ErrorInfoBase *this@<X0>, std::string *a2@<X8>)
{
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  int v6 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  int v12 = 1;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  unint64_t v5 = &unk_270DBD6E0;
  unint64_t v13 = v14;
  llvm::raw_ostream::SetUnbuffered(&v5);
  (*(void (**)(llvm::ErrorInfoBase *, void **))(*(void *)this + 16))(this, &v5);
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v13, (std::string::size_type)v13[1]);
  }
  else
  {
    long long v4 = *(_OWORD *)v13;
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)v13[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

void *llvm::ErrorInfo<llvm::BinaryStreamError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::BinaryStreamError::ID;
}

BOOL llvm::ErrorInfo<llvm::BinaryStreamError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::BinaryStreamError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::BinaryStreamReader::readULEB128(llvm::BinaryStreamReader *this@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  long long v15[2] = *MEMORY[0x263EF8340];
  unint64_t v13 = v15;
  long long v14 = xmmword_261E8AB70;
  int v6 = (char *)this + 8;
  do
  {
    llvm::BinaryStreamRef::readBytes((uint64_t)v6, *((void *)this + 7), 1, a3);
    if (*a3)
    {
      char v10 = v13;
      goto LABEL_14;
    }
    ++*((void *)this + 7);
    *a3 = 0;
    llvm::SmallVectorTemplateBase<char,true>::push_back(&v13, MEMORY[0]);
  }
  while (MEMORY[0] < 0);
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  unsigned int v9 = 0;
  char v10 = v13;
  while ((void)v14 != v7)
  {
    char v11 = *((unsigned char *)v13 + v7);
    uint64_t v12 = v11 & 0x7F;
    if (v9 >= 0x40 && (v11 & 0x7F) != 0) {
      break;
    }
    if ((unint64_t)(v12 << v9) >> v9 != v12) {
      break;
    }
    v8 += v12 << v9;
    v9 += 7;
    ++v7;
    if ((v11 & 0x80) == 0) {
      goto LABEL_13;
    }
  }
  unint64_t v8 = 0;
LABEL_13:
  *a2 = v8;
  *a3 = 0;
LABEL_14:
  if (v10 != v15) {
    free(v10);
  }
}

void llvm::BinaryStreamReader::readSLEB128(llvm::BinaryStreamReader *this@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  void v19[2] = *MEMORY[0x263EF8340];
  unint64_t v17 = v19;
  long long v18 = xmmword_261E8AB70;
  int v6 = (char *)this + 8;
  do
  {
    llvm::BinaryStreamRef::readBytes((uint64_t)v6, *((void *)this + 7), 1, a3);
    if (*a3)
    {
      char v10 = v17;
      goto LABEL_25;
    }
    ++*((void *)this + 7);
    *a3 = 0;
    llvm::SmallVectorTemplateBase<char,true>::push_back(&v17, MEMORY[0]);
  }
  while (MEMORY[0] < 0);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unsigned int v9 = 0;
  char v10 = v17;
  do
  {
    if ((void)v18 == v7)
    {
LABEL_23:
      uint64_t v16 = 0;
      goto LABEL_24;
    }
    char v11 = *((unsigned char *)v17 + v7);
    uint64_t v12 = v11 & 0x7F;
    if (v9 < 0x40)
    {
      if (v9 == 63 && v12 != 127 && v12 != 0) {
        goto LABEL_23;
      }
    }
    else if (((v8 >> 63) & 0x7F) != v12)
    {
      goto LABEL_23;
    }
    v8 |= v12 << v9;
    v9 += 7;
    ++v7;
  }
  while (v11 < 0);
  BOOL v14 = (v11 & 0x40) == 0 || v9 > 0x3F;
  uint64_t v15 = -1 << v9;
  if (v14) {
    uint64_t v15 = 0;
  }
  uint64_t v16 = v8 | v15;
LABEL_24:
  *a2 = v16;
  *a3 = 0;
LABEL_25:
  if (v10 != v19) {
    free(v10);
  }
}

uint64_t llvm::BinaryStreamReader::bytesRemaining(llvm::BinaryStreamReader *this)
{
  if (*((unsigned char *)this + 48))
  {
    uint64_t v2 = *((void *)this + 5);
  }
  else
  {
    uint64_t v3 = *((void *)this + 3);
    if (v3) {
      uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3) - *((void *)this + 4);
    }
    else {
      uint64_t v2 = 0;
    }
  }
  return v2 - *((void *)this + 7);
}

unint64_t llvm::BinaryStreamReader::skip@<X0>(llvm::BinaryStreamReader *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t result = llvm::BinaryStreamReader::bytesRemaining(this);
  if (result < a2) {
    operator new();
  }
  *((void *)this + 7) += a2;
  *a3 = 0;
  return result;
}

void llvm::BinaryStreamReader::~BinaryStreamReader(llvm::BinaryStreamReader *this)
{
  *(void *)this = &unk_270DBC3C0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_270DBC3C0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
  JUMPOUT(0x263E500B0);
}

void *llvm::BinaryStreamRef::BinaryStreamRef(void *a1, std::__shared_weak_count_vtbl *a2, uint64_t a3, int a4)
{
  uint64_t v8 = (std::__shared_weak_count *)operator new(0x40uLL);
  v8->__shared_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBC3E0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBC418;
  v8[1].__shared_owners_ = (uint64_t)&unk_270DBC460;
  LODWORD(v8[1].__shared_weak_owners_) = a4;
  v8[2].__vftable = a2;
  v8[2].__shared_owners_ = a3;
  *a1 = v8 + 1;
  a1[1] = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  a1[2] = v8 + 1;
  a1[3] = 0;
  a1[4] = a3;
  a1[5] = 1;
  std::__shared_weak_count::__release_shared[abi:nn180100](v8);
  return a1;
}

uint64_t llvm::BinaryStreamRef::readBytes@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = llvm::BinaryStreamRefBase<llvm::BinaryStreamRef,llvm::BinaryStream>::checkOffsetForRead(a1, a2, a3, a4);
  if (!*a4)
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 24);
    return v7();
  }
  return result;
}

uint64_t llvm::BinaryStreamRefBase<llvm::BinaryStreamRef,llvm::BinaryStream>::checkOffsetForRead@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = result;
  if (*(unsigned char *)(result + 40))
  {
    unint64_t v8 = *(void *)(result + 32);
  }
  else
  {
    uint64_t result = *(void *)(result + 16);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
      unint64_t v8 = result - *(void *)(v6 + 24);
    }
    else
    {
      unint64_t v8 = 0;
    }
  }
  if (v8 < a2) {
    operator new();
  }
  if (*(unsigned char *)(v6 + 40))
  {
    unint64_t v9 = *(void *)(v6 + 32);
  }
  else
  {
    uint64_t result = *(void *)(v6 + 16);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
      unint64_t v9 = result - *(void *)(v6 + 24);
    }
    else
    {
      unint64_t v9 = 0;
    }
  }
  if (v9 < a3 + a2) {
    operator new();
  }
  *a4 = 0;
  return result;
}

void *llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(void *a1, std::__shared_weak_count_vtbl *a2, std::__shared_weak_count_vtbl *a3, int a4)
{
  unint64_t v8 = (std::__shared_weak_count *)operator new(0x58uLL);
  v8->__shared_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBC4A8;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBC4E0;
  v8[1].__shared_owners_ = (uint64_t)&unk_270DBC538;
  v8[1].__shared_weak_owners_ = (uint64_t)a2;
  v8[2].__vftable = a3;
  v8[2].__shared_owners_ = (uint64_t)&unk_270DBC460;
  LODWORD(v8[2].__shared_weak_owners_) = a4;
  v8[3].__vftable = a2;
  v8[3].__shared_owners_ = (uint64_t)a3;
  *a1 = v8 + 1;
  a1[1] = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  a1[2] = v8 + 1;
  a1[3] = 0;
  a1[4] = a3;
  a1[5] = 1;
  std::__shared_weak_count::__release_shared[abi:nn180100](v8);
  return a1;
}

uint64_t llvm::WritableBinaryStreamRef::writeBytes@<X0>(llvm::WritableBinaryStreamRef *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t result = llvm::WritableBinaryStreamRef::checkOffsetForWrite(a1, a2, a3, a4);
  if (!*a4)
  {
    uint64_t v7 = *(uint64_t (**)(void))(**((void **)a1 + 2) + 56);
    return v7();
  }
  return result;
}

uint64_t llvm::WritableBinaryStreamRef::checkOffsetForWrite@<X0>(llvm::WritableBinaryStreamRef *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 48))(*((void *)this + 2));
  if ((result & 2) != 0)
  {
    if (*((unsigned char *)this + 40))
    {
      unint64_t v9 = *((void *)this + 4);
    }
    else
    {
      uint64_t result = *((void *)this + 2);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
        unint64_t v9 = result - *((void *)this + 3);
      }
      else
      {
        unint64_t v9 = 0;
      }
    }
    if (v9 < a2) {
      operator new();
    }
    *a4 = 0;
  }
  else
  {
    return llvm::BinaryStreamRefBase<llvm::BinaryStreamRef,llvm::BinaryStream>::checkOffsetForRead((uint64_t)this, a2, a3, a4);
  }
  return result;
}

void std::__shared_ptr_emplace<anonymous namespace'::ArrayRefImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBC3E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::ArrayRefImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBC3E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::ArrayRefImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::ArrayRefImpl::~ArrayRefImpl(_anonymous_namespace_::ArrayRefImpl *this)
{
}

uint64_t anonymous namespace'::ArrayRefImpl::getEndian(_anonymous_namespace_::ArrayRefImpl *this)
{
  return *((unsigned int *)this + 4);
}

unint64_t anonymous namespace'::ArrayRefImpl::readBytes@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  unint64_t result = llvm::BinaryStream::checkOffsetForRead((llvm::BinaryStream *)(a1 + 8), a2, a3, a5);
  if (!*a5)
  {
    *a4 = *(void *)(a1 + 24) + a2;
    a4[1] = a3;
    *a5 = 0;
  }
  return result;
}

unint64_t anonymous namespace'::ArrayRefImpl::readLongestContiguousChunk@<X0>(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  unint64_t result = llvm::BinaryStream::checkOffsetForRead((llvm::BinaryStream *)(a1 + 1), a2, 1, a4);
  if (!*a4)
  {
    unint64_t v9 = a1[4] - a2;
    *a3 = a1[3] + a2;
    a3[1] = v9;
    *a4 = 0;
  }
  return result;
}

uint64_t anonymous namespace'::ArrayRefImpl::getLength(_anonymous_namespace_::ArrayRefImpl *this)
{
  return *((void *)this + 4);
}

uint64_t llvm::BinaryStream::getFlags(llvm::BinaryStream *this)
{
  return 0;
}

void llvm::BinaryByteStream::~BinaryByteStream(llvm::BinaryByteStream *this)
{
}

uint64_t llvm::BinaryByteStream::getEndian(llvm::BinaryByteStream *this)
{
  return *((unsigned int *)this + 2);
}

unint64_t llvm::BinaryByteStream::readBytes@<X0>(llvm::BinaryStream *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  unint64_t result = llvm::BinaryStream::checkOffsetForRead(a1, a2, a3, a5);
  if (!*a5)
  {
    *a4 = *((void *)a1 + 2) + a2;
    a4[1] = a3;
    *a5 = 0;
  }
  return result;
}

unint64_t llvm::BinaryByteStream::readLongestContiguousChunk@<X0>(llvm::BinaryStream *a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  unint64_t result = llvm::BinaryStream::checkOffsetForRead(a1, a2, 1, a4);
  if (!*a4)
  {
    unint64_t v9 = *((void *)a1 + 3) - a2;
    *a3 = *((void *)a1 + 2) + a2;
    a3[1] = v9;
    *a4 = 0;
  }
  return result;
}

uint64_t llvm::BinaryByteStream::getLength(llvm::BinaryByteStream *this)
{
  return *((void *)this + 3);
}

unint64_t llvm::BinaryStream::checkOffsetForRead@<X0>(llvm::BinaryStream *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if ((*(uint64_t (**)(llvm::BinaryStream *))(*(void *)this + 40))(this) < a2) {
    operator new();
  }
  unint64_t result = (*(uint64_t (**)(llvm::BinaryStream *))(*(void *)this + 40))(this);
  if (result < a3 + a2) {
    operator new();
  }
  *a4 = 0;
  return result;
}

void std::__shared_ptr_emplace<anonymous namespace'::MutableArrayRefImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBC4A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::MutableArrayRefImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBC4A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::MutableArrayRefImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::MutableArrayRefImpl::~MutableArrayRefImpl(_anonymous_namespace_::MutableArrayRefImpl *this)
{
}

uint64_t anonymous namespace'::MutableArrayRefImpl::getEndian(_anonymous_namespace_::MutableArrayRefImpl *this)
{
  return *((unsigned int *)this + 10);
}

unint64_t anonymous namespace'::MutableArrayRefImpl::readBytes@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  unint64_t result = llvm::BinaryStream::checkOffsetForRead((llvm::BinaryStream *)(a1 + 32), a2, a3, a5);
  if (!*a5)
  {
    *a4 = *(void *)(a1 + 48) + a2;
    a4[1] = a3;
    *a5 = 0;
  }
  return result;
}

unint64_t anonymous namespace'::MutableArrayRefImpl::readLongestContiguousChunk@<X0>(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  unint64_t result = llvm::BinaryStream::checkOffsetForRead((llvm::BinaryStream *)(a1 + 4), a2, 1, a4);
  if (!*a4)
  {
    unint64_t v9 = a1[7] - a2;
    *a3 = a1[6] + a2;
    a3[1] = v9;
    *a4 = 0;
  }
  return result;
}

uint64_t anonymous namespace'::MutableArrayRefImpl::getLength(_anonymous_namespace_::MutableArrayRefImpl *this)
{
  return *((void *)this + 7);
}

uint64_t llvm::WritableBinaryStream::getFlags(llvm::WritableBinaryStream *this)
{
  return 1;
}

uint64_t anonymous namespace'::MutableArrayRefImpl::writeBytes@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, llvm::WritableBinaryStream *a5@<X8>)
{
  if (a4)
  {
    uint64_t v9 = result;
    unint64_t result = llvm::WritableBinaryStream::checkOffsetForWrite(a5, (llvm::BinaryStream *)(result + 8), a2, a4);
    if (*(void *)a5) {
      return result;
    }
    unint64_t result = (uint64_t)memcpy((void *)(*(void *)(v9 + 16) + a2), a3, a4);
  }
  *(void *)a5 = 0;
  return result;
}

void anonymous namespace'::MutableArrayRefImpl::commit(void *a1@<X8>)
{
  *a1 = 0;
}

void llvm::MutableBinaryByteStream::~MutableBinaryByteStream(llvm::MutableBinaryByteStream *this)
{
}

uint64_t llvm::MutableBinaryByteStream::getEndian(llvm::MutableBinaryByteStream *this)
{
  return *((unsigned int *)this + 8);
}

unint64_t llvm::MutableBinaryByteStream::readBytes@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  unint64_t result = llvm::BinaryStream::checkOffsetForRead((llvm::BinaryStream *)(a1 + 24), a2, a3, a5);
  if (!*a5)
  {
    *a4 = *(void *)(a1 + 40) + a2;
    a4[1] = a3;
    *a5 = 0;
  }
  return result;
}

unint64_t llvm::MutableBinaryByteStream::readLongestContiguousChunk@<X0>(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  unint64_t result = llvm::BinaryStream::checkOffsetForRead((llvm::BinaryStream *)(a1 + 3), a2, 1, a4);
  if (!*a4)
  {
    unint64_t v9 = a1[6] - a2;
    *a3 = a1[5] + a2;
    a3[1] = v9;
    *a4 = 0;
  }
  return result;
}

uint64_t llvm::MutableBinaryByteStream::getLength(llvm::MutableBinaryByteStream *this)
{
  return *((void *)this + 6);
}

llvm::BinaryStream *llvm::MutableBinaryByteStream::writeBytes@<X0>(llvm::BinaryStream *result@<X0>, unint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, llvm::WritableBinaryStream *a5@<X8>)
{
  if (a4)
  {
    unint64_t v9 = result;
    unint64_t result = (llvm::BinaryStream *)llvm::WritableBinaryStream::checkOffsetForWrite(a5, result, a2, a4);
    if (*(void *)a5) {
      return result;
    }
    unint64_t result = (llvm::BinaryStream *)memcpy((void *)(*((void *)v9 + 1) + a2), a3, a4);
  }
  *(void *)a5 = 0;
  return result;
}

void llvm::MutableBinaryByteStream::commit(void *a1@<X8>)
{
  *a1 = 0;
}

unint64_t llvm::WritableBinaryStream::checkOffsetForWrite(llvm::WritableBinaryStream *this, llvm::BinaryStream *a2, unint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(llvm::BinaryStream *))(*(void *)a2 + 48))(a2) & 2) != 0)
  {
    unint64_t result = (*(uint64_t (**)(llvm::BinaryStream *))(*(void *)a2 + 40))(a2);
    if (result < a3) {
      operator new();
    }
    *(void *)this = 0;
  }
  else
  {
    return llvm::BinaryStream::checkOffsetForRead(a2, a3, a4, this);
  }
  return result;
}

void llvm::BinaryStreamWriter::~BinaryStreamWriter(llvm::BinaryStreamWriter *this)
{
  *(void *)this = &unk_270DBC590;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_270DBC590;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, unint64_t *a4, unint64_t a5, unint64_t a6)
{
  int v18 = 0;
  uint64_t v8 = llvm::cl::parser<unsigned int>::parse(a1, a1, a3, a4, a5, a6, &v18);
  if (v8) {
    return v8;
  }
  *(_DWORD *)(a1 + 128) = v18;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 184);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v18);
    return v8;
  }
  uint64_t v11 = std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::parser<unsigned int>::parse(v11, v12, v13, v14, v15, v16, v17);
}

uint64_t llvm::cl::parser<unsigned int>::parse(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t a5, unint64_t a6, _DWORD *a7)
{
  v14[0] = 0;
  unint64_t v16 = (unint64_t *)a5;
  unint64_t v17 = a6;
  uint64_t v11 = llvm::consumeUnsignedInteger((llvm *)&v16, 0, v14, a4);
  if ((v11 & 1) != 0 || v17 || HIDWORD(v14[0]))
  {
    __int16 v15 = 1283;
    v14[0] = (unint64_t)"'";
    void v14[2] = a5;
    _OWORD v14[3] = a6;
    unint64_t v16 = v14;
    int v18 = "' value invalid for uint argument!";
    __int16 v19 = 770;
    uint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)v11);
    llvm::cl::Option::error(a2, (llvm::Twine *)&v16, 0, 0, v13);
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *a7 = v14[0];
  }
  return result;
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

uint64_t llvm::cl::basic_parser_impl::getOptionWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3 == 1) {
    uint64_t v4 = 7;
  }
  else {
    uint64_t v4 = v3 + 7;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (v5)
  {
    uint64_t v6 = 6;
    if ((*(_WORD *)(a2 + 10) & 0x400) == 0) {
      uint64_t v6 = 3;
    }
    uint64_t v7 = *(void *)(a2 + 56);
    if (!v7) {
      uint64_t v7 = v5;
    }
    v4 += v6 + v7;
  }
  return v4;
}

llvm::raw_ostream *llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::printOptionInfo(uint64_t a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *llvm::cl::basic_parser_impl::printOptionInfo(llvm::cl::basic_parser_impl *this, const llvm::cl::Option *a2, size_t a3)
{
  uint64_t v6 = (llvm::raw_ostream *)llvm::outs(this);
  long long v40 = *((_OWORD *)a2 + 1);
  uint64_t v41 = 2;
  uint64_t v7 = (llvm *)(*(uint64_t (**)(llvm::cl::basic_parser_impl *))(*(void *)this + 16))(this);
  if (v8)
  {
    uint64_t v9 = v7;
    size_t v10 = v8;
    unsigned int v11 = *((unsigned __int16 *)a2 + 5);
    if ((v11 & 0x400) != 0)
    {
      __int16 v15 = (llvm::raw_ostream *)llvm::outs(v7);
      unint64_t v16 = (_WORD *)*((void *)v15 + 4);
      if (*((void *)v15 + 3) - (void)v16 > 1uLL)
      {
        *unint64_t v16 = 15392;
        *((void *)v15 + 4) += 2;
      }
      else
      {
        __int16 v15 = llvm::raw_ostream::write(v15, " <", 2uLL);
      }
      uint64_t v24 = *((void *)a2 + 7);
      if (v24) {
        size_t v25 = (llvm *)*((void *)a2 + 6);
      }
      else {
        size_t v25 = v9;
      }
      if (v24) {
        size_t v26 = *((void *)a2 + 7);
      }
      else {
        size_t v26 = v10;
      }
      uint64_t v27 = llvm::raw_ostream::operator<<(v15, v25, v26);
      unint64_t v28 = (_DWORD *)*((void *)v27 + 4);
      if (*((void *)v27 + 3) - (void)v28 <= 3uLL)
      {
        unint64_t v29 = ">...";
        size_t v30 = 4;
LABEL_40:
        llvm::raw_ostream::write(v27, v29, v30);
        goto LABEL_44;
      }
      _DWORD *v28 = 774778430;
      uint64_t v31 = *((void *)v27 + 4) + 4;
    }
    else
    {
      int v12 = (v11 >> 3) & 3;
      if (!v12)
      {
        uint64_t v7 = (llvm *)(*(uint64_t (**)(const llvm::cl::Option *))(*(void *)a2 + 8))(a2);
        int v12 = (int)v7;
      }
      uint64_t v13 = (llvm::raw_ostream *)llvm::outs(v7);
      if (v12 != 1)
      {
        if (*((void *)a2 + 3) == 1) {
          unint64_t v17 = " <";
        }
        else {
          unint64_t v17 = "=<";
        }
        int v18 = llvm::raw_ostream::operator<<(v13, v17, 2uLL);
        uint64_t v19 = *((void *)a2 + 7);
        if (v19) {
          uint64_t v20 = (llvm *)*((void *)a2 + 6);
        }
        else {
          uint64_t v20 = v9;
        }
        if (v19) {
          size_t v21 = *((void *)a2 + 7);
        }
        else {
          size_t v21 = v10;
        }
        unint64_t v22 = llvm::raw_ostream::operator<<(v18, v20, v21);
        unint64_t v23 = (unsigned char *)*((void *)v22 + 4);
        if ((unint64_t)v23 >= *((void *)v22 + 3))
        {
          llvm::raw_ostream::write(v22, 62);
        }
        else
        {
          *((void *)v22 + 4) = v23 + 1;
          unsigned char *v23 = 62;
        }
        goto LABEL_44;
      }
      uint64_t v14 = *((void *)v13 + 4);
      if ((unint64_t)(*((void *)v13 + 3) - v14) > 2)
      {
        *(unsigned char *)(v14 + 2) = 60;
        *(_WORD *)uint64_t v14 = 15707;
        *((void *)v13 + 4) += 3;
      }
      else
      {
        uint64_t v13 = llvm::raw_ostream::write(v13, "[=<", 3uLL);
      }
      uint64_t v32 = *((void *)a2 + 7);
      if (v32) {
        unint64_t v33 = (llvm *)*((void *)a2 + 6);
      }
      else {
        unint64_t v33 = v9;
      }
      if (v32) {
        size_t v34 = *((void *)a2 + 7);
      }
      else {
        size_t v34 = v10;
      }
      uint64_t v27 = llvm::raw_ostream::operator<<(v13, v33, v34);
      uint64_t v35 = (_WORD *)*((void *)v27 + 4);
      if (*((void *)v27 + 3) - (void)v35 <= 1uLL)
      {
        unint64_t v29 = ">]";
        size_t v30 = 2;
        goto LABEL_40;
      }
      *uint64_t v35 = 23870;
      uint64_t v31 = *((void *)v27 + 4) + 2;
    }
    *((void *)v27 + 4) = v31;
  }
LABEL_44:
  uint64_t v36 = *((void *)a2 + 4);
  uint64_t v37 = *((void *)a2 + 5);
  int OptionWidth = llvm::cl::basic_parser_impl::getOptionWidth((uint64_t)this, (uint64_t)a2);
  return llvm::cl::Option::printHelpStr(v36, v37, a3, OptionWidth);
}

void llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  if (a3)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 128);
LABEL_5:
    int v5 = *(_DWORD *)(a1 + 144);
    char v6 = *(unsigned char *)(a1 + 148);
    uint64_t v4 = &unk_270DBCA00;
    llvm::cl::parser<unsigned int>::printOptionDiff((llvm::cl::basic_parser_impl *)a1, (const llvm::cl::Option *)a1, v3, (uint64_t)&v4, a2);
    return;
  }
  if (*(unsigned char *)(a1 + 148))
  {
    unsigned int v3 = *(_DWORD *)(a1 + 128);
    if (*(_DWORD *)(a1 + 144) != v3) {
      goto LABEL_5;
    }
  }
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::setDefault(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void llvm::cl::Option::addArgument(llvm::cl::Option *this)
{
  if (!atomic_load_explicit(qword_26B4176B0, memory_order_acquire)) {
  uint64_t v2 = qword_26B4176B0[0];
  }
  if ((*((_WORD *)this + 5) & 0x2000) != 0)
  {
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(qword_26B4176B0[0] + 64), (uint64_t)this);
  }
  else if (*((_DWORD *)this + 27) == *((_DWORD *)this + 28))
  {
    if (!atomic_load_explicit(_MergedGlobals_0, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)_MergedGlobals_0, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
    }
  }
  else
  {
    uint64_t v3 = *((void *)this + 12);
    uint64_t v4 = 104;
    if (v3 == *((void *)this + 11)) {
      uint64_t v4 = 108;
    }
    uint64_t v5 = *(unsigned int *)((char *)this + v4);
    if (v5)
    {
      uint64_t v6 = 8 * v5;
      uint64_t v7 = (uint64_t *)*((void *)this + 12);
      while ((unint64_t)*v7 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v7;
        v6 -= 8;
        if (!v6) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      uint64_t v7 = (uint64_t *)*((void *)this + 12);
    }
    size_t v8 = (uint64_t *)(v3 + 8 * v5);
    if (v7 != v8)
    {
      uint64_t v9 = *v7;
LABEL_20:
      while (++v7 != v8)
      {
        uint64_t v9 = *v7;
        if ((unint64_t)*v7 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v7 != v8) {
            goto LABEL_20;
          }
          break;
        }
      }
    }
  }
LABEL_9:
  *((_WORD *)this + 5) |= 0x4000u;
}

uint64_t llvm::cl::opt<int,false,llvm::cl::parser<int>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, unint64_t *a4, unint64_t a5, unint64_t a6)
{
  v14[0] = 0;
  unint64_t v16 = (unint64_t *)a5;
  unint64_t v17 = a6;
  uint64_t v10 = llvm::consumeSignedInteger((llvm *)&v16, 0, v14, a4);
  if ((v10 & 1) != 0 || v17 || v14[0] != SLODWORD(v14[0]))
  {
    __int16 v15 = 1283;
    v14[0] = (unint64_t)"'";
    void v14[2] = a5;
    _OWORD v14[3] = a6;
    unint64_t v16 = v14;
    int v18 = "' value invalid for integer argument!";
    __int16 v19 = 770;
    uint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)v10);
    llvm::cl::Option::error(a1, (llvm::Twine *)&v16, 0, 0, v13);
    return 1;
  }
  else
  {
    LODWORD(v16) = v14[0];
    *(_DWORD *)(a1 + 128) = v14[0];
    *(_WORD *)(a1 + 12) = a2;
    uint64_t v11 = *(void *)(a1 + 184);
    if (v11)
    {
      (*(void (**)(uint64_t, unint64_t **))(*(void *)v11 + 48))(v11, &v16);
      return 0;
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
      return llvm::cl::opt<int,false,llvm::cl::parser<int>>::getValueExpectedFlagDefault();
    }
  }
}

uint64_t llvm::cl::opt<int,false,llvm::cl::parser<int>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<int,false,llvm::cl::parser<int>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

llvm::raw_ostream *llvm::cl::opt<int,false,llvm::cl::parser<int>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<int,false,llvm::cl::parser<int>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  if (a3)
  {
    int v3 = *(_DWORD *)(a1 + 128);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 148)) {
      return;
    }
    int v3 = *(_DWORD *)(a1 + 128);
    if (*(_DWORD *)(a1 + 144) == v3) {
      return;
    }
  }
  int v19 = *(_DWORD *)(a1 + 144);
  char v20 = *(unsigned char *)(a1 + 148);
  llvm::cl::basic_parser_impl::printOptionName((llvm::cl::basic_parser_impl *)a1, (const llvm::cl::Option *)a1, a2);
  size_t v30 = 0;
  unint64_t v31 = 0;
  uint64_t v32 = 0;
  int v22 = 0;
  char v26 = 0;
  uint64_t v27 = 0;
  int v28 = 1;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  size_t v21 = &unk_270DBD6E0;
  unint64_t v29 = (void **)&v30;
  llvm::raw_ostream::SetUnbuffered(&v21);
  llvm::write_integer((llvm::raw_ostream *)&v21, v3, 0, 0);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v21);
  uint64_t v5 = (llvm::raw_ostream *)llvm::outs(v4);
  uint64_t v6 = (_WORD *)*((void *)v5 + 4);
  if (*((void *)v5 + 3) - (void)v6 > 1uLL)
  {
    *uint64_t v6 = 8253;
    *((void *)v5 + 4) += 2;
  }
  else
  {
    uint64_t v5 = llvm::raw_ostream::write(v5, "= ", 2uLL);
  }
  if (v32 >= 0) {
    uint64_t v7 = (const char *)&v30;
  }
  else {
    uint64_t v7 = v30;
  }
  if (v32 >= 0) {
    size_t v8 = HIBYTE(v32);
  }
  else {
    size_t v8 = v31;
  }
  uint64_t v9 = llvm::raw_ostream::write(v5, v7, v8);
  if (SHIBYTE(v32) < 0)
  {
    int v10 = v31;
    if (v31 < 8) {
      goto LABEL_16;
    }
LABEL_18:
    size_t v11 = 0;
    goto LABEL_19;
  }
  int v10 = HIBYTE(v32);
  if (HIBYTE(v32) > 7u) {
    goto LABEL_18;
  }
LABEL_16:
  size_t v11 = (8 - v10);
LABEL_19:
  int v12 = (llvm::raw_ostream *)llvm::outs(v9);
  uint64_t v13 = llvm::raw_ostream::indent(v12, v11);
  uint64_t v14 = *((void *)v13 + 4);
  if ((unint64_t)(*((void *)v13 + 3) - v14) > 0xA)
  {
    *(_DWORD *)(v14 + 7) = 540701804;
    *(void *)uint64_t v14 = *(void *)" (default: ";
    *((void *)v13 + 4) += 11;
  }
  else
  {
    uint64_t v13 = llvm::raw_ostream::write(v13, " (default: ", 0xBuLL);
  }
  __int16 v15 = (llvm::raw_ostream *)llvm::outs(v13);
  if (v20)
  {
    __int16 v15 = llvm::write_integer(v15, v19, 0, 0);
  }
  else
  {
    uint64_t v16 = *((void *)v15 + 4);
    if ((unint64_t)(*((void *)v15 + 3) - v16) > 0xB)
    {
      *(_DWORD *)(v16 + 8) = 712273013;
      *(void *)uint64_t v16 = *(void *)"*no default*";
      *((void *)v15 + 4) += 12;
    }
    else
    {
      __int16 v15 = llvm::raw_ostream::write(v15, "*no default*", 0xCuLL);
    }
  }
  unint64_t v17 = (llvm::raw_ostream *)llvm::outs(v15);
  int v18 = (_WORD *)*((void *)v17 + 4);
  if (*((void *)v17 + 3) - (void)v18 > 1uLL)
  {
    *int v18 = 2601;
    *((void *)v17 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v17, ")\n", 2uLL);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v30);
  }
}

uint64_t llvm::cl::opt<int,false,llvm::cl::parser<int>>::setDefault(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *std::function<void ()(int const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(int const&)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(int const&)>::swap[abi:nn180100](v4, a1);
  std::__function::__value_func<void ()(int const&)>::~__value_func[abi:nn180100](v4);
  return a1;
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, void *a5, size_t a6)
{
  memset(&__str, 0, sizeof(__str));
  uint64_t v8 = llvm::cl::parser<std::string>::parse((int)a1 + 192, a1, a3, a4, a5, a6, (uint64_t)&__str);
  if ((v8 & 1) == 0)
  {
    std::string::operator=((std::string *)(a1 + 128), &__str);
    *(_WORD *)(a1 + 12) = a2;
    uint64_t v9 = *(void *)(a1 + 224);
    if (!v9)
    {
      int v11 = std::__throw_bad_function_call[abi:nn180100]();
      return llvm::cl::parser<std::string>::parse(v11, v12, v13, v14, v15, v16, v17);
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 48))(v9, &__str);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v8;
}

uint64_t llvm::cl::parser<std::string>::parse(int a1, int a2, int a3, int a4, void *__src, size_t __len, uint64_t a7)
{
  if (__src)
  {
    std::string::basic_string[abi:nn180100](&__dst, __src, __len);
  }
  else
  {
    long long __dst = 0uLL;
    uint64_t v10 = 0;
  }
  if (*(char *)(a7 + 23) < 0) {
    operator delete(*(void **)a7);
  }
  *(_OWORD *)a7 = __dst;
  *(void *)(a7 + 16) = v10;
  return 0;
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 192, a1);
}

llvm::raw_ostream *llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 192), a1, a2);
}

unsigned __int8 *llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::printOptionValue(unsigned __int8 *result, int a2, char a3)
{
  uint64_t v4 = result;
  if ((a3 & 1) != 0
    || (uint64_t result = (unsigned __int8 *)llvm::cl::OptionValueCopy<std::string>::compare((uint64_t)(result + 152), result + 128), result))
  {
    int v5 = (char)v4[151];
    if (v5 >= 0) {
      uint64_t v6 = v4 + 128;
    }
    else {
      uint64_t v6 = (const void *)*((void *)v4 + 16);
    }
    if (v5 >= 0) {
      size_t v7 = v4[151];
    }
    else {
      size_t v7 = *((void *)v4 + 17);
    }
    return (unsigned __int8 *)llvm::cl::parser<std::string>::printOptionDiff((llvm::cl::basic_parser_impl *)result, (const llvm::cl::Option *)v4, v6, v7, (uint64_t)(v4 + 152), a2);
  }
  return result;
}

uint64_t llvm::cl::OptionValueCopy<std::string>::compare(uint64_t a1, unsigned __int8 *a2)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 1;
  }
  uint64_t v6 = (const void **)(a1 + 8);
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, a2, *(void *)(a1 + 16)) != 0;
  }
  if (!*(unsigned char *)(a1 + 31)) {
    return 0;
  }
  uint64_t v7 = v2 - 1;
  do
  {
    int v9 = *(unsigned __int8 *)v6;
    uint64_t v6 = (const void **)((char *)v6 + 1);
    int v8 = v9;
    int v10 = *a2++;
    uint64_t result = v8 != v10;
  }
  while (v8 == v10 && v7-- != 0);
  return result;
}

void llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::setDefault(uint64_t a1)
{
  uint64_t v2 = (std::string *)(a1 + 128);
  if (*(unsigned char *)(a1 + 184))
  {
    std::string::operator=(v2, (const std::string *)(a1 + 160));
  }
  else
  {
    memset(&__str, 0, sizeof(__str));
    std::string::operator=(v2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  char v18 = 0;
  uint64_t v8 = llvm::cl::parser<BOOL>::parse((llvm *)a1, a1, a3, a4, a5, a6, &v18);
  if (v8) {
    return v8;
  }
  *(unsigned char *)(a1 + 128) = v18;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 184);
  if (v9)
  {
    (*(void (**)(uint64_t, char *))(*(void *)v9 + 48))(v9, &v18);
    return v8;
  }
  int v11 = (llvm *)std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::parser<BOOL>::parse(v11, v12, v13, v14, v15, v16, v17);
}

uint64_t llvm::cl::parser<BOOL>::parse(llvm *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, unsigned char *a7)
{
  switch(a6)
  {
    case 0:
      goto LABEL_8;
    case 1:
      int v8 = *a5;
      if (v8 == 48) {
        goto LABEL_22;
      }
      if (v8 != 49) {
        goto LABEL_21;
      }
LABEL_8:
      uint64_t result = 0;
      *a7 = 1;
      break;
    case 4:
      if (*(_DWORD *)a5 == 1702195828 || *(_DWORD *)a5 == 1163219540 || *(_DWORD *)a5 == 1702195796) {
        goto LABEL_8;
      }
      goto LABEL_21;
    case 5:
      if ((*(_DWORD *)a5 != 1936482662 || a5[4] != 101)
        && (*(_DWORD *)a5 != 1397506374 || a5[4] != 69)
        && (*(_DWORD *)a5 != 1936482630 || a5[4] != 101))
      {
        goto LABEL_21;
      }
LABEL_22:
      uint64_t result = 0;
      *a7 = 0;
      return result;
    default:
LABEL_21:
      __int16 v15 = 1283;
      v14[0] = "'";
      void v14[2] = a5;
      _OWORD v14[3] = a6;
      v16[0] = v14;
      long long v16[2] = "' is invalid value for BOOLean argument! Try 0 or 1";
      __int16 v17 = 770;
      uint64_t v13 = (llvm::raw_ostream *)llvm::errs(a1);
      llvm::cl::Option::error(a2, (llvm::Twine *)v16, 0, 0, v13);
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault()
{
  return 1;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

llvm::raw_ostream *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  if (a3)
  {
    int v3 = *(unsigned __int8 *)(a1 + 128);
LABEL_5:
    __int16 v5 = *(_WORD *)(a1 + 144);
    uint64_t v4 = &unk_270DBC978;
    llvm::cl::parser<BOOL>::printOptionDiff((llvm::cl::basic_parser_impl *)a1, (const llvm::cl::Option *)a1, v3 != 0, (uint64_t)&v4, a2);
    return;
  }
  if (*(unsigned char *)(a1 + 145))
  {
    int v3 = *(unsigned __int8 *)(a1 + 128);
    if (*(unsigned __int8 *)(a1 + 144) != v3) {
      goto LABEL_5;
    }
  }
}

unsigned char *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::setDefault(unsigned char *result)
{
  char v1 = result[145];
  if (v1) {
    char v1 = result[144];
  }
  result[128] = v1;
  return result;
}

void *std::function<void ()(BOOL const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(BOOL const&)>::swap[abi:nn180100](v4, a1);
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:nn180100](v4);
  return a1;
}

void llvm::cl::AddLiteralOption(unint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (!atomic_load_explicit(qword_26B4176B0, memory_order_acquire)) {
  uint64_t v6 = qword_26B4176B0[0];
  }
  LODWORD(v7) = *(_DWORD *)(a1 + 108);
  if (v7 == *(_DWORD *)(a1 + 112))
  {
    if (!atomic_load_explicit(_MergedGlobals_0, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)_MergedGlobals_0, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
    }
    uint64_t v8 = _MergedGlobals_0[0];
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 96);
    if (v9 == *(void *)(a1 + 88)) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = *(unsigned int *)(a1 + 104);
    }
    if (v7)
    {
      uint64_t v10 = 8 * v7;
      for (uint64_t i = *(uint64_t **)(a1 + 96); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
      {
        v10 -= 8;
        if (!v10) {
          return;
        }
      }
    }
    else
    {
      uint64_t i = *(uint64_t **)(a1 + 96);
    }
    uint64_t v12 = (uint64_t *)(v9 + 8 * v7);
    if (i != v12)
    {
      uint64_t v13 = *i;
LABEL_20:
      while (++i != v12)
      {
        uint64_t v13 = *i;
        if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
        {
          if (i != v12) {
            goto LABEL_20;
          }
          return;
        }
      }
    }
  }
}

uint64_t llvm::cl::Option::setArgStr(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v5 = result;
  if ((*(_WORD *)(result + 10) & 0x4000) != 0)
  {
    if (!atomic_load_explicit(qword_26B4176B0, memory_order_acquire)) {
    atomic_ullong v6 = qword_26B4176B0[0];
    }
    if (*(_DWORD *)(v5 + 108) == *(_DWORD *)(v5 + 112))
    {
      if (!atomic_load_explicit(_MergedGlobals_0, memory_order_acquire)) {
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)_MergedGlobals_0, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
      }
    }
    else
    {
      if (!atomic_load_explicit(qword_26B417698, memory_order_acquire)) {
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_26B417698, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
      }
      uint64_t result = (uint64_t)llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)(v5 + 88), (const void *)qword_26B417698[0]);
      uint64_t v7 = *(unsigned int ***)(v5 + 96);
      uint64_t v8 = 104;
      if (v7 == *(unsigned int ***)(v5 + 88)) {
        uint64_t v8 = 108;
      }
      uint64_t v9 = *(unsigned int *)(v5 + v8);
      if ((unsigned int **)result == &v7[v9])
      {
        __int16 v15 = (unsigned int **)result;
        if (v9)
        {
          while ((unint64_t)*v7 >= 0xFFFFFFFFFFFFFFFELL)
          {
            if (++v7 == (unsigned int **)result) {
              goto LABEL_8;
            }
          }
        }
        if (v7 != (unsigned int **)result)
        {
          uint64_t v16 = *v7;
LABEL_29:
          while (++v7 != v15)
          {
            uint64_t v16 = *v7;
            if ((unint64_t)*v7 < 0xFFFFFFFFFFFFFFFELL)
            {
              if (v7 != v15) {
                goto LABEL_29;
              }
              break;
            }
          }
        }
      }
      else
      {
        uint64_t v10 = *(void *)(v6 + 280);
        uint64_t v11 = 288;
        if (v10 == *(void *)(v6 + 272)) {
          uint64_t v11 = 292;
        }
        uint64_t v12 = *(unsigned int *)(v6 + v11);
        if (v12)
        {
          uint64_t v13 = 8 * v12;
          uint64_t v14 = *(unsigned int ***)(v6 + 280);
          while ((unint64_t)*v14 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v14;
            v13 -= 8;
            if (!v13) {
              goto LABEL_8;
            }
          }
        }
        else
        {
          uint64_t v14 = *(unsigned int ***)(v6 + 280);
        }
        __int16 v17 = (unsigned int **)(v10 + 8 * v12);
        if (v14 != v17)
        {
          char v18 = *v14;
LABEL_37:
          while (++v14 != v17)
          {
            char v18 = *v14;
            if ((unint64_t)*v14 < 0xFFFFFFFFFFFFFFFELL)
            {
              if (v14 != v17) {
                goto LABEL_37;
              }
              break;
            }
          }
        }
      }
    }
  }
LABEL_8:
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  if (a3 == 1) {
    *(_WORD *)(v5 + 10) |= 0x1000u;
  }
  return result;
}

uint64_t *llvm::cl::Option::addCategory(llvm::cl::OptionCategory ***this, llvm::cl::OptionCategory *a2)
{
  uint64_t result = llvm::cl::getGeneralCategory((llvm::cl *)this);
  if (a2 != (llvm::cl::OptionCategory *)&llvm::cl::getGeneralCategory(void)::GeneralCategory
    && (unint64_t v5 = (uint64_t *)*this[8],
        uint64_t result = llvm::cl::getGeneralCategory((llvm::cl *)result),
        v5 == &llvm::cl::getGeneralCategory(void)::GeneralCategory))
  {
    *this[8] = a2;
  }
  else
  {
    uint64_t v8 = this[8];
    uint64_t v7 = (unsigned int *)(this + 8);
    atomic_ullong v6 = v8;
    uint64_t v9 = v7[2];
    if (v9)
    {
      uint64_t v10 = 8 * v9;
      uint64_t v11 = v6;
      while (*v11 != a2)
      {
        ++v11;
        v10 -= 8;
        if (!v10)
        {
          uint64_t v11 = &v6[v9];
          break;
        }
      }
    }
    else
    {
      uint64_t v11 = v6;
    }
    if (v9 == v11 - v6)
    {
      return (uint64_t *)llvm::SmallVectorTemplateBase<void *,true>::push_back(v7, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t *llvm::cl::getGeneralCategory(llvm::cl *this)
{
  {
    llvm::cl::getGeneralCategory(void)::GeneralCategory = (uint64_t)"General options";
    unk_26B420050 = 15;
    qword_26B420058 = (uint64_t)"";
    unk_26B420060 = 0;
    llvm::cl::OptionCategory::registerCategory((llvm::cl::OptionCategory *)&llvm::cl::getGeneralCategory(void)::GeneralCategory);
  }
  return &llvm::cl::getGeneralCategory(void)::GeneralCategory;
}

const void **llvm::cl::OptionCategory::registerCategory(llvm::cl::OptionCategory *this)
{
  if (!atomic_load_explicit(qword_26B4176B0, memory_order_acquire)) {
  uint64_t v2 = (llvm::SmallPtrSetImplBase *)(qword_26B4176B0[0] + 112);
  }
  return llvm::SmallPtrSetImplBase::insert_imp(v2, this);
}

void anonymous namespace'::CommandLineParser::registerSubCommand(uint64_t a1, void *a2)
{
  llvm::SmallPtrSetImpl<llvm::cl::SubCommand *>::insert((uint64_t)v16, (llvm::SmallPtrSetImplBase *)(a1 + 272), a2);
  if (!atomic_load_explicit(qword_26B417698, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_26B417698, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  }
  if ((void *)qword_26B417698[0] != a2)
  {
    if (!atomic_load_explicit(qword_26B417698, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_26B417698, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
    }
    uint64_t v4 = *(unsigned int *)(qword_26B417698[0] + 136);
    if (v4)
    {
      for (uint64_t i = *(void **)(qword_26B417698[0] + 128); !*i || *i == -8; ++i)
        ;
    }
    else
    {
      uint64_t i = *(void **)(qword_26B417698[0] + 128);
    }
    uint64_t v7 = *(void *)(qword_26B417698[0] + 128) + 8 * v4;
    if (i != (void *)v7)
    {
      uint64_t v8 = (void *)*i;
      do
      {
        unint64_t v9 = v8[1];
        __int16 v10 = *(_WORD *)(v9 + 10);
        if ((v10 & 7) == 4
          || ((int v11 = v10 & 0x180, v12 = v10 & 0x800, v11 != 128) ? (v13 = v12 == 0) : (v13 = 0),
              !v13 || *(void *)(v9 + 24)))
        {
        }
        else
        {
        }
        do
        {
          uint64_t v14 = (void *)i[1];
          ++i;
          uint64_t v8 = v14;
          if (v14) {
            BOOL v15 = v8 + 1 == 0;
          }
          else {
            BOOL v15 = 1;
          }
        }
        while (v15);
      }
      while (i != (void *)v7);
    }
  }
}

void llvm::cl::TokenizeWindowsCommandLineNoCopy(uint64_t a1, unint64_t a2, uint64_t *a3, unsigned int *a4)
{
  v38[16] = *MEMORY[0x263EF8340];
  uint64_t v36 = v38;
  long long v37 = xmmword_261E8A720;
  if (!a2) {
    return;
  }
  int v8 = 0;
  unint64_t v9 = 0;
  unint64_t v35 = a2 - 1;
  do
  {
    if (v8 == 2)
    {
      int v19 = *(unsigned __int8 *)(a1 + v9);
      if (v19 == 92)
      {
        unint64_t v9 = parseBackslash(a1, a2, v9, &v36);
      }
      else
      {
        if (v19 == 34)
        {
          if (v9 >= v35) {
            goto LABEL_32;
          }
          unint64_t v20 = v9 + 1;
          if (*(unsigned char *)(a1 + v9 + 1) != 34) {
            goto LABEL_32;
          }
          llvm::SmallVectorTemplateBase<char,true>::push_back(&v36, 34);
          goto LABEL_22;
        }
        llvm::SmallVectorTemplateBase<char,true>::push_back(&v36, v19);
      }
LABEL_27:
      int v8 = 2;
      goto LABEL_56;
    }
    if (v8 != 1)
    {
      if (v9 >= a2)
      {
        int v8 = 0;
        goto LABEL_56;
      }
      while (1)
      {
        unsigned int v10 = *(unsigned __int8 *)(a1 + v9);
        BOOL v11 = v10 > 0x20;
        uint64_t v12 = (1 << v10) & 0x100002601;
        if (v11 || v12 == 0) {
          break;
        }
        if (a2 == ++v9)
        {
          int v8 = 0;
          unint64_t v9 = a2;
          goto LABEL_56;
        }
      }
      unint64_t v20 = v9;
      if (v9 < a2)
      {
        unint64_t v20 = v9;
        while (1)
        {
          unsigned int v24 = *(unsigned __int8 *)(a1 + v20);
          BOOL v25 = v24 > 0x22 || ((1 << v24) & 0x500002601) == 0;
          if (!v25 || v24 == 92) {
            break;
          }
          if (++v20 >= a2)
          {
            unint64_t v20 = a2;
            break;
          }
        }
      }
      if (a2 >= v9) {
        unint64_t v26 = v9;
      }
      else {
        unint64_t v26 = a2;
      }
      if (v26 <= v20) {
        unint64_t v27 = v20;
      }
      else {
        unint64_t v27 = v9;
      }
      if (v27 >= a2) {
        unint64_t v27 = a2;
      }
      int v28 = (unsigned char *)(a1 + v26);
      uint64_t v29 = v27 - v26;
      if (v20 >= a2) {
        goto LABEL_54;
      }
      uint64_t v30 = *(unsigned __int8 *)(a1 + v20);
      if (v30 > 0x22) {
        goto LABEL_60;
      }
      if (((1 << v30) & 0x100002601) != 0)
      {
LABEL_54:
        llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a4, (uint64_t)v28, v29);
        int v8 = 0;
        goto LABEL_55;
      }
      if (v30 != 34)
      {
LABEL_60:
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v36, v28, (unsigned char *)(a1 + v27));
        uint64_t v21 = a1;
        uint64_t v22 = a2;
        uint64_t v23 = v20;
LABEL_30:
        unint64_t v9 = parseBackslash(v21, v22, v23, &v36);
        goto LABEL_32;
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v36, v28, (unsigned char *)(a1 + v27));
LABEL_22:
      int v8 = 2;
LABEL_55:
      unint64_t v9 = v20;
      goto LABEL_56;
    }
    uint64_t v14 = *(unsigned __int8 *)(a1 + v9);
    if (v14 > 0x22) {
      goto LABEL_28;
    }
    if (((1 << v14) & 0x100002601) == 0)
    {
      if (v14 == 34) {
        goto LABEL_27;
      }
LABEL_28:
      if (v14 == 92)
      {
        uint64_t v21 = a1;
        uint64_t v22 = a2;
        uint64_t v23 = v9;
        goto LABEL_30;
      }
      llvm::SmallVectorTemplateBase<char,true>::push_back(&v36, v14);
LABEL_32:
      int v8 = 1;
      goto LABEL_56;
    }
    uint64_t v16 = v36;
    size_t v15 = v37;
    __int16 v17 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a3, v37 + 1, 0);
    uint64_t v18 = (uint64_t)v17;
    if (v15) {
      memcpy(v17, v16, v15);
    }
    *(unsigned char *)(v18 + v15) = 0;
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a4, v18, v15);
    int v8 = 0;
    *(void *)&long long v37 = 0;
LABEL_56:
    ++v9;
  }
  while (v9 < a2);
  unint64_t v31 = v36;
  if (v8)
  {
    size_t v32 = v37;
    unint64_t v33 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a3, v37 + 1, 0);
    uint64_t v34 = (uint64_t)v33;
    if (v32) {
      memcpy(v33, v31, v32);
    }
    *(unsigned char *)(v34 + v32) = 0;
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a4, v34, v32);
    unint64_t v31 = v36;
  }
  if (v31 != v38) {
    free(v31);
  }
}

uint64_t *llvm::operator+@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *((unsigned __int8 *)result + 32);
  if (!*((unsigned char *)result + 32) || (int v4 = *((unsigned __int8 *)a2 + 32), !*((unsigned char *)a2 + 32)))
  {
    *(_WORD *)(a3 + 32) = 256;
    return result;
  }
  if (v3 == 1)
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v5;
    uint64_t v6 = a2[4];
LABEL_8:
    *(void *)(a3 + 32) = v6;
    return result;
  }
  if (v4 == 1)
  {
    long long v7 = *((_OWORD *)result + 1);
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_OWORD *)(a3 + 16) = v7;
    uint64_t v6 = result[4];
    goto LABEL_8;
  }
  int v8 = (uint64_t *)*result;
  uint64_t v9 = result[1];
  if (*((unsigned char *)result + 33) != 1)
  {
    LOBYTE(v3) = 2;
    int v8 = result;
  }
  uint64_t v10 = a2[1];
  if (*((unsigned char *)a2 + 33) == 1)
  {
    BOOL v11 = (uint64_t *)*a2;
  }
  else
  {
    LOBYTE(v4) = 2;
    BOOL v11 = a2;
  }
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v10;
  *(unsigned char *)(a3 + 32) = v3;
  *(unsigned char *)(a3 + 33) = v4;
  return result;
}

unsigned int *llvm::SmallVectorImpl<char const*>::append<char const* const*,void>(unsigned int *result, unsigned char *__src, unsigned char *a3)
{
  long long v5 = result;
  size_t v6 = a3 - __src;
  uint64_t v7 = result[2];
  unint64_t v8 = v7 + ((a3 - __src) >> 3);
  if (v8 > result[3])
  {
    uint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v8, 8);
    LODWORD(v7) = v5[2];
  }
  if (__src != a3)
  {
    uint64_t result = (unsigned int *)memcpy((void *)(*(void *)v5 + 8 * v7), __src, v6);
    LODWORD(v7) = v5[2];
  }
  _OWORD v5[2] = v7 + (v6 >> 3);
  return result;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, const char *a2)
{
  size_t v2 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    size_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    size_t v3 = v2;
  }
  return llvm::raw_ostream::write(a1, a2, v3);
}

uint64_t llvm::cl::Option::error(uint64_t a1, llvm::Twine *a2, uint64_t a3, uint64_t a4, llvm::raw_ostream *a5)
{
  if (!a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(a1 + 24);
    if (v7) {
      goto LABEL_3;
    }
LABEL_14:
    llvm::raw_ostream::operator<<(a5, *(const void **)(a1 + 32), *(void *)(a1 + 40));
    goto LABEL_17;
  }
  uint64_t v7 = a4;
  uint64_t v8 = a3;
  if (!a4) {
    goto LABEL_14;
  }
LABEL_3:
  if (!atomic_load_explicit(qword_26B4176B0, memory_order_acquire)) {
  int v9 = *(char *)(qword_26B4176B0[0] + 23);
  }
  if (v9 >= 0) {
    uint64_t v10 = (const char *)qword_26B4176B0[0];
  }
  else {
    uint64_t v10 = *(const char **)qword_26B4176B0[0];
  }
  if (v9 >= 0) {
    size_t v11 = *(unsigned __int8 *)(qword_26B4176B0[0] + 23);
  }
  else {
    size_t v11 = *(void *)(qword_26B4176B0[0] + 8);
  }
  llvm::raw_ostream::write(a5, v10, v11);
  uint64_t v12 = *((void *)a5 + 4);
  if ((unint64_t)(*((void *)a5 + 3) - v12) > 9)
  {
    *(_WORD *)(v12 + 8) = 8293;
    *(void *)uint64_t v12 = *(void *)": for the ";
    *((void *)a5 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(a5, ": for the ", 0xAuLL);
  }
  v16[0] = v8;
  v16[1] = v7;
  long long v16[2] = 0;
LABEL_17:
  uint64_t v13 = *((void *)a5 + 4);
  if ((unint64_t)(*((void *)a5 + 3) - v13) > 8)
  {
    *(unsigned char *)(v13 + 8) = 32;
    *(void *)uint64_t v13 = *(void *)" option: ";
    *((void *)a5 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(a5, " option: ", 9uLL);
  }
  llvm::Twine::print(a2, a5);
  uint64_t v14 = (unsigned char *)*((void *)a5 + 4);
  if (*((unsigned char **)a5 + 3) == v14)
  {
    llvm::raw_ostream::write(a5, "\n", 1uLL);
  }
  else
  {
    *uint64_t v14 = 10;
    ++*((void *)a5 + 4);
  }
  return 1;
}

llvm::raw_ostream *anonymous namespace'::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  v12[1] = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v10 = v12;
  for (long long i = xmmword_261E8A740; v5; --v5)
    llvm::SmallVectorTemplateBase<char,true>::push_back(&v10, 32);
  if (v4 <= 1) {
    size_t v6 = "-";
  }
  else {
    size_t v6 = "--";
  }
  uint64_t v7 = 1;
  if (v4 > 1) {
    uint64_t v7 = 2;
  }
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v10, v6, &v6[v7]);
  uint64_t v8 = llvm::raw_ostream::write(a1, (const char *)v10, i);
  llvm::raw_ostream::operator<<(v8, *(const void **)a2, *(void *)(a2 + 8));
  if (v10 != v12) {
    free(v10);
  }
  return a1;
}

uint64_t llvm::cl::Option::addOccurrence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0) {
    ++*(_WORD *)(a1 + 8);
  }
  return (**(uint64_t (***)(uint64_t))a1)(a1);
}

llvm::raw_ostream *llvm::cl::Option::printHelpStr(uint64_t a1, uint64_t a2, size_t a3, int a4)
{
  v19[0] = a1;
  v19[1] = a2;
  LOBYTE(v16[0]) = 10;
  llvm::StringRef::split(v19, (char *)v16, 1uLL, (uint64_t)&v17);
  uint64_t v7 = (llvm::raw_ostream *)llvm::outs(v6);
  uint64_t v8 = llvm::raw_ostream::indent(v7, (a3 - a4));
  uint64_t v9 = *((void *)v8 + 4);
  if ((unint64_t)(*((void *)v8 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 32;
    *(_WORD *)uint64_t v9 = 11552;
    *((void *)v8 + 4) += 3;
  }
  else
  {
    uint64_t v8 = llvm::raw_ostream::write(v8, " - ", 3uLL);
  }
  uint64_t result = llvm::raw_ostream::operator<<(v8, (const void *)v17, *((size_t *)&v17 + 1));
  size_t v11 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v11)
  {
    uint64_t result = llvm::raw_ostream::write(result, "\n", 1uLL);
  }
  else
  {
    *size_t v11 = 10;
    ++*((void *)result + 4);
  }
  while (*((void *)&v18 + 1))
  {
    char v20 = 10;
    llvm::StringRef::split((uint64_t *)&v18, &v20, 1uLL, (uint64_t)v16);
    long long v17 = v16[0];
    long long v18 = v16[1];
    uint64_t v13 = (llvm::raw_ostream *)llvm::outs(v12);
    uint64_t v14 = llvm::raw_ostream::indent(v13, a3);
    uint64_t result = llvm::raw_ostream::operator<<(v14, (const void *)v17, *((size_t *)&v17 + 1));
    size_t v15 = (unsigned char *)*((void *)result + 4);
    if (*((unsigned char **)result + 3) == v15)
    {
      uint64_t result = llvm::raw_ostream::write(result, "\n", 1uLL);
    }
    else
    {
      *size_t v15 = 10;
      ++*((void *)result + 4);
    }
  }
  return result;
}

llvm::raw_ostream *llvm::cl::basic_parser_impl::printOptionName(llvm::cl::basic_parser_impl *this, const llvm::cl::Option *a2, int a3)
{
  uint64_t v5 = (llvm::raw_ostream *)llvm::outs(this);
  long long v10 = *((_OWORD *)a2 + 1);
  uint64_t v11 = 2;
  uint64_t v7 = (llvm::raw_ostream *)llvm::outs(v6);
  size_t v8 = (a3 - *((_DWORD *)a2 + 6));
  return llvm::raw_ostream::indent(v7, v8);
}

uint64_t llvm::cl::parser<llvm::cl::BOOLOrDefault>::parse(llvm *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, int *a7)
{
  switch(a6)
  {
    case 0:
      goto LABEL_8;
    case 1:
      int v8 = *a5;
      if (v8 == 48) {
        goto LABEL_22;
      }
      if (v8 != 49) {
        goto LABEL_21;
      }
LABEL_8:
      uint64_t result = 0;
      int v10 = 1;
LABEL_23:
      *a7 = v10;
      break;
    case 4:
      if (*(_DWORD *)a5 == 1702195828 || *(_DWORD *)a5 == 1163219540 || *(_DWORD *)a5 == 1702195796) {
        goto LABEL_8;
      }
      goto LABEL_21;
    case 5:
      if ((*(_DWORD *)a5 != 1936482662 || a5[4] != 101)
        && (*(_DWORD *)a5 != 1397506374 || a5[4] != 69)
        && (*(_DWORD *)a5 != 1936482630 || a5[4] != 101))
      {
        goto LABEL_21;
      }
LABEL_22:
      uint64_t result = 0;
      int v10 = 2;
      goto LABEL_23;
    default:
LABEL_21:
      __int16 v16 = 1283;
      v15[0] = "'";
      long long v15[2] = a5;
      void v15[3] = a6;
      v17[0] = v15;
      void v17[2] = "' is invalid value for BOOLean argument! Try 0 or 1";
      __int16 v18 = 770;
      uint64_t v14 = (llvm::raw_ostream *)llvm::errs(a1);
      llvm::cl::Option::error(a2, (llvm::Twine *)v17, 0, 0, v14);
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t llvm::cl::parser<unsigned long long>::parse(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t a5, unint64_t a6, void *a7)
{
  v15[0] = 0;
  long long v17 = (unint64_t *)a5;
  unint64_t v18 = a6;
  uint64_t v11 = (llvm *)llvm::consumeUnsignedInteger((llvm *)&v17, 0, v15, a4);
  if (v18) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v11;
  }
  if (v12)
  {
    __int16 v16 = 1283;
    v15[0] = (unint64_t)"'";
    long long v15[2] = a5;
    void v15[3] = a6;
    long long v17 = v15;
    int v19 = "' value invalid for ullong argument!";
    __int16 v20 = 770;
    uint64_t v13 = (llvm::raw_ostream *)llvm::errs(v11);
    llvm::cl::Option::error(a2, (llvm::Twine *)&v17, 0, 0, v13);
  }
  else
  {
    *a7 = v15[0];
  }
  return v12;
}

BOOL parseDouble(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  __int16 v15 = 261;
  v14[0] = a2;
  v14[1] = a3;
  long long v17 = v19;
  long long v18 = xmmword_261E8A6A0;
  int v8 = llvm::Twine::toNullTerminatedStringRef((uint64_t)v14, (const char **)&v17);
  __int16 v16 = 0;
  double v9 = strtod(v8, &v16);
  int v10 = *v16;
  if (!*v16) {
    *a4 = v9;
  }
  uint64_t v11 = (llvm *)v17;
  if (v17 != v19) {
    free(v17);
  }
  if (v10)
  {
    __int16 v15 = 1283;
    v14[0] = "'";
    void v14[2] = a2;
    _OWORD v14[3] = a3;
    long long v17 = v14;
    *((void *)&v18 + 1) = "' value invalid for floating point argument!";
    v19[4] = 770;
    uint64_t v12 = (llvm::raw_ostream *)llvm::errs(v11);
    llvm::cl::Option::error(a1, (llvm::Twine *)&v17, 0, 0, v12);
  }
  return v10 != 0;
}

unint64_t llvm::cl::generic_parser_base::getOptionWidth(llvm::cl::generic_parser_base *this, const llvm::cl::Option *a2)
{
  uint64_t v3 = *((void *)a2 + 3);
  if (v3)
  {
    if (v3 == 1) {
      unint64_t v5 = 15;
    }
    else {
      unint64_t v5 = v3 + 15;
    }
    int v6 = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(void *)this + 16))(this);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = 0;
      do
      {
        (*(void (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v8);
        uint64_t v10 = v9;
        (*(void (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 32))(this, v8);
        uint64_t v12 = v11;
        int v13 = (*((unsigned __int16 *)a2 + 5) >> 3) & 3;
        if (!v13) {
          int v13 = (*(uint64_t (**)(const llvm::cl::Option *))(*(void *)a2 + 8))(a2);
        }
        if (v13 != 1 || v10 != 0 || v12 != 0)
        {
          unint64_t v16 = v10 + 8;
          if (!v10) {
            unint64_t v16 = 15;
          }
          if (v5 <= v16) {
            unint64_t v5 = v16;
          }
        }
        uint64_t v8 = (v8 + 1);
      }
      while (v7 != v8);
    }
  }
  else
  {
    int v17 = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(void *)this + 16))(this);
    if (v17)
    {
      int v18 = v17;
      uint64_t v19 = 0;
      unint64_t v5 = 0;
      do
      {
        (*(void (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v19);
        if (v5 <= v20 + 8) {
          unint64_t v5 = v20 + 8;
        }
        uint64_t v19 = (v19 + 1);
      }
      while (v18 != v19);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t llvm::cl::generic_parser_base::printOptionInfo(llvm::cl::generic_parser_base *this, const llvm::cl::Option *a2, size_t a3)
{
  if (*((void *)a2 + 3))
  {
    unint64_t v5 = (llvm *)((*((unsigned __int16 *)a2 + 5) >> 3) & 3);
    if (!v5) {
      unint64_t v5 = (llvm *)(*(uint64_t (**)(const llvm::cl::Option *))(*(void *)a2 + 8))(a2);
    }
    if (v5 == 1)
    {
      unint64_t v5 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(void *)this + 16))(this);
      if (v5)
      {
        int v6 = (int)v5;
        uint64_t v7 = 0;
        while (1)
        {
          unint64_t v5 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v7);
          if (!v8) {
            break;
          }
          uint64_t v7 = (v7 + 1);
          if (v6 == v7) {
            goto LABEL_28;
          }
        }
        uint64_t v23 = (llvm::raw_ostream *)llvm::outs(v5);
        long long v57 = *((_OWORD *)a2 + 1);
        *(void *)&long long v58 = 2;
        uint64_t v24 = *((void *)a2 + 3);
        if (v24 == 1) {
          int v25 = 7;
        }
        else {
          int v25 = v24 + 7;
        }
        unint64_t v5 = llvm::cl::Option::printHelpStr(*((void *)a2 + 4), *((void *)a2 + 5), a3, v25);
      }
    }
LABEL_28:
    unint64_t v26 = (llvm::raw_ostream *)llvm::outs(v5);
    long long v57 = *((_OWORD *)a2 + 1);
    *(void *)&long long v58 = 2;
    int v28 = (void *)*((void *)v27 + 4);
    if (*((void *)v27 + 3) - (void)v28 > 7uLL)
    {
      void *v28 = 0x3E65756C61763C3DLL;
      *((void *)v27 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v27, "=<value>", 8uLL);
    }
    uint64_t v29 = *((void *)a2 + 3);
    if (v29 == 1) {
      int v30 = 15;
    }
    else {
      int v30 = v29 + 15;
    }
    llvm::cl::Option::printHelpStr(*((void *)a2 + 4), *((void *)a2 + 5), a3, v30);
    uint64_t result = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(void *)this + 16))(this);
    int v54 = result;
    if (result)
    {
      uint64_t v31 = 0;
      do
      {
        size_t v32 = (const void *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v31);
        size_t v34 = v33;
        uint64_t v35 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 32))(this, v31);
        uint64_t v37 = v36;
        uint64_t result = (*((unsigned __int16 *)a2 + 5) >> 3) & 3;
        if (!result) {
          uint64_t result = (*(uint64_t (**)(const llvm::cl::Option *))(*(void *)a2 + 8))(a2);
        }
        if (result == 1 && v34 == 0 && v37 == 0) {
          goto LABEL_69;
        }
        long long v40 = (llvm::raw_ostream *)llvm::outs((llvm *)result);
        uint64_t v41 = *((void *)v40 + 4);
        if ((unint64_t)(*((void *)v40 + 3) - v41) > 4)
        {
          *(unsigned char *)(v41 + 4) = 61;
          *(_DWORD *)uint64_t v41 = 538976288;
          *((void *)v40 + 4) += 5;
        }
        else
        {
          long long v40 = llvm::raw_ostream::write(v40, "    =", 5uLL);
        }
        unint64_t v42 = llvm::raw_ostream::operator<<(v40, v32, v34);
        if (v34)
        {
          int v43 = v34 + 8;
          if (v37) {
            goto LABEL_50;
          }
        }
        else
        {
          unint64_t v42 = (llvm *)llvm::outs(v42);
          unint64_t v49 = (_DWORD *)*((void *)v42 + 4);
          if (*((void *)v42 + 3) - (void)v49 > 6uLL)
          {
            *(_DWORD *)((char *)v49 + 3) = 1048147056;
            *unint64_t v49 = 1886217532;
            *((void *)v42 + 4) += 7;
          }
          else
          {
            unint64_t v42 = llvm::raw_ostream::write(v42, "<empty>", 7uLL);
          }
          int v43 = 15;
          if (v37)
          {
LABEL_50:
            v59[0] = v35;
            v59[1] = v37;
            LOBYTE(v56[0]) = 10;
            llvm::StringRef::split(v59, (char *)v56, 1uLL, (uint64_t)&v57);
            uint64_t v45 = (llvm::raw_ostream *)llvm::outs(v44);
            unint64_t v46 = llvm::raw_ostream::indent(v45, (a3 - v43));
            uint64_t v47 = *((void *)v46 + 4);
            if ((unint64_t)(*((void *)v46 + 3) - v47) > 2)
            {
              *(unsigned char *)(v47 + 2) = 32;
              *(_WORD *)uint64_t v47 = 11552;
              size_t v48 = (_WORD *)(*((void *)v46 + 4) + 3);
              *((void *)v46 + 4) = v48;
            }
            else
            {
              unint64_t v46 = llvm::raw_ostream::write(v46, " - ", 3uLL);
              size_t v48 = (_WORD *)*((void *)v46 + 4);
            }
            if (*((void *)v46 + 3) - (void)v48 > 1uLL)
            {
              *size_t v48 = 8224;
              *((void *)v46 + 4) += 2;
            }
            else
            {
              unint64_t v46 = llvm::raw_ostream::write(v46, "  ", 2uLL);
            }
            while (1)
            {
              uint64_t result = (uint64_t)llvm::raw_ostream::operator<<(v46, (const void *)v57, *((size_t *)&v57 + 1));
              unint64_t v52 = *(unsigned char **)(result + 32);
              if (*(unsigned char **)(result + 24) == v52)
              {
                uint64_t result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, "\n", 1uLL);
              }
              else
              {
                *unint64_t v52 = 10;
                ++*(void *)(result + 32);
              }
              if (!*((void *)&v58 + 1)) {
                break;
              }
              char v60 = 10;
              llvm::StringRef::split((uint64_t *)&v58, &v60, 1uLL, (uint64_t)v56);
              long long v57 = v56[0];
              long long v58 = v56[1];
              uint64_t v51 = (llvm::raw_ostream *)llvm::outs(v50);
              unint64_t v46 = llvm::raw_ostream::indent(v51, (a3 + 2));
            }
            goto LABEL_69;
          }
        }
        uint64_t result = (uint64_t)llvm::outs(v42);
        unint64_t v53 = *(unsigned char **)(result + 32);
        if ((unint64_t)v53 >= *(void *)(result + 24))
        {
          uint64_t result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, 10);
        }
        else
        {
          *(void *)(result + 32) = v53 + 1;
          *unint64_t v53 = 10;
        }
LABEL_69:
        uint64_t v31 = (v31 + 1);
      }
      while (v31 != v54);
    }
  }
  else
  {
    if (*((void *)a2 + 5))
    {
      uint64_t v9 = (llvm::raw_ostream *)llvm::outs(this);
      uint64_t v10 = (_WORD *)*((void *)v9 + 4);
      if (*((void *)v9 + 3) - (void)v10 > 1uLL)
      {
        *uint64_t v10 = 8224;
        *((void *)v9 + 4) += 2;
      }
      else
      {
        uint64_t v9 = llvm::raw_ostream::write(v9, "  ", 2uLL);
      }
      uint64_t v11 = llvm::raw_ostream::operator<<(v9, *((const void **)a2 + 4), *((void *)a2 + 5));
      uint64_t v12 = (unsigned char *)*((void *)v11 + 4);
      if ((unint64_t)v12 >= *((void *)v11 + 3))
      {
        llvm::raw_ostream::write(v11, 10);
      }
      else
      {
        *((void *)v11 + 4) = v12 + 1;
        *uint64_t v12 = 10;
      }
    }
    uint64_t result = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(void *)this + 16))(this);
    if (result)
    {
      int v14 = result;
      uint64_t v15 = 0;
      do
      {
        unint64_t v16 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v15);
        uint64_t v18 = v17;
        uint64_t v19 = (llvm::raw_ostream *)llvm::outs(v16);
        uint64_t v20 = (_DWORD *)*((void *)v19 + 4);
        if (*((void *)v19 + 3) - (void)v20 > 3uLL)
        {
          *uint64_t v20 = 538976288;
          *((void *)v19 + 4) += 4;
        }
        else
        {
          uint64_t v19 = llvm::raw_ostream::write(v19, "    ", 4uLL);
        }
        *(void *)&long long v57 = v16;
        *((void *)&v57 + 1) = v18;
        *(void *)&long long v58 = 2;
        uint64_t v21 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 32))(this, v15);
        uint64_t result = (uint64_t)llvm::cl::Option::printHelpStr(v21, v22, a3, (int)v18 + 8);
        uint64_t v15 = (v15 + 1);
      }
      while (v14 != v15);
    }
  }
  return result;
}

llvm::raw_ostream *llvm::cl::generic_parser_base::printGenericOptionDiff(llvm::cl::generic_parser_base *this, const llvm::cl::Option *a2, const llvm::cl::GenericOptionValue *a3, const llvm::cl::GenericOptionValue *a4, int a5)
{
  uint64_t v10 = (llvm::raw_ostream *)llvm::outs(this);
  uint64_t v11 = (_WORD *)*((void *)v10 + 4);
  if (*((void *)v10 + 3) - (void)v11 > 1uLL)
  {
    *uint64_t v11 = 8224;
    *((void *)v10 + 4) += 2;
  }
  else
  {
    uint64_t v10 = llvm::raw_ostream::write(v10, "  ", 2uLL);
  }
  long long v38 = *((_OWORD *)a2 + 1);
  uint64_t v39 = 2;
  int v13 = (llvm::raw_ostream *)llvm::outs(v12);
  llvm::raw_ostream::indent(v13, (a5 - *((_DWORD *)a2 + 6)));
  uint64_t v14 = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(void *)this + 16))(this);
  if (v14)
  {
    int v15 = v14;
    uint64_t v16 = 0;
    uint64_t v17 = "= *unknown option value*\n";
    size_t v18 = 25;
    while (1)
    {
      uint64_t v19 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 48))(this, v16);
      uint64_t v14 = (**(uint64_t (***)(const llvm::cl::GenericOptionValue *, uint64_t))a3)(a3, v19);
      if ((v14 & 1) == 0) {
        break;
      }
      uint64_t v16 = (v16 + 1);
      if (v15 == v16) {
        goto LABEL_24;
      }
    }
    uint64_t v20 = (llvm::raw_ostream *)llvm::outs((llvm *)v14);
    uint64_t v21 = v20;
    uint64_t v22 = (_WORD *)*((void *)v20 + 4);
    if (*((void *)v20 + 3) - (void)v22 > 1uLL)
    {
      *uint64_t v22 = 8253;
      *((void *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, "= ", 2uLL);
    }
    uint64_t v23 = (const void *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v16);
    llvm::raw_ostream::operator<<(v21, v23, v24);
    int v25 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v16);
    if (v26 <= 8) {
      size_t v27 = 8 - v26;
    }
    else {
      size_t v27 = 0;
    }
    int v28 = (llvm::raw_ostream *)llvm::outs(v25);
    uint64_t v29 = llvm::raw_ostream::indent(v28, v27);
    uint64_t v30 = *((void *)v29 + 4);
    if ((unint64_t)(*((void *)v29 + 3) - v30) > 0xA)
    {
      *(_DWORD *)(v30 + 7) = 540701804;
      *(void *)uint64_t v30 = *(void *)" (default: ";
      *((void *)v29 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v29, " (default: ", 0xBuLL);
    }
    uint64_t v31 = 0;
    uint64_t v17 = ")\n";
    size_t v18 = 2;
    while (1)
    {
      uint64_t v32 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 48))(this, v31);
      uint64_t v14 = (**(uint64_t (***)(const llvm::cl::GenericOptionValue *, uint64_t))a4)(a4, v32);
      if ((v14 & 1) == 0) {
        break;
      }
      uint64_t v31 = (v31 + 1);
      if (v15 == v31) {
        goto LABEL_24;
      }
    }
    size_t v33 = (llvm::raw_ostream *)llvm::outs((llvm *)v14);
    size_t v34 = (const void *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(void *)this + 24))(this, v31);
    uint64_t v14 = (uint64_t)llvm::raw_ostream::operator<<(v33, v34, v35);
    uint64_t v17 = ")\n";
    size_t v18 = 2;
  }
  else
  {
    uint64_t v17 = "= *unknown option value*\n";
    size_t v18 = 25;
  }
LABEL_24:
  uint64_t v36 = (llvm::raw_ostream *)llvm::outs((llvm *)v14);
  return llvm::raw_ostream::operator<<(v36, v17, v18);
}

void llvm::cl::parser<BOOL>::printOptionDiff(llvm::cl::basic_parser_impl *a1, const llvm::cl::Option *a2, unsigned int a3, uint64_t a4, int a5)
{
  llvm::cl::basic_parser_impl::printOptionName(a1, a2, a5);
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  uint64_t v34 = 0;
  int v24 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v30 = 1;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = &unk_270DBD6E0;
  uint64_t v31 = (void **)&v32;
  llvm::raw_ostream::SetUnbuffered(&v23);
  llvm::write_integer((llvm::raw_ostream *)&v23, a3, 0, 0);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
  uint64_t v8 = (llvm::raw_ostream *)llvm::outs(v7);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8253;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    uint64_t v8 = llvm::raw_ostream::write(v8, "= ", 2uLL);
  }
  if (v34 >= 0) {
    uint64_t v10 = (const char *)&v32;
  }
  else {
    uint64_t v10 = v32;
  }
  if (v34 >= 0) {
    size_t v11 = HIBYTE(v34);
  }
  else {
    size_t v11 = v33;
  }
  uint64_t v12 = llvm::raw_ostream::write(v8, v10, v11);
  if (SHIBYTE(v34) < 0)
  {
    int v13 = v33;
    if (v33 < 8) {
      goto LABEL_12;
    }
  }
  else
  {
    int v13 = HIBYTE(v34);
    if (HIBYTE(v34) <= 7u)
    {
LABEL_12:
      size_t v14 = (8 - v13);
      goto LABEL_15;
    }
  }
  size_t v14 = 0;
LABEL_15:
  int v15 = (llvm::raw_ostream *)llvm::outs(v12);
  uint64_t v16 = llvm::raw_ostream::indent(v15, v14);
  uint64_t v17 = *((void *)v16 + 4);
  if ((unint64_t)(*((void *)v16 + 3) - v17) > 0xA)
  {
    *(_DWORD *)(v17 + 7) = 540701804;
    *(void *)uint64_t v17 = *(void *)" (default: ";
    *((void *)v16 + 4) += 11;
  }
  else
  {
    uint64_t v16 = llvm::raw_ostream::write(v16, " (default: ", 0xBuLL);
  }
  int v18 = *(unsigned __int8 *)(a4 + 9);
  uint64_t v19 = (llvm::raw_ostream *)llvm::outs(v16);
  if (v18)
  {
    uint64_t v19 = llvm::write_integer(v19, *(unsigned __int8 *)(a4 + 8), 0, 0);
  }
  else
  {
    uint64_t v20 = *((void *)v19 + 4);
    if ((unint64_t)(*((void *)v19 + 3) - v20) > 0xB)
    {
      *(_DWORD *)(v20 + 8) = 712273013;
      *(void *)uint64_t v20 = *(void *)"*no default*";
      *((void *)v19 + 4) += 12;
    }
    else
    {
      uint64_t v19 = llvm::raw_ostream::write(v19, "*no default*", 0xCuLL);
    }
  }
  uint64_t v21 = (llvm::raw_ostream *)llvm::outs(v19);
  uint64_t v22 = (_WORD *)*((void *)v21 + 4);
  if (*((void *)v21 + 3) - (void)v22 > 1uLL)
  {
    *uint64_t v22 = 2601;
    *((void *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, ")\n", 2uLL);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
}

void llvm::cl::parser<llvm::cl::BOOLOrDefault>::printOptionDiff(llvm::cl::basic_parser_impl *a1, const llvm::cl::Option *a2, int a3, uint64_t a4, int a5)
{
  llvm::cl::basic_parser_impl::printOptionName(a1, a2, a5);
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  uint64_t v34 = 0;
  int v24 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v30 = 1;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = &unk_270DBD6E0;
  uint64_t v31 = (void **)&v32;
  llvm::raw_ostream::SetUnbuffered(&v23);
  llvm::write_integer((llvm::raw_ostream *)&v23, a3, 0, 0);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
  uint64_t v8 = (llvm::raw_ostream *)llvm::outs(v7);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8253;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    uint64_t v8 = llvm::raw_ostream::write(v8, "= ", 2uLL);
  }
  if (v34 >= 0) {
    uint64_t v10 = (const char *)&v32;
  }
  else {
    uint64_t v10 = v32;
  }
  if (v34 >= 0) {
    size_t v11 = HIBYTE(v34);
  }
  else {
    size_t v11 = v33;
  }
  uint64_t v12 = llvm::raw_ostream::write(v8, v10, v11);
  if (SHIBYTE(v34) < 0)
  {
    int v13 = v33;
    if (v33 < 8) {
      goto LABEL_12;
    }
  }
  else
  {
    int v13 = HIBYTE(v34);
    if (HIBYTE(v34) <= 7u)
    {
LABEL_12:
      size_t v14 = (8 - v13);
      goto LABEL_15;
    }
  }
  size_t v14 = 0;
LABEL_15:
  int v15 = (llvm::raw_ostream *)llvm::outs(v12);
  uint64_t v16 = llvm::raw_ostream::indent(v15, v14);
  uint64_t v17 = *((void *)v16 + 4);
  if ((unint64_t)(*((void *)v16 + 3) - v17) > 0xA)
  {
    *(_DWORD *)(v17 + 7) = 540701804;
    *(void *)uint64_t v17 = *(void *)" (default: ";
    *((void *)v16 + 4) += 11;
  }
  else
  {
    uint64_t v16 = llvm::raw_ostream::write(v16, " (default: ", 0xBuLL);
  }
  int v18 = *(unsigned __int8 *)(a4 + 12);
  uint64_t v19 = (llvm::raw_ostream *)llvm::outs(v16);
  if (v18)
  {
    uint64_t v19 = llvm::write_integer(v19, *(int *)(a4 + 8), 0, 0);
  }
  else
  {
    uint64_t v20 = *((void *)v19 + 4);
    if ((unint64_t)(*((void *)v19 + 3) - v20) > 0xB)
    {
      *(_DWORD *)(v20 + 8) = 712273013;
      *(void *)uint64_t v20 = *(void *)"*no default*";
      *((void *)v19 + 4) += 12;
    }
    else
    {
      uint64_t v19 = llvm::raw_ostream::write(v19, "*no default*", 0xCuLL);
    }
  }
  uint64_t v21 = (llvm::raw_ostream *)llvm::outs(v19);
  uint64_t v22 = (_WORD *)*((void *)v21 + 4);
  if (*((void *)v21 + 3) - (void)v22 > 1uLL)
  {
    *uint64_t v22 = 2601;
    *((void *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, ")\n", 2uLL);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
}

void llvm::cl::parser<unsigned int>::printOptionDiff(llvm::cl::basic_parser_impl *a1, const llvm::cl::Option *a2, unsigned int a3, uint64_t a4, int a5)
{
  llvm::cl::basic_parser_impl::printOptionName(a1, a2, a5);
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  uint64_t v34 = 0;
  int v24 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v30 = 1;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = &unk_270DBD6E0;
  uint64_t v31 = (void **)&v32;
  llvm::raw_ostream::SetUnbuffered(&v23);
  write_unsigned<unsigned long>((llvm::raw_ostream *)&v23, a3, 0, 0, 0);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
  uint64_t v8 = (llvm::raw_ostream *)llvm::outs(v7);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8253;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    uint64_t v8 = llvm::raw_ostream::write(v8, "= ", 2uLL);
  }
  if (v34 >= 0) {
    uint64_t v10 = (const char *)&v32;
  }
  else {
    uint64_t v10 = v32;
  }
  if (v34 >= 0) {
    size_t v11 = HIBYTE(v34);
  }
  else {
    size_t v11 = v33;
  }
  uint64_t v12 = llvm::raw_ostream::write(v8, v10, v11);
  if (SHIBYTE(v34) < 0)
  {
    int v13 = v33;
    if (v33 < 8) {
      goto LABEL_12;
    }
  }
  else
  {
    int v13 = HIBYTE(v34);
    if (HIBYTE(v34) <= 7u)
    {
LABEL_12:
      size_t v14 = (8 - v13);
      goto LABEL_15;
    }
  }
  size_t v14 = 0;
LABEL_15:
  int v15 = (llvm::raw_ostream *)llvm::outs(v12);
  uint64_t v16 = llvm::raw_ostream::indent(v15, v14);
  uint64_t v17 = *((void *)v16 + 4);
  if ((unint64_t)(*((void *)v16 + 3) - v17) > 0xA)
  {
    *(_DWORD *)(v17 + 7) = 540701804;
    *(void *)uint64_t v17 = *(void *)" (default: ";
    *((void *)v16 + 4) += 11;
  }
  else
  {
    uint64_t v16 = llvm::raw_ostream::write(v16, " (default: ", 0xBuLL);
  }
  int v18 = *(unsigned __int8 *)(a4 + 12);
  uint64_t v19 = (llvm::raw_ostream *)llvm::outs(v16);
  if (v18)
  {
    uint64_t v19 = write_unsigned<unsigned long>(v19, *(unsigned int *)(a4 + 8), 0, 0, 0);
  }
  else
  {
    uint64_t v20 = *((void *)v19 + 4);
    if ((unint64_t)(*((void *)v19 + 3) - v20) > 0xB)
    {
      *(_DWORD *)(v20 + 8) = 712273013;
      *(void *)uint64_t v20 = *(void *)"*no default*";
      *((void *)v19 + 4) += 12;
    }
    else
    {
      uint64_t v19 = llvm::raw_ostream::write(v19, "*no default*", 0xCuLL);
    }
  }
  uint64_t v21 = (llvm::raw_ostream *)llvm::outs(v19);
  uint64_t v22 = (_WORD *)*((void *)v21 + 4);
  if (*((void *)v21 + 3) - (void)v22 > 1uLL)
  {
    *uint64_t v22 = 2601;
    *((void *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, ")\n", 2uLL);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
}

void llvm::cl::parser<unsigned long long>::printOptionDiff(llvm::cl::basic_parser_impl *a1, const llvm::cl::Option *a2, unint64_t a3, uint64_t a4, int a5)
{
  llvm::cl::basic_parser_impl::printOptionName(a1, a2, a5);
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  uint64_t v34 = 0;
  int v24 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v30 = 1;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = &unk_270DBD6E0;
  uint64_t v31 = (void **)&v32;
  llvm::raw_ostream::SetUnbuffered(&v23);
  write_unsigned<unsigned long>((llvm::raw_ostream *)&v23, a3, 0, 0, 0);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
  uint64_t v8 = (llvm::raw_ostream *)llvm::outs(v7);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8253;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    uint64_t v8 = llvm::raw_ostream::write(v8, "= ", 2uLL);
  }
  if (v34 >= 0) {
    uint64_t v10 = (const char *)&v32;
  }
  else {
    uint64_t v10 = v32;
  }
  if (v34 >= 0) {
    size_t v11 = HIBYTE(v34);
  }
  else {
    size_t v11 = v33;
  }
  uint64_t v12 = llvm::raw_ostream::write(v8, v10, v11);
  if (SHIBYTE(v34) < 0)
  {
    int v13 = v33;
    if (v33 < 8) {
      goto LABEL_12;
    }
  }
  else
  {
    int v13 = HIBYTE(v34);
    if (HIBYTE(v34) <= 7u)
    {
LABEL_12:
      size_t v14 = (8 - v13);
      goto LABEL_15;
    }
  }
  size_t v14 = 0;
LABEL_15:
  int v15 = (llvm::raw_ostream *)llvm::outs(v12);
  uint64_t v16 = llvm::raw_ostream::indent(v15, v14);
  uint64_t v17 = *((void *)v16 + 4);
  if ((unint64_t)(*((void *)v16 + 3) - v17) > 0xA)
  {
    *(_DWORD *)(v17 + 7) = 540701804;
    *(void *)uint64_t v17 = *(void *)" (default: ";
    *((void *)v16 + 4) += 11;
  }
  else
  {
    uint64_t v16 = llvm::raw_ostream::write(v16, " (default: ", 0xBuLL);
  }
  int v18 = *(unsigned __int8 *)(a4 + 16);
  uint64_t v19 = (llvm::raw_ostream *)llvm::outs(v16);
  if (v18)
  {
    uint64_t v19 = write_unsigned<unsigned long>(v19, *(void *)(a4 + 8), 0, 0, 0);
  }
  else
  {
    uint64_t v20 = *((void *)v19 + 4);
    if ((unint64_t)(*((void *)v19 + 3) - v20) > 0xB)
    {
      *(_DWORD *)(v20 + 8) = 712273013;
      *(void *)uint64_t v20 = *(void *)"*no default*";
      *((void *)v19 + 4) += 12;
    }
    else
    {
      uint64_t v19 = llvm::raw_ostream::write(v19, "*no default*", 0xCuLL);
    }
  }
  uint64_t v21 = (llvm::raw_ostream *)llvm::outs(v19);
  uint64_t v22 = (_WORD *)*((void *)v21 + 4);
  if (*((void *)v21 + 3) - (void)v22 > 1uLL)
  {
    *uint64_t v22 = 2601;
    *((void *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, ")\n", 2uLL);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
}

void llvm::cl::parser<double>::printOptionDiff(llvm::cl::basic_parser_impl *a1, const llvm::cl::Option *a2, uint64_t a3, int a4, double a5)
{
  llvm::cl::basic_parser_impl::printOptionName(a1, a2, a4);
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  uint64_t v34 = 0;
  int v24 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v30 = 1;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = &unk_270DBD6E0;
  uint64_t v31 = (void **)&v32;
  llvm::raw_ostream::SetUnbuffered(&v23);
  llvm::write_double((llvm::raw_ostream *)&v23, 0, 0, 0, a5);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
  uint64_t v8 = (llvm::raw_ostream *)llvm::outs(v7);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8253;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    uint64_t v8 = llvm::raw_ostream::write(v8, "= ", 2uLL);
  }
  if (v34 >= 0) {
    uint64_t v10 = (const char *)&v32;
  }
  else {
    uint64_t v10 = v32;
  }
  if (v34 >= 0) {
    size_t v11 = HIBYTE(v34);
  }
  else {
    size_t v11 = v33;
  }
  uint64_t v12 = llvm::raw_ostream::write(v8, v10, v11);
  if (SHIBYTE(v34) < 0)
  {
    int v13 = v33;
    if (v33 < 8) {
      goto LABEL_12;
    }
  }
  else
  {
    int v13 = HIBYTE(v34);
    if (HIBYTE(v34) <= 7u)
    {
LABEL_12:
      size_t v14 = (8 - v13);
      goto LABEL_15;
    }
  }
  size_t v14 = 0;
LABEL_15:
  int v15 = (llvm::raw_ostream *)llvm::outs(v12);
  uint64_t v16 = llvm::raw_ostream::indent(v15, v14);
  uint64_t v17 = *((void *)v16 + 4);
  if ((unint64_t)(*((void *)v16 + 3) - v17) > 0xA)
  {
    *(_DWORD *)(v17 + 7) = 540701804;
    *(void *)uint64_t v17 = *(void *)" (default: ";
    *((void *)v16 + 4) += 11;
  }
  else
  {
    uint64_t v16 = llvm::raw_ostream::write(v16, " (default: ", 0xBuLL);
  }
  int v18 = *(unsigned __int8 *)(a3 + 16);
  uint64_t v19 = (llvm::raw_ostream *)llvm::outs(v16);
  if (v18)
  {
    llvm::write_double(v19, 0, 0, 0, *(double *)(a3 + 8));
  }
  else
  {
    uint64_t v20 = *((void *)v19 + 4);
    if ((unint64_t)(*((void *)v19 + 3) - v20) > 0xB)
    {
      *(_DWORD *)(v20 + 8) = 712273013;
      *(void *)uint64_t v20 = *(void *)"*no default*";
      *((void *)v19 + 4) += 12;
    }
    else
    {
      uint64_t v19 = llvm::raw_ostream::write(v19, "*no default*", 0xCuLL);
    }
  }
  uint64_t v21 = (llvm::raw_ostream *)llvm::outs(v19);
  uint64_t v22 = (_WORD *)*((void *)v21 + 4);
  if (*((void *)v21 + 3) - (void)v22 > 1uLL)
  {
    *uint64_t v22 = 2601;
    *((void *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, ")\n", 2uLL);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
}

void llvm::cl::parser<float>::printOptionDiff(llvm::cl::basic_parser_impl *a1, const llvm::cl::Option *a2, uint64_t a3, int a4, float a5)
{
  llvm::cl::basic_parser_impl::printOptionName(a1, a2, a4);
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  uint64_t v34 = 0;
  int v24 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v30 = 1;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = &unk_270DBD6E0;
  uint64_t v31 = (void **)&v32;
  llvm::raw_ostream::SetUnbuffered(&v23);
  llvm::write_double((llvm::raw_ostream *)&v23, 0, 0, 0, a5);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v23);
  uint64_t v8 = (llvm::raw_ostream *)llvm::outs(v7);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8253;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    uint64_t v8 = llvm::raw_ostream::write(v8, "= ", 2uLL);
  }
  if (v34 >= 0) {
    uint64_t v10 = (const char *)&v32;
  }
  else {
    uint64_t v10 = v32;
  }
  if (v34 >= 0) {
    size_t v11 = HIBYTE(v34);
  }
  else {
    size_t v11 = v33;
  }
  uint64_t v12 = llvm::raw_ostream::write(v8, v10, v11);
  if (SHIBYTE(v34) < 0)
  {
    int v13 = v33;
    if (v33 < 8) {
      goto LABEL_12;
    }
  }
  else
  {
    int v13 = HIBYTE(v34);
    if (HIBYTE(v34) <= 7u)
    {
LABEL_12:
      size_t v14 = (8 - v13);
      goto LABEL_15;
    }
  }
  size_t v14 = 0;
LABEL_15:
  int v15 = (llvm::raw_ostream *)llvm::outs(v12);
  uint64_t v16 = llvm::raw_ostream::indent(v15, v14);
  uint64_t v17 = *((void *)v16 + 4);
  if ((unint64_t)(*((void *)v16 + 3) - v17) > 0xA)
  {
    *(_DWORD *)(v17 + 7) = 540701804;
    *(void *)uint64_t v17 = *(void *)" (default: ";
    *((void *)v16 + 4) += 11;
  }
  else
  {
    uint64_t v16 = llvm::raw_ostream::write(v16, " (default: ", 0xBuLL);
  }
  int v18 = *(unsigned __int8 *)(a3 + 12);
  uint64_t v19 = (llvm::raw_ostream *)llvm::outs(v16);
  if (v18)
  {
    llvm::write_double(v19, 0, 0, 0, *(float *)(a3 + 8));
  }
  else
  {
    uint64_t v20 = *((void *)v19 + 4);
    if ((unint64_t)(*((void *)v19 + 3) - v20) > 0xB)
    {
      *(_DWORD *)(v20 + 8) = 712273013;
      *(void *)uint64_t v20 = *(void *)"*no default*";
      *((void *)v19 + 4) += 12;
    }
    else
    {
      uint64_t v19 = llvm::raw_ostream::write(v19, "*no default*", 0xCuLL);
    }
  }
  uint64_t v21 = (llvm::raw_ostream *)llvm::outs(v19);
  uint64_t v22 = (_WORD *)*((void *)v21 + 4);
  if (*((void *)v21 + 3) - (void)v22 > 1uLL)
  {
    *uint64_t v22 = 2601;
    *((void *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, ")\n", 2uLL);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
}

llvm::raw_ostream *llvm::cl::parser<std::string>::printOptionDiff(llvm::cl::basic_parser_impl *a1, const llvm::cl::Option *a2, const void *a3, size_t a4, uint64_t a5, int a6)
{
  uint64_t v9 = llvm::cl::basic_parser_impl::printOptionName(a1, a2, a6);
  uint64_t v10 = (llvm::raw_ostream *)llvm::outs(v9);
  size_t v11 = (_WORD *)*((void *)v10 + 4);
  if (*((void *)v10 + 3) - (void)v11 > 1uLL)
  {
    *size_t v11 = 8253;
    *((void *)v10 + 4) += 2;
  }
  else
  {
    uint64_t v10 = llvm::raw_ostream::write(v10, "= ", 2uLL);
  }
  uint64_t v12 = llvm::raw_ostream::operator<<(v10, a3, a4);
  if (a4 >= 8) {
    size_t v13 = 0;
  }
  else {
    size_t v13 = (8 - a4);
  }
  size_t v14 = (llvm::raw_ostream *)llvm::outs(v12);
  int v15 = llvm::raw_ostream::indent(v14, v13);
  uint64_t v16 = *((void *)v15 + 4);
  if ((unint64_t)(*((void *)v15 + 3) - v16) > 0xA)
  {
    *(_DWORD *)(v16 + 7) = 540701804;
    *(void *)uint64_t v16 = *(void *)" (default: ";
    *((void *)v15 + 4) += 11;
  }
  else
  {
    int v15 = llvm::raw_ostream::write(v15, " (default: ", 0xBuLL);
  }
  int v17 = *(unsigned __int8 *)(a5 + 32);
  int v18 = (llvm::raw_ostream *)llvm::outs(v15);
  if (v17)
  {
    uint64_t v21 = *(const char **)(a5 + 8);
    uint64_t v20 = a5 + 8;
    uint64_t v19 = v21;
    int v22 = *(char *)(v20 + 23);
    if (v22 >= 0) {
      uint64_t v23 = (const char *)v20;
    }
    else {
      uint64_t v23 = v19;
    }
    if (v22 >= 0) {
      size_t v24 = *(unsigned __int8 *)(v20 + 23);
    }
    else {
      size_t v24 = *(void *)(v20 + 8);
    }
    goto LABEL_19;
  }
  uint64_t v25 = *((void *)v18 + 4);
  if ((unint64_t)(*((void *)v18 + 3) - v25) <= 0xB)
  {
    uint64_t v23 = "*no default*";
    size_t v24 = 12;
LABEL_19:
    int v18 = llvm::raw_ostream::write(v18, v23, v24);
    goto LABEL_21;
  }
  *(_DWORD *)(v25 + 8) = 712273013;
  *(void *)uint64_t v25 = *(void *)"*no default*";
  *((void *)v18 + 4) += 12;
LABEL_21:
  uint64_t result = (llvm::raw_ostream *)llvm::outs(v18);
  uint64_t v27 = (_WORD *)*((void *)result + 4);
  if (*((void *)result + 3) - (void)v27 > 1uLL)
  {
    *uint64_t v27 = 2601;
    *((void *)result + 4) += 2;
  }
  else
  {
    return llvm::raw_ostream::write(result, ")\n", 2uLL);
  }
  return result;
}

double llvm::cl::basic_parser_impl::printOptionNoValue(llvm::cl::basic_parser_impl *this, const llvm::cl::Option *a2, int a3)
{
  uint64_t v3 = llvm::cl::basic_parser_impl::printOptionName(this, a2, a3);
  unint64_t v4 = (llvm::raw_ostream *)llvm::outs(v3);
  unint64_t v5 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 0x1DuLL)
  {
    qmemcpy(v5, "= *cannot print option value*\n", 30);
    double result = *(double *)"t option value*\n";
    *((void *)v4 + 4) += 30;
  }
  else
  {
    llvm::raw_ostream::write(v4, "= *cannot print option value*\n", 0x1EuLL);
  }
  return result;
}

uint64_t llvm::cl::Option::getValueExpectedFlagDefault(llvm::cl::Option *this)
{
  return 1;
}

BOOL llvm::cl::OptionValueCopy<llvm::cl::BOOLOrDefault>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t llvm::cl::OptionValueCopy<std::string>::compare(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32)) {
    return llvm::cl::OptionValueCopy<std::string>::compare(a1, (unsigned __int8 *)(a2 + 8));
  }
  else {
    return 0;
  }
}

void llvm::cl::parser<BOOL>::~parser()
{
}

uint64_t llvm::cl::parser<BOOL>::getValueName()
{
  return 0;
}

void llvm::cl::parser<llvm::cl::BOOLOrDefault>::~parser()
{
}

uint64_t llvm::cl::parser<llvm::cl::BOOLOrDefault>::getValueName()
{
  return 0;
}

void llvm::cl::parser<int>::~parser()
{
}

const char *llvm::cl::parser<int>::getValueName()
{
  return "int";
}

void llvm::cl::parser<unsigned int>::~parser()
{
}

const char *llvm::cl::parser<unsigned int>::getValueName()
{
  return "uint";
}

void llvm::cl::parser<unsigned long long>::~parser()
{
}

const char *llvm::cl::parser<unsigned long long>::getValueName()
{
  return "ulong";
}

void llvm::cl::parser<double>::~parser()
{
}

const char *llvm::cl::parser<double>::getValueName()
{
  return "number";
}

void llvm::cl::parser<float>::~parser()
{
}

const char *llvm::cl::parser<float>::getValueName()
{
  return "number";
}

void llvm::cl::parser<std::string>::~parser()
{
}

const char *llvm::cl::parser<std::string>::getValueName()
{
  return "string";
}

void llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt(llvm::cl::Option *a1)
{
  *(void *)a1 = &unk_270DBC7D8;
  std::__function::__value_func<void ()(unsigned int const&)>::~__value_func[abi:nn180100]((void *)a1 + 20);
  llvm::cl::Option::~Option(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270DBC7D8;
  std::__function::__value_func<void ()(unsigned int const&)>::~__value_func[abi:nn180100]((void *)a1 + 20);
  llvm::cl::Option::~Option(a1);
  JUMPOUT(0x263E500B0);
}

void llvm::cl::opt<int,false,llvm::cl::parser<int>>::~opt(llvm::cl::Option *a1)
{
  *(void *)a1 = &unk_270DBC840;
  std::__function::__value_func<void ()(int const&)>::~__value_func[abi:nn180100]((void *)a1 + 20);
  llvm::cl::Option::~Option(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270DBC840;
  std::__function::__value_func<void ()(int const&)>::~__value_func[abi:nn180100]((void *)a1 + 20);
  llvm::cl::Option::~Option(a1);
  JUMPOUT(0x263E500B0);
}

void llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt(uint64_t a1)
{
  *(void *)a1 = &unk_270DBC8A8;
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:nn180100]((void *)(a1 + 200));
  *(void *)(a1 + 152) = &unk_270DBC9E0;
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  llvm::cl::Option::~Option((llvm::cl::Option *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270DBC8A8;
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:nn180100]((void *)(a1 + 200));
  *(void *)(a1 + 152) = &unk_270DBC9E0;
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  llvm::cl::Option::~Option((llvm::cl::Option *)a1);
  JUMPOUT(0x263E500B0);
}

void llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt(llvm::cl::Option *a1)
{
  *(void *)a1 = &unk_270DBC910;
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:nn180100]((void *)a1 + 20);
  llvm::cl::Option::~Option(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270DBC910;
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:nn180100]((void *)a1 + 20);
  llvm::cl::Option::~Option(a1);
  JUMPOUT(0x263E500B0);
}

void anonymous namespace'::CommandLineParser::addLiteralOption(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5)
{
  if (!*(void *)(a2 + 24))
  {
    unint64_t v22 = a2;
    uint64_t v10 = llvm::StringMap<llvm::cl::Option *,llvm::MallocAllocator>::try_emplace<llvm::cl::Option *>((llvm::StringMapImpl *)(a3 + 128), a4, a5, &v22);
    if ((v10 & 1) == 0)
    {
      int v18 = (llvm::raw_ostream *)llvm::errs((llvm *)v10);
      uint64_t v19 = llvm::raw_ostream::operator<<(v18, (const char *)a1);
      uint64_t v20 = llvm::raw_ostream::operator<<(v19, ": CommandLine Error: Option '");
      uint64_t v21 = llvm::raw_ostream::operator<<(v20, a4, a5);
      llvm::raw_ostream::operator<<(v21, "' registered more than once!\n");
      llvm::report_fatal_error((llvm *)"inconsistency in registered CommandLine options", (const llvm::Twine *)1);
    }
    if (!atomic_load_explicit(qword_26B417698, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_26B417698, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
    }
    if (qword_26B417698[0] == a3)
    {
      uint64_t v11 = *(void *)(a1 + 280);
      uint64_t v12 = 288;
      if (v11 == *(void *)(a1 + 272)) {
        uint64_t v12 = 292;
      }
      uint64_t v13 = *(unsigned int *)(a1 + v12);
      if (v13)
      {
        uint64_t v14 = 8 * v13;
        for (long long i = *(uint64_t **)(a1 + 280); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
        {
          v14 -= 8;
          if (!v14) {
            return;
          }
        }
      }
      else
      {
        long long i = *(uint64_t **)(a1 + 280);
      }
      uint64_t v16 = (uint64_t *)(v11 + 8 * v13);
      if (i != v16)
      {
        uint64_t v17 = *i;
LABEL_17:
        if (v17 != a3) {
        while (++i != v16)
        }
        {
          uint64_t v17 = *i;
          if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
          {
            if (i != v16) {
              goto LABEL_17;
            }
            return;
          }
        }
      }
    }
  }
}

uint64_t llvm::StringMap<llvm::cl::Option *,llvm::MallocAllocator>::try_emplace<llvm::cl::Option *>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3, unint64_t *a4)
{
  unsigned int v8 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = v8;
  uint64_t v11 = *(void *)(*(void *)a1 + 8 * v8);
  if (v11 == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v11)
  {
    return 0;
  }
  uint64_t v12 = operator new(a3 + 17, (std::align_val_t)8uLL);
  uint64_t v13 = v12;
  uint64_t v14 = (char *)(v12 + 2);
  if (a3) {
    memcpy(v12 + 2, a2, a3);
  }
  v14[a3] = 0;
  unint64_t v15 = *a4;
  unint64_t *v13 = a3;
  v13[1] = v15;
  *(void *)(v9 + 8 * v10) = v13;
  ++*((_DWORD *)a1 + 3);
  for (long long i = (void *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v10));
        !*i || *i == -8;
  return 1;
}

void anonymous namespace'::CommandLineParser::addOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  unint64_t v6 = *(void *)(a2 + 24);
  if (!v6) {
    goto LABEL_14;
  }
  if ((*(_WORD *)(a2 + 10) & 0x2000) != 0)
  {
    int Key = llvm::StringMapImpl::FindKey((uint64_t *)(a3 + 128), *(uint64_t **)(a2 + 16), v6);
    if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a3 + 136)) {
      return;
    }
  }
  long long v28 = *(_OWORD *)(a2 + 16);
  uint64_t v29 = a2;
  a1 = llvm::StringMap<llvm::cl::Option *,llvm::MallocAllocator>::try_emplace<llvm::cl::Option *>((llvm::StringMapImpl *)(a3 + 128), (uint64_t *)v28, *((unint64_t *)&v28 + 1), (unint64_t *)&v29);
  if (a1)
  {
LABEL_14:
    int v14 = 0;
  }
  else
  {
    unsigned int v8 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    int v9 = *(char *)(v5 + 23);
    if (v9 >= 0) {
      uint64_t v10 = (const char *)v5;
    }
    else {
      uint64_t v10 = *(const char **)v5;
    }
    if (v9 >= 0) {
      size_t v11 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      size_t v11 = *(void *)(v5 + 8);
    }
    uint64_t v12 = llvm::raw_ostream::write(v8, v10, v11);
    uint64_t v13 = (void *)*((void *)v12 + 4);
    if (*((void *)v12 + 3) - (void)v13 > 0x1CuLL)
    {
      qmemcpy(v13, ": CommandLine Error: Option '", 29);
      *((void *)v12 + 4) += 29;
    }
    else
    {
      uint64_t v12 = llvm::raw_ostream::write(v12, ": CommandLine Error: Option '", 0x1DuLL);
    }
    a1 = (uint64_t)llvm::raw_ostream::operator<<(v12, *(const void **)(a2 + 16), *(void *)(a2 + 24));
    unint64_t v15 = *(void **)(a1 + 32);
    if (*(void *)(a1 + 24) - (void)v15 > 0x1CuLL)
    {
      qmemcpy(v15, "' registered more than once!\n", 29);
      *(void *)(a1 + 32) += 29;
    }
    else
    {
      a1 = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)a1, "' registered more than once!\n", 0x1DuLL);
    }
    int v14 = 1;
  }
  __int16 v16 = *(_WORD *)(a2 + 10);
  if ((v16 & 0x180) == 0x80)
  {
    uint64_t v17 = (unsigned int *)(a3 + 32);
    goto LABEL_28;
  }
  if ((*(_WORD *)(a2 + 10) & 0x800) != 0)
  {
    uint64_t v17 = (unsigned int *)(a3 + 80);
LABEL_28:
    llvm::SmallVectorTemplateBase<void *,true>::push_back(v17, a2);
    if ((v14 & 1) == 0) {
      goto LABEL_29;
    }
LABEL_52:
    llvm::report_fatal_error((llvm *)"inconsistency in registered CommandLine options", (const llvm::Twine *)1);
  }
  if ((v16 & 7) == 4)
  {
    if (*(void *)(a3 + 152))
    {
      uint64_t v26 = "Cannot specify more than one option with cl::ConsumeAfter!";
      __int16 v27 = 259;
      uint64_t v25 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
      llvm::cl::Option::error(a2, (llvm::Twine *)&v26, 0, 0, v25);
      *(void *)(a3 + 152) = a2;
    }
    else
    {
      *(void *)(a3 + 152) = a2;
      if ((v14 & 1) == 0) {
        goto LABEL_29;
      }
    }
    goto LABEL_52;
  }
  if (v14) {
    goto LABEL_52;
  }
LABEL_29:
  if (!atomic_load_explicit(qword_26B417698, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_26B417698, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  }
  if (qword_26B417698[0] == a3)
  {
    uint64_t v18 = *(void *)(v5 + 280);
    uint64_t v19 = 288;
    if (v18 == *(void *)(v5 + 272)) {
      uint64_t v19 = 292;
    }
    uint64_t v20 = *(unsigned int *)(v5 + v19);
    if (v20)
    {
      uint64_t v21 = 8 * v20;
      for (long long i = *(uint64_t **)(v5 + 280); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
      {
        v21 -= 8;
        if (!v21) {
          return;
        }
      }
    }
    else
    {
      long long i = *(uint64_t **)(v5 + 280);
    }
    uint64_t v23 = (uint64_t *)(v18 + 8 * v20);
    if (i != v23)
    {
      uint64_t v24 = *i;
LABEL_43:
      if (v24 != a3) {
      while (++i != v23)
      }
      {
        uint64_t v24 = *i;
        if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
        {
          if (i != v23) {
            goto LABEL_43;
          }
          return;
        }
      }
    }
  }
}

const void **llvm::SmallPtrSetImplBase::find_imp(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  unint64_t v4 = (const void **)*((void *)this + 1);
  if (v4 == *(const void ***)this)
  {
    uint64_t v6 = *((unsigned int *)this + 5);
    double result = &v4[v6];
    if (v6)
    {
      uint64_t v7 = 8 * v6;
      while (*v4 != a2)
      {
        ++v4;
        v7 -= 8;
        if (!v7) {
          return result;
        }
      }
      return v4;
    }
  }
  else
  {
    double result = llvm::SmallPtrSetImplBase::FindBucketFor(this, a2);
    if (*result != a2) {
      return &v4[*((unsigned int *)this + 4)];
    }
  }
  return result;
}

uint64_t anonymous namespace'::CommandLineParser::updateArgStr(const char *a1, unint64_t a2, uint64_t *a3, unint64_t a4, unsigned int *a5)
{
  unsigned int v8 = (uint64_t *)(a5 + 32);
  unint64_t v16 = a2;
  uint64_t v9 = llvm::StringMap<llvm::cl::Option *,llvm::MallocAllocator>::try_emplace<llvm::cl::Option *>((llvm::StringMapImpl *)(a5 + 32), a3, a4, &v16);
  if ((v9 & 1) == 0)
  {
    uint64_t v12 = (llvm::raw_ostream *)llvm::errs((llvm *)v9);
    uint64_t v13 = llvm::raw_ostream::operator<<(v12, a1);
    int v14 = llvm::raw_ostream::operator<<(v13, ": CommandLine Error: Option '");
    unint64_t v15 = llvm::raw_ostream::operator<<(v14, *(const void **)(a2 + 16), *(void *)(a2 + 24));
    llvm::raw_ostream::operator<<(v15, "' registered more than once!\n");
    llvm::report_fatal_error((llvm *)"inconsistency in registered CommandLine options", (const llvm::Twine *)1);
  }
  uint64_t result = llvm::StringMapImpl::FindKey(v8, *(uint64_t **)(a2 + 16), *(void *)(a2 + 24));
  if (result != -1 && (int)result != (unint64_t)a5[34])
  {
    size_t v11 = *(unint64_t **)(*v8 + 8 * (int)result);
    llvm::StringMapImpl::RemoveKey((uint64_t)v8, (uint64_t *)((char *)v11 + a5[37]), *v11);
    JUMPOUT(0x263E500A0);
  }
  return result;
}

const void **llvm::SmallPtrSetImplBase::insert_imp(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 != *(void *)this) {
    return llvm::SmallPtrSetImplBase::insert_imp_big(this, a2);
  }
  uint64_t v5 = *((unsigned int *)this + 5);
  if (!v5)
  {
LABEL_12:
    if (v5 < *((_DWORD *)this + 4))
    {
      *((_DWORD *)this + 5) = v5 + 1;
      *(void *)(v2 + 8 * v5) = a2;
      return (const void **)(*(void *)this + 8 * v5);
    }
    return llvm::SmallPtrSetImplBase::insert_imp_big(this, a2);
  }
  uint64_t v6 = 0;
  uint64_t v7 = 8 * v5;
  uint64_t v3 = (void *)*((void *)this + 1);
  while ((const void *)*v3 != a2)
  {
    if (*v3 == -2) {
      uint64_t v6 = v3;
    }
    ++v3;
    v7 -= 8;
    if (!v7)
    {
      if (!v6) {
        goto LABEL_12;
      }
      *uint64_t v6 = a2;
      --*((_DWORD *)this + 6);
      return (const void **)v6;
    }
  }
  return (const void **)v3;
}

const void **llvm::SmallPtrSetImpl<llvm::cl::SubCommand *>::insert(uint64_t a1, llvm::SmallPtrSetImplBase *this, void *a3)
{
  uint64_t result = llvm::SmallPtrSetImplBase::insert_imp(this, a3);
  uint64_t v7 = *((void *)this + 1);
  uint64_t v8 = 16;
  if (v7 == *(void *)this) {
    uint64_t v8 = 20;
  }
  uint64_t v9 = (const void **)(v7 + 8 * *(unsigned int *)((char *)this + v8));
  if (v9 != result)
  {
    while ((unint64_t)*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (++result == v9)
      {
        uint64_t result = v9;
        break;
      }
    }
  }
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v6;
  return result;
}

BOOL llvm::SmallPtrSetImplBase::erase_imp(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  imp = llvm::SmallPtrSetImplBase::find_imp(this, a2);
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = 16;
  if (v4 == *(void *)this) {
    uint64_t v5 = 20;
  }
  char v6 = (const void **)(v4 + 8 * *(unsigned int *)((char *)this + v5));
  if (imp != v6)
  {
    *imp = (const void *)-2;
    ++*((_DWORD *)this + 6);
  }
  return imp != v6;
}

uint64_t parseBackslash(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = 0;
  uint64_t v7 = a2 - 1;
  unsigned int v8 = a2 - a3;
  do
  {
    if (!(a3 - a2 + 1 + v6)) {
      goto LABEL_8;
    }
    int v9 = *(unsigned __int8 *)(a1 + a3 + 1 + v6++);
  }
  while (v9 == 92);
  if (v9 != 34)
  {
    uint64_t v7 = a3 + v6 - 1;
    unsigned int v8 = v6;
LABEL_8:
    llvm::SmallVectorImpl<char>::append(a4, v8, 92);
    return v7;
  }
  llvm::SmallVectorImpl<char>::append(a4, v6 >> 1, 92);
  uint64_t v7 = a3 + v6;
  if (v6) {
    llvm::SmallVectorTemplateBase<char,true>::push_back(a4, 34);
  }
  else {
    --v7;
  }
  return v7;
}

__n128 llvm::StringRef::split@<Q0>(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7 = llvm::StringRef::find(a1, a2, a3, 0);
  if (v7 == -1)
  {
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    __n128 result = *(__n128 *)a1;
    *(_OWORD *)a4 = *(_OWORD *)a1;
  }
  else
  {
    uint64_t v10 = *a1;
    unint64_t v9 = a1[1];
    if (v7 >= v9) {
      unint64_t v11 = a1[1];
    }
    else {
      unint64_t v11 = v7;
    }
    unint64_t v12 = v7 + a3;
    if (v9 < v7 + a3) {
      unint64_t v12 = a1[1];
    }
    *(void *)a4 = v10;
    *(void *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = v10 + v12;
    *(void *)(a4 + 24) = v9 - v12;
  }
  return result;
}

uint64_t llvm::StringRef::compare(uint64_t a1, const void *a2, size_t a3)
{
  size_t v3 = a3;
  size_t v4 = *(void *)(a1 + 8);
  if (a3 >= v4) {
    a3 = *(void *)(a1 + 8);
  }
  if (a3)
  {
    int v5 = memcmp(*(const void **)a1, a2, a3);
    if (v5) {
      return (v5 >> 31) | 1u;
    }
  }
  if (v4 < v3) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = 1;
  }
  if (v4 == v3) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t llvm::cl::Option::Option(uint64_t a1, char a2, char a3)
{
  *(void *)a1 = &unk_270DBC5B0;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) = a2 & 7 | (32 * (a3 & 3)) | *(_WORD *)(a1 + 10) & 0x8000;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 64) = a1 + 80;
  size_t v4 = (unsigned int *)(a1 + 64);
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  llvm::cl::getGeneralCategory((llvm::cl *)a1);
  llvm::SmallVectorTemplateBase<void *,true>::push_back(v4, (uint64_t)&llvm::cl::getGeneralCategory(void)::GeneralCategory);
  return a1;
}

void llvm::cl::Option::~Option(llvm::cl::Option *this)
{
  *(void *)this = &unk_270DBC5B0;
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2 != *((void **)this + 11)) {
    free(v2);
  }
  size_t v3 = (char *)*((void *)this + 8);
  if (v3 != (char *)this + 80) {
    free(v3);
  }
}

void *std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL llvm::cl::OptionValueCopy<BOOL>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 9) && *(unsigned char *)(a1 + 9) && *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8);
}

void std::__function::__func<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_270DBC998;
  return result;
}

void std::__function::__func<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DBC998;
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return llvm::SmallPtrSetImplBase::clear(v0);
}

void *llvm::SmallPtrSetImplBase::clear(llvm::SmallPtrSetImplBase *this)
{
  __n128 result = (void *)*((void *)this + 1);
  if (result == *(void **)this) {
    goto LABEL_8;
  }
  uint64_t v3 = *((unsigned int *)this + 4);
  if (v3 < 0x21 || 4 * (*((_DWORD *)this + 5) - *((_DWORD *)this + 6)) >= v3)
  {
    __n128 result = memset(result, 255, 8 * v3);
LABEL_8:
    *((_DWORD *)this + 5) = 0;
    *((_DWORD *)this + 6) = 0;
    return result;
  }
  return llvm::SmallPtrSetImplBase::shrink_and_clear((void **)this);
}

void *std::__function::__value_func<void ()(unsigned int const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(int const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL llvm::cl::OptionValueCopy<unsigned int>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

BOOL llvm::cl::OptionValueCopy<int>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t std::__function::__value_func<void ()(int const&)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(int const&)>::swap[abi:nn180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    size_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(BOOL const&)>::swap[abi:nn180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    size_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void llvm::object_creator<anonymous namespace'::CommandLineParser>::call()
{
}

uint64_t llvm::object_deleter<anonymous namespace'::CommandLineParser>::call(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void **)(result + 280);
    if (v2 != *(void **)(v1 + 272)) {
      free(v2);
    }
    uint64_t v3 = *(void **)(v1 + 120);
    if (v3 != *(void **)(v1 + 112)) {
      free(v3);
    }
    size_t v4 = *(void **)(v1 + 64);
    if (v4 != (void *)(v1 + 80)) {
      free(v4);
    }
    int v5 = *(void **)(v1 + 40);
    if (v5)
    {
      *(void *)(v1 + 48) = v5;
      operator delete(v5);
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x263E500B0);
  }
  return result;
}

void llvm::object_creator<llvm::cl::SubCommand>::call()
{
}

uint64_t llvm::object_deleter<llvm::cl::SubCommand>::call(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(_DWORD *)(result + 140))
    {
      uint64_t v2 = *(unsigned int *)(result + 136);
      if (v2)
      {
        uint64_t v3 = 0;
        uint64_t v4 = 8 * v2;
        do
        {
          uint64_t v5 = *(void *)(*(void *)(v1 + 128) + v3);
          if (v5 != -8 && v5 != 0) {
            MEMORY[0x263E500A0]();
          }
          v3 += 8;
        }
        while (v4 != v3);
      }
    }
    free(*(void **)(v1 + 128));
    unsigned int v7 = *(void **)(v1 + 80);
    if (v7 != (void *)(v1 + 96)) {
      free(v7);
    }
    unsigned int v8 = *(void **)(v1 + 32);
    if (v8 != (void *)(v1 + 48)) {
      free(v8);
    }
    JUMPOUT(0x263E500B0);
  }
  return result;
}

uint64_t llvm::ConvertUTF32toUTF8(unsigned int **a1, unint64_t a2, uint64_t *a3, unint64_t a4, int a5)
{
  uint64_t v5 = *a1;
  unint64_t v6 = *a3;
  if ((unint64_t)*a1 >= a2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    unsigned int v8 = *a1;
    while (1)
    {
      unsigned int v10 = *v5++;
      unsigned int v9 = v10;
      if (!a5 && (v9 & 0xFFFFF800) == 0xD800)
      {
        uint64_t v7 = 3;
        goto LABEL_41;
      }
      if (v9 >= 0x110000) {
        int v11 = 65533;
      }
      else {
        int v11 = v9;
      }
      if (v9 >= 0x110000) {
        __int16 v12 = 3;
      }
      else {
        __int16 v12 = 4;
      }
      if (v9 >= 0x110000) {
        unsigned int v13 = 3;
      }
      else {
        unsigned int v13 = v7;
      }
      if (v9 < 0x10000)
      {
        int v11 = v9;
        __int16 v12 = 3;
        unsigned int v13 = v7;
      }
      if (v9 >= 0x800)
      {
        __int16 v14 = v12;
      }
      else
      {
        int v11 = v9;
        __int16 v14 = 2;
      }
      if (v9 < 0x800) {
        unsigned int v13 = v7;
      }
      unsigned int v15 = v9 >= 0x80 ? v11 : v9;
      unsigned __int16 v16 = v9 >= 0x80 ? v14 : 1;
      uint64_t v7 = v9 >= 0x80 ? v13 : v7;
      unint64_t v17 = v6 + v16;
      if (v17 > a4) {
        break;
      }
      switch(v16)
      {
        case 1u:
          goto LABEL_35;
        case 2u:
          goto LABEL_34;
        case 3u:
          goto LABEL_33;
        case 4u:
          *(unsigned char *)--unint64_t v17 = v15 & 0x3F | 0x80;
          v15 >>= 6;
LABEL_33:
          *(unsigned char *)--unint64_t v17 = v15 & 0x3F | 0x80;
          v15 >>= 6;
LABEL_34:
          *(unsigned char *)--unint64_t v17 = v15 & 0x3F | 0x80;
          v15 >>= 6;
LABEL_35:
          *(unsigned char *)--unint64_t v17 = llvm::firstByteMark[v16] | v15;
          break;
        default:
          break;
      }
      unint64_t v6 = v17 + v16;
      unsigned int v8 = v5;
      if ((unint64_t)v5 >= a2) {
        goto LABEL_42;
      }
    }
    uint64_t v7 = 2;
LABEL_41:
    uint64_t v5 = v8;
  }
LABEL_42:
  *a1 = v5;
  *a3 = v6;
  return v7;
}

BOOL llvm::isLegalUTF8(llvm *this, const unsigned __int8 *a2)
{
  uint64_t v2 = (char *)this + (int)a2;
  switch((int)a2)
  {
    case 1:
      unsigned int v3 = *(unsigned __int8 *)this;
      goto LABEL_3;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      int v5 = *--v2;
      if (v5 > -65) {
        return 0;
      }
LABEL_6:
      int v6 = *--v2;
      if (v6 > -65) {
        return 0;
      }
LABEL_7:
      int v7 = *(v2 - 1);
      if (v7 > -65) {
        return 0;
      }
      unsigned int v8 = v7;
      unsigned int v3 = *(unsigned __int8 *)this;
      if (v3 > 0xEF)
      {
        if (v3 == 240)
        {
          if (v8 >= 0x90)
          {
            unsigned int v3 = 240;
            return v3 < 0xF5;
          }
          return 0;
        }
        if (v3 == 244)
        {
          if (v8 <= 0x8F)
          {
            unsigned int v3 = 244;
            return v3 < 0xF5;
          }
          return 0;
        }
      }
      else
      {
        if (v3 == 224)
        {
          if (v8 >= 0xA0)
          {
            unsigned int v3 = 224;
            return v3 < 0xF5;
          }
          return 0;
        }
        if (v3 == 237)
        {
          if (v8 <= 0x9F)
          {
            unsigned int v3 = 237;
            return v3 < 0xF5;
          }
          return 0;
        }
      }
LABEL_3:
      if ((char)v3 >= -62) {
        return v3 < 0xF5;
      }
      return 0;
    default:
      return 0;
  }
}

BOOL llvm::isLegalUTF8String(llvm **this, const unsigned __int8 **a2, const unsigned __int8 *a3)
{
  unsigned int v3 = *this;
  if (*this == (llvm *)a2) {
    return 1;
  }
  while (1)
  {
    uint64_t v6 = llvm::trailingBytesForUTF8[*(unsigned __int8 *)v3] + 1;
    if ((char *)a2 - (char *)v3 < v6) {
      break;
    }
    BOOL result = llvm::isLegalUTF8(v3, (const unsigned __int8 *)(llvm::trailingBytesForUTF8[*(unsigned __int8 *)v3] + 1));
    if (!result) {
      return result;
    }
    unsigned int v3 = (llvm *)((char *)v3 + v6);
    *this = v3;
    if (v3 == (llvm *)a2) {
      return 1;
    }
  }
  return 0;
}

uint64_t llvm::ConvertUTF8toUTF32Impl(char **a1, char *a2, unsigned int **a3, unint64_t a4, int a5, int a6)
{
  uint64_t v6 = *a1;
  int v7 = *a3;
  if (*a1 >= a2)
  {
    uint64_t v10 = 0;
    goto LABEL_64;
  }
  uint64_t v10 = 0;
  if (a5) {
    BOOL v11 = a6 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  char v12 = !v11;
  while (1)
  {
    uint64_t v13 = *v6;
    if (a2 - v6 <= (unsigned __int16)llvm::trailingBytesForUTF8[v13])
    {
      if (v12)
      {
        uint64_t v10 = 1;
        goto LABEL_64;
      }
      goto LABEL_28;
    }
    if ((unint64_t)v7 >= a4)
    {
      uint64_t v10 = 2;
      goto LABEL_64;
    }
    uint64_t v14 = (unsigned __int16)llvm::trailingBytesForUTF8[v13];
    unsigned int v15 = (unsigned __int16)llvm::trailingBytesForUTF8[v13] + 1;
    if (llvm::isLegalUTF8((llvm *)v6, (const unsigned __int8 *)v15)) {
      break;
    }
    if (!a5) {
      goto LABEL_66;
    }
LABEL_28:
    if (v6 == a2)
    {
      uint64_t v26 = 0;
      goto LABEL_48;
    }
    if ((v13 + 62) < 0x1Eu || v6 + 1 == a2)
    {
LABEL_34:
      uint64_t v26 = 1;
      goto LABEL_48;
    }
    int v27 = v6[1];
    if (v13 == 224)
    {
      uint64_t v26 = 1;
      if ((v27 & 0xFFFFFFE0) == 0xFFFFFFA0) {
        uint64_t v26 = 2;
      }
      goto LABEL_48;
    }
    if ((v13 + 31) <= 0xBu) {
      goto LABEL_44;
    }
    if (v13 == 237)
    {
      BOOL v28 = v27 < -96;
      goto LABEL_45;
    }
    if ((v13 & 0xFE) == 0xEE)
    {
LABEL_44:
      BOOL v28 = v27 < -64;
LABEL_45:
      uint64_t v26 = 1;
LABEL_46:
      if (v28) {
        ++v26;
      }
      goto LABEL_48;
    }
    uint64_t v29 = v6 + 2;
    if (v13 == 240)
    {
      if ((v27 + 112) > 0x2F) {
        goto LABEL_34;
      }
    }
    else if ((v13 + 15) > 2u)
    {
      if (v13 != 244) {
        goto LABEL_34;
      }
      uint64_t v26 = 1;
      if (v27 > -113) {
        goto LABEL_48;
      }
    }
    else if (v27 > -65)
    {
      goto LABEL_34;
    }
    if (v29 != a2)
    {
      BOOL v28 = *v29 < -64;
      uint64_t v26 = 2;
      goto LABEL_46;
    }
    uint64_t v26 = 2;
LABEL_48:
    v6 += v26;
LABEL_49:
    uint64_t v10 = 3;
    unsigned int v23 = 65533;
LABEL_50:
    *v7++ = v23;
    if (v6 >= a2) {
      goto LABEL_64;
    }
  }
  int v16 = 0;
  int v17 = v14;
  switch((int)v14)
  {
    case 0:
      goto LABEL_17;
    case 1:
      goto LABEL_16;
    case 2:
      goto LABEL_15;
    case 3:
      goto LABEL_14;
    case 4:
      goto LABEL_13;
    case 5:
      int v16 = v13 << 6;
      int v18 = *++v6;
      LODWORD(v13) = v18;
LABEL_13:
      int v19 = *++v6;
      int v16 = (v16 + v13) << 6;
      LODWORD(v13) = v19;
LABEL_14:
      int v20 = *++v6;
      int v16 = (v16 + v13) << 6;
      LODWORD(v13) = v20;
LABEL_15:
      int v21 = *++v6;
      int v16 = (v16 + v13) << 6;
      LODWORD(v13) = v21;
LABEL_16:
      int v22 = *++v6;
      int v17 = (v16 + v13) << 6;
      LODWORD(v13) = v22;
LABEL_17:
      ++v6;
      int v16 = v17 + v13;
      break;
    default:
      break;
  }
  unsigned int v23 = v16 - llvm::offsetsFromUTF8[v14];
  if (HIWORD(v23) > 0x10u) {
    goto LABEL_49;
  }
  BOOL v24 = (v23 & 0xFFFFF800) == 55296;
  if ((v23 & 0xFFFFF800) == 0xD800) {
    unsigned int v23 = 65533;
  }
  if (a5 || !v24) {
    goto LABEL_50;
  }
  v6 -= v15;
LABEL_66:
  uint64_t v10 = 3;
LABEL_64:
  *a1 = v6;
  *a3 = v7;
  return v10;
}

void *llvm::SmallVectorTemplateBase<unsigned short,true>::push_back(void *result, __int16 a2)
{
  unsigned int v3 = result;
  uint64_t v4 = result[1];
  if ((unint64_t)(v4 + 1) > result[2])
  {
    BOOL result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v4 + 1, 2);
    uint64_t v4 = v3[1];
  }
  *(_WORD *)(*v3 + 2 * v4) = a2;
  ++v3[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(2 * a2);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(4 * a2);
}

BOOL llvm::DataExtractor::prepareRead(llvm::DataExtractor *this, unint64_t a2, uint64_t a3, llvm::Error *a4)
{
  uint64_t v6 = a3 + a2;
  if (__CFADD__(a3, a2))
  {
    BOOL v7 = 0;
    if (!a4) {
      return v7;
    }
  }
  else
  {
    BOOL v7 = *((void *)this + 1) > (unint64_t)(v6 - 1);
    if (!a4) {
      return v7;
    }
  }
  if (!v7)
  {
    unint64_t v8 = *((void *)this + 1);
    std::generic_category();
    unint64_t v9 = *((void *)this + 1);
    if (v8 < a2)
    {
      std::string __p = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      int v12 = 0;
      char v16 = 0;
      uint64_t v17 = 0;
      int v18 = 1;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v13 = 0;
      BOOL v11 = &unk_270DBD6E0;
      p_p = &__p;
      llvm::raw_ostream::SetUnbuffered(&v11);
      unsigned int v23 = &unk_270DBCA60;
      BOOL v24 = "offset 0x%llx is beyond the end of data at 0x%zx";
      unint64_t v25 = a2;
      unint64_t v26 = v9;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v11, (uint64_t)&v23);
      operator new();
    }
    std::string __p = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v12 = 0;
    char v16 = 0;
    uint64_t v17 = 0;
    int v18 = 1;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    BOOL v11 = &unk_270DBD6E0;
    p_p = &__p;
    llvm::raw_ostream::SetUnbuffered(&v11);
    unsigned int v23 = &unk_270DBCA40;
    BOOL v24 = "unexpected end of data at offset 0x%zx while reading [0x%llx, 0x%llx)";
    unint64_t v25 = v9;
    unint64_t v26 = a2;
    uint64_t v27 = v6;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v11, (uint64_t)&v23);
    operator new();
  }
  return v7;
}

uint64_t llvm::DataExtractor::getU<unsigned char>(llvm::DataExtractor *this, unint64_t *a2, llvm::Error *a3)
{
  if (a3 && *(void *)a3) {
    return 0;
  }
  unint64_t v7 = *a2;
  uint64_t result = llvm::DataExtractor::prepareRead(this, *a2, 1, a3);
  if (result)
  {
    uint64_t result = *(unsigned __int8 *)(*(void *)this + v7);
    ++*a2;
  }
  if (a3)
  {
    if (!*(void *)a3) {
      *(void *)a3 = 0;
    }
  }
  return result;
}

uint64_t llvm::DataExtractor::getU<unsigned int>(llvm::DataExtractor *this, unint64_t *a2, llvm::Error *a3)
{
  if (a3 && *(void *)a3) {
    return 0;
  }
  unint64_t v7 = *a2;
  uint64_t result = llvm::DataExtractor::prepareRead(this, *a2, 4, a3);
  if (result)
  {
    unsigned int v8 = *(_DWORD *)(*(void *)this + v7);
    unsigned int v9 = bswap32(v8);
    if (*((unsigned char *)this + 16) == 1) {
      uint64_t result = v8;
    }
    else {
      uint64_t result = v9;
    }
    *a2 += 4;
  }
  if (a3)
  {
    if (!*(void *)a3) {
      *(void *)a3 = 0;
    }
  }
  return result;
}

void *llvm::DataExtractor::getCStrRef(llvm::DataExtractor *this, unint64_t *a2, llvm::Error *a3)
{
  if (a3 && *(void *)a3) {
    return 0;
  }
  uint64_t v5 = *a2;
  unint64_t v6 = *((void *)this + 1);
  if (v6 <= *a2
    || ((uint64_t v7 = *(void *)this,
         unsigned int v8 = (void *)(*(void *)this + v5),
         unsigned int v9 = (char *)memchr(v8, 0, v6 - *a2),
         uint64_t v10 = &v9[-v7],
         v9)
      ? (BOOL v11 = v10 + 1 == 0)
      : (BOOL v11 = 1),
        v11))
  {
    if (a3)
    {
      std::generic_category();
      memset(__p, 0, sizeof(__p));
      int v14 = 0;
      char v18 = 0;
      uint64_t v19 = 0;
      int v20 = 1;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v15 = 0;
      uint64_t v13 = &unk_270DBD6E0;
      uint64_t v21 = __p;
      llvm::raw_ostream::SetUnbuffered(&v13);
      v23[0] = &unk_270DBCA80;
      v23[1] = "no null terminated string at offset 0x%llx";
      v23[2] = v5;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v13, (uint64_t)v23);
      operator new();
    }
    return 0;
  }
  *a2 = (unint64_t)(v10 + 1);
  if (a3 && !*(void *)a3) {
    *(void *)a3 = 0;
  }
  return v8;
}

uint64_t llvm::StringRef::trim(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t first_not_of = llvm::StringRef::find_first_not_of(a1, a2, a3, 0);
  uint64_t v8 = *a1;
  unint64_t v7 = a1[1];
  if (first_not_of >= v7) {
    unint64_t v9 = a1[1];
  }
  else {
    unint64_t v9 = first_not_of;
  }
  uint64_t v10 = v8 + v9;
  v12[0] = v8 + v9;
  v12[1] = v7 - v9;
  llvm::StringRef::find_last_not_of(v12, a2, a3, 0xFFFFFFFFFFFFFFFFLL);
  return v10;
}

uint64_t llvm::DataExtractor::getULEB128(llvm::DataExtractor *this, unint64_t *a2, llvm::Error *a3)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *((void *)this + 1);
  if (!a3 || !*(void *)a3)
  {
    uint64_t v6 = 0;
    uint64_t result = 0;
    unsigned int v8 = 0;
    uint64_t v9 = v4 + *a2;
    uint64_t v10 = v5 - *a2;
    BOOL v11 = "malformed uleb128, extends past end";
    while (v10 != v6)
    {
      char v12 = *(unsigned char *)(v9 + v6);
      uint64_t v13 = v12 & 0x7F;
      if (v8 >= 0x40 && (v12 & 0x7F) != 0 || (unint64_t)(v13 << v8) >> v8 != v13)
      {
        BOOL v11 = "uleb128 too big for uint64";
        break;
      }
      result += v13 << v8;
      v8 += 7;
      ++v6;
      if ((v12 & 0x80) == 0)
      {
        *a2 += v6;
        if (a3)
        {
          if (!*(void *)a3) {
            *(void *)a3 = 0;
          }
        }
        return result;
      }
    }
    if (a3)
    {
      std::generic_category();
      memset(__p, 0, sizeof(__p));
      int v16 = 0;
      char v20 = 0;
      uint64_t v21 = 0;
      int v22 = 1;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = 0;
      uint64_t v15 = &unk_270DBD6E0;
      unsigned int v23 = __p;
      llvm::raw_ostream::SetUnbuffered(&v15);
      uint64_t v14 = *a2;
      v25[0] = &unk_270DBCAA0;
      v25[1] = "unable to decode LEB128 at offset 0x%8.8llx: %s";
      long long v25[2] = v14;
      v25[3] = v11;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v15, (uint64_t)v25);
      operator new();
    }
  }
  return 0;
}

uint64_t llvm::format_object<unsigned long,unsigned long long,unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t llvm::format_object<unsigned long long,unsigned long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t llvm::format_object<unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t llvm::format_object<unsigned long long,char const*>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t *llvm::DebugCounter::instance(llvm::DebugCounter *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_1, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (_anonymous_namespace_::DebugCounterOwner *)__cxa_guard_acquire(&_MergedGlobals_1);
    if (v2)
    {
      __cxa_guard_release(&_MergedGlobals_1);
    }
  }
  return &qword_26B4176D0;
}

void *anonymous namespace'::DebugCounterOwner::DebugCounterOwner(_anonymous_namespace_::DebugCounterOwner *this)
{
  qword_26B4176D0 = 0;
  *(void *)algn_26B4176D8 = 0;
  dword_26B4176E0 = 0;
  qword_26B4176F8 = 0;
  qword_26B417700 = 0;
  qword_26B4176F0 = 0;
  qword_26B4176E8 = (uint64_t)&qword_26B4176F0;
  qword_26B417708 = 0;
  unk_26B417710 = 0;
  byte_26B417718 = 0;
  uint64_t v1 = llvm::cl::Option::Option((uint64_t)&qword_26B417720, 1, 0);
  byte_26B4177C0 = 0;
  xmmword_26B4177A0 = 0u;
  unk_26B4177B0 = 0u;
  qword_26B417720 = (uint64_t)&unk_270DBCB28;
  qword_26B4177D0 = 0;
  unk_26B4177D8 = 0;
  qword_26B4177C8 = 0;
  qword_26B4177E0 = (uint64_t)&unk_270DBC7A8;
  qword_26B4177E8 = (uint64_t)&unk_270DBCB90;
  qword_26B417800 = (uint64_t)&qword_26B4177E8;
  uint64_t v2 = (llvm *)llvm::cl::Option::setArgStr(v1, (uint64_t *)"debug-counter", 0xDuLL);
  qword_26B417740 = (uint64_t)"Comma separated list of debug counter skip and count";
  unk_26B417748 = 52;
  word_26B41772A = word_26B41772A & 0xFD9F | 0x220;
  if ((void)xmmword_26B4177A0)
  {
    unint64_t v7 = "cl::location(x) specified more than once!";
    __int16 v8 = 259;
    unsigned int v3 = (llvm::raw_ostream *)llvm::errs(v2);
    llvm::cl::Option::error((uint64_t)&qword_26B417720, (llvm::Twine *)&v7, 0, 0, v3);
  }
  else
  {
    *(void *)&xmmword_26B4177A0 = &qword_26B4176D0;
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B417720);
  qword_26B417720 = (uint64_t)&unk_270DBCAC0;
  uint64_t v4 = llvm::cl::Option::Option((uint64_t)&qword_26B417808, 0, 0);
  byte_26B417888 = 0;
  qword_26B417890 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B417898 = 0;
  qword_26B417808 = (uint64_t)&unk_270DBC910;
  qword_26B4178A0 = (uint64_t)&unk_270DBC658;
  qword_26B4178A8 = (uint64_t)&unk_270DBC998;
  qword_26B4178C0 = (uint64_t)&qword_26B4178A8;
  llvm::cl::Option::setArgStr(v4, (uint64_t *)"print-debug-counter", 0x13uLL);
  byte_26B417888 = 0;
  word_26B417898 = 256;
  word_26B417812 = word_26B417812 & 0xFF98 | 0x20;
  qword_26B417828 = (uint64_t)"Print out debug counter info after all counters accumulated";
  unk_26B417830 = 59;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B417808);
  return llvm::errs(v5);
}

void anonymous namespace'::DebugCounterOwner::~DebugCounterOwner(_anonymous_namespace_::DebugCounterOwner *this)
{
  uint64_t v2 = (_anonymous_namespace_::DebugCounterOwner *)((char *)this + 312);
  *((void *)this + 39) = &unk_270DBC910;
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:nn180100]((void *)this + 59);
  llvm::cl::Option::~Option(v2);
  *((void *)this + 10) = &unk_270DBCB28;
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:nn180100]((void *)this + 35);
  unsigned int v3 = (void *)*((void *)this + 31);
  if (v3)
  {
    *((void *)this + 32) = v3;
    operator delete(v3);
  }
  __int16 v8 = (void **)((char *)this + 216);
  std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](&v8);
  llvm::cl::Option::~Option((_anonymous_namespace_::DebugCounterOwner *)((char *)this + 80));
  __int16 v8 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v8);
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  uint64_t v4 = *((unsigned int *)this + 4);
  uint64_t v5 = *(void *)this;
  if (v4)
  {
    uint64_t v6 = v5 + 40;
    uint64_t v7 = v4 << 6;
    do
    {
      if (*(_DWORD *)(v6 - 40) <= 0xFFFFFFFD && *(char *)(v6 + 23) < 0) {
        operator delete(*(void **)v6);
      }
      v6 += 64;
      v7 -= 64;
    }
    while (v7);
    uint64_t v5 = *(void *)this;
  }
  MEMORY[0x263E500A0](v5, 8);
}

llvm::raw_ostream *llvm::DebugCounter::push_back(llvm::raw_ostream *result, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    size_t v2 = (size_t)a2[1];
  }
  if (v2)
  {
    uint64_t v5 = (uint64_t *)result;
    if (v3 >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *a2;
    }
    std::string __p = v6;
    size_t v46 = v2;
    LOBYTE(v52) = 61;
    llvm::StringRef::split((uint64_t *)&__p, (char *)&v52, 1uLL, (uint64_t)&__src);
    if (v51)
    {
      unint64_t v52 = 0;
      std::string __p = v50;
      size_t v46 = v51;
      uint64_t v9 = llvm::consumeSignedInteger((llvm *)&__p, 0, &v52, v8);
      if ((v9 & 1) == 0 && !v46)
      {
        if (v49 < 5)
        {
LABEL_20:
          uint64_t v17 = (llvm::raw_ostream *)llvm::errs((llvm *)v9);
          uint64_t v18 = *((void *)v17 + 4);
          if ((unint64_t)(*((void *)v17 + 3) - v18) > 0x13)
          {
            *(_DWORD *)(v18 + 16) = 540701295;
            *(_OWORD *)uint64_t v18 = *(_OWORD *)"DebugCounter Error: ";
            *((void *)v17 + 4) += 20;
          }
          else
          {
            uint64_t v17 = llvm::raw_ostream::write(v17, "DebugCounter Error: ", 0x14uLL);
          }
          uint64_t result = llvm::raw_ostream::operator<<(v17, __src, v49);
          uint64_t v31 = (void *)*((void *)result + 4);
          if (*((void *)result + 3) - (void)v31 <= 0x22uLL)
          {
            uint64_t v27 = " does not end with -skip or -count\n";
            size_t v28 = 35;
            return llvm::raw_ostream::write(result, v27, v28);
          }
          qmemcpy(v31, " does not end with -skip or -count\n", 35);
          uint64_t v29 = *((void *)result + 4) + 35;
          goto LABEL_45;
        }
        unint64_t v10 = v52;
        BOOL v11 = __src;
        char v12 = (char *)__src + v49;
        if (*(_DWORD *)((char *)__src + v49 - 5) != 1768649517 || *((char *)__src + v49 - 1) != 112)
        {
          if (v49 < 6) {
            goto LABEL_20;
          }
          int v14 = *(_DWORD *)(v12 - 6);
          int v15 = *((unsigned __int16 *)v12 - 1);
          if (v14 != 1970234157 || v15 != 29806) {
            goto LABEL_20;
          }
          if (v49 >= v49 - 6) {
            size_t v32 = v49 - 6;
          }
          else {
            size_t v32 = v49;
          }
          if (v32 <= 0x7FFFFFFFFFFFFFF7)
          {
            if (v32 >= 0x17)
            {
              uint64_t v39 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v32 | 7) != 0x17) {
                uint64_t v39 = v32 | 7;
              }
              uint64_t v40 = v39 + 1;
              p_p = operator new(v39 + 1);
              size_t v46 = v32;
              unint64_t v47 = v40 | 0x8000000000000000;
              std::string __p = p_p;
            }
            else
            {
              HIBYTE(v47) = v32;
              p_p = &__p;
              if (!v32)
              {
LABEL_76:
                *((unsigned char *)p_p + v32) = 0;
                uint64_t v36 = (llvm::DebugCounter *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::find<std::string>((uint64_t)(v5 + 3), (const void **)&__p);
                if (v5 + 4 == (uint64_t *)v36) {
                  int v41 = 0;
                }
                else {
                  int v41 = *((_DWORD *)v36 + 14);
                }
                if (SHIBYTE(v47) < 0) {
                  operator delete(__p);
                }
                LODWORD(v52) = v41;
                if (v41)
                {
                  llvm::DebugCounter::instance(v36);
                  byte_26B417718 = 1;
                  uint64_t result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::FindAndConstruct(v5, &v52);
                  *((void *)result + 3) = v10;
                  goto LABEL_83;
                }
                goto LABEL_84;
              }
            }
            memmove(p_p, v11, v32);
            goto LABEL_76;
          }
LABEL_85:
          abort();
        }
        if (v49 >= v49 - 5) {
          size_t v32 = v49 - 5;
        }
        else {
          size_t v32 = v49;
        }
        if (v32 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_85;
        }
        if (v32 >= 0x17)
        {
          uint64_t v34 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v32 | 7) != 0x17) {
            uint64_t v34 = v32 | 7;
          }
          uint64_t v35 = v34 + 1;
          unint64_t v33 = operator new(v34 + 1);
          size_t v46 = v32;
          unint64_t v47 = v35 | 0x8000000000000000;
          std::string __p = v33;
        }
        else
        {
          HIBYTE(v47) = v32;
          unint64_t v33 = &__p;
          if (!v32)
          {
LABEL_58:
            *((unsigned char *)v33 + v32) = 0;
            uint64_t v36 = (llvm::DebugCounter *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::find<std::string>((uint64_t)(v5 + 3), (const void **)&__p);
            if (v5 + 4 == (uint64_t *)v36) {
              int v37 = 0;
            }
            else {
              int v37 = *((_DWORD *)v36 + 14);
            }
            if (SHIBYTE(v47) < 0) {
              operator delete(__p);
            }
            LODWORD(v52) = v37;
            if (v37)
            {
              llvm::DebugCounter::instance(v36);
              byte_26B417718 = 1;
              uint64_t result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::FindAndConstruct(v5, &v52);
              *((void *)result + 2) = v10;
LABEL_83:
              *((unsigned char *)result + 32) = 1;
              return result;
            }
LABEL_84:
            unint64_t v42 = (llvm::raw_ostream *)llvm::errs(v36);
            int v43 = llvm::raw_ostream::operator<<(v42, "DebugCounter Error: ", 0x14uLL);
            unint64_t v44 = llvm::raw_ostream::operator<<(v43, v11, v32);
            return llvm::raw_ostream::operator<<(v44, " is not a registered counter\n", 0x1DuLL);
          }
        }
        memmove(v33, v11, v32);
        goto LABEL_58;
      }
      uint64_t v21 = (llvm::raw_ostream *)llvm::errs((llvm *)v9);
      uint64_t v22 = *((void *)v21 + 4);
      if ((unint64_t)(*((void *)v21 + 3) - v22) > 0x13)
      {
        *(_DWORD *)(v22 + 16) = 540701295;
        *(_OWORD *)uint64_t v22 = *(_OWORD *)"DebugCounter Error: ";
        *((void *)v21 + 4) += 20;
      }
      else
      {
        uint64_t v21 = llvm::raw_ostream::write(v21, "DebugCounter Error: ", 0x14uLL);
      }
      uint64_t result = llvm::raw_ostream::operator<<(v21, v50, v51);
      uint64_t v30 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v30) <= 0x10)
      {
        uint64_t v27 = " is not a number\n";
        size_t v28 = 17;
        return llvm::raw_ostream::write(result, v27, v28);
      }
      *(unsigned char *)(v30 + 16) = 10;
      *(_OWORD *)uint64_t v30 = *(_OWORD *)" is not a number\n";
      uint64_t v29 = *((void *)result + 4) + 17;
    }
    else
    {
      uint64_t v19 = (llvm::raw_ostream *)llvm::errs(v7);
      uint64_t v20 = *((void *)v19 + 4);
      if ((unint64_t)(*((void *)v19 + 3) - v20) > 0x13)
      {
        *(_DWORD *)(v20 + 16) = 540701295;
        *(_OWORD *)uint64_t v20 = *(_OWORD *)"DebugCounter Error: ";
        *((void *)v19 + 4) += 20;
      }
      else
      {
        uint64_t v19 = llvm::raw_ostream::write(v19, "DebugCounter Error: ", 0x14uLL);
      }
      int v23 = *((char *)a2 + 23);
      if (v23 >= 0) {
        BOOL v24 = (const char *)a2;
      }
      else {
        BOOL v24 = (const char *)*a2;
      }
      if (v23 >= 0) {
        size_t v25 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v25 = (size_t)a2[1];
      }
      uint64_t result = llvm::raw_ostream::write(v19, v24, v25);
      unint64_t v26 = (void *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v26 <= 0x19uLL)
      {
        uint64_t v27 = " does not have an = in it\n";
        size_t v28 = 26;
        return llvm::raw_ostream::write(result, v27, v28);
      }
      qmemcpy(v26, " does not have an = in it\n", 26);
      uint64_t v29 = *((void *)result + 4) + 26;
    }
LABEL_45:
    *((void *)result + 4) = v29;
  }
  return result;
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, int a2, int a3, int a4, void *a5, size_t a6)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v24 = 0;
  if (*(unsigned char *)(a1 + 160))
  {
    *(void *)(a1 + 176) = *(void *)(a1 + 168);
    *(unsigned char *)(a1 + 160) = 0;
  }
  uint64_t v8 = llvm::cl::parser<std::string>::parse((int)a1 + 192, a1, a3, a4, a5, a6, (uint64_t)__p);
  if ((v8 & 1) == 0)
  {
    llvm::DebugCounter::push_back(*(llvm::raw_ostream **)(a1 + 128), __p);
    unint64_t v9 = *(void *)(a1 + 184);
    *(_WORD *)(a1 + 12) = a2;
    unint64_t v10 = *(char **)(a1 + 176);
    if ((unint64_t)v10 >= v9)
    {
      char v12 = *(char **)(a1 + 168);
      uint64_t v13 = (v10 - v12) >> 2;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62) {
        goto LABEL_26;
      }
      uint64_t v15 = v9 - (void)v12;
      if (v15 >> 1 > v14) {
        unint64_t v14 = v15 >> 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        uint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(a1 + 184, v16);
        char v12 = *(char **)(a1 + 168);
        unint64_t v10 = *(char **)(a1 + 176);
      }
      else
      {
        uint64_t v17 = 0;
      }
      uint64_t v18 = &v17[4 * v13];
      uint64_t v19 = &v17[4 * v16];
      *(_DWORD *)uint64_t v18 = a2;
      BOOL v11 = v18 + 4;
      while (v10 != v12)
      {
        int v20 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v18 - 1) = v20;
        v18 -= 4;
      }
      *(void *)(a1 + 168) = v18;
      *(void *)(a1 + 176) = v11;
      *(void *)(a1 + 184) = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v10 = a2;
      BOOL v11 = v10 + 4;
    }
    *(void *)(a1 + 176) = v11;
    uint64_t v21 = *(void *)(a1 + 224);
    if (v21)
    {
      (*(void (**)(uint64_t, void **))(*(void *)v21 + 48))(v21, __p);
      goto LABEL_22;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_26:
    abort();
  }
LABEL_22:
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  return v8;
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

void anonymous namespace'::DebugCounterList::~DebugCounterList(_anonymous_namespace_::DebugCounterList *this)
{
  *(void *)this = &unk_270DBCB28;
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:nn180100]((void *)this + 25);
  size_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  int v3 = (void **)((char *)this + 136);
  std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](&v3);
  llvm::cl::Option::~Option(this);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_270DBCB28;
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:nn180100]((void *)this + 25);
  size_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  int v3 = (void **)((char *)this + 136);
  std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](&v3);
  llvm::cl::Option::~Option(this);
  MEMORY[0x263E500B0]();
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 192, a1);
}

void anonymous namespace'::DebugCounterList::printOptionInfo(_anonymous_namespace_::DebugCounterList *this, size_t a2)
{
  uint64_t v4 = (llvm::raw_ostream *)llvm::outs(this);
  uint64_t v5 = *((void *)v4 + 4);
  if ((unint64_t)(*((void *)v4 + 3) - v5) > 2)
  {
    *(unsigned char *)(v5 + 2) = 45;
    *(_WORD *)uint64_t v5 = 8224;
    *((void *)v4 + 4) += 3;
  }
  else
  {
    uint64_t v4 = llvm::raw_ostream::write(v4, "  -", 3uLL);
  }
  llvm::raw_ostream::operator<<(v4, *((const void **)this + 2), *((void *)this + 3));
  uint64_t v6 = llvm::cl::Option::printHelpStr(*((void *)this + 4), *((void *)this + 5), a2, *((void *)this + 3) + 6);
  llvm::DebugCounter::instance(v6);
  uint64_t v7 = (const void **)qword_26B417700;
  for (uint64_t i = qword_26B417708; v7 != (const void **)i; v7 += 3)
  {
    uint64_t v9 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::find<std::string>((uint64_t)&qword_26B4176E8, v7);
    if ((uint64_t *)v9 == &qword_26B4176F0) {
      int v10 = 0;
    }
    else {
      int v10 = *(_DWORD *)(v9 + 56);
    }
    int v35 = v10;
    uint64_t v11 = qword_26B417700;
    uint64_t v36 = 0;
    char v12 = (llvm *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::LookupBucketFor<unsigned int>(&qword_26B4176D0, &v35, &v36);
    if (v12)
    {
      long long v13 = *(_OWORD *)(v36 + 17);
      *(_OWORD *)unint64_t v33 = *(_OWORD *)(v36 + 8);
      *(_OWORD *)&v33[9] = v13;
      if (*(char *)(v36 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(v36 + 40), *(void *)(v36 + 48));
      }
      else
      {
        long long v14 = *(_OWORD *)(v36 + 40);
        v34.__r_.__value_.__r.__words[2] = *(void *)(v36 + 56);
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v14;
      }
    }
    else
    {
      *(_OWORD *)unint64_t v33 = 0u;
      *(_OWORD *)&v33[16] = 0xFFFFFFFFFFFFFFFFLL;
      memset(&v34, 0, sizeof(v34));
    }
    uint64_t v15 = v11 + 24 * (v10 - 1);
    if (*(char *)(v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v15, *(void *)(v15 + 8));
    }
    else
    {
      long long v16 = *(_OWORD *)v15;
      v31.__r_.__value_.__r.__words[2] = *(void *)(v15 + 16);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v16;
    }
    std::string __p = v34;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v17 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    }
    else {
      int v17 = v31.__r_.__value_.__r.__words[1];
    }
    uint64_t v18 = (llvm::raw_ostream *)llvm::outs(v12);
    uint64_t v19 = *((void *)v18 + 4);
    if ((unint64_t)(*((void *)v18 + 3) - v19) > 4)
    {
      *(unsigned char *)(v19 + 4) = 61;
      *(_DWORD *)uint64_t v19 = 538976288;
      *((void *)v18 + 4) += 5;
    }
    else
    {
      uint64_t v18 = llvm::raw_ostream::write(v18, "    =", 5uLL);
    }
    int v20 = a2 - v17;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v21 = &v31;
    }
    else {
      uint64_t v21 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v31.__r_.__value_.__l.__size_;
    }
    int v23 = llvm::raw_ostream::write(v18, (const char *)v21, size);
    uint64_t v24 = (llvm::raw_ostream *)llvm::outs(v23);
    size_t v25 = llvm::raw_ostream::indent(v24, (v20 - 8));
    uint64_t v26 = *((void *)v25 + 4);
    if ((unint64_t)(*((void *)v25 + 3) - v26) > 4)
    {
      *(unsigned char *)(v26 + 4) = 32;
      *(_DWORD *)uint64_t v26 = 538979616;
      *((void *)v25 + 4) += 5;
    }
    else
    {
      size_t v25 = llvm::raw_ostream::write(v25, " -   ", 5uLL);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v28 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v29 = llvm::raw_ostream::write(v25, (const char *)p_p, v28);
    uint64_t v30 = (unsigned char *)*((void *)v29 + 4);
    if ((unint64_t)v30 >= *((void *)v29 + 3))
    {
      llvm::raw_ostream::write(v29, 10);
    }
    else
    {
      *((void *)v29 + 4) = v30 + 1;
      unsigned char *v30 = 10;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
  }
}

llvm::raw_ostream *llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::setDefault(llvm::raw_ostream *result)
{
  *((void *)result + 22) = *((void *)result + 21);
  uint64_t v1 = *((void *)result + 17);
  uint64_t v2 = *((void *)result + 18);
  if (v1 != v2)
  {
    int v3 = result;
    do
    {
      uint64_t result = llvm::DebugCounter::push_back(*((llvm::raw_ostream **)v3 + 16), (void **)(v1 + 8));
      v1 += 40;
    }
    while (v1 != v2);
  }
  return result;
}

void llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::~list(uint64_t a1)
{
  *(void *)a1 = &unk_270DBCB28;
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:nn180100]((void *)(a1 + 200));
  uint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  int v3 = (void **)(a1 + 136);
  std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](&v3);
  llvm::cl::Option::~Option((llvm::cl::Option *)a1);
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::~list(uint64_t a1)
{
  *(void *)a1 = &unk_270DBCB28;
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:nn180100]((void *)(a1 + 200));
  uint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 136);
  std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](&v4);
  llvm::cl::Option::~Option((llvm::cl::Option *)a1);
  return MEMORY[0x263E500B0]();
}

llvm::raw_ostream *llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 192), a1, a2);
}

void std::__function::__func<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_270DBCB90;
  return result;
}

void std::__function::__func<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DBCB90;
}

void std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<llvm::cl::OptionValue<std::string>>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, *v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<llvm::cl::OptionValue<std::string>>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 40;
    uint64_t v6 = *(void *)(a1 + 8);
    do
    {
      *(void *)(v6 - 40) = &unk_270DBC9E0;
      v6 -= 40;
      if (*(char *)(v6 + 31) < 0) {
        operator delete(*(void **)(v4 - 32));
      }
      v5 -= 40;
      uint64_t v4 = v6;
    }
    while (v6 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::LookupBucketFor<unsigned int>(uint64_t *a1, _DWORD *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    unsigned int v5 = v3 - 1;
    uint64_t v6 = (37 * *a2) & (v3 - 1);
    uint64_t v7 = (_DWORD *)(*a1 + (v6 << 6));
    int v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -2;
        }
        if (v12) {
          int v10 = v7;
        }
        int v13 = v6 + v11++;
        uint64_t v6 = v13 & v5;
        uint64_t v7 = (_DWORD *)(v4 + (v6 << 6));
        int v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:nn180100](v5, (const void **)(v3 + 32), a2);
    int v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      int v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:nn180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

BOOL std::less<std::string>::operator()[abi:nn180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    int v8 = a3;
  }
  else {
    int v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::FindAndConstruct(uint64_t *a1, _DWORD *a2)
{
  size_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::LookupBucketFor<unsigned int>(a1, a2, &v7);
  inserted = v7;
  if ((v4 & 1) == 0)
  {
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::InsertIntoBucketImpl<unsigned int>((uint64_t)a1, (uint64_t)a2, a2, v7);
    _DWORD *inserted = *a2;
    *(_OWORD *)(inserted + 6) = 0u;
    *(_OWORD *)(inserted + 2) = 0u;
    *((void *)inserted + 3) = -1;
    *((void *)inserted + 6) = 0;
    *((void *)inserted + 7) = 0;
    *((void *)inserted + 5) = 0;
  }
  return inserted;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::grow(a1, v7);
  size_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_DWORD *llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::moveFromOldBuckets(a1, v4, v4 + (v3 << 6));
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = v10 << 6;
    do
    {
      *uint64_t result = -1;
      result += 16;
      v11 -= 64;
    }
    while (v11);
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(_DWORD **)a1;
    uint64_t v8 = v6 << 6;
    do
    {
      *int v7 = -1;
      v7 += 16;
      v8 -= 64;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      BOOL v12 = 0;
      llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::LookupBucketFor<unsigned int>((uint64_t *)a1, (_DWORD *)a2, &v12);
      size_t v9 = v12;
      *BOOL v12 = *(_DWORD *)a2;
      long long v10 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)((char *)v9 + 17) = *(_OWORD *)(a2 + 17);
      *(_OWORD *)(v9 + 2) = v10;
      long long v11 = *(_OWORD *)(a2 + 40);
      *((void *)v9 + 7) = *(void *)(a2 + 56);
      *(_OWORD *)(v9 + 10) = v11;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 40) = 0;
      ++*(_DWORD *)(a1 + 8);
      if (*(char *)(a2 + 63) < 0) {
        operator delete(*(void **)(a2 + 40));
      }
    }
    a2 += 64;
  }
}

uint64_t llvm::ELFAttributeParser::parseStringAttribute@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void *a6@<X8>)
{
  unint64_t ULEB128 = llvm::DataExtractor::getULEB128((llvm::DataExtractor *)(a1 + 16), a1 + 19, (llvm::Error *)(a1 + 20));
  uint64_t v13 = ULEB128;
  unint64_t v29 = ULEB128;
  if (ULEB128 >= a5)
  {
    llvm::ELFAttributeParser::printAttribute((uint64_t)a1, a3, ULEB128, (uint64_t)&str_1, 0);
    long long v16 = std::generic_category();
    int v17 = *a2;
    uint64_t v18 = "unknown ";
    if (*a2)
    {
      v22[0] = "unknown ";
      v22[2] = a2;
      __int16 v23 = 771;
      char v19 = 2;
    }
    else
    {
      v22[0] = "unknown ";
      __int16 v23 = 259;
      char v19 = 3;
    }
    if (v17) {
      uint64_t v18 = (const char *)v22;
    }
    v24[0] = v18;
    v24[2] = " value: ";
    char v25 = v19;
    char v26 = 3;
    v27[0] = v24;
    long long v27[2] = &v29;
    __int16 v28 = 3074;
    llvm::Twine::str((llvm::Twine *)v27, &v30);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v21 = &v30;
    }
    else {
      uint64_t v21 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    uint64_t v32 = 22;
    unint64_t v33 = v16;
    std::string v31 = v21;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>();
  }
  uint64_t v14 = *(void *)(a4 + 8 * ULEB128);
  if (v14) {
    size_t v15 = strlen(*(const char **)(a4 + 8 * ULEB128));
  }
  else {
    size_t v15 = 0;
  }
  uint64_t result = llvm::ELFAttributeParser::printAttribute((uint64_t)a1, a3, v13, v14, v15);
  *a6 = 0;
  return result;
}

uint64_t llvm::ELFAttributeParser::printAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v11 = (uint64_t *)(a1 + 24);
  unint64_t v12 = a2;
  unint64_t v13 = *(void *)(a1 + 32);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v5 = a2;
      if (v13 <= a2) {
        unint64_t v5 = a2 % v13;
      }
    }
    else
    {
      unint64_t v5 = (v13 - 1) & a2;
    }
    size_t v15 = *(uint64_t ***)(*v11 + 8 * v5);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v17 = i[1];
        if (v17 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            goto LABEL_40;
          }
        }
        else
        {
          if (v14.u32[0] > 1uLL)
          {
            if (v17 >= v13) {
              v17 %= v13;
            }
          }
          else
          {
            v17 &= v13 - 1;
          }
          if (v17 != v5) {
            break;
          }
        }
      }
    }
  }
  uint64_t v18 = operator new(0x18uLL);
  v18[1] = v12;
  *((_DWORD *)v18 + 4) = a2;
  *((_DWORD *)v18 + 5) = a3;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 48) + 1);
  float v20 = *(float *)(a1 + 56);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    BOOL v21 = 1;
    if (v13 >= 3) {
      BOOL v21 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v13);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__rehash<true>((uint64_t)v11, v24);
    unint64_t v13 = *(void *)(a1 + 32);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v13 <= v12) {
        unint64_t v5 = v12 % v13;
      }
      else {
        unint64_t v5 = v12;
      }
    }
    else
    {
      unint64_t v5 = (v13 - 1) & v12;
    }
  }
  uint64_t v25 = *v11;
  char v26 = *(void **)(*v11 + 8 * v5);
  if (v26)
  {
    *uint64_t v18 = *v26;
LABEL_38:
    *char v26 = v18;
    goto LABEL_39;
  }
  uint64_t v27 = *(void *)(a1 + 40);
  *uint64_t v18 = v27;
  *(void *)(a1 + 40) = v18;
  *(void *)(v25 + 8 * v5) = a1 + 40;
  if (v27)
  {
    unint64_t v28 = *(void *)(v27 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v28 >= v13) {
        v28 %= v13;
      }
    }
    else
    {
      v28 &= v13 - 1;
    }
    char v26 = (void *)(*v11 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 48);
LABEL_40:
  uint64_t result = *(void *)(a1 + 104);
  if (result)
  {
    uint64_t v30 = *(void *)(a1 + 120);
    if (v30)
    {
      uint64_t v31 = 24 * v30;
      uint64_t v32 = &str_2;
      uint64_t v33 = *(void *)(a1 + 112);
      while (*(_DWORD *)v33 != a2)
      {
        v33 += 24;
        v31 -= 24;
        if (!v31)
        {
          unint64_t v34 = 0;
          goto LABEL_52;
        }
      }
    }
    else
    {
      uint64_t v33 = *(void *)(a1 + 112);
    }
    if (v33 == *(void *)(a1 + 112) + 24 * v30)
    {
      unint64_t v34 = 0;
      uint64_t v32 = &str_2;
    }
    else
    {
      uint64_t v35 = *(void *)(v33 + 8);
      unint64_t v36 = *(void *)(v33 + 16);
      uint64_t v37 = 4;
      if (v36 < 4) {
        uint64_t v37 = v36;
      }
      uint64_t v32 = (void *)(v35 + v37);
      unint64_t v34 = v36 - v37;
    }
LABEL_52:
    uint64_t v38 = *(void *)(a1 + 104);
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)result + 224))(result, "Attribute", 9);
    (*(void (**)(void, const char *, uint64_t, uint64_t))(**(void **)(a1 + 104) + 24))(*(void *)(a1 + 104), "Tag", 3, a2);
    (*(void (**)(void, const char *, uint64_t, uint64_t))(**(void **)(a1 + 104) + 24))(*(void *)(a1 + 104), "Value", 5, a3);
    if (v34) {
      (*(void (**)(void, const char *, uint64_t, void *, unint64_t))(**(void **)(a1 + 104) + 208))(*(void *)(a1 + 104), "TagName", 7, v32, v34);
    }
    if (a5) {
      (*(void (**)(void, const char *, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 104) + 208))(*(void *)(a1 + 104), "Description", 11, a4, a5);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v38 + 232))(v38);
  }
  return result;
}

uint64_t llvm::ELFAttributeParser::integerAttribute@<X0>(llvm::ELFAttributeParser *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *((void *)this + 15);
  if (v6)
  {
    uint64_t v7 = 24 * v6;
    uint64_t v8 = *((void *)this + 14);
    while (*(_DWORD *)v8 != a2)
    {
      v8 += 24;
      v7 -= 24;
      if (!v7)
      {
        uint64_t v33 = &str_2;
        size_t v9 = a3;
        unint64_t v10 = 0;
        goto LABEL_12;
      }
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 14);
  }
  size_t v9 = a3;
  if (v8 == *((void *)this + 14) + 24 * v6)
  {
    unint64_t v10 = 0;
    uint64_t v33 = &str_2;
  }
  else
  {
    uint64_t v11 = *(void *)(v8 + 8);
    unint64_t v12 = *(void *)(v8 + 16);
    uint64_t v13 = 4;
    if (v12 < 4) {
      uint64_t v13 = v12;
    }
    uint64_t v33 = (void *)(v11 + v13);
    unint64_t v10 = v12 - v13;
  }
LABEL_12:
  uint64_t ULEB128 = llvm::DataExtractor::getULEB128((llvm::ELFAttributeParser *)((char *)this + 128), (unint64_t *)this + 19, (llvm::ELFAttributeParser *)((char *)this + 160));
  size_t v15 = (uint64_t *)((char *)this + 24);
  unint64_t v16 = *((void *)this + 4);
  if (v16)
  {
    uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v16 <= a2) {
        unint64_t v3 = a2 % v16;
      }
    }
    else
    {
      unint64_t v3 = (v16 - 1) & a2;
    }
    uint64_t v18 = *(uint64_t ***)(*v15 + 8 * v3);
    if (v18)
    {
      for (uint64_t i = *v18; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v20 = i[1];
        if (v20 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            goto LABEL_51;
          }
        }
        else
        {
          if (v17.u32[0] > 1uLL)
          {
            if (v20 >= v16) {
              v20 %= v16;
            }
          }
          else
          {
            v20 &= v16 - 1;
          }
          if (v20 != v3) {
            break;
          }
        }
      }
    }
  }
  BOOL v21 = operator new(0x18uLL);
  v21[1] = a2;
  *((_DWORD *)v21 + 4) = a2;
  *((_DWORD *)v21 + 5) = ULEB128;
  float v22 = (float)(unint64_t)(*((void *)this + 6) + 1);
  float v23 = *((float *)this + 14);
  if (!v16 || (float)(v23 * (float)v16) < v22)
  {
    BOOL v24 = 1;
    if (v16 >= 3) {
      BOOL v24 = (v16 & (v16 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v16);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__rehash<true>((uint64_t)this + 24, v27);
    unint64_t v16 = *((void *)this + 4);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v16 <= a2) {
        unint64_t v3 = a2 % v16;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v16 - 1) & a2;
    }
  }
  uint64_t v28 = *v15;
  unint64_t v29 = *(void **)(*v15 + 8 * v3);
  if (v29)
  {
    *BOOL v21 = *v29;
LABEL_49:
    *unint64_t v29 = v21;
    goto LABEL_50;
  }
  uint64_t v30 = *((void *)this + 5);
  *BOOL v21 = v30;
  *((void *)this + 5) = v21;
  *(void *)(v28 + 8 * v3) = (char *)this + 40;
  if (v30)
  {
    unint64_t v31 = *(void *)(v30 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v31 >= v16) {
        v31 %= v16;
      }
    }
    else
    {
      v31 &= v16 - 1;
    }
    unint64_t v29 = (void *)(*v15 + 8 * v31);
    goto LABEL_49;
  }
LABEL_50:
  ++*((void *)this + 6);
LABEL_51:
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    uint64_t v34 = *((void *)this + 13);
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)result + 224))(result, "Attribute", 9);
    (*(void (**)(void, const char *, uint64_t, uint64_t))(**((void **)this + 13) + 24))(*((void *)this + 13), "Tag", 3, a2);
    if (v10) {
      (*(void (**)(void, const char *, uint64_t, void *, unint64_t))(**((void **)this + 13) + 208))(*((void *)this + 13), "TagName", 7, v33, v10);
    }
    (*(void (**)(void, const char *, uint64_t, uint64_t))(**((void **)this + 13) + 16))(*((void *)this + 13), "Value", 5, ULEB128);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 232))(v34);
  }
  *size_t v9 = 0;
  return result;
}

uint64_t llvm::ELFAttributeParser::stringAttribute@<X0>(llvm::ELFAttributeParser *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *((void *)this + 15);
  if (v6)
  {
    uint64_t v7 = 24 * v6;
    uint64_t v8 = &str_2;
    uint64_t v9 = *((void *)this + 14);
    while (*(_DWORD *)v9 != a2)
    {
      v9 += 24;
      v7 -= 24;
      if (!v7)
      {
        unint64_t v10 = 0;
        goto LABEL_12;
      }
    }
  }
  else
  {
    uint64_t v9 = *((void *)this + 14);
  }
  if (v9 == *((void *)this + 14) + 24 * v6)
  {
    unint64_t v10 = 0;
    uint64_t v8 = &str_2;
  }
  else
  {
    uint64_t v11 = *(void *)(v9 + 8);
    unint64_t v12 = *(void *)(v9 + 16);
    uint64_t v13 = 4;
    if (v12 < 4) {
      uint64_t v13 = v12;
    }
    uint64_t v8 = (void *)(v11 + v13);
    unint64_t v10 = v12 - v13;
  }
LABEL_12:
  CStrRef = llvm::DataExtractor::getCStrRef((llvm::ELFAttributeParser *)((char *)this + 128), (unint64_t *)this + 19, (llvm::ELFAttributeParser *)((char *)this + 160));
  uint64_t v16 = v15;
  *(void *)&long long v19 = CStrRef;
  *((void *)&v19 + 1) = v15;
  unsigned int v18 = a2;
  std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__emplace_unique_key_args<unsigned int,unsigned int &,llvm::StringRef&>((uint64_t)this + 64, &v18, &v18, &v19);
  uint64_t result = *((void *)this + 13);
  if (result)
  {
    *(void *)&long long v19 = &unk_270DBC348;
    *((void *)&v19 + 1) = result;
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)result + 224))(result, "Attribute", 9);
    (*(void (**)(void, const char *, uint64_t, uint64_t))(**((void **)this + 13) + 24))(*((void *)this + 13), "Tag", 3, a2);
    if (v10) {
      (*(void (**)(void, const char *, uint64_t, void *, unint64_t))(**((void **)this + 13) + 208))(*((void *)this + 13), "TagName", 7, v8, v10);
    }
    (*(void (**)(void, const char *, uint64_t, void *, uint64_t))(**((void **)this + 13) + 208))(*((void *)this + 13), "Value", 5, CStrRef, v16);
    *(void *)&long long v19 = &unk_270DBC348;
    uint64_t result = *((void *)&v19 + 1);
    if (*((void *)&v19 + 1)) {
      uint64_t result = (*(uint64_t (**)(void))(**((void **)&v19 + 1) + 232))(*((void *)&v19 + 1));
    }
  }
  *a3 = 0;
  return result;
}

void *llvm::ELFAttributeParser::parseAttributeList(void *this, llvm::ELFAttributeParser *a2, unsigned int a3)
{
  unint64_t v3 = this;
  unint64_t v5 = (unint64_t *)((char *)a2 + 152);
  unint64_t v4 = *((void *)a2 + 19);
  unint64_t v6 = v4 + a3;
  unint64_t v21 = v4;
  if (v4 >= v6)
  {
LABEL_11:
    *unint64_t v3 = 0;
  }
  else
  {
    uint64_t v8 = (llvm::ELFAttributeParser *)((char *)a2 + 128);
    uint64_t v9 = (llvm::ELFAttributeParser *)((char *)a2 + 160);
    while (1)
    {
      unint64_t ULEB128 = llvm::DataExtractor::getULEB128(v8, v5, v9);
      unint64_t v20 = ULEB128;
      char v19 = 0;
      this = (void *)(**(uint64_t (***)(llvm::ELFAttributeParser *, unint64_t, char *))a2)(a2, ULEB128, &v19);
      if (*v3) {
        break;
      }
      if (!v19)
      {
        if (ULEB128 <= 0x1F)
        {
          uint64_t v11 = std::generic_category();
          v13[0] = "invalid tag 0x";
          v13[2] = &v20;
          __int16 v14 = 3587;
          v15[0] = v13;
          long long v15[2] = " at offset 0x";
          __int16 v16 = 770;
          v17[0] = v15;
          void v17[2] = &v21;
          __int16 v18 = 3586;
          llvm::Twine::str((llvm::Twine *)v17, &v22);
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v12 = &v22;
          }
          else {
            unint64_t v12 = (std::string *)v22.__r_.__value_.__r.__words[0];
          }
          uint64_t v24 = 22;
          unint64_t v25 = v11;
          float v23 = v12;
          llvm::make_error<llvm::StringError,char const*&,std::error_code>();
        }
        this = (void *)((ULEB128 & 1) != 0
                        ? llvm::ELFAttributeParser::stringAttribute(a2, ULEB128, v3)
                        : llvm::ELFAttributeParser::integerAttribute(a2, ULEB128, v3));
        if (*v3) {
          break;
        }
      }
      unint64_t v21 = *v5;
      if (v21 >= v6) {
        goto LABEL_11;
      }
    }
  }
  return this;
}

uint64_t llvm::ELFAttributeParser::parse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, llvm::ELFAttributeParser *a5@<X8>)
{
  unint64_t v5 = a3;
  uint64_t v95 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 136) = a3;
  uint64_t v8 = (unint64_t *)(a1 + 128);
  *(_WORD *)(a1 + 144) = a4 == 1;
  uint64_t v9 = (unint64_t *)(a1 + 152);
  unint64_t v10 = (uint64_t *)(a1 + 160);
  unsigned int v11 = llvm::DataExtractor::getU<unsigned char>((llvm::DataExtractor *)(a1 + 128), (unint64_t *)(a1 + 152), (llvm::Error *)(a1 + 160));
  if (v11 != 65)
  {
    unsigned int v13 = v11;
    __int16 v14 = std::generic_category();
    if (v13)
    {
      unint64_t v15 = v13;
      __int16 v16 = (char *)&v91 + 1;
      do
      {
        *--__int16 v16 = llvm::hexdigit(unsigned int,BOOL)::LUT[v15 & 0xF];
        BOOL v17 = v15 > 0xF;
        v15 >>= 4;
      }
      while (v17);
    }
    else
    {
      __int16 v16 = (char *)&v91;
      LOBYTE(v91) = 48;
    }
    std::string::__init_with_size[abi:nn180100]<char *,char *>(&v87, v16, (char *)&v91 + 1, (char *)&v91 + 1 - v16);
    char v60 = std::string::insert(&v87, 0, "unrecognized format-version: 0x");
    uint64_t v61 = (void *)v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v77 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    unint64_t v78 = (unint64_t)v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    __int16 v92 = 260;
    p_p = (std::string *)v77;
    llvm::Twine::str((llvm::Twine *)&p_p, &v80);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v62 = &v80;
    }
    else {
      uint64_t v62 = (std::string *)v80.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__r.__words[0] = 22;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
    uint64_t v85 = (uint64_t)v62;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>();
  }
  if (*(void *)(a1 + 136) == *(void *)(a1 + 152))
  {
LABEL_3:
    uint64_t v12 = *v10;
  }
  else
  {
    int v72 = 0;
    uint64_t v73 = a5;
    unint64_t v71 = v5;
    while (1)
    {
      uint64_t v18 = llvm::DataExtractor::getU<unsigned int>((llvm::DataExtractor *)v8, v8 + 3, (llvm::Error *)(v8 + 4));
      uint64_t v12 = *v10;
      if (*v10) {
        break;
      }
      uint64_t v19 = v18;
      uint64_t v20 = *(void *)(a1 + 104);
      if (v20)
      {
        unint64_t v21 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 264))(v20);
        std::string v22 = v21;
        float v23 = (void *)*((void *)v21 + 4);
        if (*((void *)v21 + 3) - (void)v23 > 7uLL)
        {
          void *v23 = 0x206E6F6974636553;
          *((void *)v21 + 4) += 8;
        }
        else
        {
          llvm::raw_ostream::write(v21, "Section ", 8uLL);
        }
        write_unsigned<unsigned long>(v22, ++v72, 0, 0, 0);
        uint64_t v24 = *((void *)v22 + 4);
        if ((unint64_t)(*((void *)v22 + 3) - v24) > 2)
        {
          *(unsigned char *)(v24 + 2) = 10;
          *(_WORD *)uint64_t v24 = 31520;
          *((void *)v22 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v22, " {\n", 3uLL);
        }
        ++*(_DWORD *)(*(void *)(a1 + 104) + 16);
      }
      if (v19 <= 3 || (unint64_t v74 = *v9 + v19 - 4, v74 > v5))
      {
        unsigned int v65 = std::generic_category();
        v77[0] = "invalid section length ";
        unint64_t v78 = v19;
        __int16 v79 = 2051;
        v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
        v80.__r_.__value_.__r.__words[2] = (std::string::size_type)" at offset 0x";
        __int16 v81 = 770;
        unint64_t v66 = *v9 - 4;
        if (*v9 == 4)
        {
          int v67 = (char *)&v91;
          LOBYTE(v91) = 48;
        }
        else
        {
          int v67 = (char *)&v91 + 1;
          do
          {
            *--int v67 = llvm::hexdigit(unsigned int,BOOL)::LUT[v66 & 0xF];
            BOOL v17 = v66 > 0xF;
            v66 >>= 4;
          }
          while (v17);
        }
        std::string::__init_with_size[abi:nn180100]<char *,char *>(&__p, v67, (char *)&v91 + 1, (char *)&v91 + 1 - v67);
        char v68 = v81;
        if (v81 == 1)
        {
          p_p = &__p;
          long long v91 = v82;
          __int16 v92 = 260;
          int v93 = v76;
          __int16 v94 = WORD2(v76);
        }
        else if ((_BYTE)v81)
        {
          if (HIBYTE(v81) != 1) {
            char v68 = 2;
          }
          uint64_t v69 = &v80;
          if (HIBYTE(v81) == 1) {
            uint64_t v69 = (std::string *)v80.__r_.__value_.__r.__words[0];
          }
          p_p = v69;
          std::string::size_type size = v80.__r_.__value_.__l.__size_;
          *(void *)&long long v91 = &__p;
          LOBYTE(v92) = v68;
          HIBYTE(v92) = 4;
        }
        else
        {
          __int16 v92 = 256;
        }
        llvm::Twine::str((llvm::Twine *)&p_p, &v87);
        if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v70 = &v87;
        }
        else {
          uint64_t v70 = (std::string *)v87.__r_.__value_.__r.__words[0];
        }
        uint64_t v85 = 22;
        uint64_t v86 = v65;
        uint64_t v84 = (uint64_t)v70;
        llvm::make_error<llvm::StringError,char const*&,std::error_code>();
      }
      CStrRef = llvm::DataExtractor::getCStrRef((llvm::DataExtractor *)v8, v8 + 3, (llvm::Error *)(v8 + 4));
      *(void *)&long long v82 = CStrRef;
      *((void *)&v82 + 1) = v25;
      uint64_t v27 = *(void *)(a1 + 104);
      if (v27)
      {
        uint64_t v28 = v25;
        (*(void (**)(uint64_t, const char *, uint64_t, uint64_t))(*(void *)v27 + 24))(v27, "SectionLength", 13, v19);
        (*(void (**)(void, const char *, uint64_t, void *, uint64_t))(**(void **)(a1 + 104) + 208))(*(void *)(a1 + 104), "Vendor", 6, CStrRef, v28);
      }
      llvm::StringRef::lower((llvm::StringRef *)&v82, &p_p);
      int v29 = SBYTE7(v91);
      uint64_t v30 = p_p;
      if ((SBYTE7(v91) & 0x80u) == 0) {
        p_p_p = (uint64_t *)&p_p;
      }
      else {
        p_p_p = (uint64_t *)p_p;
      }
      if ((SBYTE7(v91) & 0x80u) == 0) {
        size_t v32 = BYTE7(v91);
      }
      else {
        size_t v32 = size;
      }
      if (v32 == *(void *)(a1 + 16))
      {
        if (v32)
        {
          BOOL v33 = memcmp(p_p_p, *(const void **)(a1 + 8), v32) != 0;
          if (v29 < 0) {
            goto LABEL_32;
          }
        }
        else
        {
          BOOL v33 = 0;
          if (SBYTE7(v91) < 0)
          {
LABEL_32:
            operator delete(v30);
            if (!v33) {
              goto LABEL_33;
            }
LABEL_76:
            unint64_t v50 = std::generic_category();
            __int16 v92 = 1283;
            p_p = (std::string *)"unrecognized vendor-name: ";
            long long v91 = v82;
            llvm::Twine::str((llvm::Twine *)&p_p, &v80);
            size_t v51 = &v80;
            if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              size_t v51 = (std::string *)v80.__r_.__value_.__r.__words[0];
            }
            v77[0] = (void *)22;
            v77[1] = (void *)v50;
            v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
            llvm::make_error<llvm::StringError,char const*&,std::error_code>();
          }
        }
      }
      else
      {
        BOOL v33 = 1;
        if (SBYTE7(v91) < 0) {
          goto LABEL_32;
        }
      }
      if (v33) {
        goto LABEL_76;
      }
      do
      {
LABEL_33:
        if (*v9 >= v74)
        {
          *(void *)a5 = 0;
          unint64_t v5 = v71;
          goto LABEL_86;
        }
        unsigned int v34 = llvm::DataExtractor::getU<unsigned char>((llvm::DataExtractor *)v8, v8 + 3, (llvm::Error *)(v8 + 4));
        uint64_t v35 = llvm::DataExtractor::getU<unsigned int>((llvm::DataExtractor *)v8, v8 + 3, (llvm::Error *)(v8 + 4));
        uint64_t v12 = *v10;
        if (*v10) {
          goto LABEL_4;
        }
        uint64_t v36 = v35;
        uint64_t v37 = *(void *)(a1 + 104);
        if (v37)
        {
          uint64_t v38 = 0;
          while (LODWORD((&tagNames)[v38 + 4]) != v34)
          {
            v38 += 5;
            if (v38 == 15)
            {
              (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)v37 + 312))(v37, "Tag", 3, v34);
              goto LABEL_41;
            }
          }
          (*(void (**)(uint64_t, const char *, uint64_t, char *, char *, void))(*(void *)v37 + 320))(v37, "Tag", 3, (&tagNames)[v38], (&tagNames)[v38 + 1], v34);
LABEL_41:
          (*(void (**)(void, const char *, uint64_t, uint64_t))(**(void **)(a1 + 104) + 24))(*(void *)(a1 + 104), "Size", 4, v36);
        }
        if (v36 <= 4)
        {
          unint64_t v52 = std::generic_category();
          v77[0] = "invalid attribute size ";
          unint64_t v78 = v36;
          __int16 v79 = 2051;
          v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
          v80.__r_.__value_.__r.__words[2] = (std::string::size_type)" at offset 0x";
          __int16 v81 = 770;
          uint64_t v84 = *v9 - 5;
          p_p = &v80;
          *(void *)&long long v91 = &v84;
          __int16 v92 = 3586;
          llvm::Twine::str((llvm::Twine *)&p_p, &v87);
          unint64_t v53 = &v87;
          if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v53 = (std::string *)v87.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__r.__words[0] = 22;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
          uint64_t v85 = (uint64_t)v53;
          llvm::make_error<llvm::StringError,char const*&,std::error_code>();
        }
        v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
        *(_OWORD *)&v87.__r_.__value_.__r.__words[1] = xmmword_261E8A740;
        if (v34 == 1)
        {
          uint64_t v39 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = 14;
          unint64_t v42 = "FileAttributes";
        }
        else
        {
          if (v34 == 2)
          {
            uint64_t v39 = 8;
            uint64_t v40 = "Sections";
            uint64_t v41 = 17;
            unint64_t v42 = "SectionAttributes";
          }
          else
          {
            if (v34 != 3)
            {
              size_t v48 = std::generic_category();
              uint64_t v76 = v34;
              v77[0] = "unrecognized tag 0x";
              unint64_t v78 = (unint64_t)&v76;
              __int16 v79 = 3587;
              v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
              v80.__r_.__value_.__r.__words[2] = (std::string::size_type)" at offset 0x";
              __int16 v81 = 770;
              uint64_t v75 = *v9 - 5;
              p_p = &v80;
              *(void *)&long long v91 = &v75;
              __int16 v92 = 3586;
              llvm::Twine::str((llvm::Twine *)&p_p, &__p);
              size_t v49 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                size_t v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              uint64_t v85 = 22;
              uint64_t v86 = v48;
              uint64_t v84 = (uint64_t)v49;
              llvm::make_error<llvm::StringError,char const*&,std::error_code>();
            }
            uint64_t v39 = 7;
            uint64_t v40 = "Symbols";
            uint64_t v41 = 16;
            unint64_t v42 = "SymbolAttributes";
          }
          uint64_t ULEB128 = llvm::DataExtractor::getULEB128((llvm::DataExtractor *)v8, v8 + 3, (llvm::Error *)(v8 + 4));
          if (!*v10 && ULEB128)
          {
            do
            {
              llvm::SmallVectorTemplateBase<char,true>::push_back(&v87, ULEB128);
              uint64_t ULEB128 = llvm::DataExtractor::getULEB128((llvm::DataExtractor *)v8, v8 + 3, (llvm::Error *)(v8 + 4));
              if (*v10) {
                BOOL v44 = 1;
              }
              else {
                BOOL v44 = ULEB128 == 0;
              }
            }
            while (!v44);
          }
        }
        std::string::size_type v45 = *(void *)(a1 + 104);
        if (v45)
        {
          p_p = (std::string *)&unk_270DBC348;
          std::string::size_type size = v45;
          (*(void (**)(std::string::size_type, const char *, uint64_t))(*(void *)v45 + 224))(v45, v42, v41);
          if (v87.__r_.__value_.__l.__size_) {
            (*(void (**)(void, const char *, uint64_t, std::string::size_type))(**(void **)(a1 + 104)
          }
                                                                                          + 152))(*(void *)(a1 + 104), v40, v39, v87.__r_.__value_.__r.__words[0]);
          a5 = v73;
          llvm::ELFAttributeParser::parseAttributeList(v73, (llvm::ELFAttributeParser *)a1, v36 - 5);
          uint64_t v46 = *(void *)v73;
          p_p = (std::string *)&unk_270DBC348;
          if (v46)
          {
            if (size) {
              (*(void (**)(void))(*(void *)size + 232))();
            }
            BOOL v47 = 1;
          }
          else
          {
            if (size) {
              (*(void (**)(void))(*(void *)size + 232))();
            }
            BOOL v47 = 0;
          }
        }
        else
        {
          a5 = v73;
          llvm::ELFAttributeParser::parseAttributeList(v73, (llvm::ELFAttributeParser *)a1, v36 - 5);
          BOOL v47 = *(void *)v73 != 0;
        }
        if ((uint64_t *)v87.__r_.__value_.__l.__data_ != &v88) {
          free(v87.__r_.__value_.__l.__data_);
        }
      }
      while (!v47);
      unint64_t v5 = v71;
      if (*(void *)a5) {
        goto LABEL_100;
      }
LABEL_86:
      int v54 = *(_DWORD **)(a1 + 104);
      if (v54)
      {
        int v55 = v54[4];
        BOOL v56 = __OFSUB__(v55, 1);
        int v57 = v55 - 1;
        if ((v57 < 0) ^ v56 | (v57 == 0)) {
          int v57 = 0;
        }
        v54[4] = v57;
        long long v58 = (llvm::raw_ostream *)(*(uint64_t (**)(_DWORD *))(*(void *)v54 + 264))(v54);
        unint64_t v59 = (_WORD *)*((void *)v58 + 4);
        if (*((void *)v58 + 3) - (void)v59 > 1uLL)
        {
          *unint64_t v59 = 2685;
          *((void *)v58 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v58, "}\n", 2uLL);
        }
      }
      if (*(void *)(a1 + 136) == *(void *)(a1 + 152)) {
        goto LABEL_3;
      }
    }
  }
LABEL_4:
  *(void *)a5 = v12;
  *unint64_t v10 = 0;
LABEL_100:
  uint64_t v63 = *v10;
  *unint64_t v10 = 0;
  p_p = (std::string *)v63;
  llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&p_p);
  uint64_t result = (uint64_t)p_p;
  if (p_p) {
    return (*(uint64_t (**)(std::string *))(p_p->__r_.__value_.__r.__words[0] + 8))(p_p);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      __int16 v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  unint64_t v5 = operator new(8 * prime);
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    __int16 v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *uint64_t v8 = *v14;
          *__int16 v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          __int16 v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint64_t v8 = v14;
        __int16 v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void llvm::logAllUnhandledErrors(void ***a1, llvm::raw_ostream *a2, llvm::Twine *a3)
{
  if (*a1)
  {
    llvm::Twine::print(a3, a2);
    unint64_t v5 = *a1;
    *a1 = 0;
    unint64_t v11 = a2;
    if (v5)
    {
      if ((*((unsigned int (**)(void **, void *))*v5 + 6))(v5, &llvm::ErrorList::ID))
      {
        uint8x8_t v12 = 0;
        unint64_t v6 = (uint64_t *)v5[1];
        uint64_t v7 = (uint64_t *)v5[2];
        if (v6 != v7)
        {
          uint64_t v8 = 0;
          do
          {
            size_t v15 = v8;
            uint64_t v9 = *v6;
            *unint64_t v6 = 0;
            uint64_t v13 = v9;
            llvm::handleErrorImpl<llvm::logAllUnhandledErrors(llvm::Error,llvm::raw_ostream &,llvm::Twine)::$_0>(&v14, &v13, &v11);
            llvm::ErrorList::join(&v15, (void ***)&v14, &v16);
            uint64_t v8 = v16;
            __int16 v16 = 0;
            if (v14) {
              (*v14)[1]((void **)v14);
            }
            uint64_t v10 = v13;
            uint64_t v13 = 0;
            if (v10) {
              (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
            }
            if (v15) {
              (*((void (**)(void **))*v15 + 1))(v15);
            }
            ++v6;
          }
          while (v6 != v7);
          uint8x8_t v12 = v8;
        }
        (*((void (**)(void **))*v5 + 1))(v5);
      }
      else
      {
        __int16 v16 = v5;
        llvm::handleErrorImpl<llvm::logAllUnhandledErrors(llvm::Error,llvm::raw_ostream &,llvm::Twine)::$_0>(&v12, &v16, &v11);
        if (v16) {
          (*((void (**)(void **))*v16 + 1))(v16);
        }
      }
    }
    else
    {
      uint8x8_t v12 = 0;
    }
  }
}

void llvm::Error::~Error(llvm::Error *this)
{
  uint64_t v1 = *(void *)this;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

uint64_t llvm::ErrorList::convertToErrorCode(llvm::ErrorList *this)
{
  return 1;
}

void getErrorErrorCat(void)
{
  {
  }
}

uint64_t llvm::FileError::convertToErrorCode(llvm::FileError *this)
{
  uint64_t v1 = (*(uint64_t (**)(void))(**((void **)this + 6) + 32))(*((void *)this + 6));
  unint64_t v3 = v2;
  getErrorErrorCat();
  if (v3 == &getErrorErrorCat(void)::ErrorErrorCat && v1 == 3)
  {
    getErrorErrorCat();
    return 2;
  }
  return v1;
}

uint64_t llvm::errorCodeToError@<X0>(llvm *this@<X0>, std::error_code a2@<0:X1, 8:X2>, void *a3@<X8>)
{
  if (this) {
    operator new();
  }
  uint64_t result = 0;
  *a3 = 0;
  return result;
}

uint64_t llvm::errorToErrorCode(void ***a1)
{
  v14.__val_ = 0;
  v14.__cat_ = std::system_category();
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v13 = &v14;
  if (v2)
  {
    if ((*((unsigned int (**)(void **, void *))*v2 + 6))(v2, &llvm::ErrorList::ID))
    {
      size_t v15 = 0;
      unint64_t v3 = (uint64_t *)v2[1];
      int8x8_t v4 = (uint64_t *)v2[2];
      if (v3 != v4)
      {
        unint64_t v5 = 0;
        do
        {
          v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
          uint64_t v6 = *v3;
          *unint64_t v3 = 0;
          uint64_t v16 = v6;
          llvm::handleErrorImpl<llvm::errorToErrorCode(llvm::Error)::$_0>(&v17, &v16, (uint64_t **)&v13);
          llvm::ErrorList::join((void ***)&v10, (void ***)&v17, v11);
          unint64_t v5 = v11[0];
          v11[0] = 0;
          if (v17) {
            (*v17)[1]((void **)v17);
          }
          uint64_t v7 = v16;
          uint64_t v16 = 0;
          if (v7) {
            (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
          }
          if (v10.__r_.__value_.__r.__words[0]) {
            (*(void (**)(std::string::size_type))(*(void *)v10.__r_.__value_.__l.__data_ + 8))(v10.__r_.__value_.__r.__words[0]);
          }
          ++v3;
        }
        while (v3 != v4);
        size_t v15 = v5;
      }
      (*((void (**)(void **))*v2 + 1))(v2);
    }
    else
    {
      v11[0] = v2;
      llvm::handleErrorImpl<llvm::errorToErrorCode(llvm::Error)::$_0>(&v15, v11, (uint64_t **)&v13);
      if (v11[0]) {
        (*((void (**)(void **))*v11[0] + 1))(v11[0]);
      }
    }
  }
  else
  {
    size_t v15 = 0;
  }
  getErrorErrorCat();
  if ((void (**)(_anonymous_namespace_::ErrorErrorCategory *__hidden))v14.__cat_ == &getErrorErrorCat(void)::ErrorErrorCat
    && v14.__val_ == 3)
  {
    std::error_code::message(&v10, &v14);
    __int16 v12 = 260;
    v11[0] = (void **)&v10;
    llvm::report_fatal_error((llvm *)v11, (const llvm::Twine *)1);
  }
  return *(void *)&v14.__val_;
}

void llvm::StringError::log(const std::error_code *this, llvm::raw_ostream *a2)
{
  if (LOBYTE(this[3].__val_))
  {
    int cat_high = SHIBYTE(this[1].__cat_);
    if (cat_high >= 0) {
      p_cat = (const char *)&this->__cat_;
    }
    else {
      p_cat = (const char *)this->__cat_;
    }
    if (cat_high >= 0) {
      size_t v6 = HIBYTE(this[1].__cat_);
    }
    else {
      size_t v6 = *(void *)&this[1].__val_;
    }
    llvm::raw_ostream::write(a2, p_cat, v6);
  }
  else
  {
    std::error_code::message(&v11, this + 2);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v11;
    }
    else {
      uint64_t v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v11.__r_.__value_.__l.__size_;
    }
    llvm::raw_ostream::write(a2, (const char *)v7, size);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(this[1].__cat_) < 0)
    {
      if (!*(void *)&this[1].__val_) {
        return;
      }
    }
    else if (!HIBYTE(this[1].__cat_))
    {
      return;
    }
    std::operator+<char>();
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v11;
    }
    else {
      uint64_t v9 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v10 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v10 = v11.__r_.__value_.__l.__size_;
    }
    llvm::raw_ostream::write(a2, (const char *)v9, v10);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
}

uint64_t llvm::StringError::convertToErrorCode(llvm::StringError *this)
{
  return *((void *)this + 4);
}

void llvm::report_fatal_error(void ***a1)
{
  memset(v6, 0, sizeof(v6));
  llvm::raw_string_ostream::raw_string_ostream((uint64_t)v4, (uint64_t)v6);
  unint64_t v3 = *a1;
  *a1 = 0;
  v2[16] = 257;
  llvm::logAllUnhandledErrors(&v3, (llvm::raw_ostream *)v4, (llvm::Twine *)v2);
  llvm::Error::~Error((llvm::Error *)&v3);
  llvm::raw_string_ostream::~raw_string_ostream((llvm::raw_string_ostream *)v4);
  __int16 v5 = 260;
  v4[0] = v6;
  llvm::report_fatal_error((llvm *)v4, (const llvm::Twine *)1);
}

uint64_t llvm::raw_string_ostream::raw_string_ostream(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_270DBD6E0;
  *(void *)(a1 + 64) = a2;
  llvm::raw_ostream::SetUnbuffered((void *)a1);
  return a1;
}

void LLVMGetErrorMessage(uint64_t a1)
{
  uint64_t v1 = a1;
  llvm::toString(&v1, &__src);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  operator new[]();
}

uint64_t LLVMDisposeErrorMessage(uint64_t result)
{
  if (result) {
    JUMPOUT(0x263E50080);
  }
  return result;
}

void llvm::ErrorList::~ErrorList(llvm::ErrorList *this)
{
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

{
  void **v2;

  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:nn180100](&v2);
  MEMORY[0x263E500B0](this, 0xA1C4030951706);
}

llvm::raw_ostream *llvm::ErrorList::log(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v4) > 0x10)
  {
    *(unsigned char *)(v4 + 16) = 10;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)"Multiple errors:\n";
    *((void *)a2 + 4) += 17;
  }
  else
  {
    this = llvm::raw_ostream::write(a2, "Multiple errors:\n", 0x11uLL);
  }
  __int16 v5 = *(void **)(v3 + 8);
  for (uint64_t i = *(void **)(v3 + 16); v5 != i; ++v5)
  {
    this = (llvm::raw_ostream *)(*(uint64_t (**)(void, llvm::raw_ostream *))(*(void *)*v5 + 16))(*v5, a2);
    uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
    if (*((unsigned char **)a2 + 3) == v7)
    {
      this = llvm::raw_ostream::write(a2, "\n", 1uLL);
    }
    else
    {
      *uint64_t v7 = 10;
      ++*((void *)a2 + 4);
    }
  }
  return this;
}

void *llvm::ErrorInfo<llvm::ErrorList,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::ErrorList::ID;
}

BOOL llvm::ErrorInfo<llvm::ErrorList,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::ErrorList::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::ECError::~ECError(llvm::ECError *this)
{
}

void llvm::ECError::log(llvm::ECError *this, llvm::raw_ostream *a2)
{
  std::error_code::message(&v5, (const std::error_code *)((char *)this + 8));
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &v5;
  }
  else {
    uint64_t v3 = (std::string *)v5.__r_.__value_.__r.__words[0];
  }
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v5.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v5.__r_.__value_.__l.__size_;
  }
  llvm::raw_ostream::write(a2, (const char *)v3, size);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

uint64_t llvm::ECError::convertToErrorCode(llvm::ECError *this)
{
  return *((void *)this + 1);
}

void *llvm::ErrorInfo<llvm::ECError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::ECError::ID;
}

BOOL llvm::ErrorInfo<llvm::ECError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::FileError::~FileError(llvm::FileError *this)
{
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::FileError::log(llvm::FileError *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v4)
  {
    llvm::raw_ostream::write(a2, "'", 1uLL);
  }
  else
  {
    *uint64_t v4 = 39;
    ++*((void *)a2 + 4);
  }
  int v5 = *((char *)this + 31);
  if (v5 >= 0) {
    size_t v6 = (char *)this + 8;
  }
  else {
    size_t v6 = (const char *)*((void *)this + 1);
  }
  if (v5 >= 0) {
    size_t v7 = *((unsigned __int8 *)this + 31);
  }
  else {
    size_t v7 = *((void *)this + 2);
  }
  llvm::raw_ostream::write(a2, v6, v7);
  uint64_t v8 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v8) > 2)
  {
    *(unsigned char *)(v8 + 2) = 32;
    *(_WORD *)uint64_t v8 = 14887;
    *((void *)a2 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(a2, "': ", 3uLL);
  }
  if (*((unsigned char *)this + 40))
  {
    uint64_t v9 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v9) > 4)
    {
      *(unsigned char *)(v9 + 4) = 32;
      *(_DWORD *)uint64_t v9 = 1701734764;
      *((void *)a2 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(a2, "line ", 5uLL);
    }
    write_unsigned<unsigned long>(a2, *((void *)this + 4), 0, 0, 0);
    size_t v10 = (_WORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v10 > 1uLL)
    {
      *size_t v10 = 8250;
      *((void *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, ": ", 2uLL);
    }
  }
  std::string v11 = *(uint64_t (**)(void))(**((void **)this + 6) + 16);
  return v11();
}

void *llvm::ErrorInfo<llvm::FileError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::FileError::ID;
}

BOOL llvm::ErrorInfo<llvm::FileError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::FileError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::StringError::~StringError(void **this)
{
  *this = &unk_270DBCBD8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_270DBCBD8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x263E500B0);
}

void *llvm::ErrorInfo<llvm::StringError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::StringError::ID;
}

BOOL llvm::ErrorInfo<llvm::StringError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::StringError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void anonymous namespace'::ErrorErrorCategory::~ErrorErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x263E500B0);
}

const char *anonymous namespace'::ErrorErrorCategory::name(_anonymous_namespace_::ErrorErrorCategory *this)
{
  return "Error";
}

void *anonymous namespace'::ErrorErrorCategory::message@<X0>(int a1@<W1>, void *a2@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a2, off_2655913C0[a1 - 1]);
}

uint64_t llvm::handleErrorImpl<llvm::logAllUnhandledErrors(llvm::Error,llvm::raw_ostream &,llvm::Twine)::$_0>(void *a1, void *a2, llvm::raw_ostream **a3)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  uint64_t v7 = *a2;
  *a2 = 0;
  if (result)
  {
    (*(void (**)(uint64_t, llvm::raw_ostream *))(*(void *)v7 + 16))(v7, *a3);
    uint64_t v8 = *a3;
    uint64_t v9 = (unsigned char *)*((void *)*a3 + 4);
    if (*((unsigned char **)*a3 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, "\n", 1uLL);
    }
    else
    {
      *uint64_t v9 = 10;
      ++*((void *)v8 + 4);
    }
    *a1 = 0;
    size_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v10(v7);
  }
  else
  {
    *a1 = v7;
  }
  return result;
}

uint64_t llvm::handleErrorImpl<llvm::errorToErrorCode(llvm::Error)::$_0>(void *a1, void *a2, uint64_t **a3)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  uint64_t v7 = *a2;
  *a2 = 0;
  if (result)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
    uint64_t v9 = *a3;
    *uint64_t v9 = v8;
    v9[1] = v10;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    uint64_t v7 = 0;
  }
  *a1 = v7;
  return result;
}

void llvm::report_fatal_error(llvm *this, const llvm::Twine *a2)
{
  char v2 = 1;
  char v5 = 1;
  if (*(unsigned char *)this)
  {
    uint64_t v3 = this;
    char v2 = 3;
  }
  char v4 = v2;
  llvm::report_fatal_error((llvm *)&v3, a2);
}

{
  int v2;
  void *v4;
  void *v5;
  int v6;
  uint64_t v7;
  unsigned char *v8;
  unsigned char *v9;
  char v10;
  uint64_t v11;
  int v12;
  void **v13;
  void *v14;
  long long v15;
  unsigned char v16[64];

  char v2 = (int)a2;
  std::mutex::lock(&ErrorHandlerMutex);
  std::mutex::unlock(&ErrorHandlerMutex);
  uint64_t v13 = &v14;
  std::error_code v14 = v16;
  size_t v15 = xmmword_261E8ACE0;
  size_t v6 = 0;
  uint64_t v10 = 0;
  std::string v11 = 0;
  __int16 v12 = 1;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  char v5 = &unk_270DBD758;
  llvm::raw_ostream::SetUnbuffered(&v5);
  char v4 = v9;
  if ((unint64_t)(v8 - v9) > 0xB)
  {
    *((_DWORD *)v9 + 2) = 540693071;
    *char v4 = *(void *)"LLVM ERROR: ";
    v9 += 12;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v5, "LLVM ERROR: ", 0xCuLL);
  }
  llvm::Twine::print(this, (llvm::raw_ostream *)&v5);
  if (v8 == v9) {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v5, "\n", 1uLL);
  }
  else {
    *v9++ = 10;
  }
  write(2, *v13, (size_t)v13[1]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
  if (v14 != v16) {
    free(v14);
  }
  RemoveFilesToRemove();
  if (v2) {
    abort();
  }
  exit(1);
}

void llvm::report_bad_alloc_error(llvm *this, const char *a2)
{
  std::mutex::lock(&BadAllocErrorHandlerMutex);
  std::mutex::unlock(&BadAllocErrorHandlerMutex);
  write(2, "LLVM ERROR: out of memory\n", 0x1AuLL);
  size_t v3 = strlen((const char *)this);
  write(2, this, v3);
  write(2, "\n", 1uLL);
  abort();
}

uint64_t _GLOBAL__sub_I_ErrorHandling_cpp()
{
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C118];
  __cxa_atexit(MEMORY[0x263F8C118], &ErrorHandlerMutex, &dword_261C2B000);
  return __cxa_atexit(v0, &BadAllocErrorHandlerMutex, &dword_261C2B000);
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *this, int a2)
{
  int v2 = a2;
  char v4 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v4 < *((void *)this + 3))
  {
    *((void *)this + 4) = v4 + 1;
    *char v4 = 40;
    if (a2) {
      goto LABEL_3;
    }
LABEL_13:
    uint64_t v13 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v13) > 4)
    {
      *(unsigned char *)(v13 + 4) = 41;
      *(_DWORD *)uint64_t v13 = 1701736302;
      *((void *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, "none)", 5uLL);
    }
    return this;
  }
  llvm::raw_ostream::write(this, 40);
  if (!v2) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v5 = 0;
  int v6 = 1;
  do
  {
    int v7 = NoFPClassName[v5];
    if ((v7 & ~v2) == 0)
    {
      uint64_t v9 = *(const void **)&NoFPClassName[v5 + 2];
      size_t v8 = *(void *)&NoFPClassName[v5 + 4];
      if (v6) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = " ";
      }
      std::string v11 = llvm::raw_ostream::operator<<(this, v10, v6 == 0);
      llvm::raw_ostream::operator<<(v11, v9, v8);
      int v6 = 0;
      v2 &= ~v7 & 0x3FF;
    }
    v5 += 6;
  }
  while (v5 != 96);
  __int16 v12 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v12 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 41);
  }
  else
  {
    *((void *)this + 4) = v12 + 1;
    *__int16 v12 = 41;
  }
  return this;
}

unsigned int *llvm::FoldingSetNodeID::AddString(unsigned int *a1, unsigned char *a2, unsigned int a3)
{
  unint64_t v6 = a1[2] + (((unint64_t)a3 + 3) >> 2) + 1;
  if (v6 > a1[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 4, v6, 4);
  }
  uint64_t result = llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, a3);
  if (a3)
  {
    if ((a2 & 3) != 0)
    {
      for (unsigned int i = 4; i <= a3; i += 4)
        uint64_t result = llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, (a2[i - 1] << 24) | (a2[i - 2] << 16) | (a2[i - 3] << 8) | a2[i - 4]);
    }
    else
    {
      uint64_t result = llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>(a1, a2, &a2[a3 & 0xFFFFFFFC]);
      unsigned int i = (a3 & 0xFFFFFFFC) + 4;
    }
    int v9 = 0;
    unsigned int v10 = i - a3;
    if (i - a3 != 3)
    {
      if (v10 != 2)
      {
        if (v10 != 1) {
          return result;
        }
        int v9 = a2[a3 - 3] << 16;
      }
      v9 |= a2[a3 - 2] << 8;
    }
    int v11 = v9 | a2[a3 - 1];
    return llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, v11);
  }
  return result;
}

unsigned int *llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>(unsigned int *result, unsigned char *__src, unsigned char *a3)
{
  uint64_t v5 = result;
  size_t v6 = a3 - __src;
  uint64_t v7 = result[2];
  unint64_t v8 = v7 + ((a3 - __src) >> 2);
  if (v8 > result[3])
  {
    uint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v8, 4);
    LODWORD(v7) = v5[2];
  }
  if (__src != a3)
  {
    uint64_t result = (unsigned int *)memcpy((void *)(*(void *)v5 + 4 * v7), __src, v6);
    LODWORD(v7) = v5[2];
  }
  _OWORD v5[2] = v7 + (v6 >> 2);
  return result;
}

void *AllocateBuckets(int a1)
{
  int v2 = a1 + 1;
  uint64_t result = malloc_type_calloc((a1 + 1), 8uLL, 0x6D9A4F0CuLL);
  if (!result && (v2 || (uint64_t result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  result[a1] = -1;
  return result;
}

void llvm::FoldingSetBase::GrowBucketCount(uint64_t a1, int a2, uint64_t a3)
{
  v16[16] = *MEMORY[0x263EF8340];
  size_t v6 = *(void **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  *(void *)a1 = AllocateBuckets(a2);
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 0;
  std::error_code v14 = v16;
  uint64_t v15 = 0x2000000000;
  if (!v7) {
    goto LABEL_14;
  }
  for (uint64_t i = 0; i != v7; ++i)
  {
    int v9 = (void *)v6[i];
    if (v9) {
      BOOL v10 = (v6[i] & 1) == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      do
      {
        int v11 = (void *)*v9;
        *int v9 = 0;
        (*(void (**)(uint64_t, void *, void **))(a3 + 16))(a1, v9, &v14);
        llvm::FoldingSetBase::InsertNode(a1);
        LODWORD(v15) = 0;
        if (v11) {
          BOOL v12 = (v11 & 1) == 0;
        }
        else {
          BOOL v12 = 0;
        }
        int v9 = v11;
      }
      while (v12);
    }
  }
  uint64_t v13 = v14;
  free(v6);
  size_t v6 = v13;
  if (v13 != v16) {
LABEL_14:
  }
    free(v6);
}

void llvm::FoldingSetBase::InsertNode(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v12[16] = *MEMORY[0x263EF8340];
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 12) + 1;
  if (v8 > 2 * v7)
  {
    llvm::FoldingSetBase::GrowBucketCount(a1, 2 * v7, a4);
    v11[0] = v12;
    v11[1] = (void *)0x2000000000;
    a3 = *(void *)a1
       + 8
       * ((*(_DWORD *)(a1 + 8) - 1) & (*(unsigned int (**)(uint64_t, uint64_t *, void **))(a4 + 16))(a1, a2, v11));
    if (v11[0] != v12) {
      free(v11[0]);
    }
    unsigned int v8 = *(_DWORD *)(a1 + 12) + 1;
  }
  *(_DWORD *)(a1 + 12) = v8;
  uint64_t v10 = *(void *)a3;
  if (!*(void *)a3) {
    uint64_t v10 = a3 | 1;
  }
  *a2 = v10;
  *(void *)a3 = a2;
}

void *llvm::FoldingSetBase::FindNodeOrInsertPos(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v15[16] = *MEMORY[0x263EF8340];
  unint64_t v8 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a2, *(void *)a2 + 4 * *(unsigned int *)(a2 + 8), (uint64_t)a3, (unint64_t *)a4);
  int v9 = (void **)(*(void *)a1 + 8 * ((*(_DWORD *)(a1 + 8) - 1) & v8));
  uint64_t v10 = *v9;
  *a3 = 0;
  uint64_t v13 = v15;
  uint64_t v14 = 0x2000000000;
  while (v10 && (v10 & 1) == 0)
  {
    if ((*(uint64_t (**)(uint64_t, void *, uint64_t, unint64_t, void **))(a4 + 8))(a1, v10, a2, v8, &v13))goto LABEL_9; {
    LODWORD(v14) = 0;
    }
    uint64_t v10 = (void *)*v10;
  }
  uint64_t v10 = 0;
  *a3 = v9;
LABEL_9:
  if (v13 != v15) {
    free(v13);
  }
  return v10;
}

uint64_t llvm::formatted_raw_ostream::UpdatePosition(uint64_t this, char *__src, uint64_t a3)
{
  size_t v3 = __src;
  uint64_t v4 = this;
  uint64_t v5 = (void *)(this + 88);
  uint64_t v6 = *(void *)(this + 96);
  if (!v6) {
    goto LABEL_15;
  }
  unint64_t v7 = (llvm::trailingBytesForUTF8[*(unsigned __int8 *)*v5] + 1) - v6;
  uint64_t v8 = a3 - v7;
  if (a3 < v7)
  {
    int v9 = &__src[a3];
    goto LABEL_31;
  }
  uint64_t v10 = &__src[v7];
  llvm::SmallVectorImpl<char>::append<char const*,void>((void *)(this + 88), __src, &__src[v7]);
  int v11 = *(char **)(v4 + 88);
  unint64_t v12 = *(void *)(v4 + 96);
  this = llvm::sys::unicode::columnWidthUTF8((uint64_t)v11, v12);
  if (this != -1) {
    *(_DWORD *)(v4 + 72) += this;
  }
  if (v12 <= 1)
  {
    int v13 = *v11;
    switch(v13)
    {
      case 9:
        int v14 = (-*(_DWORD *)(v4 + 72) & 7) + *(_DWORD *)(v4 + 72);
        goto LABEL_13;
      case 13:
        int v14 = 0;
        goto LABEL_13;
      case 10:
        int v14 = 0;
        ++*(_DWORD *)(v4 + 76);
LABEL_13:
        *(_DWORD *)(v4 + 72) = v14;
        break;
    }
  }
  *(void *)(v4 + 96) = 0;
  a3 = v8;
  size_t v3 = (char *)v10;
LABEL_15:
  if (a3 < 1) {
    return this;
  }
  uint64_t v15 = &v3[a3];
  while (1)
  {
    uint64_t v16 = (llvm::trailingBytesForUTF8[*v3] + 1);
    if (v16 > (int)v15 - (int)v3) {
      break;
    }
    this = llvm::sys::unicode::columnWidthUTF8((uint64_t)v3, (llvm::trailingBytesForUTF8[*v3] + 1));
    if (this != -1) {
      *(_DWORD *)(v4 + 72) += this;
    }
    if (v16 > 1) {
      goto LABEL_28;
    }
    int v17 = *v3;
    switch(v17)
    {
      case 9:
        int v18 = (-*(_DWORD *)(v4 + 72) & 7) + *(_DWORD *)(v4 + 72);
        goto LABEL_27;
      case 13:
        int v18 = 0;
        goto LABEL_27;
      case 10:
        int v18 = 0;
        ++*(_DWORD *)(v4 + 76);
LABEL_27:
        *(_DWORD *)(v4 + 72) = v18;
        break;
    }
LABEL_28:
    v3 += v16;
    if (v3 >= v15) {
      return this;
    }
  }
  int v9 = v15;
  *(void *)(v4 + 96) = 0;
LABEL_31:
  return (uint64_t)llvm::SmallVectorImpl<char>::append<char const*,void>(v5, v3, v9);
}

uint64_t llvm::formatted_raw_ostream::ComputePosition(llvm::formatted_raw_ostream *this, char *a2, uint64_t a3)
{
  uint64_t v5 = (char *)*((void *)this + 10);
  uint64_t v6 = &a2[a3];
  if (v5 < a2 || v5 > v6) {
    uint64_t v5 = a2;
  }
  else {
    a3 = v6 - v5;
  }
  uint64_t result = llvm::formatted_raw_ostream::UpdatePosition((uint64_t)this, v5, a3);
  *((void *)this + 10) = v6;
  return result;
}

llvm::raw_ostream *llvm::formatted_raw_ostream::PadToColumn(char **this, int a2)
{
  llvm::formatted_raw_ostream::ComputePosition((llvm::formatted_raw_ostream *)this, this[2], this[4] - this[2]);
  llvm::formatted_raw_ostream::ComputePosition((llvm::formatted_raw_ostream *)this, this[2], this[4] - this[2]);
  int v4 = a2 - *((_DWORD *)this + 18);
  if (v4 <= 1) {
    size_t v5 = 1;
  }
  else {
    size_t v5 = v4;
  }
  return llvm::raw_ostream::indent((llvm::raw_ostream *)this, v5);
}

llvm::raw_ostream *llvm::formatted_raw_ostream::write_impl(llvm::raw_ostream **this, char *a2, size_t a3)
{
  llvm::formatted_raw_ostream::ComputePosition((llvm::formatted_raw_ostream *)this, a2, a3);
  uint64_t result = llvm::raw_ostream::write(this[8], a2, a3);
  this[10] = 0;
  return result;
}

void llvm::formatted_raw_ostream::~formatted_raw_ostream(llvm::formatted_raw_ostream *this)
{
  llvm::formatted_raw_ostream::~formatted_raw_ostream(this);
  JUMPOUT(0x263E500B0);
}

{
  const char *v2;
  const char *v3;
  char *v4;
  uint64_t vars8;

  *(void *)this = &unk_270DBCD60;
  int v2 = (const char *)*((void *)this + 4);
  size_t v3 = (const char *)*((void *)this + 2);
  if (v2 != v3)
  {
    *((void *)this + 4) = v3;
    llvm::raw_ostream::flush_tied_then_write(this, v3, v2 - v3);
  }
  llvm::formatted_raw_ostream::releaseStream(this);
  int v4 = (char *)*((void *)this + 11);
  if (v4 != (char *)this + 112) {
    free(v4);
  }
  llvm::raw_ostream::~raw_ostream(this);
}

uint64_t llvm::formatted_raw_ostream::changeColor(uint64_t a1)
{
  return a1;
}

llvm::formatted_raw_ostream *llvm::formatted_raw_ostream::resetColor(llvm::formatted_raw_ostream *this)
{
  return this;
}

llvm::formatted_raw_ostream *llvm::formatted_raw_ostream::reverseColor(llvm::formatted_raw_ostream *this)
{
  return this;
}

uint64_t llvm::formatted_raw_ostream::is_displayed(llvm::formatted_raw_ostream *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 8) + 48))();
}

uint64_t llvm::raw_ostream::has_colors(llvm::raw_ostream *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 48))();
}

uint64_t llvm::raw_ostream::enable_colors(uint64_t this, char a2)
{
  *(unsigned char *)(this + 40) = a2;
  return this;
}

uint64_t llvm::formatted_raw_ostream::current_pos(llvm::formatted_raw_ostream *this)
{
  uint64_t v1 = (void *)*((void *)this + 8);
  return (*(uint64_t (**)(void *))(*v1 + 80))(v1) + v1[4] - v1[2];
}

void *llvm::formatted_raw_ostream::setStream(llvm::formatted_raw_ostream *this, llvm::raw_ostream *a2)
{
  llvm::formatted_raw_ostream::releaseStream(this);
  *((void *)this + 8) = a2;
  uint64_t v4 = *((void *)a2 + 2);
  if (*((_DWORD *)a2 + 14)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    uint64_t v6 = (*(uint64_t (**)(llvm::raw_ostream *))(*(void *)a2 + 88))(a2);
  }
  else {
    uint64_t v6 = *((void *)a2 + 3) - v4;
  }
  if (v6) {
    llvm::raw_ostream::SetBufferSize(this);
  }
  llvm::raw_ostream::SetUnbuffered(this);
  uint64_t result = llvm::raw_ostream::SetUnbuffered(*((void **)this + 8));
  *((void *)this + 10) = 0;
  return result;
}

llvm::raw_ostream *llvm::formatted_raw_ostream::releaseStream(llvm::formatted_raw_ostream *this)
{
  uint64_t result = (llvm::raw_ostream *)*((void *)this + 8);
  if (result)
  {
    uint64_t v3 = *((void *)this + 2);
    if (*((_DWORD *)this + 14)) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4)
    {
      uint64_t v5 = (*(uint64_t (**)(llvm::formatted_raw_ostream *))(*(void *)this + 88))(this);
      uint64_t result = (llvm::raw_ostream *)*((void *)this + 8);
      if (v5)
      {
LABEL_7:
        llvm::raw_ostream::SetBufferSize(result);
      }
    }
    else if (*((void *)this + 3) != v3)
    {
      goto LABEL_7;
    }
    return (llvm::raw_ostream *)llvm::raw_ostream::SetUnbuffered(result);
  }
  return result;
}

void llvm::raw_ostream::SetBufferSize(llvm::raw_ostream *this)
{
  uint64_t v1 = (const char *)*((void *)this + 4);
  int v2 = (const char *)*((void *)this + 2);
  if (v1 != v2)
  {
    *((void *)this + 4) = v2;
    llvm::raw_ostream::flush_tied_then_write(this, v2, v1 - v2);
  }
  operator new[]();
}

unsigned char *llvm::formatv_object_base::splitLiteralAndReplacement@<X0>(unsigned char *result@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  uint64_t v48 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    *(_OWORD *)((char *)v47 + 3) = 0uLL;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(_DWORD *)a3 = 2;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 8) = result;
    *(void *)(a3 + 16) = 0;
    goto LABEL_8;
  }
  if (*result != 123)
  {
    uint64_t result = memchr(result, 123, a2);
    unint64_t v9 = result - v3;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    if (!result) {
      unint64_t v9 = -1;
    }
    *(uint64_t *)((char *)&v47[1] + 3) = 0;
    if (a2 < v9) {
      unint64_t v9 = a2;
    }
    goto LABEL_13;
  }
  uint64_t v6 = 1;
  while (a2 != v6)
  {
    int v7 = result[v6++];
    if (v7 != 123)
    {
      unint64_t v8 = v6 - 1;
      goto LABEL_15;
    }
  }
  unint64_t v8 = -1;
LABEL_15:
  if (a2 < v8) {
    unint64_t v8 = a2;
  }
  if (v8 < 2)
  {
    uint64_t result = memchr(result, 125, a2);
    if (result)
    {
      unint64_t v12 = result;
      int v13 = (unsigned char *)(result - v3);
      if (result - v3 != -1)
      {
        if (a2 >= 2)
        {
          uint64_t result = memchr(v3 + 1, 123, a2 - 1);
          unint64_t v9 = result - v3;
          if (!result) {
            unint64_t v9 = -1;
          }
          if (v9 < (unint64_t)v13)
          {
            if (a2 < v9) {
              unint64_t v9 = a2;
            }
            *(void *)(a3 + 24) = 0;
            *(void *)(a3 + 32) = 0;
            *(uint64_t *)((char *)&v47[1] + 3) = 0;
LABEL_13:
            *(uint64_t *)((char *)v47 + 3) = 0;
            *(_DWORD *)a3 = 2;
            *(void *)(a3 + 8) = v3;
            *(void *)(a3 + 16) = v9;
            *(_DWORD *)(a3 + 40) = 2;
            *(unsigned char *)(a3 + 44) = 0;
            *(_OWORD *)(a3 + 45) = *(_OWORD *)v47;
            *(_DWORD *)(a3 + 60) = *(_DWORD *)((char *)&v47[1] + 7);
            *(void *)(a3 + 64) = &v3[v9];
            *(void *)(a3 + 72) = a2 - v9;
            return result;
          }
        }
        if (v12 == v3) {
          unint64_t v14 = 1;
        }
        else {
          unint64_t v14 = (unint64_t)v13;
        }
        if (v14 >= a2) {
          unint64_t v14 = a2;
        }
        unint64_t v15 = v14 - 1;
        if (a2 >= (unint64_t)(v13 + 1)) {
          size_t v16 = (size_t)(v13 + 1);
        }
        else {
          size_t v16 = a2;
        }
        int v17 = &v3[v16];
        size_t v18 = a2 - v16;
        v47[0] = (uint64_t)(v3 + 1);
        v47[1] = v15;
        std::string::size_type v45 = (unsigned char *)llvm::StringRef::trim(v47, "{}", 2);
        unint64_t v46 = v19;
        std::string::size_type v45 = (unsigned char *)llvm::StringRef::trim((uint64_t *)&v45, " \t\n\v\f\r", 6);
        unint64_t v46 = v20;
        v44[0] = 0;
        uint64_t result = (unsigned char *)llvm::consumeUnsignedInteger((llvm *)&v45, 0, (unint64_t *)v44, v21);
        if (result)
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          int v24 = 0;
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          char v27 = 0;
          LOWORD(v44[0]) = 0;
          BYTE2(v44[0]) = 0;
          long long v28 = 0uLL;
          int v29 = 2;
LABEL_66:
          *(_DWORD *)a3 = v24;
          *(_DWORD *)(a3 + 4) = 0;
          *(_OWORD *)(a3 + 8) = v28;
          *(void *)(a3 + 24) = v22;
          *(void *)(a3 + 32) = v23;
          *(_DWORD *)(a3 + 40) = v29;
          *(unsigned char *)(a3 + 44) = v27;
          *(_WORD *)(a3 + 45) = v44[0];
          *(unsigned char *)(a3 + 47) = BYTE2(v44[0]);
          *(void *)(a3 + 48) = v26;
          *(void *)(a3 + 56) = v25;
          *(void *)(a3 + 64) = v17;
          *(void *)(a3 + 72) = v18;
          return result;
        }
        uint64_t v22 = v44[0];
        uint64_t v30 = (unsigned char *)llvm::StringRef::trim((uint64_t *)&v45, " \t\n\v\f\r", 6);
        std::string::size_type v45 = v30;
        unint64_t v46 = v31;
        if (v31 && *v30 == 44)
        {
          BOOL v33 = v30 + 1;
          char v27 = 32;
          int v29 = 2;
          unint64_t v34 = v31 - 1;
          std::string::size_type v45 = v30 + 1;
          unint64_t v46 = v31 - 1;
          if (v31 != 1)
          {
            unint64_t v35 = v31 - 2;
            if (v31 == 2) {
              goto LABEL_58;
            }
            int v38 = (char)v30[2];
            uint64_t v36 = (uint64_t)(v30 + 2);
            int v37 = v38;
            if (v38 != 43)
            {
              if (v37 == 45)
              {
                int v29 = 0;
              }
              else
              {
                if (v37 != 61)
                {
                  int v43 = *v33;
                  if (v43 != 43)
                  {
                    if (v43 == 45)
                    {
                      int v29 = 0;
                    }
                    else
                    {
                      if (v43 != 61)
                      {
LABEL_58:
                        v44[0] = 0;
                        if (llvm::consumeUnsignedInteger((llvm *)&v45, 0, (unint64_t *)v44, v32)) {
                          uint64_t v23 = 0;
                        }
                        else {
                          uint64_t v23 = v44[0];
                        }
                        goto LABEL_61;
                      }
                      int v29 = 1;
                    }
                  }
LABEL_57:
                  std::string::size_type v45 = (unsigned char *)v36;
                  unint64_t v46 = v35;
                  goto LABEL_58;
                }
                int v29 = 1;
              }
            }
            char v27 = *v33;
            uint64_t v39 = 2;
            if (v34 < 2) {
              uint64_t v39 = v31 - 1;
            }
            uint64_t v36 = (uint64_t)&v33[v39];
            unint64_t v35 = v34 - v39;
            goto LABEL_57;
          }
          uint64_t v23 = 0;
        }
        else
        {
          uint64_t v23 = 0;
          char v27 = 32;
          int v29 = 2;
        }
LABEL_61:
        uint64_t v40 = (unsigned char *)llvm::StringRef::trim((uint64_t *)&v45, " \t\n\v\f\r", 6);
        std::string::size_type v45 = v40;
        unint64_t v46 = v41;
        if (v41 && *v40 == 58)
        {
          v44[0] = (uint64_t)(v40 + 1);
          v44[1] = v41 - 1;
          uint64_t v26 = llvm::StringRef::trim(v44, " \t\n\v\f\r", 6);
          uint64_t v25 = v42;
          std::string::size_type v45 = 0;
          unint64_t v46 = 0;
        }
        else
        {
          uint64_t v25 = 0;
          uint64_t v26 = 0;
        }
        uint64_t result = (unsigned char *)llvm::StringRef::trim((uint64_t *)&v45, " \t\n\v\f\r", 6);
        int v24 = 1;
        long long v28 = *(_OWORD *)v47;
        goto LABEL_66;
      }
    }
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(uint64_t *)((char *)&v47[1] + 3) = 0;
    *(uint64_t *)((char *)v47 + 3) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(_DWORD *)a3 = 2;
    *(void *)(a3 + 8) = v3;
    *(void *)(a3 + 16) = a2;
LABEL_8:
    *(_DWORD *)(a3 + 40) = 2;
    *(unsigned char *)(a3 + 44) = 0;
    *(_OWORD *)(a3 + 45) = *(_OWORD *)v47;
    *(_DWORD *)(a3 + 60) = *(_DWORD *)((char *)&v47[1] + 7);
    return result;
  }
  unint64_t v10 = v8 >> 1;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(uint64_t *)((char *)&v47[1] + 3) = 0;
  if (a2 < v8 >> 1) {
    unint64_t v10 = a2;
  }
  unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (a2 < v11) {
    unint64_t v11 = a2;
  }
  *(uint64_t *)((char *)v47 + 3) = 0;
  *(_DWORD *)a3 = 2;
  *(void *)(a3 + 8) = result;
  *(void *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 40) = 2;
  *(unsigned char *)(a3 + 44) = 0;
  *(_OWORD *)(a3 + 45) = *(_OWORD *)v47;
  *(_DWORD *)(a3 + 60) = 0;
  *(void *)(a3 + 64) = &result[v11];
  *(void *)(a3 + 72) = a2 - v11;
  return result;
}

__n128 llvm::formatv_object_base::parseFormatString@<Q0>(unsigned char *a1@<X0>, size_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a3 + 2;
  a3[1] = 0x200000000;
  *(_DWORD *)size_t v16 = 0;
  result.n128_u64[0] = 0;
  memset(&v16[8], 0, 32);
  *(_DWORD *)&v16[40] = 2;
  v16[44] = 0;
  long long v17 = 0uLL;
  if (a2)
  {
    size_t v5 = a2;
    do
    {
      llvm::formatv_object_base::splitLiteralAndReplacement(a1, v5, (uint64_t)v11);
      *(_OWORD *)size_t v16 = v11[0];
      *(_OWORD *)&v16[16] = v11[1];
      result.n128_u64[0] = v12;
      *(_OWORD *)&v16[32] = v12;
      long long v17 = v13;
      a1 = v14;
      size_t v5 = v15;
      if (LODWORD(v11[0]))
      {
        unint64_t v7 = llvm::SmallVectorTemplateCommon<llvm::ReplacementItem,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::ReplacementItem,true>>((uint64_t)a3, (unint64_t)v16, 1);
        unint64_t v8 = *a3 + ((unint64_t)*((unsigned int *)a3 + 2) << 6);
        __n128 result = *(__n128 *)v7;
        long long v9 = *(_OWORD *)(v7 + 16);
        long long v10 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v8 + 32) = *(_OWORD *)(v7 + 32);
        *(_OWORD *)(v8 + 48) = v10;
        *(__n128 *)unint64_t v8 = result;
        *(_OWORD *)(v8 + 16) = v9;
        ++*((_DWORD *)a3 + 2);
      }
    }
    while (v5);
  }
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<llvm::ReplacementItem,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::ReplacementItem,true>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    unint64_t v7 = *(void *)a1 + (v4 << 6);
    if (*(void *)a1 <= a2 && v7 > a2)
    {
      unint64_t v9 = a2 - *(void *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 64);
      return *(void *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 64);
    }
  }
  return v3;
}

uint64_t llvm::object_deleter<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>>::call(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

unint64_t llvm::json::Object::getInteger(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::find_as<llvm::StringRef>(a1, (uint64_t)v6);
  if (*(void *)a1 + 56 * *(unsigned int *)(a1 + 16) == v4) {
    return 0;
  }
  else {
    return llvm::json::Value::getAsInteger((llvm::json::Value *)(v4 + 24));
  }
}

unint64_t llvm::json::Value::getAsInteger(llvm::json::Value *this)
{
  int v1 = *(unsigned __int16 *)this;
  if (v1 == 3)
  {
    uint64_t v2 = *((void *)this + 1);
  }
  else
  {
    if (v1 != 2
      || (long double __y = *((double *)this + 1), modf(__y, &__y) != 0.0)
      || (__y >= -9.22337204e18 ? (BOOL v5 = __y > 9.22337204e18) : (BOOL v5 = 1), v5))
    {
      unint64_t v3 = 0;
      LOBYTE(v2) = 0;
      return v2 | v3;
    }
    uint64_t v2 = (uint64_t)__y;
  }
  unint64_t v3 = v2 & 0xFFFFFFFFFFFFFF00;
  return v2 | v3;
}

uint64_t llvm::json::Object::getString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v14[0] = a2;
  v14[1] = a3;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::find_as<llvm::StringRef>(a1, (uint64_t)v14);
  if (*(void *)a1 + 56 * *(unsigned int *)(a1 + 16) == result) {
    goto LABEL_11;
  }
  int v7 = *(unsigned __int16 *)(result + 24);
  if (v7 == 6)
  {
    uint64_t v9 = *(void *)(result + 32);
    result += 32;
    uint64_t v8 = v9;
    int v10 = *(char *)(result + 23);
    BOOL v11 = v10 < 0;
    if (v10 >= 0) {
      uint64_t v8 = result;
    }
    uint64_t v12 = *(unsigned __int8 *)(result + 23);
    if (v11) {
      uint64_t v12 = *(void *)(result + 8);
    }
    *(void *)a4 = v8;
    *(void *)(a4 + 8) = v12;
    goto LABEL_10;
  }
  if (v7 != 5)
  {
LABEL_11:
    char v13 = 0;
    *(unsigned char *)a4 = 0;
    goto LABEL_12;
  }
  *(_OWORD *)a4 = *(_OWORD *)(result + 32);
LABEL_10:
  char v13 = 1;
LABEL_12:
  *(unsigned char *)(a4 + 16) = v13;
  return result;
}

uint64_t llvm::json::Object::getObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v7 = 0;
  int v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v6, &v7);
  uint64_t result = 0;
  if (v4 && v7 != *(void *)a1 + 56 * *(unsigned int *)(a1 + 16))
  {
    if (*(_WORD *)(v7 + 24) == 7) {
      return v7 + 32;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::json::Object::getArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::find_as<llvm::StringRef>(a1, (uint64_t)v6);
  if (*(void *)a1 + 56 * *(unsigned int *)(a1 + 16) == v4) {
    return 0;
  }
  if (*(_WORD *)(v4 + 24) == 8) {
    return v4 + 32;
  }
  return 0;
}

uint64_t llvm::json::Value::moveFrom(uint64_t result, unsigned __int16 *a2)
{
  int v2 = *a2;
  *(_WORD *)uint64_t result = v2;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      long long v3 = *(_OWORD *)(a2 + 4);
      *(void *)(result + 24) = *((void *)a2 + 3);
      goto LABEL_3;
    case 5:
      long long v3 = *(_OWORD *)(a2 + 4);
LABEL_3:
      *(_OWORD *)(result + 8) = v3;
      return result;
    case 6:
      long long v4 = *(_OWORD *)(a2 + 4);
      *(void *)(result + 24) = *((void *)a2 + 3);
      *(_OWORD *)(result + 8) = v4;
      *((void *)a2 + 2) = 0;
      *((void *)a2 + 3) = 0;
      *((void *)a2 + 1) = 0;
      goto LABEL_8;
    case 7:
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(_DWORD *)(result + 24) = 0;
      *(void *)(result + 8) = *((void *)a2 + 1);
      *((void *)a2 + 1) = 0;
      *(_DWORD *)(result + 16) = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = 0;
      int v5 = *(_DWORD *)(result + 20);
      *(_DWORD *)(result + 20) = *((_DWORD *)a2 + 5);
      *((_DWORD *)a2 + 5) = v5;
      int v6 = *(_DWORD *)(result + 24);
      *(_DWORD *)(result + 24) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v6;
      goto LABEL_8;
    case 8:
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0;
      *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 4);
      *(void *)(result + 24) = *((void *)a2 + 3);
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *((void *)a2 + 3) = 0;
LABEL_8:
      *a2 = 0;
      break;
    default:
      return result;
  }
  return result;
}

void llvm::json::Value::copyFrom(llvm::json::Value *this, const llvm::json::Value *a2)
{
  int v2 = *(unsigned __int16 *)a2;
  *(_WORD *)this = v2;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      long long v3 = *(_OWORD *)((char *)a2 + 8);
      *((void *)this + 3) = *((void *)a2 + 3);
      goto LABEL_3;
    case 5:
      long long v3 = *(_OWORD *)((char *)a2 + 8);
LABEL_3:
      *(_OWORD *)((char *)this + 8) = v3;
      break;
    case 6:
      long long v4 = (std::string *)((char *)this + 8);
      if (*((char *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
      }
      else
      {
        long long v5 = *(_OWORD *)((char *)a2 + 8);
        v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 3);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
      }
      break;
    case 7:
      *((void *)this + 1) = 0;
      *((void *)this + 2) = 0;
      int v6 = (char *)this + 8;
      *((_DWORD *)v6 + 4) = 0;
      llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::copyFrom((uint64_t)v6, (uint64_t)a2 + 8);
      break;
    case 8:
      *((void *)this + 1) = 0;
      *((void *)this + 2) = 0;
      uint64_t v7 = (char *)this + 8;
      *((void *)v7 + 2) = 0;
      std::vector<llvm::json::Value>::__init_with_size[abi:nn180100]<llvm::json::Value*,llvm::json::Value*>(v7, *((const llvm::json::Value **)a2 + 1), *((const llvm::json::Value **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 5);
      break;
    default:
      return;
  }
}

void llvm::json::Value::destroy(llvm::json::Value *this)
{
  int v1 = *(unsigned __int16 *)this;
  if (v1 == 8)
  {
    long long v3 = (void **)((char *)this + 8);
    std::vector<llvm::json::Value>::__destroy_vector::operator()[abi:nn180100](&v3);
  }
  else
  {
    if (v1 == 7)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::destroyAll((char *)this + 8);
      JUMPOUT(0x263E500A0);
    }
    if (v1 == 6 && *((char *)this + 31) < 0)
    {
      int v2 = (void *)*((void *)this + 1);
      operator delete(v2);
    }
  }
}

void llvm::json::parse(llvm *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  LOBYTE(v12) = 0;
  char v13 = 0;
  unint64_t v14 = a1;
  size_t v15 = a1;
  size_t v16 = (unsigned __int8 *)a1 + a2;
  uint64_t v17 = 0;
  v18[0] = 0;
  if (!llvm::json::isUTF8(a1, a2, (unsigned __int8 *)&v17))
  {
    size_t v15 = (llvm *)((char *)a1 + v17);
    int v10 = "Invalid UTF-8 sequence";
    goto LABEL_11;
  }
  {
    long long v5 = (unsigned __int8 *)v15;
    if (v15 != (llvm *)v16)
    {
      while (1)
      {
        unsigned int v6 = *v5;
        BOOL v7 = v6 > 0x20;
        uint64_t v8 = (1 << v6) & 0x100002600;
        if (v7 || v8 == 0) {
          break;
        }
        size_t v15 = (llvm *)++v5;
        if (v5 == v16) {
          goto LABEL_9;
        }
      }
      if (v5 != v16)
      {
        int v10 = "Text after end of document";
LABEL_11:
      }
    }
LABEL_9:
    *(unsigned char *)(a3 + 32) &= ~1u;
    llvm::json::Value::moveFrom(a3, v18);
  }
  else
  {
    uint64_t v11 = v12;
    uint64_t v12 = 0;
    *(unsigned char *)(a3 + 32) |= 1u;
    *(void *)a3 = v11;
  }
  llvm::json::Value::destroy((llvm::json::Value *)v18);
  if (v13)
  {
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
}

uint64_t llvm::json::anonymous namespace'::Parser::parseValue(llvm::json::_anonymous_namespace_::Parser *this, llvm::json::Value *a2)
{
  v77[3] = *MEMORY[0x263EF8340];
  long long v3 = (char *)*((void *)this + 3);
  long long v4 = (unsigned __int8 *)*((void *)this + 4);
  if (v3 == (char *)v4) {
    goto LABEL_7;
  }
  while (1)
  {
    unsigned int v6 = *v3;
    BOOL v7 = v6 > 0x20;
    uint64_t v8 = (1 << v6) & 0x100002600;
    if (v7 || v8 == 0) {
      break;
    }
    *((void *)this + 3) = ++v3;
    if (v3 == (char *)v4) {
      goto LABEL_7;
    }
  }
  if (v3 == (char *)v4)
  {
LABEL_7:
    int v10 = "Unexpected EOF";
    goto LABEL_8;
  }
  *((void *)this + 3) = v3 + 1;
  int v12 = *v3;
  if (v12 > 109)
  {
    if (v12 != 123)
    {
      if (v12 == 116)
      {
        LOWORD(v75) = 1;
        LOBYTE(v76) = 1;
        llvm::json::Value::destroy(a2);
        llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v75);
        llvm::json::Value::destroy((llvm::json::Value *)&v75);
        long long v58 = (unsigned char *)*((void *)this + 3);
        unint64_t v59 = (unsigned char *)*((void *)this + 4);
        if (v58 == v59
          || (*((void *)this + 3) = v58 + 1, *v58 != 114)
          || v58 + 1 == v59
          || (*((void *)this + 3) = v58 + 2, v58[1] != 117)
          || v58 + 2 == v59
          || (*((void *)this + 3) = v58 + 3, v58[2] != 101))
        {
          int v10 = "Invalid JSON value (true?)";
          goto LABEL_8;
        }
      }
      else
      {
        if (v12 != 110)
        {
LABEL_111:
          int v60 = v12;
          unsigned int v61 = v12 - 43;
          if (v61 <= 0x3A && ((1 << v61) & 0x400000004007FEDLL) != 0)
          {
            uint64_t v75 = v77;
            long long v76 = xmmword_261E8A770;
            llvm::SmallVectorTemplateBase<char,true>::push_back(&v75, v60);
            for (uint64_t i = (char *)*((void *)this + 3); i != *((char **)this + 4); uint64_t i = (char *)*((void *)this + 3))
            {
              int v63 = *i;
              if ((v63 - 48) >= 0xA)
              {
                unsigned int v64 = v63 - 43;
                BOOL v7 = v64 > 0x3A;
                uint64_t v65 = (1 << v64) & 0x40000000400000DLL;
                if (v7 || v65 == 0) {
                  break;
                }
              }
              *((void *)this + 3) = i + 1;
              llvm::SmallVectorTemplateBase<char,true>::push_back(&v75, *i);
            }
            __endptr[0] = 0;
            *__error() = 0;
            llvm::SmallVectorTemplateBase<char,true>::push_back(&v75, 0);
            *(void *)&long long v76 = v76 - 1;
            uint64_t v67 = strtoll((const char *)v75, __endptr, 10);
            if (__endptr[0] == (char *)v75 + (void)v76 && (std::string::size_type v68 = v67, *__error() != 34))
            {
              __int16 v71 = 3;
            }
            else
            {
              if (v60 == 45
                || (*__error() = 0,
                    llvm::SmallVectorTemplateBase<char,true>::push_back(&v75, 0),
                    *(void *)&long long v76 = v76 - 1,
                    unint64_t v69 = strtoull((const char *)v75, __endptr, 10),
                    __endptr[0] != (char *)v75 + (void)v76)
                || (std::string::size_type v68 = v69, *__error() == 34))
              {
                llvm::SmallVectorTemplateBase<char,true>::push_back(&v75, 0);
                *(void *)&long long v76 = v76 - 1;
                double v70 = strtod((const char *)v75, __endptr);
                LOWORD(v74.__r_.__value_.__l.__data_) = 2;
                *(double *)&v74.__r_.__value_.__l.__size_ = v70;
                llvm::json::Value::destroy(a2);
                llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v74);
                llvm::json::Value::destroy((llvm::json::Value *)&v74);
                if (__endptr[0] != (char *)v75 + (void)v76) {
                goto LABEL_138;
                }
              }
              __int16 v71 = 4;
            }
            LOWORD(v74.__r_.__value_.__l.__data_) = v71;
            v74.__r_.__value_.__l.__size_ = v68;
            llvm::json::Value::destroy(a2);
            llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v74);
            llvm::json::Value::destroy((llvm::json::Value *)&v74);
LABEL_138:
            char v18 = 1;
            if (v75 != v77) {
              free(v75);
            }
            return v18 & 1;
          }
          int v10 = "Invalid JSON value";
LABEL_8:
        }
        LOWORD(v75) = 0;
        llvm::json::Value::destroy(a2);
        llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v75);
        llvm::json::Value::destroy((llvm::json::Value *)&v75);
        size_t v15 = (unsigned char *)*((void *)this + 3);
        size_t v16 = (unsigned char *)*((void *)this + 4);
        if (v15 == v16
          || (*((void *)this + 3) = v15 + 1, *v15 != 117)
          || v15 + 1 == v16
          || (*((void *)this + 3) = v15 + 2, v15[1] != 108)
          || v15 + 2 == v16
          || (*((void *)this + 3) = v15 + 3, v15[2] != 108))
        {
          int v10 = "Invalid JSON value (null?)";
          goto LABEL_8;
        }
      }
LABEL_135:
      char v18 = 1;
      return v18 & 1;
    }
    LOWORD(v75) = 7;
    long long v76 = 0uLL;
    memset(&v74, 0, sizeof(v74));
    LODWORD(v77[0]) = 0;
    llvm::json::Value::destroy(a2);
    llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v75);
    llvm::json::Value::destroy((llvm::json::Value *)&v75);
    llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::destroyAll((uint64_t)&v74);
    MEMORY[0x263E500A0](v74.__r_.__value_.__r.__words[0], 8);
    unint64_t v21 = (unsigned __int8 *)*((void *)this + 3);
    std::string::size_type v45 = (unsigned __int8 *)*((void *)this + 4);
    if (v21 == v45) {
      goto LABEL_81;
    }
    while (1)
    {
      unsigned int v46 = *v21;
      if (v46 > 0x20 || ((1 << v46) & 0x100002600) == 0) {
        break;
      }
      *((void *)this + 3) = ++v21;
      if (v21 == v45) {
        goto LABEL_81;
      }
    }
    if (v21 == v45 || v46 != 125)
    {
LABEL_81:
      uint64_t v48 = (unsigned char *)*((void *)this + 3);
      if (v48 == *((unsigned char **)this + 4) || (*((void *)this + 3) = v48 + 1, *v48 != 34))
      {
        int v10 = "Expected object key";
        goto LABEL_8;
      }
      memset(&v74, 0, sizeof(v74));
      {
        unint64_t v50 = (unsigned __int8 *)*((void *)this + 3);
        size_t v49 = (unsigned __int8 *)*((void *)this + 4);
        while (1)
        {
          if (v50 == v49) {
            goto LABEL_99;
          }
          unsigned int v51 = *v50;
          BOOL v7 = v51 > 0x20;
          uint64_t v52 = (1 << v51) & 0x100002600;
          if (v7 || v52 == 0) {
            break;
          }
          *((void *)this + 3) = ++v50;
        }
        if (v50 != v49)
        {
          int v54 = v50 + 1;
          *((void *)this + 3) = v50 + 1;
          if (*v50 == 58)
          {
            while (v54 != v49)
            {
              unsigned int v55 = *v54;
              BOOL v7 = v55 > 0x20;
              uint64_t v56 = (1 << v55) & 0x100002600;
              if (v7 || v56 == 0) {
                break;
              }
              *((void *)this + 3) = ++v54;
            }
            memset(&v74, 0, sizeof(v74));
            llvm::json::ObjectKey::ObjectKey();
          }
        }
LABEL_99:
      }
      char v18 = 0;
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      return v18 & 1;
    }
LABEL_134:
    *((void *)this + 3) = v21 + 1;
    goto LABEL_135;
  }
  if (v12 == 34)
  {
    memset(&v74, 0, sizeof(v74));
    char v18 = v17;
    if (v17)
    {
      std::string __p = v74;
      memset(&v74, 0, sizeof(v74));
      llvm::json::Value::Value((uint64_t)&v75, (uint64_t *)&__p);
      llvm::json::Value::destroy(a2);
      llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v75);
      llvm::json::Value::destroy((llvm::json::Value *)&v75);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    return v18 & 1;
  }
  if (v12 != 91)
  {
    if (v12 == 102)
    {
      LOWORD(v75) = 1;
      LOBYTE(v76) = 0;
      llvm::json::Value::destroy(a2);
      llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v75);
      llvm::json::Value::destroy((llvm::json::Value *)&v75);
      char v13 = (unsigned char *)*((void *)this + 3);
      unint64_t v14 = (unsigned char *)*((void *)this + 4);
      if (v13 == v14
        || (*((void *)this + 3) = v13 + 1, *v13 != 97)
        || v13 + 1 == v14
        || (*((void *)this + 3) = v13 + 2, v13[1] != 108)
        || v13 + 2 == v14
        || (*((void *)this + 3) = v13 + 3, v13[2] != 115)
        || v13 + 3 == v14
        || (*((void *)this + 3) = v13 + 4, v13[3] != 101))
      {
        int v10 = "Invalid JSON value (false?)";
        goto LABEL_8;
      }
      goto LABEL_135;
    }
    goto LABEL_111;
  }
  LOWORD(v75) = 8;
  v77[0] = 0;
  long long v76 = 0uLL;
  memset(&v74, 0, sizeof(v74));
  llvm::json::Value::destroy(a2);
  llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v75);
  llvm::json::Value::destroy((llvm::json::Value *)&v75);
  __endptr[0] = (char *)&v74;
  std::vector<llvm::json::Value>::__destroy_vector::operator()[abi:nn180100]((void ***)__endptr);
  int v20 = *(unsigned __int16 *)a2;
  uint64_t v19 = (uint64_t *)((char *)a2 + 8);
  if (v20 != 8) {
    uint64_t v19 = 0;
  }
  unint64_t v21 = (unsigned __int8 *)*((void *)this + 3);
  uint64_t v22 = (unsigned __int8 *)*((void *)this + 4);
  if (v21 != v22)
  {
    while (1)
    {
      unsigned int v23 = *v21;
      if (v23 > 0x20 || ((1 << v23) & 0x100002600) == 0) {
        break;
      }
      *((void *)this + 3) = ++v21;
      if (v21 == v22) {
        goto LABEL_47;
      }
    }
    if (v21 != v22 && v23 == 93) {
      goto LABEL_134;
    }
  }
  while (1)
  {
LABEL_47:
    uint64_t v26 = (_WORD *)v19[1];
    unint64_t v25 = v19[2];
    if ((unint64_t)v26 >= v25)
    {
      uint64_t v28 = ((uint64_t)v26 - *v19) >> 5;
      if ((unint64_t)(v28 + 1) >> 59) {
        abort();
      }
      uint64_t v29 = v25 - *v19;
      uint64_t v30 = v29 >> 4;
      if (v29 >> 4 <= (unint64_t)(v28 + 1)) {
        uint64_t v30 = v28 + 1;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v30;
      }
      v77[1] = v19 + 2;
      if (v31) {
        size_t v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(v19 + 2), v31);
      }
      else {
        size_t v32 = 0;
      }
      BOOL v33 = &v32[32 * v28];
      uint64_t v75 = v32;
      *(void *)&long long v76 = v33;
      v77[0] = &v32[32 * v31];
      *(_WORD *)BOOL v33 = 0;
      *((void *)&v76 + 1) = v33 + 32;
      std::vector<llvm::json::Value>::__swap_out_circular_buffer(v19, &v75);
      char v27 = (_WORD *)v19[1];
      std::__split_buffer<llvm::json::Value>::~__split_buffer((uint64_t)&v75);
    }
    else
    {
      *uint64_t v26 = 0;
      char v27 = v26 + 16;
    }
    v19[1] = (uint64_t)v27;
    char v18 = v34;
    if (!v34) {
      return v18 & 1;
    }
    uint64_t v36 = (unsigned __int8 *)*((void *)this + 3);
    unint64_t v35 = (unsigned __int8 *)*((void *)this + 4);
    while (1)
    {
      if (v36 == v35) {
        goto LABEL_142;
      }
      unsigned int v37 = *v36;
      BOOL v7 = v37 > 0x20;
      uint64_t v38 = (1 << v37) & 0x100002600;
      if (v7 || v38 == 0) {
        break;
      }
      *((void *)this + 3) = ++v36;
    }
    if (v36 == v35) {
      goto LABEL_142;
    }
    uint64_t v40 = v36 + 1;
    *((void *)this + 3) = v36 + 1;
    int v41 = (char)*v36;
    if (v41 != 44) {
      break;
    }
    while (v40 != v35)
    {
      unsigned int v42 = *v40;
      BOOL v7 = v42 > 0x20;
      uint64_t v43 = (1 << v42) & 0x100002600;
      if (v7 || v43 == 0) {
        break;
      }
      *((void *)this + 3) = ++v40;
    }
  }
  if (v41 != 93)
  {
LABEL_142:
    int v10 = "Expected , or ] after array element";
    goto LABEL_8;
  }
  return v18 & 1;
}

BOOL llvm::json::isUTF8(llvm *a1, uint64_t a2, unsigned __int8 *a3)
{
  if (!a2) {
    return 1;
  }
  uint64_t v6 = 0;
  BOOL v7 = (const unsigned __int8 **)((char *)a1 + a2);
  while ((*((char *)a1 + v6) & 0x80000000) == 0)
  {
    if (a2 == ++v6) {
      return 1;
    }
  }
  int v10 = a1;
  BOOL isLegalUTF8String = llvm::isLegalUTF8String(&v10, v7, a3);
  BOOL result = isLegalUTF8String;
  if (!isLegalUTF8String)
  {
    if (a3) {
      *(void *)a3 = v10 - a1;
    }
  }
  return result;
}

void llvm::json::fixUTF8(char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  memset(&v17, 0, sizeof(v17));
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:nn180100](&v17, a2);
    std::vector<unsigned int>::pointer end = v17.__end_;
    bzero(v17.__end_, 4 * a2);
    BOOL v7 = &end[a2];
    v17.__end_ = v7;
    std::vector<std::string>::pointer begin = v17.__begin_;
  }
  else
  {
    BOOL v7 = 0;
    std::vector<std::string>::pointer begin = 0;
  }
  size_t v15 = begin;
  size_t v16 = a1;
  llvm::ConvertUTF8toUTF32Impl(&v16, &a1[a2], &v15, (unint64_t)v7, 1, 0);
  std::vector<unsigned int>::resize(&v17, v15 - v17.__begin_);
  std::string::basic_string[abi:nn180100]((void *)a3, (char *)v17.__end_ - (char *)v17.__begin_, 0);
  std::vector<unsigned int>::pointer v14 = v17.__begin_;
  if (*(char *)(a3 + 23) < 0)
  {
    int64_t v10 = (char *)v17.__end_ - (char *)v17.__begin_;
    uint64_t v11 = *(void *)a3;
    uint64_t v9 = *(void *)(a3 + 8);
  }
  else
  {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
    int64_t v10 = (char *)v17.__end_ - (char *)v17.__begin_;
    uint64_t v11 = a3;
  }
  uint64_t v13 = v11;
  llvm::ConvertUTF32toUTF8(&v14, (unint64_t)v17.__begin_ + v10, &v13, v11 + v9, 0);
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = *(void *)a3;
  }
  std::string::resize((std::string *)a3, v13 - v12, 0);
  if (v17.__begin_)
  {
    v17.__end_ = v17.__begin_;
    operator delete(v17.__begin_);
  }
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *((unsigned int *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::json::ObjectKey::ObjectKey(v22, (char *)0xFFFFFFFFFFFFFFFFLL, 0);
    llvm::json::ObjectKey::ObjectKey(v21, (char *)0xFFFFFFFFFFFFFFFELL, 0);
    int v9 = v4 - 1;
    unsigned int v10 = (v4 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a2, *(void *)a2 + *(void *)(a2 + 8), v7, v8);
    uint64_t v11 = v6 + 56 * v10;
    uint64_t v12 = (char **)(v11 + 8);
    uint64_t v13 = (size_t *)(v11 + 16);
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(void *)(a2 + 8), *(void **)(v11 + 8), *(void *)(v11 + 16)))
    {
      uint64_t v4 = 1;
    }
    else
    {
      uint64_t v20 = 0;
      int v19 = 1;
      uint64_t v4 = 1;
      while (!llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(v11 + 8), *(void *)(v11 + 16), (void *)v22[1], v22[2]))
      {
        BOOL isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*v12, *v13, (void *)v21[1], v21[2]);
        uint64_t v18 = v20;
        if (isEqual && v20 == 0) {
          uint64_t v18 = v11;
        }
        uint64_t v20 = v18;
        unsigned int v10 = (v10 + v19) & v9;
        uint64_t v11 = v6 + 56 * v10;
        uint64_t v12 = (char **)(v11 + 8);
        uint64_t v13 = (size_t *)(v11 + 16);
        ++v19;
        if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(void *)(a2 + 8), *(void **)(v11 + 8), *(void *)(v11 + 16)))
        {
          goto LABEL_4;
        }
      }
      uint64_t v4 = 0;
      if (v20) {
        uint64_t v11 = v20;
      }
    }
LABEL_4:
    *a3 = v11;
    uint64_t v14 = v21[0];
    v21[0] = 0;
    if (v14) {
      std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v21, v14);
    }
    uint64_t v15 = v22[0];
    v22[0] = 0;
    if (v15) {
      std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v22, v15);
    }
  }
  else
  {
    *a3 = 0;
  }
  return v4;
}

void *llvm::json::ObjectKey::ObjectKey(void *a1, char *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = a2;
  a1[2] = a3;
  if (!llvm::json::isUTF8((llvm *)a2, a3, 0))
  {
    llvm::json::fixUTF8(a2, a3, (uint64_t)&__p);
    llvm::json::ObjectKey::ObjectKey();
  }
  return a1;
}

void llvm::json::ObjectKey::ObjectKey()
{
}

void std::default_delete<std::string>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x263E500B0);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::find_as<llvm::StringRef>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a2, &v4))return v4; {
  else
  }
    return *(void *)a1 + 56 * *(unsigned int *)(a1 + 16);
}

void std::vector<llvm::json::Value>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  int v1 = *a1;
  std::vector<unsigned int>::size_type v2 = (llvm::json::Value *)**a1;
  if (v2)
  {
    uint64_t v4 = (llvm::json::Value *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v4 = (llvm::json::Value *)((char *)v4 - 32);
        llvm::json::Value::destroy(v4);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::destroyAll(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16))
  {
    llvm::json::ObjectKey::ObjectKey(v9, (char *)0xFFFFFFFFFFFFFFFFLL, 0);
    llvm::json::ObjectKey::ObjectKey(v8, (char *)0xFFFFFFFFFFFFFFFELL, 0);
    uint64_t v2 = *(unsigned int *)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = *(void *)a1;
      uint64_t v4 = 56 * v2;
      do
      {
        if (!llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(v3 + 8), *(void *)(v3 + 16), (void *)v9[1], v9[2])&& !llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(v3 + 8), *(void *)(v3 + 16), (void *)v8[1], v8[2]))
        {
          llvm::json::Value::destroy((llvm::json::Value *)(v3 + 24));
        }
        uint64_t v5 = *(void *)v3;
        *(void *)uint64_t v3 = 0;
        if (v5) {
          std::default_delete<std::string>::operator()[abi:nn180100](v3, v5);
        }
        v3 += 56;
        v4 -= 56;
      }
      while (v4);
    }
    uint64_t v6 = v8[0];
    v8[0] = 0;
    if (v6) {
      std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v8, v6);
    }
    uint64_t v7 = v9[0];
    v9[0] = 0;
    if (v7) {
      std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v9, v7);
    }
  }
}

uint64_t llvm::json::Value::Value(uint64_t a1, uint64_t *a2)
{
  *(_WORD *)a1 = 6;
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (llvm *)a2;
  }
  else {
    uint64_t v5 = (llvm *)*a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v6 = a2[1];
  }
  if (!llvm::json::isUTF8(v5, v6, 0))
  {
    int v9 = *((char *)a2 + 23);
    if (v9 >= 0) {
      unsigned int v10 = (char *)a2;
    }
    else {
      unsigned int v10 = (char *)*a2;
    }
    if (v9 >= 0) {
      unint64_t v11 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      unint64_t v11 = a2[1];
    }
    llvm::json::fixUTF8(v10, v11, (uint64_t)&v12);
    if (*((char *)a2 + 23) < 0) {
      operator delete((void *)*a2);
    }
    *(_OWORD *)a2 = v12;
    a2[2] = v13;
  }
  long long v7 = *(_OWORD *)a2;
  *(void *)(a1 + 24) = a2[2];
  *(_OWORD *)(a1 + 8) = v7;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return a1;
}

void llvm::json::anonymous namespace'::Parser::parseError(llvm::json::_anonymous_namespace_::Parser *this, const char *a2)
{
  unint64_t v2 = *((void *)this + 2);
  unint64_t v3 = *((void *)this + 3);
  if (v3 > v2)
  {
    unint64_t v4 = v2 + 1;
    int v5 = 1;
    unint64_t v6 = v3 - v2;
    do
    {
      int v7 = *(unsigned __int8 *)(v4 - 1);
      if (v7 == 10) {
        ++v5;
      }
      ++v4;
      --v6;
    }
    while (v6);
  }
  operator new();
}

void llvm::json::ParseError::~ParseError(llvm::json::ParseError *this)
{
}

void llvm::json::ParseError::log(llvm::json::ParseError *this, llvm::raw_ostream *a2)
{
  v2[0] = "[{0}:{1}, byte={2}]: {3}";
  v2[1] = 24;
  v2[2] = v7;
  uint64_t v2[3] = 4;
  v3[0] = &unk_270DBCE28;
  v3[1] = (char *)this + 16;
  v4[0] = &unk_270DBCE28;
  v4[1] = (char *)this + 20;
  v5[0] = &unk_270DBCE28;
  v5[1] = (char *)this + 24;
  v6[0] = &unk_270DBCE58;
  v6[1] = (char *)this + 8;
  v7[0] = v3;
  v7[1] = v4;
  void v7[2] = v5;
  v7[3] = v6;
  llvm::formatv_object_base::format((llvm::formatv_object_base *)v2, a2);
}

uint64_t llvm::json::ParseError::convertToErrorCode(llvm::json::ParseError *this)
{
  return 3;
}

void *llvm::ErrorInfo<llvm::json::ParseError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::json::ParseError::ID;
}

BOOL llvm::ErrorInfo<llvm::json::ParseError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::json::ParseError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::detail::provider_format_adapter<unsigned int const&>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned int const&>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned int,void>::format(*(unsigned int **)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *llvm::format_provider<unsigned int,void>::format(unsigned int *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  size_t v16 = a3;
  uint64_t v17 = a4;
  int v15 = 0;
  if (!llvm::detail::HelperFunctions::consumeHexStyle((const void **)&v16, &v15))
  {
    if (v17)
    {
      int v12 = 0;
      unsigned int v13 = *v16;
      if (v13 <= 0x63)
      {
        if (v13 != 68)
        {
          if (v13 != 78) {
            goto LABEL_19;
          }
          goto LABEL_16;
        }
LABEL_17:
        int v12 = 0;
        ++v16;
        goto LABEL_18;
      }
      if (v13 == 100) {
        goto LABEL_17;
      }
      if (v13 == 110)
      {
LABEL_16:
        ++v16;
        int v12 = 1;
LABEL_18:
        --v17;
      }
    }
    else
    {
      int v12 = 0;
    }
LABEL_19:
    size_t v18 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6)) {
      size_t v14 = 0;
    }
    else {
      size_t v14 = v18;
    }
    return write_unsigned_impl<unsigned int>(a2, *a1, v14, v12, 0);
  }
  int v7 = v15;
  size_t v18 = 0;
  int v8 = llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6);
  unint64_t v9 = v18;
  if (v8) {
    unint64_t v9 = 0;
  }
  if ((v7 & 0xFFFFFFFE) == 2) {
    unint64_t v10 = v9 + 2;
  }
  else {
    unint64_t v10 = v9;
  }
  return llvm::write_hex(a2, *a1, v7, v10, 1);
}

uint64_t llvm::detail::HelperFunctions::consumeHexStyle(const void **a1, int *a2)
{
  if (!a1[1]) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)*a1;
  if ((v3 - 65) < 0x1A) {
    LOBYTE(v3) = v3 + 32;
  }
  if (v3 != 120) {
    return 0;
  }
  if (llvm::StringRef::consume_front(a1, "x-", 2uLL))
  {
    int v5 = 1;
  }
  else if (llvm::StringRef::consume_front(a1, "X-", 2uLL))
  {
    int v5 = 0;
  }
  else if ((llvm::StringRef::consume_front(a1, "x+", 2uLL) & 1) != 0 {
         || (llvm::StringRef::consume_front(a1, "x", 1uLL) & 1) != 0)
  }
  {
    int v5 = 3;
  }
  else
  {
    int v5 = 2;
    if ((llvm::StringRef::consume_front(a1, "X+", 2uLL) & 1) == 0)
    {
      uint64_t v6 = 1;
      if (!llvm::StringRef::consume_front(a1, "X", 1uLL)) {
        return v6;
      }
      int v5 = 2;
    }
  }
  *a2 = v5;
  return 1;
}

uint64_t llvm::StringRef::consume_front(const void **a1, const void *a2, size_t __n)
{
  size_t v3 = (size_t)a1[1];
  if (v3 < __n) {
    return 0;
  }
  uint64_t v6 = (char *)*a1;
  if (__n)
  {
    if (memcmp(*a1, a2, __n)) {
      return 0;
    }
  }
  if (v3 >= __n) {
    size_t v8 = __n;
  }
  else {
    size_t v8 = v3;
  }
  *a1 = &v6[v8];
  a1[1] = (const void *)(v3 - v8);
  return 1;
}

void llvm::detail::provider_format_adapter<char const* const&>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<char const* const&>::format(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, unint64_t *a4)
{
  return llvm::format_provider<char const*,void>::format(*(const char ***)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *llvm::format_provider<char const*,void>::format(const char **a1, llvm::raw_ostream *a2, uint64_t a3, unint64_t *a4)
{
  if (a4)
  {
    unint64_t v13 = 0;
    uint64_t v14 = a3;
    int v15 = a4;
    int v6 = llvm::consumeUnsignedInteger((llvm *)&v14, (llvm::StringRef *)0xA, &v13, a4);
    if (v15) {
      int v7 = 1;
    }
    else {
      int v7 = v6;
    }
    if (v7) {
      unint64_t v8 = -1;
    }
    else {
      unint64_t v8 = v13;
    }
  }
  else
  {
    unint64_t v8 = -1;
  }
  unint64_t v9 = *a1;
  if (v9) {
    size_t v10 = strlen(v9);
  }
  else {
    size_t v10 = 0;
  }
  if (v10 >= v8) {
    size_t v11 = v8;
  }
  else {
    size_t v11 = v10;
  }
  return llvm::raw_ostream::operator<<(a2, v9, v11);
}

uint64_t llvm::json::anonymous namespace'::Parser::parseString(llvm::json::_anonymous_namespace_::Parser *a1, std::string *this)
{
  unint64_t v4 = (unsigned __int8 *)*((void *)a1 + 3);
  int v5 = (char *)*((void *)a1 + 4);
  if (v4 == (unsigned __int8 *)v5)
  {
    LOBYTE(v6) = 0;
LABEL_6:
    unint64_t v8 = "Invalid escape sequence";
    while (v4 != (unsigned __int8 *)v5)
    {
      if (v6 < 0x20u)
      {
        unint64_t v8 = "Control character in string";
LABEL_33:
      }
      if (v6 == 92)
      {
        *((void *)a1 + 3) = v4 + 1;
        int v9 = (char)*v4;
        if (v9 > 97)
        {
          switch(v9)
          {
            case 'n':
              LOBYTE(v6) = 10;
              break;
            case 'o':
            case 'p':
            case 'q':
            case 's':
              goto LABEL_33;
            case 'r':
              LOBYTE(v6) = 13;
              break;
            case 't':
              LOBYTE(v6) = 9;
              break;
            case 'u':
                goto LABEL_11;
              return 0;
            default:
              if (v9 == 102)
              {
                LOBYTE(v6) = 12;
              }
              else
              {
                if (v9 != 98) {
                  goto LABEL_33;
                }
                LOBYTE(v6) = 8;
              }
              break;
          }
        }
        else
        {
          LOBYTE(v6) = v9;
          if (v9 != 34 && v9 != 47 && v9 != 92) {
            goto LABEL_33;
          }
        }
      }
      std::string::push_back(this, v6);
LABEL_11:
      unint64_t v4 = (unsigned __int8 *)*((void *)a1 + 3);
      int v5 = (char *)*((void *)a1 + 4);
      if (v4 == (unsigned __int8 *)v5)
      {
        int v6 = 0;
      }
      else
      {
        *((void *)a1 + 3) = v4 + 1;
        int v6 = *v4++;
      }
      if (v6 == 34) {
        return 1;
      }
    }
    unint64_t v8 = "Unterminated string";
    goto LABEL_33;
  }
  *((void *)a1 + 3) = v4 + 1;
  int v6 = *v4;
  if (v6 != 34)
  {
    ++v4;
    goto LABEL_6;
  }
  return 1;
}

uint64_t llvm::json::anonymous namespace'::Parser::parseUnicode(llvm::json::_anonymous_namespace_::Parser *a1, std::string *this)
{
  size_t v3 = (char *)*((void *)a1 + 3);
  unint64_t v4 = (char *)*((void *)a1 + 4);
  if (v3 == v4)
  {
    char v5 = 0;
  }
  else
  {
    *((void *)a1 + 3) = v3 + 1;
    char v5 = *v3++;
  }
  char v21 = v5;
  if (v3 == v4)
  {
    char v22 = 0;
  }
  else
  {
    *((void *)a1 + 3) = v3 + 1;
    char v22 = *v3;
    if (v3 + 1 != v4)
    {
      *((void *)a1 + 3) = v3 + 2;
      char v23 = v3[1];
      if (v3 + 2 == v4)
      {
        char v6 = 0;
      }
      else
      {
        *((void *)a1 + 3) = v3 + 3;
        char v6 = v3[2];
      }
      goto LABEL_10;
    }
  }
  char v6 = 0;
  char v23 = 0;
LABEL_10:
  uint64_t v7 = 0;
  unsigned __int16 v8 = 0;
  char v24 = v6;
  do
  {
    uint64_t v9 = *(&v21 + v7);
    if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v9 + 60) & 0x10000) == 0) {
    if (v9 <= 0x39)
    }
      __int16 v10 = v9 - 48;
    else {
      __int16 v10 = (v9 & 0xFFDF) - 55;
    }
    unsigned __int16 v8 = v10 | (16 * v8);
    ++v7;
  }
  while (v7 != 4);
  if ((unsigned __int16)((unsigned __int16)(v8 + 0x2000) >> 11) >= 0x1Fu)
  {
    while ((unsigned __int16)(v8 >> 10) < 0x37u)
    {
      uint64_t v17 = (unsigned char *)*((void *)a1 + 3);
      if ((unint64_t)(v17 + 2) > *((void *)a1 + 4) || *v17 != 92 || v17[1] != 117)
      {
        __int16 v27 = -16401;
        char v28 = -67;
        size_t v18 = (std::string::value_type *)&v27;
        goto LABEL_33;
      }
      *((void *)a1 + 3) = v17 + 2;
      unsigned __int16 v20 = 0;
      int v19 = a1;
      if (!v12) {
        return v12;
      }
      if ((unsigned __int16)((unsigned __int16)(v20 + 0x2000) >> 10) >= 0x3Fu)
      {
        return v12;
      }
      *(_WORD *)__s = -16401;
      char v30 = -67;
      unsigned __int16 v14 = v20;
      unsigned __int16 v15 = v20 + 0x2000;
      std::string::append(this, __s, 3uLL);
      unsigned __int16 v11 = v14;
      unsigned int v16 = v15 >> 11;
      unsigned __int16 v8 = v14;
      a1 = v19;
      if (v16 < 0x1F) {
        goto LABEL_18;
      }
    }
    *(_WORD *)unint64_t v25 = -16401;
    char v26 = -67;
    size_t v18 = v25;
LABEL_33:
    std::string::append(this, v18, 3uLL);
  }
  else
  {
    unsigned __int16 v11 = v8;
LABEL_18:
  }
  return 1;
}

uint64_t llvm::json::anonymous namespace'::Parser::parseUnicode(std::string &)::$_1::operator()(llvm::json::_anonymous_namespace_::Parser *a1, _WORD *a2)
{
  *a2 = 0;
  unint64_t v2 = (char *)*((void *)a1 + 3);
  size_t v3 = (char *)*((void *)a1 + 4);
  if (v2 == v3)
  {
    char v4 = 0;
  }
  else
  {
    *((void *)a1 + 3) = v2 + 1;
    char v4 = *v2++;
  }
  char v13 = v4;
  if (v2 == v3)
  {
    char v14 = 0;
  }
  else
  {
    *((void *)a1 + 3) = v2 + 1;
    char v14 = *v2;
    if (v2 + 1 != v3)
    {
      *((void *)a1 + 3) = v2 + 2;
      char v15 = v2[1];
      if (v2 + 2 == v3)
      {
        char v5 = 0;
      }
      else
      {
        *((void *)a1 + 3) = v2 + 3;
        char v5 = v2[2];
      }
      goto LABEL_11;
    }
  }
  char v5 = 0;
  char v15 = 0;
LABEL_11:
  uint64_t v6 = 0;
  int v7 = 0;
  char v16 = v5;
  uint64_t v8 = MEMORY[0x263EF8318];
  do
  {
    uint64_t v9 = *(&v13 + v6);
    unsigned int v10 = *(_DWORD *)(v8 + 4 * v9 + 60);
    if ((v10 & 0x10000) == 0) {
    if (v9 <= 0x39)
    }
      int v11 = v9 - 48;
    else {
      int v11 = (v9 & 0xFFFFFFDF) - 55;
    }
    int v7 = v11 | (16 * v7);
    *a2 = v7;
    ++v6;
  }
  while (v6 != 4);
  return HIWORD(v10) & 1;
}

void llvm::json::anonymous namespace'::encodeUtf8(unsigned int a1, std::string *this)
{
  if (a1 > 0x7F)
  {
    if (a1 > 0x7FF)
    {
      if (HIWORD(a1))
      {
        unsigned int v6 = (a1 >> 12) & 0x3F | 0xFFFFFF80;
        unsigned int v7 = (a1 >> 6) & 0x3F | 0xFFFFFF80;
        char v8 = a1 & 0x3F | 0x80;
        std::string::push_back(this, (a1 >> 18) | 0xF0);
        std::string::push_back(this, v6);
        std::string::push_back(this, v7);
        LOBYTE(a1) = v8;
      }
      else
      {
        unsigned int v4 = (a1 >> 6) & 0x3F | 0xFFFFFF80;
        char v5 = a1 & 0x3F | 0x80;
        std::string::push_back(this, (a1 >> 12) | 0xE0);
        std::string::push_back(this, v4);
        LOBYTE(a1) = v5;
      }
    }
    else
    {
      char v3 = a1 & 0x3F | 0x80;
      std::string::push_back(this, (a1 >> 6) | 0xC0);
      LOBYTE(a1) = v3;
    }
  }
  std::string::push_back(this, a1);
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::initEmpty(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  llvm::json::ObjectKey::ObjectKey(v6, (char *)0xFFFFFFFFFFFFFFFFLL, 0);
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2)
  {
    char v3 = *(void **)a1;
    uint64_t v4 = 56 * v2;
    do
    {
      *char v3 = 0;
      v3[1] = 0;
      void v3[2] = 0;
      llvm::json::ObjectKey::operator=((uint64_t)v3, (uint64_t)v6);
      v3 += 7;
      v4 -= 56;
    }
    while (v4);
  }
  uint64_t v5 = v6[0];
  v6[0] = 0;
  if (v5) {
    std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v6, v5);
  }
}

uint64_t llvm::json::ObjectKey::operator=(uint64_t result, uint64_t a2)
{
  if (*(void *)a2) {
    operator new();
  }
  *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
  return result;
}

uint64_t *std::vector<llvm::json::Value>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  char v3 = result;
  uint64_t v5 = (unsigned __int16 *)*result;
  uint64_t v4 = (unsigned __int16 *)result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 32;
    v4 -= 16;
    BOOL result = (uint64_t *)llvm::json::Value::moveFrom(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *v3;
  *char v3 = v6;
  a2[1] = v7;
  uint64_t v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = v3[2];
  void v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<llvm::json::Value>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    llvm::json::Value::destroy((llvm::json::Value *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::LookupBucketFor<llvm::json::ObjectKey>(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *((unsigned int *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    llvm::json::ObjectKey::ObjectKey(v22, (char *)0xFFFFFFFFFFFFFFFFLL, 0);
    llvm::json::ObjectKey::ObjectKey(v21, (char *)0xFFFFFFFFFFFFFFFELL, 0);
    int v9 = v4 - 1;
    unsigned int v10 = (v4 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(a2 + 8), *(void *)(a2 + 8) + *(void *)(a2 + 16), v7, v8);
    uint64_t v11 = v6 + 56 * v10;
    uint64_t v12 = (char **)(v11 + 8);
    char v13 = (size_t *)(v11 + 16);
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(a2 + 8), *(void *)(a2 + 16), *(void **)(v11 + 8), *(void *)(v11 + 16)))
    {
      uint64_t v4 = 1;
    }
    else
    {
      uint64_t v20 = 0;
      int v19 = 1;
      uint64_t v4 = 1;
      while (!llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(v11 + 8), *(void *)(v11 + 16), (void *)v22[1], v22[2]))
      {
        BOOL isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*v12, *v13, (void *)v21[1], v21[2]);
        uint64_t v18 = v20;
        if (isEqual && v20 == 0) {
          uint64_t v18 = v11;
        }
        uint64_t v20 = v18;
        unsigned int v10 = (v10 + v19) & v9;
        uint64_t v11 = v6 + 56 * v10;
        uint64_t v12 = (char **)(v11 + 8);
        char v13 = (size_t *)(v11 + 16);
        ++v19;
        if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(a2 + 8), *(void *)(a2 + 16), *(void **)(v11 + 8), *(void *)(v11 + 16)))
        {
          goto LABEL_4;
        }
      }
      uint64_t v4 = 0;
      if (v20) {
        uint64_t v11 = v20;
      }
    }
LABEL_4:
    *a3 = v11;
    uint64_t v14 = v21[0];
    v21[0] = 0;
    if (v14) {
      std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v21, v14);
    }
    uint64_t v15 = v22[0];
    v22[0] = 0;
    if (v15) {
      std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v22, v15);
    }
  }
  else
  {
    *a3 = 0;
  }
  return v4;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::InsertIntoBucketImpl<llvm::json::ObjectKey>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::grow(a1, v7);
  v11[0] = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::LookupBucketFor<llvm::json::ObjectKey>((uint64_t *)a1, a3, v11);
  a4 = v11[0];
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  llvm::json::ObjectKey::ObjectKey(v11, (char *)0xFFFFFFFFFFFFFFFFLL, 0);
  if (!llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(a4 + 8), *(void *)(a4 + 16), (void *)v11[1], v11[2]))--*(_DWORD *)(a1 + 12); {
  uint64_t v9 = v11[0];
  }
  v11[0] = 0;
  if (v9) {
    std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v11, v9);
  }
  return a4;
}

void llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::grow(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = operator new(56 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::moveFromOldBuckets(a1, v4, v4 + 56 * v3);
    JUMPOUT(0x263E500A0);
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::initEmpty(a1);
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::initEmpty(a1);
  llvm::json::ObjectKey::ObjectKey(v13, (char *)0xFFFFFFFFFFFFFFFFLL, 0);
  llvm::json::ObjectKey::ObjectKey(v12, (char *)0xFFFFFFFFFFFFFFFELL, 0);
  while (a2 != a3)
  {
    if (!llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(a2 + 8), *(void *)(a2 + 16), (void *)v13[1], v13[2])&& !llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(a2 + 8), *(void *)(a2 + 16), (void *)v12[1], v12[2]))
    {
      uint64_t v14 = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::LookupBucketFor<llvm::json::ObjectKey>((uint64_t *)a1, a2, &v14);
      uint64_t v6 = v14;
      uint64_t v7 = *(void *)a2;
      *(void *)a2 = 0;
      uint64_t v8 = *(void *)v6;
      *(void *)uint64_t v6 = v7;
      if (v8) {
        std::default_delete<std::string>::operator()[abi:nn180100](v6, v8);
      }
      *(_OWORD *)(v6 + 8) = *(_OWORD *)(a2 + 8);
      llvm::json::Value::moveFrom(v6 + 24, (unsigned __int16 *)(a2 + 24));
      ++*(_DWORD *)(a1 + 8);
      llvm::json::Value::destroy((llvm::json::Value *)(a2 + 24));
    }
    uint64_t v9 = *(void *)a2;
    *(void *)a2 = 0;
    if (v9) {
      std::default_delete<std::string>::operator()[abi:nn180100](a2, v9);
    }
    a2 += 56;
  }
  uint64_t v10 = v12[0];
  v12[0] = 0;
  if (v10) {
    std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v12, v10);
  }
  uint64_t v11 = v13[0];
  v13[0] = 0;
  if (v11) {
    std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v13, v11);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::try_emplace<decltype(nullptr)>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::LookupBucketFor<llvm::json::ObjectKey>((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::InsertIntoBucket<llvm::json::ObjectKey,decltype(nullptr)>(a1, v10, a2);
    uint64_t v7 = result;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 56 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::InsertIntoBucket<llvm::json::ObjectKey,decltype(nullptr)>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::InsertIntoBucketImpl<llvm::json::ObjectKey>(a1, a3, a3, a2);
  unint64_t v5 = v4;
  uint64_t v6 = *(void *)a3;
  *(void *)a3 = 0;
  uint64_t v7 = *v4;
  *uint64_t v4 = v6;
  if (v7) {
    std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v4, v7);
  }
  *(_OWORD *)(v5 + 1) = *(_OWORD *)(a3 + 8);
  *((_WORD *)v5 + 12) = 0;
  return v5;
}

void llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::copyFrom(uint64_t a1, uint64_t a2)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::destroyAll(a1);
  MEMORY[0x263E500A0](*(void *)a1, 8);
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v4;
  if (v4)
  {
    *(void *)a1 = operator new(56 * v4, (std::align_val_t)8uLL);
    llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::copyFrom<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>>(a1, (void *)a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::copyFrom<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>>(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = a2[1];
  if (*(_DWORD *)(a1 + 16))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (void *)(*(void *)a1 + v4);
      uint64_t v7 = *a2 + v4;
      *uint64_t v6 = 0;
      v6[1] = 0;
      void v6[2] = 0;
      llvm::json::ObjectKey::operator=((uint64_t)v6, v7);
      uint64_t v8 = *(void *)a1 + v4;
      uint64_t v9 = *(char **)(v8 + 8);
      size_t v10 = *(void *)(v8 + 16);
      llvm::json::ObjectKey::ObjectKey(v19, (char *)0xFFFFFFFFFFFFFFFFLL, 0);
      if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(v9, v10, (void *)v19[1], v19[2]))
      {
        int v11 = 0;
      }
      else
      {
        uint64_t v12 = *(void *)a1 + v4;
        char v13 = *(char **)(v12 + 8);
        size_t v14 = *(void *)(v12 + 16);
        llvm::json::ObjectKey::ObjectKey(v18, (char *)0xFFFFFFFFFFFFFFFELL, 0);
        BOOL isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(v13, v14, (void *)v18[1], v18[2]);
        uint64_t v16 = v18[0];
        v18[0] = 0;
        if (v16) {
          std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v18, v16);
        }
        int v11 = !isEqual;
      }
      uint64_t v17 = v19[0];
      v19[0] = 0;
      if (v17) {
        std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v19, v17);
      }
      if (v11) {
        llvm::json::Value::copyFrom((llvm::json::Value *)(*(void *)a1 + v4 + 24), (const llvm::json::Value *)(*a2 + v4 + 24));
      }
      ++v5;
      v4 += 56;
    }
    while (v5 < *(unsigned int *)(a1 + 16));
  }
}

char *std::vector<llvm::json::Value>::__init_with_size[abi:nn180100]<llvm::json::Value*,llvm::json::Value*>(char *result, const llvm::json::Value *a2, const llvm::json::Value *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<llvm::json::Value>::__vallocate[abi:nn180100](result, a4);
    uint64_t v7 = (llvm::json::Value *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t result = (char *)llvm::json::Value::copyFrom(v7, a2);
      a2 = (const llvm::json::Value *)((char *)a2 + 32);
      uint64_t v7 = (llvm::json::Value *)((char *)v7 + 32);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

char *std::vector<llvm::json::Value>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

char *std::vector<unsigned int>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  uint64_t value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  unint64_t v5 = value;
  std::vector<unsigned int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      abort();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      size_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v13);
      std::vector<unsigned int>::pointer begin = this->__begin_;
      std::vector<unsigned int>::pointer end = this->__end_;
    }
    else
    {
      size_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    uint64_t v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void *std::string::basic_string[abi:nn180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t llvm::APInt::operator=(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(void *)a1) {
    MEMORY[0x263E50080]();
  }
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  return a1;
}

void llvm::ManagedStaticBase::RegisterManagedStatic(llvm::ManagedStaticBase *this, void *(*a2)(void), void (*a3)(void *))
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26B4178D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26B4178D0))
  {
    MEMORY[0x263E4FEB0](&stru_26B4178D8);
    __cxa_atexit(MEMORY[0x263F8C0E0], &stru_26B4178D8, &dword_261C2B000);
    __cxa_guard_release(&qword_26B4178D0);
  }
  std::recursive_mutex::lock(&stru_26B4178D8);
  if (!*(void *)this)
  {
    atomic_store((uint64_t)a2(), (unint64_t *)this);
    uint64_t v6 = _MergedGlobals_2;
    *((void *)this + 1) = a3;
    *((void *)this + 2) = v6;
    _MergedGlobals_2 = (uint64_t)this;
  }
  std::recursive_mutex::unlock(&stru_26B4178D8);
}

char *operator new(uint64_t a1, uint64_t *a2)
{
  v12[32] = *MEMORY[0x263EF8340];
  unint64_t v10 = v12;
  long long v11 = xmmword_261E8A780;
  unsigned int v3 = llvm::Twine::toStringRef(*a2, (uint64_t)&v10);
  size_t v5 = v4;
  uint64_t v6 = (char *)operator new(a1 + v4 + 9);
  size_t v7 = (size_t *)&v6[a1];
  *size_t v7 = v5;
  size_t v8 = v7 + 1;
  if (v5) {
    memcpy(v8, v3, v5);
  }
  *((unsigned char *)v8 + v5) = 0;
  if (v10 != v12) {
    free(v10);
  }
  return v6;
}

void getMemBufferCopyImpl(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::WritableMemoryBuffer::getNewUninitMemBuffer(a2, a3, 0, &v9);
  uint64_t v7 = v9;
  if (v9)
  {
    if (a2) {
      memmove(*(void **)(v9 + 8), a1, a2);
    }
    *(unsigned char *)(a4 + 16) &= ~1u;
    *(void *)a4 = v7;
  }
  else
  {
    size_t v8 = std::generic_category();
    *(unsigned char *)(a4 + 16) |= 1u;
    *(void *)a4 = 12;
    *(void *)(a4 + 8) = v8;
  }
}

const char *llvm::Twine::toStringRef(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 33) == 1)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
    BOOL v4 = v3 > 5;
    int v5 = (1 << v3) & 0x3A;
    if (!v4 && v5 != 0) {
      return llvm::Twine::getSingleStringRef((const char **)a1);
    }
  }
  llvm::Twine::toVector((llvm::Twine *)a1, a2);
  return *(const char **)a2;
}

void **getFileAux<llvm::MemoryBuffer>@<X0>(const llvm::Twine *a1@<X0>, size_t a2@<X1>, off_t a3@<X2>, int a4@<W3>, int a5@<W4>, char a6@<W5>, __int16 a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (a4) {
    int v15 = 3;
  }
  else {
    int v15 = 0;
  }
  llvm::sys::fs::openNativeFileForRead((uint64_t)a1, v15, 0, (uint64_t)v21);
  if (v22)
  {
    uint64_t v20 = *(void ***)v21;
    uint64_t v18 = llvm::errorToErrorCode(&v20);
    *(unsigned char *)(a8 + 16) |= 1u;
    *(void *)a8 = v18;
    *(void *)(a8 + 8) = v19;
    uint64_t result = v20;
    if (v20) {
      return (void **)(*((uint64_t (**)(void **))*v20 + 1))(v20);
    }
  }
  else
  {
    uint64_t v16 = (llvm::sys::Process *)v21[0];
    getOpenFileImpl<llvm::MemoryBuffer>(v21[0], a1, 0xFFFFFFFFFFFFFFFFLL, a2, a3, a5, a6, a7, a8);
    return (void **)llvm::sys::Process::SafelyCloseFileDescriptor(v16);
  }
  return result;
}

void llvm::WritableMemoryBuffer::getNewUninitMemBuffer(size_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, void *a4@<X8>)
{
  v19[32] = *MEMORY[0x263EF8340];
  uint64_t v17 = v19;
  long long v18 = xmmword_261E8A780;
  size_t v8 = llvm::Twine::toStringRef(a2, (uint64_t)&v17);
  size_t v9 = v7 + 33;
  if ((a3 & 0xFF00) != 0) {
    uint64_t v10 = 1 << a3;
  }
  else {
    uint64_t v10 = 16;
  }
  size_t v11 = a1 + v10 + v9 + 1;
  if (v11 <= a1)
  {
    size_t v14 = 0;
  }
  else
  {
    size_t v12 = v7;
    unint64_t v13 = operator new(v11, MEMORY[0x263F8C180]);
    size_t v14 = v13;
    if (v13)
    {
      void v13[3] = v12;
      int v15 = (char *)(v13 + 4);
      if (v12) {
        memcpy(v13 + 4, v8, v12);
      }
      v15[v12] = 0;
      uint64_t v16 = ((unint64_t)v14 + v9 + v10 - 1) & -v10;
      *(unsigned char *)(v16 + a1) = 0;
      *size_t v14 = &unk_270DBCEC0;
      v14[1] = v16;
      void v14[2] = v16 + a1;
    }
  }
  *a4 = v14;
  if (v17 != v19) {
    free(v17);
  }
}

void getOpenFileImpl<llvm::MemoryBuffer>(uint64_t a1@<X0>, const llvm::Twine *a2@<X1>, size_t a3@<X2>, size_t a4@<X3>, off_t a5@<X4>, int a6@<W5>, char a7@<W6>, __int16 a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26B417920, memory_order_acquire) & 1) == 0)
  {
    size_t v39 = a3;
    uint64_t v40 = (llvm::sys::Process *)__cxa_guard_acquire(&qword_26B417920);
    a3 = v39;
    if (v40)
    {
      _MergedGlobals_3 = llvm::sys::Process::getPageSizeEstimate(v40);
      __cxa_guard_release(&qword_26B417920);
      a3 = v39;
    }
  }
  if (a4 == -1)
  {
    a4 = a3;
    if (a3 == -1)
    {
      long long v42 = 0u;
      memset(v43, 0, 28);
      int v25 = fstat(a1, &v44);
      uint64_t v26 = llvm::sys::fs::fillStatus(v25, &v44.st_dev, (uint64_t)&v42);
      if (v26)
      {
        *(unsigned char *)(a9 + 16) |= 1u;
        *(void *)a9 = v26;
        *(void *)(a9 + 8) = v27;
        return;
      }
      if (LODWORD(v43[3]) != 2 && LODWORD(v43[3]) != 5)
      {
        getMemoryBufferForStream(a1, a2);
        llvm::ErrorOr<std::unique_ptr<llvm::MemoryBuffer>>::moveConstruct<std::unique_ptr<llvm::WritableMemoryBuffer>>((std::error_category *)a9, (uint64_t)&v44);
        if ((v44.st_uid & 1) == 0)
        {
          uint64_t v36 = *(void *)&v44.st_dev;
          *(void *)&v44.st_dev = 0;
          if (v36) {
            goto LABEL_43;
          }
        }
        return;
      }
      a4 = v43[2];
      a3 = v43[2];
    }
  }
  int v17 = _MergedGlobals_3;
  if (a6 && (a7 & 1) != 0) {
    goto LABEL_25;
  }
  BOOL v18 = a4 >= 0x4000 && a4 >= _MergedGlobals_3;
  char v19 = !v18;
  if (v18 && a6)
  {
    if (a3 != -1)
    {
LABEL_16:
      if (a4 + a5 != a3 || (a3 & (v17 - 1)) == 0) {
        goto LABEL_25;
      }
LABEL_20:
      std::system_category();
      *(void *)&v44.st_dev = a2;
      uint64_t v20 = operator new(48, (uint64_t *)&v44.st_dev);
      *(void *)uint64_t v20 = &unk_270DBCEF8;
      PageSizeEstimate = (llvm::sys::Process *)llvm::sys::Process::getPageSizeEstimate((llvm::sys::Process *)v20);
      unint64_t v22 = (((int)PageSizeEstimate - 1) & (unint64_t)a5) + a4;
      int v23 = llvm::sys::Process::getPageSizeEstimate(PageSizeEstimate);
      *((void *)v20 + 3) = v22;
      *((void *)v20 + 4) = 0;
      *((_DWORD *)v20 + 10) = 0;
      char v24 = (llvm::sys::Process *)llvm::sys::fs::mapped_file_region::init((size_t *)v20 + 3, a1, -v23 & (unint64_t)a5, 0);
      if (!v24)
      {
        uint64_t v37 = *((void *)v20 + 4);
        uint64_t v38 = v37 + ((int)(llvm::sys::Process::getPageSizeEstimate(v24) - 1) & (unint64_t)a5);
        *((void *)v20 + 1) = v38;
        *((void *)v20 + 2) = v38 + a4;
        *(unsigned char *)(a9 + 16) &= ~1u;
        *(void *)a9 = v20;
        return;
      }
      *((void *)v20 + 3) = 0;
      *((void *)v20 + 4) = 0;
      *((_DWORD *)v20 + 10) = 0;
      (*(void (**)(char *))(*(void *)v20 + 8))(v20);
      goto LABEL_25;
    }
    long long v42 = 0u;
    memset(v43, 0, 28);
    int v28 = fstat(a1, &v44);
    if (!llvm::sys::fs::fillStatus(v28, &v44.st_dev, (uint64_t)&v42))
    {
      a3 = v43[2];
      goto LABEL_16;
    }
  }
  else if ((v19 & 1) == 0)
  {
    goto LABEL_20;
  }
LABEL_25:
  llvm::WritableMemoryBuffer::getNewUninitMemBuffer(a4, (uint64_t)a2, a8, &v42);
  if (!(void)v42)
  {
    unint64_t v35 = std::generic_category();
    *(unsigned char *)(a9 + 16) |= 1u;
    *(void *)a9 = 12;
    *(void *)(a9 + 8) = v35;
    return;
  }
  uint64_t v29 = *(char **)(v42 + 8);
  unint64_t v30 = *(void *)(v42 + 16) - (void)v29;
  do
  {
    if (!v30) {
      goto LABEL_40;
    }
    llvm::sys::fs::readNativeFileSlice(a1, v29, v30, a5, (uint64_t)&v44);
    if (v44.st_ino)
    {
      size_t v32 = *(void ***)&v44.st_dev;
      *(void *)&v44.st_dev = 0;
      int v41 = v32;
      uint64_t v33 = llvm::errorToErrorCode(&v41);
      *(unsigned char *)(a9 + 16) |= 1u;
      *(void *)a9 = v33;
      *(void *)(a9 + 8) = v34;
      if (v41) {
        (*((void (**)(void **))*v41 + 1))(v41);
      }
      int v31 = 1;
    }
    else
    {
      if (*(void *)&v44.st_dev)
      {
        int v31 = 0;
        v30 -= *(void *)&v44.st_dev;
        v29 += *(void *)&v44.st_dev;
        a5 += *(void *)&v44.st_dev;
        continue;
      }
      bzero(v29, v30);
      if ((v44.st_ino & 1) == 0) {
        goto LABEL_40;
      }
      int v31 = 3;
    }
    if (*(void *)&v44.st_dev) {
      (*(void (**)(void))(**(void **)&v44.st_dev + 8))(*(void *)&v44.st_dev);
    }
  }
  while (!v31);
  if (v31 == 3)
  {
LABEL_40:
    *(unsigned char *)(a9 + 16) &= ~1u;
    *(void *)a9 = v42;
    return;
  }
  uint64_t v36 = v42;
  if ((void)v42) {
LABEL_43:
  }
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
}

void getMemoryBufferForStream(uint64_t a1, const llvm::Twine *a2)
{
  int v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  v13[2048] = *MEMORY[0x263EF8340];
  size_t v11 = v13;
  long long v12 = xmmword_261E8AD10;
  llvm::sys::fs::readNativeFileToEOF(v2, &v11, 0x4000uLL, &v10);
  if (v10)
  {
    size_t v9 = v10;
    uint64_t v7 = llvm::errorToErrorCode(&v9);
    *(unsigned char *)(v6 + 16) |= 1u;
    *(void *)uint64_t v6 = v7;
    *(void *)(v6 + 8) = v8;
    if (v9) {
      (*((void (**)(void **))*v9 + 1))(v9);
    }
  }
  else
  {
    getMemBufferCopyImpl(v11, v12, v4, v6);
  }
  if (v11 != v13) {
    free(v11);
  }
}

const char *llvm::Twine::getSingleStringRef(const char **this)
{
  int v1 = 0;
  switch(*((unsigned char *)this + 32))
  {
    case 2:
      __break(1u);
      JUMPOUT(0x261C76CF0);
    case 3:
      int v1 = *this;
      if (*this) {
        strlen(*this);
      }
      break;
    case 4:
      if ((*this)[23] >= 0) {
        int v1 = *this;
      }
      else {
        int v1 = *(const char **)*this;
      }
      break;
    case 5:
      int v1 = *this;
      break;
    default:
      return v1;
  }
  return v1;
}

uint64_t anonymous namespace'::MemoryBufferMem<llvm::MemoryBuffer>::getBufferIdentifier(uint64_t a1)
{
  return a1 + 32;
}

uint64_t anonymous namespace'::MemoryBufferMem<llvm::MemoryBuffer>::getBufferKind()
{
  return 0;
}

uint64_t llvm::sys::Process::getPageSizeEstimate(llvm::sys::Process *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  llvm::sys::Process::getPageSize((uint64_t)&v3);
  if ((v4 & 1) == 0) {
    return v3;
  }
  uint64_t v2 = v3;
  llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return 4096;
}

uint64_t anonymous namespace'::MemoryBufferMem<llvm::WritableMemoryBuffer>::getBufferIdentifier(uint64_t a1)
{
  return a1 + 32;
}

uint64_t anonymous namespace'::MemoryBufferMem<llvm::WritableMemoryBuffer>::getBufferKind()
{
  return 0;
}

void *anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::~MemoryBufferMMapFile(void *a1)
{
  *a1 = &unk_270DBCEF8;
  uint64_t v2 = (void *)a1[4];
  if (v2) {
    munmap(v2, a1[3]);
  }
  return a1;
}

void anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::~MemoryBufferMMapFile(void *__p)
{
  *std::string __p = &unk_270DBCEF8;
  uint64_t v2 = (void *)__p[4];
  if (v2) {
    munmap(v2, __p[3]);
  }
  operator delete(__p);
}

uint64_t anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::getBufferIdentifier(uint64_t a1)
{
  return a1 + 56;
}

void *anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::dontNeedIfMmap(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result) {
    return (void *)posix_madvise(result, *(void *)(a1 + 24), 4);
  }
  return result;
}

uint64_t anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::getBufferKind()
{
  return 1;
}

std::error_category *llvm::ErrorOr<std::unique_ptr<llvm::MemoryBuffer>>::moveConstruct<std::unique_ptr<llvm::WritableMemoryBuffer>>(std::error_category *result, uint64_t a2)
{
  uint64_t v2 = result;
  char v3 = (char)result[2].__vftable;
  if (*(unsigned char *)(a2 + 16))
  {
    LOBYTE(result[2].__vftable) = v3 | 1;
    if (*(unsigned char *)(a2 + 16))
    {
      uint64_t v5 = *(std::error_category_vtbl **)a2;
      uint64_t result = *(std::error_category **)(a2 + 8);
    }
    else
    {
      uint64_t result = (std::error_category *)std::system_category();
      uint64_t v5 = 0;
    }
    v2->__vftable = v5;
    v2[1].__vftable = (std::error_category_vtbl *)result;
  }
  else
  {
    LOBYTE(result[2].__vftable) = v3 & 0xFE;
    char v4 = *(std::error_category_vtbl **)a2;
    *(void *)a2 = 0;
    result->__vftable = v4;
  }
  return result;
}

void *llvm::SmallVectorImpl<char>::resizeImpl<true>(void *result, unint64_t a2)
{
  unint64_t v2 = result[1];
  if (v2 != a2)
  {
    char v4 = result;
    if (v2 <= a2 && result[2] < a2) {
      uint64_t result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, a2, 1);
    }
    v4[1] = a2;
  }
  return result;
}

llvm::raw_ostream *llvm::write_integer(llvm::raw_ostream *a1, unsigned int a2, size_t a3, int a4)
{
  if ((a2 & 0x80000000) != 0)
  {
    a2 = -a2;
    int v4 = 1;
  }
  else
  {
    int v4 = 0;
  }
  return write_unsigned_impl<unsigned int>(a1, a2, a3, a4, v4);
}

llvm::raw_ostream *write_unsigned<unsigned long>(llvm::raw_ostream *a1, unint64_t a2, size_t a3, int a4, int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (HIDWORD(a2))
  {
    uint64_t v8 = 0;
    uint64_t v9 = 127;
    do
    {
      v16[v9] = (a2 % 0xA) | 0x30;
      v8 += 0x100000000;
      --v9;
      BOOL v10 = a2 > 9;
      a2 /= 0xAuLL;
    }
    while (v10);
    size_t v11 = v8 >> 32;
    if (a5)
    {
      long long v12 = (unsigned char *)*((void *)a1 + 4);
      if ((unint64_t)v12 >= *((void *)a1 + 3))
      {
        a1 = llvm::raw_ostream::write(a1, 45);
      }
      else
      {
        *((void *)a1 + 4) = v12 + 1;
        *long long v12 = 45;
      }
    }
    if (a4 != 1 && v11 < a3)
    {
      size_t v13 = v11;
      do
      {
        size_t v14 = (unsigned char *)*((void *)a1 + 4);
        if ((unint64_t)v14 >= *((void *)a1 + 3))
        {
          a1 = llvm::raw_ostream::write(a1, 48);
        }
        else
        {
          *((void *)a1 + 4) = v14 + 1;
          *size_t v14 = 48;
        }
        ++v13;
      }
      while (v13 < a3);
    }
    int v15 = (char *)&v17 - v11;
    if (a4 == 1) {
      return writeWithCommas(a1, v15, v11);
    }
    else {
      return llvm::raw_ostream::write(a1, v15, v11);
    }
  }
  else
  {
    return write_unsigned_impl<unsigned int>(a1, a2, a3, a4, a5);
  }
}

llvm::raw_ostream *llvm::write_integer(llvm::raw_ostream *a1, unint64_t a2, size_t a3, int a4)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    a2 = -(uint64_t)a2;
    int v4 = 1;
  }
  else
  {
    int v4 = 0;
  }
  return write_unsigned<unsigned long>(a1, a2, a3, a4, v4);
}

llvm::raw_ostream *llvm::write_hex(llvm::raw_ostream *a1, unint64_t a2, int a3, unint64_t a4, char a5)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a5)
  {
    if (a4 > 0x7F) {
      LODWORD(a4) = 128;
    }
  }
  else
  {
    LODWORD(a4) = 0;
  }
  unsigned int v5 = (67 - __clz(a2)) >> 2;
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  *(void *)&long long v6 = 0x3030303030303030;
  *((void *)&v6 + 1) = 0x3030303030303030;
  v11[6] = v6;
  v11[7] = v6;
  v11[4] = v6;
  v11[5] = v6;
  LODWORD(v7) = v5 + 2 * ((a3 & 0xFFFFFFFE) == 2);
  _OWORD v11[2] = v6;
  void v11[3] = v6;
  if (v7 <= a4) {
    size_t v7 = a4;
  }
  else {
    size_t v7 = v7;
  }
  v11[0] = v6;
  v11[1] = v6;
  if ((a3 & 0xFFFFFFFE) == 2) {
    BYTE1(v11[0]) = 120;
  }
  if (a2)
  {
    uint64_t v8 = (char *)&v11[-1] + v7 + 15;
    do
    {
      *v8-- = llvm::hexdigit(unsigned int,BOOL)::LUT[a2 & 0xF] | (32 * ((a3 & 0xFFFFFFFD) != 0));
      BOOL v9 = a2 > 0xF;
      a2 >>= 4;
    }
    while (v9);
  }
  return llvm::raw_ostream::write(a1, (const char *)v11, v7);
}

void llvm::write_double(llvm::raw_ostream *this, unsigned int a2, unint64_t a3, char a4, double a5)
{
  v30[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = 2;
  if (a2 < 2) {
    uint64_t v6 = 6;
  }
  if (a4) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = v6;
  }
  if (fabs(a5) == INFINITY)
  {
    if (a5 >= 0.0) {
      size_t v9 = 3;
    }
    else {
      size_t v9 = 4;
    }
    if (a5 >= 0.0) {
      BOOL v10 = "INF";
    }
    else {
      BOOL v10 = "-INF";
    }
    llvm::raw_ostream::operator<<(this, v10, v9);
  }
  else
  {
    int v28 = (char *)v30;
    long long v29 = xmmword_261E8A740;
    if (a2 == 1) {
      char v12 = 69;
    }
    else {
      char v12 = 102;
    }
    int v19 = 0;
    if (a2) {
      char v13 = v12;
    }
    else {
      char v13 = 101;
    }
    char v23 = 0;
    uint64_t v24 = 0;
    int v25 = 1;
    unint64_t v21 = 0;
    unint64_t v22 = 0;
    uint64_t v20 = 0;
    BOOL v18 = &unk_270DBD758;
    uint64_t v26 = (void **)&v28;
    llvm::raw_ostream::SetUnbuffered(&v18);
    if (v21 - (unint64_t)v22 > 1) {
      *v22++ = 11813;
    }
    else {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v18, "%.", 2uLL);
    }
    write_unsigned<unsigned long>((llvm::raw_ostream *)&v18, v7, 0, 0, 0);
    size_t v14 = (char *)v22;
    if ((unint64_t)v22 >= v21)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v18, v13);
    }
    else
    {
      unint64_t v22 = (_WORD *)((char *)v22 + 1);
      *size_t v14 = v13;
    }
    if (a2 == 3)
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(&v28, 0);
      *(void *)&long long v29 = v29 - 1;
      snprintf(__str, 0x20uLL, v28, a5 * 100.0, &unk_270DBCF30, v28, a5 * 100.0);
      size_t v15 = strlen(__str);
      llvm::raw_ostream::operator<<(this, __str, v15);
      uint64_t v16 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v16 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 37);
      }
      else
      {
        *((void *)this + 4) = v16 + 1;
        *uint64_t v16 = 37;
      }
    }
    else
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(&v28, 0);
      *(void *)&long long v29 = v29 - 1;
      snprintf(__str, 0x20uLL, v28, *(void *)&a5, &unk_270DBCF30, v28, *(void *)&a5);
      size_t v17 = strlen(__str);
      llvm::raw_ostream::operator<<(this, __str, v17);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v18);
    if (v28 != (char *)v30) {
      free(v28);
    }
  }
}

uint64_t llvm::format_object<double>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16));
}

llvm::raw_ostream *write_unsigned_impl<unsigned int>(llvm::raw_ostream *a1, unsigned int a2, size_t a3, int a4, int a5)
{
  uint64_t v7 = 0;
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v8 = 127;
  do
  {
    v16[v8] = (a2 % 0xA) | 0x30;
    v7 += 0x100000000;
    --v8;
    BOOL v9 = a2 > 9;
    a2 /= 0xAu;
  }
  while (v9);
  size_t v10 = v7 >> 32;
  if (a5)
  {
    size_t v11 = (unsigned char *)*((void *)a1 + 4);
    if ((unint64_t)v11 >= *((void *)a1 + 3))
    {
      a1 = llvm::raw_ostream::write(a1, 45);
    }
    else
    {
      *((void *)a1 + 4) = v11 + 1;
      *size_t v11 = 45;
    }
  }
  if (a4 != 1 && v10 < a3)
  {
    size_t v12 = v10;
    do
    {
      char v13 = (unsigned char *)*((void *)a1 + 4);
      if ((unint64_t)v13 >= *((void *)a1 + 3))
      {
        a1 = llvm::raw_ostream::write(a1, 48);
      }
      else
      {
        *((void *)a1 + 4) = v13 + 1;
        unsigned char *v13 = 48;
      }
      ++v12;
    }
    while (v12 < a3);
  }
  size_t v14 = (char *)&v17 - v10;
  if (a4 == 1) {
    return writeWithCommas(a1, v14, v10);
  }
  else {
    return llvm::raw_ostream::write(a1, v14, v10);
  }
}

llvm::raw_ostream *writeWithCommas(llvm::raw_ostream *a1, const char *a2, size_t a3)
{
  size_t v3 = a3;
  unint64_t v5 = (a3 - 1) / 3;
  unint64_t v6 = (a3 - 1) % 3;
  size_t v7 = a3 - (v6 + 1);
  if (a3 >= v6 + 1) {
    a3 = v6 + 1;
  }
  uint64_t result = llvm::raw_ostream::write(a1, a2, a3);
  if (v7)
  {
    uint64_t v9 = -3 * v5;
    size_t v10 = &a2[v3];
    do
    {
      size_t v11 = (unsigned char *)*((void *)result + 4);
      if ((unint64_t)v11 >= *((void *)result + 3))
      {
        uint64_t result = llvm::raw_ostream::write(result, 44);
      }
      else
      {
        *((void *)result + 4) = v11 + 1;
        *size_t v11 = 44;
      }
      uint64_t result = llvm::raw_ostream::write(result, &v10[v9], 3uLL);
      v9 += 3;
    }
    while (v9);
  }
  return result;
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, unint64_t *a4, unint64_t a5, unint64_t a6)
{
  uint64_t v11 = 0;
  uint64_t v8 = llvm::cl::parser<unsigned long long>::parse(a1 + 160, a1, a3, a4, a5, a6, &v11);
  if (v8) {
    return v8;
  }
  *(void *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 192);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::getValueExpectedFlagDefault()
{
  return 2;
}

void llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::~opt(llvm::cl::Option *a1)
{
  *(void *)a1 = &unk_270DBCF50;
  std::__function::__value_func<void ()(unsigned long long const&)>::~__value_func[abi:nn180100]((void *)a1 + 21);
  llvm::cl::Option::~Option(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270DBCF50;
  std::__function::__value_func<void ()(unsigned long long const&)>::~__value_func[abi:nn180100]((void *)a1 + 21);
  llvm::cl::Option::~Option(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 160, a1);
}

llvm::raw_ostream *llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 160), a1, a2);
}

void llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  if (a3)
  {
    unint64_t v3 = *(void *)(a1 + 128);
LABEL_5:
    uint64_t v4 = *(void *)(a1 + 144);
    char v6 = *(unsigned char *)(a1 + 152);
    v5[0] = &unk_270DBCFB8;
    v5[1] = v4;
    llvm::cl::parser<unsigned long long>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, v3, (uint64_t)v5, a2);
    return;
  }
  if (*(unsigned char *)(a1 + 152))
  {
    unint64_t v3 = *(void *)(a1 + 128);
    if (*(void *)(a1 + 144) != v3) {
      goto LABEL_5;
    }
  }
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::setDefault(uint64_t result)
{
  if (*(unsigned char *)(result + 152)) {
    uint64_t v1 = *(void *)(result + 144);
  }
  else {
    uint64_t v1 = 0;
  }
  *(void *)(result + 128) = v1;
  return result;
}

BOOL llvm::cl::OptionValueCopy<unsigned long long>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 16) && *(unsigned char *)(a1 + 16) && *(void *)(a1 + 8) != *(void *)(a2 + 8);
}

void std::__function::__func<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1},std::allocator<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1}>,void ()(unsigned long long const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1},std::allocator<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1}>,void ()(unsigned long long const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_270DBCFD8;
  return result;
}

void std::__function::__func<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1},std::allocator<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1}>,void ()(unsigned long long const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DBCFD8;
}

void *std::__function::__value_func<void ()(unsigned long long const&)>::~__value_func[abi:nn180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void llvm::Regex::Regex()
{
}

void llvm::Regex::~Regex(llvm::Regex *this)
{
  uint64_t v2 = *(void *)this;
  if (v2)
  {
    llvm_regfree(v2);
    if (*(void *)this) {
      MEMORY[0x263E500B0](*(void *)this, 0x1070C404B019E81);
    }
  }
}

size_t anonymous namespace'::RegexErrorToString(int a1, uint64_t a2, uint64_t a3)
{
  size_t v6 = llvm_regerror(a1, a2, 0, 0);
  std::string::resize((std::string *)a3, v6 - 1, 0);
  if (*(char *)(a3 + 23) >= 0) {
    size_t v7 = (unsigned char *)a3;
  }
  else {
    size_t v7 = *(unsigned char **)a3;
  }
  return llvm_regerror(a1, a2, v7, v6);
}

uint64_t llvm::Regex::match(uint64_t a1, char *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  v22[16] = *MEMORY[0x263EF8340];
  if (!a5)
  {
    if (*(_DWORD *)(a1 + 8)) {
      return 0;
    }
    goto LABEL_9;
  }
  if ((*(char *)(a5 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a5 + 23)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (*(void *)(a5 + 8)) {
LABEL_4:
  }
    MEMORY[0x263E4FD30](a5, "");
LABEL_5:
  int v10 = *(_DWORD *)(a1 + 8);
  if (v10)
  {
    return 0;
  }
LABEL_9:
  if (a4) {
    unsigned int v12 = *(_DWORD *)(*(void *)a1 + 8) + 1;
  }
  else {
    unsigned int v12 = 0;
  }
  v21[0] = v22;
  v21[1] = (void *)0x800000000;
  if (v12 <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = v12;
  }
  llvm::SmallVectorImpl<llvm_regmatch_t>::resizeImpl<false>((uint64_t)v21, v13);
  size_t v14 = v21[0];
  *(void *)v21[0] = 0;
  v14[1] = a3;
  int v15 = llvm_regexec(*(void *)a1, a2, v12, v14, 4);
  if (v15)
  {
    if (v15 != 1 && a5) {
    uint64_t v11 = 0;
    }
  }
  else
  {
    if (a4)
    {
      a4[2] = 0;
      if (v12)
      {
        uint64_t v16 = 0;
        do
        {
          uint64_t v17 = *(void *)((char *)v21[0] + v16);
          if (v17 == -1)
          {
            uint64_t v18 = 0;
            uint64_t v19 = 0;
          }
          else
          {
            uint64_t v18 = (uint64_t)&a2[v17];
            uint64_t v19 = *(void *)((char *)v21[0] + v16 + 8) - v17;
          }
          llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a4, v18, v19);
          v16 += 16;
        }
        while (16 * v12 != v16);
      }
    }
    uint64_t v11 = 1;
  }
  if (v21[0] != v22) {
    free(v21[0]);
  }
  return v11;
}

void llvm::SmallVectorImpl<llvm_regmatch_t>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 16);
        unint64_t v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2) {
        bzero((void *)(*(void *)a1 + 16 * v2), 16 * (a2 - v2));
      }
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void llvm::RISCVAttributeParser::stackAlign(llvm::RISCVAttributeParser *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v24[1] = *MEMORY[0x263EF8340];
  uint64_t ULEB128 = llvm::DataExtractor::getULEB128((llvm::RISCVAttributeParser *)((char *)this + 128), (unint64_t *)this + 19, (llvm::RISCVAttributeParser *)((char *)this + 160));
  uint64_t v7 = ULEB128;
  if (ULEB128)
  {
    uint64_t v8 = (char *)v24 + 5;
    unint64_t v9 = ULEB128;
    do
    {
      *--uint64_t v8 = (v9 % 0xA) | 0x30;
      BOOL v10 = v9 > 9;
      v9 /= 0xAuLL;
    }
    while (v10);
  }
  else
  {
    uint64_t v8 = (char *)v24 + 4;
    BYTE4(v24[0]) = 48;
  }
  std::string::__init_with_size[abi:nn180100]<char *,char *>(&v21, v8, (char *)v24 + 5, (char *)v24 + 5 - v8);
  uint64_t v11 = std::string::insert(&v21, 0, "Stack alignment is ");
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:nn180100]<0>(__p, "-bytes");
  if ((v20 & 0x80u) == 0) {
    unint64_t v13 = __p;
  }
  else {
    unint64_t v13 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v14 = v20;
  }
  else {
    std::string::size_type v14 = (std::string::size_type)__p[1];
  }
  int v15 = std::string::append(&v22, (const std::string::value_type *)v13, v14);
  std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)char v23 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v24[0] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v24[0] >= 0) {
    uint64_t v17 = v23;
  }
  else {
    uint64_t v17 = (void **)v23[0];
  }
  if (v24[0] >= 0) {
    uint64_t v18 = HIBYTE(v24[0]);
  }
  else {
    uint64_t v18 = (uint64_t)v23[1];
  }
  llvm::ELFAttributeParser::printAttribute((uint64_t)this, a2, v7, (uint64_t)v17, v18);
  *a3 = 0;
  if (SHIBYTE(v24[0]) < 0) {
    operator delete(v23[0]);
  }
}

uint64_t llvm::RISCVAttributeParser::unalignedAccess@<X0>(llvm::RISCVAttributeParser *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return llvm::ELFAttributeParser::parseStringAttribute((unint64_t *)this, "Unaligned_access", a2, (uint64_t)llvm::RISCVAttributeParser::unalignedAccess::strings, 2uLL, a3);
}

uint64_t llvm::RISCVAttributeParser::handler@<X0>(uint64_t this@<X0>, BOOL *a2@<X2>, uint64_t a3@<X1>, void *a4@<X8>)
{
  uint64_t v6 = 0;
  *a2 = 0;
  while (llvm::RISCVAttributeParser::displayRoutines[v6] != a3)
  {
    v6 += 6;
    if (v6 == 36) {
      goto LABEL_9;
    }
  }
  uint64_t v7 = &llvm::RISCVAttributeParser::displayRoutines[v6];
  unint64_t v9 = (uint64_t (*)(void *))*((void *)v7 + 1);
  uint64_t v8 = *((void *)v7 + 2);
  BOOL v10 = (void *)(this + (v8 >> 1));
  if (v8) {
    unint64_t v9 = *(uint64_t (**)(void *))(*v10 + v9);
  }
  this = v9(v10);
  if (!*a4)
  {
    *a2 = 1;
LABEL_9:
    *a4 = 0;
  }
  return this;
}

void llvm::RISCVAttributeParser::~RISCVAttributeParser(llvm::RISCVAttributeParser *this)
{
  llvm::ELFAttributeParser::~ELFAttributeParser(this);
  JUMPOUT(0x263E500B0);
}

BOOL llvm::RISCVISAInfo::compareExtension(uint64_t a1, uint64_t a2)
{
  unsigned int ExtensionRank = getExtensionRank((char *)a1);
  unsigned int v5 = getExtensionRank((char *)a2);
  if (ExtensionRank != v5) {
    return ExtensionRank < v5;
  }
  int v6 = *(char *)(a2 + 23);
  int v7 = *(char *)(a1 + 23);
  if (v7 >= 0) {
    size_t v8 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v8 = *(void *)(a1 + 8);
  }
  if (v7 >= 0) {
    unint64_t v9 = (const void *)a1;
  }
  else {
    unint64_t v9 = *(const void **)a1;
  }
  if (v6 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v10 = *(void *)(a2 + 8);
  }
  if (v6 >= 0) {
    uint64_t v11 = (const void *)a2;
  }
  else {
    uint64_t v11 = *(const void **)a2;
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  int v13 = memcmp(v9, v11, v12);
  if (v13) {
    return v13 < 0;
  }
  else {
    return v8 < v10;
  }
}

uint64_t getExtensionRank(char *a1)
{
  if (a1[23] >= 0) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = *(char **)a1;
  }
  int v2 = *v1;
  switch(v2)
  {
    case 's':
      return 64;
    case 'x':
      return 256;
    case 'z':
      return singleLetterExtensionRank(v1[1]) | 0x80;
  }
  return singleLetterExtensionRank((char)v2);
}

void llvm::RISCVISAInfo::parseNormalizedArchString(uint64_t a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = MEMORY[0x263EF8318];
    do
    {
      unsigned int v6 = *(char *)(a1 + v4);
      if ((v6 & 0x80000000) != 0)
      {
        if (__maskrune(v6, 0x8000uLL))
        {
LABEL_10:
          size_t v12 = (void *)22;
          int v13 = std::generic_category();
          __p[0] = "string must be lowercase";
          llvm::make_error<llvm::StringError,char const*&,std::error_code>();
        }
      }
      else if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x8000) != 0)
      {
        goto LABEL_10;
      }
      ++v4;
    }
    while (a2 != v4);
    if (a2 >= 5)
    {
      BOOL v7 = *(_DWORD *)a1 == 842233458 && *(unsigned char *)(a1 + 4) == 105;
      if (v7
        || (*(_DWORD *)a1 == 842233458 ? (BOOL v8 = *(unsigned char *)(a1 + 4) == 101) : (BOOL v8 = 0),
            v8
         || (*(_DWORD *)a1 == 875984498 ? (BOOL v9 = *(unsigned char *)(a1 + 4) == 105) : (BOOL v9 = 0),
             v9 || (*(_DWORD *)a1 == 875984498 ? (BOOL v10 = *(unsigned char *)(a1 + 4) == 101) : (BOOL v10 = 0), v10))))
      {
        operator new();
      }
    }
  }
  size_t v12 = (void *)22;
  int v13 = std::generic_category();
  __p[0] = "arch string must begin with valid base ISA";
  llvm::make_error<llvm::StringError,char const*&,std::error_code>();
}

uint64_t llvm::consumeError(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v2);
  uint64_t result = v2;
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return result;
}

void llvm::RISCVISAInfo::toFeatureVector(llvm::RISCVISAInfo *this@<X0>, std::string **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (void *)*((void *)this + 3);
  unint64_t v3 = (char *)this + 32;
  if (v2 != (void *)((char *)this + 32))
  {
    uint64_t v5 = (std::allocator<std::string> *)(a2 + 2);
    do
    {
      if (*((char *)v2 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v37, (const std::string::value_type *)v2[4], v2[5]);
      }
      else {
        std::string v37 = *(std::string *)(v2 + 4);
      }
      char v6 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v37.__r_.__value_.__l.__size_ != 1) {
          goto LABEL_12;
        }
        BOOL v7 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) != 1) {
          goto LABEL_12;
        }
        BOOL v7 = &v37;
      }
      if (v7->__r_.__value_.__s.__data_[0] != 105)
      {
LABEL_12:
        uint64_t v8 = 0;
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v9 = &v37;
        }
        else {
          BOOL v9 = (std::string *)v37.__r_.__value_.__r.__words[0];
        }
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v37.__r_.__value_.__l.__size_;
        }
        do
        {
          if (v11) {
            break;
          }
          BOOL v12 = v8 == 144;
          v8 += 2;
        }
        while (!v12);
        if (v11) {
          goto LABEL_27;
        }
        uint64_t v13 = 0;
        do
        {
          if (v14) {
            break;
          }
          BOOL v12 = v13 == 34;
          v13 += 2;
        }
        while (!v12);
        if (v14)
        {
LABEL_27:
          for (uint64_t i = 0; i != 36; i += 2)
          {
              break;
          }
          std::operator+<char>();
          unint64_t v17 = (unint64_t)a2[1];
          unint64_t v16 = (unint64_t)a2[2];
          if (v17 >= v16)
          {
            unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)*a2) >> 3);
            unint64_t v19 = v18 + 1;
            if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)*a2) >> 3);
            if (2 * v20 > v19) {
              unint64_t v19 = 2 * v20;
            }
            if (v20 >= 0x555555555555555) {
              unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v21 = v19;
            }
            v38.__end_cap_.__value_ = v5;
            if (v21)
            {
              std::string v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v5, v21);
              uint64_t v24 = v23;
            }
            else
            {
              std::string v22 = 0;
              uint64_t v24 = 0;
            }
            uint64_t v26 = (std::string *)&v22[24 * v18];
            if (SHIBYTE(v36) < 0)
            {
              std::string::__init_copy_ctor_external(v26, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              v26->__r_.__value_.__r.__words[2] = v36;
              *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
            }
            int v28 = *a2;
            unint64_t v27 = (unint64_t)a2[1];
            if ((std::string *)v27 == *a2)
            {
              int64x2_t v31 = vdupq_n_s64(v27);
              long long v29 = v26;
            }
            else
            {
              long long v29 = v26;
              do
              {
                long long v30 = *(_OWORD *)(v27 - 24);
                v29[-1].__r_.__value_.__r.__words[2] = *(void *)(v27 - 8);
                *(_OWORD *)&v29[-1].__r_.__value_.__l.__data_ = v30;
                --v29;
                *(void *)(v27 - 16) = 0;
                *(void *)(v27 - 8) = 0;
                *(void *)(v27 - 24) = 0;
                v27 -= 24;
              }
              while ((std::string *)v27 != v28);
              int64x2_t v31 = *(int64x2_t *)a2;
            }
            int v25 = v26 + 1;
            *a2 = v29;
            a2[1] = v25;
            *(int64x2_t *)&v38.__begin_ = v31;
            size_t v32 = a2[2];
            a2[2] = (std::string *)&v22[24 * v24];
            v38.__end_cap_.__value_ = v32;
            v38.__first_ = (std::__split_buffer<std::string>::pointer)v31.i64[0];
            std::__split_buffer<std::string>::~__split_buffer(&v38);
          }
          else
          {
            if (SHIBYTE(v36) < 0)
            {
              std::string::__init_copy_ctor_external(a2[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              *(void *)(v17 + 16) = v36;
              *(_OWORD *)unint64_t v17 = *(_OWORD *)__p;
            }
            int v25 = (std::string *)(v17 + 24);
          }
          a2[1] = v25;
          if (SHIBYTE(v36) < 0) {
            operator delete(__p[0]);
          }
          char v6 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        }
      }
      if (v6 < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      uint64_t v33 = (char *)v2[1];
      if (v33)
      {
        do
        {
          uint64_t v34 = v33;
          uint64_t v33 = *(char **)v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          uint64_t v34 = (char *)v2[2];
          BOOL v12 = *(void *)v34 == (void)v2;
          uint64_t v2 = v34;
        }
        while (!v12);
      }
      uint64_t v2 = v34;
    }
    while (v34 != v3);
  }
}

uint64_t singleLetterExtensionRank(int __c)
{
  if (__c == 105) {
    return 0;
  }
  if (__c == 101) {
    return 1;
  }
  unint64_t v3 = memchr("mafdqlcbkjtpvnh", __c, 0xFuLL);
  if (!v3 || v3 - "mafdqlcbkjtpvnh" == -1) {
    return (__c - 80);
  }
  else {
    return (v3 - "mafdqlcbkjtpvnh") + 2;
  }
}

BOOL anonymous namespace'::FindByName::operator()(const void *a1, size_t a2, char *__s)
{
  if (__s)
  {
    if (strlen(__s) != a2) {
      return 0;
    }
    if (!a2) {
      return 1;
    }
    return memcmp(__s, a1, a2) == 0;
  }
  else
  {
    return a2 == 0;
  }
}

void *llvm::utostr@<X0>(llvm *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  unint64_t v4 = (unint64_t)this;
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!this)
  {
    uint64_t v5 = &v8;
    char v8 = 48;
    if (!a2) {
      return std::string::__init_with_size[abi:nn180100]<char *,char *>(a3, v5, (char *)&v9, (char *)&v9 - v5);
    }
    goto LABEL_5;
  }
  uint64_t v5 = (char *)&v9;
  do
  {
    *--uint64_t v5 = (v4 % 0xA) | 0x30;
    BOOL v6 = v4 > 9;
    v4 /= 0xAuLL;
  }
  while (v6);
  if (a2) {
LABEL_5:
  }
    *--uint64_t v5 = 45;
  return std::string::__init_with_size[abi:nn180100]<char *,char *>(a3, v5, (char *)&v9, (char *)&v9 - v5);
}

uint64_t std::__tree<std::__value_type<std::string,llvm::RISCVExtensionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::RISCVExtensionInfo>,llvm::RISCVISAInfo::ExtensionComparator,true>,std::allocator<std::__value_type<std::string,llvm::RISCVExtensionInfo>>>::__count_unique<std::string>(void *a1, uint64_t a2)
{
  if (a1)
  {
    unint64_t v3 = a1;
    uint64_t v4 = 1;
    do
    {
      if (!llvm::RISCVISAInfo::compareExtension(a2, (uint64_t)(v3 + 4)))
      {
        if (!llvm::RISCVISAInfo::compareExtension((uint64_t)(v3 + 4), a2)) {
          return v4;
        }
        ++v3;
      }
      unint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t *std::unique_ptr<llvm::RISCVISAInfo>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v2 + 24, *(char **)(v2 + 32));
    JUMPOUT(0x263E500B0);
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 4 * v4);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if (v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 4 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4, 4);
    }
    uint64_t v5 = 0;
LABEL_10:
    uint64_t v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6) {
      memcpy((void *)(*(void *)a1 + 4 * v5), (const void *)(*(void *)a2 + 4 * v5), *(void *)a2 + 4 * v6 - (*(void *)a2 + 4 * v5));
    }
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

{
  const void *v4;
  const void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    unint64_t v4 = *(const void **)a2;
    if (v4 != v5)
    {
      llvm::SmallVectorImpl<llvm::orc::JITDylib *>::assignRemote(a1, a2);
      return a1;
    }
    uint64_t v6 = *(unsigned int *)(a2 + 8);
    BOOL v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v6)
    {
      if (v6) {
        memmove(*(void **)a1, v4, 4 * v6);
      }
      goto LABEL_14;
    }
    if (*(_DWORD *)(a1 + 12) >= v6)
    {
      if (v7)
      {
        memmove(*(void **)a1, v4, 4 * v7);
        goto LABEL_12;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6, 4);
    }
    BOOL v7 = 0;
LABEL_12:
    char v8 = *(unsigned int *)(a2 + 8);
    if (v7 != v8) {
      memcpy((void *)(*(void *)a1 + 4 * v7), (const void *)(*(void *)a2 + 4 * v7), *(void *)a2 + 4 * v8 - (*(void *)a2 + 4 * v7));
    }
LABEL_14:
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

void *llvm::SmallPtrSetImplBase::shrink_and_clear(void **this)
{
  free(this[1]);
  unsigned int v2 = *((_DWORD *)this + 5) - *((_DWORD *)this + 6);
  int v3 = 1 << (33 - __clz(v2 - 1));
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
  if (v2 <= 0x10) {
    unsigned int v4 = 32;
  }
  else {
    unsigned int v4 = v3;
  }
  *((_DWORD *)this + 4) = v4;
  uint64_t v5 = malloc_type_malloc(8 * v4, 0x4065EBACuLL);
  if (!v5) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  this[1] = v5;
  size_t v6 = 8 * *((unsigned int *)this + 4);
  return memset(v5, 255, v6);
}

const void **llvm::SmallPtrSetImplBase::insert_imp_big(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  int v4 = *((_DWORD *)this + 5);
  unsigned int v5 = *((_DWORD *)this + 4);
  if (3 * v5 <= 4 * (v4 - *((_DWORD *)this + 6)))
  {
    if (v5 >= 0x40) {
      v5 *= 2;
    }
    else {
      unsigned int v5 = 128;
    }
  }
  else if (v5 - v4 >= v5 >> 3)
  {
    goto LABEL_3;
  }
  llvm::SmallPtrSetImplBase::Grow(this, v5);
LABEL_3:
  uint64_t result = llvm::SmallPtrSetImplBase::FindBucketFor(this, a2);
  if (*result != a2)
  {
    if (*result == (const void *)-2) {
      --*((_DWORD *)this + 6);
    }
    else {
      ++*((_DWORD *)this + 5);
    }
    *uint64_t result = a2;
  }
  return result;
}

void llvm::SmallPtrSetImplBase::Grow(llvm::SmallPtrSetImplBase *this, unsigned int a2)
{
  unsigned int v5 = *(const void ***)this;
  int v4 = (const void **)*((void *)this + 1);
  uint64_t v6 = 16;
  if (v4 == *(const void ***)this) {
    uint64_t v6 = 20;
  }
  uint64_t v7 = *(unsigned int *)((char *)this + v6);
  size_t v8 = 8 * a2;
  uint64_t v9 = malloc_type_malloc(v8, 0x4065EBACuLL);
  if (!v9 && (a2 || (uint64_t v9 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  *((void *)this + 1) = v9;
  *((_DWORD *)this + 4) = a2;
  memset(v9, 255, v8);
  if (v7)
  {
    uint64_t v10 = 8 * v7;
    BOOL v11 = v4;
    do
    {
      if ((unint64_t)*v11 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        BOOL v12 = *v11;
        *llvm::SmallPtrSetImplBase::FindBucketFor(this, *v11) = v12;
      }
      ++v11;
      v10 -= 8;
    }
    while (v10);
  }
  if (v4 != v5) {
    free(v4);
  }
  *(void *)((char *)this + 20) = (*((_DWORD *)this + 5) - *((_DWORD *)this + 6));
}

const void **llvm::SmallPtrSetImplBase::FindBucketFor(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  int v2 = *((_DWORD *)this + 4) - 1;
  uint64_t v3 = *((void *)this + 1);
  unsigned int v4 = v2 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t result = (const void **)(v3 + 8 * v4);
  uint64_t v6 = *result;
  if (*result == (const void *)-1)
  {
    uint64_t v7 = 0;
LABEL_3:
    if (v7) {
      return v7;
    }
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = 1;
    while (v6 != a2)
    {
      if (v7) {
        BOOL v9 = 0;
      }
      else {
        BOOL v9 = v6 == (const void *)-2;
      }
      if (v9) {
        uint64_t v7 = result;
      }
      unsigned int v10 = v4 + v8++;
      unsigned int v4 = v10 & v2;
      uint64_t result = (const void **)(v3 + 8 * v4);
      uint64_t v6 = *result;
      if (*result == (const void *)-1) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

void *llvm::SmallVectorBase<unsigned int>::mallocForGrow(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t New = getNewCapacity<unsigned int>(a3, *(unsigned int *)(a1 + 12));
  *a5 = New;
  unint64_t v10 = New * a4;
  uint64_t result = malloc_type_malloc(New * a4, 0x4065EBACuLL);
  if (!result && (v10 || (uint64_t result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  if (result == a2)
  {
    uint64_t v12 = *a5;
    return llvm::SmallVectorBase<unsigned int>::replaceAllocation(a1, a2, a4, v12, 0);
  }
  return result;
}

unint64_t getNewCapacity<unsigned int>(unint64_t result, uint64_t a2)
{
  if (HIDWORD(result)) {
    report_size_overflow(result);
  }
  if (a2 == 0xFFFFFFFFLL) {
    report_at_maximum_capacity(0xFFFFFFFFuLL);
  }
  unint64_t v2 = (2 * a2) | 1;
  uint64_t v3 = 0xFFFFFFFFLL;
  if (v2 < 0xFFFFFFFF) {
    uint64_t v3 = (2 * a2) | 1;
  }
  if (v2 >= result) {
    return v3;
  }
  return result;
}

void *llvm::SmallVectorBase<unsigned int>::replaceAllocation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a4 * a3;
  BOOL v9 = malloc_type_malloc(a4 * a3, 0x4065EBACuLL);
  if (!v9 && (v8 || (BOOL v9 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  if (a5) {
    memcpy(v9, a2, a5 * a3);
  }
  free(a2);
  return v9;
}

void *llvm::SmallVectorBase<unsigned int>::grow_pod(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  unint64_t New = getNewCapacity<unsigned int>(a3, *(unsigned int *)(a1 + 12));
  unint64_t v8 = New * a4;
  if (*(void **)a1 != a2)
  {
    uint64_t result = malloc_type_realloc(*(void **)a1, New * a4, 0x1DB68EDCuLL);
    unint64_t v10 = result;
    if (result || !v8 && (uint64_t result = malloc_type_malloc(1uLL, 0x4065EBACuLL), (v10 = result) != 0))
    {
      if (v10 == a2)
      {
        uint64_t result = llvm::SmallVectorBase<unsigned int>::replaceAllocation(a1, a2, a4, New, *(unsigned int *)(a1 + 8));
        unint64_t v10 = result;
      }
      goto LABEL_13;
    }
LABEL_14:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unint64_t v10 = malloc_type_malloc(New * a4, 0x4065EBACuLL);
  if (!v10)
  {
    if (v8) {
      goto LABEL_14;
    }
    unint64_t v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
    if (!v10) {
      goto LABEL_14;
    }
  }
  if (v10 == a2) {
    unint64_t v10 = llvm::SmallVectorBase<unsigned int>::replaceAllocation(a1, a2, a4, New, 0);
  }
  uint64_t result = memcpy(v10, *(const void **)a1, *(unsigned int *)(a1 + 8) * a4);
LABEL_13:
  *(void *)a1 = v10;
  *(_DWORD *)(a1 + 12) = New;
  return result;
}

void *llvm::SmallVectorBase<unsigned long long>::grow_pod(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == -1) {
    report_at_maximum_capacity(0xFFFFFFFFFFFFFFFFLL);
  }
  unint64_t v8 = (2 * v4) | 1;
  if (v8 <= a3) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = *(void **)a1;
  uint64_t v11 = v9 * a4;
  if (v10 != a2)
  {
    uint64_t result = malloc_type_realloc(v10, v9 * a4, 0x1DB68EDCuLL);
    uint64_t v13 = result;
    if (result || !v11 && (uint64_t result = malloc_type_malloc(1uLL, 0x4065EBACuLL), (v13 = result) != 0))
    {
      if (v13 == a2)
      {
        uint64_t result = llvm::SmallVectorBase<unsigned int>::replaceAllocation(a1, a2, a4, v9, *(void *)(a1 + 8));
        uint64_t v13 = result;
      }
      goto LABEL_17;
    }
LABEL_19:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v13 = malloc_type_malloc(v9 * a4, 0x4065EBACuLL);
  if (!v13)
  {
    if (v11) {
      goto LABEL_19;
    }
    uint64_t v13 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
    if (!v13) {
      goto LABEL_19;
    }
  }
  if (v13 == a2) {
    uint64_t v13 = llvm::SmallVectorBase<unsigned int>::replaceAllocation(a1, a2, a4, v9, 0);
  }
  uint64_t result = memcpy(v13, *(const void **)a1, *(void *)(a1 + 8) * a4);
LABEL_17:
  *(void *)a1 = v13;
  *(void *)(a1 + 16) = v9;
  return result;
}

void report_size_overflow(unint64_t a1)
{
  std::to_string(&v5, a1);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("SmallVector unable to grow. Requested capacity (", &v5, &v6);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v6, ") is larger than maximum value for size type (", &v7);
  std::to_string(&v4, 0xFFFFFFFFuLL);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v7, (const std::string::value_type *)&v4, &v2);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v2, ")", &v8);
  std::string::~string(&v2);
  std::string::~string(&v4);
  std::string::~string(&v7);
  std::string::~string(&v6);
  std::string::~string(&v5);
  __int16 v3 = 260;
  v2.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  llvm::report_fatal_error((llvm *)&v2, (const llvm::Twine *)1, v1);
}

void report_at_maximum_capacity(unint64_t a1)
{
  std::to_string(&v2, a1);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("SmallVector capacity unable to grow. Already at maximum size ", &v2, &v4);
  std::string::~string(&v2);
  __int16 v3 = 260;
  v2.__r_.__value_.__r.__words[0] = (std::string::size_type)&v4;
  llvm::report_fatal_error((llvm *)&v2, (const llvm::Twine *)1, v1);
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string *a1@<X0>, const std::string::value_type *a2@<X1>, std::string *a3@<X8>)
{
  std::string v4 = (__n128 *)std::string::append(a1, a2);
  __n128 result = *v4;
  *a3 = *(std::string *)v4->n128_u8;
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  return result;
}

{
  std::string::size_type v4;
  std::string::size_type v5;
  __n128 *v6;
  __n128 result;

  std::string v4 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    std::string v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    std::string v5 = v4;
  }
  std::string v6 = (__n128 *)std::string::append(a1, a2, v5);
  __n128 result = *v6;
  *a3 = *(std::string *)v6->n128_u8;
  v6->n128_u64[0] = 0;
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  return result;
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string::value_type *__s@<X0>, std::string *this@<X1>, std::string *a3@<X8>)
{
  std::string v4 = (__n128 *)std::string::insert(this, 0, __s);
  __n128 result = *v4;
  *a3 = *(std::string *)v4->n128_u8;
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  return result;
}

void llvm::SourceMgr::~SourceMgr(llvm::SourceMgr *this)
{
  std::string v2 = (atomic_uint *)*((void *)this + 8);
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  __int16 v3 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
  __int16 v3 = (void **)this;
  std::vector<llvm::SourceMgr::SrcBuffer>::__destroy_vector::operator()[abi:nn180100](&v3);
}

uint64_t llvm::SourceMgr::AddIncludeFile(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  llvm::SourceMgr::OpenIncludeFile(a1, a2, a4, (uint64_t)&v11);
  if (v12)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v10 = v11;
    uint64_t v11 = 0;
    uint64_t v6 = llvm::SourceMgr::AddNewSourceBuffer(a1, &v10, a3);
    uint64_t v7 = v10;
    uint64_t v10 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  if ((v12 & 1) == 0)
  {
    uint64_t v8 = v11;
    uint64_t v11 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  return v6;
}

void llvm::SourceMgr::OpenIncludeFile(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  int v7 = *(char *)(a2 + 23);
  BOOL v8 = v7 < 0;
  uint64_t v9 = *(unsigned char **)a2;
  if (v7 >= 0) {
    uint64_t v9 = (unsigned char *)a2;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  if (v8) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  uint64_t v11 = a1[8];
  v43[4] = 261;
  int v41 = v9;
  *(void *)&long long v42 = v10;
  if (v11) {
    llvm::vfs::FileSystem::getBufferForFile(v11, (uint64_t)&v41, -1, 1, 0, 0, a4);
  }
  else {
    getFileAux<llvm::MemoryBuffer>((const llvm::Twine *)&v41, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, 0, a4);
  }
  int v12 = *(char *)(a2 + 23);
  BOOL v13 = v12 < 0;
  if (v12 >= 0) {
    BOOL v14 = (unsigned char *)a2;
  }
  else {
    BOOL v14 = *(unsigned char **)a2;
  }
  uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
  if (v13) {
    uint64_t v15 = *(void *)(a2 + 8);
  }
  int v41 = v43;
  long long v42 = xmmword_261E8ACE0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v41, v14, &v14[v15]);
  uint64_t v16 = -1431655765 * ((a1[4] - a1[3]) >> 3);
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 24 * v16;
    do
    {
      if ((*(unsigned char *)(a4 + 16) & 1) == 0) {
        break;
      }
      uint64_t v19 = a1[3] + v17;
      int v20 = *(char *)(v19 + 23);
      uint64_t v21 = *(void *)(v19 + 8);
      if (v20 >= 0) {
        std::string v22 = (unsigned char *)(a1[3] + v17);
      }
      else {
        std::string v22 = *(unsigned char **)v19;
      }
      uint64_t v23 = *(unsigned __int8 *)(v19 + 23);
      if (v20 < 0) {
        uint64_t v23 = v21;
      }
      *(void *)&long long v42 = 0;
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v41, v22, &v22[v23]);
      __int16 v37 = 260;
      *(void *)&unsigned long long __dst = a2;
      __int16 v40 = 257;
      __int16 v34 = 257;
      __int16 v32 = 257;
      llvm::sys::path::append(&v41, 0, (uint64_t)&__dst, (uint64_t)v38, (uint64_t)v33, (uint64_t)v31);
      uint64_t v24 = a1[8];
      __int16 v37 = 261;
      unsigned long long __dst = __PAIR128__(v42, (unint64_t)v41);
      if (v24) {
        llvm::vfs::FileSystem::getBufferForFile(v24, (uint64_t)&__dst, -1, 1, 0, 0, (uint64_t)v38);
      }
      else {
        getFileAux<llvm::MemoryBuffer>((const llvm::Twine *)&__dst, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, 0, (uint64_t)v38);
      }
      if (v38 == (void *)a4)
      {
        if ((v39 & 1) == 0) {
          goto LABEL_33;
        }
      }
      else
      {
        char v25 = *(unsigned char *)(a4 + 16);
        if ((v25 & 1) == 0)
        {
          uint64_t v26 = *(void *)a4;
          *(void *)a4 = 0;
          if (v26)
          {
            (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
            char v25 = *(unsigned char *)(a4 + 16);
          }
        }
        if ((v39 & 1) == 0)
        {
          *(unsigned char *)(a4 + 16) = v25 & 0xFE;
          uint64_t v27 = v38[0];
          v38[0] = 0;
          *(void *)a4 = v27;
LABEL_33:
          uint64_t v29 = v38[0];
          v38[0] = 0;
          if (v29) {
            (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
          }
          goto LABEL_35;
        }
        *(unsigned char *)(a4 + 16) = v25 | 1;
        uint64_t v28 = v38[1];
        *(void *)a4 = v38[0];
        *(void *)(a4 + 8) = v28;
      }
LABEL_35:
      v17 += 24;
    }
    while (v18 != v17);
  }
  if ((*(unsigned char *)(a4 + 16) & 1) == 0)
  {
    std::string::basic_string[abi:nn180100](&__dst, v41, v42);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = __dst;
    *(void *)(a3 + 16) = v36;
  }
  if (v41 != v43) {
    free(v41);
  }
}

uint64_t llvm::SourceMgr::AddNewSourceBuffer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v22 = a3;
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v12;
    }
    void v23[4] = v6;
    uint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v6, v14);
    uint64_t v16 = &v15[24 * v11];
    v23[0] = v15;
    v23[1] = v16;
    void v23[3] = &v15[24 * v17];
    uint64_t v20 = 0;
    *(void *)uint64_t v16 = v5;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = a3;
    uint64_t v21 = 0;
    v23[2] = v16 + 24;
    std::vector<llvm::SourceMgr::SrcBuffer>::__swap_out_circular_buffer(a1, v23);
    uint64_t v10 = (void *)a1[1];
    std::__split_buffer<llvm::SourceMgr::SrcBuffer>::~__split_buffer((uint64_t)v23);
  }
  else
  {
    *uint64_t v9 = v5;
    v9[1] = 0;
    uint64_t v10 = v9 + 3;
    void v9[2] = a3;
  }
  a1[1] = (uint64_t)v10;
  uint64_t v18 = -1431655765 * (((unint64_t)v10 - *a1) >> 3);
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v20);
  return v18;
}

uint64_t llvm::SourceMgr::FindBufferContainingLoc(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 3);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  while (*(void *)(*(void *)v2 + 8) > a2 || *(void *)(*(void *)v2 + 16) < a2)
  {
    ++v4;
    v2 += 24;
    if (v3 == v4) {
      return 0;
    }
  }
  return (v4 + 1);
}

uint64_t llvm::SourceMgr::SrcBuffer::getLineNumber(uint64_t this, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)this + 16) - *(void *)(*(void *)this + 8);
  if (v2 <= 0xFF) {
    return llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned char>(this, a2);
  }
  if (!(v2 >> 16)) {
    return llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned short>(this, a2);
  }
  if (HIDWORD(v2)) {
    return llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned long long>(this, a2);
  }
  return llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned int>(this, a2);
}

uint64_t llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned char>(uint64_t a1, char a2)
{
  Offset = (unsigned __int8 **)GetOrCreateOffsetCache<unsigned char>(a1 + 8);
  uint64_t v5 = Offset[1];
  unint64_t v6 = v5 - *Offset;
  if (v5 == *Offset)
  {
    unint64_t v7 = *Offset;
  }
  else
  {
    unint64_t v7 = *Offset;
    do
    {
      unint64_t v8 = &v7[v6 >> 1];
      unsigned int v10 = *v8;
      uint64_t v9 = v8 + 1;
      unint64_t v11 = v6 >> 1;
      v6 += ~(v6 >> 1);
      if (v10 < (a2 - *(_DWORD *)(*(void *)a1 + 8))) {
        unint64_t v7 = v9;
      }
      else {
        unint64_t v6 = v11;
      }
    }
    while (v6);
  }
  return v7 - *Offset + 1;
}

uint64_t llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned short>(uint64_t a1, __int16 a2)
{
  Offset = (unsigned __int16 **)GetOrCreateOffsetCache<unsigned short>(a1 + 8);
  uint64_t v5 = Offset[1];
  if (v5 != *Offset)
  {
    unint64_t v6 = v5 - *Offset;
    uint64_t v5 = *Offset;
    do
    {
      unint64_t v7 = v6 >> 1;
      unint64_t v8 = &v5[v6 >> 1];
      unsigned int v10 = *v8;
      uint64_t v9 = v8 + 1;
      v6 += ~(v6 >> 1);
      if (v10 < (unsigned __int16)(a2 - *(_DWORD *)(*(void *)a1 + 8))) {
        uint64_t v5 = v9;
      }
      else {
        unint64_t v6 = v7;
      }
    }
    while (v6);
  }
  return ((unint64_t)((char *)v5 - (char *)*Offset) >> 1) + 1;
}

uint64_t llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned int>(uint64_t a1, int a2)
{
  Offset = (void *)GetOrCreateOffsetCache<unsigned int>(a1 + 8);
  uint64_t v5 = (_DWORD *)Offset[1];
  if (v5 != (_DWORD *)*Offset)
  {
    unint64_t v6 = ((uint64_t)v5 - *Offset) >> 2;
    uint64_t v5 = (_DWORD *)*Offset;
    do
    {
      unint64_t v7 = v6 >> 1;
      unint64_t v8 = &v5[v6 >> 1];
      unsigned int v10 = *v8;
      uint64_t v9 = v8 + 1;
      v6 += ~(v6 >> 1);
      if (v10 < a2 - *(_DWORD *)(*(void *)a1 + 8)) {
        uint64_t v5 = v9;
      }
      else {
        unint64_t v6 = v7;
      }
    }
    while (v6);
  }
  return (((unint64_t)v5 - *Offset) >> 2) + 1;
}

uint64_t llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned long long>(uint64_t a1, uint64_t a2)
{
  Offset = (void *)GetOrCreateOffsetCache<unsigned long long>(a1 + 8);
  uint64_t v5 = (void *)Offset[1];
  if (v5 != (void *)*Offset)
  {
    unint64_t v6 = ((uint64_t)v5 - *Offset) >> 3;
    uint64_t v5 = (void *)*Offset;
    do
    {
      unint64_t v7 = v6 >> 1;
      unint64_t v8 = &v5[v6 >> 1];
      unint64_t v10 = *v8;
      uint64_t v9 = v8 + 1;
      v6 += ~(v6 >> 1);
      if (v10 < a2 - *(void *)(*(void *)a1 + 8)) {
        uint64_t v5 = v9;
      }
      else {
        unint64_t v6 = v7;
      }
    }
    while (v6);
  }
  return (((unint64_t)v5 - *Offset) >> 3) + 1;
}

void llvm::SourceMgr::SrcBuffer::~SrcBuffer(llvm::SourceMgr::SrcBuffer *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(*(void *)this + 16) - *(void *)(*(void *)this + 8);
  if (v3 > 0xFF && v3 >> 16)
  {
    uint64_t v4 = *(void **)v2;
    if (!*(void *)v2) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
LABEL_7:
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
LABEL_8:
  MEMORY[0x263E500B0](v2, 0x10C402FEFCB83);
  *((void *)this + 1) = 0;
LABEL_9:
  uint64_t v5 = *(void *)this;
  *(void *)this = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
}

unint64_t llvm::SourceMgr::getLineAndColumn(uint64_t *a1, char *a2, int BufferContainingLoc)
{
  if (!BufferContainingLoc) {
    BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(a1, (unint64_t)a2);
  }
  uint64_t v5 = *a1 + 24 * (BufferContainingLoc - 1);
  unsigned int LineNumber = llvm::SourceMgr::SrcBuffer::getLineNumber(v5, (uint64_t)a2);
  unint64_t v7 = &a2[-*(void *)(*(void *)v5 + 8)];
  v9[0] = *(void *)(*(void *)v5 + 8);
  v9[1] = v7;
  return LineNumber | ((unint64_t)(v7
                                        - llvm::StringRef::find_last_of(v9, "\n\r", 2, 0xFFFFFFFFFFFFFFFFLL)) << 32);
}

llvm::raw_ostream *llvm::SourceMgr::PrintIncludeStack(llvm::raw_ostream *result, char *a2, llvm::raw_ostream *a3)
{
  if (a2)
  {
    uint64_t v5 = (uint64_t *)result;
    int BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc((uint64_t *)result, (unint64_t)a2);
    llvm::SourceMgr::PrintIncludeStack(v5, *(void *)(*v5 + 24 * (BufferContainingLoc - 1) + 16), a3);
    unint64_t v7 = (void *)*((void *)a3 + 4);
    if (*((void *)a3 + 3) - (void)v7 > 0xDuLL)
    {
      qmemcpy(v7, "Included from ", 14);
      *((void *)a3 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(a3, "Included from ", 0xEuLL);
    }
    uint64_t v8 = *(void *)(*v5 + 24 * (BufferContainingLoc - 1));
    uint64_t v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    unint64_t v11 = llvm::raw_ostream::operator<<(a3, v9, v10);
    unint64_t v12 = v11;
    unint64_t v13 = (unsigned char *)*((void *)v11 + 4);
    if (*((unsigned char **)v11 + 3) == v13)
    {
      llvm::raw_ostream::write(v11, ":", 1uLL);
    }
    else
    {
      unsigned char *v13 = 58;
      ++*((void *)v11 + 4);
    }
    unsigned int LineAndColumn = llvm::SourceMgr::getLineAndColumn(v5, a2, BufferContainingLoc);
    __n128 result = write_unsigned<unsigned long>(v12, LineAndColumn, 0, 0, 0);
    uint64_t v15 = (_WORD *)*((void *)v12 + 4);
    if (*((void *)v12 + 3) - (void)v15 > 1uLL)
    {
      *uint64_t v15 = 2618;
      *((void *)v12 + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(v12, ":\n", 2uLL);
    }
  }
  return result;
}

void llvm::SourceMgr::GetMessage(uint64_t *a1@<X0>, char *a2@<X1>, int a3@<W2>, llvm::Twine *a4@<X3>, unint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v48[4] = *MEMORY[0x263EF8340];
  unsigned int v46 = v48;
  uint64_t v47 = 0x400000000;
  if (a2)
  {
    __int16 v40 = a4;
    int BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(a1, (unint64_t)a2);
    unint64_t v14 = *(void **)(*a1 + 24 * (BufferContainingLoc - 1));
    uint64_t v15 = (char *)(*(uint64_t (**)(void *))(*v14 + 16))(v14);
    size_t v39 = v16;
    uint64_t v17 = (char *)v14[1];
    uint64_t v18 = a2;
    while (v18 != v17)
    {
      int v20 = *--v18;
      int v19 = v20;
      if (v20 == 13 || v19 == 10)
      {
        uint64_t v17 = v18 + 1;
        break;
      }
    }
    uint64_t v22 = (unsigned __int8 *)v14[2];
    uint64_t v23 = a2;
    if (v22 != (unsigned __int8 *)a2)
    {
      while (1)
      {
        int v24 = *v23;
        if (v24 == 10 || v24 == 13) {
          break;
        }
        if (++v23 == (char *)v22)
        {
          uint64_t v23 = (char *)v14[2];
          break;
        }
      }
    }
    size_t v26 = v23 - v17;
    if (a6)
    {
      uint64_t v27 = &a5[2 * a6];
      do
      {
        unint64_t v29 = *a5;
        unint64_t v28 = a5[1];
        if (*a5) {
          BOOL v30 = v29 > (unint64_t)v23;
        }
        else {
          BOOL v30 = 1;
        }
        if (!v30 && v28 >= (unint64_t)v17)
        {
          if (v29 < (unint64_t)v17) {
            LODWORD(v29) = v17;
          }
          uint64_t v32 = (v29 - v17);
          if (v28 > (unint64_t)v23) {
            LODWORD(v28) = v23;
          }
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v46, v32 | ((unint64_t)(v28 - v17) << 32));
        }
        a5 += 2;
      }
      while (a5 != v27);
    }
    unint64_t LineAndColumn = llvm::SourceMgr::getLineAndColumn(a1, a2, BufferContainingLoc);
    int v34 = LineAndColumn;
    int v35 = HIDWORD(LineAndColumn) - 1;
    size_t v36 = v39;
    a4 = v40;
  }
  else
  {
    size_t v26 = 0;
    uint64_t v17 = 0;
    int v34 = 0;
    int v35 = -1;
    size_t v36 = 9;
    uint64_t v15 = "<unknown>";
  }
  llvm::Twine::str(a4, &__p);
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  llvm::SMDiagnostic::SMDiagnostic(a9, (uint64_t)a1, (uint64_t)a2, v15, v36, v34, v35, a3, p_p, size, v17, v26, v46, v47, a7, a8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v46 != v48) {
    free(v46);
  }
}

void llvm::SourceMgr::PrintMessage(llvm::SourceMgr *this, llvm::raw_ostream *a2, const llvm::SMDiagnostic *a3, int a4)
{
  unint64_t v6 = (void (*)(const llvm::SMDiagnostic *, uint64_t))*((void *)this + 6);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 7);
    v6(a3, v7);
  }
  else
  {
    unint64_t v10 = *((void *)a3 + 1);
    if (v10)
    {
      int BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc((uint64_t *)this, v10);
      llvm::SourceMgr::PrintIncludeStack(this, *(char **)(*(void *)this + 24 * (BufferContainingLoc - 1) + 16), a2);
    }
    llvm::SMDiagnostic::print(a3, 0, (char **)a2, a4, 1);
  }
}

void llvm::SMDiagnostic::print(llvm::SMDiagnostic *this, const char *a2, char **a3, int a4, int a5)
{
  if (a4) {
    int v10 = 0;
  }
  else {
    int v10 = 2;
  }
  __b.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  LODWORD(__b.__r_.__value_.__r.__words[1]) = v10;
  llvm::WithColor::changeColor(&__b, 8, 1, 0);
  if (a2 && *a2)
  {
    size_t v11 = strlen(a2);
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, a2, v11);
    std::string::size_type v12 = __b.__r_.__value_.__r.__words[0];
    unint64_t v13 = *(_WORD **)(__b.__r_.__value_.__r.__words[0] + 32);
    if (*(void *)(__b.__r_.__value_.__r.__words[0] + 24) - (void)v13 > 1uLL)
    {
      _WORD *v13 = 8250;
      *(void *)(v12 + 32) += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, ": ", 2uLL);
    }
  }
  int v14 = *((unsigned __int8 *)this + 39);
  if (*((char *)this + 39) < 0)
  {
    uint64_t v16 = *((void *)this + 3);
    if (!v16) {
      goto LABEL_38;
    }
    if (v16 != 1) {
      goto LABEL_19;
    }
    uint64_t v15 = (unsigned char *)*((void *)this + 2);
  }
  else
  {
    if (!*((unsigned char *)this + 39)) {
      goto LABEL_38;
    }
    uint64_t v15 = (char *)this + 16;
    if (v14 != 1) {
      goto LABEL_19;
    }
  }
  if (*v15 != 45)
  {
LABEL_19:
    uint64_t v17 = (llvm::raw_ostream *)__b.__r_.__value_.__r.__words[0];
    if ((v14 & 0x80u) == 0) {
      int v19 = (char *)this + 16;
    }
    else {
      int v19 = (const char *)*((void *)this + 2);
    }
    if ((v14 & 0x80u) == 0) {
      size_t v20 = *((unsigned __int8 *)this + 39);
    }
    else {
      size_t v20 = *((void *)this + 3);
    }
    goto LABEL_25;
  }
  uint64_t v17 = (llvm::raw_ostream *)__b.__r_.__value_.__r.__words[0];
  uint64_t v18 = *(_DWORD **)(__b.__r_.__value_.__r.__words[0] + 32);
  if (*(void *)(__b.__r_.__value_.__r.__words[0] + 24) - (void)v18 <= 6uLL)
  {
    int v19 = "<stdin>";
    size_t v20 = 7;
LABEL_25:
    llvm::raw_ostream::write(v17, v19, v20);
    goto LABEL_26;
  }
  *(_DWORD *)((char *)v18 + 3) = 1047423332;
  *uint64_t v18 = 1685353276;
  *((void *)v17 + 4) += 7;
LABEL_26:
  if (*((_DWORD *)this + 10) != -1)
  {
    uint64_t v21 = *(unsigned char **)(__b.__r_.__value_.__r.__words[0] + 32);
    if ((unint64_t)v21 >= *(void *)(__b.__r_.__value_.__r.__words[0] + 24))
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, 58);
    }
    else
    {
      *(void *)(__b.__r_.__value_.__r.__words[0] + 32) = v21 + 1;
      *uint64_t v21 = 58;
    }
    llvm::write_integer((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, *((int *)this + 10), 0, 0);
    if (*((_DWORD *)this + 11) != -1)
    {
      uint64_t v22 = *(unsigned char **)(__b.__r_.__value_.__r.__words[0] + 32);
      if ((unint64_t)v22 >= *(void *)(__b.__r_.__value_.__r.__words[0] + 24))
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, 58);
      }
      else
      {
        *(void *)(__b.__r_.__value_.__r.__words[0] + 32) = v22 + 1;
        *uint64_t v22 = 58;
      }
      llvm::write_integer((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, *((int *)this + 11) + 1, 0, 0);
    }
  }
  std::string::size_type v23 = __b.__r_.__value_.__r.__words[0];
  int v24 = *(_WORD **)(__b.__r_.__value_.__r.__words[0] + 32);
  if (*(void *)(__b.__r_.__value_.__r.__words[0] + 24) - (void)v24 > 1uLL)
  {
    *int v24 = 8250;
    *(void *)(v23 + 32) += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, ": ", 2uLL);
  }
LABEL_38:
  llvm::WithColor::resetColor((llvm::WithColor *)&__b);
  if (a5)
  {
    switch(*((_DWORD *)this + 12))
    {
      case 0:
        llvm::WithColor::error((llvm::raw_ostream *)a3, "", 0, a4 ^ 1);
        break;
      case 1:
        llvm::WithColor::warning((llvm::raw_ostream *)a3, "", 0, a4 ^ 1);
        break;
      case 2:
        llvm::WithColor::remark((llvm::raw_ostream *)a3, "", 0, a4 ^ 1);
        break;
      case 3:
        llvm::WithColor::note((llvm::raw_ostream *)a3, "", 0, a4 ^ 1);
        break;
      default:
        break;
    }
  }
  __b.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  LODWORD(__b.__r_.__value_.__r.__words[1]) = v10;
  llvm::WithColor::changeColor(&__b, 8, 1, 0);
  int v25 = *((char *)this + 79);
  if (v25 >= 0) {
    size_t v26 = (char *)this + 56;
  }
  else {
    size_t v26 = (const char *)*((void *)this + 7);
  }
  if (v25 >= 0) {
    size_t v27 = *((unsigned __int8 *)this + 79);
  }
  else {
    size_t v27 = *((void *)this + 8);
  }
  llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, v26, v27);
  unint64_t v28 = *(unsigned char **)(__b.__r_.__value_.__r.__words[0] + 32);
  if ((unint64_t)v28 >= *(void *)(__b.__r_.__value_.__r.__words[0] + 24))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, 10);
  }
  else
  {
    *(void *)(__b.__r_.__value_.__r.__words[0] + 32) = v28 + 1;
    unsigned char *v28 = 10;
  }
  llvm::WithColor::resetColor((llvm::WithColor *)&__b);
  if (*((_DWORD *)this + 10) == -1 || *((_DWORD *)this + 11) == -1) {
    return;
  }
  unint64_t v29 = (void *)((char *)this + 80);
  int v30 = *((char *)this + 103);
  if (v30 >= 0) {
    int64x2_t v31 = (char *)this + 80;
  }
  else {
    int64x2_t v31 = (char *)*((void *)this + 10);
  }
  if (v30 >= 0) {
    unint64_t v32 = *((unsigned __int8 *)this + 103);
  }
  else {
    unint64_t v32 = *((void *)this + 11);
  }
  if (!v32)
  {
LABEL_65:
    std::string::basic_string[abi:nn180100](&__b, v32 + 1, 32);
    int v34 = (unsigned int *)*((void *)this + 13);
    int v35 = (unsigned int *)*((void *)this + 14);
    while (v34 != v35)
    {
      p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_b = &__b;
      }
      std::string::size_type size = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __b.__r_.__value_.__l.__size_;
      }
      if (size >= v34[1]) {
        std::string::size_type size = v34[1];
      }
      int64_t v38 = size - *v34;
      if (v38 >= 1) {
        memset((char *)p_b + *v34, 126, v38);
      }
      v34 += 2;
    }
    memset(&v111, 0, sizeof(v111));
    uint64_t v39 = *((unsigned int *)this + 34);
    if (*((char *)this + 103) < 0) {
      uint64_t v40 = *((void *)this + 11);
    }
    else {
      uint64_t v40 = *((unsigned __int8 *)this + 103);
    }
    uint64_t v41 = *((int *)this + 11);
    if (v39)
    {
      unint64_t v104 = v32;
      uint64_t v105 = (char *)this + 80;
      int v106 = v10;
      uint64_t v107 = this;
      unint64_t v108 = 0;
      unint64_t v42 = *((void *)this + 1) - v41;
      unint64_t v109 = v42;
      unint64_t v110 = v42 + v40;
      uint64_t v43 = 40 * v39;
      uint64_t v44 = *((void *)this + 16) + 24;
      do
      {
        uint64_t v45 = *(llvm::raw_ostream **)(v44 - 8);
        int v46 = *(char *)(v44 + 15);
        if (v46 >= 0) {
          uint64_t v45 = (llvm::raw_ostream *)(v44 - 8);
        }
        size_t v47 = *(void *)v44;
        size_t v48 = *(unsigned __int8 *)(v44 + 15);
        if (v46 >= 0) {
          size_t v49 = *(unsigned __int8 *)(v44 + 15);
        }
        else {
          size_t v49 = *(void *)v44;
        }
        uint64_t v113 = v45;
        size_t v114 = v49;
        if (llvm::StringRef::find_first_of(&v113, "\n\r\t", 3, 0) == -1)
        {
          unint64_t v50 = *(void *)(v44 - 24);
          unint64_t v51 = *(void *)(v44 - 16);
          if (v110 >= v50 && v42 <= v51)
          {
            if (v42 <= v50) {
              unint64_t v53 = (v50 - v42);
            }
            else {
              unint64_t v53 = 0;
            }
            if (v108 > v53) {
              uint64_t v54 = (v108 + 1);
            }
            else {
              uint64_t v54 = v53;
            }
            std::string::size_type v55 = (v54 + v49);
            std::string::size_type v56 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
            if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v56 = v111.__r_.__value_.__l.__size_;
            }
            unint64_t v108 = (v54 + v49);
            if (v56 < v55)
            {
              uint64_t v57 = v54;
              std::string::resize(&v111, v55, 32);
              uint64_t v54 = v57;
              size_t v48 = *(unsigned __int8 *)(v44 + 15);
              size_t v47 = *(void *)v44;
              LOBYTE(v46) = *(unsigned char *)(v44 + 15);
            }
            if ((v46 & 0x80u) == 0) {
              size_t v58 = v48;
            }
            else {
              size_t v58 = v47;
            }
            if (v58)
            {
              unint64_t v59 = &v111;
              if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                unint64_t v59 = (std::string *)v111.__r_.__value_.__r.__words[0];
              }
              if ((v46 & 0x80u) == 0) {
                int v60 = (const void *)(v44 - 8);
              }
              else {
                int v60 = *(const void **)(v44 - 8);
              }
              memmove((char *)v59 + v54, v60, v58);
            }
            if (v110 <= v51) {
              int v61 = v110;
            }
            else {
              int v61 = v51;
            }
            uint64_t v62 = (v61 - v109);
            int v63 = &__b;
            if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v63 = (std::string *)__b.__r_.__value_.__r.__words[0];
            }
            if ((uint64_t)(v62 - v53) >= 1) {
              memset((char *)v63 + v53, 126, v62 - v53);
            }
            unint64_t v42 = v109;
          }
        }
        v44 += 40;
        v43 -= 40;
      }
      while (v43);
      this = v107;
      LODWORD(v41) = *((_DWORD *)v107 + 11);
      int v10 = v106;
      unint64_t v32 = v104;
      unint64_t v29 = v105;
    }
    if (v32 >= v41)
    {
      unint64_t v66 = &__b;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v66 = (std::string *)__b.__r_.__value_.__r.__words[0];
      }
      uint64_t v65 = (char *)v66 + (int)v41;
    }
    else
    {
      unsigned int v64 = &__b;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned int v64 = (std::string *)__b.__r_.__value_.__r.__words[0];
      }
      uint64_t v65 = (char *)v64 + v32;
    }
    unsigned char *v65 = 94;
    std::string::size_type v67 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    std::string::size_type v68 = &__b;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v67 = __b.__r_.__value_.__l.__size_;
      std::string::size_type v68 = (std::string *)__b.__r_.__value_.__r.__words[0];
    }
    unint64_t v69 = (char *)&v68[-1].__r_.__value_.__r.__words[2] + 7;
    while (v67)
    {
      int v70 = v69[v67--];
      if (v70 != 32)
      {
        std::string::size_type v71 = v67 + 1;
        goto LABEL_136;
      }
    }
    std::string::size_type v71 = 0;
LABEL_136:
    std::string::erase(&__b, v71, 0xFFFFFFFFFFFFFFFFLL);
    char v72 = *((unsigned char *)this + 103);
    if (v72 >= 0) {
      uint64_t v73 = (uint64_t)v29;
    }
    else {
      uint64_t v73 = *((void *)this + 10);
    }
    if (v72 >= 0) {
      unint64_t v74 = *((unsigned __int8 *)this + 103);
    }
    else {
      unint64_t v74 = *((void *)this + 11);
    }
    printSourceLine((llvm::raw_ostream *)a3, v73, v74);
    uint64_t v113 = (llvm::raw_ostream *)a3;
    LODWORD(v114) = v10;
    llvm::WithColor::changeColor(&v113, 2, 1, 0);
    unsigned int v75 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unsigned int v75 = __b.__r_.__value_.__r.__words[1];
    }
    uint64_t v76 = v75;
    if (v75)
    {
      unint64_t v77 = 0;
      int v78 = 0;
      do
      {
        if (*((char *)this + 103) < 0) {
          unint64_t v79 = *((void *)this + 11);
        }
        else {
          unint64_t v79 = *((unsigned __int8 *)this + 103);
        }
        if (v79 <= v77) {
          goto LABEL_161;
        }
        std::string v80 = v29;
        if ((*((unsigned char *)this + 103) & 0x80) != 0) {
          std::string v80 = (void *)*v29;
        }
        if (*((unsigned char *)v80 + v77) == 9)
        {
          do
          {
            if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              __int16 v81 = &__b;
            }
            else {
              __int16 v81 = (std::string *)__b.__r_.__value_.__r.__words[0];
            }
            char v82 = v81->__r_.__value_.__s.__data_[v77];
            uint64_t v83 = (char *)*((void *)v113 + 4);
            if ((unint64_t)v83 >= *((void *)v113 + 3))
            {
              llvm::raw_ostream::write(v113, v82);
            }
            else
            {
              *((void *)v113 + 4) = v83 + 1;
              *uint64_t v83 = v82;
            }
            ++v78;
          }
          while ((v78 & 7) != 0);
        }
        else
        {
LABEL_161:
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v84 = &__b;
          }
          else {
            uint64_t v84 = (std::string *)__b.__r_.__value_.__r.__words[0];
          }
          char v85 = v84->__r_.__value_.__s.__data_[v77];
          uint64_t v86 = (char *)*((void *)v113 + 4);
          if ((unint64_t)v86 >= *((void *)v113 + 3))
          {
            llvm::raw_ostream::write(v113, v85);
          }
          else
          {
            *((void *)v113 + 4) = v86 + 1;
            char *v86 = v85;
          }
          ++v78;
        }
        ++v77;
      }
      while (v77 != v76);
    }
    std::string v87 = (unsigned char *)*((void *)v113 + 4);
    if ((unint64_t)v87 >= *((void *)v113 + 3))
    {
      llvm::raw_ostream::write(v113, 10);
    }
    else
    {
      *((void *)v113 + 4) = v87 + 1;
      *std::string v87 = 10;
    }
    llvm::WithColor::resetColor((llvm::WithColor *)&v113);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v88 = v111.__r_.__value_.__l.__size_;
      if (!v111.__r_.__value_.__l.__size_)
      {
LABEL_211:
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v111.__r_.__value_.__l.__data_);
        }
        goto LABEL_213;
      }
    }
    else
    {
      std::string::size_type v88 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
      if (!*((unsigned char *)&v111.__r_.__value_.__s + 23))
      {
LABEL_213:
        if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__b.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
    uint64_t v89 = 0;
    unint64_t v90 = 0;
    while (1)
    {
      if (*((char *)this + 103) < 0) {
        unint64_t v91 = *((void *)this + 11);
      }
      else {
        unint64_t v91 = *((unsigned __int8 *)this + 103);
      }
      if (v90 >= v91)
      {
        char v94 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
        std::string::size_type v95 = v111.__r_.__value_.__r.__words[0];
      }
      else
      {
        __int16 v92 = v29;
        if ((*((unsigned char *)this + 103) & 0x80) != 0) {
          __int16 v92 = (void *)*v29;
        }
        int v93 = *((unsigned __int8 *)v92 + v90);
        char v94 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
        std::string::size_type v95 = v111.__r_.__value_.__r.__words[0];
        if (v93 == 9)
        {
          do
          {
            if (v94 >= 0) {
              uint64_t v96 = &v111;
            }
            else {
              uint64_t v96 = (std::string *)v95;
            }
            char v97 = v96->__r_.__value_.__s.__data_[v90];
            unsigned int v98 = a3[4];
            if (v98 >= a3[3])
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)a3, v97);
            }
            else
            {
              a3[4] = v98 + 1;
              *unsigned int v98 = v97;
            }
            char v94 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
            std::string::size_type v95 = v111.__r_.__value_.__r.__words[0];
            if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v99 = &v111;
            }
            else {
              uint64_t v99 = (std::string *)v111.__r_.__value_.__r.__words[0];
            }
            if (v99->__r_.__value_.__s.__data_[v90] != 32) {
              ++v90;
            }
            ++v89;
          }
          while ((v89 & 7) != 0 && v90 != v88);
          goto LABEL_206;
        }
      }
      if (v94 >= 0) {
        uint64_t v100 = &v111;
      }
      else {
        uint64_t v100 = (std::string *)v95;
      }
      char v101 = v100->__r_.__value_.__s.__data_[v90];
      v102 = a3[4];
      if (v102 >= a3[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a3, v101);
      }
      else
      {
        a3[4] = v102 + 1;
        char *v102 = v101;
      }
      ++v89;
LABEL_206:
      if (++v90 >= v88)
      {
        uint64_t v103 = a3[4];
        if (v103 >= a3[3])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a3, 10);
        }
        else
        {
          a3[4] = v103 + 1;
          *uint64_t v103 = 10;
        }
        goto LABEL_211;
      }
    }
  }
  uint64_t v33 = 0;
  while ((v31[v33] & 0x80000000) == 0)
  {
    if (v32 == ++v33) {
      goto LABEL_65;
    }
  }
  printSourceLine((llvm::raw_ostream *)a3, (uint64_t)v31, v32);
}

void llvm::SourceMgr::PrintMessage(uint64_t *a1, llvm::raw_ostream *a2, char *a3, int a4, llvm::Twine *a5, unint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  v22[22] = *(char **)MEMORY[0x263EF8340];
  llvm::SourceMgr::GetMessage(a1, a3, a4, a5, a6, a7, a9, a10, (uint64_t)v13);
  llvm::SourceMgr::PrintMessage((llvm::SourceMgr *)a1, a2, (const llvm::SMDiagnostic *)v13, a11);
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v22);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
}

uint64_t llvm::SMDiagnostic::SMDiagnostic(uint64_t a1, uint64_t a2, uint64_t a3, void *__src, size_t __len, int a6, int a7, int a8, void *__srca, size_t __lena, void *a11, size_t a12, const void *a13, unint64_t a14, uint64_t a15, uint64_t a16)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (__len > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_42;
  }
  if (__len >= 0x17)
  {
    size_t v23 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v23 = __len | 7;
    }
    size_t v24 = v23 + 1;
    uint64_t v22 = operator new(v23 + 1);
    *(void *)(a1 + 24) = __len;
    *(void *)(a1 + 32) = v24 | 0x8000000000000000;
    *(void *)(a1 + 16) = v22;
    goto LABEL_8;
  }
  uint64_t v22 = (void *)(a1 + 16);
  *(unsigned char *)(a1 + 39) = __len;
  if (__len) {
LABEL_8:
  }
    memmove(v22, __src, __len);
  *((unsigned char *)v22 + __len) = 0;
  *(_DWORD *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 44) = a7;
  *(_DWORD *)(a1 + 48) = a8;
  if (__lena > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_42;
  }
  if (__lena >= 0x17)
  {
    size_t v26 = (__lena & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__lena | 7) != 0x17) {
      size_t v26 = __lena | 7;
    }
    size_t v27 = v26 + 1;
    int v25 = operator new(v26 + 1);
    *(void *)(a1 + 64) = __lena;
    *(void *)(a1 + 72) = v27 | 0x8000000000000000;
    *(void *)(a1 + 56) = v25;
    goto LABEL_16;
  }
  int v25 = (void *)(a1 + 56);
  *(unsigned char *)(a1 + 79) = __lena;
  if (__lena) {
LABEL_16:
  }
    memmove(v25, __srca, __lena);
  *((unsigned char *)v25 + __lena) = 0;
  if (a12 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_42;
  }
  if (a12 >= 0x17)
  {
    size_t v29 = (a12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a12 | 7) != 0x17) {
      size_t v29 = a12 | 7;
    }
    size_t v30 = v29 + 1;
    unint64_t v28 = operator new(v29 + 1);
    *(void *)(a1 + 88) = a12;
    *(void *)(a1 + 96) = v30 | 0x8000000000000000;
    *(void *)(a1 + 80) = v28;
    goto LABEL_24;
  }
  unint64_t v28 = (void *)(a1 + 80);
  *(unsigned char *)(a1 + 103) = a12;
  if (a12) {
LABEL_24:
  }
    memmove(v28, a11, a12);
  *((unsigned char *)v28 + a12) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  if (!a14) {
    goto LABEL_28;
  }
  if (a14 >> 61) {
LABEL_42:
  }
    abort();
  int64x2_t v31 = (char *)operator new(8 * a14);
  *(void *)(a1 + 104) = v31;
  *(void *)(a1 + 112) = v31;
  *(void *)(a1 + 120) = &v31[8 * a14];
  memcpy(v31, a13, 8 * a14);
  *(void *)(a1 + 112) = &v31[8 * a14];
LABEL_28:
  unint64_t v32 = a1 + 144;
  *(void *)(a1 + 128) = a1 + 144;
  *(void *)(a1 + 136) = 0x400000000;
  if (0xCCCCCCCCCCCCCCCDLL * ((40 * a16) >> 3) < 5)
  {
    unsigned int v33 = 0;
    unsigned int v34 = 0;
    if (!a16) {
      goto LABEL_38;
    }
  }
  else
  {
    llvm::SmallVectorTemplateBase<llvm::SMFixIt,false>::grow(a1 + 128, 0xCCCCCCCCCCCCCCCDLL * ((40 * a16) >> 3));
    unsigned int v33 = *(_DWORD *)(a1 + 136);
    unint64_t v32 = *(void *)(a1 + 128);
    unsigned int v34 = v33;
    if (!a16) {
      goto LABEL_38;
    }
  }
  int v35 = (std::string *)(v32 + 40 * v34 + 16);
  size_t v36 = (long long *)(a15 + 16);
  do
  {
    *(_OWORD *)&v35[-1].__r_.__value_.__r.__words[1] = *(v36 - 1);
    if (*((char *)v36 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)v36, *((void *)v36 + 1));
    }
    else
    {
      long long v37 = *v36;
      v35->__r_.__value_.__r.__words[2] = *((void *)v36 + 2);
      *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v37;
    }
    int64_t v38 = v36 - 1;
    int v35 = (std::string *)((char *)v35 + 40);
    size_t v36 = (long long *)((char *)v36 + 40);
  }
  while ((long long *)((char *)v38 + 40) != (long long *)(a15 + 40 * a16));
  unsigned int v33 = *(_DWORD *)(a1 + 136);
  unint64_t v32 = *(void *)(a1 + 128);
LABEL_38:
  unint64_t v40 = v33 - 858993459 * ((40 * a16) >> 3);
  BOOL v39 = v40 == 0;
  *(_DWORD *)(a1 + 136) = v40;
  unint64_t v41 = v32 + 40 * v40;
  unint64_t v42 = 126 - 2 * __clz(v40);
  if (v39) {
    uint64_t v43 = 0;
  }
  else {
    uint64_t v43 = v42;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,false>(v32, v41, v43, 1);
  return a1;
}

llvm::raw_ostream *printSourceLine(llvm::raw_ostream *result, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = result;
  if (a3)
  {
    unsigned int v6 = 0;
    int v7 = 0;
    while (1)
    {
      unint64_t v8 = v6;
      if (a3 <= v6) {
        break;
      }
      uint64_t v9 = (char *)memchr((void *)(a2 + v6), 9, a3 - v6);
      int v10 = &v9[-a2];
      if (!v9 || v10 + 1 == 0) {
        break;
      }
      if (a3 >= v8) {
        unint64_t v12 = v8;
      }
      else {
        unint64_t v12 = a3;
      }
      if (v12 <= (unint64_t)v10) {
        unint64_t v13 = &v9[-a2];
      }
      else {
        unint64_t v13 = (char *)v8;
      }
      if ((unint64_t)v13 >= a3) {
        unint64_t v13 = (char *)a3;
      }
      __n128 result = llvm::raw_ostream::operator<<(v4, (const void *)(a2 + v12), (size_t)&v13[-v12]);
      int v7 = v7 - v8 + v10;
      do
      {
        int v14 = (unsigned char *)*((void *)v4 + 4);
        if ((unint64_t)v14 >= *((void *)v4 + 3))
        {
          __n128 result = llvm::raw_ostream::write(v4, 32);
        }
        else
        {
          *((void *)v4 + 4) = v14 + 1;
          *int v14 = 32;
        }
        ++v7;
      }
      while ((v7 & 7) != 0);
      unsigned int v6 = v10 + 1;
      if (v10 + 1 == a3) {
        goto LABEL_27;
      }
    }
    if (a3 >= v8) {
      unint64_t v15 = v8;
    }
    else {
      unint64_t v15 = a3;
    }
    __n128 result = llvm::raw_ostream::operator<<(v4, (const void *)(a2 + v15), a3 - v15);
  }
LABEL_27:
  uint64_t v16 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v16 >= *((void *)v4 + 3))
  {
    return llvm::raw_ostream::write(v4, 10);
  }
  else
  {
    *((void *)v4 + 4) = v16 + 1;
    *uint64_t v16 = 10;
  }
  return result;
}

uint64_t *std::vector<llvm::SourceMgr::SrcBuffer>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      long long v8 = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v6 - 24) = v8;
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 16) = 0;
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v9 = *result;
  *__n128 result = v4;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<llvm::SourceMgr::SrcBuffer>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)(i - 24));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char **llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 40 * v3;
    do
    {
      if (v2[v4 - 1] < 0) {
        operator delete(*(void **)&v2[v4 - 24]);
      }
      v4 -= 40;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void std::vector<llvm::SourceMgr::SrcBuffer>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  BOOL v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)(v4 - 24));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t GetOrCreateOffsetCache<unsigned char>(uint64_t a1)
{
  if (!*(void *)a1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t GetOrCreateOffsetCache<unsigned short>(uint64_t a1)
{
  if (!*(void *)a1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t GetOrCreateOffsetCache<unsigned int>(uint64_t a1)
{
  if (!*(void *)a1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t GetOrCreateOffsetCache<unsigned long long>(uint64_t a1)
{
  if (!*(void *)a1) {
    operator new();
  }
  return *(void *)a1;
}

void llvm::SmallVectorTemplateBase<llvm::SMFixIt,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 40, &v6);
  llvm::SmallVectorTemplateBase<llvm::SMFixIt,false>::moveElementsForGrow((uint64_t *)a1, (uint64_t)v4);
  int v5 = v6;
  if (*(void *)a1 != v3) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

void llvm::SmallVectorTemplateBase<llvm::SMFixIt,false>::moveElementsForGrow(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = *a1 + 40 * v2;
    do
    {
      *(_OWORD *)a2 = *(_OWORD *)v3;
      long long v5 = *(_OWORD *)(v3 + 16);
      *(void *)(a2 + 32) = *(void *)(v3 + 32);
      *(_OWORD *)(a2 + 16) = v5;
      *(void *)(v3 + 24) = 0;
      *(void *)(v3 + 32) = 0;
      *(void *)(v3 + 16) = 0;
      v3 += 40;
      a2 += 40;
    }
    while (v3 != v4);
    uint64_t v6 = *((unsigned int *)a1 + 2);
    if (v6)
    {
      uint64_t v7 = *a1;
      uint64_t v8 = 40 * v6;
      do
      {
        if (*(char *)(v7 + v8 - 1) < 0) {
          operator delete(*(void **)(v7 + v8 - 24));
        }
        v8 -= 40;
      }
      while (v8);
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v127 = *MEMORY[0x263EF8340];
  while (2)
  {
    long long v117 = (long long *)(a2 - 80);
    v119 = (long long *)(a2 - 40);
    unint64_t v116 = (long long *)(a2 - 120);
    unint64_t v10 = a1;
    unint64_t v121 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          uint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (llvm::SMFixIt::operator<(v119, (void *)a1))
                {
                  long long v122 = *(_OWORD *)a1;
                  uint64_t v55 = *(void *)(a1 + 16);
                  *(void *)&long long v126 = *(void *)(a1 + 24);
                  *(void *)((char *)&v126 + 7) = *(void *)(a1 + 31);
                  char v56 = *(unsigned char *)(a1 + 39);
                  *(void *)(a1 + 24) = 0;
                  *(void *)(a1 + 32) = 0;
                  *(void *)(a1 + 16) = 0;
                  *(_OWORD *)a1 = *v119;
                  long long v57 = *(_OWORD *)(a2 - 24);
                  *(void *)(a1 + 32) = *(void *)(a2 - 8);
                  *(_OWORD *)(a1 + 16) = v57;
                  long long *v119 = v122;
                  *(void *)(a2 - 24) = v55;
                  uint64_t v58 = v126;
                  *(void *)(a2 - 9) = *(void *)((char *)&v126 + 7);
                  *(void *)(a2 - 16) = v58;
                  *(unsigned char *)(a2 - 1) = v56;
                }
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)a1, (long long *)(a1 + 40), v119);
                break;
              case 4:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a1 + 40, a1 + 80, (uint64_t)v119);
                break;
              case 5:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a1 + 40, a1 + 80, a1 + 120, (uint64_t)v119);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            if (a4)
            {
              if (a1 != a2)
              {
                unint64_t v59 = (void *)(a1 + 40);
                if (a1 + 40 != a2)
                {
                  uint64_t v60 = 0;
                  unint64_t v61 = a1;
                  do
                  {
                    uint64_t v62 = v59;
                    if (llvm::SMFixIt::operator<(v59, (void *)v61))
                    {
                      long long v122 = *(_OWORD *)v62;
                      uint64_t v124 = *(void *)(v61 + 72);
                      long long v123 = *(_OWORD *)(v61 + 56);
                      *(void *)(v61 + 64) = 0;
                      *(void *)(v61 + 72) = 0;
                      *(void *)(v61 + 56) = 0;
                      char v63 = *((unsigned char *)v62 + 39);
                      uint64_t v64 = v60;
                      while (1)
                      {
                        uint64_t v65 = v64;
                        uint64_t v66 = a1 + v64;
                        *(_OWORD *)(v66 + 40) = *(_OWORD *)v66;
                        std::string::size_type v67 = (void **)(v66 + 56);
                        if (v63 < 0) {
                          operator delete(*v67);
                        }
                        *(_OWORD *)std::string::size_type v67 = *(_OWORD *)(v66 + 16);
                        *(void *)(v66 + 72) = *(void *)(v66 + 32);
                        *(unsigned char *)(v66 + 39) = 0;
                        *(unsigned char *)(v66 + 16) = 0;
                        if (!v65) {
                          break;
                        }
                        uint64_t v64 = v65 - 40;
                        BOOL v68 = llvm::SMFixIt::operator<(&v122, (void *)(v65 - 40 + a1));
                        char v63 = 0;
                        if (!v68)
                        {
                          unint64_t v69 = (_OWORD *)(a1 + v65);
                          goto LABEL_84;
                        }
                      }
                      unint64_t v69 = (_OWORD *)a1;
LABEL_84:
                      *unint64_t v69 = v122;
                      uint64_t v70 = a1 + v65;
                      long long v71 = v123;
                      *(void *)(v70 + 32) = v124;
                      *(_OWORD *)(v70 + 16) = v71;
                      a2 = v121;
                    }
                    unint64_t v59 = v62 + 5;
                    v60 += 40;
                    unint64_t v61 = (unint64_t)v62;
                  }
                  while (v62 + 5 != (void *)a2);
                }
              }
            }
            else if (a1 != a2)
            {
              unint64_t v108 = (void *)(a1 + 40);
              if (a1 + 40 != a2)
              {
                unint64_t v109 = a1 - 40;
                do
                {
                  unint64_t v110 = v108;
                  if (llvm::SMFixIt::operator<(v108, (void *)a1))
                  {
                    long long v122 = *(_OWORD *)v110;
                    uint64_t v124 = *(void *)(a1 + 72);
                    long long v123 = *(_OWORD *)(a1 + 56);
                    *(void *)(a1 + 64) = 0;
                    *(void *)(a1 + 72) = 0;
                    *(void *)(a1 + 56) = 0;
                    char v111 = *((unsigned char *)v110 + 39);
                    unint64_t v112 = v109;
                    do
                    {
                      *(_OWORD *)(v112 + 80) = *(_OWORD *)(v112 + 40);
                      uint64_t v113 = (void **)(v112 + 96);
                      if (v111 < 0) {
                        operator delete(*v113);
                      }
                      *(_OWORD *)uint64_t v113 = *(_OWORD *)(v112 + 56);
                      *(void *)(v112 + 112) = *(void *)(v112 + 72);
                      *(unsigned char *)(v112 + 79) = 0;
                      *(unsigned char *)(v112 + 56) = 0;
                      BOOL v114 = llvm::SMFixIt::operator<(&v122, (void *)v112);
                      char v111 = 0;
                      v112 -= 40;
                    }
                    while (v114);
                    *(_OWORD *)(v112 + 80) = v122;
                    long long v115 = v123;
                    *(void *)(v112 + 112) = v124;
                    *(_OWORD *)(v112 + 96) = v115;
                    a2 = v121;
                  }
                  unint64_t v108 = v110 + 5;
                  v109 += 40;
                  a1 = (unint64_t)v110;
                }
                while (v110 + 5 != (void *)a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if (a1 != a2)
            {
              int64_t v72 = (unint64_t)(v12 - 2) >> 1;
              int64_t v73 = v72;
              do
              {
                int64_t v74 = v73;
                if (v72 >= v73)
                {
                  uint64_t v75 = (2 * v73) | 1;
                  unint64_t v76 = a1 + 40 * v75;
                  if (2 * v73 + 2 < v12 && llvm::SMFixIt::operator<((void *)(a1 + 40 * v75), (void *)(v76 + 40)))
                  {
                    v76 += 40;
                    uint64_t v75 = 2 * v74 + 2;
                  }
                  unint64_t v77 = a1 + 40 * v74;
                  if (!llvm::SMFixIt::operator<((void *)v76, (void *)v77))
                  {
                    long long v122 = *(_OWORD *)v77;
                    unint64_t v78 = a1 + 40 * v74;
                    long long v79 = *(_OWORD *)(v78 + 16);
                    uint64_t v124 = *(void *)(v78 + 32);
                    long long v123 = v79;
                    *(void *)(v78 + 24) = 0;
                    *(void *)(v78 + 32) = 0;
                    *(void *)(v78 + 16) = 0;
                    do
                    {
                      unint64_t v80 = v76;
                      *(_OWORD *)unint64_t v77 = *(_OWORD *)v76;
                      long long v81 = *(_OWORD *)(v76 + 16);
                      *(void *)(v77 + 32) = *(void *)(v76 + 32);
                      *(_OWORD *)(v77 + 16) = v81;
                      *(unsigned char *)(v76 + 39) = 0;
                      *(unsigned char *)(v76 + 16) = 0;
                      if (v72 < v75) {
                        break;
                      }
                      uint64_t v82 = (2 * v75) | 1;
                      unint64_t v76 = a1 + 40 * v82;
                      uint64_t v83 = 2 * v75 + 2;
                      if (v83 < v12 && llvm::SMFixIt::operator<((void *)(a1 + 40 * v82), (void *)(v76 + 40)))
                      {
                        v76 += 40;
                        uint64_t v82 = v83;
                      }
                      unint64_t v77 = v80;
                      uint64_t v75 = v82;
                    }
                    while (!llvm::SMFixIt::operator<((void *)v76, &v122));
                    *(_OWORD *)unint64_t v80 = v122;
                    long long v84 = v123;
                    *(void *)(v80 + 32) = v124;
                    *(_OWORD *)(v80 + 16) = v84;
                  }
                }
                int64_t v73 = v74 - 1;
              }
              while (v74);
              int64_t v85 = v11 / 0x28uLL;
              unint64_t v86 = v121;
              do
              {
                uint64_t v87 = 0;
                long long v126 = *(_OWORD *)a1;
                uint64_t v118 = *(void *)(a1 + 16);
                v125[0] = *(void *)(a1 + 24);
                *(void *)((char *)v125 + 7) = *(void *)(a1 + 31);
                char v120 = *(unsigned char *)(a1 + 39);
                *(void *)(a1 + 24) = 0;
                *(void *)(a1 + 32) = 0;
                uint64_t v88 = v85 - 2;
                if (v85 < 2) {
                  uint64_t v88 = v85 - 1;
                }
                uint64_t v89 = v88 >> 1;
                unint64_t v90 = a1;
                *(void *)(a1 + 16) = 0;
                do
                {
                  uint64_t v91 = v90 + 40 * v87 + 40;
                  uint64_t v92 = (2 * v87) | 1;
                  uint64_t v93 = 2 * v87 + 2;
                  if (v93 < v85
                    && llvm::SMFixIt::operator<((void *)(v90 + 40 * v87 + 40), (void *)(v90 + 40 * v87 + 80)))
                  {
                    v91 += 40;
                    uint64_t v92 = v93;
                  }
                  *(_OWORD *)unint64_t v90 = *(_OWORD *)v91;
                  long long v94 = *(_OWORD *)(v91 + 16);
                  *(void *)(v90 + 32) = *(void *)(v91 + 32);
                  *(_OWORD *)(v90 + 16) = v94;
                  *(unsigned char *)(v91 + 39) = 0;
                  *(unsigned char *)(v91 + 16) = 0;
                  unint64_t v90 = v91;
                  uint64_t v87 = v92;
                }
                while (v92 <= v89);
                std::string::size_type v95 = (_OWORD *)(v86 - 40);
                if (v91 == v86 - 40)
                {
                  unint64_t v98 = v86 - 40;
                  *(_OWORD *)uint64_t v91 = v126;
                  *(void *)(v91 + 16) = v118;
                  *(void *)(v91 + 24) = v125[0];
                  *(void *)(v91 + 31) = *(void *)((char *)v125 + 7);
                  *(unsigned char *)(v91 + 39) = v120;
                }
                else
                {
                  uint64_t v96 = (long long *)(v91 + 16);
                  *(_OWORD *)uint64_t v91 = *v95;
                  uint64_t v97 = *(void *)(v86 - 8);
                  *(_OWORD *)(v91 + 16) = *(_OWORD *)(v86 - 24);
                  *(void *)(v91 + 32) = v97;
                  unint64_t v98 = v86 - 40;
                  *std::string::size_type v95 = v126;
                  *(void *)(v86 - 24) = v118;
                  uint64_t v99 = v125[0];
                  *(void *)(v86 - 9) = *(void *)((char *)v125 + 7);
                  *(void *)(v86 - 16) = v99;
                  *(unsigned char *)(v86 - 1) = v120;
                  uint64_t v100 = v91 - a1 + 40;
                  if (v100 >= 41)
                  {
                    unint64_t v101 = (v100 / 0x28uLL - 2) >> 1;
                    unint64_t v102 = a1 + 40 * v101;
                    if (llvm::SMFixIt::operator<((void *)v102, (void *)v91))
                    {
                      long long v122 = *(_OWORD *)v91;
                      long long v103 = *v96;
                      uint64_t v124 = *(void *)(v91 + 32);
                      long long v123 = v103;
                      *(void *)(v91 + 24) = 0;
                      *(void *)(v91 + 32) = 0;
                      *(void *)uint64_t v96 = 0;
                      do
                      {
                        uint64_t v104 = v102;
                        *(_OWORD *)uint64_t v91 = *(_OWORD *)v102;
                        long long v105 = *(_OWORD *)(v102 + 16);
                        *(void *)(v91 + 32) = *(void *)(v102 + 32);
                        *(_OWORD *)(v91 + 16) = v105;
                        *(unsigned char *)(v102 + 39) = 0;
                        *(unsigned char *)(v102 + 16) = 0;
                        if (!v101) {
                          break;
                        }
                        unint64_t v101 = (v101 - 1) >> 1;
                        unint64_t v102 = a1 + 40 * v101;
                        uint64_t v91 = v104;
                      }
                      while (llvm::SMFixIt::operator<((void *)v102, &v122));
                      *(_OWORD *)uint64_t v104 = v122;
                      long long v106 = v123;
                      *(void *)(v104 + 32) = v124;
                      *(_OWORD *)(v104 + 16) = v106;
                    }
                  }
                }
                BOOL v107 = v85-- <= 2;
                unint64_t v86 = v98;
              }
              while (!v107);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = a1 + 40 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 < 0x1401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)v14, (long long *)a1, v119);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)a1, (long long *)v14, v119);
            uint64_t v15 = 5 * v13;
            unint64_t v16 = a1 + 8 * v15;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)(a1 + 40), (long long *)(v16 - 40), v117);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)(a1 + 80), (long long *)(a1 + 40 + 8 * v15), v116);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)(v16 - 40), (long long *)v14, (long long *)(a1 + 40 + 8 * v15));
            long long v122 = *(_OWORD *)a1;
            *(void *)((char *)&v126 + 7) = *(void *)(a1 + 31);
            uint64_t v17 = *(void *)(a1 + 16);
            *(void *)&long long v126 = *(void *)(a1 + 24);
            char v18 = *(unsigned char *)(a1 + 39);
            *(void *)(a1 + 24) = 0;
            *(void *)(a1 + 32) = 0;
            *(void *)(a1 + 16) = 0;
            uint64_t v19 = *(void *)(v16 + 32);
            long long v20 = *(_OWORD *)(v16 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)(a1 + 16) = v20;
            *(void *)(a1 + 32) = v19;
            *(_OWORD *)unint64_t v14 = v122;
            *(void *)(v16 + 16) = v17;
            uint64_t v21 = v126;
            *(void *)(v16 + 31) = *(void *)((char *)&v126 + 7);
            *(void *)(v16 + 24) = v21;
            *(unsigned char *)(v14 + 39) = v18;
          }
          --a3;
          if ((a4 & 1) != 0 || llvm::SMFixIt::operator<((void *)(a1 - 40), (void *)a1)) {
            break;
          }
          long long v39 = *(_OWORD *)(a1 + 16);
          long long v122 = *(_OWORD *)a1;
          uint64_t v40 = *(void *)(a1 + 32);
          long long v123 = v39;
          uint64_t v124 = v40;
          *(void *)(a1 + 24) = 0;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 16) = 0;
          if (llvm::SMFixIt::operator<(&v122, v119))
          {
            unint64_t v10 = a1;
            unint64_t v41 = v121;
            do
              v10 += 40;
            while (!llvm::SMFixIt::operator<(&v122, (void *)v10));
          }
          else
          {
            unint64_t v42 = (void *)(a1 + 40);
            unint64_t v41 = v121;
            do
            {
              unint64_t v10 = (unint64_t)v42;
              if ((unint64_t)v42 >= v121) {
                break;
              }
              BOOL v43 = llvm::SMFixIt::operator<(&v122, v42);
              unint64_t v42 = (void *)(v10 + 40);
            }
            while (!v43);
          }
          unint64_t v44 = v41;
          if (v10 < v41)
          {
            unint64_t v44 = v41;
            do
              v44 -= 40;
            while (llvm::SMFixIt::operator<(&v122, (void *)v44));
          }
          while (v10 < v44)
          {
            long long v126 = *(_OWORD *)v10;
            uint64_t v45 = *(void *)(v10 + 16);
            v125[0] = *(void *)(v10 + 24);
            *(void *)((char *)v125 + 7) = *(void *)(v10 + 31);
            char v46 = *(unsigned char *)(v10 + 39);
            *(void *)(v10 + 24) = 0;
            *(void *)(v10 + 32) = 0;
            *(void *)(v10 + 16) = 0;
            *(_OWORD *)unint64_t v10 = *(_OWORD *)v44;
            long long v47 = *(_OWORD *)(v44 + 16);
            *(void *)(v10 + 32) = *(void *)(v44 + 32);
            *(_OWORD *)(v10 + 16) = v47;
            *(_OWORD *)unint64_t v44 = v126;
            uint64_t v48 = v125[0];
            *(void *)(v44 + 16) = v45;
            *(void *)(v44 + 24) = v48;
            *(void *)(v44 + 31) = *(void *)((char *)v125 + 7);
            *(unsigned char *)(v44 + 39) = v46;
            do
              v10 += 40;
            while (!llvm::SMFixIt::operator<(&v122, (void *)v10));
            do
              v44 -= 40;
            while (llvm::SMFixIt::operator<(&v122, (void *)v44));
          }
          size_t v49 = (long long *)(v10 - 40);
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 == a1)
          {
            int v53 = *(char *)(v10 - 1);
            *(_OWORD *)a1 = v122;
            unint64_t v51 = v10 - 24;
            if (v53 < 0) {
              operator delete(*(void **)v51);
            }
          }
          else
          {
            unint64_t v50 = (void **)(a1 + 16);
            *(_OWORD *)a1 = *v49;
            if (*(char *)(a1 + 39) < 0) {
              operator delete(*v50);
            }
            unint64_t v51 = v10 - 24;
            long long v52 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 32) = *(void *)(v10 - 8);
            *(_OWORD *)unint64_t v50 = v52;
            *(unsigned char *)(v10 - 1) = 0;
            *(unsigned char *)(v10 - 24) = 0;
            *size_t v49 = v122;
          }
          a4 = 0;
          long long v54 = v123;
          *(void *)(v51 + 16) = v124;
          *(_OWORD *)unint64_t v51 = v54;
          a2 = v121;
        }
        uint64_t v22 = 0;
        long long v23 = *(_OWORD *)(a1 + 16);
        long long v122 = *(_OWORD *)a1;
        size_t v24 = (void **)(a1 + 16);
        uint64_t v25 = *(void *)(a1 + 32);
        long long v123 = v23;
        uint64_t v124 = v25;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 16) = 0;
        do
          v22 += 40;
        while (llvm::SMFixIt::operator<((void *)(v22 + a1), &v122));
        unint64_t v26 = a1 + v22;
        size_t v27 = (void *)v121;
        if (v22 == 40)
        {
          size_t v27 = (void *)v121;
          do
          {
            if (v26 >= (unint64_t)v27) {
              break;
            }
            v27 -= 5;
          }
          while (!llvm::SMFixIt::operator<(v27, &v122));
        }
        else
        {
          do
            v27 -= 5;
          while (!llvm::SMFixIt::operator<(v27, &v122));
        }
        unint64_t v10 = a1 + v22;
        if (v26 < (unint64_t)v27)
        {
          unint64_t v28 = v27;
          do
          {
            long long v126 = *(_OWORD *)v10;
            uint64_t v29 = *(void *)(v10 + 16);
            v125[0] = *(void *)(v10 + 24);
            *(void *)((char *)v125 + 7) = *(void *)(v10 + 31);
            char v30 = *(unsigned char *)(v10 + 39);
            *(void *)(v10 + 24) = 0;
            *(void *)(v10 + 32) = 0;
            *(void *)(v10 + 16) = 0;
            *(_OWORD *)unint64_t v10 = *(_OWORD *)v28;
            long long v31 = *((_OWORD *)v28 + 1);
            *(void *)(v10 + 32) = v28[4];
            *(_OWORD *)(v10 + 16) = v31;
            *(_OWORD *)unint64_t v28 = v126;
            uint64_t v32 = v125[0];
            void v28[2] = v29;
            _DWORD v28[3] = v32;
            *(void *)((char *)v28 + 31) = *(void *)((char *)v125 + 7);
            *((unsigned char *)v28 + 39) = v30;
            do
              v10 += 40;
            while (llvm::SMFixIt::operator<((void *)v10, &v122));
            do
              v28 -= 5;
            while (!llvm::SMFixIt::operator<(v28, &v122));
          }
          while (v10 < (unint64_t)v28);
        }
        unsigned int v33 = (long long *)(v10 - 40);
        if (v10 - 40 == a1)
        {
          int v36 = *(char *)(v10 - 1);
          *(_OWORD *)a1 = v122;
          unint64_t v34 = v10 - 24;
          if (v36 < 0) {
            operator delete(*(void **)v34);
          }
        }
        else
        {
          *(_OWORD *)a1 = *v33;
          if (*(char *)(a1 + 39) < 0) {
            operator delete(*v24);
          }
          unint64_t v34 = v10 - 24;
          long long v35 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 32) = *(void *)(v10 - 8);
          *(_OWORD *)size_t v24 = v35;
          *(unsigned char *)(v10 - 1) = 0;
          *(unsigned char *)(v10 - 24) = 0;
          *unsigned int v33 = v122;
        }
        long long v37 = v123;
        *(void *)(v34 + 16) = v124;
        *(_OWORD *)unint64_t v34 = v37;
        a2 = v121;
        if (v26 >= (unint64_t)v27) {
          break;
        }
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v38 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(v10, v121))
      {
        break;
      }
      if (!v38) {
        goto LABEL_35;
      }
    }
    a2 = v10 - 40;
    if (!v38) {
      continue;
    }
    break;
  }
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(long long *a1, long long *a2, long long *a3)
{
  BOOL v6 = llvm::SMFixIt::operator<(a2, a1);
  BOOL result = llvm::SMFixIt::operator<(a3, a2);
  if (v6)
  {
    uint64_t v8 = a1 + 1;
    uint64_t v9 = (void *)a1 + 3;
    if (result)
    {
      long long v23 = *a1;
      uint64_t v10 = *((void *)a1 + 2);
      *(void *)&long long v28 = *v9;
      *(void *)((char *)&v28 + 7) = *(void *)((char *)a1 + 31);
      char v11 = *((unsigned char *)a1 + 39);
      *((void *)a1 + 3) = 0;
      *((void *)a1 + 4) = 0;
      *uint64_t v8 = 0;
      *a1 = *a3;
      uint64_t v12 = *((void *)a3 + 4);
      *(_OWORD *)uint64_t v8 = a3[1];
      *((void *)a1 + 4) = v12;
      *a3 = v23;
      *((void *)a3 + 2) = v10;
      *((void *)a3 + 3) = v28;
      *(void *)((char *)a3 + 31) = *(void *)((char *)&v28 + 7);
      *((unsigned char *)a3 + 39) = v11;
    }
    else
    {
      long long v26 = *a1;
      uint64_t v19 = *((void *)a1 + 2);
      *(void *)&long long v31 = *v9;
      *(void *)((char *)&v31 + 7) = *(void *)((char *)a1 + 31);
      char v20 = *((unsigned char *)a1 + 39);
      *((void *)a1 + 3) = 0;
      *((void *)a1 + 4) = 0;
      *uint64_t v8 = 0;
      *a1 = *a2;
      uint64_t v21 = *((void *)a2 + 4);
      *(_OWORD *)uint64_t v8 = a2[1];
      *((void *)a1 + 4) = v21;
      *a2 = v26;
      *((void *)a2 + 2) = v19;
      *((void *)a2 + 3) = v31;
      *(void *)((char *)a2 + 31) = *(void *)((char *)&v31 + 7);
      *((unsigned char *)a2 + 39) = v20;
      BOOL result = llvm::SMFixIt::operator<(a3, a2);
      if (result)
      {
        long long v27 = *a2;
        *(void *)&long long v32 = *((void *)a2 + 3);
        *(void *)((char *)&v32 + 7) = *(void *)((char *)a2 + 31);
        *((void *)a2 + 3) = 0;
        *((void *)a2 + 4) = 0;
        *((void *)a2 + 2) = 0;
        *a2 = *a3;
        uint64_t v22 = *((void *)a3 + 4);
        a2[1] = a3[1];
        *((void *)a2 + 4) = v22;
        *a3 = v27;
        *((void *)a3 + 2) = v19;
        *((void *)a3 + 3) = v32;
        *(void *)((char *)a3 + 31) = *(void *)((char *)&v32 + 7);
        *((unsigned char *)a3 + 39) = v20;
      }
    }
  }
  else if (result)
  {
    long long v24 = *a2;
    uint64_t v13 = *((void *)a2 + 2);
    *(void *)&long long v29 = *((void *)a2 + 3);
    *(void *)((char *)&v29 + 7) = *(void *)((char *)a2 + 31);
    char v14 = *((unsigned char *)a2 + 39);
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 3) = 0;
    *a2 = *a3;
    uint64_t v15 = *((void *)a3 + 4);
    a2[1] = a3[1];
    *((void *)a2 + 4) = v15;
    *a3 = v24;
    *((void *)a3 + 2) = v13;
    *((void *)a3 + 3) = v29;
    *(void *)((char *)a3 + 31) = *(void *)((char *)&v29 + 7);
    *((unsigned char *)a3 + 39) = v14;
    BOOL result = llvm::SMFixIt::operator<(a2, a1);
    if (result)
    {
      long long v25 = *a1;
      uint64_t v16 = *((void *)a1 + 2);
      *(void *)&long long v30 = *((void *)a1 + 3);
      *(void *)((char *)&v30 + 7) = *(void *)((char *)a1 + 31);
      char v17 = *((unsigned char *)a1 + 39);
      *((void *)a1 + 3) = 0;
      *((void *)a1 + 4) = 0;
      *((void *)a1 + 2) = 0;
      *a1 = *a2;
      uint64_t v18 = *((void *)a2 + 4);
      a1[1] = a2[1];
      *((void *)a1 + 4) = v18;
      *a2 = v25;
      *((void *)a2 + 2) = v16;
      *((void *)a2 + 3) = v30;
      *(void *)((char *)a2 + 31) = *(void *)((char *)&v30 + 7);
      *((unsigned char *)a2 + 39) = v17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2)
{
  v23[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v6 = (_OWORD *)(a2 - 40);
      if (!llvm::SMFixIt::operator<((void *)(a2 - 40), (void *)a1)) {
        return 1;
      }
      long long v20 = *(_OWORD *)a1;
      uint64_t v7 = *(void *)(a1 + 16);
      v23[0] = *(void *)(a1 + 24);
      *(void *)((char *)v23 + 7) = *(void *)(a1 + 31);
      char v8 = *(unsigned char *)(a1 + 39);
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 16) = 0;
      *(_OWORD *)a1 = *v6;
      uint64_t v9 = *(void *)(a2 - 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 - 24);
      *(void *)(a1 + 32) = v9;
      *BOOL v6 = v20;
      uint64_t v10 = v23[0];
      *(void *)(a2 - 24) = v7;
      *(void *)(a2 - 16) = v10;
      *(void *)(a2 - 9) = *(void *)((char *)v23 + 7);
      BOOL result = 1;
      *(unsigned char *)(a2 - 1) = v8;
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      char v11 = (void *)(a1 + 80);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    if (llvm::SMFixIt::operator<((void *)v12, v11))
    {
      long long v15 = *(_OWORD *)(v12 + 16);
      long long v20 = *(_OWORD *)v12;
      long long v21 = v15;
      uint64_t v22 = *(void *)(v12 + 32);
      *(void *)(v12 + 16) = 0;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0;
      uint64_t v16 = v13;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        long long v18 = *(_OWORD *)(a1 + v16 + 96);
        *(_OWORD *)(v17 + 120) = *(_OWORD *)(a1 + v16 + 80);
        *(_OWORD *)(v17 + 136) = v18;
        *(void *)(v17 + 152) = *(void *)(a1 + v16 + 112);
        *(unsigned char *)(v17 + 119) = 0;
        *(unsigned char *)(v17 + 96) = 0;
        if (v16 == -80) {
          break;
        }
        v16 -= 40;
        if (!llvm::SMFixIt::operator<(&v20, (void *)(v17 + 40)))
        {
          uint64_t v19 = (_OWORD *)(a1 + v16 + 120);
          goto LABEL_12;
        }
      }
      uint64_t v19 = (_OWORD *)a1;
LABEL_12:
      *uint64_t v19 = v20;
      *(_OWORD *)(v17 + 96) = v21;
      *(void *)(v17 + 112) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    char v11 = (void *)v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

BOOL llvm::SMFixIt::operator<(void *a1, void *a2)
{
  BOOL v2 = *a1 >= *a2;
  if (*a1 != *a2) {
    return !v2;
  }
  unint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  BOOL v2 = v3 >= v4;
  if (v3 != v4) {
    return !v2;
  }
  char v8 = (void *)a2[2];
  BOOL v6 = a2 + 2;
  uint64_t v7 = v8;
  int v9 = *((char *)v6 + 23);
  uint64_t v12 = (void *)a1[2];
  uint64_t v10 = a1 + 2;
  char v11 = v12;
  int v13 = *((char *)v10 + 23);
  if (v13 >= 0) {
    size_t v14 = *((unsigned __int8 *)v10 + 23);
  }
  else {
    size_t v14 = v10[1];
  }
  if (v13 < 0) {
    uint64_t v10 = v11;
  }
  if (v9 >= 0) {
    size_t v15 = *((unsigned __int8 *)v6 + 23);
  }
  else {
    size_t v15 = v6[1];
  }
  if (v9 < 0) {
    BOOL v6 = v7;
  }
  if (v15 >= v14) {
    size_t v16 = v14;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v10, v6, v16);
  if (v17) {
    return v17 < 0;
  }
  else {
    return v14 < v15;
  }
}

BOOL std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((long long *)a1, (long long *)a2, (long long *)a3);
  BOOL result = llvm::SMFixIt::operator<((void *)a4, (void *)a3);
  if (result)
  {
    long long v18 = *(_OWORD *)a3;
    uint64_t v9 = *(void *)(a3 + 16);
    *(void *)&long long v21 = *(void *)(a3 + 24);
    *(void *)((char *)&v21 + 7) = *(void *)(a3 + 31);
    char v10 = *(unsigned char *)(a3 + 39);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 24) = 0;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    uint64_t v11 = *(void *)(a4 + 32);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
    *(void *)(a3 + 32) = v11;
    *(_OWORD *)a4 = v18;
    *(void *)(a4 + 16) = v9;
    *(void *)(a4 + 24) = v21;
    *(void *)(a4 + 31) = *(void *)((char *)&v21 + 7);
    *(unsigned char *)(a4 + 39) = v10;
    BOOL result = llvm::SMFixIt::operator<((void *)a3, (void *)a2);
    if (result)
    {
      long long v19 = *(_OWORD *)a2;
      uint64_t v12 = *(void *)(a2 + 16);
      *(void *)&long long v22 = *(void *)(a2 + 24);
      *(void *)((char *)&v22 + 7) = *(void *)(a2 + 31);
      char v13 = *(unsigned char *)(a2 + 39);
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 24) = 0;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      uint64_t v14 = *(void *)(a3 + 32);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
      *(void *)(a2 + 32) = v14;
      *(_OWORD *)a3 = v19;
      *(void *)(a3 + 16) = v12;
      *(void *)(a3 + 24) = v22;
      *(void *)(a3 + 31) = *(void *)((char *)&v22 + 7);
      *(unsigned char *)(a3 + 39) = v13;
      BOOL result = llvm::SMFixIt::operator<((void *)a2, (void *)a1);
      if (result)
      {
        long long v20 = *(_OWORD *)a1;
        uint64_t v15 = *(void *)(a1 + 16);
        *(void *)&long long v23 = *(void *)(a1 + 24);
        *(void *)((char *)&v23 + 7) = *(void *)(a1 + 31);
        char v16 = *(unsigned char *)(a1 + 39);
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 16) = 0;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v17 = *(void *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = v17;
        *(_OWORD *)a2 = v20;
        *(void *)(a2 + 16) = v15;
        *(void *)(a2 + 24) = v23;
        *(void *)(a2 + 31) = *(void *)((char *)&v23 + 7);
        *(unsigned char *)(a2 + 39) = v16;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a2, a3, a4);
  BOOL result = llvm::SMFixIt::operator<((void *)a5, (void *)a4);
  if (result)
  {
    long long v23 = *(_OWORD *)a4;
    uint64_t v11 = *(void *)(a4 + 16);
    *(void *)&long long v27 = *(void *)(a4 + 24);
    *(void *)((char *)&v27 + 7) = *(void *)(a4 + 31);
    char v12 = *(unsigned char *)(a4 + 39);
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 24) = 0;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    uint64_t v13 = *(void *)(a5 + 32);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(a5 + 16);
    *(void *)(a4 + 32) = v13;
    *(_OWORD *)a5 = v23;
    *(void *)(a5 + 16) = v11;
    *(void *)(a5 + 24) = v27;
    *(void *)(a5 + 31) = *(void *)((char *)&v27 + 7);
    *(unsigned char *)(a5 + 39) = v12;
    BOOL result = llvm::SMFixIt::operator<((void *)a4, (void *)a3);
    if (result)
    {
      long long v24 = *(_OWORD *)a3;
      uint64_t v14 = *(void *)(a3 + 16);
      *(void *)&long long v28 = *(void *)(a3 + 24);
      *(void *)((char *)&v28 + 7) = *(void *)(a3 + 31);
      char v15 = *(unsigned char *)(a3 + 39);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 24) = 0;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 32);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
      *(void *)(a3 + 32) = v16;
      *(_OWORD *)a4 = v24;
      *(void *)(a4 + 16) = v14;
      *(void *)(a4 + 24) = v28;
      *(void *)(a4 + 31) = *(void *)((char *)&v28 + 7);
      *(unsigned char *)(a4 + 39) = v15;
      BOOL result = llvm::SMFixIt::operator<((void *)a3, (void *)a2);
      if (result)
      {
        long long v25 = *(_OWORD *)a2;
        uint64_t v17 = *(void *)(a2 + 16);
        *(void *)&long long v29 = *(void *)(a2 + 24);
        *(void *)((char *)&v29 + 7) = *(void *)(a2 + 31);
        char v18 = *(unsigned char *)(a2 + 39);
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 24) = 0;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        uint64_t v19 = *(void *)(a3 + 32);
        *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
        *(void *)(a2 + 32) = v19;
        *(_OWORD *)a3 = v25;
        *(void *)(a3 + 16) = v17;
        *(void *)(a3 + 24) = v29;
        *(void *)(a3 + 31) = *(void *)((char *)&v29 + 7);
        *(unsigned char *)(a3 + 39) = v18;
        BOOL result = llvm::SMFixIt::operator<((void *)a2, (void *)a1);
        if (result)
        {
          long long v26 = *(_OWORD *)a1;
          uint64_t v20 = *(void *)(a1 + 16);
          *(void *)&long long v30 = *(void *)(a1 + 24);
          *(void *)((char *)&v30 + 7) = *(void *)(a1 + 31);
          char v21 = *(unsigned char *)(a1 + 39);
          *(void *)(a1 + 24) = 0;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 16) = 0;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          uint64_t v22 = *(void *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(void *)(a1 + 32) = v22;
          *(_OWORD *)a2 = v26;
          *(void *)(a2 + 16) = v20;
          *(void *)(a2 + 24) = v30;
          *(void *)(a2 + 31) = *(void *)((char *)&v30 + 7);
          *(unsigned char *)(a2 + 39) = v21;
        }
      }
    }
  }
  return result;
}

void llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt(llvm::cl::Option *a1)
{
  *(void *)a1 = &unk_270DBD0D8;
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:nn180100]((void *)a1 + 20);
  llvm::cl::Option::~Option(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270DBD0D8;
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:nn180100]((void *)a1 + 20);
  llvm::cl::Option::~Option(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  char v11 = 0;
  uint64_t v8 = llvm::cl::parser<BOOL>::parse((llvm *)(a1 + 152), a1, a3, a4, a5, a6, &v11);
  if (v8) {
    return v8;
  }
  **(unsigned char **)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 184);
  if (v9)
  {
    (*(void (**)(uint64_t, char *))(*(void *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault()
{
  return 1;
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

llvm::raw_ostream *llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  if (a3)
  {
    int v3 = **(unsigned __int8 **)(a1 + 128);
LABEL_5:
    __int16 v5 = *(_WORD *)(a1 + 144);
    unint64_t v4 = &unk_270DBC978;
    llvm::cl::parser<BOOL>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 152), (const llvm::cl::Option *)a1, v3 != 0, (uint64_t)&v4, a2);
    return;
  }
  if (*(unsigned char *)(a1 + 145))
  {
    int v3 = **(unsigned __int8 **)(a1 + 128);
    if (*(unsigned __int8 *)(a1 + 144) != v3) {
      goto LABEL_5;
    }
  }
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::setDefault(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 145);
  if (v1) {
    char v1 = *(unsigned char *)(result + 144);
  }
  **(unsigned char **)(result + 128) = v1;
  return result;
}

void std::__function::__func<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_270DBD140;
  return result;
}

void std::__function::__func<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DBD140;
}

uint64_t llvm::cl::opt_storage<BOOL,true,false>::setLocation(llvm *a1, uint64_t a2, unsigned char *a3)
{
  if (*(void *)a1)
  {
    uint64_t v7 = "cl::location(x) specified more than once!";
    __int16 v8 = 259;
    unint64_t v4 = (llvm::raw_ostream *)llvm::errs(a1);
    return llvm::cl::Option::error(a2, (llvm::Twine *)&v7, 0, 0, v4);
  }
  else
  {
    uint64_t result = 0;
    *(void *)a1 = a3;
    *((unsigned char *)a1 + 17) = 1;
    *((unsigned char *)a1 + 16) = *a3;
  }
  return result;
}

unint64_t llvm::getToken@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v17[0] = a1;
  v17[1] = a2;
  unint64_t first_not_of = llvm::StringRef::find_first_not_of(v17, a3, a4, 0);
  unint64_t result = llvm::StringRef::find_first_of(v17, a3, a4, first_not_of);
  if (a2 >= first_not_of) {
    unint64_t v12 = first_not_of;
  }
  else {
    unint64_t v12 = a2;
  }
  if (v12 <= result) {
    unint64_t v13 = result;
  }
  else {
    unint64_t v13 = first_not_of;
  }
  if (v13 >= a2) {
    unint64_t v13 = a2;
  }
  uint64_t v14 = a1 + v12;
  unint64_t v15 = v13 - v12;
  if (a2 >= result) {
    unint64_t v16 = result;
  }
  else {
    unint64_t v16 = a2;
  }
  *a5 = v14;
  a5[1] = v15;
  a5[2] = a1 + v16;
  a5[3] = a2 - v16;
  return result;
}

double llvm::SplitString(uint64_t a1, unint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  llvm::getToken(a1, a2, a4, a5, &v12);
  uint64_t v9 = *((void *)&v12 + 1);
  if (*((void *)&v12 + 1))
  {
    do
    {
      llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a3, v12, v9);
      llvm::getToken(v13, *((unint64_t *)&v13 + 1), a4, a5, &v10);
      long long v12 = v10;
      double result = *(double *)&v11;
      long long v13 = v11;
      uint64_t v9 = *((void *)&v10 + 1);
    }
    while (*((void *)&v10 + 1));
  }
  return result;
}

llvm::raw_ostream *llvm::printEscapedString(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    __int16 v5 = (char *)result;
    do
    {
      unint64_t v6 = *v5;
      if (v6 == 92)
      {
        uint64_t v7 = (unsigned char *)*((void *)a3 + 4);
        if ((unint64_t)v7 >= *((void *)a3 + 3))
        {
          double result = llvm::raw_ostream::write(a3, 92);
        }
        else
        {
          *((void *)a3 + 4) = v7 + 1;
          *uint64_t v7 = 92;
        }
        long long v10 = (unsigned char *)*((void *)a3 + 4);
        if ((unint64_t)v10 >= *((void *)a3 + 3))
        {
          long long v11 = a3;
          char v12 = 92;
LABEL_24:
          double result = llvm::raw_ostream::write(v11, v12);
          goto LABEL_25;
        }
        *((void *)a3 + 4) = v10 + 1;
        *long long v10 = 92;
      }
      else
      {
        unint64_t v9 = *((void *)a3 + 3);
        __int16 v8 = (unsigned char *)*((void *)a3 + 4);
        if (v6 == 34 || (v6 - 32) > 0x5Eu)
        {
          if ((unint64_t)v8 >= v9)
          {
            double result = llvm::raw_ostream::write(a3, 92);
          }
          else
          {
            *((void *)a3 + 4) = v8 + 1;
            *__int16 v8 = 92;
          }
          char v13 = llvm::hexdigit(unsigned int,BOOL)::LUT[v6 >> 4];
          uint64_t v14 = (char *)*((void *)a3 + 4);
          if ((unint64_t)v14 >= *((void *)a3 + 3))
          {
            double result = llvm::raw_ostream::write(a3, v13);
          }
          else
          {
            *((void *)a3 + 4) = v14 + 1;
            *uint64_t v14 = v13;
          }
          char v12 = llvm::hexdigit(unsigned int,BOOL)::LUT[v6 & 0xF];
          unint64_t v15 = (char *)*((void *)a3 + 4);
          if ((unint64_t)v15 >= *((void *)a3 + 3))
          {
            long long v11 = a3;
            goto LABEL_24;
          }
          *((void *)a3 + 4) = v15 + 1;
          *unint64_t v15 = v12;
        }
        else
        {
          if ((unint64_t)v8 >= v9)
          {
            long long v11 = a3;
            char v12 = *v5;
            goto LABEL_24;
          }
          *((void *)a3 + 4) = v8 + 1;
          *__int16 v8 = v6;
        }
      }
LABEL_25:
      ++v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

void *llvm::StringMapImpl::init(llvm::StringMapImpl *this, unsigned int a2)
{
  if (a2) {
    unsigned int v3 = a2;
  }
  else {
    unsigned int v3 = 16;
  }
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  double result = malloc_type_calloc(v3 + 1, 0xCuLL, 0x6D9A4F0CuLL);
  if (!result && (v3 != -1 || (double result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  result[v3] = 2;
  *(void *)this = result;
  *((_DWORD *)this + 2) = v3;
  return result;
}

void *createTable(int a1)
{
  int v2 = a1 + 1;
  double result = malloc_type_calloc((a1 + 1), 0xCuLL, 0x6D9A4F0CuLL);
  if (!result && (v2 || (double result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  result[a1] = 2;
  return result;
}

uint64_t llvm::StringMapImpl::LookupBucketFor(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  if (!*((_DWORD *)a1 + 2)) {
    llvm::StringMapImpl::init(a1, 0x10u);
  }
  unint64_t v6 = llvm::xxHash64(a2, a3);
  uint64_t v7 = *((unsigned int *)a1 + 2);
  unsigned int v8 = v7 - 1;
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)a1 + 8 * v7 + 8;
  uint64_t v11 = 0xFFFFFFFFLL;
  int v12 = 1;
  int v13 = v6;
  while (1)
  {
    uint64_t v14 = v13 & v8;
    unint64_t v15 = *(void **)(v9 + 8 * v14);
    if (!v15) {
      break;
    }
    if (v15 == (void *)-8)
    {
      if (v11 == -1) {
        uint64_t v11 = v14;
      }
      else {
        uint64_t v11 = v11;
      }
    }
    else if (*(_DWORD *)(v10 + 4 * v14) == v6 && a3 == *v15)
    {
      int v24 = v12;
      uint64_t v22 = v9;
      uint64_t v23 = v11;
      unsigned int v21 = v8;
      uint64_t v20 = v10;
      uint64_t v25 = v14;
      unint64_t v19 = v6;
      if (!a3) {
        return v14;
      }
      int v16 = memcmp(a2, (char *)v15 + *((unsigned int *)a1 + 5), a3);
      unint64_t v6 = v19;
      uint64_t v10 = v20;
      uint64_t v14 = v25;
      unsigned int v8 = v21;
      uint64_t v9 = v22;
      uint64_t v11 = v23;
      int v12 = v24;
      if (!v16) {
        return v14;
      }
    }
    int v13 = v12 + v14;
    ++v12;
  }
  uint64_t v17 = (int)v11;
  if (v11 == -1)
  {
    uint64_t v17 = v14;
    uint64_t v14 = v14;
  }
  else
  {
    uint64_t v14 = v11;
  }
  *(_DWORD *)(v10 + 4 * v17) = v6;
  return v14;
}

uint64_t llvm::StringMapImpl::FindKey(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  if (*((_DWORD *)a1 + 2))
  {
    unint64_t v6 = llvm::xxHash64(a2, a3);
    uint64_t v7 = *((unsigned int *)a1 + 2);
    int v8 = v7 - 1;
    LODWORD(result) = (v7 - 1) & v6;
    uint64_t v10 = *a1;
    uint64_t v11 = *a1 + 8 * v7 + 8;
    for (int i = 1; ; ++i)
    {
      int v13 = *(void **)(v10 + 8 * result);
      if (!v13) {
        break;
      }
      if (v13 != (void *)-8 && *(_DWORD *)(v11 + 4 * result) == v6 && a3 == *v13)
      {
        int v19 = i;
        uint64_t v17 = v10;
        uint64_t v18 = v11;
        int v16 = v8;
        unint64_t v15 = v6;
        unsigned int v20 = result;
        if (!a3) {
          return result;
        }
        int v14 = memcmp(a2, (char *)v13 + *((unsigned int *)a1 + 5), a3);
        uint64_t result = v20;
        unint64_t v6 = v15;
        int v8 = v16;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        int i = v19;
        if (!v14) {
          return result;
        }
      }
      LODWORD(result) = (result + i) & v8;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t llvm::StringMapImpl::RemoveKey(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)a1, a2, a3);
  if (Key == -1) {
    return 0;
  }
  int v5 = Key;
  uint64_t result = *(void *)(*(void *)a1 + 8 * Key);
  *(void *)(*(void *)a1 + 8 * v5) = -8;
  *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x1FFFFFFFFLL);
  return result;
}

uint64_t llvm::StringMapImpl::RehashTable(llvm::StringMapImpl *this, uint64_t a2)
{
  unsigned int v5 = *((_DWORD *)this + 2);
  int v4 = *((_DWORD *)this + 3);
  if (3 * v5 < 4 * v4)
  {
    v5 *= 2;
  }
  else if (v5 - (v4 + *((_DWORD *)this + 4)) > v5 >> 3)
  {
    return a2;
  }
  Table = createTable(v5);
  int v8 = *(_DWORD **)this;
  uint64_t v9 = *((unsigned int *)this + 2);
  if (v9)
  {
    uint64_t v10 = 0;
    unsigned int v11 = v5 - 1;
    uint64_t v12 = a2;
    do
    {
      uint64_t v13 = *(void *)(*(void *)this + 8 * v10);
      if (v13 != -8 && v13 != 0)
      {
        int v15 = v8[2 * v9 + 2 + v10];
        uint64_t v16 = v15 & v11;
        if (Table[v16])
        {
          int v17 = 1;
          do
          {
            int v18 = v16 + v17++;
            uint64_t v16 = v18 & v11;
          }
          while (Table[v16]);
        }
        Table[v16] = v13;
        *((_DWORD *)&Table[v5 + 1] + v16) = v15;
        if (v10 == v12) {
          a2 = v16;
        }
        else {
          a2 = a2;
        }
      }
      ++v10;
    }
    while (v10 != v9);
    int v8 = *(_DWORD **)this;
  }
  free(v8);
  *(void *)this = Table;
  *((_DWORD *)this + 2) = v5;
  *((_DWORD *)this + 4) = 0;
  return a2;
}

unsigned char *llvm::UniqueStringSaver::save(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  *(void *)&long long v10 = a2;
  *((void *)&v10 + 1) = a3;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(a1 + 1), &v10, a4, (uint64_t)&v11);
  unsigned int v5 = v11;
  if (!v12) {
    return (unsigned char *)*v11;
  }
  long long v6 = v10;
  uint64_t v7 = (unsigned char *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a1, *((void *)&v10 + 1) + 1, 0);
  int v8 = v7;
  if (*((void *)&v6 + 1)) {
    memcpy(v7, (const void *)v6, *((size_t *)&v6 + 1));
  }
  v8[*((void *)&v6 + 1)] = 0;
  void *v5 = v8;
  v5[1] = *((void *)&v6 + 1);
  return v8;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, unint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  unsigned int v11 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)a2, &v11, a3);
  int v8 = v11;
  if (result)
  {
    char v9 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(a1, (uint64_t)a2, (uint64_t)a2, v11);
    int v8 = (void *)result;
    *(_OWORD *)uint64_t result = *a2;
    char v9 = 1;
  }
  uint64_t v10 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v10;
  *(unsigned char *)(a4 + 16) = v9;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, void *a3, unint64_t *a4)
{
  int v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    uint64_t v7 = *a1;
    int v8 = v5 - 1;
    unsigned int v9 = (v5 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a2, *(void *)a2 + *(void *)(a2 + 8), (uint64_t)a3, a4);
    uint64_t v10 = v7 + 16 * v9;
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(void *)(a2 + 8), *(void **)v10, *(void *)(v10 + 8)))
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      while (*(void *)v10 != -1)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = *(void *)v10 == -2;
        }
        if (v14) {
          uint64_t v12 = v10;
        }
        uint64_t v18 = v12;
        int v15 = v13 + 1;
        unsigned int v9 = (v9 + v13) & v8;
        uint64_t v10 = v7 + 16 * v9;
        BOOL isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(void *)(a2 + 8), *(void **)v10, *(void *)(v10 + 8));
        uint64_t v12 = v18;
        BOOL v17 = isEqual;
        uint64_t result = 1;
        int v13 = v15;
        if (v17) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v12) {
        uint64_t v10 = v12;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(a1, v7);
  uint64_t v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(_OWORD **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::moveFromOldBuckets(a1, v4, &v4[v3], v10);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = 16 * v11;
    do
    {
      *result++ = xmmword_261E8A6B0;
      v12 -= 16;
    }
    while (v12);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::moveFromOldBuckets(uint64_t result, _OWORD *a2, _OWORD *a3, unint64_t *a4)
{
  uint64_t v6 = result;
  *(void *)(result + 8) = 0;
  uint64_t v7 = *(unsigned int *)(result + 16);
  if (v7)
  {
    unsigned int v8 = *(_OWORD **)result;
    uint64_t v9 = 16 * v7;
    do
    {
      *v8++ = xmmword_261E8A6B0;
      v9 -= 16;
    }
    while (v9);
  }
  while (a2 != a3)
  {
    if (*(void *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v10 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v6, (uint64_t)a2, &v10, a4);
      *uint64_t v10 = *a2;
      ++*(_DWORD *)(v6 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t ascii_strncasecmp(const char *a1, const char *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  while (1)
  {
    int v4 = *(unsigned __int8 *)a1++;
    unsigned __int8 v3 = v4;
    unsigned __int8 v5 = v4 + 32;
    if ((v4 - 65) < 0x1A) {
      unsigned __int8 v3 = v5;
    }
    int v7 = *(unsigned __int8 *)a2++;
    unsigned __int8 v6 = v7;
    unsigned __int8 v8 = v7 + 32;
    if ((v7 - 65) < 0x1A) {
      unsigned __int8 v6 = v8;
    }
    if (v3 != v6) {
      break;
    }
    if (!--a3) {
      return 0;
    }
  }
  if (v3 < v6) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1;
  }
}

uint64_t llvm::toLower(llvm *this)
{
  if ((this - 65) >= 0x1A) {
    return (char)this;
  }
  else {
    return (char)((_BYTE)this + 32);
  }
}

void *llvm::StringRef::lower@<X0>(llvm::StringRef *this@<X0>, void *a2@<X8>)
{
  return std::string::__init_with_size[abi:nn180100]<llvm::mapped_iterator<char const*,char (*)(char),char>,llvm::mapped_iterator<char const*,char (*)(char),char>>(a2, *(char **)this, (uint64_t (*)(void))llvm::toLower, (char *)(*(void *)this + *((void *)this + 1)), (uint64_t)llvm::toLower, *((void *)this + 1));
}

void *llvm::StringRef::upper@<X0>(llvm::StringRef *this@<X0>, void *a2@<X8>)
{
  return std::string::__init_with_size[abi:nn180100]<llvm::mapped_iterator<char const*,char (*)(char),char>,llvm::mapped_iterator<char const*,char (*)(char),char>>(a2, *(char **)this, (uint64_t (*)(void))llvm::toUpper, (char *)(*(void *)this + *((void *)this + 1)), (uint64_t)llvm::toUpper, *((void *)this + 1));
}

uint64_t llvm::toUpper(llvm *this)
{
  if ((this - 97) >= 0x1A) {
    return (char)this;
  }
  else {
    return (char)((_BYTE)this - 32);
  }
}

uint64_t llvm::StringRef::find(uint64_t *a1, char *a2, size_t a3, unint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unint64_t v5 = a1[1];
  size_t v6 = v5 - a4;
  if (v5 < a4) {
    return -1;
  }
  unint64_t v7 = a4;
  if (!a3) {
    return v7;
  }
  if (v6 < a3) {
    return -1;
  }
  uint64_t v10 = *a1;
  uint64_t v11 = (unsigned __int8 *)(*a1 + a4);
  size_t v12 = a3 - 1;
  if (a3 == 1)
  {
    int v13 = memchr((void *)(*a1 + a4), *a2, v6);
    if (v13) {
      return (uint64_t)v13 - v10;
    }
    else {
      return -1;
    }
  }
  unint64_t v14 = (unint64_t)&v11[v6 - a3 + 1];
  if (a3 == 2)
  {
    uint64_t result = -1;
    while (*(unsigned __int16 *)(v10 + v7) != *(unsigned __int16 *)a2)
    {
      ++v7;
      if (v10 + v7 >= v14) {
        return result;
      }
    }
    return v7;
  }
  if (a3 > 0xFF || v6 <= 0xF)
  {
    while (memcmp((const void *)(v10 + v7), a2, a3))
    {
      ++v7;
      uint64_t result = -1;
      if (v10 + v7 >= v14) {
        return result;
      }
    }
    return v7;
  }
  uint64_t v15 = 0;
  int8x16_t v20 = vdupq_n_s8(a3);
  int8x16_t v21 = v20;
  v19[12] = v20;
  v19[13] = v20;
  v19[10] = v20;
  v19[11] = v20;
  v19[8] = v20;
  v19[9] = v20;
  v19[6] = v20;
  v19[7] = v20;
  v19[4] = v20;
  void v19[5] = v20;
  uint64_t v19[2] = v20;
  void v19[3] = v20;
  size_t v16 = a3 - 1;
  v19[0] = v20;
  v19[1] = v20;
  do
    *((unsigned char *)v19 + a2[v15++]) = v16--;
  while (v12 != v15);
  int v17 = a2[v12];
  while (1)
  {
    uint64_t v18 = v11[v12];
    if (v18 == v17 && !memcmp(v11, a2, v12)) {
      break;
    }
    v11 += *((unsigned __int8 *)v19 + v18);
    if ((unint64_t)v11 >= v14) {
      return -1;
    }
  }
  return (uint64_t)&v11[-v10];
}

uint64_t std::string_view::rfind[abi:nn180100](unsigned __int8 **a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4)
{
  int v4 = *a1;
  unint64_t v5 = a1[1];
  if ((unint64_t)v5 >= a4) {
    size_t v6 = (unsigned __int8 *)a4;
  }
  else {
    size_t v6 = a1[1];
  }
  unint64_t v7 = v5 - v6;
  unsigned __int8 v8 = &v6[a3];
  if (v7 <= a3) {
    unsigned __int8 v8 = a1[1];
  }
  uint64_t v9 = &v8[(void)v4];
  if (a3 && v8)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = &v8[(void)v4];
    do
    {
      if (*v10 == *a2)
      {
        uint64_t v12 = 1;
        while (a3 != v12)
        {
          if (&v10[v12] == v9) {
            goto LABEL_19;
          }
          int v13 = v10[v12];
          int v14 = a2[v12++];
          if (v13 != v14) {
            goto LABEL_10;
          }
        }
        uint64_t v11 = v10;
      }
LABEL_10:
      ++v10;
    }
    while (v10 != v9);
  }
  else
  {
    uint64_t v11 = &v8[(void)v4];
  }
LABEL_19:
  uint64_t v15 = (unsigned __int8 *)(v11 - v4);
  if (v11 != v9 || a3 == 0) {
    return (uint64_t)v15;
  }
  else {
    return -1;
  }
}

uint64_t llvm::StringRef::find_first_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  unint64_t v5 = a1[1];
  if (v5 <= a4) {
    return -1;
  }
  while (((*(void *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(unsigned char *)(*a1 + a4)) & 1) == 0)
  {
    if (v5 == ++a4) {
      return -1;
    }
  }
  return a4;
}

uint64_t llvm::StringRef::find_first_not_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  unint64_t v5 = a1[1];
  if (v5 <= a4) {
    return -1;
  }
  while (((*(void *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(unsigned char *)(*a1 + a4)) & 1) != 0)
  {
    if (v5 == ++a4) {
      return -1;
    }
  }
  return a4;
}

uint64_t llvm::StringRef::find_last_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a1[1] >= a4) {
    unint64_t v5 = a4;
  }
  else {
    unint64_t v5 = a1[1];
  }
  while (v5)
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    uint64_t v8 = *(void *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    unint64_t v5 = v6;
    if (v8) {
      return v6;
    }
  }
  return -1;
}

uint64_t llvm::StringRef::find_last_not_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a1[1] >= a4) {
    unint64_t v5 = a4;
  }
  else {
    unint64_t v5 = a1[1];
  }
  while (v5)
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    uint64_t v8 = *(void *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    unint64_t v5 = v6;
    if ((v8 & 1) == 0) {
      return v6;
    }
  }
  return -1;
}

unsigned int *llvm::StringRef::split(unsigned int *result, unsigned int *a2, char *a3, size_t a4, int a5, int a6)
{
  long long v17 = *(_OWORD *)result;
  unint64_t v8 = *((void *)&v17 + 1);
  if (a5)
  {
    int v9 = a5;
    do
    {
      uint64_t result = (unsigned int *)llvm::StringRef::find((uint64_t *)&v17, a3, a4, 0);
      if (result == (unsigned int *)-1) {
        break;
      }
      uint64_t v12 = result;
      uint64_t v13 = v17;
      if (result || a6)
      {
        if ((unint64_t)result >= v8) {
          uint64_t v14 = v8;
        }
        else {
          uint64_t v14 = (uint64_t)result;
        }
        uint64_t result = llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a2, v17, v14);
      }
      unint64_t v15 = (unint64_t)v12 + a4;
      if (v8 < (unint64_t)v12 + a4) {
        unint64_t v15 = v8;
      }
      v8 -= v15;
      *(void *)&long long v17 = v13 + v15;
      *((void *)&v17 + 1) = v8;
      --v9;
    }
    while (v9);
  }
  if ((a6 & 1) != 0 || v8)
  {
    uint64_t v16 = v17;
    return llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a2, v16, v8);
  }
  return result;
}

unsigned int *llvm::StringRef::split(unsigned int *result, unsigned int *a2, int __c, int a4, int a5)
{
  unint64_t v7 = *(unsigned int **)result;
  unint64_t v8 = *((void *)result + 1);
  if (!a4)
  {
LABEL_16:
    if ((a5 & 1) == 0 && !v8) {
      return result;
    }
    goto LABEL_21;
  }
  int v9 = a4;
  while (v8)
  {
    uint64_t result = (unsigned int *)memchr(v7, __c, v8);
    if (!result) {
      goto LABEL_21;
    }
    unint64_t v11 = (char *)result - (char *)v7;
    if ((char *)result - (char *)v7 == -1) {
      goto LABEL_21;
    }
    if (result != v7 || a5)
    {
      if (v11 >= v8) {
        uint64_t v12 = v8;
      }
      else {
        uint64_t v12 = (char *)result - (char *)v7;
      }
      uint64_t result = llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a2, (uint64_t)v7, v12);
    }
    if (v8 >= v11 + 1) {
      unint64_t v13 = v11 + 1;
    }
    else {
      unint64_t v13 = v8;
    }
    unint64_t v7 = (unsigned int *)((char *)v7 + v13);
    v8 -= v13;
    if (!--v9) {
      goto LABEL_16;
    }
  }
  if (a5)
  {
    unint64_t v8 = 0;
LABEL_21:
    return llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a2, (uint64_t)v7, v8);
  }
  return result;
}

uint64_t llvm::consumeUnsignedInteger(llvm *this, llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  if (!a2) {
    LODWORD(a2) = GetAutoSenseRadix((uint64_t)this);
  }
  uint64_t v6 = *((void *)this + 1);
  if (!v6) {
    return 1;
  }
  unint64_t v7 = 0;
  unint64_t v8 = *(unsigned __int8 **)this;
  *a3 = 0;
  uint64_t v9 = v6;
  do
  {
    if ((char)*v8 < 48) {
      break;
    }
    unsigned int v10 = *v8;
    if (v10 >= 0x3A)
    {
      if (v10 < 0x61)
      {
        if (v10 - 65 > 0x19) {
          break;
        }
        int v11 = -55;
      }
      else
      {
        if (v10 >= 0x7B) {
          break;
        }
        int v11 = -87;
      }
    }
    else
    {
      int v11 = -48;
    }
    unsigned int v12 = v11 + v10;
    if (v12 >= a2) {
      break;
    }
    unint64_t v13 = v7 * a2 + v12;
    *a3 = v13;
    if (v13 / a2 < v7) {
      return 1;
    }
    ++v8;
    unint64_t v7 = v13;
    --v9;
  }
  while (v9);
  if (v6 == v9) {
    return 1;
  }
  uint64_t result = 0;
  *(void *)this = v8;
  *((void *)this + 1) = v9;
  return result;
}

uint64_t GetAutoSenseRadix(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 < 2) {
    return 10;
  }
  unsigned __int8 v3 = *(_WORD **)a1;
  if (**(_WORD **)a1 == 30768 || *v3 == 22576)
  {
    unsigned int v4 = v3 + 1;
    uint64_t v2 = 16;
LABEL_14:
    uint64_t v6 = -2;
    goto LABEL_15;
  }
  if (*v3 == 25136 || *v3 == 16944)
  {
    unsigned int v4 = v3 + 1;
    uint64_t v2 = 2;
    goto LABEL_14;
  }
  if (*v3 == 28464)
  {
    unsigned int v4 = v3 + 1;
    uint64_t v2 = 8;
    goto LABEL_14;
  }
  if (*(unsigned char *)v3 == 48)
  {
    int v5 = *((unsigned __int8 *)v3 + 1);
    unsigned int v4 = (_WORD *)((char *)v3 + 1);
    if ((v5 - 48) <= 9)
    {
      uint64_t v2 = 8;
      uint64_t v6 = -1;
LABEL_15:
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v1 + v6;
      return v2;
    }
  }
  return 10;
}

uint64_t llvm::consumeSignedInteger(llvm *this, llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v12 = 0;
  uint64_t v6 = *((void *)this + 1);
  if (v6 && **(unsigned char **)this == 45)
  {
    *(void *)&long long v11 = *(void *)this + 1;
    *((void *)&v11 + 1) = v6 - 1;
    LODWORD(result) = llvm::consumeUnsignedInteger((llvm *)&v11, a2, &v12, a4);
    unint64_t v8 = v12;
    if (v12 > 0x8000000000000000) {
      uint64_t result = 1;
    }
    else {
      uint64_t result = result;
    }
    if ((result & 1) == 0)
    {
      *(_OWORD *)this = v11;
      unint64_t v9 = -(uint64_t)v8;
LABEL_11:
      *a3 = v9;
    }
  }
  else
  {
    char v10 = llvm::consumeUnsignedInteger(this, a2, &v12, a4);
    uint64_t result = 1;
    if ((v10 & 1) == 0)
    {
      unint64_t v9 = v12;
      if ((v12 & 0x8000000000000000) == 0)
      {
        uint64_t result = 0;
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t llvm::StringRef::getAsInteger(llvm::StringRef *this, unsigned int a2, llvm::APInt *a3)
{
  unsigned int AutoSenseRadix = a2;
  long long v26 = *(_OWORD *)this;
  if (!a2) {
    unsigned int AutoSenseRadix = GetAutoSenseRadix((uint64_t)&v26);
  }
  uint64_t v5 = *((void *)&v26 + 1);
  if (!*((void *)&v26 + 1)) {
    return 1;
  }
  for (int i = (unsigned char *)v26; *i == 48; ++i)
  {
    if (!--v5)
    {
      if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
        MEMORY[0x263E50080](*(void *)a3, 0x1000C8000313F17);
      }
      uint64_t v7 = 0;
      *(void *)a3 = 0;
      *((_DWORD *)a3 + 2) = 64;
      return v7;
    }
  }
  unsigned int v8 = 0;
  do
  {
    unsigned int v9 = v8;
    unsigned int v10 = 1 << v8++;
  }
  while (v10 < AutoSenseRadix);
  unsigned int v11 = *((_DWORD *)a3 + 2);
  BOOL v12 = v9 * v5 > v11;
  if (v9 * v5 >= v11)
  {
    unsigned int v11 = v9 * v5;
    if (v12)
    {
      llvm::APInt::zext(a3, v11, (llvm::APInt *)&v24);
      if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
        MEMORY[0x263E50080](*(void *)a3, 0x1000C8000313F17);
      }
      *(void *)a3 = v24;
      *((_DWORD *)a3 + 2) = v25;
    }
  }
  unsigned int v13 = 1;
  int v25 = 1;
  int v24 = 0;
  unsigned int v23 = 1;
  uint64_t v22 = 0;
  if (v10 == AutoSenseRadix)
  {
    uint64_t v14 = 0;
  }
  else
  {
    llvm::APInt::APInt((llvm::APInt *)&v20, v11, AutoSenseRadix);
    uint64_t v14 = v20;
    int v24 = v20;
    unsigned int v13 = v21;
    int v25 = v21;
    llvm::APInt::APInt((llvm::APInt *)&v20, v11, 0);
    uint64_t v22 = v20;
    unsigned int v23 = v21;
  }
  llvm::APInt::operator=(a3, 0);
  uint64_t v15 = 0;
  while ((char)i[v15] >= 48)
  {
    unsigned int v16 = i[v15];
    if (v16 >= 0x3A)
    {
      if (v16 < 0x61)
      {
        if (v16 - 65 > 0x19) {
          break;
        }
        int v17 = -55;
      }
      else
      {
        if (v16 >= 0x7B) {
          break;
        }
        int v17 = -87;
      }
    }
    else
    {
      int v17 = -48;
    }
    uint64_t v18 = v17 + v16;
    if (v18 >= AutoSenseRadix) {
      break;
    }
    if (v10 == AutoSenseRadix)
    {
      llvm::APInt::operator<<=((llvm::APInt **)a3, v9);
      if (*((_DWORD *)a3 + 2) > 0x40u)
      {
        **(void **)a3 |= v18;
      }
      else
      {
        *(void *)a3 |= v18;
        llvm::APInt::clearUnusedBits((uint64_t)a3);
      }
    }
    else
    {
      llvm::APInt::operator*=((uint64_t)a3, &v24);
      llvm::APInt::operator=((llvm::APInt *)&v22, v18);
      llvm::APInt::operator+=((uint64_t)a3, &v22);
    }
    if (v5 == ++v15)
    {
      uint64_t v7 = 0;
      goto LABEL_42;
    }
  }
  uint64_t v7 = 1;
LABEL_42:
  if (v23 >= 0x41 && v22) {
    MEMORY[0x263E50080](v22, 0x1000C8000313F17);
  }
  if (v13 >= 0x41 && v14) {
    MEMORY[0x263E50080](v14, 0x1000C8000313F17);
  }
  return v7;
}

llvm::APFloat *llvm::APFloat::APFloat(llvm::APFloat *this, double a2)
{
  int v7 = 64;
  uint64_t v6 = *(const llvm::APInt **)&a2;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v4, &v6);
  *((void *)this + 1) = &llvm::semBogus;
  llvm::detail::IEEEFloat::operator=((uint64_t)this + 8, (uint64_t)&v4);
  if ((*(_DWORD *)(v4 + 8) - 64) <= 0xFFFFFF7F && v5) {
    MEMORY[0x263E50080](v5, 0x1000C8000313F17);
  }
  return this;
}

void *std::string::__init_with_size[abi:nn180100]<llvm::mapped_iterator<char const*,char (*)(char),char>,llvm::mapped_iterator<char const*,char (*)(char),char>>(void *result, char *a2, uint64_t (*a3)(void), char *a4, uint64_t a5, unint64_t a6)
{
  if (a6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  unsigned int v10 = result;
  if (a6 > 0x16)
  {
    uint64_t v11 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17) {
      uint64_t v11 = a6 | 7;
    }
    uint64_t v12 = v11 + 1;
    uint64_t result = operator new(v11 + 1);
    v10[1] = a6;
    long long v10[2] = v12 | 0x8000000000000000;
    *unsigned int v10 = result;
    unsigned int v10 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a6;
  }
  while (a2 != a4)
  {
    unsigned int v13 = *a2++;
    uint64_t result = (void *)a3(v13);
    *(unsigned char *)unsigned int v10 = (_BYTE)result;
    unsigned int v10 = (void *)((char *)v10 + 1);
  }
  *(unsigned char *)unsigned int v10 = 0;
  return result;
}

uint64_t llvm::format_object<long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(void *)(a1 + 16));
}

void llvm::Twine::str(llvm::Twine *this@<X0>, std::string *a2@<X8>)
{
  v13[32] = *MEMORY[0x263EF8340];
  int v3 = *((unsigned __int8 *)this + 32);
  if (v3 != 6)
  {
    if (v3 == 4 && *((unsigned char *)this + 33) == 1)
    {
      uint64_t v4 = *(long long **)this;
      if (*(char *)(*(void *)this + 23) < 0)
      {
        unsigned int v9 = *(const std::string::value_type **)v4;
        std::string::size_type v10 = *((void *)v4 + 1);
        std::string::__init_copy_ctor_external(a2, v9, v10);
      }
      else
      {
        long long v5 = *v4;
        a2->__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
      }
      return;
    }
    goto LABEL_10;
  }
  if (*((unsigned char *)this + 33) != 1)
  {
LABEL_10:
    uint64_t v11 = v13;
    long long v12 = xmmword_261E8A780;
    int v7 = (char *)llvm::Twine::toStringRef((uint64_t)this, (uint64_t)&v11);
    if (v7)
    {
      std::string::basic_string[abi:nn180100](a2, v7, v8);
    }
    else
    {
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
    }
    if (v11 != v13) {
      free(v11);
    }
    return;
  }
  uint64_t v6 = *(llvm::formatv_object_base **)this;
  llvm::formatv_object_base::str(v6, a2);
}

void llvm::formatv_object_base::str(llvm::formatv_object_base *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v5 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = 1;
  uint64_t v7 = 0;
  size_t v8 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = &unk_270DBD6E0;
  long long v12 = a2;
  llvm::raw_ostream::SetUnbuffered(&v4);
  llvm::formatv_object_base::format(this, (llvm::raw_ostream *)&v4);
  uint64_t v3 = v8 - v6;
  if (v8 != v6)
  {
    size_t v8 = v6;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v4, v6, v3);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v4);
}

void llvm::Twine::toVector(llvm::Twine *a1, uint64_t a2)
{
  int v4 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  int v10 = 1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  uint64_t v3 = &unk_270DBD758;
  uint64_t v11 = a2;
  llvm::raw_ostream::SetUnbuffered(&v3);
  llvm::Twine::print(a1, (llvm::raw_ostream *)&v3);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v3);
}

void llvm::Twine::print(llvm::Twine *this, llvm::raw_ostream *a2)
{
  llvm::Twine::printOneChild((int)this, a2, *(size_t **)this, *((void *)this + 1), *((unsigned __int8 *)this + 32));
  uint64_t v5 = (size_t *)*((void *)this + 2);
  size_t v6 = *((void *)this + 3);
  int v7 = *((unsigned __int8 *)this + 33);
  llvm::Twine::printOneChild(v4, a2, v5, v6, v7);
}

const char *llvm::Twine::toNullTerminatedStringRef(uint64_t a1, const char **a2)
{
  if (*(unsigned char *)(a1 + 33) != 1) {
    goto LABEL_7;
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 < 2) {
    goto LABEL_7;
  }
  if (v3 != 4)
  {
    if (v3 == 3)
    {
      int v4 = *(const char **)a1;
      if (*(void *)a1) {
        strlen(*(const char **)a1);
      }
      return v4;
    }
LABEL_7:
    llvm::Twine::toVector((llvm::Twine *)a1, (uint64_t)a2);
    llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 0);
    int v4 = *a2;
    --a2[1];
    return v4;
  }
  int v4 = *(const char **)a1;
  if (*(char *)(*(void *)a1 + 23) < 0) {
    return *(const char **)v4;
  }
  return v4;
}

void llvm::Twine::printOneChild(int a1, llvm::raw_ostream *a2, size_t *this, size_t __n, int a5)
{
  switch(a5)
  {
    case 2:
      llvm::Twine::print((llvm::Twine *)this, a2);
      return;
    case 3:
      llvm::raw_ostream::operator<<(a2, (char *)this);
      return;
    case 4:
      int v7 = *((char *)this + 23);
      BOOL v8 = v7 < 0;
      if (v7 >= 0) {
        uint64_t v9 = (const char *)this;
      }
      else {
        uint64_t v9 = (const char *)*this;
      }
      if (v8) {
        size_t v10 = this[1];
      }
      else {
        size_t v10 = *((unsigned __int8 *)this + 23);
      }
      llvm::raw_ostream::write(a2, v9, v10);
      return;
    case 5:
      llvm::raw_ostream::operator<<(a2, this, __n);
      return;
    case 6:
      llvm::formatv_object_base::format((llvm::formatv_object_base *)this, a2);
      return;
    case 7:
      uint64_t v11 = (unsigned char *)*((void *)a2 + 4);
      if ((unint64_t)v11 >= *((void *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, (char)this);
      }
      else
      {
        *((void *)a2 + 4) = v11 + 1;
        *uint64_t v11 = (_BYTE)this;
      }
      return;
    case 8:
      unint64_t v5 = this;
      goto LABEL_21;
    case 9:
      unint64_t v6 = (int)this;
      goto LABEL_16;
    case 10:
    case 12:
      unint64_t v5 = *this;
LABEL_21:
      write_unsigned<unsigned long>(a2, v5, 0, 0, 0);
      return;
    case 11:
    case 13:
      unint64_t v6 = *this;
LABEL_16:
      llvm::write_integer(a2, v6, 0, 0);
      break;
    case 14:
      llvm::write_hex(a2, *this, 1, 0, 0);
      break;
    default:
      return;
  }
}

llvm::raw_ostream *llvm::reportInvalidSizeRequest(llvm *this, const char *a2)
{
  if (!atomic_load_explicit(&ScalableErrorAsWarning, memory_order_acquire)) {
  if (!*(unsigned char *)(ScalableErrorAsWarning + 128))
  }
    llvm::report_fatal_error((llvm *)"Invalid size request on a scalable vector.", (const llvm::Twine *)1);
  unsigned int v3 = (llvm::raw_ostream *)llvm::errs(this);
  int v4 = llvm::WithColor::warning(v3, &str_1_7, 0, 0);
  unint64_t v5 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 0x2AuLL)
  {
    qmemcpy(v5, "Invalid size request on a scalable vector; ", 43);
    *((void *)v4 + 4) += 43;
  }
  else
  {
    int v4 = llvm::raw_ostream::write(v4, "Invalid size request on a scalable vector; ", 0x2BuLL);
  }
  uint64_t result = llvm::raw_ostream::operator<<(v4, (char *)this);
  int v7 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v7)
  {
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  }
  else
  {
    *int v7 = 10;
    ++*((void *)result + 4);
  }
  return result;
}

void anonymous namespace'::CreateScalableErrorAsWarning::call(_anonymous_namespace_::CreateScalableErrorAsWarning *this)
{
}

BOOL llvm::sys::UnicodeCharSet::contains(llvm::sys::UnicodeCharSet *this, unsigned int a2)
{
  unint64_t v2 = *((void *)this + 1);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *(unsigned int **)this;
  uint64_t v4 = *(void *)this + 8 * v2;
  do
  {
    unint64_t v5 = v2 >> 1;
    unint64_t v6 = &v3[2 * (v2 >> 1)];
    unsigned int v7 = v6[1];
    BOOL v8 = v6 + 2;
    v2 += ~(v2 >> 1);
    if (v7 < a2) {
      unsigned int v3 = v8;
    }
    else {
      unint64_t v2 = v5;
    }
  }
  while (v2);
  return v3 != (unsigned int *)v4 && *v3 <= a2;
}

uint64_t llvm::sys::unicode::columnWidthUTF8(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    unint64_t v4 = 0;
    LODWORD(v5) = 0;
    while (1)
    {
      unint64_t v6 = (char *)(a1 + v4);
      int v7 = llvm::trailingBytesForUTF8[*(unsigned __int8 *)(a1 + v4)];
      if (llvm::trailingBytesForUTF8[*(unsigned __int8 *)(a1 + v4)])
      {
        if (v7 == -1) {
          return 4294967294;
        }
        uint64_t v8 = (v7 + 1);
        v4 += v8;
        if (v4 > a2) {
          return 4294967294;
        }
        long long v12 = &v14;
        unsigned int v13 = v6;
        if (llvm::ConvertUTF8toUTF32Impl(&v13, &v6[v8], &v12, (unint64_t)&v15, 0, 0)) {
          return 4294967294;
        }
        unsigned int v9 = v14;
        if (v14 != 173
          && !llvm::sys::UnicodeCharSet::contains((llvm::sys::UnicodeCharSet *)&llvm::sys::unicode::isPrintable(int)::Printables, v14))
        {
          return 0xFFFFFFFFLL;
        }
        if (llvm::sys::UnicodeCharSet::contains((llvm::sys::UnicodeCharSet *)&llvm::sys::unicode::charWidth(int)::CombiningCharacters, v9))
        {
          int v10 = 0;
        }
        else if (llvm::sys::UnicodeCharSet::contains((llvm::sys::UnicodeCharSet *)&llvm::sys::unicode::charWidth(int)::DoubleWidthCharacters, v9))
        {
          int v10 = 2;
        }
        else
        {
          int v10 = 1;
        }
        uint64_t v5 = (v10 + v5);
      }
      else
      {
        if (*(unsigned __int8 *)(a1 + v4) - 32 > 0x5E) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v5 = (v5 + 1);
        ++v4;
      }
      if (v4 >= a2) {
        return v5;
      }
    }
  }
  return 0;
}

void llvm::VersionTuple::getAsString(llvm::VersionTuple *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v4 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  int v10 = 1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  unsigned int v3 = &unk_270DBD6E0;
  uint64_t v11 = a2;
  llvm::raw_ostream::SetUnbuffered(&v3);
  llvm::operator<<((llvm::raw_ostream *)&v3, this);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v3);
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *a1, void *a2)
{
  write_unsigned<unsigned long>(a1, *(unsigned int *)a2, 0, 0, 0);
  if ((*a2 & 0x8000000000000000) != 0)
  {
    unint64_t v4 = HIDWORD(*a2) & 0x7FFFFFFFLL;
    uint64_t v5 = (unsigned char *)*((void *)a1 + 4);
    if ((unint64_t)v5 >= *((void *)a1 + 3))
    {
      llvm::raw_ostream::write(a1, 46);
    }
    else
    {
      *((void *)a1 + 4) = v5 + 1;
      unsigned char *v5 = 46;
    }
    write_unsigned<unsigned long>(a1, v4, 0, 0, 0);
  }
  uint64_t v6 = a2[1];
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v7 = a2[1] & 0x7FFFFFFFLL;
    char v8 = (unsigned char *)*((void *)a1 + 4);
    if ((unint64_t)v8 >= *((void *)a1 + 3))
    {
      llvm::raw_ostream::write(a1, 46);
    }
    else
    {
      *((void *)a1 + 4) = v8 + 1;
      *char v8 = 46;
    }
    write_unsigned<unsigned long>(a1, v7, 0, 0, 0);
    uint64_t v6 = a2[1];
  }
  if (v6 < 0)
  {
    uint64_t v9 = (unsigned char *)*((void *)a1 + 4);
    if ((unint64_t)v9 >= *((void *)a1 + 3))
    {
      llvm::raw_ostream::write(a1, 46);
    }
    else
    {
      *((void *)a1 + 4) = v9 + 1;
      *uint64_t v9 = 46;
    }
    write_unsigned<unsigned long>(a1, HIDWORD(v6) & 0x7FFFFFFF & (v6 >> 63), 0, 0, 0);
  }
  return a1;
}

uint64_t llvm::VersionTuple::tryParse(unint64_t *a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v11 = a2;
  unint64_t v12 = a3;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (parseInt(&v11, (int *)&v10 + 1)) {
    return 1;
  }
  unint64_t v4 = v12;
  if (!v12)
  {
    unint64_t v8 = HIDWORD(v10);
LABEL_15:
    uint64_t result = 0;
    *a1 = v8;
    a1[1] = v4;
    return result;
  }
  if (*v11 != 46) {
    return 1;
  }
  ++v11;
  --v12;
  if (parseInt(&v11, (int *)&v10)) {
    return 1;
  }
  unint64_t v4 = v12;
  if (!v12)
  {
    unint64_t v7 = HIDWORD(v10) | ((unint64_t)v10 << 32);
    goto LABEL_18;
  }
  if (*v11 != 46) {
    return 1;
  }
  ++v11;
  --v12;
  if (parseInt(&v11, (int *)&v9 + 1)) {
    return 1;
  }
  if (!v12)
  {
    unint64_t v8 = HIDWORD(v10) | ((unint64_t)v10 << 32) | 0x8000000000000000;
    unint64_t v4 = HIDWORD(v9) | 0x80000000;
    goto LABEL_15;
  }
  if (*v11 != 46) {
    return 1;
  }
  ++v11;
  --v12;
  char v5 = parseInt(&v11, (int *)&v9);
  uint64_t result = 1;
  if ((v5 & 1) == 0 && !v12)
  {
    unint64_t v7 = HIDWORD(v10) | ((unint64_t)v10 << 32);
    unint64_t v4 = HIDWORD(v9) | ((unint64_t)v9 << 32) | 0x8000000080000000;
LABEL_18:
    unint64_t v8 = v7 | 0x8000000000000000;
    goto LABEL_15;
  }
  return result;
}

uint64_t parseInt(unsigned __int8 **a1, int *a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 1;
  }
  uint64_t v3 = (uint64_t)*a1;
  unint64_t v4 = *a1 + 1;
  int v5 = **a1;
  *a1 = v4;
  a1[1] = v2 - 1;
  if ((v5 - 58) < 0xFFFFFFF6) {
    return 1;
  }
  int v7 = v5 - 48;
  *a2 = v7;
  if (v2 != (unsigned __int8 *)1)
  {
    unint64_t v8 = (unsigned __int8 *)(v3 + 2);
    uint64_t v9 = v2 - 2;
    do
    {
      int v10 = *v4;
      if ((v10 - 58) < 0xFFFFFFF6) {
        break;
      }
      ++v4;
      *a1 = v8;
      a1[1] = v9;
      int v7 = v10 + 10 * v7 - 48;
      *a2 = v7;
      ++v8;
      --v9;
    }
    while (v9 != (unsigned __int8 *)-1);
  }
  return 0;
}

void *llvm::vfs::FileSystem::getBufferForFile@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t result = (*(void *(**)(void *__return_ptr))(*(void *)a1 + 24))(v19);
  if (v20)
  {
    uint64_t v14 = v19[0];
    uint64_t v15 = v19[1];
  }
  else
  {
    if (!a6)
    {
LABEL_5:
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19[0] + 32))(v19[0], a2, a3, a4, a5);
      goto LABEL_9;
    }
    uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)v19[0] + 40))(&v16);
    if ((v18 & 1) == 0)
    {
      *(void *)a6 = v16;
      *(unsigned char *)(a6 + 8) = v17;
      goto LABEL_5;
    }
    uint64_t v14 = v16;
    uint64_t v15 = v17;
  }
  *(unsigned char *)(a7 + 16) |= 1u;
  *(void *)a7 = v14;
  *(void *)(a7 + 8) = v15;
LABEL_9:
  if ((v20 & 1) == 0)
  {
    uint64_t result = (void *)v19[0];
    v19[0] = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

void std::vector<llvm::StringRef>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v3, a2);
    int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

llvm::sys::fs::directory_iterator *llvm::sys::fs::directory_iterator::directory_iterator(llvm::sys::fs::directory_iterator *this, const llvm::Twine *a2, std::error_code *a3, char a4)
{
  v15[16] = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 16) = a4;
  int v7 = (char *)operator new(0x70uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)int v7 = &unk_270DBD1A8;
  *((void *)v7 + 7) = 0;
  *(_OWORD *)(v7 + 40) = 0u;
  *((_DWORD *)v7 + 14) = 9;
  v7[60] = 1;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *(_OWORD *)(v7 + 92) = 0u;
  *((_DWORD *)v7 + 27) = 0xFFFF;
  *(_OWORD *)(v7 + 24) = 0u;
  uint64_t v8 = (uint64_t)(v7 + 24);
  *(void *)this = v7 + 24;
  *((void *)this + 1) = v7;
  unsigned int v13 = v15;
  long long v14 = xmmword_261E8A720;
  uint64_t v9 = (char *)llvm::Twine::toStringRef((uint64_t)a2, (uint64_t)&v13);
  *(void *)&a3->__val_ = llvm::sys::fs::detail::directory_iterator_construct(v8, v9, v10, *((unsigned char *)this + 16));
  a3->__cat_ = v11;
  if (v13 != v15) {
    free(v13);
  }
  return this;
}

void std::__shared_ptr_emplace<llvm::sys::fs::detail::DirIterState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBD1A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::sys::fs::detail::DirIterState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBD1A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

void std::__shared_ptr_emplace<llvm::sys::fs::detail::DirIterState>::__on_zero_shared(uint64_t a1)
{
}

void llvm::sys::fs::detail::DirIterState::~DirIterState(void **this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

BOOL llvm::sys::fs::directory_iterator::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1 == *a2) {
    return 1;
  }
  if (!v3)
  {
    uint64_t v6 = (unsigned __int8 *)(v2 + 8);
    goto LABEL_10;
  }
  if (!v2)
  {
    uint64_t v6 = (unsigned __int8 *)(v3 + 8);
LABEL_10:
    *(_OWORD *)std::string __p = 0u;
    long long v8 = 0u;
    DWORD2(v8) = 9;
    BYTE12(v8) = 1;
    long long v9 = 0u;
    memset(v10, 0, sizeof(v10));
    int v11 = 0xFFFF;
    BOOL v5 = llvm::sys::fs::directory_entry::operator==(v6, (unsigned __int8 *)__p);
    if (SBYTE7(v8) < 0) {
      operator delete(__p[0]);
    }
    return v5;
  }
  return llvm::sys::fs::directory_entry::operator==((unsigned __int8 *)(v2 + 8), (unsigned __int8 *)(v3 + 8));
}

BOOL llvm::sys::fs::directory_entry::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void llvm::FileError::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  uint64_t v6 = 0;
  *a4 = 0;
  uint64_t v4 = &v6;
  llvm::handleAllErrors<llvm::FileError::build(llvm::Twine const&,std::optional<unsigned long>,llvm::Error)::{lambda(std::unique_ptr<llvm::ErrorInfoBase>)#1}>(&v5, &v4);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  operator new();
}

uint64_t llvm::handleAllErrors<llvm::FileError::build(llvm::Twine const&,std::optional<unsigned long>,llvm::Error)::{lambda(std::unique_ptr<llvm::ErrorInfoBase>)#1}>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  llvm::handleErrors<llvm::FileError::build(llvm::Twine const&,std::optional<unsigned long>,llvm::Error)::{lambda(std::unique_ptr<llvm::ErrorInfoBase>)#1}>((uint64_t)&v3, a2, &v4);
  uint64_t result = v3;
  if (v3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return result;
}

uint64_t llvm::handleErrors<llvm::FileError::build(llvm::Twine const&,std::optional<unsigned long>,llvm::Error)::{lambda(std::unique_ptr<llvm::ErrorInfoBase>)#1}>@<X0>(uint64_t result@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void **)result;
  if (*(void *)result)
  {
    *(void *)uint64_t result = 0;
    if ((*(unsigned int (**)(void *, void *))(*v4 + 48))(v4, &llvm::ErrorList::ID))
    {
      *a3 = 0;
      uint64_t v6 = (uint64_t *)v4[1];
      int v7 = (uint64_t *)v4[2];
      if (v6 != v7)
      {
        int v8 = 0;
        do
        {
          BOOL v14 = v8;
          uint64_t v9 = *v6;
          *uint64_t v6 = 0;
          uint64_t v12 = v9;
          llvm::handleErrorImpl<llvm::FileError::build(llvm::Twine const&,std::optional<unsigned long>,llvm::Error)::{lambda(std::unique_ptr<llvm::ErrorInfoBase>)#1}>(&v12, a2, (uint64_t *)&v13);
          llvm::ErrorList::join(&v14, (void ***)&v13, &v15);
          int v8 = v15;
          *a3 = (uint64_t)v15;
          uint64_t v15 = 0;
          if (v13) {
            (*v13)[1]((void **)v13);
          }
          uint64_t v10 = v12;
          uint64_t v12 = 0;
          if (v10) {
            (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
          }
          if (v14) {
            (*((void (**)(void **))*v14 + 1))(v14);
          }
          ++v6;
        }
        while (v6 != v7);
      }
      return (*(uint64_t (**)(void *))(*v4 + 8))(v4);
    }
    else
    {
      int v11 = v4;
      llvm::handleErrorImpl<llvm::FileError::build(llvm::Twine const&,std::optional<unsigned long>,llvm::Error)::{lambda(std::unique_ptr<llvm::ErrorInfoBase>)#1}>((uint64_t *)&v11, a2, a3);
      uint64_t result = (uint64_t)v11;
      int v11 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::handleErrorImpl<llvm::FileError::build(llvm::Twine const&,std::optional<unsigned long>,llvm::Error)::{lambda(std::unique_ptr<llvm::ErrorInfoBase>)#1}>@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)*a1 + 48))(*a1, &llvm::ErrorInfoBase::ID);
  uint64_t v7 = *a1;
  *a1 = 0;
  if (result)
  {
    uint64_t result = **a2;
    **a2 = v7;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    uint64_t v7 = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t llvm::FileError::FileError(uint64_t a1, llvm::Twine *this, uint64_t a3, char a4, uint64_t *a5)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v9 = (void **)(a1 + 8);
  *(void *)a1 = &unk_270DBCCC0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  llvm::Twine::str(this, &v13);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*v9);
  }
  *(std::string *)uint64_t v9 = v13;
  uint64_t v10 = *a5;
  *a5 = 0;
  uint64_t v11 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v10;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 40) = a4;
  return a1;
}

unint64_t **llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  int i = (unint64_t **)(*(void *)a1 + 8 * v6);
  int v8 = *i;
  if (*i == (unint64_t *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v8)
  {
    while (!v8 || v8 == (unint64_t *)-8)
    {
      uint64_t v9 = i[1];
      ++i;
      int v8 = v9;
    }
    return i;
  }
  uint64_t v10 = operator new(a3 + 9, (std::align_val_t)8uLL);
  uint64_t v11 = v10;
  uint64_t v12 = (char *)(v10 + 1);
  if (a3) {
    memcpy(v10 + 1, a2, a3);
  }
  v12[a3] = 0;
  *uint64_t v11 = a3;
  *int i = v11;
  ++*((_DWORD *)a1 + 3);
  for (int i = (unint64_t **)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

uint64_t DefaultAutoDetectFunction(const llvm::raw_ostream *a1)
{
  if (!atomic_load_explicit(UseColor, memory_order_acquire)) {
  if (*(_DWORD *)(UseColor[0] + 128))
  }
  {
    if (!atomic_load_explicit(UseColor, memory_order_acquire)) {
    return *(_DWORD *)(UseColor[0] + 128) == 1;
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(const llvm::raw_ostream *))(*(void *)a1 + 56);
    return v3(a1);
  }
}

uint64_t llvm::WithColor::WithColor(uint64_t a1, llvm::raw_ostream *a2, int a3, int a4)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a4;
  if (a4)
  {
    if (a4 != 1) {
      return a1;
    }
  }
  else if (!llvm::WithColor::AutoDetectFunction(a2))
  {
    return a1;
  }
  switch(a3)
  {
    case 0:
      uint64_t v7 = *(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, void))(*(void *)a2 + 24);
      int v8 = a2;
      uint64_t v9 = 3;
      goto LABEL_12;
    case 1:
      uint64_t v7 = *(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, void))(*(void *)a2 + 24);
      int v8 = a2;
      uint64_t v9 = 2;
      goto LABEL_12;
    case 2:
      uint64_t v7 = *(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, void))(*(void *)a2 + 24);
      int v8 = a2;
      uint64_t v9 = 4;
      goto LABEL_12;
    case 3:
      uint64_t v7 = *(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, void))(*(void *)a2 + 24);
      int v8 = a2;
      uint64_t v9 = 6;
      goto LABEL_12;
    case 4:
      uint64_t v7 = *(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, void))(*(void *)a2 + 24);
      int v8 = a2;
      uint64_t v9 = 5;
      goto LABEL_12;
    case 5:
      uint64_t v7 = *(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, void))(*(void *)a2 + 24);
      int v8 = a2;
      uint64_t v9 = 1;
LABEL_12:
      uint64_t v10 = 0;
      goto LABEL_18;
    case 6:
      uint64_t v7 = *(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, void))(*(void *)a2 + 24);
      int v8 = a2;
      uint64_t v9 = 1;
      goto LABEL_17;
    case 7:
      uint64_t v7 = *(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, void))(*(void *)a2 + 24);
      int v8 = a2;
      uint64_t v9 = 5;
      goto LABEL_17;
    case 8:
      uint64_t v7 = *(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, void))(*(void *)a2 + 24);
      int v8 = a2;
      uint64_t v9 = 0;
      goto LABEL_17;
    case 9:
      uint64_t v7 = *(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, void))(*(void *)a2 + 24);
      int v8 = a2;
      uint64_t v9 = 4;
LABEL_17:
      uint64_t v10 = 1;
LABEL_18:
      v7(v8, v9, v10, 0);
      break;
    default:
      return a1;
  }
  return a1;
}

llvm::raw_ostream *llvm::WithColor::error(llvm::raw_ostream *a1, const void *a2, size_t a3, int a4)
{
  if (a3)
  {
    uint64_t v6 = llvm::raw_ostream::operator<<(a1, a2, a3);
    uint64_t v7 = (_WORD *)*((void *)v6 + 4);
    if (*((void *)v6 + 3) - (void)v7 > 1uLL)
    {
      *uint64_t v7 = 8250;
      *((void *)v6 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v6, ": ", 2uLL);
    }
  }
  if (a4) {
    int v8 = 2;
  }
  else {
    int v8 = 0;
  }
  llvm::WithColor::WithColor((uint64_t)v12, a1, 6, v8);
  uint64_t v9 = v12[0];
  uint64_t v10 = (_DWORD *)*((void *)v12[0] + 4);
  if (*((void *)v12[0] + 3) - (void)v10 > 6uLL)
  {
    *(_DWORD *)((char *)v10 + 3) = 540701295;
    *uint64_t v10 = 1869771365;
    *((void *)v9 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v12[0], "error: ", 7uLL);
  }
  llvm::WithColor::resetColor((llvm::WithColor *)v12);
  return v9;
}

llvm::raw_ostream *llvm::WithColor::warning(llvm::raw_ostream *a1, const void *a2, size_t a3, int a4)
{
  if (a3)
  {
    uint64_t v6 = llvm::raw_ostream::operator<<(a1, a2, a3);
    uint64_t v7 = (_WORD *)*((void *)v6 + 4);
    if (*((void *)v6 + 3) - (void)v7 > 1uLL)
    {
      *uint64_t v7 = 8250;
      *((void *)v6 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v6, ": ", 2uLL);
    }
  }
  if (a4) {
    int v8 = 2;
  }
  else {
    int v8 = 0;
  }
  llvm::WithColor::WithColor((uint64_t)v12, a1, 7, v8);
  uint64_t v9 = v12[0];
  uint64_t v10 = *((void *)v12[0] + 4);
  if ((unint64_t)(*((void *)v12[0] + 3) - v10) > 8)
  {
    *(unsigned char *)(v10 + 8) = 32;
    *(void *)uint64_t v10 = *(void *)"warning: ";
    *((void *)v9 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v12[0], "warning: ", 9uLL);
  }
  llvm::WithColor::resetColor((llvm::WithColor *)v12);
  return v9;
}

llvm::raw_ostream *llvm::WithColor::note(llvm::raw_ostream *a1, const void *a2, size_t a3, int a4)
{
  if (a3)
  {
    uint64_t v6 = llvm::raw_ostream::operator<<(a1, a2, a3);
    uint64_t v7 = (_WORD *)*((void *)v6 + 4);
    if (*((void *)v6 + 3) - (void)v7 > 1uLL)
    {
      *uint64_t v7 = 8250;
      *((void *)v6 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v6, ": ", 2uLL);
    }
  }
  if (a4) {
    int v8 = 2;
  }
  else {
    int v8 = 0;
  }
  llvm::WithColor::WithColor((uint64_t)v12, a1, 8, v8);
  uint64_t v9 = v12[0];
  uint64_t v10 = *((void *)v12[0] + 4);
  if ((unint64_t)(*((void *)v12[0] + 3) - v10) > 5)
  {
    *(_WORD *)(v10 + 4) = 8250;
    *(_DWORD *)uint64_t v10 = 1702129518;
    *((void *)v9 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v12[0], "note: ", 6uLL);
  }
  llvm::WithColor::resetColor((llvm::WithColor *)v12);
  return v9;
}

llvm::raw_ostream *llvm::WithColor::remark(llvm::raw_ostream *a1, const void *a2, size_t a3, int a4)
{
  if (a3)
  {
    uint64_t v6 = llvm::raw_ostream::operator<<(a1, a2, a3);
    uint64_t v7 = (_WORD *)*((void *)v6 + 4);
    if (*((void *)v6 + 3) - (void)v7 > 1uLL)
    {
      *uint64_t v7 = 8250;
      *((void *)v6 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v6, ": ", 2uLL);
    }
  }
  if (a4) {
    int v8 = 2;
  }
  else {
    int v8 = 0;
  }
  llvm::WithColor::WithColor((uint64_t)v12, a1, 9, v8);
  uint64_t v9 = v12[0];
  uint64_t v10 = (void *)*((void *)v12[0] + 4);
  if (*((void *)v12[0] + 3) - (void)v10 > 7uLL)
  {
    *uint64_t v10 = 0x203A6B72616D6572;
    *((void *)v9 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v12[0], "remark: ", 8uLL);
  }
  llvm::WithColor::resetColor((llvm::WithColor *)v12);
  return v9;
}

void *llvm::WithColor::changeColor(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *((_DWORD *)a1 + 2);
  if (!v8)
  {
    if (!llvm::WithColor::AutoDetectFunction((const llvm::raw_ostream *)*a1)) {
      return a1;
    }
    goto LABEL_3;
  }
  if (v8 == 1) {
LABEL_3:
  }
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, a3, a4);
  return a1;
}

llvm::WithColor *llvm::WithColor::resetColor(llvm::WithColor *this)
{
  int v2 = *((_DWORD *)this + 2);
  if (!v2)
  {
    if (!llvm::WithColor::AutoDetectFunction(*(const llvm::raw_ostream **)this)) {
      return this;
    }
    goto LABEL_3;
  }
  if (v2 == 1) {
LABEL_3:
  }
    (*(void (**)(void))(**(void **)this + 32))();
  return this;
}

void anonymous namespace'::CreateUseColor::call(_anonymous_namespace_::CreateUseColor *this)
{
}

uint64_t llvm::object_deleter<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>>::call(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  int v11 = 0;
  uint64_t v8 = llvm::cl::parser<llvm::cl::BOOLOrDefault>::parse((llvm *)(a1 + 152), a1, a3, a4, a5, a6, &v11);
  if (v8) {
    return v8;
  }
  *(_DWORD *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 184);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::getValueExpectedFlagDefault()
{
  return 1;
}

void llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::~opt(llvm::cl::Option *a1)
{
  *(void *)a1 = &unk_270DBD1E0;
  std::__function::__value_func<void ()(llvm::cl::BOOLOrDefault const&)>::~__value_func[abi:nn180100]((void *)a1 + 20);
  llvm::cl::Option::~Option(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270DBD1E0;
  std::__function::__value_func<void ()(llvm::cl::BOOLOrDefault const&)>::~__value_func[abi:nn180100]((void *)a1 + 20);
  llvm::cl::Option::~Option(a1);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

llvm::raw_ostream *llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  if (a3)
  {
    int v3 = *(_DWORD *)(a1 + 128);
LABEL_5:
    int v5 = *(_DWORD *)(a1 + 144);
    char v6 = *(unsigned char *)(a1 + 148);
    uint64_t v4 = &unk_270DBC618;
    llvm::cl::parser<llvm::cl::BOOLOrDefault>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 152), (const llvm::cl::Option *)a1, v3, (uint64_t)&v4, a2);
    return;
  }
  if (*(unsigned char *)(a1 + 148))
  {
    int v3 = *(_DWORD *)(a1 + 128);
    if (*(_DWORD *)(a1 + 144) != v3) {
      goto LABEL_5;
    }
  }
}

uint64_t llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::setDefault(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1},std::allocator<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1}>,void ()(llvm::cl::BOOLOrDefault const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1},std::allocator<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1}>,void ()(llvm::cl::BOOLOrDefault const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_270DBD248;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1},std::allocator<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1}>,void ()(llvm::cl::BOOLOrDefault const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DBD248;
}

void *std::__function::__value_func<void ()(llvm::cl::BOOLOrDefault const&)>::~__value_func[abi:nn180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void llvm::yaml::Scanner::getNext(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = llvm::yaml::Scanner::peekNext(this);
  long long v5 = *(_OWORD *)v4;
  *(void *)(a2 + 16) = v4[2];
  *(_OWORD *)a2 = v5;
  char v6 = (std::string *)(a2 + 24);
  if (*((char *)v4 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)v4[3], v4[4]);
  }
  else
  {
    long long v7 = *(_OWORD *)(v4 + 3);
    *(void *)(a2 + 40) = v4[5];
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v9 = this[22];
  uint64_t v8 = (uint64_t *)(this + 22);
  if (v9 == v8
    || (llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::pop_front((uint64_t)(v8 - 12)),
        (uint64_t *)*v8 == v8))
  {
    llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset((uint64_t)(v8 - 12));
  }
}

uint64_t decodeUTF8(unsigned __int8 *a1, unint64_t a2)
{
  if ((uint64_t)a2 < 1) {
    goto LABEL_21;
  }
  int v2 = (char)*a1;
  if ((v2 & 0x80000000) == 0)
  {
    unsigned int v3 = *a1;
    uint64_t v4 = 0x100000000;
    return v4 | v3;
  }
  if (a2 < 2) {
    goto LABEL_21;
  }
  if ((v2 & 0xE0) == 0xC0)
  {
    char v5 = a1[1];
    if ((v5 & 0xC0) == 0x80)
    {
      unsigned int v3 = v5 & 0x3F | ((v2 & 0x1F) << 6);
      if (v3 >= 0x80)
      {
        uint64_t v4 = 0x200000000;
        return v4 | v3;
      }
    }
  }
  if (a2 < 3)
  {
LABEL_21:
    unsigned int v3 = 0;
    uint64_t v4 = 0;
    return v4 | v3;
  }
  if ((v2 & 0xF0) == 0xE0)
  {
    char v6 = a1[1];
    if ((v6 & 0xC0) == 0x80)
    {
      char v7 = a1[2];
      if ((v7 & 0xC0) == 0x80)
      {
        int v8 = ((v2 & 0xF) << 12) | ((v6 & 0x3F) << 6);
        unsigned int v3 = v8 | v7 & 0x3F;
        if (v3 >= 0x800 && (v8 - 57344) <= 0xFFFFF7FF)
        {
          uint64_t v4 = 0x300000000;
          return v4 | v3;
        }
      }
    }
  }
  unsigned int v3 = 0;
  if (a2 < 4)
  {
    uint64_t v4 = 0;
    return v4 | v3;
  }
  uint64_t v4 = 0;
  if ((v2 & 0xF8) == 0xF0)
  {
    char v9 = a1[1];
    if ((v9 & 0xC0) == 0x80)
    {
      char v10 = a1[2];
      if ((v10 & 0xC0) == 0x80)
      {
        char v11 = a1[3];
        if ((v11 & 0xC0) == 0x80)
        {
          int v12 = ((v2 & 7) << 18) | ((v9 & 0x3F) << 12);
          if ((v12 - 1114112) >= 0xFFF00000)
          {
            unsigned int v3 = v11 & 0x3F | ((v10 & 0x3F) << 6) | v12;
            uint64_t v4 = 0x400000000;
            return v4 | v3;
          }
        }
      }
    }
    goto LABEL_21;
  }
  return v4 | v3;
}

void *encodeUTF8(void *result, void *a2)
{
  if (result > 0x7F)
  {
    if (result > 0x7FF)
    {
      if (result >> 16)
      {
        if (result >> 16 > 0x10) {
          return result;
        }
        unsigned int v6 = (result >> 12) & 0x3F | 0xFFFFFF80;
        unsigned int v7 = (result >> 6) & 0x3F | 0xFFFFFF80;
        char v8 = result & 0x3F | 0x80;
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, (result >> 18) | 0xF0);
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, v6);
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, v7);
        LOBYTE(result) = v8;
      }
      else
      {
        unsigned int v4 = (result >> 6) & 0x3F | 0xFFFFFF80;
        char v5 = result & 0x3F | 0x80;
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, (result >> 12) | 0xE0);
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, v4);
        LOBYTE(result) = v5;
      }
    }
    else
    {
      char v3 = result & 0x3F | 0x80;
      llvm::SmallVectorTemplateBase<char,true>::push_back(a2, (result >> 6) | 0xC0);
      LOBYTE(result) = v3;
    }
  }
  return llvm::SmallVectorTemplateBase<char,true>::push_back(a2, (char)result);
}

uint64_t llvm::yaml::Scanner::Scanner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)a1 = a4;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 75) = a5;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1 + 112;
  *(void *)(a1 + 104) = 0x400000000;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = a1 + 160;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 168) = 1;
  *(void *)(a1 + 176) = a1 + 176;
  *(void *)(a1 + 184) = a1 + 176;
  *(void *)(a1 + 192) = a1 + 208;
  *(void *)(a1 + 200) = 0x400000000;
  *(void *)(a1 + 224) = a1 + 240;
  *(void *)(a1 + 232) = 0x400000000;
  *(void *)(a1 + 336) = a6;
  v8[0] = a2;
  v8[1] = a3;
  void v8[2] = (uint64_t)"YAML";
  void v8[3] = 4;
  llvm::yaml::Scanner::init(a1, v8);
  return a1;
}

void llvm::yaml::Scanner::init(uint64_t a1, uint64_t *a2)
{
  long long v3 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = v4 + *(void *)(a1 + 16);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = xmmword_261E8D160;
  *(_WORD *)(a1 + 72) = 257;
  *(unsigned char *)(a1 + 74) = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = (char *)a2[2];
  char v9 = (char **)a2[3];
  LOWORD(v28) = 261;
  int v24 = v8;
  int v25 = v9;
  uint64_t v21 = &v24;
  char v10 = operator new(24, (uint64_t *)&v21);
  *(void *)char v10 = &unk_270DBCE88;
  *((void *)v10 + 1) = v6;
  *((void *)v10 + 2) = v6 + v7;
  char v11 = *(uint64_t **)a1;
  uint64_t v23 = 0;
  int v12 = (char **)v11[1];
  unint64_t v13 = v11[2];
  if ((unint64_t)v12 >= v13)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - *v11) >> 3);
    unint64_t v16 = v15 + 1;
    if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *v11) >> 3);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v16;
    }
    long long v28 = v11 + 2;
    if (v18) {
      int v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(v11 + 2), v18);
    }
    else {
      int v19 = 0;
    }
    char v20 = (char **)&v19[24 * v15];
    int v24 = v19;
    int v25 = v20;
    long long v27 = &v19[24 * v18];
    uint64_t v21 = 0;
    v20[1] = 0;
    long long v20[2] = 0;
    *char v20 = v10;
    uint64_t v22 = 0;
    long long v26 = v20 + 3;
    std::vector<llvm::SourceMgr::SrcBuffer>::__swap_out_circular_buffer(v11, &v24);
    BOOL v14 = (void *)v11[1];
    std::__split_buffer<llvm::SourceMgr::SrcBuffer>::~__split_buffer((uint64_t)&v24);
  }
  else
  {
    v12[1] = 0;
    void v12[2] = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    BOOL v14 = v12 + 3;
    *int v12 = v10;
  }
  v11[1] = (uint64_t)v14;
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v21);
}

uint64_t *llvm::yaml::Scanner::peekNext(uint64_t **this)
{
  char v2 = 0;
  long long v3 = (uint64_t *)(this + 22);
  while ((v2 & 1) == 0 && (uint64_t *)*v3 != v3
       || (llvm::yaml::Scanner::fetchMoreTokens((llvm::yaml::Scanner *)this) & 1) != 0)
  {
    llvm::yaml::Scanner::removeStaleSimpleKeyCandidates((llvm::yaml::Scanner *)this);
    uint64_t v4 = this[23];
    uint64_t v5 = this[28];
    uint64_t v6 = *((unsigned int *)this + 58);
    if (v6)
    {
      uint64_t v7 = 24 * v6;
      char v8 = this[28];
      while ((uint64_t *)*v8 != v4)
      {
        v8 += 3;
        v7 -= 24;
        if (!v7)
        {
          char v8 = &v5[3 * v6];
          break;
        }
      }
    }
    else
    {
      char v8 = this[28];
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 - v5);
    char v2 = 1;
    if (v9 == v6) {
      return v4 + 2;
    }
  }
  llvm::simple_ilist<llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::Node>::eraseAndDispose<llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::Disposer>((uint64_t)v3, this[23], v3);
  *((_DWORD *)this + 58) = 0;
  unint64_t v10 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 10), 64, 3);
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)unint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  char v11 = this[22];
  *(void *)unint64_t v10 = v11;
  *(void *)(v10 + 8) = v3;
  v11[1] = v10;
  this[22] = (uint64_t *)v10;
  uint64_t v4 = this[23];
  return v4 + 2;
}

uint64_t llvm::yaml::Scanner::fetchMoreTokens(llvm::yaml::Scanner *this)
{
  if (*((unsigned char *)this + 72))
  {
    *((unsigned char *)this + 72) = 0;
    char v2 = (unsigned __int8 *)*((void *)this + 5);
    unint64_t v3 = *((void *)this + 6) - (void)v2;
    if (!v3) {
      goto LABEL_76;
    }
    uint64_t v4 = 0;
    unsigned int v5 = *v2;
    if (v5 <= 0xFD)
    {
      if (*v2)
      {
        if (v5 != 239)
        {
LABEL_77:
          memset(&v64[3], 0, 24);
          uint64_t v21 = 1;
          LODWORD(v64[0]) = 1;
          v64[1] = v2;
          long long v64[2] = v4;
          unint64_t v34 = (void *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, (long long *)v64);
          uint64_t v36 = *((void *)this + 22);
          long long v35 = (void *)((char *)this + 176);
          *unint64_t v34 = v36;
          v34[1] = v35;
          *(void *)(v36 + 8) = v34;
          *long long v35 = v34;
          *(v35 - 17) += v4;
          return v21;
        }
        if (v3 >= 3 && v2[1] == 187 && v2[2] == 191)
        {
          uint64_t v4 = 3;
          goto LABEL_77;
        }
LABEL_76:
        uint64_t v4 = 0;
        goto LABEL_77;
      }
      if (v3 < 4 || v2[1] || !v2[2] || v2[2] != 254 || v2[3] != 255) {
        goto LABEL_76;
      }
LABEL_51:
      uint64_t v4 = 4;
      goto LABEL_77;
    }
    if (v5 == 254)
    {
      if (v3 < 2 || v2[1] != 255) {
        goto LABEL_76;
      }
    }
    else if (v3 < 4)
    {
      if (v3 <= 1 || v2[1] != 254) {
        goto LABEL_76;
      }
    }
    else
    {
      if (v2[1] != 254) {
        goto LABEL_76;
      }
      if (!v2[2] && !v2[3]) {
        goto LABEL_51;
      }
    }
    uint64_t v4 = 2;
    goto LABEL_77;
  }
  uint64_t v7 = (unsigned __int8 *)*((void *)this + 5);
  uint64_t v6 = (unsigned __int8 *)*((void *)this + 6);
  while (1)
  {
    while (v7 != v6)
    {
      int v8 = *v7;
      if (v8 != 32 && v8 != 9) {
        break;
      }
      *((void *)this + 5) = ++v7;
      ++*((_DWORD *)this + 15);
    }
    llvm::yaml::Scanner::skipComment((const char *)this);
    unint64_t v10 = (unsigned __int8 *)*((void *)this + 5);
    uint64_t v6 = (unsigned __int8 *)*((void *)this + 6);
    if (v6 == v10)
    {
      if (*((_DWORD *)this + 15))
      {
        int v17 = *((_DWORD *)this + 16) + 1;
        *((_DWORD *)this + 15) = 0;
        *((_DWORD *)this + 16) = v17;
      }
      llvm::yaml::Scanner::unrollIndent((unint64_t)this, -1);
      *((_DWORD *)this + 58) = 0;
      *((unsigned char *)this + 73) = 0;
      LODWORD(v64[0]) = 2;
      v64[1] = *((void *)this + 5);
      memset(&v64[2], 0, 32);
LABEL_31:
      unint64_t v18 = (void *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, (long long *)v64);
      uint64_t v20 = *((void *)this + 22);
      int v19 = (void *)((char *)this + 176);
      *unint64_t v18 = v20;
      v18[1] = v19;
      *(void *)(v20 + 8) = v18;
      *int v19 = v18;
      return 1;
    }
    int v11 = *v10;
    if (v11 == 10)
    {
      uint64_t v7 = v10 + 1;
      goto LABEL_26;
    }
    if (v11 != 13) {
      break;
    }
    int v12 = v10 + 1;
    uint64_t v7 = (unsigned __int8 *)*((void *)this + 6);
    if (v10 + 1 != v6)
    {
      int v13 = v10[1];
      BOOL v14 = v10 + 2;
      if (v13 == 10) {
        uint64_t v7 = v14;
      }
      else {
        uint64_t v7 = v12;
      }
    }
LABEL_26:
    *((void *)this + 5) = v7;
    int v15 = *((_DWORD *)this + 17);
    int v16 = *((_DWORD *)this + 16) + 1;
    *((_DWORD *)this + 15) = 0;
    *((_DWORD *)this + 16) = v16;
    if (!v15) {
      *((unsigned char *)this + 73) = 1;
    }
  }
  llvm::yaml::Scanner::removeStaleSimpleKeyCandidates(this);
  llvm::yaml::Scanner::unrollIndent((unint64_t)this, *((_DWORD *)this + 15));
  uint64_t v22 = (char *)*((void *)this + 5);
  unsigned int v23 = *v22;
  if (*((_DWORD *)this + 15))
  {
LABEL_40:
    if (*v22 <= 0x39u)
    {
      switch(*v22)
      {
        case '!':
          goto LABEL_70;
        case '""':
          goto LABEL_86;
        case '&':
          goto LABEL_97;
        case '\'':
          goto LABEL_98;
        case '*':
          goto LABEL_102;
        case ',':
          goto LABEL_106;
        case '-':
          unint64_t v37 = *((void *)this + 6);
          goto LABEL_144;
        default:
          goto LABEL_178;
      }
    }
    goto LABEL_41;
  }
  if (v23 != 37)
  {
    unint64_t v37 = *((void *)this + 6);
    if ((unint64_t)(v22 + 4) > v37) {
      goto LABEL_40;
    }
    if (*v22 <= 0x39u)
    {
      switch(*v22)
      {
        case '!':
LABEL_70:
          return llvm::yaml::Scanner::scanTag(this);
        case '""':
LABEL_86:
          BOOL v38 = (std::error_category *)this;
          int v39 = 1;
          goto LABEL_99;
        case '&':
LABEL_97:
          uint64_t v40 = this;
          int v41 = 0;
          goto LABEL_103;
        case '\'':
LABEL_98:
          BOOL v38 = (std::error_category *)this;
          int v39 = 0;
LABEL_99:
          return llvm::yaml::Scanner::scanFlowScalar(v38, v39);
        case '*':
LABEL_102:
          uint64_t v40 = this;
          int v41 = 1;
LABEL_103:
          return llvm::yaml::Scanner::scanAliasOrAnchor(v40, v41);
        case ',':
LABEL_106:
          llvm::yaml::Scanner::scanFlowEntry(this);
          return 1;
        case '-':
          if (v22[1] == 45 && v22[2] == 45)
          {
            if (v22 + 3 == (char *)v37
              || (unsigned int v56 = v22[3], v56 <= 0x20) && ((1 << v56) & 0x100002600) != 0)
            {
              uint64_t v21 = 1;
              llvm::yaml::Scanner::scanDocumentIndicator(this, 1);
              return v21;
            }
          }
LABEL_144:
          if ((char *)v37 != v22 + 1)
          {
            unsigned int v51 = v22[1];
            if (v51 <= 0x20 && ((1 << v51) & 0x100002600) != 0)
            {
              llvm::yaml::Scanner::scanBlockEntry(this);
              return 1;
            }
          }
          break;
        case '.':
          if (v22[1] != 46) {
            goto LABEL_178;
          }
          if (v22[2] != 46) {
            goto LABEL_178;
          }
          if (v22 + 3 != (char *)v37)
          {
            unsigned int v57 = v22[3];
            if (v57 > 0x20 || ((1 << v57) & 0x100002600) == 0) {
              goto LABEL_178;
            }
          }
          llvm::yaml::Scanner::scanDocumentIndicator(this, 0);
          return 1;
        default:
          goto LABEL_178;
      }
      goto LABEL_178;
    }
LABEL_41:
    if (*v22 > 0x5Cu)
    {
      if (*v22 > 0x7Bu)
      {
        if (v23 == 124)
        {
LABEL_93:
          if (!*((_DWORD *)this + 17))
          {
            return llvm::yaml::Scanner::scanBlockScalar((std::error_category *)this);
          }
          goto LABEL_178;
        }
        if (v23 == 125)
        {
          llvm::yaml::Scanner::scanFlowCollectionEnd(this, 0);
          return 1;
        }
      }
      else
      {
        if (v23 == 93)
        {
          uint64_t v21 = 1;
          llvm::yaml::Scanner::scanFlowCollectionEnd(this, 1);
          return v21;
        }
        if (v23 == 123)
        {
          llvm::yaml::Scanner::scanFlowCollectionStart(this, 0);
          return 1;
        }
      }
    }
    else if (*v22 > 0x3Eu)
    {
      if (v23 == 63)
      {
        if (*((_DWORD *)this + 17)
          || *((char **)this + 6) != v22 + 1
          && (unsigned int v43 = v22[1], v43 <= 0x20)
          && ((1 << v43) & 0x100002600) != 0)
        {
          llvm::yaml::Scanner::scanKey(this);
          return 1;
        }
      }
      else if (v23 == 91)
      {
        uint64_t v21 = 1;
        llvm::yaml::Scanner::scanFlowCollectionStart(this, 1);
        return v21;
      }
    }
    else
    {
      if (v23 != 58)
      {
        if (v23 != 62) {
          goto LABEL_178;
        }
        goto LABEL_93;
      }
      if (*((_DWORD *)this + 17)
        || *((char **)this + 6) != v22 + 1
        && (unsigned int v42 = v22[1], v42 <= 0x20)
        && ((1 << v42) & 0x100002600) != 0)
      {
        return llvm::yaml::Scanner::scanValue(this);
      }
    }
LABEL_178:
    v63[0] = *((void *)this + 5);
    v63[1] = 1;
    unint64_t v58 = *((void *)this + 6);
    if ((char *)v58 != v22 && v23 <= 0x20 && ((1 << v23) & 0x100002600) != 0) {
      goto LABEL_187;
    }
    {
      if (v23 != 45) {
        goto LABEL_187;
      }
      if ((char *)v58 != v22 + 1)
      {
        unsigned int v59 = v22[1];
        if (v59 <= 0x20 && ((1 << v59) & 0x100002600) != 0)
        {
          unsigned int v23 = 45;
LABEL_187:
          if (*((_DWORD *)this + 17)
            || v23 != 63 && v23 != 58
            || ((uint64_t v60 = v22 + 1, (char *)v58 == v22 + 1)
             || (unsigned int v61 = *v60, v61 > 0x20)
             || ((1 << v61) & 0x100002600) == 0)
            && (v23 != 58
             || (unint64_t)(v22 + 2) >= v58
             || *v60 != 58
             || (unsigned int v62 = v22[2], v62 <= 0x20) && ((1 << v62) & 0x100002600) != 0))
          {
            v64[0] = "Unrecognized character while tokenizing.";
            LOWORD(v64[4]) = 259;
            llvm::yaml::Scanner::setError((std::error_category *)this, (const llvm::Twine *)v64, v22);
            return 0;
          }
        }
      }
    }
    return llvm::yaml::Scanner::scanPlainScalar(this);
  }
  llvm::yaml::Scanner::unrollIndent((unint64_t)this, -1);
  *((_DWORD *)this + 58) = 0;
  *((unsigned char *)this + 73) = 0;
  uint64_t v24 = *((void *)this + 5);
  llvm::yaml::Scanner::consume((std::error_category *)this, 37);
  long long v26 = (char *)*((void *)this + 5);
  int v25 = (const char *)*((void *)this + 6);
  long long v27 = v26;
  while (v25 != v27)
  {
    long long v28 = v27;
    int v29 = *v27;
    if (v29 != 9 && v29 != 32)
    {
      long long v27 = (char *)llvm::yaml::Scanner::skip_nb_char(v25, v27);
      if (v27 != v28) {
        continue;
      }
    }
    *((void *)this + 5) = v28;
    long long v30 = v28;
    while (1)
    {
      int v31 = *v30;
      if (v31 != 32 && v31 != 9) {
        goto LABEL_122;
      }
      if (++v30 == v25) {
        goto LABEL_121;
      }
    }
  }
  long long v28 = (char *)v25;
LABEL_121:
  long long v30 = (char *)v25;
LABEL_122:
  int64_t v44 = v28 - v26;
  *((void *)this + 5) = v30;
  LODWORD(v64[0]) = 0;
  memset(&v64[1], 0, 40);
  if (v28 - v26 == 3)
  {
    if (*(_WORD *)v26 != 16724 || v26[2] != 71) {
      return 0;
    }
    do
    {
      if (v25 == v30)
      {
LABEL_156:
        size_t v49 = (char *)v25;
        goto LABEL_157;
      }
      size_t v49 = v30;
      int v50 = *v30;
      if (v50 == 9) {
        break;
      }
      if (v50 == 32) {
        break;
      }
      long long v30 = (char *)llvm::yaml::Scanner::skip_nb_char(v25, v30);
    }
    while (v30 != v49);
    *((void *)this + 5) = v49;
    while (1)
    {
      int v52 = *v49;
      if (v52 != 32 && v52 != 9) {
        break;
      }
      if (++v49 == v25) {
        goto LABEL_156;
      }
    }
LABEL_157:
    *((void *)this + 5) = v49;
    while (v25 != v49)
    {
      long long v54 = v49;
      int v55 = *v49;
      if (v55 != 9 && v55 != 32)
      {
        size_t v49 = (char *)llvm::yaml::Scanner::skip_nb_char(v25, v49);
        if (v49 != v54) {
          continue;
        }
      }
      goto LABEL_164;
    }
    long long v54 = (char *)v25;
LABEL_164:
    *((void *)this + 5) = v54;
    LODWORD(v64[0]) = 4;
    long long v47 = &v54[-v24];
LABEL_165:
    v64[1] = v24;
    long long v64[2] = v47;
    goto LABEL_31;
  }
  uint64_t v21 = 0;
  if (v44 == 4)
  {
    if (*(_DWORD *)v26 == 1280131417)
    {
      while (v25 != v30)
      {
        uint64_t v45 = v30;
        int v46 = *v30;
        if (v46 != 9 && v46 != 32)
        {
          long long v30 = (char *)llvm::yaml::Scanner::skip_nb_char(v25, v30);
          if (v30 != v45) {
            continue;
          }
        }
        goto LABEL_131;
      }
      uint64_t v45 = (char *)v25;
LABEL_131:
      *((void *)this + 5) = v45;
      LODWORD(v64[0]) = 3;
      long long v47 = &v45[-v24];
      goto LABEL_165;
    }
    return 0;
  }
  return v21;
}

void llvm::yaml::Scanner::removeStaleSimpleKeyCandidates(llvm::yaml::Scanner *this)
{
  int v1 = *((_DWORD *)this + 58);
  if (v1)
  {
    unint64_t v3 = (_DWORD *)*((void *)this + 28);
    uint64_t v4 = v3;
    do
    {
      if (v4[3] == *((_DWORD *)this + 16) && (v4[2] + 1024) >= *((_DWORD *)this + 15))
      {
        v4 += 6;
      }
      else
      {
        if (*((unsigned char *)v4 + 20))
        {
          uint64_t v6 = "Could not find expected : for simple key";
          __int16 v7 = 259;
          llvm::yaml::Scanner::setError((std::error_category *)this, (const llvm::Twine *)&v6, *(char **)(*(void *)v4 + 24));
          unint64_t v3 = (_DWORD *)*((void *)this + 28);
          int v1 = *((_DWORD *)this + 58);
        }
        uint64_t v5 = (char *)&v3[6 * v1] - (char *)(v4 + 6);
        if (v5)
        {
          memmove(v4, v4 + 6, v5 - 3);
          int v1 = *((_DWORD *)this + 58);
          unint64_t v3 = (_DWORD *)*((void *)this + 28);
        }
        *((_DWORD *)this + 58) = --v1;
      }
    }
    while (v4 != &v3[6 * v1]);
  }
}

void llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::pop_front(uint64_t a1)
{
  int v1 = *(uint64_t **)(a1 + 104);
  uint64_t v3 = *v1;
  char v2 = (uint64_t *)v1[1];
  uint64_t *v2 = *v1;
  *(void *)(v3 + 8) = v2;
  *int v1 = 0;
  v1[1] = 0;
  if (*((char *)v1 + 63) < 0) {
    operator delete((void *)v1[5]);
  }
}

const char *llvm::yaml::Scanner::skip_nb_char(const char *this, char *a2)
{
  unint64_t v3 = this - a2;
  if (v3)
  {
    int v4 = *a2;
    if (v4 == 9 || (v4 - 127) >= 0xFFFFFFA1)
    {
      return a2 + 1;
    }
    else
    {
      if ((v4 & 0x80) == 0) {
        return a2;
      }
      unint64_t v5 = decodeUTF8((unsigned __int8 *)a2, v3);
      if (!HIDWORD(v5)) {
        return a2;
      }
      int v6 = v5;
      if (v5 == 65279) {
        return a2;
      }
      unsigned int v7 = v5 - 0x10000;
      this = &a2[HIDWORD(v5)];
      if (v7 >= 0x100000
        && (v6 - 57344) >> 1 >= 0xFFF
        && v6 != 133
        && (v6 - 160) >> 5 >= 0x6BB)
      {
        return a2;
      }
    }
  }
  return this;
}

uint64_t llvm::yaml::Scanner::consume(std::error_category *this, int a2)
{
  char v2 = (char *)this[5].__vftable;
  if (v2 != (char *)this[6].__vftable)
  {
    if (*v2 < 0)
    {
      int v4 = "Cannot consume non-ascii characters";
      __int16 v5 = 259;
      llvm::yaml::Scanner::setError(this, (const llvm::Twine *)&v4, v2);
    }
    else if (*v2 == a2)
    {
      this[5].__vftable = (std::error_category_vtbl *)(v2 + 1);
      ++HIDWORD(this[7].__vftable);
      return 1;
    }
  }
  return 0;
}

void llvm::yaml::Scanner::setError(std::error_category *this, const llvm::Twine *a2, char *a3)
{
  int v4 = this;
  unint64_t v5 = (unint64_t)this[6].__vftable;
  if (v5 <= (unint64_t)a3) {
    int v6 = (char *)(v5 - 1);
  }
  else {
    int v6 = a3;
  }
  if (this[42].__vftable)
  {
    this = (std::error_category *)std::generic_category();
    unsigned int v7 = v4[42].__vftable;
    v7->~error_category = (void (__cdecl *)(std::error_category *__hidden))22;
    v7->~error_category_0 = (void (__cdecl *)(std::error_category *__hidden))this;
  }
  if (!BYTE2(v4[9].__vftable))
  {
    int v8 = (uint64_t *)v4->__vftable;
    unsigned __int8 v9 = BYTE3(v4[9].__vftable);
    unint64_t v10 = (llvm::raw_ostream *)llvm::errs((llvm *)this);
    llvm::SourceMgr::PrintMessage(v8, v10, v6, 0, a2, 0, 0, v11, 0, 0, v9);
  }
  BYTE2(v4[9].__vftable) = 1;
}

uint64_t llvm::yaml::Scanner::consumeLineBreakIfPresent(llvm::yaml::Scanner *this)
{
  char v2 = (unsigned __int8 *)*((void *)this + 5);
  int v1 = (unsigned __int8 *)*((void *)this + 6);
  if (v1 == v2) {
    return 0;
  }
  int v3 = *v2;
  if (v3 != 10)
  {
    if (v3 == 13)
    {
      int v4 = v2 + 1;
      if (v2 + 1 != v1)
      {
        int v5 = v2[1];
        int v6 = v2 + 2;
        if (v5 == 10) {
          int v1 = v6;
        }
        else {
          int v1 = v4;
        }
      }
      goto LABEL_10;
    }
    return 0;
  }
  int v1 = v2 + 1;
LABEL_10:
  int v8 = *((_DWORD *)this + 16) + 1;
  *((_DWORD *)this + 15) = 0;
  *((_DWORD *)this + 16) = v8;
  *((void *)this + 5) = v1;
  return 1;
}

__n128 llvm::yaml::Scanner::saveSimpleKeyCandidate(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 73))
  {
    uint64_t v14 = a2;
    int v15 = a3;
    char v17 = 0;
    unint64_t v6 = *(void *)(a1 + 224);
    uint64_t v4 = a1 + 224;
    unint64_t v5 = v6;
    uint64_t v16 = *(void *)(v4 - 160);
    uint64_t v7 = *(unsigned int *)(v4 + 8);
    int v8 = (__n128 *)&v14;
    if (v7 >= *(_DWORD *)(v4 + 12))
    {
      unint64_t v11 = v7 + 1;
      BOOL v12 = v5 + 24 * v7 > (unint64_t)&v14;
      if (v5 <= (unint64_t)&v14 && v12)
      {
        int v13 = (char *)&v14 - v5;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 240), v11, 24);
        unint64_t v5 = *(void *)(a1 + 224);
        int v8 = (__n128 *)&v13[v5];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 240), v11, 24);
        unint64_t v5 = *(void *)(a1 + 224);
        int v8 = (__n128 *)&v14;
      }
    }
    unsigned __int8 v9 = (__n128 *)(v5 + 24 * *(unsigned int *)(a1 + 232));
    __n128 result = *v8;
    v9[1].n128_u64[0] = v8[1].n128_u64[0];
    *unsigned __int8 v9 = result;
    ++*(_DWORD *)(a1 + 232);
  }
  return result;
}

unint64_t llvm::yaml::Scanner::unrollIndent(unint64_t this, int a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (!*(_DWORD *)(this + 68))
  {
    unint64_t v3 = this;
    if (*(_DWORD *)(this + 56) > a2)
    {
      do
      {
        LODWORD(v6) = 8;
        *((void *)&v6 + 1) = *(void *)(v3 + 40);
        uint64_t v7 = 1;
        this = llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>(v3 + 80, &v6);
        uint64_t v4 = *(void *)(v3 + 176);
        *(void *)this = v4;
        *(void *)(this + 8) = v3 + 176;
        *(void *)(v4 + 8) = this;
        *(void *)(v3 + 176) = this;
        uint64_t v5 = *(unsigned int *)(v3 + 200);
        LODWORD(v4) = *(_DWORD *)(*(void *)(v3 + 192) + 4 * v5 - 4);
        *(_DWORD *)(v3 + 200) = v5 - 1;
        *(_DWORD *)(v3 + 56) = v4;
      }
      while ((int)v4 > a2);
    }
  }
  return this;
}

unint64_t llvm::yaml::Scanner::rollIndent(unint64_t result, int a2, int a3, unint64_t *a4)
{
  if (!*(_DWORD *)(result + 68))
  {
    unint64_t v5 = result;
    int v6 = *(_DWORD *)(result + 56);
    if (v6 < a2)
    {
      llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)(result + 192), v6);
      *(_DWORD *)(v5 + 56) = a2;
      LODWORD(v10[0]) = a3;
      *((void *)&v10[0] + 1) = *(void *)(v5 + 40);
      memset(&v10[1], 0, 32);
      __n128 result = llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>(v5 + 80, v10);
      unint64_t v9 = *a4;
      *(void *)__n128 result = *a4;
      *(void *)(result + 8) = a4;
      *(void *)(v9 + 8) = result;
      *a4 = result;
    }
  }
  return result;
}

const char *llvm::yaml::Scanner::skipComment(const char *this)
{
  char v2 = (char *)*((void *)this + 5);
  int v1 = (const char *)*((void *)this + 6);
  if (v2 != v1 && *v2 == 35)
  {
    unint64_t v3 = this;
    this = llvm::yaml::Scanner::skip_nb_char(*((const char **)this + 6), v2);
    if (this != v2)
    {
      uint64_t v4 = (char *)this;
      int v5 = *((_DWORD *)v3 + 15) + 1;
      do
      {
        *((void *)v3 + 5) = v4;
        *((_DWORD *)v3 + 15) = v5;
        this = llvm::yaml::Scanner::skip_nb_char(v1, v4);
        ++v5;
        BOOL v6 = this == v4;
        uint64_t v4 = (char *)this;
      }
      while (!v6);
    }
  }
  return this;
}

void *llvm::yaml::Scanner::scanDocumentIndicator(llvm::yaml::Scanner *this, int a2)
{
  llvm::yaml::Scanner::unrollIndent((unint64_t)this, -1);
  *((_DWORD *)this + 58) = 0;
  *((unsigned char *)this + 73) = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (a2) {
    int v4 = 5;
  }
  else {
    int v4 = 6;
  }
  LODWORD(v8) = v4;
  *((void *)&v8 + 1) = *((void *)this + 5);
  uint64_t v9 = 3;
  *((void *)this + 5) = *((void *)&v8 + 1) + 3;
  *((_DWORD *)this + 15) += 3;
  __n128 result = (void *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v8);
  uint64_t v7 = *((void *)this + 22);
  BOOL v6 = (void *)((char *)this + 176);
  *__n128 result = v7;
  result[1] = v6;
  *(void *)(v7 + 8) = result;
  *BOOL v6 = result;
  return result;
}

void llvm::yaml::Scanner::scanFlowCollectionStart(llvm::yaml::Scanner *this, int a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (a2) {
    int v3 = 12;
  }
  else {
    int v3 = 14;
  }
  LODWORD(v6) = v3;
  *((void *)&v6 + 1) = *((void *)this + 5);
  uint64_t v7 = 1;
  *((void *)this + 5) = *((void *)&v6 + 1) + 1;
  ++*((_DWORD *)this + 15);
  int v4 = (void *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v6);
  uint64_t v5 = *((void *)this + 22);
  *int v4 = v5;
  v4[1] = (char *)this + 176;
  *(void *)(v5 + 8) = v4;
  *((void *)this + 22) = v4;
  llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v4, *((_DWORD *)this + 15) - 1);
  *((unsigned char *)this + 73) = 1;
  ++*((_DWORD *)this + 17);
}

void *llvm::yaml::Scanner::scanFlowCollectionEnd(llvm::yaml::Scanner *this, int a2)
{
  unsigned int v3 = *((_DWORD *)this + 58);
  if (v3 && *(_DWORD *)(*((void *)this + 28) + 24 * v3 - 8) == *((_DWORD *)this + 17)) {
    *((_DWORD *)this + 58) = v3 - 1;
  }
  *((unsigned char *)this + 73) = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (a2) {
    int v4 = 13;
  }
  else {
    int v4 = 15;
  }
  LODWORD(v8) = v4;
  *((void *)&v8 + 1) = *((void *)this + 5);
  uint64_t v9 = 1;
  *((void *)this + 5) = *((void *)&v8 + 1) + 1;
  ++*((_DWORD *)this + 15);
  __n128 result = (void *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v8);
  uint64_t v6 = *((void *)this + 22);
  *__n128 result = v6;
  result[1] = (char *)this + 176;
  *(void *)(v6 + 8) = result;
  *((void *)this + 22) = result;
  int v7 = *((_DWORD *)this + 17);
  if (v7) {
    *((_DWORD *)this + 17) = v7 - 1;
  }
  return result;
}

void *llvm::yaml::Scanner::scanFlowEntry(llvm::yaml::Scanner *this)
{
  unsigned int v2 = *((_DWORD *)this + 58);
  if (v2 && *(_DWORD *)(*((void *)this + 28) + 24 * v2 - 8) == *((_DWORD *)this + 17)) {
    *((_DWORD *)this + 58) = v2 - 1;
  }
  *((unsigned char *)this + 73) = 1;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  LODWORD(v6) = 11;
  *((void *)&v6 + 1) = *((void *)this + 5);
  uint64_t v7 = 1;
  *((void *)this + 5) = *((void *)&v6 + 1) + 1;
  ++*((_DWORD *)this + 15);
  __n128 result = (void *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v6);
  uint64_t v5 = *((void *)this + 22);
  int v4 = (void *)((char *)this + 176);
  *__n128 result = v5;
  result[1] = v4;
  *(void *)(v5 + 8) = result;
  *int v4 = result;
  return result;
}

void *llvm::yaml::Scanner::scanBlockEntry(llvm::yaml::Scanner *this)
{
  unsigned int v2 = (char *)this + 176;
  llvm::yaml::Scanner::rollIndent((unint64_t)this, *((_DWORD *)this + 15), 9, (unint64_t *)this + 22);
  unsigned int v3 = *((_DWORD *)this + 58);
  if (v3 && *(_DWORD *)(*((void *)this + 28) + 24 * v3 - 8) == *((_DWORD *)this + 17)) {
    *((_DWORD *)this + 58) = v3 - 1;
  }
  *((unsigned char *)this + 73) = 1;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  LODWORD(v6) = 7;
  *((void *)&v6 + 1) = *((void *)this + 5);
  uint64_t v7 = 1;
  *((void *)this + 5) = *((void *)&v6 + 1) + 1;
  ++*((_DWORD *)this + 15);
  __n128 result = (void *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v6);
  uint64_t v5 = *((void *)this + 22);
  *__n128 result = v5;
  result[1] = v2;
  *(void *)(v5 + 8) = result;
  *((void *)this + 22) = result;
  return result;
}

void *llvm::yaml::Scanner::scanKey(llvm::yaml::Scanner *this)
{
  int v2 = *((_DWORD *)this + 17);
  if (!v2)
  {
    llvm::yaml::Scanner::rollIndent((unint64_t)this, *((_DWORD *)this + 15), 10, (unint64_t *)this + 22);
    int v2 = *((_DWORD *)this + 17);
  }
  unsigned int v3 = *((_DWORD *)this + 58);
  if (v3 && *(_DWORD *)(*((void *)this + 28) + 24 * v3 - 8) == v2) {
    *((_DWORD *)this + 58) = v3 - 1;
  }
  *((unsigned char *)this + 73) = v2 == 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  LODWORD(v7) = 16;
  *((void *)&v7 + 1) = *((void *)this + 5);
  uint64_t v8 = 1;
  *((void *)this + 5) = *((void *)&v7 + 1) + 1;
  ++*((_DWORD *)this + 15);
  __n128 result = (void *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v7);
  uint64_t v6 = *((void *)this + 22);
  uint64_t v5 = (void *)((char *)this + 176);
  *__n128 result = v6;
  result[1] = v5;
  *(void *)(v6 + 8) = result;
  void *v5 = result;
  return result;
}

uint64_t llvm::yaml::Scanner::scanValue(llvm::yaml::Scanner *this)
{
  unsigned int v2 = *((_DWORD *)this + 58);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 28) + 24 * v2;
    uint64_t v4 = *(void *)(v3 - 24);
    int v5 = *(_DWORD *)(v3 - 16);
    *((_DWORD *)this + 58) = v2 - 1;
    int v18 = 16;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    long long v19 = *(_OWORD *)(v4 + 24);
    uint64_t v6 = (unint64_t **)((char *)this + 184);
    long long v7 = (unint64_t *)((char *)this + 176);
    do
    {
      uint64_t v8 = *v6;
      uint64_t v6 = (unint64_t **)(*v6 + 1);
    }
    while (v8 != v7 && v8 != (unint64_t *)v4);
    if (v8 == v7)
    {
      uint64_t v13 = 0;
      *((unsigned char *)this + 74) = 1;
      return v13;
    }
    uint64_t v10 = (unint64_t *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, (long long *)&v18);
    unint64_t v11 = *v8;
    *uint64_t v10 = *v8;
    v10[1] = (unint64_t)v8;
    *(void *)(v11 + 8) = v10;
    *uint64_t v8 = (unint64_t)v10;
    llvm::yaml::Scanner::rollIndent((unint64_t)this, v5, 10, v10);
    *((unsigned char *)this + 73) = 0;
  }
  else
  {
    int v12 = *((_DWORD *)this + 17);
    if (!v12)
    {
      llvm::yaml::Scanner::rollIndent((unint64_t)this, *((_DWORD *)this + 15), 10, (unint64_t *)this + 22);
      int v12 = *((_DWORD *)this + 17);
    }
    *((unsigned char *)this + 73) = v12 == 0;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v18 = 17;
  uint64_t v13 = 1;
  *(void *)&long long v19 = *((void *)this + 5);
  *((void *)&v19 + 1) = 1;
  *((void *)this + 5) = v19 + 1;
  ++*((_DWORD *)this + 15);
  uint64_t v14 = (void *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, (long long *)&v18);
  uint64_t v16 = *((void *)this + 22);
  int v15 = (void *)((char *)this + 176);
  *uint64_t v14 = v16;
  v14[1] = v15;
  *(void *)(v16 + 8) = v14;
  *int v15 = v14;
  return v13;
}

uint64_t llvm::yaml::Scanner::scanFlowScalar(std::error_category *this, int a2)
{
  uint64_t v3 = this[5].__vftable;
  int v4 = HIDWORD(this[7].__vftable);
  if (a2)
  {
    int v5 = (char *)this[6].__vftable;
    for (int i = (char *)&v3->~error_category + 1; ; ++i)
    {
      this[5].__vftable = (std::error_category_vtbl *)i;
      if (i == v5) {
        break;
      }
      if (*i == 34 && (*(i - 1) != 92 || !wasEscaped((const char *)&v3->~error_category + 1, i)))
      {
        int v7 = v4;
        goto LABEL_28;
      }
    }
    goto LABEL_31;
  }
  int i = (char *)&v3->~error_category + 1;
  this[5].__vftable = (std::error_category_vtbl *)((char *)&v3->~error_category + 1);
  int v7 = v4 + 1;
  HIDWORD(this[7].__vftable) = v4 + 1;
  int v5 = (char *)this[6].__vftable;
  if ((char *)&v3->~error_category + 1 == v5)
  {
    int v5 = (char *)&v3->~error_category + 1;
    goto LABEL_31;
  }
  while (1)
  {
    uint64_t v8 = i + 1;
    int v9 = *i;
    if (i + 1 >= v5)
    {
      if (v9 == 39) {
        goto LABEL_28;
      }
    }
    else if (v9 == 39)
    {
      if (*v8 != 39) {
        goto LABEL_28;
      }
      i += 2;
      this[5].__vftable = (std::error_category_vtbl *)i;
      v7 += 2;
      HIDWORD(this[7].__vftable) = v7;
      goto LABEL_25;
    }
    uint64_t v10 = llvm::yaml::Scanner::skip_nb_char(v5, i);
    if (v10 == i) {
      break;
    }
    if (v10 == v5) {
      goto LABEL_28;
    }
    this[5].__vftable = (std::error_category_vtbl *)v10;
    HIDWORD(this[7].__vftable) = ++v7;
    int i = (char *)v10;
LABEL_25:
    if (i == v5) {
      goto LABEL_31;
    }
  }
  if (v9 == 10)
  {
LABEL_24:
    int v7 = 0;
    this[5].__vftable = (std::error_category_vtbl *)v8;
    int v11 = LODWORD(this[8].__vftable) + 1;
    HIDWORD(this[7].__vftable) = 0;
    LODWORD(this[8].__vftable) = v11;
    int i = v8;
    goto LABEL_25;
  }
  if (v9 == 13)
  {
    if (v8 == v5)
    {
      uint64_t v8 = v5;
      if (v5 == i) {
        goto LABEL_31;
      }
    }
    else if (i[1] == 10)
    {
      uint64_t v8 = i + 2;
    }
    goto LABEL_24;
  }
LABEL_28:
  if (i != v5)
  {
    this[5].__vftable = (std::error_category_vtbl *)(i + 1);
    HIDWORD(this[7].__vftable) = v7 + 1;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    LODWORD(v15) = 18;
    *((void *)&v15 + 1) = v3;
    uint64_t v16 = (unsigned __int8 *)(i + 1 - (char *)v3);
    int v12 = (std::error_category_vtbl *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)&this[10], &v15);
    uint64_t v13 = this[22].__vftable;
    v12->~error_category = (void (__cdecl *)(std::error_category *__hidden))v13;
    v12->~error_category_0 = (void (__cdecl *)(std::error_category *__hidden))&this[22];
    v13->~error_category_0 = (void (__cdecl *)(std::error_category *__hidden))v12;
    this[22].__vftable = v12;
    llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v12, v4);
    BYTE1(this[9].__vftable) = 0;
    return 1;
  }
LABEL_31:
  *(void *)&long long v15 = "Expected quote at end of scalar";
  LOWORD(v18) = 259;
  llvm::yaml::Scanner::setError(this, (const llvm::Twine *)&v15, v5);
  return 0;
}

BOOL wasEscaped(const char *a1, const char *a2)
{
  for (int i = a2 - 1; i >= a1; --i)
  {
    if (*i != 92) {
      break;
    }
  }
  return ((a2 - 1 - i) & 0x8000000000000001) == 1;
}

uint64_t llvm::yaml::Scanner::scanPlainScalar(llvm::yaml::Scanner *this)
{
  unsigned int v2 = (char *)*((void *)this + 5);
  uint64_t v3 = (const char *)*((void *)this + 6);
  if (v2 == v3) {
    goto LABEL_61;
  }
  int v4 = 0;
  unsigned int v5 = *((_DWORD *)this + 15);
  unsigned int v6 = *((_DWORD *)this + 14) + 1;
  int v31 = v5;
  int v7 = (char *)*((void *)this + 5);
LABEL_3:
  unsigned int v8 = *v7;
  if (v8 != 35)
  {
    int v9 = v7;
    if (v7 == v3) {
      goto LABEL_58;
    }
    while (1)
    {
      if (v8 <= 0x20 && ((1 << v8) & 0x100002600) != 0)
      {
LABEL_28:
        unsigned int v19 = *v9;
        BOOL v12 = v19 > 0x20;
        uint64_t v20 = (1 << v19) & 0x100002600;
        if (v12 || v20 == 0) {
          goto LABEL_59;
        }
        int v7 = v9;
        while (2)
        {
          unsigned int v22 = *v7;
          if (v22 > 0xC)
          {
            if (v22 == 13)
            {
              unsigned int v23 = (char *)v3;
              if (v7 + 1 != v3)
              {
                if (v7[1] == 10) {
                  unsigned int v23 = v7 + 2;
                }
                else {
                  unsigned int v23 = v7 + 1;
                }
              }
              goto LABEL_52;
            }
            if (v22 != 32) {
              goto LABEL_55;
            }
LABEL_39:
            if (v22 == 9 && v4 != 0 && v5 < v6)
            {
              *(void *)&long long v32 = "Found invalid tab character in indentation";
              LOWORD(v35) = 259;
              long long v30 = (std::error_category *)this;
              goto LABEL_62;
            }
            unsigned int v23 = v7 + 1;
            *((_DWORD *)this + 15) = ++v5;
            goto LABEL_53;
          }
          if (v22 == 9) {
            goto LABEL_39;
          }
          if (v22 != 10) {
            goto LABEL_55;
          }
          unsigned int v23 = v7 + 1;
LABEL_52:
          unsigned int v5 = 0;
          int v26 = *((_DWORD *)this + 16) + 1;
          *((_DWORD *)this + 15) = 0;
          *((_DWORD *)this + 16) = v26;
          int v4 = 1;
LABEL_53:
          int v7 = v23;
          if (v3 != v23) {
            continue;
          }
          break;
        }
        int v7 = (char *)v3;
LABEL_55:
        if (!*((_DWORD *)this + 17) && v5 < v6) {
          goto LABEL_59;
        }
        *((void *)this + 5) = v7;
        if (v7 == v3)
        {
LABEL_58:
          int v9 = (char *)v3;
          goto LABEL_59;
        }
        goto LABEL_3;
      }
      int v10 = *((_DWORD *)this + 17);
      if (v10)
      {
        if (v8 != 58) {
          goto LABEL_24;
        }
        if (v9 + 1 == v3
          || ((unsigned int v11 = v9[1], v12 = v11 > 0x2C, v13 = (1 << v11) & 0x100100002600, !v12)
            ? (BOOL v14 = v13 == 0)
            : (BOOL v14 = 1),
              v14))
        {
          *(void *)&long long v32 = "Found unexpected ':' while scanning a plain scalar";
          LOWORD(v35) = 259;
          long long v30 = (std::error_category *)this;
          int v7 = v9;
          goto LABEL_62;
        }
      }
      else if (v8 != 58)
      {
        goto LABEL_25;
      }
      if (v3 != v9 + 1)
      {
        unsigned int v15 = v9[1];
        BOOL v12 = v15 > 0x20;
        uint64_t v16 = (1 << v15) & 0x100002600;
        if (!v12 && v16 != 0) {
          goto LABEL_28;
        }
      }
      if (v10)
      {
LABEL_24:
        *(void *)&long long v32 = v9;
        *((void *)&v32 + 1) = 1;
        if (llvm::StringRef::find_first_of(&v32, ",:?[]{}", 7, 0) != -1) {
          goto LABEL_28;
        }
      }
LABEL_25:
      uint64_t v18 = llvm::yaml::Scanner::skip_nb_char(v3, v9);
      if (v18 == v9) {
        goto LABEL_28;
      }
      *((void *)this + 5) = v18;
      *((_DWORD *)this + 15) = ++v5;
      if (v18 == v3) {
        goto LABEL_58;
      }
      unsigned int v8 = *(unsigned __int8 *)v18;
      int v9 = (char *)v18;
    }
  }
  int v9 = v7;
LABEL_59:
  if (v2 != v9)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    LODWORD(v32) = 18;
    *((void *)&v32 + 1) = v2;
    unsigned int v33 = (unsigned __int8 *)(v9 - v2);
    long long v27 = (void *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v32);
    uint64_t v28 = *((void *)this + 22);
    *long long v27 = v28;
    v27[1] = (char *)this + 176;
    *(void *)(v28 + 8) = v27;
    *((void *)this + 22) = v27;
    llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v27, v31);
    *((unsigned char *)this + 73) = 0;
    return 1;
  }
LABEL_61:
  *(void *)&long long v32 = "Got empty plain scalar";
  LOWORD(v35) = 259;
  long long v30 = (std::error_category *)this;
  int v7 = v2;
LABEL_62:
  llvm::yaml::Scanner::setError(v30, (const llvm::Twine *)&v32, v7);
  return 0;
}

uint64_t llvm::yaml::Scanner::scanAliasOrAnchor(llvm::yaml::Scanner *this, int a2)
{
  int v3 = *((_DWORD *)this + 15);
  int v4 = (char *)*((void *)this + 5);
  unsigned int v5 = (const char *)*((void *)this + 6);
  *((void *)this + 5) = v4 + 1;
  *((_DWORD *)this + 15) = v3 + 1;
  if (v4 + 1 == v5) {
    goto LABEL_21;
  }
  int v6 = v3 + 2;
  int v7 = v4 + 1;
  while (1)
  {
    unsigned int v8 = *v7;
    if (v8 <= 0x3A && ((1 << v8) & 0x400100100000200) != 0) {
      break;
    }
    unsigned int v10 = v8 - 91;
    BOOL v11 = v10 > 0x22;
    uint64_t v12 = (1 << v10) & 0x500000005;
    if (!v11 && v12 != 0) {
      break;
    }
    BOOL v14 = llvm::yaml::Scanner::skip_nb_char(v5, v7);
    if (v14 == v7) {
      break;
    }
    *((void *)this + 5) = v14;
    *((_DWORD *)this + 15) = v6++;
    int v7 = (char *)v14;
    if (v14 == v5)
    {
      int v7 = (char *)v5;
      break;
    }
  }
  if (v4 + 1 == v7)
  {
LABEL_21:
    *(void *)&long long v20 = "Got empty alias or anchor";
    LOWORD(v23) = 259;
    llvm::yaml::Scanner::setError((std::error_category *)this, (const llvm::Twine *)&v20, v4);
    return 0;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    if (a2) {
      int v15 = 20;
    }
    else {
      int v15 = 21;
    }
    LODWORD(v20) = v15;
    *((void *)&v20 + 1) = v4;
    int64_t v21 = v7 - v4;
    uint64_t v16 = (void *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v20);
    uint64_t v17 = *((void *)this + 22);
    *uint64_t v16 = v17;
    v16[1] = (char *)this + 176;
    *(void *)(v17 + 8) = v16;
    *((void *)this + 22) = v16;
    llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v16, v3);
    *((unsigned char *)this + 73) = 0;
    return 1;
  }
}

uint64_t llvm::yaml::Scanner::scanBlockScalar(std::error_category *this)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  int v3 = this[5].__vftable;
  unsigned int v2 = (unsigned __int8 *)this[6].__vftable;
  if (v3 != (std::error_category_vtbl *)v2 && ((int v4 = LOBYTE(v3->~error_category), v4 == 124) || v4 == 62))
  {
    int v3 = (std::error_category_vtbl *)((char *)v3 + 1);
    this[5].__vftable = v3;
    ++HIDWORD(this[7].__vftable);
  }
  else
  {
    int v4 = 32;
  }
  if (v3 == (std::error_category_vtbl *)v2)
  {
    unsigned int v7 = 0;
    goto LABEL_22;
  }
  int v5 = LOBYTE(v3->~error_category);
  if (v5 == 45 || v5 == 43)
  {
    int v6 = (unsigned __int8 *)&v3->~error_category + 1;
    this[5].__vftable = (std::error_category_vtbl *)((char *)&v3->~error_category + 1);
    ++HIDWORD(this[7].__vftable);
  }
  else
  {
    int v5 = 32;
    int v6 = (unsigned __int8 *)v3;
  }
  if (v6 == v2)
  {
    unsigned int v7 = 0;
    int v6 = v2;
  }
  else
  {
    int v8 = *v6;
    if ((v8 - 49) > 8)
    {
      unsigned int v7 = 0;
    }
    else
    {
      unsigned int v7 = v8 - 48;
      this[5].__vftable = (std::error_category_vtbl *)++v6;
      ++HIDWORD(this[7].__vftable);
    }
  }
  if (v5 == 32)
  {
    if (v6 != v2)
    {
      int v5 = *v6;
      if (v5 == 45 || v5 == 43)
      {
        this[5].__vftable = (std::error_category_vtbl *)++v6;
        ++HIDWORD(this[7].__vftable);
      }
      else
      {
        int v5 = 32;
      }
      goto LABEL_24;
    }
LABEL_22:
    int v5 = 32;
    goto LABEL_31;
  }
LABEL_24:
  if (v2 != v6)
  {
    while (1)
    {
      int v9 = *v6;
      BOOL v10 = v9 == 32 || v9 == 9;
      if (!v10) {
        break;
      }
      if (++v6 == v2) {
        goto LABEL_31;
      }
    }
    unsigned int v2 = v6;
  }
LABEL_31:
  this[5].__vftable = (std::error_category_vtbl *)v2;
  llvm::yaml::Scanner::skipComment((const char *)this);
  BOOL v11 = this[5].__vftable;
  if (v11 == this[6].__vftable)
  {
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    LODWORD(v60) = 19;
    *(void *)&long long v61 = v3;
    *((void *)&v61 + 1) = (char *)v11 - (char *)v3;
    int v31 = (void (__cdecl *)(std::error_category *__hidden))llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)&this[10], (long long *)&v60);
    unsigned int v33 = this[22].__vftable;
    long long v32 = this + 22;
    *(void *)int v31 = v33;
    *((void *)v31 + 1) = v32;
    v33->~error_category_0 = v31;
    v32->__vftable = (std::error_category_vtbl *)v31;
    return 1;
  }
  else if (llvm::yaml::Scanner::consumeLineBreakIfPresent((llvm::yaml::Scanner *)this))
  {
    uint64_t v12 = (char *)this[5].__vftable;
    unsigned int v54 = (uint64_t)this[7].__vftable & ~(SLODWORD(this[7].__vftable) >> 31);
    int v52 = v12;
    if (v7)
    {
      int v53 = v4;
      unsigned int v13 = 0;
    }
    else
    {
      unsigned int v13 = 0;
      BOOL v38 = 0;
      unsigned int v39 = 0;
      for (int i = this[5].__vftable; ; int i = this[5].__vftable)
      {
        int v41 = (const char *)this[6].__vftable;
        unsigned int v42 = (char *)i;
        while (1)
        {
          unsigned int v43 = v42;
          if (v42 == v41) {
            break;
          }
          ++v42;
          if (*v43 != 32)
          {
            uint64_t v12 = v43;
            goto LABEL_84;
          }
        }
        uint64_t v12 = (char *)this[6].__vftable;
LABEL_84:
        unsigned int v7 = HIDWORD(this[7].__vftable) + v12 - i;
        HIDWORD(this[7].__vftable) = v7;
        this[5].__vftable = (std::error_category_vtbl *)v12;
        if (llvm::yaml::Scanner::skip_nb_char(v41, v12) != v12) {
          break;
        }
        if (v43 == v41) {
          goto LABEL_95;
        }
        int v44 = *v12;
        if ((v44 == 13 || v44 == 10) && v7 > v39)
        {
          BOOL v38 = v12;
          unsigned int v39 = v7;
        }
        if (!llvm::yaml::Scanner::consumeLineBreakIfPresent((llvm::yaml::Scanner *)this)) {
          goto LABEL_95;
        }
        ++v13;
      }
      if (v7 <= v54)
      {
LABEL_95:
        uint64_t v60 = &v62;
        long long v61 = xmmword_261E8A780;
        unint64_t v37 = v52;
        goto LABEL_96;
      }
      if (v39 > v7)
      {
        uint64_t v60 = "Leading all-spaces line must be smaller than the block indent";
        LOWORD(v63) = 259;
        uint64_t v36 = this;
        uint64_t v35 = v38;
        goto LABEL_75;
      }
      int v53 = v4;
    }
    uint64_t v60 = &v62;
    long long v61 = xmmword_261E8A780;
    while (1)
    {
      unsigned int v14 = HIDWORD(this[7].__vftable);
      int v15 = (const char *)this[6].__vftable;
      if (v14 < v7)
      {
        while (v12 != v15)
        {
          if (*v12 != 32) {
            goto LABEL_42;
          }
          this[5].__vftable = (std::error_category_vtbl *)++v12;
          HIDWORD(this[7].__vftable) = ++v14;
          if (v7 == v14)
          {
            unsigned int v14 = v7;
            goto LABEL_42;
          }
        }
        uint64_t v12 = (char *)v15;
      }
LABEL_42:
      uint64_t v16 = llvm::yaml::Scanner::skip_nb_char(v15, v12);
      uint64_t v17 = v12;
      if (v16 != v12)
      {
        if (v14 <= v54) {
          goto LABEL_76;
        }
        uint64_t v17 = v12;
        if (v14 < v7) {
          break;
        }
      }
      do
      {
        uint64_t v18 = v17;
        uint64_t v17 = (char *)llvm::yaml::Scanner::skip_nb_char(v15, v17);
      }
      while (v17 != v18);
      this[5].__vftable = (std::error_category_vtbl *)v18;
      int64_t v19 = v18 - v12;
      HIDWORD(this[7].__vftable) = v14 + v18 - v12;
      if (v18 != v12)
      {
        if (v53 == 62)
        {
          if (v13)
          {
            uint64_t v20 = v61;
            if ((void)v61)
            {
              int64_t v21 = (const char *)v60;
              while (v21 != v15)
              {
                unsigned int v22 = *(unsigned __int8 *)v21;
                BOOL v23 = v22 > 0x20;
                uint64_t v24 = (1 << v22) & 0x100002600;
                if (v23 || v24 == 0) {
                  break;
                }
                ++v21;
                if (!--v20) {
                  goto LABEL_69;
                }
              }
              if (!--v13)
              {
                int v26 = v12;
                while (v26 != v15)
                {
                  unsigned int v27 = *v26;
                  BOOL v23 = v27 > 0x20;
                  uint64_t v28 = (1 << v27) & 0x100002600;
                  if (v23 || v28 == 0) {
                    break;
                  }
                  ++v26;
                  if (!--v19)
                  {
                    int v30 = 10;
                    goto LABEL_68;
                  }
                }
                int v30 = 32;
LABEL_68:
                llvm::SmallVectorImpl<char>::append(&v60, 1uLL, v30);
              }
            }
          }
        }
LABEL_69:
        llvm::SmallVectorImpl<char>::append(&v60, v13, 10);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v60, v12, this[5].__vftable);
        unsigned int v13 = 0;
        uint64_t v12 = (char *)this[5].__vftable;
        int v15 = (const char *)this[6].__vftable;
      }
      if (v12 == v15 || !llvm::yaml::Scanner::consumeLineBreakIfPresent((llvm::yaml::Scanner *)this))
      {
LABEL_76:
        unint64_t v37 = v52;
        goto LABEL_96;
      }
      ++v13;
      uint64_t v12 = (char *)this[5].__vftable;
    }
    BOOL v10 = v12 == v15;
    unint64_t v37 = v52;
    if (!v10 && *v12 == 35)
    {
LABEL_96:
      if (v5 == 45)
      {
        BOOL v46 = 0;
      }
      else if (v5 == 43)
      {
        if (v13) {
          BOOL v45 = 0;
        }
        else {
          BOOL v45 = this[5].__vftable == this[6].__vftable;
        }
        if (v45) {
          BOOL v46 = 1;
        }
        else {
          BOOL v46 = v13;
        }
      }
      else
      {
        BOOL v46 = (void)v61 != 0;
      }
      llvm::SmallVectorImpl<char>::append(&v60, v46, 10);
      if (!HIDWORD(this[8].__vftable)) {
        BYTE1(this[9].__vftable) = 1;
      }
      std::string __p = 0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      LODWORD(v55) = 19;
      long long v47 = (char *)((char *)this[5].__vftable - v37);
      *((void *)&v55 + 1) = v37;
      unsigned int v56 = v47;
      std::string::basic_string[abi:nn180100](&__p, v60, v61);
      uint64_t v48 = (void (__cdecl *)(std::error_category *__hidden))llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)&this[10], &v55);
      int v50 = this[22].__vftable;
      size_t v49 = this + 22;
      *(void *)uint64_t v48 = v50;
      *((void *)v48 + 1) = v49;
      v50->~error_category_0 = v48;
      v49->__vftable = (std::error_category_vtbl *)v48;
      if (SHIBYTE(v59) < 0) {
        operator delete(__p);
      }
      uint64_t v34 = 1;
    }
    else
    {
      *(void *)&long long v55 = "A text line is less indented than the block scalar";
      LOWORD(v58) = 259;
      llvm::yaml::Scanner::setError(this, (const llvm::Twine *)&v55, v12);
      uint64_t v34 = 0;
    }
    if (v60 != &v62) {
      free(v60);
    }
  }
  else
  {
    uint64_t v60 = "Expected a line break after block scalar header";
    LOWORD(v63) = 259;
    uint64_t v35 = (char *)this[5].__vftable;
    uint64_t v36 = this;
LABEL_75:
    llvm::yaml::Scanner::setError(v36, (const llvm::Twine *)&v60, v35);
    return 0;
  }
  return v34;
}

uint64_t llvm::yaml::Scanner::scanTag(llvm::yaml::Scanner *this)
{
  int v2 = *((_DWORD *)this + 15);
  uint64_t v4 = *((void *)this + 5);
  int v3 = (const char *)*((void *)this + 6);
  int v5 = (char *)(v4 + 1);
  *((void *)this + 5) = v4 + 1;
  *((_DWORD *)this + 15) = v2 + 1;
  if ((const char *)(v4 + 1) == v3) {
    goto LABEL_4;
  }
  uint64_t v6 = *v5;
  if (v6 > 0x3C) {
    goto LABEL_31;
  }
  if (((1 << v6) & 0x100002600) != 0) {
    goto LABEL_4;
  }
  if (v6 != 60)
  {
LABEL_31:
    while (v3 != v5)
    {
      uint64_t v20 = v5;
      int v21 = *v5;
      if (v21 != 9 && v21 != 32)
      {
        int v5 = (char *)llvm::yaml::Scanner::skip_nb_char(v3, v5);
        if (v5 != v20) {
          continue;
        }
      }
      goto LABEL_39;
    }
    uint64_t v20 = (char *)v3;
LABEL_39:
    *((void *)this + 5) = v20;
    int v5 = v20;
    goto LABEL_4;
  }
  *((void *)this + 5) = v4 + 2;
  *((_DWORD *)this + 15) = v2 + 2;
  if ((const char *)(v4 + 2) != v3)
  {
    int v10 = v2 + 3;
    BOOL v11 = (unsigned __int8 *)(v4 + 4);
    do
    {
      int v12 = *(v11 - 2);
      BOOL v13 = v12 != 37 || v11 >= (unsigned __int8 *)v3;
      if (v13
        || ((int v16 = *(v11 - 1), (v16 - 48) >= 0xA) ? (v17 = (v16 & 0xFFFFFFDF) - 65 > 0x19) : (v17 = 0),
            v17
         || ((int v18 = *v11, (v18 - 48) >= 0xA) ? (v19 = (v18 & 0xFFFFFFDF) - 65 >= 0x1A) : (v19 = 0), v19)))
      {
        if (v12 != 45 && (v12 & 0xFFFFFFDF) - 65 >= 0x1A)
        {
          *(void *)&long long v22 = v11 - 2;
          *((void *)&v22 + 1) = 1;
          if (llvm::StringRef::find_first_of(&v22, "#;/?:@&=+$,_.!~*'()[]", 21, 0) == -1) {
            break;
          }
        }
      }
      int v15 = (const char *)(v11 - 1);
      *((void *)this + 5) = v11 - 1;
      *((_DWORD *)this + 15) = v10++;
      ++v11;
    }
    while (v15 != v3);
  }
  uint64_t result = llvm::yaml::Scanner::consume((std::error_category *)this, 62);
  if (result)
  {
    int v5 = (char *)*((void *)this + 5);
LABEL_4:
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    LODWORD(v22) = 22;
    *((void *)&v22 + 1) = v4;
    BOOL v23 = &v5[-v4];
    unsigned int v7 = (void *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v22);
    uint64_t v8 = *((void *)this + 22);
    *unsigned int v7 = v8;
    v7[1] = (char *)this + 176;
    *(void *)(v8 + 8) = v7;
    *((void *)this + 22) = v7;
    llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v7, v2);
    *((unsigned char *)this + 73) = 0;
    return 1;
  }
  return result;
}

void llvm::yaml::Stream::~Stream(llvm::yaml::Stream *this)
{
  uint64_t v4 = *((void *)this + 1);
  int v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<llvm::yaml::Document>::operator()[abi:nn180100]((uint64_t)v2, v3);
  }
  uint64_t v5 = *(void *)this;
  *(void *)this = 0;
  if (v5) {
    std::default_delete<llvm::yaml::Scanner>::operator()[abi:nn180100]((uint64_t)this, v5);
  }
}

void llvm::yaml::Stream::printError(llvm *a1, uint64_t a2, llvm::Twine *a3, int a4)
{
  if (a2)
  {
    long long v11 = *(_OWORD *)(a2 + 16);
    uint64_t v6 = (char *)v11;
  }
  else
  {
    uint64_t v6 = 0;
    long long v11 = 0uLL;
  }
  unsigned int v7 = **(uint64_t ***)a1;
  unsigned __int8 v8 = *(unsigned char *)(*(void *)a1 + 75);
  int v9 = (llvm::raw_ostream *)llvm::errs(a1);
  llvm::SourceMgr::PrintMessage(v7, v9, v6, a4, a3, (unint64_t *)&v11, 1, v10, 0, 0, v8);
}

void llvm::yaml::Stream::printError(llvm *a1, unint64_t *a2, llvm::Twine *a3, int a4)
{
  unsigned int v7 = (char *)*a2;
  unsigned __int8 v8 = **(uint64_t ***)a1;
  unsigned __int8 v9 = *(unsigned char *)(*(void *)a1 + 75);
  uint64_t v10 = (llvm::raw_ostream *)llvm::errs(a1);
  llvm::SourceMgr::PrintMessage(v8, v10, v7, a4, a3, a2, 1, v11, 0, 0, v9);
}

void llvm::yaml::Stream::begin(uint64_t ***this)
{
  if (!this[1])
  {
    llvm::yaml::Scanner::getNext(*this, (uint64_t)&v1);
    if (v3 < 0) {
      operator delete(__p);
    }
    operator new();
  }
  llvm::report_fatal_error((llvm *)"Can only iterate over the stream once", (const llvm::Twine *)1);
}

unint64_t llvm::yaml::Document::skip(llvm::yaml::Document *this)
{
  if (*(unsigned char *)(**(void **)this + 74)) {
    return 0;
  }
  unint64_t result = *((void *)this + 13);
  if (result
    || (unint64_t result = llvm::yaml::Document::parseBlockNode((uint64_t ****)this), (*((void *)this + 13) = result) != 0))
  {
    (*(void (**)(unint64_t))(*(void *)result + 8))(result);
    int v3 = *(_DWORD *)llvm::yaml::Scanner::peekNext(**(uint64_t ****)this);
    if (v3 == 2) {
      return 0;
    }
    if (v3 == 6)
    {
      llvm::yaml::Scanner::getNext(**(uint64_t ****)this, (uint64_t)&v4);
      if (v6 < 0) {
        operator delete(__p);
      }
      return llvm::yaml::Document::skip(this);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

llvm::yaml::Document **llvm::yaml::document_iterator::operator++(llvm::yaml::Document ***a1)
{
  char v2 = llvm::yaml::Document::skip(**a1);
  int v3 = *a1;
  uint64_t v4 = (uint64_t)**a1;
  if (v2) {
    operator new();
  }
  *int v3 = 0;
  if (v4) {
    std::default_delete<llvm::yaml::Document>::operator()[abi:nn180100]((uint64_t)v3, v4);
  }
  return *a1;
}

std::string *llvm::yaml::Node::getVerbatimTag@<X0>(llvm::yaml::Node *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)this + 8);
  if (!v4 || (uint64_t v5 = (char *)*((void *)this + 7), v6 = v4 - 1, v4 == 1) && *v5 == 33)
  {
    switch(*((_DWORD *)this + 8))
    {
      case 0:
        unsigned int v7 = "tag:yaml.org,2002:null";
        break;
      case 1:
      case 2:
        unsigned int v7 = "tag:yaml.org,2002:str";
        break;
      case 4:
        unsigned int v7 = "tag:yaml.org,2002:map";
        break;
      case 5:
        unsigned int v7 = "tag:yaml.org,2002:seq";
        break;
      default:
        unsigned int v7 = "";
        break;
    }
    return (std::string *)std::string::basic_string[abi:nn180100]<0>((void *)a2, v7);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v8 = v4;
  *(void *)(a2 + 16) = 0;
  do
  {
    if (!v8) {
      goto LABEL_10;
    }
    unint64_t v9 = v8 - 1;
    int v10 = v5[--v8];
  }
  while (v10 != 33);
  if (!v9)
  {
    uint64_t v25 = **((void **)this + 1) + 112;
    *(void *)&long long v44 = "!";
    *((void *)&v44 + 1) = 1;
    uint64_t v26 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::find<llvm::StringRef>(v25, &v44);
    size_t v27 = *(void *)(v26 + 56);
    if (v27 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_70;
    }
    uint64_t v28 = *(const void **)(v26 + 48);
    if (v27 >= 0x17)
    {
      uint64_t v35 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17) {
        uint64_t v35 = v27 | 7;
      }
      uint64_t v36 = v35 + 1;
      p_dst = (long long *)operator new(v35 + 1);
      *((void *)&__dst + 1) = v27;
      unint64_t v41 = v36 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v41) = *(void *)(v26 + 56);
      p_dst = &__dst;
      if (!v27) {
        goto LABEL_57;
      }
    }
    memmove(p_dst, v28, v27);
LABEL_57:
    *((unsigned char *)p_dst + v27) = 0;
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v41;
    unint64_t v37 = v5 + 1;
    goto LABEL_67;
  }
LABEL_10:
  std::string::size_type v6 = v4 - 2;
  if (v4 < 2 || *(_WORD *)v5 != 8481)
  {
    unint64_t v11 = v4;
    do
    {
      unint64_t v12 = v11;
      if (!v11) {
        break;
      }
      --v11;
    }
    while (v5[v12 - 1] != 33);
    if (v4 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v4;
    }
    *(void *)&long long v44 = v5;
    *((void *)&v44 + 1) = v13;
    uint64_t v14 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::find<llvm::StringRef>(**((void **)this + 1) + 112, &v44);
    int v15 = (std::error_category ***)**((void **)this + 1);
    if (v15 + 15 == (std::error_category ***)v14)
    {
      *(void *)&long long __dst = "Unknown tag handle ";
      unint64_t v41 = (unint64_t)v5;
      unint64_t v42 = v13;
      __int16 v43 = 1283;
      llvm::yaml::Scanner::setError(**v15, (const llvm::Twine *)&__dst, v5);
LABEL_31:
      unint64_t v21 = v4;
      do
      {
        unint64_t v22 = v21;
        if (!v21) {
          break;
        }
        --v21;
      }
      while (v5[v22 - 1] != 33);
      if (v4 >= v22) {
        unint64_t v23 = v22;
      }
      else {
        unint64_t v23 = v4;
      }
      return std::string::append((std::string *)a2, &v5[v23], v4 - v23);
    }
    size_t v16 = *(void *)(v14 + 56);
    if (v16 <= 0x7FFFFFFFFFFFFFF7)
    {
      BOOL v17 = *(const void **)(v14 + 48);
      if (v16 >= 0x17)
      {
        uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v19 = v16 | 7;
        }
        uint64_t v20 = v19 + 1;
        int v18 = (long long *)operator new(v19 + 1);
        *((void *)&__dst + 1) = v16;
        unint64_t v41 = v20 | 0x8000000000000000;
        *(void *)&long long __dst = v18;
      }
      else
      {
        HIBYTE(v41) = *(void *)(v14 + 56);
        int v18 = &__dst;
        if (!v16) {
          goto LABEL_28;
        }
      }
      memmove(v18, v17, v16);
LABEL_28:
      *((unsigned char *)v18 + v16) = 0;
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(_OWORD *)a2 = __dst;
      *(void *)(a2 + 16) = v41;
      goto LABEL_31;
    }
LABEL_70:
    abort();
  }
  uint64_t v30 = **((void **)this + 1) + 112;
  *(void *)&long long v44 = "!!";
  *((void *)&v44 + 1) = 2;
  uint64_t v31 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::find<llvm::StringRef>(v30, &v44);
  size_t v32 = *(void *)(v31 + 56);
  if (v32 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_70;
  }
  unsigned int v33 = *(const void **)(v31 + 48);
  if (v32 >= 0x17)
  {
    uint64_t v38 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17) {
      uint64_t v38 = v32 | 7;
    }
    uint64_t v39 = v38 + 1;
    uint64_t v34 = (long long *)operator new(v38 + 1);
    *((void *)&__dst + 1) = v32;
    unint64_t v41 = v39 | 0x8000000000000000;
    *(void *)&long long __dst = v34;
  }
  else
  {
    HIBYTE(v41) = *(void *)(v31 + 56);
    uint64_t v34 = &__dst;
    if (!v32) {
      goto LABEL_64;
    }
  }
  memmove(v34, v33, v32);
LABEL_64:
  *((unsigned char *)v34 + v32) = 0;
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v41;
  unint64_t v37 = v5 + 2;
LABEL_67:
  return std::string::append((std::string *)a2, v37, v6);
}

unint64_t llvm::yaml::Document::parseBlockNode(uint64_t ****this)
{
  char v2 = llvm::yaml::Scanner::peekNext(**this);
  uint64_t v3 = v2[2];
  long long v85 = *(_OWORD *)v2;
  uint64_t v86 = v3;
  if (*((char *)v2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v87, (const std::string::value_type *)v2[3], v2[4]);
  }
  else
  {
    long long v4 = *(_OWORD *)(v2 + 3);
    v87.__r_.__value_.__r.__words[2] = v2[5];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  std::string __p = 0;
  char v57 = 0;
  int v7 = 0;
  int v8 = 0;
  char v9 = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  while (v85 == 21)
  {
    if (v7 == 21)
    {
      uint64_t v19 = "Already encountered an anchor for this node!";
      goto LABEL_74;
    }
    llvm::yaml::Scanner::getNext(**this, (uint64_t)&v76);
    int v7 = (int)v76;
    uint64_t v12 = v77;
    uint64_t v11 = v78;
    if (v9 < 0) {
      operator delete(v10);
    }
    int v10 = v79;
    char v9 = v81;
LABEL_10:
    unint64_t v13 = llvm::yaml::Scanner::peekNext(**this);
    uint64_t v14 = v13[2];
    long long v85 = *(_OWORD *)v13;
    uint64_t v86 = v14;
    std::string::operator=(&v87, (const std::string *)v13 + 1);
  }
  switch((int)v85)
  {
    case 0:
      goto LABEL_75;
    case 7:
      unint64_t v20 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      unint64_t v16 = v20;
      unint64_t v21 = (uint64_t *****)(*this + 1);
      if (v11) {
        uint64_t v22 = v12 + 1;
      }
      else {
        uint64_t v22 = v12;
      }
      uint64_t v23 = v11 - (v11 != 0);
      uint64_t v24 = v5;
      uint64_t v25 = v6;
      int v26 = 2;
      goto LABEL_42;
    case 9:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v73);
      if (v75 < 0) {
        operator delete(v74);
      }
      unint64_t v20 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      unint64_t v16 = v20;
      unint64_t v21 = (uint64_t *****)(*this + 1);
      if (v11) {
        uint64_t v22 = v12 + 1;
      }
      else {
        uint64_t v22 = v12;
      }
      uint64_t v23 = v11 - (v11 != 0);
      uint64_t v24 = v5;
      uint64_t v25 = v6;
      int v26 = 0;
      goto LABEL_42;
    case 10:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v70);
      if (v72 < 0) {
        operator delete(v71);
      }
      unint64_t v27 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      unint64_t v16 = v27;
      uint64_t v28 = (uint64_t *****)(*this + 1);
      if (v11) {
        uint64_t v29 = v12 + 1;
      }
      else {
        uint64_t v29 = v12;
      }
      uint64_t v30 = v11 - (v11 != 0);
      uint64_t v31 = v5;
      uint64_t v32 = v6;
      int v33 = 0;
      goto LABEL_53;
    case 11:
    case 13:
    case 15:
      int v15 = this[13];
      if (v15 && (v15[4] & 0xFFFFFFFE) == 4) {
        goto LABEL_18;
      }
      uint64_t v19 = "Unexpected token";
      goto LABEL_74;
    case 12:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v67);
      if (v69 < 0) {
        operator delete(v68);
      }
      unint64_t v20 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      unint64_t v16 = v20;
      unint64_t v21 = (uint64_t *****)(*this + 1);
      if (v11) {
        uint64_t v22 = v12 + 1;
      }
      else {
        uint64_t v22 = v12;
      }
      uint64_t v23 = v11 - (v11 != 0);
      uint64_t v24 = v5;
      uint64_t v25 = v6;
      int v26 = 1;
LABEL_42:
      llvm::yaml::SequenceNode::SequenceNode(v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_87;
    case 14:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v64);
      if (v66 < 0) {
        operator delete(v65);
      }
      unint64_t v27 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      unint64_t v16 = v27;
      uint64_t v28 = (uint64_t *****)(*this + 1);
      if (v11) {
        uint64_t v29 = v12 + 1;
      }
      else {
        uint64_t v29 = v12;
      }
      uint64_t v30 = v11 - (v11 != 0);
      uint64_t v31 = v5;
      uint64_t v32 = v6;
      int v33 = 1;
      goto LABEL_53;
    case 16:
      unint64_t v27 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      unint64_t v16 = v27;
      uint64_t v28 = (uint64_t *****)(*this + 1);
      if (v11) {
        uint64_t v29 = v12 + 1;
      }
      else {
        uint64_t v29 = v12;
      }
      uint64_t v30 = v11 - (v11 != 0);
      uint64_t v31 = v5;
      uint64_t v32 = v6;
      int v33 = 2;
LABEL_53:
      llvm::yaml::MappingNode::MappingNode(v27, v28, v29, v30, v31, v32, v33);
      goto LABEL_87;
    case 18:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v61);
      if (v63 < 0) {
        operator delete(v62);
      }
      unint64_t v34 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      unint64_t v16 = v34;
      uint64_t v35 = *this;
      uint64_t v36 = (uint64_t)(*this + 1);
      if (v11) {
        uint64_t v37 = v12 + 1;
      }
      else {
        uint64_t v37 = v12;
      }
      uint64_t v38 = *((void *)&v85 + 1);
      uint64_t v39 = v86;
      *(void *)unint64_t v34 = &unk_270DBD290;
      *(void *)(v34 + 8) = v36;
      *(void *)(v34 + 16) = 0;
      *(void *)(v34 + 24) = 0;
      *(_DWORD *)(v34 + 32) = 1;
      *(void *)(v34 + 40) = v37;
      *(void *)(v34 + 48) = v11 - (v11 != 0);
      *(void *)(v34 + 56) = v5;
      *(void *)(v34 + 64) = v6;
      llvm::yaml::Scanner::peekNext((uint64_t **)**v35[1]);
      *(void *)unint64_t v16 = &unk_270DBD2D0;
      *(void *)(v16 + 72) = v38;
      *(void *)(v16 + 80) = v39;
      goto LABEL_86;
    case 19:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v58);
      if (v60 < 0) {
        operator delete(v59);
      }
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v87.__r_.__value_.__l.__size_;
      }
      unint64_t v41 = (char *)(this + 1);
      if (size == -1)
      {
        long long v55 = 0;
      }
      else
      {
        if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v48 = &v87;
        }
        else {
          uint64_t v48 = (std::string *)v87.__r_.__value_.__r.__words[0];
        }
        std::string __src = v48;
        long long v55 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v41, size + 1, 0);
        memmove(v55, __src, size + 1);
        unint64_t v41 = (char *)(this + 1);
      }
      if (size + 1 < size) {
        ++size;
      }
      unint64_t v49 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v41, 88, 4);
      unint64_t v16 = v49;
      int v50 = *this;
      uint64_t v51 = (uint64_t)(*this + 1);
      if (v11) {
        uint64_t v52 = v12 + 1;
      }
      else {
        uint64_t v52 = v12;
      }
      uint64_t v38 = *((void *)&v85 + 1);
      uint64_t v39 = v86;
      *(void *)unint64_t v49 = &unk_270DBD290;
      *(void *)(v49 + 8) = v51;
      *(void *)(v49 + 16) = 0;
      *(void *)(v49 + 24) = 0;
      *(_DWORD *)(v49 + 32) = 2;
      *(void *)(v49 + 40) = v52;
      *(void *)(v49 + 48) = v11 - (v11 != 0);
      *(void *)(v49 + 56) = v5;
      *(void *)(v49 + 64) = v6;
      llvm::yaml::Scanner::peekNext((uint64_t **)**v50[1]);
      *(void *)unint64_t v16 = &unk_270DBD2F0;
      *(void *)(v16 + 72) = v55;
      *(void *)(v16 + 80) = size;
LABEL_86:
      *(void *)(v16 + 16) = v38;
      *(void *)(v16 + 24) = v38 + v39;
      goto LABEL_87;
    case 20:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v82);
      if (v84 < 0) {
        operator delete(v83);
      }
      unint64_t v42 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      unint64_t v16 = v42;
      __int16 v43 = *this;
      uint64_t v44 = (uint64_t)(*this + 1);
      if (v86) {
        uint64_t v45 = *((void *)&v85 + 1) + 1;
      }
      else {
        uint64_t v45 = *((void *)&v85 + 1);
      }
      uint64_t v46 = v86 - (v86 != 0);
      *(void *)unint64_t v42 = &unk_270DBD290;
      *(void *)(v42 + 8) = v44;
      *(void *)(v42 + 16) = 0;
      *(void *)(v42 + 24) = 0;
      *(_DWORD *)(v42 + 32) = 6;
      *(_OWORD *)(v42 + 56) = 0u;
      *(_OWORD *)(v42 + 40) = 0u;
      uint64_t v47 = llvm::yaml::Scanner::peekNext((uint64_t **)**v43[1])[1];
      *(void *)(v16 + 16) = v47;
      *(void *)(v16 + 24) = v47;
      *(void *)unint64_t v16 = &unk_270DBD370;
      *(void *)(v16 + 72) = v45;
      *(void *)(v16 + 80) = v46;
      goto LABEL_87;
    case 22:
      if (v8 != 22)
      {
        llvm::yaml::Scanner::getNext(**this, (uint64_t)&v76);
        int v8 = (int)v76;
        uint64_t v5 = v77;
        uint64_t v6 = v78;
        if (v57 < 0) {
          operator delete(__p);
        }
        std::string __p = v79;
        char v57 = v81;
        goto LABEL_10;
      }
      uint64_t v19 = "Already encountered a tag for this node!";
LABEL_74:
      unint64_t v76 = v19;
      __int16 v80 = 259;
      llvm::yaml::Scanner::setError((std::error_category *)**this, (const llvm::Twine *)&v76, *((char **)&v85 + 1));
LABEL_75:
      unint64_t v16 = 0;
LABEL_87:
      if (v57 < 0)
      {
        operator delete(__p);
        if (v9 < 0) {
          goto LABEL_93;
        }
      }
      else
      {
        if ((v9 & 0x80) == 0) {
          goto LABEL_89;
        }
LABEL_93:
        operator delete(v10);
      }
LABEL_89:
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      return v16;
    default:
LABEL_18:
      unint64_t v16 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 72, 4);
      BOOL v17 = (uint64_t *****)(*this + 1);
      *(void *)unint64_t v16 = &unk_270DBD290;
      *(void *)(v16 + 8) = v17;
      *(_DWORD *)(v16 + 32) = 0;
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      *(_OWORD *)(v16 + 56) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      uint64_t v18 = llvm::yaml::Scanner::peekNext(***v17)[1];
      *(void *)(v16 + 16) = v18;
      *(void *)(v16 + 24) = v18;
      *(void *)unint64_t v16 = &unk_270DBD2B0;
      goto LABEL_87;
  }
}

const char *llvm::yaml::ScalarNode::getValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(unsigned __int8 **)(a1 + 72);
  long long v4 = (void *)(a1 + 72);
  uint64_t v5 = v6;
  int v7 = *v6;
  if (v7 == 39)
  {
    uint64_t v33 = *(void *)(a1 + 80);
    size_t v34 = v33 - 2;
    if (v33) {
      ++v5;
    }
    size_t v35 = v33 - (v33 != 0);
    if (v35 >= v34) {
      size_t v36 = v34;
    }
    else {
      size_t v36 = v35;
    }
    if (v36)
    {
      uint64_t v37 = memchr(v5, 39, v36);
      int64_t v38 = v37 - v5;
      if (v37 && v38 != -1)
      {
        a2[1] = 0;
        if (a2[2] < v36) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v36, 1);
        }
        do
        {
          uint64_t v40 = v5;
          size_t v41 = v36;
          llvm::SmallVectorImpl<char>::insert<char const*,void>(a2, *a2 + a2[1], (char *)v5, (char *)&v5[v38]);
          llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 39);
          size_t v42 = v38 + 2;
          if (v36 < v38 + 2) {
            size_t v42 = v36;
          }
          v5 += v42;
          v36 -= v42;
          if (!v36) {
            break;
          }
          __int16 v43 = memchr(v5, 39, v36);
          int64_t v38 = v43 - v5;
        }
        while (v43 && v38 != -1);
        uint64_t v31 = *a2 + a2[1];
        uint64_t v32 = (char *)&v40[v41];
LABEL_112:
        llvm::SmallVectorImpl<char>::insert<char const*,void>(a2, v31, (char *)v5, v32);
        return (const char *)*a2;
      }
    }
  }
  else if (v7 == 34)
  {
    uint64_t v8 = *(void *)(a1 + 80);
    unint64_t v9 = v8 - 2;
    if (v8) {
      ++v5;
    }
    unint64_t v10 = v8 - (v8 != 0);
    if (v10 >= v9) {
      unint64_t v11 = v9;
    }
    else {
      unint64_t v11 = v10;
    }
    v46[0] = v5;
    v46[1] = v11;
    uint64_t first_of = llvm::StringRef::find_first_of(v46, "\\\r\n", 3, 0);
    if (first_of != -1)
    {
      unint64_t v13 = first_of;
      a2[1] = 0;
      if (a2[2] < v11) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v11, 1);
      }
      while (1)
      {
        llvm::SmallVectorImpl<char>::insert<char const*,void>(a2, *a2 + a2[1], (char *)v5, (char *)&v5[v13]);
        if (v11 >= v13) {
          unint64_t v15 = v13;
        }
        else {
          unint64_t v15 = v11;
        }
        v5 += v15;
        unint64_t v16 = v11 - v15;
        int v50 = v5;
        unint64_t v51 = v11 - v15;
        int v17 = (char)*v5;
        if (v17 == 13 || v17 == 10)
        {
          llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 10);
          if (v16 >= 2)
          {
            int v19 = v5[1];
            if (v19 == 13 || v19 == 10)
            {
              --v16;
              int v50 = v5 + 1;
              unint64_t v51 = v16;
              ++v5;
            }
          }
          if (v16) {
            ++v5;
          }
          unint64_t v11 = v16 - (v16 != 0);
          goto LABEL_89;
        }
        if (v16 == 1) {
          goto LABEL_115;
        }
        BOOL v21 = v11 > v13;
        if (v11 > v13) {
          ++v5;
        }
        unint64_t v22 = (__PAIR128__(v16, v13) - v11) >> 64;
        int v50 = v5;
        unint64_t v51 = v16 - v21;
        int v23 = (char)*v5;
        if (v23 > 91)
        {
          switch(*v5)
          {
            case '\\':
              uint64_t v24 = a2;
              char v25 = 92;
              goto LABEL_85;
            case '_':
              llvm::SmallVectorTemplateBase<char,true>::push_back(a2, -62);
              uint64_t v24 = a2;
              char v25 = -96;
              goto LABEL_85;
            case 'a':
              uint64_t v24 = a2;
              char v25 = 7;
              goto LABEL_85;
            case 'b':
              uint64_t v24 = a2;
              char v25 = 8;
              goto LABEL_85;
            case 'e':
              uint64_t v24 = a2;
              char v25 = 27;
              goto LABEL_85;
            case 'f':
              uint64_t v24 = a2;
              char v25 = 12;
              goto LABEL_85;
            case 'n':
              uint64_t v24 = a2;
              char v25 = 10;
              goto LABEL_85;
            case 'r':
              uint64_t v24 = a2;
              char v25 = 13;
              goto LABEL_85;
            case 't':
              goto LABEL_49;
            case 'u':
              if (v22 < 5) {
                goto LABEL_86;
              }
              unint64_t v52 = 0;
              uint64_t v47 = (const char *)(v5 + 1);
              uint64_t v48 = 4;
              if ((llvm::consumeUnsignedInteger((llvm *)&v47, (llvm::StringRef *)0x10, &v52, v14) & 1) != 0
                || v48
                || (unint64_t v28 = v52, HIDWORD(v52)))
              {
                unint64_t v28 = 65533;
              }
              encodeUTF8((void *)v28, a2);
              v5 += 4;
              v22 -= 4;
              break;
            case 'v':
              uint64_t v24 = a2;
              char v25 = 11;
              goto LABEL_85;
            case 'x':
              if (v22 < 3) {
                goto LABEL_86;
              }
              unint64_t v52 = 0;
              uint64_t v47 = (const char *)(v5 + 1);
              uint64_t v48 = 2;
              if ((llvm::consumeUnsignedInteger((llvm *)&v47, (llvm::StringRef *)0x10, &v52, v14) & 1) != 0
                || v48
                || (unint64_t v29 = v52, HIDWORD(v52)))
              {
                unint64_t v29 = 65533;
              }
              encodeUTF8((void *)v29, a2);
              v5 += 2;
              v22 -= 2;
              break;
            default:
              goto LABEL_115;
          }
LABEL_81:
          int v50 = v5;
          unint64_t v51 = v22;
          goto LABEL_86;
        }
        if (v23 > 46)
        {
          switch(*v5)
          {
            case 'L':
              uint64_t v26 = 8232;
              goto LABEL_83;
            case 'M':
            case 'O':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
              goto LABEL_115;
            case 'N':
              llvm::SmallVectorTemplateBase<char,true>::push_back(a2, -62);
              uint64_t v24 = a2;
              char v25 = -123;
              break;
            case 'P':
              uint64_t v26 = 8233;
LABEL_83:
              encodeUTF8((void *)v26, a2);
              goto LABEL_86;
            case 'U':
              if (v22 < 9) {
                goto LABEL_86;
              }
              unint64_t v52 = 0;
              uint64_t v47 = (const char *)(v5 + 1);
              uint64_t v48 = 8;
              if ((llvm::consumeUnsignedInteger((llvm *)&v47, (llvm::StringRef *)0x10, &v52, v14) & 1) != 0
                || v48
                || (unint64_t v30 = v52, HIDWORD(v52)))
              {
                unint64_t v30 = 65533;
              }
              encodeUTF8((void *)v30, a2);
              v5 += 8;
              v22 -= 8;
              goto LABEL_81;
            default:
              if (v23 == 47)
              {
                uint64_t v24 = a2;
                char v25 = 47;
              }
              else
              {
                if (v23 != 48)
                {
LABEL_115:
                  uint64_t v47 = "Unrecognized escape code";
                  __int16 v49 = 259;
                  llvm::yaml::Scanner::setError(****(std::error_category *****)(a1 + 8), (const llvm::Twine *)&v47, (char *)v5);
                  return "";
                }
                uint64_t v24 = a2;
                char v25 = 0;
              }
              break;
          }
        }
        else if (v23 <= 12)
        {
          if (v23 != 9)
          {
            if (v23 != 10) {
              goto LABEL_115;
            }
LABEL_45:
            if (v22 >= 2)
            {
              int v27 = v5[1];
              if (v27 == 13 || v27 == 10)
              {
                --v22;
                ++v5;
              }
            }
            goto LABEL_86;
          }
LABEL_49:
          uint64_t v24 = a2;
          char v25 = 9;
        }
        else
        {
          switch(v23)
          {
            case 13:
              goto LABEL_45;
            case 32:
              uint64_t v24 = a2;
              char v25 = 32;
              break;
            case 34:
              uint64_t v24 = a2;
              char v25 = 34;
              break;
            default:
              goto LABEL_115;
          }
        }
LABEL_85:
        llvm::SmallVectorTemplateBase<char,true>::push_back(v24, v25);
LABEL_86:
        if (v22) {
          ++v5;
        }
        unint64_t v11 = v22 - (v22 != 0);
LABEL_89:
        int v50 = v5;
        unint64_t v51 = v11;
        unint64_t v13 = llvm::StringRef::find_first_of(&v50, "\\\r\n", 3, 0);
        if (v13 == -1)
        {
          uint64_t v31 = *a2 + a2[1];
          uint64_t v32 = (char *)&v5[v11];
          goto LABEL_112;
        }
      }
    }
  }
  else
  {
    llvm::StringRef::find_last_not_of(v4, "\n\r \t", 4, 0xFFFFFFFFFFFFFFFFLL);
  }
  return (const char *)v5;
}

unint64_t llvm::yaml::KeyValueNode::getKey(llvm::yaml::KeyValueNode *this)
{
  unint64_t v1 = *((void *)this + 9);
  if (!v1)
  {
    int v3 = *(_DWORD *)llvm::yaml::Scanner::peekNext(****((uint64_t ******)this + 1));
    if (v3 > 15)
    {
      if (v3 == 17) {
        goto LABEL_17;
      }
      if (v3 == 16)
      {
        llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)&v10);
        if (v12 < 0) {
          operator delete(__p);
        }
      }
    }
    else
    {
      if (v3) {
        BOOL v4 = v3 == 8;
      }
      else {
        BOOL v4 = 1;
      }
      if (v4) {
        goto LABEL_17;
      }
    }
    int v5 = *(_DWORD *)llvm::yaml::Scanner::peekNext(****((uint64_t ******)this + 1));
    if (v5 != 17 && v5 != 8)
    {
      unint64_t v1 = llvm::yaml::Document::parseBlockNode(**((uint64_t ******)this + 1));
LABEL_18:
      *((void *)this + 9) = v1;
      return v1;
    }
LABEL_17:
    unint64_t v1 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(**((void **)this + 1) + 8, 72, 4);
    int v7 = (uint64_t *****)*((void *)this + 1);
    *(void *)unint64_t v1 = &unk_270DBD290;
    *(void *)(v1 + 8) = v7;
    *(_DWORD *)(v1 + 32) = 0;
    *(void *)(v1 + 16) = 0;
    *(void *)(v1 + 24) = 0;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    uint64_t v8 = llvm::yaml::Scanner::peekNext(***v7)[1];
    *(void *)(v1 + 16) = v8;
    *(void *)(v1 + 24) = v8;
    *(void *)unint64_t v1 = &unk_270DBD2B0;
    goto LABEL_18;
  }
  return v1;
}

uint64_t llvm::yaml::NullNode::NullNode(uint64_t a1, uint64_t *****a2)
{
  *(void *)a1 = &unk_270DBD290;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v3 = llvm::yaml::Scanner::peekNext(***a2)[1];
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v3;
  *(void *)a1 = &unk_270DBD2B0;
  return a1;
}

unint64_t llvm::yaml::KeyValueNode::getValue(llvm::yaml::KeyValueNode *this)
{
  unint64_t v1 = *((void *)this + 10);
  if (!v1)
  {
    unint64_t Key = llvm::yaml::KeyValueNode::getKey(this);
    if (Key)
    {
      (*(void (**)(unint64_t))(*(void *)Key + 8))(Key);
      BOOL v4 = (uint64_t **)**((void **)this + 1);
      uint64_t v5 = **v4;
      if (*(unsigned char *)(v5 + 74))
      {
LABEL_16:
        unint64_t v1 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(v4 + 1), 72, 4);
        unint64_t v11 = (uint64_t *****)*((void *)this + 1);
        *(void *)unint64_t v1 = &unk_270DBD290;
        *(void *)(v1 + 8) = v11;
        *(_DWORD *)(v1 + 32) = 0;
        *(void *)(v1 + 16) = 0;
        *(void *)(v1 + 24) = 0;
        *(_OWORD *)(v1 + 56) = 0u;
        *(_OWORD *)(v1 + 40) = 0u;
        uint64_t v12 = llvm::yaml::Scanner::peekNext(***v11)[1];
        *(void *)(v1 + 16) = v12;
        *(void *)(v1 + 24) = v12;
        *(void *)unint64_t v1 = &unk_270DBD2B0;
        goto LABEL_17;
      }
      uint64_t v6 = llvm::yaml::Scanner::peekNext((uint64_t **)v5);
      int v7 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 > 0x11u) {
        goto LABEL_19;
      }
      if (((1 << v7) & 0x18901) == 0)
      {
        if (v7 == 17)
        {
          llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v14);
          if (v16 < 0) {
            operator delete(__p);
          }
          int v8 = *(_DWORD *)llvm::yaml::Scanner::peekNext(****((uint64_t ******)this + 1));
          if (v8 != 16 && v8 != 8)
          {
            unint64_t v1 = llvm::yaml::Document::parseBlockNode(**((uint64_t ******)this + 1));
LABEL_17:
            *((void *)this + 10) = v1;
            return v1;
          }
LABEL_20:
          unint64_t v1 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(**((void **)this + 1) + 8, 72, 4);
          llvm::yaml::NullNode::NullNode(v1, *((uint64_t ******)this + 1));
          goto LABEL_17;
        }
LABEL_19:
        v17[0] = "Unexpected token in Key Value.";
        __int16 v18 = 259;
        llvm::yaml::Scanner::setError(****((std::error_category *****)this + 1), (const llvm::Twine *)v17, (char *)v6[1]);
        goto LABEL_20;
      }
    }
    else
    {
      v17[0] = "Null key in Key Value.";
      __int16 v18 = 259;
      uint64_t v10 = llvm::yaml::Scanner::peekNext(****((uint64_t ******)this + 1));
      llvm::yaml::Scanner::setError(****((std::error_category *****)this + 1), (const llvm::Twine *)v17, (char *)v10[1]);
    }
    BOOL v4 = (uint64_t **)**((void **)this + 1);
    goto LABEL_16;
  }
  return v1;
}

void llvm::yaml::MappingNode::increment(llvm::yaml::MappingNode *this)
{
  uint64_t v2 = ****((void ****)this + 1);
  if (*(unsigned char *)(v2 + 74)) {
    goto LABEL_2;
  }
  if (*((void *)this + 10))
  {
    llvm::yaml::KeyValueNode::skip(*((llvm::yaml::KeyValueNode **)this + 10));
    if (*((_DWORD *)this + 18) == 2)
    {
LABEL_2:
      *((unsigned char *)this + 77) = 1;
      *((void *)this + 10) = 0;
      return;
    }
    uint64_t v2 = ****((void ****)this + 1);
  }
  uint64_t v3 = llvm::yaml::Scanner::peekNext((uint64_t **)v2);
  uint64_t v4 = v3[2];
  long long v22 = *(_OWORD *)v3;
  uint64_t v23 = v4;
  if (*((char *)v3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, (const std::string::value_type *)v3[3], v3[4]);
  }
  else
  {
    long long v5 = *(_OWORD *)(v3 + 3);
    v24.__r_.__value_.__r.__words[2] = v3[5];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v5;
  }
  if ((v22 & 0xFFFFFFFD) == 0x10)
  {
    unint64_t v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(**((void **)this + 1) + 8, 88, 4);
    int v7 = (uint64_t *****)*((void *)this + 1);
    *(void *)unint64_t v6 = &unk_270DBD290;
    *(void *)(v6 + 8) = v7;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = 0;
    *(_DWORD *)(v6 + 32) = 3;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    uint64_t v8 = llvm::yaml::Scanner::peekNext(***v7)[1];
    *(void *)(v6 + 16) = v8;
    *(void *)(v6 + 24) = v8;
    *(void *)unint64_t v6 = &unk_270DBD310;
    *(void *)(v6 + 72) = 0;
    *(void *)(v6 + 80) = 0;
    *((void *)this + 10) = v6;
    goto LABEL_30;
  }
  if (*((_DWORD *)this + 18))
  {
    if (v22)
    {
      if (v22 != 15)
      {
        if (v22 == 11)
        {
          llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v14);
          if (v16 < 0) {
            operator delete(__p);
          }
          llvm::yaml::MappingNode::increment(this);
          goto LABEL_30;
        }
        uint64_t v10 = "Unexpected token. Expected Key, Flow Entry, or Flow Mapping End.";
        goto LABEL_28;
      }
      llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v11);
      if (v13 < 0)
      {
        unint64_t v9 = v12;
        goto LABEL_25;
      }
    }
  }
  else if (v22)
  {
    if (v22 != 8)
    {
      uint64_t v10 = "Unexpected token. Expected Key or Block End";
LABEL_28:
      int v17 = v10;
      __int16 v18 = 259;
      llvm::yaml::Scanner::setError(****((std::error_category *****)this + 1), (const llvm::Twine *)&v17, *((char **)&v22 + 1));
      goto LABEL_29;
    }
    llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v19);
    if (v21 < 0)
    {
      unint64_t v9 = v20;
LABEL_25:
      operator delete(v9);
    }
  }
LABEL_29:
  *((unsigned char *)this + 77) = 1;
  *((void *)this + 10) = 0;
LABEL_30:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

unint64_t llvm::yaml::KeyValueNode::skip(llvm::yaml::KeyValueNode *this)
{
  unint64_t result = llvm::yaml::KeyValueNode::getKey(this);
  if (result)
  {
    (*(void (**)(unint64_t))(*(void *)result + 8))(result);
    unint64_t result = llvm::yaml::KeyValueNode::getValue(this);
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
      return v3();
    }
  }
  return result;
}

void llvm::yaml::SequenceNode::increment(llvm::yaml::SequenceNode *this)
{
  uint64_t v2 = ****((void ****)this + 1);
  if (*(unsigned char *)(v2 + 74))
  {
    *((unsigned char *)this + 77) = 1;
    *((void *)this + 10) = 0;
    return;
  }
  uint64_t v3 = *((void *)this + 10);
  if (v3)
  {
    (*(void (**)(void))(*(void *)v3 + 8))(*((void *)this + 10));
    uint64_t v2 = ****((void ****)this + 1);
  }
  uint64_t v4 = llvm::yaml::Scanner::peekNext((uint64_t **)v2);
  uint64_t v5 = v4[2];
  long long v30 = *(_OWORD *)v4;
  uint64_t v31 = v5;
  if (*((char *)v4 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)v4[3], v4[4]);
  }
  else
  {
    long long v6 = *(_OWORD *)(v4 + 3);
    v32.__r_.__value_.__r.__words[2] = v4[5];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v6;
  }
  int v7 = *((_DWORD *)this + 18);
  switch(v7)
  {
    case 2:
      if (v30 == 7)
      {
        llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v19);
        if ((v21 & 0x80000000) == 0) {
          goto LABEL_20;
        }
        uint64_t v8 = __p;
LABEL_19:
        operator delete(v8);
LABEL_20:
        unint64_t v9 = llvm::yaml::Document::parseBlockNode(**((uint64_t ******)this + 1));
        *((void *)this + 10) = v9;
        if (v9) {
          break;
        }
      }
LABEL_28:
      *((unsigned char *)this + 77) = 1;
      *((void *)this + 10) = 0;
      break;
    case 1:
      switch((int)v30)
      {
        case 0:
          goto LABEL_28;
        case 2:
        case 5:
        case 6:
          uint64_t v10 = "Could not find closing ]!";
          goto LABEL_27;
        case 11:
          llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v16);
          if (v18 < 0) {
            operator delete(v17);
          }
          *((unsigned char *)this + 78) = 1;
          llvm::yaml::SequenceNode::increment(this);
          goto LABEL_29;
        case 13:
          llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v13);
          if ((v15 & 0x80000000) == 0) {
            goto LABEL_28;
          }
          unint64_t v11 = v14;
          goto LABEL_41;
        default:
          if (!*((unsigned char *)this + 78))
          {
            uint64_t v10 = "Expected , between entries!";
            goto LABEL_27;
          }
          unint64_t v12 = llvm::yaml::Document::parseBlockNode(**((uint64_t ******)this + 1));
          *((void *)this + 10) = v12;
          if (!v12) {
            *((unsigned char *)this + 77) = 1;
          }
          *((unsigned char *)this + 78) = 0;
          break;
      }
      break;
    case 0:
      if (v30)
      {
        if (v30 == 8)
        {
          llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v24);
          if (v26 < 0)
          {
            unint64_t v11 = v25;
LABEL_41:
            operator delete(v11);
          }
        }
        else
        {
          if (v30 == 7)
          {
            llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v27);
            if ((v29 & 0x80000000) == 0) {
              goto LABEL_20;
            }
            uint64_t v8 = v28;
            goto LABEL_19;
          }
          uint64_t v10 = "Unexpected token. Expected Block Entry or Block End.";
LABEL_27:
          long long v22 = v10;
          __int16 v23 = 259;
          llvm::yaml::Scanner::setError(****((std::error_category *****)this + 1), (const llvm::Twine *)&v22, *((char **)&v30 + 1));
        }
      }
      goto LABEL_28;
  }
LABEL_29:
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

llvm::yaml::Document *llvm::yaml::Document::Document(llvm::yaml::Document *this, llvm::yaml::Stream *a2)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = (char *)this + 40;
  *((void *)this + 4) = 0x400000000;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = (char *)this + 88;
  *((void *)this + 10) = 0;
  *((void *)this + 12) = 1;
  *((void *)this + 13) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 14) = (char *)this + 120;
  uint64_t v3 = (uint64_t **)((char *)this + 112);
  *((void *)this + 16) = 0;
  int64_t v38 = "!";
  *(void *)&long long v39 = 1;
  *(void *)&long long v32 = &v38;
  uint64_t v4 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__emplace_unique_key_args<llvm::StringRef,std::piecewise_construct_t const&,std::tuple<llvm::StringRef&&>,std::tuple<>>((uint64_t **)this + 14, (long long *)&v38, (_OWORD **)&v32);
  *((void *)v4 + 6) = "!";
  *((void *)v4 + 7) = 1;
  int64_t v38 = "!!";
  *(void *)&long long v39 = 2;
  *(void *)&long long v32 = &v38;
  uint64_t v5 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__emplace_unique_key_args<llvm::StringRef,std::piecewise_construct_t const&,std::tuple<llvm::StringRef&&>,std::tuple<>>(v3, (long long *)&v38, (_OWORD **)&v32);
  char v6 = 0;
  *((void *)v5 + 6) = "tag:yaml.org,2002:";
  *((void *)v5 + 7) = 18;
  do
  {
    while (1)
    {
      int v7 = llvm::yaml::Scanner::peekNext(**(uint64_t ****)this);
      uint64_t v8 = v7[2];
      long long v32 = *(_OWORD *)v7;
      uint64_t v33 = v8;
      if (*((char *)v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v7[3], v7[4]);
      }
      else
      {
        long long v9 = *(_OWORD *)(v7 + 3);
        __p.__r_.__value_.__r.__words[2] = v7[5];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      if (v32 == 3)
      {
        llvm::yaml::Scanner::getNext(**(uint64_t ****)this, (uint64_t)&v38);
      }
      else
      {
        if (v32 != 4)
        {
          char v27 = 0;
          goto LABEL_27;
        }
        llvm::yaml::Scanner::getNext(**(uint64_t ****)this, (uint64_t)&v38);
        long long v37 = v39;
        unint64_t first_of = llvm::StringRef::find_first_of(&v37, " \t", 2, 0);
        if (*((void *)&v37 + 1) >= first_of) {
          unint64_t v11 = first_of;
        }
        else {
          unint64_t v11 = *((void *)&v37 + 1);
        }
        uint64_t v12 = v37 + v11;
        unint64_t v13 = *((void *)&v37 + 1) - v11;
        *(void *)&long long v36 = v37 + v11;
        *((void *)&v36 + 1) = *((void *)&v37 + 1) - v11;
        unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v36, " \t", 2, 0);
        if (first_not_of >= v13) {
          unint64_t v15 = v13;
        }
        else {
          unint64_t v15 = first_not_of;
        }
        uint64_t v16 = v12 + v15;
        unint64_t v17 = v13 - v15;
        *(void *)&long long v37 = v16;
        *((void *)&v37 + 1) = v17;
        unint64_t v18 = llvm::StringRef::find_first_of(&v37, " \t", 2, 0);
        if (v17 >= v18) {
          unint64_t v19 = v18;
        }
        else {
          unint64_t v19 = v17;
        }
        *(void *)&long long v36 = v16;
        *((void *)&v36 + 1) = v19;
        uint64_t v20 = v16 + v19;
        unint64_t v21 = v17 - v19;
        v35[0] = v16 + v19;
        v35[1] = v17 - v19;
        unint64_t v22 = llvm::StringRef::find_first_not_of(v35, " \t", 2, 0);
        if (v22 >= v21) {
          unint64_t v23 = v21;
        }
        else {
          unint64_t v23 = v22;
        }
        std::string v24 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__find_equal<llvm::StringRef>((uint64_t)v3, v35, &v36);
        char v25 = (_OWORD *)*v24;
        if (!*v24)
        {
          char v26 = (uint64_t **)v24;
          char v25 = operator new(0x40uLL);
          std::string::value_type v25[2] = v36;
          *((void *)v25 + 6) = 0;
          *((void *)v25 + 7) = 0;
          std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(v3, v35[0], v26, (uint64_t *)v25);
        }
        *((void *)v25 + 6) = v20 + v23;
        *((void *)v25 + 7) = v21 - v23;
      }
      if (v41 < 0) {
        operator delete(v40);
      }
      char v6 = 1;
      char v27 = 1;
LABEL_27:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if ((v27 & 1) == 0) {
        goto LABEL_31;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  while ((v27 & 1) != 0);
LABEL_31:
  if (v6)
  {
    llvm::yaml::Scanner::getNext(**(uint64_t ****)this, (uint64_t)&v38);
    if (v38 != 5)
    {
      *(void *)&long long v32 = "Unexpected token";
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 259;
      llvm::yaml::Scanner::setError(**(std::error_category ***)this, (const llvm::Twine *)&v32, (char *)v39);
    }
    if (v41 < 0) {
      operator delete(v40);
    }
  }
  if (*(_DWORD *)llvm::yaml::Scanner::peekNext(**(uint64_t ****)this) == 5)
  {
    llvm::yaml::Scanner::getNext(**(uint64_t ****)this, (uint64_t)&v29);
    if (v31 < 0) {
      operator delete(v30);
    }
  }
  return this;
}

llvm::yaml::MappingNode *llvm::yaml::MappingNode::skip(llvm::yaml::MappingNode *this)
{
  if (*((unsigned char *)this + 76))
  {
    unint64_t v1 = this;
    *((unsigned char *)this + 76) = 0;
    while (1)
    {
      llvm::yaml::MappingNode::increment(v1);
      this = (llvm::yaml::MappingNode *)*((void *)v1 + 10);
      if (!this) {
        break;
      }
      llvm::yaml::KeyValueNode::skip(this);
    }
  }
  return this;
}

llvm::yaml::SequenceNode *llvm::yaml::SequenceNode::skip(llvm::yaml::SequenceNode *this)
{
  if (*((unsigned char *)this + 76))
  {
    unint64_t v1 = this;
    *((unsigned char *)this + 76) = 0;
    while (1)
    {
      llvm::yaml::SequenceNode::increment(v1);
      this = (llvm::yaml::SequenceNode *)*((void *)v1 + 10);
      if (!this) {
        break;
      }
      (*(void (**)(llvm::yaml::SequenceNode *))(*(void *)this + 8))(this);
    }
  }
  return this;
}

uint64_t llvm::yaml::SequenceNode::SequenceNode(uint64_t a1, uint64_t *****a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *(void *)a1 = &unk_270DBD290;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 5;
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = a5;
  *(void *)(a1 + 64) = a6;
  uint64_t v9 = llvm::yaml::Scanner::peekNext(***a2)[1];
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v9;
  *(void *)a1 = &unk_270DBD350;
  *(_DWORD *)(a1 + 72) = a7;
  *(_WORD *)(a1 + 76) = 1;
  *(unsigned char *)(a1 + 78) = 1;
  *(void *)(a1 + 80) = 0;
  return a1;
}

uint64_t llvm::yaml::MappingNode::MappingNode(uint64_t a1, uint64_t *****a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *(void *)a1 = &unk_270DBD290;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 4;
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = a5;
  *(void *)(a1 + 64) = a6;
  uint64_t v9 = llvm::yaml::Scanner::peekNext(***a2)[1];
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v9;
  *(void *)a1 = &unk_270DBD330;
  *(_DWORD *)(a1 + 72) = a7;
  *(_WORD *)(a1 + 76) = 1;
  *(void *)(a1 + 80) = 0;
  return a1;
}

void std::default_delete<llvm::yaml::Document>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy(a2 + 112, *(void **)(a2 + 120));
    llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(a2 + 8);
    JUMPOUT(0x263E500B0);
  }
}

void std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *llvm::simple_ilist<llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::Node>::eraseAndDispose<llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::Disposer>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    do
    {
      uint64_t v4 = *a2;
      uint64_t v5 = (uint64_t *)a2[1];
      uint64_t *v5 = *a2;
      *(void *)(v4 + 8) = v5;
      *a2 = 0;
      a2[1] = 0;
      if (*((char *)a2 + 63) < 0) {
        operator delete((void *)a2[5]);
      }
      a2 = v5;
    }
    while (v5 != a3);
  }
  return a3;
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 72);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(result + 64);
    uint64_t v4 = 16 * v2;
    do
    {
      uint64_t v5 = *v3;
      v3 += 2;
      unint64_t result = MEMORY[0x263E500A0](v5, 8);
      v4 -= 16;
    }
    while (v4);
  }
  *(_DWORD *)(v1 + 72) = 0;
  uint64_t v6 = *(unsigned int *)(v1 + 24);
  if (v6)
  {
    *(void *)(v1 + 80) = 0;
    int v7 = *(void **)(v1 + 16);
    uint64_t v8 = *v7 + 4096;
    *(void *)uint64_t v1 = *v7;
    *(void *)(v1 + 8) = v8;
    if (v6 != 1)
    {
      uint64_t v9 = v7 + 1;
      uint64_t v10 = 8 * v6 - 8;
      do
      {
        uint64_t v11 = *v9++;
        unint64_t result = MEMORY[0x263E500A0](v11, 8);
        v10 -= 8;
      }
      while (v10);
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

unint64_t llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>(uint64_t a1, long long *a2)
{
  unint64_t v3 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 64, 3);
  *(void *)unint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  long long v4 = *a2;
  *(void *)(v3 + 32) = *((void *)a2 + 2);
  *(_OWORD *)(v3 + 16) = v4;
  uint64_t v5 = (std::string *)(v3 + 40);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *(void *)(v3 + 56) = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return v3;
}

void std::default_delete<llvm::yaml::Scanner>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = *(void **)(a2 + 224);
    if (v3 != (void *)(a2 + 240)) {
      free(v3);
    }
    long long v4 = *(void **)(a2 + 192);
    if (v4 != (void *)(a2 + 208)) {
      free(v4);
    }
    llvm::simple_ilist<llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::Node>::eraseAndDispose<llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::Disposer>(a2 + 176, *(uint64_t **)(a2 + 184), (uint64_t *)(a2 + 176));
    llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(a2 + 80);
    JUMPOUT(0x263E500B0);
  }
}

uint64_t std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::find<llvm::StringRef>(uint64_t a1, long long *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    long long v6 = *(const void **)a2;
    size_t v7 = *((void *)a2 + 1);
    long long v13 = *(_OWORD *)(v3 + 32);
    int v8 = llvm::StringRef::compare((uint64_t)&v13, v6, v7);
    uint64_t v9 = (uint64_t *)(v3 + 8);
    if (v8 >= 0)
    {
      uint64_t v9 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  if (v2 == v5) {
    return v2;
  }
  uint64_t v10 = *(const void **)(v5 + 32);
  size_t v11 = *(void *)(v5 + 40);
  long long v13 = *a2;
  if ((llvm::StringRef::compare((uint64_t)&v13, v10, v11) & 0x80000000) != 0) {
    return v2;
  }
  return v5;
}

char *llvm::SmallVectorImpl<char>::insert<char const*,void>(uint64_t *a1, uint64_t a2, char *__src, char *a4)
{
  uint64_t v5 = __src;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a2 - *a1;
  if (*a1 + v8 == a2)
  {
    llvm::SmallVectorImpl<char>::append<char const*,void>(a1, __src, a4);
    return (char *)(*a1 + v9);
  }
  else
  {
    unint64_t v10 = a4 - __src;
    unint64_t v11 = v8 + a4 - __src;
    if (a1[2] < v11)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v11, 1);
      uint64_t v7 = *a1;
      uint64_t v8 = a1[1];
    }
    uint64_t v12 = (char *)(v7 + v9);
    long long v13 = (char *)(v7 + v8);
    uint64_t v14 = v8 - v9;
    if (v8 - v9 >= v10)
    {
      llvm::SmallVectorImpl<char>::append<std::__wrap_iter<char *>,void>(a1, &v13[-v10], (char *)(v7 + v8));
      if (&v13[-v10] != v12) {
        memmove(&v12[v10], v12, &v13[-v10] - v12);
      }
      if (a4 != v5) {
        memmove(v12, v5, a4 - v5);
      }
    }
    else
    {
      a1[1] = v8 + v10;
      if (v9 != v8) {
        memcpy((void *)(v7 + v10 + v9), v12, v8 - v9);
      }
      if (v14)
      {
        unint64_t v15 = v12;
        do
        {
          char v16 = *v5++;
          *v15++ = v16;
          --v14;
        }
        while (v14);
      }
      if (v5 != a4) {
        memcpy(v13, v5, a4 - v5);
      }
    }
  }
  return v12;
}

_OWORD *std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__emplace_unique_key_args<llvm::StringRef,std::piecewise_construct_t const&,std::tuple<llvm::StringRef&&>,std::tuple<>>(uint64_t **a1, long long *a2, _OWORD **a3)
{
  uint64_t v5 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__find_equal<llvm::StringRef>((uint64_t)a1, &v9, a2);
  long long v6 = (_OWORD *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    long long v6 = operator new(0x40uLL);
    void v6[2] = **a3;
    *((void *)v6 + 6) = 0;
    *((void *)v6 + 7) = 0;
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__find_equal<llvm::StringRef>(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  long long v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = (const void *)v4[4];
        size_t v9 = v4[5];
        long long v13 = *a3;
        if ((llvm::StringRef::compare((uint64_t)&v13, v8, v9) & 0x80000000) == 0) {
          break;
        }
        long long v4 = (uint64_t *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      unint64_t v10 = *(const void **)a3;
      size_t v11 = *((void *)a3 + 1);
      long long v13 = *((_OWORD *)v7 + 2);
      if ((llvm::StringRef::compare((uint64_t)&v13, v10, v11) & 0x80000000) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      long long v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  unint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void llvm::yaml::Input::Input(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_270DBD390;
  *(void *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  operator new();
}

void llvm::yaml::Input::~Input(llvm::yaml::Input *this)
{
  *(void *)this = &unk_270DBD390;
  uint64_t v2 = (char *)*((void *)this + 28);
  if (v2 != (char *)this + 240) {
    free(v2);
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 120);
  uint64_t v3 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  std::unique_ptr<llvm::yaml::Stream>::reset[abi:nn180100]((llvm::yaml::Stream **)this + 11, 0);
  llvm::SourceMgr::~SourceMgr((llvm::yaml::Input *)((char *)this + 16));
}

{
  uint64_t vars8;

  llvm::yaml::Input::~Input(this);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::yaml::Input::outputting(llvm::yaml::Input *this)
{
  return 0;
}

uint64_t llvm::yaml::Input::setCurrentDocument(llvm::yaml::Input *this)
{
  uint64_t v2 = (llvm::yaml::Document ***)((char *)this + 216);
  uint64_t v1 = (uint64_t *****)*((void *)this + 27);
  if (v1)
  {
    do
    {
      long long v4 = *v1;
      if (!*v1) {
        break;
      }
      uint64_t v5 = v4[13];
      if (!v5)
      {
        uint64_t v5 = (uint64_t ***)llvm::yaml::Document::parseBlockNode(*v1);
        v4[13] = v5;
        if (!v5)
        {
          size_t v9 = std::generic_category();
          uint64_t result = 0;
          *((void *)this + 13) = 22;
          *((void *)this + 14) = v9;
          return result;
        }
      }
      if (*((_DWORD *)v5 + 8))
      {
        llvm::yaml::Input::createHNodes((llvm **)this, (llvm::yaml::Node *)v5, &v10);
        uint64_t v7 = v10;
        uint64_t v8 = *((void *)this + 12);
        *((void *)this + 12) = v10;
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
          uint64_t v7 = *((void *)this + 12);
        }
        *((void *)this + 37) = v7;
        return 1;
      }
      llvm::yaml::document_iterator::operator++(v2);
      uint64_t v1 = (uint64_t *****)*v2;
    }
    while (*v2);
  }
  return 0;
}

void llvm::yaml::Input::createHNodes(llvm **this@<X0>, llvm::yaml::Node *a2@<X1>, void *a3@<X8>)
{
  v17[16] = *MEMORY[0x263EF8340];
  unint64_t v15 = v17;
  long long v16 = xmmword_261E8A720;
  int v5 = *((_DWORD *)a2 + 8);
  if (a2 && v5 == 1)
  {
    llvm::yaml::ScalarNode::getValue((uint64_t)a2, (uint64_t *)&v15);
    size_t v6 = v16;
    if ((void)v16)
    {
      uint64_t v7 = v15;
      uint64_t v8 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 15), v16, 0);
      memmove(v8, v7, v6);
    }
    operator new();
  }
  if (a2 && v5 == 2)
  {
    size_t v9 = *((void *)a2 + 10);
    if (v9)
    {
      uint64_t v10 = (const void *)*((void *)a2 + 9);
      size_t v11 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 15), *((void *)a2 + 10), 0);
      memmove(v11, v10, v9);
    }
    operator new();
  }
  if (a2 && v5 == 5) {
    operator new();
  }
  if (a2 && v5 == 4) {
    operator new();
  }
  if (!v5) {
    operator new();
  }
  long long v13 = "unknown node kind";
  __int16 v14 = 259;
  llvm::yaml::Stream::printError(this[11], (uint64_t)a2, (llvm::Twine *)&v13, 0);
  uint64_t v12 = std::generic_category();
  this[13] = (llvm *)22;
  this[14] = (llvm *)v12;
  *a3 = 0;
  if (v15 != v17) {
    free(v15);
  }
}

BOOL llvm::yaml::Input::mapTag(uint64_t a1, const void *a2, size_t a3, BOOL a4)
{
  uint64_t v4 = *(void *)(a1 + 296);
  if (!v4) {
    return 0;
  }
  llvm::yaml::Node::getVerbatimTag(*(llvm::yaml::Node **)(v4 + 8), (uint64_t)__p);
  unint64_t v8 = v13;
  int v9 = (char)v13;
  if ((v13 & 0x80u) != 0) {
    unint64_t v8 = (unint64_t)__p[1];
  }
  if (!v8) {
    goto LABEL_10;
  }
  if (a3 == v8)
  {
    if ((v13 & 0x80u) == 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    a4 = memcmp(a2, v10, a3) == 0;
LABEL_10:
    if (v9 < 0) {
      goto LABEL_14;
    }
    return a4;
  }
  a4 = 0;
  if ((char)v13 < 0) {
LABEL_14:
  }
    operator delete(__p[0]);
  return a4;
}

void llvm::yaml::Input::beginMapping(llvm::yaml::Input *this)
{
  if (!*((_DWORD *)this + 26))
  {
    uint64_t v1 = *((void *)this + 37);
    if (v1)
    {
      if (*(_DWORD *)(*(void *)(v1 + 8) + 32) == 4) {
        llvm::SmallVectorImpl<std::string>::clear((uint64_t *)(v1 + 40));
      }
    }
  }
}

void llvm::SmallVectorImpl<std::string>::clear(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = 24 * v2;
    do
    {
      if (*(char *)(v3 + v4 - 1) < 0) {
        operator delete(*(void **)(v3 + v4 - 24));
      }
      v4 -= 24;
    }
    while (v4);
  }
  *((_DWORD *)a1 + 2) = 0;
}

void llvm::yaml::Input::keys(llvm::yaml::Input *this@<X0>, char **a2@<X8>)
{
  uint64_t v3 = *((void *)this + 37);
  uint64_t v4 = *(void *)(v3 + 8);
  int v5 = *(_DWORD *)(v4 + 32);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3) {
    BOOL v6 = v5 == 4;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    int v9 = *(uint64_t ***)(v3 + 16);
    uint64_t v10 = *(unsigned int *)(v3 + 24);
    if (v10)
    {
      for (int i = v9; !*i || *i + 1 == 0; ++i)
        ;
    }
    else
    {
      int i = v9;
    }
    unsigned __int8 v13 = &v9[v10];
    if (i != v13)
    {
      __int16 v14 = 0;
      unint64_t v15 = a2 + 2;
      long long v16 = *i;
      do
      {
        uint64_t v19 = *v16;
        unint64_t v17 = v16 + 4;
        uint64_t v18 = v19;
        if ((unint64_t)v14 >= *v15)
        {
          uint64_t v20 = (v14 - *a2) >> 4;
          if ((unint64_t)(v20 + 1) >> 60) {
            abort();
          }
          uint64_t v21 = *v15 - (void)*a2;
          uint64_t v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1)) {
            uint64_t v22 = v20 + 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          if (v23) {
            std::string v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(a2 + 2), v23);
          }
          else {
            std::string v24 = 0;
          }
          char v25 = &v24[16 * v20];
          *(void *)char v25 = v17;
          *((void *)v25 + 1) = v18;
          char v27 = *a2;
          char v26 = a2[1];
          unint64_t v28 = v25;
          if (v26 != *a2)
          {
            do
            {
              *((_OWORD *)v28 - 1) = *((_OWORD *)v26 - 1);
              v28 -= 16;
              v26 -= 16;
            }
            while (v26 != v27);
            char v26 = *a2;
          }
          __int16 v14 = v25 + 16;
          *a2 = v28;
          a2[1] = v25 + 16;
          a2[2] = &v24[16 * v23];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *(void *)__int16 v14 = v17;
          *((void *)v14 + 1) = v18;
          v14 += 16;
        }
        a2[1] = v14;
        do
        {
          uint64_t v29 = i[1];
          ++i;
          long long v16 = v29;
          if (v29) {
            BOOL v30 = v16 + 1 == 0;
          }
          else {
            BOOL v30 = 1;
          }
        }
        while (v30);
      }
      while (i != v13);
    }
  }
  else
  {
    char v31 = "not a mapping";
    __int16 v32 = 259;
    llvm::yaml::Stream::printError(*((llvm **)this + 11), v4, (llvm::Twine *)&v31, 0);
    unint64_t v8 = std::generic_category();
    *((void *)this + 13) = 22;
    *((void *)this + 14) = v8;
  }
}

uint64_t llvm::yaml::Input::preflightKey(llvm::yaml::Input *this, char *__s, int a3, BOOL a4, BOOL *a5, void **a6)
{
  uint64_t result = 0;
  *a5 = 0;
  if (!*((_DWORD *)this + 26))
  {
    uint64_t v9 = *((void *)this + 37);
    if (!v9)
    {
      if (!a3) {
        return 0;
      }
      goto LABEL_27;
    }
    uint64_t v12 = *(void *)(v9 + 8);
    int v13 = *(_DWORD *)(v12 + 32);
    if (v13 == 4)
    {
      std::string::basic_string[abi:nn180100]<0>(__p, __s);
      unint64_t v15 = llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>(v9 + 40, (unint64_t)__p, 1);
      uint64_t v16 = *(void *)(v9 + 40) + 24 * *(unsigned int *)(v9 + 48);
      long long v17 = *(_OWORD *)v15;
      *(void *)(v16 + 16) = *(void *)(v15 + 16);
      *(_OWORD *)uint64_t v16 = v17;
      *(void *)(v15 + 8) = 0;
      *(void *)(v15 + 16) = 0;
      *(void *)unint64_t v15 = 0;
      ++*(_DWORD *)(v9 + 48);
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
      if (__s) {
        size_t v18 = strlen(__s);
      }
      else {
        size_t v18 = 0;
      }
      unint64_t v20 = (*llvm::StringMap<std::pair<std::unique_ptr<llvm::yaml::Input::HNode>,llvm::SMRange>,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v9 + 16), (uint64_t *)__s, v18))[1];
      if (v20)
      {
        *a6 = (void *)*((void *)this + 37);
        *((void *)this + 37) = v20;
        return 1;
      }
      if (a3)
      {
        uint64_t v21 = *((void *)this + 37);
        int v22 = *__s;
        unint64_t v23 = "missing required key '";
        if (*__s)
        {
          v26[0] = "missing required key '";
          long long v26[2] = __s;
          __int16 v27 = 771;
          char v24 = 2;
        }
        else
        {
          v26[0] = "missing required key '";
          __int16 v27 = 259;
          char v24 = 3;
        }
        if (v22) {
          unint64_t v23 = (const char *)v26;
        }
        __p[0] = (void *)v23;
        uint64_t v29 = "'";
        LOBYTE(v30) = v24;
        HIBYTE(v30) = 3;
        uint64_t v12 = *(void *)(v21 + 8);
        goto LABEL_26;
      }
    }
    else
    {
      if (v13) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = a3 == 0;
      }
      if (!v19)
      {
        __p[0] = "not a mapping";
        __int16 v30 = 259;
LABEL_26:
        llvm::yaml::Stream::printError(*((llvm **)this + 11), v12, (llvm::Twine *)__p, 0);
LABEL_27:
        char v25 = std::generic_category();
        uint64_t result = 0;
        *((void *)this + 13) = 22;
        *((void *)this + 14) = v25;
        return result;
      }
    }
    uint64_t result = 0;
    *a5 = 1;
  }
  return result;
}

uint64_t llvm::yaml::Input::postflightKey(uint64_t this, void *a2)
{
  *(void *)(this + 296) = a2;
  return this;
}

void llvm::yaml::Input::endMapping(llvm::yaml::Input *this)
{
  if (!*((_DWORD *)this + 26))
  {
    uint64_t v2 = *((void *)this + 37);
    if (v2)
    {
      if (*(_DWORD *)(*(void *)(v2 + 8) + 32) == 4)
      {
        uint64_t v3 = *(unsigned int *)(v2 + 24);
        if (v3)
        {
          for (int i = *(void **)(v2 + 16); !*i || *i == -8; ++i)
            ;
        }
        else
        {
          int i = *(void **)(v2 + 16);
        }
        uint64_t v6 = *(void *)(v2 + 16) + 8 * v3;
        if (i != (void *)v6)
        {
          uint64_t v7 = (void *)*i;
          do
          {
            uint64_t v8 = *v7;
            v19[0] = v7 + 4;
            v19[1] = v8;
            if (std::__find_impl[abi:nn180100]<std::string *,std::string *,llvm::StringRef,std::__identity>(*(void *)(v2 + 40), *(void *)(v2 + 40) + 24 * *(unsigned int *)(v2 + 48), (uint64_t)v19) == *(void *)(v2 + 40) + 24 * *(unsigned int *)(v2 + 48))
            {
              uint64_t v9 = v7 + 2;
              if (!*((unsigned char *)this + 305))
              {
                uint64_t v13 = *v7;
                v15[0] = "unknown key '";
                uint64_t v16 = v7 + 4;
                uint64_t v17 = v13;
                __int16 v18 = 1283;
                v19[0] = v15;
                unint64_t v20 = "'";
                __int16 v21 = 770;
                llvm::yaml::Stream::printError(*((llvm **)this + 11), v9, (llvm::Twine *)v19, 0);
                __int16 v14 = std::generic_category();
                *((void *)this + 13) = 22;
                *((void *)this + 14) = v14;
                return;
              }
              uint64_t v10 = *v7;
              v15[0] = "unknown key '";
              uint64_t v16 = v7 + 4;
              uint64_t v17 = v10;
              __int16 v18 = 1283;
              v19[0] = v15;
              unint64_t v20 = "'";
              __int16 v21 = 770;
              llvm::yaml::Stream::printError(*((llvm **)this + 11), v9, (llvm::Twine *)v19, 1);
            }
            do
            {
              size_t v11 = (void *)i[1];
              ++i;
              uint64_t v7 = v11;
              if (v11) {
                BOOL v12 = v7 + 1 == 0;
              }
              else {
                BOOL v12 = 1;
              }
            }
            while (v12);
          }
          while (i != (void *)v6);
        }
      }
    }
  }
}

uint64_t llvm::yaml::Input::beginFlowMapping(llvm::yaml::Input *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 104))();
}

uint64_t llvm::yaml::Input::endFlowMapping(llvm::yaml::Input *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 112))();
}

uint64_t llvm::yaml::Input::beginSequence(llvm::yaml::Input *this)
{
  uint64_t v1 = (void *)*((void *)this + 37);
  uint64_t v2 = v1[1];
  unsigned int v3 = *(_DWORD *)(v2 + 32);
  if (v1) {
    BOOL v4 = v3 == 5;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    return (v1[3] - v1[2]) >> 3;
  }
  if (v3)
  {
    if (v1) {
      BOOL v6 = v3 > 2;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6) {
      goto LABEL_15;
    }
    uint64_t v7 = (unsigned char *)v1[2];
    uint64_t v8 = v1[3];
    if (v8 == 1)
    {
      if (*v7 != 126)
      {
LABEL_15:
        size_t v11 = "not a sequence";
        __int16 v12 = 259;
        llvm::yaml::Stream::printError(*((llvm **)this + 11), v2, (llvm::Twine *)&v11, 0);
        uint64_t v9 = std::generic_category();
        uint64_t result = 0;
        *((void *)this + 13) = 22;
        *((void *)this + 14) = v9;
        return result;
      }
    }
    else if (v8 != 4 || *(_DWORD *)v7 != 1819047278 && *(_DWORD *)v7 != 1819047246 && *(_DWORD *)v7 != 1280070990)
    {
      goto LABEL_15;
    }
  }
  return 0;
}

uint64_t llvm::yaml::Input::preflightElement(llvm::yaml::Input *this, unsigned int a2, void **a3)
{
  if (*((_DWORD *)this + 26)) {
    return 0;
  }
  unsigned int v3 = (void *)*((void *)this + 37);
  if (!v3 || *(_DWORD *)(v3[1] + 32) != 5) {
    return 0;
  }
  *a3 = v3;
  *((void *)this + 37) = *(void *)(v3[2] + 8 * a2);
  return 1;
}

uint64_t llvm::yaml::Input::postflightElement(uint64_t this, void *a2)
{
  *(void *)(this + 296) = a2;
  return this;
}

uint64_t llvm::yaml::Input::beginFlowSequence(llvm::yaml::Input *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 24))();
}

uint64_t llvm::yaml::Input::preflightFlowElement(llvm::yaml::Input *this, unsigned int a2, void **a3)
{
  if (*((_DWORD *)this + 26)) {
    return 0;
  }
  unsigned int v3 = (void *)*((void *)this + 37);
  if (!v3 || *(_DWORD *)(v3[1] + 32) != 5) {
    return 0;
  }
  *a3 = v3;
  *((void *)this + 37) = *(void *)(v3[2] + 8 * a2);
  return 1;
}

uint64_t llvm::yaml::Input::postflightFlowElement(uint64_t this, void *a2)
{
  *(void *)(this + 296) = a2;
  return this;
}

uint64_t llvm::yaml::Input::beginEnumScalar(uint64_t this)
{
  *(unsigned char *)(this + 304) = 0;
  return this;
}

uint64_t llvm::yaml::Input::matchEnumScalar(llvm::yaml::Input *this, const char *__s)
{
  if (*((unsigned char *)this + 304)) {
    return 0;
  }
  unsigned int v3 = (void *)*((void *)this + 37);
  if (!v3 || (*(_DWORD *)(v3[1] + 32) - 3) < 0xFFFFFFFE) {
    return 0;
  }
  size_t v6 = v3[3];
  if (__s)
  {
    uint64_t v7 = (const void *)v3[2];
    if (v6 == strlen(__s) && (!v6 || !memcmp(v7, __s, v6))) {
      goto LABEL_11;
    }
  }
  else if (!v6)
  {
LABEL_11:
    uint64_t result = 1;
    *((unsigned char *)this + 304) = 1;
    return result;
  }
  return 0;
}

BOOL llvm::yaml::Input::matchEnumFallback(llvm::yaml::Input *this)
{
  int v1 = *((unsigned __int8 *)this + 304);
  if (!*((unsigned char *)this + 304)) {
    *((unsigned char *)this + 304) = 1;
  }
  return v1 == 0;
}

const std::error_category *llvm::yaml::Input::endEnumScalar(const std::error_category *this)
{
  if (!LOBYTE(this[38].__vftable))
  {
    int v1 = this;
    uint64_t v2 = this[37].__vftable;
    unsigned int v3 = "unknown enumerated scalar";
    __int16 v4 = 259;
    llvm::yaml::Stream::printError((llvm *)this[11].__vftable, (uint64_t)v2->~error_category_0, (llvm::Twine *)&v3, 0);
    this = std::generic_category();
    v1[13].__vftable = (std::error_category_vtbl *)22;
    v1[14].__vftable = (std::error_category_vtbl *)this;
  }
  return this;
}

uint64_t llvm::yaml::Input::beginBitSetScalar(llvm::yaml::Input *this, BOOL *a2)
{
  *((_DWORD *)this + 72) = 0;
  *((_DWORD *)this + 58) = 0;
  __int16 v4 = (void *)*((void *)this + 37);
  uint64_t v5 = v4[1];
  if (v4) {
    BOOL v6 = *(_DWORD *)(v5 + 32) == 5;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    llvm::BitVector::resize((unsigned int *)this + 56, (v4[3] - v4[2]) >> 3, 0);
  }
  else
  {
    uint64_t v9 = "expected sequence of bit values";
    __int16 v10 = 259;
    llvm::yaml::Stream::printError(*((llvm **)this + 11), v5, (llvm::Twine *)&v9, 0);
    uint64_t v7 = std::generic_category();
    *((void *)this + 13) = 22;
    *((void *)this + 14) = v7;
  }
  *a2 = 1;
  return 1;
}

unsigned int *llvm::BitVector::resize(unsigned int *this, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = this;
  if ((this[16] & 0x3F) != 0)
  {
    uint64_t v4 = -1 << (this[16] & 0x3F);
    uint64_t v5 = this[2];
    uint64_t v6 = *(void *)this + 8 * v5;
    if (a3) {
      uint64_t v7 = *(void *)(v6 - 8) | v4;
    }
    else {
      uint64_t v7 = *(void *)(v6 - 8) & ~v4;
    }
    *(void *)(v6 - 8) = v7;
  }
  else
  {
    uint64_t v5 = this[2];
  }
  this[16] = a2;
  if (v5 != (a2 + 63) >> 6)
  {
    uint64_t v8 = (a2 + 63) >> 6;
    if (v5 <= v8)
    {
      this = llvm::SmallVectorImpl<unsigned long>::append(this, v8 - v5, a3 << 63 >> 63);
      a2 = v3[16];
    }
    else
    {
      this[2] = v8;
    }
  }
  if ((a2 & 0x3F) != 0)
  {
    uint64_t v9 = *(void *)v3 + 8 * v3[2];
    *(void *)(v9 - 8) &= ~(-1 << (a2 & 0x3F));
  }
  return this;
}

uint64_t llvm::yaml::Input::bitSetMatch(llvm::yaml::Input *this, const char *__s)
{
  if (*((_DWORD *)this + 26)) {
    return 0;
  }
  uint64_t v5 = (void *)*((void *)this + 37);
  uint64_t v6 = v5[1];
  if (v5) {
    BOOL v7 = *(_DWORD *)(v6 + 32) == 5;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    v18[0] = "expected sequence of bit values";
    __int16 v19 = 259;
    llvm::yaml::Stream::printError(*((llvm **)this + 11), v6, (llvm::Twine *)v18, 0);
    uint64_t v8 = std::generic_category();
    uint64_t result = 0;
    *((void *)this + 13) = 22;
    *((void *)this + 14) = v8;
    return result;
  }
  uint64_t v9 = (uint64_t *)v5[2];
  __int16 v10 = (uint64_t *)v5[3];
  if (v9 == v10) {
    return 0;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v12 = *v9;
    if (*v9) {
      BOOL v13 = (*(_DWORD *)(*(void *)(*v9 + 8) + 32) - 3) >= 0xFFFFFFFE;
    }
    else {
      BOOL v13 = 0;
    }
    if (!v13)
    {
      uint64_t v14 = *((void *)this + 37);
      v18[0] = "unexpected scalar in sequence of bit values";
      __int16 v19 = 259;
      llvm::yaml::Stream::printError(*((llvm **)this + 11), *(void *)(v14 + 8), (llvm::Twine *)v18, 0);
      unint64_t v15 = std::generic_category();
      *((void *)this + 13) = 22;
      *((void *)this + 14) = v15;
      goto LABEL_21;
    }
    size_t v16 = *(void *)(v12 + 24);
    if (__s) {
      break;
    }
    if (!v16) {
      goto LABEL_23;
    }
LABEL_21:
    if (++v9 == v10) {
      return 0;
    }
  }
  uint64_t v17 = *(const void **)(v12 + 16);
  if (v16 != strlen(__s) || v16 && memcmp(v17, __s, v16)) {
    goto LABEL_21;
  }
LABEL_23:
  uint64_t result = 1;
  *(void *)(*((void *)this + 28) + 8 * (i >> 6)) |= 1 << i;
  return result;
}

const std::error_category *llvm::yaml::Input::endBitSetScalar(const std::error_category *this)
{
  if (!LODWORD(this[13].__vftable))
  {
    int v1 = this;
    uint64_t v2 = this[37].__vftable;
    if (v2 && *((_DWORD *)v2->~error_category_0 + 8) == 5)
    {
      p_name = &v2->name;
      name = v2->name;
      uint64_t v5 = p_name[1];
      uint64_t v7 = (char *)v5 - (char *)name;
      if (v5 != name)
      {
        uint64_t v8 = this[28].__vftable;
        if ((uint64_t)v8->~error_category)
        {
          unint64_t v10 = v7 >> 3;
          unsigned int v11 = 1;
          while (v10 > v11)
          {
            uint64_t v9 = v11;
            unint64_t v12 = *((void *)&v8->~error_category + (v11++ >> 6));
            if (((v12 >> v9) & 1) == 0) {
              goto LABEL_13;
            }
          }
        }
        else
        {
          uint64_t v9 = 0;
LABEL_13:
          uint64_t v13 = *((void *)name + v9);
          uint64_t v14 = "unknown bit value";
          __int16 v15 = 259;
          llvm::yaml::Stream::printError((llvm *)this[11].__vftable, *(void *)(v13 + 8), (llvm::Twine *)&v14, 0);
          this = std::generic_category();
          v1[13].__vftable = (std::error_category_vtbl *)22;
          v1[14].__vftable = (std::error_category_vtbl *)this;
        }
      }
    }
  }
  return this;
}

__n128 llvm::yaml::Input::scalarString(uint64_t a1, __n128 *a2)
{
  unsigned int v3 = *(__n128 **)(a1 + 296);
  uint64_t v4 = v3->n128_i64[1];
  if (v3) {
    BOOL v5 = (*(_DWORD *)(v4 + 32) - 3) >= 0xFFFFFFFE;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    __n128 result = v3[1];
    *a2 = result;
  }
  else
  {
    uint64_t v9 = "unexpected scalar";
    __int16 v10 = 259;
    llvm::yaml::Stream::printError(*(llvm **)(a1 + 88), v4, (llvm::Twine *)&v9, 0);
    uint64_t v7 = std::generic_category();
    *(void *)(a1 + 104) = 22;
    *(void *)(a1 + 112) = v7;
  }
  return result;
}

uint64_t llvm::yaml::Input::blockScalarString(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, a2, 0);
}

double llvm::yaml::Input::scalarTag(uint64_t a1, uint64_t a2)
{
  llvm::yaml::Node::getVerbatimTag(*(llvm::yaml::Node **)(*(void *)(a1 + 296) + 8), (uint64_t)&v4);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

uint64_t llvm::yaml::Input::getNodeKind(llvm::yaml::Input *this)
{
  int v1 = *(_DWORD *)(*(void *)(*((void *)this + 37) + 8) + 32);
  unsigned int v2 = v1 - 1;
  if (v1 == 4) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = 2;
  }
  if (v2 >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

const std::error_category *llvm::yaml::Input::setError(llvm **this, const llvm::Twine *a2)
{
  llvm::yaml::Stream::printError(this[11], *((void *)this[37] + 1), a2, 0);
  double result = std::generic_category();
  this[13] = (llvm *)22;
  this[14] = (llvm *)result;
  return result;
}

uint64_t llvm::yaml::Input::setAllowUnknownKeys(uint64_t this, char a2)
{
  *(unsigned char *)(this + 305) = a2;
  return this;
}

uint64_t llvm::yaml::Input::canElideEmptySequence(llvm::yaml::Input *this)
{
  return 0;
}

uint64_t llvm::yaml::ScalarTraits<std::string,void>::input(void *__src, size_t __len, uint64_t a3, uint64_t a4)
{
  if (__src)
  {
    std::string::basic_string[abi:nn180100](&__dst, __src, __len);
  }
  else
  {
    long long __dst = 0uLL;
    uint64_t v7 = 0;
  }
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = __dst;
  *(void *)(a4 + 16) = v7;
  return 0;
}

const char *llvm::yaml::ScalarTraits<unsigned int,void>::input(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v7 = 0;
  uint64_t v8 = a1;
  uint64_t v9 = a2;
  char v5 = llvm::consumeUnsignedInteger((llvm *)&v8, 0, &v7, a4);
  double result = "invalid number";
  if ((v5 & 1) == 0 && !v9)
  {
    if (HIDWORD(v7))
    {
      return "out of range number";
    }
    else
    {
      double result = 0;
      *(_DWORD *)a4 = v7;
    }
  }
  return result;
}

void llvm::yaml::Input::EmptyHNode::~EmptyHNode(llvm::yaml::Input::EmptyHNode *this)
{
}

void llvm::yaml::Input::ScalarHNode::~ScalarHNode(llvm::yaml::Input::ScalarHNode *this)
{
}

void llvm::yaml::Input::MapHNode::~MapHNode(char **this)
{
  *this = (char *)&unk_270DBD4F8;
  int v1 = (char *)(this + 2);
  llvm::SmallVector<std::string,2u>::~SmallVector(this + 5);
  llvm::StringMap<std::pair<std::unique_ptr<llvm::yaml::Input::HNode>,llvm::SMRange>,llvm::MallocAllocator>::~StringMap((uint64_t)v1);
}

{
  char *v1;
  uint64_t vars8;

  *this = (char *)&unk_270DBD4F8;
  int v1 = (char *)(this + 2);
  llvm::SmallVector<std::string,2u>::~SmallVector(this + 5);
  llvm::StringMap<std::pair<std::unique_ptr<llvm::yaml::Input::HNode>,llvm::SMRange>,llvm::MallocAllocator>::~StringMap((uint64_t)v1);
  JUMPOUT(0x263E500B0);
}

void llvm::yaml::Input::SequenceHNode::~SequenceHNode(llvm::yaml::Input::SequenceHNode *this)
{
  *(void *)this = &unk_270DBD520;
  int v1 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<llvm::yaml::Input::HNode>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

{
  void **v1;
  uint64_t vars8;

  *(void *)this = &unk_270DBD520;
  int v1 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<llvm::yaml::Input::HNode>>::__destroy_vector::operator()[abi:nn180100](&v1);
  JUMPOUT(0x263E500B0);
}

unsigned int *llvm::SmallVectorImpl<unsigned long>::append(unsigned int *result, uint64_t a2, uint64_t a3)
{
  char v5 = result;
  uint64_t v6 = result[2];
  if (v6 + a2 > (unint64_t)result[3])
  {
    double result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v6 + a2, 8);
    uint64_t v6 = v5[2];
    if (!a2) {
      goto LABEL_5;
    }
  }
  else if (!a2)
  {
    goto LABEL_5;
  }
  unint64_t v7 = (void *)(*(void *)v5 + 8 * v6);
  uint64_t v8 = a2;
  do
  {
    *v7++ = a3;
    --v8;
  }
  while (v8);
LABEL_5:
  void v5[2] = v6 + a2;
  return result;
}

uint64_t llvm::StringMap<std::pair<std::unique_ptr<llvm::yaml::Input::HNode>,llvm::SMRange>,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          uint64_t v7 = *(void *)(v5 + 8);
          *(void *)(v5 + 8) = 0;
          if (v7) {
            (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
          }
          MEMORY[0x263E500A0](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void std::vector<std::unique_ptr<llvm::yaml::Input::HNode>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

llvm::yaml::Stream *std::unique_ptr<llvm::yaml::Stream>::reset[abi:nn180100](llvm::yaml::Stream **a1, llvm::yaml::Stream *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::yaml::Stream::~Stream(result);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

unint64_t **llvm::StringMap<std::pair<std::unique_ptr<llvm::yaml::Input::HNode>,llvm::SMRange>,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  unsigned int i = (unint64_t **)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *i;
  if (*i == (unint64_t *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v8)
  {
    while (!v8 || v8 == (unint64_t *)-8)
    {
      uint64_t v9 = i[1];
      ++i;
      uint64_t v8 = v9;
    }
    return i;
  }
  unsigned int v11 = operator new(a3 + 33, (std::align_val_t)8uLL);
  unint64_t v12 = v11;
  uint64_t v13 = (char *)(v11 + 4);
  if (a3) {
    memcpy(v11 + 4, a2, a3);
  }
  v13[a3] = 0;
  *unint64_t v12 = a3;
  v12[1] = 0;
  void v12[2] = 0;
  void v12[3] = 0;
  *unsigned int i = v12;
  ++*((_DWORD *)a1 + 3);
  for (unsigned int i = (unint64_t **)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

uint64_t std::__find_impl[abi:nn180100]<std::string *,std::string *,llvm::StringRef,std::__identity>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    uint64_t v5 = *(const void **)a3;
    size_t v6 = *(void *)(a3 + 8);
    while (1)
    {
      int v7 = *(char *)(v3 + 23);
      BOOL v8 = v7 < 0;
      uint64_t v9 = v7 >= 0 ? (const void *)v3 : *(const void **)v3;
      uint64_t v10 = *(unsigned __int8 *)(v3 + 23);
      if (v8) {
        uint64_t v10 = *(void *)(v3 + 8);
      }
      if (v10 == v6 && (!v6 || !memcmp(v9, v5, v6))) {
        break;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

uint64_t llvm::format_object<unsigned int>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

void llvm::raw_ostream::~raw_ostream(llvm::raw_ostream *this)
{
  *(void *)this = &unk_270DBD568;
  if (*((_DWORD *)this + 14) == 1)
  {
    uint64_t v1 = *((void *)this + 2);
    if (v1) {
      MEMORY[0x263E50080](v1, 0x1000C8077774924);
    }
  }
}

uint64_t llvm::raw_ostream::preferred_buffer_size(llvm::raw_ostream *this)
{
  return 1024;
}

void *llvm::raw_ostream::SetBuffered(llvm::raw_ostream *this)
{
  if ((*(uint64_t (**)(llvm::raw_ostream *))(*(void *)this + 88))(this))
  {
    llvm::raw_ostream::SetBufferSize(this);
  }
  return llvm::raw_ostream::SetUnbuffered(this);
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  v14[16] = *MEMORY[0x263EF8340];
  unint64_t v4 = *((void *)a1 + 3) - *((void *)a1 + 4);
  if (v4 <= 3)
  {
    unint64_t v7 = 127;
  }
  else
  {
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
    if (v5 < v4) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = v5 + 1;
    }
    if (v5 >= 0) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = (2 * v4);
    }
    if (v4 >= v7)
    {
      *((void *)a1 + 4) += v7;
      return a1;
    }
  }
  unint64_t v12 = (char *)v14;
  long long v13 = xmmword_261E8A720;
  do
  {
    unint64_t v8 = v7;
    llvm::SmallVectorImpl<char>::resizeImpl<false>(&v12, v7);
    int v9 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 8))(a2, v12, v8);
    if (v9 < v8) {
      unsigned int v10 = v9;
    }
    else {
      unsigned int v10 = v9 + 1;
    }
    if (v9 >= 0) {
      unint64_t v7 = v10;
    }
    else {
      unint64_t v7 = (2 * v8);
    }
  }
  while (v8 < v7);
  llvm::raw_ostream::write(a1, v12, v7);
  if (v12 != (char *)v14) {
    free(v12);
  }
  return a1;
}

{
  int v4;
  BOOL v5;
  int v6;
  BOOL v7;
  BOOL v8;
  int v9;
  size_t v10;
  size_t v11;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  char **v21;
  char *v22;
  size_t __n[2];
  void v24[3];

  void v24[2] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 20))
  {
    unint64_t v4 = *(unsigned __int8 *)(a2 + 22);
    if (*(unsigned char *)(a2 + 22)) {
      int v5 = *(unsigned char *)(a2 + 21) == 0;
    }
    else {
      int v5 = 0;
    }
    if (v5) {
      unsigned int v6 = 3;
    }
    else {
      unsigned int v6 = 1;
    }
    if (*(unsigned char *)(a2 + 21)) {
      unint64_t v7 = v4 == 0;
    }
    else {
      unint64_t v7 = 0;
    }
    if (v7) {
      unsigned int v6 = 0;
    }
    if (*(unsigned char *)(a2 + 21)) {
      unint64_t v8 = v4 == 0;
    }
    else {
      unint64_t v8 = 1;
    }
    if (v8) {
      int v9 = v6;
    }
    else {
      int v9 = 2;
    }
    llvm::write_hex(a1, *(void *)a2, v9, *(unsigned int *)(a2 + 16), 1);
  }
  else
  {
    __int16 v21 = &v22;
    int v22 = (char *)v24;
    *(_OWORD *)__n = xmmword_261E8D180;
    uint64_t v14 = 0;
    __int16 v18 = 0;
    __int16 v19 = 0;
    unint64_t v20 = 1;
    size_t v16 = 0;
    uint64_t v17 = 0;
    __int16 v15 = 0;
    long long v13 = &unk_270DBD758;
    llvm::raw_ostream::SetUnbuffered(&v13);
    llvm::write_integer((llvm::raw_ostream *)&v13, *(void *)(a2 + 8), 0, 0);
    unsigned int v10 = __n[0];
    unsigned int v11 = *(unsigned int *)(a2 + 16);
    if (__n[0] < v11)
    {
      llvm::raw_ostream::indent(a1, (v11 - LODWORD(__n[0])));
      unsigned int v10 = __n[0];
    }
    llvm::raw_ostream::write(a1, v22, v10);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v13);
    if (v22 != (char *)v24) {
      free(v22);
    }
  }
  return a1;
}

llvm::raw_ostream *llvm::raw_ostream::write_escaped(llvm::raw_ostream *result, char *a2, uint64_t a3, int a4)
{
  if (a3)
  {
    for (uint64_t i = a3; i; --i)
    {
      unint64_t v7 = *a2;
      if (*a2 > 0x21u)
      {
        if (v7 == 34)
        {
          unsigned int v11 = (unsigned char *)*((void *)result + 4);
          if ((unint64_t)v11 >= *((void *)result + 3))
          {
            double result = llvm::raw_ostream::write(result, 92);
          }
          else
          {
            *((void *)result + 4) = v11 + 1;
            *unsigned int v11 = 92;
          }
          uint64_t v17 = (unsigned char *)*((void *)result + 4);
          if ((unint64_t)v17 >= *((void *)result + 3))
          {
            char v18 = 34;
            goto LABEL_59;
          }
          *((void *)result + 4) = v17 + 1;
          *uint64_t v17 = 34;
        }
        else
        {
          if (v7 != 92)
          {
LABEL_16:
            unint64_t v13 = *((void *)result + 3);
            unint64_t v12 = (unsigned char *)*((void *)result + 4);
            if ((v7 - 32) > 0x5E)
            {
              if (a4)
              {
                if ((unint64_t)v12 >= v13)
                {
                  double result = llvm::raw_ostream::write(result, 92);
                }
                else
                {
                  *((void *)result + 4) = v12 + 1;
                  *unint64_t v12 = 92;
                }
                __int16 v19 = (unsigned char *)*((void *)result + 4);
                if ((unint64_t)v19 >= *((void *)result + 3))
                {
                  double result = llvm::raw_ostream::write(result, 120);
                }
                else
                {
                  *((void *)result + 4) = v19 + 1;
                  *__int16 v19 = 120;
                }
                char v22 = llvm::hexdigit(unsigned int,BOOL)::LUT[v7 >> 4];
                unint64_t v23 = (char *)*((void *)result + 4);
                if ((unint64_t)v23 >= *((void *)result + 3))
                {
                  double result = llvm::raw_ostream::write(result, v22);
                }
                else
                {
                  *((void *)result + 4) = v23 + 1;
                  char *v23 = v22;
                }
                char v18 = llvm::hexdigit(unsigned int,BOOL)::LUT[v7 & 0xF];
              }
              else
              {
                if ((unint64_t)v12 >= v13)
                {
                  double result = llvm::raw_ostream::write(result, 92);
                }
                else
                {
                  *((void *)result + 4) = v12 + 1;
                  *unint64_t v12 = 92;
                }
                unsigned int v20 = (v7 >> 6) | 0x30;
                __int16 v21 = (unsigned char *)*((void *)result + 4);
                if ((unint64_t)v21 >= *((void *)result + 3))
                {
                  double result = llvm::raw_ostream::write(result, v20);
                }
                else
                {
                  *((void *)result + 4) = v21 + 1;
                  *__int16 v21 = v20;
                }
                unsigned int v24 = (v7 >> 3) & 7 | 0x30;
                char v25 = (unsigned char *)*((void *)result + 4);
                if ((unint64_t)v25 >= *((void *)result + 3))
                {
                  double result = llvm::raw_ostream::write(result, v24);
                }
                else
                {
                  *((void *)result + 4) = v25 + 1;
                  unsigned char *v25 = v24;
                }
                char v18 = v7 & 7 | 0x30;
              }
              char v26 = (char *)*((void *)result + 4);
              if ((unint64_t)v26 >= *((void *)result + 3)) {
                goto LABEL_59;
              }
              *((void *)result + 4) = v26 + 1;
              *char v26 = v18;
            }
            else
            {
              if ((unint64_t)v12 >= v13)
              {
                char v18 = *a2;
                goto LABEL_59;
              }
              *((void *)result + 4) = v12 + 1;
              *unint64_t v12 = v7;
            }
            goto LABEL_60;
          }
          int v9 = (unsigned char *)*((void *)result + 4);
          if ((unint64_t)v9 >= *((void *)result + 3))
          {
            double result = llvm::raw_ostream::write(result, 92);
          }
          else
          {
            *((void *)result + 4) = v9 + 1;
            *int v9 = 92;
          }
          __int16 v15 = (unsigned char *)*((void *)result + 4);
          if ((unint64_t)v15 >= *((void *)result + 3))
          {
            char v18 = 92;
            goto LABEL_59;
          }
          *((void *)result + 4) = v15 + 1;
          *__int16 v15 = 92;
        }
      }
      else if (v7 == 9)
      {
        unsigned int v10 = (unsigned char *)*((void *)result + 4);
        if ((unint64_t)v10 >= *((void *)result + 3))
        {
          double result = llvm::raw_ostream::write(result, 92);
        }
        else
        {
          *((void *)result + 4) = v10 + 1;
          *unsigned int v10 = 92;
        }
        size_t v16 = (unsigned char *)*((void *)result + 4);
        if ((unint64_t)v16 >= *((void *)result + 3))
        {
          char v18 = 116;
          goto LABEL_59;
        }
        *((void *)result + 4) = v16 + 1;
        *size_t v16 = 116;
      }
      else
      {
        if (v7 != 10) {
          goto LABEL_16;
        }
        unint64_t v8 = (unsigned char *)*((void *)result + 4);
        if ((unint64_t)v8 >= *((void *)result + 3))
        {
          double result = llvm::raw_ostream::write(result, 92);
        }
        else
        {
          *((void *)result + 4) = v8 + 1;
          *unint64_t v8 = 92;
        }
        uint64_t v14 = (unsigned char *)*((void *)result + 4);
        if ((unint64_t)v14 >= *((void *)result + 3))
        {
          char v18 = 110;
LABEL_59:
          double result = llvm::raw_ostream::write(result, v18);
          goto LABEL_60;
        }
        *((void *)result + 4) = v14 + 1;
        *uint64_t v14 = 110;
      }
LABEL_60:
      ++a2;
    }
  }
  return result;
}

uint64_t llvm::raw_ostream::flush_tied_then_write(llvm::raw_ostream *this, const char *a2, uint64_t a3)
{
  unsigned int v6 = (llvm::raw_ostream *)*((void *)this + 6);
  if (v6)
  {
    unint64_t v7 = (const char *)*((void *)v6 + 4);
    unint64_t v8 = (const char *)*((void *)v6 + 2);
    if (v7 != v8)
    {
      *((void *)v6 + 4) = v8;
      llvm::raw_ostream::flush_tied_then_write(v6, v8, v7 - v8);
    }
  }
  int v9 = *(uint64_t (**)(llvm::raw_ostream *, const char *, uint64_t))(*(void *)this + 72);
  return v9(this, a2, a3);
}

llvm::raw_ostream *llvm::raw_ostream::write(llvm::raw_ostream *this, char a2)
{
  unint64_t v5 = *((void *)this + 3);
  for (uint64_t i = (char *)*((void *)this + 4); ; uint64_t i = (char *)*((void *)this + 4))
  {
    if ((unint64_t)i < v5) {
      goto LABEL_7;
    }
    unsigned int v6 = (const char *)*((void *)this + 2);
    if (v6)
    {
      *((void *)this + 4) = v6;
      llvm::raw_ostream::flush_tied_then_write(this, v6, i - v6);
      uint64_t i = (char *)*((void *)this + 4);
LABEL_7:
      *((void *)this + 4) = i + 1;
      *uint64_t i = a2;
      return this;
    }
    if (!*((_DWORD *)this + 14)) {
      break;
    }
    llvm::raw_ostream::SetBuffered(this);
    unint64_t v5 = *((void *)this + 3);
  }
  char v8 = a2;
  llvm::raw_ostream::flush_tied_then_write(this, &v8, 1);
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::write(llvm::raw_ostream *this, const char *a2, size_t __n)
{
  size_t v3 = __n;
  uint64_t v6 = *((void *)this + 4);
  size_t v7 = *((void *)this + 3) - v6;
  if (v7 < __n)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v12 = *((void *)this + 2);
        if (!v12) {
          break;
        }
        if (v6 == v12)
        {
          v7 *= v3 / v7;
          v3 -= v7;
          llvm::raw_ostream::flush_tied_then_write(this, a2, v7);
          uint64_t v6 = *((void *)this + 4);
          size_t v11 = *((void *)this + 3) - v6;
          if (v3 <= v11)
          {
            int v9 = &a2[v7];
            char v8 = (void **)this;
            goto LABEL_3;
          }
        }
        else
        {
          llvm::raw_ostream::copy_to_buffer((void **)this, a2, v7);
          unint64_t v13 = (const char *)*((void *)this + 2);
          uint64_t v14 = *((void *)this + 4) - (void)v13;
          *((void *)this + 4) = v13;
          llvm::raw_ostream::flush_tied_then_write(this, v13, v14);
          v3 -= v7;
          uint64_t v6 = *((void *)this + 4);
          size_t v11 = *((void *)this + 3) - v6;
        }
        a2 += v7;
        size_t v7 = v11;
        if (v11 >= v3) {
          goto LABEL_2;
        }
      }
      if (!*((_DWORD *)this + 14)) {
        break;
      }
      llvm::raw_ostream::SetBuffered(this);
      uint64_t v6 = *((void *)this + 4);
      size_t v7 = *((void *)this + 3) - v6;
      if (v7 >= v3) {
        goto LABEL_2;
      }
    }
    llvm::raw_ostream::flush_tied_then_write(this, a2, v3);
  }
  else
  {
LABEL_2:
    char v8 = (void **)this;
    int v9 = a2;
LABEL_3:
    llvm::raw_ostream::copy_to_buffer(v8, v9, v3);
  }
  return this;
}

void **llvm::raw_ostream::copy_to_buffer(void **this, const char *a2, size_t __n)
{
  unint64_t v4 = this;
  switch(__n)
  {
    case 0uLL:
      break;
    case 1uLL:
      goto LABEL_5;
    case 2uLL:
      goto LABEL_4;
    case 3uLL:
      goto LABEL_3;
    case 4uLL:
      *((unsigned char *)this[4] + 3) = a2[3];
LABEL_3:
      *((unsigned char *)this[4] + 2) = a2[2];
LABEL_4:
      *((unsigned char *)this[4] + 1) = a2[1];
LABEL_5:
      *(unsigned char *)this[4] = *a2;
      break;
    default:
      this = (void **)memcpy(this[4], a2, __n);
      break;
  }
  void v4[4] = (char *)v4[4] + __n;
  return this;
}

void llvm::formatv_object_base::format(llvm::formatv_object_base *this, llvm::raw_ostream *a2)
{
  unsigned char v38[8] = *MEMORY[0x263EF8340];
  llvm::formatv_object_base::parseFormatString(*(unsigned char **)this, *((void *)this + 1), &v33);
  unint64_t v4 = (uint64_t *)v33;
  if (!v34) {
    goto LABEL_22;
  }
  unint64_t v5 = (unint64_t)v34 << 6;
  uint64_t v6 = (char *)v33 + 32;
  do
  {
    int v7 = *((_DWORD *)v6 - 8);
    if (!v7) {
      goto LABEL_12;
    }
    if (v7 == 2 || (unint64_t v8 = *((void *)v6 - 1), v8 >= *((void *)this + 3)))
    {
      llvm::raw_ostream::operator<<(a2, *((const void **)v6 - 3), *((void *)v6 - 2));
      goto LABEL_12;
    }
    uint64_t v9 = *(void *)(*((void *)this + 2) + 8 * v8);
    int v10 = *((_DWORD *)v6 + 2);
    unint64_t v11 = *(void *)v6;
    char v12 = v6[12];
    uint64_t v20 = v9;
    int v21 = v10;
    unint64_t v22 = v11;
    char v23 = v12;
    uint64_t v14 = *((void *)v6 + 2);
    uint64_t v13 = *((void *)v6 + 3);
    if (!v11)
    {
      (*(void (**)(uint64_t, llvm::raw_ostream *, uint64_t, uint64_t))(*(void *)v9 + 24))(v9, a2, v14, v13);
      goto LABEL_12;
    }
    long long v36 = (char *)v38;
    long long v37 = xmmword_261E8ACE0;
    int v25 = 0;
    char v29 = 0;
    uint64_t v30 = 0;
    int v31 = 1;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v26 = 0;
    unsigned int v24 = &unk_270DBD758;
    __int16 v32 = (void **)&v36;
    llvm::raw_ostream::SetUnbuffered(&v24);
    (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(void *)v9 + 24))(v9, &v24, v14, v13);
    size_t v15 = v37;
    unint64_t v16 = v11 - v37;
    if (v11 <= (unint64_t)v37)
    {
      __int16 v19 = v36;
    }
    else
    {
      if (v10 == 1)
      {
        llvm::FmtAlign::fill((llvm::raw_ostream *)&v20, a2, v16 >> 1);
        llvm::raw_ostream::write(a2, v36, v37);
        int v18 = v16 - (v16 >> 1);
        uint64_t v17 = a2;
        goto LABEL_17;
      }
      if (!v10)
      {
        llvm::raw_ostream::write(a2, v36, v37);
        uint64_t v17 = a2;
        int v18 = v16;
LABEL_17:
        llvm::FmtAlign::fill((llvm::raw_ostream *)&v20, v17, v18);
        goto LABEL_20;
      }
      llvm::FmtAlign::fill((llvm::raw_ostream *)&v20, a2, v11 - v37);
      __int16 v19 = v36;
      size_t v15 = v37;
    }
    llvm::raw_ostream::write(a2, v19, v15);
LABEL_20:
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v24);
    if (v36 != (char *)v38) {
      free(v36);
    }
LABEL_12:
    v6 += 64;
    v5 -= 64;
  }
  while (v5);
  unint64_t v4 = (uint64_t *)v33;
LABEL_22:
  if (v4 != &v35) {
    free(v4);
  }
}

llvm::raw_ostream *llvm::raw_ostream::indent(llvm::raw_ostream *this, size_t __n)
{
  unsigned int v2 = __n;
  if (__n < 0x50) {
    return llvm::raw_ostream::write(this, "                                                                                ", __n);
  }
  do
  {
    if (v2 >= 0x4F) {
      size_t v3 = 79;
    }
    else {
      size_t v3 = v2;
    }
    this = llvm::raw_ostream::write(this, "                                                                                ", v3);
    v2 -= v3;
  }
  while (v2);
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::changeColor(llvm::raw_ostream *a1, int a2, int a3, int a4)
{
  if (*((unsigned char *)a1 + 40))
  {
    if (a2 == 8) {
      unint64_t v5 = "\x1B[1m";
    }
    else {
      unint64_t v5 = &colorcodes[160 * a4 + 80 * a3 + 10 * (a2 & 7)];
    }
    size_t v6 = strlen(v5);
    llvm::raw_ostream::write(a1, v5, v6);
  }
  return a1;
}

llvm::raw_ostream *llvm::raw_ostream::resetColor(llvm::raw_ostream *this)
{
  if (*((unsigned char *)this + 40)) {
    return llvm::raw_ostream::write(this, "\x1B[0m", 4uLL);
  }
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::reverseColor(llvm::raw_ostream *this)
{
  if (*((unsigned char *)this + 40)) {
    return llvm::raw_ostream::write(this, "\x1B[7m", 4uLL);
  }
  return this;
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, int a5)
{
  int FD = getFD(a2, a3, a4, 0, 2, a5);
  return llvm::raw_fd_ostream::raw_fd_ostream(a1, FD, 1, 0, 0);
}

uint64_t getFD(unsigned char *a1, uint64_t a2, uint64_t a3, int a4, char a5, int a6)
{
  if (a2 == 1 && *a1 == 45)
  {
    int v7 = std::system_category();
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = v7;
    std::system_category();
    return 1;
  }
  else
  {
    unsigned int v15 = 0;
    __int16 v14 = 261;
    v13[0] = a1;
    v13[1] = a2;
    if (a5) {
      int v10 = 3;
    }
    else {
      int v10 = 2;
    }
    uint64_t v11 = llvm::sys::fs::openFile((uint64_t)v13, (int *)&v15, a4, v10, a6, 438);
    *(void *)a3 = v11;
    *(void *)(a3 + 8) = v12;
    if (v11) {
      return 0xFFFFFFFFLL;
    }
    else {
      return v15;
    }
  }
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream(uint64_t a1, int a2, char a3, int a4, int a5)
{
  *(_DWORD *)(a1 + 8) = a5;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = a4 ^ 1;
  *(_DWORD *)(a1 + 60) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_270DBD5E0;
  *(unsigned char *)(a1 + 64) = a3;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 65) = 0;
  *(void *)(a1 + 80) = std::system_category();
  *(void *)(a1 + 88) = 0;
  if ((*(_DWORD *)(a1 + 60) & 0x80000000) != 0)
  {
    *(unsigned char *)(a1 + 64) = 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 1);
    int v6 = *(_DWORD *)(a1 + 60);
    if (v6 <= 2) {
      *(unsigned char *)(a1 + 64) = 0;
    }
    off_t v7 = lseek(v6, 0, 1);
    memset(v12, 0, 44);
    int v8 = fstat(*(_DWORD *)(a1 + 60), &v13);
    int v9 = llvm::sys::fs::fillStatus(v8, &v13.st_dev, (uint64_t)v12);
    *(unsigned char *)(a1 + 66) = DWORD2(v12[2]) == 2;
    *(unsigned char *)(a1 + 65) = v9 == 0 && v7 != -1;
    if (v9 == 0 && v7 != -1) {
      off_t v10 = v7;
    }
    else {
      off_t v10 = 0;
    }
    *(void *)(a1 + 88) = v10;
  }
  return a1;
}

void llvm::raw_fd_ostream::~raw_fd_ostream(llvm::raw_fd_ostream *this)
{
  *(void *)this = &unk_270DBD5E0;
  if ((*((_DWORD *)this + 15) & 0x80000000) == 0)
  {
    unsigned int v2 = (const char *)*((void *)this + 4);
    size_t v3 = (const char *)*((void *)this + 2);
    if (v2 != v3)
    {
      *((void *)this + 4) = v3;
      llvm::raw_ostream::flush_tied_then_write(this, v3, v2 - v3);
    }
    if (*((unsigned char *)this + 64))
    {
      uint64_t v4 = llvm::sys::Process::SafelyCloseFileDescriptor((llvm::sys::Process *)*((unsigned int *)this + 15));
      if (v4)
      {
        *((void *)this + 9) = v4;
        *((void *)this + 10) = v5;
      }
    }
  }
  if (*((_DWORD *)this + 18))
  {
    off_t v10 = "IO failure on output stream: ";
    __int16 v11 = 259;
    std::error_code v6 = *(std::error_code *)((char *)this + 72);
    std::error_code::message(&v7, &v6);
    __int16 v9 = 260;
    int v8 = &v7;
    llvm::operator+((uint64_t *)&v10, (uint64_t *)&v8, (uint64_t)v12);
    llvm::report_fatal_error((llvm *)v12, 0);
  }
  llvm::raw_ostream::~raw_ostream(this);
}

{
  uint64_t vars8;

  llvm::raw_fd_ostream::~raw_fd_ostream(this);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::raw_fd_ostream::write_impl(llvm::raw_fd_ostream *this, const char *__buf, unint64_t a3)
{
  unint64_t v3 = a3;
  *((void *)this + 11) += a3;
  while (1)
  {
    size_t v6 = v3 >= 0x7FFFFFFF ? 0x7FFFFFFFLL : v3;
    uint64_t result = write(*((_DWORD *)this + 15), __buf, v6);
    if (result < 0) {
      break;
    }
    __buf += result;
    v3 -= result;
LABEL_10:
    if (!v3) {
      return result;
    }
  }
  uint64_t result = (uint64_t)__error();
  if (*(_DWORD *)result == 4) {
    goto LABEL_10;
  }
  uint64_t result = (uint64_t)__error();
  if (*(_DWORD *)result == 35) {
    goto LABEL_10;
  }
  uint64_t result = (uint64_t)__error();
  if (*(_DWORD *)result == 35) {
    goto LABEL_10;
  }
  uint64_t v8 = *__error();
  uint64_t result = (uint64_t)std::generic_category();
  *((void *)this + 9) = v8;
  *((void *)this + 10) = result;
  return result;
}

off_t llvm::raw_fd_ostream::seek(llvm::raw_fd_ostream *this, off_t a2)
{
  uint64_t v4 = (const char *)*((void *)this + 4);
  uint64_t v5 = (const char *)*((void *)this + 2);
  if (v4 != v5)
  {
    *((void *)this + 4) = v5;
    llvm::raw_ostream::flush_tied_then_write(this, v5, v4 - v5);
  }
  off_t result = lseek(*((_DWORD *)this + 15), a2, 0);
  *((void *)this + 11) = result;
  if (result == -1)
  {
    uint64_t v7 = *__error();
    uint64_t v8 = std::generic_category();
    *((void *)this + 9) = v7;
    *((void *)this + 10) = v8;
    return *((void *)this + 11);
  }
  return result;
}

off_t llvm::raw_fd_ostream::pwrite_impl(llvm::raw_fd_ostream *this, const char *a2, size_t a3, off_t a4)
{
  off_t v8 = (*(uint64_t (**)(llvm::raw_fd_ostream *))(*(void *)this + 80))(this)
     + *((void *)this + 4)
     - *((void *)this + 2);
  llvm::raw_fd_ostream::seek(this, a4);
  __int16 v9 = llvm::raw_ostream::write(this, a2, a3);
  return llvm::raw_fd_ostream::seek(v9, v8);
}

uint64_t llvm::raw_fd_ostream::preferred_buffer_size(llvm::raw_fd_ostream *this)
{
  if (fstat(*((_DWORD *)this + 15), &v3)
    || (v3.st_mode & 0xF000) == 0x2000
    && ((*(uint64_t (**)(llvm::raw_fd_ostream *))(*(void *)this + 48))(this) & 1) != 0)
  {
    return 0;
  }
  else
  {
    return v3.st_blksize;
  }
}

BOOL llvm::raw_fd_ostream::is_displayed(llvm::raw_fd_ostream *this)
{
  return isatty(*((_DWORD *)this + 15)) != 0;
}

uint64_t llvm::raw_fd_ostream::has_colors(llvm::raw_fd_ostream *this)
{
  if (*((unsigned char *)this + 68)) {
    return *((unsigned char *)this + 67) != 0;
  }
  uint64_t result = llvm::sys::Process::FileDescriptorHasColors((llvm::sys::Process *)*((unsigned int *)this + 15));
  *(_WORD *)((char *)this + 67) = result | 0x100;
  return result;
}

void *llvm::outs(llvm *this)
{
  int v2 = 0;
  stat v3 = std::system_category();
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_5, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_5))
  {
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&unk_26B4179A8, "-", 1, (uint64_t)&v2, 0);
    __cxa_atexit((void (*)(void *))llvm::raw_fd_ostream::~raw_fd_ostream, &unk_26B4179A8, &dword_261C2B000);
    __cxa_guard_release(&_MergedGlobals_5);
  }
  return &unk_26B4179A8;
}

void *llvm::errs(llvm *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26B417958, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26B417958))
  {
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&unk_26B417A08, 2, 0, 1, 0);
    __cxa_atexit((void (*)(void *))llvm::raw_fd_ostream::~raw_fd_ostream, &unk_26B417A08, &dword_261C2B000);
    __cxa_guard_release(&qword_26B417958);
  }
  return &unk_26B417A08;
}

uint64_t *llvm::nulls(llvm *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26B417960, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26B417960))
  {
    dword_26B417970 = 0;
    byte_26B417990 = 0;
    qword_26B417998 = 0;
    dword_26B4179A0 = 1;
    qword_26B417980 = 0;
    unk_26B417988 = 0;
    qword_26B417978 = 0;
    qword_26B417968 = (uint64_t)&unk_270DBD660;
    __cxa_atexit((void (*)(void *))llvm::raw_null_ostream::~raw_null_ostream, &qword_26B417968, &dword_261C2B000);
    __cxa_guard_release(&qword_26B417960);
  }
  return &qword_26B417968;
}

std::string *llvm::raw_string_ostream::write_impl(std::string **this, const char *a2, std::string::size_type a3)
{
  return std::string::append(this[8], a2, a3);
}

uint64_t llvm::raw_svector_ostream::current_pos(llvm::raw_svector_ostream *this)
{
  return *(void *)(*((void *)this + 8) + 8);
}

void *llvm::raw_svector_ostream::write_impl(llvm::raw_svector_ostream *this, char *a2, uint64_t a3)
{
  return llvm::SmallVectorImpl<char>::append<char const*,void>(*((void **)this + 8), a2, &a2[a3]);
}

void *llvm::raw_svector_ostream::pwrite_impl(llvm::raw_svector_ostream *this, const char *a2, size_t a3, uint64_t a4)
{
  return memcpy((void *)(**((void **)this + 8) + a4), a2, a3);
}

void llvm::raw_null_ostream::~raw_null_ostream(llvm::raw_null_ostream *this)
{
  llvm::raw_ostream::~raw_ostream(this);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::raw_null_ostream::current_pos(llvm::raw_null_ostream *this)
{
  return 0;
}

uint64_t llvm::raw_ostream::is_displayed(llvm::raw_ostream *this)
{
  return 0;
}

void llvm::raw_string_ostream::~raw_string_ostream(llvm::raw_string_ostream *this)
{
  llvm::raw_ostream::~raw_ostream(this);
  JUMPOUT(0x263E500B0);
}

void llvm::raw_string_ostream::reserveExtraSpace(llvm::raw_string_ostream *this, uint64_t a2)
{
  int v2 = (std::string *)*((void *)this + 8);
  std::string::size_type v3 = (*(uint64_t (**)(llvm::raw_string_ostream *))(*(void *)this + 80))(this)
     + a2
     + *((void *)this + 4)
     - *((void *)this + 2);
  std::string::reserve(v2, v3);
}

uint64_t llvm::raw_string_ostream::current_pos(llvm::raw_string_ostream *this)
{
  uint64_t v1 = *((void *)this + 8);
  if (*(char *)(v1 + 23) < 0) {
    return *(void *)(v1 + 8);
  }
  else {
    return *(unsigned __int8 *)(v1 + 23);
  }
}

void llvm::raw_svector_ostream::~raw_svector_ostream(llvm::raw_svector_ostream *this)
{
  llvm::raw_ostream::~raw_ostream(this);
  JUMPOUT(0x263E500B0);
}

void *llvm::raw_svector_ostream::reserveExtraSpace(llvm::raw_svector_ostream *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 8);
  uint64_t result = (void *)(*(uint64_t (**)(llvm::raw_svector_ostream *))(*(void *)this + 80))(this);
  unint64_t v6 = (unint64_t)result + a2 + *((void *)this + 4) - *((void *)this + 2);
  if (*(void *)(v4 + 16) < v6)
  {
    return llvm::SmallVectorBase<unsigned long long>::grow_pod(v4, (void *)(v4 + 24), v6, 1);
  }
  return result;
}

uint64_t llvm::raw_fd_ostream::current_pos(llvm::raw_fd_ostream *this)
{
  return *((void *)this + 11);
}

llvm::raw_ostream *llvm::FmtAlign::fill(llvm::raw_ostream *this, llvm::raw_ostream *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = (uint64_t)this;
    do
    {
      char v6 = *(unsigned char *)(v5 + 24);
      uint64_t v7 = (char *)*((void *)a2 + 4);
      if ((unint64_t)v7 >= *((void *)a2 + 3))
      {
        this = llvm::raw_ostream::write(a2, v6);
      }
      else
      {
        *((void *)a2 + 4) = v7 + 1;
        *uint64_t v7 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return this;
}

uint64_t llvm_regcomp(uint64_t a1, char *__s, int a3)
{
  if ((~a3 & 0x11) == 0) {
    return 16;
  }
  uint64_t v66 = v3;
  uint64_t v67 = v4;
  if ((a3 & 0x20) != 0)
  {
    unint64_t v10 = *(void *)(a1 + 16);
    size_t v9 = v10 - (void)__s;
    if (v10 < (unint64_t)__s) {
      return 16;
    }
  }
  else
  {
    size_t v9 = strlen(__s);
  }
  __int16 v11 = malloc_type_malloc(0x18FuLL, 0xE334DFFDuLL);
  if (!v11) {
    return 12;
  }
  uint64_t v12 = v11;
  uint64_t v54 = 0;
  uint64_t v50 = 0;
  size_t v52 = 3 * (v9 >> 1) + 1;
  ptr = malloc_type_calloc(v52, 8uLL, 0x100004000313F17uLL);
  unint64_t v53 = 0;
  if (!ptr)
  {
    free(v12);
    return 12;
  }
  long long v55 = v12;
  v49.n128_u64[0] = (unint64_t)__s;
  v49.n128_u64[1] = (unint64_t)&__s[v9];
  LODWORD(v50) = 0;
  LODWORD(v54) = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  _OWORD v12[4] = 256;
  *(void *)(v12 + 5) = 0;
  stat v13 = v12 + 5;
  *(void *)(v12 + 7) = 0;
  *(_OWORD *)(v12 + 34) = 0u;
  *(_OWORD *)(v12 + 66) = 0u;
  v12[9] = 0;
  v12[10] = a3 & 0xFFFFFF7F;
  v12[26] = 0;
  *((void *)v12 + 14) = 0;
  *(_OWORD *)(v12 + 18) = *(_OWORD *)"";
  *((void *)v12 + 11) = v12 + 66;
  *((void *)v12 + 12) = 0;
  *(_OWORD *)(v12 + 38) = 0u;
  *(_OWORD *)(v12 + 42) = 0u;
  *(_OWORD *)(v12 + 46) = 0u;
  *(_OWORD *)(v12 + 50) = 0u;
  *(_OWORD *)(v12 + 54) = 0u;
  *(_OWORD *)(v12 + 58) = 0u;
  *(_OWORD *)(v12 + 62) = 0u;
  *(_OWORD *)(v12 + 70) = 0u;
  *(_OWORD *)(v12 + 74) = 0u;
  *(_OWORD *)(v12 + 78) = 0u;
  *(_OWORD *)(v12 + 82) = 0u;
  *(_OWORD *)(v12 + 86) = 0u;
  *(_OWORD *)(v12 + 90) = 0u;
  *(_OWORD *)(v12 + 94) = 0u;
  v12[30] = 0;
  doemit((void **)&v49, 0x8000000, 0);
  *((void *)v12 + 7) = v53 - 1;
  if (a3)
  {
    p_ere((uint64_t)&v49, 128);
  }
  else if ((a3 & 0x10) != 0)
  {
    unsigned int v15 = (char *)v49.n128_u64[1];
    __int16 v14 = (char *)v49.n128_u64[0];
    if ((uint64_t)(v49.n128_u64[1] - v49.n128_u64[0]) <= 0)
    {
      if (!v50) {
        LODWORD(v50) = 14;
      }
      __int16 v14 = &nuls;
      v49.n128_u64[0] = (unint64_t)&nuls;
      v49.n128_u64[1] = (unint64_t)&nuls;
      unsigned int v15 = &nuls;
    }
    if (v15 - v14 >= 1)
    {
      do
      {
        v49.n128_u64[0] = (unint64_t)(v14 + 1);
        ordinary(&v49, *v14);
        __int16 v14 = (char *)v49.n128_u64[0];
      }
      while ((uint64_t)(v49.n128_u64[1] - v49.n128_u64[0]) > 0);
    }
  }
  else
  {
    p_bre((uint64_t)&v49, 128, 128);
  }
  doemit((void **)&v49, 0x8000000, 0);
  unint64_t v16 = v53;
  *((void *)v12 + 8) = v53 - 1;
  if (!v50)
  {
    uint64_t v17 = *((void *)v12 + 11);
    for (uint64_t i = -128; i != 128; ++i)
    {
      if (!*(unsigned char *)(v17 + i) && *v13 >= 1)
      {
        unsigned int v19 = (*v13 + 7) >> 3;
        uint64_t v20 = *((void *)v12 + 4);
        while (!*(unsigned char *)(v20 + i))
        {
          v20 += (int)v12[4];
          if (!--v19) {
            goto LABEL_24;
          }
        }
        int v21 = v12[21];
        v12[21] = v21 + 1;
        *(unsigned char *)(v17 + i) = v21;
        if (i <= 126)
        {
          uint64_t v22 = i;
          do
          {
            ++v22;
            if (!*(unsigned char *)(v17 + v22))
            {
              if (*v13 < 1)
              {
LABEL_38:
                *(unsigned char *)(v17 + v22) = v21;
              }
              else
              {
                unsigned int v23 = (*v13 + 7) >> 3;
                uint64_t v24 = *((void *)v12 + 4);
                while (*(unsigned __int8 *)(v24 + i) == *(unsigned __int8 *)(v24 + v22))
                {
                  v24 += (int)v12[4];
                  if (!--v23) {
                    goto LABEL_38;
                  }
                }
              }
            }
          }
          while (v22 != 127);
        }
      }
LABEL_24:
      ;
    }
    unint64_t v16 = v53;
  }
  *((void *)v12 + 6) = v16;
  if (v16 >> 61)
  {
    *((void *)v12 + 1) = ptr;
    LODWORD(v25) = v50;
    if (!v50)
    {
      LODWORD(v25) = 12;
      LODWORD(v50) = 12;
    }
    int v26 = 0;
    uint64_t v27 = 0;
    v49.n128_u64[0] = (unint64_t)&nuls;
    v49.n128_u64[1] = (unint64_t)&nuls;
    goto LABEL_77;
  }
  uint64_t v28 = (char *)malloc_type_realloc(ptr, 8 * v16, 0x100004000313F17uLL);
  *((void *)v12 + 1) = v28;
  LODWORD(v25) = v50;
  if (!v28)
  {
    if (!v50)
    {
      LODWORD(v25) = 12;
      LODWORD(v50) = 12;
    }
    int v26 = 0;
    uint64_t v27 = 0;
    v49.n128_u64[0] = (unint64_t)&nuls;
    v49.n128_u64[1] = (unint64_t)&nuls;
    *((void *)v12 + 1) = ptr;
    goto LABEL_77;
  }
  if (v50) {
    goto LABEL_76;
  }
  char v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  __int16 v32 = (uint64_t *)(v28 + 8);
  uint64_t v33 = (uint64_t *)(v28 + 8);
  do
  {
    uint64_t v35 = *v33++;
    LODWORD(v34) = v35;
    unint64_t v36 = ((unint64_t)(v35 & 0xF8000000) - 0x10000000) >> 27;
    if (v36 > 0xD) {
      goto LABEL_60;
    }
    if (((1 << v36) & 0x1880) != 0) {
      goto LABEL_63;
    }
    if (((1 << v36) & 0x2200) != 0)
    {
      uint64_t v33 = v32;
      while (1)
      {
        v33 += v34 & 0x7FFFFFF;
        uint64_t v34 = *v33;
        uint64_t v37 = *v33 & 0xF8000000;
        if (v37 == 1610612736) {
          break;
        }
        if (v37 != -2013265920)
        {
          if (v37 == -1879048192) {
            break;
          }
          v12[18] |= 4u;
          goto LABEL_75;
        }
      }
LABEL_60:
      if (v31 > (int)v12[26])
      {
        v12[26] = v31;
        char v29 = v30;
      }
      uint64_t v31 = 0;
      goto LABEL_63;
    }
    if (v36) {
      goto LABEL_60;
    }
    if (!v31) {
      uint64_t v30 = v32;
    }
    ++v31;
LABEL_63:
    __int16 v32 = v33;
  }
  while ((v34 & 0xF8000000) != 0x8000000);
  uint64_t v38 = (int)v12[26];
  if (v38)
  {
    long long v39 = malloc_type_malloc(v38 + 1, 0x61097D62uLL);
    *((void *)v12 + 12) = v39;
    if (v39)
    {
      uint64_t v40 = v12[26];
      if ((int)v40 >= 1)
      {
        do
        {
          do
          {
            uint64_t v42 = *v29++;
            char v41 = v42;
          }
          while ((v42 & 0xF8000000) != 0x10000000);
          *v39++ = v41;
        }
        while (v40-- > 1);
      }
      *long long v39 = 0;
    }
    else
    {
      v12[26] = 0;
    }
  }
LABEL_75:
  LODWORD(v25) = v50;
  if (v50)
  {
LABEL_76:
    int v26 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v27 = 0;
    uint64_t v44 = (uint64_t *)(*((void *)v12 + 1) + 8);
    do
    {
      uint64_t v45 = *v44++;
      uint64_t v46 = v45 & 0xF8000000;
      if (v25 <= v27) {
        uint64_t v47 = v27;
      }
      else {
        uint64_t v47 = v25;
      }
      uint64_t v48 = v25 - 1;
      if (v46 == 1207959552) {
        ++v25;
      }
      if (v46 == 1342177280)
      {
        uint64_t v25 = v48;
        uint64_t v27 = v47;
      }
    }
    while (v46 != 0x8000000);
    if (v25)
    {
      LODWORD(v25) = 0;
      v12[18] |= 4u;
    }
    int v26 = 1;
  }
LABEL_77:
  *((void *)v12 + 16) = v27;
  *uint64_t v12 = 53829;
  *(void *)(a1 + 8) = *((void *)v12 + 14);
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)a1 = 62053;
  if ((v12[18] & 4) != 0)
  {
    if (v26)
    {
      LODWORD(v25) = 15;
      LODWORD(v50) = 15;
    }
    v49.n128_u64[0] = (unint64_t)&nuls;
    v49.n128_u64[1] = (unint64_t)&nuls;
  }
  if (!v25) {
    return 0;
  }
  llvm_regfree(a1);
  return v50;
}

void **doemit(void **result, uint64_t a2, uint64_t a3)
{
  if (!*((_DWORD *)result + 4))
  {
    uint64_t v5 = result;
    uint64_t v7 = (uint64_t)result[4];
    uint64_t v6 = (uint64_t)result[5];
    if (v6 >= v7)
    {
      uint64_t v8 = v7 + 2;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      uint64_t result = enlarge(result, (v8 & 0xFFFFFFFFFFFFFFFELL) + (v8 >> 1));
      uint64_t v6 = (uint64_t)v5[5];
    }
    size_t v9 = v5[3];
    v5[5] = (void *)(v6 + 1);
    v9[v6] = a3 | a2;
  }
  return result;
}

void p_ere(uint64_t a1, int a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  char v6 = 0;
  while (2)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(char **)a1;
    size_t v9 = *(char **)(a1 + 8);
    if ((uint64_t)&v9[-*(void *)a1] < 1) {
      goto LABEL_120;
    }
    while (1)
    {
      int v10 = *v8;
      uint64_t v11 = *(void *)(a1 + 40);
      if (v10 == 124 || v10 == a2) {
        break;
      }
      stat v13 = v8 + 1;
      *(void *)a1 = v8 + 1;
      int v14 = *v8;
      if (v14 <= 62)
      {
        switch(*v8)
        {
          case '$':
            doemit((void **)a1, 0x20000000, 0);
            uint64_t v15 = *(void *)(a1 + 56);
            *(_DWORD *)(v15 + 72) |= 2u;
            ++*(_DWORD *)(v15 + 80);
            goto LABEL_55;
          case '(':
            if (v9 - v13 <= 0)
            {
              if (!*(_DWORD *)(a1 + 16)) {
                *(_DWORD *)(a1 + 16) = 8;
              }
              *(void *)a1 = &nuls;
              *(void *)(a1 + 8) = &nuls;
            }
            uint64_t v22 = *(void *)(a1 + 56);
            uint64_t v23 = *(void *)(v22 + 112);
            uint64_t v24 = v23 + 1;
            *(void *)(v22 + 112) = v23 + 1;
            if (v23 + 1 <= 9) {
              *(void *)(a1 + 8 * v24 + 64) = v11;
            }
            doemit((void **)a1, 1744830464, v23 + 1);
            if ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) < 1 || **(unsigned char **)a1 != 41) {
              p_ere(a1, 41);
            }
            if (v24 <= 9) {
              *(void *)(a1 + 8 * v24 + 144) = *(void *)(a1 + 40);
            }
            doemit((void **)a1, 1879048192, v24);
            uint64_t v25 = *(char **)a1;
            if ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) < 1) {
              goto LABEL_41;
            }
            *(void *)a1 = v25 + 1;
            if (*v25 != 41) {
              goto LABEL_41;
            }
            goto LABEL_55;
          case ')':
LABEL_41:
            if (*(_DWORD *)(a1 + 16)) {
              goto LABEL_44;
            }
            int v21 = 8;
            break;
          case '*':
          case '+':
            goto LABEL_26;
          case '.':
            if ((*(unsigned char *)(*(void *)(a1 + 56) + 40) & 8) != 0)
            {
              *(void *)a1 = &v51;
              *(void *)(a1 + 8) = (char *)&v51 + 3;
              int v51 = 6097502;
              p_bracket(a1);
              *(void *)a1 = v13;
              *(void *)(a1 + 8) = v9;
            }
            else
            {
              doemit((void **)a1, 671088640, 0);
            }
            goto LABEL_55;
          default:
            goto LABEL_54;
        }
LABEL_43:
        *(_DWORD *)(a1 + 16) = v21;
        goto LABEL_44;
      }
      if (v14 > 93)
      {
        if (v14 != 94)
        {
          if (v14 == 123)
          {
            if (v9 - v13 >= 1 && *v13 - 48 <= 9)
            {
              if (!*(_DWORD *)(a1 + 16)) {
                *(_DWORD *)(a1 + 16) = 13;
              }
              *(void *)a1 = &nuls;
              *(void *)(a1 + 8) = &nuls;
            }
          }
          else if (v14 == 124)
          {
            if (!*(_DWORD *)(a1 + 16))
            {
              int v21 = 14;
              goto LABEL_43;
            }
            goto LABEL_44;
          }
LABEL_54:
          ordinary((__n128 *)a1, v14);
          goto LABEL_55;
        }
        doemit((void **)a1, 402653184, 0);
        char v20 = 0;
        int v26 = *(int32x2_t **)(a1 + 56);
        int32x2_t v27 = v26[9];
        int32x2_t v28 = vadd_s32(v27, (int32x2_t)0x100000001);
        v27.i32[0] |= 1u;
        v27.i32[1] = v28.i32[1];
        v26[9] = v27;
      }
      else
      {
        if (v14 == 63)
        {
LABEL_26:
          if (!*(_DWORD *)(a1 + 16))
          {
            int v21 = 13;
            goto LABEL_43;
          }
          goto LABEL_44;
        }
        if (v14 == 91)
        {
          p_bracket(a1);
          goto LABEL_55;
        }
        if (v14 != 92) {
          goto LABEL_54;
        }
        if (v9 - v13 <= 0)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 5;
          }
          *(void *)(a1 + 8) = &nuls;
          stat v13 = &nuls;
        }
        *(void *)a1 = v13 + 1;
        int v14 = *v13;
        if ((v14 - 49) > 8) {
          goto LABEL_54;
        }
        uint64_t v16 = (v14 - 48);
        uint64_t v17 = a1 + 8 * v16;
        uint64_t v19 = *(void *)(v17 + 144);
        int v18 = (uint64_t *)(v17 + 144);
        if (!v19)
        {
          if (!*(_DWORD *)(a1 + 16))
          {
            int v21 = 6;
            goto LABEL_43;
          }
LABEL_44:
          *(void *)a1 = &nuls;
          *(void *)(a1 + 8) = &nuls;
LABEL_55:
          char v20 = 1;
          goto LABEL_56;
        }
        doemit((void **)a1, 939524096, v16);
        dupl(a1, *(void *)(a1 + 8 * v16 + 64) + 1, *v18);
        doemit((void **)a1, 0x40000000, v16);
        char v20 = 1;
        *(_DWORD *)(*(void *)(a1 + 56) + 120) = 1;
      }
LABEL_56:
      uint64_t v8 = *(char **)a1;
      size_t v9 = *(char **)(a1 + 8);
      uint64_t v29 = (uint64_t)&v9[-*(void *)a1];
      if (v29 >= 1)
      {
        if ((int v30 = *v8, (v30 - 42) < 2)
          || v30 == 63
          || (v30 == 123 ? (BOOL v31 = (unint64_t)v29 >= 2) : (BOOL v31 = 0),
              v31 && v8[1] - 48 <= 9))
        {
          *(void *)a1 = v8 + 1;
          if ((v20 & 1) == 0)
          {
            if (!*(_DWORD *)(a1 + 16)) {
              *(_DWORD *)(a1 + 16) = 13;
            }
            *(void *)a1 = &nuls;
            *(void *)(a1 + 8) = &nuls;
          }
          if ((char)v30 > 62)
          {
            if ((char)v30 != 63)
            {
              if ((char)v30 == 123)
              {
                uint64_t v35 = p_count((uint64_t *)a1);
                int v36 = v35;
                uint64_t v37 = *(char **)a1;
                uint64_t v38 = v35;
                if ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >= 1)
                {
                  uint64_t v38 = v35;
                  if (*v37 == 44)
                  {
                    *(void *)a1 = v37 + 1;
                    if (v37[1] - 48 > 9)
                    {
                      uint64_t v38 = 256;
                    }
                    else
                    {
                      uint64_t v38 = p_count((uint64_t *)a1);
                      if (v36 > (int)v38)
                      {
                        if (!*(_DWORD *)(a1 + 16)) {
                          *(_DWORD *)(a1 + 16) = 10;
                        }
                        *(void *)a1 = &nuls;
                        *(void *)(a1 + 8) = &nuls;
                      }
                    }
                  }
                }
                repeat((void **)a1, v11, v36, v38);
                uint64_t v44 = *(char **)a1;
                uint64_t v43 = *(void *)(a1 + 8);
                if (v43 - *(void *)a1 >= 1)
                {
                  if (*v44 == 125)
                  {
                    *(void *)a1 = v44 + 1;
                    goto LABEL_89;
                  }
                  uint64_t v45 = ~(unint64_t)v44 + v43;
                  uint64_t v46 = (unsigned __int8 *)(v44 + 1);
                  while (1)
                  {
                    *(void *)a1 = v46;
                    if (v45 <= 0) {
                      break;
                    }
                    int v47 = *v46++;
                    --v45;
                    if (v47 == 125)
                    {
                      if (*(_DWORD *)(a1 + 16)) {
                        goto LABEL_118;
                      }
                      int v48 = 10;
                      goto LABEL_117;
                    }
                  }
                }
                if (!*(_DWORD *)(a1 + 16))
                {
                  int v48 = 9;
LABEL_117:
                  *(_DWORD *)(a1 + 16) = v48;
                }
LABEL_118:
                *(void *)a1 = &nuls;
                *(void *)(a1 + 8) = &nuls;
              }
LABEL_89:
              uint64_t v8 = *(char **)a1;
              size_t v9 = *(char **)(a1 + 8);
              uint64_t v40 = (uint64_t)&v9[-*(void *)a1];
              if (v40 >= 1)
              {
                if ((int v41 = *v8, (v41 - 42) < 2)
                  || v41 == 63
                  || (v41 == 123 ? (BOOL v42 = (unint64_t)v40 >= 2) : (BOOL v42 = 0),
                      v42 && v8[1] - 48 <= 9))
                {
                  if (!*(_DWORD *)(a1 + 16)) {
                    *(_DWORD *)(a1 + 16) = 13;
                  }
                  *(void *)a1 = &nuls;
                  *(void *)(a1 + 8) = &nuls;
                  uint64_t v8 = &nuls;
                  size_t v9 = &nuls;
                }
              }
              goto LABEL_101;
            }
            doinsert((void *)a1, 2013265920, *(void *)(a1 + 40) - v11 + 1, v11);
            doemit((void **)a1, 0x80000000, *(void *)(a1 + 40) - v11);
            if (!*(_DWORD *)(a1 + 16)) {
              *(void *)(*(void *)(a1 + 24) + 8 * v11) = *(void *)(*(void *)(a1 + 24) + 8 * v11) & 0xF8000000 | (*(void *)(a1 + 40) - v11);
            }
            doemit((void **)a1, 2281701376, 0);
            if (!*(_DWORD *)(a1 + 16))
            {
              uint64_t v39 = *(void *)(a1 + 24) + 8 * *(void *)(a1 + 40);
              *(void *)(v39 - 8) = *(void *)(v39 - 8) & 0xF8000000 | 1;
            }
            uint64_t v33 = (void **)a1;
            uint64_t v34 = 2415919104;
            uint64_t v32 = 2;
          }
          else
          {
            if ((char)v30 != 42)
            {
              if ((char)v30 == 43)
              {
                doinsert((void *)a1, 1207959552, *(void *)(a1 + 40) - v11 + 1, v11);
                uint64_t v32 = *(void *)(a1 + 40) - v11;
                uint64_t v33 = (void **)a1;
                uint64_t v34 = 1342177280;
                goto LABEL_88;
              }
              goto LABEL_89;
            }
            doinsert((void *)a1, 1207959552, *(void *)(a1 + 40) - v11 + 1, v11);
            doemit((void **)a1, 1342177280, *(void *)(a1 + 40) - v11);
            doinsert((void *)a1, 1476395008, *(void *)(a1 + 40) - v11 + 1, v11);
            uint64_t v32 = *(void *)(a1 + 40) - v11;
            uint64_t v33 = (void **)a1;
            uint64_t v34 = 1610612736;
          }
LABEL_88:
          doemit(v33, v34, v32);
          goto LABEL_89;
        }
      }
LABEL_101:
      if (v9 - v8 <= 0)
      {
        uint64_t v11 = *(void *)(a1 + 40);
        break;
      }
    }
    if (v11 == v7)
    {
LABEL_120:
      if (!*(_DWORD *)(a1 + 16)) {
        *(_DWORD *)(a1 + 16) = 14;
      }
      *(void *)a1 = &nuls;
      *(void *)(a1 + 8) = &nuls;
      uint64_t v11 = v7;
      uint64_t v8 = &nuls;
      size_t v9 = &nuls;
    }
    if (v9 - v8 >= 1 && *v8 == 124)
    {
      *(void *)a1 = v8 + 1;
      if (v6)
      {
        uint64_t v7 = v4;
      }
      else
      {
        doinsert((void *)a1, 2013265920, v11 - v7 + 1, v7);
        uint64_t v11 = *(void *)(a1 + 40);
        uint64_t v5 = v7;
      }
      doemit((void **)a1, 0x80000000, v11 - v7);
      uint64_t v49 = *(void *)(a1 + 40);
      uint64_t v50 = v49;
      if (!*(_DWORD *)(a1 + 16))
      {
        *(void *)(*(void *)(a1 + 24) + 8 * v5) = *(void *)(*(void *)(a1 + 24) + 8 * v5) & 0xF8000000 | (v49 - v5);
        uint64_t v50 = *(void *)(a1 + 40);
      }
      uint64_t v4 = v49 - 1;
      doemit((void **)a1, 2281701376, 0);
      char v6 = 1;
      uint64_t v5 = v50;
      continue;
    }
    break;
  }
  if (v6)
  {
    if (!*(_DWORD *)(a1 + 16))
    {
      *(void *)(*(void *)(a1 + 24) + 8 * v5) = *(void *)(*(void *)(a1 + 24) + 8 * v5) & 0xF8000000 | (v11 - v5);
      uint64_t v11 = *(void *)(a1 + 40);
    }
    doemit((void **)a1, 2415919104, v11 - v4);
  }
}

void p_bre(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(char **)a1;
  char v6 = *(char **)(a1 + 8);
  uint64_t v7 = (uint64_t)&v6[-*(void *)a1];
  if (v7 < 1) {
    goto LABEL_98;
  }
  if (*v5 == 94)
  {
    *(void *)a1 = v5 + 1;
    doemit((void **)a1, 402653184, 0);
    int v10 = *(int32x2_t **)(a1 + 56);
    int32x2_t v11 = v10[9];
    int32x2_t v12 = vadd_s32(v11, (int32x2_t)0x100000001);
    v11.i32[0] |= 1u;
    v11.i32[1] = v12.i32[1];
    v10[9] = v11;
    uint64_t v5 = *(char **)a1;
    char v6 = *(char **)(a1 + 8);
    uint64_t v7 = (uint64_t)&v6[-*(void *)a1];
    if (v7 < 1)
    {
LABEL_98:
      uint64_t v40 = *(void *)(a1 + 40);
      goto LABEL_99;
    }
  }
  int v13 = 0;
  char v14 = 0;
  while (v7 == 1 || *v5 != a2 || v5[1] != a3)
  {
    uint64_t v15 = *(void *)(a1 + 40);
    uint64_t v16 = v5 + 1;
    *(void *)a1 = v5 + 1;
    int v17 = *v5;
    if (v17 == 92)
    {
      if (v6 - v16 <= 0)
      {
        if (!*(_DWORD *)(a1 + 16)) {
          *(_DWORD *)(a1 + 16) = 5;
        }
        *(void *)(a1 + 8) = &nuls;
        char v6 = &nuls;
        uint64_t v16 = &nuls;
      }
      *(void *)a1 = v16 + 1;
      int v17 = *v16++ | 0x100;
    }
    if (v17 > 304)
    {
      if ((v17 - 305) < 9)
      {
        uint64_t v18 = (v17 & 0xFFFFFEFF) - 48;
        uint64_t v19 = a1 + 8 * v18;
        uint64_t v21 = *(void *)(v19 + 144);
        char v20 = (uint64_t *)(v19 + 144);
        if (v21)
        {
          doemit((void **)a1, 939524096, (v17 & 0xFFFFFEFF) - 48);
          dupl(a1, *(void *)(a1 + 8 * v18 + 64) + 1, *v20);
          doemit((void **)a1, 0x40000000, (v17 & 0xFFFFFEFF) - 48);
        }
        else
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 6;
          }
          *(void *)a1 = &nuls;
          *(void *)(a1 + 8) = &nuls;
        }
        *(_DWORD *)(*(void *)(a1 + 56) + 120) = 1;
        goto LABEL_60;
      }
      if (v17 == 379)
      {
        if (!*(_DWORD *)(a1 + 16))
        {
          int v28 = 13;
LABEL_52:
          *(_DWORD *)(a1 + 16) = v28;
        }
      }
      else
      {
        if (v17 != 381) {
          goto LABEL_58;
        }
LABEL_48:
        if (!*(_DWORD *)(a1 + 16))
        {
          int v28 = 8;
          goto LABEL_52;
        }
      }
      *(void *)a1 = &nuls;
      *(void *)(a1 + 8) = &nuls;
      goto LABEL_60;
    }
    if (v17 <= 90)
    {
      if (v17 == 42)
      {
        if (v14)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 13;
          }
          *(void *)a1 = &nuls;
          *(void *)(a1 + 8) = &nuls;
        }
      }
      else if (v17 == 46)
      {
        if ((*(unsigned char *)(*(void *)(a1 + 56) + 40) & 8) != 0)
        {
          *(void *)a1 = &v42;
          *(void *)(a1 + 8) = (char *)&v42 + 3;
          int v42 = 6097502;
          p_bracket(a1);
          *(void *)a1 = v16;
          *(void *)(a1 + 8) = v6;
        }
        else
        {
          doemit((void **)a1, 671088640, 0);
        }
        goto LABEL_60;
      }
LABEL_58:
      ordinary((__n128 *)a1, (char)v17);
      goto LABEL_60;
    }
    switch(v17)
    {
      case 91:
        p_bracket(a1);
        break;
      case 296:
        uint64_t v22 = *(void *)(a1 + 56);
        uint64_t v23 = *(void *)(v22 + 112);
        uint64_t v24 = v23 + 1;
        *(void *)(v22 + 112) = v23 + 1;
        if (v23 + 1 <= 9) {
          *(void *)(a1 + 8 * v24 + 64) = v15;
        }
        doemit((void **)a1, 1744830464, v23 + 1);
        uint64_t v25 = *(char **)a1;
        uint64_t v26 = *(void *)(a1 + 8) - *(void *)a1;
        if (v26 >= 1 && (v26 == 1 || *v25 != 92 || v25[1] != 41)) {
          p_bre(a1, 92, 41);
        }
        if (v24 <= 9) {
          *(void *)(a1 + 8 * v24 + 144) = *(void *)(a1 + 40);
        }
        doemit((void **)a1, 1879048192, v24);
        int32x2_t v27 = *(char **)a1;
        if ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) < 2 || *v27 != 92 || v27[1] != 41) {
          goto LABEL_48;
        }
        *(void *)a1 = v27 + 2;
        break;
      case 297:
        goto LABEL_48;
      default:
        goto LABEL_58;
    }
LABEL_60:
    uint64_t v5 = *(char **)a1;
    char v6 = *(char **)(a1 + 8);
    uint64_t v7 = (uint64_t)&v6[-*(void *)a1];
    if (v7 >= 1)
    {
      int v29 = *v5;
      if (v29 == 42)
      {
        *(void *)a1 = v5 + 1;
        doinsert((void *)a1, 1207959552, *(void *)(a1 + 40) - v15 + 1, v15);
        doemit((void **)a1, 1342177280, *(void *)(a1 + 40) - v15);
        doinsert((void *)a1, 1476395008, *(void *)(a1 + 40) - v15 + 1, v15);
        doemit((void **)a1, 1610612736, *(void *)(a1 + 40) - v15);
        uint64_t v5 = *(char **)a1;
        char v6 = *(char **)(a1 + 8);
LABEL_91:
        int v13 = 0;
        uint64_t v7 = v6 - v5;
        goto LABEL_92;
      }
      if ((unint64_t)v7 >= 2 && v29 == 92 && v5[1] == 123)
      {
        *(void *)a1 = v5 + 2;
        uint64_t v30 = p_count((uint64_t *)a1);
        int v31 = v30;
        uint64_t v33 = *(char **)a1;
        uint64_t v32 = *(void *)(a1 + 8);
        uint64_t v34 = v30;
        if (v32 - *(void *)a1 >= 1)
        {
          uint64_t v34 = v30;
          if (*v33 == 44)
          {
            uint64_t v35 = (unsigned __int8 *)(v33 + 1);
            *(void *)a1 = v35;
            if (v32 - (uint64_t)v35 < 1 || *v35 - 48 > 9)
            {
              uint64_t v34 = 256;
            }
            else
            {
              uint64_t v34 = p_count((uint64_t *)a1);
              if (v31 > (int)v34)
              {
                if (!*(_DWORD *)(a1 + 16)) {
                  *(_DWORD *)(a1 + 16) = 10;
                }
                *(void *)a1 = &nuls;
                *(void *)(a1 + 8) = &nuls;
              }
            }
          }
        }
        repeat((void **)a1, v15, v31, v34);
        int v36 = *(char **)a1;
        char v6 = *(char **)(a1 + 8);
        uint64_t v37 = (uint64_t)&v6[-*(void *)a1];
        if (v37 <= 1)
        {
          if (v37 == 1) {
            goto LABEL_82;
          }
LABEL_87:
          if (!*(_DWORD *)(a1 + 16))
          {
            int v39 = 9;
            goto LABEL_89;
          }
        }
        else
        {
          if (*v36 == 92 && v36[1] == 125)
          {
            uint64_t v5 = v36 + 2;
            *(void *)a1 = v36 + 2;
            goto LABEL_91;
          }
LABEL_82:
          uint64_t v38 = v36 + 1;
          while (1)
          {
            if (--v37)
            {
              if (*(v38 - 1) == 92 && *v38 == 125) {
                break;
              }
            }
            *(void *)a1 = v38++;
            if (v37 <= 0) {
              goto LABEL_87;
            }
          }
          if (!*(_DWORD *)(a1 + 16))
          {
            int v39 = 10;
LABEL_89:
            *(_DWORD *)(a1 + 16) = v39;
          }
        }
        *(void *)a1 = &nuls;
        *(void *)(a1 + 8) = &nuls;
        uint64_t v5 = &nuls;
        char v6 = &nuls;
        goto LABEL_91;
      }
    }
    if (v17 != 36) {
      goto LABEL_91;
    }
    int v13 = 1;
LABEL_92:
    char v14 = 1;
    if (v7 <= 0) {
      break;
    }
  }
  uint64_t v40 = *(void *)(a1 + 40);
  if (v13)
  {
    *(void *)(a1 + 40) = v40 - 1;
    doemit((void **)a1, 0x20000000, 0);
    uint64_t v41 = *(void *)(a1 + 56);
    *(_DWORD *)(v41 + 72) |= 2u;
    ++*(_DWORD *)(v41 + 80);
    goto LABEL_98;
  }
LABEL_99:
  if (v40 == v4)
  {
    if (!*(_DWORD *)(a1 + 16)) {
      *(_DWORD *)(a1 + 16) = 14;
    }
    *(void *)a1 = &nuls;
    *(void *)(a1 + 8) = &nuls;
  }
}

void *doinsert(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*((_DWORD *)result + 4))
  {
    uint64_t v5 = result;
    uint64_t v6 = result[5];
    doemit((void **)result, a2, a3);
    uint64_t v7 = 0;
    uint64_t v8 = v5[3];
    uint64_t v9 = *(void *)(v8 + 8 * v6);
    do
    {
      int v10 = &v5[v7];
      uint64_t v11 = v5[v7 + 9];
      if (v11 >= a4) {
        v10[9] = v11 + 1;
      }
      uint64_t v12 = v10[19];
      if (v12 >= a4) {
        v10[19] = v12 + 1;
      }
      ++v7;
    }
    while (v7 != 9);
    uint64_t result = memmove((void *)(v8 + 8 * a4 + 8), (const void *)(v8 + 8 * a4), 8 * (v5[5] + ~a4));
    *(void *)(v5[3] + 8 * a4) = v9;
  }
  return result;
}

void p_bracket(uint64_t a1)
{
  int v2 = *(const char **)a1;
  if ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >= 6)
  {
    if (!strncmp(*(const char **)a1, "[:<:]]", 6uLL))
    {
      int32x2_t v27 = (void **)a1;
      uint64_t v28 = 2550136832;
    }
    else
    {
      if (strncmp(v2, "[:>:]]", 6uLL)) {
        goto LABEL_4;
      }
      int32x2_t v27 = (void **)a1;
      uint64_t v28 = 2684354560;
    }
    doemit(v27, v28, 0);
    *(void *)a1 += 6;
    return;
  }
LABEL_4:
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(unsigned int *)(v3 + 20);
  size_t v5 = *(int *)(v3 + 16);
  *(_DWORD *)(v3 + 20) = v4 + 1;
  int v6 = *(_DWORD *)(a1 + 48);
  if ((int)v4 >= v6)
  {
    unint64_t v20 = (v6 + 8);
    *(_DWORD *)(a1 + 48) = v20;
    if (v6 < -8) {
      goto LABEL_21;
    }
    uint64_t v21 = malloc_type_realloc(*(void **)(v3 + 24), 32 * (v6 + 8), 0x1010040FE74B554uLL);
    uint64_t v3 = *(void *)(a1 + 56);
    if (!v21) {
      goto LABEL_21;
    }
    size_t v22 = (int)(v20 >> 3) * (uint64_t)(int)v5;
    *(void *)(v3 + 24) = v21;
    uint64_t v23 = (char *)malloc_type_realloc(*(void **)(v3 + 32), v22, 0x7F640B19uLL);
    uint64_t v3 = *(void *)(a1 + 56);
    if (!v23) {
      goto LABEL_21;
    }
    *(void *)(v3 + 32) = v23;
    if ((int)v4 >= 1)
    {
      uint64_t v24 = 0;
      uint64_t v25 = *(void **)(v3 + 24);
      do
      {
        void *v25 = &v23[(v24 >> 3) * (uint64_t)(int)v5];
        v25 += 4;
        ++v24;
      }
      while (v4 != v24);
    }
    bzero(&v23[v22 - v5], v5);
    uint64_t v3 = *(void *)(a1 + 56);
  }
  uint64_t v7 = *(void *)(v3 + 24);
  if (!v7 || (uint64_t v8 = *(void *)(v3 + 32)) == 0)
  {
LABEL_21:
    free(*(void **)(v3 + 24));
    uint64_t v26 = *(void *)(a1 + 56);
    *(void *)(v26 + 24) = 0;
    free(*(void **)(v26 + 32));
    *(void *)(*(void *)(a1 + 56) + 32) = 0;
    if (!*(_DWORD *)(a1 + 16)) {
      *(_DWORD *)(a1 + 16) = 12;
    }
    *(void *)a1 = &nuls;
    *(void *)(a1 + 8) = &nuls;
    return;
  }
  uint64_t v9 = v7 + 32 * (int)v4;
  uint64_t v10 = v8 + (int)v5 * (uint64_t)((int)v4 / 8);
  BOOL v11 = 1;
  int v12 = 1 << (v4 & 7);
  *(unsigned char *)(v9 + 8) = v12;
  int v13 = (unsigned char *)(v9 + 8);
  *(unsigned char *)(v9 + 9) = 0;
  char v14 = (unsigned char *)(v9 + 9);
  *(void *)(v9 + 16) = 0;
  uint64_t v15 = (uint64_t *)(v9 + 16);
  *(void *)uint64_t v9 = v10;
  *(void *)(v9 + 24) = 0;
  int v17 = *(char **)a1;
  uint64_t v16 = *(char **)(a1 + 8);
  if ((uint64_t)&v16[-*(void *)a1] < 1) {
    goto LABEL_30;
  }
  int v18 = *v17;
  BOOL v11 = v18 != 94;
  if (v18 == 94)
  {
    *(void *)a1 = ++v17;
    if (v16 - v17 < 1)
    {
      BOOL v11 = 0;
      goto LABEL_30;
    }
    int v18 = *v17;
  }
  if (v18 == 93)
  {
    uint64_t v19 = 93;
  }
  else
  {
    if (v18 != 45) {
      goto LABEL_30;
    }
    uint64_t v19 = 45;
  }
  *(void *)a1 = v17 + 1;
  *(unsigned char *)(v10 + v19) |= v12;
  *v14 += v18;
  int v17 = *(char **)a1;
  uint64_t v16 = *(char **)(a1 + 8);
LABEL_30:
  unint64_t v29 = v16 - v17;
  if (v16 - v17 >= 1)
  {
    uint64_t v30 = v7 + 32 * (int)v4 + 24;
    do
    {
      int v31 = *v17;
      if (v31 == 93) {
        break;
      }
      if (v29 >= 2 && v31 == 45)
      {
        if (v17[1] == 93)
        {
          *(void *)a1 = v17 + 1;
          *(unsigned char *)(*(void *)v9 + 45) |= *v13;
          *v14 += 45;
          int v17 = *(char **)a1;
          uint64_t v16 = *(char **)(a1 + 8);
          break;
        }
LABEL_69:
        if (!*(_DWORD *)(a1 + 16)) {
          *(_DWORD *)(a1 + 16) = 11;
        }
        goto LABEL_71;
      }
      if (v31 == 45) {
        goto LABEL_69;
      }
      if (v31 != 91 || v29 <= 1)
      {
LABEL_42:
        int v33 = p_b_symbol(a1);
        int v34 = v33;
        uint64_t v35 = *(const char **)a1;
        uint64_t v36 = *(void *)(a1 + 8);
        if (v36 - *(void *)a1 < 2
          || *v35 != 45
          || (uint64_t v37 = v35 + 1, v35[1] == 93)
          || ((*(void *)a1 = v37, v36 - (uint64_t)v37 < 1) || *v37 != 45
            ? (int v33 = p_b_symbol(a1))
            : (*(void *)a1 = v35 + 2, int v33 = 45),
              v34 <= v33))
        {
          do
          {
            *(unsigned char *)(*(void *)v9 + v34) |= *v13;
            *v14 += v34++;
          }
          while (v33 + 1 != v34);
          int v17 = *(char **)a1;
          uint64_t v16 = *(char **)(a1 + 8);
          goto LABEL_74;
        }
        goto LABEL_69;
      }
      int v38 = v17[1];
      if (v38 == 61)
      {
        uint64_t v45 = v17 + 2;
        *(void *)a1 = v45;
        if (v16 - v45 <= 0)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 7;
          }
          *(void *)a1 = &nuls;
          *(void *)(a1 + 8) = &nuls;
          uint64_t v45 = &nuls;
        }
        int v46 = *v45;
        if (v46 == 93 || v46 == 45)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 3;
          }
          *(void *)a1 = &nuls;
          *(void *)(a1 + 8) = &nuls;
        }
        unsigned __int8 v47 = p_b_coll_elem(a1, 61);
        *(unsigned char *)(*(void *)v9 + v47) |= *v13;
        *v14 += v47;
        int v48 = *(char **)a1;
        uint64_t v16 = *(char **)(a1 + 8);
        if ((uint64_t)&v16[-*(void *)a1] < 1)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 7;
          }
          *(void *)a1 = &nuls;
          *(void *)(a1 + 8) = &nuls;
          int v48 = &nuls;
          uint64_t v16 = &nuls;
        }
        if (v16 - v48 > 1 && *v48 == 61 && v48[1] == 93) {
          goto LABEL_110;
        }
        if (!*(_DWORD *)(a1 + 16))
        {
          int v49 = 3;
LABEL_113:
          *(_DWORD *)(a1 + 16) = v49;
        }
      }
      else
      {
        if (v38 != 58) {
          goto LABEL_42;
        }
        int v39 = v17 + 2;
        *(void *)a1 = v17 + 2;
        if (v16 - (v17 + 2) <= 0)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 7;
          }
          *(void *)a1 = &nuls;
          *(void *)(a1 + 8) = &nuls;
          uint64_t v16 = &nuls;
          int v39 = &nuls;
        }
        int v40 = *v39;
        if (v40 == 93 || v40 == 45)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 4;
          }
          *(void *)a1 = &nuls;
          *(void *)(a1 + 8) = &nuls;
          uint64_t v16 = &nuls;
          int v39 = &nuls;
        }
        BOOL v95 = v11;
        long long v94 = (void **)v30;
        if (v16 - v39 >= 1)
        {
          uint64_t v41 = -(uint64_t)v39;
          int v42 = v39 + 1;
          while (1)
          {
            uint64_t v43 = *((unsigned __int8 *)v42 - 1);
            if (*(v42 - 1) < 0)
            {
              if (!__maskrune(v43, 0x100uLL))
              {
LABEL_95:
                uint64_t v44 = *(void *)a1;
                goto LABEL_96;
              }
            }
            else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v43 + 60) & 0x100) == 0)
            {
              goto LABEL_95;
            }
            *(void *)a1 = v42;
            --v41;
            ++v42;
            if (*(void *)(a1 + 8) + v41 <= 0)
            {
              uint64_t v44 = -v41;
              goto LABEL_96;
            }
          }
        }
        uint64_t v44 = (uint64_t)v39;
LABEL_96:
        size_t v50 = v44 - (void)v39;
        int v51 = (const char **)&off_265591BD8;
        size_t v52 = "alnum";
        while (strncmp(v52, v39, v50) || v52[v50])
        {
          size_t v52 = v51[1];
          v51 += 3;
          if (!v52)
          {
            BOOL v11 = v95;
            if (!*(_DWORD *)(a1 + 16)) {
              *(_DWORD *)(a1 + 16) = 4;
            }
            *(void *)a1 = &nuls;
            *(void *)(a1 + 8) = &nuls;
            uint64_t v30 = (uint64_t)v94;
            goto LABEL_103;
          }
        }
        unint64_t v53 = (unsigned __int8 *)*(v51 - 1);
        unsigned __int8 v54 = *v53;
        if (*v53)
        {
          long long v55 = v53 + 1;
          do
          {
            *(unsigned char *)(*(void *)v9 + v54) |= *v13;
            *v14 += v54;
            int v56 = *v55++;
            unsigned __int8 v54 = v56;
          }
          while (v56);
        }
        long long v57 = *v51;
        int v58 = *(unsigned __int8 *)*v51;
        BOOL v11 = v95;
        uint64_t v30 = (uint64_t)v94;
        if (v58)
        {
          do
          {
            uint64_t v59 = *v15;
            size_t v60 = *v15 + strlen(v57) + 1;
            *uint64_t v15 = v60;
            long long v61 = (char *)malloc_type_realloc(*v94, v60, 0xDA2F212AuLL);
            if (v61)
            {
              *long long v94 = v61;
              if (*v15 - v59 != -1)
              {
                long long v62 = &v61[v59 - 1];
                uint64_t v63 = v59 - *v15;
                long long v64 = v57;
                while (v63)
                {
                  int v65 = *(unsigned __int8 *)v64++;
                  *v62++ = v65;
                  ++v63;
                  if (!v65) {
                    goto LABEL_130;
                  }
                }
                char *v62 = 0;
              }
            }
            else
            {
              if (*v94) {
                free(*v94);
              }
              *long long v94 = 0;
              if (!*(_DWORD *)(a1 + 16)) {
                *(_DWORD *)(a1 + 16) = 12;
              }
              *(void *)a1 = &nuls;
              *(void *)(a1 + 8) = &nuls;
            }
LABEL_130:
            uint64_t v66 = &v57[strlen(v57)];
            int v67 = *((unsigned __int8 *)v66 + 1);
            long long v57 = v66 + 1;
          }
          while (v67);
        }
LABEL_103:
        int v48 = *(char **)a1;
        uint64_t v16 = *(char **)(a1 + 8);
        if ((uint64_t)&v16[-*(void *)a1] < 1)
        {
          if (!*(_DWORD *)(a1 + 16)) {
            *(_DWORD *)(a1 + 16) = 7;
          }
          *(void *)a1 = &nuls;
          *(void *)(a1 + 8) = &nuls;
          int v48 = &nuls;
          uint64_t v16 = &nuls;
        }
        if (v16 - v48 > 1 && *v48 == 58 && v48[1] == 93)
        {
LABEL_110:
          int v17 = v48 + 2;
          *(void *)a1 = v17;
          goto LABEL_74;
        }
        if (!*(_DWORD *)(a1 + 16))
        {
          int v49 = 4;
          goto LABEL_113;
        }
      }
LABEL_71:
      *(void *)a1 = &nuls;
      *(void *)(a1 + 8) = &nuls;
      int v17 = &nuls;
      uint64_t v16 = &nuls;
LABEL_74:
      unint64_t v29 = v16 - v17;
    }
    while (v16 - v17 > 0);
  }
  if (v16 - v17 < 1 || (*(void *)a1 = v17 + 1, *v17 != 93))
  {
    if (!*(_DWORD *)(a1 + 16)) {
      *(_DWORD *)(a1 + 16) = 7;
    }
    *(void *)a1 = &nuls;
    *(void *)(a1 + 8) = &nuls;
    goto LABEL_170;
  }
  if (*(_DWORD *)(a1 + 16))
  {
LABEL_170:
    freeset(a1, v9);
    return;
  }
  uint64_t v68 = *(void *)(a1 + 56);
  if ((*(unsigned char *)(v68 + 40) & 2) != 0)
  {
    unint64_t v69 = *(unsigned int *)(v68 + 16);
    if ((int)v69 >= 1)
    {
      uint64_t v70 = MEMORY[0x263EF8318];
      while (1)
      {
        unint64_t v71 = v69 - 1;
        if ((*v13 & *(unsigned char *)(*(void *)v9 + (v69 - 1))) != 0)
        {
          if (v69 > 0x80)
          {
            if (__maskrune(v69 - 1, 0x100uLL))
            {
LABEL_143:
              int v72 = othercase(v71);
              if (v71 != v72)
              {
                *(unsigned char *)(*(void *)v9 + v72) |= *v13;
                *v14 += v72;
              }
            }
          }
          else if ((*(_DWORD *)(v70 + 4 * v71 + 60) & 0x100) != 0)
          {
            goto LABEL_143;
          }
        }
        unint64_t v69 = v71;
        if (v71 + 1 <= 1)
        {
          uint64_t v68 = *(void *)(a1 + 56);
          break;
        }
      }
    }
  }
  if (!v11)
  {
    int v73 = *(_DWORD *)(v68 + 16);
    if (v73 >= 1)
    {
      unsigned int v74 = v73 + 1;
      do
      {
        char v75 = v74 - 2;
        uint64_t v76 = *(void *)v9;
        uint64_t v77 = (v74 - 2);
        int v78 = *(unsigned __int8 *)(*(void *)v9 + v77);
        int v79 = *v13;
        if ((v79 & v78) != 0)
        {
          *(unsigned char *)(v76 + v77) = v78 & ~(_BYTE)v79;
          char v80 = *v14 - v75;
        }
        else
        {
          *(unsigned char *)(v76 + v77) = v79 | v78;
          char v80 = *v14 + v75;
        }
        *char v14 = v80;
        --v74;
      }
      while (v74 > 1);
      uint64_t v68 = *(void *)(a1 + 56);
    }
    if ((*(unsigned char *)(v68 + 40) & 8) != 0)
    {
      *(unsigned char *)(*(void *)v9 + 10) &= ~*v13;
      *v14 -= 10;
      uint64_t v68 = *(void *)(a1 + 56);
    }
  }
  unint64_t v81 = *(int *)(v68 + 16);
  if (v81)
  {
    int v82 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = *(void *)v9;
    do
    {
      if ((*(unsigned char *)(v84 + v83) & *v13) != 0) {
        ++v82;
      }
      ++v83;
    }
    while (v81 != v83);
    if (v82 == 1)
    {
      int v85 = 0;
      uint64_t v86 = 0;
      while ((*(unsigned char *)(v84 + v86) & *v13) == 0)
      {
        ++v86;
        v85 += 0x1000000;
        if (v81 == v86)
        {
          int v87 = 0;
          goto LABEL_188;
        }
      }
      int v87 = v85 >> 24;
LABEL_188:
      ordinary((__n128 *)a1, v87);
      goto LABEL_170;
    }
  }
  uint64_t v88 = *(void *)(v68 + 24);
  uint64_t v89 = *(int *)(v68 + 20);
  if ((int)v89 < 1)
  {
LABEL_186:
    unint64_t v92 = v9;
  }
  else
  {
    unint64_t v90 = v88 + 32 * v89;
    if (v81 <= 1) {
      uint64_t v91 = 1;
    }
    else {
      uint64_t v91 = *(int *)(v68 + 16);
    }
    unint64_t v92 = *(void *)(v68 + 24);
    while (1)
    {
      if (v92 != v9 && *(unsigned __int8 *)(v92 + 9) == *v14)
      {
        uint64_t v93 = 0;
        if (v81)
        {
          while (((*(unsigned char *)(*(void *)v92 + v93) & *(unsigned char *)(v92 + 8)) == 0) != ((*(unsigned char *)(*(void *)v9 + v93) & *v13) != 0))
          {
            if (v91 == ++v93)
            {
              uint64_t v93 = v91;
              break;
            }
          }
        }
        if (v93 == v81) {
          break;
        }
      }
      v92 += 32;
      if (v92 >= v90) {
        goto LABEL_186;
      }
    }
    freeset(a1, v9);
    uint64_t v88 = *(void *)(*(void *)(a1 + 56) + 24);
  }
  doemit((void **)a1, 805306368, (int)((uint64_t)(v92 - v88) >> 5));
}

uint64_t dupl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    enlarge((void **)a1, *(void *)(a1 + 32) + v4);
    memmove((void *)(*(void *)(a1 + 24) + 8 * *(void *)(a1 + 40)), (const void *)(*(void *)(a1 + 24) + 8 * a2), 8 * v4);
    *(void *)(a1 + 40) += v4;
  }
  return v3;
}

__n128 ordinary(__n128 *a1, int a2)
{
  unint64_t v4 = a1[3].n128_u64[1];
  uint64_t v5 = *(void *)(v4 + 88);
  uint64_t v6 = a2;
  if ((*(unsigned char *)(v4 + 40) & 2) == 0) {
    goto LABEL_7;
  }
  if (a2 > 0x7Fu)
  {
    if (!__maskrune(a2, 0x100uLL)) {
      goto LABEL_7;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * a2 + 60) & 0x100) == 0)
  {
    goto LABEL_7;
  }
  if (othercase(a2) != a2)
  {
    char v11 = a2;
    __int16 v12 = 93;
    __n128 v10 = *a1;
    a1->n128_u64[0] = (unint64_t)&v11;
    a1->n128_u64[1] = (unint64_t)&v12 + 1;
    p_bracket(a1);
    __n128 result = v10;
    *a1 = v10;
    return result;
  }
LABEL_7:
  doemit((void **)a1, 0x10000000, v6);
  if (!*(unsigned char *)(v5 + a2))
  {
    unint64_t v8 = a1[3].n128_u64[1];
    int v9 = *(_DWORD *)(v8 + 84);
    *(_DWORD *)(v8 + 84) = v9 + 1;
    *(unsigned char *)(v5 + a2) = v9;
  }
  return result;
}

uint64_t p_count(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1] - *a1;
  if (v2 < 1)
  {
    uint64_t v4 = 0;
LABEL_12:
    if (!*((_DWORD *)a1 + 4)) {
      *((_DWORD *)a1 + 4) = 10;
    }
    *a1 = (uint64_t)&nuls;
    a1[1] = (uint64_t)&nuls;
    return v4;
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = (char *)(v1 + v3);
    if (*(unsigned __int8 *)(v1 + v3) - 48 > 9 || (int)v4 > 255) {
      break;
    }
    *a1 = (uint64_t)(v5 + 1);
    uint64_t v4 = (*v5 + 10 * v4 - 48);
    ++v3;
    if (v2-- <= 1)
    {
      LODWORD(v3) = 1;
      break;
    }
  }
  if (!v3 || (int)v4 >= 256) {
    goto LABEL_12;
  }
  return v4;
}

void **repeat(void **result, uint64_t a2, int a3, uint64_t a4)
{
  if (!*((_DWORD *)result + 4))
  {
    uint64_t v7 = (uint64_t)result;
LABEL_4:
    if (a4 == 256) {
      int v8 = 3;
    }
    else {
      int v8 = 2;
    }
    if ((int)a4 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = a4;
    }
    do
    {
      uint64_t v10 = *(void *)(v7 + 40);
      if (a3 == 256) {
        int v11 = 3;
      }
      else {
        int v11 = 2;
      }
      if (a3 < 2) {
        int v11 = a3;
      }
      int v12 = v9 + 8 * v11;
      if (v12 != 19)
      {
        switch(v12)
        {
          case 0:
            *(void *)(v7 + 40) = a2;
            return result;
          case 1:
          case 2:
          case 3:
            doinsert((void *)v7, 2013265920, v10 - a2 + 1, a2);
            repeat(v7, a2 + 1, 1, a4);
            doemit((void **)v7, 0x80000000, *(void *)(v7 + 40) - a2);
            if (!*(_DWORD *)(v7 + 16)) {
              *(void *)(*(void *)(v7 + 24) + 8 * a2) = *(void *)(*(void *)(v7 + 24) + 8 * a2) & 0xF8000000 | (*(void *)(v7 + 40) - a2);
            }
            doemit((void **)v7, 2281701376, 0);
            if (!*(_DWORD *)(v7 + 16))
            {
              uint64_t v14 = *(void *)(v7 + 24) + 8 * *(void *)(v7 + 40);
              *(void *)(v14 - 8) = *(void *)(v14 - 8) & 0xF8000000 | 1;
            }
            uint64_t v15 = (void **)v7;
            uint64_t v16 = 2415919104;
            uint64_t v17 = 2;
            goto LABEL_34;
          case 9:
            return result;
          case 10:
            doinsert((void *)v7, 2013265920, v10 - a2 + 1, a2);
            doemit((void **)v7, 0x80000000, *(void *)(v7 + 40) - a2);
            if (!*(_DWORD *)(v7 + 16)) {
              *(void *)(*(void *)(v7 + 24) + 8 * a2) = *(void *)(*(void *)(v7 + 24) + 8 * a2) & 0xF8000000 | (*(void *)(v7 + 40) - a2);
            }
            doemit((void **)v7, 2281701376, 0);
            if (!*(_DWORD *)(v7 + 16))
            {
              uint64_t v13 = *(void *)(v7 + 24) + 8 * *(void *)(v7 + 40);
              *(void *)(v13 - 8) = *(void *)(v13 - 8) & 0xF8000000 | 1;
            }
            doemit((void **)v7, 2415919104, 2);
            __n128 result = (void **)dupl(v7, a2 + 1, v10 + 1);
            a2 = (uint64_t)result;
            a3 = 1;
            goto LABEL_25;
          case 11:
            doinsert((void *)v7, 1207959552, v10 - a2 + 1, a2);
            uint64_t v17 = *(void *)(v7 + 40) - a2;
            uint64_t v15 = (void **)v7;
            uint64_t v16 = 1342177280;
LABEL_34:
            return doemit(v15, v16, v17);
          case 18:
            __n128 result = (void **)dupl(v7, a2, *(void *)(v7 + 40));
            a2 = (uint64_t)result;
            --a3;
LABEL_25:
            a4 = (a4 - 1);
            if (*(_DWORD *)(v7 + 16)) {
              return result;
            }
            goto LABEL_4;
          default:
            *(_DWORD *)(v7 + 16) = 15;
            *(void *)uint64_t v7 = &nuls;
            *(void *)(v7 + 8) = &nuls;
            return result;
        }
      }
      __n128 result = (void **)dupl(v7, a2, *(void *)(v7 + 40));
      a2 = (uint64_t)result;
      --a3;
    }
    while (!*(_DWORD *)(v7 + 16));
  }
  return result;
}

uint64_t freeset(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 56);
  uint64_t v3 = *(int *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24) + 32 * *(int *)(v2 + 20);
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      *(unsigned char *)(*(void *)a2 + i) &= ~*(unsigned char *)(a2 + 8);
      *(unsigned char *)(a2 + 9) -= i;
    }
  }
  if (v4 - 32 == a2) {
    --*(_DWORD *)(*(void *)(result + 56) + 20);
  }
  return result;
}

uint64_t othercase(unsigned __int8 a1)
{
  unsigned __int8 v1 = a1;
  __darwin_ct_rune_t v2 = a1;
  if (a1 <= 0x7Fu)
  {
    int v3 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * a1 + 60);
    if ((v3 & 0x8000) == 0)
    {
      if ((v3 & 0x1000) == 0) {
        return (char)v1;
      }
      goto LABEL_8;
    }
LABEL_6:
    unsigned __int8 v4 = __tolower(v2);
LABEL_9:
    unsigned __int8 v1 = v4;
    return (char)v1;
  }
  if (__maskrune(a1, 0x8000uLL)) {
    goto LABEL_6;
  }
  if (__maskrune(v2, 0x1000uLL))
  {
LABEL_8:
    unsigned __int8 v4 = __toupper(v2);
    goto LABEL_9;
  }
  return (char)v1;
}

uint64_t p_b_symbol(uint64_t a1)
{
  __darwin_ct_rune_t v2 = *(char **)a1;
  int v3 = *(char **)(a1 + 8);
  if ((uint64_t)&v3[-*(void *)a1] < 1)
  {
    if (!*(_DWORD *)(a1 + 16)) {
      *(_DWORD *)(a1 + 16) = 7;
    }
    __darwin_ct_rune_t v2 = &nuls;
    *(void *)a1 = &nuls;
    *(void *)(a1 + 8) = &nuls;
    int v3 = &nuls;
  }
  if (v3 - v2 > 1 && *v2 == 91 && v2[1] == 46)
  {
    *(void *)a1 = v2 + 2;
    char v4 = p_b_coll_elem(a1, 46);
    uint64_t v5 = *(char **)a1;
    if ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) > 1 && *v5 == 46 && v5[1] == 93)
    {
      *(void *)a1 = v5 + 2;
    }
    else
    {
      if (!*(_DWORD *)(a1 + 16)) {
        *(_DWORD *)(a1 + 16) = 3;
      }
      *(void *)a1 = &nuls;
      *(void *)(a1 + 8) = &nuls;
    }
  }
  else
  {
    *(void *)a1 = v2 + 1;
    return *v2;
  }
  return v4;
}

uint64_t p_b_coll_elem(uint64_t a1, int a2)
{
  int v3 = *(const char **)a1;
  uint64_t v4 = *(void *)(a1 + 8) - *(void *)a1;
  if (v4 < 1)
  {
LABEL_7:
    if (!*(_DWORD *)(a1 + 16))
    {
      int v7 = 7;
LABEL_9:
      *(_DWORD *)(a1 + 16) = v7;
    }
  }
  else
  {
    uint64_t v5 = 0;
    size_t v6 = 0;
    while (v4 - 1 == v6 || v3[v6] != a2 || v3[v6 + 1] != 93)
    {
      *(void *)a1 = &v3[++v6];
      --v5;
      if (v4 + v5 <= 0) {
        goto LABEL_7;
      }
    }
    uint64_t v10 = "NUL";
    int v11 = &off_265591D10;
    do
    {
      if (!strncmp(v10, v3, v6) && strlen(v10) == v6) {
        return (char)*((unsigned char *)v11 - 8);
      }
      int v12 = *v11;
      v11 += 2;
      uint64_t v10 = v12;
    }
    while (v12);
    if (v6 == 1) {
      return *v3;
    }
    if (!*(_DWORD *)(a1 + 16))
    {
      int v7 = 3;
      goto LABEL_9;
    }
  }
  char v8 = 0;
  *(void *)a1 = &nuls;
  *(void *)(a1 + 8) = &nuls;
  return v8;
}

void **enlarge(void **result, uint64_t a2)
{
  if ((uint64_t)result[4] < a2)
  {
    int v3 = result;
    if ((unint64_t)a2 >> 61
      || (__n128 result = (void **)malloc_type_realloc(result[3], 8 * a2, 0x100004000313F17uLL)) == 0)
    {
      if (!*((_DWORD *)v3 + 4)) {
        *((_DWORD *)v3 + 4) = 12;
      }
      *int v3 = &nuls;
      v3[1] = &nuls;
    }
    else
    {
      v3[3] = result;
      v3[4] = (void *)a2;
    }
  }
  return result;
}

size_t llvm_regerror(int a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a1 == 255)
  {
    size_t v6 = *(const char **)(a2 + 16);
    if (strcmp("REG_NOMATCH", v6))
    {
      int v7 = (const char **)off_265592320;
      char v8 = "0";
      while (1)
      {
        uint64_t v9 = *((unsigned int *)v7 - 2);
        if (!v9) {
          goto LABEL_24;
        }
        uint64_t v10 = *v7;
        v7 += 3;
        if (!strcmp(v10, v6)) {
          goto LABEL_21;
        }
      }
    }
    uint64_t v9 = 1;
LABEL_21:
    uint64_t v23 = v9;
    int v18 = "%d";
LABEL_23:
    char v8 = __str;
    snprintf(__str, 0x32uLL, v18, v23);
    goto LABEL_24;
  }
  int v11 = &rerrs;
  do
  {
    int v13 = *v11;
    v11 += 6;
    int v12 = v13;
    if (v13) {
      BOOL v14 = v12 == (a1 & 0xFFFFFEFF);
    }
    else {
      BOOL v14 = 1;
    }
  }
  while (!v14);
  if ((a1 & 0x100) == 0)
  {
    char v8 = (char *)*((void *)v11 - 1);
    goto LABEL_24;
  }
  if (!v12)
  {
    uint64_t v23 = a1 & 0xFFFFFEFF;
    int v18 = "REG_0x%x";
    goto LABEL_23;
  }
  uint64_t v15 = 0;
  uint64_t v16 = *((void *)v11 - 2);
  while (v15 != 49)
  {
    int v17 = *(unsigned __int8 *)(v16 + v15);
    char v8 = __str;
    __str[v15++] = v17;
    if (!v17) {
      goto LABEL_24;
    }
  }
  char v8 = __str;
  __str[49] = 0;
LABEL_24:
  size_t v19 = strlen(v8);
  if (a4)
  {
    for (uint64_t i = a4 - 1; i; --i)
    {
      int v21 = *v8++;
      *a3++ = v21;
      if (!v21) {
        return v19 + 1;
      }
    }
    *a3 = 0;
  }
  return v19 + 1;
}

uint64_t llvm_regexec(uint64_t a1, char *__s, unint64_t a3, void *a4, char a5)
{
  if (*(_DWORD *)a1 != 62053) {
    return 2;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(_DWORD *)v5 != 53829 || (*(unsigned char *)(v5 + 72) & 4) != 0) {
    return 2;
  }
  int v8 = a5 & 7;
  uint64_t v9 = *(void *)(v5 + 48);
  if (v9 > 64)
  {
    int v18 = *(void **)(v5 + 56);
    uint64_t v17 = *(void *)(v5 + 64);
    if ((*(unsigned char *)(v5 + 40) & 4) != 0) {
      unint64_t v19 = 0;
    }
    else {
      unint64_t v19 = a3;
    }
    if ((a5 & 4) != 0)
    {
      size_t v20 = a4[1];
      int v21 = &__s[*a4];
    }
    else
    {
      size_t v20 = strlen(__s);
      int v21 = __s;
    }
    long long v62 = &__s[v20];
    if (&__s[v20] < v21) {
      return 16;
    }
    long long v121 = 0u;
    long long v122 = 0u;
    long long v120 = 0u;
    uint64_t v63 = *(unsigned __int8 **)(v5 + 96);
    unint64_t v113 = v19;
    uint64_t v118 = &__s[v20];
    unint64_t v109 = a4;
    if (v63)
    {
      long long v64 = v21;
      if (v21 < v62)
      {
        __dsta = v18;
        int v107 = v8;
        uint64_t v65 = v5;
        int v66 = *v63;
        int v67 = (char *)(__s - v21 + v20);
        uint64_t v104 = &__s[v20];
        uint64_t v68 = (char *)(&__s[v20] - v21);
        long long v64 = v21;
        do
        {
          if (*v64 == v66)
          {
            int64_t v69 = *(int *)(v65 + 104);
            if ((uint64_t)v68 >= v69 && !memcmp(v64, v63, v69)) {
              goto LABEL_146;
            }
          }
          ++v64;
          --v68;
          --v67;
        }
        while (v67);
        long long v64 = v104;
LABEL_146:
        uint64_t v5 = v65;
        int v18 = __dsta;
        long long v62 = v118;
        int v8 = v107;
      }
      if (v64 == v62) {
        return 1;
      }
    }
    uint64_t v119 = v5;
    LODWORD(v120) = v8;
    *(void *)&long long v121 = __s;
    *((void *)&v121 + 1) = v21;
    *(void *)&long long v123 = 0;
    *(void *)&long long v122 = v62;
    uint64_t v70 = (char *)malloc_type_malloc(4 * v9, 0x22B70DB9uLL);
    v124[0] = v70;
    if (!v70) {
      return 12;
    }
    uint64_t v71 = (uint64_t)v18 + 1;
    v124[1] = v70;
    size_t v72 = *(void *)(v5 + 48);
    *(void *)&long long v125 = &v70[v72];
    *((void *)&v125 + 1) = &v70[2 * v72];
    *((void *)&v123 + 1) = 4;
    long long v126 = &v70[3 * v72];
    bzero(v126, v72);
    uint64_t v111 = v5;
LABEL_150:
    if (*((char **)&v121 + 1) == v21) {
      int v73 = 128;
    }
    else {
      int v73 = *(v21 - 1);
    }
    long long v74 = v125;
    char v75 = v124[1];
    bzero(v124[1], *(void *)(v119 + 48));
    v75[v71] = 1;
    lstep(v119, v71, v17, (uint64_t)v75, 132, (uint64_t)v75);
    memmove((void *)v74, v75, *(void *)(v119 + 48));
    uint64_t v76 = 0;
    while (1)
    {
      if (v21 == (char *)v122) {
        int v77 = 128;
      }
      else {
        int v77 = *v21;
      }
      uint64_t v78 = v119;
      if (!memcmp(v75, (const void *)v74, *(void *)(v119 + 48))) {
        uint64_t v76 = v21;
      }
      if (v73 == 128)
      {
        if (v120) {
          goto LABEL_162;
        }
      }
      else if (v73 != 10 || (*(unsigned char *)(v78 + 40) & 8) == 0)
      {
LABEL_162:
        int v79 = 0;
        int v80 = 0;
        int v81 = 130;
        goto LABEL_165;
      }
      int v80 = *(_DWORD *)(v78 + 76);
      int v79 = 129;
      int v81 = 131;
LABEL_165:
      if (v77 == 128)
      {
        if ((v120 & 2) != 0) {
          goto LABEL_168;
        }
      }
      else if (v77 != 10 || (*(unsigned char *)(v78 + 40) & 8) == 0)
      {
LABEL_168:
        int v81 = v79;
        goto LABEL_171;
      }
      v80 += *(_DWORD *)(v78 + 80);
LABEL_171:
      if (v80 >= 1)
      {
        unsigned int v82 = v80 + 1;
        do
        {
          lstep(v119, v71, v17, (uint64_t)v75, v81, (uint64_t)v75);
          --v82;
        }
        while (v82 > 1);
      }
      if (v81 == 129)
      {
        if (v77 == 128)
        {
          int v81 = 129;
        }
        else
        {
LABEL_184:
          if (v77 > 0x7Fu) {
            int v84 = __maskrune(v77, 0x500uLL);
          }
          else {
            int v84 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v77 + 60) & 0x500;
          }
          if (v77 == 95 || v84 != 0) {
            int v81 = 133;
          }
        }
        if (v73 == 128) {
          goto LABEL_199;
        }
        unsigned int v83 = v73;
        goto LABEL_194;
      }
      if (v73 == 128) {
        goto LABEL_199;
      }
      unsigned int v83 = v73;
      if (v73 > 0x7Fu)
      {
        if (__maskrune(v73, 0x500uLL)) {
          goto LABEL_194;
        }
      }
      else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v73 + 60) & 0x500) != 0)
      {
        goto LABEL_194;
      }
      if (v73 != 95 && v77 != 128) {
        goto LABEL_184;
      }
LABEL_194:
      if (v83 > 0x7F)
      {
        if (__maskrune(v83, 0x500uLL)) {
          goto LABEL_202;
        }
      }
      else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v83 + 60) & 0x500) != 0)
      {
        goto LABEL_202;
      }
      if (v73 != 95)
      {
LABEL_199:
        uint64_t v86 = v118;
LABEL_200:
        if ((v81 - 133) > 1) {
          goto LABEL_205;
        }
        goto LABEL_204;
      }
LABEL_202:
      if (v81 == 130)
      {
        int v81 = 134;
        uint64_t v86 = v118;
      }
      else
      {
        uint64_t v86 = v118;
        if (v77 == 128) {
          goto LABEL_200;
        }
        int v87 = v77 > 0x7Fu
            ? __maskrune(v77, 0x500uLL)
            : *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v77 + 60) & 0x500;
        if (v87 || v77 == 95) {
          goto LABEL_200;
        }
        int v81 = 134;
      }
LABEL_204:
      lstep(v119, v71, v17, (uint64_t)v75, v81, (uint64_t)v75);
LABEL_205:
      if (v21 == v86 || v75[v17])
      {
        *((void *)&v122 + 1) = v76;
        if (!v75[v17])
        {
          free(*((void **)&v120 + 1));
          free((void *)v123);
          uint64_t v15 = 1;
          goto LABEL_256;
        }
        if (!v113 && !*(_DWORD *)(v111 + 120)) {
          goto LABEL_251;
        }
        uint64_t v88 = lslow(&v119, v76, v86, v71, v17);
        if (!v88)
        {
          do
          {
            ++*((void *)&v122 + 1);
            uint64_t v89 = lslow(&v119, *((char **)&v122 + 1), v86, v71, v17);
          }
          while (!v89);
          uint64_t v88 = v89;
        }
        if (v113 == 1 && !*(_DWORD *)(v111 + 120))
        {
LABEL_245:
          unint64_t v98 = &v88[-v121];
          *unint64_t v109 = *((void *)&v122 + 1) - v121;
          v109[1] = v98;
          if (v113 >= 2)
          {
            uint64_t v99 = v119;
            uint64_t v100 = (_OWORD *)(*((void *)&v120 + 1) + 16);
            unint64_t v101 = v109 + 2;
            for (unint64_t i = 1; i != v113; ++i)
            {
              if (i <= *(void *)(v99 + 112))
              {
                *(_OWORD *)unint64_t v101 = *v100;
              }
              else
              {
                void *v101 = -1;
                v101[1] = -1;
              }
              ++v100;
              v101 += 2;
            }
          }
          goto LABEL_251;
        }
        unint64_t v90 = (char *)*((void *)&v120 + 1);
        if (!*((void *)&v120 + 1))
        {
          unint64_t v90 = (char *)malloc_type_malloc(16 * *(void *)(v119 + 112) + 16, 0x1000040451B5BE8uLL);
          *((void *)&v120 + 1) = v90;
          if (!v90) {
            goto LABEL_263;
          }
        }
        uint64_t v91 = *(void *)(v119 + 112);
        if (v91)
        {
          unint64_t v92 = v90 + 16;
          if ((unint64_t)(v91 + 1) > 2) {
            uint64_t v93 = v91 + 1;
          }
          else {
            uint64_t v93 = 2;
          }
          memset(v92, 255, 16 * v93 - 16);
        }
        if (!*(_DWORD *)(v111 + 120) && (BYTE1(v120) & 4) == 0)
        {
          uint64_t v94 = (uint64_t)ldissect(&v119, *((char **)&v122 + 1), v88, v71, v17);
          goto LABEL_240;
        }
        uint64_t v95 = *(void *)(v111 + 128);
        uint64_t v96 = (void *)v123;
        if (v95 >= 1 && !(void)v123)
        {
          uint64_t v96 = malloc_type_malloc(8 * v95 + 8, 0x10040436913F5uLL);
          *(void *)&long long v123 = v96;
          uint64_t v95 = *(void *)(v111 + 128);
        }
        if (v95 >= 1 && !v96)
        {
          free(*((void **)&v120 + 1));
LABEL_263:
          uint64_t v15 = 12;
          goto LABEL_256;
        }
        uint64_t v97 = (unsigned __int8 *)*((void *)&v122 + 1);
        do
        {
          uint64_t v94 = lbackref(&v119, v97, (unsigned __int8 *)v88, v71, v17, 0, 0);
LABEL_240:
          if (v94) {
            goto LABEL_244;
          }
          uint64_t v97 = (unsigned __int8 *)*((void *)&v122 + 1);
          if ((unint64_t)v88 <= *((void *)&v122 + 1)) {
            break;
          }
          uint64_t v88 = lslow(&v119, *((char **)&v122 + 1), v88 - 1, v71, v17);
          uint64_t v97 = (unsigned __int8 *)*((void *)&v122 + 1);
        }
        while (v88);
        int v21 = (char *)(v97 + 1);
        if (v97 == (unsigned __int8 *)v86)
        {
LABEL_244:
          if (v113) {
            goto LABEL_245;
          }
LABEL_251:
          if (*((void *)&v120 + 1)) {
            free(*((void **)&v120 + 1));
          }
          if ((void)v123) {
            free((void *)v123);
          }
          uint64_t v15 = 0;
LABEL_256:
          free(v124[0]);
          return v15;
        }
        goto LABEL_150;
      }
      memmove(*((void **)&v74 + 1), v75, *(void *)(v119 + 48));
      memmove(v75, (const void *)v74, *(void *)(v119 + 48));
      lstep(v119, v71, v17, *((uint64_t *)&v74 + 1), v77, (uint64_t)v75);
      ++v21;
      int v73 = v77;
    }
  }
  uint64_t v11 = *(void *)(v5 + 56);
  uint64_t v10 = *(void *)(v5 + 64);
  if ((*(unsigned char *)(v5 + 40) & 4) != 0) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = a3;
  }
  if ((a5 & 4) != 0)
  {
    size_t v13 = a4[1];
    BOOL v14 = &__s[*a4];
  }
  else
  {
    size_t v13 = strlen(__s);
    BOOL v14 = __s;
  }
  size_t v22 = &__s[v13];
  if (&__s[v13] < v14) {
    return 16;
  }
  unint64_t v108 = a4;
  long long v122 = 0u;
  long long v123 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  uint64_t v23 = *(unsigned __int8 **)(v5 + 96);
  long long __dst = &__s[v13];
  if (v23)
  {
    uint64_t v24 = v14;
    if (v14 < v22)
    {
      uint64_t v116 = v11;
      int v105 = v8;
      uint64_t v25 = v5;
      int v26 = *v23;
      int32x2_t v27 = (char *)(__s - v14 + v13);
      unint64_t v112 = &__s[v13];
      uint64_t v28 = (char *)(&__s[v13] - v14);
      uint64_t v24 = v14;
      while (1)
      {
        if (*v24 == v26)
        {
          int64_t v29 = *(int *)(v25 + 104);
          if ((uint64_t)v28 >= v29 && !memcmp(v24, v23, v29)) {
            break;
          }
        }
        ++v24;
        --v28;
        if (!--v27)
        {
          uint64_t v24 = v112;
          break;
        }
      }
      uint64_t v5 = v25;
      size_t v22 = __dst;
      uint64_t v11 = v116;
      int v8 = v105;
    }
    if (v24 == v22) {
      return 1;
    }
  }
  uint64_t v30 = v11 + 1;
  uint64_t v119 = v5;
  LODWORD(v120) = v8;
  *(void *)&long long v121 = __s;
  *((void *)&v121 + 1) = v14;
  *(void *)&long long v122 = v22;
  unint64_t v103 = v12;
  uint64_t v106 = 1 << (v11 + 1);
  uint64_t v110 = v5;
  *(_OWORD *)uint64_t v124 = 0u;
  long long v125 = 0u;
LABEL_30:
  if (*((char **)&v121 + 1) == v14) {
    int v31 = 128;
  }
  else {
    int v31 = *(v14 - 1);
  }
  uint64_t v32 = v119;
  unint64_t v33 = sstep(v119, v30, v10, v106, 132, v106);
  int v34 = 0;
  unint64_t v35 = v33;
  unint64_t v117 = v33;
  while (1)
  {
    int v36 = v14 == (char *)v122 ? 128 : *v14;
    uint64_t v37 = v35 == v33 ? v14 : v34;
    if (v31 == 128)
    {
      if (v120) {
        goto LABEL_43;
      }
    }
    else if (v31 != 10 || (*(unsigned char *)(v32 + 40) & 8) == 0)
    {
LABEL_43:
      int v38 = 0;
      int v39 = 0;
      int v40 = 130;
      goto LABEL_46;
    }
    int v39 = *(_DWORD *)(v32 + 76);
    int v38 = 129;
    int v40 = 131;
LABEL_46:
    if (v36 == 128)
    {
      if ((v120 & 2) != 0) {
        goto LABEL_49;
      }
    }
    else if (v36 != 10 || (*(unsigned char *)(v32 + 40) & 8) == 0)
    {
LABEL_49:
      int v40 = v38;
      goto LABEL_52;
    }
    v39 += *(_DWORD *)(v32 + 80);
LABEL_52:
    if (v39 >= 1)
    {
      unsigned int v41 = v39 + 1;
      do
      {
        unint64_t v35 = sstep(v32, v30, v10, v35, v40, v35);
        --v41;
      }
      while (v41 > 1);
    }
    if (v40 == 129)
    {
      if (v36 == 128)
      {
        int v40 = 129;
      }
      else
      {
LABEL_65:
        if (v36 > 0x7Fu) {
          int v43 = __maskrune(v36, 0x500uLL);
        }
        else {
          int v43 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v36 + 60) & 0x500;
        }
        if (v36 == 95 || v43 != 0) {
          int v40 = 133;
        }
      }
      if (v31 == 128) {
        goto LABEL_83;
      }
      unsigned int v42 = v31;
      goto LABEL_75;
    }
    if (v31 == 128) {
      goto LABEL_83;
    }
    unsigned int v42 = v31;
    if (v31 > 0x7Fu)
    {
      if (__maskrune(v31, 0x500uLL)) {
        goto LABEL_75;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v31 + 60) & 0x500) != 0)
    {
      goto LABEL_75;
    }
    if (v31 != 95 && v36 != 128) {
      goto LABEL_65;
    }
LABEL_75:
    if (v42 > 0x7F)
    {
      if (!__maskrune(v42, 0x500uLL))
      {
LABEL_79:
        if (v31 != 95) {
          goto LABEL_83;
        }
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v42 + 60) & 0x500) == 0)
    {
      goto LABEL_79;
    }
    if (v40 == 130
      || v36 != 128
      && (v36 > 0x7Fu
        ? (int v46 = __maskrune(v36, 0x500uLL))
        : (int v46 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v36 + 60) & 0x500),
          !v46 && v36 != 95))
    {
      int v40 = 134;
LABEL_84:
      unint64_t v35 = sstep(v119, v30, v10, v35, v40, v35);
      goto LABEL_85;
    }
LABEL_83:
    if ((v40 - 133) <= 1) {
      goto LABEL_84;
    }
LABEL_85:
    int v34 = v37;
    unint64_t v33 = v117;
    uint64_t v45 = v35 & (1 << v10);
    if (v14 == __dst || v45) {
      break;
    }
    uint64_t v32 = v119;
    unint64_t v35 = sstep(v119, v30, v10, v35, v36, v117);
    ++v14;
    int v31 = v36;
  }
  *((void *)&v122 + 1) = v34;
  if (!v45)
  {
    free(*((void **)&v120 + 1));
    free((void *)v123);
    return 1;
  }
  if (!v103 && !*(_DWORD *)(v110 + 120)) {
    goto LABEL_130;
  }
  unsigned __int8 v47 = sslow(&v119, v34, __dst, v30, v10);
  if (!v47)
  {
    do
    {
      ++*((void *)&v122 + 1);
      int v48 = sslow(&v119, *((char **)&v122 + 1), __dst, v30, v10);
    }
    while (!v48);
    unsigned __int8 v47 = v48;
  }
  if (v103 == 1 && !*(_DWORD *)(v110 + 120)) {
    goto LABEL_124;
  }
  int v49 = (char *)*((void *)&v120 + 1);
  if (!*((void *)&v120 + 1))
  {
    int v49 = (char *)malloc_type_malloc(16 * *(void *)(v119 + 112) + 16, 0x1000040451B5BE8uLL);
    *((void *)&v120 + 1) = v49;
    if (!v49) {
      return 12;
    }
  }
  uint64_t v50 = *(void *)(v119 + 112);
  if (v50)
  {
    int v51 = v49 + 16;
    if ((unint64_t)(v50 + 1) > 2) {
      uint64_t v52 = v50 + 1;
    }
    else {
      uint64_t v52 = 2;
    }
    memset(v51, 255, 16 * v52 - 16);
  }
  if (!*(_DWORD *)(v110 + 120) && (BYTE1(v120) & 4) == 0)
  {
    uint64_t v53 = (uint64_t)sdissect(&v119, *((char **)&v122 + 1), v47, v30, v10);
    goto LABEL_119;
  }
  uint64_t v54 = *(void *)(v110 + 128);
  long long v55 = (void *)v123;
  if (v54 >= 1 && !(void)v123)
  {
    long long v55 = malloc_type_malloc(8 * v54 + 8, 0x10040436913F5uLL);
    *(void *)&long long v123 = v55;
    uint64_t v54 = *(void *)(v110 + 128);
  }
  if (v54 >= 1 && !v55)
  {
    free(*((void **)&v120 + 1));
    return 12;
  }
  int v56 = (unsigned __int8 *)*((void *)&v122 + 1);
  while (1)
  {
    uint64_t v53 = sbackref(&v119, v56, (unsigned __int8 *)v47, v30, v10, 0, 0);
LABEL_119:
    if (v53) {
      break;
    }
    int v56 = (unsigned __int8 *)*((void *)&v122 + 1);
    if ((unint64_t)v47 > *((void *)&v122 + 1))
    {
      unsigned __int8 v47 = sslow(&v119, *((char **)&v122 + 1), v47 - 1, v30, v10);
      int v56 = (unsigned __int8 *)*((void *)&v122 + 1);
      if (v47) {
        continue;
      }
    }
    BOOL v14 = (char *)(v56 + 1);
    if (v56 != (unsigned __int8 *)__dst) {
      goto LABEL_30;
    }
    break;
  }
  if (v103)
  {
LABEL_124:
    long long v57 = &v47[-v121];
    *unint64_t v108 = *((void *)&v122 + 1) - v121;
    v108[1] = v57;
    if (v103 >= 2)
    {
      uint64_t v58 = v119;
      uint64_t v59 = (_OWORD *)(*((void *)&v120 + 1) + 16);
      size_t v60 = v108 + 2;
      for (unint64_t j = 1; j != v103; ++j)
      {
        if (j <= *(void *)(v58 + 112))
        {
          *(_OWORD *)size_t v60 = *v59;
        }
        else
        {
          *size_t v60 = -1;
          v60[1] = -1;
        }
        ++v59;
        v60 += 2;
      }
    }
  }
LABEL_130:
  if (*((void *)&v120 + 1)) {
    free(*((void **)&v120 + 1));
  }
  if ((void)v123) {
    free((void *)v123);
  }
  return 0;
}

char *sslow(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a4;
  if (a4 >= a5)
  {
LABEL_12:
    unint64_t v25 = a1[12];
    if (a2 == (char *)a1[4]) {
      int v11 = 128;
    }
    else {
      int v11 = *(a2 - 1);
    }
    uint64_t v12 = *a1;
    unint64_t v13 = sstep(*a1, v6, a5, 1 << v6, 132, 1 << v6);
    BOOL v14 = 0;
    uint64_t v15 = a1;
    while (1)
    {
      if (a2 == (char *)v15[5]) {
        int v16 = 128;
      }
      else {
        int v16 = *a2;
      }
      if (v11 == 128)
      {
        if (v15[1]) {
          goto LABEL_22;
        }
      }
      else if (v11 != 10 || (*(unsigned char *)(v12 + 40) & 8) == 0)
      {
LABEL_22:
        int v17 = 0;
        int v18 = 0;
        int v19 = 130;
        goto LABEL_25;
      }
      int v18 = *(_DWORD *)(v12 + 76);
      int v17 = 129;
      int v19 = 131;
LABEL_25:
      if (v16 == 128)
      {
        if ((v15[1] & 2) != 0) {
          goto LABEL_28;
        }
      }
      else if (v16 != 10 || (*(unsigned char *)(v12 + 40) & 8) == 0)
      {
LABEL_28:
        int v19 = v17;
        goto LABEL_31;
      }
      v18 += *(_DWORD *)(v12 + 80);
LABEL_31:
      if (v18 >= 1)
      {
        unsigned int v20 = v18 + 1;
        do
        {
          unint64_t v13 = sstep(v12, v6, a5, v13, v19, v13);
          --v20;
        }
        while (v20 > 1);
      }
      if (v19 == 129)
      {
        uint64_t v15 = a1;
        if (v16 == 128)
        {
          int v19 = 129;
        }
        else
        {
LABEL_44:
          if (v16 > 0x7Fu) {
            int v22 = __maskrune(v16, 0x500uLL);
          }
          else {
            int v22 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v16 + 60) & 0x500;
          }
          if (v16 == 95 || v22 != 0) {
            int v19 = 133;
          }
        }
        if (v11 == 128) {
          goto LABEL_59;
        }
        unsigned int v21 = v11;
        goto LABEL_54;
      }
      uint64_t v15 = a1;
      if (v11 == 128) {
        goto LABEL_59;
      }
      unsigned int v21 = v11;
      if (v11 > 0x7Fu)
      {
        if (__maskrune(v11, 0x500uLL)) {
          goto LABEL_54;
        }
      }
      else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v11 + 60) & 0x500) != 0)
      {
        goto LABEL_54;
      }
      if (v11 != 95 && v16 != 128) {
        goto LABEL_44;
      }
LABEL_54:
      if (v21 > 0x7F)
      {
        if (__maskrune(v21, 0x500uLL)) {
          goto LABEL_61;
        }
      }
      else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v21 + 60) & 0x500) != 0)
      {
        goto LABEL_61;
      }
      if (v11 != 95) {
        goto LABEL_59;
      }
LABEL_61:
      if (v19 == 130) {
        goto LABEL_62;
      }
      if (v16 != 128)
      {
        if (v16 > 0x7Fu)
        {
          if (__maskrune(v16, 0x500uLL)) {
            goto LABEL_59;
          }
        }
        else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v16 + 60) & 0x500) != 0)
        {
          goto LABEL_59;
        }
        if (v16 != 95)
        {
LABEL_62:
          int v19 = 134;
LABEL_63:
          unint64_t v13 = sstep(*v15, v6, a5, v13, v19, v13);
          goto LABEL_64;
        }
      }
LABEL_59:
      if ((v19 - 133) <= 1) {
        goto LABEL_63;
      }
LABEL_64:
      if ((v13 & (1 << a5)) != 0) {
        BOOL v14 = a2;
      }
      if (a2 == a3 || v13 == v25) {
        return v14;
      }
      uint64_t v12 = *v15;
      unint64_t v13 = sstep(*v15, v6, a5, v13, v16, v25);
      ++a2;
      int v11 = v16;
    }
  }
  while (1)
  {
    uint64_t v8 = *(void *)(*(void *)(*a1 + 8) + 8 * v6);
    int v9 = v8 & 0xF8000000;
    if ((v8 & 0xF8000000) == 0x70000000 || v9 == 1744830464) {
      goto LABEL_10;
    }
    if (v9 != 0x10000000) {
      goto LABEL_12;
    }
    if (a2 == a3 || *a2 != (char)v8) {
      return 0;
    }
    ++a2;
LABEL_10:
    if (a5 == ++v6)
    {
      uint64_t v6 = a5;
      goto LABEL_12;
    }
  }
}

char *sdissect(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (a4 < a5)
  {
    uint64_t v7 = a4;
    do
    {
      uint64_t v10 = v7;
      uint64_t v11 = *(void *)(*a1 + 8);
      uint64_t v12 = *(void *)(v11 + 8 * v7);
      int v13 = v12 & 0xF8000000;
      if ((v12 & 0xF8000000) == 0x48000000 || v13 == 1476395008)
      {
        uint64_t v15 = (v12 & 0x7FFFFFF) + v7;
      }
      else
      {
        BOOL v16 = v13 != 2013265920 || (v12 & 0xF8000000) == 2415919104;
        uint64_t v15 = v7;
        if (!v16)
        {
          uint64_t v17 = *(void *)(v11 + 8 * v7);
          uint64_t v15 = v7;
          do
          {
            v15 += v17 & 0x7FFFFFF;
            uint64_t v17 = *(void *)(v11 + 8 * v15);
          }
          while ((v17 & 0xF8000000) != 0x90000000);
        }
      }
      uint64_t v7 = v15 + 1;
      switch(((unint64_t)(v12 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
        case 4uLL:
        case 5uLL:
          ++a2;
          break;
        case 8uLL:
          int v18 = a1;
          int v19 = a2;
          unsigned int v20 = a3;
          while (1)
          {
            unsigned int v21 = sslow(v18, v19, v20, v10, v15 + 1);
            if (sslow(a1, v21, a3, v15 + 1, a5) == a3) {
              break;
            }
            unsigned int v20 = sstep_back(*a1, a2, v21, v15 + 1, a5);
            int v18 = a1;
            int v19 = a2;
          }
          uint64_t v35 = v10 + 1;
          int v36 = a2;
          do
          {
            uint64_t v37 = v36;
            int v36 = a2;
            int v38 = sslow(a1, a2, v21, v35, v15);
            a2 = v38;
          }
          while (v38 && v38 != v36);
          if (v38) {
            int v39 = v36;
          }
          else {
            int v39 = v37;
          }
          if (v38) {
            int v40 = v38;
          }
          else {
            int v40 = v36;
          }
          sdissect(a1, v39, v40, v35, v15);
          a2 = v21;
          break;
        case 0xAuLL:
          int v22 = a1;
          uint64_t v23 = a2;
          uint64_t v24 = a3;
          while (1)
          {
            unint64_t v25 = sslow(v22, v23, v24, v10, v15 + 1);
            if (sslow(a1, v25, a3, v15 + 1, a5) == a3) {
              break;
            }
            uint64_t v24 = sstep_back(*a1, a2, v25, v15 + 1, a5);
            int v22 = a1;
            uint64_t v23 = a2;
          }
          uint64_t v41 = v10 + 1;
          if (sslow(a1, a2, v25, v41, v15)) {
            sdissect(a1, a2, v25, v41, v15);
          }
          a2 = v25;
          break;
        case 0xCuLL:
          *(void *)(a1[2] + 16 * (v12 & 0x7FFFFFF)) = &a2[-a1[3]];
          break;
        case 0xDuLL:
          *(void *)(a1[2] + 16 * (v12 & 0x7FFFFFF) + 8) = &a2[-a1[3]];
          break;
        case 0xEuLL:
          int v26 = a3;
          do
          {
            int32x2_t v27 = sslow(a1, a2, v26, v10, v7);
            uint64_t v28 = sslow(a1, v27, a3, v7, a5);
            int v26 = v27 - 1;
          }
          while (v28 != a3);
          uint64_t v29 = v10 + (*(void *)(*(void *)(*a1 + 8) + 8 * v10) & 0x7FFFFFFLL) - 1;
          uint64_t v30 = v10 + 1;
          while (sslow(a1, a2, v27, v30, v29) != v27)
          {
            uint64_t v31 = *(void *)(*a1 + 8);
            uint64_t v32 = *(void *)(v31 + 8 * (v29 + 1)) & 0x7FFFFFFLL;
            uint64_t v33 = v32 + v29 + 1;
            uint64_t v34 = v32 + v29;
            uint64_t v30 = v29 + 2;
            if ((*(void *)(v31 + 8 * v33) & 0xF8000000) == 0x88000000) {
              uint64_t v29 = v34;
            }
            else {
              uint64_t v29 = v33;
            }
          }
          sdissect(a1, a2, v27, v30, v29);
          a2 = v27;
          break;
        default:
          break;
      }
    }
    while (v7 < a5);
  }
  return a2;
}

uint64_t sbackref(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4 >= a5)
  {
LABEL_78:
    if (a2 == a3) {
      return (uint64_t)a2;
    }
    else {
      return 0;
    }
  }
  uint64_t v12 = a4;
LABEL_3:
  uint64_t v14 = v12;
  while (2)
  {
    uint64_t v15 = *a1;
    uint64_t v16 = *(void *)(*a1 + 8);
    uint64_t v17 = *(void *)(v16 + 8 * v14);
    switch(((unint64_t)(v17 & 0xF8000000) - 0x10000000) >> 27)
    {
      case 0uLL:
        if (a2 != a3)
        {
          int v26 = (char)*a2++;
          if (v26 == (char)v17) {
            goto LABEL_70;
          }
        }
        return 0;
      case 1uLL:
        if (a2 == (unsigned __int8 *)a1[4] && (a1[1] & 1) == 0) {
          goto LABEL_70;
        }
        if ((unint64_t)a2 >= a1[5]) {
          return 0;
        }
        int v27 = *(a2 - 1);
        goto LABEL_28;
      case 2uLL:
        uint64_t v28 = (unsigned __int8 *)a1[5];
        if (a2 == v28 && (a1[1] & 2) == 0) {
          goto LABEL_70;
        }
        if (a2 >= v28) {
          return 0;
        }
        int v27 = *a2;
LABEL_28:
        if (v27 != 10 || (*(unsigned char *)(v15 + 40) & 8) == 0) {
          return 0;
        }
        goto LABEL_70;
      case 3uLL:
        if (a2 == a3) {
          return 0;
        }
        ++a2;
        goto LABEL_70;
      case 4uLL:
        if (a2 == a3) {
          return 0;
        }
        uint64_t v29 = *(void *)(v15 + 24) + 32 * (v17 & 0x7FFFFFF);
        unsigned int v30 = *a2++;
        if ((*(unsigned char *)(v29 + 8) & *(unsigned char *)(*(void *)v29 + v30)) == 0) {
          return 0;
        }
        goto LABEL_70;
      case 0xAuLL:
      case 0x10uLL:
        goto LABEL_70;
      case 0xEuLL:
        ++v14;
        uint64_t v31 = *(void *)(v16 + 8 * v14);
        do
        {
          v14 += v31 & 0x7FFFFFF;
          uint64_t v31 = *(void *)(v16 + 8 * v14);
        }
        while ((v31 & 0xF8000000) != 0x90000000);
        goto LABEL_70;
      case 0x11uLL:
        uint64_t v32 = (unsigned __int8 *)a1[4];
        if (a2 == v32 && (a1[1] & 1) == 0
          || (unint64_t)a2 < a1[5] && *(a2 - 1) == 10 && (*(unsigned char *)(v15 + 40) & 8) != 0)
        {
          goto LABEL_58;
        }
        if (a2 <= v32) {
          return 0;
        }
        uint64_t v33 = *(a2 - 1);
        if ((char)*(a2 - 1) < 0) {
          int v34 = __maskrune(*(a2 - 1), 0x500uLL);
        }
        else {
          int v34 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v33 + 60) & 0x500;
        }
        uint64_t result = 0;
        if (v33 == 95 || v34) {
          return result;
        }
LABEL_58:
        if ((unint64_t)a2 >= a1[5]) {
          return 0;
        }
        int v38 = (char)*a2;
        goto LABEL_65;
      case 0x12uLL:
        uint64_t v35 = (unsigned __int8 *)a1[5];
        if (a2 == v35 && (a1[1] & 2) == 0) {
          goto LABEL_63;
        }
        if (a2 >= v35) {
          return 0;
        }
        uint64_t v36 = *a2;
        if (v36 == 10)
        {
          if ((*(unsigned char *)(v15 + 40) & 8) != 0) {
            goto LABEL_63;
          }
LABEL_54:
          int v37 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v36 + 60) & 0x500;
          goto LABEL_61;
        }
        if ((v36 & 0x80) == 0) {
          goto LABEL_54;
        }
        int v37 = __maskrune(*a2, 0x500uLL);
LABEL_61:
        uint64_t result = 0;
        if (v36 == 95 || v37) {
          return result;
        }
LABEL_63:
        if ((unint64_t)a2 <= a1[4]) {
          return 0;
        }
        int v38 = (char)*(a2 - 1);
LABEL_65:
        int v39 = v38;
        int v40 = v38 < 0
            ? __maskrune(v38, 0x500uLL)
            : *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v38 + 60) & 0x500;
        if (v39 != 95 && !v40) {
          return 0;
        }
LABEL_70:
        ++v14;
        goto LABEL_71;
      default:
        uint64_t v12 = v14 + 1;
        unint64_t v18 = ((unint64_t)(v17 & 0xF8000000) - 939524096) >> 27;
        if (v18 == 4)
        {
          uint64_t result = sbackref(a1, a2, a3, v14 + 1, a5, a6, a7);
          if (result) {
            return result;
          }
          uint64_t v14 = (v17 & 0x7FFFFFF) + v12;
LABEL_71:
          if (v14 >= a5) {
            goto LABEL_78;
          }
          continue;
        }
        uint64_t result = 0;
        switch(v18)
        {
          case 0uLL:
            uint64_t v20 = v17 & 0x7FFFFFF;
            uint64_t v21 = a1[2];
            uint64_t v22 = *(void *)(v21 + 16 * v20 + 8);
            if (v22 == -1) {
              return 0;
            }
            uint64_t v23 = *(void *)(v21 + 16 * v20);
            size_t v24 = v22 - v23;
            if (v22 == v23)
            {
              if ((int)a7 > 100) {
                return 0;
              }
              a7 = (a7 + 1);
            }
            if (a2 > &a3[-v24] || memcmp(a2, (const void *)(a1[3] + v23), v24)) {
              return 0;
            }
            do
              uint64_t v25 = *(void *)(v16 + 8 * v14++);
            while (v25 != (v20 | 0x40000000));
            a2 += v24;
            goto LABEL_71;
          case 2uLL:
            ++a6;
            *(void *)(a1[7] + 8 * a6) = a2;
            goto LABEL_77;
          case 3uLL:
            uint64_t v41 = a1[7];
            if (a2 != *(unsigned __int8 **)(v41 + 8 * a6))
            {
              *(void *)(v41 + 8 * a6) = a2;
              uint64_t result = sbackref(a1, a2, a3, v12 - (v17 & 0x7FFFFFF), a5, a6, a7);
              if (result) {
                return result;
              }
            }
            --a6;
LABEL_77:
            if (v12 >= a5) {
              goto LABEL_78;
            }
            goto LABEL_3;
          case 6uLL:
            uint64_t v42 = 16 * (v17 & 0x7FFFFFF);
            uint64_t v43 = a1[2];
            uint64_t v44 = *(void *)(v43 + v42);
            *(void *)(v43 + v42) = &a2[-a1[3]];
            uint64_t result = sbackref(a1, a2, a3, v12, a5, a6, a7);
            if (!result) {
              *(void *)(a1[2] + v42) = v44;
            }
            return result;
          case 7uLL:
            uint64_t v45 = v17 & 0x7FFFFFF;
            uint64_t v46 = a1[2] + 16 * v45;
            uint64_t v47 = *(void *)(v46 + 8);
            *(void *)(v46 + 8) = &a2[-a1[3]];
            uint64_t result = sbackref(a1, a2, a3, v12, a5, a6, a7);
            if (!result) {
              *(void *)(a1[2] + 16 * v45 + 8) = v47;
            }
            return result;
          case 8uLL:
            uint64_t result = sbackref(a1, a2, a3, v14 + 1, a5, a6, a7);
            if (result) {
              return result;
            }
            uint64_t v48 = v14 + (v17 & 0x7FFFFFF) - 1;
            break;
          default:
            return result;
        }
        while (1)
        {
          uint64_t v49 = *(void *)(*a1 + 8);
          if ((*(void *)(v49 + 8 * v48) & 0xF8000000) == 0x90000000) {
            break;
          }
          uint64_t v50 = v48 + 2;
          uint64_t v51 = *(void *)(v49 + 8 * (v48 + 1)) & 0x7FFFFFFLL;
          uint64_t v52 = v51 + v48 + 1;
          uint64_t v53 = v51 + v48;
          if ((*(void *)(v49 + 8 * v52) & 0xF8000000) == 0x88000000) {
            uint64_t v48 = v53;
          }
          else {
            uint64_t v48 = v52;
          }
          uint64_t result = sbackref(a1, a2, a3, v50, a5, a6, a7);
          if (result) {
            return result;
          }
        }
        return 0;
    }
  }
}

unint64_t sstep(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unint64_t a6)
{
  if (a2 != a3)
  {
    unint64_t v7 = 1 << a2;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      uint64_t v9 = *(void *)(v8 + 8 * a2);
      switch(((unint64_t)(v9 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
          BOOL v11 = a5 == (char)v9;
          goto LABEL_29;
        case 2uLL:
          BOOL v11 = (a5 & 0xFFFFFFFD) == 129;
          goto LABEL_29;
        case 3uLL:
          BOOL v11 = (a5 & 0xFFFFFFFE) == 130;
          goto LABEL_29;
        case 4uLL:
          if (a5 <= 127) {
            a6 |= 2 * (v7 & a4);
          }
          break;
        case 5uLL:
          if (a5 > 127) {
            break;
          }
          uint64_t v12 = *(void *)(a1 + 24) + 32 * (v9 & 0x7FFFFFF);
          if ((*(unsigned char *)(v12 + 8) & *(unsigned char *)(*(void *)v12 + a5)) == 0) {
            break;
          }
          unint64_t v10 = v7 & a4;
LABEL_6:
          a6 |= 2 * v10;
          break;
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 0xBuLL:
        case 0xCuLL:
        case 0xDuLL:
        case 0x11uLL:
          unint64_t v10 = a6 & v7;
          goto LABEL_6;
        case 9uLL:
          uint64_t v13 = a6 | (2 * (a6 & v7));
          a6 = ((v13 & v7) >> v9) | v13;
          if (((v7 >> v9) & v13) == 0 && (a6 & (v7 >> v9)) != 0)
          {
            a2 += ~(unint64_t)(v9 & 0x7FFFFFF);
            unint64_t v7 = 1 << a2;
          }
          break;
        case 0xAuLL:
        case 0xEuLL:
          a6 |= (((a6 | (2 * (a6 & v7))) & v7) << v9) | (2 * (a6 & v7));
          break;
        case 0xFuLL:
          if ((a6 & v7) == 0) {
            break;
          }
          uint64_t v15 = *(void *)(v8 + 8 * a2 + 8);
          if ((v15 & 0xF8000000) == 0x90000000)
          {
            LOBYTE(v16) = 1;
          }
          else
          {
            uint64_t v16 = 1;
            do
            {
              v16 += v15 & 0x7FFFFFF;
              uint64_t v15 = *(void *)(v8 + 8 * (v16 + a2));
            }
            while ((v15 & 0xF8000000) != 0x90000000);
          }
          unint64_t v17 = (a6 & v7) << v16;
          goto LABEL_37;
        case 0x10uLL:
          a6 |= 2 * (a6 & v7);
          if ((*(void *)(v8 + 8 * ((v9 & 0x7FFFFFF) + a2)) & 0xF8000000) == 0x90000000) {
            break;
          }
          unint64_t v17 = (a6 & v7) << v9;
LABEL_37:
          a6 |= v17;
          break;
        case 0x12uLL:
          BOOL v11 = a5 == 133;
          goto LABEL_29;
        case 0x13uLL:
          BOOL v11 = a5 == 134;
LABEL_29:
          if (v11) {
            a6 |= 2 * (v7 & a4);
          }
          break;
        default:
          break;
      }
      ++a2;
      v7 *= 2;
    }
    while (a2 != a3);
  }
  return a6;
}

char *sstep_back(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = a3 - 1;
  if (a4 < a5)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    while (1)
    {
      uint64_t v8 = *(void *)(v7 + 8 * a4);
      if ((v8 & 0xF8000000) != 0x70000000) {
        break;
      }
      if (a5 == ++a4) {
        return result;
      }
    }
    if ((v8 & 0xF8000000) == 0x10000000)
    {
      if (result == a2) {
        return a2;
      }
      uint64_t v9 = a3;
      uint64_t v10 = v7 + 8 * a4;
      while (1)
      {
        if ((char)v8 == *(v9 - 1))
        {
          if (a4 + 1 >= a5) {
            return result;
          }
          uint64_t v11 = *(void *)(v10 + 8);
          if ((v11 & 0xF8000000) != 0x10000000 || v9 >= a3) {
            return v9 - 1;
          }
          if (*v9 == (char)v11) {
            return result;
          }
        }
        --result;
        uint64_t v13 = v9 - 2;
        --v9;
        if (v13 == a2) {
          return a2;
        }
      }
    }
  }
  return result;
}

char *lslow(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a4;
  if (a4 >= a5)
  {
LABEL_12:
    uint64_t v12 = (void *)a1[10];
    long long __dst = (void *)a1[12];
    __s2 = (void *)a1[13];
    if (a2 == (char *)a1[4]) {
      int v13 = 128;
    }
    else {
      int v13 = *(a2 - 1);
    }
    bzero(v12, *(void *)(*a1 + 48));
    *((unsigned char *)v12 + v6) = 1;
    lstep(*a1, v6, a5, (uint64_t)v12, 132, (uint64_t)v12);
    uint64_t v14 = 0;
    while (1)
    {
      if (a2 == (char *)a1[5]) {
        int v15 = 128;
      }
      else {
        int v15 = *a2;
      }
      if (v13 == 128)
      {
        if ((a1[1] & 1) == 0)
        {
          uint64_t v16 = *a1;
LABEL_25:
          int v17 = *(_DWORD *)(v16 + 76);
          int v18 = 129;
          int v19 = 131;
          goto LABEL_27;
        }
      }
      else if (v13 == 10)
      {
        uint64_t v16 = *a1;
        if ((*(unsigned char *)(*a1 + 40) & 8) != 0) {
          goto LABEL_25;
        }
      }
      int v18 = 0;
      int v17 = 0;
      int v19 = 130;
LABEL_27:
      if (v15 == 128)
      {
        if ((a1[1] & 2) == 0)
        {
          uint64_t v20 = *a1;
LABEL_33:
          v17 += *(_DWORD *)(v20 + 80);
          goto LABEL_35;
        }
      }
      else if (v15 == 10)
      {
        uint64_t v20 = *a1;
        if ((*(unsigned char *)(*a1 + 40) & 8) != 0) {
          goto LABEL_33;
        }
      }
      int v19 = v18;
LABEL_35:
      if (v17 >= 1)
      {
        unsigned int v21 = v17 + 1;
        do
        {
          lstep(*a1, v6, a5, (uint64_t)v12, v19, (uint64_t)v12);
          --v21;
        }
        while (v21 > 1);
      }
      if (v19 == 129)
      {
        if (v15 == 128)
        {
          int v19 = 129;
        }
        else
        {
LABEL_48:
          if (v15 > 0x7Fu) {
            int v23 = __maskrune(v15, 0x500uLL);
          }
          else {
            int v23 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v15 + 60) & 0x500;
          }
          if (v15 == 95 || v23 != 0) {
            int v19 = 133;
          }
        }
        if (v13 == 128) {
          goto LABEL_63;
        }
        unsigned int v22 = v13;
        goto LABEL_58;
      }
      if (v13 == 128) {
        goto LABEL_63;
      }
      unsigned int v22 = v13;
      if (v13 > 0x7Fu)
      {
        if (__maskrune(v13, 0x500uLL)) {
          goto LABEL_58;
        }
      }
      else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v13 + 60) & 0x500) != 0)
      {
        goto LABEL_58;
      }
      if (v13 != 95 && v15 != 128) {
        goto LABEL_48;
      }
LABEL_58:
      if (v22 > 0x7F)
      {
        if (__maskrune(v22, 0x500uLL)) {
          goto LABEL_66;
        }
      }
      else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v22 + 60) & 0x500) != 0)
      {
        goto LABEL_66;
      }
      if (v13 != 95)
      {
LABEL_63:
        uint64_t v25 = __s2;
        goto LABEL_64;
      }
LABEL_66:
      if (v19 == 130)
      {
        int v19 = 134;
        uint64_t v25 = __s2;
LABEL_68:
        lstep(*a1, v6, a5, (uint64_t)v12, v19, (uint64_t)v12);
        goto LABEL_69;
      }
      uint64_t v25 = __s2;
      if (v15 != 128)
      {
        if (v15 > 0x7Fu)
        {
          if (__maskrune(v15, 0x500uLL)) {
            goto LABEL_64;
          }
        }
        else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v15 + 60) & 0x500) != 0)
        {
          goto LABEL_64;
        }
        if (v15 != 95)
        {
          int v19 = 134;
          goto LABEL_68;
        }
      }
LABEL_64:
      if ((v19 - 133) <= 1) {
        goto LABEL_68;
      }
LABEL_69:
      if (*((unsigned char *)v12 + a5)) {
        uint64_t v14 = a2;
      }
      size_t v26 = *(void *)(*a1 + 48);
      int v27 = memcmp(v12, v25, v26);
      if (a2 == a3 || !v27) {
        return v14;
      }
      memmove(__dst, v12, v26);
      memmove(v12, v25, *(void *)(*a1 + 48));
      lstep(*a1, v6, a5, (uint64_t)__dst, v15, (uint64_t)v12);
      ++a2;
      int v13 = v15;
    }
  }
  while (1)
  {
    uint64_t v9 = *(void *)(*(void *)(*a1 + 8) + 8 * v6);
    int v10 = v9 & 0xF8000000;
    if ((v9 & 0xF8000000) == 0x70000000 || v10 == 1744830464) {
      goto LABEL_10;
    }
    if (v10 != 0x10000000) {
      goto LABEL_12;
    }
    if (a2 == a3 || *a2 != (char)v9) {
      return 0;
    }
    ++a2;
LABEL_10:
    if (a5 == ++v6)
    {
      uint64_t v6 = a5;
      goto LABEL_12;
    }
  }
}

char *ldissect(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (a4 < a5)
  {
    uint64_t v7 = a4;
    do
    {
      uint64_t v10 = v7;
      uint64_t v11 = *(void *)(*a1 + 8);
      uint64_t v12 = *(void *)(v11 + 8 * v7);
      int v13 = v12 & 0xF8000000;
      if ((v12 & 0xF8000000) == 0x48000000 || v13 == 1476395008)
      {
        uint64_t v15 = (v12 & 0x7FFFFFF) + v7;
      }
      else
      {
        BOOL v16 = v13 != 2013265920 || (v12 & 0xF8000000) == 2415919104;
        uint64_t v15 = v7;
        if (!v16)
        {
          uint64_t v17 = *(void *)(v11 + 8 * v7);
          uint64_t v15 = v7;
          do
          {
            v15 += v17 & 0x7FFFFFF;
            uint64_t v17 = *(void *)(v11 + 8 * v15);
          }
          while ((v17 & 0xF8000000) != 0x90000000);
        }
      }
      uint64_t v7 = v15 + 1;
      switch(((unint64_t)(v12 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
        case 4uLL:
        case 5uLL:
          ++a2;
          break;
        case 8uLL:
          int v18 = a1;
          int v19 = a2;
          uint64_t v20 = a3;
          while (1)
          {
            unsigned int v21 = lslow(v18, v19, v20, v10, v15 + 1);
            if (lslow(a1, v21, a3, v15 + 1, a5) == a3) {
              break;
            }
            uint64_t v20 = sstep_back(*a1, a2, v21, v15 + 1, a5);
            int v18 = a1;
            int v19 = a2;
          }
          uint64_t v35 = v10 + 1;
          uint64_t v36 = a2;
          do
          {
            int v37 = v36;
            uint64_t v36 = a2;
            int v38 = lslow(a1, a2, v21, v35, v15);
            a2 = v38;
          }
          while (v38 && v38 != v36);
          if (v38) {
            int v39 = v36;
          }
          else {
            int v39 = v37;
          }
          if (v38) {
            int v40 = v38;
          }
          else {
            int v40 = v36;
          }
          ldissect(a1, v39, v40, v35, v15);
          a2 = v21;
          break;
        case 0xAuLL:
          unsigned int v22 = a1;
          int v23 = a2;
          size_t v24 = a3;
          while (1)
          {
            uint64_t v25 = lslow(v22, v23, v24, v10, v15 + 1);
            if (lslow(a1, v25, a3, v15 + 1, a5) == a3) {
              break;
            }
            size_t v24 = sstep_back(*a1, a2, v25, v15 + 1, a5);
            unsigned int v22 = a1;
            int v23 = a2;
          }
          uint64_t v41 = v10 + 1;
          if (lslow(a1, a2, v25, v41, v15)) {
            ldissect(a1, a2, v25, v41, v15);
          }
          a2 = v25;
          break;
        case 0xCuLL:
          *(void *)(a1[2] + 16 * (v12 & 0x7FFFFFF)) = &a2[-a1[3]];
          break;
        case 0xDuLL:
          *(void *)(a1[2] + 16 * (v12 & 0x7FFFFFF) + 8) = &a2[-a1[3]];
          break;
        case 0xEuLL:
          size_t v26 = a3;
          do
          {
            int v27 = lslow(a1, a2, v26, v10, v7);
            uint64_t v28 = lslow(a1, v27, a3, v7, a5);
            size_t v26 = v27 - 1;
          }
          while (v28 != a3);
          uint64_t v29 = v10 + (*(void *)(*(void *)(*a1 + 8) + 8 * v10) & 0x7FFFFFFLL) - 1;
          uint64_t v30 = v10 + 1;
          while (lslow(a1, a2, v27, v30, v29) != v27)
          {
            uint64_t v31 = *(void *)(*a1 + 8);
            uint64_t v32 = *(void *)(v31 + 8 * (v29 + 1)) & 0x7FFFFFFLL;
            uint64_t v33 = v32 + v29 + 1;
            uint64_t v34 = v32 + v29;
            uint64_t v30 = v29 + 2;
            if ((*(void *)(v31 + 8 * v33) & 0xF8000000) == 0x88000000) {
              uint64_t v29 = v34;
            }
            else {
              uint64_t v29 = v33;
            }
          }
          ldissect(a1, a2, v27, v30, v29);
          a2 = v27;
          break;
        default:
          break;
      }
    }
    while (v7 < a5);
  }
  return a2;
}

uint64_t lbackref(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4 >= a5)
  {
LABEL_78:
    if (a2 == a3) {
      return (uint64_t)a2;
    }
    else {
      return 0;
    }
  }
  uint64_t v12 = a4;
LABEL_3:
  uint64_t v14 = v12;
  while (2)
  {
    uint64_t v15 = *a1;
    uint64_t v16 = *(void *)(*a1 + 8);
    uint64_t v17 = *(void *)(v16 + 8 * v14);
    switch(((unint64_t)(v17 & 0xF8000000) - 0x10000000) >> 27)
    {
      case 0uLL:
        if (a2 != a3)
        {
          int v26 = (char)*a2++;
          if (v26 == (char)v17) {
            goto LABEL_70;
          }
        }
        return 0;
      case 1uLL:
        if (a2 == (unsigned __int8 *)a1[4] && (a1[1] & 1) == 0) {
          goto LABEL_70;
        }
        if ((unint64_t)a2 >= a1[5]) {
          return 0;
        }
        int v27 = *(a2 - 1);
        goto LABEL_28;
      case 2uLL:
        uint64_t v28 = (unsigned __int8 *)a1[5];
        if (a2 == v28 && (a1[1] & 2) == 0) {
          goto LABEL_70;
        }
        if (a2 >= v28) {
          return 0;
        }
        int v27 = *a2;
LABEL_28:
        if (v27 != 10 || (*(unsigned char *)(v15 + 40) & 8) == 0) {
          return 0;
        }
        goto LABEL_70;
      case 3uLL:
        if (a2 == a3) {
          return 0;
        }
        ++a2;
        goto LABEL_70;
      case 4uLL:
        if (a2 == a3) {
          return 0;
        }
        uint64_t v29 = *(void *)(v15 + 24) + 32 * (v17 & 0x7FFFFFF);
        unsigned int v30 = *a2++;
        if ((*(unsigned char *)(v29 + 8) & *(unsigned char *)(*(void *)v29 + v30)) == 0) {
          return 0;
        }
        goto LABEL_70;
      case 0xAuLL:
      case 0x10uLL:
        goto LABEL_70;
      case 0xEuLL:
        ++v14;
        uint64_t v31 = *(void *)(v16 + 8 * v14);
        do
        {
          v14 += v31 & 0x7FFFFFF;
          uint64_t v31 = *(void *)(v16 + 8 * v14);
        }
        while ((v31 & 0xF8000000) != 0x90000000);
        goto LABEL_70;
      case 0x11uLL:
        uint64_t v32 = (unsigned __int8 *)a1[4];
        if (a2 == v32 && (a1[1] & 1) == 0
          || (unint64_t)a2 < a1[5] && *(a2 - 1) == 10 && (*(unsigned char *)(v15 + 40) & 8) != 0)
        {
          goto LABEL_58;
        }
        if (a2 <= v32) {
          return 0;
        }
        uint64_t v33 = *(a2 - 1);
        if ((char)*(a2 - 1) < 0) {
          int v34 = __maskrune(*(a2 - 1), 0x500uLL);
        }
        else {
          int v34 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v33 + 60) & 0x500;
        }
        uint64_t result = 0;
        if (v33 == 95 || v34) {
          return result;
        }
LABEL_58:
        if ((unint64_t)a2 >= a1[5]) {
          return 0;
        }
        int v38 = (char)*a2;
        goto LABEL_65;
      case 0x12uLL:
        uint64_t v35 = (unsigned __int8 *)a1[5];
        if (a2 == v35 && (a1[1] & 2) == 0) {
          goto LABEL_63;
        }
        if (a2 >= v35) {
          return 0;
        }
        uint64_t v36 = *a2;
        if (v36 == 10)
        {
          if ((*(unsigned char *)(v15 + 40) & 8) != 0) {
            goto LABEL_63;
          }
LABEL_54:
          int v37 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v36 + 60) & 0x500;
          goto LABEL_61;
        }
        if ((v36 & 0x80) == 0) {
          goto LABEL_54;
        }
        int v37 = __maskrune(*a2, 0x500uLL);
LABEL_61:
        uint64_t result = 0;
        if (v36 == 95 || v37) {
          return result;
        }
LABEL_63:
        if ((unint64_t)a2 <= a1[4]) {
          return 0;
        }
        int v38 = (char)*(a2 - 1);
LABEL_65:
        int v39 = v38;
        int v40 = v38 < 0
            ? __maskrune(v38, 0x500uLL)
            : *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v38 + 60) & 0x500;
        if (v39 != 95 && !v40) {
          return 0;
        }
LABEL_70:
        ++v14;
        goto LABEL_71;
      default:
        uint64_t v12 = v14 + 1;
        unint64_t v18 = ((unint64_t)(v17 & 0xF8000000) - 939524096) >> 27;
        if (v18 == 4)
        {
          uint64_t result = lbackref(a1, a2, a3, v14 + 1, a5, a6, a7);
          if (result) {
            return result;
          }
          uint64_t v14 = (v17 & 0x7FFFFFF) + v12;
LABEL_71:
          if (v14 >= a5) {
            goto LABEL_78;
          }
          continue;
        }
        uint64_t result = 0;
        switch(v18)
        {
          case 0uLL:
            uint64_t v20 = v17 & 0x7FFFFFF;
            uint64_t v21 = a1[2];
            uint64_t v22 = *(void *)(v21 + 16 * v20 + 8);
            if (v22 == -1) {
              return 0;
            }
            uint64_t v23 = *(void *)(v21 + 16 * v20);
            size_t v24 = v22 - v23;
            if (v22 == v23)
            {
              if ((int)a7 > 100) {
                return 0;
              }
              a7 = (a7 + 1);
            }
            if (a2 > &a3[-v24] || memcmp(a2, (const void *)(a1[3] + v23), v24)) {
              return 0;
            }
            do
              uint64_t v25 = *(void *)(v16 + 8 * v14++);
            while (v25 != (v20 | 0x40000000));
            a2 += v24;
            goto LABEL_71;
          case 2uLL:
            ++a6;
            *(void *)(a1[7] + 8 * a6) = a2;
            goto LABEL_77;
          case 3uLL:
            uint64_t v41 = a1[7];
            if (a2 != *(unsigned __int8 **)(v41 + 8 * a6))
            {
              *(void *)(v41 + 8 * a6) = a2;
              uint64_t result = lbackref(a1, a2, a3, v12 - (v17 & 0x7FFFFFF), a5, a6, a7);
              if (result) {
                return result;
              }
            }
            --a6;
LABEL_77:
            if (v12 >= a5) {
              goto LABEL_78;
            }
            goto LABEL_3;
          case 6uLL:
            uint64_t v42 = 16 * (v17 & 0x7FFFFFF);
            uint64_t v43 = a1[2];
            uint64_t v44 = *(void *)(v43 + v42);
            *(void *)(v43 + v42) = &a2[-a1[3]];
            uint64_t result = lbackref(a1, a2, a3, v12, a5, a6, a7);
            if (!result) {
              *(void *)(a1[2] + v42) = v44;
            }
            return result;
          case 7uLL:
            uint64_t v45 = v17 & 0x7FFFFFF;
            uint64_t v46 = a1[2] + 16 * v45;
            uint64_t v47 = *(void *)(v46 + 8);
            *(void *)(v46 + 8) = &a2[-a1[3]];
            uint64_t result = lbackref(a1, a2, a3, v12, a5, a6, a7);
            if (!result) {
              *(void *)(a1[2] + 16 * v45 + 8) = v47;
            }
            return result;
          case 8uLL:
            uint64_t result = lbackref(a1, a2, a3, v14 + 1, a5, a6, a7);
            if (result) {
              return result;
            }
            uint64_t v48 = v14 + (v17 & 0x7FFFFFF) - 1;
            break;
          default:
            return result;
        }
        while (1)
        {
          uint64_t v49 = *(void *)(*a1 + 8);
          if ((*(void *)(v49 + 8 * v48) & 0xF8000000) == 0x90000000) {
            break;
          }
          uint64_t v50 = v48 + 2;
          uint64_t v51 = *(void *)(v49 + 8 * (v48 + 1)) & 0x7FFFFFFLL;
          uint64_t v52 = v51 + v48 + 1;
          uint64_t v53 = v51 + v48;
          if ((*(void *)(v49 + 8 * v52) & 0xF8000000) == 0x88000000) {
            uint64_t v48 = v53;
          }
          else {
            uint64_t v48 = v52;
          }
          uint64_t result = lbackref(a1, a2, a3, v50, a5, a6, a7);
          if (result) {
            return result;
          }
        }
        return 0;
    }
  }
}

uint64_t lstep(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (a2 != a3)
  {
    uint64_t v7 = a2;
    do
    {
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = *(void *)(v8 + 8 * v7);
      switch(((unint64_t)(v9 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
          if (a5 == (char)v9) {
            goto LABEL_32;
          }
          break;
        case 2uLL:
          if ((a5 & 0xFFFFFFFD) == 0x81) {
            goto LABEL_32;
          }
          break;
        case 3uLL:
          if ((a5 & 0xFFFFFFFE) == 0x82) {
            goto LABEL_32;
          }
          break;
        case 4uLL:
          if (a5 <= 127) {
            goto LABEL_32;
          }
          break;
        case 5uLL:
          if (a5 <= 127)
          {
            uint64_t v13 = *(void *)(a1 + 24) + 32 * (v9 & 0x7FFFFFF);
            if ((*(unsigned char *)(v13 + 8) & *(unsigned char *)(*(void *)v13 + a5)) != 0) {
              goto LABEL_32;
            }
          }
          break;
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 0xBuLL:
        case 0xCuLL:
        case 0xDuLL:
        case 0x11uLL:
          *(unsigned char *)(a6 + a2 + 1) |= *(unsigned char *)(a6 + a2);
          break;
        case 9uLL:
          char v14 = *(unsigned char *)(a6 + a2);
          *(unsigned char *)(a6 + a2 + 1) |= v14;
          uint64_t v15 = v9 & 0x7FFFFFF;
          int v16 = *(unsigned __int8 *)(a6 + a2 - v15);
          char v17 = v16 | v14;
          *(unsigned char *)(a6 + a2 - v15) = v17;
          if (v16) {
            BOOL v18 = 1;
          }
          else {
            BOOL v18 = v17 == 0;
          }
          if (!v18)
          {
            v7 += ~v15;
            a2 = v7;
          }
          break;
        case 0xAuLL:
        case 0xEuLL:
          char v10 = *(unsigned char *)(a6 + a2);
          *(unsigned char *)(a6 + a2 + 1) |= v10;
          uint64_t v11 = (v9 & 0x7FFFFFF) + a2;
          char v12 = *(unsigned char *)(a6 + v11) | v10;
          goto LABEL_7;
        case 0xFuLL:
          if (*(unsigned char *)(a6 + a2))
          {
            uint64_t v19 = *(void *)(v8 + 8 * v7 + 8);
            if ((v19 & 0xF8000000) == 0x90000000)
            {
              uint64_t v20 = 1;
            }
            else
            {
              uint64_t v20 = 1;
              do
              {
                v20 += v19 & 0x7FFFFFF;
                uint64_t v19 = *(void *)(v8 + 8 * (v20 + v7));
              }
              while ((v19 & 0xF8000000) != 0x90000000);
            }
            *(unsigned char *)(a6 + v20 + a2) |= *(unsigned char *)(a6 + a2);
          }
          break;
        case 0x10uLL:
          char v21 = *(unsigned char *)(a6 + a2);
          *(unsigned char *)(a6 + a2 + 1) |= v21;
          uint64_t v22 = v9 & 0x7FFFFFF;
          if ((*(void *)(*(void *)(a1 + 8) + 8 * (v22 + v7)) & 0xF8000000) != 0x90000000)
          {
            uint64_t v11 = v22 + a2;
            char v12 = *(unsigned char *)(a6 + v11) | v21;
LABEL_7:
            *(unsigned char *)(a6 + v11) = v12;
          }
          break;
        case 0x12uLL:
          if (a5 != 133) {
            break;
          }
          goto LABEL_32;
        case 0x13uLL:
          if (a5 == 134) {
LABEL_32:
          }
            *(unsigned char *)(a2 + a6 + 1) |= *(unsigned char *)(a4 + a2);
          break;
        default:
          break;
      }
      ++v7;
      ++a2;
    }
    while (v7 != a3);
  }
  return a6;
}

void llvm_regfree(uint64_t a1)
{
  if (*(_DWORD *)a1 == 62053)
  {
    unsigned __int8 v1 = *(void **)(a1 + 24);
    if (v1)
    {
      if (*(_DWORD *)v1 == 53829)
      {
        *(_DWORD *)a1 = 0;
        *(_DWORD *)unsigned __int8 v1 = 0;
        __darwin_ct_rune_t v2 = (void *)v1[1];
        if (v2) {
          free(v2);
        }
        int v3 = (void *)v1[3];
        if (v3) {
          free(v3);
        }
        uint64_t v4 = (void *)v1[4];
        if (v4) {
          free(v4);
        }
        uint64_t v5 = (void *)v1[12];
        if (v5) {
          free(v5);
        }
        free(v1);
      }
    }
  }
}

unint64_t llvm::xxHash64(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = (unint64_t)a1 + a2;
  if (a2 < 0x20)
  {
    uint64_t v6 = a1;
    unint64_t v12 = 0x27D4EB2F165667C5;
  }
  else
  {
    unint64_t v3 = 0;
    unint64_t v4 = 0x61C8864E7A143579;
    unint64_t v5 = 0x60EA27EEADC0B5D6;
    uint64_t v6 = a1;
    unint64_t v7 = 0xC2B2AE3D27D4EB4FLL;
    do
    {
      uint64_t v8 = __ROR8__(v5 - 0x3D4D51C2D82B14B1 * *v6, 33);
      unint64_t v5 = 0x9E3779B185EBCA87 * v8;
      uint64_t v9 = __ROR8__(v7 - 0x3D4D51C2D82B14B1 * v6[1], 33);
      unint64_t v7 = 0x9E3779B185EBCA87 * v9;
      uint64_t v10 = __ROR8__(v3 - 0x3D4D51C2D82B14B1 * v6[2], 33);
      unint64_t v3 = 0x9E3779B185EBCA87 * v10;
      uint64_t v11 = __ROR8__(v4 - 0x3D4D51C2D82B14B1 * v6[3], 33);
      unint64_t v4 = 0x9E3779B185EBCA87 * v11;
      v6 += 4;
    }
    while ((unint64_t)v6 <= v2 - 32);
    unint64_t v12 = 0x85EBCA77C2B2AE63
        - 0x61C8864E7A143579
        * ((0x85EBCA77C2B2AE63
          - 0x61C8864E7A143579
          * ((0x85EBCA77C2B2AE63
            - 0x61C8864E7A143579
            * ((0x85EBCA77C2B2AE63
              - 0x61C8864E7A143579
              * ((((0x3C6EF3630BD7950ELL * v8) | (v5 >> 63))
                + 0x1BBCD8C2F5E54380 * v9
                + (v7 >> 57)
                + 0x779B185EBCA87000 * v10
                + (v3 >> 52)
                - 0x1939E850D5E40000 * v11
                + (v4 >> 46)) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v8, 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v9, 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v10, 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v11, 33)));
  }
  unint64_t v13 = v12 + a2;
  if ((unint64_t)(v6 + 1) <= v2)
  {
    uint64_t v15 = v6;
    do
    {
      uint64_t v16 = *v6++;
      unint64_t v13 = 0x85EBCA77C2B2AE63
          - 0x61C8864E7A143579 * __ROR8__((0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * v16, 33)) ^ v13, 37);
      char v14 = v15 + 1;
      unint64_t v17 = (unint64_t)(v15 + 2);
      ++v15;
    }
    while (v17 <= v2);
  }
  else
  {
    char v14 = v6;
  }
  if ((unint64_t)v14 + 4 <= v2)
  {
    unsigned int v18 = *(_DWORD *)v6;
    uint64_t v6 = (uint64_t *)((char *)v6 + 4);
    unint64_t v13 = 0x165667B19E3779F9 - 0x3D4D51C2D82B14B1 * __ROR8__((0x9E3779B185EBCA87 * v18) ^ v13, 41);
  }
  if ((unint64_t)v6 < v2)
  {
    unint64_t v19 = (char *)a1 + a2 - (char *)v6;
    do
    {
      unsigned int v20 = *(unsigned __int8 *)v6;
      uint64_t v6 = (uint64_t *)((char *)v6 + 1);
      unint64_t v13 = 0x9E3779B185EBCA87 * __ROR8__((0x27D4EB2F165667C5 * v20) ^ v13, 53);
      --v19;
    }
    while (v19);
  }
  unint64_t v21 = 0x165667B19E3779F9
      * ((0xC2B2AE3D27D4EB4FLL * (v13 ^ (v13 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (v13 ^ (v13 >> 33))) >> 29));
  return v21 ^ HIDWORD(v21);
}

void llvm::sys::DynamicLibrary::HandleSet::~HandleSet(llvm::sys::DynamicLibrary::HandleSet *this)
{
  uint64_t v3 = *(void *)this;
  for (uint64_t i = *((void *)this + 1); i != v3; i -= 8)
  {
    unint64_t v4 = *(void **)(i - 8);
    dlclose(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 3);
  if (v5) {
    dlclose(v5);
  }
  llvm::sys::DynamicLibrary::SearchOrder = 0;
  uint64_t v6 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v6;
    operator delete(v6);
  }
}

void *llvm::sys::DynamicLibrary::HandleSet::DLOpen(const char *a1, uint64_t a2)
{
  uint64_t result = dlopen(a1, 9);
  if (!result)
  {
    if (a2)
    {
      unint64_t v4 = dlerror();
      MEMORY[0x263E4FD30](a2, v4);
    }
    return &llvm::sys::DynamicLibrary::Invalid;
  }
  return result;
}

void anonymous namespace'::getGlobals(_anonymous_namespace_ *this)
{
  {
    *(void *)algn_26A956DA8 = 0;
    qword_26A956DB0 = 0x1000000000;
    unk_26A956DB8 = 0u;
    unk_26A956DC8 = 0u;
    unk_26A956DD8 = 0u;
    unk_26A956DE8 = 0u;
    MEMORY[0x263E4FEB0](&unk_26A956DF8);
    dword_26A956E38 = 0;
  }
}

void *llvm::sys::DynamicLibrary::getPermanentLibrary(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4 = llvm::sys::DynamicLibrary::HandleSet::DLOpen((const char *)a1, a2);
  if (v4 != &llvm::sys::DynamicLibrary::Invalid)
  {
    std::recursive_mutex::lock(&stru_26A956DF8);
    llvm::sys::DynamicLibrary::HandleSet::AddLibrary((llvm::sys::DynamicLibrary::HandleSet *)&unk_26A956DB8, v4, a1 == 0, 1, 0);
    std::recursive_mutex::unlock(&stru_26A956DF8);
  }
  return v4;
}

uint64_t llvm::sys::DynamicLibrary::HandleSet::AddLibrary(llvm::sys::DynamicLibrary::HandleSet *this, void *__handle, char a3, int a4, int a5)
{
  if ((a3 & 1) == 0)
  {
    if (a5)
    {
      unint64_t v7 = (void **)*((void *)this + 1);
LABEL_12:
      unint64_t v10 = *((void *)this + 2);
      if ((unint64_t)v7 >= v10)
      {
        unint64_t v12 = *(void ***)this;
        uint64_t v13 = ((uint64_t)v7 - *(void *)this) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          abort();
        }
        uint64_t v15 = v10 - (void)v12;
        if (v15 >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          if (v16 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v17 = (char *)operator new(8 * v16);
        }
        else
        {
          unint64_t v17 = 0;
        }
        unsigned int v18 = &v17[8 * v13];
        *(void *)unsigned int v18 = __handle;
        uint64_t v11 = v18 + 8;
        if (v7 != v12)
        {
          do
          {
            uint64_t v19 = (uint64_t)*--v7;
            *((void *)v18 - 1) = v19;
            v18 -= 8;
          }
          while (v7 != v12);
          unint64_t v7 = *(void ***)this;
        }
        *(void *)this = v18;
        *((void *)this + 1) = v11;
        *((void *)this + 2) = &v17[8 * v16];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *unint64_t v7 = __handle;
        uint64_t v11 = v7 + 1;
      }
      *((void *)this + 1) = v11;
      return 1;
    }
    uint64_t v8 = *(void ***)this;
    unint64_t v7 = (void **)*((void *)this + 1);
    if (*(void ***)this != v7)
    {
      while (*v8 != __handle)
      {
        if (++v8 == v7)
        {
          uint64_t v8 = (void **)*((void *)this + 1);
          break;
        }
      }
    }
    if (v8 == v7) {
      goto LABEL_12;
    }
    if (a4) {
      dlclose(__handle);
    }
    return 0;
  }
  unsigned int v20 = (void *)*((void *)this + 3);
  if (v20)
  {
    if (a4)
    {
      dlclose(v20);
      unsigned int v20 = (void *)*((void *)this + 3);
    }
    if (v20 == __handle) {
      return 0;
    }
  }
  *((void *)this + 3) = __handle;
  return 1;
}

void anonymous namespace'::Globals::~Globals(_anonymous_namespace_::Globals *this)
{
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 88));
  llvm::sys::DynamicLibrary::HandleSet::~HandleSet((_anonymous_namespace_::Globals *)((char *)this + 56));
  llvm::sys::DynamicLibrary::HandleSet::~HandleSet((_anonymous_namespace_::Globals *)((char *)this + 24));
  if (*((_DWORD *)this + 3))
  {
    uint64_t v2 = *((unsigned int *)this + 2);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)this + v3);
        if (v5 != -8 && v5 != 0) {
          MEMORY[0x263E500A0]();
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)this);
}

void *llvm::sys::Memory::allocateMappedMemory@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = a1 - 1;
  uint64_t v9 = (char)(((a3 & 0x7000000u) - 0x1000000) >> 24);
  while (1)
  {
    unint64_t v10 = a2;
    uint64_t result = (void *)std::system_category();
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = result;
    if (!a1) {
      break;
    }
    if (v10) {
      unint64_t v12 = v10[1] + *v10;
    }
    else {
      unint64_t v12 = 0;
    }
    int v13 = dword_261E8D1F8[v9];
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26B417A78, memory_order_acquire) & 1) == 0)
    {
      int v21 = v13;
      unsigned int v18 = (llvm::sys::Process *)__cxa_guard_acquire(&qword_26B417A78);
      int v13 = v21;
      if (v18)
      {
        qword_26B417A70 = llvm::sys::Process::getPageSizeEstimate(v18);
        __cxa_guard_release(&qword_26B417A78);
        int v13 = v21;
      }
    }
    unint64_t v14 = v8 + qword_26B417A70;
    if (v12 % qword_26B417A70) {
      unint64_t v15 = qword_26B417A70 + v12 - v12 % qword_26B417A70;
    }
    else {
      unint64_t v15 = v12;
    }
    if (v12) {
      unint64_t v16 = (void *)v15;
    }
    else {
      unint64_t v16 = 0;
    }
    unint64_t v17 = v14 / qword_26B417A70;
    uint64_t result = mmap(v16, v14 / qword_26B417A70 * qword_26B417A70, v13, 4098, -1, 0);
    if (result != (void *)-1)
    {
      *(void *)&long long v23 = result;
      *((void *)&v23 + 1) = qword_26B417A70 * v17;
      LODWORD(v24) = a3;
      if ((a3 & 0x4000000) == 0
        || (*(void *)a4 = llvm::sys::Memory::protectMappedMemory((uint64_t)&v23, a3),
            *(void *)(a4 + 8) = v19,
            uint64_t result = (void *)std::system_category(),
            *(void **)(a4 + 8) == result)
        && !*(_DWORD *)a4)
      {
        *(_OWORD *)a5 = v23;
        *(void *)(a5 + 16) = v24;
        return result;
      }
      break;
    }
    a2 = 0;
    if (!v10)
    {
      int v20 = *__error();
      uint64_t result = (void *)std::generic_category();
      *(_DWORD *)a4 = v20;
      *(void *)(a4 + 8) = result;
      break;
    }
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 16) = 0;
  return result;
}

uint64_t llvm::sys::Memory::protectMappedMemory(uint64_t a1, int a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26B417A80, memory_order_acquire) & 1) == 0)
  {
    int v13 = a2;
    unint64_t v14 = (llvm::sys::Process *)__cxa_guard_acquire(&qword_26B417A80);
    a2 = v13;
    if (v14)
    {
      _MergedGlobals_6 = 63 - __clz(llvm::sys::Process::getPageSizeEstimate(v14));
      __cxa_guard_release(&qword_26B417A80);
      a2 = v13;
    }
  }
  uint64_t v3 = *(void **)a1;
  if (!*(void *)a1) {
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_17;
  }
  if (a2)
  {
    int v5 = dword_261E8D1F8[(char)(((a2 & 0x7000000u) - 0x1000000) >> 24)];
    uint64_t v6 = (uint64_t)v3 + (-1 << _MergedGlobals_6) + (1 << _MergedGlobals_6);
    uint64_t v7 = -(1 << _MergedGlobals_6);
    uint64_t v8 = (void *)(v6 & v7);
    uint64_t v9 = ((unint64_t)v3 + v4 + (1 << _MergedGlobals_6) - 1) & v7;
    if ((a2 & 0x4000000) != 0)
    {
      size_t v10 = v9 - (void)v8;
      if (((((a2 & 0x7000000u) - 0x1000000) >> 24) & 0xFFFFFFFD) != 1)
      {
        if (!mprotect((void *)(v6 & v7), v9 - (void)v8, v5))
        {
          sys_icache_invalidate(*(void **)a1, *(void *)(a1 + 8));
LABEL_17:
          std::system_category();
          return 0;
        }
        goto LABEL_14;
      }
      if (mprotect((void *)(v6 & v7), v9 - (void)v8, v5 | 1))
      {
LABEL_14:
        unsigned int v11 = *__error();
        goto LABEL_15;
      }
      sys_icache_invalidate(*(void **)a1, *(void *)(a1 + 8));
    }
    else
    {
      size_t v10 = v9 - (void)v8;
    }
    if (!mprotect(v8, v10, v5)) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  unsigned int v11 = 22;
LABEL_15:
  std::generic_category();
  return v11;
}

uint64_t llvm::sys::Memory::releaseMappedMemory(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (!v2) {
    goto LABEL_6;
  }
  size_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_6;
  }
  if (!munmap(v2, v3))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
LABEL_6:
    std::system_category();
    return 0;
  }
  uint64_t v4 = *__error();
  std::generic_category();
  return v4;
}

unint64_t llvm::sys::path::begin@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v5 = (unsigned __int8 *)result;
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  v20[0] = result;
  v20[1] = a2;
  if (!a2)
  {
    uint64_t v8 = 0;
    goto LABEL_50;
  }
  if (a3 >= 2)
  {
    uint64_t result = *(unsigned __int8 *)result;
    if (a2 < 2) {
      goto LABEL_32;
    }
    if ((result & 0x80) != 0)
    {
      uint64_t result = __maskrune(result, 0x100uLL);
      if (!result) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t result = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * result + 60) & 0x100;
      if (!result) {
        goto LABEL_11;
      }
    }
    if (v5[1] == 58)
    {
      uint64_t v8 = 2;
      goto LABEL_50;
    }
  }
LABEL_11:
  uint64_t result = *v5;
  if (a2 >= 3)
  {
    BOOL v9 = a3 > 1 && result == 92;
    BOOL v10 = v9;
    BOOL v11 = result != 47 && !v10;
    if (!v11 && result == v5[1])
    {
      int v12 = v5[2];
      BOOL v13 = a3 > 1 && v12 == 92;
      BOOL v14 = v13;
      if (v12 != 47 && !v14)
      {
        unint64_t v15 = 2;
LABEL_41:
        if (a3 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = 2;
        }
        if (a3 <= 1) {
          uint64_t v19 = "/";
        }
        else {
          uint64_t v19 = "\\/";
        }
        uint64_t result = llvm::StringRef::find_first_of(v20, (unsigned __int8 *)v19, v18, v15);
        if (a2 >= result) {
          uint64_t v8 = result;
        }
        else {
          uint64_t v8 = a2;
        }
        goto LABEL_50;
      }
    }
  }
LABEL_32:
  BOOL v17 = a3 > 1 && result == 92;
  uint64_t v8 = 1;
  if (result != 47 && !v17)
  {
    unint64_t v15 = 0;
    goto LABEL_41;
  }
LABEL_50:
  *(void *)(a4 + 16) = v5;
  *(void *)(a4 + 24) = v8;
  *(void *)(a4 + 32) = 0;
  *(_DWORD *)(a4 + 40) = a3;
  return result;
}

uint64_t *llvm::sys::path::const_iterator::operator++(uint64_t *a1)
{
  uint64_t v2 = a1 + 2;
  unint64_t v3 = a1[3];
  unint64_t v4 = a1[4] + v3;
  a1[4] = v4;
  unint64_t v5 = a1[1];
  if (v4 == v5)
  {
    void *v2 = 0;
    a1[3] = 0;
    return a1;
  }
  if (v3 <= 2)
  {
    BOOL v13 = 0;
    unsigned int v8 = *((_DWORD *)a1 + 10);
  }
  else
  {
    uint64_t v6 = (unsigned __int8 *)a1[2];
    int v7 = *v6;
    unsigned int v8 = *((_DWORD *)a1 + 10);
    if ((v7 == 47 || (v7 == 92 ? (BOOL v9 = v8 >= 2) : (BOOL v9 = 0), v9)) && v6[1] == v7)
    {
      int v10 = v6[2];
      BOOL v12 = v8 < 2 || v10 != 92;
      BOOL v13 = v10 != 47 && v12;
    }
    else
    {
      BOOL v13 = 0;
    }
  }
  uint64_t v14 = *a1;
  int v15 = *(unsigned __int8 *)(*a1 + v4);
  if (v15 != 47 && (v8 < 2 || v15 != 92)) {
    goto LABEL_47;
  }
  if (!v13 && (!v3 || v8 <= 1 || *(unsigned char *)(*v2 + v3 - 1) != 58))
  {
    while (1)
    {
      int v19 = *(unsigned __int8 *)(v14 + v4);
      BOOL v20 = v8 > 1 && v19 == 92;
      BOOL v21 = v20;
      if (v19 != 47 && !v21) {
        break;
      }
      a1[4] = ++v4;
      if (v5 == v4)
      {
        if (v3 != 1 || (unint64_t v4 = v5, *(unsigned char *)*v2 != 47))
        {
          a1[4] = v5 - 1;
          BOOL v17 = ".";
          BOOL v18 = 1;
          goto LABEL_30;
        }
        break;
      }
    }
LABEL_47:
    if (v8 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = 2;
    }
    if (v8 <= 1) {
      uint64_t v24 = "/";
    }
    else {
      uint64_t v24 = "\\/";
    }
    unint64_t first_of = llvm::StringRef::find_first_of(a1, (unsigned __int8 *)v24, v23, v4);
    if (v5 >= v4) {
      unint64_t v26 = v4;
    }
    else {
      unint64_t v26 = v5;
    }
    if (v26 <= first_of) {
      unint64_t v27 = first_of;
    }
    else {
      unint64_t v27 = v4;
    }
    if (v27 >= v5) {
      unint64_t v27 = v5;
    }
    a1[2] = v14 + v26;
    a1[3] = v27 - v26;
    return a1;
  }
  if (v5 >= v4) {
    unint64_t v16 = v4;
  }
  else {
    unint64_t v16 = a1[1];
  }
  BOOL v17 = (const char *)(v14 + v16);
  BOOL v18 = v5 > v4;
LABEL_30:
  a1[2] = (uint64_t)v17;
  a1[3] = v18;
  return a1;
}

uint64_t llvm::sys::path::reverse_iterator::operator++(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 **)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    unint64_t v7 = v5 + 1;
    unint64_t v8 = *(void *)(a1 + 32);
    while (v7 != v8)
    {
      int v9 = v2[v8 - 1];
      BOOL v11 = v4 > 1 && v9 == 92;
      if (v9 != 47 && !v11)
      {
        unint64_t v7 = v8;
        break;
      }
      if (!--v8) {
        goto LABEL_15;
      }
    }
  }
  else
  {
LABEL_15:
    unint64_t v7 = 0;
  }
  if (v3) {
    BOOL v13 = v6 == v3;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13
    && ((int v14 = v2[v3 - 1], v14 == 47) || v4 >= 2 && v14 == 92)
    && (v5 != -1 ? (BOOL v15 = v7 - 1 > v5) : (BOOL v15 = 1), v15))
  {
    *(void *)(a1 + 32) = v3 - 1;
    *(void *)(a1 + 16) = ".";
    *(void *)(a1 + 24) = 1;
  }
  else
  {
    if (v3 >= v7) {
      unint64_t v16 = v7;
    }
    else {
      unint64_t v16 = v3;
    }
    if (v3 >= v17) {
      unint64_t v18 = v17;
    }
    else {
      unint64_t v18 = v3;
    }
    if (v18 <= v7) {
      unint64_t v19 = v7;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19 >= v3) {
      unint64_t v19 = v3;
    }
    *(void *)(a1 + 16) = &v2[v18];
    *(void *)(a1 + 24) = v19 - v18;
    *(void *)(a1 + 32) = v17;
  }
  return a1;
}

uint64_t anonymous namespace'::root_dir_start(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
  v18[0] = a1;
  v18[1] = a2;
  if (a3 >= 2 && a2 >= 3 && a1[1] == 58)
  {
    int v3 = a1[2];
    uint64_t v4 = 2;
    if (v3 == 47 || v3 == 92) {
      return v4;
    }
  }
  if (a2 < 4)
  {
    if (!a2) {
      return -1;
    }
    int v5 = *a1;
  }
  else
  {
    int v5 = *a1;
    BOOL v7 = a3 > 1 && v5 == 92;
    BOOL v8 = v5 != 47 && !v7;
    if (!v8 && v5 == a1[1])
    {
      int v9 = a1[2];
      BOOL v10 = a3 > 1 && v9 == 92;
      BOOL v11 = v10;
      if (v9 != 47 && !v11)
      {
        BOOL v12 = a3 > 1;
        if (a3 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = 2;
        }
        if (v12) {
          int v14 = "\\/";
        }
        else {
          int v14 = "/";
        }
        return llvm::StringRef::find_first_of(v18, (unsigned __int8 *)v14, v13, 2uLL);
      }
    }
  }
  uint64_t v4 = 0;
  BOOL v16 = a3 > 1 && v5 == 92;
  if (v5 != 47 && !v16) {
    return -1;
  }
  return v4;
}

unint64_t anonymous namespace'::filename_pos(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
  v17[0] = a1;
  v17[1] = a2;
  if (a2)
  {
    unint64_t v6 = a2 - 1;
    int v7 = a1[a2 - 1];
    if (v7 == 47 || a3 >= 2 && v7 == 92) {
      return v6;
    }
  }
  else
  {
    unint64_t v6 = -1;
  }
  if (a3 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = 2;
  }
  if (a3 <= 1) {
    int v9 = "/";
  }
  else {
    int v9 = "\\/";
  }
  uint64_t last_of = llvm::StringRef::find_last_of(v17, (unsigned __int8 *)v9, v8, v6);
  if (a3 >= 2 && last_of == -1)
  {
    if (a2 >= a2 - 2) {
      unint64_t v11 = a2 - 2;
    }
    else {
      unint64_t v11 = a2;
    }
    while (v11)
    {
      uint64_t last_of = v11 - 1;
      int v12 = a1[--v11];
      if (v12 == 58) {
        goto LABEL_20;
      }
    }
    return 0;
  }
LABEL_20:
  if (last_of == -1) {
    return 0;
  }
  if (last_of != 1) {
    return last_of + 1;
  }
  unint64_t v6 = 0;
  int v13 = *a1;
  BOOL v14 = a3 > 1 && v13 == 92;
  BOOL v15 = v14;
  if (v13 != 47 && !v15) {
    return last_of + 1;
  }
  return v6;
}

unsigned __int8 *llvm::sys::path::root_name(unint64_t a1, unint64_t a2, unsigned int a3)
{
  llvm::sys::path::begin(a1, a2, a3, (uint64_t)&v12);
  if (v12 == a1 && v15 == a2) {
    return 0;
  }
  if (v14 < 3)
  {
    BOOL v8 = 0;
  }
  else
  {
    int v7 = *v13;
    if (v7 == 47 || (BOOL v8 = 0, a3 >= 2) && v7 == 92) {
      BOOL v8 = v13[1] == v7;
    }
  }
  if (a3 >= 2 && v14)
  {
    BOOL v10 = v13;
    BOOL v11 = v13[v14 - 1] == 58;
  }
  else
  {
    BOOL v11 = 0;
    BOOL v10 = v13;
  }
  if (v8 || v11) {
    return v10;
  }
  else {
    return 0;
  }
}

uint64_t llvm::sys::path::root_directory(unint64_t a1, unint64_t a2, unsigned int a3)
{
  llvm::sys::path::begin(a1, a2, a3, (uint64_t)&v21);
  long long v18 = v21;
  long long v19 = v22;
  long long v20 = v23;
  if ((void)v21 == a1 && (void)v23 == a2) {
    return 0;
  }
  if (*((void *)&v22 + 1) < 3uLL)
  {
    BOOL v8 = 0;
  }
  else
  {
    int v7 = *(unsigned __int8 *)v22;
    if (v7 == 47 || (BOOL v8 = 0, a3 >= 2) && v7 == 92) {
      BOOL v8 = *(unsigned __int8 *)(v22 + 1) == v7;
    }
  }
  BOOL v9 = 0;
  if (a3 >= 2 && *((void *)&v22 + 1)) {
    BOOL v9 = *(unsigned __int8 *)(v22 + *((void *)&v22 + 1) - 1) == 58;
  }
  if (!v8 && !v9
    || (llvm::sys::path::const_iterator::operator++((uint64_t *)&v18), (void)v18 == a1) && (void)v20 == a2
    || ((uint64_t result = v19, v11 = *(unsigned __int8 *)v19, a3 > 1) ? (v12 = v11 == 92) : (v12 = 0),
        !v12 ? (int v13 = 0) : (int v13 = 1),
        v11 != 47 ? (BOOL v14 = v13 == 0) : (BOOL v14 = 0),
        v14))
  {
    if (!v8)
    {
      int v15 = *(unsigned __int8 *)v22;
      if (a3 > 1 && v15 == 92 || v15 == 47) {
        return v22;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  return result;
}

void llvm::sys::path::append(void *a1, const llvm::Twine *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v54[4] = *MEMORY[0x263EF8340];
  uint64_t v52 = v54;
  long long v53 = xmmword_261E8A6A0;
  uint64_t v49 = v51;
  long long v50 = xmmword_261E8A6A0;
  uint64_t v46 = v48;
  long long v47 = xmmword_261E8A6A0;
  uint64_t v43 = v45;
  long long v44 = xmmword_261E8A6A0;
  int v40 = v42;
  uint64_t v41 = 0x400000000;
  if (*(unsigned __int8 *)(a3 + 32) >= 2u)
  {
    int v11 = llvm::Twine::toStringRef(a3, (uint64_t)&v52);
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v40, (uint64_t)v11, v12);
  }
  if (*(unsigned __int8 *)(a4 + 32) >= 2u)
  {
    int v13 = llvm::Twine::toStringRef(a4, (uint64_t)&v49);
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v40, (uint64_t)v13, v14);
  }
  if (*(unsigned __int8 *)(a5 + 32) >= 2u)
  {
    int v15 = llvm::Twine::toStringRef(a5, (uint64_t)&v46);
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v40, (uint64_t)v15, v16);
  }
  if (*(unsigned __int8 *)(a6 + 32) >= 2u)
  {
    unint64_t v17 = llvm::Twine::toStringRef(a6, (uint64_t)&v43);
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v40, (uint64_t)v17, v18);
  }
  long long v19 = (unsigned __int8 **)v40;
  if (v41)
  {
    if (a2 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = 2;
    }
    if (a2 <= 1) {
      long long v21 = "/";
    }
    else {
      long long v21 = "\\/";
    }
    if (a2 <= 1) {
      int v22 = 1;
    }
    else {
      int v22 = (int)a2;
    }
    if (v22 == 3) {
      char v23 = 92;
    }
    else {
      char v23 = 47;
    }
    uint64_t v24 = 16 * v41;
    do
    {
      uint64_t v25 = a1[1];
      if (!v25
        || ((int v26 = *(unsigned __int8 *)(v25 + *a1 - 1), a2 > 1) ? (v27 = v26 == 92) : (v27 = 0),
            !v27 ? (int v28 = 0) : (int v28 = 1),
            v26 != 47 ? (BOOL v29 = v28 == 0) : (BOOL v29 = 0),
            v29))
      {
        uint64_t v36 = v19[1];
        if (!v36 || (int v37 = **v19, v37 != 47) && (a2 < 2 || v37 != 92))
        {
          if (v25)
          {
            __int16 v39 = 261;
            v38[0] = *v19;
            v38[1] = v36;
            if (!llvm::sys::path::has_root_name((llvm::sys::path *)v38, a2)) {
              llvm::SmallVectorTemplateBase<char,true>::push_back(a1, v23);
            }
          }
        }
        int v34 = *v19;
        uint64_t v35 = &v19[1][(void)*v19];
      }
      else
      {
        unint64_t first_not_of = llvm::StringRef::find_first_not_of(v19, (unsigned __int8 *)v21, v20, 0);
        uint64_t v32 = *v19;
        uint64_t v31 = v19[1];
        if ((unint64_t)v31 >= first_not_of) {
          uint64_t v33 = (unsigned __int8 *)first_not_of;
        }
        else {
          uint64_t v33 = v19[1];
        }
        int v34 = &v33[(void)v32];
        uint64_t v35 = &v31[(void)v32];
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(a1, v34, v35);
      v19 += 2;
      v24 -= 16;
    }
    while (v24);
    long long v19 = (unsigned __int8 **)v40;
  }
  if (v19 != (unsigned __int8 **)v42) {
    free(v19);
  }
  if (v43 != v45) {
    free(v43);
  }
  if (v46 != v48) {
    free(v46);
  }
  if (v49 != v51) {
    free(v49);
  }
  if (v52 != v54) {
    free(v52);
  }
}

BOOL llvm::sys::path::has_root_name(llvm::sys::path *this, const llvm::Twine *a2)
{
  unsigned int v2 = a2;
  v10[16] = *MEMORY[0x263EF8340];
  BOOL v8 = v10;
  long long v9 = xmmword_261E8A720;
  int v3 = llvm::Twine::toStringRef((uint64_t)this, (uint64_t)&v8);
  llvm::sys::path::root_name((unint64_t)v3, v4, v2);
  uint64_t v6 = v5;
  if (v8 != v10) {
    free(v8);
  }
  return v6 != 0;
}

unint64_t anonymous namespace'::parent_path_end(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
  unint64_t v7 = v6;
  if (a2)
  {
    int v8 = a1[v6];
    BOOL v10 = a3 > 1 && v8 == 92;
    int v11 = v8 == 47 || v10;
  }
  else
  {
    int v11 = 0;
  }
  {
    if (i != -1 && v7 <= i) {
      break;
    }
    int v13 = a1[v7 - 1];
    BOOL v14 = a3 > 1 && v13 == 92;
    BOOL v15 = v14;
    if (v13 != 47 && !v15) {
      break;
    }
  }
  if (v7 == i) {
    int v17 = v11;
  }
  else {
    int v17 = 1;
  }
  if (v17) {
    return v7;
  }
  else {
    return i + 1;
  }
}

BOOL llvm::sys::path::has_root_directory(llvm::sys::path *this, const llvm::Twine *a2)
{
  unsigned int v2 = a2;
  v10[16] = *MEMORY[0x263EF8340];
  int v8 = v10;
  long long v9 = xmmword_261E8A720;
  int v3 = llvm::Twine::toStringRef((uint64_t)this, (uint64_t)&v8);
  llvm::sys::path::root_directory((unint64_t)v3, v4, v2);
  uint64_t v6 = v5;
  if (v8 != v10) {
    free(v8);
  }
  return v6 != 0;
}

uint64_t llvm::sys::path::is_absolute(llvm::sys::path *this, const llvm::Twine *a2)
{
  v14[16] = *MEMORY[0x263EF8340];
  uint64_t v12 = v14;
  long long v13 = xmmword_261E8A720;
  int v3 = llvm::Twine::toStringRef((uint64_t)this, (uint64_t)&v12);
  uint64_t v5 = v4;
  __int16 v11 = 261;
  long long v9 = v3;
  uint64_t v10 = v4;
  BOOL has_root_directory = llvm::sys::path::has_root_directory((llvm::sys::path *)&v9, a2);
  if (a2 >= 2)
  {
    __int16 v11 = 261;
    long long v9 = v3;
    uint64_t v10 = v5;
    BOOL has_root_name = llvm::sys::path::has_root_name((llvm::sys::path *)&v9, a2);
  }
  else
  {
    BOOL has_root_name = 1;
  }
  if (v12 != v14) {
    free(v12);
  }
  return has_root_directory & has_root_name;
}

uint64_t llvm::sys::fs::status(uint64_t a1, uint64_t a2, int a3)
{
  v12[16] = *MEMORY[0x263EF8340];
  uint64_t v10 = v12;
  long long v11 = xmmword_261E8A720;
  uint64_t v5 = llvm::Twine::toNullTerminatedStringRef(a1, (const char **)&v10);
  if (a3) {
    int v6 = MEMORY[0x263EF8A88](v5, v9);
  }
  else {
    int v6 = MEMORY[0x263EF8958](v5, v9);
  }
  uint64_t v7 = llvm::sys::fs::fillStatus(v6, v9, a2);
  if (v10 != v12) {
    free(v10);
  }
  return v7;
}

size_t llvm::sys::path::system_temp_directory(int a1, void *a2)
{
  a2[1] = 0;
  if (!a1) {
    goto LABEL_10;
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = getenv((&__const__ZN4llvm3sys4pathL13getEnvTempDirEv_EnvironmentVariables)[v4]);
    if (v5) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v4 == 3;
    }
    ++v4;
  }
  while (!v6);
  uint64_t v7 = v5;
  if (v5)
  {
    int v8 = &v5[strlen(v5)];
    long long v9 = a2;
    uint64_t v10 = v7;
  }
  else
  {
LABEL_10:
    size_t result = llvm::sys::path::getDarwinConfDir(a1, (char **)a2);
    if (result) {
      return result;
    }
    uint64_t v10 = "/var/tmp/";
    int v8 = "";
    long long v9 = a2;
  }
  return (size_t)llvm::SmallVectorImpl<char>::append<char const*,void>(v9, v10, v8);
}

uint64_t llvm::sys::fs::create_directories(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 v18[16] = *MEMORY[0x263EF8340];
  uint64_t v16 = v18;
  long long v17 = xmmword_261E8A720;
  uint64_t v5 = (unsigned __int8 *)llvm::Twine::toStringRef(a1, (uint64_t)&v16);
  unint64_t v7 = v6;
  __int16 v15 = 261;
  long long v13 = v5;
  unint64_t v14 = v6;
  uint64_t directory = llvm::sys::fs::create_directory((uint64_t)&v13, a2, a3);
  if (std::generic_category() == v9 && directory == 2)
  {
    unint64_t v11 = v7 >= v10 ? v10 : v7;
    if (v10 != -1)
    {
      if (v11)
      {
        __int16 v15 = 261;
        long long v13 = v5;
        unint64_t v14 = v11;
        uint64_t directory = llvm::sys::fs::create_directories(&v13, a2, a3);
        if (!directory)
        {
          __int16 v15 = 261;
          long long v13 = v5;
          unint64_t v14 = v7;
          uint64_t directory = llvm::sys::fs::create_directory((uint64_t)&v13, a2, a3);
        }
      }
    }
  }
  if (v16 != v18) {
    free(v16);
  }
  return directory;
}

uint64_t llvm::sys::fs::create_directory(uint64_t a1, char a2, mode_t a3)
{
  v10[16] = *MEMORY[0x263EF8340];
  int v8 = v10;
  long long v9 = xmmword_261E8A720;
  uint64_t v5 = llvm::Twine::toNullTerminatedStringRef(a1, (const char **)&v8);
  if (mkdir(v5, a3) != -1 || *__error() == 17 && (a2 & 1) != 0)
  {
    std::system_category();
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = *__error();
    std::generic_category();
  }
  if (v8 != v10) {
    free(v8);
  }
  return v6;
}

unint64_t llvm::sys::fs::openFileForRead(uint64_t a1, int *a2, int a3, void *a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v6 = llvm::sys::fs::openFile(a1, a2, 2, 1, a3, 438);
  uint64_t v7 = v6;
  if (v6)
  {
    unint64_t v8 = v6 & 0xFFFFFFFF00000000;
  }
  else
  {
    if (a4)
    {
      a4[1] = 0;
      if (fcntl(*a2, 50, __s) != -1)
      {
        size_t v9 = strlen(__s);
        llvm::SmallVectorImpl<char>::append<char const*,void>(a4, __s, &__s[v9]);
      }
    }
    std::system_category();
    unint64_t v8 = 0;
  }
  return v8 | v7;
}

void llvm::sys::fs::directory_entry::replace_filename(uint64_t a1, uint64_t a2, int a3, long long *a4)
{
  v30[16] = *MEMORY[0x263EF8340];
  int v8 = *(char *)(a1 + 23);
  if (v8 >= 0) {
    size_t v9 = (unsigned __int8 *)a1;
  }
  else {
    size_t v9 = *(unsigned __int8 **)a1;
  }
  if (v8 >= 0) {
    unint64_t v10 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v10 = *(void *)(a1 + 8);
  }
  if (v10 >= v11) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v11 == -1)
  {
    unint64_t v12 = 0;
    long long v13 = 0;
  }
  else
  {
    long long v13 = v9;
  }
  std::string __src = v30;
  *(_OWORD *)__len = xmmword_261E8A720;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&__src, v13, &v13[v12]);
  __int16 v27 = 257;
  __int16 v24 = 257;
  __int16 v22 = 257;
  llvm::sys::path::append(&__src, 0, a2, (uint64_t)&__dst, (uint64_t)v23, (uint64_t)v21);
  size_t v14 = __len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  __int16 v15 = __src;
  if (__len[0] >= 0x17)
  {
    size_t v17 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17) {
      size_t v17 = __len[0] | 7;
    }
    size_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v14;
    unint64_t v26 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_20;
  }
  HIBYTE(v26) = __len[0];
  p_dst = &__dst;
  if (__len[0]) {
LABEL_20:
  }
    memmove(p_dst, v15, v14);
  *((unsigned char *)p_dst + v14) = 0;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v26;
  *(_DWORD *)(a1 + 24) = a3;
  long long v19 = *a4;
  long long v20 = a4[2];
  *(_OWORD *)(a1 + 48) = a4[1];
  *(_OWORD *)(a1 + 64) = v20;
  *(_OWORD *)(a1 + 32) = v19;
  if (__src != v30) {
    free(__src);
  }
}

ssize_t llvm::sys::fs::readNativeFileToEOF@<X0>(int a1@<W0>, void *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v8 = a2[1];
  for (unint64_t i = v8 + a3; ; unint64_t i = v8 + a3)
  {
    llvm::SmallVectorImpl<char>::resizeImpl<true>(a2, i);
    ssize_t result = llvm::sys::fs::readNativeFile(a1, (void *)(*a2 + v8), a3, (uint64_t)&v12);
    if (v13) {
      break;
    }
    uint64_t v11 = v12;
    if (!v12) {
      goto LABEL_6;
    }
    v8 += v12;
  }
  uint64_t v11 = v12;
LABEL_6:
  *a4 = v11;
  a2[1] = v8;
  return result;
}

ssize_t llvm::sys::fs::readNativeFile@<X0>(int a1@<W0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a3 >= 0x7FFFFFFF) {
    size_t v7 = 0x7FFFFFFFLL;
  }
  else {
    size_t v7 = a3;
  }
  while (1)
  {
    *__error() = 0;
    ssize_t result = read(a1, a2, v7);
    if (result != -1) {
      break;
    }
    if (*__error() != 4)
    {
      size_t v9 = (llvm *)*__error();
      *(void *)&v11.__val_ = std::generic_category();
      llvm::errorCodeToError(v9, v11, &v10);
      *(unsigned char *)(a4 + 8) |= 1u;
      ssize_t result = v10;
      goto LABEL_8;
    }
  }
  *(unsigned char *)(a4 + 8) &= ~1u;
LABEL_8:
  *(void *)a4 = result;
  return result;
}

void *llvm::sys::fs::getMainExecutable@<X0>(void *a1@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  bufstd::string::size_type size = 1024;
  if (_NSGetExecutablePath(buf, &bufsize) || !realpath_DARWIN_EXTSN(buf, __s)) {
    uint64_t v5 = (char *)&str_3_8;
  }
  else {
    uint64_t v5 = __s;
  }
  return std::string::basic_string[abi:nn180100]<0>(a1, v5);
}

uint64_t llvm::sys::fs::remove(llvm::sys::fs *this, const llvm::Twine *a2)
{
  char v2 = (char)a2;
  v11[16] = *MEMORY[0x263EF8340];
  size_t v9 = v11;
  long long v10 = xmmword_261E8A720;
  int v3 = (const std::__fs::filesystem::path *)llvm::Twine::toNullTerminatedStringRef((uint64_t)this, (const char **)&v9);
  if (lstat((const char *)v3, &v8))
  {
    if (*__error() != 2 || (v2 & 1) == 0) {
      goto LABEL_4;
    }
LABEL_11:
    std::system_category();
    unsigned int v5 = 0;
    goto LABEL_14;
  }
  int v6 = v8.st_mode & 0xF000;
  if (v6 != 0x4000 && v6 != 0x8000 && v6 != 40960)
  {
    unsigned int v5 = 1;
    goto LABEL_13;
  }
  if (remove(v3, v4) != -1 || *__error() == 2 && (v2 & 1) != 0) {
    goto LABEL_11;
  }
LABEL_4:
  unsigned int v5 = *__error();
LABEL_13:
  std::generic_category();
LABEL_14:
  if (v9 != v11) {
    free(v9);
  }
  return v5;
}

uint64_t llvm::sys::fs::access(uint64_t a1, int a2)
{
  v10[16] = *MEMORY[0x263EF8340];
  stat v8 = v10;
  long long v9 = xmmword_261E8A720;
  int v3 = llvm::Twine::toNullTerminatedStringRef(a1, (const char **)&v8);
  uint64_t v4 = v3;
  if (a2)
  {
    if (a2 == 2)
    {
      if (access(v3, 5) != -1)
      {
        if (stat(v4, &v7) || (v7.st_mode & 0xF000) != 0x8000)
        {
          std::generic_category();
          uint64_t v5 = 13;
          goto LABEL_11;
        }
        goto LABEL_9;
      }
      goto LABEL_10;
    }
    a2 = 2;
  }
  if (access(v3, a2) != -1)
  {
LABEL_9:
    std::system_category();
    uint64_t v5 = 0;
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v5 = *__error();
  std::generic_category();
LABEL_11:
  if (v8 != v10) {
    free(v8);
  }
  return v5;
}

uint64_t llvm::sys::fs::fillStatus(int a1, int *a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = *__error();
    uint64_t v5 = std::generic_category();
    if (v5 == std::generic_category() && v4 == 2)
    {
      *(void *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)(a3 + 40) = 0xFFFF00000001;
      *(_DWORD *)(a3 + 48) = 0;
      *(_WORD *)(a3 + 52) = 0;
      *(void *)(a3 + 56) = 0;
      return 2;
    }
    else
    {
      *(_OWORD *)(a3 + 28) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)(a3 + 44) = 0xFFFFLL;
      *(_WORD *)(a3 + 52) = 0;
      *(void *)(a3 + 56) = 0;
    }
  }
  else
  {
    uint64_t v7 = *((void *)a2 + 5);
    uint64_t v8 = *((void *)a2 + 7);
    long long v9 = (llvm::sys::fs *)*((unsigned __int16 *)a2 + 2);
    int v10 = (unsigned __int16)v9 & 0xFFF;
    int v11 = llvm::sys::fs::typeForMode(v9);
    int v12 = *a2;
    __int16 v13 = *((_WORD *)a2 + 3);
    uint64_t v14 = *((void *)a2 + 1);
    uint64_t v15 = *((void *)a2 + 6);
    uint64_t v16 = *((void *)a2 + 12);
    uint64_t v17 = *((void *)a2 + 2);
    *(void *)a3 = *((void *)a2 + 4);
    *(void *)(a3 + 8) = v15;
    *(_DWORD *)(a3 + 16) = v7;
    *(_DWORD *)(a3 + 20) = v8;
    *(void *)(a3 + 24) = v17;
    *(void *)(a3 + 32) = v16;
    *(_DWORD *)(a3 + 40) = v11;
    *(_DWORD *)(a3 + 44) = v10;
    *(_DWORD *)(a3 + 48) = v12;
    *(_WORD *)(a3 + 52) = v13;
    *(void *)(a3 + 56) = v14;
    std::system_category();
    return 0;
  }
  return v4;
}

uint64_t llvm::sys::fs::mapped_file_region::init(size_t *a1, int a2, off_t a3, int a4)
{
  if (a4 == 1) {
    int v6 = 65;
  }
  else {
    int v6 = 66;
  }
  if (a4) {
    int v7 = 3;
  }
  else {
    int v7 = 1;
  }
  if (a4) {
    int v8 = v6;
  }
  else {
    int v8 = 24642;
  }
  long long v9 = mmap(0, *a1, v7, v8, a2, a3);
  a1[1] = (size_t)v9;
  if (v9 == (void *)-1)
  {
    uint64_t v10 = *__error();
    std::generic_category();
  }
  else
  {
    std::system_category();
    return 0;
  }
  return v10;
}

unint64_t llvm::sys::fs::detail::directory_iterator_construct(uint64_t a1, unsigned char *a2, uint64_t a3, char a4)
{
  v24[16] = *MEMORY[0x263EF8340];
  __int16 v22 = v24;
  long long v23 = xmmword_261E8A720;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v22, a2, &a2[a3]);
  llvm::SmallVectorTemplateBase<char,true>::push_back(&v22, 0);
  *(void *)&long long v23 = v23 - 1;
  int v6 = opendir((const char *)v22);
  if (v6)
  {
    *(void *)a1 = v6;
    v14.__r_.__value_.__r.__words[0] = (std::string::size_type)".";
    *(_WORD *)&unsigned char v15[8] = 259;
    __int16 v21 = 257;
    __int16 v19 = 257;
    __int16 v17 = 257;
    llvm::sys::path::append(&v22, 0, (uint64_t)&v14, (uint64_t)v20, (uint64_t)v18, (uint64_t)v16);
    __int16 v21 = 261;
    v20[0] = v22;
    v20[1] = v23;
    llvm::Twine::str((llvm::Twine *)v20, &v14);
    *(_DWORD *)uint64_t v15 = 9;
    void v15[4] = a4;
    memset(&v15[8], 0, 44);
    *(_DWORD *)&v15[52] = 0xFFFF;
    int v8 = (void **)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*v8);
    }
    *(_OWORD *)int v8 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
    *(void *)(a1 + 24) = *((void *)&v14.__r_.__value_.__l + 2);
    long long v9 = *(_OWORD *)&v15[16];
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v15;
    *(_OWORD *)(a1 + 48) = v9;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)&v15[32];
    *(void *)(a1 + 80) = *(void *)&v15[48];
    unint64_t v10 = llvm::sys::fs::detail::directory_iterator_increment((DIR **)a1, v7);
    unsigned int v11 = v10;
    unint64_t v12 = v10 & 0xFFFFFFFF00000000;
  }
  else
  {
    unsigned int v11 = *__error();
    std::generic_category();
    unint64_t v12 = 0;
  }
  if (v22 != v24) {
    free(v22);
  }
  return v12 | v11;
}

unint64_t llvm::sys::fs::detail::directory_iterator_increment(DIR **this, llvm::sys::fs::detail::DirIterState *a2)
{
  *__error() = 0;
  int v3 = readdir(*this);
  if (!v3)
  {
    if (!*__error())
    {
      uint64_t v14 = llvm::sys::fs::detail::directory_iterator_destruct((uint64_t)this);
      unint64_t v11 = v14 & 0xFFFFFFFF00000000;
      unsigned int v9 = v14;
      return v11 | v9;
    }
    unsigned int v9 = *__error();
    std::generic_category();
    goto LABEL_12;
  }
  uint64_t v4 = v3;
  d_name = v3->d_name;
  size_t v6 = strlen(v3->d_name);
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      int v8 = *d_name;
      goto LABEL_9;
    }
LABEL_11:
    __int16 v18 = 261;
    v17[0] = d_name;
    v17[1] = v6;
    int v12 = llvm::sys::fs::typeForMode((llvm::sys::fs *)((v4->d_type & 0xF) << 12));
    long long v16 = 0u;
    memset(v15, 0, sizeof(v15));
    HIDWORD(v16) = 0xFFFF;
    llvm::sys::fs::directory_entry::replace_filename((uint64_t)(this + 1), (uint64_t)v17, v12, v15);
    std::system_category();
    unsigned int v9 = 0;
LABEL_12:
    unint64_t v11 = 0;
    return v11 | v9;
  }
  if (*d_name != 46) {
    goto LABEL_11;
  }
  int v8 = v4->d_name[1];
LABEL_9:
  if (v8 != 46) {
    goto LABEL_11;
  }
  uint64_t v10 = llvm::sys::fs::detail::directory_iterator_increment((llvm::sys::fs::detail *)this, v7);
  unsigned int v9 = v10;
  unint64_t v11 = v10 & 0xFFFFFFFF00000000;
  return v11 | v9;
}

uint64_t llvm::sys::fs::detail::directory_iterator_destruct(uint64_t a1)
{
  char v2 = *(DIR **)a1;
  if (v2) {
    closedir(v2);
  }
  *(void *)a1 = 0;
  int v3 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*v3);
  }
  *int v3 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 9;
  *(unsigned char *)(a1 + 36) = 1;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 53) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_DWORD *)(a1 + 84) = 0xFFFF;
  std::system_category();
  return 0;
}

double llvm::sys::fs::directory_entry::status@<D0>(llvm::sys::fs::directory_entry *this@<X0>, uint64_t a2@<X8>)
{
  memset(v9, 0, 44);
  *(_DWORD *)&v9[44] = 0xFFFF;
  __int16 v8 = 260;
  int v7 = this;
  uint64_t v3 = llvm::sys::fs::status((uint64_t)&v7, (uint64_t)v9, *((unsigned __int8 *)this + 28));
  if (v3)
  {
    *(unsigned char *)(a2 + 48) |= 1u;
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = v4;
  }
  else
  {
    *(unsigned char *)(a2 + 48) &= ~1u;
    long long v6 = *(_OWORD *)&v9[16];
    *(_OWORD *)a2 = *(_OWORD *)v9;
    *(_OWORD *)(a2 + 16) = v6;
    double result = *(double *)&v9[32];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v9[32];
  }
  return result;
}

uint64_t llvm::sys::fs::openFile(uint64_t a1, int *a2, int a3, int a4, int a5, uint64_t a6)
{
  _WORD v19[16] = *MEMORY[0x263EF8340];
  int v8 = 2 * (a4 == 3);
  if (a4 == 2) {
    int v8 = 1;
  }
  if (a4 == 1) {
    int v8 = 0;
  }
  if ((a5 & 4) != 0) {
    a3 = 3;
  }
  int v10 = v8 | 0x600;
  int v11 = v8 | 0x200;
  if (a3 == 1) {
    v8 |= 0xA00u;
  }
  if (a3 == 3) {
    int v8 = v11;
  }
  if (!a3) {
    int v8 = v10;
  }
  int v12 = v8 | ((a5 << 20) & 0x1000000 | (2 * (a5 & 4))) ^ 0x1000000;
  __int16 v17 = v19;
  long long v18 = xmmword_261E8A720;
  __int16 v13 = llvm::Twine::toNullTerminatedStringRef(a1, (const char **)&v17);
  while (1)
  {
    *__error() = 0;
    int v14 = open(v13, v12, a6);
    if (v14 != -1) {
      break;
    }
    if (*__error() != 4)
    {
      *a2 = -1;
      goto LABEL_20;
    }
  }
  *a2 = v14;
  if ((v14 & 0x80000000) == 0)
  {
    std::system_category();
    uint64_t v15 = 0;
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v15 = *__error();
  std::generic_category();
LABEL_21:
  if (v17 != v19) {
    free(v17);
  }
  return v15;
}

llvm *llvm::sys::fs::openNativeFileForRead@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = 0;
  double result = (llvm *)llvm::sys::fs::openFileForRead(a1, &v7, a2, a3);
  if (result)
  {
    double result = (llvm *)llvm::errorCodeToError(result, v6, (void *)a4);
    *(unsigned char *)(a4 + 8) |= 1u;
  }
  else
  {
    *(unsigned char *)(a4 + 8) &= ~1u;
    *(_DWORD *)a4 = v7;
  }
  return result;
}

ssize_t llvm::sys::fs::readNativeFileSlice@<X0>(int a1@<W0>, void *a2@<X1>, unint64_t a3@<X2>, off_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a3 >= 0x7FFFFFFF) {
    size_t v9 = 0x7FFFFFFFLL;
  }
  else {
    size_t v9 = a3;
  }
  while (1)
  {
    *__error() = 0;
    ssize_t result = pread(a1, a2, v9, a4);
    if (result != -1) {
      break;
    }
    if (*__error() != 4)
    {
      int v11 = (llvm *)*__error();
      *(void *)&v13.__val_ = std::generic_category();
      llvm::errorCodeToError(v11, v13, &v12);
      *(unsigned char *)(a5 + 8) |= 1u;
      ssize_t result = v12;
      goto LABEL_8;
    }
  }
  *(unsigned char *)(a5 + 8) &= ~1u;
LABEL_8:
  *(void *)a5 = result;
  return result;
}

unint64_t llvm::sys::fs::remove_directories(llvm::sys::fs *this, const llvm::Twine *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  v19.__val_ = 0;
  v19.__cat_ = std::system_category();
  llvm::sys::fs::directory_iterator::directory_iterator((llvm::sys::fs::directory_iterator *)&v17, this, &v19, 0);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 1;
  if (llvm::sys::fs::directory_iterator::operator==((uint64_t *)&v17, &v14))
  {
LABEL_13:
    std::system_category();
    unint64_t v9 = 0;
    LODWORD(v6) = 0;
    goto LABEL_17;
  }
  while (1)
  {
    uint64_t v4 = (char *)v17 + 8;
    llvm::sys::fs::directory_entry::status((llvm::sys::fs::detail *)((char *)v17 + 8), (uint64_t)&v20);
    if (v22) {
      break;
    }
    if (v21 == 3)
    {
      unint64_t v6 = llvm::sys::fs::remove_directories_impl<llvm::sys::fs::directory_entry>((uint64_t)v4, (uint64_t)a2);
      *(void *)&v19.__val_ = v6;
      v19.__cat_ = v7;
      if (v6)
      {
        if ((a2 & 1) == 0) {
          goto LABEL_16;
        }
      }
    }
    __int16 v13 = 260;
    ssize_t v12 = v4;
    unint64_t v6 = llvm::sys::fs::remove((llvm::sys::fs *)&v12, (const llvm::Twine *)1);
    *(void *)&v19.__val_ = v6;
    v19.__cat_ = v5;
    if (v6)
    {
      if ((a2 & 1) == 0) {
        goto LABEL_16;
      }
    }
LABEL_10:
    unint64_t v6 = llvm::sys::fs::detail::directory_iterator_increment((DIR **)v17, (llvm::sys::fs::detail::DirIterState *)v5);
    *(void *)&v19.__val_ = v6;
    v19.__cat_ = v8;
    if (v6 && (a2 & 1) == 0) {
      goto LABEL_16;
    }
    if (llvm::sys::fs::directory_iterator::operator==((uint64_t *)&v17, &v14)) {
      goto LABEL_13;
    }
  }
  if (a2) {
    goto LABEL_10;
  }
  unint64_t v6 = v20;
LABEL_16:
  unint64_t v9 = v6 & 0xFFFFFFFF00000000;
LABEL_17:
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v15);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v18);
  }
  if (!v6 || a2)
  {
    uint64_t v10 = llvm::sys::fs::remove(this, (const llvm::Twine *)1);
    if (!v10 || (a2 & 1) != 0)
    {
      std::system_category();
      unint64_t v9 = 0;
      LODWORD(v6) = 0;
    }
    else
    {
      unint64_t v9 = v10 & 0xFFFFFFFF00000000;
      LODWORD(v6) = v10;
    }
  }
  return v9 & 0xFFFFFFFF00000000 | v6;
}

size_t llvm::sys::path::getDarwinConfDir(int a1, char **a2)
{
  if (a1) {
    int v3 = 65537;
  }
  else {
    int v3 = 65538;
  }
  size_t result = confstr(v3, 0, 0);
  if (result)
  {
    size_t v5 = result;
    while (1)
    {
      llvm::SmallVectorImpl<char>::resizeImpl<false>(a2, v5);
      size_t v5 = confstr(v3, *a2, (size_t)a2[1]);
      size_t result = v5 != 0;
      if (!v5) {
        break;
      }
      if ((char *)v5 == a2[1])
      {
        size_t v6 = v5 - 1;
        goto LABEL_10;
      }
    }
    size_t v6 = 0;
LABEL_10:
    a2[1] = (char *)v6;
  }
  return result;
}

uint64_t llvm::sys::fs::typeForMode(llvm::sys::fs *this)
{
  unsigned int v1 = (this >> 12) ^ 8;
  if (v1 == 15) {
    return 9;
  }
  else {
    return dword_261E8D220[v1];
  }
}

unint64_t llvm::sys::fs::remove_directories_impl<llvm::sys::fs::directory_entry>(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  std::system_category();
  char v23 = 0;
  uint64_t v4 = (char *)operator new(0x70uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_270DBD1A8;
  *((void *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *((_DWORD *)v4 + 14) = 9;
  v4[60] = 1;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *(_OWORD *)(v4 + 92) = 0u;
  *((_DWORD *)v4 + 27) = 0xFFFF;
  char v22 = (std::__shared_weak_count *)v4;
  *(_OWORD *)(v4 + 24) = 0u;
  size_t v5 = (llvm::sys::fs::detail *)(v4 + 24);
  int v6 = *(char *)(a1 + 23);
  if (v6 >= 0) {
    int v7 = (unsigned char *)a1;
  }
  else {
    int v7 = *(unsigned char **)a1;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  int v21 = v5;
  llvm::sys::fs::detail::directory_iterator_construct((uint64_t)v5, v7, v8, 0);
  uint64_t v18 = 0;
  std::error_code v19 = 0;
  char v20 = 1;
  if (llvm::sys::fs::directory_iterator::operator==((uint64_t *)&v21, &v18))
  {
LABEL_19:
    std::system_category();
    unint64_t v14 = 0;
    uint64_t v13 = 0;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v9 = (char *)v21 + 8;
    double v11 = llvm::sys::fs::directory_entry::status((llvm::sys::fs::detail *)((char *)v21 + 8), (uint64_t)&v24);
    if (v26) {
      break;
    }
    if (v25 == 3)
    {
      uint64_t v12 = llvm::sys::fs::remove_directories_impl<llvm::sys::fs::directory_entry>(v9, a2, v11);
      uint64_t v13 = v12;
      if (v12)
      {
        if ((a2 & 1) == 0) {
          goto LABEL_22;
        }
      }
    }
    __int16 v17 = 260;
    char v16 = v9;
    uint64_t v12 = llvm::sys::fs::remove((llvm::sys::fs *)&v16, (const llvm::Twine *)1);
    uint64_t v13 = v12;
    if (v12)
    {
      if ((a2 & 1) == 0) {
        goto LABEL_22;
      }
    }
LABEL_16:
    uint64_t v12 = llvm::sys::fs::detail::directory_iterator_increment((DIR **)v21, v10);
    uint64_t v13 = v12;
    if (v12 && (a2 & 1) == 0) {
      goto LABEL_22;
    }
    if (llvm::sys::fs::directory_iterator::operator==((uint64_t *)&v21, &v18)) {
      goto LABEL_19;
    }
  }
  if (a2) {
    goto LABEL_16;
  }
  uint64_t v12 = v24;
  uint64_t v13 = v24;
LABEL_22:
  unint64_t v14 = v12 & 0xFFFFFFFF00000000;
LABEL_23:
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v19);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v22);
  }
  return v13 | v14;
}

void llvm::sys::Process::getPageSize(uint64_t a1@<X8>)
{
  {
    llvm::sys::Process::getPageSize(void)::page_std::string::size_type size = getpagesize();
  }
  int v3 = llvm::sys::Process::getPageSize(void)::page_size;
  if (llvm::sys::Process::getPageSize(void)::page_size == -1)
  {
    uint64_t v4 = (llvm *)*__error();
    *(void *)&v5.__val_ = std::generic_category();
    llvm::errorCodeToError(v4, v5, (void *)a1);
    *(unsigned char *)(a1 + 8) |= 1u;
  }
  else
  {
    *(unsigned char *)(a1 + 8) &= ~1u;
    *(_DWORD *)a1 = v3;
  }
}

uint64_t llvm::sys::Process::SafelyCloseFileDescriptor(llvm::sys::Process *this)
{
  int v1 = (int)this;
  sigset_t v5 = -1;
  sigset_t v6 = -1;
  unsigned int v2 = pthread_sigmask(3, &v6, &v5);
  if (!v2)
  {
    if ((close(v1) & 0x80000000) == 0)
    {
      int v3 = pthread_sigmask(3, &v5, 0);
LABEL_5:
      unsigned int v2 = v3;
      goto LABEL_6;
    }
    unsigned int v2 = *__error();
    int v3 = pthread_sigmask(3, &v5, 0);
    if (!v2) {
      goto LABEL_5;
    }
  }
LABEL_6:
  std::generic_category();
  return v2;
}

uint64_t llvm::sys::Process::FileDescriptorHasColors(llvm::sys::Process *this)
{
  int v1 = (int)this;
  if (isatty((int)this))
  {
    {
      __cxa_atexit(MEMORY[0x263F8C118], &terminalHasColors(int)::TermColorMutex, &dword_261C2B000);
    }
    std::mutex::lock(&terminalHasColors(int)::TermColorMutex);
    unsigned int v2 = set_curterm(0);
    int v20 = 0;
    int v3 = setupterm(0, v1, &v20);
    uint64_t v4 = 0;
    if (v3) {
      goto LABEL_45;
    }
    int v5 = tigetnum("colors");
    if ((v5 & 0x80000000) == 0)
    {
      uint64_t v4 = v5 != 0;
LABEL_44:
      uint64_t v18 = set_curterm(v2);
      del_curterm(v18);
LABEL_45:
      std::mutex::unlock(&terminalHasColors(int)::TermColorMutex);
      return v4;
    }
    sigset_t v6 = getenv("TERM");
    uint64_t v8 = v6;
    if (!v6)
    {
LABEL_43:
      uint64_t v4 = (v8 != 0) & v7;
      goto LABEL_44;
    }
    size_t v9 = strlen(v6);
    switch(v9)
    {
      case 6uLL:
        if (*(_DWORD *)v8 == 2003269987 && *((_WORD *)v8 + 2) == 28265) {
          goto LABEL_42;
        }
        break;
      case 5uLL:
        int v11 = v8[4];
        BOOL v12 = *(_DWORD *)v8 == 1970170220;
        int v13 = 120;
        goto LABEL_24;
      case 4uLL:
        if (*(_DWORD *)v8 == 1769172577 || *(_DWORD *)v8 == 1953921138)
        {
LABEL_42:
          char v7 = 1;
          goto LABEL_43;
        }
        goto LABEL_41;
      default:
        if (v9 < 6)
        {
LABEL_41:
          char v7 = 0;
          goto LABEL_43;
        }
        break;
    }
    int v11 = *((unsigned __int16 *)v8 + 2);
    BOOL v12 = *(_DWORD *)v8 == 1701995379;
    int v13 = 28261;
LABEL_24:
    if (v12 && v11 == v13) {
      goto LABEL_42;
    }
    if (*(_DWORD *)v8 == 1919251576 && v8[4] == 109) {
      goto LABEL_42;
    }
    BOOL v16 = *(_DWORD *)v8 == 808547446 && v8[4] == 48;
    if (v16 || *(_DWORD *)v8 == 1953921138) {
      goto LABEL_42;
    }
    if (*(_DWORD *)&v8[v9 - 5] == 1869377379 && v8[v9 - 1] == 114) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  return 0;
}

double llvm::sys::findProgramByName@<D0>(void *__s@<X0>, size_t __n@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  size_t v7 = __n;
  v46[32] = *MEMORY[0x263EF8340];
  if (__n)
  {
    size_t v9 = memchr(__s, 47, __n);
    if (v9)
    {
      if (v9 - (unsigned char *)__s != -1)
      {
        if (v7 > 0x7FFFFFFFFFFFFFF7) {
LABEL_40:
        }
          abort();
        if (v7 >= 0x17)
        {
          uint64_t v29 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17) {
            uint64_t v29 = v7 | 7;
          }
          uint64_t v30 = v29 + 1;
          uint64_t v10 = (long long *)operator new(v29 + 1);
          *((void *)&v45 + 1) = v7;
          v46[0] = v30 | 0x8000000000000000;
          *(void *)&long long v45 = v10;
        }
        else
        {
          HIBYTE(v46[0]) = v7;
          uint64_t v10 = &v45;
        }
        memmove(v10, __s, v7);
        *((unsigned char *)v10 + v7) = 0;
        *(unsigned char *)(a5 + 24) &= ~1u;
        double result = *(double *)&v45;
        *(_OWORD *)a5 = v45;
        *(void *)(a5 + 16) = v46[0];
        return result;
      }
    }
  }
  *(void *)&long long v45 = v46;
  *((void *)&v45 + 1) = 0x1000000000;
  if (a4)
  {
    uint64_t v11 = a3 + 16 * a4;
LABEL_9:
    size_t v31 = v7;
    while (1)
    {
      uint64_t v12 = *(void *)(a3 + 8);
      if (!v12) {
        goto LABEL_27;
      }
      int v13 = *(unsigned char **)a3;
      unint64_t v14 = (unsigned char *)(*(void *)a3 + v12);
      std::string __src = v44;
      long long __len = xmmword_261E8A720;
      llvm::SmallVectorImpl<char>::append<char const*,void>(&__src, v13, v14);
      __int16 v41 = 261;
      *(void *)&long long __dst = __s;
      *((void *)&__dst + 1) = v7;
      __int16 v38 = 257;
      __int16 v36 = 257;
      __int16 v34 = 257;
      llvm::sys::path::append(&__src, 0, (uint64_t)&__dst, (uint64_t)v37, (uint64_t)v35, (uint64_t)v33);
      llvm::SmallVectorTemplateBase<char,true>::push_back(&__src, 0);
      *(void *)&long long __len = __len - 1;
      __int16 v41 = 257;
      if (*(unsigned char *)__src)
      {
        *(void *)&long long __dst = __src;
        char v15 = 3;
      }
      else
      {
        char v15 = 1;
      }
      LOBYTE(v41) = v15;
      unsigned int v16 = llvm::sys::fs::access((uint64_t)&__dst, 2);
      uint64_t v18 = __src;
      uint64_t v19 = v16;
      if (!v16) {
        break;
      }
LABEL_24:
      if (v18 != v44) {
        free(v18);
      }
      if (!v19) {
        goto LABEL_33;
      }
LABEL_27:
      a3 += 16;
      if (a3 == v11) {
        goto LABEL_32;
      }
    }
    uint64_t v20 = v11;
    size_t v21 = __len;
    if ((unint64_t)__len > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_40;
    }
    if ((unint64_t)__len >= 0x17)
    {
      uint64_t v23 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)__len | 7) != 0x17) {
        uint64_t v23 = __len | 7;
      }
      uint64_t v24 = v23 + 1;
      p_dst = (long long *)operator new(v23 + 1);
      *((void *)&__dst + 1) = v21;
      unint64_t v40 = v24 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v40) = __len;
      p_dst = &__dst;
      if (!(void)__len) {
        goto LABEL_23;
      }
    }
    memmove(p_dst, v18, v21);
LABEL_23:
    *((unsigned char *)p_dst + v21) = 0;
    size_t v7 = v31;
    *(unsigned char *)(a5 + 24) &= ~1u;
    double result = *(double *)&__dst;
    *(_OWORD *)a5 = __dst;
    *(void *)(a5 + 16) = v40;
    uint64_t v18 = __src;
    uint64_t v11 = v20;
    goto LABEL_24;
  }
  int v25 = getenv("PATH");
  if (v25)
  {
    uint64_t v26 = (uint64_t)v25;
    size_t v27 = strlen(v25);
    llvm::SplitString(v26, v27, (unsigned int *)&v45, ":", 1);
    if (DWORD2(v45))
    {
      a3 = v45;
      uint64_t v11 = v45 + 16 * DWORD2(v45);
      goto LABEL_9;
    }
  }
LABEL_32:
  *(unsigned char *)(a5 + 24) |= 1u;
  int v28 = std::generic_category();
  *(void *)a5 = 2;
  *(void *)(a5 + 8) = v28;
LABEL_33:
  if ((void *)v45 != v46) {
    free((void *)v45);
  }
  return result;
}

void *std::string::basic_string<llvm::StringRef,0>(void *__dst, uint64_t a2)
{
  size_t v2 = *(void *)(a2 + 8);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v4 = *(const void **)a2;
  if (v2 >= 0x17)
  {
    uint64_t v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v6 = v2 | 7;
    }
    uint64_t v7 = v6 + 1;
    int v5 = operator new(v6 + 1);
    __dst[1] = v2;
    __dst[2] = v7 | 0x8000000000000000;
    void *__dst = v5;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v2;
    int v5 = __dst;
    if (!v2) {
      goto LABEL_9;
    }
  }
  memmove(v5, v4, v2);
LABEL_9:
  *((unsigned char *)v5 + v2) = 0;
  return __dst;
}

uint64_t printSymbolizedStackTrace(unsigned __int8 *a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  int v25 = a1;
  unint64_t v26 = a2;
  if (DisableSymbolicationFlag
    || getenv("LLVM_DISABLE_SYMBOLIZATION")
    || llvm::StringRef::find((uint64_t *)&v25, "llvm-symbolizer", 0xFuLL, 0) != -1)
  {
    return 0;
  }
  int v5 = std::system_category();
  char v37 = -1;
  v35[0] = 0;
  v35[1] = (void *)v5;
  uint64_t v6 = getenv("LLVM_SYMBOLIZER_PATH");
  if (v6)
  {
    uint64_t v7 = v6;
    size_t v8 = strlen(v6);
    size_t v9 = v7;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
LABEL_6:
    llvm::sys::findProgramByName(v9, v8, (uint64_t)v10, v11, (uint64_t)&__p);
    llvm::ErrorOr<std::string>::moveAssign<std::string>((uint64_t)v35, (uint64_t *)&__p);
    if ((v30 & 1) == 0 && SHIBYTE(v29) < 0) {
      operator delete(__p);
    }
    goto LABEL_18;
  }
  unint64_t v12 = v26;
  if (v26)
  {
    int v13 = v25;
    char v15 = (void *)(v12 >= v14 ? v14 : v12);
    if (v14 == -1)
    {
      char v15 = 0;
      unsigned int v16 = 0;
    }
    else
    {
      unsigned int v16 = v13;
    }
    __dst[0] = v16;
    __dst[1] = v15;
    if (v15)
    {
      size_t v9 = "llvm-symbolizer";
      uint64_t v10 = __dst;
      size_t v8 = 15;
      uint64_t v11 = 1;
      goto LABEL_6;
    }
  }
LABEL_18:
  char v17 = v37;
  if (v37)
  {
    llvm::sys::findProgramByName("llvm-symbolizer", 0xFuLL, 0, 0, (uint64_t)&__p);
    llvm::ErrorOr<std::string>::moveAssign<std::string>((uint64_t)v35, (uint64_t *)&__p);
    if ((v30 & 1) == 0 && SHIBYTE(v29) < 0) {
      operator delete(__p);
    }
    char v17 = v37;
  }
  if ((v17 & 1) == 0)
  {
    __int16 v31 = 261;
    std::string __p = v25;
    unint64_t v28 = v26;
    if (llvm::sys::fs::access((uint64_t)&__p, 0)) {
      llvm::sys::fs::getMainExecutable(__dst);
    }
    else {
      std::string::basic_string<llvm::StringRef,0>(__dst, (uint64_t)&v25);
    }
    std::string __p = 0;
    unint64_t v28 = 0;
    uint64_t v29 = &v31;
    uint64_t v30 = 0x400000000;
    uint64_t v32 = v34;
    uint64_t v33 = 0;
    v34[0] = 0;
    v34[1] = 1;
    uint64_t v20 = 0;
    size_t v21 = 0;
    uint64_t v22 = 0;
    if (a4)
    {
      std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](&v20, a4);
      uint64_t v18 = (char *)v21;
      bzero(v21, 8 * a4);
      size_t v21 = &v18[8 * a4];
      if (a4 < 0) {
        abort();
      }
      if (v20)
      {
        size_t v21 = v20;
        operator delete(v20);
      }
    }
    llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)&__p);
    if (v24 < 0) {
      operator delete(__dst[0]);
    }
    char v17 = v37;
  }
  if ((v17 & 1) == 0 && v36 < 0) {
    operator delete(v35[0]);
  }
  return 0;
}

void RemoveFilesToRemove(void)
{
  if (v0)
  {
    unint64_t v1 = v0;
    do
    {
      size_t v2 = (const char *)atomic_exchange((atomic_ullong *volatile)v1, 0);
      if (v2 && !stat(v2, &v3) && (v3.st_mode & 0xF000) == 0x8000)
      {
        unlink(v2);
        atomic_exchange((atomic_ullong *volatile)v1, (unint64_t)v2);
      }
      unint64_t v1 = atomic_load((unint64_t *)(v1 + 8));
    }
    while (v1);
  }
}

void llvm::ErrorOr<std::string>::moveAssign<std::string>(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    char v4 = *(unsigned char *)(a1 + 24);
    if ((v4 & 1) == 0 && *(char *)(a1 + 23) < 0)
    {
      operator delete(*(void **)a1);
      char v4 = *(unsigned char *)(a1 + 24);
    }
    if (a2[3])
    {
      *(unsigned char *)(a1 + 24) = v4 | 1;
      if (a2[3])
      {
        uint64_t v7 = *a2;
        uint64_t v6 = (const std::error_category *)a2[1];
      }
      else
      {
        uint64_t v6 = std::system_category();
        uint64_t v7 = 0;
      }
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v6;
    }
    else
    {
      *(unsigned char *)(a1 + 24) = v4 & 0xFE;
      long long v5 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = a2[2];
      *(_OWORD *)a1 = v5;
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
    }
  }
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(std::string **a1, long long *a2)
{
  size_t v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  size_t v8 = a1[2];
  uint64_t v7 = (std::allocator<std::string> *)(a1 + 2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v4;
  }
  v23.__end_cap_.__value_ = v7;
  if (v10)
  {
    uint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v7, v10);
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  unint64_t v14 = (std::string *)&v11[24 * v3];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v15 = *a2;
    v14->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  char v17 = *a1;
  unint64_t v16 = (unint64_t)a1[1];
  if ((std::string *)v16 == *a1)
  {
    int64x2_t v20 = vdupq_n_s64(v16);
    uint64_t v18 = v14;
  }
  else
  {
    uint64_t v18 = v14;
    do
    {
      long long v19 = *(_OWORD *)(v16 - 24);
      v18[-1].__r_.__value_.__r.__words[2] = *(void *)(v16 - 8);
      *(_OWORD *)&v18[-1].__r_.__value_.__l.__data_ = v19;
      --v18;
      *(void *)(v16 - 16) = 0;
      *(void *)(v16 - 8) = 0;
      *(void *)(v16 - 24) = 0;
      v16 -= 24;
    }
    while ((std::string *)v16 != v17);
    int64x2_t v20 = *(int64x2_t *)a1;
  }
  *a1 = v18;
  a1[1] = v14 + 1;
  *(int64x2_t *)&v23.__begin_ = v20;
  size_t v21 = a1[2];
  a1[2] = (std::string *)&v11[24 * v13];
  v23.__end_cap_.__value_ = v21;
  v23.__first_ = (std::__split_buffer<std::string>::pointer)v20.i64[0];
  std::__split_buffer<std::string>::~__split_buffer(&v23);
  return v14 + 1;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v7);
  long long v5 = v7;
  if ((v4 & 1) == 0) {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::InsertIntoBucket<llvm::orc::SymbolStringPtr>((uint64_t)a1, v7, a2);
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::InsertIntoBucket<llvm::orc::SymbolStringPtr>(uint64_t a1, void *a2, void *a3)
{
  double result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*result - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(*result + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  *double result = 0;
  *double result = *a3;
  *a3 = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::grow(a1, v7);
  unint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -8) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::grow(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::moveFromOldBuckets(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *double result = -8;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      *int v7 = -8;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      if ((*(void *)v4 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        uint64_t v11 = 0;
        double result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)v5, (void *)v4, &v11);
        uint64_t v9 = v11;
        if ((unint64_t)(*(void *)v11 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(*(void *)v11 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        *(void *)uint64_t v9 = 0;
        *(void *)uint64_t v9 = *(void *)v4;
        *(void *)uint64_t v4 = 0;
        *(void *)(v9 + 8) = 0;
        *(void *)(v9 + 8) = *(void *)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        *(_WORD *)(v9 + 16) = *(_WORD *)(v4 + 16);
        ++*(_DWORD *)(v5 + 8);
        uint64_t v10 = *(void *)(v4 + 8);
        if ((unint64_t)(v10 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
      }
      if ((unint64_t)(*(void *)v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(*(void *)v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v4 += 24;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t std::optional<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>>::operator=[abi:nn180100]<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::operator=(a1, a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = 0;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    int v3 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = v3;
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = v4;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

atomic_uint *llvm::orc::ObjectLayer::add(uint64_t a1, llvm::orc::JITDylib *a2, uint64_t *a3, uint64_t a4)
{
  llvm::orc::JITDylib::getDefaultResourceTracker(a2, &v14);
  uint64_t v7 = *a3;
  *a3 = 0;
  v10[0] = *(void *)a4;
  v10[1] = *(void *)(a4 + 8);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  int v11 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = 0;
  uint64_t v12 = *(void *)(a4 + 24);
  uint64_t v13 = v7;
  *(void *)(a4 + 24) = 0;
  (*(void (**)(uint64_t, atomic_uint **, uint64_t *, uint64_t *))(*(void *)a1 + 40))(a1, &v14, &v13, v10);
  if ((unint64_t)(v12 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(v10);
  uint64_t v8 = v13;
  uint64_t v13 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  double result = v14;
  if (v14) {
    return llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v14);
  }
  return result;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::erase(uint64_t a1, void *a2)
{
  int v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::LookupBucketFor<llvm::orc::ExecutorAddr>((uint64_t *)a1, a2, &v4))
  {
    *int v4 = -2;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSExecutorAddr>,std::string,llvm::orc::ExecutorAddr>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  v20[3] = *MEMORY[0x263EF8340];
  uint64_t v18 = v20;
  long long v19 = xmmword_261E8A770;
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v18, v8 + 16);
  uint64_t v9 = v18;
  if (!(void)v19) {
    uint64_t v9 = 0;
  }
  v10[0] = v9;
  v10[1] = v19;
  if (!llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSExecutorAddr>::serialize<std::string,llvm::orc::ExecutorAddr>(v10, a2, a3))
  {
    getErrorErrorCat();
    uint64_t v14 = 3;
    long long v15 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
  }
  int v11 = v13;
  long long v12 = xmmword_261E8A770;
  if ((void)v19)
  {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v11, (const void **)&v18);
    uint64_t v14 = a1;
    long long v15 = v17;
    long long v16 = xmmword_261E8A770;
    if ((void)v12) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v15, (const void **)&v11);
    }
  }
  else
  {
    uint64_t v14 = a1;
    long long v15 = v17;
    long long v16 = xmmword_261E8A770;
  }
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>(a4, (uint64_t)&v14);
  if (v15 != v17) {
    free(v15);
  }
  if (v11 != v13) {
    free(v11);
  }
  if (v18 != v20) {
    free(v18);
  }
}

void llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr>,llvm::orc::ExecutorAddr>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  void v15[3] = *MEMORY[0x263EF8340];
  uint64_t v13 = v15;
  long long v14 = xmmword_261E8A770;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v13, 8uLL);
  if ((unint64_t)v14 < 8)
  {
    getErrorErrorCat();
    uint64_t v9 = 3;
    uint64_t v10 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
  }
  void *v13 = *a2;
  uint64_t v6 = v8;
  long long v7 = xmmword_261E8A770;
  if ((void)v14)
  {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v6, (const void **)&v13);
    uint64_t v9 = a1;
    uint64_t v10 = v12;
    long long v11 = xmmword_261E8A770;
    if ((void)v7) {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v10, (const void **)&v6);
    }
  }
  else
  {
    uint64_t v9 = a1;
    uint64_t v10 = v12;
    long long v11 = xmmword_261E8A770;
  }
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>(a3, (uint64_t)&v9);
  if (v10 != v12) {
    free(v10);
  }
  if (v6 != v8) {
    free(v6);
  }
  if (v13 != v15) {
    free(v13);
  }
}

void *llvm::jitlink::LinkGraph::addAnonymousSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  long long v11 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 40, 3);
  long long v12 = v11;
  *long long v11 = 0;
  v11[1] = 0;
  uint64_t v13 = 0x2000000000000000;
  if (!a5) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = 0x800000000000000;
  if (a6) {
    uint64_t v14 = 0x1800000000000000;
  }
  _OWORD v11[2] = a2;
  void v11[3] = v13 & 0xFE00000000000000 | a3 & 0x1FFFFFFFFFFFFFFLL | v14;
  v11[4] = a4;
  uint64_t v15 = *(void *)(a2 + 16) + 56;
  char v17 = v12;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v15, &v17, (uint64_t)v18);
  return v12;
}

_DWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::init(_DWORD *result, int a2)
{
  size_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    int32x2_t result = operator new(24 * v4, (std::align_val_t)8uLL);
    *(void *)size_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 24 * v5;
      do
      {
        *(void *)int32x2_t result = -8;
        result += 6;
        v6 -= 24;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)int32x2_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  long long v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::LookupBucketFor<llvm::orc::JITDylib *>(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>((uint64_t)a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    v5[1] = v5 + 3;
    void v5[2] = 0x600000000;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::LookupBucketFor<llvm::orc::JITDylib *>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    long long v7 = (void *)(*a1 + 72 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        long long v7 = (void *)(v4 + 72 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        long long v7 = v10;
      }
    }
  }
  else
  {
    long long v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::LookupBucketFor<llvm::orc::JITDylib *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::grow(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::moveFromOldBuckets(a1, v4, v4 + 72 * v3);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 72 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 72 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 9;
      v8 -= 72;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        BOOL v12 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::LookupBucketFor<llvm::orc::JITDylib *>((uint64_t *)a1, (void *)v4, &v12);
        uint64_t v9 = v12;
        *BOOL v12 = *(void *)v4;
        void v9[2] = 0x600000000;
        v9[1] = v9 + 3;
        uint64_t v10 = (uint64_t)(v9 + 1);
        if (*(_DWORD *)(v4 + 16)) {
          llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(v10, v4 + 8);
        }
        ++*(_DWORD *)(a1 + 8);
        uint64_t v11 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v11) {
          free(v11);
        }
      }
      v4 += 72;
    }
    while (v4 != a3);
  }
}

uint64_t llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 != v5)
    {
      llvm::SmallVectorImpl<llvm::orc::JITDylib *>::assignRemote(a1, a2);
      return a1;
    }
    unint64_t v6 = *(unsigned int *)(a2 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v6)
    {
      if (v6) {
        memmove(*(void **)a1, v4, 8 * v6);
      }
      goto LABEL_14;
    }
    if (*(_DWORD *)(a1 + 12) >= v6)
    {
      if (v7)
      {
        memmove(*(void **)a1, v4, 8 * v7);
        goto LABEL_12;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6, 8);
    }
    uint64_t v7 = 0;
LABEL_12:
    uint64_t v8 = *(unsigned int *)(a2 + 8);
    if (v7 != v8) {
      memcpy((void *)(*(void *)a1 + 8 * v7), (const void *)(*(void *)a2 + 8 * v7), *(void *)a2 + 8 * v8 - (*(void *)a2 + 8 * v7));
    }
LABEL_14:
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

double llvm::SmallVectorImpl<llvm::orc::JITDylib *>::assignRemote(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  if (v4 != v5) {
    free(v4);
  }
  *(void *)a1 = *(void *)a2;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0;
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::destroyAll(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 72 * v1;
    uint64_t v3 = *(void *)a1 + 24;
    do
    {
      if ((*(void *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4) {
          free(v4);
        }
      }
      v3 += 72;
      v2 -= 72;
    }
    while (v2);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    unsigned int v5 = v3 - 1;
    uint64_t v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 32 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        int v13 = v6 + v11++;
        uint64_t v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 32 * v6);
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(a1, a2, &v8);
  unsigned int v5 = v8;
  if ((v4 & 1) == 0)
  {
    unsigned int v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>((uint64_t)a1, (uint64_t)a2, a2, v8);
    uint64_t v6 = *a2;
    void v5[2] = 0;
    v5[3] = 0;
    void *v5 = v6;
    v5[1] = 0;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::moveFromOldBuckets(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 32 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, (void *)a2, &v10);
      uint64_t v9 = v10;
      *uint64_t v10 = *(void **)a2;
      v9[1] = 0;
      void v9[2] = 0;
      void v9[3] = 0;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(a2 + 8);
      void v9[3] = *(void **)(a2 + 24);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      ++*(_DWORD *)(a1 + 8);
      uint64_t v10 = (void **)(a2 + 8);
      std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v10);
    }
    a2 += 32;
  }
}

void std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 2);
        v3 -= 16;
        uint64_t v5 = v6;
        if ((unint64_t)(v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *llvm::Expected<std::unique_ptr<llvm::object::Archive>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v3) {
LABEL_5:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  else if (v3)
  {
    goto LABEL_5;
  }
  return a1;
}

uint64_t llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::operator=(uint64_t a1, uint64_t a2)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll(a1);
  MEMORY[0x263E500A0](*(void *)a1, 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  int v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  return a1;
}

_DWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::DenseMap(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::init(a1, a3);
  if (a3)
  {
    uint64_t v6 = a2 + 24 * a3;
    do
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::try_emplace<llvm::orc::ExecutorSymbolDef const&>((uint64_t)a1, (uint64_t *)a2, (__n128 *)(a2 + 8), (uint64_t)v8);
      a2 += 24;
    }
    while (a2 != v6);
  }
  return a1;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::try_emplace<llvm::orc::ExecutorSymbolDef const&>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  int v13 = 0;
  char v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v13);
  uint64_t v9 = v13;
  if (v8)
  {
    char v10 = 0;
  }
  else
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&,llvm::orc::ExecutorSymbolDef const&>(a1, v13, a2, a3);
    uint64_t v9 = v11;
    char v10 = 1;
  }
  uint64_t v12 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v12;
  *(unsigned char *)(a4 + 16) = v10;
}

__n128 llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&,llvm::orc::ExecutorSymbolDef const&>(uint64_t a1, void *a2, uint64_t *a3, __n128 *a4)
{
  uint64_t v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(*v6 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v7 = *a3;
  *uint64_t v6 = *a3;
  if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 1uLL);
  }
  __n128 result = *a4;
  *(__n128 *)(v6 + 1) = *a4;
  return result;
}

uint64_t llvm::jitlink::LinkGraph::LinkGraph(uint64_t a1, long long *a2, long long *a3, int a4, int a5, uint64_t a6)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)(a1 + 24) = 0x400000000;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = a1 + 80;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 88) = 1;
  long long v11 = *a2;
  *(void *)(a1 + 112) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 96) = v11;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  uint64_t v12 = (std::string *)(a1 + 120);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v13 = *a3;
    v12->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  long long v14 = *(long long *)((char *)a3 + 24);
  *(void *)(a1 + 160) = *((void *)a3 + 5);
  *(_OWORD *)(a1 + 144) = v14;
  *(_DWORD *)(a1 + 168) = a4;
  *(_DWORD *)(a1 + 172) = a5;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a6;
  *(_DWORD *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  return a1;
}

void std::allocator<llvm::orc::shared::AllocActionCallPair>::destroy[abi:nn180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[8];
  if (v3 != a2 + 11) {
    free(v3);
  }
  int v4 = (void *)a2[1];
  if (v4 != a2 + 4)
  {
    free(v4);
  }
}

void std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    llvm::orc::JITDylib::unlinkMaterializationResponsibility(*a2, (uint64_t)a2);
    uint64_t v3 = a2[5];
    if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(a2 + 2);
    int v4 = (atomic_uint *)a2[1];
    if (v4) {
      llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v4);
    }
    JUMPOUT(0x263E500B0);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::LookupBucketFor<llvm::orc::ExecutorAddr>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = (37 * *a2) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      char v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -2;
        }
        if (v12) {
          char v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::destroyAll(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 32 * v1;
    int v3 = (void **)(*(void *)a1 + 8);
    do
    {
      if (((unint64_t)*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v4 = v3;
        std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v4);
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  int v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:nn180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        int v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:nn180100](v7, v9, a3)) {
        break;
      }
      int v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>((uint64_t)a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::moveFromOldBuckets(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::moveFromOldBuckets(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)v5, a2, &v11);
      uint64_t v9 = v11;
      uint64_t v10 = a2[1];
      *uint64_t v11 = *a2;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void *std::vector<llvm::orc::ExecutorAddr>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  char v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](a1, v5 >> 3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

void llvm::detail::stream_operator_format_adapter<llvm::orc::ExecutorAddr &>::~stream_operator_format_adapter()
{
}

void llvm::detail::stream_operator_format_adapter<llvm::orc::ExecutorAddr &>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v2 = **(void **)(a1 + 8);
  v3[0] = "{0:x}";
  v3[1] = 5;
  void v3[2] = &v5;
  v3[3] = 1;
  v4[0] = &unk_270DBD7D8;
  v4[1] = v2;
  int64_t v5 = v4;
  llvm::formatv_object_base::format((llvm::formatv_object_base *)v3, a2);
}

void llvm::detail::provider_format_adapter<unsigned long long>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned long long>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned long long,void>::format((unint64_t *)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *llvm::format_provider<unsigned long long,void>::format(unint64_t *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  long long v16 = a3;
  uint64_t v17 = a4;
  int v15 = 0;
  if (!llvm::detail::HelperFunctions::consumeHexStyle((const void **)&v16, &v15))
  {
    if (v17)
    {
      int v12 = 0;
      unsigned int v13 = *v16;
      if (v13 <= 0x63)
      {
        if (v13 != 68)
        {
          if (v13 != 78) {
            goto LABEL_19;
          }
          goto LABEL_16;
        }
LABEL_17:
        int v12 = 0;
        ++v16;
        goto LABEL_18;
      }
      if (v13 == 100) {
        goto LABEL_17;
      }
      if (v13 == 110)
      {
LABEL_16:
        ++v16;
        int v12 = 1;
LABEL_18:
        --v17;
      }
    }
    else
    {
      int v12 = 0;
    }
LABEL_19:
    size_t v18 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6)) {
      size_t v14 = 0;
    }
    else {
      size_t v14 = v18;
    }
    return write_unsigned<unsigned long>(a2, *a1, v14, v12, 0);
  }
  int v7 = v15;
  size_t v18 = 0;
  int v8 = llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6);
  unint64_t v9 = v18;
  if (v8) {
    unint64_t v9 = 0;
  }
  if ((v7 & 0xFFFFFFFE) == 2) {
    unint64_t v10 = v9 + 2;
  }
  else {
    unint64_t v10 = v9;
  }
  return llvm::write_hex(a2, *a1, v7, v10, 1);
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::destroyAll(void *result)
{
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = 40 * v1;
    uint64_t result = (void *)(*result + 8);
    do
    {
      uint64_t v3 = *(result - 1);
      if ((v3 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        uint64_t result = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(result);
        uint64_t v3 = *(result - 1);
      }
      if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      result += 5;
      v2 -= 40;
    }
    while (v2);
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  int v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v8);
  int64_t v5 = v8;
  if ((v4 & 1) == 0)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::InsertIntoBucket<llvm::orc::SymbolStringPtr>((uint64_t)a1, v8, a2);
    return (void *)v6;
  }
  return v5;
}

double llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::InsertIntoBucket<llvm::orc::SymbolStringPtr>(uint64_t a1, void *a2, void *a3)
{
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(*v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  *char v4 = 0;
  *char v4 = *a3;
  *a3 = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 3) = 0u;
  *(_OWORD *)(v4 + 1) = 0u;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    int v7 = (void *)(*a1 + 40 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      unint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -8)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -16;
        }
        if (v12) {
          unint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        int v7 = (void *)(v4 + 40 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v7 = v10;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::grow(a1, v7);
  unint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -8) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::grow(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::moveFromOldBuckets((uint64_t *)a1, v4, &v4[5 * v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 40 * v10;
    do
    {
      *uint64_t result = -8;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::moveFromOldBuckets(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  unint64_t v5 = result;
  result[1] = 0;
  uint64_t v6 = *((unsigned int *)result + 4);
  if (v6)
  {
    int v7 = (void *)*result;
    uint64_t v8 = 40 * v6;
    do
    {
      *int v7 = -8;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *v4;
      if ((*v4 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        uint64_t v11 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v5, v4, &v11);
        uint64_t v10 = v11;
        if ((unint64_t)(*v11 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(*v11 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        *uint64_t v10 = 0;
        *uint64_t v10 = *v4;
        *uint64_t v4 = 0;
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v10 + 1), (long long *)(v4 + 1));
        ++*((_DWORD *)v5 + 2);
        uint64_t result = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v4 + 1);
        uint64_t v9 = *v4;
      }
      if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
  return result;
}

BOOL llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSExecutorAddr>::serialize<std::string,llvm::orc::ExecutorAddr>(void *a1, uint64_t a2, void *a3)
{
  BOOL result = llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::serialize(a1, a2);
  if (result)
  {
    if (a1[1] < 8uLL)
    {
      return 0;
    }
    else
    {
      *(void *)*a1 = *a3;
      uint64_t v6 = a1[1] - 8;
      *a1 += 8;
      a1[1] = v6;
      return 1;
    }
  }
  return result;
}

uint64_t llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>::serialize<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr>(void *a1, void *a2, void *a3)
{
  if (a1[1] < 8uLL) {
    return 0;
  }
  *(void *)*a1 = *a2;
  unsigned int v3 = (void *)(*a1 + 8);
  unint64_t v4 = a1[1] - 8;
  *a1 = v3;
  a1[1] = v4;
  if (v4 < 8) {
    return 0;
  }
  *unsigned int v3 = *a3;
  uint64_t v5 = a1[1] - 8;
  *a1 += 8;
  a1[1] = v5;
  return 1;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::LookupBucketFor<llvm::orc::ExecutorAddr>(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::InsertIntoBucketImpl<llvm::orc::ExecutorAddr>((uint64_t)a1, (uint64_t)a2, a2, v7);
    void *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::InsertIntoBucketImpl<llvm::orc::ExecutorAddr>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::LookupBucketFor<llvm::orc::ExecutorAddr>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::moveFromOldBuckets(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *BOOL result = -1;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::moveFromOldBuckets(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -1;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v11 = 0;
      BOOL result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::LookupBucketFor<llvm::orc::ExecutorAddr>((uint64_t *)v5, a2, &v11);
      uint64_t v9 = v11;
      uint64_t v10 = a2[1];
      *uint64_t v11 = *a2;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t llvm::GlobalValue::setLinkage(uint64_t result, int a2)
{
  uint64_t v2 = result;
  int v3 = *(_DWORD *)(result + 32);
  if ((a2 - 7) < 2) {
    v3 &= 0xFFFFFCCF;
  }
  unsigned int v4 = v3 & 0xFFFFFFF0 | a2 & 0xF;
  *(_DWORD *)(result + 32) = v4;
  if ((a2 & 0xFu) - 7 < 2) {
    goto LABEL_7;
  }
  if ((v3 & 0x30) != 0)
  {
    BOOL result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)result);
    if ((result & 1) == 0)
    {
      unsigned int v4 = *(_DWORD *)(v2 + 32);
LABEL_7:
      *(_DWORD *)(v2 + 32) = v4 | 0x4000;
    }
  }
  return result;
}

uint64_t llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::get<0ul,1ul,2ul,3ul>(uint64_t a1)
{
  uint64_t v2 = 0;
  _DWORD v8[8] = *MEMORY[0x263EF8340];
  v8[1] = 0;
  void v8[3] = 0;
  v8[5] = 0;
  v8[0] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<0ul>;
  void v8[2] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<1ul>;
  uint64_t v8[4] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<2ul>;
  v8[6] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<3ul>;
  v8[7] = 0;
  do
  {
    int v3 = (uint64_t (*)(void *))v8[v2];
    uint64_t v4 = v8[v2 + 1];
    uint64_t v5 = (void *)(a1 + (v4 >> 1));
    if (v4) {
      int v3 = *(uint64_t (**)(void *))(*v5 + v3);
    }
    uint64_t result = v3(v5);
    if (result) {
      break;
    }
    BOOL v7 = v2 == 6;
    v2 += 2;
  }
  while (!v7);
  return result;
}

uint64_t llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<0ul>(void *a1)
{
  if (*a1 == a1[4] || *a1 == 0) {
    return 0;
  }
  else {
    return *a1 - 56;
  }
}

uint64_t llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<1ul>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == *(void *)(a1 + 40) || v1 == 0) {
    return 0;
  }
  else {
    return v1 - 56;
  }
}

uint64_t llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<2ul>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1 == *(void *)(a1 + 48) || v1 == 0) {
    return 0;
  }
  else {
    return v1 - 48;
  }
}

uint64_t llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<3ul>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1 == *(void *)(a1 + 56) || v1 == 0) {
    return 0;
  }
  else {
    return v1 - 56;
  }
}

uint64_t llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::increment<0ul,1ul,2ul,3ul>(uint64_t a1)
{
  uint64_t v2 = 0;
  _DWORD v8[8] = *MEMORY[0x263EF8340];
  v8[1] = 0;
  void v8[3] = 0;
  v8[5] = 0;
  v8[0] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<0ul>;
  void v8[2] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<1ul>;
  uint64_t v8[4] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<2ul>;
  v8[6] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<3ul>;
  v8[7] = 0;
  do
  {
    int v3 = (uint64_t (*)(void *))v8[v2];
    uint64_t v4 = v8[v2 + 1];
    uint64_t v5 = (void *)(a1 + (v4 >> 1));
    if (v4) {
      int v3 = *(uint64_t (**)(void *))(*v5 + v3);
    }
    uint64_t result = v3(v5);
    if (result) {
      break;
    }
    BOOL v7 = v2 == 6;
    v2 += 2;
  }
  while (!v7);
  return result;
}

BOOL llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<0ul>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[4];
  if (*a1 != v2) {
    *a1 = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

BOOL llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<1ul>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v1 != v2) {
    *(void *)(a1 + 8) = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

BOOL llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<2ul>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 48);
  if (v1 != v2) {
    *(void *)(a1 + 16) = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

BOOL llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<3ul>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 56);
  if (v1 != v2) {
    *(void *)(a1 + 24) = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

llvm::Module *std::unique_ptr<llvm::Module>::reset[abi:nn180100](llvm::Module **a1, llvm::Module *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::Module::~Module(result);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

void llvm::detail::provider_format_adapter<unsigned long>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned long>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned long long,void>::format((unint64_t *)(a1 + 8), a2, a3, a4);
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  BOOL v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0) {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&>((uint64_t)a1, v7, a2);
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*result - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(*result + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v5 = *a3;
  *uint64_t result = *a3;
  if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 1uLL);
  }
  result[1] = 0;
  result[2] = 0;
  return result;
}

char *std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>::__assign_with_size[abi:nn180100]<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>*,std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    size_t v18 = (char *)a1[1];
    unsigned int v13 = a1 + 1;
    BOOL v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      char v24 = result;
      if (a2 != a3)
      {
        int v25 = result;
        do
        {
          *(void *)int v25 = *(void *)v6;
          *((_DWORD *)v25 + 2) = *((_DWORD *)v6 + 2);
          v24 += 16;
          ++v6;
          v25 += 16;
        }
        while (v6 != a3);
      }
      uint64_t v17 = (char *)(v24 - result);
      BOOL v12 = result;
    }
    else
    {
      int64x2_t v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          *(void *)uint64_t result = *(void *)v6;
          *((_DWORD *)result + 2) = *((_DWORD *)v6++ + 2);
          result += 16;
        }
        while (v6 != v20);
      }
      size_t v21 = v12;
      if (v20 != a3)
      {
        uint64_t v22 = v12;
        do
        {
          long long v23 = *v20++;
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 16;
          v21 += 16;
        }
        while (v20 != a3);
      }
      uint64_t v17 = (char *)(v21 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      abort();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vallocate[abi:nn180100](a1, v11);
    size_t v14 = (char *)a1[1];
    unsigned int v13 = a1 + 1;
    BOOL v12 = v14;
    int v15 = v14;
    if (v6 != a3)
    {
      int v15 = v12;
      do
      {
        long long v16 = *v6++;
        *(_OWORD *)int v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    uint64_t v17 = (char *)(v15 - v12);
  }
  void *v13 = &v17[(void)v12];
  return result;
}

char *std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>::__init_with_size[abi:nn180100]<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>*,std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vallocate[abi:nn180100](result, a4);
    BOOL v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

uint64_t *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::copyFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  uint64_t v5 = *(void *)a1;
  if (v4)
  {
    uint64_t v6 = 16 * v4;
    do
    {
      if ((unint64_t)(*(void *)v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(*(void *)v5 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      v5 += 16;
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = *(void *)a1;
  }
  uint64_t result = (uint64_t *)MEMORY[0x263E500A0](v5, 8);
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v8;
  if (v8)
  {
    *(void *)a1 = operator new(16 * v8, (std::align_val_t)8uLL);
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::copyFrom<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>>((uint64_t *)a1, (void *)a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::copyFrom<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>>(uint64_t *result, void *a2)
{
  result[1] = a2[1];
  if (*((_DWORD *)result + 4))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *result;
      uint64_t v5 = *(void *)(*a2 + v2);
      *(void *)(*result + v2) = v5;
      if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 1uLL);
        uint64_t v4 = *result;
        uint64_t v5 = *(void *)(*result + v2);
      }
      if ((v5 | 8) != 0xFFFFFFFFFFFFFFF8) {
        *(_WORD *)(v4 + v2 + 8) = *(_WORD *)(*a2 + v2 + 8);
      }
      ++v3;
      v2 += 16;
    }
    while (v3 < *((unsigned int *)result + 4));
  }
  return result;
}

void llvm::orc::ResourceTracker::~ResourceTracker(llvm::orc::ResourceTracker *this)
{
  uint64_t v2 = (unint64_t *)((char *)this + 8);
  unint64_t v3 = atomic_load((unint64_t *)this + 1);
  uint64_t v4 = *(llvm::orc::ResourceTracker **)((v3 & 0xFFFFFFFFFFFFFFFELL) + 32);
  v6[0] = this;
  v6[1] = v4;
  llvm::orc::ExecutionSession::runSessionLocked<llvm::orc::ExecutionSession::destroyResourceTracker(llvm::orc::ResourceTracker &)::$_0>((std::recursive_mutex *)v4, v6);
  unint64_t v5 = atomic_load(v2);
  llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v5 & 0xFFFFFFFFFFFFFFFELL);
}

void llvm::orc::ExecutionSession::removeResourceTracker(void ***this, std::recursive_mutex *a2, uint64_t a3)
{
  std::string __p = 0;
  uint64_t v52 = 0;
  long long v53 = 0;
  v50[0] = 0;
  v50[1] = 0;
  uint64_t v48 = 0;
  uint64_t v49 = v50;
  uint64_t v47 = 0;
  std::recursive_mutex::lock(a2);
  if (&__p != (void **)&a2[1].__m_.__opaque[48])
  {
    BOOL v7 = *(const void **)&a2[1].__m_.__opaque[48];
    uint64_t sig = a2[2].__m_.__sig;
    size_t v8 = sig - (void)v7;
    uint64_t v9 = (sig - (uint64_t)v7) >> 3;
    if ((const void *)sig == v7)
    {
      uint64_t v10 = 0;
    }
    else
    {
      if ((v8 & 0x8000000000000000) != 0) {
        abort();
      }
      uint64_t v10 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v53, (sig - (uint64_t)v7) >> 3);
      std::string __p = v10;
      uint64_t v52 = v10;
      long long v53 = &v10[8 * v11];
      memmove(v10, v7, v8);
    }
    uint64_t v52 = &v10[8 * v9];
  }
  unint64_t v12 = atomic_load((unint64_t *)(a3 + 8));
  atomic_store(v12 | 1, (unint64_t *)(a3 + 8));
  unint64_t v13 = atomic_load((unint64_t *)(a3 + 8));
  unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  long long v63 = 0uLL;
  long long v64 = 0;
  size_t v60 = 0;
  long long v61 = 0;
  unint64_t v62 = 0;
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 232) == a3)
  {
    long long v57 = 0;
    uint64_t v58 = 0;
    LODWORD(v59) = 0;
    if (*(_DWORD *)(v14 + 248))
    {
      uint64_t v16 = *(unsigned int *)(v14 + 256);
      if (v16)
      {
        uint64_t v17 = 32 * v16;
        size_t v18 = *(void **)(v14 + 240);
        while ((*v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v18 += 4;
          v17 -= 32;
          if (!v17) {
            goto LABEL_16;
          }
        }
      }
      else
      {
        size_t v18 = *(void **)(v14 + 240);
      }
      uint64_t v22 = *(void *)(v14 + 240) + 32 * v16;
LABEL_24:
      if (v18 != (void *)v22)
      {
        char v24 = (uint64_t *)v18[1];
        long long v23 = (uint64_t *)v18[2];
        while (v24 != v23)
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v57, v24++, (uint64_t)&v54);
        while (1)
        {
          v18 += 4;
          if (v18 == (void *)v22) {
            break;
          }
          if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_24;
          }
        }
      }
    }
LABEL_16:
    if (*(_DWORD *)(v14 + 120))
    {
      uint64_t v19 = *(unsigned int *)(v14 + 128);
      if (v19)
      {
        uint64_t v20 = 24 * v19;
        size_t v21 = *(uint64_t **)(v14 + 112);
        while ((*v21 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v21 += 3;
          v20 -= 24;
          if (!v20) {
            goto LABEL_43;
          }
        }
      }
      else
      {
        size_t v21 = *(uint64_t **)(v14 + 112);
      }
      uint64_t v25 = *(void *)(v14 + 112) + 24 * v19;
      if (v21 != (uint64_t *)v25)
      {
LABEL_33:
        uint64_t v54 = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)&v57, v21, &v54) & 1) == 0)
        {
          uint64_t v26 = *((void *)&v63 + 1);
          if (*((void *)&v63 + 1) >= (unint64_t)v64)
          {
            unint64_t v28 = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>((char **)&v63, v21);
          }
          else
          {
            uint64_t v27 = *v21;
            **((void **)&v63 + 1) = *v21;
            if ((unint64_t)(v27 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add((atomic_ullong *volatile)(v27 + 8), 1uLL);
            }
            unint64_t v28 = (char *)(v26 + 8);
          }
          *((void *)&v63 + 1) = v28;
        }
        while (1)
        {
          v21 += 3;
          if (v21 == (uint64_t *)v25) {
            break;
          }
          if ((*v21 | 8) != 0xFFFFFFFFFFFFFFF8)
          {
            if (v21 != (uint64_t *)v25) {
              goto LABEL_33;
            }
            break;
          }
        }
      }
    }
LABEL_43:
    uint64_t v29 = *(atomic_uint **)(v14 + 232);
    if (v29) {
      llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v29);
    }
    *(void *)(v14 + 232) = 0;
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t *)&v57);
  }
  else
  {
    uint64_t v54 = 0;
    {
      int v15 = v54;
      if (v54 != (void **)(*(void *)(v14 + 240) + 32 * *(unsigned int *)(v14 + 256)))
      {
        std::vector<llvm::orc::SymbolStringPtr>::__vdeallocate((void **)&v63);
        long long v63 = *(_OWORD *)(v15 + 1);
        long long v64 = v15[3];
        v15[1] = 0;
        long long v15[2] = 0;
        void v15[3] = 0;
        uint64_t v54 = v15 + 1;
        std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v54);
        *int v15 = (void *)-8192;
        *(int32x2_t *)(v14 + 248) = vadd_s32(*(int32x2_t *)(v14 + 248), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
  }
  __int16 v31 = (uint64_t *)*((void *)&v63 + 1);
  for (unint64_t i = (uint64_t *)v63; i != v31; ++i)
  {
    uint64_t v54 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(v14 + 160), i, &v54)&& v54 != (void **)(*(void *)(v14 + 160) + 72 * *(unsigned int *)(v14 + 176)))
    {
      uint64_t v32 = v61;
      if ((unint64_t)v61 >= v62)
      {
        __int16 v34 = (uint64_t *)std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>(&v60, i);
      }
      else
      {
        uint64_t v33 = *i;
        uint64_t *v61 = *i;
        if ((unint64_t)(v33 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v33 + 8), 1uLL);
        }
        __int16 v34 = v32 + 1;
      }
      long long v61 = v34;
    }
  }
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  long long v57 = (char **)&v58;
  uint64_t v35 = *(std::recursive_mutex **)(v14 + 32);
  std::recursive_mutex::lock(v35);
  llvm::orc::ExecutionSession::IL_failSymbols(&v54, v14, (uint64_t *)v60, v61);
  std::recursive_mutex::unlock(v35);
  char v37 = (uint64_t *)*((void *)&v63 + 1);
  for (unint64_t j = (uint64_t *)v63; j != v37; ++j)
  {
    uint64_t v65 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(v14 + 112), *(_DWORD *)(v14 + 128), *j, &v65))uint64_t v38 = v65; {
    else
    }
      uint64_t v38 = (char *)(*(void *)(v14 + 112) + 24 * *(unsigned int *)(v14 + 128));
    if (v38[18] < 0) {
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::erase(v14 + 136, *j);
    }
    if ((unint64_t)(*(void *)v38 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(*(void *)v38 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    *(void *)uint64_t v38 = -16;
    *(int32x2_t *)(v14 + 120) = vadd_s32(*(int32x2_t *)(v14 + 120), (int32x2_t)0x1FFFFFFFFLL);
  }
  std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v57, v58);
  long long v57 = &v60;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)&v57);
  size_t v60 = (char *)&v63;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)&v60);
  *(void *)&long long v63 = &v49;
  *((void *)&v63 + 1) = &v47;
  std::tuple<std::set<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>> &,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>> &>::operator=[abi:nn180100]<std::set<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>,0>((uint64_t *)&v63, (uint64_t)&v54);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v56);
  }
  std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v54, v55);
  std::recursive_mutex::unlock(a2);
  *this = 0;
  atomic_load((unint64_t *)(a3 + 8));
  unint64_t v40 = (char *)__p;
  __int16 v39 = v52;
  if (v52 != __p)
  {
    __int16 v41 = *this;
    do
    {
      uint64_t v42 = *((void *)v39 - 1);
      v39 -= 8;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v42 + 16))(&v46);
      uint64_t v54 = v41;
      *(void *)&long long v63 = v46;
      uint64_t v46 = 0;
      llvm::ErrorList::join(&v54, (void ***)&v63, (void ***)&v60);
      if ((void)v63) {
        (*(void (**)(void))(*(void *)v63 + 8))(v63);
      }
      if (v54) {
        (*((void (**)(void **))*v54 + 1))(v54);
      }
      __int16 v41 = (void **)v60;
      *this = (void **)v60;
      size_t v60 = 0;
      if (v46) {
        (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
      }
    }
    while (v39 != v40);
  }
  if (v49 != v50)
  {
    uint64_t v43 = *(void *)a2[1].__m_.__opaque;
    long long v45 = *(void ***)(v43 + 8);
    long long v44 = *(void **)(v43 + 16);
    uint64_t v54 = v45;
    long long v55 = v44;
    if (v44) {
      atomic_fetch_add_explicit(v44 + 1, 1uLL, memory_order_relaxed);
    }
    llvm::make_error<llvm::orc::FailedToMaterialize,std::shared_ptr<llvm::orc::SymbolStringPool>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>> &>();
  }
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v48);
  }
  std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v49, v50[0]);
  if (__p)
  {
    uint64_t v52 = (char *)__p;
    operator delete(__p);
  }
}

void llvm::orc::ExecutionSession::transferResourceTracker(std::recursive_mutex *this, llvm::orc::ResourceTracker *a2, llvm::orc::ResourceTracker *a3)
{
  if (a2 != a3)
  {
    unint64_t v5 = this;
    std::recursive_mutex::lock(this);
    unint64_t v6 = atomic_load((unint64_t *)a3 + 1);
    atomic_store(v6 | 1, (unint64_t *)a3 + 1);
    unint64_t v7 = atomic_load((unint64_t *)a2 + 1);
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 144))
    {
      uint64_t v9 = *(unsigned int *)(v8 + 152);
      if (v9)
      {
        uint64_t v10 = 24 * v9;
        uint64_t v11 = *(void **)(v8 + 136);
        while ((*v11 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v11 += 3;
          v10 -= 24;
          if (!v10) {
            goto LABEL_7;
          }
        }
      }
      else
      {
        uint64_t v11 = *(void **)(v8 + 136);
      }
      uint64_t v30 = *(void *)(v8 + 136) + 24 * v9;
LABEL_34:
      if (v11 != (void *)v30)
      {
        uint64_t v31 = v11[1];
        if (*(llvm::orc::ResourceTracker **)(v31 + 8) == a3) {
          *(void *)(v31 + 8) = a2;
        }
        while (1)
        {
          v11 += 3;
          if (v11 == (void *)v30) {
            break;
          }
          if ((*v11 | 8) != 0xFFFFFFFFFFFFFFF8) {
            goto LABEL_34;
          }
        }
      }
    }
LABEL_7:
    *(void *)&long long v77 = a3;
    int v79 = 0;
    int v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)(v8 + 264), &v77, &v79);
    unint64_t v13 = v79;
    if (v12) {
      BOOL v14 = v79 == (void **)(*(void *)(v8 + 264) + 32 * *(unsigned int *)(v8 + 280));
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14)
    {
      int v73 = v5;
      int v79 = (void **)a2;
      int v15 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>,llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>::FindAndConstruct(v8 + 264, &v79);
      uint64_t v16 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v13 + 1));
      uint64_t v18 = (uint64_t)v13[1] + 8 * *((unsigned int *)v13 + 6);
      if ((uint64_t *)v18 != v16)
      {
        uint64_t v19 = v16;
        uint64_t v20 = v17;
        do
        {
          uint64_t v21 = *v19;
          atomic_fetch_add_explicit((atomic_uint *volatile)a2, 1u, memory_order_relaxed);
          uint64_t v22 = *(void *)(v21 + 8);
          *(void *)(v21 + 8) = a2;
          if (v22) {
            llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release();
          }
          while (++v19 != v20)
          {
            if ((*v19 | 0x1000) != 0xFFFFFFFFFFFFF000) {
              goto LABEL_19;
            }
          }
          uint64_t v19 = v20;
LABEL_19:
          ;
        }
        while (v19 != (uint64_t *)v18);
      }
      long long v23 = v15 + 1;
      if (*((_DWORD *)v15 + 4))
      {
        char v24 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v13 + 1));
        uint64_t v26 = (uint64_t)v13[1] + 8 * *((unsigned int *)v13 + 6);
        unint64_t v5 = v73;
        if ((void *)v26 != v24)
        {
          uint64_t v27 = v24;
          unint64_t v28 = v25;
          do
          {
            *(void *)&long long v77 = 0;
            *(void *)&long long v77 = *v27;
            int v79 = 0;
            if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v23, &v77, &v79) & 1) == 0)
            {
              uint64_t v29 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseSetPair<llvm::orc::MaterializationResponsibility *>>,llvm::orc::MaterializationResponsibility *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseSetPair<llvm::orc::MaterializationResponsibility *>>::InsertIntoBucketImpl<llvm::orc::MaterializationResponsibility *>((uint64_t)v23, &v77, v79);
              *uint64_t v29 = v77;
            }
            while (++v27 != v28)
            {
              if ((*v27 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                goto LABEL_29;
              }
            }
            uint64_t v27 = v28;
LABEL_29:
            ;
          }
          while (v27 != (void *)v26);
        }
      }
      else
      {
        MEMORY[0x263E500A0](v15[1], 8);
        uint64_t *v23 = 0;
        long long v15[2] = 0;
        *((_DWORD *)v15 + 6) = 0;
        v15[1] = v13[1];
        v13[1] = 0;
        *((_DWORD *)v15 + 4) = *((_DWORD *)v13 + 4);
        *((_DWORD *)v13 + 4) = 0;
        int v32 = *((_DWORD *)v15 + 5);
        *((_DWORD *)v15 + 5) = *((_DWORD *)v13 + 5);
        *((_DWORD *)v13 + 5) = v32;
        int v33 = *((_DWORD *)v15 + 6);
        *((_DWORD *)v15 + 6) = *((_DWORD *)v13 + 6);
        *((_DWORD *)v13 + 6) = v33;
        unint64_t v5 = v73;
      }
      int v79 = (void **)a3;
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>,llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>::erase(v8 + 264, &v79);
    }
    __int16 v34 = *(llvm::orc::ResourceTracker **)(v8 + 232);
    if (v34 == a2)
    {
      int v79 = 0;
      uint64_t v54 = v79++;
      std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v79);
      *uint64_t v54 = (void *)-8192;
    }
    else
    {
      if (v34 == a3)
      {
        long long v77 = 0uLL;
        unint64_t v78 = 0;
        v75[0] = 0;
        v75[1] = 0;
        int v76 = 0;
        if (*(_DWORD *)(v8 + 248))
        {
          uint64_t v55 = *(unsigned int *)(v8 + 256);
          if (v55)
          {
            uint64_t v56 = 32 * v55;
            long long v57 = *(void **)(v8 + 240);
            while ((*v57 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v57 += 4;
              v56 -= 32;
              if (!v56) {
                goto LABEL_74;
              }
            }
          }
          else
          {
            long long v57 = *(void **)(v8 + 240);
          }
          uint64_t v61 = *(void *)(v8 + 240) + 32 * v55;
LABEL_82:
          if (v57 != (void *)v61)
          {
            unint64_t v62 = (uint64_t *)v57[1];
            long long v63 = (uint64_t *)v57[2];
            while (v62 != v63)
              llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v75, v62++, (uint64_t)&v79);
            while (1)
            {
              v57 += 4;
              if (v57 == (void *)v61) {
                break;
              }
              if ((*v57 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                goto LABEL_82;
              }
            }
          }
        }
LABEL_74:
        if (*(_DWORD *)(v8 + 120))
        {
          uint64_t v58 = *(unsigned int *)(v8 + 128);
          if (v58)
          {
            uint64_t v59 = 24 * v58;
            size_t v60 = *(uint64_t **)(v8 + 112);
            while ((*v60 | 8) == 0xFFFFFFFFFFFFFFF8)
            {
              v60 += 3;
              v59 -= 24;
              if (!v59) {
                goto LABEL_101;
              }
            }
          }
          else
          {
            size_t v60 = *(uint64_t **)(v8 + 112);
          }
          uint64_t v64 = *(void *)(v8 + 112) + 24 * v58;
          if (v60 != (uint64_t *)v64)
          {
LABEL_91:
            int v79 = 0;
            if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v75, v60, &v79) & 1) == 0)
            {
              uint64_t v65 = *((void *)&v77 + 1);
              if (*((void *)&v77 + 1) >= v78)
              {
                int v67 = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>((char **)&v77, v60);
              }
              else
              {
                uint64_t v66 = *v60;
                **((void **)&v77 + 1) = *v60;
                if ((unint64_t)(v66 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
                  atomic_fetch_add((atomic_ullong *volatile)(v66 + 8), 1uLL);
                }
                int v67 = (char *)(v65 + 8);
              }
              *((void *)&v77 + 1) = v67;
            }
            while (1)
            {
              v60 += 3;
              if (v60 == (uint64_t *)v64) {
                break;
              }
              if ((*v60 | 8) != 0xFFFFFFFFFFFFFFF8)
              {
                if (v60 != (uint64_t *)v64) {
                  goto LABEL_91;
                }
                break;
              }
            }
          }
        }
LABEL_101:
        int v79 = (void **)a2;
        uint64_t v68 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>,llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::FindAndConstruct(v8 + 240, (uint64_t *)&v79);
        std::vector<llvm::orc::SymbolStringPtr>::__vdeallocate((void **)v68 + 1);
        *(_OWORD *)(v68 + 1) = v77;
        v68[3] = v78;
        long long v77 = 0uLL;
        unint64_t v78 = 0;
        llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(v75);
        int v79 = (void **)&v77;
        std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v79);
        goto LABEL_102;
      }
      int v79 = (void **)a2;
      uint64_t v35 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>,llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::FindAndConstruct(v8 + 240, (uint64_t *)&v79);
      int v79 = 0;
      {
LABEL_102:
        uint64_t v70 = *(void *)&v5[1].__m_.__opaque[48];
        for (uint64_t i = v5[2].__m_.__sig; i != v70; i -= 8)
        {
          uint64_t v71 = *(void *)(i - 8);
          (*(void (**)(uint64_t, unint64_t, llvm::orc::ResourceTracker *, llvm::orc::ResourceTracker *))(*(void *)v71 + 24))(v71, v8, a2, a3);
        }
        std::recursive_mutex::unlock(v5);
        return;
      }
      size_t v72 = v79;
      long long v74 = v5;
      char v36 = (int64x2_t *)(v35 + 1);
      char v37 = v79 + 1;
      std::vector<llvm::orc::SymbolStringPtr>::reserve((char **)v35 + 1, (((unsigned char *)v79[2] - (unsigned char *)v79[1]) >> 3) + ((v35[2] - v35[1]) >> 3));
      __int16 v39 = *v37;
      uint64_t v38 = v37[1];
      if (*v37 != v38)
      {
        unint64_t v40 = v35 + 3;
        __int16 v41 = (void *)v35[2];
        do
        {
          if ((unint64_t)v41 >= *v40)
          {
            uint64_t v42 = ((uint64_t)v41 - v36->i64[0]) >> 3;
            if ((unint64_t)(v42 + 1) >> 61) {
              abort();
            }
            uint64_t v43 = *v40 - v36->i64[0];
            uint64_t v44 = v43 >> 2;
            if (v43 >> 2 <= (unint64_t)(v42 + 1)) {
              uint64_t v44 = v42 + 1;
            }
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v45 = v44;
            }
            unsigned int v82 = v35 + 3;
            if (v45) {
              uint64_t v46 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(v35 + 3), v45);
            }
            else {
              uint64_t v46 = 0;
            }
            uint64_t v47 = &v46[8 * v42];
            uint64_t v48 = &v46[8 * v45];
            int v81 = v48;
            *(void *)uint64_t v47 = 0;
            *(void *)uint64_t v47 = *v39;
            __int16 v41 = v47 + 8;
            *__int16 v39 = 0;
            v80.i64[1] = (uint64_t)(v47 + 8);
            long long v50 = (void *)v35[1];
            uint64_t v49 = (void *)v35[2];
            if (v49 == v50)
            {
              int64x2_t v52 = vdupq_n_s64((unint64_t)v49);
            }
            else
            {
              do
              {
                *((void *)v47 - 1) = 0;
                v47 -= 8;
                uint64_t v51 = *--v49;
                *(void *)uint64_t v47 = v51;
                *uint64_t v49 = 0;
              }
              while (v49 != v50);
              int64x2_t v52 = *v36;
              __int16 v41 = (void *)v80.i64[1];
              uint64_t v48 = v81;
            }
            v35[1] = (uint64_t)v47;
            uint64_t v35[2] = (uint64_t)v41;
            int64x2_t v80 = v52;
            uint64_t v53 = v35[3];
            v35[3] = (uint64_t)v48;
            int v81 = (char *)v53;
            int v79 = (void **)v52.i64[0];
            std::__split_buffer<llvm::orc::SymbolStringPtr>::~__split_buffer((uint64_t)&v79);
          }
          else
          {
            void *v41 = 0;
            *v41++ = *v39;
            *__int16 v39 = 0;
          }
          uint64_t v35[2] = (uint64_t)v41;
          ++v39;
        }
        while (v39 != v38);
      }
      int v79 = v37;
      std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v79);
      unint64_t v5 = v74;
      *size_t v72 = (void *)-8192;
    }
    *(int32x2_t *)(v8 + 248) = vadd_s32(*(int32x2_t *)(v8 + 248), (int32x2_t)0x1FFFFFFFFLL);
    goto LABEL_102;
  }
}

uint64_t llvm::orc::ResourceTrackerDefunct::convertToErrorCode(llvm::orc::ResourceTrackerDefunct *this)
{
  return 1;
}

llvm::raw_ostream *llvm::orc::ResourceTrackerDefunct::log(llvm::orc::ResourceTrackerDefunct *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v4) > 0x10)
  {
    *(unsigned char *)(v4 + 16) = 32;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)"Resource tracker ";
    *((void *)a2 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Resource tracker ", 0x11uLL);
  }
  uint64_t result = llvm::write_hex(a2, *((void *)this + 1), 3, 0, 0);
  unint64_t v6 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v6 > 0xEuLL)
  {
    qmemcpy(v6, " became defunct", 15);
    *((void *)a2 + 4) += 15;
  }
  else
  {
    return llvm::raw_ostream::write(a2, " became defunct", 0xFuLL);
  }
  return result;
}

uint64_t llvm::orc::FailedToMaterialize::FailedToMaterialize(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = &unk_270DBD8B8;
  *(_OWORD *)(result + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(result + 24) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v3 = *(void *)(result + 24);
  if (*(_DWORD *)(v3 + 8))
  {
    uint64_t v4 = *(void **)v3;
    uint64_t v5 = *(unsigned int *)(v3 + 16);
    if (v5)
    {
      uint64_t v6 = 32 * v5;
      for (uint64_t i = *(void **)v3; (*i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 4)
      {
        v6 -= 32;
        if (!v6) {
          return result;
        }
      }
    }
    else
    {
      uint64_t i = *(void **)v3;
    }
    unint64_t v8 = &v4[4 * v5];
    if (i != v8)
    {
      uint64_t v9 = (atomic_uint *)*i;
LABEL_10:
      atomic_fetch_add_explicit(v9, 1u, memory_order_relaxed);
      while (1)
      {
        i += 4;
        if (i == v8) {
          break;
        }
        uint64_t v9 = (atomic_uint *)*i;
        if ((*i | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (i != v8) {
            goto LABEL_10;
          }
          return result;
        }
      }
    }
  }
  return result;
}

void llvm::orc::FailedToMaterialize::~FailedToMaterialize(llvm::orc::FailedToMaterialize *this)
{
  *(void *)this = &unk_270DBD8B8;
  uint64_t v2 = *((void *)this + 3);
  if (*(_DWORD *)(v2 + 8))
  {
    uint64_t v3 = *(void **)v2;
    uint64_t v4 = *(unsigned int *)(v2 + 16);
    if (v4)
    {
      uint64_t v5 = 32 * v4;
      uint64_t v6 = v3;
      while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 4;
        v5 -= 32;
        if (!v5) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      uint64_t v6 = v3;
    }
    unint64_t v7 = &v3[4 * v4];
    if (v6 != v7)
    {
      unint64_t v8 = (atomic_uint *)*v6;
LABEL_10:
      llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v8);
      while (1)
      {
        v6 += 4;
        if (v6 == v7) {
          break;
        }
        unint64_t v8 = (atomic_uint *)*v6;
        if ((*v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v6 != v7) {
            goto LABEL_10;
          }
          break;
        }
      }
    }
  }
LABEL_14:
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v10);
  }
}

{
  uint64_t vars8;

  llvm::orc::FailedToMaterialize::~FailedToMaterialize(this);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::orc::FailedToMaterialize::convertToErrorCode(llvm::orc::FailedToMaterialize *this)
{
  return 1;
}

llvm::raw_ostream *llvm::orc::FailedToMaterialize::log(llvm::orc::FailedToMaterialize *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v4 > 0x1EuLL)
  {
    qmemcpy(v4, "Failed to materialize symbols: ", 31);
    *((void *)a2 + 4) += 31;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Failed to materialize symbols: ", 0x1FuLL);
  }
  uint64_t v5 = *((void *)this + 3);
  return llvm::orc::operator<<(a2, v5);
}

uint64_t llvm::orc::UnsatisfiedSymbolDependencies::convertToErrorCode(llvm::orc::UnsatisfiedSymbolDependencies *this)
{
  return 1;
}

llvm::raw_ostream *llvm::orc::UnsatisfiedSymbolDependencies::log(llvm::orc::UnsatisfiedSymbolDependencies *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v4) > 2)
  {
    *(unsigned char *)(v4 + 2) = 32;
    *(_WORD *)uint64_t v4 = 28233;
    *((void *)a2 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(a2, "In ", 3uLL);
  }
  uint64_t v5 = *((void *)this + 3);
  unint64_t v8 = *(const char **)(v5 + 8);
  uint64_t v6 = v5 + 8;
  unint64_t v7 = v8;
  int v9 = *(char *)(v6 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (const char *)v6;
  }
  else {
    uint64_t v10 = v7;
  }
  if (v9 >= 0) {
    size_t v11 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    size_t v11 = *(void *)(v6 + 8);
  }
  llvm::raw_ostream::write(a2, v10, v11);
  int v12 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v12 > 0x17uLL)
  {
    qmemcpy(v12, ", failed to materialize ", 24);
    *((void *)a2 + 4) += 24;
  }
  else
  {
    llvm::raw_ostream::write(a2, ", failed to materialize ", 0x18uLL);
  }
  llvm::orc::operator<<(a2, (uint64_t)this + 32);
  unint64_t v13 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v13 > 0x21uLL)
  {
    qmemcpy(v13, ", due to unsatisfied dependencies ", 34);
    *((void *)a2 + 4) += 34;
  }
  else
  {
    llvm::raw_ostream::write(a2, ", due to unsatisfied dependencies ", 0x22uLL);
  }
  uint64_t result = llvm::orc::operator<<(a2, (uint64_t)this + 56);
  if (*((char *)this + 103) < 0)
  {
    if (!*((void *)this + 11)) {
      return result;
    }
  }
  else if (!*((unsigned char *)this + 103))
  {
    return result;
  }
  int v15 = (_WORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v15 > 1uLL)
  {
    *int v15 = 10272;
    *((void *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, " (", 2uLL);
  }
  int v16 = *((char *)this + 103);
  if (v16 >= 0) {
    uint64_t v17 = (char *)this + 80;
  }
  else {
    uint64_t v17 = (const char *)*((void *)this + 10);
  }
  if (v16 >= 0) {
    size_t v18 = *((unsigned __int8 *)this + 103);
  }
  else {
    size_t v18 = *((void *)this + 11);
  }
  uint64_t result = llvm::raw_ostream::write(a2, v17, v18);
  uint64_t v19 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v19)
  {
    return llvm::raw_ostream::write(a2, ")", 1uLL);
  }
  else
  {
    *uint64_t v19 = 41;
    ++*((void *)a2 + 4);
  }
  return result;
}

uint64_t llvm::orc::SymbolsNotFound::convertToErrorCode(llvm::orc::SymbolsNotFound *this)
{
  return 1;
}

llvm::raw_ostream *llvm::orc::SymbolsNotFound::log(size_t ***this, llvm::raw_ostream *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v4) > 0x12)
  {
    *(_DWORD *)(v4 + 15) = 540697710;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)"Symbols not found: ";
    *((void *)a2 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Symbols not found: ", 0x13uLL);
  }
  return llvm::orc::operator<<(a2, this + 3);
}

uint64_t llvm::orc::MissingSymbolDefinitions::convertToErrorCode(llvm::orc::MissingSymbolDefinitions *this)
{
  return 16;
}

llvm::raw_ostream *llvm::orc::MissingSymbolDefinitions::log(llvm::orc::MissingSymbolDefinitions *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v4 > 0x1DuLL)
  {
    qmemcpy(v4, "Missing definitions in module ", 30);
    *((void *)a2 + 4) += 30;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Missing definitions in module ", 0x1EuLL);
  }
  int v5 = *((char *)this + 47);
  if (v5 >= 0) {
    uint64_t v6 = (char *)this + 24;
  }
  else {
    uint64_t v6 = (const char *)*((void *)this + 3);
  }
  if (v5 >= 0) {
    size_t v7 = *((unsigned __int8 *)this + 47);
  }
  else {
    size_t v7 = *((void *)this + 4);
  }
  llvm::raw_ostream::write(a2, v6, v7);
  unint64_t v8 = (_WORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v8 > 1uLL)
  {
    *unint64_t v8 = 8250;
    *((void *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, ": ", 2uLL);
  }
  return llvm::orc::operator<<(a2, (size_t ***)this + 6);
}

uint64_t llvm::orc::UnexpectedSymbolDefinitions::convertToErrorCode(llvm::orc::UnexpectedSymbolDefinitions *this)
{
  return 17;
}

llvm::raw_ostream *llvm::orc::UnexpectedSymbolDefinitions::log(llvm::orc::UnexpectedSymbolDefinitions *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v4 > 0x20uLL)
  {
    qmemcpy(v4, "Unexpected definitions in module ", 33);
    *((void *)a2 + 4) += 33;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Unexpected definitions in module ", 0x21uLL);
  }
  int v5 = *((char *)this + 47);
  if (v5 >= 0) {
    uint64_t v6 = (char *)this + 24;
  }
  else {
    uint64_t v6 = (const char *)*((void *)this + 3);
  }
  if (v5 >= 0) {
    size_t v7 = *((unsigned __int8 *)this + 47);
  }
  else {
    size_t v7 = *((void *)this + 4);
  }
  llvm::raw_ostream::write(a2, v6, v7);
  unint64_t v8 = (_WORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v8 > 1uLL)
  {
    *unint64_t v8 = 8250;
    *((void *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, ": ", 2uLL);
  }
  return llvm::orc::operator<<(a2, (size_t ***)this + 6);
}

uint64_t llvm::orc::AsynchronousSymbolQuery::notifySymbolMetRequiredState(uint64_t a1, void *a2, uint64_t a3, __int16 a4)
{
  uint64_t v9 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(a1 + 56), a2, &v9);
  uint64_t v8 = v9;
  if (!result) {
    uint64_t v8 = *(void *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 72);
  }
  if ((a4 & 0x4000) != 0)
  {
    if ((unint64_t)(*(void *)v8 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(*(void *)v8 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    *(void *)uint64_t v8 = -16;
    *(int32x2_t *)(a1 + 64) = vadd_s32(*(int32x2_t *)(a1 + 64), (int32x2_t)0x1FFFFFFFFLL);
  }
  else
  {
    *(void *)(v8 + 8) = a3;
    *(_WORD *)(v8 + 16) = a4;
  }
  --*(void *)(a1 + 80);
  return result;
}

void llvm::orc::AsynchronousSymbolQuery::handleComplete()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void *llvm::orc::AsynchronousSymbolQuery::handleFailed(long long *a1, uint64_t *a2)
{
  uint64_t v2 = a1;
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  *a2 = 0;
  char v9 = -1;
  v8[0] = v3;
  uint64_t v4 = *((void *)a1 + 3);
  if ((v4 & 2) == 0) {
    a1 = *(long long **)a1;
  }
  (*(void (**)(long long *, void *))(v4 & 0xFFFFFFFFFFFFFFF8))(a1, v8);
  llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v8);
  memset(v7, 0, sizeof(v7));
  if (v7 != v2)
  {
    int v5 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v2);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v5, v7);
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v7);
}

int32x2_t llvm::orc::AsynchronousSymbolQuery::removeQueryDependence(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v8 = 0;
  else {
    uint64_t v5 = *(void *)(a1 + 32) + 32 * *(unsigned int *)(a1 + 48);
  }
  uint64_t v8 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(v5 + 8), a3, &v8) & 1) == 0)
  {
    if (*(_DWORD *)(v5 + 16)) {
      return result;
    }
    goto LABEL_10;
  }
  size_t v7 = v8;
  if ((unint64_t)(*v8 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(*v8 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  *size_t v7 = -16;
  int32x2_t result = vadd_s32(*(int32x2_t *)(v5 + 16), (int32x2_t)0x1FFFFFFFFLL);
  *(int32x2_t *)(v5 + 16) = result;
  if (!result.i32[0])
  {
LABEL_10:
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t *)(v5 + 8));
    *(void *)uint64_t v5 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 40), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 40) = result;
  }
  return result;
}

void llvm::orc::AsynchronousSymbolQuery::detach(llvm::orc::AsynchronousSymbolQuery *this)
{
  int v2 = *((_DWORD *)this + 16);
  if (*((void *)this + 8))
  {
    uint64_t v3 = *((unsigned int *)this + 18);
    uint64_t v4 = *((void *)this + 7);
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      if (v3)
      {
        uint64_t v10 = 24 * v3;
        do
        {
          if ((unint64_t)(*(void *)v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(*(void *)v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
          }
          *(void *)uint64_t v4 = -8;
          v4 += 24;
          v10 -= 24;
        }
        while (v10);
      }
      *((void *)this + 8) = 0;
    }
    else
    {
      uint64_t v5 = 24 * v3;
      do
      {
        if ((unint64_t)(*(void *)v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(*(void *)v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        v4 += 24;
        v5 -= 24;
      }
      while (v5);
      int v6 = 1 << (33 - __clz(v2 - 1));
      if (v6 <= 64) {
        int v6 = 64;
      }
      if (v2) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      if (v7 == *((_DWORD *)this + 18))
      {
        *((void *)this + 8) = 0;
        if (v7)
        {
          uint64_t v8 = (void *)*((void *)this + 7);
          uint64_t v9 = 24 * v7;
          do
          {
            *uint64_t v8 = -8;
            v8 += 3;
            v9 -= 24;
          }
          while (v9);
        }
      }
      else
      {
        MEMORY[0x263E500A0](*((void *)this + 7), 8);
        llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::init((_DWORD *)this + 14, v7);
      }
    }
  }
  int v12 = (uint64_t *)((char *)this + 32);
  size_t v11 = (uint64_t *)*((void *)this + 4);
  *((void *)this + 10) = 0;
  if (*((_DWORD *)this + 10))
  {
    uint64_t v13 = *((unsigned int *)this + 12);
    if (v13)
    {
      uint64_t v14 = 32 * v13;
      int v15 = v11;
      while ((*v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v15 += 4;
        v14 -= 32;
        if (!v14) {
          goto LABEL_55;
        }
      }
    }
    else
    {
      int v15 = v11;
    }
    int v16 = &v11[4 * v13];
    if (v15 != v16)
    {
      uint64_t v17 = *v15;
      do
      {
        size_t v18 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin((uint64_t)(v15 + 1));
        uint64_t v20 = v15[1] + 8 * *((unsigned int *)v15 + 6);
        if ((uint64_t *)v20 != v18)
        {
          uint64_t v21 = v18;
          uint64_t v22 = v19;
          long long v23 = (uint64_t *)(v17 + 160);
          do
          {
            char v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct(v23, v21);
            uint64_t v25 = v24;
            uint64_t v27 = v24[6];
            uint64_t v26 = (long long *)v24[7];
            if ((long long *)v27 != v26)
            {
              while (*(llvm::orc::AsynchronousSymbolQuery **)v27 != this)
              {
                v27 += 16;
                if ((long long *)v27 == v26)
                {
                  uint64_t v27 = v24[7];
                  break;
                }
              }
            }
            uint64_t v28 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> *,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> *,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> *>((long long *)(v27 + 16), v26, v27);
            for (uint64_t i = v25[7]; i != v28; i -= 16)
            {
              uint64_t v30 = *(std::__shared_weak_count **)(i - 8);
              if (v30) {
                std::__shared_weak_count::__release_shared[abi:nn180100](v30);
              }
            }
            v25[7] = v28;
            while (++v21 != v22)
            {
              if ((*v21 | 8) != 0xFFFFFFFFFFFFFFF8) {
                goto LABEL_49;
              }
            }
            uint64_t v21 = v22;
LABEL_49:
            ;
          }
          while (v21 != (uint64_t *)v20);
        }
        v15 += 4;
        int v12 = (uint64_t *)((char *)this + 32);
        if (v15 == v16) {
          break;
        }
        while (1)
        {
          uint64_t v17 = *v15;
          if ((*v15 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            break;
          }
          v15 += 4;
          if (v15 == v16) {
            goto LABEL_55;
          }
        }
      }
      while (v15 != v16);
    }
  }
LABEL_55:
  int v31 = *((_DWORD *)this + 10);
  if (v31 || *((_DWORD *)this + 11))
  {
    uint64_t v32 = *((unsigned int *)this + 12);
    if (v32 > 4 * v31 && v32 >= 0x41)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll(v12);
      if (v31)
      {
        int v33 = 1 << (33 - __clz(v31 - 1));
        if (v33 <= 64) {
          unsigned int v34 = 64;
        }
        else {
          unsigned int v34 = v33;
        }
        if (v34 == *((_DWORD *)this + 12))
        {
          *((void *)this + 5) = 0;
          uint64_t v35 = 32 * v34;
          char v36 = (void *)*((void *)this + 4);
          do
          {
            *char v36 = -4096;
            v36 += 4;
            v35 -= 32;
          }
          while (v35);
          return;
        }
        goto LABEL_78;
      }
      if (*((_DWORD *)this + 12))
      {
        unsigned int v34 = 0;
LABEL_78:
        MEMORY[0x263E500A0](*v12, 8);
        llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::init(v12, v34);
        return;
      }
LABEL_74:
      *((void *)this + 5) = 0;
      return;
    }
    if (!v32) {
      goto LABEL_74;
    }
    char v37 = (uint64_t *)(*v12 + 8);
    uint64_t v38 = 32 * v32;
    while (1)
    {
      uint64_t v39 = *(v37 - 1);
      if (v39 == -8192) {
        goto LABEL_72;
      }
      if (v39 != -4096) {
        break;
      }
LABEL_73:
      v37 += 4;
      v38 -= 32;
      if (!v38) {
        goto LABEL_74;
      }
    }
    char v37 = llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(v37);
LABEL_72:
    *(v37 - 1) = -4096;
    goto LABEL_73;
  }
}

uint64_t llvm::orc::AbsoluteSymbolsMaterializationUnit::AbsoluteSymbolsMaterializationUnit(uint64_t a1, uint64_t a2)
{
  llvm::orc::AbsoluteSymbolsMaterializationUnit::extractFlags((uint64_t *)a2, (uint64_t)&v8);
  uint64_t v4 = v8;
  *(void *)a1 = &unk_270DBDAF0;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v9;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  *(_DWORD *)(a1 + 24) = v10;
  int v10 = 0;
  *(void *)(a1 + 32) = v11;
  uint64_t v11 = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(&v8);
  *(void *)a1 = &unk_270DBD9A8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v5 = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v5;
  int v6 = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v6;
  return a1;
}

uint64_t *llvm::orc::AbsoluteSymbolsMaterializationUnit::extractFlags@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v15 = 0;
  int v3 = *((_DWORD *)a1 + 2);
  if (!v3) {
    goto LABEL_15;
  }
  uint64_t v4 = *((unsigned int *)a1 + 4);
  if (v4)
  {
    uint64_t v5 = 24 * v4;
    uint64_t v6 = *a1;
    while ((*(void *)v6 | 8) == 0xFFFFFFFFFFFFFFF8)
    {
      v6 += 24;
      v5 -= 24;
      if (!v5) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    uint64_t v6 = *a1;
  }
  uint64_t v7 = *a1 + 24 * v4;
  if (v6 == v7)
  {
LABEL_14:
    int v3 = 0;
LABEL_15:
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    goto LABEL_16;
  }
LABEL_9:
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v13, (uint64_t *)v6)[4] = *(_WORD *)(v6 + 16);
  while (1)
  {
    v6 += 24;
    if (v6 == v7) {
      break;
    }
    if ((*(void *)v6 | 8) != 0xFFFFFFFFFFFFFFF8)
    {
      if (v6 != v7) {
        goto LABEL_9;
      }
      break;
    }
  }
  uint64_t v8 = v13;
  uint64_t v9 = v14;
  int v3 = v15;
LABEL_16:
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v15 = 0;
  *(void *)a2 = v8;
  v11[0] = 0;
  v11[1] = 0;
  *(void *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = v3;
  int v12 = 0;
  *(void *)(a2 + 24) = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(v11);
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(&v13);
}

const char *llvm::orc::AbsoluteSymbolsMaterializationUnit::getName(llvm::orc::AbsoluteSymbolsMaterializationUnit *this)
{
  return "<Absolute Symbols>";
}

void llvm::orc::AbsoluteSymbolsMaterializationUnit::materialize(uint64_t a1, uint64_t **a2)
{
  llvm::orc::JITDylib::resolve(**a2, (uint64_t)*a2, a1 + 40, &v7);
  if (v7)
  {
    uint64_t v3 = *(void *)(**a2 + 32);
    uint64_t v6 = v7;
    uint64_t v7 = 0;
    llvm::orc::ExecutionSession::reportError(v3, &v6);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    llvm::orc::ExecutionSession::OL_notifyFailed(*(void *)(**a2 + 32), (uint64_t)*a2);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  else
  {
    llvm::orc::ExecutionSession::OL_notifyEmitted(*(std::recursive_mutex **)(**a2 + 32), (uint64_t)*a2, 0, 0, &v7);
    if (v7)
    {
      uint64_t v4 = *(void *)(**a2 + 32);
      uint64_t v5 = v7;
      llvm::orc::ExecutionSession::reportError(v4, &v5);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      llvm::orc::ExecutionSession::OL_notifyFailed(*(void *)(**a2 + 32), (uint64_t)*a2);
    }
  }
}

int32x2_t llvm::orc::AbsoluteSymbolsMaterializationUnit::discard(uint64_t a1, uint64_t a2, void *a3)
{
  return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::erase(a1 + 40, a3);
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::erase(uint64_t a1, void *a2)
{
  uint64_t v5 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v5))
  {
    uint64_t v4 = v5;
    if ((unint64_t)(*v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(*v5 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    *uint64_t v4 = -16;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t llvm::orc::ReExportsMaterializationUnit::ReExportsMaterializationUnit(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  llvm::orc::AbsoluteSymbolsMaterializationUnit::extractFlags((uint64_t *)a4, (uint64_t)&v12);
  uint64_t v8 = v12;
  *(void *)a1 = &unk_270DBDAF0;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v13;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  *(_DWORD *)(a1 + 24) = v14;
  int v14 = 0;
  *(void *)(a1 + 32) = v15;
  uint64_t v15 = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(&v12);
  *(void *)a1 = &unk_270DBD9E8;
  *(void *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = *(void *)a4;
  *(void *)a4 = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(a4 + 8) = 0;
  int v9 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(a4 + 12) = v9;
  int v10 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = v10;
  return a1;
}

const char *llvm::orc::ReExportsMaterializationUnit::getName(llvm::orc::ReExportsMaterializationUnit *this)
{
  return "<Reexports>";
}

uint64_t *llvm::orc::ReExportsMaterializationUnit::materialize(uint64_t a1, uint64_t **a2)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v6 = *v3;
  uint64_t v4 = (uint64_t)(v3 + 2);
  uint64_t v5 = v6;
  uint64_t v29 = v6;
  uint64_t v7 = *(void *)(a1 + 40);
  if (!v7) {
    uint64_t v7 = v5;
  }
  uint64_t v31 = v7;
  llvm::orc::JITDylib::getRequestedSymbols(v5, v4, (uint64_t)&v50);
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  unsigned int v49 = 0;
  if (!v51) {
    goto LABEL_26;
  }
  if (v52)
  {
    uint64_t v9 = 8 * v52;
    int v10 = v50;
    while ((*v10 | 8) == 0xFFFFFFFFFFFFFFF8)
    {
      ++v10;
      v9 -= 8;
      if (!v9) {
        goto LABEL_26;
      }
    }
  }
  else
  {
    int v10 = v50;
  }
  uint64_t v11 = &v50[v52];
  if (v10 == v11)
  {
LABEL_26:
    uint64_t v17 = a1;
    __int32 v16 = *(_DWORD *)(a1 + 64);
    if (!v16) {
      goto LABEL_30;
    }
LABEL_27:
    if (*(void *)(v17 + 40))
    {
      uint64_t v44 = *(void *)(v17 + 56);
      *(void *)(v17 + 56) = 0;
      __int32 v45 = v16;
      uint64_t v18 = *(void *)(v17 + 68);
      *(void *)(v17 + 64) = 0;
      uint64_t v46 = v18;
      *(_DWORD *)(v17 + 72) = 0;
      operator new();
    }
    uint64_t v41 = *(void *)(v17 + 56);
    *(void *)(v17 + 56) = 0;
    __int32 v42 = v16;
    uint64_t v19 = *(void *)(v17 + 68);
    *(void *)(v17 + 64) = 0;
    uint64_t v43 = v19;
    *(_DWORD *)(v17 + 72) = 0;
    operator new();
  }
LABEL_11:
  *(void *)&long long v32 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(a1 + 56), v10, &v32))uint64_t v12 = v32; {
  else
  }
    uint64_t v12 = *(void *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 72);
  uint64_t v8 = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::FindAndConstruct(&v47, v10);
  uint64_t v13 = *(void *)(v8 + 8);
  if ((unint64_t)(v13 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 8) = *(void *)(v12 + 8);
  *(void *)(v12 + 8) = 0;
  *(_WORD *)(v8 + 16) = *(_WORD *)(v12 + 16);
  uint64_t v14 = *(void *)(v12 + 8);
  if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  if ((unint64_t)(*(void *)v12 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(*(void *)v12 + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  *(void *)uint64_t v12 = -16;
  int32x2_t v15 = vadd_s32(*(int32x2_t *)(a1 + 64), (int32x2_t)0x1FFFFFFFFLL);
  *(int32x2_t *)(a1 + 64) = v15;
  while (++v10 != v11)
  {
    if ((*v10 | 8) != 0xFFFFFFFFFFFFFFF8)
    {
      if (v10 != v11) {
        goto LABEL_11;
      }
      break;
    }
  }
  __int32 v16 = v15.i32[0];
  uint64_t v17 = a1;
  if (v15.i32[0]) {
    goto LABEL_27;
  }
LABEL_30:
  if (v48)
  {
    v39[0] = 0;
    v39[1] = 0;
    LODWORD(v40) = 0;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    unsigned int v34 = 0;
    uint64_t v35 = 0;
    unsigned int v36 = 0;
    if (v49)
    {
      uint64_t v20 = 24 * v49;
      uint64_t v21 = v47;
      while ((*(void *)v21 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v21 += 24;
        v20 -= 24;
        if (!v20) {
          goto LABEL_58;
        }
      }
    }
    else
    {
      uint64_t v21 = v47;
    }
    uint64_t v22 = v47 + 24 * v49;
    if (v21 != v22)
    {
      do
      {
        if (v31 != v29
          || (*(void *)&long long v32 = 0,
              uint64_t v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)&v34, (void *)(v21 + 8), &v32), (v8 & 1) == 0)&& (*(void *)&v32 = 0, uint64_t v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(&v47, (void *)(v21 + 8), &v32), (v8 & 1) == 0))
        {
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v39, (uint64_t *)v21, (uint64_t)&v32);
          uint64_t v23 = *(void *)(v21 + 8);
          uint64_t v33 = v23;
          if ((unint64_t)(v23 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(v23 + 8), 1uLL);
          }
          llvm::orc::SymbolLookupSet::add((uint64_t *)&v37, &v33, (*(unsigned __int8 *)(v21 + 17) >> 6) & 1);
          if ((unint64_t)(v33 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(v33 + 8), 0xFFFFFFFFFFFFFFFFLL);
          }
          uint64_t v8 = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::FindAndConstruct((uint64_t *)&v34, (uint64_t *)v21);
          uint64_t v24 = *(void *)(v8 + 8);
          if ((unint64_t)(v24 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(v24 + 8), 0xFFFFFFFFFFFFFFFFLL);
          }
          *(void *)(v8 + 8) = 0;
          *(void *)(v8 + 8) = *(void *)(v21 + 8);
          *(void *)(v21 + 8) = 0;
          *(_WORD *)(v8 + 16) = *(_WORD *)(v21 + 16);
        }
        v21 += 24;
        if (v21 == v22) {
          break;
        }
        while ((*(void *)v21 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v21 += 24;
          if (v21 == v22) {
            goto LABEL_53;
          }
        }
      }
      while (v21 != v22);
LABEL_53:
      if (v35)
      {
        if (v36)
        {
          uint64_t v25 = 24 * v36;
          uint64_t v26 = v34;
          while ((*v26 | 8) == 0xFFFFFFFFFFFFFFF8)
          {
            v26 += 3;
            v25 -= 24;
            if (!v25) {
              goto LABEL_58;
            }
          }
        }
        else
        {
          uint64_t v26 = v34;
        }
        uint64_t v27 = &v34[3 * v36];
LABEL_61:
        if (v26 != v27)
        {
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::erase((uint64_t)&v47, v26);
          while (1)
          {
            v26 += 3;
            if (v26 == v27) {
              break;
            }
            if ((*v26 | 8) != 0xFFFFFFFFFFFFFFF8) {
              goto LABEL_61;
            }
          }
        }
      }
    }
LABEL_58:
    llvm::orc::ExecutionSession::OL_delegate(v8, *a2, (uint64_t)v39);
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll((uint64_t)&v47);
  MEMORY[0x263E500A0](v47, 8);
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t *)&v50);
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::erase(uint64_t a1, void *a2)
{
  uint64_t v6 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v6))
  {
    uint64_t v4 = v6;
    uint64_t v5 = *(void *)(v6 + 8);
    if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    if ((unint64_t)(*(void *)v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(*(void *)v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    *(void *)uint64_t v4 = -16;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void llvm::orc::ExecutionSession::lookup(llvm::orc::ExecutionSession *a1, uint64_t a2, uint64_t a3, uint64_t **a4, char a5, long long *a6)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  llvm::orc::ExecutionSession::dispatchOutstandingMUs(a1);
  uint64_t v9 = *a4;
  int v10 = a4[1];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v11 = operator new(0x78uLL);
  v11[1] = 0;
  uint64_t v11[2] = 0;
  *uint64_t v11 = &unk_270DBDD60;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v14, a6);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v11 + 3), &v14);
  v11[7] = 0;
  _OWORD v11[8] = 0;
  *((_DWORD *)v11 + 18) = 0;
  v11[10] = 0;
  v11[11] = 0;
  *((_DWORD *)v11 + 24) = 0;
  *((unsigned char *)v11 + 112) = a5;
  v11[13] = ((char *)v10 - (char *)v9) >> 4;
  if (v10 != v9)
  {
    uint64_t v12 = v9;
    do
    {
      uint64_t v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct(v11 + 10, v12);
      v13[1] = 0;
      *((_WORD *)v13 + 8) = 0;
      v12 += 2;
    }
    while (v12 != v10);
  }
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v14);
  operator new();
}

int32x2_t llvm::orc::ReExportsMaterializationUnit::discard(uint64_t a1, uint64_t a2, void *a3)
{
  return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::erase(a1 + 56, a3);
}

llvm::orc::InProgressLookupState *llvm::orc::LookupState::continueLookup(llvm::orc::InProgressLookupState **a1, uint64_t *a2)
{
  int v2 = *a1;
  uint64_t v3 = *(llvm::orc::ExecutionSession **)(**((void **)*a1 + 2) + 32);
  *a1 = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = v2;
  *a2 = 0;
  llvm::orc::ExecutionSession::OL_applyQueryPhase1(v3, &v7, &v6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  int32x2_t result = v7;
  if (v7)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)v7 + 8);
    return (llvm::orc::InProgressLookupState *)v5();
  }
  return result;
}

void llvm::orc::ExecutionSession::OL_applyQueryPhase1(llvm::orc::ExecutionSession *this, llvm::orc::InProgressLookupState **a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  if (*((_DWORD *)*a2 + 34) == 2)
  {
    llvm::orc::ExecutionSession::OL_resumeLookupAfterGeneration(this, *a2);
    uint64_t v6 = *a2;
  }
  uint64_t v7 = *((void *)v6 + 9);
  uint64_t v8 = *((void *)v6 + 2);
  if (v7 == (*((void *)v6 + 3) - v8) >> 4)
  {
    uint64_t v10 = *((void *)v6 + 11);
    uint64_t v9 = *((void *)v6 + 12);
LABEL_5:
    if (v9 != v10)
    {
      uint64_t v11 = 0;
      do
      {
        if (*(_DWORD *)(v10 + 16 * v11 + 8) == 1)
        {
          llvm::orc::SymbolLookupSet::remove((void *)v6 + 11, v11);
          uint64_t v10 = *((void *)v6 + 11);
          uint64_t v9 = *((void *)v6 + 12);
        }
        else
        {
          ++v11;
        }
      }
      while (v11 != (v9 - v10) >> 4);
      uint64_t v6 = *a2;
      if (*((void *)*a2 + 11) != *((void *)*a2 + 12))
      {
        uint64_t v12 = *((void *)this + 9);
        uint64_t v13 = *(void *)(v12 + 16);
        *(void *)&v203[0] = *(void *)(v12 + 8);
        *((void *)&v203[0] + 1) = v13;
        long long v14 = v6;
        if (v13)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
          long long v14 = *a2;
        }
        llvm::orc::SymbolLookupSet::getSymbolNames((llvm::orc::SymbolLookupSet *)&v206, (uint64_t **)v14 + 11);
        llvm::make_error<llvm::orc::SymbolsNotFound,std::shared_ptr<llvm::orc::SymbolStringPool>,std::vector<llvm::orc::SymbolStringPtr>>();
      }
    }
LABEL_114:
    *a2 = 0;
    uint64_t v197 = v6;
    (*(void (**)(llvm::orc::InProgressLookupState *, llvm::orc::InProgressLookupState **))(*(void *)v6 + 16))(v6, &v197);
    unint64_t v112 = v197;
    uint64_t v197 = 0;
    if (v112) {
      (*(void (**)(llvm::orc::InProgressLookupState *))(*(void *)v112 + 8))(v112);
    }
    return;
  }
LABEL_15:
  if (*a3)
  {
    uint64_t v204 = *a3;
    *a3 = 0;
    (*(void (**)(llvm::orc::InProgressLookupState *, uint64_t *))(*(void *)v6 + 24))(v6, &v204);
    uint64_t v84 = v204;
    if (!v204) {
      return;
    }
    goto LABEL_96;
  }
  uint64_t v15 = v8 + 16 * v7;
  uint64_t v16 = *(void *)v15;
  unsigned int v193 = *(_DWORD *)(v15 + 8);
  if (*((unsigned char *)v6 + 80))
  {
    memset(v203, 0, 24);
    long long v18 = *((_OWORD *)v6 + 7);
    uint64_t v17 = (char *)v6 + 112;
    uint64_t v19 = *((void *)v17 + 2);
    *(void *)uint64_t v17 = 0;
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = 0;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vdeallocate((void **)v17);
    *(_OWORD *)uint64_t v17 = v203[0];
    *((void *)v17 + 2) = *(void *)&v203[1];
    memset(v203, 0, 24);
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vdeallocate((void **)v203);
    v203[0] = v18;
    *(void *)&v203[1] = v19;
    int64x2_t v207 = 0uLL;
    v205 = &v206;
    v206 = 0;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v205);
    uint64_t v20 = *a2;
    uint64_t v22 = (uint64_t *)((char *)*a2 + 88);
    uint64_t v21 = *v22;
    uint64_t v201 = *(void *)&v203[0];
    long long v202 = *(_OWORD *)((char *)v203 + 8);
    memset(v203, 0, 24);
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::reserve(v22, ((*((void *)v20 + 12) - v21) >> 4) + (((uint64_t)v202 - v201) >> 4));
    uint64_t v23 = v201;
    uint64_t v24 = v202;
    if (v201 != (void)v202)
    {
      uint64_t v25 = (unint64_t *)((char *)v20 + 104);
      unint64_t v26 = *((void *)v20 + 12);
      do
      {
        if (v26 >= *v25)
        {
          uint64_t v27 = (uint64_t)(v26 - *v22) >> 4;
          if ((unint64_t)(v27 + 1) >> 60) {
            goto LABEL_195;
          }
          uint64_t v28 = *v25 - *v22;
          uint64_t v29 = v28 >> 3;
          if (v28 >> 3 <= (unint64_t)(v27 + 1)) {
            uint64_t v29 = v27 + 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          uint64_t v209 = (uint64_t)v20 + 104;
          uint64_t v31 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)v20 + 104, v30);
          long long v32 = &v31[2 * v27];
          v206 = v31;
          v207.i64[0] = (uint64_t)v32;
          std::string v208 = &v31[2 * v33];
          *long long v32 = 0;
          *long long v32 = *(void **)v23;
          *(void *)uint64_t v23 = 0;
          *((_DWORD *)v32 + 2) = *(_DWORD *)(v23 + 8);
          v207.i64[1] = (uint64_t)(v32 + 2);
          std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__swap_out_circular_buffer(v22, &v206);
          unint64_t v26 = *((void *)v20 + 12);
          std::__split_buffer<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::~__split_buffer((uint64_t)&v206);
        }
        else
        {
          *(void *)unint64_t v26 = 0;
          *(void *)unint64_t v26 = *(void *)v23;
          *(void *)uint64_t v23 = 0;
          *(_DWORD *)(v26 + 8) = *(_DWORD *)(v23 + 8);
          v26 += 16;
        }
        *((void *)v20 + 12) = v26;
        v23 += 16;
      }
      while (v23 != v24);
    }
    v206 = (void **)&v201;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v206);
    std::recursive_mutex::lock((std::recursive_mutex *)this);
    unsigned int v34 = *a2;
    uint64_t v36 = *(void *)(v16 + 184);
    uint64_t v35 = *(void *)(v16 + 192);
    unint64_t v37 = (v35 - v36) >> 4;
    uint64_t v38 = *((void *)*a2 + 18);
    if (v37 <= (*((void *)*a2 + 20) - v38) >> 4) {
      goto LABEL_54;
    }
    if (v35 - v36 < 0) {
LABEL_195:
    }
      abort();
    uint64_t v39 = *((void *)v34 + 19) - v38;
    uint64_t v209 = (uint64_t)*a2 + 160;
    uint64_t v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v37);
    uint64_t v43 = (void *)*((void *)v34 + 18);
    __int32 v42 = (void *)*((void *)v34 + 19);
    if (v42 == v43)
    {
      int64x2_t v46 = vdupq_n_s64((unint64_t)v42);
      uint64_t v44 = &v40[v39];
    }
    else
    {
      uint64_t v44 = &v40[v39];
      do
      {
        long long v45 = *((_OWORD *)v42 - 1);
        v42 -= 2;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        void *v42 = 0;
        v42[1] = 0;
      }
      while (v42 != v43);
      int64x2_t v46 = *((int64x2_t *)v34 + 9);
    }
    *((void *)v34 + 18) = v44;
    *((void *)v34 + 19) = &v40[v39];
    int64x2_t v207 = v46;
    uint64_t v47 = (void **)*((void *)v34 + 20);
    *((void *)v34 + 20) = &v40[16 * v41];
    std::string v208 = v47;
    v206 = (void **)v46.i64[0];
    std::__split_buffer<std::weak_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)&v206);
    uint64_t v36 = *(void *)(v16 + 184);
    uint64_t v35 = *(void *)(v16 + 192);
LABEL_54:
    while (v35 != v36)
    {
      long long v48 = *(_OWORD *)(v35 - 16);
      v35 -= 16;
      long long v49 = v48;
      long long v50 = *a2;
      uint64_t v51 = *((void *)&v48 + 1);
      if (*((void *)&v48 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 16), 1uLL, memory_order_relaxed);
      }
      unint64_t v52 = *((void *)v50 + 20);
      uint64_t v53 = (void *)*((void *)v50 + 19);
      if ((unint64_t)v53 >= v52)
      {
        long long v195 = v49;
        uint64_t v55 = *((void *)v50 + 18);
        uint64_t v56 = ((uint64_t)v53 - v55) >> 4;
        if ((unint64_t)(v56 + 1) >> 60) {
          goto LABEL_195;
        }
        uint64_t v57 = v52 - v55;
        uint64_t v58 = v57 >> 3;
        if (v57 >> 3 <= (unint64_t)(v56 + 1)) {
          uint64_t v58 = v56 + 1;
        }
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v59 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v59 = v58;
        }
        uint64_t v209 = (uint64_t)v50 + 160;
        size_t v60 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v59);
        unint64_t v62 = &v60[16 * v56];
        *(_OWORD *)unint64_t v62 = v195;
        uint64_t v64 = (void *)*((void *)v50 + 18);
        long long v63 = (void *)*((void *)v50 + 19);
        if (v63 == v64)
        {
          int64x2_t v67 = vdupq_n_s64((unint64_t)v63);
          uint64_t v65 = &v60[16 * v56];
        }
        else
        {
          uint64_t v65 = &v60[16 * v56];
          do
          {
            long long v66 = *((_OWORD *)v63 - 1);
            v63 -= 2;
            *((_OWORD *)v65 - 1) = v66;
            v65 -= 16;
            *long long v63 = 0;
            v63[1] = 0;
          }
          while (v63 != v64);
          int64x2_t v67 = *((int64x2_t *)v50 + 9);
        }
        uint64_t v54 = v62 + 16;
        *((void *)v50 + 18) = v65;
        *((void *)v50 + 19) = v62 + 16;
        int64x2_t v207 = v67;
        uint64_t v68 = (void **)*((void *)v50 + 20);
        *((void *)v50 + 20) = &v60[16 * v61];
        std::string v208 = v68;
        v206 = (void **)v67.i64[0];
        std::__split_buffer<std::weak_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)&v206);
      }
      else
      {
        *uint64_t v53 = v49;
        v53[1] = v51;
        uint64_t v54 = v53 + 2;
      }
      *((void *)v50 + 19) = v54;
    }
    std::recursive_mutex::unlock((std::recursive_mutex *)this);
    *((unsigned char *)*a2 + 80) = 0;
    v206 = (void **)v203;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v206);
  }
  std::recursive_mutex::lock((std::recursive_mutex *)this);
  if (*(void *)(v16 + 184) == *(void *)(v16 + 192)) {
    int64_t v69 = 0;
  }
  else {
    int64_t v69 = (uint64_t *)((char *)*a2 + 112);
  }
  llvm::orc::ExecutionSession::IL_updateCandidatesFor(&v206, (uint64_t)this, v16, v193, (uint64_t *)*a2 + 11, v69);
  *a3 = (uint64_t)v206;
  uint64_t v70 = *a2;
  if (*((_DWORD *)*a2 + 34) == 1 && *((void *)v70 + 11) == *((void *)v70 + 12)) {
    llvm::orc::ExecutionSession::OL_resumeLookupAfterGeneration(this, v70);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)this);
  uint64_t v6 = *a2;
  if (*a3)
  {
    uint64_t v200 = *a3;
    *a3 = 0;
    (*(void (**)(llvm::orc::InProgressLookupState *, uint64_t *))(*(void *)v6 + 24))(v6, &v200);
    uint64_t v84 = v200;
    if (!v200) {
      return;
    }
LABEL_96:
    (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
    return;
  }
  while (1)
  {
    uint64_t v71 = *((void *)v6 + 19);
    if (*((void *)v6 + 18) == v71 || *((void *)v6 + 11) == *((void *)v6 + 12))
    {
      uint64_t v10 = *((void *)v6 + 11);
      uint64_t v9 = *((void *)v6 + 12);
      if (v10 == v9 && *((void *)v6 + 14) == *((void *)v6 + 15))
      {
        *((void *)v6 + 9) = (uint64_t)(*((void *)v6 + 3) - *((void *)v6 + 2)) >> 4;
        goto LABEL_114;
      }
      uint64_t v7 = *((void *)v6 + 9) + 1;
      *((void *)v6 + 9) = v7;
      *((unsigned char *)v6 + 80) = 1;
      uint64_t v8 = *((void *)v6 + 2);
      if (v7 == (*((void *)v6 + 3) - v8) >> 4) {
        goto LABEL_5;
      }
      goto LABEL_15;
    }
    size_t v72 = *(std::__shared_weak_count **)(v71 - 8);
    if (!v72 || (int v73 = std::__shared_weak_count::lock(v72)) == 0 || (v74 = *(void *)(v71 - 16), v75 = *a2, !v74))
    {
      getErrorErrorCat();
      operator new();
    }
    if (!*((_DWORD *)v75 + 34))
    {
      std::mutex::lock((std::mutex *)(v74 + 8));
      if (!*(unsigned char *)(v74 + 72))
      {
        *(unsigned char *)(v74 + 72) = 1;
        std::mutex::unlock((std::mutex *)(v74 + 8));
        char v75 = *a2;
        goto LABEL_71;
      }
      int v85 = *a2;
      *a2 = 0;
      uint64_t v86 = *(char **)(v74 + 96);
      int v87 = *(char **)(v74 + 88);
      uint64_t v88 = v86 - v87;
      if (v86 == v87) {
        uint64_t v89 = 0;
      }
      else {
        uint64_t v89 = ((v86 - v87) << 6) - 1;
      }
      unint64_t v91 = *(void *)(v74 + 112);
      uint64_t v90 = *(void *)(v74 + 120);
      unint64_t v92 = v90 + v91;
      if (v89 != v90 + v91)
      {
LABEL_167:
        *(void *)(*(void *)&v87[(v92 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v92 & 0x1FF)) = v85;
        *(void *)(v74 + 120) = v90 + 1;
        std::mutex::unlock((std::mutex *)(v74 + 8));
        goto LABEL_168;
      }
      if (v91 >= 0x200)
      {
        *(void *)(v74 + 112) = v91 - 512;
        uint64_t v95 = *(void *)v87;
        uint64_t v93 = v87 + 8;
        uint64_t v94 = v95;
        *(void *)(v74 + 88) = v93;
        if (v86 == *(char **)(v74 + 104))
        {
          unint64_t v96 = *(void *)(v74 + 80);
          uint64_t v97 = (uint64_t)&v93[-v96];
          if ((unint64_t)v93 <= v96)
          {
            uint64_t v123 = (uint64_t)&v86[-v96];
            BOOL v122 = v123 == 0;
            uint64_t v124 = v123 >> 2;
            if (v122) {
              unint64_t v125 = 1;
            }
            else {
              unint64_t v125 = v124;
            }
            long long v126 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v125);
            uint64_t v128 = &v126[8 * (v125 >> 2)];
            uint64_t v129 = *(uint64_t **)(v74 + 88);
            uint64_t v86 = v128;
            uint64_t v130 = *(void *)(v74 + 96) - (void)v129;
            if (v130)
            {
              uint64_t v86 = &v128[v130 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v131 = 8 * (v130 >> 3);
              v132 = &v126[8 * (v125 >> 2)];
              do
              {
                uint64_t v133 = *v129++;
                *(void *)v132 = v133;
                v132 += 8;
                v131 -= 8;
              }
              while (v131);
            }
            size_t v134 = *(void **)(v74 + 80);
            *(void *)(v74 + 80) = v126;
            *(void *)(v74 + 88) = v128;
            *(void *)(v74 + 96) = v86;
            *(void *)(v74 + 104) = &v126[8 * v127];
            if (v134)
            {
              operator delete(v134);
              uint64_t v86 = *(char **)(v74 + 96);
            }
          }
          else
          {
            uint64_t v98 = v97 >> 3;
            BOOL v99 = v97 >> 3 < -1;
            uint64_t v100 = (v97 >> 3) + 2;
            if (v99) {
              uint64_t v101 = v100;
            }
            else {
              uint64_t v101 = v98 + 1;
            }
            uint64_t v102 = -(v101 >> 1);
            uint64_t v103 = v101 >> 1;
            uint64_t v104 = &v93[-8 * v103];
            int64_t v105 = v86 - v93;
            if (v86 != v93)
            {
              memmove(&v93[-8 * v103], v93, v86 - v93);
              uint64_t v86 = *(char **)(v74 + 88);
            }
            uint64_t v106 = &v86[8 * v102];
            uint64_t v86 = &v104[v105];
            *(void *)(v74 + 88) = v106;
            *(void *)(v74 + 96) = &v104[v105];
          }
        }
        *(void *)uint64_t v86 = v94;
        goto LABEL_134;
      }
      uint64_t v196 = v85;
      uint64_t v107 = v88 >> 3;
      unint64_t v108 = *(char **)(v74 + 104);
      unint64_t v109 = *(char **)(v74 + 80);
      if (v88 >> 3 < (unint64_t)((v108 - v109) >> 3))
      {
        uint64_t v110 = operator new(0x1000uLL);
        uint64_t v111 = v110;
        if (v108 != v86)
        {
          *(void *)uint64_t v86 = v110;
          *(void *)(v74 + 96) += 8;
          int v85 = v196;
LABEL_166:
          int v87 = *(char **)(v74 + 88);
          uint64_t v90 = *(void *)(v74 + 120);
          unint64_t v92 = *(void *)(v74 + 112) + v90;
          goto LABEL_167;
        }
        if (v87 == v109)
        {
          if (v86 == v87) {
            unint64_t v158 = 1;
          }
          else {
            unint64_t v158 = (v108 - v87) >> 2;
          }
          uint64_t v159 = 2 * v158;
          v160 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v158);
          int v87 = &v160[(v159 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v162 = *(uint64_t **)(v74 + 88);
          v163 = v87;
          uint64_t v164 = *(void *)(v74 + 96) - (void)v162;
          int v85 = v196;
          if (v164)
          {
            v163 = &v87[v164 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v165 = 8 * (v164 >> 3);
            v166 = v87;
            do
            {
              uint64_t v167 = *v162++;
              *(void *)v166 = v167;
              v166 += 8;
              v165 -= 8;
            }
            while (v165);
          }
          uint64_t v168 = *(void **)(v74 + 80);
          *(void *)(v74 + 80) = v160;
          *(void *)(v74 + 88) = v87;
          *(void *)(v74 + 96) = v163;
          *(void *)(v74 + 104) = &v160[8 * v161];
          if (v168)
          {
            operator delete(v168);
            int v87 = *(char **)(v74 + 88);
          }
        }
        else
        {
          int v85 = v196;
        }
        *((void *)v87 - 1) = v111;
        v169 = *(char **)(v74 + 88);
        v170 = *(char **)(v74 + 96);
        *(void *)(v74 + 88) = v169 - 8;
        uint64_t v171 = *((void *)v169 - 1);
        *(void *)(v74 + 88) = v169;
        if (v170 == *(char **)(v74 + 104))
        {
          unint64_t v172 = *(void *)(v74 + 80);
          uint64_t v173 = (uint64_t)&v169[-v172];
          if ((unint64_t)v169 <= v172)
          {
            uint64_t v181 = (uint64_t)&v170[-v172];
            BOOL v122 = v181 == 0;
            uint64_t v182 = v181 >> 2;
            if (v122) {
              unint64_t v183 = 1;
            }
            else {
              unint64_t v183 = v182;
            }
            uint64_t v184 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v183);
            int v186 = &v184[8 * (v183 >> 2)];
            v187 = *(uint64_t **)(v74 + 88);
            v170 = v186;
            uint64_t v188 = *(void *)(v74 + 96) - (void)v187;
            if (v188)
            {
              v170 = &v186[v188 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v189 = 8 * (v188 >> 3);
              uint64_t v190 = &v184[8 * (v183 >> 2)];
              do
              {
                uint64_t v191 = *v187++;
                *(void *)uint64_t v190 = v191;
                v190 += 8;
                v189 -= 8;
              }
              while (v189);
            }
            int v192 = *(void **)(v74 + 80);
            *(void *)(v74 + 80) = v184;
            *(void *)(v74 + 88) = v186;
            *(void *)(v74 + 96) = v170;
            *(void *)(v74 + 104) = &v184[8 * v185];
            if (v192)
            {
              operator delete(v192);
              v170 = *(char **)(v74 + 96);
            }
          }
          else
          {
            uint64_t v174 = v173 >> 3;
            BOOL v99 = v173 >> 3 < -1;
            uint64_t v175 = (v173 >> 3) + 2;
            if (v99) {
              uint64_t v176 = v175;
            }
            else {
              uint64_t v176 = v174 + 1;
            }
            uint64_t v177 = -(v176 >> 1);
            uint64_t v178 = v176 >> 1;
            v179 = &v169[-8 * v178];
            int64_t v180 = v170 - v169;
            if (v170 != v169)
            {
              memmove(&v169[-8 * v178], v169, v170 - v169);
              v169 = *(char **)(v74 + 88);
            }
            v170 = &v179[v180];
            *(void *)(v74 + 88) = &v169[8 * v177];
            *(void *)(v74 + 96) = &v179[v180];
          }
        }
        *(void *)v170 = v171;
LABEL_134:
        *(void *)(v74 + 96) += 8;
        goto LABEL_166;
      }
      if (v108 == v109) {
        unint64_t v113 = 1;
      }
      else {
        unint64_t v113 = (v108 - v109) >> 2;
      }
      BOOL v114 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v113);
      uint64_t v194 = v115;
      uint64_t v116 = &v114[8 * v107];
      unint64_t v117 = &v114[8 * v115];
      uint64_t v118 = operator new(0x1000uLL);
      if (v107 == v194)
      {
        uint64_t v119 = 8 * v107;
        if (v88 < 1)
        {
          char v135 = v118;
          uint64_t v136 = v119 >> 2;
          if (v86 == v87) {
            unint64_t v137 = 1;
          }
          else {
            unint64_t v137 = v136;
          }
          v138 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v137);
          uint64_t v116 = &v138[8 * (v137 >> 2)];
          unint64_t v117 = &v138[8 * v139];
          if (v114) {
            operator delete(v114);
          }
          BOOL v114 = v138;
          uint64_t v118 = v135;
        }
        else
        {
          uint64_t v120 = v119 >> 3;
          if (v120 >= -1) {
            unint64_t v121 = v120 + 1;
          }
          else {
            unint64_t v121 = v120 + 2;
          }
          v116 -= 8 * (v121 >> 1);
        }
      }
      *(void *)uint64_t v116 = v118;
      char v140 = v116 + 8;
      uint64_t v141 = *(void *)(v74 + 96);
      if (v141 == *(void *)(v74 + 88))
      {
        long long v156 = v116;
        char v142 = v116 + 8;
LABEL_164:
        unint64_t v157 = *(void **)(v74 + 80);
        *(void *)(v74 + 80) = v114;
        *(void *)(v74 + 88) = v156;
        *(void *)(v74 + 96) = v142;
        *(void *)(v74 + 104) = v117;
        int v85 = v196;
        if (v157) {
          operator delete(v157);
        }
        goto LABEL_166;
      }
      while (1)
      {
        if (v116 == v114)
        {
          if (v140 < v117)
          {
            uint64_t v144 = (v117 - v140) >> 3;
            if (v144 >= -1) {
              unint64_t v145 = v144 + 1;
            }
            else {
              unint64_t v145 = v144 + 2;
            }
            char v142 = &v140[8 * (v145 >> 1)];
            v143 = &v116[8 * (v145 >> 1)];
            if (v140 == v116) {
              uint64_t v116 = v140;
            }
            else {
              memmove(&v116[8 * (v145 >> 1)], v116, v140 - v116);
            }
            goto LABEL_160;
          }
          if (v117 == v116) {
            unint64_t v146 = 1;
          }
          else {
            unint64_t v146 = (v117 - v116) >> 2;
          }
          uint64_t v147 = 2 * v146;
          uint64_t v148 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v146);
          BOOL v114 = v148;
          v143 = &v148[(v147 + 6) & 0xFFFFFFFFFFFFFFF8];
          char v142 = v143;
          uint64_t v150 = v140 - v116;
          if (v140 != v116)
          {
            char v142 = &v143[v150 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v151 = 8 * (v150 >> 3);
            uint64_t v152 = v143;
            long long v153 = v116;
            do
            {
              uint64_t v154 = *(void *)v153;
              v153 += 8;
              *(void *)uint64_t v152 = v154;
              v152 += 8;
              v151 -= 8;
            }
            while (v151);
          }
          unint64_t v117 = &v148[8 * v149];
          operator delete(v116);
        }
        else
        {
          char v142 = v140;
          v143 = v116;
        }
        uint64_t v116 = v114;
LABEL_160:
        BOOL v114 = v116;
        uint64_t v155 = *(void *)(v141 - 8);
        v141 -= 8;
        *((void *)v143 - 1) = v155;
        long long v156 = v143 - 8;
        char v140 = v142;
        uint64_t v116 = v156;
        if (v141 == *(void *)(v74 + 88)) {
          goto LABEL_164;
        }
      }
    }
LABEL_71:
    *((_DWORD *)v75 + 34) = 2;
    uint64_t v76 = *((unsigned int *)v75 + 2);
    *a2 = 0;
    v206 = (void **)v75;
    (*(void (**)(_OWORD *__return_ptr, uint64_t, void ***, uint64_t, uint64_t, void, uint64_t))(*(void *)v74 + 16))(v203, v74, &v206, v76, v16, v193, (uint64_t)v75 + 88);
    *a3 = *(void *)&v203[0];
    long long v77 = (llvm::orc::InProgressLookupState *)v206;
    v206 = 0;
    unint64_t v78 = *a2;
    *a2 = v77;
    if (v78)
    {
      (*(void (**)(llvm::orc::InProgressLookupState *))(*(void *)v78 + 8))(v78);
      int v79 = v206;
      v206 = 0;
      if (v79) {
        (*((void (**)(void **))*v79 + 1))(v79);
      }
      long long v77 = *a2;
    }
    if (v77) {
      llvm::orc::ExecutionSession::OL_resumeLookupAfterGeneration(this, v77);
    }
    int64x2_t v80 = *a2;
    if (*a3)
    {
      uint64_t v199 = *a3;
      *a3 = 0;
      (*(void (**)(llvm::orc::InProgressLookupState *, uint64_t *))(*(void *)v80 + 24))(v80, &v199);
      uint64_t v82 = v199;
      if (v199) {
        goto LABEL_92;
      }
      goto LABEL_168;
    }
    if (!v80) {
      goto LABEL_168;
    }
    std::recursive_mutex::lock((std::recursive_mutex *)this);
    int v81 = *(void *)(v16 + 184) == *(void *)(v16 + 192) ? 0 : (uint64_t *)((char *)*a2 + 112);
    llvm::orc::ExecutionSession::IL_updateCandidatesFor(&v206, (uint64_t)this, v16, v193, (uint64_t *)*a2 + 11, v81);
    *a3 = (uint64_t)v206;
    std::recursive_mutex::unlock((std::recursive_mutex *)this);
    if (*a3) {
      break;
    }
    std::__shared_weak_count::__release_shared[abi:nn180100](v73);
    uint64_t v6 = *a2;
  }
  unsigned int v83 = *a2;
  uint64_t v198 = *a3;
  *a3 = 0;
  (*(void (**)(llvm::orc::InProgressLookupState *, uint64_t *))(*(void *)v83 + 24))(v83, &v198);
  uint64_t v82 = v198;
  if (v198) {
LABEL_92:
  }
    (*(void (**)(uint64_t))(*(void *)v82 + 8))(v82);
LABEL_168:
  std::__shared_weak_count::__release_shared[abi:nn180100](v73);
}

void llvm::orc::DefinitionGenerator::~DefinitionGenerator(llvm::orc::DefinitionGenerator *this)
{
  *(void *)this = &unk_270DBDA28;
  int v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  uint64_t v3 = *((void *)this + 10);
  uint64_t v4 = *((void *)this + 11);
  uint64_t v5 = (char *)this + 80;
  v9[0] = v3;
  v9[1] = v4;
  long long v8 = *((_OWORD *)v5 + 1);
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  long long v10 = v8;
  unint64_t v6 = *((void *)v5 + 4);
  uint64_t v7 = *((void *)v5 + 5);
  *((_OWORD *)v5 + 2) = 0u;
  unint64_t v11 = v6;
  uint64_t v12 = v7;
  *(v5 - 8) = 0;
  std::mutex::unlock(v2);
  if ((void)v8 != v4
    && *(void *)(v4 + 8 * (v6 >> 9)) + 8 * (v6 & 0x1FF) != *(void *)(v4 + (((v7 + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                           + 8 * ((v7 + v6) & 0x1FF))
  {
    getErrorErrorCat();
    operator new();
  }
  std::deque<llvm::orc::LookupState>::~deque[abi:nn180100]((uint64_t)v9);
  std::deque<llvm::orc::LookupState>::~deque[abi:nn180100]((uint64_t)v5);
  std::mutex::~mutex(v2);
}

void llvm::orc::JITDylib::~JITDylib(llvm::orc::JITDylib *this)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::destroyAll((uint64_t)this + 264);
  MEMORY[0x263E500A0](*((void *)this + 33), 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>,llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::destroyAll((unsigned int *)this + 60);
  MEMORY[0x263E500A0](*((void *)this + 30), 8);
  int v2 = (atomic_uint *)*((void *)this + 29);
  if (v2) {
    llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 26);
  if (v3)
  {
    *((void *)this + 27) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)((char *)this + 184);
  std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100](&v4);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::destroyAll((unsigned int *)this + 40);
  MEMORY[0x263E500A0](*((void *)this + 20), 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::destroyAll((uint64_t)this + 136);
  MEMORY[0x263E500A0](*((void *)this + 17), 8);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t *)this + 14);
  std::mutex::~mutex((std::mutex *)((char *)this + 48));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void llvm::orc::JITDylib::clear(llvm::orc::JITDylib *this@<X0>, void *a2@<X8>)
{
  __p[0] = 0;
  __p[1] = 0;
  v48[0] = 0;
  uint64_t v4 = (std::recursive_mutex *)*((void *)this + 4);
  std::recursive_mutex::lock(v4);
  if (*((_DWORD *)this + 62))
  {
    uint64_t v5 = *((unsigned int *)this + 64);
    if (v5)
    {
      uint64_t v6 = 32 * v5;
      uint64_t v7 = (void *)*((void *)this + 30);
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 4;
        v6 -= 32;
        if (!v6) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      uint64_t v7 = (void *)*((void *)this + 30);
    }
    uint64_t v8 = *((void *)this + 30) + 32 * v5;
    if (v7 != (void *)v8)
    {
      uint64_t v9 = 0;
      long long v10 = (atomic_uint *)*v7;
      do
      {
        if (v10)
        {
          atomic_fetch_add_explicit(v10, 1u, memory_order_relaxed);
          uint64_t v9 = (atomic_uint **)__p[1];
        }
        if ((unint64_t)v9 >= v48[0])
        {
          unint64_t v11 = (atomic_uint **)__p[0];
          uint64_t v12 = ((char *)v9 - (char *)__p[0]) >> 3;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61) {
            goto LABEL_65;
          }
          int64_t v14 = v48[0] - (unint64_t)__p[0];
          if ((uint64_t)(v48[0] - (unint64_t)__p[0]) >> 2 > v13) {
            unint64_t v13 = v14 >> 2;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          unint64_t v52 = v48;
          if (v15)
          {
            unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v15);
            unint64_t v11 = (atomic_uint **)__p[0];
            uint64_t v9 = (atomic_uint **)__p[1];
          }
          else
          {
            uint64_t v16 = 0;
          }
          uint64_t v17 = (atomic_uint **)(v15 + 8 * v12);
          unint64_t v18 = v15 + 8 * v16;
          unint64_t v51 = v18;
          *uint64_t v17 = v10;
          *((void *)&v50 + 1) = v17 + 1;
          if (v9 == v11)
          {
            uint64_t v9 = v17 + 1;
          }
          else
          {
            do
            {
              uint64_t v19 = *--v9;
              *--uint64_t v17 = v19;
              *uint64_t v9 = 0;
            }
            while (v9 != v11);
            uint64_t v9 = (atomic_uint **)*((void *)&v50 + 1);
            unint64_t v18 = v51;
          }
          long long v20 = *(_OWORD *)__p;
          __p[0] = v17;
          __p[1] = v9;
          long long v50 = v20;
          unint64_t v21 = v48[0];
          v48[0] = v18;
          unint64_t v51 = v21;
          long long v49 = (void **)v20;
          std::__split_buffer<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>::~__split_buffer((uint64_t)&v49);
        }
        else
        {
          *v9++ = v10;
        }
        __p[1] = v9;
        do
        {
          v7 += 4;
          if (v7 == (void *)v8) {
            goto LABEL_32;
          }
          long long v10 = (atomic_uint *)*v7;
        }
        while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000);
      }
      while (v7 != (void *)v8);
    }
  }
LABEL_32:
  llvm::orc::JITDylib::getDefaultResourceTracker(this, &v53);
  uint64_t v22 = __p[1];
  if (__p[1] >= (void *)v48[0])
  {
    uint64_t v23 = __p[0];
    int64_t v24 = ((char *)__p[1] - (char *)__p[0]) >> 3;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61) {
LABEL_65:
    }
      abort();
    int64_t v26 = v48[0] - (unint64_t)__p[0];
    if ((uint64_t)(v48[0] - (unint64_t)__p[0]) >> 2 > v25) {
      unint64_t v25 = v26 >> 2;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    unint64_t v52 = v48;
    if (v27)
    {
      unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v27);
      uint64_t v23 = __p[0];
      uint64_t v22 = __p[1];
    }
    else
    {
      uint64_t v28 = 0;
    }
    uint64_t v29 = (atomic_uint **)(v27 + 8 * v24);
    unint64_t v30 = v27 + 8 * v28;
    unint64_t v51 = v30;
    *uint64_t v29 = v53;
    uint64_t v31 = v29 + 1;
    uint64_t v53 = 0;
    *((void *)&v50 + 1) = v29 + 1;
    if (v22 == v23)
    {
      uint64_t v33 = 0;
    }
    else
    {
      do
      {
        long long v32 = (atomic_uint *)*--v22;
        *--uint64_t v29 = v32;
        *uint64_t v22 = 0;
      }
      while (v22 != v23);
      uint64_t v31 = (void *)*((void *)&v50 + 1);
      unint64_t v30 = v51;
      uint64_t v33 = v53;
    }
    long long v34 = *(_OWORD *)__p;
    __p[0] = v29;
    long long v50 = v34;
    unint64_t v35 = v48[0];
    v48[0] = v30;
    unint64_t v51 = v35;
    long long v49 = (void **)v34;
    std::__split_buffer<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>::~__split_buffer((uint64_t)&v49);
    __p[1] = v31;
    if (v33) {
      llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v33);
    }
  }
  else
  {
    *(void *)__p[1] = v53;
    __p[1] = v22 + 1;
  }
  std::recursive_mutex::unlock(v4);
  *a2 = 0;
  uint64_t v36 = (uint64_t *)__p[0];
  unint64_t v37 = (uint64_t *)__p[1];
  if (__p[0] != __p[1])
  {
    uint64_t v38 = 0;
    do
    {
      *a2 = 0;
      uint64_t v39 = *v36;
      unint64_t v40 = atomic_load((unint64_t *)(*v36 + 8));
      llvm::orc::ExecutionSession::removeResourceTracker((void ***)&v45, *(std::recursive_mutex **)((v40 & 0xFFFFFFFFFFFFFFFELL) + 32), v39);
      long long v49 = v38;
      uint64_t v53 = v45;
      long long v45 = 0;
      llvm::ErrorList::join(&v49, (void ***)&v53, &v46);
      if (v53) {
        (*(void (**)(atomic_uint *))(*(void *)v53 + 8))(v53);
      }
      if (v49) {
        (*((void (**)(void **))*v49 + 1))(v49);
      }
      uint64_t v38 = v46;
      *a2 = v46;
      ++v36;
    }
    while (v36 != v37);
    uint64_t v36 = (uint64_t *)__p[0];
  }
  if (v36)
  {
    uint64_t v41 = (uint64_t *)__p[1];
    __int32 v42 = v36;
    if (__p[1] != v36)
    {
      do
      {
        uint64_t v44 = (atomic_uint *)*--v41;
        uint64_t v43 = v44;
        if (v44) {
          llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v43);
        }
      }
      while (v41 != v36);
      __int32 v42 = (uint64_t *)__p[0];
    }
    __p[1] = v36;
    operator delete(v42);
  }
}

void llvm::orc::JITDylib::getDefaultResourceTracker(llvm::orc::JITDylib *this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v4 = (std::recursive_mutex *)*((void *)this + 4);
  std::recursive_mutex::lock(v4);
  uint64_t v5 = (atomic_uint *)*((void *)this + 29);
  if (!v5) {
    operator new();
  }
  *a2 = v5;
  atomic_fetch_add_explicit(v5, 1u, memory_order_relaxed);
  std::recursive_mutex::unlock(v4);
}

void llvm::orc::JITDylib::defineMaterializing(uint64_t a1@<X0>, uint64_t a2@<X1>, int32x2_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(std::recursive_mutex **)(a1 + 32);
  std::recursive_mutex::lock(v8);
  char v9 = atomic_load((unint64_t *)(*(void *)(a2 + 8) + 8));
  if (v9) {
    operator new();
  }
  if (!a3[1].i32[0]) {
    goto LABEL_78;
  }
  uint64_t v10 = a3[2].u32[0];
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    uint64_t v12 = (size_t **)*a3;
    while (((unint64_t)*v12 | 8) == 0xFFFFFFFFFFFFFFF8)
    {
      v12 += 2;
      v11 -= 16;
      if (!v11) {
        goto LABEL_78;
      }
    }
  }
  else
  {
    uint64_t v12 = (size_t **)*a3;
  }
  uint64_t v13 = *(void *)a3 + 16 * v10;
  if (v12 == (size_t **)v13)
  {
LABEL_78:
    int64_t v14 = 0;
    __pa = 0;
    goto LABEL_79;
  }
  unint64_t v75 = 0;
  unint64_t v76 = 0;
  int64_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  do
  {
    std::string __p = v17;
    uint64_t __dst = 0;
    int v18 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(a1 + 112), *(_DWORD *)(a1 + 128), (uint64_t)*v12, &__dst);
    uint64_t v19 = *(void *)(a1 + 112);
    unsigned int v20 = *(_DWORD *)(a1 + 128);
    if (v18) {
      BOOL v21 = __dst == v19 + 24 * v20;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21)
    {
      __int16 v22 = *((_WORD *)v12 + 4);
      uint64_t v23 = (uint64_t)*v12;
      uint64_t __dst = v23;
      if ((unint64_t)(v23 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        atomic_fetch_add((atomic_ullong *volatile)(v23 + 8), 1uLL);
        uint64_t v19 = *(void *)(a1 + 112);
        unsigned int v20 = *(_DWORD *)(a1 + 128);
        uint64_t v23 = __dst;
      }
      *(void *)&long long v82 = 0;
      WORD4(v82) = v22;
      BYTE10(v82) = 1;
      *(_DWORD *)((char *)&v82 + 11) = v79;
      HIBYTE(v82) = v80;
      unsigned int v83 = 0;
      char v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v19, v20, v23, &v83);
      unint64_t v25 = v83;
      if ((v24 & 1) == 0)
      {
        int64_t v26 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1 + 112, &__dst, v83);
        unint64_t v25 = v26;
        if ((unint64_t)(*v26 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          atomic_fetch_add((atomic_ullong *volatile)(*v26 + 8), 0xFFFFFFFFFFFFFFFFLL);
          uint64_t v23 = __dst;
        }
        *int64_t v26 = v23;
        uint64_t __dst = 0;
        *(_OWORD *)(v26 + 1) = v82;
        uint64_t v23 = 0;
      }
      uint64_t v17 = __p;
      if ((unint64_t)(v23 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v23 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      uint64_t v27 = (uint64_t)*v12;
      if ((unint64_t)v16 >= v76)
      {
        int v73 = v8;
        uint64_t v30 = v16 - __p;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 61) {
          goto LABEL_107;
        }
        size_t v72 = v25;
        if ((uint64_t)(v76 - (void)__p) >> 2 > v31) {
          unint64_t v31 = (uint64_t)(v76 - (void)__p) >> 2;
        }
        if (v76 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v31;
        }
        if (v32)
        {
          uint64_t v33 = (uint64_t)*v12;
          unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v32);
          uint64_t v27 = v33;
          uint64_t v17 = __p;
        }
        else
        {
          uint64_t v34 = 0;
        }
        unint64_t v40 = (uint64_t *)(v32 + 8 * v30);
        uint64_t *v40 = v27;
        uint64_t v28 = v40 + 1;
        if (v16 == v17)
        {
          uint64_t v17 = (uint64_t *)(v32 + 8 * v30);
          uint64_t v8 = v73;
        }
        else
        {
          uint64_t v8 = v73;
          do
          {
            uint64_t v41 = *--v16;
            *--unint64_t v40 = v41;
          }
          while (v16 != v17);
          uint64_t v16 = v17;
          uint64_t v17 = v40;
        }
        unint64_t v76 = v32 + 8 * v34;
        if (v16)
        {
          __int32 v42 = v16;
          uint64_t v43 = v17;
          operator delete(v42);
          uint64_t v17 = v43;
        }
        unint64_t v25 = v72;
      }
      else
      {
        *uint64_t v16 = v27;
        uint64_t v28 = v16 + 1;
      }
      *((unsigned char *)v25 + 18) = *((unsigned char *)v25 + 18) & 0x80 | 2;
      uint64_t v16 = v28;
      goto LABEL_63;
    }
    if ((*((unsigned char *)v12 + 9) & 2) == 0)
    {
      if (__p != v16)
      {
        uint64_t v56 = __p;
        do
        {
          uint64_t v57 = *(void *)(a1 + 112);
          unsigned int v58 = *(_DWORD *)(a1 + 128);
          if (v58)
          {
            uint64_t v59 = *v56;
            unsigned int v60 = v58 - 1;
            unsigned int v61 = ((*v56 >> 4) ^ (*v56 >> 9)) & (v58 - 1);
            unint64_t v62 = (uint64_t *)(v57 + 24 * v61);
            uint64_t v63 = *v62;
            if (*v62 != *v56)
            {
              uint64_t v64 = v8;
              int v65 = 1;
              do
              {
                uint64_t v8 = v64;
                if (v63 == -8) {
                  goto LABEL_94;
                }
                unsigned int v66 = v61 + v65++;
                unsigned int v61 = v66 & v60;
                unint64_t v62 = (uint64_t *)(v57 + 24 * (v66 & v60));
                uint64_t v63 = *v62;
              }
              while (*v62 != v59);
              uint64_t v8 = v64;
            }
          }
          else
          {
LABEL_94:
            unint64_t v62 = (uint64_t *)(v57 + 24 * v58);
            uint64_t v59 = *v62;
          }
          if ((unint64_t)(v59 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(v59 + 8), 0xFFFFFFFFFFFFFFFFLL);
          }
          uint64_t *v62 = -16;
          *(int32x2_t *)(a1 + 120) = vadd_s32(*(int32x2_t *)(a1 + 120), (int32x2_t)0x1FFFFFFFFLL);
          ++v56;
        }
        while (v56 != v16);
      }
      uint64_t v68 = *v12 + 2;
      size_t v67 = **v12;
      if (v67 < 0x7FFFFFFFFFFFFFF8)
      {
        if (v67 >= 0x17)
        {
          uint64_t v70 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v67 | 7) != 0x17) {
            uint64_t v70 = v67 | 7;
          }
          uint64_t v71 = v70 + 1;
          p_dst = (uint64_t *)operator new(v70 + 1);
          *(void *)&long long v82 = v67;
          *((void *)&v82 + 1) = v71 | 0x8000000000000000;
          uint64_t __dst = (uint64_t)p_dst;
        }
        else
        {
          HIBYTE(v82) = **v12;
          p_dst = &__dst;
          if (!v67)
          {
LABEL_106:
            *((unsigned char *)p_dst + v67) = 0;
            llvm::make_error<llvm::orc::DuplicateDefinition,std::string>();
          }
        }
        memmove(p_dst, v68, v67);
        goto LABEL_106;
      }
LABEL_107:
      abort();
    }
    uint64_t v29 = (uint64_t)*v12;
    uint64_t v17 = __p;
    if ((unint64_t)v15 < v75)
    {
      *v15++ = v29;
      goto LABEL_63;
    }
    uint64_t v74 = v8;
    uint64_t v35 = v15 - v14;
    unint64_t v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 61) {
      goto LABEL_107;
    }
    if ((uint64_t)(v75 - (void)v14) >> 2 > v36) {
      unint64_t v36 = (uint64_t)(v75 - (void)v14) >> 2;
    }
    if (v75 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v36;
    }
    if (v37)
    {
      uint64_t v38 = (uint64_t)*v12;
      unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v37);
      uint64_t v29 = v38;
    }
    else
    {
      uint64_t v39 = 0;
    }
    uint64_t v44 = (uint64_t *)(v37 + 8 * v35);
    *uint64_t v44 = v29;
    long long v45 = v44 + 1;
    while (v15 != v14)
    {
      uint64_t v46 = *--v15;
      *--uint64_t v44 = v46;
    }
    unint64_t v75 = v37 + 8 * v39;
    if (v14) {
      operator delete(v14);
    }
    int64_t v14 = v44;
    unint64_t v15 = v45;
    uint64_t v8 = v74;
    uint64_t v17 = __p;
    do
    {
LABEL_63:
      v12 += 2;
      if (v12 == (size_t **)v13) {
        goto LABEL_66;
      }
    }
    while (((unint64_t)*v12 | 8) == 0xFFFFFFFFFFFFFFF8);
  }
  while (v12 != (size_t **)v13);
LABEL_66:
  if (v14 != v15)
  {
    while (1)
    {
      uint64_t v48 = *--v15;
      uint64_t v47 = v48;
      int32x2_t v49 = *a3;
      uint64_t v50 = a3[2].u32[0];
      if (!v50) {
        goto LABEL_73;
      }
      LODWORD(v51) = ((v47 >> 4) ^ (v47 >> 9)) & (v50 - 1);
      unint64_t v52 = (uint64_t *)(*(void *)&v49 + 16 * v51);
      uint64_t v53 = *v52;
      if (*v52 != v47) {
        break;
      }
LABEL_74:
      if ((unint64_t)(v47 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
        atomic_fetch_add((atomic_ullong *volatile)(v47 + 8), 0xFFFFFFFFFFFFFFFFLL);
      }
      *unint64_t v52 = -16;
      a3[1] = vadd_s32(a3[1], (int32x2_t)0x1FFFFFFFFLL);
      if (v14 == v15) {
        goto LABEL_77;
      }
    }
    int v54 = 1;
    while (v53 != -8)
    {
      int v55 = v51 + v54++;
      uint64_t v51 = v55 & (v50 - 1);
      uint64_t v53 = *(void *)(*(void *)&v49 + 16 * v51);
      if (v53 == v47)
      {
        unint64_t v52 = (uint64_t *)(*(void *)&v49 + 16 * v51);
        goto LABEL_74;
      }
    }
LABEL_73:
    unint64_t v52 = (uint64_t *)(*(void *)&v49 + 16 * v50);
    uint64_t v47 = *v52;
    goto LABEL_74;
  }
LABEL_77:
  __pa = v17;
LABEL_79:
  *(unsigned char *)(a4 + 24) &= ~1u;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::copyFrom(a4, (uint64_t)a3);
  if (v14) {
    operator delete(v14);
  }
  if (__pa) {
    operator delete(__pa);
  }
  std::recursive_mutex::unlock(v8);
}

void llvm::orc::JITDylib::replace(uint64_t a1@<X0>, uint64_t a2@<X1>, std::__shared_weak_count_vtbl **a3@<X2>, void *a4@<X8>)
{
  v33[0] = 0;
  uint64_t v8 = *(std::recursive_mutex **)(a1 + 32);
  std::recursive_mutex::lock(v8);
  char v9 = atomic_load((unint64_t *)(*(void *)(a2 + 8) + 8));
  if (v9) {
    operator new();
  }
  uint64_t v10 = *a3;
  if (LODWORD((*a3)->__on_zero_shared))
  {
    uint64_t v11 = v10->~__shared_weak_count_0;
    uint64_t get_deleter_low = LODWORD(v10->__get_deleter);
    if (get_deleter_low)
    {
      uint64_t v13 = 16 * get_deleter_low;
      int64_t v14 = v11;
      while ((*(void *)v14 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        int64_t v14 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v14 + 16);
        v13 -= 16;
        if (!v13) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      int64_t v14 = v11;
    }
    unint64_t v15 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v11 + 16 * get_deleter_low);
    if (v14 != v15)
    {
LABEL_11:
      uint64_t v35 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(a1 + 160), v14, &v35)&& v35 != *(void *)(a1 + 160) + 72 * *(unsigned int *)(a1 + 176)&& *(void *)(v35 + 48) != *(void *)(v35 + 56))
      {
        uint64_t v29 = *(void *)(a2 + 8);
        uint64_t v30 = *a3;
        unint64_t v31 = (*a3)->~__shared_weak_count_0;
        v30->~__shared_weak_count_0 = 0;
        v33[3] = v30->__on_zero_shared;
        v30->__on_zero_shared = 0;
        int get_deleter = (int)v30->__get_deleter;
        LODWORD(v30->__get_deleter) = 0;
        unint64_t v32 = *a3;
        v33[1] = (*a3)->__on_zero_shared_weak;
        long long v33[2] = v31;
        v32->__on_zero_shared_weak = 0;
        llvm::orc::ExecutionSession::createMaterializationResponsibility((uint64_t)&v35, v29);
      }
      while (1)
      {
        int64_t v14 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v14 + 16);
        if (v14 == v15) {
          break;
        }
        if ((*(void *)v14 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v14 != v15) {
            goto LABEL_11;
          }
          break;
        }
      }
    }
  }
LABEL_17:
  uint64_t v16 = *(void *)(a2 + 8);
  uint64_t v17 = (std::__shared_weak_count *)operator new(0x28uLL);
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDC88;
  int v18 = *a3;
  v17[1].__vftable = *a3;
  *a3 = 0;
  v17[1].__shared_owners_ = v16;
  if (LODWORD(v18->__on_zero_shared))
  {
    uint64_t v19 = (uint64_t *)v18->~__shared_weak_count_0;
    uint64_t v20 = LODWORD(v18->__get_deleter);
    if (v20)
    {
      uint64_t v21 = 16 * v20;
      __int16 v22 = v19;
      while ((*v22 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v22 += 2;
        v21 -= 16;
        if (!v21) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      __int16 v22 = v19;
    }
    uint64_t v23 = &v19[2 * v20];
    if (v22 != v23)
    {
LABEL_25:
      uint64_t v35 = 0;
      int v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(a1 + 112), *(_DWORD *)(a1 + 128), *v22, &v35);
      uint64_t v25 = v35;
      if (!v24) {
        uint64_t v25 = *(void *)(a1 + 112) + 24 * *(unsigned int *)(a1 + 128);
      }
      *(unsigned char *)(v25 + 18) |= 0x80u;
      int64_t v26 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::FindAndConstruct(a1 + 136, v22);
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v27 = (std::__shared_weak_count *)v26[2];
      v26[1] = (uint64_t)&v17[1];
      long long v26[2] = (uint64_t)v17;
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v27);
      }
      while (1)
      {
        v22 += 2;
        if (v22 == v23) {
          break;
        }
        if ((*v22 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v22 != v23) {
            goto LABEL_25;
          }
          break;
        }
      }
    }
  }
LABEL_32:
  std::__shared_weak_count::__release_shared[abi:nn180100](v17);
  std::recursive_mutex::unlock(v8);
  *a4 = 0;
  uint64_t v28 = (uint64_t *)v33[0];
  v33[0] = 0;
  if (v28) {
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)v33, v28);
  }
}

void llvm::orc::JITDylib::getRequestedSymbols(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(std::recursive_mutex **)(a1 + 32);
  std::recursive_mutex::lock(v6);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = *(uint64_t **)a2;
    uint64_t v8 = *(unsigned int *)(a2 + 16);
    if (v8)
    {
      uint64_t v9 = 16 * v8;
      uint64_t v10 = *(uint64_t **)a2;
      while ((*v10 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v10 += 2;
        v9 -= 16;
        if (!v9) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      uint64_t v10 = *(uint64_t **)a2;
    }
    uint64_t v11 = &v7[2 * v8];
    if (v10 != v11)
    {
LABEL_9:
      uint64_t v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::find(a1 + 160, v10);
      if (*(void *)(a1 + 160) + 72 * *(unsigned int *)(a1 + 176) != v12
        && *(void *)(v12 + 48) != *(void *)(v12 + 56))
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, v10, (uint64_t)&v13);
      }
      while (1)
      {
        v10 += 2;
        if (v10 == v11) {
          break;
        }
        if ((*v10 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v10 != v11) {
            goto LABEL_9;
          }
          break;
        }
      }
    }
  }
LABEL_15:
  std::recursive_mutex::unlock(v6);
}

void llvm::orc::JITDylib::resolve(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  unint64_t v62 = &v63;
  uint64_t v8 = *(std::recursive_mutex **)(a1 + 32);
  std::recursive_mutex::lock(v8);
  char v9 = atomic_load((unint64_t *)(*(void *)(a2 + 8) + 8));
  if (v9) {
    operator new();
  }
  if (*(_DWORD *)(a1 + 40))
  {
    std::operator+<char>();
    uint64_t v10 = std::string::append(&v67, " is defunct");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v69 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    getErrorErrorCat();
    uint64_t v65 = 3;
    unsigned int v66 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,std::string,std::error_code>();
  }
  memset(&v67, 0, 20);
  uint64_t v12 = *(unsigned int *)(a3 + 8);
  if (v12)
  {
    uint64_t v13 = (char *)operator new(32 * v12);
    int64_t v14 = v13;
    unint64_t v15 = *(uint64_t **)a3;
    uint64_t v16 = *(unsigned int *)(a3 + 16);
    if (v16)
    {
      uint64_t v17 = 24 * v16;
      int v18 = *(uint64_t **)a3;
      while ((*v18 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v18 += 3;
        v17 -= 24;
        if (!v17) {
          goto LABEL_74;
        }
      }
      uint64_t v57 = a4;
    }
    else
    {
      uint64_t v57 = a4;
      int v18 = *(uint64_t **)a3;
    }
    uint64_t v19 = &v15[3 * v16];
    if (v18 == v19)
    {
      a4 = v57;
    }
    else
    {
      uint64_t v56 = v8;
      uint64_t v20 = v13;
      unsigned int v58 = &v13[32 * v12];
      do
      {
        __p[0] = 0;
        int v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(a1 + 112), *(_DWORD *)(a1 + 128), *v18, __p);
        uint64_t v22 = *(void *)(a1 + 112);
        unsigned int v23 = *(_DWORD *)(a1 + 128);
        uint64_t v24 = v22 + 24 * v23;
        if (v21) {
          uint64_t v25 = __p[0];
        }
        else {
          uint64_t v25 = (_WORD *)(v22 + 24 * v23);
        }
        __int16 v26 = v25[8];
        if ((v26 & 0x100) != 0)
        {
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v67, v18, (uint64_t)__p);
        }
        else
        {
          uint64_t v27 = v18[1];
          if (v20 >= v58)
          {
            uint64_t v28 = (v20 - v14) >> 5;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 59) {
              abort();
            }
            if ((v58 - v14) >> 4 > v29) {
              unint64_t v29 = (v58 - v14) >> 4;
            }
            unint64_t v30 = 0x7FFFFFFFFFFFFFFLL;
            if ((unint64_t)(v58 - v14) < 0x7FFFFFFFFFFFFFE0) {
              unint64_t v30 = v29;
            }
            unint64_t v60 = v30;
            if (v30)
            {
              uint64_t v59 = v18[1];
              if (v30 >> 59) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              unint64_t v31 = (char *)operator new(32 * v30);
              uint64_t v27 = v59;
            }
            else
            {
              unint64_t v31 = 0;
            }
            unint64_t v32 = &v31[32 * v28];
            *(void *)unint64_t v32 = v25;
            *((void *)v32 + 1) = v24;
            *((void *)v32 + 2) = v27;
            *((_WORD *)v32 + 12) = v26;
            if (v20 == v14)
            {
              unint64_t v36 = &v31[32 * v28];
              unint64_t v34 = v60;
            }
            else
            {
              uint64_t v33 = &v31[32 * v28];
              unint64_t v34 = v60;
              do
              {
                long long v35 = *((_OWORD *)v20 - 1);
                unint64_t v36 = v33 - 32;
                *((_OWORD *)v33 - 2) = *((_OWORD *)v20 - 2);
                *((_OWORD *)v33 - 1) = v35;
                v20 -= 32;
                v33 -= 32;
              }
              while (v20 != v14);
            }
            unsigned int v58 = &v31[32 * v34];
            uint64_t v20 = v32 + 32;
            if (v14) {
              operator delete(v14);
            }
            int64_t v14 = v36;
          }
          else
          {
            *(void *)uint64_t v20 = v25;
            *((void *)v20 + 1) = v24;
            *((void *)v20 + 2) = v27;
            *((_WORD *)v20 + 12) = v26;
            v20 += 32;
          }
        }
        v18 += 3;
        unsigned int v61 = v14;
        if (v18 == v19) {
          break;
        }
        while ((*v18 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v18 += 3;
          if (v18 == v19) {
            goto LABEL_45;
          }
        }
      }
      while (v18 != v19);
LABEL_45:
      if (LODWORD(v67.__r_.__value_.__r.__words[1]))
      {
        unint64_t v37 = (uint64_t *)operator new(0x30uLL);
        v37[1] = 0;
        v37[2] = 0;
        *unint64_t v37 = (uint64_t)&unk_270DBDCC0;
        v37[4] = 0;
        *((_DWORD *)v37 + 10) = 0;
        __p[1] = v37;
        v37[3] = 0;
        __p[0] = v37 + 3;
        uint64_t v65 = a1;
        uint64_t v38 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v37 + 3, &v65);
        llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::operator=(v38 + 1, (uint64_t *)&v67);
        uint64_t v39 = *(void *)(*(void *)(a1 + 32) + 72);
        uint64_t v41 = *(void ***)(v39 + 8);
        uint64_t v40 = *(void *)(v39 + 16);
        uint64_t v65 = (uint64_t)v41;
        unsigned int v66 = (void (**)(_anonymous_namespace_::ErrorErrorCategory *__hidden))v40;
        if (v40) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
        }
        llvm::make_error<llvm::orc::FailedToMaterialize,std::shared_ptr<llvm::orc::SymbolStringPool>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>>();
      }
      if (v14 == v20)
      {
        int64_t v14 = v20;
      }
      else
      {
        __int32 v42 = (uint64_t *)(a1 + 160);
        do
        {
          uint64_t v44 = *((void *)v20 - 4);
          v20 -= 32;
          uint64_t v43 = (void *)v44;
          uint64_t v45 = *((void *)v20 + 2);
          uint64_t v46 = *((void *)v20 + 3);
          *(void *)(v44 + 8) = v45;
          *(_WORD *)(v44 + 16) = v46;
          *(unsigned char *)(v44 + 18) = *(unsigned char *)(v44 + 18) & 0x80 | 3;
          __p[0] = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v42, (void *)v44, __p)&& __p[0] != (void *)(*(void *)(a1 + 160) + 72 * *(unsigned int *)(a1 + 176)))
          {
            llvm::orc::JITDylib::MaterializingInfo::takeQueriesMeeting((char **)__p, (uint64_t)__p[0] + 8, 3u);
            uint64_t v48 = (uint64_t *)__p[0];
            uint64_t v47 = (uint64_t *)__p[1];
            while (v48 != v47)
            {
              llvm::orc::AsynchronousSymbolQuery::notifySymbolMetRequiredState(*v48, v43, v45, v46);
              llvm::orc::AsynchronousSymbolQuery::removeQueryDependence(*v48, a1, v43);
              unint64_t v49 = *v48;
              if (!*(void *)(*v48 + 80))
              {
                uint64_t v50 = v63;
                uint64_t v51 = &v63;
                unint64_t v52 = &v63;
                if (v63)
                {
                  while (1)
                  {
                    while (1)
                    {
                      unint64_t v52 = (uint64_t **)v50;
                      unint64_t v53 = v50[4];
                      if (v53 <= v49) {
                        break;
                      }
                      uint64_t v50 = *v52;
                      uint64_t v51 = v52;
                      if (!*v52) {
                        goto LABEL_64;
                      }
                    }
                    if (v53 >= v49) {
                      break;
                    }
                    uint64_t v50 = v52[1];
                    if (!v50)
                    {
                      uint64_t v51 = v52 + 1;
                      goto LABEL_64;
                    }
                  }
                }
                else
                {
LABEL_64:
                  int v54 = operator new(0x30uLL);
                  v54[2] = *(_OWORD *)v48;
                  *uint64_t v48 = 0;
                  v48[1] = 0;
                  *(void *)int v54 = 0;
                  *((void *)v54 + 1) = 0;
                  *((void *)v54 + 2) = v52;
                  void *v51 = (uint64_t *)v54;
                  if (*v62)
                  {
                    unint64_t v62 = (uint64_t **)*v62;
                    int v55 = *v51;
                  }
                  else
                  {
                    int v55 = (uint64_t *)v54;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v63, v55);
                  ++v64;
                }
              }
              v48 += 2;
            }
            uint64_t v65 = (uint64_t)__p;
            std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v65);
            __int32 v42 = (uint64_t *)(a1 + 160);
            int64_t v14 = v61;
          }
        }
        while (v14 != v20);
      }
      uint64_t v8 = v56;
      a4 = v57;
    }
  }
  else
  {
    int64_t v14 = 0;
  }
LABEL_74:
  *a4 = 0;
  if (v14) {
    operator delete(v14);
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t *)&v67);
  std::recursive_mutex::unlock(v8);
  if (!*a4)
  {
    if (v62 != &v63) {
      llvm::orc::AsynchronousSymbolQuery::handleComplete();
    }
    *a4 = 0;
  }
  std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v62, v63);
}

void llvm::orc::JITDylib::unlinkMaterializationResponsibility(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(std::recursive_mutex **)(a1 + 32);
  std::recursive_mutex::lock(v4);
  uint64_t v5 = a1 + 264;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)(a1 + 264), &v7, &v8))uint64_t v6 = v8; {
  else
  }
    uint64_t v6 = *(void *)(a1 + 264) + 32 * *(unsigned int *)(a1 + 280);
  uint64_t v8 = a2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v6 + 8, &v8);
  if (!*(_DWORD *)(v6 + 16))
  {
    uint64_t v8 = *(void *)(a2 + 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>,llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>::erase(v5, &v8);
  }
  std::recursive_mutex::unlock(v4);
}

void llvm::orc::JITDylib::addToLinkOrder(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = (std::recursive_mutex *)a1[4];
  std::recursive_mutex::lock(v6);
  unint64_t v7 = a1[28];
  unint64_t v8 = a1[27];
  if (v8 >= v7)
  {
    uint64_t v10 = a1[26];
    uint64_t v11 = (uint64_t)(v8 - v10) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      abort();
    }
    uint64_t v13 = v7 - v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(a1 + 28), v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v16 = &v15[16 * v11];
    uint64_t v17 = &v15[16 * v14];
    *(void *)uint64_t v16 = a2;
    *((_DWORD *)v16 + 2) = a3;
    char v9 = v16 + 16;
    uint64_t v19 = (char *)a1[26];
    int v18 = (char *)a1[27];
    if (v18 != v19)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v18 - 1);
        v16 -= 16;
        v18 -= 16;
      }
      while (v18 != v19);
      int v18 = (char *)a1[26];
    }
    a1[26] = v16;
    a1[27] = v9;
    a1[28] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *(void *)unint64_t v8 = a2;
    *(_DWORD *)(v8 + 8) = a3;
    char v9 = (char *)(v8 + 16);
  }
  a1[27] = v9;
  std::recursive_mutex::unlock(v6);
}

void llvm::orc::JITDylib::MaterializingInfo::takeQueriesMeeting(char **a1, uint64_t a2, unsigned int a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 48);
  if (*(void *)(a2 + 40) != v3)
  {
    unint64_t v7 = a1 + 2;
    do
    {
      uint64_t v9 = v3 - 16;
      uint64_t v8 = *(void *)(v3 - 16);
      if (*(unsigned __int8 *)(v8 + 88) > a3) {
        break;
      }
      uint64_t v10 = a1[1];
      unint64_t v11 = (unint64_t)a1[2];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = (v10 - *a1) >> 4;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 60) {
          abort();
        }
        uint64_t v15 = v11 - (void)*a1;
        if (v15 >> 3 > v14) {
          unint64_t v14 = v15 >> 3;
        }
        unint64_t v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v14;
        unint64_t v31 = v7;
        uint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v16);
        uint64_t v19 = &v17[16 * v13];
        *(_OWORD *)uint64_t v19 = *(_OWORD *)v9;
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        int v21 = *a1;
        uint64_t v20 = a1[1];
        if (v20 == *a1)
        {
          int64x2_t v24 = vdupq_n_s64((unint64_t)v20);
          uint64_t v22 = &v17[16 * v13];
        }
        else
        {
          uint64_t v22 = &v17[16 * v13];
          do
          {
            long long v23 = *((_OWORD *)v20 - 1);
            v20 -= 16;
            *((_OWORD *)v22 - 1) = v23;
            v22 -= 16;
            *(void *)uint64_t v20 = 0;
            *((void *)v20 + 1) = 0;
          }
          while (v20 != v21);
          int64x2_t v24 = *(int64x2_t *)a1;
        }
        unint64_t v12 = v19 + 16;
        *a1 = v22;
        a1[1] = v19 + 16;
        int64x2_t v29 = v24;
        uint64_t v25 = a1[2];
        a1[2] = &v17[16 * v18];
        unint64_t v30 = v25;
        uint64_t v28 = v24.i64[0];
        std::__split_buffer<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::~__split_buffer((uint64_t)&v28);
      }
      else
      {
        *(void *)uint64_t v10 = v8;
        *((void *)v10 + 1) = *(void *)(v3 - 8);
        *(void *)uint64_t v9 = 0;
        *(void *)(v3 - 8) = 0;
        unint64_t v12 = v10 + 16;
      }
      a1[1] = v12;
      uint64_t v26 = *(void *)(a2 + 48);
      uint64_t v27 = *(std::__shared_weak_count **)(v26 - 8);
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v27);
      }
      uint64_t v3 = v26 - 16;
      *(void *)(a2 + 48) = v26 - 16;
    }
    while (*(void *)(a2 + 40) != v26 - 16);
  }
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v6))
  {
    uint64_t v4 = v6;
    uint64_t v5 = *(std::__shared_weak_count **)(v6 + 16);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v5);
    }
    if ((unint64_t)(*(void *)v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(*(void *)v4 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    *(void *)uint64_t v4 = -16;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>,llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>::erase(uint64_t a1, void *a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a2, &v6);
  if (v3)
  {
    uint64_t v4 = v6;
    MEMORY[0x263E500A0](v6[1], 8);
    *uint64_t v4 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

uint64_t std::vector<llvm::orc::SymbolStringPtr>::reserve(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v17 = result;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(result, a2);
    uint64_t v9 = *a1;
    uint64_t v8 = a1[1];
    if (v8 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64((unint64_t)v8);
      uint64_t v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      uint64_t v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        *((void *)v10 - 1) = 0;
        v10 -= 8;
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *(void *)uint64_t v10 = v11;
        *(void *)uint64_t v8 = 0;
      }
      while (v8 != v9);
      int64x2_t v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v15 = v12;
    uint64_t v13 = a1[2];
    a1[2] = &v6[8 * v7];
    unint64_t v16 = v13;
    uint64_t v14 = v12.i64[0];
    return std::__split_buffer<llvm::orc::SymbolStringPtr>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

uint64_t *llvm::orc::JITDylib::defineImpl@<X0>(llvm::orc::JITDylib *this@<X0>, llvm::orc::MaterializationUnit *a2@<X1>, void *a3@<X8>)
{
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  unsigned int v50 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  unint64_t v47 = 0;
  __int32 v42 = 0;
  uint64_t v43 = 0;
  unint64_t v44 = 0;
  if (*((_DWORD *)a2 + 4))
  {
    uint64_t v6 = *((unsigned int *)a2 + 6);
    if (v6)
    {
      uint64_t v7 = 16 * v6;
      uint64_t v8 = *((void *)a2 + 1);
      while ((*(void *)v8 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v8 += 16;
        v7 -= 16;
        if (!v7) {
          goto LABEL_46;
        }
      }
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
    }
    uint64_t v9 = *((void *)a2 + 1) + 16 * v6;
    if (v8 != v9)
    {
LABEL_9:
      __dst[0] = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*((void *)this + 14), *((_DWORD *)this + 32), *(void *)v8, __dst))BOOL v10 = __dst[0] == (void **)(*((void *)this + 14) + 24 * *((unsigned int *)this + 32)); {
      else
      }
        BOOL v10 = 1;
      if (!v10)
      {
        if ((*(unsigned char *)(v8 + 9) & 6) != 0)
        {
          uint64_t v11 = v43;
          if ((unint64_t)v43 >= v44)
          {
            uint64_t v13 = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>(&v42, (uint64_t *)v8);
          }
          else
          {
            uint64_t v12 = *(void *)v8;
            *(void *)uint64_t v43 = *(void *)v8;
            if ((unint64_t)(v12 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 1uLL);
            }
            uint64_t v13 = v11 + 8;
          }
          uint64_t v43 = v13;
        }
        else if (((_WORD)__dst[0][2] & 0x600) != 0 && (*((unsigned char *)__dst[0] + 18) & 0x7E) == 0)
        {
          uint64_t v14 = v46;
          if ((unint64_t)v46 >= v47)
          {
            unint64_t v16 = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>(&v45, (uint64_t *)v8);
          }
          else
          {
            uint64_t v15 = *(void *)v8;
            *(void *)uint64_t v46 = *(void *)v8;
            if ((unint64_t)(v15 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 1uLL);
            }
            unint64_t v16 = v14 + 8;
          }
          uint64_t v46 = v16;
        }
        else
        {
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v48, (uint64_t *)v8, (uint64_t)__dst);
        }
      }
      while (1)
      {
        v8 += 16;
        if (v8 == v9) {
          break;
        }
        if ((*(void *)v8 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v8 != v9) {
            goto LABEL_9;
          }
          break;
        }
      }
      if (v49)
      {
        uint64_t v17 = v48;
        if (v50)
        {
          uint64_t v18 = 8 * v50;
          do
          {
            if (((unint64_t)*v17 | 8) != 0xFFFFFFFFFFFFFFF8) {
              goto LABEL_39;
            }
            ++v17;
            v18 -= 8;
          }
          while (v18);
          uint64_t v17 = &v48[v50];
        }
LABEL_39:
        uint64_t v20 = *v17 + 2;
        size_t v19 = **v17;
        if (v19 >= 0x7FFFFFFFFFFFFFF8) {
          abort();
        }
        if (v19 >= 0x17)
        {
          uint64_t v40 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17) {
            uint64_t v40 = v19 | 7;
          }
          uint64_t v41 = v40 + 1;
          int v21 = (void **)operator new(v40 + 1);
          __dst[1] = (void **)v19;
          unint64_t v52 = v41 | 0x8000000000000000;
          __dst[0] = v21;
        }
        else
        {
          HIBYTE(v52) = **v17;
          int v21 = (void **)__dst;
          if (!v19)
          {
LABEL_74:
            *((unsigned char *)v21 + v19) = 0;
            operator new();
          }
        }
        memmove(v21, v20, v19);
        goto LABEL_74;
      }
      uint64_t v22 = v42;
      long long v23 = v43;
      while (v22 != v23)
      {
        llvm::orc::MaterializationUnit::doDiscard(a2, (uint64_t)this, v22);
        v22 += 8;
      }
    }
  }
LABEL_46:
  int64x2_t v24 = v45;
  uint64_t v25 = (uint64_t *)v46;
  if (v45 != v46)
  {
    uint64_t v26 = (uint64_t *)v45;
    do
    {
      __dst[0] = 0;
      uint64_t v27 = *v26++;
      int v28 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*((void *)this + 17), *((_DWORD *)this + 38), v27, __dst);
      int64x2_t v29 = __dst[0];
      if (!v28) {
        int64x2_t v29 = (void **)(*((void *)this + 17) + 24 * *((unsigned int *)this + 38));
      }
      llvm::orc::MaterializationUnit::doDiscard(*(void **)v29[1], (uint64_t)this, v24);
      int64x2_t v24 = (char *)v26;
    }
    while (v26 != v25);
  }
  if (*((_DWORD *)a2 + 4))
  {
    uint64_t v30 = *((void *)a2 + 1);
    uint64_t v31 = *((unsigned int *)a2 + 6);
    if (v31)
    {
      uint64_t v32 = 16 * v31;
      uint64_t v33 = *((void *)a2 + 1);
      while ((*(void *)v33 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v33 += 16;
        v32 -= 16;
        if (!v32) {
          goto LABEL_69;
        }
      }
    }
    else
    {
      uint64_t v33 = *((void *)a2 + 1);
    }
    uint64_t v34 = v30 + 16 * v31;
    if (v33 != v34)
    {
LABEL_59:
      __dst[0] = 0;
      char v35 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*((void *)this + 14), *((_DWORD *)this + 32), *(void *)v33, __dst);
      unint64_t v36 = __dst[0];
      if ((v35 & 1) == 0)
      {
        unint64_t v37 = (void **)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>((uint64_t)this + 112, (uint64_t *)v33, __dst[0]);
        unint64_t v36 = v37;
        if ((char *)*v37 - 1 <= (char *)0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)*v37 + 1, 0xFFFFFFFFFFFFFFFFLL);
        }
        uint64_t v38 = *(void *)v33;
        *unint64_t v37 = *(void **)v33;
        if ((unint64_t)(v38 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v38 + 8), 1uLL);
        }
        v37[1] = 0;
        v37[2] = 0;
      }
      *((_WORD *)v36 + 8) = *(_WORD *)(v33 + 8);
      *((unsigned char *)v36 + 18) = -127;
      while (1)
      {
        v33 += 16;
        if (v33 == v34) {
          break;
        }
        if ((*(void *)v33 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v33 != v34) {
            goto LABEL_59;
          }
          break;
        }
      }
    }
  }
LABEL_69:
  *a3 = 0;
  __dst[0] = (void **)&v42;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](__dst);
  __dst[0] = (void **)&v45;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](__dst);
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t *)&v48);
}

void llvm::make_error<llvm::orc::DuplicateDefinition,std::string>()
{
}

uint64_t llvm::orc::MaterializationUnit::doDiscard(void *a1, uint64_t a2, void *a3)
{
  v6.n128_u64[0] = (unint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::erase((uint64_t)(a1 + 1), a3);
  uint64_t v7 = a1[4];
  if (v7 == *a3)
  {
    if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
      atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 0xFFFFFFFFFFFFFFFFLL);
    }
    a1[4] = 0;
  }
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, void *, __n128))(*a1 + 40);
  return v8(a1, a2, a3, v6);
}

void llvm::orc::JITDylib::installMaterializationUnit(uint64_t a1, std::__shared_weak_count_vtbl **a2, uint64_t a3)
{
  if (*(void *)(a1 + 232) != a3)
  {
    uint64_t v25 = a3;
    __n128 v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>,llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::FindAndConstruct(a1 + 240, &v25);
    std::vector<llvm::orc::SymbolStringPtr>::reserve((char **)v6 + 1, LODWORD((*a2)->__on_zero_shared) + ((v6[2] - v6[1]) >> 3));
    uint64_t v7 = *a2;
    if (LODWORD((*a2)->__on_zero_shared))
    {
      uint64_t v8 = (uint64_t *)v7->~__shared_weak_count_0;
      uint64_t get_deleter_low = LODWORD(v7->__get_deleter);
      if (get_deleter_low)
      {
        uint64_t v10 = 16 * get_deleter_low;
        uint64_t v11 = v8;
        while ((*v11 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v11 += 2;
          v10 -= 16;
          if (!v10) {
            goto LABEL_20;
          }
        }
      }
      else
      {
        uint64_t v11 = v8;
      }
      uint64_t v12 = &v8[2 * get_deleter_low];
      if (v11 != v12)
      {
        uint64_t v13 = (char *)v6[2];
LABEL_11:
        if ((unint64_t)v13 >= v6[3])
        {
          uint64_t v13 = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>((char **)v6 + 1, v11);
        }
        else
        {
          uint64_t v14 = *v11;
          *(void *)uint64_t v13 = *v11;
          if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 1uLL);
          }
          v13 += 8;
        }
        void v6[2] = (uint64_t)v13;
        while (1)
        {
          v11 += 2;
          if (v11 == v12) {
            break;
          }
          if ((*v11 | 8) != 0xFFFFFFFFFFFFFFF8)
          {
            if (v11 != v12) {
              goto LABEL_11;
            }
            break;
          }
        }
      }
    }
  }
LABEL_20:
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x28uLL);
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDC88;
  unint64_t v16 = *a2;
  v15[1].__vftable = *a2;
  *a2 = 0;
  v15[1].__shared_owners_ = a3;
  if (LODWORD(v16->__on_zero_shared))
  {
    uint64_t v17 = (uint64_t *)v16->~__shared_weak_count_0;
    uint64_t v18 = LODWORD(v16->__get_deleter);
    if (v18)
    {
      uint64_t v19 = 16 * v18;
      uint64_t v20 = v17;
      while ((*v20 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v20 += 2;
        v19 -= 16;
        if (!v19) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      uint64_t v20 = v17;
    }
    int v21 = &v17[2 * v18];
    if (v20 != v21)
    {
      uint64_t v22 = a1 + 136;
LABEL_29:
      long long v23 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::FindAndConstruct(v22, v20);
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      int64x2_t v24 = (std::__shared_weak_count *)v23[2];
      v23[1] = (uint64_t)&v15[1];
      v23[2] = (uint64_t)v15;
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v24);
      }
      while (1)
      {
        v20 += 2;
        if (v20 == v21) {
          break;
        }
        if ((*v20 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v20 != v21) {
            goto LABEL_29;
          }
          break;
        }
      }
    }
  }
LABEL_34:
  std::__shared_weak_count::__release_shared[abi:nn180100](v15);
}

void *llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  uint64_t result = *(void **)a1;
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  uint64_t v5 = &result[v4];
  if (!v2) {
    return v5;
  }
  if (v4)
  {
    uint64_t v6 = 8 * v4;
    while ((*result | 8) == 0xFFFFFFFFFFFFFFF8)
    {
      ++result;
      v6 -= 8;
      if (!v6) {
        return v5;
      }
    }
  }
  return result;
}

void llvm::orc::Platform::lookupInitSymbolsAsync(long long *a1, llvm::orc::ExecutionSession *a2, uint64_t **a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x80uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_270DBDCF8;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v18, a1);
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v6[1].__shared_owners_ = 0u;
  v6[2].std::__shared_count = 0u;
  *(_OWORD *)&v6[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[3].__shared_owners_ = 0u;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v6[4], &v18);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v18);
  if (*((_DWORD *)a3 + 2))
  {
    uint64_t v7 = *((unsigned int *)a3 + 4);
    if (v7)
    {
      uint64_t v8 = 32 * v7;
      uint64_t v9 = *a3;
      while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 4;
        v8 -= 32;
        if (!v8) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      uint64_t v9 = *a3;
    }
    if (v9 != &(*a3)[4 * v7])
    {
      uint64_t v10 = *v9;
      uint64_t v19 = 0;
      long long v18 = 0uLL;
      std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__init_with_size[abi:nn180100]<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*>((char *)&v18, (uint64_t *)v9[1], (uint64_t *)v9[2], (v9[2] - v9[1]) >> 4);
      uint64_t v11 = operator new(0x10uLL);
      v14[1] = v11 + 4;
      void v14[2] = v11 + 4;
      *(void *)uint64_t v11 = v10;
      uint64_t v11[2] = 1;
      v14[0] = v11;
      long long v12 = v18;
      uint64_t v13 = v19;
      long long v18 = 0uLL;
      uint64_t v19 = 0;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v16 = v6 + 1;
      *((void *)&v16 + 1) = v6;
      uint64_t v17 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallbacksHolder<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::$_0,llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::$_0,void>::Callbacks
          + 6;
      std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v15, (uint64_t)&llvm::orc::NoDependenciesToRegister);
      llvm::orc::ExecutionSession::lookup(a2, 0, (uint64_t)v14, (uint64_t **)&v12, 63, &v16);
    }
  }
LABEL_10:
  std::__shared_weak_count::__release_shared[abi:nn180100](v6);
}

llvm::raw_ostream *llvm::orc::MaterializationTask::printDescription(llvm::orc::MaterializationTask *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v4 > 0x15uLL)
  {
    qmemcpy(v4, "Materialization task: ", 22);
    *((void *)a2 + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Materialization task: ", 0x16uLL);
  }
  uint64_t v5 = (const void *)(*(uint64_t (**)(void))(**((void **)this + 1) + 16))(*((void *)this + 1));
  uint64_t v7 = llvm::raw_ostream::operator<<(a2, v5, v6);
  uint64_t v8 = (_DWORD *)*((void *)v7 + 4);
  if (*((void *)v7 + 3) - (void)v8 > 3uLL)
  {
    *uint64_t v8 = 544106784;
    *((void *)v7 + 4) += 4;
  }
  else
  {
    uint64_t v7 = llvm::raw_ostream::write(v7, " in ", 4uLL);
  }
  uint64_t v9 = **((void **)this + 2);
  long long v12 = *(const char **)(v9 + 8);
  uint64_t v10 = v9 + 8;
  uint64_t v11 = v12;
  int v13 = *(char *)(v10 + 23);
  if (v13 >= 0) {
    uint64_t v14 = (const char *)v10;
  }
  else {
    uint64_t v14 = v11;
  }
  if (v13 >= 0) {
    size_t v15 = *(unsigned __int8 *)(v10 + 23);
  }
  else {
    size_t v15 = *(void *)(v10 + 8);
  }
  return llvm::raw_ostream::write(v7, v14, v15);
}

void llvm::orc::MaterializationTask::run(llvm::orc::MaterializationTask *this)
{
  uint64_t v1 = *((void *)this + 1);
  int v2 = (uint64_t *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  uint64_t v4 = v2;
  (*(void (**)(uint64_t, uint64_t **))(*(void *)v1 + 24))(v1, &v4);
  uint64_t v3 = v4;
  uint64_t v4 = 0;
  if (v3) {
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)&v4, v3);
  }
}

llvm::raw_ostream *llvm::orc::LookupTask::printDescription(llvm::orc::LookupTask *this, llvm::raw_ostream *a2)
{
  uint64_t v2 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v2) <= 0xA) {
    return llvm::raw_ostream::write(a2, "Lookup task", 0xBuLL);
  }
  *(_DWORD *)(v2 + 7) = 1802723700;
  *(void *)uint64_t v2 = *(void *)"Lookup task";
  *((void *)a2 + 4) += 11;
  return result;
}

uint64_t llvm::orc::LookupTask::run(llvm::orc::InProgressLookupState **this)
{
  uint64_t v3 = 0;
  llvm::orc::LookupState::continueLookup(this + 1, &v3);
  uint64_t result = v3;
  if (v3)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)v3 + 8);
    return v2();
  }
  return result;
}

uint64_t llvm::orc::ExecutionSession::ExecutionSession(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = MEMORY[0x263E4FEB0]();
  *(unsigned char *)(v4 + 64) = 1;
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(v4 + 72) = v5;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 88) = llvm::orc::ExecutionSession::logErrorsToStdErr;
  *(void *)(v4 + 112) = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<void (*)(llvm::Error),void (*)(llvm::Error),void>::Callbacks
                        + 2;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  MEMORY[0x263E4FEB0](v4 + 168);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 850045863;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(void *)(*(void *)(a1 + 72) + 32) = a1;
  return a1;
}

void **llvm::orc::ExecutionSession::logErrorsToStdErr(llvm *a1)
{
  uint64_t v5 = *(void ***)a1;
  *(void *)a1 = 0;
  uint64_t v1 = (llvm::raw_ostream *)llvm::errs(a1);
  uint64_t v3 = "JIT session error: ";
  __int16 v4 = 259;
  llvm::logAllUnhandledErrors(&v5, v1, (llvm::Twine *)&v3);
  uint64_t result = v5;
  if (v5) {
    return (void **)(*((uint64_t (**)(void **))*v5 + 1))(v5);
  }
  return result;
}

void llvm::orc::ExecutionSession::~ExecutionSession(llvm::orc::ExecutionSession *this)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::destroyAll((unsigned int *)this + 80);
  MEMORY[0x263E500A0](*((void *)this + 40), 8);
  std::mutex::~mutex((std::mutex *)this + 4);
  uint64_t v5 = (void **)((char *)this + 232);
  std::vector<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>>::__destroy_vector::operator()[abi:nn180100](&v5);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 168));
  uint64_t v5 = (void **)((char *)this + 144);
  std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__destroy_vector::operator()[abi:nn180100](&v5);
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((void *)this + 11);
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)this);
}

void llvm::orc::ExecutionSession::endSession(std::recursive_mutex *this@<X0>, void ***a2@<X8>)
{
  std::recursive_mutex::lock(this);
  LOBYTE(this[1].__m_.__sig) = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  uint64_t v26 = 0;
  uint64_t v4 = *(void *)&this[2].__m_.__opaque[8];
  uint64_t v5 = *(void *)&this[2].__m_.__opaque[16];
  uint64_t v6 = v5 - v4;
  if (v5 == v4)
  {
    uint64_t v11 = 0;
    int v13 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    if (v6 < 0) {
      abort();
    }
    uint64_t v7 = (atomic_uint **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v6 >> 3);
    uint64_t v8 = v7;
    uint64_t v9 = 0;
    uint64_t v26 = v7;
    uint64_t v27 = v7;
    uint64_t v11 = &v7[v10];
    int v28 = v11;
    do
    {
      long long v12 = *(atomic_uint **)(v4 + v9 * 8);
      v7[v9] = v12;
      if (v12) {
        atomic_fetch_add_explicit(v12, 1u, memory_order_relaxed);
      }
      ++v9;
    }
    while (v4 + v9 * 8 != v5);
    int v13 = &v7[v9];
  }
  std::recursive_mutex::unlock(this);
  if (v8 != v13 && v13 - 1 > v8)
  {
    uint64_t v14 = v13 - 2;
    size_t v15 = v8;
    do
    {
      long long v16 = *v15;
      *size_t v15 = 0;
      uint64_t v17 = v14[1];
      v14[1] = 0;
      long long v18 = *v15;
      *size_t v15 = v17;
      if (v18) {
        llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v18);
      }
      uint64_t v19 = v14[1];
      v14[1] = v16;
      if (v19) {
        llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v19);
      }
    }
    while (++v15 < v14--);
  }
  v25[0] = v8;
  v25[1] = v13;
  std::string::value_type v25[2] = v11;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  llvm::orc::ExecutionSession::removeJITDylibs((uint64_t)this, v25, a2);
  uint64_t v30 = v25;
  std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v30);
  int v21 = *a2;
  (*(void (**)(void ***__return_ptr))(**(void **)this[1].__m_.__opaque + 64))(&v23);
  int64x2_t v29 = v23;
  uint64_t v30 = (atomic_uint ***)v21;
  long long v23 = 0;
  llvm::ErrorList::join((void ***)&v30, &v29, &v24);
  if (v29) {
    (*((void (**)(void **))*v29 + 1))(v29);
  }
  if (v30) {
    ((void (*)(atomic_uint ***))(*v30)[1])(v30);
  }
  uint64_t v22 = v23;
  *a2 = v24;
  int64x2_t v24 = 0;
  if (v22) {
    (*((void (**)(void **))*v22 + 1))(v22);
  }
  uint64_t v30 = &v26;
  std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v30);
}

void llvm::orc::ExecutionSession::removeJITDylibs(uint64_t a1@<X0>, atomic_uint ***a2@<X1>, void *a3@<X8>)
{
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v8 = *(void **)(a1 + 152);
    uint64_t v9 = v8;
    do
    {
      uint64_t v10 = *v6;
      (*v6)[10] = 1;
      if (*(void **)(a1 + 144) != v8)
      {
        uint64_t v9 = *(void **)(a1 + 144);
        while ((atomic_uint *)*v9 != v10)
        {
          if (++v9 == v8)
          {
            uint64_t v9 = v8;
            break;
          }
        }
      }
      uint64_t v11 = v9 + 1;
      if (v9 + 1 != v8)
      {
        do
        {
          long long v12 = (atomic_uint *)*(v11 - 1);
          *(v11 - 1) = *v11;
          *uint64_t v11 = 0;
          if (v12) {
            llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v12);
          }
          ++v11;
        }
        while (v11 != v8);
        uint64_t v8 = *(void **)(a1 + 152);
        uint64_t v9 = v11 - 1;
      }
      while (v8 != v9)
      {
        uint64_t v14 = (atomic_uint *)*--v8;
        int v13 = v14;
        if (v14) {
          llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v13);
        }
      }
      *(void *)(a1 + 152) = v9;
      ++v6;
      uint64_t v8 = v9;
    }
    while (v6 != v7);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
  *a3 = 0;
  size_t v15 = *a2;
  long long v16 = a2[1];
  if (*a2 != v16)
  {
    uint64_t v17 = 0;
    do
    {
      long long v18 = *v15;
      if (*v15) {
        atomic_fetch_add_explicit(v18, 1u, memory_order_relaxed);
      }
      llvm::orc::JITDylib::clear((llvm::orc::JITDylib *)v18, &v25);
      uint64_t v27 = v25;
      int v28 = v17;
      uint64_t v25 = 0;
      llvm::ErrorList::join(&v28, &v27, &v26);
      if (v27) {
        (*((void (**)(void **))*v27 + 1))(v27);
      }
      if (v28) {
        (*((void (**)(void **))*v28 + 1))(v28);
      }
      uint64_t v17 = v26;
      *a3 = v26;
      uint64_t v19 = *(void *)(a1 + 80);
      if (v19)
      {
        (*(void (**)(void ***__return_ptr))(*(void *)v19 + 24))(&v24);
        uint64_t v27 = v24;
        int v28 = v17;
        int64x2_t v24 = 0;
        llvm::ErrorList::join(&v28, &v27, &v26);
        if (v27) {
          (*((void (**)(void **))*v27 + 1))(v27);
        }
        if (v28) {
          (*((void (**)(void **))*v28 + 1))(v28);
        }
        uint64_t v17 = v26;
        *a3 = v26;
        uint64_t v26 = 0;
        if (v24) {
          (*((void (**)(void **))*v24 + 1))(v24);
        }
      }
      if (v18) {
        llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v18);
      }
      ++v15;
    }
    while (v15 != v16);
  }
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  int v21 = *a2;
  for (uint64_t i = a2[1]; v21 != i; *(void *)(v23 + 216) = *(void *)(v23 + 208))
  {
    uint64_t v22 = *v21;
    v22[10] = 2;
    std::vector<std::shared_ptr<llvm::orc::DefinitionGenerator>>::__clear[abi:nn180100]((uint64_t *)v22 + 23);
    uint64_t v23 = (uint64_t)*v21++;
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
}

void llvm::orc::ExecutionSession::registerResourceManager(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  unint64_t v4 = *(void *)(a1 + 136);
  uint64_t v5 = *(void **)(a1 + 128);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *(void *)(a1 + 120);
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      long long v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(a1 + 136, v11);
    }
    else {
      long long v12 = 0;
    }
    int v13 = &v12[8 * v8];
    uint64_t v14 = &v12[8 * v11];
    *(void *)int v13 = a2;
    uint64_t v6 = v13 + 8;
    long long v16 = *(char **)(a1 + 120);
    size_t v15 = *(char **)(a1 + 128);
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      size_t v15 = *(char **)(a1 + 120);
    }
    *(void *)(a1 + 120) = v13;
    *(void *)(a1 + 128) = v6;
    *(void *)(a1 + 136) = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    void *v5 = a2;
    uint64_t v6 = v5 + 1;
  }
  *(void *)(a1 + 128) = v6;
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
}

void llvm::orc::ExecutionSession::deregisterResourceManager(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  unint64_t v4 = *(char **)(a1 + 128);
  uint64_t v5 = v4 - 8;
  if (*((void *)v4 - 1) != a2)
  {
    for (uint64_t i = *(char **)(a1 + 120); i != v4; i += 8)
    {
      if (*(void *)i == a2) {
        goto LABEL_7;
      }
    }
    uint64_t i = *(char **)(a1 + 128);
LABEL_7:
    int64_t v7 = v4 - (i + 8);
    if (v4 != i + 8) {
      memmove(i, i + 8, v4 - (i + 8));
    }
    uint64_t v5 = &i[v7];
  }
  *(void *)(a1 + 128) = v5;
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
}

void llvm::orc::ExecutionSession::createBareJITDylib(std::recursive_mutex *a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  std::recursive_mutex::lock(a1);
  operator new();
}

void llvm::orc::ExecutionSession::createJITDylib(std::recursive_mutex *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v3 = *(std::string *)a2;
  }
  llvm::orc::ExecutionSession::createBareJITDylib(a1);
}

uint64_t *llvm::orc::ExecutionSession::dispatchOutstandingMUs(llvm::orc::ExecutionSession *this)
{
  uint64_t v2 = (std::recursive_mutex *)((char *)this + 168);
  std::string v3 = (char *)this + 248;
  LOBYTE(v11) = 0;
  char v13 = 0;
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 168));
  uint64_t v4 = *((void *)this + 30);
  if (*((void *)this + 29) != v4)
  {
    if (v13)
    {
      uint64_t v5 = v12;
      long long v12 = 0;
      if (v5) {
        std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)&v12, v5);
      }
      uint64_t v6 = v11;
      uint64_t v11 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
    uint64_t v7 = *(void *)(v4 - 16);
    *(void *)(v4 - 16) = 0;
    uint64_t v11 = v7;
    uint64_t v8 = *(uint64_t **)(v4 - 8);
    *(void *)(v4 - 8) = 0;
    long long v12 = v8;
    char v13 = 1;
    uint64_t v9 = (uint64_t *)(*((void *)this + 30) - 16);
    std::allocator<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>>::destroy[abi:nn180100]((uint64_t)v3, v9);
    *((void *)this + 30) = v9;
  }
  std::recursive_mutex::unlock(v2);
  if (v13) {
    operator new();
  }
  return std::__optional_destruct_base<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>,false>::~__optional_destruct_base[abi:nn180100](&v11);
}

void llvm::orc::ExecutionSession::lookup()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void llvm::orc::ExecutionSession::lookup(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void v6[4] = *MEMORY[0x263EF8340];
  v6[0] = *a3;
  if ((unint64_t)(v6[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v6[0] + 8), 1uLL);
  }
  llvm::orc::SymbolLookupSet::SymbolLookupSet((uint64_t *)&v3, v6, 1uLL, 0);
  if ((unint64_t)(v6[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
    atomic_fetch_add((atomic_ullong *volatile)(v6[0] + 8), 0xFFFFFFFFFFFFFFFFLL);
  }
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v5, (uint64_t)&llvm::orc::NoDependenciesToRegister);
  llvm::orc::ExecutionSession::lookup();
}

void llvm::orc::ExecutionSession::lookup(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  std::string __p = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>::reserve(&__p, a3);
  if (a3)
  {
    uint64_t v8 = v22;
    uint64_t v9 = &a2[a3];
    do
    {
      uint64_t v10 = *a2;
      if (v8 >= v23)
      {
        uint64_t v11 = (v8 - (unsigned char *)__p) >> 4;
        if ((unint64_t)(v11 + 1) >> 60) {
          abort();
        }
        unint64_t v12 = (v23 - (unsigned char *)__p) >> 3;
        if (v12 <= v11 + 1) {
          unint64_t v12 = v11 + 1;
        }
        if ((unint64_t)(v23 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)&v23, v13);
        }
        else {
          uint64_t v14 = 0;
        }
        size_t v15 = &v14[16 * v11];
        *(void *)size_t v15 = v10;
        *((void *)v15 + 1) = 0;
        uint64_t v17 = (char *)__p;
        long long v16 = v22;
        long long v18 = v15;
        if (v22 != __p)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v16 - 1);
            v18 -= 16;
            v16 -= 16;
          }
          while (v16 != v17);
          long long v16 = (char *)__p;
        }
        uint64_t v8 = v15 + 16;
        std::string __p = v18;
        uint64_t v22 = v15 + 16;
        uint64_t v23 = &v14[16 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(void *)uint64_t v8 = v10;
        *((void *)v8 + 1) = 0;
        v8 += 16;
      }
      uint64_t v22 = v8;
      ++a2;
    }
    while (a2 != v9);
  }
  uint64_t v19 = *a4;
  uint64_t v20 = v19;
  if ((unint64_t)(v19 - 1) < 0xFFFFFFFFFFFFFFE0)
  {
    atomic_fetch_add((atomic_ullong *volatile)(v19 + 8), 1uLL);
    llvm::orc::ExecutionSession::lookup(a1, (uint64_t)&__p, &v20);
  }
  llvm::orc::ExecutionSession::lookup(a1, (uint64_t)&__p, &v20);
}

void llvm::orc::ExecutionSession::lookup(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, unint64_t a5)
{
  llvm::orc::ExecutorProcessControl::intern(*(void *)(a1 + 72), a4, a5, &v8);
  llvm::orc::ExecutionSession::lookup(a1, a2, a3, (uint64_t *)&v8);
}

void llvm::orc::ExecutionSession::registerJITDispatchHandlers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v5 = operator new(0x10uLL);
  unint64_t v12 = (char *)(v5 + 4);
  unint64_t v13 = (char *)(v5 + 4);
  *(void *)uint64_t v5 = a2;
  void v5[2] = 1;
  std::string __p = v5;
  memset(v15, 0, sizeof(v15));
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::reserve(v15, *(unsigned int *)(a3 + 8));
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v6 = *(unsigned int *)(a3 + 16);
    if (v6)
    {
      uint64_t v7 = 40 * v6;
      uint64_t v8 = *(uint64_t **)a3;
      while ((*v8 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v8 += 5;
        v7 -= 40;
        if (!v7) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      uint64_t v8 = *(uint64_t **)a3;
    }
    uint64_t v9 = *(void *)a3 + 40 * v6;
    if (v8 != (uint64_t *)v9)
    {
      uint64_t v10 = *v8;
      do
      {
        uint64_t v14 = v10;
        if ((unint64_t)(v10 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 1uLL);
        }
        llvm::orc::SymbolLookupSet::add(v15, &v14, 1);
        if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL);
        }
        do
        {
          v8 += 5;
          if (v8 == (uint64_t *)v9) {
            goto LABEL_17;
          }
          uint64_t v10 = *v8;
        }
        while ((*v8 | 8) == 0xFFFFFFFFFFFFFFF8);
      }
      while (v8 != (uint64_t *)v9);
    }
  }
LABEL_17:
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v16, (uint64_t)&llvm::orc::NoDependenciesToRegister);
  llvm::orc::ExecutionSession::lookup();
}

void llvm::orc::ExecutionSession::runJITDispatchHandler(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v27[4] = *MEMORY[0x263EF8340];
  uint64_t v26 = a3;
  uint64_t v10 = (std::mutex *)(a1 + 256);
  std::mutex::lock((std::mutex *)(a1 + 256));
  v18[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(void *)(a1 + 320), *(_DWORD *)(a1 + 336), a3, v18))BOOL v11 = v18[0] == *(void *)(a1 + 320) + 24 * *(unsigned int *)(a1 + 336); {
  else
  }
    BOOL v11 = 1;
  if (v11)
  {
    std::mutex::unlock(v10);
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v13 = *(void **)(v18[0] + 8);
    unint64_t v12 = *(std::__shared_weak_count **)(v18[0] + 16);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::mutex::unlock(v10);
    if (v13)
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v27, a2);
      uint64_t v14 = v13[3];
      if ((v14 & 2) == 0) {
        unint64_t v13 = (void *)*v13;
      }
      (*(void (**)(void *, void *, uint64_t, uint64_t))(v14 & 0xFFFFFFFFFFFFFFF8))(v13, v27, a4, a5);
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v27);
      goto LABEL_25;
    }
  }
  v18[0] = "{0:x16}";
  v18[1] = 7;
  void v18[2] = &v20;
  void v18[3] = 1;
  v19[0] = &unk_270DBD808;
  v19[1] = &v26;
  uint64_t v20 = v19;
  v21[0] = "No function registered for tag ";
  int v21[2] = v18;
  __int16 v22 = 1539;
  llvm::Twine::str((llvm::Twine *)v21, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = (llvm::orc::shared::WrapperFunctionResult *)&__p;
  }
  else {
    p_p = (llvm::orc::shared::WrapperFunctionResult *)__p.__r_.__value_.__r.__words[0];
  }
  llvm::orc::shared::WrapperFunctionResult::createOutOfBandError(p_p, (char **)&v24);
  uint64_t v16 = *((void *)a2 + 3);
  if ((v16 & 2) == 0) {
    a2 = *(long long **)a2;
  }
  (*(void (**)(long long *, void **))(v16 & 0xFFFFFFFFFFFFFFF8))(a2, &v24);
  if (v25 >= 9)
  {
    uint64_t v17 = v24;
LABEL_22:
    free(v17);
    goto LABEL_23;
  }
  if (!v25)
  {
    uint64_t v17 = v24;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_23:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_25:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v12);
  }
}

void llvm::make_error<llvm::orc::FailedToMaterialize,std::shared_ptr<llvm::orc::SymbolStringPool>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>> &>()
{
}

void llvm::orc::ExecutionSession::runSessionLocked<llvm::orc::ExecutionSession::destroyResourceTracker(llvm::orc::ResourceTracker &)::$_0>(std::recursive_mutex *a1, llvm::orc::ResourceTracker **a2)
{
  std::recursive_mutex::lock(a1);
  uint64_t v4 = (std::recursive_mutex *)a2[1];
  char v5 = atomic_load((unint64_t *)*a2 + 1);
  if ((v5 & 1) == 0)
  {
    unint64_t v6 = atomic_load((unint64_t *)*a2 + 1);
    llvm::orc::JITDylib::getDefaultResourceTracker((llvm::orc::JITDylib *)(v6 & 0xFFFFFFFFFFFFFFFELL), (atomic_uint **)&v8);
    uint64_t v7 = v8;
    llvm::orc::ExecutionSession::transferResourceTracker(v4, v8, *a2);
    llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v7);
  }
  std::recursive_mutex::unlock(a1);
}

void *llvm::orc::ExecutionSession::IL_updateCandidatesFor(void *result, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t *a6)
{
  v41[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a5;
  if (a5[1] != *a5)
  {
    uint64_t v33 = result;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v6 + 16 * v11;
      int v13 = *(_DWORD *)(v12 + 8);
      char v35 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(void *)(a3 + 112), *(_DWORD *)(a3 + 128), *(void *)v12, &v35))BOOL v14 = v35 == (void *)(*(void *)(a3 + 112) + 24 * *(unsigned int *)(a3 + 128)); {
      else
      }
        BOOL v14 = 1;
      if (v14)
      {
        ++v11;
      }
      else
      {
        char v15 = *((unsigned char *)v35 + 17);
        if (a4 | v15 & 0x10)
        {
          if (v13 != 1 && (v15 & 0x40) != 0)
          {
            uint64_t v18 = *(void *)(a2 + 72);
            uint64_t v20 = *(uint64_t **)(v18 + 8);
            uint64_t v19 = *(void **)(v18 + 16);
            uint64_t v38 = v20;
            uint64_t v39 = v19;
            if (v19) {
              atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
            }
            uint64_t v21 = *(void *)v12;
            unint64_t v22 = *(void *)v12 - 1;
            if (v22 <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add((atomic_ullong *volatile)(v21 + 8), 1uLL);
            }
            uint64_t v23 = operator new(8uLL);
            char v35 = v23;
            unint64_t v36 = v23;
            void *v23 = v21;
            int64x2_t v24 = v23 + 1;
            unint64_t v37 = v24;
            if (v22 <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add((atomic_ullong *volatile)(v21 + 8), 1uLL);
            }
            unint64_t v36 = v24;
            llvm::make_error<llvm::orc::SymbolsNotFound,std::shared_ptr<llvm::orc::SymbolStringPool>,std::vector<llvm::orc::SymbolStringPtr>>();
          }
          if (*((unsigned char *)v35 + 17))
          {
            unint64_t v25 = operator new(0x30uLL);
            v25[1] = 0;
            std::string::value_type v25[2] = 0;
            void *v25 = &unk_270DBDCC0;
            void v25[4] = 0;
            *((_DWORD *)v25 + 10) = 0;
            v25[3] = 0;
            uint64_t v26 = v25 + 3;
            uint64_t v38 = v25 + 3;
            uint64_t v39 = v25;
            uint64_t v27 = *(void *)v12;
            v41[0] = v27;
            if ((unint64_t)(v27 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
            {
              atomic_fetch_add((atomic_ullong *volatile)(v27 + 8), 1uLL);
              uint64_t v26 = v38;
            }
            llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::DenseSetImpl((uint64_t)&v35, v41, 1);
            uint64_t v34 = a3;
            int v28 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v26, &v34);
            llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::operator=(v28 + 1, (uint64_t *)&v35);
            llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t *)&v35);
            if ((unint64_t)(v41[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
              atomic_fetch_add((atomic_ullong *volatile)(v41[0] + 8), 0xFFFFFFFFFFFFFFFFLL);
            }
            uint64_t v29 = *(void *)(a2 + 72);
            uint64_t v31 = *(void *)(v29 + 8);
            uint64_t v30 = *(void **)(v29 + 16);
            char v35 = (void *)v31;
            unint64_t v36 = v30;
            if (v30) {
              atomic_fetch_add_explicit(v30 + 1, 1uLL, memory_order_relaxed);
            }
            llvm::make_error<llvm::orc::FailedToMaterialize,std::shared_ptr<llvm::orc::SymbolStringPool>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>>();
          }
        }
        else if (a6)
        {
          uint64_t v16 = *(void *)v12;
          uint64_t v40 = v16;
          if ((unint64_t)(v16 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(v16 + 8), 1uLL);
          }
          llvm::orc::SymbolLookupSet::add(a6, &v40, v13);
          if ((unint64_t)(v40 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
            atomic_fetch_add((atomic_ullong *volatile)(v40 + 8), 0xFFFFFFFFFFFFFFFFLL);
          }
        }
        llvm::orc::SymbolLookupSet::remove(a5, v11);
      }
      uint64_t v6 = *a5;
    }
    while (v11 != (a5[1] - *a5) >> 4);
    uint64_t result = v33;
  }
  *uint64_t result = 0;
  return result;
}

void llvm::orc::ExecutionSession::OL_resumeLookupAfterGeneration(llvm::orc::ExecutionSession *this, llvm::orc::InProgressLookupState *a2)
{
  *((_DWORD *)a2 + 34) = 0;
  uint64_t v2 = *((void *)a2 + 19);
  long long v3 = *(std::__shared_weak_count **)(v2 - 8);
  if (!v3) {
    return;
  }
  char v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v2 - 16);
  if (v7)
  {
    uint64_t v8 = *((void *)a2 + 19);
    uint64_t v9 = *(std::__shared_weak_count **)(v8 - 8);
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
    *((void *)a2 + 19) = v8 - 16;
    std::mutex::lock((std::mutex *)(v7 + 8));
    uint64_t v10 = *(void *)(v7 + 120);
    if (v10)
    {
      unint64_t v11 = *(void *)(v7 + 112);
      uint64_t v12 = (v11 >> 6) & 0x3FFFFFFFFFFFFF8;
      uint64_t v13 = *(void *)(*(void *)(v7 + 88) + v12);
      uint64_t v14 = *(void *)(v13 + 8 * (v11 & 0x1FF));
      *(void *)(v13 + 8 * (v11 & 0x1FF)) = 0;
      uint64_t v15 = *(void *)(*(void *)(v7 + 88) + v12);
      uint64_t v16 = *(void *)(v15 + 8 * (v11 & 0x1FF));
      *(void *)(v15 + 8 * (v11 & 0x1FF)) = 0;
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        unint64_t v11 = *(void *)(v7 + 112);
        uint64_t v10 = *(void *)(v7 + 120);
      }
      unint64_t v17 = v11 + 1;
      *(void *)(v7 + 112) = v17;
      *(void *)(v7 + 120) = v10 - 1;
      if (v17 >= 0x400)
      {
        operator delete(**(void ***)(v7 + 88));
        *(void *)(v7 + 88) += 8;
        *(void *)(v7 + 112) -= 512;
      }
      std::mutex::unlock((std::mutex *)(v7 + 8));
      std::__shared_weak_count::__release_shared[abi:nn180100](v6);
      if (v14)
      {
        *(_DWORD *)(v14 + 136) = 1;
        operator new();
      }
      return;
    }
    *(unsigned char *)(v7 + 72) = 0;
    std::mutex::unlock((std::mutex *)(v7 + 8));
  }
  std::__shared_weak_count::__release_shared[abi:nn180100](v6);
}

void llvm::make_error<llvm::orc::SymbolsNotFound,std::shared_ptr<llvm::orc::SymbolStringPool>,std::vector<llvm::orc::SymbolStringPtr>>()
{
}

void *llvm::orc::SymbolLookupSet::getSymbolNames(llvm::orc::SymbolLookupSet *this, uint64_t **a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t result = (void *)std::vector<llvm::orc::SymbolStringPtr>::reserve((char **)this, ((char *)a2[1] - (char *)*a2) >> 4);
  char v5 = *a2;
  uint64_t v6 = a2[1];
  if (v5 != v6)
  {
    uint64_t result = (void *)*((void *)this + 1);
    do
    {
      if ((unint64_t)result >= *((void *)this + 2))
      {
        uint64_t result = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>((char **)this, v5);
      }
      else
      {
        uint64_t v7 = *v5;
        *uint64_t result = *v5;
        if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL) {
          atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 1uLL);
        }
        ++result;
      }
      *((void *)this + 1) = result;
      v5 += 2;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t llvm::orc::ExecutionSession::simplifyDepGroups@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  uint64_t v120 = *a1;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (a3)
  {
    unint64_t v8 = (4 * (int)a3 / 3u + 1) | ((unint64_t)(4 * (int)a3 / 3u + 1) >> 1);
    unint64_t v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
    llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::grow(a4, (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1);
    uint64_t v129 = 0;
    uint64_t v130 = 0;
    unsigned int v131 = 0;
    uint64_t v122 = v5 + 48 * a3;
  }
  else
  {
    uint64_t v129 = 0;
    uint64_t v130 = 0;
    unsigned int v131 = 0;
    uint64_t v122 = a2 + 48 * a3;
    if (!a3)
    {
      char v28 = 1;
      goto LABEL_20;
    }
  }
  uint64_t v119 = v6;
  uint64_t v10 = (uint64_t)(v6 + 2);
  uint64_t v11 = v5;
  do
  {
    if (*(_DWORD *)(v11 + 32))
    {
      uint64_t v12 = operator new(0x50uLL);
      v12[1] = 0;
      void v12[2] = 0;
      *uint64_t v12 = &unk_270DBDE30;
      void v12[3] = v120;
      _OWORD v12[4] = 0;
      v12[5] = 0;
      *((_DWORD *)v12 + 12) = 0;
      v12[7] = 0;
      v12[8] = 0;
      *((_DWORD *)v12 + 18) = 0;
      *(void *)&v128[0] = v12 + 3;
      uint64_t v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(a4, (uint64_t *)v128);
      uint64_t v14 = (std::__shared_weak_count *)v13[2];
      v13[1] = v12 + 3;
      v13[2] = v12;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v14);
      }
      uint64_t v15 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v11);
      uint64_t v17 = *(void *)v11 + 8 * *(unsigned int *)(v11 + 16);
      if ((uint64_t *)v17 != v15)
      {
        uint64_t v18 = v15;
        uint64_t v19 = v16;
        do
        {
          v134[0] = *v18;
          uint64_t v20 = v134[0];
          uint64_t v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::find(v10, v18);
          uint64_t v22 = v13[1];
          uint64_t v24 = *(void *)(v22 + 8);
          uint64_t v23 = v22 + 8;
          *(void *)&v128[0] = 0;
          char v25 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v24, *(_DWORD *)(v23 + 16), v20, v128);
          uint64_t v26 = *(void **)&v128[0];
          if ((v25 & 1) == 0)
          {
            uint64_t v26 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucketImpl<llvm::orc::NonOwningSymbolStringPtr>(v23, v134, *(void **)&v128[0]);
            *uint64_t v26 = v20;
            *((_WORD *)v26 + 4) = 0;
          }
          *((_WORD *)v26 + 4) = *(_WORD *)(v21 + 8);
          uint64_t v27 = v13[1];
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>::FindAndConstruct((uint64_t)&v129, v134)[1] = v27;
          while (++v18 != v19)
          {
            if ((*v18 | 8) != 0xFFFFFFFFFFFFFFF8) {
              goto LABEL_17;
            }
          }
          uint64_t v18 = v19;
LABEL_17:
          ;
        }
        while (v18 != (uint64_t *)v17);
      }
    }
    v11 += 48;
  }
  while (v11 != v122);
  char v28 = 0;
  uint64_t v6 = v119;
LABEL_20:
  memset(v128, 0, 20);
  uint64_t v31 = v6[2];
  uint64_t v30 = v6 + 2;
  uint64_t v29 = v31;
  if (!*((_DWORD *)v30 + 2)) {
    goto LABEL_57;
  }
  uint64_t v32 = *((unsigned int *)v30 + 4);
  if (v32)
  {
    uint64_t v33 = 16 * v32;
    uint64_t v34 = v29;
    while ((*(void *)v34 | 8) == 0xFFFFFFFFFFFFFFF8)
    {
      v34 += 16;
      v33 -= 16;
      if (!v33) {
        goto LABEL_57;
      }
    }
  }
  else
  {
    uint64_t v34 = v29;
  }
  uint64_t v35 = v29 + 16 * v32;
  if (v34 == v35)
  {
LABEL_57:
    uint64_t v48 = 0;
    goto LABEL_58;
  }
  uint64_t v36 = v129;
  int v37 = v131;
  uint64_t v38 = *(void *)v34;
LABEL_29:
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v36, v37, v38, v134) & 1) == 0)
  {
    uint64_t v133 = *(void *)v34;
    uint64_t v39 = v133;
    v134[0] = 0;
    char v40 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(uint64_t *)&v128[0], v128[1], v133, v134);
    uint64_t v41 = (void *)v134[0];
    if ((v40 & 1) == 0)
    {
      uint64_t v41 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucketImpl<llvm::orc::NonOwningSymbolStringPtr>((uint64_t)v128, &v133, (void *)v134[0]);
      void *v41 = v39;
      *((_WORD *)v41 + 4) = 0;
    }
    *((_WORD *)v41 + 4) = *(_WORD *)(v34 + 8);
  }
  while (1)
  {
    v34 += 16;
    if (v34 == v35) {
      break;
    }
    uint64_t v38 = *(void *)v34;
    if ((*(void *)v34 | 8) != 0xFFFFFFFFFFFFFFF8)
    {
      if (v34 != v35) {
        goto LABEL_29;
      }
      break;
    }
  }
  int v42 = DWORD2(v128[0]);
  if (DWORD2(v128[0]))
  {
    uint64_t v43 = operator new(0x50uLL);
    v43[1] = 0;
    int v43[2] = 0;
    *uint64_t v43 = &unk_270DBDE30;
    v43[3] = v120;
    v43[4] = 0;
    v43[5] = 0;
    *((_DWORD *)v43 + 12) = 0;
    void v43[7] = 0;
    unsigned char v43[8] = 0;
    *((_DWORD *)v43 + 18) = 0;
    MEMORY[0x263E500A0](0, 8);
    v43[4] = *(void *)&v128[0];
    *((_DWORD *)v43 + 10) = v42;
    uint64_t v44 = *(void *)((char *)v128 + 12);
    v128[0] = 0uLL;
    *(void *)((char *)v43 + 44) = v44;
    LODWORD(v128[1]) = 0;
    v134[0] = (uint64_t)(v43 + 3);
    uint64_t v45 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(a4, v134);
    uint64_t v46 = (std::__shared_weak_count *)v45[2];
    v45[1] = v43 + 3;
    v45[2] = v43;
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v46);
    }
    if (*(_DWORD *)(a4 + 8) == 1)
    {
      MEMORY[0x263E500A0](0, 8);
      uint64_t v47 = v36;
      return MEMORY[0x263E500A0](v47, 8);
    }
    uint64_t v49 = v45[1];
    if (*(_DWORD *)(v49 + 16))
    {
      unsigned int v50 = *(uint64_t **)(v49 + 8);
      uint64_t v51 = *(unsigned int *)(v49 + 24);
      if (v51)
      {
        uint64_t v52 = 16 * v51;
        unint64_t v53 = v50;
        while ((*v53 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          uint64_t v48 = 0;
          v53 += 2;
          v52 -= 16;
          if (!v52) {
            goto LABEL_58;
          }
        }
      }
      else
      {
        unint64_t v53 = v50;
      }
      int v54 = &v50[2 * v51];
      if (v53 != v54)
      {
        while (1)
        {
          uint64_t v55 = v45[1];
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>::FindAndConstruct((uint64_t)&v129, v53)[1] = v55;
          v53 += 2;
          if (v53 == v54) {
            break;
          }
          while ((*v53 | 8) == 0xFFFFFFFFFFFFFFF8)
          {
            uint64_t v48 = 0;
            v53 += 2;
            if (v53 == v54) {
              goto LABEL_58;
            }
          }
          uint64_t v48 = 0;
          if (v53 == v54) {
            goto LABEL_58;
          }
        }
      }
    }
    goto LABEL_57;
  }
  uint64_t v48 = *(void *)&v128[0];
LABEL_58:
  MEMORY[0x263E500A0](v48, 8);
  if ((v28 & 1) == 0)
  {
    do
    {
      if (*(_DWORD *)(v5 + 32))
      {
        uint64_t v56 = *llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v5);
        *(void *)&v128[0] = 0;
        uint64_t v57 = v129;
        uint64_t v58 = v131;
        int v59 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v129, v131, v56, v128);
        uint64_t v60 = *(void *)&v128[0];
        if (!v59) {
          uint64_t v60 = v57 + 16 * v58;
        }
        if (*(_DWORD *)(v5 + 32))
        {
          uint64_t v61 = *(void *)(v60 + 8);
          uint64_t v62 = *(unsigned int *)(v5 + 40);
          if (v62)
          {
            uint64_t v63 = 32 * v62;
            uint64_t v64 = *(uint64_t **)(v5 + 24);
            while ((*v64 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v64 += 4;
              v63 -= 32;
              if (!v63) {
                goto LABEL_102;
              }
            }
          }
          else
          {
            uint64_t v64 = *(uint64_t **)(v5 + 24);
          }
          uint64_t v65 = *(void *)(v5 + 24) + 32 * v62;
          if (v64 != (uint64_t *)v65)
          {
LABEL_70:
            memset(v134, 0, 20);
            uint64_t v66 = *v64;
            std::string v67 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin((uint64_t)(v64 + 1));
            uint64_t v68 = v67;
            uint64_t v70 = v69;
            uint64_t v71 = v64[1] + 8 * *((unsigned int *)v64 + 6);
            if (v66 == v120)
            {
              if ((uint64_t *)v71 != v67)
              {
                do
                {
                  uint64_t v133 = *v68;
                  *(void *)&v128[0] = 0;
                  uint64_t v73 = v129;
                  uint64_t v74 = v131;
                  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v129, v131, v133, v128))BOOL v75 = *(void *)&v128[0] == v73 + 16 * v74; {
                  else
                  }
                    BOOL v75 = 1;
                  if (v75)
                  {
                    *(void *)&v128[0] = 0;
                    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v30, v68, v128) & 1) == 0)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v128, (uint64_t)v134, &v133); {
                  }
                    }
                  else if (*(void *)(*(void *)&v128[0] + 8) != v61)
                  {
                    unint64_t v76 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(a4, (uint64_t *)(*(void *)&v128[0] + 8));
                    uint64_t v132 = v61;
                    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v128, (uint64_t)(v76 + 3), &v132);
                  }
                  while (++v68 != v70)
                  {
                    if ((*v68 | 8) != 0xFFFFFFFFFFFFFFF8) {
                      goto LABEL_94;
                    }
                  }
                  uint64_t v68 = v70;
LABEL_94:
                  ;
                }
                while (v68 != (uint64_t *)v71);
              }
            }
            else if ((uint64_t *)v71 != v67)
            {
              do
              {
                uint64_t v133 = *v68;
                uint64_t v72 = v133;
                *(void *)&v128[0] = 0;
                if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::LookupBucketFor<llvm::orc::NonOwningSymbolStringPtr>(v134[0], v134[2], v133, v128) & 1) == 0)*llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::NonOwningSymbolStringPtr>((uint64_t)v134, &v133, *(void **)&v128[0]) = v72; {
                while (++v68 != v70)
                }
                {
                  if ((*v68 | 8) != 0xFFFFFFFFFFFFFFF8) {
                    goto LABEL_78;
                  }
                }
                uint64_t v68 = v70;
LABEL_78:
                ;
              }
              while (v68 != (uint64_t *)v71);
            }
            int v77 = v134[1];
            if (LODWORD(v134[1]))
            {
              unint64_t v78 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(v61 + 32, v64);
              MEMORY[0x263E500A0](v78[1], 8);
              uint64_t v79 = 0;
              v78[1] = v134[0];
              *((_DWORD *)v78 + 4) = v77;
              uint64_t v80 = *(uint64_t *)((char *)&v134[1] + 4);
              v134[0] = 0;
              v134[1] = 0;
              *(void *)((char *)v78 + 20) = v80;
            }
            else
            {
              uint64_t v79 = v134[0];
            }
            MEMORY[0x263E500A0](v79, 8);
            while (1)
            {
              v64 += 4;
              if (v64 == (uint64_t *)v65) {
                break;
              }
              if ((*v64 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if (v64 != (uint64_t *)v65) {
                  goto LABEL_70;
                }
                break;
              }
            }
          }
        }
      }
LABEL_102:
      v5 += 48;
    }
    while (v5 != v122);
  }
  memset(v128, 0, sizeof(v128));
  uint64_t v81 = a4;
  if (*(_DWORD *)(a4 + 8))
  {
    uint64_t v82 = *(void *)a4;
    uint64_t v83 = *(unsigned int *)(a4 + 16);
    uint64_t v84 = *(uint64_t **)a4;
    if (v83)
    {
      uint64_t v85 = 72 * v83;
      uint64_t v84 = *(uint64_t **)a4;
      while ((*v84 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v84 += 9;
        v85 -= 72;
        if (!v85) {
          goto LABEL_121;
        }
      }
    }
    uint64_t v86 = (uint64_t *)(v82 + 72 * v83);
    if (v84 != v86)
    {
      uint64_t v87 = *v84;
LABEL_111:
      if (*(_DWORD *)(v87 + 40))
      {
        v134[0] = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(v82, v83, v87, v134))
        {
          if ((uint64_t *)v134[0] != v86 && *(_DWORD *)(v134[0] + 32))
          {
            uint64_t v88 = *v84 + 32;
            if (v88 != v134[0] + 48) {
              llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::copyFrom(v134[0] + 48, v88);
            }
            std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::push_back(v128, v84);
          }
        }
      }
      while (1)
      {
        v84 += 9;
        if (v84 == v86) {
          break;
        }
        uint64_t v87 = *v84;
        if ((*v84 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v84 != v86) {
            goto LABEL_111;
          }
          break;
        }
      }
    }
  }
LABEL_121:
  std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::deque((uint64_t)&v124, v128);
  for (uint64_t i = v127; v127; uint64_t i = v127)
  {
    uint64_t v90 = (*(void **)((char *)v125 + ((v126 >> 6) & 0x3FFFFFFFFFFFFF8)))[v126 & 0x1FF];
    ++v126;
    uint64_t v127 = i - 1;
    if (v126 >= 0x400)
    {
      operator delete(*v125++);
      v126 -= 512;
    }
    v134[0] = v90;
    unint64_t v91 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(v81, v134);
    unint64_t v92 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v91 + 3));
    uint64_t v94 = v91[3];
    uint64_t v95 = (uint64_t *)(v94 + 8 * *((unsigned int *)v91 + 10));
    if (v95 != v92)
    {
      unint64_t v96 = v92;
      uint64_t v97 = v93;
      uint64_t v116 = (uint64_t *)(v94 + 8 * *((unsigned int *)v91 + 10));
      unint64_t v117 = v91;
      do
      {
        uint64_t v133 = 0;
        uint64_t v133 = *v96;
        v134[0] = 0;
        uint64_t v98 = *(void *)v81;
        unsigned int v99 = *(_DWORD *)(v81 + 16);
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)v81, v99, v133, v134))uint64_t v100 = v134[0]; {
        else
        }
          uint64_t v100 = v98 + 72 * v99;
        uint64_t v101 = v100 + 8;
        if (v100 == v98 + 72 * v99) {
          uint64_t v101 = 0;
        }
        uint64_t v121 = v101;
        uint64_t v123 = v98 + 72 * v99;
        if (*((_DWORD *)v91 + 14))
        {
          uint64_t v102 = *((unsigned int *)v91 + 16);
          if (v102)
          {
            uint64_t v103 = 32 * v102;
            uint64_t v104 = v91[6];
            while ((*(void *)v104 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v104 += 32;
              v103 -= 32;
              if (!v103) {
                goto LABEL_160;
              }
            }
          }
          else
          {
            uint64_t v104 = v91[6];
          }
          uint64_t v105 = v91[6] + 32 * v102;
          if (v104 == v105) {
            goto LABEL_160;
          }
          do
          {
            uint64_t v106 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(v133 + 32, (uint64_t *)v104);
            uint64_t v107 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v104 + 8);
            uint64_t v109 = *(void *)(v104 + 8) + 8 * *(unsigned int *)(v104 + 24);
            if ((uint64_t *)v109 != v107)
            {
              uint64_t v110 = v107;
              uint64_t v111 = v108;
              unint64_t v112 = 0;
              uint64_t v113 = (uint64_t)(v106 + 1);
              do
              {
                uint64_t v132 = *v110;
                llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v134, v113, &v132);
                if (LOBYTE(v134[2])) {
                  BOOL v114 = v100 == v123;
                }
                else {
                  BOOL v114 = 1;
                }
                if (!v114)
                {
                  if (!v112)
                  {
                    if (!*(_DWORD *)(v121 + 48)) {
                      std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::push_back(&v124, &v133);
                    }
                    unint64_t v112 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(v121 + 40, (uint64_t *)v104)+ 1;
                  }
                  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v134, (uint64_t)v112, &v132);
                }
                while (++v110 != v111)
                {
                  if ((*v110 | 8) != 0xFFFFFFFFFFFFFFF8) {
                    goto LABEL_154;
                  }
                }
                uint64_t v110 = v111;
LABEL_154:
                ;
              }
              while (v110 != (uint64_t *)v109);
            }
            v104 += 32;
            unint64_t v91 = v117;
            uint64_t v81 = a4;
            uint64_t v95 = v116;
            if (v104 == v105) {
              break;
            }
            while ((*(void *)v104 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v104 += 32;
              if (v104 == v105) {
                goto LABEL_160;
              }
            }
          }
          while (v104 != v105);
        }
LABEL_160:
        while (++v96 != v97)
        {
          if ((*v96 | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_164;
          }
        }
        unint64_t v96 = v97;
LABEL_164:
        ;
      }
      while (v96 != v95);
    }
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::clear((uint64_t)(v91 + 6));
  }
  std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::~deque[abi:nn180100]((uint64_t)&v124);
  std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::~deque[abi:nn180100]((uint64_t)v128);
  uint64_t v47 = v129;
  return MEMORY[0x263E500A0](v47, 8);
}